{"name":"negPart_def","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : AddGroup α\na : α\n⊢ Eq (NegPart.negPart a) (Max.max (Neg.neg a) 0)","decl":"@[to_additive] lemma leOnePart_def (a : α) : a⁻ᵐ = a⁻¹ ⊔ 1 := rfl\n\n"}
{"name":"leOnePart_def","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : Group α\na : α\n⊢ Eq (LeOnePart.leOnePart a) (Max.max (Inv.inv a) 1)","decl":"@[to_additive] lemma leOnePart_def (a : α) : a⁻ᵐ = a⁻¹ ⊔ 1 := rfl\n\n"}
{"name":"posPart_def","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : AddGroup α\na : α\n⊢ Eq (PosPart.posPart a) (Max.max a 0)","decl":"@[to_additive] lemma oneLePart_def (a : α) : a⁺ᵐ = a ⊔ 1 := rfl\n\n"}
{"name":"oneLePart_def","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : Group α\na : α\n⊢ Eq (OneLePart.oneLePart a) (Max.max a 1)","decl":"@[to_additive] lemma oneLePart_def (a : α) : a⁺ᵐ = a ⊔ 1 := rfl\n\n"}
{"name":"posPart_mono","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : AddGroup α\n⊢ Monotone fun x => PosPart.posPart x","decl":"@[to_additive] lemma oneLePart_mono : Monotone (·⁺ᵐ : α → α) :=\n  fun _a _b hab ↦ sup_le_sup_right hab _\n\n"}
{"name":"oneLePart_mono","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : Group α\n⊢ Monotone fun x => OneLePart.oneLePart x","decl":"@[to_additive] lemma oneLePart_mono : Monotone (·⁺ᵐ : α → α) :=\n  fun _a _b hab ↦ sup_le_sup_right hab _\n\n"}
{"name":"oneLePart_one","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : Group α\n⊢ Eq (OneLePart.oneLePart 1) 1","decl":"@[to_additive (attr := simp high)] lemma oneLePart_one : (1 : α)⁺ᵐ = 1 := sup_idem _\n\n"}
{"name":"posPart_zero","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : AddGroup α\n⊢ Eq (PosPart.posPart 0) 0","decl":"@[to_additive (attr := simp high)] lemma oneLePart_one : (1 : α)⁺ᵐ = 1 := sup_idem _\n\n"}
{"name":"negPart_zero","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : AddGroup α\n⊢ Eq (NegPart.negPart 0) 0","decl":"@[to_additive (attr := simp)] lemma leOnePart_one : (1 : α)⁻ᵐ = 1 := by simp [leOnePart]\n\n"}
{"name":"leOnePart_one","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : Group α\n⊢ Eq (LeOnePart.leOnePart 1) 1","decl":"@[to_additive (attr := simp)] lemma leOnePart_one : (1 : α)⁻ᵐ = 1 := by simp [leOnePart]\n\n"}
{"name":"posPart_nonneg","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : AddGroup α\na : α\n⊢ LE.le 0 (PosPart.posPart a)","decl":"@[to_additive posPart_nonneg] lemma one_le_oneLePart (a : α) : 1 ≤ a⁺ᵐ := le_sup_right\n\n"}
{"name":"one_le_oneLePart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : Group α\na : α\n⊢ LE.le 1 (OneLePart.oneLePart a)","decl":"@[to_additive posPart_nonneg] lemma one_le_oneLePart (a : α) : 1 ≤ a⁺ᵐ := le_sup_right\n\n"}
{"name":"one_le_leOnePart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : Group α\na : α\n⊢ LE.le 1 (LeOnePart.leOnePart a)","decl":"@[to_additive negPart_nonneg] lemma one_le_leOnePart (a : α) : 1 ≤ a⁻ᵐ := le_sup_right\n\n-- TODO: `to_additive` guesses `nonposPart`\n"}
{"name":"negPart_nonneg","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : AddGroup α\na : α\n⊢ LE.le 0 (NegPart.negPart a)","decl":"@[to_additive negPart_nonneg] lemma one_le_leOnePart (a : α) : 1 ≤ a⁻ᵐ := le_sup_right\n\n-- TODO: `to_additive` guesses `nonposPart`\n"}
{"name":"le_oneLePart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : Group α\na : α\n⊢ LE.le a (OneLePart.oneLePart a)","decl":"@[to_additive le_posPart] lemma le_oneLePart (a : α) : a ≤ a⁺ᵐ := le_sup_left\n\n"}
{"name":"le_posPart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : AddGroup α\na : α\n⊢ LE.le a (PosPart.posPart a)","decl":"@[to_additive le_posPart] lemma le_oneLePart (a : α) : a ≤ a⁺ᵐ := le_sup_left\n\n"}
{"name":"inv_le_leOnePart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : Group α\na : α\n⊢ LE.le (Inv.inv a) (LeOnePart.leOnePart a)","decl":"@[to_additive] lemma inv_le_leOnePart (a : α) : a⁻¹ ≤ a⁻ᵐ := le_sup_left\n\n"}
{"name":"neg_le_negPart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : AddGroup α\na : α\n⊢ LE.le (Neg.neg a) (NegPart.negPart a)","decl":"@[to_additive] lemma inv_le_leOnePart (a : α) : a⁻¹ ≤ a⁻ᵐ := le_sup_left\n\n"}
{"name":"oneLePart_eq_self","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : Group α\na : α\n⊢ Iff (Eq (OneLePart.oneLePart a) a) (LE.le 1 a)","decl":"@[to_additive (attr := simp)] lemma oneLePart_eq_self : a⁺ᵐ = a ↔ 1 ≤ a := sup_eq_left\n"}
{"name":"posPart_eq_self","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : AddGroup α\na : α\n⊢ Iff (Eq (PosPart.posPart a) a) (LE.le 0 a)","decl":"@[to_additive (attr := simp)] lemma oneLePart_eq_self : a⁺ᵐ = a ↔ 1 ≤ a := sup_eq_left\n"}
{"name":"oneLePart_eq_one","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : Group α\na : α\n⊢ Iff (Eq (OneLePart.oneLePart a) 1) (LE.le a 1)","decl":"@[to_additive (attr := simp)] lemma oneLePart_eq_one : a⁺ᵐ = 1 ↔ a ≤ 1 := sup_eq_right\n\n"}
{"name":"posPart_eq_zero","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : AddGroup α\na : α\n⊢ Iff (Eq (PosPart.posPart a) 0) (LE.le a 0)","decl":"@[to_additive (attr := simp)] lemma oneLePart_eq_one : a⁺ᵐ = 1 ↔ a ≤ 1 := sup_eq_right\n\n"}
{"name":"oneLePart_of_one_le","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : Group α\na : α\na✝ : LE.le 1 a\n⊢ Eq (OneLePart.oneLePart a) a","decl":"@[to_additive (attr := simp)] alias ⟨_, oneLePart_of_one_le⟩ := oneLePart_eq_self\n"}
{"name":"posPart_of_nonneg","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : AddGroup α\na : α\na✝ : LE.le 0 a\n⊢ Eq (PosPart.posPart a) a","decl":"@[to_additive (attr := simp)] alias ⟨_, oneLePart_of_one_le⟩ := oneLePart_eq_self\n"}
{"name":"posPart_of_nonpos","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : AddGroup α\na : α\na✝ : LE.le a 0\n⊢ Eq (PosPart.posPart a) 0","decl":"@[to_additive (attr := simp)] alias ⟨_, oneLePart_of_le_one⟩ := oneLePart_eq_one\n\n"}
{"name":"oneLePart_of_le_one","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : Group α\na : α\na✝ : LE.le a 1\n⊢ Eq (OneLePart.oneLePart a) 1","decl":"@[to_additive (attr := simp)] alias ⟨_, oneLePart_of_le_one⟩ := oneLePart_eq_one\n\n"}
{"name":"negPart_eq_neg'","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : AddGroup α\na : α\n⊢ Iff (Eq (NegPart.negPart a) (Neg.neg a)) (LE.le 0 (Neg.neg a))","decl":"/-- See also `leOnePart_eq_inv`. -/\n@[to_additive \"See also `negPart_eq_neg`.\"]\nlemma leOnePart_eq_inv' : a⁻ᵐ = a⁻¹ ↔ 1 ≤ a⁻¹ := sup_eq_left\n\n"}
{"name":"leOnePart_eq_inv'","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : Group α\na : α\n⊢ Iff (Eq (LeOnePart.leOnePart a) (Inv.inv a)) (LE.le 1 (Inv.inv a))","decl":"/-- See also `leOnePart_eq_inv`. -/\n@[to_additive \"See also `negPart_eq_neg`.\"]\nlemma leOnePart_eq_inv' : a⁻ᵐ = a⁻¹ ↔ 1 ≤ a⁻¹ := sup_eq_left\n\n"}
{"name":"leOnePart_eq_one'","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : Group α\na : α\n⊢ Iff (Eq (LeOnePart.leOnePart a) 1) (LE.le (Inv.inv a) 1)","decl":"/-- See also `leOnePart_eq_one`. -/\n@[to_additive \"See also `negPart_eq_zero`.\"]\nlemma leOnePart_eq_one' : a⁻ᵐ = 1 ↔ a⁻¹ ≤ 1 := sup_eq_right\n\n"}
{"name":"negPart_eq_zero'","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : AddGroup α\na : α\n⊢ Iff (Eq (NegPart.negPart a) 0) (LE.le (Neg.neg a) 0)","decl":"/-- See also `leOnePart_eq_one`. -/\n@[to_additive \"See also `negPart_eq_zero`.\"]\nlemma leOnePart_eq_one' : a⁻ᵐ = 1 ↔ a⁻¹ ≤ 1 := sup_eq_right\n\n"}
{"name":"posPart_nonpos","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : AddGroup α\na : α\n⊢ Iff (LE.le (PosPart.posPart a) 0) (LE.le a 0)","decl":"@[to_additive] lemma oneLePart_le_one : a⁺ᵐ ≤ 1 ↔ a ≤ 1 := by simp [oneLePart]\n\n"}
{"name":"oneLePart_le_one","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : Group α\na : α\n⊢ Iff (LE.le (OneLePart.oneLePart a) 1) (LE.le a 1)","decl":"@[to_additive] lemma oneLePart_le_one : a⁺ᵐ ≤ 1 ↔ a ≤ 1 := by simp [oneLePart]\n\n"}
{"name":"leOnePart_le_one'","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : Group α\na : α\n⊢ Iff (LE.le (LeOnePart.leOnePart a) 1) (LE.le (Inv.inv a) 1)","decl":"/-- See also `leOnePart_le_one`. -/\n@[to_additive \"See also `negPart_nonpos`.\"]\nlemma leOnePart_le_one' : a⁻ᵐ ≤ 1 ↔ a⁻¹ ≤ 1 := by simp [leOnePart]\n\n"}
{"name":"negPart_nonpos'","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : AddGroup α\na : α\n⊢ Iff (LE.le (NegPart.negPart a) 0) (LE.le (Neg.neg a) 0)","decl":"/-- See also `leOnePart_le_one`. -/\n@[to_additive \"See also `negPart_nonpos`.\"]\nlemma leOnePart_le_one' : a⁻ᵐ ≤ 1 ↔ a⁻¹ ≤ 1 := by simp [leOnePart]\n\n"}
{"name":"negPart_nonpos","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : AddGroup α\na : α\n⊢ Iff (LE.le (NegPart.negPart a) 0) (LE.le (Neg.neg a) 0)","decl":"@[to_additive] lemma leOnePart_le_one : a⁻ᵐ ≤ 1 ↔ a⁻¹ ≤ 1 := by simp [leOnePart]\n\n"}
{"name":"leOnePart_le_one","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : Group α\na : α\n⊢ Iff (LE.le (LeOnePart.leOnePart a) 1) (LE.le (Inv.inv a) 1)","decl":"@[to_additive] lemma leOnePart_le_one : a⁻ᵐ ≤ 1 ↔ a⁻¹ ≤ 1 := by simp [leOnePart]\n\n"}
{"name":"posPart_pos","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : AddGroup α\na : α\nha : LT.lt 0 a\n⊢ LT.lt 0 (PosPart.posPart a)","decl":"@[to_additive (attr := simp) posPart_pos] lemma one_lt_oneLePart (ha : 1 < a) : 1 < a⁺ᵐ := by\n  rwa [oneLePart_eq_self.2 ha.le]\n\n"}
{"name":"one_lt_oneLePart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : Group α\na : α\nha : LT.lt 1 a\n⊢ LT.lt 1 (OneLePart.oneLePart a)","decl":"@[to_additive (attr := simp) posPart_pos] lemma one_lt_oneLePart (ha : 1 < a) : 1 < a⁺ᵐ := by\n  rwa [oneLePart_eq_self.2 ha.le]\n\n"}
{"name":"posPart_neg","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : AddGroup α\na : α\n⊢ Eq (PosPart.posPart (Neg.neg a)) (NegPart.negPart a)","decl":"@[to_additive (attr := simp)] lemma oneLePart_inv (a : α) : a⁻¹⁺ᵐ = a⁻ᵐ := rfl\n\n"}
{"name":"oneLePart_inv","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : Group α\na : α\n⊢ Eq (OneLePart.oneLePart (Inv.inv a)) (LeOnePart.leOnePart a)","decl":"@[to_additive (attr := simp)] lemma oneLePart_inv (a : α) : a⁻¹⁺ᵐ = a⁻ᵐ := rfl\n\n"}
{"name":"negPart_neg","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : AddGroup α\na : α\n⊢ Eq (NegPart.negPart (Neg.neg a)) (PosPart.posPart a)","decl":"@[to_additive (attr := simp)] lemma leOnePart_inv (a : α) : a⁻¹⁻ᵐ = a⁺ᵐ := by\n  simp [oneLePart, leOnePart]\n\n"}
{"name":"leOnePart_inv","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : Group α\na : α\n⊢ Eq (LeOnePart.leOnePart (Inv.inv a)) (OneLePart.oneLePart a)","decl":"@[to_additive (attr := simp)] lemma leOnePart_inv (a : α) : a⁻¹⁻ᵐ = a⁺ᵐ := by\n  simp [oneLePart, leOnePart]\n\n"}
{"name":"leOnePart_eq_inv","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : Group α\na : α\ninst✝ : MulLeftMono α\n⊢ Iff (Eq (LeOnePart.leOnePart a) (Inv.inv a)) (LE.le a 1)","decl":"@[to_additive (attr := simp)] lemma leOnePart_eq_inv : a⁻ᵐ = a⁻¹ ↔ a ≤ 1 := by simp [leOnePart]\n\n"}
{"name":"negPart_eq_neg","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddGroup α\na : α\ninst✝ : AddLeftMono α\n⊢ Iff (Eq (NegPart.negPart a) (Neg.neg a)) (LE.le a 0)","decl":"@[to_additive (attr := simp)] lemma leOnePart_eq_inv : a⁻ᵐ = a⁻¹ ↔ a ≤ 1 := by simp [leOnePart]\n\n"}
{"name":"negPart_eq_zero","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddGroup α\na : α\ninst✝ : AddLeftMono α\n⊢ Iff (Eq (NegPart.negPart a) 0) (LE.le 0 a)","decl":"@[to_additive (attr := simp)]\nlemma leOnePart_eq_one : a⁻ᵐ = 1 ↔ 1 ≤ a := by simp [leOnePart_eq_one']\n\n"}
{"name":"leOnePart_eq_one","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : Group α\na : α\ninst✝ : MulLeftMono α\n⊢ Iff (Eq (LeOnePart.leOnePart a) 1) (LE.le 1 a)","decl":"@[to_additive (attr := simp)]\nlemma leOnePart_eq_one : a⁻ᵐ = 1 ↔ 1 ≤ a := by simp [leOnePart_eq_one']\n\n"}
{"name":"negPart_of_nonpos","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddGroup α\na : α\ninst✝ : AddLeftMono α\na✝ : LE.le a 0\n⊢ Eq (NegPart.negPart a) (Neg.neg a)","decl":"@[to_additive (attr := simp)] alias ⟨_, leOnePart_of_le_one⟩ := leOnePart_eq_inv\n"}
{"name":"leOnePart_of_le_one","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : Group α\na : α\ninst✝ : MulLeftMono α\na✝ : LE.le a 1\n⊢ Eq (LeOnePart.leOnePart a) (Inv.inv a)","decl":"@[to_additive (attr := simp)] alias ⟨_, leOnePart_of_le_one⟩ := leOnePart_eq_inv\n"}
{"name":"leOnePart_of_one_le","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : Group α\na : α\ninst✝ : MulLeftMono α\na✝ : LE.le 1 a\n⊢ Eq (LeOnePart.leOnePart a) 1","decl":"@[to_additive (attr := simp)] alias ⟨_, leOnePart_of_one_le⟩ := leOnePart_eq_one\n\n"}
{"name":"negPart_of_nonneg","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddGroup α\na : α\ninst✝ : AddLeftMono α\na✝ : LE.le 0 a\n⊢ Eq (NegPart.negPart a) 0","decl":"@[to_additive (attr := simp)] alias ⟨_, leOnePart_of_one_le⟩ := leOnePart_eq_one\n\n"}
{"name":"negPart_pos","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddGroup α\na : α\ninst✝ : AddLeftMono α\nha : LT.lt a 0\n⊢ LT.lt 0 (NegPart.negPart a)","decl":"@[to_additive (attr := simp) negPart_pos] lemma one_lt_ltOnePart (ha : a < 1) : 1 < a⁻ᵐ := by\n  rwa [leOnePart_eq_inv.2 ha.le, one_lt_inv']\n\n-- Bourbaki A.VI.12 Prop 9 a)\n"}
{"name":"one_lt_ltOnePart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : Group α\na : α\ninst✝ : MulLeftMono α\nha : LT.lt a 1\n⊢ LT.lt 1 (LeOnePart.leOnePart a)","decl":"@[to_additive (attr := simp) negPart_pos] lemma one_lt_ltOnePart (ha : a < 1) : 1 < a⁻ᵐ := by\n  rwa [leOnePart_eq_inv.2 ha.le, one_lt_inv']\n\n-- Bourbaki A.VI.12 Prop 9 a)\n"}
{"name":"posPart_sub_negPart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddGroup α\ninst✝ : AddLeftMono α\na : α\n⊢ Eq (HSub.hSub (PosPart.posPart a) (NegPart.negPart a)) a","decl":"@[to_additive (attr := simp)] lemma oneLePart_div_leOnePart (a : α) : a⁺ᵐ / a⁻ᵐ = a := by\n  rw [div_eq_mul_inv, mul_inv_eq_iff_eq_mul, leOnePart_def, mul_sup, mul_one, mul_inv_cancel,\n    sup_comm, oneLePart_def]\n\n"}
{"name":"oneLePart_div_leOnePart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : Group α\ninst✝ : MulLeftMono α\na : α\n⊢ Eq (HDiv.hDiv (OneLePart.oneLePart a) (LeOnePart.leOnePart a)) a","decl":"@[to_additive (attr := simp)] lemma oneLePart_div_leOnePart (a : α) : a⁺ᵐ / a⁻ᵐ = a := by\n  rw [div_eq_mul_inv, mul_inv_eq_iff_eq_mul, leOnePart_def, mul_sup, mul_one, mul_inv_cancel,\n    sup_comm, oneLePart_def]\n\n"}
{"name":"leOnePart_div_oneLePart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : Group α\ninst✝ : MulLeftMono α\na : α\n⊢ Eq (HDiv.hDiv (LeOnePart.leOnePart a) (OneLePart.oneLePart a)) (Inv.inv a)","decl":"@[to_additive (attr := simp)] lemma leOnePart_div_oneLePart (a : α) : a⁻ᵐ / a⁺ᵐ = a⁻¹ := by\n  rw [← inv_div, oneLePart_div_leOnePart]\n\n"}
{"name":"negPart_sub_posPart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddGroup α\ninst✝ : AddLeftMono α\na : α\n⊢ Eq (HSub.hSub (NegPart.negPart a) (PosPart.posPart a)) (Neg.neg a)","decl":"@[to_additive (attr := simp)] lemma leOnePart_div_oneLePart (a : α) : a⁻ᵐ / a⁺ᵐ = a⁻¹ := by\n  rw [← inv_div, oneLePart_div_leOnePart]\n\n"}
{"name":"oneLePart_leOnePart_injective","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : Group α\ninst✝ : MulLeftMono α\n⊢ Function.Injective fun a => { fst := OneLePart.oneLePart a, snd := LeOnePart.leOnePart a }","decl":"@[to_additive]\nlemma oneLePart_leOnePart_injective : Injective fun a : α ↦ (a⁺ᵐ, a⁻ᵐ) := by\n  simp only [Injective, Prod.mk.injEq, and_imp]\n  rintro a b hpos hneg\n  rw [← oneLePart_div_leOnePart a, ← oneLePart_div_leOnePart b, hpos, hneg]\n\n"}
{"name":"posPart_negPart_injective","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddGroup α\ninst✝ : AddLeftMono α\n⊢ Function.Injective fun a => { fst := PosPart.posPart a, snd := NegPart.negPart a }","decl":"@[to_additive]\nlemma oneLePart_leOnePart_injective : Injective fun a : α ↦ (a⁺ᵐ, a⁻ᵐ) := by\n  simp only [Injective, Prod.mk.injEq, and_imp]\n  rintro a b hpos hneg\n  rw [← oneLePart_div_leOnePart a, ← oneLePart_div_leOnePart b, hpos, hneg]\n\n"}
{"name":"posPart_negPart_inj","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddGroup α\na b : α\ninst✝ : AddLeftMono α\n⊢ Iff (And (Eq (PosPart.posPart a) (PosPart.posPart b)) (Eq (NegPart.negPart a) (NegPart.negPart b))) (Eq a b)","decl":"@[to_additive]\nlemma oneLePart_leOnePart_inj : a⁺ᵐ = b⁺ᵐ ∧ a⁻ᵐ = b⁻ᵐ ↔ a = b :=\n  Prod.mk.inj_iff.symm.trans oneLePart_leOnePart_injective.eq_iff\n\n"}
{"name":"oneLePart_leOnePart_inj","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : Group α\na b : α\ninst✝ : MulLeftMono α\n⊢ Iff (And (Eq (OneLePart.oneLePart a) (OneLePart.oneLePart b)) (Eq (LeOnePart.leOnePart a) (LeOnePart.leOnePart b))) (Eq a b)","decl":"@[to_additive]\nlemma oneLePart_leOnePart_inj : a⁺ᵐ = b⁺ᵐ ∧ a⁻ᵐ = b⁻ᵐ ↔ a = b :=\n  Prod.mk.inj_iff.symm.trans oneLePart_leOnePart_injective.eq_iff\n\n"}
{"name":"negPart_anti","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝³ : Lattice α\ninst✝² : AddGroup α\ninst✝¹ : AddLeftMono α\ninst✝ : AddRightMono α\n⊢ Antitone NegPart.negPart","decl":"@[to_additive] lemma leOnePart_anti : Antitone (leOnePart : α → α) :=\n  fun _a _b hab ↦ sup_le_sup_right (inv_le_inv_iff.2 hab) _\n\n"}
{"name":"leOnePart_anti","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝³ : Lattice α\ninst✝² : Group α\ninst✝¹ : MulLeftMono α\ninst✝ : MulRightMono α\n⊢ Antitone LeOnePart.leOnePart","decl":"@[to_additive] lemma leOnePart_anti : Antitone (leOnePart : α → α) :=\n  fun _a _b hab ↦ sup_le_sup_right (inv_le_inv_iff.2 hab) _\n\n"}
{"name":"leOnePart_eq_inv_inf_one","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝³ : Lattice α\ninst✝² : Group α\ninst✝¹ : MulLeftMono α\ninst✝ : MulRightMono α\na : α\n⊢ Eq (LeOnePart.leOnePart a) (Inv.inv (Min.min a 1))","decl":"@[to_additive]\nlemma leOnePart_eq_inv_inf_one (a : α) : a⁻ᵐ = (a ⊓ 1)⁻¹ := by\n  rw [leOnePart_def, ← inv_inj, inv_sup, inv_inv, inv_inv, inv_one]\n\n-- Bourbaki A.VI.12 Prop 9 d)\n"}
{"name":"negPart_eq_neg_inf_zero","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝³ : Lattice α\ninst✝² : AddGroup α\ninst✝¹ : AddLeftMono α\ninst✝ : AddRightMono α\na : α\n⊢ Eq (NegPart.negPart a) (Neg.neg (Min.min a 0))","decl":"@[to_additive]\nlemma leOnePart_eq_inv_inf_one (a : α) : a⁻ᵐ = (a ⊓ 1)⁻¹ := by\n  rw [leOnePart_def, ← inv_inj, inv_sup, inv_inv, inv_inv, inv_one]\n\n-- Bourbaki A.VI.12 Prop 9 d)\n"}
{"name":"oneLePart_mul_leOnePart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝³ : Lattice α\ninst✝² : Group α\ninst✝¹ : MulLeftMono α\ninst✝ : MulRightMono α\na : α\n⊢ Eq (HMul.hMul (OneLePart.oneLePart a) (LeOnePart.leOnePart a)) (mabs a)","decl":"@[to_additive] lemma oneLePart_mul_leOnePart (a : α) : a⁺ᵐ * a⁻ᵐ = |a|ₘ := by\n  rw [oneLePart_def, sup_mul, one_mul, leOnePart_def, mul_sup, mul_one, mul_inv_cancel, sup_assoc,\n    ← sup_assoc a, sup_eq_right.2 le_sup_right]\n  exact sup_eq_left.2 <| one_le_mabs a\n\n"}
{"name":"posPart_add_negPart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝³ : Lattice α\ninst✝² : AddGroup α\ninst✝¹ : AddLeftMono α\ninst✝ : AddRightMono α\na : α\n⊢ Eq (HAdd.hAdd (PosPart.posPart a) (NegPart.negPart a)) (abs a)","decl":"@[to_additive] lemma oneLePart_mul_leOnePart (a : α) : a⁺ᵐ * a⁻ᵐ = |a|ₘ := by\n  rw [oneLePart_def, sup_mul, one_mul, leOnePart_def, mul_sup, mul_one, mul_inv_cancel, sup_assoc,\n    ← sup_assoc a, sup_eq_right.2 le_sup_right]\n  exact sup_eq_left.2 <| one_le_mabs a\n\n"}
{"name":"leOnePart_mul_oneLePart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝³ : Lattice α\ninst✝² : Group α\ninst✝¹ : MulLeftMono α\ninst✝ : MulRightMono α\na : α\n⊢ Eq (HMul.hMul (LeOnePart.leOnePart a) (OneLePart.oneLePart a)) (mabs a)","decl":"@[to_additive] lemma leOnePart_mul_oneLePart (a : α) : a⁻ᵐ * a⁺ᵐ = |a|ₘ := by\n  rw [oneLePart_def, mul_sup, mul_one, leOnePart_def, sup_mul, one_mul, inv_mul_cancel, sup_assoc,\n    ← @sup_assoc _ _ a, sup_eq_right.2 le_sup_right]\n  exact sup_eq_left.2 <| one_le_mabs a\n\n-- Bourbaki A.VI.12 Prop 9 a)\n-- a⁺ᵐ ⊓ a⁻ᵐ = 0 (`a⁺` and `a⁻` are co-prime, and, since they are positive, disjoint)\n"}
{"name":"negPart_add_posPart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝³ : Lattice α\ninst✝² : AddGroup α\ninst✝¹ : AddLeftMono α\ninst✝ : AddRightMono α\na : α\n⊢ Eq (HAdd.hAdd (NegPart.negPart a) (PosPart.posPart a)) (abs a)","decl":"@[to_additive] lemma leOnePart_mul_oneLePart (a : α) : a⁻ᵐ * a⁺ᵐ = |a|ₘ := by\n  rw [oneLePart_def, mul_sup, mul_one, leOnePart_def, sup_mul, one_mul, inv_mul_cancel, sup_assoc,\n    ← @sup_assoc _ _ a, sup_eq_right.2 le_sup_right]\n  exact sup_eq_left.2 <| one_le_mabs a\n\n-- Bourbaki A.VI.12 Prop 9 a)\n-- a⁺ᵐ ⊓ a⁻ᵐ = 0 (`a⁺` and `a⁻` are co-prime, and, since they are positive, disjoint)\n"}
{"name":"oneLePart_inf_leOnePart_eq_one","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝³ : Lattice α\ninst✝² : Group α\ninst✝¹ : MulLeftMono α\ninst✝ : MulRightMono α\na : α\n⊢ Eq (Min.min (OneLePart.oneLePart a) (LeOnePart.leOnePart a)) 1","decl":"@[to_additive] lemma oneLePart_inf_leOnePart_eq_one (a : α) : a⁺ᵐ ⊓ a⁻ᵐ = 1 := by\n  rw [← mul_left_inj a⁻ᵐ⁻¹, inf_mul, one_mul, mul_inv_cancel, ← div_eq_mul_inv,\n    oneLePart_div_leOnePart, leOnePart_eq_inv_inf_one, inv_inv]\n\n"}
{"name":"posPart_inf_negPart_eq_zero","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝³ : Lattice α\ninst✝² : AddGroup α\ninst✝¹ : AddLeftMono α\ninst✝ : AddRightMono α\na : α\n⊢ Eq (Min.min (PosPart.posPart a) (NegPart.negPart a)) 0","decl":"@[to_additive] lemma oneLePart_inf_leOnePart_eq_one (a : α) : a⁺ᵐ ⊓ a⁻ᵐ = 1 := by\n  rw [← mul_left_inj a⁻ᵐ⁻¹, inf_mul, one_mul, mul_inv_cancel, ← div_eq_mul_inv,\n    oneLePart_div_leOnePart, leOnePart_eq_inv_inf_one, inv_inv]\n\n"}
{"name":"sup_eq_add_posPart_sub","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddCommGroup α\ninst✝ : AddLeftMono α\na b : α\n⊢ Eq (Max.max a b) (HAdd.hAdd b (PosPart.posPart (HSub.hSub a b)))","decl":"@[to_additive] lemma sup_eq_mul_oneLePart_div (a b : α) : a ⊔ b = b * (a / b)⁺ᵐ := by\n  simp [oneLePart, mul_sup]\n\n-- Bourbaki A.VI.12 (with a and b swapped)\n"}
{"name":"sup_eq_mul_oneLePart_div","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : CommGroup α\ninst✝ : MulLeftMono α\na b : α\n⊢ Eq (Max.max a b) (HMul.hMul b (OneLePart.oneLePart (HDiv.hDiv a b)))","decl":"@[to_additive] lemma sup_eq_mul_oneLePart_div (a b : α) : a ⊔ b = b * (a / b)⁺ᵐ := by\n  simp [oneLePart, mul_sup]\n\n-- Bourbaki A.VI.12 (with a and b swapped)\n"}
{"name":"inf_eq_sub_posPart_sub","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddCommGroup α\ninst✝ : AddLeftMono α\na b : α\n⊢ Eq (Min.min a b) (HSub.hSub a (PosPart.posPart (HSub.hSub a b)))","decl":"@[to_additive] lemma inf_eq_div_oneLePart_div (a b : α) : a ⊓ b = a / (a / b)⁺ᵐ := by\n  simp [oneLePart, div_sup, inf_comm]\n\n-- Bourbaki A.VI.12 Prop 9 c)\n"}
{"name":"inf_eq_div_oneLePart_div","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : CommGroup α\ninst✝ : MulLeftMono α\na b : α\n⊢ Eq (Min.min a b) (HDiv.hDiv a (OneLePart.oneLePart (HDiv.hDiv a b)))","decl":"@[to_additive] lemma inf_eq_div_oneLePart_div (a b : α) : a ⊓ b = a / (a / b)⁺ᵐ := by\n  simp [oneLePart, div_sup, inf_comm]\n\n-- Bourbaki A.VI.12 Prop 9 c)\n"}
{"name":"le_iff_posPart_negPart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddCommGroup α\ninst✝ : AddLeftMono α\na b : α\n⊢ Iff (LE.le a b) (And (LE.le (PosPart.posPart a) (PosPart.posPart b)) (LE.le (NegPart.negPart b) (NegPart.negPart a)))","decl":"@[to_additive] lemma le_iff_oneLePart_leOnePart (a b : α) : a ≤ b ↔ a⁺ᵐ ≤ b⁺ᵐ ∧ b⁻ᵐ ≤ a⁻ᵐ := by\n  refine ⟨fun h ↦ ⟨oneLePart_mono h, leOnePart_anti h⟩, fun h ↦ ?_⟩\n  rw [← oneLePart_div_leOnePart a, ← oneLePart_div_leOnePart b]\n  exact div_le_div'' h.1 h.2\n\n"}
{"name":"le_iff_oneLePart_leOnePart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : CommGroup α\ninst✝ : MulLeftMono α\na b : α\n⊢ Iff (LE.le a b) (And (LE.le (OneLePart.oneLePart a) (OneLePart.oneLePart b)) (LE.le (LeOnePart.leOnePart b) (LeOnePart.leOnePart a)))","decl":"@[to_additive] lemma le_iff_oneLePart_leOnePart (a b : α) : a ≤ b ↔ a⁺ᵐ ≤ b⁺ᵐ ∧ b⁻ᵐ ≤ a⁻ᵐ := by\n  refine ⟨fun h ↦ ⟨oneLePart_mono h, leOnePart_anti h⟩, fun h ↦ ?_⟩\n  rw [← oneLePart_div_leOnePart a, ← oneLePart_div_leOnePart b]\n  exact div_le_div'' h.1 h.2\n\n"}
{"name":"abs_add_eq_two_nsmul_posPart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddCommGroup α\ninst✝ : AddLeftMono α\na : α\n⊢ Eq (HAdd.hAdd (abs a) a) (HSMul.hSMul 2 (PosPart.posPart a))","decl":"@[to_additive abs_add_eq_two_nsmul_posPart]\nlemma mabs_mul_eq_oneLePart_sq (a : α) : |a|ₘ * a = a⁺ᵐ ^ 2 := by\n  rw [sq, ← mul_mul_div_cancel a⁺ᵐ, oneLePart_mul_leOnePart, oneLePart_div_leOnePart]\n\n"}
{"name":"mabs_mul_eq_oneLePart_sq","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : CommGroup α\ninst✝ : MulLeftMono α\na : α\n⊢ Eq (HMul.hMul (mabs a) a) (HPow.hPow (OneLePart.oneLePart a) 2)","decl":"@[to_additive abs_add_eq_two_nsmul_posPart]\nlemma mabs_mul_eq_oneLePart_sq (a : α) : |a|ₘ * a = a⁺ᵐ ^ 2 := by\n  rw [sq, ← mul_mul_div_cancel a⁺ᵐ, oneLePart_mul_leOnePart, oneLePart_div_leOnePart]\n\n"}
{"name":"add_abs_eq_two_nsmul_posPart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddCommGroup α\ninst✝ : AddLeftMono α\na : α\n⊢ Eq (HAdd.hAdd a (abs a)) (HSMul.hSMul 2 (PosPart.posPart a))","decl":"@[to_additive add_abs_eq_two_nsmul_posPart]\nlemma mul_mabs_eq_oneLePart_sq (a : α) : a * |a|ₘ = a⁺ᵐ ^ 2 := by\n  rw [mul_comm, mabs_mul_eq_oneLePart_sq]\n\n"}
{"name":"mul_mabs_eq_oneLePart_sq","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : CommGroup α\ninst✝ : MulLeftMono α\na : α\n⊢ Eq (HMul.hMul a (mabs a)) (HPow.hPow (OneLePart.oneLePart a) 2)","decl":"@[to_additive add_abs_eq_two_nsmul_posPart]\nlemma mul_mabs_eq_oneLePart_sq (a : α) : a * |a|ₘ = a⁺ᵐ ^ 2 := by\n  rw [mul_comm, mabs_mul_eq_oneLePart_sq]\n\n"}
{"name":"abs_sub_eq_two_nsmul_negPart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddCommGroup α\ninst✝ : AddLeftMono α\na : α\n⊢ Eq (HSub.hSub (abs a) a) (HSMul.hSMul 2 (NegPart.negPart a))","decl":"@[to_additive abs_sub_eq_two_nsmul_negPart]\nlemma mabs_div_eq_leOnePart_sq (a : α) : |a|ₘ / a = a⁻ᵐ ^ 2 := by\n  rw [sq, ← mul_div_div_cancel, oneLePart_mul_leOnePart, oneLePart_div_leOnePart]\n\n"}
{"name":"mabs_div_eq_leOnePart_sq","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : CommGroup α\ninst✝ : MulLeftMono α\na : α\n⊢ Eq (HDiv.hDiv (mabs a) a) (HPow.hPow (LeOnePart.leOnePart a) 2)","decl":"@[to_additive abs_sub_eq_two_nsmul_negPart]\nlemma mabs_div_eq_leOnePart_sq (a : α) : |a|ₘ / a = a⁻ᵐ ^ 2 := by\n  rw [sq, ← mul_div_div_cancel, oneLePart_mul_leOnePart, oneLePart_div_leOnePart]\n\n"}
{"name":"sub_abs_eq_neg_two_nsmul_negPart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddCommGroup α\ninst✝ : AddLeftMono α\na : α\n⊢ Eq (HSub.hSub a (abs a)) (Neg.neg (HSMul.hSMul 2 (NegPart.negPart a)))","decl":"@[to_additive sub_abs_eq_neg_two_nsmul_negPart]\nlemma div_mabs_eq_inv_leOnePart_sq (a : α) : a / |a|ₘ = (a⁻ᵐ ^ 2)⁻¹ := by\n  rw [← mabs_div_eq_leOnePart_sq, inv_div]\n\n"}
{"name":"div_mabs_eq_inv_leOnePart_sq","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : CommGroup α\ninst✝ : MulLeftMono α\na : α\n⊢ Eq (HDiv.hDiv a (mabs a)) (Inv.inv (HPow.hPow (LeOnePart.leOnePart a) 2))","decl":"@[to_additive sub_abs_eq_neg_two_nsmul_negPart]\nlemma div_mabs_eq_inv_leOnePart_sq (a : α) : a / |a|ₘ = (a⁻ᵐ ^ 2)⁻¹ := by\n  rw [← mabs_div_eq_leOnePart_sq, inv_div]\n\n"}
{"name":"posPart_eq_ite","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrder α\ninst✝ : AddGroup α\na : α\n⊢ Eq (PosPart.posPart a) (ite (LE.le 0 a) a 0)","decl":"@[to_additive] lemma oneLePart_eq_ite : a⁺ᵐ = if 1 ≤ a then a else 1 := by\n  rw [oneLePart_def, ← maxDefault, ← sup_eq_maxDefault]; simp_rw [sup_comm]\n\n"}
{"name":"oneLePart_eq_ite","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrder α\ninst✝ : Group α\na : α\n⊢ Eq (OneLePart.oneLePart a) (ite (LE.le 1 a) a 1)","decl":"@[to_additive] lemma oneLePart_eq_ite : a⁺ᵐ = if 1 ≤ a then a else 1 := by\n  rw [oneLePart_def, ← maxDefault, ← sup_eq_maxDefault]; simp_rw [sup_comm]\n\n"}
{"name":"one_lt_oneLePart_iff","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrder α\ninst✝ : Group α\na : α\n⊢ Iff (LT.lt 1 (OneLePart.oneLePart a)) (LT.lt 1 a)","decl":"@[to_additive (attr := simp) posPart_pos_iff] lemma one_lt_oneLePart_iff : 1 < a⁺ᵐ ↔ 1 < a :=\n  lt_iff_lt_of_le_iff_le <| (one_le_oneLePart _).le_iff_eq.trans oneLePart_eq_one\n\n"}
{"name":"posPart_pos_iff","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrder α\ninst✝ : AddGroup α\na : α\n⊢ Iff (LT.lt 0 (PosPart.posPart a)) (LT.lt 0 a)","decl":"@[to_additive (attr := simp) posPart_pos_iff] lemma one_lt_oneLePart_iff : 1 < a⁺ᵐ ↔ 1 < a :=\n  lt_iff_lt_of_le_iff_le <| (one_le_oneLePart _).le_iff_eq.trans oneLePart_eq_one\n\n"}
{"name":"oneLePart_of_one_lt_oneLePart","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrder α\ninst✝ : Group α\na : α\nha : LT.lt 1 (OneLePart.oneLePart a)\n⊢ Eq (OneLePart.oneLePart a) a","decl":"@[to_additive posPart_eq_of_posPart_pos]\nlemma oneLePart_of_one_lt_oneLePart (ha : 1 < a⁺ᵐ) : a⁺ᵐ = a := by\n  rw [oneLePart_def, right_lt_sup, not_le] at ha; exact oneLePart_eq_self.2 ha.le\n\n"}
{"name":"posPart_eq_of_posPart_pos","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrder α\ninst✝ : AddGroup α\na : α\nha : LT.lt 0 (PosPart.posPart a)\n⊢ Eq (PosPart.posPart a) a","decl":"@[to_additive posPart_eq_of_posPart_pos]\nlemma oneLePart_of_one_lt_oneLePart (ha : 1 < a⁺ᵐ) : a⁺ᵐ = a := by\n  rw [oneLePart_def, right_lt_sup, not_le] at ha; exact oneLePart_eq_self.2 ha.le\n\n"}
{"name":"oneLePart_lt","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrder α\ninst✝ : Group α\na b : α\n⊢ Iff (LT.lt (OneLePart.oneLePart a) b) (And (LT.lt a b) (LT.lt 1 b))","decl":"@[to_additive (attr := simp)] lemma oneLePart_lt : a⁺ᵐ < b ↔ a < b ∧ 1 < b := sup_lt_iff\n\n"}
{"name":"posPart_lt","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrder α\ninst✝ : AddGroup α\na b : α\n⊢ Iff (LT.lt (PosPart.posPart a) b) (And (LT.lt a b) (LT.lt 0 b))","decl":"@[to_additive (attr := simp)] lemma oneLePart_lt : a⁺ᵐ < b ↔ a < b ∧ 1 < b := sup_lt_iff\n\n"}
{"name":"negPart_eq_ite","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : AddGroup α\na : α\ninst✝ : AddLeftMono α\n⊢ Eq (NegPart.negPart a) (ite (LE.le a 0) (Neg.neg a) 0)","decl":"@[to_additive] lemma leOnePart_eq_ite : a⁻ᵐ = if a ≤ 1 then a⁻¹ else 1 := by\n  simp_rw [← one_le_inv']; rw [leOnePart_def, ← maxDefault, ← sup_eq_maxDefault]; simp_rw [sup_comm]\n\n"}
{"name":"leOnePart_eq_ite","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : Group α\na : α\ninst✝ : MulLeftMono α\n⊢ Eq (LeOnePart.leOnePart a) (ite (LE.le a 1) (Inv.inv a) 1)","decl":"@[to_additive] lemma leOnePart_eq_ite : a⁻ᵐ = if a ≤ 1 then a⁻¹ else 1 := by\n  simp_rw [← one_le_inv']; rw [leOnePart_def, ← maxDefault, ← sup_eq_maxDefault]; simp_rw [sup_comm]\n\n"}
{"name":"one_lt_ltOnePart_iff","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : Group α\na : α\ninst✝ : MulLeftMono α\n⊢ Iff (LT.lt 1 (LeOnePart.leOnePart a)) (LT.lt a 1)","decl":"@[to_additive (attr := simp) negPart_pos_iff] lemma one_lt_ltOnePart_iff : 1 < a⁻ᵐ ↔ a < 1 :=\n  lt_iff_lt_of_le_iff_le <| (one_le_leOnePart _).le_iff_eq.trans leOnePart_eq_one\n\n"}
{"name":"negPart_pos_iff","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : AddGroup α\na : α\ninst✝ : AddLeftMono α\n⊢ Iff (LT.lt 0 (NegPart.negPart a)) (LT.lt a 0)","decl":"@[to_additive (attr := simp) negPart_pos_iff] lemma one_lt_ltOnePart_iff : 1 < a⁻ᵐ ↔ a < 1 :=\n  lt_iff_lt_of_le_iff_le <| (one_le_leOnePart _).le_iff_eq.trans leOnePart_eq_one\n\n"}
{"name":"leOnePart_lt","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝³ : LinearOrder α\ninst✝² : Group α\na b : α\ninst✝¹ : MulLeftMono α\ninst✝ : MulRightMono α\n⊢ Iff (LT.lt (LeOnePart.leOnePart a) b) (And (LT.lt (Inv.inv b) a) (LT.lt 1 b))","decl":"@[to_additive (attr := simp)] lemma leOnePart_lt : a⁻ᵐ < b ↔ b⁻¹ < a ∧ 1 < b :=\n  sup_lt_iff.trans <| by rw [inv_lt']\n\n"}
{"name":"negPart_lt","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"α : Type u_1\ninst✝³ : LinearOrder α\ninst✝² : AddGroup α\na b : α\ninst✝¹ : AddLeftMono α\ninst✝ : AddRightMono α\n⊢ Iff (LT.lt (NegPart.negPart a) b) (And (LT.lt (Neg.neg b) a) (LT.lt 0 b))","decl":"@[to_additive (attr := simp)] lemma leOnePart_lt : a⁻ᵐ < b ↔ b⁻¹ < a ∧ 1 < b :=\n  sup_lt_iff.trans <| by rw [inv_lt']\n\n"}
{"name":"Pi.posPart_apply","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"ι : Type u_2\nα : ι → Type u_3\ninst✝¹ : (i : ι) → Lattice (α i)\ninst✝ : (i : ι) → AddGroup (α i)\nf : (i : ι) → α i\ni : ι\n⊢ Eq (PosPart.posPart f i) (PosPart.posPart (f i))","decl":"@[to_additive (attr := simp)] lemma oneLePart_apply (f : ∀ i, α i) (i : ι) : f⁺ᵐ i = (f i)⁺ᵐ := rfl\n"}
{"name":"Pi.oneLePart_apply","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"ι : Type u_2\nα : ι → Type u_3\ninst✝¹ : (i : ι) → Lattice (α i)\ninst✝ : (i : ι) → Group (α i)\nf : (i : ι) → α i\ni : ι\n⊢ Eq (OneLePart.oneLePart f i) (OneLePart.oneLePart (f i))","decl":"@[to_additive (attr := simp)] lemma oneLePart_apply (f : ∀ i, α i) (i : ι) : f⁺ᵐ i = (f i)⁺ᵐ := rfl\n"}
{"name":"Pi.leOnePart_apply","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"ι : Type u_2\nα : ι → Type u_3\ninst✝¹ : (i : ι) → Lattice (α i)\ninst✝ : (i : ι) → Group (α i)\nf : (i : ι) → α i\ni : ι\n⊢ Eq (LeOnePart.leOnePart f i) (LeOnePart.leOnePart (f i))","decl":"@[to_additive (attr := simp)] lemma leOnePart_apply (f : ∀ i, α i) (i : ι) : f⁻ᵐ i = (f i)⁻ᵐ := rfl\n\n"}
{"name":"Pi.negPart_apply","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"ι : Type u_2\nα : ι → Type u_3\ninst✝¹ : (i : ι) → Lattice (α i)\ninst✝ : (i : ι) → AddGroup (α i)\nf : (i : ι) → α i\ni : ι\n⊢ Eq (NegPart.negPart f i) (NegPart.negPart (f i))","decl":"@[to_additive (attr := simp)] lemma leOnePart_apply (f : ∀ i, α i) (i : ι) : f⁻ᵐ i = (f i)⁻ᵐ := rfl\n\n"}
{"name":"Pi.oneLePart_def","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"ι : Type u_2\nα : ι → Type u_3\ninst✝¹ : (i : ι) → Lattice (α i)\ninst✝ : (i : ι) → Group (α i)\nf : (i : ι) → α i\n⊢ Eq (OneLePart.oneLePart f) fun i => OneLePart.oneLePart (f i)","decl":"@[to_additive] lemma oneLePart_def (f : ∀ i, α i) : f⁺ᵐ = fun i ↦ (f i)⁺ᵐ := rfl\n"}
{"name":"Pi.posPart_def","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"ι : Type u_2\nα : ι → Type u_3\ninst✝¹ : (i : ι) → Lattice (α i)\ninst✝ : (i : ι) → AddGroup (α i)\nf : (i : ι) → α i\n⊢ Eq (PosPart.posPart f) fun i => PosPart.posPart (f i)","decl":"@[to_additive] lemma oneLePart_def (f : ∀ i, α i) : f⁺ᵐ = fun i ↦ (f i)⁺ᵐ := rfl\n"}
{"name":"Pi.negPart_def","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"ι : Type u_2\nα : ι → Type u_3\ninst✝¹ : (i : ι) → Lattice (α i)\ninst✝ : (i : ι) → AddGroup (α i)\nf : (i : ι) → α i\n⊢ Eq (NegPart.negPart f) fun i => NegPart.negPart (f i)","decl":"@[to_additive] lemma leOnePart_def (f : ∀ i, α i) : f⁻ᵐ = fun i ↦ (f i)⁻ᵐ := rfl\n\n"}
{"name":"Pi.leOnePart_def","module":"Mathlib.Algebra.Order.Group.PosPart","initialProofState":"ι : Type u_2\nα : ι → Type u_3\ninst✝¹ : (i : ι) → Lattice (α i)\ninst✝ : (i : ι) → Group (α i)\nf : (i : ι) → α i\n⊢ Eq (LeOnePart.leOnePart f) fun i => LeOnePart.leOnePart (f i)","decl":"@[to_additive] lemma leOnePart_def (f : ∀ i, α i) : f⁻ᵐ = fun i ↦ (f i)⁻ᵐ := rfl\n\n"}
