{"name":"measurableSet_lineDifferentiableAt","module":"Mathlib.Analysis.Calculus.LineDeriv.Measurable","initialProofState":"𝕜 : Type u_1\ninst✝⁸ : NontriviallyNormedField 𝕜\ninst✝⁷ : LocallyCompactSpace 𝕜\nE : Type u_2\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace 𝕜 E\ninst✝⁴ : MeasurableSpace E\ninst✝³ : OpensMeasurableSpace E\nF : Type u_3\ninst✝² : NormedAddCommGroup F\ninst✝¹ : NormedSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : E → F\nv : E\nhf : Continuous f\n⊢ MeasurableSet (setOf fun x => LineDifferentiableAt 𝕜 f x v)","decl":"theorem measurableSet_lineDifferentiableAt (hf : Continuous f) :\n    MeasurableSet {x : E | LineDifferentiableAt 𝕜 f x v} := by\n  borelize 𝕜\n  let g : E → 𝕜 → F := fun x t ↦ f (x + t • v)\n  have hg : Continuous g.uncurry := by fun_prop\n  exact measurable_prod_mk_right (measurableSet_of_differentiableAt_with_param 𝕜 hg)\n\n"}
{"name":"measurable_lineDeriv","module":"Mathlib.Analysis.Calculus.LineDeriv.Measurable","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\ninst✝⁹ : LocallyCompactSpace 𝕜\nE : Type u_2\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace 𝕜 E\ninst✝⁶ : MeasurableSpace E\ninst✝⁵ : OpensMeasurableSpace E\nF : Type u_3\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace 𝕜 F\ninst✝² : CompleteSpace F\nf : E → F\nv : E\ninst✝¹ : MeasurableSpace F\ninst✝ : BorelSpace F\nhf : Continuous f\n⊢ Measurable fun x => lineDeriv 𝕜 f x v","decl":"theorem measurable_lineDeriv [MeasurableSpace F] [BorelSpace F]\n    (hf : Continuous f) : Measurable (fun x ↦ lineDeriv 𝕜 f x v) := by\n  borelize 𝕜\n  let g : E → 𝕜 → F := fun x t ↦ f (x + t • v)\n  have hg : Continuous g.uncurry := by fun_prop\n  exact (measurable_deriv_with_param hg).comp measurable_prod_mk_right\n\n"}
{"name":"stronglyMeasurable_lineDeriv","module":"Mathlib.Analysis.Calculus.LineDeriv.Measurable","initialProofState":"𝕜 : Type u_1\ninst✝⁹ : NontriviallyNormedField 𝕜\ninst✝⁸ : LocallyCompactSpace 𝕜\nE : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\ninst✝⁵ : MeasurableSpace E\ninst✝⁴ : OpensMeasurableSpace E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : CompleteSpace F\nf : E → F\nv : E\ninst✝ : SecondCountableTopologyEither E F\nhf : Continuous f\n⊢ MeasureTheory.StronglyMeasurable fun x => lineDeriv 𝕜 f x v","decl":"theorem stronglyMeasurable_lineDeriv [SecondCountableTopologyEither E F] (hf : Continuous f) :\n    StronglyMeasurable (fun x ↦ lineDeriv 𝕜 f x v) := by\n  borelize 𝕜\n  let g : E → 𝕜 → F := fun x t ↦ f (x + t • v)\n  have hg : Continuous g.uncurry := by fun_prop\n  exact (stronglyMeasurable_deriv_with_param hg).comp_measurable measurable_prod_mk_right\n\n"}
{"name":"aemeasurable_lineDeriv","module":"Mathlib.Analysis.Calculus.LineDeriv.Measurable","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\ninst✝⁹ : LocallyCompactSpace 𝕜\nE : Type u_2\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace 𝕜 E\ninst✝⁶ : MeasurableSpace E\ninst✝⁵ : OpensMeasurableSpace E\nF : Type u_3\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace 𝕜 F\ninst✝² : CompleteSpace F\nf : E → F\nv : E\ninst✝¹ : MeasurableSpace F\ninst✝ : BorelSpace F\nhf : Continuous f\nμ : MeasureTheory.Measure E\n⊢ AEMeasurable (fun x => lineDeriv 𝕜 f x v) μ","decl":"theorem aemeasurable_lineDeriv [MeasurableSpace F] [BorelSpace F]\n    (hf : Continuous f) (μ : Measure E) :\n    AEMeasurable (fun x ↦ lineDeriv 𝕜 f x v) μ :=\n  (measurable_lineDeriv hf).aemeasurable\n\n"}
{"name":"aestronglyMeasurable_lineDeriv","module":"Mathlib.Analysis.Calculus.LineDeriv.Measurable","initialProofState":"𝕜 : Type u_1\ninst✝⁹ : NontriviallyNormedField 𝕜\ninst✝⁸ : LocallyCompactSpace 𝕜\nE : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\ninst✝⁵ : MeasurableSpace E\ninst✝⁴ : OpensMeasurableSpace E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : CompleteSpace F\nf : E → F\nv : E\ninst✝ : SecondCountableTopologyEither E F\nhf : Continuous f\nμ : MeasureTheory.Measure E\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => lineDeriv 𝕜 f x v) μ","decl":"theorem aestronglyMeasurable_lineDeriv [SecondCountableTopologyEither E F]\n    (hf : Continuous f) (μ : Measure E) :\n    AEStronglyMeasurable (fun x ↦ lineDeriv 𝕜 f x v) μ :=\n  (stronglyMeasurable_lineDeriv hf).aestronglyMeasurable\n\n"}
{"name":"measurableSet_lineDifferentiableAt_uncurry","module":"Mathlib.Analysis.Calculus.LineDeriv.Measurable","initialProofState":"𝕜 : Type u_1\ninst✝⁹ : NontriviallyNormedField 𝕜\ninst✝⁸ : LocallyCompactSpace 𝕜\nE : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\ninst✝⁵ : MeasurableSpace E\ninst✝⁴ : OpensMeasurableSpace E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : CompleteSpace F\nf : E → F\ninst✝ : SecondCountableTopology E\nhf : Continuous f\n⊢ MeasurableSet (setOf fun p => LineDifferentiableAt 𝕜 f p.1 p.2)","decl":"theorem measurableSet_lineDifferentiableAt_uncurry (hf : Continuous f) :\n    MeasurableSet {p : E × E | LineDifferentiableAt 𝕜 f p.1 p.2} := by\n  borelize 𝕜\n  let g : (E × E) → 𝕜 → F := fun p t ↦ f (p.1 + t • p.2)\n  have : Continuous g.uncurry :=\n    hf.comp <| (continuous_fst.comp continuous_fst).add\n    <| continuous_snd.smul (continuous_snd.comp continuous_fst)\n  have M_meas : MeasurableSet {q : (E × E) × 𝕜 | DifferentiableAt 𝕜 (g q.1) q.2} :=\n    measurableSet_of_differentiableAt_with_param 𝕜 this\n  exact measurable_prod_mk_right M_meas\n\n"}
{"name":"measurable_lineDeriv_uncurry","module":"Mathlib.Analysis.Calculus.LineDeriv.Measurable","initialProofState":"𝕜 : Type u_1\ninst✝¹¹ : NontriviallyNormedField 𝕜\ninst✝¹⁰ : LocallyCompactSpace 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\ninst✝⁷ : MeasurableSpace E\ninst✝⁶ : OpensMeasurableSpace E\nF : Type u_3\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\ninst✝³ : CompleteSpace F\nf : E → F\ninst✝² : SecondCountableTopology E\ninst✝¹ : MeasurableSpace F\ninst✝ : BorelSpace F\nhf : Continuous f\n⊢ Measurable fun p => lineDeriv 𝕜 f p.1 p.2","decl":"theorem measurable_lineDeriv_uncurry [MeasurableSpace F] [BorelSpace F]\n    (hf : Continuous f) : Measurable (fun (p : E × E) ↦ lineDeriv 𝕜 f p.1 p.2) := by\n  borelize 𝕜\n  let g : (E × E) → 𝕜 → F := fun p t ↦ f (p.1 + t • p.2)\n  have : Continuous g.uncurry :=\n    hf.comp <| (continuous_fst.comp continuous_fst).add\n    <| continuous_snd.smul (continuous_snd.comp continuous_fst)\n  exact (measurable_deriv_with_param this).comp measurable_prod_mk_right\n\n"}
{"name":"stronglyMeasurable_lineDeriv_uncurry","module":"Mathlib.Analysis.Calculus.LineDeriv.Measurable","initialProofState":"𝕜 : Type u_1\ninst✝⁹ : NontriviallyNormedField 𝕜\ninst✝⁸ : LocallyCompactSpace 𝕜\nE : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\ninst✝⁵ : MeasurableSpace E\ninst✝⁴ : OpensMeasurableSpace E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : CompleteSpace F\nf : E → F\ninst✝ : SecondCountableTopology E\nhf : Continuous f\n⊢ MeasureTheory.StronglyMeasurable fun p => lineDeriv 𝕜 f p.1 p.2","decl":"theorem stronglyMeasurable_lineDeriv_uncurry (hf : Continuous f) :\n    StronglyMeasurable (fun (p : E × E) ↦ lineDeriv 𝕜 f p.1 p.2) := by\n  borelize 𝕜\n  let g : (E × E) → 𝕜 → F := fun p t ↦ f (p.1 + t • p.2)\n  have : Continuous g.uncurry :=\n    hf.comp <| (continuous_fst.comp continuous_fst).add\n    <| continuous_snd.smul (continuous_snd.comp continuous_fst)\n  exact (stronglyMeasurable_deriv_with_param this).comp_measurable measurable_prod_mk_right\n\n"}
{"name":"aemeasurable_lineDeriv_uncurry","module":"Mathlib.Analysis.Calculus.LineDeriv.Measurable","initialProofState":"𝕜 : Type u_1\ninst✝¹¹ : NontriviallyNormedField 𝕜\ninst✝¹⁰ : LocallyCompactSpace 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\ninst✝⁷ : MeasurableSpace E\ninst✝⁶ : OpensMeasurableSpace E\nF : Type u_3\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\ninst✝³ : CompleteSpace F\nf : E → F\ninst✝² : SecondCountableTopology E\ninst✝¹ : MeasurableSpace F\ninst✝ : BorelSpace F\nhf : Continuous f\nμ : MeasureTheory.Measure (Prod E E)\n⊢ AEMeasurable (fun p => lineDeriv 𝕜 f p.1 p.2) μ","decl":"theorem aemeasurable_lineDeriv_uncurry [MeasurableSpace F] [BorelSpace F]\n    (hf : Continuous f) (μ : Measure (E × E)) :\n    AEMeasurable (fun (p : E × E) ↦ lineDeriv 𝕜 f p.1 p.2) μ :=\n  (measurable_lineDeriv_uncurry hf).aemeasurable\n\n"}
{"name":"aestronglyMeasurable_lineDeriv_uncurry","module":"Mathlib.Analysis.Calculus.LineDeriv.Measurable","initialProofState":"𝕜 : Type u_1\ninst✝⁹ : NontriviallyNormedField 𝕜\ninst✝⁸ : LocallyCompactSpace 𝕜\nE : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\ninst✝⁵ : MeasurableSpace E\ninst✝⁴ : OpensMeasurableSpace E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : CompleteSpace F\nf : E → F\ninst✝ : SecondCountableTopology E\nhf : Continuous f\nμ : MeasureTheory.Measure (Prod E E)\n⊢ MeasureTheory.AEStronglyMeasurable (fun p => lineDeriv 𝕜 f p.1 p.2) μ","decl":"theorem aestronglyMeasurable_lineDeriv_uncurry (hf : Continuous f) (μ : Measure (E × E)) :\n    AEStronglyMeasurable (fun (p : E × E) ↦ lineDeriv 𝕜 f p.1 p.2) μ :=\n  (stronglyMeasurable_lineDeriv_uncurry hf).aestronglyMeasurable\n"}
