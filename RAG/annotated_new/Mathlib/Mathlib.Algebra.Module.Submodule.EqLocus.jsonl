{"name":"LinearMap.mem_eqLocus","module":"Mathlib.Algebra.Module.Submodule.EqLocus","initialProofState":"R : Type u_1\nR₂ : Type u_2\nM : Type u_3\nM₂ : Type u_4\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : Module R M\ninst✝² : Module R₂ M₂\nτ₁₂ : RingHom R R₂\nF : Type u_5\ninst✝¹ : FunLike F M M₂\ninst✝ : SemilinearMapClass F τ₁₂ M M₂\nx : M\nf g : F\n⊢ Iff (Membership.mem (LinearMap.eqLocus f g) x) (Eq (f x) (g x))","decl":"@[simp]\ntheorem mem_eqLocus {x : M} {f g : F} : x ∈ eqLocus f g ↔ f x = g x :=\n  Iff.rfl\n\n"}
{"name":"LinearMap.eqLocus_toAddSubmonoid","module":"Mathlib.Algebra.Module.Submodule.EqLocus","initialProofState":"R : Type u_1\nR₂ : Type u_2\nM : Type u_3\nM₂ : Type u_4\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : Module R M\ninst✝² : Module R₂ M₂\nτ₁₂ : RingHom R R₂\nF : Type u_5\ninst✝¹ : FunLike F M M₂\ninst✝ : SemilinearMapClass F τ₁₂ M M₂\nf g : F\n⊢ Eq (LinearMap.eqLocus f g).toAddSubmonoid ((↑f).eqLocusM ↑g)","decl":"theorem eqLocus_toAddSubmonoid (f g : F) :\n    (eqLocus f g).toAddSubmonoid = (f : M →+ M₂).eqLocusM g :=\n  rfl\n\n"}
{"name":"LinearMap.eqLocus_eq_top","module":"Mathlib.Algebra.Module.Submodule.EqLocus","initialProofState":"R : Type u_1\nR₂ : Type u_2\nM : Type u_3\nM₂ : Type u_4\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : Module R M\ninst✝² : Module R₂ M₂\nτ₁₂ : RingHom R R₂\nF : Type u_5\ninst✝¹ : FunLike F M M₂\ninst✝ : SemilinearMapClass F τ₁₂ M M₂\nf g : F\n⊢ Iff (Eq (LinearMap.eqLocus f g) Top.top) (Eq f g)","decl":"@[simp]\ntheorem eqLocus_eq_top {f g : F} : eqLocus f g = ⊤ ↔ f = g := by\n  simp [SetLike.ext_iff, DFunLike.ext_iff]\n\n"}
{"name":"LinearMap.eqLocus_same","module":"Mathlib.Algebra.Module.Submodule.EqLocus","initialProofState":"R : Type u_1\nR₂ : Type u_2\nM : Type u_3\nM₂ : Type u_4\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : Module R M\ninst✝² : Module R₂ M₂\nτ₁₂ : RingHom R R₂\nF : Type u_5\ninst✝¹ : FunLike F M M₂\ninst✝ : SemilinearMapClass F τ₁₂ M M₂\nf : F\n⊢ Eq (LinearMap.eqLocus f f) Top.top","decl":"@[simp]\ntheorem eqLocus_same (f : F) : eqLocus f f = ⊤ := eqLocus_eq_top.2 rfl\n\n"}
{"name":"LinearMap.le_eqLocus","module":"Mathlib.Algebra.Module.Submodule.EqLocus","initialProofState":"R : Type u_1\nR₂ : Type u_2\nM : Type u_3\nM₂ : Type u_4\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : Module R M\ninst✝² : Module R₂ M₂\nτ₁₂ : RingHom R R₂\nF : Type u_5\ninst✝¹ : FunLike F M M₂\ninst✝ : SemilinearMapClass F τ₁₂ M M₂\nf g : F\nS : Submodule R M\n⊢ Iff (LE.le S (LinearMap.eqLocus f g)) (Set.EqOn ⇑f ⇑g ↑S)","decl":"theorem le_eqLocus {f g : F} {S : Submodule R M} : S ≤ eqLocus f g ↔ Set.EqOn f g S := Iff.rfl\n\n"}
{"name":"LinearMap.eqOn_sup","module":"Mathlib.Algebra.Module.Submodule.EqLocus","initialProofState":"R : Type u_1\nR₂ : Type u_2\nM : Type u_3\nM₂ : Type u_4\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : Module R M\ninst✝² : Module R₂ M₂\nτ₁₂ : RingHom R R₂\nF : Type u_5\ninst✝¹ : FunLike F M M₂\ninst✝ : SemilinearMapClass F τ₁₂ M M₂\nf g : F\nS T : Submodule R M\nhS : Set.EqOn ⇑f ⇑g ↑S\nhT : Set.EqOn ⇑f ⇑g ↑T\n⊢ Set.EqOn ⇑f ⇑g ↑(Max.max S T)","decl":"include τ₁₂ in\ntheorem eqOn_sup {f g : F} {S T : Submodule R M} (hS : Set.EqOn f g S) (hT : Set.EqOn f g T) :\n    Set.EqOn f g ↑(S ⊔ T) := by\n  rw [← le_eqLocus] at hS hT ⊢\n  exact sup_le hS hT\n\n"}
{"name":"LinearMap.ext_on_codisjoint","module":"Mathlib.Algebra.Module.Submodule.EqLocus","initialProofState":"R : Type u_1\nR₂ : Type u_2\nM : Type u_3\nM₂ : Type u_4\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : Module R M\ninst✝² : Module R₂ M₂\nτ₁₂ : RingHom R R₂\nF : Type u_5\ninst✝¹ : FunLike F M M₂\ninst✝ : SemilinearMapClass F τ₁₂ M M₂\nf g : F\nS T : Submodule R M\nhST : Codisjoint S T\nhS : Set.EqOn ⇑f ⇑g ↑S\nhT : Set.EqOn ⇑f ⇑g ↑T\n⊢ Eq f g","decl":"include τ₁₂ in\ntheorem ext_on_codisjoint {f g : F} {S T : Submodule R M} (hST : Codisjoint S T)\n    (hS : Set.EqOn f g S) (hT : Set.EqOn f g T) : f = g :=\n  DFunLike.ext _ _ fun _ ↦ eqOn_sup hS hT <| hST.eq_top.symm ▸ trivial\n\n"}
{"name":"LinearMap.eqLocus_eq_ker_sub","module":"Mathlib.Algebra.Module.Submodule.EqLocus","initialProofState":"R : Type u_1\nR₂ : Type u_2\nM : Type u_3\nM₂ : Type u_4\ninst✝⁵ : Ring R\ninst✝⁴ : Ring R₂\ninst✝³ : AddCommGroup M\ninst✝² : AddCommGroup M₂\ninst✝¹ : Module R M\ninst✝ : Module R₂ M₂\nτ₁₂ : RingHom R R₂\nf g : LinearMap τ₁₂ M M₂\n⊢ Eq (LinearMap.eqLocus f g) (LinearMap.ker (HSub.hSub f g))","decl":"theorem eqLocus_eq_ker_sub (f g : M →ₛₗ[τ₁₂] M₂) : eqLocus f g = ker (f - g) :=\n  SetLike.ext fun _ => sub_eq_zero.symm\n\n"}
