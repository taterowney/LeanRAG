{"name":"ProbabilityTheory.paretoPDF_eq","module":"Mathlib.Probability.Distributions.Pareto","initialProofState":"t r x : Real\n⊢ Eq (ProbabilityTheory.paretoPDF t r x) (ENNReal.ofReal (ite (LE.le t x) (HMul.hMul (HMul.hMul r (HPow.hPow t r)) (HPow.hPow x (Neg.neg (HAdd.hAdd r 1)))) 0))","decl":"lemma paretoPDF_eq (t r x : ℝ) :\n    paretoPDF t r x = ENNReal.ofReal (if t ≤ x then r * t ^ r * x ^ (-(r + 1)) else 0) := rfl\n\n"}
{"name":"ProbabilityTheory.paretoPDF_of_lt","module":"Mathlib.Probability.Distributions.Pareto","initialProofState":"t r x : Real\nhx : LT.lt x t\n⊢ Eq (ProbabilityTheory.paretoPDF t r x) 0","decl":"lemma paretoPDF_of_lt (hx : x < t) : paretoPDF t r x = 0 := by\n  simp only [paretoPDF_eq, if_neg (not_le.mpr hx), ENNReal.ofReal_zero]\n\n"}
{"name":"ProbabilityTheory.paretoPDF_of_le","module":"Mathlib.Probability.Distributions.Pareto","initialProofState":"t r x : Real\nhx : LE.le t x\n⊢ Eq (ProbabilityTheory.paretoPDF t r x) (ENNReal.ofReal (HMul.hMul (HMul.hMul r (HPow.hPow t r)) (HPow.hPow x (Neg.neg (HAdd.hAdd r 1)))))","decl":"lemma paretoPDF_of_le (hx : t ≤ x) :\n    paretoPDF t r x = ENNReal.ofReal (r * t ^ r * x ^ (-(r + 1))) := by\n  simp only [paretoPDF_eq, if_pos hx]\n\n"}
{"name":"ProbabilityTheory.lintegral_paretoPDF_of_le","module":"Mathlib.Probability.Distributions.Pareto","initialProofState":"t r x : Real\nhx : LE.le x t\n⊢ Eq (MeasureTheory.lintegral (MeasureTheory.MeasureSpace.volume.restrict (Set.Iio x)) fun y => ProbabilityTheory.paretoPDF t r y) 0","decl":"/-- The Lebesgue integral of the Pareto pdf over reals `≤ t` equals `0`. -/\nlemma lintegral_paretoPDF_of_le (hx : x ≤ t) :\n    ∫⁻ y in Iio x, paretoPDF t r y = 0 := by\n  rw [setLIntegral_congr_fun (g := fun _ ↦ 0) measurableSet_Iio]\n  · rw [lintegral_zero, ← ENNReal.ofReal_zero]\n  · simp only [paretoPDF_eq, ge_iff_le, ENNReal.ofReal_eq_zero]\n    filter_upwards with a (_ : a < _)\n    rw [if_neg (by linarith)]\n\n"}
{"name":"ProbabilityTheory.measurable_paretoPDFReal","module":"Mathlib.Probability.Distributions.Pareto","initialProofState":"t r : Real\n⊢ Measurable (ProbabilityTheory.paretoPDFReal t r)","decl":"/-- The Pareto pdf is measurable. -/\n@[measurability, fun_prop]\nlemma measurable_paretoPDFReal (t r : ℝ) : Measurable (paretoPDFReal t r) :=\n  Measurable.ite measurableSet_Ici ((measurable_id.pow_const _).const_mul _) measurable_const\n\n"}
{"name":"ProbabilityTheory.stronglyMeasurable_paretoPDFReal","module":"Mathlib.Probability.Distributions.Pareto","initialProofState":"t r : Real\n⊢ MeasureTheory.StronglyMeasurable (ProbabilityTheory.paretoPDFReal t r)","decl":"/-- The Pareto pdf is strongly measurable. -/\n@[measurability]\nlemma stronglyMeasurable_paretoPDFReal (t r : ℝ) :\n    StronglyMeasurable (paretoPDFReal t r) :=\n  (measurable_paretoPDFReal t r).stronglyMeasurable\n\n"}
{"name":"ProbabilityTheory.paretoPDFReal_pos","module":"Mathlib.Probability.Distributions.Pareto","initialProofState":"t r x : Real\nht : LT.lt 0 t\nhr : LT.lt 0 r\nhx : LE.le t x\n⊢ LT.lt 0 (ProbabilityTheory.paretoPDFReal t r x)","decl":"/-- The Pareto pdf is positive for all reals `>= t`. -/\nlemma paretoPDFReal_pos (ht : 0 < t) (hr : 0 < r) (hx : t ≤ x) :\n    0 < paretoPDFReal t r x := by\n  rw [paretoPDFReal, if_pos hx]\n  have _ : 0 < x := by linarith\n  positivity\n\n"}
{"name":"ProbabilityTheory.paretoPDFReal_nonneg","module":"Mathlib.Probability.Distributions.Pareto","initialProofState":"t r : Real\nht : LE.le 0 t\nhr : LE.le 0 r\nx : Real\n⊢ LE.le 0 (ProbabilityTheory.paretoPDFReal t r x)","decl":"/-- The Pareto pdf is nonnegative. -/\nlemma paretoPDFReal_nonneg (ht : 0 ≤ t) (hr : 0 ≤ r) (x : ℝ) :\n    0 ≤ paretoPDFReal t r x := by\n  unfold paretoPDFReal\n  split_ifs with h\n  · cases le_iff_eq_or_lt.1 ht with\n    | inl ht0 =>\n      rw [← ht0] at h\n      positivity\n    | inr htp =>\n      have := lt_of_lt_of_le htp h\n      positivity\n  · positivity\n\n"}
{"name":"ProbabilityTheory.lintegral_paretoPDF_eq_one","module":"Mathlib.Probability.Distributions.Pareto","initialProofState":"t r : Real\nht : LT.lt 0 t\nhr : LT.lt 0 r\n⊢ Eq (MeasureTheory.lintegral MeasureTheory.MeasureSpace.volume fun x => ProbabilityTheory.paretoPDF t r x) 1","decl":"/-- The pdf of the Pareto distribution integrates to `1`. -/\n@[simp]\nlemma lintegral_paretoPDF_eq_one (ht : 0 < t) (hr : 0 < r) :\n    ∫⁻ x, paretoPDF t r x = 1 := by\n  have leftSide : ∫⁻ x in Iio t, paretoPDF t r x = 0 := lintegral_paretoPDF_of_le (le_refl t)\n  have rightSide : ∫⁻ x in Ici t, paretoPDF t r x =\n      ∫⁻ x in Ici t, ENNReal.ofReal (r * t ^ r * x ^ (-(r + 1))) :=\n    setLIntegral_congr_fun measurableSet_Ici (ae_of_all _ (fun _ ↦ paretoPDF_of_le))\n  rw [← ENNReal.toReal_eq_one_iff, ← lintegral_add_compl _ measurableSet_Ici, compl_Ici,\n    leftSide, rightSide, add_zero, ← integral_eq_lintegral_of_nonneg_ae]\n  · rw [integral_Ici_eq_integral_Ioi, integral_mul_left, integral_Ioi_rpow_of_lt _ ht]\n    · field_simp [hr]\n      rw [mul_assoc, ← rpow_add ht]\n      simp\n    linarith\n  · rw [EventuallyLE, ae_restrict_iff' measurableSet_Ici]\n    refine ae_of_all _ fun x (hx : t ≤ x) ↦ ?_\n    have := lt_of_lt_of_le ht hx\n    positivity\n  · apply (measurable_paretoPDFReal t r).aestronglyMeasurable.congr\n    refine (ae_restrict_iff' measurableSet_Ici).mpr <| ae_of_all _ fun x (hx : t ≤ x) ↦ ?_\n    simp_rw [paretoPDFReal, eq_true_intro hx, ite_true]\n\n"}
{"name":"ProbabilityTheory.isProbabilityMeasure_paretoMeasure","module":"Mathlib.Probability.Distributions.Pareto","initialProofState":"t r : Real\nht : LT.lt 0 t\nhr : LT.lt 0 r\n⊢ MeasureTheory.IsProbabilityMeasure (ProbabilityTheory.paretoMeasure t r)","decl":"lemma isProbabilityMeasure_paretoMeasure (ht : 0 < t) (hr : 0 < r) :\n    IsProbabilityMeasure (paretoMeasure t r) where\n  measure_univ := by simp [paretoMeasure, lintegral_paretoPDF_eq_one ht hr]\n\n"}
{"name":"ProbabilityTheory.paretoCDFReal_eq_integral","module":"Mathlib.Probability.Distributions.Pareto","initialProofState":"t r : Real\nht : LT.lt 0 t\nhr : LT.lt 0 r\nx : Real\n⊢ Eq (↑(ProbabilityTheory.cdf (ProbabilityTheory.paretoMeasure t r)) x) (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.Iic x)) fun x => ProbabilityTheory.paretoPDFReal t r x)","decl":"/-- CDF of the Pareto distribution equals the integral of the PDF. -/\nlemma paretoCDFReal_eq_integral (ht : 0 < t) (hr : 0 < r) (x : ℝ) :\n    cdf (paretoMeasure t r) x = ∫ x in Iic x, paretoPDFReal t r x := by\n  have : IsProbabilityMeasure (paretoMeasure t r) := isProbabilityMeasure_paretoMeasure ht hr\n  rw [cdf_eq_toReal, paretoMeasure, withDensity_apply _ measurableSet_Iic]\n  refine (integral_eq_lintegral_of_nonneg_ae ?_ ?_).symm\n  · exact ae_of_all _ fun _ ↦ by simp only [Pi.zero_apply, paretoPDFReal_nonneg ht.le hr.le]\n  · exact (measurable_paretoPDFReal t r).aestronglyMeasurable.restrict\n\n"}
{"name":"ProbabilityTheory.paretoCDFReal_eq_lintegral","module":"Mathlib.Probability.Distributions.Pareto","initialProofState":"t r : Real\nht : LT.lt 0 t\nhr : LT.lt 0 r\nx : Real\n⊢ Eq (↑(ProbabilityTheory.cdf (ProbabilityTheory.paretoMeasure t r)) x) (MeasureTheory.lintegral (MeasureTheory.MeasureSpace.volume.restrict (Set.Iic x)) fun x => ProbabilityTheory.paretoPDF t r x).toReal","decl":"lemma paretoCDFReal_eq_lintegral (ht : 0 < t) (hr : 0 < r) (x : ℝ) :\n    cdf (paretoMeasure t r) x = ENNReal.toReal (∫⁻ x in Iic x, paretoPDF t r x) := by\n  have : IsProbabilityMeasure (paretoMeasure t r) := isProbabilityMeasure_paretoMeasure ht hr\n  rw [cdf_eq_toReal, paretoMeasure, withDensity_apply _ measurableSet_Iic]\n\n"}
