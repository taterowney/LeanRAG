{"name":"Ideal.ResidueField.mapₐ_apply","module":"Mathlib.RingTheory.LocalRing.ResidueField.Ideal","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝⁴ : CommRing R\ninst✝³ : CommRing A\ninst✝² : Algebra R A\nI : Ideal R\ninst✝¹ : I.IsPrime\nJ : Ideal A\ninst✝ : J.IsPrime\nhf : Eq I (Ideal.comap (algebraMap R A) J)\nx : I.ResidueField\n⊢ Eq ((Ideal.ResidueField.mapₐ I J hf) x) ((Ideal.ResidueField.map I J (algebraMap R A) hf) x)","decl":"@[simp] lemma Ideal.ResidueField.mapₐ_apply (I : Ideal R) [I.IsPrime] (J : Ideal A) [J.IsPrime]\n    (hf : I = J.comap (algebraMap R A)) (x) :\n    Ideal.ResidueField.mapₐ I J hf x = Ideal.ResidueField.map I J _ hf x := rfl\n\n"}
{"name":"Ideal.algebraMap_residueField_eq_zero","module":"Mathlib.RingTheory.LocalRing.ResidueField.Ideal","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\nI : Ideal R\ninst✝ : I.IsPrime\nx : R\n⊢ Iff (Eq ((algebraMap R I.ResidueField) x) 0) (Membership.mem I x)","decl":"variable {I} in\n@[simp]\nlemma Ideal.algebraMap_residueField_eq_zero {x} :\n    algebraMap R I.ResidueField x = 0 ↔ x ∈ I := by\n  rw [IsScalarTower.algebraMap_apply R (Localization.AtPrime I),\n    IsLocalRing.ResidueField.algebraMap_eq, IsLocalRing.residue_eq_zero_iff]\n  exact IsLocalization.AtPrime.to_map_mem_maximal_iff _ _ _\n\n"}
{"name":"Ideal.ker_algebraMap_residueField","module":"Mathlib.RingTheory.LocalRing.ResidueField.Ideal","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\nI : Ideal R\ninst✝ : I.IsPrime\n⊢ Eq (RingHom.ker (algebraMap R I.ResidueField)) I","decl":"@[simp]\nlemma Ideal.ker_algebraMap_residueField :\n    RingHom.ker (algebraMap R I.ResidueField) = I :=\n  Ideal.ext fun _ ↦ Ideal.algebraMap_residueField_eq_zero\n\n"}
{"name":"instIsScalarTowerQuotientIdealResidueField","module":"Mathlib.RingTheory.LocalRing.ResidueField.Ideal","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\nI : Ideal R\ninst✝ : I.IsPrime\n⊢ IsScalarTower R (HasQuotient.Quotient R I) I.ResidueField","decl":"instance : IsScalarTower R (R ⧸ I) I.ResidueField :=\n  IsScalarTower.of_algebraMap_eq fun _ ↦ rfl\n\n"}
{"name":"algebraMap_mk","module":"Mathlib.RingTheory.LocalRing.ResidueField.Ideal","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\nI : Ideal R\ninst✝ : I.IsPrime\nx : R\n⊢ Eq ((algebraMap (HasQuotient.Quotient R I) I.ResidueField) ((Ideal.Quotient.mk I) x)) ((algebraMap R I.ResidueField) x)","decl":"@[simp]\nlemma algebraMap_mk (x) :\n    algebraMap (R ⧸ I) I.ResidueField (Ideal.Quotient.mk _ x) =\n    algebraMap R I.ResidueField x := rfl\n\n"}
{"name":"Ideal.injective_algebraMap_quotient_residueField","module":"Mathlib.RingTheory.LocalRing.ResidueField.Ideal","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\nI : Ideal R\ninst✝ : I.IsPrime\n⊢ Function.Injective ⇑(algebraMap (HasQuotient.Quotient R I) I.ResidueField)","decl":"lemma Ideal.injective_algebraMap_quotient_residueField :\n    Function.Injective (algebraMap (R ⧸ I) I.ResidueField) := by\n  rw [RingHom.injective_iff_ker_eq_bot]\n  refine (Ideal.ker_quotient_lift _ _).trans ?_\n  show map (Quotient.mk I) (RingHom.ker (algebraMap R I.ResidueField)) = ⊥\n  rw [Ideal.ker_algebraMap_residueField, map_quotient_self]\n\n"}
{"name":"instIsFractionRingQuotientIdealResidueField","module":"Mathlib.RingTheory.LocalRing.ResidueField.Ideal","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\nI : Ideal R\ninst✝ : I.IsPrime\n⊢ IsFractionRing (HasQuotient.Quotient R I) I.ResidueField","decl":"instance : IsFractionRing (R ⧸ I) I.ResidueField where\n  map_units' y := isUnit_iff_ne_zero.mpr\n    (map_ne_zero_of_mem_nonZeroDivisors _ I.injective_algebraMap_quotient_residueField y.2)\n  surj' x := by\n    obtain ⟨x, rfl⟩ := IsLocalRing.residue_surjective x\n    obtain ⟨x, ⟨s, hs⟩, rfl⟩ := IsLocalization.mk'_surjective I.primeCompl x\n    refine ⟨⟨Ideal.Quotient.mk _ x, ⟨Ideal.Quotient.mk _ s, ?_⟩⟩, ?_⟩\n    · rwa [mem_nonZeroDivisors_iff_ne_zero, ne_eq, Ideal.Quotient.eq_zero_iff_mem]\n    · simp [IsScalarTower.algebraMap_eq R (Localization.AtPrime I) I.ResidueField, ← map_mul]\n  exists_of_eq {x y} e := by\n    obtain ⟨x, rfl⟩ := Ideal.Quotient.mk_surjective x\n    obtain ⟨y, rfl⟩ := Ideal.Quotient.mk_surjective y\n    rw [← sub_eq_zero, ← map_sub, ← map_sub] at e\n    simp only [IsLocalRing.ResidueField.algebraMap_eq, IsLocalRing.residue_eq_zero_iff,\n      IsScalarTower.algebraMap_apply R (Localization.AtPrime I) I.ResidueField, algebraMap_mk,\n      IsLocalization.AtPrime.to_map_mem_maximal_iff _ I, ← Ideal.Quotient.mk_eq_mk_iff_sub_mem] at e\n    use 1\n    simp [e]\n\n"}
{"name":"Ideal.bijective_algebraMap_quotient_residueField","module":"Mathlib.RingTheory.LocalRing.ResidueField.Ideal","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\nI : Ideal R\ninst✝ : I.IsMaximal\n⊢ Function.Bijective ⇑(algebraMap (HasQuotient.Quotient R I) I.ResidueField)","decl":"lemma Ideal.bijective_algebraMap_quotient_residueField (I : Ideal R) [I.IsMaximal] :\n    Function.Bijective (algebraMap (R ⧸ I) I.ResidueField) :=\n  ⟨I.injective_algebraMap_quotient_residueField, IsFractionRing.surjective_iff_isField.mpr\n    ((Quotient.maximal_ideal_iff_isField_quotient I).mp inferInstance)⟩\n"}
