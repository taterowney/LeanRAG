{"name":"Nat.superFactorial_zero","module":"Mathlib.Data.Nat.Factorial.SuperFactorial","initialProofState":"⊢ Eq (Nat.superFactorial 0) 1","decl":"@[simp]\ntheorem superFactorial_zero : sf 0 = 1 :=\n  rfl\n\n"}
{"name":"Nat.superFactorial_succ","module":"Mathlib.Data.Nat.Factorial.SuperFactorial","initialProofState":"n : Nat\n⊢ Eq n.succ.superFactorial (HMul.hMul (HAdd.hAdd n 1).factorial n.superFactorial)","decl":"theorem superFactorial_succ (n : ℕ) : (sf n.succ) = (n + 1)! * sf n :=\n  rfl\n\n"}
{"name":"Nat.superFactorial_one","module":"Mathlib.Data.Nat.Factorial.SuperFactorial","initialProofState":"⊢ Eq (Nat.superFactorial 1) 1","decl":"@[simp]\ntheorem superFactorial_one : sf 1 = 1 :=\n  rfl\n\n"}
{"name":"Nat.superFactorial_two","module":"Mathlib.Data.Nat.Factorial.SuperFactorial","initialProofState":"⊢ Eq (Nat.superFactorial 2) 2","decl":"@[simp]\ntheorem superFactorial_two : sf 2 = 2 :=\n  rfl\n\n"}
{"name":"Nat.prod_Icc_factorial","module":"Mathlib.Data.Nat.Factorial.SuperFactorial","initialProofState":"n : Nat\n⊢ Eq ((Finset.Icc 1 n).prod fun x => x.factorial) n.superFactorial","decl":"@[simp]\ntheorem prod_Icc_factorial : ∀ n : ℕ, ∏ x ∈ Icc 1 n, x ! = sf n\n  | 0 => rfl\n  | n + 1 => by\n    rw [← Ico_succ_right 1 n.succ, prod_Ico_succ_top <| Nat.succ_le_succ <| Nat.zero_le n,\n    Nat.factorial_succ, Ico_succ_right 1 n, prod_Icc_factorial n, superFactorial, factorial,\n    Nat.succ_eq_add_one, mul_comm]\n\n"}
{"name":"Nat.prod_range_factorial_succ","module":"Mathlib.Data.Nat.Factorial.SuperFactorial","initialProofState":"n : Nat\n⊢ Eq ((Finset.range n).prod fun x => (HAdd.hAdd x 1).factorial) n.superFactorial","decl":"@[simp]\ntheorem prod_range_factorial_succ (n : ℕ) : ∏ x ∈ range n, (x + 1)! = sf n :=\n  (prod_Icc_factorial n) ▸ range_eq_Ico ▸ Finset.prod_Ico_add' _ _ _ _\n\n"}
{"name":"Nat.prod_range_succ_factorial","module":"Mathlib.Data.Nat.Factorial.SuperFactorial","initialProofState":"n : Nat\n⊢ Eq ((Finset.range (HAdd.hAdd n 1)).prod fun x => x.factorial) n.superFactorial","decl":"@[simp]\ntheorem prod_range_succ_factorial : ∀ n : ℕ, ∏ x ∈ range (n + 1), x ! = sf n\n  | 0 => rfl\n  | n + 1 => by\n    rw [prod_range_succ, prod_range_succ_factorial n, mul_comm, superFactorial]\n\n"}
{"name":"Nat.det_vandermonde_id_eq_superFactorial","module":"Mathlib.Data.Nat.Factorial.SuperFactorial","initialProofState":"R : Type u_1\ninst✝ : CommRing R\nn : Nat\n⊢ Eq (Matrix.vandermonde fun i => ↑↑i).det ↑n.superFactorial","decl":"theorem det_vandermonde_id_eq_superFactorial (n : ℕ) :\n    (Matrix.vandermonde (fun (i : Fin (n + 1)) ↦ (i : R))).det = Nat.superFactorial n := by\n  induction' n with n hn\n  · simp [Matrix.det_vandermonde]\n  · rw [Nat.superFactorial, Matrix.det_vandermonde, Fin.prod_univ_succAbove _ 0]\n    push_cast\n    congr\n    · simp only [Fin.val_zero, Nat.cast_zero, sub_zero]\n      norm_cast\n      simp [Fin.prod_univ_eq_prod_range (fun i ↦ (↑i + 1)) (n + 1)]\n    · rw [Matrix.det_vandermonde] at hn\n      simp [hn]\n\n"}
{"name":"Nat.superFactorial_two_mul","module":"Mathlib.Data.Nat.Factorial.SuperFactorial","initialProofState":"n : Nat\n⊢ Eq (HMul.hMul 2 n).superFactorial (HMul.hMul (HMul.hMul (HPow.hPow ((Finset.range n).prod fun i => (HAdd.hAdd (HMul.hMul 2 i) 1).factorial) 2) (HPow.hPow 2 n)) n.factorial)","decl":"theorem superFactorial_two_mul : ∀ n : ℕ,\n    sf (2 * n) = (∏ i ∈ range n, (2 * i + 1) !) ^ 2 * 2 ^ n * n !\n  | 0 => rfl\n  | (n + 1) => by\n    simp only [prod_range_succ, mul_pow, mul_add, mul_one, superFactorial_succ,\n      superFactorial_two_mul n, factorial_succ]\n    ring\n\n"}
{"name":"Nat.superFactorial_four_mul","module":"Mathlib.Data.Nat.Factorial.SuperFactorial","initialProofState":"n : Nat\n⊢ Eq (HMul.hMul 4 n).superFactorial (HMul.hMul (HPow.hPow (HMul.hMul ((Finset.range (HMul.hMul 2 n)).prod fun i => (HAdd.hAdd (HMul.hMul 2 i) 1).factorial) (HPow.hPow 2 n)) 2) (HMul.hMul 2 n).factorial)","decl":"theorem superFactorial_four_mul (n : ℕ) :\n    sf (4 * n) = ((∏ i ∈ range (2 * n), (2 * i + 1) !) * 2 ^ n) ^ 2 * (2 * n) ! :=\n  calc\n    sf (4 * n) = (∏ i ∈ range (2 * n), (2 * i + 1) !) ^ 2 * 2 ^ (2 * n) * (2 * n) ! := by\n      rw [← superFactorial_two_mul, ← mul_assoc, Nat.mul_two]\n    _ = ((∏ i ∈ range (2 * n), (2 * i + 1) !) * 2 ^ n) ^ 2 * (2 * n) ! := by\n      rw [pow_mul', mul_pow]\n\n"}
{"name":"Nat.superFactorial_dvd_vandermonde_det","module":"Mathlib.Data.Nat.Factorial.SuperFactorial","initialProofState":"n : Nat\nv : Fin (HAdd.hAdd n 1) → Int\n⊢ Dvd.dvd (↑n.superFactorial) (Matrix.vandermonde v).det","decl":"theorem superFactorial_dvd_vandermonde_det {n : ℕ} (v : Fin (n + 1) → ℤ) :\n    ↑(Nat.superFactorial n) ∣ (Matrix.vandermonde v).det := by\n  let m := inf' univ ⟨0, mem_univ _⟩ v\n  let w' := fun i ↦ (v i - m).toNat\n  have hw' : ∀ i, (w' i : ℤ) = v i - m := fun i ↦ Int.toNat_sub_of_le (inf'_le _ (mem_univ _))\n  have h := Matrix.det_eval_matrixOfPolynomials_eq_det_vandermonde (fun i ↦ ↑(w' i))\n      (fun i => descPochhammer ℤ i)\n      (fun i => descPochhammer_natDegree ℤ i)\n      (fun i => monic_descPochhammer ℤ i)\n  conv_lhs at h => simp only [hw', Matrix.det_vandermonde_sub]\n  use (Matrix.of (fun (i j : Fin (n + 1)) => (Nat.choose (w' i) (j : ℕ) : ℤ))).det\n  simp [h, matrixOf_eval_descPochhammer_eq_mul_matrixOf_choose w', Fin.prod_univ_eq_prod_range]\n\n"}
