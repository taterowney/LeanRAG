{"name":"Fintype.card_finset","module":"Mathlib.Data.Fintype.Powerset","initialProofState":"α : Type u_1\ninst✝ : Fintype α\n⊢ Eq (Fintype.card (Finset α)) (HPow.hPow 2 (Fintype.card α))","decl":"@[simp]\ntheorem Fintype.card_finset [Fintype α] : Fintype.card (Finset α) = 2 ^ Fintype.card α :=\n  Finset.card_powerset Finset.univ\n\n"}
{"name":"Finset.powerset_univ","module":"Mathlib.Data.Fintype.Powerset","initialProofState":"α : Type u_1\ninst✝ : Fintype α\n⊢ Eq Finset.univ.powerset Finset.univ","decl":"@[simp] lemma powerset_univ : (univ : Finset α).powerset = univ :=\n  coe_injective <| by simp [-coe_eq_univ]\n\n"}
{"name":"Finset.filter_subset_univ","module":"Mathlib.Data.Fintype.Powerset","initialProofState":"α : Type u_1\ninst✝¹ : Fintype α\ninst✝ : DecidableEq α\ns : Finset α\n⊢ Eq (Finset.filter (fun t => HasSubset.Subset t s) Finset.univ) s.powerset","decl":"lemma filter_subset_univ [DecidableEq α] (s : Finset α) :\n    ({t | t ⊆ s} : Finset _) = powerset s := by ext; simp\n\n"}
{"name":"Finset.powerset_eq_univ","module":"Mathlib.Data.Fintype.Powerset","initialProofState":"α : Type u_1\ninst✝ : Fintype α\ns : Finset α\n⊢ Iff (Eq s.powerset Finset.univ) (Eq s Finset.univ)","decl":"@[simp] lemma powerset_eq_univ : s.powerset = univ ↔ s = univ := by\n  rw [← Finset.powerset_univ, powerset_inj]\n\n"}
{"name":"Finset.mem_powersetCard_univ","module":"Mathlib.Data.Fintype.Powerset","initialProofState":"α : Type u_1\ninst✝ : Fintype α\ns : Finset α\nk : Nat\n⊢ Iff (Membership.mem (Finset.powersetCard k Finset.univ) s) (Eq s.card k)","decl":"lemma mem_powersetCard_univ : s ∈ powersetCard k (univ : Finset α) ↔ #s = k :=\n  mem_powersetCard.trans <| and_iff_right <| subset_univ _\n\n"}
{"name":"Finset.univ_filter_card_eq","module":"Mathlib.Data.Fintype.Powerset","initialProofState":"α : Type u_1\ninst✝ : Fintype α\nk : Nat\n⊢ Eq (Finset.filter (fun s => Eq s.card k) Finset.univ) (Finset.powersetCard k Finset.univ)","decl":"@[simp] lemma univ_filter_card_eq (k : ℕ) :\n   ({s | #s = k} : Finset (Finset α)) = univ.powersetCard k := by ext; simp\n\n"}
{"name":"Fintype.card_finset_len","module":"Mathlib.Data.Fintype.Powerset","initialProofState":"α : Type u_1\ninst✝ : Fintype α\nk : Nat\n⊢ Eq (Fintype.card (Subtype fun s => Eq s.card k)) ((Fintype.card α).choose k)","decl":"@[simp]\ntheorem Fintype.card_finset_len [Fintype α] (k : ℕ) :\n    Fintype.card { s : Finset α // #s = k } = Nat.choose (Fintype.card α) k := by\n  simp [Fintype.subtype_card, Finset.card_univ]\n\n"}
{"name":"Set.finite'","module":"Mathlib.Data.Fintype.Powerset","initialProofState":"α : Type u_1\ninst✝ : Finite α\n⊢ Finite (Set α)","decl":"instance Set.finite' [Finite α] : Finite (Set α) := by\n  cases nonempty_fintype α\n  infer_instance\n\n"}
{"name":"Fintype.card_set","module":"Mathlib.Data.Fintype.Powerset","initialProofState":"α : Type u_1\ninst✝ : Fintype α\n⊢ Eq (Fintype.card (Set α)) (HPow.hPow 2 (Fintype.card α))","decl":"@[simp]\ntheorem Fintype.card_set [Fintype α] : Fintype.card (Set α) = 2 ^ Fintype.card α :=\n  (Finset.card_map _).trans (Finset.card_powerset _)\n"}
