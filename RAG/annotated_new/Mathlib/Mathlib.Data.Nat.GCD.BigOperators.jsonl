{"name":"Nat.coprime_list_prod_left_iff","module":"Mathlib.Data.Nat.GCD.BigOperators","initialProofState":"l : List Nat\nk : Nat\n⊢ Iff (l.prod.Coprime k) (∀ (n : Nat), Membership.mem l n → n.Coprime k)","decl":"theorem coprime_list_prod_left_iff {l : List ℕ} {k : ℕ} :\n    Coprime l.prod k ↔ ∀ n ∈ l, Coprime n k := by\n  induction l <;> simp [Nat.coprime_mul_iff_left, *]\n\n"}
{"name":"Nat.coprime_list_prod_right_iff","module":"Mathlib.Data.Nat.GCD.BigOperators","initialProofState":"k : Nat\nl : List Nat\n⊢ Iff (k.Coprime l.prod) (∀ (n : Nat), Membership.mem l n → k.Coprime n)","decl":"theorem coprime_list_prod_right_iff {k : ℕ} {l : List ℕ} :\n    Coprime k l.prod ↔ ∀ n ∈ l, Coprime k n := by\n  simp_rw [coprime_comm (n := k), coprime_list_prod_left_iff]\n\n"}
{"name":"Nat.coprime_multiset_prod_left_iff","module":"Mathlib.Data.Nat.GCD.BigOperators","initialProofState":"m : Multiset Nat\nk : Nat\n⊢ Iff (m.prod.Coprime k) (∀ (n : Nat), Membership.mem m n → n.Coprime k)","decl":"theorem coprime_multiset_prod_left_iff {m : Multiset ℕ} {k : ℕ} :\n    Coprime m.prod k ↔ ∀ n ∈ m, Coprime n k := by\n  induction m using Quotient.inductionOn; simpa using coprime_list_prod_left_iff\n\n"}
{"name":"Nat.coprime_multiset_prod_right_iff","module":"Mathlib.Data.Nat.GCD.BigOperators","initialProofState":"k : Nat\nm : Multiset Nat\n⊢ Iff (k.Coprime m.prod) (∀ (n : Nat), Membership.mem m n → k.Coprime n)","decl":"theorem coprime_multiset_prod_right_iff {k : ℕ} {m : Multiset ℕ} :\n    Coprime k m.prod ↔ ∀ n ∈ m, Coprime k n := by\n  induction m using Quotient.inductionOn; simpa using coprime_list_prod_right_iff\n\n"}
{"name":"Nat.coprime_prod_left_iff","module":"Mathlib.Data.Nat.GCD.BigOperators","initialProofState":"ι : Type u_1\nt : Finset ι\ns : ι → Nat\nx : Nat\n⊢ Iff ((t.prod fun i => s i).Coprime x) (∀ (i : ι), Membership.mem t i → (s i).Coprime x)","decl":"theorem coprime_prod_left_iff {t : Finset ι} {s : ι → ℕ} {x : ℕ} :\n    Coprime (∏ i ∈ t, s i) x ↔ ∀ i ∈ t, Coprime (s i) x := by\n  simpa using coprime_multiset_prod_left_iff (m := t.val.map s)\n\n"}
{"name":"Nat.coprime_prod_right_iff","module":"Mathlib.Data.Nat.GCD.BigOperators","initialProofState":"ι : Type u_1\nx : Nat\nt : Finset ι\ns : ι → Nat\n⊢ Iff (x.Coprime (t.prod fun i => s i)) (∀ (i : ι), Membership.mem t i → x.Coprime (s i))","decl":"theorem coprime_prod_right_iff {x : ℕ} {t : Finset ι} {s : ι → ℕ} :\n    Coprime x (∏ i ∈ t, s i) ↔ ∀ i ∈ t, Coprime x (s i) := by\n  simpa using coprime_multiset_prod_right_iff (m := t.val.map s)\n\n"}
{"name":"Nat.Coprime.prod_left","module":"Mathlib.Data.Nat.GCD.BigOperators","initialProofState":"ι : Type u_1\nt : Finset ι\ns : ι → Nat\nx : Nat\na✝ : ∀ (i : ι), Membership.mem t i → (s i).Coprime x\n⊢ (t.prod fun i => s i).Coprime x","decl":"/-- See `IsCoprime.prod_left` for the corresponding lemma about `IsCoprime` -/\nalias ⟨_, Coprime.prod_left⟩ := coprime_prod_left_iff\n\n"}
{"name":"Nat.Coprime.prod_right","module":"Mathlib.Data.Nat.GCD.BigOperators","initialProofState":"ι : Type u_1\nx : Nat\nt : Finset ι\ns : ι → Nat\na✝ : ∀ (i : ι), Membership.mem t i → x.Coprime (s i)\n⊢ x.Coprime (t.prod fun i => s i)","decl":"/-- See `IsCoprime.prod_right` for the corresponding lemma about `IsCoprime` -/\nalias ⟨_, Coprime.prod_right⟩ := coprime_prod_right_iff\n\n"}
{"name":"Nat.coprime_fintype_prod_left_iff","module":"Mathlib.Data.Nat.GCD.BigOperators","initialProofState":"ι : Type u_1\ninst✝ : Fintype ι\ns : ι → Nat\nx : Nat\n⊢ Iff ((Finset.univ.prod fun i => s i).Coprime x) (∀ (i : ι), (s i).Coprime x)","decl":"theorem coprime_fintype_prod_left_iff [Fintype ι] {s : ι → ℕ} {x : ℕ} :\n    Coprime (∏ i, s i) x ↔ ∀ i, Coprime (s i) x := by\n  simp [coprime_prod_left_iff]\n\n"}
{"name":"Nat.coprime_fintype_prod_right_iff","module":"Mathlib.Data.Nat.GCD.BigOperators","initialProofState":"ι : Type u_1\ninst✝ : Fintype ι\nx : Nat\ns : ι → Nat\n⊢ Iff (x.Coprime (Finset.univ.prod fun i => s i)) (∀ (i : ι), x.Coprime (s i))","decl":"theorem coprime_fintype_prod_right_iff [Fintype ι] {x : ℕ} {s : ι → ℕ} :\n    Coprime x (∏ i, s i) ↔ ∀ i, Coprime x (s i) := by\n  simp [coprime_prod_right_iff]\n\n"}
