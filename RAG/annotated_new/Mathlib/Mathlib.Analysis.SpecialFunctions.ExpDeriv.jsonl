{"name":"analyticOnNhd_cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"‚ä¢ AnalyticOnNhd Complex Complex.exp Set.univ","decl":"/-- `exp` is entire -/\ntheorem analyticOnNhd_cexp : AnalyticOnNhd ‚ÑÇ exp univ := by\n  rw [Complex.exp_eq_exp_‚ÑÇ]\n  exact fun x _ ‚Ü¶ NormedSpace.exp_analytic x\n\n"}
{"name":"analyticOn_cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"‚ä¢ AnalyticOn Complex Complex.exp Set.univ","decl":"theorem analyticOn_cexp : AnalyticOn ‚ÑÇ exp univ := analyticOnNhd_cexp.analyticOn\n\n"}
{"name":"analyticAt_cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"z : Complex\n‚ä¢ AnalyticAt Complex Complex.exp z","decl":"/-- `exp` is analytic at any point -/\n@[fun_prop]\ntheorem analyticAt_cexp : AnalyticAt ‚ÑÇ exp z :=\n  analyticOnNhd_cexp z (mem_univ _)\n\n"}
{"name":"AnalyticAt.cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Complex E\nf : E ‚Üí Complex\nx : E\nfa : AnalyticAt Complex f x\n‚ä¢ AnalyticAt Complex (Function.comp Complex.exp f) x","decl":"/-- `exp ‚àò f` is analytic -/\n@[fun_prop]\ntheorem AnalyticAt.cexp (fa : AnalyticAt ‚ÑÇ f x) : AnalyticAt ‚ÑÇ (exp ‚àò f) x :=\n  analyticAt_cexp.comp fa\n\n"}
{"name":"AnalyticAt.cexp'","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Complex E\nf : E ‚Üí Complex\nx : E\nfa : AnalyticAt Complex f x\n‚ä¢ AnalyticAt Complex (fun z => Complex.exp (f z)) x","decl":"/-- `exp ‚àò f` is analytic -/\n@[fun_prop]\ntheorem AnalyticAt.cexp' (fa : AnalyticAt ‚ÑÇ f x) : AnalyticAt ‚ÑÇ (fun z ‚Ü¶ exp (f z)) x :=\n  fa.cexp\n\n"}
{"name":"AnalyticWithinAt.cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Complex E\nf : E ‚Üí Complex\nx : E\ns : Set E\nfa : AnalyticWithinAt Complex f s x\n‚ä¢ AnalyticWithinAt Complex (fun z => Complex.exp (f z)) s x","decl":"theorem AnalyticWithinAt.cexp (fa : AnalyticWithinAt ‚ÑÇ f s x) :\n    AnalyticWithinAt ‚ÑÇ (fun z ‚Ü¶ exp (f z)) s x :=\n  analyticAt_cexp.comp_analyticWithinAt fa\n\n"}
{"name":"AnalyticOnNhd.cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Complex E\nf : E ‚Üí Complex\ns : Set E\nfs : AnalyticOnNhd Complex f s\n‚ä¢ AnalyticOnNhd Complex (fun z => Complex.exp (f z)) s","decl":"/-- `exp ‚àò f` is analytic -/\ntheorem AnalyticOnNhd.cexp (fs : AnalyticOnNhd ‚ÑÇ f s) : AnalyticOnNhd ‚ÑÇ (fun z ‚Ü¶ exp (f z)) s :=\n  fun z n ‚Ü¶ analyticAt_cexp.comp (fs z n)\n\n"}
{"name":"AnalyticOn.cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Complex E\nf : E ‚Üí Complex\ns : Set E\nfs : AnalyticOn Complex f s\n‚ä¢ AnalyticOn Complex (fun z => Complex.exp (f z)) s","decl":"theorem AnalyticOn.cexp (fs : AnalyticOn ‚ÑÇ f s) : AnalyticOn ‚ÑÇ (fun z ‚Ü¶ exp (f z)) s :=\n  analyticOnNhd_cexp.comp_analyticOn fs (mapsTo_univ _ _)\n\n"}
{"name":"Complex.hasDerivAt_exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"x : Complex\n‚ä¢ HasDerivAt Complex.exp (Complex.exp x) x","decl":"/-- The complex exponential is everywhere differentiable, with the derivative `exp x`. -/\ntheorem hasDerivAt_exp (x : ‚ÑÇ) : HasDerivAt exp (exp x) x := by\n  rw [hasDerivAt_iff_isLittleO_nhds_zero]\n  have : (1 : ‚Ñï) < 2 := by norm_num\n  refine (IsBigO.of_bound ‚Äñexp x‚Äñ ?_).trans_isLittleO (isLittleO_pow_id this)\n  filter_upwards [Metric.ball_mem_nhds (0 : ‚ÑÇ) zero_lt_one]\n  simp only [Metric.mem_ball, dist_zero_right, norm_pow]\n  exact fun z hz => exp_bound_sq x z hz.le\n\n"}
{"name":"Complex.differentiable_exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"ùïú : Type u_1\ninst‚úù¬π : NontriviallyNormedField ùïú\ninst‚úù : NormedAlgebra ùïú Complex\n‚ä¢ Differentiable ùïú Complex.exp","decl":"@[simp]\ntheorem differentiable_exp : Differentiable ùïú exp := fun x =>\n  (hasDerivAt_exp x).differentiableAt.restrictScalars ùïú\n\n"}
{"name":"Complex.differentiableAt_exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"ùïú : Type u_1\ninst‚úù¬π : NontriviallyNormedField ùïú\ninst‚úù : NormedAlgebra ùïú Complex\nx : Complex\n‚ä¢ DifferentiableAt ùïú Complex.exp x","decl":"@[simp]\ntheorem differentiableAt_exp {x : ‚ÑÇ} : DifferentiableAt ùïú exp x :=\n  differentiable_exp x\n\n"}
{"name":"Complex.deriv_exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"‚ä¢ Eq (deriv Complex.exp) Complex.exp","decl":"@[simp]\ntheorem deriv_exp : deriv exp = exp :=\n  funext fun x => (hasDerivAt_exp x).deriv\n\n"}
{"name":"Complex.iter_deriv_exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"n : Nat\n‚ä¢ Eq (Nat.iterate deriv n Complex.exp) Complex.exp","decl":"@[simp]\ntheorem iter_deriv_exp : ‚àÄ n : ‚Ñï, deriv^[n] exp = exp\n  | 0 => rfl\n  | n + 1 => by rw [iterate_succ_apply, deriv_exp, iter_deriv_exp n]\n\n"}
{"name":"Complex.contDiff_exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"ùïú : Type u_1\ninst‚úù¬π : NontriviallyNormedField ùïú\ninst‚úù : NormedAlgebra ùïú Complex\nn : WithTop ENat\n‚ä¢ ContDiff ùïú n Complex.exp","decl":"theorem contDiff_exp {n : WithTop ‚Ñï‚àû} : ContDiff ùïú n exp :=\n  analyticOnNhd_cexp.restrictScalars.contDiff\n\n"}
{"name":"Complex.hasStrictDerivAt_exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"x : Complex\n‚ä¢ HasStrictDerivAt Complex.exp (Complex.exp x) x","decl":"theorem hasStrictDerivAt_exp (x : ‚ÑÇ) : HasStrictDerivAt exp (exp x) x :=\n  contDiff_exp.contDiffAt.hasStrictDerivAt' (hasDerivAt_exp x) le_rfl\n\n"}
{"name":"Complex.hasStrictFDerivAt_exp_real","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"x : Complex\n‚ä¢ HasStrictFDerivAt Complex.exp (HSMul.hSMul (Complex.exp x) 1) x","decl":"theorem hasStrictFDerivAt_exp_real (x : ‚ÑÇ) : HasStrictFDerivAt exp (exp x ‚Ä¢ (1 : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ)) x :=\n  (hasStrictDerivAt_exp x).complexToReal_fderiv\n\n"}
{"name":"HasStrictDerivAt.cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"ùïú : Type u_1\ninst‚úù¬π : NontriviallyNormedField ùïú\ninst‚úù : NormedAlgebra ùïú Complex\nf : ùïú ‚Üí Complex\nf' : Complex\nx : ùïú\nhf : HasStrictDerivAt f f' x\n‚ä¢ HasStrictDerivAt (fun x => Complex.exp (f x)) (HMul.hMul (Complex.exp (f x)) f') x","decl":"theorem HasStrictDerivAt.cexp (hf : HasStrictDerivAt f f' x) :\n    HasStrictDerivAt (fun x => Complex.exp (f x)) (Complex.exp (f x) * f') x :=\n  (Complex.hasStrictDerivAt_exp (f x)).comp x hf\n\n"}
{"name":"HasDerivAt.cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"ùïú : Type u_1\ninst‚úù¬π : NontriviallyNormedField ùïú\ninst‚úù : NormedAlgebra ùïú Complex\nf : ùïú ‚Üí Complex\nf' : Complex\nx : ùïú\nhf : HasDerivAt f f' x\n‚ä¢ HasDerivAt (fun x => Complex.exp (f x)) (HMul.hMul (Complex.exp (f x)) f') x","decl":"theorem HasDerivAt.cexp (hf : HasDerivAt f f' x) :\n    HasDerivAt (fun x => Complex.exp (f x)) (Complex.exp (f x) * f') x :=\n  (Complex.hasDerivAt_exp (f x)).comp x hf\n\n"}
{"name":"HasDerivWithinAt.cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"ùïú : Type u_1\ninst‚úù¬π : NontriviallyNormedField ùïú\ninst‚úù : NormedAlgebra ùïú Complex\nf : ùïú ‚Üí Complex\nf' : Complex\nx : ùïú\ns : Set ùïú\nhf : HasDerivWithinAt f f' s x\n‚ä¢ HasDerivWithinAt (fun x => Complex.exp (f x)) (HMul.hMul (Complex.exp (f x)) f') s x","decl":"theorem HasDerivWithinAt.cexp (hf : HasDerivWithinAt f f' s x) :\n    HasDerivWithinAt (fun x => Complex.exp (f x)) (Complex.exp (f x) * f') s x :=\n  (Complex.hasDerivAt_exp (f x)).comp_hasDerivWithinAt x hf\n\n"}
{"name":"derivWithin_cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"ùïú : Type u_1\ninst‚úù¬π : NontriviallyNormedField ùïú\ninst‚úù : NormedAlgebra ùïú Complex\nf : ùïú ‚Üí Complex\nx : ùïú\ns : Set ùïú\nhf : DifferentiableWithinAt ùïú f s x\nhxs : UniqueDiffWithinAt ùïú s x\n‚ä¢ Eq (derivWithin (fun x => Complex.exp (f x)) s x) (HMul.hMul (Complex.exp (f x)) (derivWithin f s x))","decl":"theorem derivWithin_cexp (hf : DifferentiableWithinAt ùïú f s x) (hxs : UniqueDiffWithinAt ùïú s x) :\n    derivWithin (fun x => Complex.exp (f x)) s x = Complex.exp (f x) * derivWithin f s x :=\n  hf.hasDerivWithinAt.cexp.derivWithin hxs\n\n"}
{"name":"deriv_cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"ùïú : Type u_1\ninst‚úù¬π : NontriviallyNormedField ùïú\ninst‚úù : NormedAlgebra ùïú Complex\nf : ùïú ‚Üí Complex\nx : ùïú\nhc : DifferentiableAt ùïú f x\n‚ä¢ Eq (deriv (fun x => Complex.exp (f x)) x) (HMul.hMul (Complex.exp (f x)) (deriv f x))","decl":"@[simp]\ntheorem deriv_cexp (hc : DifferentiableAt ùïú f x) :\n    deriv (fun x => Complex.exp (f x)) x = Complex.exp (f x) * deriv f x :=\n  hc.hasDerivAt.cexp.deriv\n\n"}
{"name":"HasStrictFDerivAt.cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"ùïú : Type u_1\ninst‚úù¬≥ : NontriviallyNormedField ùïú\ninst‚úù¬≤ : NormedAlgebra ùïú Complex\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace ùïú E\nf : E ‚Üí Complex\nf' : ContinuousLinearMap (RingHom.id ùïú) E Complex\nx : E\nhf : HasStrictFDerivAt f f' x\n‚ä¢ HasStrictFDerivAt (fun x => Complex.exp (f x)) (HSMul.hSMul (Complex.exp (f x)) f') x","decl":"theorem HasStrictFDerivAt.cexp (hf : HasStrictFDerivAt f f' x) :\n    HasStrictFDerivAt (fun x => Complex.exp (f x)) (Complex.exp (f x) ‚Ä¢ f') x :=\n  (Complex.hasStrictDerivAt_exp (f x)).comp_hasStrictFDerivAt x hf\n\n"}
{"name":"HasFDerivWithinAt.cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"ùïú : Type u_1\ninst‚úù¬≥ : NontriviallyNormedField ùïú\ninst‚úù¬≤ : NormedAlgebra ùïú Complex\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace ùïú E\nf : E ‚Üí Complex\nf' : ContinuousLinearMap (RingHom.id ùïú) E Complex\nx : E\ns : Set E\nhf : HasFDerivWithinAt f f' s x\n‚ä¢ HasFDerivWithinAt (fun x => Complex.exp (f x)) (HSMul.hSMul (Complex.exp (f x)) f') s x","decl":"theorem HasFDerivWithinAt.cexp (hf : HasFDerivWithinAt f f' s x) :\n    HasFDerivWithinAt (fun x => Complex.exp (f x)) (Complex.exp (f x) ‚Ä¢ f') s x :=\n  (Complex.hasDerivAt_exp (f x)).comp_hasFDerivWithinAt x hf\n\n"}
{"name":"HasFDerivAt.cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"ùïú : Type u_1\ninst‚úù¬≥ : NontriviallyNormedField ùïú\ninst‚úù¬≤ : NormedAlgebra ùïú Complex\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace ùïú E\nf : E ‚Üí Complex\nf' : ContinuousLinearMap (RingHom.id ùïú) E Complex\nx : E\nhf : HasFDerivAt f f' x\n‚ä¢ HasFDerivAt (fun x => Complex.exp (f x)) (HSMul.hSMul (Complex.exp (f x)) f') x","decl":"theorem HasFDerivAt.cexp (hf : HasFDerivAt f f' x) :\n    HasFDerivAt (fun x => Complex.exp (f x)) (Complex.exp (f x) ‚Ä¢ f') x :=\n  hasFDerivWithinAt_univ.1 <| hf.hasFDerivWithinAt.cexp\n\n"}
{"name":"DifferentiableWithinAt.cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"ùïú : Type u_1\ninst‚úù¬≥ : NontriviallyNormedField ùïú\ninst‚úù¬≤ : NormedAlgebra ùïú Complex\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace ùïú E\nf : E ‚Üí Complex\nx : E\ns : Set E\nhf : DifferentiableWithinAt ùïú f s x\n‚ä¢ DifferentiableWithinAt ùïú (fun x => Complex.exp (f x)) s x","decl":"theorem DifferentiableWithinAt.cexp (hf : DifferentiableWithinAt ùïú f s x) :\n    DifferentiableWithinAt ùïú (fun x => Complex.exp (f x)) s x :=\n  hf.hasFDerivWithinAt.cexp.differentiableWithinAt\n\n"}
{"name":"DifferentiableAt.cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"ùïú : Type u_1\ninst‚úù¬≥ : NontriviallyNormedField ùïú\ninst‚úù¬≤ : NormedAlgebra ùïú Complex\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace ùïú E\nf : E ‚Üí Complex\nx : E\nhc : DifferentiableAt ùïú f x\n‚ä¢ DifferentiableAt ùïú (fun x => Complex.exp (f x)) x","decl":"@[simp, fun_prop]\ntheorem DifferentiableAt.cexp (hc : DifferentiableAt ùïú f x) :\n    DifferentiableAt ùïú (fun x => Complex.exp (f x)) x :=\n  hc.hasFDerivAt.cexp.differentiableAt\n\n"}
{"name":"DifferentiableOn.cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"ùïú : Type u_1\ninst‚úù¬≥ : NontriviallyNormedField ùïú\ninst‚úù¬≤ : NormedAlgebra ùïú Complex\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace ùïú E\nf : E ‚Üí Complex\ns : Set E\nhc : DifferentiableOn ùïú f s\n‚ä¢ DifferentiableOn ùïú (fun x => Complex.exp (f x)) s","decl":"theorem DifferentiableOn.cexp (hc : DifferentiableOn ùïú f s) :\n    DifferentiableOn ùïú (fun x => Complex.exp (f x)) s := fun x h => (hc x h).cexp\n\n"}
{"name":"Differentiable.cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"ùïú : Type u_1\ninst‚úù¬≥ : NontriviallyNormedField ùïú\ninst‚úù¬≤ : NormedAlgebra ùïú Complex\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace ùïú E\nf : E ‚Üí Complex\nhc : Differentiable ùïú f\n‚ä¢ Differentiable ùïú fun x => Complex.exp (f x)","decl":"@[simp, fun_prop]\ntheorem Differentiable.cexp (hc : Differentiable ùïú f) :\n    Differentiable ùïú fun x => Complex.exp (f x) := fun x => (hc x).cexp\n\n"}
{"name":"ContDiff.cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"ùïú : Type u_1\ninst‚úù¬≥ : NontriviallyNormedField ùïú\ninst‚úù¬≤ : NormedAlgebra ùïú Complex\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace ùïú E\nf : E ‚Üí Complex\nn : WithTop ENat\nh : ContDiff ùïú n f\n‚ä¢ ContDiff ùïú n fun x => Complex.exp (f x)","decl":"theorem ContDiff.cexp {n} (h : ContDiff ùïú n f) : ContDiff ùïú n fun x => Complex.exp (f x) :=\n  Complex.contDiff_exp.comp h\n\n"}
{"name":"ContDiffAt.cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"ùïú : Type u_1\ninst‚úù¬≥ : NontriviallyNormedField ùïú\ninst‚úù¬≤ : NormedAlgebra ùïú Complex\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace ùïú E\nf : E ‚Üí Complex\nx : E\nn : WithTop ENat\nhf : ContDiffAt ùïú n f x\n‚ä¢ ContDiffAt ùïú n (fun x => Complex.exp (f x)) x","decl":"theorem ContDiffAt.cexp {n} (hf : ContDiffAt ùïú n f x) :\n    ContDiffAt ùïú n (fun x => Complex.exp (f x)) x :=\n  Complex.contDiff_exp.contDiffAt.comp x hf\n\n"}
{"name":"ContDiffOn.cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"ùïú : Type u_1\ninst‚úù¬≥ : NontriviallyNormedField ùïú\ninst‚úù¬≤ : NormedAlgebra ùïú Complex\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace ùïú E\nf : E ‚Üí Complex\ns : Set E\nn : WithTop ENat\nhf : ContDiffOn ùïú n f s\n‚ä¢ ContDiffOn ùïú n (fun x => Complex.exp (f x)) s","decl":"theorem ContDiffOn.cexp {n} (hf : ContDiffOn ùïú n f s) :\n    ContDiffOn ùïú n (fun x => Complex.exp (f x)) s :=\n  Complex.contDiff_exp.comp_contDiffOn hf\n\n"}
{"name":"ContDiffWithinAt.cexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"ùïú : Type u_1\ninst‚úù¬≥ : NontriviallyNormedField ùïú\ninst‚úù¬≤ : NormedAlgebra ùïú Complex\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace ùïú E\nf : E ‚Üí Complex\nx : E\ns : Set E\nn : WithTop ENat\nhf : ContDiffWithinAt ùïú n f s x\n‚ä¢ ContDiffWithinAt ùïú n (fun x => Complex.exp (f x)) s x","decl":"theorem ContDiffWithinAt.cexp {n} (hf : ContDiffWithinAt ùïú n f s x) :\n    ContDiffWithinAt ùïú n (fun x => Complex.exp (f x)) s x :=\n  Complex.contDiff_exp.contDiffAt.comp_contDiffWithinAt x hf\n\n"}
{"name":"iteratedDeriv_cexp_const_mul","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"n : Nat\nc : Complex\n‚ä¢ Eq (iteratedDeriv n fun s => Complex.exp (HMul.hMul c s)) fun s => HMul.hMul (HPow.hPow c n) (Complex.exp (HMul.hMul c s))","decl":"open Complex in\n@[simp]\ntheorem iteratedDeriv_cexp_const_mul (n : ‚Ñï) (c : ‚ÑÇ) :\n    (iteratedDeriv n fun s : ‚ÑÇ => exp (c * s)) = fun s => c ^ n * exp (c * s) := by\n  rw [iteratedDeriv_comp_const_mul contDiff_exp, iteratedDeriv_eq_iterate, iter_deriv_exp]\n\n"}
{"name":"analyticOnNhd_rexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"‚ä¢ AnalyticOnNhd Real Real.exp Set.univ","decl":"/-- `exp` is entire -/\ntheorem analyticOnNhd_rexp : AnalyticOnNhd ‚Ñù exp univ := by\n  rw [Real.exp_eq_exp_‚Ñù]\n  exact fun x _ ‚Ü¶ NormedSpace.exp_analytic x\n\n"}
{"name":"analyticOn_rexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"‚ä¢ AnalyticOn Real Real.exp Set.univ","decl":"theorem analyticOn_rexp : AnalyticOn ‚Ñù exp univ := analyticOnNhd_rexp.analyticOn\n\n"}
{"name":"analyticAt_rexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"x : Real\n‚ä¢ AnalyticAt Real Real.exp x","decl":"/-- `exp` is analytic at any point -/\n@[fun_prop]\ntheorem analyticAt_rexp : AnalyticAt ‚Ñù exp x :=\n  analyticOnNhd_rexp x (mem_univ _)\n\n"}
{"name":"AnalyticAt.rexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type u_1\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\nx : E\nfa : AnalyticAt Real f x\n‚ä¢ AnalyticAt Real (Function.comp Real.exp f) x","decl":"/-- `exp ‚àò f` is analytic -/\n@[fun_prop]\ntheorem AnalyticAt.rexp {x : E} (fa : AnalyticAt ‚Ñù f x) : AnalyticAt ‚Ñù (exp ‚àò f) x :=\n  analyticAt_rexp.comp fa\n\n"}
{"name":"AnalyticAt.rexp'","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type u_1\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\nx : E\nfa : AnalyticAt Real f x\n‚ä¢ AnalyticAt Real (fun z => Real.exp (f z)) x","decl":"/-- `exp ‚àò f` is analytic -/\n@[fun_prop]\ntheorem AnalyticAt.rexp' {x : E} (fa : AnalyticAt ‚Ñù f x) : AnalyticAt ‚Ñù (fun z ‚Ü¶ exp (f z)) x :=\n  fa.rexp\n\n"}
{"name":"AnalyticWithinAt.rexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type u_1\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\ns : Set E\nx : E\nfa : AnalyticWithinAt Real f s x\n‚ä¢ AnalyticWithinAt Real (fun z => Real.exp (f z)) s x","decl":"theorem AnalyticWithinAt.rexp {x : E} (fa : AnalyticWithinAt ‚Ñù f s x) :\n    AnalyticWithinAt ‚Ñù (fun z ‚Ü¶ exp (f z)) s x :=\n  analyticAt_rexp.comp_analyticWithinAt fa\n\n"}
{"name":"AnalyticOnNhd.rexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type u_1\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\ns : Set E\nfs : AnalyticOnNhd Real f s\n‚ä¢ AnalyticOnNhd Real (fun z => Real.exp (f z)) s","decl":"/-- `exp ‚àò f` is analytic -/\ntheorem AnalyticOnNhd.rexp {s : Set E} (fs : AnalyticOnNhd ‚Ñù f s) :\n    AnalyticOnNhd ‚Ñù (fun z ‚Ü¶ exp (f z)) s :=\n  fun z n ‚Ü¶ analyticAt_rexp.comp (fs z n)\n\n"}
{"name":"AnalyticOn.rexp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type u_1\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\ns : Set E\nfs : AnalyticOn Real f s\n‚ä¢ AnalyticOn Real (fun z => Real.exp (f z)) s","decl":"theorem AnalyticOn.rexp (fs : AnalyticOn ‚Ñù f s) : AnalyticOn ‚Ñù (fun z ‚Ü¶ exp (f z)) s :=\n  analyticOnNhd_rexp.comp_analyticOn fs (mapsTo_univ _ _)\n\n"}
{"name":"Real.hasStrictDerivAt_exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"x : Real\n‚ä¢ HasStrictDerivAt Real.exp (Real.exp x) x","decl":"theorem hasStrictDerivAt_exp (x : ‚Ñù) : HasStrictDerivAt exp (exp x) x :=\n  (Complex.hasStrictDerivAt_exp x).real_of_complex\n\n"}
{"name":"Real.hasDerivAt_exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"x : Real\n‚ä¢ HasDerivAt Real.exp (Real.exp x) x","decl":"theorem hasDerivAt_exp (x : ‚Ñù) : HasDerivAt exp (exp x) x :=\n  (Complex.hasDerivAt_exp x).real_of_complex\n\n"}
{"name":"Real.contDiff_exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"n : WithTop ENat\n‚ä¢ ContDiff Real n Real.exp","decl":"theorem contDiff_exp {n : WithTop ‚Ñï‚àû} : ContDiff ‚Ñù n exp :=\n  Complex.contDiff_exp.real_of_complex\n\n"}
{"name":"Real.differentiable_exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"‚ä¢ Differentiable Real Real.exp","decl":"@[simp]\ntheorem differentiable_exp : Differentiable ‚Ñù exp := fun x => (hasDerivAt_exp x).differentiableAt\n\n"}
{"name":"Real.differentiableAt_exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"x : Real\n‚ä¢ DifferentiableAt Real Real.exp x","decl":"@[simp]\ntheorem differentiableAt_exp {x : ‚Ñù} : DifferentiableAt ‚Ñù exp x :=\n  differentiable_exp x\n\n"}
{"name":"Real.deriv_exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"‚ä¢ Eq (deriv Real.exp) Real.exp","decl":"@[simp]\ntheorem deriv_exp : deriv exp = exp :=\n  funext fun x => (hasDerivAt_exp x).deriv\n\n"}
{"name":"Real.iter_deriv_exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"n : Nat\n‚ä¢ Eq (Nat.iterate deriv n Real.exp) Real.exp","decl":"@[simp]\ntheorem iter_deriv_exp : ‚àÄ n : ‚Ñï, deriv^[n] exp = exp\n  | 0 => rfl\n  | n + 1 => by rw [iterate_succ_apply, deriv_exp, iter_deriv_exp n]\n\n"}
{"name":"HasStrictDerivAt.exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"f : Real ‚Üí Real\nf' x : Real\nhf : HasStrictDerivAt f f' x\n‚ä¢ HasStrictDerivAt (fun x => Real.exp (f x)) (HMul.hMul (Real.exp (f x)) f') x","decl":"theorem HasStrictDerivAt.exp (hf : HasStrictDerivAt f f' x) :\n    HasStrictDerivAt (fun x => Real.exp (f x)) (Real.exp (f x) * f') x :=\n  (Real.hasStrictDerivAt_exp (f x)).comp x hf\n\n"}
{"name":"HasDerivAt.exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"f : Real ‚Üí Real\nf' x : Real\nhf : HasDerivAt f f' x\n‚ä¢ HasDerivAt (fun x => Real.exp (f x)) (HMul.hMul (Real.exp (f x)) f') x","decl":"theorem HasDerivAt.exp (hf : HasDerivAt f f' x) :\n    HasDerivAt (fun x => Real.exp (f x)) (Real.exp (f x) * f') x :=\n  (Real.hasDerivAt_exp (f x)).comp x hf\n\n"}
{"name":"HasDerivWithinAt.exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"f : Real ‚Üí Real\nf' x : Real\ns : Set Real\nhf : HasDerivWithinAt f f' s x\n‚ä¢ HasDerivWithinAt (fun x => Real.exp (f x)) (HMul.hMul (Real.exp (f x)) f') s x","decl":"theorem HasDerivWithinAt.exp (hf : HasDerivWithinAt f f' s x) :\n    HasDerivWithinAt (fun x => Real.exp (f x)) (Real.exp (f x) * f') s x :=\n  (Real.hasDerivAt_exp (f x)).comp_hasDerivWithinAt x hf\n\n"}
{"name":"derivWithin_exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"f : Real ‚Üí Real\nx : Real\ns : Set Real\nhf : DifferentiableWithinAt Real f s x\nhxs : UniqueDiffWithinAt Real s x\n‚ä¢ Eq (derivWithin (fun x => Real.exp (f x)) s x) (HMul.hMul (Real.exp (f x)) (derivWithin f s x))","decl":"theorem derivWithin_exp (hf : DifferentiableWithinAt ‚Ñù f s x) (hxs : UniqueDiffWithinAt ‚Ñù s x) :\n    derivWithin (fun x => Real.exp (f x)) s x = Real.exp (f x) * derivWithin f s x :=\n  hf.hasDerivWithinAt.exp.derivWithin hxs\n\n"}
{"name":"deriv_exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"f : Real ‚Üí Real\nx : Real\nhc : DifferentiableAt Real f x\n‚ä¢ Eq (deriv (fun x => Real.exp (f x)) x) (HMul.hMul (Real.exp (f x)) (deriv f x))","decl":"@[simp]\ntheorem deriv_exp (hc : DifferentiableAt ‚Ñù f x) :\n    deriv (fun x => Real.exp (f x)) x = Real.exp (f x) * deriv f x :=\n  hc.hasDerivAt.exp.deriv\n\n"}
{"name":"ContDiff.exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type u_1\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\nn : WithTop ENat\nhf : ContDiff Real n f\n‚ä¢ ContDiff Real n fun x => Real.exp (f x)","decl":"theorem ContDiff.exp {n} (hf : ContDiff ‚Ñù n f) : ContDiff ‚Ñù n fun x => Real.exp (f x) :=\n  Real.contDiff_exp.comp hf\n\n"}
{"name":"ContDiffAt.exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type u_1\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\nx : E\nn : WithTop ENat\nhf : ContDiffAt Real n f x\n‚ä¢ ContDiffAt Real n (fun x => Real.exp (f x)) x","decl":"theorem ContDiffAt.exp {n} (hf : ContDiffAt ‚Ñù n f x) : ContDiffAt ‚Ñù n (fun x => Real.exp (f x)) x :=\n  Real.contDiff_exp.contDiffAt.comp x hf\n\n"}
{"name":"ContDiffOn.exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type u_1\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\ns : Set E\nn : WithTop ENat\nhf : ContDiffOn Real n f s\n‚ä¢ ContDiffOn Real n (fun x => Real.exp (f x)) s","decl":"theorem ContDiffOn.exp {n} (hf : ContDiffOn ‚Ñù n f s) : ContDiffOn ‚Ñù n (fun x => Real.exp (f x)) s :=\n  Real.contDiff_exp.comp_contDiffOn hf\n\n"}
{"name":"ContDiffWithinAt.exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type u_1\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\nx : E\ns : Set E\nn : WithTop ENat\nhf : ContDiffWithinAt Real n f s x\n‚ä¢ ContDiffWithinAt Real n (fun x => Real.exp (f x)) s x","decl":"theorem ContDiffWithinAt.exp {n} (hf : ContDiffWithinAt ‚Ñù n f s x) :\n    ContDiffWithinAt ‚Ñù n (fun x => Real.exp (f x)) s x :=\n  Real.contDiff_exp.contDiffAt.comp_contDiffWithinAt x hf\n\n"}
{"name":"HasFDerivWithinAt.exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type u_1\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\nf' : ContinuousLinearMap (RingHom.id Real) E Real\nx : E\ns : Set E\nhf : HasFDerivWithinAt f f' s x\n‚ä¢ HasFDerivWithinAt (fun x => Real.exp (f x)) (HSMul.hSMul (Real.exp (f x)) f') s x","decl":"theorem HasFDerivWithinAt.exp (hf : HasFDerivWithinAt f f' s x) :\n    HasFDerivWithinAt (fun x => Real.exp (f x)) (Real.exp (f x) ‚Ä¢ f') s x :=\n  (Real.hasDerivAt_exp (f x)).comp_hasFDerivWithinAt x hf\n\n"}
{"name":"HasFDerivAt.exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type u_1\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\nf' : ContinuousLinearMap (RingHom.id Real) E Real\nx : E\nhf : HasFDerivAt f f' x\n‚ä¢ HasFDerivAt (fun x => Real.exp (f x)) (HSMul.hSMul (Real.exp (f x)) f') x","decl":"theorem HasFDerivAt.exp (hf : HasFDerivAt f f' x) :\n    HasFDerivAt (fun x => Real.exp (f x)) (Real.exp (f x) ‚Ä¢ f') x :=\n  (Real.hasDerivAt_exp (f x)).comp_hasFDerivAt x hf\n\n"}
{"name":"HasStrictFDerivAt.exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type u_1\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\nf' : ContinuousLinearMap (RingHom.id Real) E Real\nx : E\nhf : HasStrictFDerivAt f f' x\n‚ä¢ HasStrictFDerivAt (fun x => Real.exp (f x)) (HSMul.hSMul (Real.exp (f x)) f') x","decl":"theorem HasStrictFDerivAt.exp (hf : HasStrictFDerivAt f f' x) :\n    HasStrictFDerivAt (fun x => Real.exp (f x)) (Real.exp (f x) ‚Ä¢ f') x :=\n  (Real.hasStrictDerivAt_exp (f x)).comp_hasStrictFDerivAt x hf\n\n"}
{"name":"DifferentiableWithinAt.exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type u_1\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\nx : E\ns : Set E\nhf : DifferentiableWithinAt Real f s x\n‚ä¢ DifferentiableWithinAt Real (fun x => Real.exp (f x)) s x","decl":"theorem DifferentiableWithinAt.exp (hf : DifferentiableWithinAt ‚Ñù f s x) :\n    DifferentiableWithinAt ‚Ñù (fun x => Real.exp (f x)) s x :=\n  hf.hasFDerivWithinAt.exp.differentiableWithinAt\n\n"}
{"name":"DifferentiableAt.exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type u_1\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\nx : E\nhc : DifferentiableAt Real f x\n‚ä¢ DifferentiableAt Real (fun x => Real.exp (f x)) x","decl":"@[simp, fun_prop]\ntheorem DifferentiableAt.exp (hc : DifferentiableAt ‚Ñù f x) :\n    DifferentiableAt ‚Ñù (fun x => Real.exp (f x)) x :=\n  hc.hasFDerivAt.exp.differentiableAt\n\n"}
{"name":"DifferentiableOn.exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type u_1\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\ns : Set E\nhc : DifferentiableOn Real f s\n‚ä¢ DifferentiableOn Real (fun x => Real.exp (f x)) s","decl":"theorem DifferentiableOn.exp (hc : DifferentiableOn ‚Ñù f s) :\n    DifferentiableOn ‚Ñù (fun x => Real.exp (f x)) s := fun x h => (hc x h).exp\n\n"}
{"name":"Differentiable.exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type u_1\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\nhc : Differentiable Real f\n‚ä¢ Differentiable Real fun x => Real.exp (f x)","decl":"@[simp, fun_prop]\ntheorem Differentiable.exp (hc : Differentiable ‚Ñù f) : Differentiable ‚Ñù fun x => Real.exp (f x) :=\n  fun x => (hc x).exp\n\n"}
{"name":"fderivWithin_exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type u_1\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\nx : E\ns : Set E\nhf : DifferentiableWithinAt Real f s x\nhxs : UniqueDiffWithinAt Real s x\n‚ä¢ Eq (fderivWithin Real (fun x => Real.exp (f x)) s x) (HSMul.hSMul (Real.exp (f x)) (fderivWithin Real f s x))","decl":"theorem fderivWithin_exp (hf : DifferentiableWithinAt ‚Ñù f s x) (hxs : UniqueDiffWithinAt ‚Ñù s x) :\n    fderivWithin ‚Ñù (fun x => Real.exp (f x)) s x = Real.exp (f x) ‚Ä¢ fderivWithin ‚Ñù f s x :=\n  hf.hasFDerivWithinAt.exp.fderivWithin hxs\n\n"}
{"name":"fderiv_exp","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"E : Type u_1\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\nx : E\nhc : DifferentiableAt Real f x\n‚ä¢ Eq (fderiv Real (fun x => Real.exp (f x)) x) (HSMul.hSMul (Real.exp (f x)) (fderiv Real f x))","decl":"@[simp]\ntheorem fderiv_exp (hc : DifferentiableAt ‚Ñù f x) :\n    fderiv ‚Ñù (fun x => Real.exp (f x)) x = Real.exp (f x) ‚Ä¢ fderiv ‚Ñù f x :=\n  hc.hasFDerivAt.exp.fderiv\n\n"}
{"name":"iteratedDeriv_exp_const_mul","module":"Mathlib.Analysis.SpecialFunctions.ExpDeriv","initialProofState":"n : Nat\nc : Real\n‚ä¢ Eq (iteratedDeriv n fun s => Real.exp (HMul.hMul c s)) fun s => HMul.hMul (HPow.hPow c n) (Real.exp (HMul.hMul c s))","decl":"open Real in\n@[simp]\ntheorem iteratedDeriv_exp_const_mul (n : ‚Ñï) (c : ‚Ñù) :\n    (iteratedDeriv n fun s => exp (c * s)) = fun s => c ^ n * exp (c * s) := by\n  rw [iteratedDeriv_comp_const_mul contDiff_exp, iteratedDeriv_eq_iterate, iter_deriv_exp]\n"}
