{"name":"TopCat.adj₁_unit","module":"Mathlib.Topology.Category.TopCat.Adjunctions","initialProofState":"⊢ Eq TopCat.adj₁.unit { app := fun x => id, naturality := TopCat.adj₁.proof_1 }","decl":"/-- Equipping a type with the discrete topology is left adjoint to the forgetful functor\n`Top ⥤ Type`. -/\n@[simps! unit counit]\ndef adj₁ : discrete ⊣ forget TopCat.{u} where\n  unit := { app := fun _ => id }\n  counit := { app := fun _ => ⟨id, continuous_bot⟩ }\n\n"}
{"name":"TopCat.adj₁_counit","module":"Mathlib.Topology.Category.TopCat.Adjunctions","initialProofState":"⊢ Eq TopCat.adj₁.counit { app := fun x => { toFun := id, continuous_toFun := ⋯ }, naturality := TopCat.adj₁.proof_3 }","decl":"/-- Equipping a type with the discrete topology is left adjoint to the forgetful functor\n`Top ⥤ Type`. -/\n@[simps! unit counit]\ndef adj₁ : discrete ⊣ forget TopCat.{u} where\n  unit := { app := fun _ => id }\n  counit := { app := fun _ => ⟨id, continuous_bot⟩ }\n\n"}
{"name":"TopCat.adj₂_unit","module":"Mathlib.Topology.Category.TopCat.Adjunctions","initialProofState":"⊢ Eq TopCat.adj₂.unit { app := fun x => { toFun := id, continuous_toFun := ⋯ }, naturality := TopCat.adj₂.proof_2 }","decl":"/-- Equipping a type with the trivial topology is right adjoint to the forgetful functor\n`Top ⥤ Type`. -/\n@[simps! unit counit]\ndef adj₂ : forget TopCat.{u} ⊣ trivial where\n  unit := { app := fun _ => ⟨id, continuous_top⟩ }\n  counit := { app := fun _ => id }\n\n"}
{"name":"TopCat.adj₂_counit","module":"Mathlib.Topology.Category.TopCat.Adjunctions","initialProofState":"⊢ Eq TopCat.adj₂.counit { app := fun x => id, naturality := TopCat.adj₂.proof_3 }","decl":"/-- Equipping a type with the trivial topology is right adjoint to the forgetful functor\n`Top ⥤ Type`. -/\n@[simps! unit counit]\ndef adj₂ : forget TopCat.{u} ⊣ trivial where\n  unit := { app := fun _ => ⟨id, continuous_top⟩ }\n  counit := { app := fun _ => id }\n\n"}
{"name":"TopCat.instIsRightAdjointForget","module":"Mathlib.Topology.Category.TopCat.Adjunctions","initialProofState":"⊢ (CategoryTheory.forget TopCat).IsRightAdjoint","decl":"instance : (forget TopCat.{u}).IsRightAdjoint :=\n  ⟨_, ⟨adj₁⟩⟩\n\n"}
{"name":"TopCat.instIsLeftAdjointForget","module":"Mathlib.Topology.Category.TopCat.Adjunctions","initialProofState":"⊢ (CategoryTheory.forget TopCat).IsLeftAdjoint","decl":"instance : (forget TopCat.{u}).IsLeftAdjoint :=\n  ⟨_, ⟨adj₂⟩⟩\n\n"}
