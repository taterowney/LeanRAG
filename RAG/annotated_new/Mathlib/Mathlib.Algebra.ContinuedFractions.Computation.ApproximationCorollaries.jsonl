{"name":"GenContFract.of_convs_eq_convs'","module":"Mathlib.Algebra.ContinuedFractions.Computation.ApproximationCorollaries","initialProofState":"K : Type u_1\nv : K\ninst✝¹ : LinearOrderedField K\ninst✝ : FloorRing K\n⊢ Eq (GenContFract.of v).convs (GenContFract.of v).convs'","decl":"theorem of_convs_eq_convs' : (of v).convs = (of v).convs' :=\n  @ContFract.convs_eq_convs' _ _ (ContFract.of v)\n\n"}
{"name":"GenContFract.convs_succ","module":"Mathlib.Algebra.ContinuedFractions.Computation.ApproximationCorollaries","initialProofState":"K : Type u_1\nv : K\ninst✝¹ : LinearOrderedField K\ninst✝ : FloorRing K\nn : Nat\n⊢ Eq ((GenContFract.of v).convs (HAdd.hAdd n 1)) (HAdd.hAdd (↑(Int.floor v)) (HDiv.hDiv 1 ((GenContFract.of (Inv.inv (Int.fract v))).convs n)))","decl":"/-- The recurrence relation for the convergents of the continued fraction expansion\nof an element `v` of `K` in terms of the convergents of the inverse of its fractional part.\n-/\ntheorem convs_succ (n : ℕ) :\n    (of v).convs (n + 1) = ⌊v⌋ + 1 / (of (Int.fract v)⁻¹).convs n := by\n  rw [of_convs_eq_convs', convs'_succ, of_convs_eq_convs']\n\n"}
{"name":"GenContFract.of_convergence_epsilon","module":"Mathlib.Algebra.ContinuedFractions.Computation.ApproximationCorollaries","initialProofState":"K : Type u_1\nv : K\ninst✝² : LinearOrderedField K\ninst✝¹ : FloorRing K\ninst✝ : Archimedean K\nε : K\na✝ : GT.gt ε 0\n⊢ Exists fun N => ∀ (n : Nat), GE.ge n N → LT.lt (abs (HSub.hSub v ((GenContFract.of v).convs n))) ε","decl":"theorem of_convergence_epsilon :\n    ∀ ε > (0 : K), ∃ N : ℕ, ∀ n ≥ N, |v - (of v).convs n| < ε := by\n  intro ε ε_pos\n  -- use the archimedean property to obtain a suitable N\n  rcases (exists_nat_gt (1 / ε) : ∃ N' : ℕ, 1 / ε < N') with ⟨N', one_div_ε_lt_N'⟩\n  let N := max N' 5\n  -- set minimum to 5 to have N ≤ fib N work\n  exists N\n  intro n n_ge_N\n  let g := of v\n  rcases Decidable.em (g.TerminatedAt n) with terminatedAt_n | not_terminatedAt_n\n  · have : v = g.convs n := of_correctness_of_terminatedAt terminatedAt_n\n    have : v - g.convs n = 0 := sub_eq_zero.mpr this\n    rw [this]\n    exact mod_cast ε_pos\n  · let B := g.dens n\n    let nB := g.dens (n + 1)\n    have abs_v_sub_conv_le : |v - g.convs n| ≤ 1 / (B * nB) :=\n      abs_sub_convs_le not_terminatedAt_n\n    suffices 1 / (B * nB) < ε from lt_of_le_of_lt abs_v_sub_conv_le this\n    -- show that `0 < (B * nB)` and then multiply by `B * nB` to get rid of the division\n    have nB_ineq : (fib (n + 2) : K) ≤ nB :=\n      haveI : ¬g.TerminatedAt (n + 1 - 1) := not_terminatedAt_n\n      succ_nth_fib_le_of_nth_den (Or.inr this)\n    have B_ineq : (fib (n + 1) : K) ≤ B :=\n      haveI : ¬g.TerminatedAt (n - 1) := mt (terminated_stable n.pred_le) not_terminatedAt_n\n      succ_nth_fib_le_of_nth_den (Or.inr this)\n    have zero_lt_B : 0 < B := B_ineq.trans_lt' <| mod_cast fib_pos.2 n.succ_pos\n    have nB_pos : 0 < nB := nB_ineq.trans_lt' <| mod_cast fib_pos.2 <| succ_pos _\n    have zero_lt_mul_conts : 0 < B * nB := by positivity\n    suffices 1 < ε * (B * nB) from (div_lt_iff₀ zero_lt_mul_conts).mpr this\n    -- use that `N' ≥ n` was obtained from the archimedean property to show the following\n    calc 1 < ε * (N' : K) := (div_lt_iff₀' ε_pos).mp one_div_ε_lt_N'\n      _ ≤ ε * (B * nB) := ?_\n    -- cancel `ε`\n    gcongr\n    calc\n      (N' : K) ≤ (N : K) := by exact_mod_cast le_max_left _ _\n      _ ≤ n := by exact_mod_cast n_ge_N\n      _ ≤ fib n := by exact_mod_cast le_fib_self <| le_trans (le_max_right N' 5) n_ge_N\n      _ ≤ fib (n + 1) := by exact_mod_cast fib_le_fib_succ\n      _ ≤ fib (n + 1) * fib (n + 1) := by exact_mod_cast (fib (n + 1)).le_mul_self\n      _ ≤ fib (n + 1) * fib (n + 2) := by gcongr; exact_mod_cast fib_le_fib_succ\n      _ ≤ B * nB := by gcongr\n\n"}
{"name":"GenContFract.of_convergence","module":"Mathlib.Algebra.ContinuedFractions.Computation.ApproximationCorollaries","initialProofState":"K : Type u_1\nv : K\ninst✝⁴ : LinearOrderedField K\ninst✝³ : FloorRing K\ninst✝² : Archimedean K\ninst✝¹ : TopologicalSpace K\ninst✝ : OrderTopology K\n⊢ Filter.Tendsto (GenContFract.of v).convs Filter.atTop (nhds v)","decl":"theorem of_convergence [TopologicalSpace K] [OrderTopology K] :\n    Filter.Tendsto (of v).convs Filter.atTop <| 𝓝 v := by\n  simpa [LinearOrderedAddCommGroup.tendsto_nhds, abs_sub_comm] using of_convergence_epsilon v\n\n"}
