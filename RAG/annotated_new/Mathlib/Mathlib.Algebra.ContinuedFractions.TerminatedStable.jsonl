{"name":"GenContFract.terminated_stable","module":"Mathlib.Algebra.ContinuedFractions.TerminatedStable","initialProofState":"K : Type u_1\ng : GenContFract K\nn m : Nat\nn_le_m : LE.le n m\nterminatedAt_n : g.TerminatedAt n\n⊢ g.TerminatedAt m","decl":"/-- If a gcf terminated at position `n`, it also terminated at `m ≥ n`. -/\ntheorem terminated_stable (n_le_m : n ≤ m) (terminatedAt_n : g.TerminatedAt n) :\n    g.TerminatedAt m :=\n  g.s.terminated_stable n_le_m terminatedAt_n\n\n"}
{"name":"GenContFract.contsAux_stable_step_of_terminated","module":"Mathlib.Algebra.ContinuedFractions.TerminatedStable","initialProofState":"K : Type u_1\ng : GenContFract K\nn : Nat\ninst✝ : DivisionRing K\nterminatedAt_n : g.TerminatedAt n\n⊢ Eq (g.contsAux (HAdd.hAdd n 2)) (g.contsAux (HAdd.hAdd n 1))","decl":"theorem contsAux_stable_step_of_terminated (terminatedAt_n : g.TerminatedAt n) :\n    g.contsAux (n + 2) = g.contsAux (n + 1) := by\n  rw [terminatedAt_iff_s_none] at terminatedAt_n\n  simp only [contsAux, Nat.add_eq, Nat.add_zero, terminatedAt_n]\n\n"}
{"name":"GenContFract.contsAux_stable_of_terminated","module":"Mathlib.Algebra.ContinuedFractions.TerminatedStable","initialProofState":"K : Type u_1\ng : GenContFract K\nn m : Nat\ninst✝ : DivisionRing K\nn_lt_m : LT.lt n m\nterminatedAt_n : g.TerminatedAt n\n⊢ Eq (g.contsAux m) (g.contsAux (HAdd.hAdd n 1))","decl":"theorem contsAux_stable_of_terminated (n_lt_m : n < m) (terminatedAt_n : g.TerminatedAt n) :\n    g.contsAux m = g.contsAux (n + 1) := by\n  refine Nat.le_induction rfl (fun k hnk hk => ?_) _ n_lt_m\n  rcases Nat.exists_eq_add_of_lt hnk with ⟨k, rfl⟩\n  refine (contsAux_stable_step_of_terminated ?_).trans hk\n  exact terminated_stable (Nat.le_add_right _ _) terminatedAt_n\n\n"}
{"name":"GenContFract.convs'Aux_stable_step_of_terminated","module":"Mathlib.Algebra.ContinuedFractions.TerminatedStable","initialProofState":"K : Type u_1\nn : Nat\ninst✝ : DivisionRing K\ns : Stream'.Seq (GenContFract.Pair K)\nterminatedAt_n : s.TerminatedAt n\n⊢ Eq (GenContFract.convs'Aux s (HAdd.hAdd n 1)) (GenContFract.convs'Aux s n)","decl":"theorem convs'Aux_stable_step_of_terminated {s : Stream'.Seq <| Pair K}\n    (terminatedAt_n : s.TerminatedAt n) : convs'Aux s (n + 1) = convs'Aux s n := by\n  change s.get? n = none at terminatedAt_n\n  induction n generalizing s with\n  | zero => simp only [convs'Aux, terminatedAt_n, Stream'.Seq.head]\n  | succ n IH =>\n    cases s_head_eq : s.head with\n    | none => simp only [convs'Aux, s_head_eq]\n    | some gp_head =>\n      have : s.tail.TerminatedAt n := by\n        simp only [Stream'.Seq.TerminatedAt, s.get?_tail, terminatedAt_n]\n      have := IH this\n      rw [convs'Aux] at this\n      simp [this, Nat.add_eq, add_zero, convs'Aux, s_head_eq]\n\n"}
{"name":"GenContFract.convs'Aux_stable_of_terminated","module":"Mathlib.Algebra.ContinuedFractions.TerminatedStable","initialProofState":"K : Type u_1\nn m : Nat\ninst✝ : DivisionRing K\ns : Stream'.Seq (GenContFract.Pair K)\nn_le_m : LE.le n m\nterminatedAt_n : s.TerminatedAt n\n⊢ Eq (GenContFract.convs'Aux s m) (GenContFract.convs'Aux s n)","decl":"theorem convs'Aux_stable_of_terminated {s : Stream'.Seq <| Pair K} (n_le_m : n ≤ m)\n    (terminatedAt_n : s.TerminatedAt n) : convs'Aux s m = convs'Aux s n := by\n  induction n_le_m with\n  | refl => rfl\n  | step n_le_m IH =>\n    refine (convs'Aux_stable_step_of_terminated (?_)).trans IH\n    exact s.terminated_stable n_le_m terminatedAt_n\n\n"}
{"name":"GenContFract.conts_stable_of_terminated","module":"Mathlib.Algebra.ContinuedFractions.TerminatedStable","initialProofState":"K : Type u_1\ng : GenContFract K\nn m : Nat\ninst✝ : DivisionRing K\nn_le_m : LE.le n m\nterminatedAt_n : g.TerminatedAt n\n⊢ Eq (g.conts m) (g.conts n)","decl":"theorem conts_stable_of_terminated (n_le_m : n ≤ m) (terminatedAt_n : g.TerminatedAt n) :\n    g.conts m = g.conts n := by\n  simp only [nth_cont_eq_succ_nth_contAux,\n    contsAux_stable_of_terminated (Nat.pred_le_iff.mp n_le_m) terminatedAt_n]\n\n"}
{"name":"GenContFract.nums_stable_of_terminated","module":"Mathlib.Algebra.ContinuedFractions.TerminatedStable","initialProofState":"K : Type u_1\ng : GenContFract K\nn m : Nat\ninst✝ : DivisionRing K\nn_le_m : LE.le n m\nterminatedAt_n : g.TerminatedAt n\n⊢ Eq (g.nums m) (g.nums n)","decl":"theorem nums_stable_of_terminated (n_le_m : n ≤ m) (terminatedAt_n : g.TerminatedAt n) :\n    g.nums m = g.nums n := by\n  simp only [num_eq_conts_a, conts_stable_of_terminated n_le_m terminatedAt_n]\n\n"}
{"name":"GenContFract.dens_stable_of_terminated","module":"Mathlib.Algebra.ContinuedFractions.TerminatedStable","initialProofState":"K : Type u_1\ng : GenContFract K\nn m : Nat\ninst✝ : DivisionRing K\nn_le_m : LE.le n m\nterminatedAt_n : g.TerminatedAt n\n⊢ Eq (g.dens m) (g.dens n)","decl":"theorem dens_stable_of_terminated (n_le_m : n ≤ m) (terminatedAt_n : g.TerminatedAt n) :\n    g.dens m = g.dens n := by\n  simp only [den_eq_conts_b, conts_stable_of_terminated n_le_m terminatedAt_n]\n\n"}
{"name":"GenContFract.convs_stable_of_terminated","module":"Mathlib.Algebra.ContinuedFractions.TerminatedStable","initialProofState":"K : Type u_1\ng : GenContFract K\nn m : Nat\ninst✝ : DivisionRing K\nn_le_m : LE.le n m\nterminatedAt_n : g.TerminatedAt n\n⊢ Eq (g.convs m) (g.convs n)","decl":"theorem convs_stable_of_terminated (n_le_m : n ≤ m) (terminatedAt_n : g.TerminatedAt n) :\n    g.convs m = g.convs n := by\n  simp only [convs, dens_stable_of_terminated n_le_m terminatedAt_n,\n    nums_stable_of_terminated n_le_m terminatedAt_n]\n\n"}
{"name":"GenContFract.convs'_stable_of_terminated","module":"Mathlib.Algebra.ContinuedFractions.TerminatedStable","initialProofState":"K : Type u_1\ng : GenContFract K\nn m : Nat\ninst✝ : DivisionRing K\nn_le_m : LE.le n m\nterminatedAt_n : g.TerminatedAt n\n⊢ Eq (g.convs' m) (g.convs' n)","decl":"theorem convs'_stable_of_terminated (n_le_m : n ≤ m) (terminatedAt_n : g.TerminatedAt n) :\n    g.convs' m = g.convs' n := by\n  simp only [convs', convs'Aux_stable_of_terminated n_le_m terminatedAt_n]\n\n"}
