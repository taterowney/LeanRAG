{"name":"CategoryTheory.Comma.final_fst","module":"Mathlib.CategoryTheory.Comma.Final","initialProofState":"A : Type u₁\ninst✝³ : CategoryTheory.Category.{v₁, u₁} A\nB : Type u₂\ninst✝² : CategoryTheory.Category.{v₂, u₂} B\nT : Type u₃\ninst✝¹ : CategoryTheory.Category.{v₃, u₃} T\nL : CategoryTheory.Functor A T\nR : CategoryTheory.Functor B T\ninst✝ : R.Final\n⊢ (CategoryTheory.Comma.fst L R).Final","decl":"instance final_fst [R.Final] : (fst L R).Final := by\n  let sA : A ≌ AsSmall.{max u₁ u₂ u₃ v₁ v₂ v₃} A := AsSmall.equiv\n  let sB : B ≌ AsSmall.{max u₁ u₂ u₃ v₁ v₂ v₃} B := AsSmall.equiv\n  let sT : T ≌ AsSmall.{max u₁ u₂ u₃ v₁ v₂ v₃} T := AsSmall.equiv\n  let L' := sA.inverse ⋙ L ⋙ sT.functor\n  let R' := sB.inverse ⋙ R ⋙ sT.functor\n  let fC : Comma L R ⥤ Comma L' R' :=\n    map (F₁ := sA.functor) (F := sT.functor) (F₂ := sB.functor)\n      (isoWhiskerRight sA.unitIso (L ⋙ sT.functor)).hom\n      (isoWhiskerRight sB.unitIso (R ⋙ sT.functor)).hom\n  have : Final (fst L' R') := final_fst_small _ _\n  apply final_of_natIso (F := (fC ⋙ fst L' R' ⋙ sA.inverse))\n  exact (Functor.associator _ _ _).symm.trans (Iso.compInverseIso (mapFst _ _))\n\n"}
{"name":"CategoryTheory.Comma.initial_snd","module":"Mathlib.CategoryTheory.Comma.Final","initialProofState":"A : Type u₁\ninst✝³ : CategoryTheory.Category.{v₁, u₁} A\nB : Type u₂\ninst✝² : CategoryTheory.Category.{v₂, u₂} B\nT : Type u₃\ninst✝¹ : CategoryTheory.Category.{v₃, u₃} T\nL : CategoryTheory.Functor A T\nR : CategoryTheory.Functor B T\ninst✝ : L.Initial\n⊢ (CategoryTheory.Comma.snd L R).Initial","decl":"instance initial_snd [L.Initial] : (snd L R).Initial := by\n  have : ((opFunctor L R).leftOp ⋙ fst R.op L.op).Final :=\n    final_equivalence_comp (opEquiv L R).functor.leftOp (fst R.op L.op)\n  have : (snd L R).op.Final := final_of_natIso (opFunctorCompFst _ _)\n  apply initial_of_final_op\n\n"}
{"name":"CategoryTheory.Comma.isConnected_comma_of_final","module":"Mathlib.CategoryTheory.Comma.Final","initialProofState":"A : Type u₁\ninst✝⁴ : CategoryTheory.Category.{v₁, u₁} A\nB : Type u₂\ninst✝³ : CategoryTheory.Category.{v₂, u₂} B\nT : Type u₃\ninst✝² : CategoryTheory.Category.{v₃, u₃} T\nL : CategoryTheory.Functor A T\nR : CategoryTheory.Functor B T\ninst✝¹ : CategoryTheory.IsConnected A\ninst✝ : R.Final\n⊢ CategoryTheory.IsConnected (CategoryTheory.Comma L R)","decl":"/-- `Comma L R` with `L : A ⥤ T` and `R : B ⥤ T` is connected if `R` is final and `A` is\nconnected. -/\ninstance isConnected_comma_of_final [IsConnected A] [R.Final] : IsConnected (Comma L R) := by\n  rwa [isConnected_iff_of_final (fst L R)]\n\n"}
{"name":"CategoryTheory.Comma.isConnected_comma_of_initial","module":"Mathlib.CategoryTheory.Comma.Final","initialProofState":"A : Type u₁\ninst✝⁴ : CategoryTheory.Category.{v₁, u₁} A\nB : Type u₂\ninst✝³ : CategoryTheory.Category.{v₂, u₂} B\nT : Type u₃\ninst✝² : CategoryTheory.Category.{v₃, u₃} T\nL : CategoryTheory.Functor A T\nR : CategoryTheory.Functor B T\ninst✝¹ : CategoryTheory.IsConnected B\ninst✝ : L.Initial\n⊢ CategoryTheory.IsConnected (CategoryTheory.Comma L R)","decl":"/-- `Comma L R` with `L : A ⥤ T` and `R : B ⥤ T` is connected if `L` is initial and `B` is\nconnected. -/\ninstance isConnected_comma_of_initial [IsConnected B] [L.Initial] : IsConnected (Comma L R) := by\n  rwa [isConnected_iff_of_initial (snd L R)]\n\n"}
{"name":"CategoryTheory.Comma.map_final","module":"Mathlib.CategoryTheory.Comma.Final","initialProofState":"A : Type u₁\ninst✝¹⁰ : CategoryTheory.Category.{v₁, u₁} A\nB : Type u₂\ninst✝⁹ : CategoryTheory.Category.{v₂, u₂} B\nT : Type u₃\ninst✝⁸ : CategoryTheory.Category.{v₃, u₃} T\nL : CategoryTheory.Functor A T\nR : CategoryTheory.Functor B T\nA' : Type u₄\ninst✝⁷ : CategoryTheory.Category.{v₄, u₄} A'\nB' : Type u₅\ninst✝⁶ : CategoryTheory.Category.{v₅, u₅} B'\nT' : Type u₆\ninst✝⁵ : CategoryTheory.Category.{v₆, u₆} T'\nL' : CategoryTheory.Functor A' T'\nR' : CategoryTheory.Functor B' T'\nF : CategoryTheory.Functor A A'\nG : CategoryTheory.Functor B B'\nH : CategoryTheory.Functor T T'\niL : CategoryTheory.Iso (F.comp L') (L.comp H)\niR : CategoryTheory.Iso (G.comp R') (R.comp H)\ninst✝⁴ : CategoryTheory.IsFiltered B\ninst✝³ : R.Final\ninst✝² : R'.Final\ninst✝¹ : F.Final\ninst✝ : G.Final\n⊢ (CategoryTheory.Comma.map iL.hom iR.inv).Final","decl":"/-- Let the following diagram commute up to isomorphism:\n\n      L       R\n  A  ---→ T  ←--- B\n  |       |       |\n  | F     | H     | G\n  ↓       ↓       ↓\n  A' ---→ T' ←--- B'\n      L'      R'\n\nLet `F`, `G`, `R` and `R'` be final and `B` be filtered. Then, the induced functor between the comma\ncategories of the first and second row of the diagram is final. -/\nlemma map_final {A : Type u₁} [Category.{v₁} A] {B : Type u₂} [Category.{v₂} B] {T : Type u₃}\n    [Category.{v₃} T] {L : A ⥤ T} {R : B ⥤ T} {A' : Type u₄} [Category.{v₄} A'] {B' : Type u₅}\n    [Category.{v₅} B'] {T' : Type u₆} [Category.{v₆} T'] {L' : A' ⥤ T'} {R' : B' ⥤ T'} {F : A ⥤ A'}\n    {G : B ⥤ B'} {H : T ⥤ T'} (iL : F ⋙ L' ≅ L ⋙ H) (iR : G ⋙ R' ≅ R ⋙ H) [IsFiltered B]\n    [R.Final] [R'.Final] [F.Final] [G.Final] :\n    (Comma.map iL.hom iR.inv).Final := ⟨fun ⟨i₂, j₂, u₂⟩ => by\n  haveI := final_of_natIso iR\n  rw [isConnected_iff_of_equivalence (StructuredArrow.commaMapEquivalence iL.hom iR.inv _)]\n  have : StructuredArrow.map₂ u₂ iR.hom ≅ StructuredArrow.post j₂ G R' ⋙\n      StructuredArrow.map₂ (G := 𝟭 _) (F := 𝟭 _) (R' := R ⋙ H) u₂ iR.hom ⋙\n      StructuredArrow.pre _ R H :=\n    eqToIso (by\n      congr\n      · simp\n      · ext; simp) ≪≫\n    (StructuredArrow.map₂CompMap₂Iso _ _ _ _).symm ≪≫\n    isoWhiskerLeft _ ((StructuredArrow.map₂CompMap₂Iso _ _ _ _).symm ≪≫\n      isoWhiskerLeft _ (StructuredArrow.preIsoMap₂ _ _ _).symm) ≪≫\n    isoWhiskerRight (StructuredArrow.postIsoMap₂ j₂ G R').symm _\n  haveI := final_of_natIso this.symm\n  rw [IsIso.Iso.inv_inv]\n  infer_instance⟩\n\n"}
{"name":"CategoryTheory.Comma.isFiltered_of_final","module":"Mathlib.CategoryTheory.Comma.Final","initialProofState":"A : Type u₁\ninst✝⁵ : CategoryTheory.Category.{v₁, u₁} A\nB : Type u₂\ninst✝⁴ : CategoryTheory.Category.{v₂, u₂} B\nT : Type u₃\ninst✝³ : CategoryTheory.Category.{v₃, u₃} T\nL : CategoryTheory.Functor A T\nR : CategoryTheory.Functor B T\ninst✝² : CategoryTheory.IsFiltered A\ninst✝¹ : CategoryTheory.IsFiltered B\ninst✝ : R.Final\n⊢ CategoryTheory.IsFiltered (CategoryTheory.Comma L R)","decl":"attribute [local instance] map_final in\n/-- Let `A` and `B` be filtered categories, `R : B ⥤ T` be final and `L : A ⥤ T`. Then, the\ncomma category `Comma L R` is filtered. -/\ninstance isFiltered_of_final [IsFiltered A] [IsFiltered B] [R.Final] : IsFiltered (Comma L R) := by\n  haveI (a : A) : IsFiltered (Comma (fromPUnit (L.obj a)) R) :=\n    R.final_iff_isFiltered_structuredArrow.mp inferInstance (L.obj a)\n  have (a : A) : (fromPUnit (Over.mk (𝟙 a))).Final := final_const_of_isTerminal Over.mkIdTerminal\n  let η (a : A) : fromPUnit (Over.mk (𝟙 a)) ⋙ Over.forget a ⋙ L ≅ fromPUnit (L.obj a) :=\n    NatIso.ofComponents (fun _ => Iso.refl _)\n  have (a : A) := IsFiltered.of_final (map (L := fromPUnit (L.obj a)) (F := 𝟭 T) (η a).hom\n    ((Iso.refl (𝟭 B ⋙ R)).inv))\n  have : RepresentablyCoflat (fst L R) :=\n    ⟨fun a => IsFiltered.of_equivalence (CostructuredArrow.ofCommaFstEquivalence L R a).symm⟩\n  apply isFiltered_of_representablyCoflat (fst L R)\n\n"}
{"name":"CategoryTheory.Comma.isCofiltered_of_initial","module":"Mathlib.CategoryTheory.Comma.Final","initialProofState":"A : Type u₁\ninst✝⁵ : CategoryTheory.Category.{v₁, u₁} A\nB : Type u₂\ninst✝⁴ : CategoryTheory.Category.{v₂, u₂} B\nT : Type u₃\ninst✝³ : CategoryTheory.Category.{v₃, u₃} T\nL : CategoryTheory.Functor A T\nR : CategoryTheory.Functor B T\ninst✝² : CategoryTheory.IsCofiltered A\ninst✝¹ : CategoryTheory.IsCofiltered B\ninst✝ : L.Initial\n⊢ CategoryTheory.IsCofiltered (CategoryTheory.Comma L R)","decl":"attribute [local instance] isFiltered_of_final in\n/-- Let `A` and `B` be cofiltered categories, `L : A ⥤ T` be initial and `R : B ⥤ T`. Then, the\ncomma category `Comma L R` is cofiltered. -/\nlemma isCofiltered_of_initial [IsCofiltered A] [IsCofiltered B] [L.Initial] :\n    IsCofiltered (Comma L R) :=\n IsCofiltered.of_equivalence (Comma.opEquiv _ _).symm\n\n"}
{"name":"CategoryTheory.Comma.final_snd","module":"Mathlib.CategoryTheory.Comma.Final","initialProofState":"A : Type u₁\ninst✝⁵ : CategoryTheory.Category.{v₁, u₁} A\nB : Type u₂\ninst✝⁴ : CategoryTheory.Category.{v₂, u₂} B\nT : Type u₃\ninst✝³ : CategoryTheory.Category.{v₃, u₃} T\nL : CategoryTheory.Functor A T\nR : CategoryTheory.Functor B T\ninst✝² : CategoryTheory.IsFiltered A\ninst✝¹ : CategoryTheory.IsFiltered B\ninst✝ : R.Final\n⊢ (CategoryTheory.Comma.snd L R).Final","decl":"attribute [local instance] final_of_isFiltered_of_pUnit in\n/-- Let `A` and `B` be filtered categories, `R : B ⥤ T` be final and `R : A ⥤ T`. Then, the\nprojection `snd L R : Comma L R ⥤ B` is final. -/\ninstance final_snd [IsFiltered A] [IsFiltered B] [R.Final] : (snd L R).Final := by\n  let iL : star.{1} A ⋙ 𝟭 _ ≅ L ⋙ star _ := Iso.refl _\n  let iR : 𝟭 B ⋙ star.{1} B ≅ R ⋙ star _ := Iso.refl _\n  have := map_final iL iR\n  let s := (equivProd (𝟭 _) (star B)).trans <| prod.leftUnitorEquivalence B\n  let iS : map iL.hom iR.inv ⋙ s.functor ≅ snd L R :=\n    NatIso.ofComponents (fun _ => Iso.refl _) (fun f => by simp [iL, iR, s])\n  apply final_of_natIso iS\n\n"}
{"name":"CategoryTheory.Comma.initial_fst","module":"Mathlib.CategoryTheory.Comma.Final","initialProofState":"A : Type u₁\ninst✝⁵ : CategoryTheory.Category.{v₁, u₁} A\nB : Type u₂\ninst✝⁴ : CategoryTheory.Category.{v₂, u₂} B\nT : Type u₃\ninst✝³ : CategoryTheory.Category.{v₃, u₃} T\nL : CategoryTheory.Functor A T\nR : CategoryTheory.Functor B T\ninst✝² : CategoryTheory.IsCofiltered A\ninst✝¹ : CategoryTheory.IsCofiltered B\ninst✝ : L.Initial\n⊢ (CategoryTheory.Comma.fst L R).Initial","decl":"/-- Let `A` and `B` be cofiltered categories, `L : A ⥤ T` be initial and `R : B ⥤ T`. Then, the\nprojection `fst L R : Comma L R ⥤ A` is initial. -/\ninstance initial_fst [IsCofiltered A] [IsCofiltered B] [L.Initial] : (fst L R).Initial := by\n  have : ((opFunctor L R).leftOp ⋙ snd R.op L.op).Final :=\n    final_equivalence_comp (opEquiv L R).functor.leftOp _\n  have : (fst L R).op.Final := final_of_natIso <| opFunctorCompSnd _ _\n  apply initial_of_final_op\n\n"}
