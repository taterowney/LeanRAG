{"name":"MvPolynomial.rTensor_apply_tmul","module":"Mathlib.RingTheory.TensorProduct.MvPolynomial","initialProofState":"R : Type u\nN : Type v\ninst✝⁵ : CommSemiring R\nσ : Type u_1\nS : Type u_2\ninst✝⁴ : CommSemiring S\ninst✝³ : Algebra R S\ninst✝² : DecidableEq σ\ninst✝¹ : AddCommMonoid N\ninst✝ : Module R N\np : MvPolynomial σ S\nn : N\n⊢ Eq (MvPolynomial.rTensor (TensorProduct.tmul R p n)) (Finsupp.sum p fun i m => Finsupp.single i (TensorProduct.tmul R m n))","decl":"lemma rTensor_apply_tmul (p : MvPolynomial σ S) (n : N) :\n    rTensor (p ⊗ₜ[R] n) = p.sum (fun i m ↦ Finsupp.single i (m ⊗ₜ[R] n)) :=\n  TensorProduct.finsuppLeft_apply_tmul p n\n\n"}
{"name":"MvPolynomial.rTensor_apply_tmul_apply","module":"Mathlib.RingTheory.TensorProduct.MvPolynomial","initialProofState":"R : Type u\nN : Type v\ninst✝⁵ : CommSemiring R\nσ : Type u_1\nS : Type u_2\ninst✝⁴ : CommSemiring S\ninst✝³ : Algebra R S\ninst✝² : DecidableEq σ\ninst✝¹ : AddCommMonoid N\ninst✝ : Module R N\np : MvPolynomial σ S\nn : N\nd : Finsupp σ Nat\n⊢ Eq ((MvPolynomial.rTensor (TensorProduct.tmul R p n)) d) (TensorProduct.tmul R (MvPolynomial.coeff d p) n)","decl":"lemma rTensor_apply_tmul_apply (p : MvPolynomial σ S) (n : N) (d : σ →₀ ℕ) :\n    rTensor (p ⊗ₜ[R] n) d = (coeff d p) ⊗ₜ[R] n :=\n  TensorProduct.finsuppLeft_apply_tmul_apply p n d\n\n"}
{"name":"MvPolynomial.rTensor_apply_monomial_tmul","module":"Mathlib.RingTheory.TensorProduct.MvPolynomial","initialProofState":"R : Type u\nN : Type v\ninst✝⁵ : CommSemiring R\nσ : Type u_1\nS : Type u_2\ninst✝⁴ : CommSemiring S\ninst✝³ : Algebra R S\ninst✝² : DecidableEq σ\ninst✝¹ : AddCommMonoid N\ninst✝ : Module R N\ne : Finsupp σ Nat\ns : S\nn : N\nd : Finsupp σ Nat\n⊢ Eq ((MvPolynomial.rTensor (TensorProduct.tmul R ((MvPolynomial.monomial e) s) n)) d) (ite (Eq e d) (TensorProduct.tmul R s n) 0)","decl":"lemma rTensor_apply_monomial_tmul (e : σ →₀ ℕ) (s : S) (n : N) (d : σ →₀ ℕ) :\n    rTensor (monomial e s ⊗ₜ[R] n) d = if e = d then s ⊗ₜ[R] n else 0 := by\n  simp only [rTensor_apply_tmul_apply, coeff_monomial, ite_tmul]\n\n"}
{"name":"MvPolynomial.rTensor_apply_X_tmul","module":"Mathlib.RingTheory.TensorProduct.MvPolynomial","initialProofState":"R : Type u\nN : Type v\ninst✝⁵ : CommSemiring R\nσ : Type u_1\nS : Type u_2\ninst✝⁴ : CommSemiring S\ninst✝³ : Algebra R S\ninst✝² : DecidableEq σ\ninst✝¹ : AddCommMonoid N\ninst✝ : Module R N\ns : σ\nn : N\nd : Finsupp σ Nat\n⊢ Eq ((MvPolynomial.rTensor (TensorProduct.tmul R (MvPolynomial.X s) n)) d) (ite (Eq (Finsupp.single s 1) d) (TensorProduct.tmul R 1 n) 0)","decl":"lemma rTensor_apply_X_tmul (s : σ) (n : N) (d : σ →₀ ℕ) :\n    rTensor (X s ⊗ₜ[R] n) d = if Finsupp.single s 1 = d then (1 : S) ⊗ₜ[R] n else 0 := by\n  rw [rTensor_apply_tmul_apply, coeff_X', ite_tmul]\n\n"}
{"name":"MvPolynomial.rTensor_apply","module":"Mathlib.RingTheory.TensorProduct.MvPolynomial","initialProofState":"R : Type u\nN : Type v\ninst✝⁵ : CommSemiring R\nσ : Type u_1\nS : Type u_2\ninst✝⁴ : CommSemiring S\ninst✝³ : Algebra R S\ninst✝² : DecidableEq σ\ninst✝¹ : AddCommMonoid N\ninst✝ : Module R N\nt : TensorProduct R (MvPolynomial σ S) N\nd : Finsupp σ Nat\n⊢ Eq ((MvPolynomial.rTensor t) d) ((LinearMap.rTensor N (↑R (MvPolynomial.lcoeff S d))) t)","decl":"lemma rTensor_apply (t : MvPolynomial σ S ⊗[R] N) (d : σ →₀ ℕ) :\n    rTensor t d = ((lcoeff S d).restrictScalars R).rTensor N t :=\n  TensorProduct.finsuppLeft_apply t d\n\n"}
{"name":"MvPolynomial.rTensor_symm_apply_single","module":"Mathlib.RingTheory.TensorProduct.MvPolynomial","initialProofState":"R : Type u\nN : Type v\ninst✝⁵ : CommSemiring R\nσ : Type u_1\nS : Type u_2\ninst✝⁴ : CommSemiring S\ninst✝³ : Algebra R S\ninst✝² : DecidableEq σ\ninst✝¹ : AddCommMonoid N\ninst✝ : Module R N\nd : Finsupp σ Nat\ns : S\nn : N\n⊢ Eq (MvPolynomial.rTensor.symm (Finsupp.single d (TensorProduct.tmul R s n))) (TensorProduct.tmul R ((MvPolynomial.monomial d) s) n)","decl":"@[simp]\nlemma rTensor_symm_apply_single (d : σ →₀ ℕ) (s : S) (n : N) :\n    rTensor.symm (Finsupp.single d (s ⊗ₜ n)) =\n      (monomial d s) ⊗ₜ[R] n :=\n  TensorProduct.finsuppLeft_symm_apply_single (R := R) d s n\n\n"}
{"name":"MvPolynomial.scalarRTensor_apply_tmul","module":"Mathlib.RingTheory.TensorProduct.MvPolynomial","initialProofState":"R : Type u\nN : Type v\ninst✝³ : CommSemiring R\nσ : Type u_1\ninst✝² : DecidableEq σ\ninst✝¹ : AddCommMonoid N\ninst✝ : Module R N\np : MvPolynomial σ R\nn : N\n⊢ Eq (MvPolynomial.scalarRTensor (TensorProduct.tmul R p n)) (Finsupp.sum p fun i m => Finsupp.single i (HSMul.hSMul m n))","decl":"lemma scalarRTensor_apply_tmul (p : MvPolynomial σ R) (n : N) :\n    scalarRTensor (p ⊗ₜ[R] n) = p.sum (fun i m ↦ Finsupp.single i (m • n)) :=\n  TensorProduct.finsuppScalarLeft_apply_tmul p n\n\n"}
{"name":"MvPolynomial.scalarRTensor_apply_tmul_apply","module":"Mathlib.RingTheory.TensorProduct.MvPolynomial","initialProofState":"R : Type u\nN : Type v\ninst✝³ : CommSemiring R\nσ : Type u_1\ninst✝² : DecidableEq σ\ninst✝¹ : AddCommMonoid N\ninst✝ : Module R N\np : MvPolynomial σ R\nn : N\nd : Finsupp σ Nat\n⊢ Eq ((MvPolynomial.scalarRTensor (TensorProduct.tmul R p n)) d) (HSMul.hSMul (MvPolynomial.coeff d p) n)","decl":"lemma scalarRTensor_apply_tmul_apply (p : MvPolynomial σ R) (n : N) (d : σ →₀ ℕ) :\n    scalarRTensor (p ⊗ₜ[R] n) d = coeff d p • n :=\n  TensorProduct.finsuppScalarLeft_apply_tmul_apply p n d\n\n"}
{"name":"MvPolynomial.scalarRTensor_apply_monomial_tmul","module":"Mathlib.RingTheory.TensorProduct.MvPolynomial","initialProofState":"R : Type u\nN : Type v\ninst✝³ : CommSemiring R\nσ : Type u_1\ninst✝² : DecidableEq σ\ninst✝¹ : AddCommMonoid N\ninst✝ : Module R N\ne : Finsupp σ Nat\nr : R\nn : N\nd : Finsupp σ Nat\n⊢ Eq ((MvPolynomial.scalarRTensor (TensorProduct.tmul R ((MvPolynomial.monomial e) r) n)) d) (ite (Eq e d) (HSMul.hSMul r n) 0)","decl":"lemma scalarRTensor_apply_monomial_tmul (e : σ →₀ ℕ) (r : R) (n : N) (d : σ →₀ ℕ) :\n    scalarRTensor (monomial e r ⊗ₜ[R] n) d = if e = d then r • n else 0 := by\n  rw [scalarRTensor_apply_tmul_apply, coeff_monomial, ite_smul, zero_smul]\n\n"}
{"name":"MvPolynomial.scalarRTensor_apply_X_tmul_apply","module":"Mathlib.RingTheory.TensorProduct.MvPolynomial","initialProofState":"R : Type u\nN : Type v\ninst✝³ : CommSemiring R\nσ : Type u_1\ninst✝² : DecidableEq σ\ninst✝¹ : AddCommMonoid N\ninst✝ : Module R N\ns : σ\nn : N\nd : Finsupp σ Nat\n⊢ Eq ((MvPolynomial.scalarRTensor (TensorProduct.tmul R (MvPolynomial.X s) n)) d) (ite (Eq (Finsupp.single s 1) d) n 0)","decl":"lemma scalarRTensor_apply_X_tmul_apply (s : σ) (n : N) (d : σ →₀ ℕ) :\n    scalarRTensor (X s ⊗ₜ[R] n) d = if Finsupp.single s 1 = d then n else 0 := by\n  rw [scalarRTensor_apply_tmul_apply, coeff_X', ite_smul, one_smul, zero_smul]\n\n"}
{"name":"MvPolynomial.scalarRTensor_symm_apply_single","module":"Mathlib.RingTheory.TensorProduct.MvPolynomial","initialProofState":"R : Type u\nN : Type v\ninst✝³ : CommSemiring R\nσ : Type u_1\ninst✝² : DecidableEq σ\ninst✝¹ : AddCommMonoid N\ninst✝ : Module R N\nd : Finsupp σ Nat\nn : N\n⊢ Eq (MvPolynomial.scalarRTensor.symm (Finsupp.single d n)) (TensorProduct.tmul R ((MvPolynomial.monomial d) 1) n)","decl":"lemma scalarRTensor_symm_apply_single (d : σ →₀ ℕ) (n : N) :\n    scalarRTensor.symm (Finsupp.single d n) = (monomial d 1) ⊗ₜ[R] n :=\n  TensorProduct.finsuppScalarLeft_symm_apply_single d n\n\n"}
{"name":"MvPolynomial.coeff_rTensorAlgHom_tmul","module":"Mathlib.RingTheory.TensorProduct.MvPolynomial","initialProofState":"R : Type u\nN : Type v\ninst✝⁴ : CommSemiring R\nσ : Type u_1\nS : Type u_2\ninst✝³ : CommSemiring S\ninst✝² : Algebra R S\ninst✝¹ : CommSemiring N\ninst✝ : Algebra R N\np : MvPolynomial σ S\nn : N\nd : Finsupp σ Nat\n⊢ Eq (MvPolynomial.coeff d (MvPolynomial.rTensorAlgHom (TensorProduct.tmul R p n))) (TensorProduct.tmul R (MvPolynomial.coeff d p) n)","decl":"@[simp]\nlemma coeff_rTensorAlgHom_tmul\n    (p : MvPolynomial σ S) (n : N) (d : σ →₀ ℕ) :\n    coeff d (rTensorAlgHom (p ⊗ₜ[R] n)) = (coeff d p) ⊗ₜ[R] n := by\n  rw [rTensorAlgHom, Algebra.TensorProduct.lift_tmul]\n  rw [AlgHom.coe_comp, IsScalarTower.coe_toAlgHom', Function.comp_apply,\n    Algebra.TensorProduct.includeRight_apply]\n  rw [algebraMap_eq, mul_comm, coeff_C_mul]\n  simp [mapAlgHom, coeff_map]\n\n"}
{"name":"MvPolynomial.coeff_rTensorAlgHom_monomial_tmul","module":"Mathlib.RingTheory.TensorProduct.MvPolynomial","initialProofState":"R : Type u\nN : Type v\ninst✝⁵ : CommSemiring R\nσ : Type u_1\nS : Type u_2\ninst✝⁴ : CommSemiring S\ninst✝³ : Algebra R S\ninst✝² : CommSemiring N\ninst✝¹ : Algebra R N\ninst✝ : DecidableEq σ\ne : Finsupp σ Nat\ns : S\nn : N\nd : Finsupp σ Nat\n⊢ Eq (MvPolynomial.coeff d (MvPolynomial.rTensorAlgHom (TensorProduct.tmul R ((MvPolynomial.monomial e) s) n))) (ite (Eq e d) (TensorProduct.tmul R s n) 0)","decl":"lemma coeff_rTensorAlgHom_monomial_tmul\n    (e : σ →₀ ℕ) (s : S) (n : N) (d : σ →₀ ℕ) :\n    coeff d (rTensorAlgHom (monomial e s ⊗ₜ[R] n)) =\n      if e = d then s ⊗ₜ[R] n else 0 := by\n  simp [ite_tmul]\n\n"}
{"name":"MvPolynomial.rTensorAlgHom_toLinearMap","module":"Mathlib.RingTheory.TensorProduct.MvPolynomial","initialProofState":"R : Type u\nN : Type v\ninst✝⁵ : CommSemiring R\nσ : Type u_1\nS : Type u_2\ninst✝⁴ : CommSemiring S\ninst✝³ : Algebra R S\ninst✝² : CommSemiring N\ninst✝¹ : Algebra R N\ninst✝ : DecidableEq σ\n⊢ Eq MvPolynomial.rTensorAlgHom.toLinearMap ↑MvPolynomial.rTensor","decl":"lemma rTensorAlgHom_toLinearMap :\n    (rTensorAlgHom :\n      MvPolynomial σ S ⊗[R] N →ₐ[S] MvPolynomial σ (S ⊗[R] N)).toLinearMap =\n      rTensor.toLinearMap := by\n  ext d n e\n  dsimp only [AlgebraTensorModule.curry_apply, TensorProduct.curry_apply,\n    LinearMap.coe_restrictScalars, AlgHom.toLinearMap_apply]\n  simp only [coe_comp, Function.comp_apply, AlgebraTensorModule.curry_apply, curry_apply,\n    LinearMap.coe_restrictScalars, AlgHom.toLinearMap_apply]\n  rw [coeff_rTensorAlgHom_tmul]\n  simp only [coeff]\n  erw [finsuppLeft_apply_tmul_apply]\n\n"}
{"name":"MvPolynomial.rTensorAlgHom_apply_eq","module":"Mathlib.RingTheory.TensorProduct.MvPolynomial","initialProofState":"R : Type u\nN : Type v\ninst✝⁵ : CommSemiring R\nσ : Type u_1\nS : Type u_2\ninst✝⁴ : CommSemiring S\ninst✝³ : Algebra R S\ninst✝² : CommSemiring N\ninst✝¹ : Algebra R N\ninst✝ : DecidableEq σ\np : TensorProduct R (MvPolynomial σ S) N\n⊢ Eq (MvPolynomial.rTensorAlgHom p) (MvPolynomial.rTensor p)","decl":"lemma rTensorAlgHom_apply_eq (p : MvPolynomial σ S ⊗[R] N) :\n    rTensorAlgHom (S := S) p = rTensor p := by\n  rw [← AlgHom.toLinearMap_apply, rTensorAlgHom_toLinearMap]\n  rfl\n\n"}
{"name":"MvPolynomial.rTensorAlgEquiv_apply","module":"Mathlib.RingTheory.TensorProduct.MvPolynomial","initialProofState":"R : Type u\nN : Type v\ninst✝⁵ : CommSemiring R\nσ : Type u_1\nS : Type u_2\ninst✝⁴ : CommSemiring S\ninst✝³ : Algebra R S\ninst✝² : CommSemiring N\ninst✝¹ : Algebra R N\ninst✝ : DecidableEq σ\nx : TensorProduct R (MvPolynomial σ S) N\n⊢ Eq (MvPolynomial.rTensorAlgEquiv x) (MvPolynomial.rTensorAlgHom x)","decl":"@[simp]\nlemma rTensorAlgEquiv_apply (x : (MvPolynomial σ S) ⊗[R] N) :\n    rTensorAlgEquiv x = rTensorAlgHom x := by\n  rw [← AlgHom.coe_coe, ← AlgEquiv.toAlgHom_eq_coe]\n  congr 1\n  ext _ d <;> simpa [rTensorAlgEquiv] using rTensor_apply_tmul_apply _ _ d\n\n"}
{"name":"MvPolynomial.algebraTensorAlgEquiv_tmul","module":"Mathlib.RingTheory.TensorProduct.MvPolynomial","initialProofState":"R : Type u\ninst✝² : CommSemiring R\nσ : Type u_1\nA : Type u_3\ninst✝¹ : CommSemiring A\ninst✝ : Algebra R A\na : A\np : MvPolynomial σ R\n⊢ Eq ((MvPolynomial.algebraTensorAlgEquiv R A) (TensorProduct.tmul R a p)) (HSMul.hSMul a ((MvPolynomial.map (algebraMap R A)) p))","decl":"@[simp]\nlemma algebraTensorAlgEquiv_tmul (a : A) (p : MvPolynomial σ R) :\n    algebraTensorAlgEquiv R A (a ⊗ₜ p) = a • MvPolynomial.map (algebraMap R A) p := by\n  simp [algebraTensorAlgEquiv, Algebra.smul_def]\n  rfl\n\n"}
{"name":"MvPolynomial.algebraTensorAlgEquiv_symm_X","module":"Mathlib.RingTheory.TensorProduct.MvPolynomial","initialProofState":"R : Type u\ninst✝² : CommSemiring R\nσ : Type u_1\nA : Type u_3\ninst✝¹ : CommSemiring A\ninst✝ : Algebra R A\ns : σ\n⊢ Eq ((MvPolynomial.algebraTensorAlgEquiv R A).symm (MvPolynomial.X s)) (TensorProduct.tmul R 1 (MvPolynomial.X s))","decl":"@[simp]\nlemma algebraTensorAlgEquiv_symm_X (s : σ) :\n    (algebraTensorAlgEquiv R A).symm (X s) = 1 ⊗ₜ X s := by\n  simp [algebraTensorAlgEquiv]\n\n"}
{"name":"MvPolynomial.algebraTensorAlgEquiv_symm_monomial","module":"Mathlib.RingTheory.TensorProduct.MvPolynomial","initialProofState":"R : Type u\ninst✝² : CommSemiring R\nσ : Type u_1\nA : Type u_3\ninst✝¹ : CommSemiring A\ninst✝ : Algebra R A\nm : Finsupp σ Nat\na : A\n⊢ Eq ((MvPolynomial.algebraTensorAlgEquiv R A).symm ((MvPolynomial.monomial m) a)) (TensorProduct.tmul R a ((MvPolynomial.monomial m) 1))","decl":"@[simp]\nlemma algebraTensorAlgEquiv_symm_monomial (m : σ →₀ ℕ) (a : A) :\n    (algebraTensorAlgEquiv R A).symm (monomial m a) = a ⊗ₜ monomial m 1 := by\n  apply @Finsupp.induction σ ℕ _ _ m\n  · simp [algebraTensorAlgEquiv]\n  · intro i n f _ _ hfa\n    simp only [algebraTensorAlgEquiv, AlgEquiv.ofAlgHom_symm_apply] at hfa ⊢\n    simp only [add_comm, monomial_add_single, _root_.map_mul, map_pow, aeval_X,\n      Algebra.TensorProduct.tmul_pow, one_pow, hfa]\n    nth_rw 2 [← mul_one a]\n    rw [Algebra.TensorProduct.tmul_mul_tmul]\n\n"}
{"name":"MvPolynomial.aeval_one_tmul","module":"Mathlib.RingTheory.TensorProduct.MvPolynomial","initialProofState":"R : Type u\nN : Type v\ninst✝⁴ : CommSemiring R\nσ : Type u_1\nS : Type u_2\ninst✝³ : CommSemiring S\ninst✝² : Algebra R S\ninst✝¹ : CommSemiring N\ninst✝ : Algebra R N\nf : σ → S\np : MvPolynomial σ R\n⊢ Eq ((MvPolynomial.aeval fun x => TensorProduct.tmul R 1 (f x)) p) (TensorProduct.tmul R 1 ((MvPolynomial.aeval f) p))","decl":"lemma aeval_one_tmul (f : σ → S) (p : MvPolynomial σ R) :\n    (aeval fun x ↦ (1 ⊗ₜ[R] f x : N ⊗[R] S)) p = 1 ⊗ₜ[R] (aeval f) p := by\n  induction' p using MvPolynomial.induction_on with a p q hp hq p i h\n  · simp only [map_C, algHom_C, Algebra.TensorProduct.algebraMap_apply,\n      RingHomCompTriple.comp_apply]\n    rw [← mul_one ((algebraMap R N) a), ← Algebra.smul_def, smul_tmul, Algebra.smul_def, mul_one]\n  · simp [hp, hq, tmul_add]\n  · simp [h]\n\n"}
