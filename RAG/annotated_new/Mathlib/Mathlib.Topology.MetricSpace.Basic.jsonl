{"name":"MetricSpace.instT0Space","module":"Mathlib.Topology.MetricSpace.Basic","initialProofState":"γ : Type w\ninst✝ : MetricSpace γ\n⊢ T0Space γ","decl":"instance (priority := 100) _root_.MetricSpace.instT0Space : T0Space γ where\n  t0 _ _ h := eq_of_dist_eq_zero <| Metric.inseparable_iff.1 h\n\n"}
{"name":"Metric.isUniformEmbedding_iff'","module":"Mathlib.Topology.MetricSpace.Basic","initialProofState":"β : Type v\nγ : Type w\ninst✝¹ : MetricSpace γ\ninst✝ : MetricSpace β\nf : γ → β\n⊢ Iff (IsUniformEmbedding f) (And (∀ (ε : Real), GT.gt ε 0 → Exists fun δ => And (GT.gt δ 0) (∀ {a b : γ}, LT.lt (Dist.dist a b) δ → LT.lt (Dist.dist (f a) (f b)) ε)) (∀ (δ : Real), GT.gt δ 0 → Exists fun ε => And (GT.gt ε 0) (∀ {a b : γ}, LT.lt (Dist.dist (f a) (f b)) ε → LT.lt (Dist.dist a b) δ)))","decl":"/-- A map between metric spaces is a uniform embedding if and only if the distance between `f x`\nand `f y` is controlled in terms of the distance between `x` and `y` and conversely. -/\ntheorem isUniformEmbedding_iff' [MetricSpace β] {f : γ → β} :\n    IsUniformEmbedding f ↔\n      (∀ ε > 0, ∃ δ > 0, ∀ {a b : γ}, dist a b < δ → dist (f a) (f b) < ε) ∧\n        ∀ δ > 0, ∃ ε > 0, ∀ {a b : γ}, dist (f a) (f b) < ε → dist a b < δ := by\n  rw [isUniformEmbedding_iff_isUniformInducing, isUniformInducing_iff, uniformContinuous_iff]\n\n"}
{"name":"Metric.uniformEmbedding_iff'","module":"Mathlib.Topology.MetricSpace.Basic","initialProofState":"β : Type v\nγ : Type w\ninst✝¹ : MetricSpace γ\ninst✝ : MetricSpace β\nf : γ → β\n⊢ Iff (IsUniformEmbedding f) (And (∀ (ε : Real), GT.gt ε 0 → Exists fun δ => And (GT.gt δ 0) (∀ {a b : γ}, LT.lt (Dist.dist a b) δ → LT.lt (Dist.dist (f a) (f b)) ε)) (∀ (δ : Real), GT.gt δ 0 → Exists fun ε => And (GT.gt ε 0) (∀ {a b : γ}, LT.lt (Dist.dist (f a) (f b)) ε → LT.lt (Dist.dist a b) δ)))","decl":"@[deprecated (since := \"2024-10-01\")]\nalias uniformEmbedding_iff' := isUniformEmbedding_iff'\n\n"}
{"name":"Metric.isClosed_of_pairwise_le_dist","module":"Mathlib.Topology.MetricSpace.Basic","initialProofState":"γ : Type w\ninst✝ : MetricSpace γ\ns : Set γ\nε : Real\nhε : LT.lt 0 ε\nhs : s.Pairwise fun x y => LE.le ε (Dist.dist x y)\n⊢ IsClosed s","decl":"theorem isClosed_of_pairwise_le_dist {s : Set γ} {ε : ℝ} (hε : 0 < ε)\n    (hs : s.Pairwise fun x y => ε ≤ dist x y) : IsClosed s :=\n  isClosed_of_spaced_out (dist_mem_uniformity hε) <| by simpa using hs\n\n"}
{"name":"Metric.isClosedEmbedding_of_pairwise_le_dist","module":"Mathlib.Topology.MetricSpace.Basic","initialProofState":"γ : Type w\ninst✝² : MetricSpace γ\nα : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : DiscreteTopology α\nε : Real\nhε : LT.lt 0 ε\nf : α → γ\nhf : Pairwise fun x y => LE.le ε (Dist.dist (f x) (f y))\n⊢ Topology.IsClosedEmbedding f","decl":"theorem isClosedEmbedding_of_pairwise_le_dist {α : Type*} [TopologicalSpace α] [DiscreteTopology α]\n    {ε : ℝ} (hε : 0 < ε) {f : α → γ} (hf : Pairwise fun x y => ε ≤ dist (f x) (f y)) :\n    IsClosedEmbedding f :=\n  isClosedEmbedding_of_spaced_out (dist_mem_uniformity hε) <| by simpa using hf\n\n"}
{"name":"Metric.closedEmbedding_of_pairwise_le_dist","module":"Mathlib.Topology.MetricSpace.Basic","initialProofState":"γ : Type w\ninst✝² : MetricSpace γ\nα : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : DiscreteTopology α\nε : Real\nhε : LT.lt 0 ε\nf : α → γ\nhf : Pairwise fun x y => LE.le ε (Dist.dist (f x) (f y))\n⊢ Topology.IsClosedEmbedding f","decl":"@[deprecated (since := \"2024-10-20\")]\nalias closedEmbedding_of_pairwise_le_dist := isClosedEmbedding_of_pairwise_le_dist\n\n"}
{"name":"Metric.isUniformEmbedding_bot_of_pairwise_le_dist","module":"Mathlib.Topology.MetricSpace.Basic","initialProofState":"α : Type u\ninst✝ : PseudoMetricSpace α\nβ : Type u_2\nε : Real\nhε : LT.lt 0 ε\nf : β → α\nhf : Pairwise fun x y => LE.le ε (Dist.dist (f x) (f y))\n⊢ IsUniformEmbedding f","decl":"/-- If `f : β → α` sends any two distinct points to points at distance at least `ε > 0`, then\n`f` is a uniform embedding with respect to the discrete uniformity on `β`. -/\ntheorem isUniformEmbedding_bot_of_pairwise_le_dist {β : Type*} {ε : ℝ} (hε : 0 < ε) {f : β → α}\n    (hf : Pairwise fun x y => ε ≤ dist (f x) (f y)) :\n    @IsUniformEmbedding _ _ ⊥ (by infer_instance) f :=\n  isUniformEmbedding_of_spaced_out (dist_mem_uniformity hε) <| by simpa using hf\n\n"}
{"name":"Metric.uniformEmbedding_bot_of_pairwise_le_dist","module":"Mathlib.Topology.MetricSpace.Basic","initialProofState":"α : Type u\ninst✝ : PseudoMetricSpace α\nβ : Type u_2\nε : Real\nhε : LT.lt 0 ε\nf : β → α\nhf : Pairwise fun x y => LE.le ε (Dist.dist (f x) (f y))\n⊢ IsUniformEmbedding f","decl":"@[deprecated (since := \"2024-10-01\")]\nalias uniformEmbedding_bot_of_pairwise_le_dist := isUniformEmbedding_bot_of_pairwise_le_dist\n\n"}
{"name":"Metric.secondCountable_of_countable_discretization","module":"Mathlib.Topology.MetricSpace.Basic","initialProofState":"α : Type u\ninst✝ : MetricSpace α\nH : ∀ (ε : Real), GT.gt ε 0 → Exists fun β => Exists fun x => Exists fun F => ∀ (x y : α), Eq (F x) (F y) → LE.le (Dist.dist x y) ε\n⊢ SecondCountableTopology α","decl":"/-- A metric space is second countable if one can reconstruct up to any `ε>0` any element of the\nspace from countably many data. -/\ntheorem secondCountable_of_countable_discretization {α : Type u} [MetricSpace α]\n    (H : ∀ ε > (0 : ℝ), ∃ (β : Type*) (_ : Encodable β) (F : α → β),\n      ∀ x y, F x = F y → dist x y ≤ ε) :\n    SecondCountableTopology α := by\n  refine secondCountable_of_almost_dense_set fun ε ε0 => ?_\n  rcases H ε ε0 with ⟨β, fβ, F, hF⟩\n  let Finv := rangeSplitting F\n  refine ⟨range Finv, ⟨countable_range _, fun x => ?_⟩⟩\n  let x' := Finv ⟨F x, mem_range_self _⟩\n  have : F x' = F x := apply_rangeSplitting F _\n  exact ⟨x', mem_range_self _, hF _ _ this.symm⟩\n\n"}
{"name":"SeparationQuotient.dist_mk","module":"Mathlib.Topology.MetricSpace.Basic","initialProofState":"α : Type u\ninst✝ : PseudoMetricSpace α\np q : α\n⊢ Eq (Dist.dist (SeparationQuotient.mk p) (SeparationQuotient.mk q)) (Dist.dist p q)","decl":"theorem SeparationQuotient.dist_mk {α : Type u} [PseudoMetricSpace α] (p q : α) :\n    dist (mk p) (mk q) = dist p q :=\n  rfl\n\n"}
