{"name":"MagmaCat.instMulHomClass","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"X Y : MagmaCat\n⊢ MulHomClass (Quiver.Hom X Y) ↑X ↑Y","decl":"@[to_additive]\ninstance instMulHomClass (X Y : MagmaCat) : MulHomClass (X ⟶ Y) X Y :=\n  inferInstanceAs <| MulHomClass (X →ₙ* Y) X Y\n\n"}
{"name":"AddMagmaCat.instAddHomClass","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"X Y : AddMagmaCat\n⊢ AddHomClass (Quiver.Hom X Y) ↑X ↑Y","decl":"@[to_additive]\ninstance instMulHomClass (X Y : MagmaCat) : MulHomClass (X ⟶ Y) X Y :=\n  inferInstanceAs <| MulHomClass (X →ₙ* Y) X Y\n\n"}
{"name":"MagmaCat.coe_of","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"R : Type u\ninst✝ : Mul R\n⊢ Eq (↑(MagmaCat.of R)) R","decl":"@[to_additive (attr := simp)]\ntheorem coe_of (R : Type u) [Mul R] : (MagmaCat.of R : Type u) = R :=\n  rfl\n\n"}
{"name":"AddMagmaCat.coe_of","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"R : Type u\ninst✝ : Add R\n⊢ Eq (↑(AddMagmaCat.of R)) R","decl":"@[to_additive (attr := simp)]\ntheorem coe_of (R : Type u) [Mul R] : (MagmaCat.of R : Type u) = R :=\n  rfl\n\n"}
{"name":"AddMagmaCat.addEquiv_coe_eq","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"X Y : Type u_1\ninst✝¹ : Add X\ninst✝ : Add Y\ne : AddEquiv X Y\n⊢ Eq ⇑↑e ⇑e","decl":"@[to_additive (attr := simp)]\nlemma mulEquiv_coe_eq {X Y : Type _} [Mul X] [Mul Y] (e : X ≃* Y) :\n    (@DFunLike.coe (MagmaCat.of X ⟶ MagmaCat.of Y) _ (fun _ => (forget MagmaCat).obj _)\n      HasForget.instFunLike (e : X →ₙ* Y) : X → Y) = ↑e :=\n  rfl\n\n"}
{"name":"MagmaCat.mulEquiv_coe_eq","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"X Y : Type u_1\ninst✝¹ : Mul X\ninst✝ : Mul Y\ne : MulEquiv X Y\n⊢ Eq ⇑↑e ⇑e","decl":"@[to_additive (attr := simp)]\nlemma mulEquiv_coe_eq {X Y : Type _} [Mul X] [Mul Y] (e : X ≃* Y) :\n    (@DFunLike.coe (MagmaCat.of X ⟶ MagmaCat.of Y) _ (fun _ => (forget MagmaCat).obj _)\n      HasForget.instFunLike (e : X →ₙ* Y) : X → Y) = ↑e :=\n  rfl\n\n"}
{"name":"AddMagmaCat.ofHom_apply","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"X Y : Type u\ninst✝¹ : Add X\ninst✝ : Add Y\nf : AddHom X Y\nx : X\n⊢ Eq ((AddMagmaCat.ofHom f) x) (f x)","decl":"@[to_additive]\ntheorem ofHom_apply {X Y : Type u} [Mul X] [Mul Y] (f : X →ₙ* Y) (x : X) : ofHom f x = f x :=\n  rfl\n\n"}
{"name":"MagmaCat.ofHom_apply","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"X Y : Type u\ninst✝¹ : Mul X\ninst✝ : Mul Y\nf : MulHom X Y\nx : X\n⊢ Eq ((MagmaCat.ofHom f) x) (f x)","decl":"@[to_additive]\ntheorem ofHom_apply {X Y : Type u} [Mul X] [Mul Y] (f : X →ₙ* Y) (x : X) : ofHom f x = f x :=\n  rfl\n\n"}
{"name":"AddSemigrp.instParentProjectionAddAddSemigroupToAdd","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"⊢ CategoryTheory.BundledHom.ParentProjection @AddSemigroup.toAdd","decl":"@[to_additive]\ninstance : BundledHom.ParentProjection @Semigroup.toMul := ⟨⟩\n\n"}
{"name":"Semigrp.instParentProjectionMulSemigroupToMul","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"⊢ CategoryTheory.BundledHom.ParentProjection @Semigroup.toMul","decl":"@[to_additive]\ninstance : BundledHom.ParentProjection @Semigroup.toMul := ⟨⟩\n\n"}
{"name":"Semigrp.instMulHomClass","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"X Y : Semigrp\n⊢ MulHomClass (Quiver.Hom X Y) ↑X ↑Y","decl":"@[to_additive]\ninstance instMulHomClass (X Y : Semigrp) : MulHomClass (X ⟶ Y) X Y :=\n  inferInstanceAs <| MulHomClass (X →ₙ* Y) X Y\n\n"}
{"name":"AddSemigrp.instAddHomClass","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"X Y : AddSemigrp\n⊢ AddHomClass (Quiver.Hom X Y) ↑X ↑Y","decl":"@[to_additive]\ninstance instMulHomClass (X Y : Semigrp) : MulHomClass (X ⟶ Y) X Y :=\n  inferInstanceAs <| MulHomClass (X →ₙ* Y) X Y\n\n"}
{"name":"Semigrp.coe_of","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"R : Type u\ninst✝ : Semigroup R\n⊢ Eq (↑(Semigrp.of R)) R","decl":"@[to_additive (attr := simp)]\ntheorem coe_of (R : Type u) [Semigroup R] : (Semigrp.of R : Type u) = R :=\n  rfl\n\n"}
{"name":"AddSemigrp.coe_of","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"R : Type u\ninst✝ : AddSemigroup R\n⊢ Eq (↑(AddSemigrp.of R)) R","decl":"@[to_additive (attr := simp)]\ntheorem coe_of (R : Type u) [Semigroup R] : (Semigrp.of R : Type u) = R :=\n  rfl\n\n"}
{"name":"AddSemigrp.addEquiv_coe_eq","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"X Y : Type u_1\ninst✝¹ : AddSemigroup X\ninst✝ : AddSemigroup Y\ne : AddEquiv X Y\n⊢ Eq ⇑↑e ⇑e","decl":"@[to_additive (attr := simp)]\nlemma mulEquiv_coe_eq {X Y : Type _} [Semigroup X] [Semigroup Y] (e : X ≃* Y) :\n    (@DFunLike.coe (Semigrp.of X ⟶ Semigrp.of Y) _ (fun _ => (forget Semigrp).obj _)\n      HasForget.instFunLike (e : X →ₙ* Y) : X → Y) = ↑e :=\n  rfl\n\n"}
{"name":"Semigrp.mulEquiv_coe_eq","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"X Y : Type u_1\ninst✝¹ : Semigroup X\ninst✝ : Semigroup Y\ne : MulEquiv X Y\n⊢ Eq ⇑↑e ⇑e","decl":"@[to_additive (attr := simp)]\nlemma mulEquiv_coe_eq {X Y : Type _} [Semigroup X] [Semigroup Y] (e : X ≃* Y) :\n    (@DFunLike.coe (Semigrp.of X ⟶ Semigrp.of Y) _ (fun _ => (forget Semigrp).obj _)\n      HasForget.instFunLike (e : X →ₙ* Y) : X → Y) = ↑e :=\n  rfl\n\n"}
{"name":"Semigrp.ofHom_apply","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"X Y : Type u\ninst✝¹ : Semigroup X\ninst✝ : Semigroup Y\nf : MulHom X Y\nx : X\n⊢ Eq ((Semigrp.ofHom f) x) (f x)","decl":"@[to_additive]\ntheorem ofHom_apply {X Y : Type u} [Semigroup X] [Semigroup Y] (f : X →ₙ* Y) (x : X) :\n    ofHom f x = f x :=\n  rfl\n\n"}
{"name":"AddSemigrp.ofHom_apply","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"X Y : Type u\ninst✝¹ : AddSemigroup X\ninst✝ : AddSemigroup Y\nf : AddHom X Y\nx : X\n⊢ Eq ((AddSemigrp.ofHom f) x) (f x)","decl":"@[to_additive]\ntheorem ofHom_apply {X Y : Type u} [Semigroup X] [Semigroup Y] (f : X →ₙ* Y) (x : X) :\n    ofHom f x = f x :=\n  rfl\n\n"}
{"name":"AddEquiv.toAddMagmaCatIso_inv_apply","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"X Y : Type u\ninst✝¹ : Add X\ninst✝ : Add Y\ne : AddEquiv X Y\na✝ : Y\n⊢ Eq (e.toAddMagmaCatIso.inv a✝) (e.symm.toFun a✝)","decl":"/-- Build an isomorphism in the category `MagmaCat` from a `MulEquiv` between `Mul`s. -/\n@[to_additive (attr := simps)\n      \"Build an isomorphism in the category `AddMagmaCat` from an `AddEquiv` between `Add`s.\"]\ndef MulEquiv.toMagmaCatIso (e : X ≃* Y) : MagmaCat.of X ≅ MagmaCat.of Y where\n  hom := e.toMulHom\n  inv := e.symm.toMulHom\n  hom_inv_id := by\n    ext\n    simp_rw [CategoryTheory.comp_apply, toMulHom_eq_coe, MagmaCat.mulEquiv_coe_eq, symm_apply_apply,\n      CategoryTheory.id_apply]\n\n"}
{"name":"MulEquiv.toMagmaCatIso_inv_apply","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"X Y : Type u\ninst✝¹ : Mul X\ninst✝ : Mul Y\ne : MulEquiv X Y\na✝ : Y\n⊢ Eq (e.toMagmaCatIso.inv a✝) (e.symm.toFun a✝)","decl":"/-- Build an isomorphism in the category `MagmaCat` from a `MulEquiv` between `Mul`s. -/\n@[to_additive (attr := simps)\n      \"Build an isomorphism in the category `AddMagmaCat` from an `AddEquiv` between `Add`s.\"]\ndef MulEquiv.toMagmaCatIso (e : X ≃* Y) : MagmaCat.of X ≅ MagmaCat.of Y where\n  hom := e.toMulHom\n  inv := e.symm.toMulHom\n  hom_inv_id := by\n    ext\n    simp_rw [CategoryTheory.comp_apply, toMulHom_eq_coe, MagmaCat.mulEquiv_coe_eq, symm_apply_apply,\n      CategoryTheory.id_apply]\n\n"}
{"name":"MulEquiv.toMagmaCatIso_hom_apply","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"X Y : Type u\ninst✝¹ : Mul X\ninst✝ : Mul Y\ne : MulEquiv X Y\na✝ : X\n⊢ Eq (e.toMagmaCatIso.hom a✝) (e.toFun a✝)","decl":"/-- Build an isomorphism in the category `MagmaCat` from a `MulEquiv` between `Mul`s. -/\n@[to_additive (attr := simps)\n      \"Build an isomorphism in the category `AddMagmaCat` from an `AddEquiv` between `Add`s.\"]\ndef MulEquiv.toMagmaCatIso (e : X ≃* Y) : MagmaCat.of X ≅ MagmaCat.of Y where\n  hom := e.toMulHom\n  inv := e.symm.toMulHom\n  hom_inv_id := by\n    ext\n    simp_rw [CategoryTheory.comp_apply, toMulHom_eq_coe, MagmaCat.mulEquiv_coe_eq, symm_apply_apply,\n      CategoryTheory.id_apply]\n\n"}
{"name":"AddEquiv.toAddMagmaCatIso_hom_apply","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"X Y : Type u\ninst✝¹ : Add X\ninst✝ : Add Y\ne : AddEquiv X Y\na✝ : X\n⊢ Eq (e.toAddMagmaCatIso.hom a✝) (e.toFun a✝)","decl":"/-- Build an isomorphism in the category `MagmaCat` from a `MulEquiv` between `Mul`s. -/\n@[to_additive (attr := simps)\n      \"Build an isomorphism in the category `AddMagmaCat` from an `AddEquiv` between `Add`s.\"]\ndef MulEquiv.toMagmaCatIso (e : X ≃* Y) : MagmaCat.of X ≅ MagmaCat.of Y where\n  hom := e.toMulHom\n  inv := e.symm.toMulHom\n  hom_inv_id := by\n    ext\n    simp_rw [CategoryTheory.comp_apply, toMulHom_eq_coe, MagmaCat.mulEquiv_coe_eq, symm_apply_apply,\n      CategoryTheory.id_apply]\n\n"}
{"name":"AddEquiv.toAddSemigrpIso_inv_apply","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"X Y : Type u\ninst✝¹ : AddSemigroup X\ninst✝ : AddSemigroup Y\ne : AddEquiv X Y\na✝ : Y\n⊢ Eq (e.toAddSemigrpIso.inv a✝) (e.symm.toFun a✝)","decl":"/-- Build an isomorphism in the category `Semigroup` from a `MulEquiv` between `Semigroup`s. -/\n@[to_additive (attr := simps)\n  \"Build an isomorphism in the category\n  `AddSemigroup` from an `AddEquiv` between `AddSemigroup`s.\"]\ndef MulEquiv.toSemigrpIso (e : X ≃* Y) : Semigrp.of X ≅ Semigrp.of Y where\n  hom := e.toMulHom\n  inv := e.symm.toMulHom\n\n"}
{"name":"AddEquiv.toAddSemigrpIso_hom_apply","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"X Y : Type u\ninst✝¹ : AddSemigroup X\ninst✝ : AddSemigroup Y\ne : AddEquiv X Y\na✝ : X\n⊢ Eq (e.toAddSemigrpIso.hom a✝) (e.toFun a✝)","decl":"/-- Build an isomorphism in the category `Semigroup` from a `MulEquiv` between `Semigroup`s. -/\n@[to_additive (attr := simps)\n  \"Build an isomorphism in the category\n  `AddSemigroup` from an `AddEquiv` between `AddSemigroup`s.\"]\ndef MulEquiv.toSemigrpIso (e : X ≃* Y) : Semigrp.of X ≅ Semigrp.of Y where\n  hom := e.toMulHom\n  inv := e.symm.toMulHom\n\n"}
{"name":"MulEquiv.toSemigrpIso_inv_apply","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"X Y : Type u\ninst✝¹ : Semigroup X\ninst✝ : Semigroup Y\ne : MulEquiv X Y\na✝ : Y\n⊢ Eq (e.toSemigrpIso.inv a✝) (e.symm.toFun a✝)","decl":"/-- Build an isomorphism in the category `Semigroup` from a `MulEquiv` between `Semigroup`s. -/\n@[to_additive (attr := simps)\n  \"Build an isomorphism in the category\n  `AddSemigroup` from an `AddEquiv` between `AddSemigroup`s.\"]\ndef MulEquiv.toSemigrpIso (e : X ≃* Y) : Semigrp.of X ≅ Semigrp.of Y where\n  hom := e.toMulHom\n  inv := e.symm.toMulHom\n\n"}
{"name":"MulEquiv.toSemigrpIso_hom_apply","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"X Y : Type u\ninst✝¹ : Semigroup X\ninst✝ : Semigroup Y\ne : MulEquiv X Y\na✝ : X\n⊢ Eq (e.toSemigrpIso.hom a✝) (e.toFun a✝)","decl":"/-- Build an isomorphism in the category `Semigroup` from a `MulEquiv` between `Semigroup`s. -/\n@[to_additive (attr := simps)\n  \"Build an isomorphism in the category\n  `AddSemigroup` from an `AddEquiv` between `AddSemigroup`s.\"]\ndef MulEquiv.toSemigrpIso (e : X ≃* Y) : Semigrp.of X ≅ Semigrp.of Y where\n  hom := e.toMulHom\n  inv := e.symm.toMulHom\n\n"}
{"name":"MagmaCat.forgetReflectsIsos","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"⊢ (CategoryTheory.forget MagmaCat).ReflectsIsomorphisms","decl":"@[to_additive]\ninstance MagmaCat.forgetReflectsIsos : (forget MagmaCat.{u}).ReflectsIsomorphisms where\n  reflects {X Y} f _ := by\n    let i := asIso ((forget MagmaCat).map f)\n    let e : X ≃* Y := { f, i.toEquiv with }\n    exact e.toMagmaCatIso.isIso_hom\n\n"}
{"name":"AddMagmaCat.forgetReflectsIsos","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"⊢ (CategoryTheory.forget AddMagmaCat).ReflectsIsomorphisms","decl":"@[to_additive]\ninstance MagmaCat.forgetReflectsIsos : (forget MagmaCat.{u}).ReflectsIsomorphisms where\n  reflects {X Y} f _ := by\n    let i := asIso ((forget MagmaCat).map f)\n    let e : X ≃* Y := { f, i.toEquiv with }\n    exact e.toMagmaCatIso.isIso_hom\n\n"}
{"name":"Semigrp.forgetReflectsIsos","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"⊢ (CategoryTheory.forget Semigrp).ReflectsIsomorphisms","decl":"@[to_additive]\ninstance Semigrp.forgetReflectsIsos : (forget Semigrp.{u}).ReflectsIsomorphisms where\n  reflects {X Y} f _ := by\n    let i := asIso ((forget Semigrp).map f)\n    let e : X ≃* Y := { f, i.toEquiv with }\n    exact e.toSemigrpIso.isIso_hom\n\n-- Porting note: this was added in order to ensure that `forget₂ CommMonCat MonCat`\n-- automatically reflects isomorphisms\n-- we could have used `CategoryTheory.HasForget.ReflectsIso` alternatively\n"}
{"name":"AddSemigrp.forgetReflectsIsos","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"⊢ (CategoryTheory.forget AddSemigrp).ReflectsIsomorphisms","decl":"@[to_additive]\ninstance Semigrp.forgetReflectsIsos : (forget Semigrp.{u}).ReflectsIsomorphisms where\n  reflects {X Y} f _ := by\n    let i := asIso ((forget Semigrp).map f)\n    let e : X ≃* Y := { f, i.toEquiv with }\n    exact e.toSemigrpIso.isIso_hom\n\n-- Porting note: this was added in order to ensure that `forget₂ CommMonCat MonCat`\n-- automatically reflects isomorphisms\n-- we could have used `CategoryTheory.HasForget.ReflectsIso` alternatively\n"}
{"name":"AddSemigrp.forget₂_full","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"⊢ (CategoryTheory.forget₂ AddSemigrp AddMagmaCat).Full","decl":"@[to_additive]\ninstance Semigrp.forget₂_full : (forget₂ Semigrp MagmaCat).Full where\n  map_surjective f := ⟨f, rfl⟩\n\n"}
{"name":"Semigrp.forget₂_full","module":"Mathlib.Algebra.Category.Semigrp.Basic","initialProofState":"⊢ (CategoryTheory.forget₂ Semigrp MagmaCat).Full","decl":"@[to_additive]\ninstance Semigrp.forget₂_full : (forget₂ Semigrp MagmaCat).Full where\n  map_surjective f := ⟨f, rfl⟩\n\n"}
