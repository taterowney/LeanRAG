{"name":"CategoryTheory.MorphismProperty.LeftFraction₂.hs","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions.Fractions","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nself : W.LeftFraction₂ X Y\n⊢ W self.s","decl":"/-- This structure contains the data of two left fractions for\n`W : MorphismProperty C` that have the same \"denominator\". -/\nstructure LeftFraction₂ (X Y : C) where\n  /-- the auxiliary object of left fractions -/\n  {Y' : C}\n  /-- the numerator of the first left fraction -/\n  f : X ⟶ Y'\n  /-- the numerator of the second left fraction -/\n  f' : X ⟶ Y'\n  /-- the denominator of the left fractions -/\n  s : Y ⟶ Y'\n  /-- the condition that the denominator belongs to the given morphism property -/\n  hs : W s\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction₂.mk.inj","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions.Fractions","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y Y'✝ : C\nf✝ f'✝ : Quiver.Hom X Y'✝\ns✝ : Quiver.Hom Y Y'✝\nhs✝ : W s✝\nY' : C\nf f' : Quiver.Hom X Y'\ns : Quiver.Hom Y Y'\nhs : W s\nx✝ : Eq (CategoryTheory.MorphismProperty.LeftFraction₂.mk f✝ f'✝ s✝ hs✝) (CategoryTheory.MorphismProperty.LeftFraction₂.mk f f' s hs)\n⊢ And (Eq Y'✝ Y') (And (HEq f✝ f) (And (HEq f'✝ f') (HEq s✝ s)))","decl":"/-- This structure contains the data of two left fractions for\n`W : MorphismProperty C` that have the same \"denominator\". -/\nstructure LeftFraction₂ (X Y : C) where\n  /-- the auxiliary object of left fractions -/\n  {Y' : C}\n  /-- the numerator of the first left fraction -/\n  f : X ⟶ Y'\n  /-- the numerator of the second left fraction -/\n  f' : X ⟶ Y'\n  /-- the denominator of the left fractions -/\n  s : Y ⟶ Y'\n  /-- the condition that the denominator belongs to the given morphism property -/\n  hs : W s\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction₂.mk.injEq","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions.Fractions","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y Y'✝ : C\nf✝ f'✝ : Quiver.Hom X Y'✝\ns✝ : Quiver.Hom Y Y'✝\nhs✝ : W s✝\nY' : C\nf f' : Quiver.Hom X Y'\ns : Quiver.Hom Y Y'\nhs : W s\n⊢ Eq (Eq (CategoryTheory.MorphismProperty.LeftFraction₂.mk f✝ f'✝ s✝ hs✝) (CategoryTheory.MorphismProperty.LeftFraction₂.mk f f' s hs)) (And (Eq Y'✝ Y') (And (HEq f✝ f) (And (HEq f'✝ f') (HEq s✝ s))))","decl":"/-- This structure contains the data of two left fractions for\n`W : MorphismProperty C` that have the same \"denominator\". -/\nstructure LeftFraction₂ (X Y : C) where\n  /-- the auxiliary object of left fractions -/\n  {Y' : C}\n  /-- the numerator of the first left fraction -/\n  f : X ⟶ Y'\n  /-- the numerator of the second left fraction -/\n  f' : X ⟶ Y'\n  /-- the denominator of the left fractions -/\n  s : Y ⟶ Y'\n  /-- the condition that the denominator belongs to the given morphism property -/\n  hs : W s\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction₂.mk.sizeOf_spec","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions.Fractions","initialProofState":"C : Type u_1\ninst✝² : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\ninst✝¹ : SizeOf C\ninst✝ : ⦃X Y : C⦄ → (x : Quiver.Hom X Y) → SizeOf (W x)\nY' : C\nf f' : Quiver.Hom X Y'\ns : Quiver.Hom Y Y'\nhs : W s\n⊢ Eq (SizeOf.sizeOf (CategoryTheory.MorphismProperty.LeftFraction₂.mk f f' s hs)) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf Y')) (SizeOf.sizeOf f)) (SizeOf.sizeOf f')) (SizeOf.sizeOf s)) (SizeOf.sizeOf hs))","decl":"/-- This structure contains the data of two left fractions for\n`W : MorphismProperty C` that have the same \"denominator\". -/\nstructure LeftFraction₂ (X Y : C) where\n  /-- the auxiliary object of left fractions -/\n  {Y' : C}\n  /-- the numerator of the first left fraction -/\n  f : X ⟶ Y'\n  /-- the numerator of the second left fraction -/\n  f' : X ⟶ Y'\n  /-- the denominator of the left fractions -/\n  s : Y ⟶ Y'\n  /-- the condition that the denominator belongs to the given morphism property -/\n  hs : W s\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction₃.mk.sizeOf_spec","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions.Fractions","initialProofState":"C : Type u_1\ninst✝² : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\ninst✝¹ : SizeOf C\ninst✝ : ⦃X Y : C⦄ → (x : Quiver.Hom X Y) → SizeOf (W x)\nY' : C\nf f' f'' : Quiver.Hom X Y'\ns : Quiver.Hom Y Y'\nhs : W s\n⊢ Eq (SizeOf.sizeOf (CategoryTheory.MorphismProperty.LeftFraction₃.mk f f' f'' s hs)) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf Y')) (SizeOf.sizeOf f)) (SizeOf.sizeOf f')) (SizeOf.sizeOf f'')) (SizeOf.sizeOf s)) (SizeOf.sizeOf hs))","decl":"/-- This structure contains the data of three left fractions for\n`W : MorphismProperty C` that have the same \"denominator\". -/\nstructure LeftFraction₃ (X Y : C) where\n  /-- the auxiliary object of left fractions -/\n  {Y' : C}\n  /-- the numerator of the first left fraction -/\n  f : X ⟶ Y'\n  /-- the numerator of the second left fraction -/\n  f' : X ⟶ Y'\n  /-- the numerator of the third left fraction -/\n  f'' : X ⟶ Y'\n  /-- the denominator of the left fractions -/\n  s : Y ⟶ Y'\n  /-- the condition that the denominator belongs to the given morphism property -/\n  hs : W s\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction₃.mk.inj","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions.Fractions","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y Y'✝ : C\nf✝ f'✝ f''✝ : Quiver.Hom X Y'✝\ns✝ : Quiver.Hom Y Y'✝\nhs✝ : W s✝\nY' : C\nf f' f'' : Quiver.Hom X Y'\ns : Quiver.Hom Y Y'\nhs : W s\nx✝ : Eq (CategoryTheory.MorphismProperty.LeftFraction₃.mk f✝ f'✝ f''✝ s✝ hs✝) (CategoryTheory.MorphismProperty.LeftFraction₃.mk f f' f'' s hs)\n⊢ And (Eq Y'✝ Y') (And (HEq f✝ f) (And (HEq f'✝ f') (And (HEq f''✝ f'') (HEq s✝ s))))","decl":"/-- This structure contains the data of three left fractions for\n`W : MorphismProperty C` that have the same \"denominator\". -/\nstructure LeftFraction₃ (X Y : C) where\n  /-- the auxiliary object of left fractions -/\n  {Y' : C}\n  /-- the numerator of the first left fraction -/\n  f : X ⟶ Y'\n  /-- the numerator of the second left fraction -/\n  f' : X ⟶ Y'\n  /-- the numerator of the third left fraction -/\n  f'' : X ⟶ Y'\n  /-- the denominator of the left fractions -/\n  s : Y ⟶ Y'\n  /-- the condition that the denominator belongs to the given morphism property -/\n  hs : W s\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction₃.mk.injEq","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions.Fractions","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y Y'✝ : C\nf✝ f'✝ f''✝ : Quiver.Hom X Y'✝\ns✝ : Quiver.Hom Y Y'✝\nhs✝ : W s✝\nY' : C\nf f' f'' : Quiver.Hom X Y'\ns : Quiver.Hom Y Y'\nhs : W s\n⊢ Eq (Eq (CategoryTheory.MorphismProperty.LeftFraction₃.mk f✝ f'✝ f''✝ s✝ hs✝) (CategoryTheory.MorphismProperty.LeftFraction₃.mk f f' f'' s hs)) (And (Eq Y'✝ Y') (And (HEq f✝ f) (And (HEq f'✝ f') (And (HEq f''✝ f'') (HEq s✝ s)))))","decl":"/-- This structure contains the data of three left fractions for\n`W : MorphismProperty C` that have the same \"denominator\". -/\nstructure LeftFraction₃ (X Y : C) where\n  /-- the auxiliary object of left fractions -/\n  {Y' : C}\n  /-- the numerator of the first left fraction -/\n  f : X ⟶ Y'\n  /-- the numerator of the second left fraction -/\n  f' : X ⟶ Y'\n  /-- the numerator of the third left fraction -/\n  f'' : X ⟶ Y'\n  /-- the denominator of the left fractions -/\n  s : Y ⟶ Y'\n  /-- the condition that the denominator belongs to the given morphism property -/\n  hs : W s\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction₃.hs","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions.Fractions","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nself : W.LeftFraction₃ X Y\n⊢ W self.s","decl":"/-- This structure contains the data of three left fractions for\n`W : MorphismProperty C` that have the same \"denominator\". -/\nstructure LeftFraction₃ (X Y : C) where\n  /-- the auxiliary object of left fractions -/\n  {Y' : C}\n  /-- the numerator of the first left fraction -/\n  f : X ⟶ Y'\n  /-- the numerator of the second left fraction -/\n  f' : X ⟶ Y'\n  /-- the numerator of the third left fraction -/\n  f'' : X ⟶ Y'\n  /-- the denominator of the left fractions -/\n  s : Y ⟶ Y'\n  /-- the condition that the denominator belongs to the given morphism property -/\n  hs : W s\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction₂.mk.sizeOf_spec","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions.Fractions","initialProofState":"C : Type u_1\ninst✝² : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\ninst✝¹ : SizeOf C\ninst✝ : ⦃X Y : C⦄ → (x : Quiver.Hom X Y) → SizeOf (W x)\nX' : C\ns : Quiver.Hom X' X\nhs : W s\nf f' : Quiver.Hom X' Y\n⊢ Eq (SizeOf.sizeOf (CategoryTheory.MorphismProperty.RightFraction₂.mk s hs f f')) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf X')) (SizeOf.sizeOf s)) (SizeOf.sizeOf hs)) (SizeOf.sizeOf f)) (SizeOf.sizeOf f'))","decl":"/-- This structure contains the data of two right fractions for\n`W : MorphismProperty C` that have the same \"denominator\". -/\nstructure RightFraction₂ (X Y : C) where\n  /-- the auxiliary object of right fractions -/\n  {X' : C}\n  /-- the denominator of the right fractions -/\n  s : X' ⟶ X\n  /-- the condition that the denominator belongs to the given morphism property -/\n  hs : W s\n  /-- the numerator of the first right fraction -/\n  f : X' ⟶ Y\n  /-- the numerator of the second right fraction -/\n  f' : X' ⟶ Y\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction₂.hs","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions.Fractions","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nself : W.RightFraction₂ X Y\n⊢ W self.s","decl":"/-- This structure contains the data of two right fractions for\n`W : MorphismProperty C` that have the same \"denominator\". -/\nstructure RightFraction₂ (X Y : C) where\n  /-- the auxiliary object of right fractions -/\n  {X' : C}\n  /-- the denominator of the right fractions -/\n  s : X' ⟶ X\n  /-- the condition that the denominator belongs to the given morphism property -/\n  hs : W s\n  /-- the numerator of the first right fraction -/\n  f : X' ⟶ Y\n  /-- the numerator of the second right fraction -/\n  f' : X' ⟶ Y\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction₂.mk.injEq","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions.Fractions","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y X'✝ : C\ns✝ : Quiver.Hom X'✝ X\nhs✝ : W s✝\nf✝ f'✝ : Quiver.Hom X'✝ Y\nX' : C\ns : Quiver.Hom X' X\nhs : W s\nf f' : Quiver.Hom X' Y\n⊢ Eq (Eq (CategoryTheory.MorphismProperty.RightFraction₂.mk s✝ hs✝ f✝ f'✝) (CategoryTheory.MorphismProperty.RightFraction₂.mk s hs f f')) (And (Eq X'✝ X') (And (HEq s✝ s) (And (HEq f✝ f) (HEq f'✝ f'))))","decl":"/-- This structure contains the data of two right fractions for\n`W : MorphismProperty C` that have the same \"denominator\". -/\nstructure RightFraction₂ (X Y : C) where\n  /-- the auxiliary object of right fractions -/\n  {X' : C}\n  /-- the denominator of the right fractions -/\n  s : X' ⟶ X\n  /-- the condition that the denominator belongs to the given morphism property -/\n  hs : W s\n  /-- the numerator of the first right fraction -/\n  f : X' ⟶ Y\n  /-- the numerator of the second right fraction -/\n  f' : X' ⟶ Y\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction₂.mk.inj","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions.Fractions","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y X'✝ : C\ns✝ : Quiver.Hom X'✝ X\nhs✝ : W s✝\nf✝ f'✝ : Quiver.Hom X'✝ Y\nX' : C\ns : Quiver.Hom X' X\nhs : W s\nf f' : Quiver.Hom X' Y\nx✝ : Eq (CategoryTheory.MorphismProperty.RightFraction₂.mk s✝ hs✝ f✝ f'✝) (CategoryTheory.MorphismProperty.RightFraction₂.mk s hs f f')\n⊢ And (Eq X'✝ X') (And (HEq s✝ s) (And (HEq f✝ f) (HEq f'✝ f')))","decl":"/-- This structure contains the data of two right fractions for\n`W : MorphismProperty C` that have the same \"denominator\". -/\nstructure RightFraction₂ (X Y : C) where\n  /-- the auxiliary object of right fractions -/\n  {X' : C}\n  /-- the denominator of the right fractions -/\n  s : X' ⟶ X\n  /-- the condition that the denominator belongs to the given morphism property -/\n  hs : W s\n  /-- the numerator of the first right fraction -/\n  f : X' ⟶ Y\n  /-- the numerator of the second right fraction -/\n  f' : X' ⟶ Y\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction₂Rel.fst","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions.Fractions","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nz₁ z₂ : W.LeftFraction₂ X Y\nh : CategoryTheory.MorphismProperty.LeftFraction₂Rel z₁ z₂\n⊢ CategoryTheory.MorphismProperty.LeftFractionRel z₁.fst z₂.fst","decl":"lemma fst (h : LeftFraction₂Rel z₁ z₂) : LeftFractionRel z₁.fst z₂.fst := by\n  obtain ⟨Z, t₁, t₂, hst, hft, _, ht⟩ := h\n  exact ⟨Z, t₁, t₂, hst, hft, ht⟩\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction₂Rel.snd","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions.Fractions","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nz₁ z₂ : W.LeftFraction₂ X Y\nh : CategoryTheory.MorphismProperty.LeftFraction₂Rel z₁ z₂\n⊢ CategoryTheory.MorphismProperty.LeftFractionRel z₁.snd z₂.snd","decl":"lemma snd (h : LeftFraction₂Rel z₁ z₂) : LeftFractionRel z₁.snd z₂.snd := by\n  obtain ⟨Z, t₁, t₂, hst, _, hft', ht⟩ := h\n  exact ⟨Z, t₁, t₂, hst, hft', ht⟩\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction₂.map_eq_iff","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions.Fractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝³ : CategoryTheory.Category.{u_3, u_1} C\ninst✝² : CategoryTheory.Category.{u_4, u_2} D\nL : CategoryTheory.Functor C D\nW : CategoryTheory.MorphismProperty C\ninst✝¹ : L.IsLocalization W\ninst✝ : W.HasLeftCalculusOfFractions\nX Y : C\nφ ψ : W.LeftFraction₂ X Y\n⊢ Iff (And (Eq (φ.fst.map L ⋯) (ψ.fst.map L ⋯)) (Eq (φ.snd.map L ⋯) (ψ.snd.map L ⋯))) (CategoryTheory.MorphismProperty.LeftFraction₂Rel φ ψ)","decl":"lemma map_eq_iff {X Y : C} (φ ψ : W.LeftFraction₂ X Y) :\n    (φ.fst.map L (Localization.inverts _ _) = ψ.fst.map L (Localization.inverts _ _) ∧\n    φ.snd.map L (Localization.inverts _ _) = ψ.snd.map L (Localization.inverts _ _)) ↔\n      LeftFraction₂Rel φ ψ := by\n  simp only [LeftFraction.map_eq_iff L W]\n  constructor\n  · intro ⟨h, h'⟩\n    obtain ⟨Z, t₁, t₂, hst, hft, ht⟩ := h\n    obtain ⟨Z', t₁', t₂', hst', hft', ht'⟩ := h'\n    dsimp at t₁ t₂ t₁' t₂' hst hft hst' hft' ht ht'\n    have ⟨α, hα⟩ := (RightFraction.mk _ ht (φ.s ≫ t₁')).exists_leftFraction\n    simp only [Category.assoc] at hα\n    obtain ⟨Z'', u, hu, fac⟩ := HasLeftCalculusOfFractions.ext _ _ _ φ.hs hα\n    have hα' : ψ.s ≫ t₂ ≫ α.f ≫ u = ψ.s ≫ t₂' ≫ α.s ≫ u := by\n      rw [← reassoc_of% hst, ← reassoc_of% hα, ← reassoc_of% hst']\n    obtain ⟨Z''', u', hu', fac'⟩ := HasLeftCalculusOfFractions.ext _ _ _ ψ.hs hα'\n    simp only [Category.assoc] at fac fac'\n    refine ⟨Z''', t₁' ≫ α.s ≫ u ≫ u', t₂' ≫ α.s ≫ u ≫ u', ?_, ?_, ?_, ?_⟩\n    · rw [reassoc_of% hst']\n    · rw [reassoc_of% fac, reassoc_of% hft, fac']\n    · rw [reassoc_of% hft']\n    · rw [← Category.assoc]\n      exact W.comp_mem _ _ ht' (W.comp_mem _ _ α.hs (W.comp_mem _ _ hu hu'))\n  · intro h\n    exact ⟨h.fst, h.snd⟩\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction₂.exists_leftFraction₂","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions.Fractions","initialProofState":"C : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nφ : W.RightFraction₂ X Y\ninst✝ : W.HasLeftCalculusOfFractions\n⊢ Exists fun ψ => And (Eq (CategoryTheory.CategoryStruct.comp φ.f ψ.s) (CategoryTheory.CategoryStruct.comp φ.s ψ.f)) (Eq (CategoryTheory.CategoryStruct.comp φ.f' ψ.s) (CategoryTheory.CategoryStruct.comp φ.s ψ.f'))","decl":"lemma exists_leftFraction₂ [W.HasLeftCalculusOfFractions] :\n    ∃ (ψ : W.LeftFraction₂ X Y), φ.f ≫ ψ.s = φ.s ≫ ψ.f ∧\n      φ.f' ≫ ψ.s = φ.s ≫ ψ.f' := by\n  obtain ⟨ψ₁, hψ₁⟩ := φ.fst.exists_leftFraction\n  obtain ⟨ψ₂, hψ₂⟩ := φ.snd.exists_leftFraction\n  obtain ⟨α, hα⟩ := (RightFraction.mk _ ψ₁.hs ψ₂.s).exists_leftFraction\n  dsimp at hψ₁ hψ₂ hα\n  refine ⟨LeftFraction₂.mk (ψ₁.f ≫ α.f) (ψ₂.f ≫ α.s) (ψ₂.s ≫ α.s)\n      (W.comp_mem _ _ ψ₂.hs α.hs), ?_, ?_⟩\n  · dsimp\n    rw [hα, reassoc_of% hψ₁]\n  · rw [reassoc_of% hψ₂]\n\n"}
{"name":"CategoryTheory.Localization.exists_leftFraction₂","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions.Fractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝³ : CategoryTheory.Category.{u_4, u_1} C\ninst✝² : CategoryTheory.Category.{u_3, u_2} D\nL : CategoryTheory.Functor C D\nW : CategoryTheory.MorphismProperty C\ninst✝¹ : L.IsLocalization W\ninst✝ : W.HasLeftCalculusOfFractions\nX Y : C\nf f' : Quiver.Hom (L.obj X) (L.obj Y)\n⊢ Exists fun φ => And (Eq f (φ.fst.map L ⋯)) (Eq f' (φ.snd.map L ⋯))","decl":"lemma exists_leftFraction₂ {X Y : C} (f f' : L.obj X ⟶ L.obj Y) :\n    ∃ (φ : W.LeftFraction₂ X Y), f = φ.fst.map L (inverts L W) ∧\n      f' = φ.snd.map L (inverts L W) := by\n  have ⟨φ, hφ⟩ := exists_leftFraction L W f\n  have ⟨φ', hφ'⟩ := exists_leftFraction L W f'\n  obtain ⟨α, hα⟩ := (RightFraction.mk _ φ.hs φ'.s).exists_leftFraction\n  let ψ : W.LeftFraction₂ X Y :=\n    { Y' := α.Y'\n      f := φ.f ≫ α.f\n      f' := φ'.f ≫ α.s\n      s := φ'.s ≫ α.s\n      hs := W.comp_mem _ _ φ'.hs α.hs }\n  have := inverts L W _ φ'.hs\n  have := inverts L W _ α.hs\n  have : IsIso (L.map (φ'.s ≫ α.s)) := by\n    rw [L.map_comp]\n    infer_instance\n  refine ⟨ψ, ?_, ?_⟩\n  · rw [← cancel_mono (L.map (φ'.s ≫ α.s)), LeftFraction.map_comp_map_s,\n      hα, L.map_comp, hφ, LeftFraction.map_comp_map_s_assoc,\n      L.map_comp]\n  · rw [← cancel_mono (L.map (φ'.s ≫ α.s)), hφ']\n    nth_rw 1 [L.map_comp]\n    rw [LeftFraction.map_comp_map_s_assoc, LeftFraction.map_comp_map_s,\n      L.map_comp]\n\n"}
{"name":"CategoryTheory.Localization.exists_leftFraction₃","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions.Fractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝³ : CategoryTheory.Category.{u_4, u_1} C\ninst✝² : CategoryTheory.Category.{u_3, u_2} D\nL : CategoryTheory.Functor C D\nW : CategoryTheory.MorphismProperty C\ninst✝¹ : L.IsLocalization W\ninst✝ : W.HasLeftCalculusOfFractions\nX Y : C\nf f' f'' : Quiver.Hom (L.obj X) (L.obj Y)\n⊢ Exists fun φ => And (Eq f (φ.fst.map L ⋯)) (And (Eq f' (φ.snd.map L ⋯)) (Eq f'' (φ.thd.map L ⋯)))","decl":"lemma exists_leftFraction₃ {X Y : C} (f f' f'' : L.obj X ⟶ L.obj Y) :\n    ∃ (φ : W.LeftFraction₃ X Y), f = φ.fst.map L (inverts L W) ∧\n      f' = φ.snd.map L (inverts L W) ∧\n      f'' = φ.thd.map L (inverts L W) := by\n  obtain ⟨α, hα, hα'⟩ := exists_leftFraction₂ L W f f'\n  have ⟨β, hβ⟩ := exists_leftFraction L W f''\n  obtain ⟨γ, hγ⟩ := (RightFraction.mk _ α.hs β.s).exists_leftFraction\n  dsimp at hγ\n  let ψ : W.LeftFraction₃ X Y :=\n    { Y' := γ.Y'\n      f := α.f ≫ γ.f\n      f' := α.f' ≫ γ.f\n      f'' := β.f ≫ γ.s\n      s := β.s ≫ γ.s\n      hs := W.comp_mem _ _ β.hs γ.hs }\n  have := inverts L W _ β.hs\n  have := inverts L W _ γ.hs\n  have : IsIso (L.map (β.s ≫ γ.s)) := by\n    rw [L.map_comp]\n    infer_instance\n  refine ⟨ψ, ?_, ?_, ?_⟩\n  · rw [← cancel_mono (L.map (β.s ≫ γ.s)), LeftFraction.map_comp_map_s, hα, hγ,\n      L.map_comp, LeftFraction.map_comp_map_s_assoc, L.map_comp]\n  · rw [← cancel_mono (L.map (β.s ≫ γ.s)), LeftFraction.map_comp_map_s, hα', hγ,\n      L.map_comp, LeftFraction.map_comp_map_s_assoc, L.map_comp]\n  · rw [← cancel_mono (L.map (β.s ≫ γ.s)), hβ]\n    nth_rw 1 [L.map_comp]\n    rw [LeftFraction.map_comp_map_s_assoc, LeftFraction.map_comp_map_s, L.map_comp]\n\n"}
