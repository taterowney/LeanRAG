{"name":"logDeriv_apply","module":"Mathlib.Analysis.Calculus.LogDeriv","initialProofState":"𝕜 : Type u_1\n𝕜' : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nf : 𝕜 → 𝕜'\nx : 𝕜\n⊢ Eq (logDeriv f x) (HDiv.hDiv (deriv f x) (f x))","decl":"theorem logDeriv_apply (f : 𝕜 → 𝕜') (x : 𝕜) : logDeriv f x = deriv f x / f x := rfl\n\n"}
{"name":"logDeriv_eq_zero_of_not_differentiableAt","module":"Mathlib.Analysis.Calculus.LogDeriv","initialProofState":"𝕜 : Type u_1\n𝕜' : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nf : 𝕜 → 𝕜'\nx : 𝕜\nh : Not (DifferentiableAt 𝕜 f x)\n⊢ Eq (logDeriv f x) 0","decl":"lemma logDeriv_eq_zero_of_not_differentiableAt (f : 𝕜 → 𝕜') (x : 𝕜) (h : ¬DifferentiableAt 𝕜 f x) :\n    logDeriv f x = 0 := by\n  simp only [logDeriv_apply, deriv_zero_of_not_differentiableAt h, zero_div]\n\n"}
{"name":"logDeriv_id","module":"Mathlib.Analysis.Calculus.LogDeriv","initialProofState":"𝕜 : Type u_1\ninst✝ : NontriviallyNormedField 𝕜\nx : 𝕜\n⊢ Eq (logDeriv id x) (HDiv.hDiv 1 x)","decl":"@[simp]\ntheorem logDeriv_id (x : 𝕜) : logDeriv id x = 1 / x := by\n  simp [logDeriv_apply]\n\n"}
{"name":"logDeriv_id'","module":"Mathlib.Analysis.Calculus.LogDeriv","initialProofState":"𝕜 : Type u_1\ninst✝ : NontriviallyNormedField 𝕜\nx : 𝕜\n⊢ Eq (logDeriv (fun x => x) x) (HDiv.hDiv 1 x)","decl":"@[simp] theorem logDeriv_id' (x : 𝕜) : logDeriv (·) x = 1 / x := logDeriv_id x\n\n"}
{"name":"logDeriv_const","module":"Mathlib.Analysis.Calculus.LogDeriv","initialProofState":"𝕜 : Type u_1\n𝕜' : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\na : 𝕜'\n⊢ Eq (logDeriv fun x => a) 0","decl":"@[simp]\ntheorem logDeriv_const (a : 𝕜') : logDeriv (fun _ : 𝕜 ↦ a) = 0 := by\n  ext\n  simp [logDeriv_apply]\n\n"}
{"name":"logDeriv_mul","module":"Mathlib.Analysis.Calculus.LogDeriv","initialProofState":"𝕜 : Type u_1\n𝕜' : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nf g : 𝕜 → 𝕜'\nx : 𝕜\nhf : Ne (f x) 0\nhg : Ne (g x) 0\nhdf : DifferentiableAt 𝕜 f x\nhdg : DifferentiableAt 𝕜 g x\n⊢ Eq (logDeriv (fun z => HMul.hMul (f z) (g z)) x) (HAdd.hAdd (logDeriv f x) (logDeriv g x))","decl":"theorem logDeriv_mul {f g : 𝕜 → 𝕜'} (x : 𝕜) (hf : f x ≠ 0) (hg : g x ≠ 0)\n    (hdf : DifferentiableAt 𝕜 f x) (hdg : DifferentiableAt 𝕜 g x) :\n      logDeriv (fun z => f z * g z) x = logDeriv f x + logDeriv g x := by\n  simp only [logDeriv_apply, deriv_mul hdf hdg]\n  field_simp [mul_comm]\n\n"}
{"name":"logDeriv_div","module":"Mathlib.Analysis.Calculus.LogDeriv","initialProofState":"𝕜 : Type u_1\n𝕜' : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nf g : 𝕜 → 𝕜'\nx : 𝕜\nhf : Ne (f x) 0\nhg : Ne (g x) 0\nhdf : DifferentiableAt 𝕜 f x\nhdg : DifferentiableAt 𝕜 g x\n⊢ Eq (logDeriv (fun z => HDiv.hDiv (f z) (g z)) x) (HSub.hSub (logDeriv f x) (logDeriv g x))","decl":"theorem logDeriv_div {f g : 𝕜 → 𝕜'} (x : 𝕜) (hf : f x ≠ 0) (hg : g x ≠ 0)\n    (hdf : DifferentiableAt 𝕜 f x) (hdg : DifferentiableAt 𝕜 g x) :\n    logDeriv (fun z => f z / g z) x = logDeriv f x - logDeriv g x := by\n  simp only [logDeriv_apply, deriv_div hdf hdg]\n  field_simp [mul_comm]\n  ring\n\n"}
{"name":"logDeriv_mul_const","module":"Mathlib.Analysis.Calculus.LogDeriv","initialProofState":"𝕜 : Type u_1\n𝕜' : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nf : 𝕜 → 𝕜'\nx : 𝕜\na : 𝕜'\nha : Ne a 0\n⊢ Eq (logDeriv (fun z => HMul.hMul (f z) a) x) (logDeriv f x)","decl":"theorem logDeriv_mul_const {f : 𝕜 → 𝕜'} (x : 𝕜) (a : 𝕜') (ha : a ≠ 0):\n    logDeriv (fun z => f z * a) x = logDeriv f x := by\n  simp only [logDeriv_apply, deriv_mul_const_field, mul_div_mul_right _ _ ha]\n\n"}
{"name":"logDeriv_const_mul","module":"Mathlib.Analysis.Calculus.LogDeriv","initialProofState":"𝕜 : Type u_1\n𝕜' : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nf : 𝕜 → 𝕜'\nx : 𝕜\na : 𝕜'\nha : Ne a 0\n⊢ Eq (logDeriv (fun z => HMul.hMul a (f z)) x) (logDeriv f x)","decl":"theorem logDeriv_const_mul {f : 𝕜 → 𝕜'} (x : 𝕜) (a : 𝕜') (ha : a ≠ 0):\n    logDeriv (fun z => a * f z) x = logDeriv f x := by\n  simp only [logDeriv_apply, deriv_const_mul_field, mul_div_mul_left _ _ ha]\n\n"}
{"name":"logDeriv_prod","module":"Mathlib.Analysis.Calculus.LogDeriv","initialProofState":"𝕜 : Type u_1\n𝕜' : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nι : Type u_3\ns : Finset ι\nf : ι → 𝕜 → 𝕜'\nx : 𝕜\nhf : ∀ (i : ι), Membership.mem s i → Ne (f i x) 0\nhd : ∀ (i : ι), Membership.mem s i → DifferentiableAt 𝕜 (f i) x\n⊢ Eq (logDeriv (fun x => s.prod fun i => f i x) x) (s.sum fun i => logDeriv (f i) x)","decl":"/-- The logarithmic derivative of a finite product is the sum of the logarithmic derivatives. -/\ntheorem logDeriv_prod {ι : Type*} (s : Finset ι) (f : ι → 𝕜 → 𝕜') (x : 𝕜) (hf : ∀ i ∈ s, f i x ≠ 0)\n    (hd : ∀ i ∈ s, DifferentiableAt 𝕜 (f i) x) :\n    logDeriv (∏ i ∈ s, f i ·) x = ∑ i ∈ s, logDeriv (f i) x := by\n  induction s using Finset.cons_induction with\n  | empty => simp\n  | cons a s ha ih =>\n    rw [Finset.forall_mem_cons] at hf hd\n    simp_rw [Finset.prod_cons, Finset.sum_cons]\n    rw [logDeriv_mul, ih hf.2 hd.2]\n    · exact hf.1\n    · simpa [Finset.prod_eq_zero_iff] using hf.2\n    · exact hd.1\n    · exact .finset_prod hd.2\n\n"}
{"name":"logDeriv_fun_zpow","module":"Mathlib.Analysis.Calculus.LogDeriv","initialProofState":"𝕜 : Type u_1\n𝕜' : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nf : 𝕜 → 𝕜'\nx : 𝕜\nhdf : DifferentiableAt 𝕜 f x\nn : Int\n⊢ Eq (logDeriv (fun x => HPow.hPow (f x) n) x) (HMul.hMul (↑n) (logDeriv f x))","decl":"lemma logDeriv_fun_zpow {f : 𝕜 → 𝕜'} {x : 𝕜} (hdf : DifferentiableAt 𝕜 f x) (n : ℤ) :\n    logDeriv (f · ^ n) x = n * logDeriv f x := by\n  rcases eq_or_ne n 0 with rfl | hn; · simp\n  rcases eq_or_ne (f x) 0 with hf | hf\n  · simp [logDeriv_apply, zero_zpow, *]\n  · rw [logDeriv_apply, ← comp_def (·^n), deriv_comp _ (differentiableAt_zpow.2 <| .inl hf) hdf,\n      deriv_zpow, logDeriv_apply]\n    field_simp [zpow_ne_zero, zpow_sub_one₀ hf]\n    ring\n\n"}
{"name":"logDeriv_fun_pow","module":"Mathlib.Analysis.Calculus.LogDeriv","initialProofState":"𝕜 : Type u_1\n𝕜' : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nf : 𝕜 → 𝕜'\nx : 𝕜\nhdf : DifferentiableAt 𝕜 f x\nn : Nat\n⊢ Eq (logDeriv (fun x => HPow.hPow (f x) n) x) (HMul.hMul (↑n) (logDeriv f x))","decl":"lemma logDeriv_fun_pow {f : 𝕜 → 𝕜'} {x : 𝕜} (hdf : DifferentiableAt 𝕜 f x) (n : ℕ) :\n    logDeriv (f · ^ n) x = n * logDeriv f x :=\n  mod_cast logDeriv_fun_zpow hdf n\n\n"}
{"name":"logDeriv_zpow","module":"Mathlib.Analysis.Calculus.LogDeriv","initialProofState":"𝕜 : Type u_1\ninst✝ : NontriviallyNormedField 𝕜\nx : 𝕜\nn : Int\n⊢ Eq (logDeriv (fun x => HPow.hPow x n) x) (HDiv.hDiv (↑n) x)","decl":"@[simp]\nlemma logDeriv_zpow (x : 𝕜) (n : ℤ) : logDeriv (· ^ n) x = n / x := by\n  rw [logDeriv_fun_zpow (by fun_prop), logDeriv_id', mul_one_div]\n\n"}
{"name":"logDeriv_pow","module":"Mathlib.Analysis.Calculus.LogDeriv","initialProofState":"𝕜 : Type u_1\ninst✝ : NontriviallyNormedField 𝕜\nx : 𝕜\nn : Nat\n⊢ Eq (logDeriv (fun x => HPow.hPow x n) x) (HDiv.hDiv (↑n) x)","decl":"@[simp]\nlemma logDeriv_pow (x : 𝕜) (n : ℕ) : logDeriv (· ^ n) x = n / x :=\n  mod_cast logDeriv_zpow x n\n\n"}
{"name":"logDeriv_inv","module":"Mathlib.Analysis.Calculus.LogDeriv","initialProofState":"𝕜 : Type u_1\ninst✝ : NontriviallyNormedField 𝕜\nx : 𝕜\n⊢ Eq (logDeriv (fun x => Inv.inv x) x) (HDiv.hDiv (-1) x)","decl":"@[simp] lemma logDeriv_inv (x : 𝕜) : logDeriv (·⁻¹) x = -1 / x := by\n  simpa using logDeriv_zpow x (-1)\n\n"}
{"name":"logDeriv_comp","module":"Mathlib.Analysis.Calculus.LogDeriv","initialProofState":"𝕜 : Type u_1\n𝕜' : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nf : 𝕜' → 𝕜'\ng : 𝕜 → 𝕜'\nx : 𝕜\nhf : DifferentiableAt 𝕜' f (g x)\nhg : DifferentiableAt 𝕜 g x\n⊢ Eq (logDeriv (Function.comp f g) x) (HMul.hMul (logDeriv f (g x)) (deriv g x))","decl":"theorem logDeriv_comp {f : 𝕜' → 𝕜'} {g : 𝕜 → 𝕜'} {x : 𝕜} (hf : DifferentiableAt 𝕜' f (g x))\n    (hg : DifferentiableAt 𝕜 g x) : logDeriv (f ∘ g) x = logDeriv f (g x) * deriv g x := by\n  simp only [logDeriv, Pi.div_apply, deriv_comp _ hf hg, comp_apply]\n  ring\n"}
