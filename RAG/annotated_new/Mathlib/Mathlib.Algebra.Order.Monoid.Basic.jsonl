{"name":"OrderEmbedding.addLeft_apply","module":"Mathlib.Algebra.Order.Monoid.Basic","initialProofState":"α : Type u_2\ninst✝² : Add α\ninst✝¹ : LinearOrder α\ninst✝ : AddLeftStrictMono α\nm n : α\n⊢ Eq ((OrderEmbedding.addLeft m) n) (HAdd.hAdd m n)","decl":"/-- The order embedding sending `b` to `a * b`, for some fixed `a`.\nSee also `OrderIso.mulLeft` when working in an ordered group. -/\n@[to_additive (attr := simps!)\n      \"The order embedding sending `b` to `a + b`, for some fixed `a`.\n       See also `OrderIso.addLeft` when working in an additive ordered group.\"]\ndef OrderEmbedding.mulLeft {α : Type*} [Mul α] [LinearOrder α]\n    [MulLeftStrictMono α] (m : α) : α ↪o α :=\n  OrderEmbedding.ofStrictMono (fun n => m * n) fun _ _ w => mul_lt_mul_left' w m\n\n"}
{"name":"OrderEmbedding.mulLeft_apply","module":"Mathlib.Algebra.Order.Monoid.Basic","initialProofState":"α : Type u_2\ninst✝² : Mul α\ninst✝¹ : LinearOrder α\ninst✝ : MulLeftStrictMono α\nm n : α\n⊢ Eq ((OrderEmbedding.mulLeft m) n) (HMul.hMul m n)","decl":"/-- The order embedding sending `b` to `a * b`, for some fixed `a`.\nSee also `OrderIso.mulLeft` when working in an ordered group. -/\n@[to_additive (attr := simps!)\n      \"The order embedding sending `b` to `a + b`, for some fixed `a`.\n       See also `OrderIso.addLeft` when working in an additive ordered group.\"]\ndef OrderEmbedding.mulLeft {α : Type*} [Mul α] [LinearOrder α]\n    [MulLeftStrictMono α] (m : α) : α ↪o α :=\n  OrderEmbedding.ofStrictMono (fun n => m * n) fun _ _ w => mul_lt_mul_left' w m\n\n"}
{"name":"OrderEmbedding.addRight_apply","module":"Mathlib.Algebra.Order.Monoid.Basic","initialProofState":"α : Type u_2\ninst✝² : Add α\ninst✝¹ : LinearOrder α\ninst✝ : AddRightStrictMono α\nm n : α\n⊢ Eq ((OrderEmbedding.addRight m) n) (HAdd.hAdd n m)","decl":"/-- The order embedding sending `b` to `b * a`, for some fixed `a`.\nSee also `OrderIso.mulRight` when working in an ordered group. -/\n@[to_additive (attr := simps!)\n      \"The order embedding sending `b` to `b + a`, for some fixed `a`.\n       See also `OrderIso.addRight` when working in an additive ordered group.\"]\ndef OrderEmbedding.mulRight {α : Type*} [Mul α] [LinearOrder α]\n    [MulRightStrictMono α] (m : α) : α ↪o α :=\n  OrderEmbedding.ofStrictMono (fun n => n * m) fun _ _ w => mul_lt_mul_right' w m\n"}
{"name":"OrderEmbedding.mulRight_apply","module":"Mathlib.Algebra.Order.Monoid.Basic","initialProofState":"α : Type u_2\ninst✝² : Mul α\ninst✝¹ : LinearOrder α\ninst✝ : MulRightStrictMono α\nm n : α\n⊢ Eq ((OrderEmbedding.mulRight m) n) (HMul.hMul n m)","decl":"/-- The order embedding sending `b` to `b * a`, for some fixed `a`.\nSee also `OrderIso.mulRight` when working in an ordered group. -/\n@[to_additive (attr := simps!)\n      \"The order embedding sending `b` to `b + a`, for some fixed `a`.\n       See also `OrderIso.addRight` when working in an additive ordered group.\"]\ndef OrderEmbedding.mulRight {α : Type*} [Mul α] [LinearOrder α]\n    [MulRightStrictMono α] (m : α) : α ↪o α :=\n  OrderEmbedding.ofStrictMono (fun n => n * m) fun _ _ w => mul_lt_mul_right' w m\n"}
