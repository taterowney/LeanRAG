{"name":"cauchySeq_finset_iff_vanishing_norm","module":"Mathlib.Analysis.Normed.Group.InfiniteSum","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝ : SeminormedAddCommGroup E\nf : ι → E\n⊢ Iff (CauchySeq fun s => s.sum fun i => f i) (∀ (ε : Real), GT.gt ε 0 → Exists fun s => ∀ (t : Finset ι), Disjoint t s → LT.lt (Norm.norm (t.sum fun i => f i)) ε)","decl":"theorem cauchySeq_finset_iff_vanishing_norm {f : ι → E} :\n    (CauchySeq fun s : Finset ι => ∑ i ∈ s, f i) ↔\n      ∀ ε > (0 : ℝ), ∃ s : Finset ι, ∀ t, Disjoint t s → ‖∑ i ∈ t, f i‖ < ε := by\n  rw [cauchySeq_finset_iff_sum_vanishing, nhds_basis_ball.forall_iff]\n  · simp only [ball_zero_eq, Set.mem_setOf_eq]\n  · rintro s t hst ⟨s', hs'⟩\n    exact ⟨s', fun t' ht' => hst <| hs' _ ht'⟩\n\n"}
{"name":"summable_iff_vanishing_norm","module":"Mathlib.Analysis.Normed.Group.InfiniteSum","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : CompleteSpace E\nf : ι → E\n⊢ Iff (Summable f) (∀ (ε : Real), GT.gt ε 0 → Exists fun s => ∀ (t : Finset ι), Disjoint t s → LT.lt (Norm.norm (t.sum fun i => f i)) ε)","decl":"theorem summable_iff_vanishing_norm [CompleteSpace E] {f : ι → E} :\n    Summable f ↔ ∀ ε > (0 : ℝ), ∃ s : Finset ι, ∀ t, Disjoint t s → ‖∑ i ∈ t, f i‖ < ε := by\n  rw [summable_iff_cauchySeq_finset, cauchySeq_finset_iff_vanishing_norm]\n\n"}
{"name":"cauchySeq_finset_of_norm_bounded_eventually","module":"Mathlib.Analysis.Normed.Group.InfiniteSum","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝ : SeminormedAddCommGroup E\nf : ι → E\ng : ι → Real\nhg : Summable g\nh : Filter.Eventually (fun i => LE.le (Norm.norm (f i)) (g i)) Filter.cofinite\n⊢ CauchySeq fun s => s.sum fun i => f i","decl":"theorem cauchySeq_finset_of_norm_bounded_eventually {f : ι → E} {g : ι → ℝ} (hg : Summable g)\n    (h : ∀ᶠ i in cofinite, ‖f i‖ ≤ g i) : CauchySeq fun s => ∑ i ∈ s, f i := by\n  refine cauchySeq_finset_iff_vanishing_norm.2 fun ε hε => ?_\n  rcases summable_iff_vanishing_norm.1 hg ε hε with ⟨s, hs⟩\n  classical\n  refine ⟨s ∪ h.toFinset, fun t ht => ?_⟩\n  have : ∀ i ∈ t, ‖f i‖ ≤ g i := by\n    intro i hi\n    simp only [disjoint_left, mem_union, not_or, h.mem_toFinset, Set.mem_compl_iff,\n      Classical.not_not] at ht\n    exact (ht hi).2\n  calc\n    ‖∑ i ∈ t, f i‖ ≤ ∑ i ∈ t, g i := norm_sum_le_of_le _ this\n    _ ≤ ‖∑ i ∈ t, g i‖ := le_abs_self _\n    _ < ε := hs _ (ht.mono_right le_sup_left)\n\n"}
{"name":"cauchySeq_finset_of_norm_bounded","module":"Mathlib.Analysis.Normed.Group.InfiniteSum","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝ : SeminormedAddCommGroup E\nf : ι → E\ng : ι → Real\nhg : Summable g\nh : ∀ (i : ι), LE.le (Norm.norm (f i)) (g i)\n⊢ CauchySeq fun s => s.sum fun i => f i","decl":"theorem cauchySeq_finset_of_norm_bounded {f : ι → E} (g : ι → ℝ) (hg : Summable g)\n    (h : ∀ i, ‖f i‖ ≤ g i) : CauchySeq fun s : Finset ι => ∑ i ∈ s, f i :=\n  cauchySeq_finset_of_norm_bounded_eventually hg <| Eventually.of_forall h\n\n"}
{"name":"cauchySeq_range_of_norm_bounded","module":"Mathlib.Analysis.Normed.Group.InfiniteSum","initialProofState":"E : Type u_3\ninst✝ : SeminormedAddCommGroup E\nf : Nat → E\ng : Nat → Real\nhg : CauchySeq fun n => (Finset.range n).sum fun i => g i\nhf : ∀ (i : Nat), LE.le (Norm.norm (f i)) (g i)\n⊢ CauchySeq fun n => (Finset.range n).sum fun i => f i","decl":"/-- A version of the **direct comparison test** for conditionally convergent series.\nSee `cauchySeq_finset_of_norm_bounded` for the same statement about absolutely convergent ones. -/\ntheorem cauchySeq_range_of_norm_bounded {f : ℕ → E} (g : ℕ → ℝ)\n    (hg : CauchySeq fun n => ∑ i ∈ range n, g i) (hf : ∀ i, ‖f i‖ ≤ g i) :\n    CauchySeq fun n => ∑ i ∈ range n, f i := by\n  refine Metric.cauchySeq_iff'.2 fun ε hε => ?_\n  refine (Metric.cauchySeq_iff'.1 hg ε hε).imp fun N hg n hn => ?_\n  specialize hg n hn\n  rw [dist_eq_norm, ← sum_Ico_eq_sub _ hn] at hg ⊢\n  calc\n    ‖∑ k ∈ Ico N n, f k‖ ≤ ∑ k ∈ _, ‖f k‖ := norm_sum_le _ _\n    _ ≤ ∑ k ∈ _, g k := sum_le_sum fun x _ => hf x\n    _ ≤ ‖∑ k ∈ _, g k‖ := le_abs_self _\n    _ < ε := hg\n\n"}
{"name":"cauchySeq_finset_of_summable_norm","module":"Mathlib.Analysis.Normed.Group.InfiniteSum","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝ : SeminormedAddCommGroup E\nf : ι → E\nhf : Summable fun a => Norm.norm (f a)\n⊢ CauchySeq fun s => s.sum fun a => f a","decl":"theorem cauchySeq_finset_of_summable_norm {f : ι → E} (hf : Summable fun a => ‖f a‖) :\n    CauchySeq fun s : Finset ι => ∑ a ∈ s, f a :=\n  cauchySeq_finset_of_norm_bounded _ hf fun _i => le_rfl\n\n"}
{"name":"hasSum_of_subseq_of_summable","module":"Mathlib.Analysis.Normed.Group.InfiniteSum","initialProofState":"ι : Type u_1\nα : Type u_2\nE : Type u_3\ninst✝¹ : SeminormedAddCommGroup E\nf : ι → E\nhf : Summable fun a => Norm.norm (f a)\ns : α → Finset ι\np : Filter α\ninst✝ : p.NeBot\nhs : Filter.Tendsto s p Filter.atTop\na : E\nha : Filter.Tendsto (fun b => (s b).sum fun i => f i) p (nhds a)\n⊢ HasSum f a","decl":"/-- If a function `f` is summable in norm, and along some sequence of finsets exhausting the space\nits sum is converging to a limit `a`, then this holds along all finsets, i.e., `f` is summable\nwith sum `a`. -/\ntheorem hasSum_of_subseq_of_summable {f : ι → E} (hf : Summable fun a => ‖f a‖) {s : α → Finset ι}\n    {p : Filter α} [NeBot p] (hs : Tendsto s p atTop) {a : E}\n    (ha : Tendsto (fun b => ∑ i ∈ s b, f i) p (𝓝 a)) : HasSum f a :=\n  tendsto_nhds_of_cauchySeq_of_subseq (cauchySeq_finset_of_summable_norm hf) hs ha\n\n"}
{"name":"hasSum_iff_tendsto_nat_of_summable_norm","module":"Mathlib.Analysis.Normed.Group.InfiniteSum","initialProofState":"E : Type u_3\ninst✝ : SeminormedAddCommGroup E\nf : Nat → E\na : E\nhf : Summable fun i => Norm.norm (f i)\n⊢ Iff (HasSum f a) (Filter.Tendsto (fun n => (Finset.range n).sum fun i => f i) Filter.atTop (nhds a))","decl":"theorem hasSum_iff_tendsto_nat_of_summable_norm {f : ℕ → E} {a : E} (hf : Summable fun i => ‖f i‖) :\n    HasSum f a ↔ Tendsto (fun n : ℕ => ∑ i ∈ range n, f i) atTop (𝓝 a) :=\n  ⟨fun h => h.tendsto_sum_nat, fun h => hasSum_of_subseq_of_summable hf tendsto_finset_range h⟩\n\n"}
{"name":"Summable.of_norm_bounded","module":"Mathlib.Analysis.Normed.Group.InfiniteSum","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : CompleteSpace E\nf : ι → E\ng : ι → Real\nhg : Summable g\nh : ∀ (i : ι), LE.le (Norm.norm (f i)) (g i)\n⊢ Summable f","decl":"/-- The direct comparison test for series:  if the norm of `f` is bounded by a real function `g`\nwhich is summable, then `f` is summable. -/\ntheorem Summable.of_norm_bounded [CompleteSpace E] {f : ι → E} (g : ι → ℝ) (hg : Summable g)\n    (h : ∀ i, ‖f i‖ ≤ g i) : Summable f := by\n  rw [summable_iff_cauchySeq_finset]\n  exact cauchySeq_finset_of_norm_bounded g hg h\n\n"}
{"name":"HasSum.norm_le_of_bounded","module":"Mathlib.Analysis.Normed.Group.InfiniteSum","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝ : SeminormedAddCommGroup E\nf : ι → E\ng : ι → Real\na : E\nb : Real\nhf : HasSum f a\nhg : HasSum g b\nh : ∀ (i : ι), LE.le (Norm.norm (f i)) (g i)\n⊢ LE.le (Norm.norm a) b","decl":"theorem HasSum.norm_le_of_bounded {f : ι → E} {g : ι → ℝ} {a : E} {b : ℝ} (hf : HasSum f a)\n    (hg : HasSum g b) (h : ∀ i, ‖f i‖ ≤ g i) : ‖a‖ ≤ b := by\n  classical exact le_of_tendsto_of_tendsto' hf.norm hg fun _s ↦ norm_sum_le_of_le _ fun i _hi ↦ h i\n\n"}
{"name":"tsum_of_norm_bounded","module":"Mathlib.Analysis.Normed.Group.InfiniteSum","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝ : SeminormedAddCommGroup E\nf : ι → E\ng : ι → Real\na : Real\nhg : HasSum g a\nh : ∀ (i : ι), LE.le (Norm.norm (f i)) (g i)\n⊢ LE.le (Norm.norm (tsum fun i => f i)) a","decl":"/-- Quantitative result associated to the direct comparison test for series:  If `∑' i, g i` is\nsummable, and for all `i`, `‖f i‖ ≤ g i`, then `‖∑' i, f i‖ ≤ ∑' i, g i`. Note that we do not\nassume that `∑' i, f i` is summable, and it might not be the case if `α` is not a complete space. -/\ntheorem tsum_of_norm_bounded {f : ι → E} {g : ι → ℝ} {a : ℝ} (hg : HasSum g a)\n    (h : ∀ i, ‖f i‖ ≤ g i) : ‖∑' i : ι, f i‖ ≤ a := by\n  by_cases hf : Summable f\n  · exact hf.hasSum.norm_le_of_bounded hg h\n  · rw [tsum_eq_zero_of_not_summable hf, norm_zero]\n    classical exact ge_of_tendsto' hg fun s => sum_nonneg fun i _hi => (norm_nonneg _).trans (h i)\n\n"}
{"name":"norm_tsum_le_tsum_norm","module":"Mathlib.Analysis.Normed.Group.InfiniteSum","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝ : SeminormedAddCommGroup E\nf : ι → E\nhf : Summable fun i => Norm.norm (f i)\n⊢ LE.le (Norm.norm (tsum fun i => f i)) (tsum fun i => Norm.norm (f i))","decl":"/-- If `∑' i, ‖f i‖` is summable, then `‖∑' i, f i‖ ≤ (∑' i, ‖f i‖)`. Note that we do not assume\nthat `∑' i, f i` is summable, and it might not be the case if `α` is not a complete space. -/\ntheorem norm_tsum_le_tsum_norm {f : ι → E} (hf : Summable fun i => ‖f i‖) :\n    ‖∑' i, f i‖ ≤ ∑' i, ‖f i‖ :=\n  tsum_of_norm_bounded hf.hasSum fun _i => le_rfl\n\n"}
{"name":"tsum_of_nnnorm_bounded","module":"Mathlib.Analysis.Normed.Group.InfiniteSum","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝ : SeminormedAddCommGroup E\nf : ι → E\ng : ι → NNReal\na : NNReal\nhg : HasSum g a\nh : ∀ (i : ι), LE.le (NNNorm.nnnorm (f i)) (g i)\n⊢ LE.le (NNNorm.nnnorm (tsum fun i => f i)) a","decl":"/-- Quantitative result associated to the direct comparison test for series: If `∑' i, g i` is\nsummable, and for all `i`, `‖f i‖₊ ≤ g i`, then `‖∑' i, f i‖₊ ≤ ∑' i, g i`. Note that we\ndo not assume that `∑' i, f i` is summable, and it might not be the case if `α` is not a complete\nspace. -/\ntheorem tsum_of_nnnorm_bounded {f : ι → E} {g : ι → ℝ≥0} {a : ℝ≥0} (hg : HasSum g a)\n    (h : ∀ i, ‖f i‖₊ ≤ g i) : ‖∑' i : ι, f i‖₊ ≤ a := by\n  simp only [← NNReal.coe_le_coe, ← NNReal.hasSum_coe, coe_nnnorm] at *\n  exact tsum_of_norm_bounded hg h\n\n"}
{"name":"nnnorm_tsum_le","module":"Mathlib.Analysis.Normed.Group.InfiniteSum","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝ : SeminormedAddCommGroup E\nf : ι → E\nhf : Summable fun i => NNNorm.nnnorm (f i)\n⊢ LE.le (NNNorm.nnnorm (tsum fun i => f i)) (tsum fun i => NNNorm.nnnorm (f i))","decl":"/-- If `∑' i, ‖f i‖₊` is summable, then `‖∑' i, f i‖₊ ≤ ∑' i, ‖f i‖₊`. Note that\nwe do not assume that `∑' i, f i` is summable, and it might not be the case if `α` is not a complete\nspace. -/\ntheorem nnnorm_tsum_le {f : ι → E} (hf : Summable fun i => ‖f i‖₊) : ‖∑' i, f i‖₊ ≤ ∑' i, ‖f i‖₊ :=\n  tsum_of_nnnorm_bounded hf.hasSum fun _i => le_rfl\n\n"}
{"name":"Summable.of_norm_bounded_eventually","module":"Mathlib.Analysis.Normed.Group.InfiniteSum","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : CompleteSpace E\nf : ι → E\ng : ι → Real\nhg : Summable g\nh : Filter.Eventually (fun i => LE.le (Norm.norm (f i)) (g i)) Filter.cofinite\n⊢ Summable f","decl":"/-- Variant of the direct comparison test for series:  if the norm of `f` is eventually bounded by a\nreal function `g` which is summable, then `f` is summable. -/\ntheorem Summable.of_norm_bounded_eventually {f : ι → E} (g : ι → ℝ) (hg : Summable g)\n    (h : ∀ᶠ i in cofinite, ‖f i‖ ≤ g i) : Summable f :=\n  summable_iff_cauchySeq_finset.2 <| cauchySeq_finset_of_norm_bounded_eventually hg h\n\n"}
{"name":"Summable.of_norm_bounded_eventually_nat","module":"Mathlib.Analysis.Normed.Group.InfiniteSum","initialProofState":"E : Type u_3\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : CompleteSpace E\nf : Nat → E\ng : Nat → Real\nhg : Summable g\nh : Filter.Eventually (fun i => LE.le (Norm.norm (f i)) (g i)) Filter.atTop\n⊢ Summable f","decl":"/-- Variant of the direct comparison test for series:  if the norm of `f` is eventually bounded by a\nreal function `g` which is summable, then `f` is summable. -/\ntheorem Summable.of_norm_bounded_eventually_nat {f : ℕ → E} (g : ℕ → ℝ) (hg : Summable g)\n    (h : ∀ᶠ i in atTop, ‖f i‖ ≤ g i) : Summable f :=\n  .of_norm_bounded_eventually g hg <| Nat.cofinite_eq_atTop ▸ h\n\n"}
{"name":"Summable.of_nnnorm_bounded","module":"Mathlib.Analysis.Normed.Group.InfiniteSum","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : CompleteSpace E\nf : ι → E\ng : ι → NNReal\nhg : Summable g\nh : ∀ (i : ι), LE.le (NNNorm.nnnorm (f i)) (g i)\n⊢ Summable f","decl":"theorem Summable.of_nnnorm_bounded {f : ι → E} (g : ι → ℝ≥0) (hg : Summable g)\n    (h : ∀ i, ‖f i‖₊ ≤ g i) : Summable f :=\n  .of_norm_bounded (fun i => (g i : ℝ)) (NNReal.summable_coe.2 hg) h\n\n"}
{"name":"Summable.of_norm","module":"Mathlib.Analysis.Normed.Group.InfiniteSum","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : CompleteSpace E\nf : ι → E\nhf : Summable fun a => Norm.norm (f a)\n⊢ Summable f","decl":"theorem Summable.of_norm {f : ι → E} (hf : Summable fun a => ‖f a‖) : Summable f :=\n  .of_norm_bounded _ hf fun _i => le_rfl\n\n"}
{"name":"Summable.of_nnnorm","module":"Mathlib.Analysis.Normed.Group.InfiniteSum","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : CompleteSpace E\nf : ι → E\nhf : Summable fun a => NNNorm.nnnorm (f a)\n⊢ Summable f","decl":"theorem Summable.of_nnnorm {f : ι → E} (hf : Summable fun a => ‖f a‖₊) : Summable f :=\n  .of_nnnorm_bounded _ hf fun _i => le_rfl\n"}
