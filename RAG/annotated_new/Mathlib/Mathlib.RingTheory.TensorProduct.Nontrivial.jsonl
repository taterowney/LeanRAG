{"name":"Algebra.TensorProduct.nontrivial_of_algebraMap_injective_of_isDomain","module":"Mathlib.RingTheory.TensorProduct.Nontrivial","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommRing R\ninst✝⁵ : CommRing A\ninst✝⁴ : CommRing B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\nha : Function.Injective ⇑(algebraMap R A)\nhb : Function.Injective ⇑(algebraMap R B)\ninst✝¹ : IsDomain A\ninst✝ : IsDomain B\n⊢ Nontrivial (TensorProduct R A B)","decl":"/-- If `A`, `B` are `R`-algebras, `R` injects into `A` and `B`, and `A` and `B` are domains\n(which implies `R` is also a domain), then `A ⊗[R] B` is nontrivial. -/\ntheorem nontrivial_of_algebraMap_injective_of_isDomain\n    (R A B : Type*) [CommRing R] [CommRing A] [CommRing B] [Algebra R A] [Algebra R B]\n    (ha : Function.Injective (algebraMap R A)) (hb : Function.Injective (algebraMap R B))\n    [IsDomain A] [IsDomain B] : Nontrivial (A ⊗[R] B) := by\n  haveI := ha.isDomain _\n  let FR := FractionRing R\n  let FA := FractionRing A\n  let FB := FractionRing B\n  let fa : FR →ₐ[R] FA := IsFractionRing.liftAlgHom (g := Algebra.ofId R FA)\n    ((IsFractionRing.injective A FA).comp ha)\n  let fb : FR →ₐ[R] FB := IsFractionRing.liftAlgHom (g := Algebra.ofId R FB)\n    ((IsFractionRing.injective B FB).comp hb)\n  algebraize_only [fa.toRingHom, fb.toRingHom]\n  exact Algebra.TensorProduct.mapOfCompatibleSMul FR R FA FB |>.comp\n    (Algebra.TensorProduct.map (IsScalarTower.toAlgHom R A FA) (IsScalarTower.toAlgHom R B FB))\n    |>.toRingHom.domain_nontrivial\n\n"}
