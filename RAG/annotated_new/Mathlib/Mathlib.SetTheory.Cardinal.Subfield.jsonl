{"name":"Subfield.cardinalMk_closure_le_max","module":"Mathlib.SetTheory.Cardinal.Subfield","initialProofState":"α : Type u\ns : Set α\ninst✝ : DivisionRing α\n⊢ LE.le (Cardinal.mk (Subtype fun x => Membership.mem (Subfield.closure s) x)) (Max.max (Cardinal.mk ↑s) Cardinal.aleph0)","decl":"lemma cardinalMk_closure_le_max : #(closure s) ≤ max #s ℵ₀ :=\n  (Cardinal.mk_le_of_surjective <| surjective_ofWType s).trans <| by\n    convert WType.cardinalMk_le_max_aleph0_of_finite' using 1\n    · rw [lift_uzero, mk_sum, lift_uzero]\n      have : lift.{u,0} #(Fin 6) < ℵ₀ := lift_lt_aleph0.mpr (lt_aleph0_of_finite _)\n      obtain h|h := lt_or_le #s ℵ₀\n      · rw [max_eq_right h.le, max_eq_right]\n        exact (add_lt_aleph0 this h).le\n      · rw [max_eq_left h, add_eq_right h (this.le.trans h), max_eq_left h]\n    rintro (n|_)\n    · fin_cases n <;> (dsimp only [id_eq]; infer_instance)\n    infer_instance\n\n"}
{"name":"Subfield.cardinal_mk_closure_le_max","module":"Mathlib.SetTheory.Cardinal.Subfield","initialProofState":"α : Type u\ns : Set α\ninst✝ : DivisionRing α\n⊢ LE.le (Cardinal.mk (Subtype fun x => Membership.mem (Subfield.closure s) x)) (Max.max (Cardinal.mk ↑s) Cardinal.aleph0)","decl":"@[deprecated (since := \"2024-11-10\")] alias cardinal_mk_closure_le_max := cardinalMk_closure_le_max\n\n"}
{"name":"Subfield.cardinalMk_closure","module":"Mathlib.SetTheory.Cardinal.Subfield","initialProofState":"α : Type u\ns : Set α\ninst✝¹ : DivisionRing α\ninst✝ : Infinite ↑s\n⊢ Eq (Cardinal.mk (Subtype fun x => Membership.mem (Subfield.closure s) x)) (Cardinal.mk ↑s)","decl":"lemma cardinalMk_closure [Infinite s] : #(closure s) = #s :=\n  ((cardinalMk_closure_le_max s).trans_eq <| max_eq_left <| aleph0_le_mk s).antisymm\n    (mk_le_mk_of_subset subset_closure)\n\n"}
{"name":"Subfield.cardinal_mk_closure","module":"Mathlib.SetTheory.Cardinal.Subfield","initialProofState":"α : Type u\ns : Set α\ninst✝¹ : DivisionRing α\ninst✝ : Infinite ↑s\n⊢ Eq (Cardinal.mk (Subtype fun x => Membership.mem (Subfield.closure s) x)) (Cardinal.mk ↑s)","decl":"@[deprecated (since := \"2024-11-10\")] alias cardinal_mk_closure := cardinalMk_closure\n\n"}
