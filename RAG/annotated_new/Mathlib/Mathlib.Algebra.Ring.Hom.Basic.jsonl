{"name":"RingHom.codomain_trivial_iff_range_eq_singleton_zero","module":"Mathlib.Algebra.Ring.Hom.Basic","initialProofState":"α : Type u_1\nβ : Type u_2\nx✝¹ : NonAssocSemiring α\nx✝ : NonAssocSemiring β\nf : RingHom α β\n⊢ Iff (Eq 0 1) (Eq (Set.range ⇑f) (Singleton.singleton 0))","decl":"/-- `f : α →+* β` has a trivial codomain iff its range is `{0}`. -/\ntheorem codomain_trivial_iff_range_eq_singleton_zero : (0 : β) = 1 ↔ Set.range f = {0} :=\n  f.codomain_trivial_iff_range_trivial.trans\n    ⟨fun h =>\n      Set.ext fun y => ⟨fun ⟨x, hx⟩ => by simp [← hx, h x], fun hy => ⟨0, by simpa using hy.symm⟩⟩,\n      fun h x => Set.mem_singleton_iff.mp (h ▸ Set.mem_range_self x)⟩\n\n"}
{"name":"RingHom.map_dvd","module":"Mathlib.Algebra.Ring.Hom.Basic","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Semiring α\ninst✝ : Semiring β\nf : RingHom α β\na b : α\na✝ : Dvd.dvd a b\n⊢ Dvd.dvd (f a) (f b)","decl":"protected theorem map_dvd (f : α →+* β) {a b : α} : a ∣ b → f a ∣ f b :=\n  map_dvd f\n\n"}
{"name":"Function.Injective.isDomain","module":"Mathlib.Algebra.Ring.Hom.Basic","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : Semiring α\ninst✝³ : IsDomain α\ninst✝² : Semiring β\nF : Type u_3\ninst✝¹ : FunLike F β α\ninst✝ : MonoidWithZeroHomClass F β α\nf : F\nhf : Function.Injective ⇑f\n⊢ IsDomain β","decl":"/-- Pullback `IsDomain` instance along an injective function. -/\nprotected theorem Function.Injective.isDomain [Semiring α] [IsDomain α] [Semiring β] {F}\n    [FunLike F β α] [MonoidWithZeroHomClass F β α] (f : F) (hf : Injective f) : IsDomain β where\n  __ := domain_nontrivial f (map_zero _) (map_one _)\n  __ := hf.isCancelMulZero f (map_zero _) (map_mul _)\n"}
