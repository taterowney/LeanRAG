{"name":"CategoryTheory.ShortComplex.quasiIso_of_retract","module":"Mathlib.Algebra.Homology.ShortComplex.Retract","initialProofState":"C : Type u_1\ninst✝⁵ : CategoryTheory.Category.{u_2, u_1} C\ninst✝⁴ : CategoryTheory.Limits.HasZeroMorphisms C\nS₁ T₁ S₂ T₂ : CategoryTheory.ShortComplex C\ninst✝³ : S₁.HasHomology\ninst✝² : T₁.HasHomology\ninst✝¹ : S₂.HasHomology\ninst✝ : T₂.HasHomology\nf₁ : Quiver.Hom S₁ T₁\nf₂ : Quiver.Hom S₂ T₂\nh : CategoryTheory.RetractArrow f₁ f₂\nhf₂ : CategoryTheory.ShortComplex.QuasiIso f₂\n⊢ CategoryTheory.ShortComplex.QuasiIso f₁","decl":"lemma quasiIso_of_retract (h : RetractArrow f₁ f₂) [hf₂ : QuasiIso f₂] :\n    QuasiIso f₁ := by\n  rw [quasiIso_iff] at hf₂ ⊢\n  have h : RetractArrow (homologyMap f₁) (homologyMap f₂) :=\n    { i := Arrow.homMk (u := homologyMap (show S₁ ⟶ S₂ from h.i.left))\n        (v := homologyMap (show T₁ ⟶ T₂ from h.i.right)) (by simp [← homologyMap_comp])\n      r := Arrow.homMk (u := homologyMap (show S₂ ⟶ S₁ from h.r.left))\n        (v := homologyMap (show T₂ ⟶ T₁ from h.r.right)) (by simp [← homologyMap_comp])\n      retract := by ext <;> simp [← homologyMap_comp] }\n  exact (MorphismProperty.isomorphisms C).of_retract h hf₂\n\n"}
