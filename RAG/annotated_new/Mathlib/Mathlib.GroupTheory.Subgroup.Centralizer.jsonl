{"name":"AddSubgroup.mem_centralizer_iff","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\ng : G\ns : Set G\n⊢ Iff (Membership.mem (AddSubgroup.centralizer s) g) (∀ (h : G), Membership.mem s h → Eq (HAdd.hAdd h g) (HAdd.hAdd g h))","decl":"@[to_additive]\ntheorem mem_centralizer_iff {g : G} {s : Set G} : g ∈ centralizer s ↔ ∀ h ∈ s, h * g = g * h :=\n  Iff.rfl\n\n"}
{"name":"Subgroup.mem_centralizer_iff","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : Group G\ng : G\ns : Set G\n⊢ Iff (Membership.mem (Subgroup.centralizer s) g) (∀ (h : G), Membership.mem s h → Eq (HMul.hMul h g) (HMul.hMul g h))","decl":"@[to_additive]\ntheorem mem_centralizer_iff {g : G} {s : Set G} : g ∈ centralizer s ↔ ∀ h ∈ s, h * g = g * h :=\n  Iff.rfl\n\n"}
{"name":"Subgroup.mem_centralizer_iff_commutator_eq_one","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : Group G\ng : G\ns : Set G\n⊢ Iff (Membership.mem (Subgroup.centralizer s) g) (∀ (h : G), Membership.mem s h → Eq (HMul.hMul (HMul.hMul (HMul.hMul h g) (Inv.inv h)) (Inv.inv g)) 1)","decl":"@[to_additive]\ntheorem mem_centralizer_iff_commutator_eq_one {g : G} {s : Set G} :\n    g ∈ centralizer s ↔ ∀ h ∈ s, h * g * h⁻¹ * g⁻¹ = 1 := by\n  simp only [mem_centralizer_iff, mul_inv_eq_iff_eq_mul, one_mul]\n\n"}
{"name":"AddSubgroup.mem_centralizer_iff_commutator_eq_zero","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\ng : G\ns : Set G\n⊢ Iff (Membership.mem (AddSubgroup.centralizer s) g) (∀ (h : G), Membership.mem s h → Eq (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd h g) (Neg.neg h)) (Neg.neg g)) 0)","decl":"@[to_additive]\ntheorem mem_centralizer_iff_commutator_eq_one {g : G} {s : Set G} :\n    g ∈ centralizer s ↔ ∀ h ∈ s, h * g * h⁻¹ * g⁻¹ = 1 := by\n  simp only [mem_centralizer_iff, mul_inv_eq_iff_eq_mul, one_mul]\n\n"}
{"name":"Subgroup.mem_centralizer_singleton_iff","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : Group G\ng k : G\n⊢ Iff (Membership.mem (Subgroup.centralizer (Singleton.singleton g)) k) (Eq (HMul.hMul k g) (HMul.hMul g k))","decl":"@[to_additive]\nlemma mem_centralizer_singleton_iff {g k : G} :\n    k ∈ Subgroup.centralizer {g} ↔ k * g = g * k := by\n  simp only [mem_centralizer_iff, Set.mem_singleton_iff, forall_eq]\n  exact eq_comm\n\n"}
{"name":"AddSubgroup.mem_centralizer_singleton_iff","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\ng k : G\n⊢ Iff (Membership.mem (AddSubgroup.centralizer (Singleton.singleton g)) k) (Eq (HAdd.hAdd k g) (HAdd.hAdd g k))","decl":"@[to_additive]\nlemma mem_centralizer_singleton_iff {g k : G} :\n    k ∈ Subgroup.centralizer {g} ↔ k * g = g * k := by\n  simp only [mem_centralizer_iff, Set.mem_singleton_iff, forall_eq]\n  exact eq_comm\n\n"}
{"name":"AddSubgroup.centralizer_univ","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\n⊢ Eq (AddSubgroup.centralizer Set.univ) (AddSubgroup.center G)","decl":"@[to_additive]\ntheorem centralizer_univ : centralizer Set.univ = center G :=\n  SetLike.ext' (Set.centralizer_univ G)\n\n"}
{"name":"Subgroup.centralizer_univ","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : Group G\n⊢ Eq (Subgroup.centralizer Set.univ) (Subgroup.center G)","decl":"@[to_additive]\ntheorem centralizer_univ : centralizer Set.univ = center G :=\n  SetLike.ext' (Set.centralizer_univ G)\n\n"}
{"name":"Subgroup.le_centralizer_iff","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : Group G\nH K : Subgroup G\n⊢ Iff (LE.le H (Subgroup.centralizer ↑K)) (LE.le K (Subgroup.centralizer ↑H))","decl":"@[to_additive]\ntheorem le_centralizer_iff : H ≤ centralizer K ↔ K ≤ centralizer H :=\n  ⟨fun h x hx _y hy => (h hy x hx).symm, fun h x hx _y hy => (h hy x hx).symm⟩\n\n"}
{"name":"AddSubgroup.le_centralizer_iff","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\nH K : AddSubgroup G\n⊢ Iff (LE.le H (AddSubgroup.centralizer ↑K)) (LE.le K (AddSubgroup.centralizer ↑H))","decl":"@[to_additive]\ntheorem le_centralizer_iff : H ≤ centralizer K ↔ K ≤ centralizer H :=\n  ⟨fun h x hx _y hy => (h hy x hx).symm, fun h x hx _y hy => (h hy x hx).symm⟩\n\n"}
{"name":"AddSubgroup.center_le_centralizer","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\ns : Set G\n⊢ LE.le (AddSubgroup.center G) (AddSubgroup.centralizer s)","decl":"@[to_additive]\ntheorem center_le_centralizer (s) : center G ≤ centralizer s :=\n  Set.center_subset_centralizer s\n\n"}
{"name":"Subgroup.center_le_centralizer","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : Group G\ns : Set G\n⊢ LE.le (Subgroup.center G) (Subgroup.centralizer s)","decl":"@[to_additive]\ntheorem center_le_centralizer (s) : center G ≤ centralizer s :=\n  Set.center_subset_centralizer s\n\n"}
{"name":"Subgroup.centralizer_le","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : Group G\ns t : Set G\nh : HasSubset.Subset s t\n⊢ LE.le (Subgroup.centralizer t) (Subgroup.centralizer s)","decl":"@[to_additive]\ntheorem centralizer_le {s t : Set G} (h : s ⊆ t) : centralizer t ≤ centralizer s :=\n  Submonoid.centralizer_le h\n\n"}
{"name":"AddSubgroup.centralizer_le","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\ns t : Set G\nh : HasSubset.Subset s t\n⊢ LE.le (AddSubgroup.centralizer t) (AddSubgroup.centralizer s)","decl":"@[to_additive]\ntheorem centralizer_le {s t : Set G} (h : s ⊆ t) : centralizer t ≤ centralizer s :=\n  Submonoid.centralizer_le h\n\n"}
{"name":"AddSubgroup.centralizer_eq_top_iff_subset","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\ns : Set G\n⊢ Iff (Eq (AddSubgroup.centralizer s) Top.top) (HasSubset.Subset s ↑(AddSubgroup.center G))","decl":"@[to_additive (attr := simp)]\ntheorem centralizer_eq_top_iff_subset {s : Set G} : centralizer s = ⊤ ↔ s ⊆ center G :=\n  SetLike.ext'_iff.trans Set.centralizer_eq_top_iff_subset\n\n"}
{"name":"Subgroup.centralizer_eq_top_iff_subset","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : Group G\ns : Set G\n⊢ Iff (Eq (Subgroup.centralizer s) Top.top) (HasSubset.Subset s ↑(Subgroup.center G))","decl":"@[to_additive (attr := simp)]\ntheorem centralizer_eq_top_iff_subset {s : Set G} : centralizer s = ⊤ ↔ s ⊆ center G :=\n  SetLike.ext'_iff.trans Set.centralizer_eq_top_iff_subset\n\n"}
{"name":"AddSubgroup.map_centralizer_le_centralizer_image","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\nG' : Type u_2\ninst✝¹ : AddGroup G\ninst✝ : AddGroup G'\ns : Set G\nf : AddMonoidHom G G'\n⊢ LE.le (AddSubgroup.map f (AddSubgroup.centralizer s)) (AddSubgroup.centralizer (Set.image (⇑f) s))","decl":"@[to_additive]\ntheorem map_centralizer_le_centralizer_image (s : Set G) (f : G →* G') :\n    (Subgroup.centralizer s).map f ≤ Subgroup.centralizer (f '' s) := by\n  rintro - ⟨g, hg, rfl⟩ - ⟨h, hh, rfl⟩\n  rw [← map_mul, ← map_mul, hg h hh]\n\n"}
{"name":"Subgroup.map_centralizer_le_centralizer_image","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\nG' : Type u_2\ninst✝¹ : Group G\ninst✝ : Group G'\ns : Set G\nf : MonoidHom G G'\n⊢ LE.le (Subgroup.map f (Subgroup.centralizer s)) (Subgroup.centralizer (Set.image (⇑f) s))","decl":"@[to_additive]\ntheorem map_centralizer_le_centralizer_image (s : Set G) (f : G →* G') :\n    (Subgroup.centralizer s).map f ≤ Subgroup.centralizer (f '' s) := by\n  rintro - ⟨g, hg, rfl⟩ - ⟨h, hh, rfl⟩\n  rw [← map_mul, ← map_mul, hg h hh]\n\n"}
{"name":"Subgroup.Centralizer.characteristic","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : Group G\nH : Subgroup G\nhH : H.Characteristic\n⊢ (Subgroup.centralizer ↑H).Characteristic","decl":"@[to_additive]\ninstance Centralizer.characteristic [hH : H.Characteristic] :\n    (centralizer (H : Set G)).Characteristic := by\n  refine Subgroup.characteristic_iff_comap_le.mpr fun ϕ g hg h hh => ϕ.injective ?_\n  rw [map_mul, map_mul]\n  exact hg (ϕ h) (Subgroup.characteristic_iff_le_comap.mp hH ϕ hh)\n\n"}
{"name":"AddSubgroup.Centralizer.characteristic","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\nH : AddSubgroup G\nhH : H.Characteristic\n⊢ (AddSubgroup.centralizer ↑H).Characteristic","decl":"@[to_additive]\ninstance Centralizer.characteristic [hH : H.Characteristic] :\n    (centralizer (H : Set G)).Characteristic := by\n  refine Subgroup.characteristic_iff_comap_le.mpr fun ϕ g hg h hh => ϕ.injective ?_\n  rw [map_mul, map_mul]\n  exact hg (ϕ h) (Subgroup.characteristic_iff_le_comap.mp hH ϕ hh)\n\n"}
{"name":"AddSubgroup.le_centralizer_iff_isCommutative","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\nK : AddSubgroup G\n⊢ Iff (LE.le K (AddSubgroup.centralizer ↑K)) K.IsCommutative","decl":"@[to_additive]\ntheorem le_centralizer_iff_isCommutative : K ≤ centralizer K ↔ K.IsCommutative :=\n  ⟨fun h => ⟨⟨fun x y => Subtype.ext (h y.2 x x.2)⟩⟩,\n    fun h x hx y hy => congr_arg Subtype.val (h.1.1 ⟨y, hy⟩ ⟨x, hx⟩)⟩\n\n"}
{"name":"Subgroup.le_centralizer_iff_isCommutative","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : Group G\nK : Subgroup G\n⊢ Iff (LE.le K (Subgroup.centralizer ↑K)) K.IsCommutative","decl":"@[to_additive]\ntheorem le_centralizer_iff_isCommutative : K ≤ centralizer K ↔ K.IsCommutative :=\n  ⟨fun h => ⟨⟨fun x y => Subtype.ext (h y.2 x x.2)⟩⟩,\n    fun h x hx y hy => congr_arg Subtype.val (h.1.1 ⟨y, hy⟩ ⟨x, hx⟩)⟩\n\n"}
{"name":"Subgroup.le_centralizer","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : Group G\nH : Subgroup G\nh : H.IsCommutative\n⊢ LE.le H (Subgroup.centralizer ↑H)","decl":"@[to_additive]\ntheorem le_centralizer [h : H.IsCommutative] : H ≤ centralizer H :=\n  le_centralizer_iff_isCommutative.mpr h\n\n"}
{"name":"AddSubgroup.le_centralizer","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\nH : AddSubgroup G\nh : H.IsCommutative\n⊢ LE.le H (AddSubgroup.centralizer ↑H)","decl":"@[to_additive]\ntheorem le_centralizer [h : H.IsCommutative] : H ≤ centralizer H :=\n  le_centralizer_iff_isCommutative.mpr h\n\n"}
{"name":"Subgroup.closure_le_centralizer_centralizer","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : Group G\ns : Set G\n⊢ LE.le (Subgroup.closure s) (Subgroup.centralizer ↑(Subgroup.centralizer s))","decl":"variable {H} in\n@[to_additive]\nlemma closure_le_centralizer_centralizer (s : Set G) :\n    closure s ≤ centralizer (centralizer s) :=\n  closure_le _ |>.mpr Set.subset_centralizer_centralizer\n\n"}
{"name":"AddSubgroup.closure_le_centralizer_centralizer","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\ns : Set G\n⊢ LE.le (AddSubgroup.closure s) (AddSubgroup.centralizer ↑(AddSubgroup.centralizer s))","decl":"variable {H} in\n@[to_additive]\nlemma closure_le_centralizer_centralizer (s : Set G) :\n    closure s ≤ centralizer (centralizer s) :=\n  closure_le _ |>.mpr Set.subset_centralizer_centralizer\n\n"}
{"name":"Subgroup.instMulDistribMulActionSubtypeMemNormalizer_smul_coe","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : Group G\nH : Subgroup G\ng : Subtype fun x => Membership.mem H.normalizer x\nh : Subtype fun x => Membership.mem H x\n⊢ Eq (↑(SMul.smul g h)) (HMul.hMul (HMul.hMul ↑g ↑h) ↑(Inv.inv g))","decl":"/-- The conjugation action of N(H) on H. -/\n@[simps]\ninstance : MulDistribMulAction H.normalizer H where\n  smul g h := ⟨g * h * g⁻¹, (g.2 h).mp h.2⟩\n  one_smul g := by simp [HSMul.hSMul]\n  mul_smul := by simp [HSMul.hSMul, mul_assoc]\n  smul_one := by simp [HSMul.hSMul]\n  smul_mul := by simp [HSMul.hSMul]\n\n"}
{"name":"Subgroup.normalizerMonoidHom_apply_symm_apply_coe","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : Group G\nH : Subgroup G\nx : Subtype fun x => Membership.mem H.normalizer x\na✝ : Subtype fun x => Membership.mem H x\n⊢ Eq (↑((MulEquiv.symm (H.normalizerMonoidHom x)) a✝)) (HMul.hMul (HMul.hMul (Inv.inv ↑x) ↑a✝) ↑x)","decl":"/-- The homomorphism N(H) → Aut(H) with kernel C(H). -/\n@[simps!]\ndef normalizerMonoidHom : H.normalizer →* MulAut H :=\n  MulDistribMulAction.toMulAut H.normalizer H\n\n"}
{"name":"Subgroup.normalizerMonoidHom_apply_apply_coe","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : Group G\nH : Subgroup G\nx : Subtype fun x => Membership.mem H.normalizer x\na✝ : Subtype fun x => Membership.mem H x\n⊢ Eq (↑((H.normalizerMonoidHom x) a✝)) (HMul.hMul (HMul.hMul ↑x ↑a✝) (Inv.inv ↑x))","decl":"/-- The homomorphism N(H) → Aut(H) with kernel C(H). -/\n@[simps!]\ndef normalizerMonoidHom : H.normalizer →* MulAut H :=\n  MulDistribMulAction.toMulAut H.normalizer H\n\n"}
{"name":"Subgroup.normalizerMonoidHom_ker","module":"Mathlib.GroupTheory.Subgroup.Centralizer","initialProofState":"G : Type u_1\ninst✝ : Group G\nH : Subgroup G\n⊢ Eq H.normalizerMonoidHom.ker ((Subgroup.centralizer ↑H).subgroupOf H.normalizer)","decl":"theorem normalizerMonoidHom_ker :\n    H.normalizerMonoidHom.ker = (Subgroup.centralizer H).subgroupOf H.normalizer := by\n  simp [Subgroup.ext_iff, DFunLike.ext_iff, Subtype.ext_iff,\n    mem_subgroupOf, mem_centralizer_iff, eq_mul_inv_iff_mul_eq, eq_comm]\n\n"}
