{"name":"DirichletCharacter.isMultiplicative_zetaMul","module":"Mathlib.NumberTheory.LSeries.Nonvanishing","initialProofState":"N : Nat\nχ : DirichletCharacter Complex N\n⊢ χ.zetaMul.IsMultiplicative","decl":"/-- The arithmetic function `zetaMul χ` is multiplicative. -/\nlemma isMultiplicative_zetaMul (χ : DirichletCharacter ℂ N) : χ.zetaMul.IsMultiplicative :=\n  isMultiplicative_zeta.natCast.mul <| isMultiplicative_toArithmeticFunction χ\n\n"}
{"name":"DirichletCharacter.LSeriesSummable_zetaMul","module":"Mathlib.NumberTheory.LSeries.Nonvanishing","initialProofState":"N : Nat\nχ : DirichletCharacter Complex N\ns : Complex\nhs : LT.lt 1 s.re\n⊢ LSeriesSummable (⇑χ.zetaMul) s","decl":"lemma LSeriesSummable_zetaMul (χ : DirichletCharacter ℂ N) {s : ℂ} (hs : 1 < s.re) :\n    LSeriesSummable χ.zetaMul s := by\n  refine ArithmeticFunction.LSeriesSummable_mul (LSeriesSummable_zeta_iff.mpr hs) <|\n    LSeriesSummable_of_bounded_of_one_lt_re (m := 1) (fun n hn ↦ ?_) hs\n  simpa only [toArithmeticFunction, coe_mk, hn, ↓reduceIte, ← Complex.norm_eq_abs]\n  using norm_le_one χ _\n\n"}
{"name":"DirichletCharacter.zetaMul_prime_pow_nonneg","module":"Mathlib.NumberTheory.LSeries.Nonvanishing","initialProofState":"N : Nat\nχ : DirichletCharacter Complex N\nhχ : Eq (HPow.hPow χ 2) 1\np : Nat\nhp : Nat.Prime p\nk : Nat\n⊢ LE.le 0 (χ.zetaMul (HPow.hPow p k))","decl":"lemma zetaMul_prime_pow_nonneg {χ : DirichletCharacter ℂ N} (hχ : χ ^ 2 = 1) {p : ℕ}\n    (hp : p.Prime) (k : ℕ) :\n    0 ≤ zetaMul χ (p ^ k) := by\n  simp only [zetaMul, toArithmeticFunction, coe_zeta_mul_apply, coe_mk,\n    Nat.sum_divisors_prime_pow hp, pow_eq_zero_iff', hp.ne_zero, ne_eq, false_and, ↓reduceIte,\n    Nat.cast_pow, map_pow]\n  rcases MulChar.isQuadratic_iff_sq_eq_one.mpr hχ p with h | h | h\n  · refine Finset.sum_nonneg fun i _ ↦ ?_\n    simp only [h, le_refl, pow_nonneg]\n  · refine Finset.sum_nonneg fun i _ ↦ ?_\n    simp only [h, one_pow, zero_le_one]\n  · simp only [h, neg_one_geom_sum]\n    split_ifs\n    exacts [le_rfl, zero_le_one]\n\n"}
{"name":"DirichletCharacter.zetaMul_nonneg","module":"Mathlib.NumberTheory.LSeries.Nonvanishing","initialProofState":"N : Nat\nχ : DirichletCharacter Complex N\nhχ : Eq (HPow.hPow χ 2) 1\nn : Nat\n⊢ LE.le 0 (χ.zetaMul n)","decl":"/-- `zetaMul χ` takes nonnegative real values when `χ` is a quadratic character. -/\nlemma zetaMul_nonneg {χ : DirichletCharacter ℂ N} (hχ : χ ^ 2 = 1) (n : ℕ) :\n    0 ≤ zetaMul χ n := by\n  rcases eq_or_ne n 0 with rfl | hn\n  · simp only [ArithmeticFunction.map_zero, le_refl]\n  · simpa only [χ.isMultiplicative_zetaMul.multiplicative_factorization _ hn] using\n      Finset.prod_nonneg\n        fun p hp ↦ zetaMul_prime_pow_nonneg hχ (Nat.prime_of_mem_primeFactors hp) _\n\n/-\n### \"Bad\" Dirichlet characters\n\nOur goal is to show that `L(χ, 1) ≠ 0` when `χ` is a (nontrivial) quadratic Dirichlet character.\nTo do that, we package the contradictory properties in a (private) structure\n`DirichletCharacter.BadChar` and derive further statements eventually leading to a contradiction.\n\nThis entire section is private.\n-/\n\n"}
{"name":"DirichletCharacter.summable_neg_log_one_sub_mul_prime_cpow","module":"Mathlib.NumberTheory.LSeries.Nonvanishing","initialProofState":"N : Nat\nχ : DirichletCharacter Complex N\ns : Complex\nhs : LT.lt 1 s.re\n⊢ Summable fun p => Neg.neg (Complex.log (HSub.hSub 1 (HMul.hMul (χ ↑↑p) (HPow.hPow (↑↑p) (Neg.neg s)))))","decl":"/-- The logarithms of the Euler factors of a Dirichlet L-series form a summable sequence. -/\nlemma summable_neg_log_one_sub_mul_prime_cpow {s : ℂ} (hs : 1 < s.re) :\n    Summable fun p : Nat.Primes ↦ -log (1 - χ p * (p : ℂ) ^ (-s)) := by\n  have (p : Nat.Primes) : ‖χ p * (p : ℂ) ^ (-s)‖ ≤ (p : ℝ) ^ (-s).re := by\n    simpa only [norm_mul, norm_natCast_cpow_of_re_ne_zero _ <| re_neg_ne_zero_of_one_lt_re hs]\n      using mul_le_of_le_one_left (by positivity) (χ.norm_le_one _)\n  refine (Nat.Primes.summable_rpow.mpr ?_).of_nonneg_of_le (fun _ ↦ norm_nonneg _) this\n    |>.of_norm.clog_one_sub.neg\n  simp only [neg_re, neg_lt_neg_iff, hs]\n\n"}
{"name":"DirichletCharacter.norm_LSeries_product_ge_one","module":"Mathlib.NumberTheory.LSeries.Nonvanishing","initialProofState":"N : Nat\nχ : DirichletCharacter Complex N\nx : Real\nhx : LT.lt 0 x\ny : Real\n⊢ GE.ge (Norm.norm (HMul.hMul (HMul.hMul (HPow.hPow (LSeries (fun n => 1 ↑n) (HAdd.hAdd 1 ↑x)) 3) (HPow.hPow (LSeries (fun n => χ ↑n) (HAdd.hAdd (HAdd.hAdd 1 ↑x) (HMul.hMul Complex.I ↑y))) 4)) (LSeries (fun n => (HPow.hPow χ 2) ↑n) (HAdd.hAdd (HAdd.hAdd 1 ↑x) (HMul.hMul (HMul.hMul 2 Complex.I) ↑y))))) 1","decl":"open scoped LSeries.notation in\n/-- For positive `x` and nonzero `y` and a Dirichlet character `χ` we have that\n`|L(χ^0, 1 + x)^3 L(χ, 1 + x + I * y)^4 L(χ^2, 1 + x + 2 * I * y)| ≥ 1. -/\nlemma norm_LSeries_product_ge_one {x : ℝ} (hx : 0 < x) (y : ℝ) :\n    ‖L ↗(1 : DirichletCharacter ℂ N) (1 + x) ^ 3 * L ↗χ (1 + x + I * y) ^ 4 *\n      L ↗(χ ^ 2 :) (1 + x + 2 * I * y)‖ ≥ 1 := by\n  have ⟨h₀, h₁, h₂⟩ := one_lt_re_one_add hx y\n  have H₀ := summable_neg_log_one_sub_mul_prime_cpow (N := N) 1 h₀\n  have H₁ := summable_neg_log_one_sub_mul_prime_cpow χ h₁\n  have H₂ := summable_neg_log_one_sub_mul_prime_cpow (χ ^ 2) h₂\n  have hsum₀ := (hasSum_re H₀.hasSum).summable.mul_left 3\n  have hsum₁ := (hasSum_re H₁.hasSum).summable.mul_left 4\n  have hsum₂ := (hasSum_re H₂.hasSum).summable\n  rw [← LSeries_eulerProduct_exp_log _ h₀, ← LSeries_eulerProduct_exp_log χ h₁,\n    ← LSeries_eulerProduct_exp_log _ h₂]\n  simp only [← exp_nat_mul, Nat.cast_ofNat, ← exp_add, norm_eq_abs, abs_exp, add_re, mul_re,\n    re_ofNat, im_ofNat, zero_mul, sub_zero, Real.one_le_exp_iff]\n  rw [re_tsum H₀, re_tsum H₁, re_tsum H₂, ← tsum_mul_left, ← tsum_mul_left,\n    ← tsum_add hsum₀ hsum₁, ← tsum_add (hsum₀.add hsum₁) hsum₂]\n  simpa only [neg_add_rev, neg_re, mul_neg, χ.pow_apply' two_ne_zero, ge_iff_le, add_re, one_re,\n    ofReal_re, ofReal_add, ofReal_one] using\n      tsum_nonneg fun (p : Nat.Primes) ↦ χ.re_log_comb_nonneg p.prop.two_le h₀ y\n\n"}
{"name":"DirichletCharacter.norm_LFunction_product_ge_one","module":"Mathlib.NumberTheory.LSeries.Nonvanishing","initialProofState":"N : Nat\nχ : DirichletCharacter Complex N\ninst✝ : NeZero N\nx : Real\nhx : LT.lt 0 x\ny : Real\n⊢ GE.ge (Norm.norm (HMul.hMul (HMul.hMul (HPow.hPow (DirichletCharacter.LFunctionTrivChar N (HAdd.hAdd 1 ↑x)) 3) (HPow.hPow (DirichletCharacter.LFunction χ (HAdd.hAdd (HAdd.hAdd 1 ↑x) (HMul.hMul Complex.I ↑y))) 4)) (DirichletCharacter.LFunction (HPow.hPow χ 2) (HAdd.hAdd (HAdd.hAdd 1 ↑x) (HMul.hMul (HMul.hMul 2 Complex.I) ↑y))))) 1","decl":"/-- A variant of `DirichletCharacter.norm_LSeries_product_ge_one` in terms of the L-functions. -/\nlemma norm_LFunction_product_ge_one {x : ℝ} (hx : 0 < x) (y : ℝ) :\n    ‖LFunctionTrivChar N (1 + x) ^ 3 * LFunction χ (1 + x + I * y) ^ 4 *\n      LFunction (χ ^ 2) (1 + x + 2 * I * y)‖ ≥ 1 := by\n  have ⟨h₀, h₁, h₂⟩ := one_lt_re_one_add hx y\n  rw [LFunctionTrivChar, DirichletCharacter.LFunction_eq_LSeries 1 h₀,\n    χ.LFunction_eq_LSeries h₁, (χ ^ 2).LFunction_eq_LSeries h₂]\n  exact norm_LSeries_product_ge_one χ hx y\n\n"}
{"name":"DirichletCharacter.LFunctionTrivChar_isBigO_near_one_horizontal","module":"Mathlib.NumberTheory.LSeries.Nonvanishing","initialProofState":"N : Nat\ninst✝ : NeZero N\n⊢ Asymptotics.IsBigO (nhdsWithin 0 (Set.Ioi 0)) (fun x => DirichletCharacter.LFunctionTrivChar N (HAdd.hAdd 1 ↑x)) fun x => HDiv.hDiv 1 ↑x","decl":"lemma LFunctionTrivChar_isBigO_near_one_horizontal :\n    (fun x : ℝ ↦ LFunctionTrivChar N (1 + x)) =O[𝓝[>] 0] fun x ↦ (1 : ℂ) / x := by\n  have : (fun w : ℂ ↦ LFunctionTrivChar N (1 + w)) =O[𝓝[≠] 0] (1 / ·) := by\n    have H : Tendsto (fun w ↦ w * LFunctionTrivChar N (1 + w)) (𝓝[≠] 0)\n        (𝓝 <| ∏ p ∈ N.primeFactors, (1 - (p : ℂ)⁻¹)) := by\n      convert (LFunctionTrivChar_residue_one (N := N)).comp (f := fun w ↦ 1 + w) ?_ using 1\n      · simp only [Function.comp_def, add_sub_cancel_left]\n      · simpa only [tendsto_iff_comap, Homeomorph.coe_addLeft, add_zero, map_le_iff_le_comap] using\n          ((Homeomorph.addLeft (1 : ℂ)).map_punctured_nhds_eq 0).le\n    exact (isBigO_mul_iff_isBigO_div eventually_mem_nhdsWithin).mp <| H.isBigO_one ℂ\n  exact (isBigO_comp_ofReal_nhds_ne this).mono <| nhdsGT_le_nhdsNE 0\n\n"}
{"name":"DirichletCharacter.LFunction_isBigO_horizontal","module":"Mathlib.NumberTheory.LSeries.Nonvanishing","initialProofState":"N : Nat\nχ : DirichletCharacter Complex N\ninst✝ : NeZero N\ny : Real\nhy : Or (Ne y 0) (Ne χ 1)\n⊢ Asymptotics.IsBigO (nhdsWithin 0 (Set.Ioi 0)) (fun x => DirichletCharacter.LFunction χ (HAdd.hAdd (HAdd.hAdd 1 ↑x) (HMul.hMul Complex.I ↑y))) fun x => 1","decl":"lemma LFunction_isBigO_horizontal {y : ℝ} (hy : y ≠ 0 ∨ χ ≠ 1) :\n    (fun x : ℝ ↦ LFunction χ (1 + x + I * y)) =O[𝓝[>] 0] fun _ ↦ (1 : ℂ) := by\n  refine IsBigO.mono ?_ nhdsWithin_le_nhds\n  simp_rw [add_comm (1 : ℂ), add_assoc]\n  have := (χ.differentiableAt_LFunction _ <| one_add_I_mul_ne_one_or χ hy).continuousAt\n  rw [← zero_add (1 + _)] at this\n  exact this.comp (f := fun x : ℝ ↦ x + (1 + I * y)) (x := 0) (by fun_prop) |>.tendsto.isBigO_one ℂ\n\n"}
{"name":"DirichletCharacter.LFunction_ne_zero_of_re_eq_one","module":"Mathlib.NumberTheory.LSeries.Nonvanishing","initialProofState":"N : Nat\nχ : DirichletCharacter Complex N\ninst✝ : NeZero N\ns : Complex\nhs : Eq s.re 1\nhχs : Or (Ne χ 1) (Ne s 1)\n⊢ Ne (DirichletCharacter.LFunction χ s) 0","decl":"/-- If `χ` is a Dirichlet character, then `L(χ, s)` does not vanish when `s.re = 1`\nexcept when `χ` is trivial and `s = 1` (then `L(χ, s)` has a simple pole at `s = 1`). -/\ntheorem LFunction_ne_zero_of_re_eq_one {s : ℂ} (hs : s.re = 1) (hχs : χ ≠ 1 ∨ s ≠ 1) :\n    LFunction χ s ≠ 0 := by\n  by_cases h : χ ^ 2 = 1 ∧ s = 1\n  · exact h.2 ▸ LFunction_apply_one_ne_zero_of_quadratic h.1 <| hχs.neg_resolve_right h.2\n  · have hs' : s = 1 + I * s.im := by\n      conv_lhs => rw [← re_add_im s, hs, ofReal_one, mul_comm]\n    rw [not_and_or, ← ne_eq, ← ne_eq, hs', add_right_ne_self] at h\n    replace h : χ ^ 2 ≠ 1 ∨ s.im ≠ 0 :=\n      h.imp_right (fun H ↦ by exact_mod_cast right_ne_zero_of_mul H)\n    exact hs'.symm ▸ χ.LFunction_ne_zero_of_not_quadratic_or_ne_one h\n\n"}
{"name":"DirichletCharacter.LFunction_ne_zero_of_one_le_re","module":"Mathlib.NumberTheory.LSeries.Nonvanishing","initialProofState":"N : Nat\nχ : DirichletCharacter Complex N\ninst✝ : NeZero N\ns : Complex\nhχs : Or (Ne χ 1) (Ne s 1)\nhs : LE.le 1 s.re\n⊢ Ne (DirichletCharacter.LFunction χ s) 0","decl":"/-- If `χ` is a Dirichlet character, then `L(χ, s)` does not vanish for `s.re ≥ 1`\nexcept when `χ` is trivial and `s = 1` (then `L(χ, s)` has a simple pole at `s = 1`). -/\ntheorem LFunction_ne_zero_of_one_le_re ⦃s : ℂ⦄ (hχs : χ ≠ 1 ∨ s ≠ 1) (hs : 1 ≤ s.re) :\n    LFunction χ s ≠ 0 :=\n  hs.eq_or_lt.casesOn (fun hs ↦ LFunction_ne_zero_of_re_eq_one χ hs.symm hχs)\n    fun hs ↦ LFunction_eq_LSeries χ hs ▸ LSeries_ne_zero_of_one_lt_re χ hs\n\n-- Interesting special case:\n"}
{"name":"DirichletCharacter.LFunction_apply_one_ne_zero","module":"Mathlib.NumberTheory.LSeries.Nonvanishing","initialProofState":"N : Nat\nχ : DirichletCharacter Complex N\ninst✝ : NeZero N\nhχ : Ne χ 1\n⊢ Ne (DirichletCharacter.LFunction χ 1) 0","decl":"variable {χ} in\n/-- The L-function of a nontrivial Dirichlet character does not vanish at `s = 1`. -/\ntheorem LFunction_apply_one_ne_zero (hχ : χ ≠ 1) : LFunction χ 1 ≠ 0 :=\n  LFunction_ne_zero_of_one_le_re χ (.inl hχ) <| one_re ▸ le_rfl\n\n"}
{"name":"riemannZeta_ne_zero_of_one_le_re","module":"Mathlib.NumberTheory.LSeries.Nonvanishing","initialProofState":"s : Complex\nhs : LE.le 1 s.re\n⊢ Ne (riemannZeta s) 0","decl":"/-- The Riemann Zeta Function does not vanish on the closed half-plane `re s ≥ 1`.\n(Note that the value at `s = 1` is a junk value, which happens to be nonzero.) -/\nlemma _root_.riemannZeta_ne_zero_of_one_le_re ⦃s : ℂ⦄ (hs : 1 ≤ s.re) :\n    riemannZeta s ≠ 0 := by\n  rcases eq_or_ne s 1 with rfl | hs₀\n  · exact riemannZeta_one_ne_zero\n  · exact LFunction_modOne_eq (χ := 1) ▸ LFunction_ne_zero_of_one_le_re _ (.inr hs₀) hs\n\n"}
