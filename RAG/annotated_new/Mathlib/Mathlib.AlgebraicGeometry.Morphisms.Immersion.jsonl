{"name":"AlgebraicGeometry.isImmersion_iff","module":"Mathlib.AlgebraicGeometry.Morphisms.Immersion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\n⊢ Iff (AlgebraicGeometry.IsImmersion f) (And (AlgebraicGeometry.IsPreimmersion f) (IsLocallyClosed (Set.range ⇑f.base)))","decl":"/-- A morphism of schemes `f : X ⟶ Y` is an immersion if\n1. the underlying map of topological spaces is an embedding\n2. the range of the map is locally closed\n3. the induced morphisms of stalks are all surjective. -/\n@[mk_iff]\nclass IsImmersion (f : X ⟶ Y) extends IsPreimmersion f : Prop where\n  isLocallyClosed_range : IsLocallyClosed (Set.range f.base)\n\n"}
{"name":"AlgebraicGeometry.IsImmersion.isLocallyClosed_range","module":"Mathlib.AlgebraicGeometry.Morphisms.Immersion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\nself : AlgebraicGeometry.IsImmersion f\n⊢ IsLocallyClosed (Set.range ⇑f.base)","decl":"/-- A morphism of schemes `f : X ⟶ Y` is an immersion if\n1. the underlying map of topological spaces is an embedding\n2. the range of the map is locally closed\n3. the induced morphisms of stalks are all surjective. -/\n@[mk_iff]\nclass IsImmersion (f : X ⟶ Y) extends IsPreimmersion f : Prop where\n  isLocallyClosed_range : IsLocallyClosed (Set.range f.base)\n\n"}
{"name":"AlgebraicGeometry.IsImmersion.toIsPreimmersion","module":"Mathlib.AlgebraicGeometry.Morphisms.Immersion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\nself : AlgebraicGeometry.IsImmersion f\n⊢ AlgebraicGeometry.IsPreimmersion f","decl":"/-- A morphism of schemes `f : X ⟶ Y` is an immersion if\n1. the underlying map of topological spaces is an embedding\n2. the range of the map is locally closed\n3. the induced morphisms of stalks are all surjective. -/\n@[mk_iff]\nclass IsImmersion (f : X ⟶ Y) extends IsPreimmersion f : Prop where\n  isLocallyClosed_range : IsLocallyClosed (Set.range f.base)\n\n"}
{"name":"AlgebraicGeometry.Scheme.Hom.isLocallyClosed_range","module":"Mathlib.AlgebraicGeometry.Morphisms.Immersion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : X.Hom Y\ninst✝ : AlgebraicGeometry.IsImmersion f\n⊢ IsLocallyClosed (Set.range ⇑f.base)","decl":"lemma Scheme.Hom.isLocallyClosed_range (f : X.Hom Y) [IsImmersion f] :\n    IsLocallyClosed (Set.range f.base) :=\n  IsImmersion.isLocallyClosed_range\n\n"}
{"name":"AlgebraicGeometry.Scheme.Hom.liftCoborder_ι","module":"Mathlib.AlgebraicGeometry.Morphisms.Immersion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : X.Hom Y\ninst✝ : AlgebraicGeometry.IsImmersion f\n⊢ Eq (CategoryTheory.CategoryStruct.comp f.liftCoborder f.coborderRange.ι) f","decl":"/--\nAny (locally-closed) immersion can be factored into\na closed immersion followed by a (dominant) open immersion.\n-/\n@[reassoc (attr := simp)]\nlemma Scheme.Hom.liftCoborder_ι (f : X.Hom Y) [IsImmersion f] :\n    f.liftCoborder ≫ f.coborderRange.ι = f :=\n  IsOpenImmersion.lift_fac _ _ _\n\n"}
{"name":"AlgebraicGeometry.Scheme.Hom.liftCoborder_ι_assoc","module":"Mathlib.AlgebraicGeometry.Morphisms.Immersion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : X.Hom Y\ninst✝ : AlgebraicGeometry.IsImmersion f\nZ : AlgebraicGeometry.Scheme\nh : Quiver.Hom Y Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp f.liftCoborder (CategoryTheory.CategoryStruct.comp f.coborderRange.ι h)) (CategoryTheory.CategoryStruct.comp f h)","decl":"/--\nAny (locally-closed) immersion can be factored into\na closed immersion followed by a (dominant) open immersion.\n-/\n@[reassoc (attr := simp)]\nlemma Scheme.Hom.liftCoborder_ι (f : X.Hom Y) [IsImmersion f] :\n    f.liftCoborder ≫ f.coborderRange.ι = f :=\n  IsOpenImmersion.lift_fac _ _ _\n\n"}
{"name":"AlgebraicGeometry.instIsClosedImmersionLiftCoborder","module":"Mathlib.AlgebraicGeometry.Morphisms.Immersion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\ninst✝ : AlgebraicGeometry.IsImmersion f\n⊢ AlgebraicGeometry.IsClosedImmersion (AlgebraicGeometry.Scheme.Hom.liftCoborder f)","decl":"instance [IsImmersion f] : IsClosedImmersion f.liftCoborder := by\n  have : IsPreimmersion (f.liftCoborder ≫ f.coborderRange.ι) := by\n    simp only [Scheme.Hom.liftCoborder_ι]; infer_instance\n  have : IsPreimmersion f.liftCoborder := .of_comp f.liftCoborder f.coborderRange.ι\n  refine .of_isPreimmersion _ ?_\n  convert isClosed_preimage_val_coborder\n  apply Set.image_injective.mpr f.coborderRange.ι.isEmbedding.injective\n  rw [← Set.range_comp, ← TopCat.coe_comp, ← Scheme.comp_base, f.liftCoborder_ι]\n  exact (Set.image_preimage_eq_of_subset (by simpa using subset_coborder)).symm\n\n"}
{"name":"AlgebraicGeometry.instIsDominantιCoborderRange","module":"Mathlib.AlgebraicGeometry.Morphisms.Immersion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\ninst✝ : AlgebraicGeometry.IsImmersion f\n⊢ AlgebraicGeometry.IsDominant (AlgebraicGeometry.Scheme.Hom.coborderRange f).ι","decl":"instance [IsImmersion f] : IsDominant f.coborderRange.ι := by\n  rw [isDominant_iff, DenseRange, Scheme.Opens.range_ι]\n  exact dense_coborder\n\n"}
{"name":"AlgebraicGeometry.isImmersion_eq_inf","module":"Mathlib.AlgebraicGeometry.Morphisms.Immersion","initialProofState":"⊢ Eq (@AlgebraicGeometry.IsImmersion) (Min.min (@AlgebraicGeometry.IsPreimmersion) (AlgebraicGeometry.topologically fun {x x_1} x_2 x_3 f => IsLocallyClosed (Set.range f)))","decl":"lemma isImmersion_eq_inf : @IsImmersion = (@IsPreimmersion ⊓\n    topologically fun {_ _} _ _ f ↦ IsLocallyClosed (Set.range f) : MorphismProperty Scheme) := by\n  ext; exact isImmersion_iff _\n\n"}
{"name":"AlgebraicGeometry.IsImmersion.instIsLocalAtTarget","module":"Mathlib.AlgebraicGeometry.Morphisms.Immersion","initialProofState":"⊢ AlgebraicGeometry.IsLocalAtTarget @AlgebraicGeometry.IsImmersion","decl":"instance : IsLocalAtTarget @IsImmersion := by\n  suffices IsLocalAtTarget (topologically fun {X Y} _ _ f ↦ IsLocallyClosed (Set.range f)) from\n    isImmersion_eq_inf ▸ inferInstance\n  apply (config := { allowSynthFailures := true }) topologically_isLocalAtTarget'\n  · refine { precomp := ?_, postcomp := ?_ }\n    · intro X Y Z i hi f hf\n      replace hi : IsIso i := hi\n      show IsLocallyClosed _\n      simpa only [Scheme.comp_coeBase, TopCat.coe_comp, Set.range_comp,\n        Set.range_eq_univ.mpr i.surjective, Set.image_univ]\n    · intro X Y Z i hi f hf\n      replace hi : IsIso i := hi\n      show IsLocallyClosed _\n      simp only [Scheme.comp_coeBase, TopCat.coe_comp, Set.range_comp]\n      refine hf.image i.homeomorph.isInducing ?_\n      rw [Set.range_eq_univ.mpr i.surjective]\n      exact isOpen_univ.isLocallyClosed\n  · simp_rw [Set.range_restrictPreimage]\n    exact fun _ _ _ e _ ↦ isLocallyClosed_iff_coe_preimage_of_iSup_eq_top e _\n\n"}
{"name":"AlgebraicGeometry.IsImmersion.instOfIsOpenImmersion","module":"Mathlib.AlgebraicGeometry.Morphisms.Immersion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\ninst✝ : AlgebraicGeometry.IsOpenImmersion f\n⊢ AlgebraicGeometry.IsImmersion f","decl":"instance (priority := 900) {X Y : Scheme} (f : X ⟶ Y) [IsOpenImmersion f] : IsImmersion f where\n  isLocallyClosed_range := f.isOpenEmbedding.2.isLocallyClosed\n\n"}
{"name":"AlgebraicGeometry.IsImmersion.instOfIsClosedImmersion","module":"Mathlib.AlgebraicGeometry.Morphisms.Immersion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\ninst✝ : AlgebraicGeometry.IsClosedImmersion f\n⊢ AlgebraicGeometry.IsImmersion f","decl":"instance (priority := 900) {X Y : Scheme} (f : X ⟶ Y) [IsClosedImmersion f] : IsImmersion f where\n  isLocallyClosed_range := f.isClosedEmbedding.2.isLocallyClosed\n\n"}
{"name":"AlgebraicGeometry.IsImmersion.instIsMultiplicativeScheme","module":"Mathlib.AlgebraicGeometry.Morphisms.Immersion","initialProofState":"⊢ CategoryTheory.MorphismProperty.IsMultiplicative @AlgebraicGeometry.IsImmersion","decl":"instance : MorphismProperty.IsMultiplicative @IsImmersion where\n  id_mem _ := inferInstance\n  comp_mem {X Y Z} f g hf hg := by\n    refine { __ := inferInstanceAs (IsPreimmersion (f ≫ g)), isLocallyClosed_range := ?_ }\n    simp only [Scheme.comp_coeBase, TopCat.coe_comp, Set.range_comp]\n    exact f.isLocallyClosed_range.image g.isEmbedding.isInducing g.isLocallyClosed_range\n\n"}
{"name":"AlgebraicGeometry.IsImmersion.comp","module":"Mathlib.AlgebraicGeometry.Morphisms.Immersion","initialProofState":"X Y Z : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\ng : Quiver.Hom Y Z\ninst✝¹ : AlgebraicGeometry.IsImmersion f\ninst✝ : AlgebraicGeometry.IsImmersion g\n⊢ AlgebraicGeometry.IsImmersion (CategoryTheory.CategoryStruct.comp f g)","decl":"instance comp {X Y Z : Scheme} (f : X ⟶ Y) (g : Y ⟶ Z) [IsImmersion f]\n    [IsImmersion g] : IsImmersion (f ≫ g) :=\n  MorphismProperty.IsStableUnderComposition.comp_mem f g inferInstance inferInstance\n\n"}
{"name":"AlgebraicGeometry.IsImmersion.isImmersion_iff_exists","module":"Mathlib.AlgebraicGeometry.Morphisms.Immersion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\n⊢ Iff (AlgebraicGeometry.IsImmersion f) (Exists fun Z => Exists fun g₁ => Exists fun g₂ => And (AlgebraicGeometry.IsClosedImmersion g₁) (And (AlgebraicGeometry.IsOpenImmersion g₂) (Eq (CategoryTheory.CategoryStruct.comp g₁ g₂) f)))","decl":"variable {f} in\n/--\nA morphism is a (locally-closed) immersion if and only if it can be factored into\na closed immersion followed by an open immersion.\n-/\nlemma isImmersion_iff_exists : IsImmersion f ↔ ∃ (Z : Scheme) (g₁ : X ⟶ Z) (g₂ : Z ⟶ Y),\n    IsClosedImmersion g₁ ∧ IsOpenImmersion g₂ ∧ g₁ ≫ g₂ = f :=\n  ⟨fun _ ↦ ⟨_, f.liftCoborder, f.coborderRange.ι, inferInstance, inferInstance, f.liftCoborder_ι⟩,\n    fun ⟨_, _, _, _, _, e⟩ ↦ e ▸ inferInstance⟩\n\n"}
{"name":"AlgebraicGeometry.IsImmersion.of_comp","module":"Mathlib.AlgebraicGeometry.Morphisms.Immersion","initialProofState":"X Y Z : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\ng : Quiver.Hom Y Z\ninst✝¹ : AlgebraicGeometry.IsImmersion g\ninst✝ : AlgebraicGeometry.IsImmersion (CategoryTheory.CategoryStruct.comp f g)\n⊢ AlgebraicGeometry.IsImmersion f","decl":"theorem of_comp {X Y Z : Scheme} (f : X ⟶ Y) (g : Y ⟶ Z) [IsImmersion g]\n    [IsImmersion (f ≫ g)] : IsImmersion f where\n  __ := IsPreimmersion.of_comp f g\n  isLocallyClosed_range := by\n    rw [← Set.preimage_image_eq (Set.range _) g.isEmbedding.injective]\n    have := (f ≫ g).isLocallyClosed_range.preimage g.base.2\n    simpa only [Scheme.comp_coeBase, TopCat.coe_comp, Set.range_comp] using this\n\n"}
{"name":"AlgebraicGeometry.IsImmersion.comp_iff","module":"Mathlib.AlgebraicGeometry.Morphisms.Immersion","initialProofState":"X Y Z : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\ng : Quiver.Hom Y Z\ninst✝ : AlgebraicGeometry.IsImmersion g\n⊢ Iff (AlgebraicGeometry.IsImmersion (CategoryTheory.CategoryStruct.comp f g)) (AlgebraicGeometry.IsImmersion f)","decl":"theorem comp_iff {X Y Z : Scheme} (f : X ⟶ Y) (g : Y ⟶ Z) [IsImmersion g] :\n    IsImmersion (f ≫ g) ↔ IsImmersion f :=\n  ⟨fun _ ↦ of_comp f g, fun _ ↦ inferInstance⟩\n\n"}
{"name":"AlgebraicGeometry.IsImmersion.isStableUnderBaseChange","module":"Mathlib.AlgebraicGeometry.Morphisms.Immersion","initialProofState":"⊢ CategoryTheory.MorphismProperty.IsStableUnderBaseChange @AlgebraicGeometry.IsImmersion","decl":"instance isStableUnderBaseChange : MorphismProperty.IsStableUnderBaseChange @IsImmersion where\n  of_isPullback := by\n    intros X Y Y' S f g f' g' H hg\n    let Z := Limits.pullback f g.coborderRange.ι\n    let e : Y' ⟶ Z := Limits.pullback.lift g' (f' ≫ g.liftCoborder) (by simpa using H.w.symm)\n    have : IsClosedImmersion e := by\n      have := (IsPullback.paste_horiz_iff (.of_hasPullback f g.coborderRange.ι)\n        (show e ≫ Limits.pullback.snd _ _ = _ from Limits.pullback.lift_snd _ _ _)).mp ?_\n      · exact MorphismProperty.of_isPullback this.flip inferInstance\n      · simpa [e] using H.flip\n    rw [← Limits.pullback.lift_fst (f := f) (g := g.coborderRange.ι) g' (f' ≫ g.liftCoborder)\n      (by simpa using H.w.symm)]\n    infer_instance\n\n"}
{"name":"AlgebraicGeometry.IsImmersion.instDiagonalScheme","module":"Mathlib.AlgebraicGeometry.Morphisms.Immersion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\n⊢ AlgebraicGeometry.IsImmersion (CategoryTheory.Limits.pullback.diagonal f)","decl":"open Limits Scheme.Pullback in\n/-- The diagonal morphism is always an immersion. -/\n@[stacks 01KJ]\ninstance : IsImmersion (pullback.diagonal f) := by\n  let 𝒰 := Y.affineCover\n  let 𝒱 (i) := (pullback f (𝒰.map i)).affineCover\n  have H : pullback.diagonal f ⁻¹ᵁ diagonalCoverDiagonalRange f 𝒰 𝒱 = ⊤ :=\n    top_le_iff.mp fun _ _ ↦ range_diagonal_subset_diagonalCoverDiagonalRange _ _ _ ⟨_, rfl⟩\n  have := isClosedImmersion_diagonal_restrict_diagonalCoverDiagonalRange f 𝒰 𝒱\n  have : IsImmersion ((pullback.diagonal f ∣_\n    diagonalCoverDiagonalRange f 𝒰 𝒱) ≫ Scheme.Opens.ι _) := inferInstance\n  rwa [morphismRestrict_ι, H, ← Scheme.topIso_hom,\n    MorphismProperty.cancel_left_of_respectsIso (P := @IsImmersion)] at this\n\n"}
{"name":"AlgebraicGeometry.IsImmersion.instLiftSchemeId","module":"Mathlib.AlgebraicGeometry.Morphisms.Immersion","initialProofState":"X : AlgebraicGeometry.Scheme\n⊢ AlgebraicGeometry.IsImmersion (CategoryTheory.Limits.prod.lift (CategoryTheory.CategoryStruct.id X) (CategoryTheory.CategoryStruct.id X))","decl":"instance : IsImmersion (prod.lift (𝟙 X) (𝟙 X)) := by\n  rw [← MorphismProperty.cancel_right_of_respectsIso @IsImmersion _ (prodIsoPullback X X).hom]\n  convert inferInstanceAs (IsImmersion (pullback.diagonal (terminal.from X)))\n  ext : 1 <;> simp\n\n"}
{"name":"AlgebraicGeometry.IsImmersion.instιScheme","module":"Mathlib.AlgebraicGeometry.Morphisms.Immersion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf g : Quiver.Hom X Y\n⊢ AlgebraicGeometry.IsImmersion (CategoryTheory.Limits.equalizer.ι f g)","decl":"instance (f g : X ⟶ Y) : IsImmersion (equalizer.ι f g) :=\n  MorphismProperty.of_isPullback (P := @IsImmersion)\n    (isPullback_equalizer_prod f g).flip inferInstance\n\n"}
