{"name":"SimpleGraph.Coloring.valid","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nα : Type u_1\nC : G.Coloring α\nv w : V\nh : G.Adj v w\n⊢ Ne (C v) (C w)","decl":"theorem Coloring.valid {v w : V} (h : G.Adj v w) : C v ≠ C w :=\n  C.map_rel h\n\n"}
{"name":"SimpleGraph.Coloring.mem_colorClass","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nα : Type u_1\nC : G.Coloring α\nv : V\n⊢ Membership.mem (C.colorClass (C v)) v","decl":"theorem Coloring.mem_colorClass (v : V) : v ∈ C.colorClass (C v) := rfl\n\n"}
{"name":"SimpleGraph.Coloring.colorClasses_isPartition","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nα : Type u_1\nC : G.Coloring α\n⊢ Setoid.IsPartition C.colorClasses","decl":"theorem Coloring.colorClasses_isPartition : Setoid.IsPartition C.colorClasses :=\n  Setoid.isPartition_classes (Setoid.ker C)\n\n"}
{"name":"SimpleGraph.Coloring.mem_colorClasses","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nα : Type u_1\nC : G.Coloring α\nv : V\n⊢ Membership.mem C.colorClasses (C.colorClass (C v))","decl":"theorem Coloring.mem_colorClasses {v : V} : C.colorClass (C v) ∈ C.colorClasses :=\n  ⟨v, rfl⟩\n\n"}
{"name":"SimpleGraph.Coloring.colorClasses_finite","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nα : Type u_1\nC : G.Coloring α\ninst✝ : Finite α\n⊢ C.colorClasses.Finite","decl":"theorem Coloring.colorClasses_finite [Finite α] : C.colorClasses.Finite :=\n  Setoid.finite_classes_ker _\n\n"}
{"name":"SimpleGraph.Coloring.card_colorClasses_le","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nα : Type u_1\nC : G.Coloring α\ninst✝¹ : Fintype α\ninst✝ : Fintype ↑C.colorClasses\n⊢ LE.le (Fintype.card ↑C.colorClasses) (Fintype.card α)","decl":"theorem Coloring.card_colorClasses_le [Fintype α] [Fintype C.colorClasses] :\n    Fintype.card C.colorClasses ≤ Fintype.card α := by\n  simp only [colorClasses]\n  convert Setoid.card_classes_ker_le C\n\n"}
{"name":"SimpleGraph.Coloring.not_adj_of_mem_colorClass","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nα : Type u_1\nC : G.Coloring α\nc : α\nv w : V\nhv : Membership.mem (C.colorClass c) v\nhw : Membership.mem (C.colorClass c) w\n⊢ Not (G.Adj v w)","decl":"theorem Coloring.not_adj_of_mem_colorClass {c : α} {v w : V} (hv : v ∈ C.colorClass c)\n    (hw : w ∈ C.colorClass c) : ¬G.Adj v w := fun h => C.valid h (Eq.trans hv (Eq.symm hw))\n\n"}
{"name":"SimpleGraph.Coloring.color_classes_independent","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nα : Type u_1\nC : G.Coloring α\nc : α\n⊢ IsAntichain G.Adj (C.colorClass c)","decl":"theorem Coloring.color_classes_independent (c : α) : IsAntichain G.Adj (C.colorClass c) :=\n  fun _ hv _ hw _ => C.not_adj_of_mem_colorClass hv hw\n\n-- TODO make this computable\n"}
{"name":"SimpleGraph.colorable_of_isEmpty","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\ninst✝ : IsEmpty V\nn : Nat\n⊢ G.Colorable n","decl":"theorem colorable_of_isEmpty [IsEmpty V] (n : ℕ) : G.Colorable n :=\n  ⟨G.coloringOfIsEmpty⟩\n\n"}
{"name":"SimpleGraph.isEmpty_of_colorable_zero","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nh : G.Colorable 0\n⊢ IsEmpty V","decl":"theorem isEmpty_of_colorable_zero (h : G.Colorable 0) : IsEmpty V := by\n  constructor\n  intro v\n  obtain ⟨i, hi⟩ := h.some v\n  exact Nat.not_lt_zero _ hi\n\n"}
{"name":"SimpleGraph.colorable_zero_iff","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\n⊢ Iff (G.Colorable 0) (IsEmpty V)","decl":"@[simp]\nlemma colorable_zero_iff : G.Colorable 0 ↔ IsEmpty V :=\n   ⟨G.isEmpty_of_colorable_zero, fun _ ↦ G.colorable_of_isEmpty 0⟩\n\n"}
{"name":"SimpleGraph.chromaticNumber_eq_biInf","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\n⊢ Eq G.chromaticNumber (iInf fun n => iInf fun h => ↑n)","decl":"lemma chromaticNumber_eq_biInf {G : SimpleGraph V} :\n    G.chromaticNumber = ⨅ n ∈ setOf G.Colorable, (n : ℕ∞) := rfl\n\n"}
{"name":"SimpleGraph.chromaticNumber_eq_iInf","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\n⊢ Eq G.chromaticNumber (iInf fun n => ↑↑n)","decl":"lemma chromaticNumber_eq_iInf {G : SimpleGraph V} :\n    G.chromaticNumber = ⨅ n : {m | G.Colorable m}, (n : ℕ∞) := by\n  rw [chromaticNumber, iInf_subtype]\n\n"}
{"name":"SimpleGraph.Colorable.chromaticNumber_eq_sInf","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nn : Nat\nh : G.Colorable n\n⊢ Eq G.chromaticNumber ↑(InfSet.sInf (setOf fun n' => G.Colorable n'))","decl":"lemma Colorable.chromaticNumber_eq_sInf {G : SimpleGraph V} {n} (h : G.Colorable n) :\n    G.chromaticNumber = sInf {n' : ℕ | G.Colorable n'} := by\n  rw [ENat.coe_sInf, chromaticNumber]\n  exact ⟨_, h⟩\n\n"}
{"name":"SimpleGraph.coe_recolorOfEmbedding","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nα : Type u_1\nβ : Type u_2\nf : Function.Embedding α β\n⊢ Eq (⇑(G.recolorOfEmbedding f)) (SimpleGraph.Embedding.completeGraph f).toHom.comp","decl":"@[simp] lemma coe_recolorOfEmbedding (f : α ↪ β) :\n    ⇑(G.recolorOfEmbedding f) = (Embedding.completeGraph f).toHom.comp := rfl\n\n"}
{"name":"SimpleGraph.coe_recolorOfEquiv","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nα : Type u_1\nβ : Type u_2\nf : Equiv α β\n⊢ Eq (⇑(G.recolorOfEquiv f)) (SimpleGraph.Embedding.completeGraph f.toEmbedding).toHom.comp","decl":"@[simp] lemma coe_recolorOfEquiv (f : α ≃ β) :\n    ⇑(G.recolorOfEquiv f) = (Embedding.completeGraph f).toHom.comp := rfl\n\n"}
{"name":"SimpleGraph.coe_recolorOfCardLE","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nα : Type u_1\nβ : Type u_2\ninst✝¹ : Fintype α\ninst✝ : Fintype β\nhαβ : LE.le (Fintype.card α) (Fintype.card β)\n⊢ Eq (⇑(G.recolorOfCardLE hαβ)) (SimpleGraph.Embedding.completeGraph ⋯.some).toHom.comp","decl":"@[simp] lemma coe_recolorOfCardLE [Fintype α] [Fintype β] (hαβ : card α ≤ card β) :\n    ⇑(G.recolorOfCardLE hαβ) =\n      (Embedding.completeGraph (Embedding.nonempty_of_card_le hαβ).some).toHom.comp := rfl\n\n"}
{"name":"SimpleGraph.Colorable.mono","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nn m : Nat\nh : LE.le n m\nhc : G.Colorable n\n⊢ G.Colorable m","decl":"theorem Colorable.mono {n m : ℕ} (h : n ≤ m) (hc : G.Colorable n) : G.Colorable m :=\n  ⟨G.recolorOfCardLE (by simp [h]) hc.some⟩\n\n"}
{"name":"SimpleGraph.Coloring.colorable","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nα : Type u_1\ninst✝ : Fintype α\nC : G.Coloring α\n⊢ G.Colorable (Fintype.card α)","decl":"theorem Coloring.colorable [Fintype α] (C : G.Coloring α) : G.Colorable (Fintype.card α) :=\n  ⟨G.recolorOfCardLE (by simp) C⟩\n\n"}
{"name":"SimpleGraph.colorable_of_fintype","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\ninst✝ : Fintype V\n⊢ G.Colorable (Fintype.card V)","decl":"theorem colorable_of_fintype (G : SimpleGraph V) [Fintype V] : G.Colorable (Fintype.card V) :=\n  G.selfColoring.colorable\n\n"}
{"name":"SimpleGraph.Colorable.of_embedding","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nV' : Type u_3\nG' : SimpleGraph V'\nf : G.Embedding G'\nn : Nat\nh : G'.Colorable n\n⊢ G.Colorable n","decl":"theorem Colorable.of_embedding {V' : Type*} {G' : SimpleGraph V'} (f : G ↪g G') {n : ℕ}\n    (h : G'.Colorable n) : G.Colorable n :=\n  ⟨(h.toColoring (by simp)).comp f⟩\n\n"}
{"name":"SimpleGraph.colorable_iff_exists_bdd_nat_coloring","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nn : Nat\n⊢ Iff (G.Colorable n) (Exists fun C => ∀ (v : V), LT.lt (C v) n)","decl":"theorem colorable_iff_exists_bdd_nat_coloring (n : ℕ) :\n    G.Colorable n ↔ ∃ C : G.Coloring ℕ, ∀ v, C v < n := by\n  constructor\n  · rintro hc\n    have C : G.Coloring (Fin n) := hc.toColoring (by simp)\n    let f := Embedding.completeGraph (@Fin.valEmbedding n)\n    use f.toHom.comp C\n    intro v\n    cases' C with color valid\n    exact Fin.is_lt (color v)\n  · rintro ⟨C, Cf⟩\n    refine ⟨Coloring.mk ?_ ?_⟩\n    · exact fun v => ⟨C v, Cf v⟩\n    · rintro v w hvw\n      simp only [Fin.mk_eq_mk, Ne]\n      exact C.valid hvw\n\n"}
{"name":"SimpleGraph.colorable_set_nonempty_of_colorable","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nn : Nat\nhc : G.Colorable n\n⊢ (setOf fun n => G.Colorable n).Nonempty","decl":"theorem colorable_set_nonempty_of_colorable {n : ℕ} (hc : G.Colorable n) :\n    { n : ℕ | G.Colorable n }.Nonempty :=\n  ⟨n, hc⟩\n\n"}
{"name":"SimpleGraph.chromaticNumber_bddBelow","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\n⊢ BddBelow (setOf fun n => G.Colorable n)","decl":"theorem chromaticNumber_bddBelow : BddBelow { n : ℕ | G.Colorable n } :=\n  ⟨0, fun _ _ => zero_le _⟩\n\n"}
{"name":"SimpleGraph.Colorable.chromaticNumber_le","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nn : Nat\nhc : G.Colorable n\n⊢ LE.le G.chromaticNumber ↑n","decl":"theorem Colorable.chromaticNumber_le {n : ℕ} (hc : G.Colorable n) : G.chromaticNumber ≤ n := by\n  rw [hc.chromaticNumber_eq_sInf]\n  norm_cast\n  apply csInf_le chromaticNumber_bddBelow\n  exact hc\n\n"}
{"name":"SimpleGraph.chromaticNumber_ne_top_iff_exists","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\n⊢ Iff (Ne G.chromaticNumber Top.top) (Exists fun n => G.Colorable n)","decl":"theorem chromaticNumber_ne_top_iff_exists : G.chromaticNumber ≠ ⊤ ↔ ∃ n, G.Colorable n := by\n  rw [chromaticNumber]\n  convert_to ⨅ n : {m | G.Colorable m}, (n : ℕ∞) ≠ ⊤ ↔ _\n  · rw [iInf_subtype]\n  rw [← lt_top_iff_ne_top, ENat.iInf_coe_lt_top]\n  simp\n\n"}
{"name":"SimpleGraph.chromaticNumber_le_iff_colorable","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nn : Nat\n⊢ Iff (LE.le G.chromaticNumber ↑n) (G.Colorable n)","decl":"theorem chromaticNumber_le_iff_colorable {n : ℕ} : G.chromaticNumber ≤ n ↔ G.Colorable n := by\n  refine ⟨fun h ↦ ?_, Colorable.chromaticNumber_le⟩\n  have : G.chromaticNumber ≠ ⊤ := (trans h (WithTop.coe_lt_top n)).ne\n  rw [chromaticNumber_ne_top_iff_exists] at this\n  obtain ⟨m, hm⟩ := this\n  rw [hm.chromaticNumber_eq_sInf, Nat.cast_le] at h\n  have := Nat.sInf_mem (⟨m, hm⟩ : {n' | G.Colorable n'}.Nonempty)\n  rw [Set.mem_setOf_eq] at this\n  exact this.mono h\n\n"}
{"name":"SimpleGraph.colorable_chromaticNumber","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nm : Nat\nhc : G.Colorable m\n⊢ G.Colorable G.chromaticNumber.toNat","decl":"theorem colorable_chromaticNumber {m : ℕ} (hc : G.Colorable m) :\n    G.Colorable (ENat.toNat G.chromaticNumber) := by\n  classical\n  rw [hc.chromaticNumber_eq_sInf, Nat.sInf_def]\n  · apply Nat.find_spec\n  · exact colorable_set_nonempty_of_colorable hc\n\n"}
{"name":"SimpleGraph.colorable_chromaticNumber_of_fintype","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\ninst✝ : Finite V\n⊢ G.Colorable G.chromaticNumber.toNat","decl":"theorem colorable_chromaticNumber_of_fintype (G : SimpleGraph V) [Finite V] :\n    G.Colorable (ENat.toNat G.chromaticNumber) := by\n  cases nonempty_fintype V\n  exact colorable_chromaticNumber G.colorable_of_fintype\n\n"}
{"name":"SimpleGraph.chromaticNumber_le_one_of_subsingleton","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\ninst✝ : Subsingleton V\n⊢ LE.le G.chromaticNumber 1","decl":"theorem chromaticNumber_le_one_of_subsingleton (G : SimpleGraph V) [Subsingleton V] :\n    G.chromaticNumber ≤ 1 := by\n  rw [← Nat.cast_one, chromaticNumber_le_iff_colorable]\n  refine ⟨Coloring.mk (fun _ => 0) ?_⟩\n  intros v w\n  cases Subsingleton.elim v w\n  simp\n\n"}
{"name":"SimpleGraph.chromaticNumber_eq_zero_of_isempty","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\ninst✝ : IsEmpty V\n⊢ Eq G.chromaticNumber 0","decl":"theorem chromaticNumber_eq_zero_of_isempty (G : SimpleGraph V) [IsEmpty V] :\n    G.chromaticNumber = 0 := by\n  rw [← nonpos_iff_eq_zero, ← Nat.cast_zero, chromaticNumber_le_iff_colorable]\n  apply colorable_of_isEmpty\n\n"}
{"name":"SimpleGraph.isEmpty_of_chromaticNumber_eq_zero","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\ninst✝ : Finite V\nh : Eq G.chromaticNumber 0\n⊢ IsEmpty V","decl":"theorem isEmpty_of_chromaticNumber_eq_zero (G : SimpleGraph V) [Finite V]\n    (h : G.chromaticNumber = 0) : IsEmpty V := by\n  have h' := G.colorable_chromaticNumber_of_fintype\n  rw [h] at h'\n  exact G.isEmpty_of_colorable_zero h'\n\n"}
{"name":"SimpleGraph.chromaticNumber_pos","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\ninst✝ : Nonempty V\nn : Nat\nhc : G.Colorable n\n⊢ LT.lt 0 G.chromaticNumber","decl":"theorem chromaticNumber_pos [Nonempty V] {n : ℕ} (hc : G.Colorable n) : 0 < G.chromaticNumber := by\n  rw [hc.chromaticNumber_eq_sInf, Nat.cast_pos]\n  apply le_csInf (colorable_set_nonempty_of_colorable hc)\n  intro m hm\n  by_contra h'\n  simp only [not_le] at h'\n  obtain ⟨i, hi⟩ := hm.some (Classical.arbitrary V)\n  have h₁ : i < 0 := lt_of_lt_of_le hi (Nat.le_of_lt_succ h')\n  exact Nat.not_lt_zero _ h₁\n\n"}
{"name":"SimpleGraph.colorable_of_chromaticNumber_ne_top","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nh : Ne G.chromaticNumber Top.top\n⊢ G.Colorable G.chromaticNumber.toNat","decl":"theorem colorable_of_chromaticNumber_ne_top (h : G.chromaticNumber ≠ ⊤) :\n    G.Colorable (ENat.toNat G.chromaticNumber) := by\n  rw [chromaticNumber_ne_top_iff_exists] at h\n  obtain ⟨n, hn⟩ := h\n  exact colorable_chromaticNumber hn\n\n"}
{"name":"SimpleGraph.Colorable.mono_left","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG G' : SimpleGraph V\nh : LE.le G G'\nn : Nat\nhc : G'.Colorable n\n⊢ G.Colorable n","decl":"theorem Colorable.mono_left {G' : SimpleGraph V} (h : G ≤ G') {n : ℕ} (hc : G'.Colorable n) :\n    G.Colorable n :=\n  ⟨hc.some.comp (Hom.mapSpanningSubgraphs h)⟩\n\n"}
{"name":"SimpleGraph.chromaticNumber_le_of_forall_imp","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nV' : Type u_3\nG' : SimpleGraph V'\nh : ∀ (n : Nat), G'.Colorable n → G.Colorable n\n⊢ LE.le G.chromaticNumber G'.chromaticNumber","decl":"theorem chromaticNumber_le_of_forall_imp {V' : Type*} {G' : SimpleGraph V'}\n    (h : ∀ n, G'.Colorable n → G.Colorable n) :\n    G.chromaticNumber ≤ G'.chromaticNumber := by\n  rw [chromaticNumber, chromaticNumber]\n  simp only [Set.mem_setOf_eq, le_iInf_iff]\n  intro m hc\n  have := h _ hc\n  rw [← chromaticNumber_le_iff_colorable] at this\n  exact this\n\n"}
{"name":"SimpleGraph.chromaticNumber_mono","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG G' : SimpleGraph V\nh : LE.le G G'\n⊢ LE.le G.chromaticNumber G'.chromaticNumber","decl":"theorem chromaticNumber_mono (G' : SimpleGraph V)\n    (h : G ≤ G') : G.chromaticNumber ≤ G'.chromaticNumber :=\n  chromaticNumber_le_of_forall_imp fun _ => Colorable.mono_left h\n\n"}
{"name":"SimpleGraph.chromaticNumber_mono_of_embedding","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nV' : Type u_3\nG' : SimpleGraph V'\nf : G.Embedding G'\n⊢ LE.le G.chromaticNumber G'.chromaticNumber","decl":"theorem chromaticNumber_mono_of_embedding {V' : Type*} {G' : SimpleGraph V'}\n    (f : G ↪g G') : G.chromaticNumber ≤ G'.chromaticNumber :=\n  chromaticNumber_le_of_forall_imp fun _ => Colorable.of_embedding f\n\n"}
{"name":"SimpleGraph.card_le_chromaticNumber_iff_forall_surjective","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nα : Type u_1\ninst✝ : Fintype α\n⊢ Iff (LE.le (↑(Fintype.card α)) G.chromaticNumber) (∀ (C : G.Coloring α), Function.Surjective ⇑C)","decl":"lemma card_le_chromaticNumber_iff_forall_surjective [Fintype α] :\n    card α ≤ G.chromaticNumber ↔ ∀ C : G.Coloring α, Surjective C := by\n  refine ⟨fun h C ↦ ?_, fun h ↦ ?_⟩\n  · rw [C.colorable.chromaticNumber_eq_sInf, Nat.cast_le] at h\n    intro i\n    by_contra! hi\n    let D : G.Coloring {a // a ≠ i} := ⟨fun v ↦ ⟨C v, hi v⟩, (C.valid · <| congr_arg Subtype.val ·)⟩\n    classical\n    exact Nat.not_mem_of_lt_sInf ((Nat.sub_one_lt_of_lt <| card_pos_iff.2 ⟨i⟩).trans_le h)\n      ⟨G.recolorOfEquiv (equivOfCardEq <| by simp [Nat.pred_eq_sub_one]) D⟩\n  · simp only [chromaticNumber, Set.mem_setOf_eq, le_iInf_iff, Nat.cast_le, exists_prop]\n    rintro i ⟨C⟩\n    contrapose! h\n    refine ⟨G.recolorOfCardLE (by simpa using h.le) C, fun hC ↦ ?_⟩\n    dsimp at hC\n    simpa [h.not_le] using Fintype.card_le_of_surjective _ hC.of_comp\n\n"}
{"name":"SimpleGraph.le_chromaticNumber_iff_forall_surjective","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nn : Nat\n⊢ Iff (LE.le (↑n) G.chromaticNumber) (∀ (C : G.Coloring (Fin n)), Function.Surjective ⇑C)","decl":"lemma le_chromaticNumber_iff_forall_surjective :\n    n ≤ G.chromaticNumber ↔ ∀ C : G.Coloring (Fin n), Surjective C := by\n  simp [← card_le_chromaticNumber_iff_forall_surjective]\n\n"}
{"name":"SimpleGraph.chromaticNumber_eq_card_iff_forall_surjective","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nα : Type u_1\ninst✝ : Fintype α\nhG : G.Colorable (Fintype.card α)\n⊢ Iff (Eq G.chromaticNumber ↑(Fintype.card α)) (∀ (C : G.Coloring α), Function.Surjective ⇑C)","decl":"lemma chromaticNumber_eq_card_iff_forall_surjective [Fintype α] (hG : G.Colorable (card α)) :\n    G.chromaticNumber = card α ↔ ∀ C : G.Coloring α, Surjective C := by\n  rw [← hG.chromaticNumber_le.ge_iff_eq, card_le_chromaticNumber_iff_forall_surjective]\n\n"}
{"name":"SimpleGraph.chromaticNumber_eq_iff_forall_surjective","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nn : Nat\nhG : G.Colorable n\n⊢ Iff (Eq G.chromaticNumber ↑n) (∀ (C : G.Coloring (Fin n)), Function.Surjective ⇑C)","decl":"lemma chromaticNumber_eq_iff_forall_surjective (hG : G.Colorable n) :\n    G.chromaticNumber = n ↔ ∀ C : G.Coloring (Fin n), Surjective C := by\n  rw [← hG.chromaticNumber_le.ge_iff_eq, le_chromaticNumber_iff_forall_surjective]\n\n"}
{"name":"SimpleGraph.chromaticNumber_bot","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\ninst✝ : Nonempty V\n⊢ Eq Bot.bot.chromaticNumber 1","decl":"theorem chromaticNumber_bot [Nonempty V] : (⊥ : SimpleGraph V).chromaticNumber = 1 := by\n  have : (⊥ : SimpleGraph V).Colorable 1 := ⟨.mk 0 <| by simp⟩\n  exact this.chromaticNumber_le.antisymm <| Order.one_le_iff_pos.2 <| chromaticNumber_pos this\n\n"}
{"name":"SimpleGraph.chromaticNumber_top","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\ninst✝ : Fintype V\n⊢ Eq Top.top.chromaticNumber ↑(Fintype.card V)","decl":"@[simp]\ntheorem chromaticNumber_top [Fintype V] : (⊤ : SimpleGraph V).chromaticNumber = Fintype.card V := by\n  rw [chromaticNumber_eq_card_iff_forall_surjective (selfColoring _).colorable]\n  intro C\n  rw [← Finite.injective_iff_surjective]\n  intro v w\n  contrapose\n  intro h\n  exact C.valid h\n\n"}
{"name":"SimpleGraph.chromaticNumber_top_eq_top_of_infinite","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u_3\ninst✝ : Infinite V\n⊢ Eq Top.top.chromaticNumber Top.top","decl":"theorem chromaticNumber_top_eq_top_of_infinite (V : Type*) [Infinite V] :\n    (⊤ : SimpleGraph V).chromaticNumber = ⊤ := by\n  by_contra hc\n  rw [← Ne, chromaticNumber_ne_top_iff_exists] at hc\n  obtain ⟨n, ⟨hn⟩⟩ := hc\n  exact not_injective_infinite_finite _ hn.injective_of_top_hom\n\n"}
{"name":"SimpleGraph.CompleteBipartiteGraph.chromaticNumber","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u_3\nW : Type u_4\ninst✝¹ : Nonempty V\ninst✝ : Nonempty W\n⊢ Eq (completeBipartiteGraph V W).chromaticNumber 2","decl":"theorem CompleteBipartiteGraph.chromaticNumber {V W : Type*} [Nonempty V] [Nonempty W] :\n    (completeBipartiteGraph V W).chromaticNumber = 2 := by\n  rw [← Nat.cast_two, chromaticNumber_eq_iff_forall_surjective\n    (by simpa using (CompleteBipartiteGraph.bicoloring V W).colorable)]\n  intro C b\n  have v := Classical.arbitrary V\n  have w := Classical.arbitrary W\n  have h : (completeBipartiteGraph V W).Adj (Sum.inl v) (Sum.inr w) := by simp\n  by_cases he : C (Sum.inl v) = b\n  · exact ⟨_, he⟩\n  by_cases he' : C (Sum.inr w) = b\n  · exact ⟨_, he'⟩\n  · simpa using two_lt_card_iff.2 ⟨_, _, _, C.valid h, he, he'⟩\n\n"}
{"name":"SimpleGraph.IsClique.card_le_of_coloring","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nα : Type u_1\ns : Finset V\nh : G.IsClique ↑s\ninst✝ : Fintype α\nC : G.Coloring α\n⊢ LE.le s.card (Fintype.card α)","decl":"theorem IsClique.card_le_of_coloring {s : Finset V} (h : G.IsClique s) [Fintype α]\n    (C : G.Coloring α) : s.card ≤ Fintype.card α := by\n  rw [isClique_iff_induce_eq] at h\n  have f : G.induce ↑s ↪g G := Embedding.comap (Function.Embedding.subtype fun x => x ∈ ↑s) G\n  rw [h] at f\n  convert Fintype.card_le_of_injective _ (C.comp f.toHom).injective_of_top_hom using 1\n  simp\n\n"}
{"name":"SimpleGraph.IsClique.card_le_of_colorable","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\ns : Finset V\nh : G.IsClique ↑s\nn : Nat\nhc : G.Colorable n\n⊢ LE.le s.card n","decl":"theorem IsClique.card_le_of_colorable {s : Finset V} (h : G.IsClique s) {n : ℕ}\n    (hc : G.Colorable n) : s.card ≤ n := by\n  convert h.card_le_of_coloring hc.some\n  simp\n\n"}
{"name":"SimpleGraph.IsClique.card_le_chromaticNumber","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\ns : Finset V\nh : G.IsClique ↑s\n⊢ LE.le (↑s.card) G.chromaticNumber","decl":"theorem IsClique.card_le_chromaticNumber {s : Finset V} (h : G.IsClique s) :\n    s.card ≤ G.chromaticNumber := by\n  obtain (hc | hc) := eq_or_ne G.chromaticNumber ⊤\n  · rw [hc]\n    exact le_top\n  · have hc' := hc\n    rw [chromaticNumber_ne_top_iff_exists] at hc'\n    obtain ⟨n, c⟩ := hc'\n    rw [← ENat.coe_toNat_eq_self] at hc\n    rw [← hc, Nat.cast_le]\n    exact h.card_le_of_colorable (colorable_chromaticNumber c)\n\n"}
{"name":"SimpleGraph.Colorable.cliqueFree","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nn m : Nat\nhc : G.Colorable n\nhm : LT.lt n m\n⊢ G.CliqueFree m","decl":"protected theorem Colorable.cliqueFree {n m : ℕ} (hc : G.Colorable n) (hm : n < m) :\n    G.CliqueFree m := by\n  by_contra h\n  simp only [CliqueFree, isNClique_iff, not_forall, Classical.not_not] at h\n  obtain ⟨s, h, rfl⟩ := h\n  exact Nat.lt_le_asymm hm (h.card_le_of_colorable hc)\n\n"}
{"name":"SimpleGraph.cliqueFree_of_chromaticNumber_lt","module":"Mathlib.Combinatorics.SimpleGraph.Coloring","initialProofState":"V : Type u\nG : SimpleGraph V\nn : Nat\nhc : LT.lt G.chromaticNumber ↑n\n⊢ G.CliqueFree n","decl":"theorem cliqueFree_of_chromaticNumber_lt {n : ℕ} (hc : G.chromaticNumber < n) :\n    G.CliqueFree n := by\n  have hne : G.chromaticNumber ≠ ⊤ := hc.ne_top\n  obtain ⟨m, hc'⟩ := chromaticNumber_ne_top_iff_exists.mp hne\n  have := colorable_chromaticNumber hc'\n  refine this.cliqueFree ?_\n  rw [← ENat.coe_toNat_eq_self] at hne\n  rw [← hne] at hc\n  simpa using hc\n\n"}
