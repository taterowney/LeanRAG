{"name":"EisensteinSeries.div_linear_zpow_differentiableOn","module":"Mathlib.NumberTheory.ModularForms.EisensteinSeries.MDifferentiable","initialProofState":"k : Int\na : Fin 2 → Int\n⊢ DifferentiableOn Complex (fun z => HPow.hPow (HAdd.hAdd (HMul.hMul (↑(a 0)) z) ↑(a 1)) (Neg.neg k)) (setOf fun z => LT.lt 0 z.im)","decl":"/-- Auxiliary lemma showing that for any `k : ℤ` the function `z → 1/(c*z+d)^k` is\ndifferentiable on `{z : ℂ | 0 < z.im}`. -/\nlemma div_linear_zpow_differentiableOn (k : ℤ) (a : Fin 2 → ℤ) :\n    DifferentiableOn ℂ (fun z : ℂ => (a 0 * z + a 1) ^ (-k)) {z : ℂ | 0 < z.im} := by\n  rcases ne_or_eq a 0 with ha | rfl\n  · apply DifferentiableOn.zpow\n    · fun_prop\n    · left\n      exact fun z hz ↦ linear_ne_zero _ ⟨z, hz⟩\n        ((comp_ne_zero_iff _ Int.cast_injective Int.cast_zero).mpr ha)\n  · simp only [Fin.isValue, Pi.zero_apply, Int.cast_zero, zero_mul, add_zero, one_div]\n    apply differentiableOn_const\n\n"}
{"name":"EisensteinSeries.eisSummand_extension_differentiableOn","module":"Mathlib.NumberTheory.ModularForms.EisensteinSeries.MDifferentiable","initialProofState":"k : Int\na : Fin 2 → Int\n⊢ DifferentiableOn Complex (Function.comp (EisensteinSeries.eisSummand k a) ↑UpperHalfPlane.ofComplex) (setOf fun z => LT.lt 0 z.im)","decl":"/-- Auxiliary lemma showing that for any `k : ℤ` and `(a : Fin 2 → ℤ)`\nthe extension of `eisSummand` is differentiable on `{z : ℂ | 0 < z.im}`.-/\nlemma eisSummand_extension_differentiableOn (k : ℤ) (a : Fin 2 → ℤ) :\n    DifferentiableOn ℂ (↑ₕeisSummand k a) {z : ℂ | 0 < z.im} := by\n  apply DifferentiableOn.congr (div_linear_zpow_differentiableOn k a)\n  intro z hz\n  lift z to ℍ using hz\n  apply comp_ofComplex\n\n"}
{"name":"EisensteinSeries.eisensteinSeries_SIF_MDifferentiable","module":"Mathlib.NumberTheory.ModularForms.EisensteinSeries.MDifferentiable","initialProofState":"k : Int\nN : Nat\nhk : LE.le 3 k\na : Fin 2 → ZMod N\n⊢ MDifferentiable (modelWithCornersSelf Complex Complex) (modelWithCornersSelf Complex Complex) ⇑(EisensteinSeries.eisensteinSeries_SIF a k)","decl":"/-- Eisenstein series are MDifferentiable (i.e. holomorphic functions from `ℍ → ℂ`). -/\ntheorem eisensteinSeries_SIF_MDifferentiable {k : ℤ} {N : ℕ} (hk : 3 ≤ k) (a : Fin 2 → ZMod N) :\n    MDifferentiable 𝓘(ℂ) 𝓘(ℂ) (eisensteinSeries_SIF a k) := by\n  intro τ\n  suffices DifferentiableAt ℂ (↑ₕeisensteinSeries_SIF a k) τ.1 by\n    convert MDifferentiableAt.comp τ (DifferentiableAt.mdifferentiableAt this) τ.mdifferentiable_coe\n    exact funext fun z ↦ (comp_ofComplex (eisensteinSeries_SIF a k) z).symm\n  refine DifferentiableOn.differentiableAt ?_\n    ((isOpen_lt continuous_const Complex.continuous_im).mem_nhds τ.2)\n  exact (eisensteinSeries_tendstoLocallyUniformlyOn hk a).differentiableOn\n    (Eventually.of_forall fun s ↦ DifferentiableOn.sum\n      fun _ _ ↦ eisSummand_extension_differentiableOn _ _)\n        (isOpen_lt continuous_const continuous_im)\n\n"}
