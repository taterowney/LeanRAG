{"name":"Equiv.Perm.mem_conj_support","module":"Mathlib.GroupTheory.Perm.ConjAct","initialProofState":"α : Type u_1\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\nk : ConjAct (Equiv.Perm α)\ng : Equiv.Perm α\na : α\n⊢ Iff (Membership.mem (HSMul.hSMul k g).support a) (Membership.mem g.support ((ConjAct.ofConjAct (Inv.inv k)) a))","decl":"/-- `a : α` belongs to the support of `k • g` iff\n  `k⁻¹ * a` belongs to the support of `g` -/\ntheorem mem_conj_support (k : ConjAct (Perm α)) (g : Perm α) (a : α) :\n    a ∈ (k • g).support ↔ ConjAct.ofConjAct k⁻¹ a ∈ g.support := by\n  simp only [mem_support, ConjAct.smul_def, not_iff_not, coe_mul,\n    Function.comp_apply, ConjAct.ofConjAct_inv]\n  apply Equiv.apply_eq_iff_eq_symm_apply\n\n"}
{"name":"Equiv.Perm.cycleFactorsFinset_conj","module":"Mathlib.GroupTheory.Perm.ConjAct","initialProofState":"α : Type u_1\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\ng k : Equiv.Perm α\n⊢ Eq (HSMul.hSMul (ConjAct.toConjAct k) g).cycleFactorsFinset (Finset.map (MulAut.conj k).toEmbedding g.cycleFactorsFinset)","decl":"theorem cycleFactorsFinset_conj (g k : Perm α) :\n    (ConjAct.toConjAct k • g).cycleFactorsFinset =\n      Finset.map (MulAut.conj k).toEquiv.toEmbedding g.cycleFactorsFinset := by\n  ext c\n  rw [ConjAct.smul_def, ConjAct.ofConjAct_toConjAct, Finset.mem_map_equiv,\n    ← mem_cycleFactorsFinset_conj g k]\n  simp only [MulEquiv.toEquiv_eq_coe, MulEquiv.coe_toEquiv_symm, MulAut.conj_symm_apply]\n  group\n\n"}
{"name":"Equiv.Perm.mem_cycleFactorsFinset_conj'","module":"Mathlib.GroupTheory.Perm.ConjAct","initialProofState":"α : Type u_1\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\nk : ConjAct (Equiv.Perm α)\ng c : Equiv.Perm α\n⊢ Iff (Membership.mem (HSMul.hSMul k g).cycleFactorsFinset (HSMul.hSMul k c)) (Membership.mem g.cycleFactorsFinset c)","decl":"/-- A permutation `c` is a cycle of `g` iff `k • c` is a cycle of `k • g` -/\n@[simp]\ntheorem mem_cycleFactorsFinset_conj'\n    (k : ConjAct (Perm α)) (g c : Perm α) :\n    k • c ∈ (k • g).cycleFactorsFinset ↔ c ∈ g.cycleFactorsFinset := by\n  simp only [ConjAct.smul_def]\n  apply mem_cycleFactorsFinset_conj g k\n\n"}
{"name":"Equiv.Perm.cycleFactorsFinset_conj_eq","module":"Mathlib.GroupTheory.Perm.ConjAct","initialProofState":"α : Type u_1\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\nk : ConjAct (Equiv.Perm α)\ng : Equiv.Perm α\n⊢ Eq (HSMul.hSMul k g).cycleFactorsFinset (HSMul.hSMul k g.cycleFactorsFinset)","decl":"theorem cycleFactorsFinset_conj_eq\n    (k : ConjAct (Perm α)) (g : Perm α) :\n    cycleFactorsFinset (k • g) = k • cycleFactorsFinset g := by\n  ext c\n  rw [← mem_cycleFactorsFinset_conj' k⁻¹ (k • g) c]\n  simp only [inv_smul_smul]\n  exact Finset.inv_smul_mem_iff\n\n"}
