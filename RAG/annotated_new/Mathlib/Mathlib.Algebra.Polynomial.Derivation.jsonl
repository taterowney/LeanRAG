{"name":"Polynomial.derivative'_apply","module":"Mathlib.Algebra.Polynomial.Derivation","initialProofState":"R : Type u_1\ninst✝ : CommSemiring R\na : Polynomial R\n⊢ Eq (Polynomial.derivative' a) (Polynomial.derivative a)","decl":"/-- `Polynomial.derivative` as a derivation. -/\n@[simps]\ndef derivative' : Derivation R R[X] R[X] where\n  toFun := derivative\n  map_add' _ _ := derivative_add\n  map_smul' := derivative_smul\n  map_one_eq_zero' := derivative_one\n  leibniz' f g := by simp [mul_comm, add_comm, derivative_mul]\n\n"}
{"name":"Polynomial.derivation_C","module":"Mathlib.Algebra.Polynomial.Derivation","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Module (Polynomial R) A\nD : Derivation R (Polynomial R) A\na : R\n⊢ Eq (D (Polynomial.C a)) 0","decl":"@[simp]\ntheorem derivation_C (D : Derivation R R[X] A) (a : R) : D (C a) = 0 :=\n  D.map_algebraMap a\n\n"}
{"name":"Polynomial.C_smul_derivation_apply","module":"Mathlib.Algebra.Polynomial.Derivation","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Module (Polynomial R) A\nD : Derivation R (Polynomial R) A\na : R\nf : Polynomial R\n⊢ Eq (HSMul.hSMul (Polynomial.C a) (D f)) (HSMul.hSMul a (D f))","decl":"@[simp]\ntheorem C_smul_derivation_apply (D : Derivation R R[X] A) (a : R) (f : R[X]) :\n    C a • D f = a • D f := by\n  have : C a • D f = D (C a * f) := by simp\n  rw [this, C_mul', D.map_smul]\n\n"}
{"name":"Polynomial.derivation_ext","module":"Mathlib.Algebra.Polynomial.Derivation","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Module (Polynomial R) A\nD₁ D₂ : Derivation R (Polynomial R) A\nh : Eq (D₁ Polynomial.X) (D₂ Polynomial.X)\n⊢ Eq D₁ D₂","decl":"@[ext]\ntheorem derivation_ext {D₁ D₂ : Derivation R R[X] A} (h : D₁ X = D₂ X) : D₁ = D₂ :=\n  Derivation.ext fun f => Derivation.eqOn_adjoin (Set.eqOn_singleton.2 h) <| by\n    simp only [adjoin_X, Algebra.coe_top, Set.mem_univ]\n\n"}
{"name":"Polynomial.derivation_ext_iff","module":"Mathlib.Algebra.Polynomial.Derivation","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Module (Polynomial R) A\nD₁ D₂ : Derivation R (Polynomial R) A\n⊢ Iff (Eq D₁ D₂) (Eq (D₁ Polynomial.X) (D₂ Polynomial.X))","decl":"@[ext]\ntheorem derivation_ext {D₁ D₂ : Derivation R R[X] A} (h : D₁ X = D₂ X) : D₁ = D₂ :=\n  Derivation.ext fun f => Derivation.eqOn_adjoin (Set.eqOn_singleton.2 h) <| by\n    simp only [adjoin_X, Algebra.coe_top, Set.mem_univ]\n\n"}
{"name":"Polynomial.mkDerivation_apply","module":"Mathlib.Algebra.Polynomial.Derivation","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝⁴ : CommSemiring R\ninst✝³ : AddCommMonoid A\ninst✝² : Module R A\ninst✝¹ : Module (Polynomial R) A\ninst✝ : IsScalarTower R (Polynomial R) A\na : A\nf : Polynomial R\n⊢ Eq (((Polynomial.mkDerivation R) a) f) (HSMul.hSMul (Polynomial.derivative f) a)","decl":"lemma mkDerivation_apply (a : A) (f : R[X]) :\n    mkDerivation R a f = derivative f • a := by\n  rfl\n\n"}
{"name":"Polynomial.mkDerivation_X","module":"Mathlib.Algebra.Polynomial.Derivation","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝⁴ : CommSemiring R\ninst✝³ : AddCommMonoid A\ninst✝² : Module R A\ninst✝¹ : Module (Polynomial R) A\ninst✝ : IsScalarTower R (Polynomial R) A\na : A\n⊢ Eq (((Polynomial.mkDerivation R) a) Polynomial.X) a","decl":"@[simp]\ntheorem mkDerivation_X (a : A) : mkDerivation R a X = a := by simp [mkDerivation_apply]\n\n"}
{"name":"Polynomial.mkDerivation_one_eq_derivative'","module":"Mathlib.Algebra.Polynomial.Derivation","initialProofState":"R : Type u_1\ninst✝ : CommSemiring R\n⊢ Eq ((Polynomial.mkDerivation R) 1) Polynomial.derivative'","decl":"lemma mkDerivation_one_eq_derivative' : mkDerivation R (1 : R[X]) = derivative' := by\n  ext : 1\n  simp [derivative']\n\n"}
{"name":"Polynomial.mkDerivation_one_eq_derivative","module":"Mathlib.Algebra.Polynomial.Derivation","initialProofState":"R : Type u_1\ninst✝ : CommSemiring R\nf : Polynomial R\n⊢ Eq (((Polynomial.mkDerivation R) 1) f) (Polynomial.derivative f)","decl":"lemma mkDerivation_one_eq_derivative (f : R[X]) : mkDerivation R (1 : R[X]) f = derivative f := by\n  rw [mkDerivation_one_eq_derivative']\n  rfl\n\n"}
{"name":"Polynomial.mkDerivationEquiv_apply","module":"Mathlib.Algebra.Polynomial.Derivation","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝⁴ : CommSemiring R\ninst✝³ : AddCommMonoid A\ninst✝² : Module R A\ninst✝¹ : Module (Polynomial R) A\ninst✝ : IsScalarTower R (Polynomial R) A\na : A\n⊢ Eq ((Polynomial.mkDerivationEquiv R) a) ((Polynomial.mkDerivation R) a)","decl":"@[simp] lemma mkDerivationEquiv_apply (a : A) :\n    mkDerivationEquiv R a = mkDerivation R a := by\n  rfl\n\n"}
{"name":"Polynomial.mkDerivationEquiv_symm_apply","module":"Mathlib.Algebra.Polynomial.Derivation","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝⁴ : CommSemiring R\ninst✝³ : AddCommMonoid A\ninst✝² : Module R A\ninst✝¹ : Module (Polynomial R) A\ninst✝ : IsScalarTower R (Polynomial R) A\nD : Derivation R (Polynomial R) A\n⊢ Eq ((Polynomial.mkDerivationEquiv R).symm D) (D Polynomial.X)","decl":"@[simp] lemma mkDerivationEquiv_symm_apply (D : Derivation R R[X] A) :\n    (mkDerivationEquiv R).symm D = D X := rfl\n\n"}
{"name":"Derivation.compAEval_apply","module":"Mathlib.Algebra.Polynomial.Derivation","initialProofState":"R : Type u_1\nA : Type u_2\nM : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : CommSemiring A\ninst✝⁴ : Algebra R A\ninst✝³ : AddCommMonoid M\ninst✝² : Module A M\ninst✝¹ : Module R M\ninst✝ : IsScalarTower R A M\nd : Derivation R A M\na : A\nf : Polynomial R\n⊢ Eq ((d.compAEval a) f) ((Module.AEval.of R M a) (d ((Polynomial.aeval a) f)))","decl":"/--\nFor a derivation `d : A → M` and an element `a : A`, `d.compAEval a` is the\nderivation of `R[X]` which takes a polynomial `f` to `d(aeval a f)`.\n\nThis derivation takes values in `Module.AEval R M a`, which is `M`, regarded as an\n`R[X]`-module, with the action of a polynomial `f` defined by `f • m = (aeval a f) • m`.\n-/\n/-\nNote: `compAEval` is not defined using `Derivation.compAlgebraMap`.\nThis because `A` is not an `R[X]` algebra and it would be messy to create an algebra instance\nwithin the definition.\n-/\n@[simps]\ndef compAEval : Derivation R R[X] <| AEval R M a where\n  toFun f          := AEval.of R M a (d (aeval a f))\n  map_add'         := by simp\n  map_smul'        := by simp\n  leibniz'         := by simp [AEval.of_aeval_smul, -Derivation.map_aeval]\n  map_one_eq_zero' := by simp\n\n"}
{"name":"Derivation.compAEval_eq","module":"Mathlib.Algebra.Polynomial.Derivation","initialProofState":"R : Type u_1\nA : Type u_2\nM : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : CommSemiring A\ninst✝⁴ : Algebra R A\ninst✝³ : AddCommMonoid M\ninst✝² : Module A M\ninst✝¹ : Module R M\ninst✝ : IsScalarTower R A M\na : A\nd : Derivation R A M\nf : Polynomial R\n⊢ Eq ((d.compAEval a) f) (HSMul.hSMul (Polynomial.derivative f) ((Module.AEval.of R M a) (d a)))","decl":"/--\n  A form of the chain rule: if `f` is a polynomial over `R`\n  and `d : A → M` is an `R`-derivation then for all `a : A` we have\n  $$ d(f(a)) = f' (a) d a. $$\n  The equation is in the `R[X]`-module `Module.AEval R M a`.\n  For the same equation in `M`, see `Derivation.compAEval_eq`.\n-/\ntheorem compAEval_eq (d : Derivation R A M) (f : R[X]) :\n    d.compAEval a f = derivative f • (AEval.of R M a (d a)) := by\n  rw [← mkDerivation_apply]\n  congr\n  apply derivation_ext\n  simp\n\n"}
{"name":"Derivation.comp_aeval_eq","module":"Mathlib.Algebra.Polynomial.Derivation","initialProofState":"R : Type u_1\nA : Type u_2\nM : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : CommSemiring A\ninst✝⁴ : Algebra R A\ninst✝³ : AddCommMonoid M\ninst✝² : Module A M\ninst✝¹ : Module R M\ninst✝ : IsScalarTower R A M\na : A\nd : Derivation R A M\nf : Polynomial R\n⊢ Eq (d ((Polynomial.aeval a) f)) (HSMul.hSMul ((Polynomial.aeval a) (Polynomial.derivative f)) (d a))","decl":"/--\n  A form of the chain rule: if `f` is a polynomial over `R`\n  and `d : A → M` is an `R`-derivation then for all `a : A` we have\n  $$ d(f(a)) = f' (a) d a. $$\n  The equation is in `M`. For the same equation in `Module.AEval R M a`,\n  see `Derivation.compAEval_eq`.\n-/\ntheorem comp_aeval_eq (d : Derivation R A M) (f : R[X]) :\n    d (aeval a f) = aeval a (derivative f) • d a :=\n  calc\n    _ = (AEval.of R M a).symm (d.compAEval a f) := rfl\n    _ = _ := by simp [-compAEval_apply, compAEval_eq]\n\n"}
