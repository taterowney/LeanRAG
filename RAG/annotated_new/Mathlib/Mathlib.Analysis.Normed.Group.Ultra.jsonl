{"name":"IsUltrametricDist.norm_add_le_max","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedAddGroup S\ninst✝ : IsUltrametricDist S\nx y : S\n⊢ LE.le (Norm.norm (HAdd.hAdd x y)) (Max.max (Norm.norm x) (Norm.norm y))","decl":"@[to_additive]\nlemma norm_mul_le_max (x y : S) :\n    ‖x * y‖ ≤ max ‖x‖ ‖y‖ := by\n  simpa only [le_max_iff, dist_eq_norm_div, div_inv_eq_mul, div_one, one_mul] using\n    dist_triangle_max x 1 y⁻¹\n\n"}
{"name":"IsUltrametricDist.norm_mul_le_max","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedGroup S\ninst✝ : IsUltrametricDist S\nx y : S\n⊢ LE.le (Norm.norm (HMul.hMul x y)) (Max.max (Norm.norm x) (Norm.norm y))","decl":"@[to_additive]\nlemma norm_mul_le_max (x y : S) :\n    ‖x * y‖ ≤ max ‖x‖ ‖y‖ := by\n  simpa only [le_max_iff, dist_eq_norm_div, div_inv_eq_mul, div_one, one_mul] using\n    dist_triangle_max x 1 y⁻¹\n\n"}
{"name":"IsUltrametricDist.isUltrametricDist_of_forall_norm_mul_le_max_norm","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S' : Type u_2\ninst✝ : SeminormedGroup S'\nh : ∀ (x y : S'), LE.le (Norm.norm (HMul.hMul x y)) (Max.max (Norm.norm x) (Norm.norm y))\n⊢ IsUltrametricDist S'","decl":"@[to_additive]\nlemma isUltrametricDist_of_forall_norm_mul_le_max_norm\n    (h : ∀ x y : S', ‖x * y‖ ≤ max ‖x‖ ‖y‖) : IsUltrametricDist S' where\n  dist_triangle_max x y z := by\n    simpa only [dist_eq_norm_div, le_max_iff, div_mul_div_cancel] using h (x / y) (y / z)\n\n"}
{"name":"IsUltrametricDist.isUltrametricDist_of_forall_norm_add_le_max_norm","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S' : Type u_2\ninst✝ : SeminormedAddGroup S'\nh : ∀ (x y : S'), LE.le (Norm.norm (HAdd.hAdd x y)) (Max.max (Norm.norm x) (Norm.norm y))\n⊢ IsUltrametricDist S'","decl":"@[to_additive]\nlemma isUltrametricDist_of_forall_norm_mul_le_max_norm\n    (h : ∀ x y : S', ‖x * y‖ ≤ max ‖x‖ ‖y‖) : IsUltrametricDist S' where\n  dist_triangle_max x y z := by\n    simpa only [dist_eq_norm_div, le_max_iff, div_mul_div_cancel] using h (x / y) (y / z)\n\n"}
{"name":"IsUltrametricDist.isUltrametricDist_of_isNonarchimedean_norm","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S' : Type u_4\ninst✝ : SeminormedAddGroup S'\nh : IsNonarchimedean Norm.norm\n⊢ IsUltrametricDist S'","decl":"lemma isUltrametricDist_of_isNonarchimedean_norm {S' : Type*} [SeminormedAddGroup S']\n    (h : IsNonarchimedean (norm : S' → ℝ)) : IsUltrametricDist S' :=\n  isUltrametricDist_of_forall_norm_add_le_max_norm h\n\n"}
{"name":"IsUltrametricDist.isNonarchimedean_norm","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"R : Type u_4\ninst✝¹ : SeminormedAddCommGroup R\ninst✝ : IsUltrametricDist R\n⊢ IsNonarchimedean fun x => Norm.norm x","decl":"lemma isNonarchimedean_norm {R} [SeminormedAddCommGroup R] [IsUltrametricDist R] :\n    IsNonarchimedean (‖·‖ : R → ℝ) := by\n  intro x y\n  convert dist_triangle_max 0 x (x + y) using 1\n  · simp\n  · congr <;> simp [SeminormedAddGroup.dist_eq]\n\n"}
{"name":"IsUltrametricDist.isUltrametricDist_iff_isNonarchimedean_norm","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"R : Type u_4\ninst✝ : SeminormedAddCommGroup R\n⊢ Iff (IsUltrametricDist R) (IsNonarchimedean fun x => Norm.norm x)","decl":"lemma isUltrametricDist_iff_isNonarchimedean_norm {R} [SeminormedAddCommGroup R] :\n    IsUltrametricDist R ↔ IsNonarchimedean (‖·‖ : R → ℝ) :=\n  ⟨fun h => h.isNonarchimedean_norm, IsUltrametricDist.isUltrametricDist_of_isNonarchimedean_norm⟩\n\n"}
{"name":"IsUltrametricDist.nnnorm_add_le_max","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedAddGroup S\ninst✝ : IsUltrametricDist S\nx y : S\n⊢ LE.le (NNNorm.nnnorm (HAdd.hAdd x y)) (Max.max (NNNorm.nnnorm x) (NNNorm.nnnorm y))","decl":"@[to_additive]\nlemma nnnorm_mul_le_max (x y : S) :\n    ‖x * y‖₊ ≤ max ‖x‖₊ ‖y‖₊ :=\n  norm_mul_le_max _ _\n\n"}
{"name":"IsUltrametricDist.nnnorm_mul_le_max","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedGroup S\ninst✝ : IsUltrametricDist S\nx y : S\n⊢ LE.le (NNNorm.nnnorm (HMul.hMul x y)) (Max.max (NNNorm.nnnorm x) (NNNorm.nnnorm y))","decl":"@[to_additive]\nlemma nnnorm_mul_le_max (x y : S) :\n    ‖x * y‖₊ ≤ max ‖x‖₊ ‖y‖₊ :=\n  norm_mul_le_max _ _\n\n"}
{"name":"IsUltrametricDist.isUltrametricDist_of_forall_nnnorm_mul_le_max_nnnorm","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S' : Type u_2\ninst✝ : SeminormedGroup S'\nh : ∀ (x y : S'), LE.le (NNNorm.nnnorm (HMul.hMul x y)) (Max.max (NNNorm.nnnorm x) (NNNorm.nnnorm y))\n⊢ IsUltrametricDist S'","decl":"@[to_additive]\nlemma isUltrametricDist_of_forall_nnnorm_mul_le_max_nnnorm\n    (h : ∀ x y : S', ‖x * y‖₊ ≤ max ‖x‖₊ ‖y‖₊) : IsUltrametricDist S' :=\n  isUltrametricDist_of_forall_norm_mul_le_max_norm h\n\n"}
{"name":"IsUltrametricDist.isUltrametricDist_of_forall_nnnorm_add_le_max_nnnorm","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S' : Type u_2\ninst✝ : SeminormedAddGroup S'\nh : ∀ (x y : S'), LE.le (NNNorm.nnnorm (HAdd.hAdd x y)) (Max.max (NNNorm.nnnorm x) (NNNorm.nnnorm y))\n⊢ IsUltrametricDist S'","decl":"@[to_additive]\nlemma isUltrametricDist_of_forall_nnnorm_mul_le_max_nnnorm\n    (h : ∀ x y : S', ‖x * y‖₊ ≤ max ‖x‖₊ ‖y‖₊) : IsUltrametricDist S' :=\n  isUltrametricDist_of_forall_norm_mul_le_max_norm h\n\n"}
{"name":"IsUltrametricDist.isUltrametricDist_of_isNonarchimedean_nnnorm","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S' : Type u_4\ninst✝ : SeminormedAddGroup S'\nh : IsNonarchimedean (Function.comp NNReal.toReal NNNorm.nnnorm)\n⊢ IsUltrametricDist S'","decl":"lemma isUltrametricDist_of_isNonarchimedean_nnnorm {S' : Type*} [SeminormedAddGroup S']\n    (h : IsNonarchimedean ((↑) ∘ (nnnorm : S' → ℝ≥0))) : IsUltrametricDist S' :=\n  isUltrametricDist_of_forall_nnnorm_add_le_max_nnnorm h\n\n"}
{"name":"IsUltrametricDist.isNonarchimedean_nnnorm","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"R : Type u_4\ninst✝¹ : SeminormedAddCommGroup R\ninst✝ : IsUltrametricDist R\n⊢ IsNonarchimedean fun x => ↑(NNNorm.nnnorm x)","decl":"lemma isNonarchimedean_nnnorm {R} [SeminormedAddCommGroup R] [IsUltrametricDist R] :\n    IsNonarchimedean (‖·‖₊ : R → ℝ) := by\n  intro x y\n  convert dist_triangle_max 0 x (x + y) using 1\n  · simp\n  · congr <;> simp [SeminormedAddGroup.dist_eq]\n\n"}
{"name":"IsUltrametricDist.isUltrametricDist_iff_isNonarchimedean_nnnorm","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"R : Type u_4\ninst✝ : SeminormedAddCommGroup R\n⊢ Iff (IsUltrametricDist R) (IsNonarchimedean fun x => ↑(NNNorm.nnnorm x))","decl":"lemma isUltrametricDist_iff_isNonarchimedean_nnnorm {R} [SeminormedAddCommGroup R] :\n    IsUltrametricDist R ↔ IsNonarchimedean (‖·‖₊ : R → ℝ) :=\n  ⟨fun h => h.isNonarchimedean_norm, IsUltrametricDist.isUltrametricDist_of_isNonarchimedean_norm⟩\n\n"}
{"name":"IsUltrametricDist.norm_add_eq_max_of_norm_ne_norm","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedAddGroup S\ninst✝ : IsUltrametricDist S\nx y : S\nh : Ne (Norm.norm x) (Norm.norm y)\n⊢ Eq (Norm.norm (HAdd.hAdd x y)) (Max.max (Norm.norm x) (Norm.norm y))","decl":"/-- All triangles are isosceles in an ultrametric normed group. -/\n@[to_additive \"All triangles are isosceles in an ultrametric normed additive group.\"]\nlemma norm_mul_eq_max_of_norm_ne_norm\n    {x y : S} (h : ‖x‖ ≠ ‖y‖) : ‖x * y‖ = max ‖x‖ ‖y‖ := by\n  rw [← div_inv_eq_mul, ← dist_eq_norm_div, dist_eq_max_of_dist_ne_dist _ 1 _ (by simp [h])]\n  simp only [dist_one_right, dist_one_left, norm_inv']\n\n"}
{"name":"IsUltrametricDist.norm_mul_eq_max_of_norm_ne_norm","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedGroup S\ninst✝ : IsUltrametricDist S\nx y : S\nh : Ne (Norm.norm x) (Norm.norm y)\n⊢ Eq (Norm.norm (HMul.hMul x y)) (Max.max (Norm.norm x) (Norm.norm y))","decl":"/-- All triangles are isosceles in an ultrametric normed group. -/\n@[to_additive \"All triangles are isosceles in an ultrametric normed additive group.\"]\nlemma norm_mul_eq_max_of_norm_ne_norm\n    {x y : S} (h : ‖x‖ ≠ ‖y‖) : ‖x * y‖ = max ‖x‖ ‖y‖ := by\n  rw [← div_inv_eq_mul, ← dist_eq_norm_div, dist_eq_max_of_dist_ne_dist _ 1 _ (by simp [h])]\n  simp only [dist_one_right, dist_one_left, norm_inv']\n\n"}
{"name":"IsUltrametricDist.norm_eq_of_add_norm_lt_max","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedAddGroup S\ninst✝ : IsUltrametricDist S\nx y : S\nh : LT.lt (Norm.norm (HAdd.hAdd x y)) (Max.max (Norm.norm x) (Norm.norm y))\n⊢ Eq (Norm.norm x) (Norm.norm y)","decl":"@[to_additive]\nlemma norm_eq_of_mul_norm_lt_max {x y : S} (h : ‖x * y‖ < max ‖x‖ ‖y‖) :\n    ‖x‖ = ‖y‖ :=\n  not_ne_iff.mp (h.ne ∘ norm_mul_eq_max_of_norm_ne_norm)\n\n"}
{"name":"IsUltrametricDist.norm_eq_of_mul_norm_lt_max","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedGroup S\ninst✝ : IsUltrametricDist S\nx y : S\nh : LT.lt (Norm.norm (HMul.hMul x y)) (Max.max (Norm.norm x) (Norm.norm y))\n⊢ Eq (Norm.norm x) (Norm.norm y)","decl":"@[to_additive]\nlemma norm_eq_of_mul_norm_lt_max {x y : S} (h : ‖x * y‖ < max ‖x‖ ‖y‖) :\n    ‖x‖ = ‖y‖ :=\n  not_ne_iff.mp (h.ne ∘ norm_mul_eq_max_of_norm_ne_norm)\n\n"}
{"name":"IsUltrametricDist.nnnorm_mul_eq_max_of_nnnorm_ne_nnnorm","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedGroup S\ninst✝ : IsUltrametricDist S\nx y : S\nh : Ne (NNNorm.nnnorm x) (NNNorm.nnnorm y)\n⊢ Eq (NNNorm.nnnorm (HMul.hMul x y)) (Max.max (NNNorm.nnnorm x) (NNNorm.nnnorm y))","decl":"/-- All triangles are isosceles in an ultrametric normed group. -/\n@[to_additive \"All triangles are isosceles in an ultrametric normed additive group.\"]\nlemma nnnorm_mul_eq_max_of_nnnorm_ne_nnnorm\n    {x y : S} (h : ‖x‖₊ ≠ ‖y‖₊) : ‖x * y‖₊ = max ‖x‖₊ ‖y‖₊ := by\n  simpa only [← NNReal.coe_inj, NNReal.coe_max] using\n    norm_mul_eq_max_of_norm_ne_norm (NNReal.coe_injective.ne h)\n\n"}
{"name":"IsUltrametricDist.nnnorm_add_eq_max_of_nnnorm_ne_nnnorm","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedAddGroup S\ninst✝ : IsUltrametricDist S\nx y : S\nh : Ne (NNNorm.nnnorm x) (NNNorm.nnnorm y)\n⊢ Eq (NNNorm.nnnorm (HAdd.hAdd x y)) (Max.max (NNNorm.nnnorm x) (NNNorm.nnnorm y))","decl":"/-- All triangles are isosceles in an ultrametric normed group. -/\n@[to_additive \"All triangles are isosceles in an ultrametric normed additive group.\"]\nlemma nnnorm_mul_eq_max_of_nnnorm_ne_nnnorm\n    {x y : S} (h : ‖x‖₊ ≠ ‖y‖₊) : ‖x * y‖₊ = max ‖x‖₊ ‖y‖₊ := by\n  simpa only [← NNReal.coe_inj, NNReal.coe_max] using\n    norm_mul_eq_max_of_norm_ne_norm (NNReal.coe_injective.ne h)\n\n"}
{"name":"IsUltrametricDist.nnnorm_eq_of_add_nnnorm_lt_max","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedAddGroup S\ninst✝ : IsUltrametricDist S\nx y : S\nh : LT.lt (NNNorm.nnnorm (HAdd.hAdd x y)) (Max.max (NNNorm.nnnorm x) (NNNorm.nnnorm y))\n⊢ Eq (NNNorm.nnnorm x) (NNNorm.nnnorm y)","decl":"@[to_additive]\nlemma nnnorm_eq_of_mul_nnnorm_lt_max {x y : S} (h : ‖x * y‖₊ < max ‖x‖₊ ‖y‖₊) :\n    ‖x‖₊ = ‖y‖₊ :=\n  not_ne_iff.mp (h.ne ∘ nnnorm_mul_eq_max_of_nnnorm_ne_nnnorm)\n\n"}
{"name":"IsUltrametricDist.nnnorm_eq_of_mul_nnnorm_lt_max","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedGroup S\ninst✝ : IsUltrametricDist S\nx y : S\nh : LT.lt (NNNorm.nnnorm (HMul.hMul x y)) (Max.max (NNNorm.nnnorm x) (NNNorm.nnnorm y))\n⊢ Eq (NNNorm.nnnorm x) (NNNorm.nnnorm y)","decl":"@[to_additive]\nlemma nnnorm_eq_of_mul_nnnorm_lt_max {x y : S} (h : ‖x * y‖₊ < max ‖x‖₊ ‖y‖₊) :\n    ‖x‖₊ = ‖y‖₊ :=\n  not_ne_iff.mp (h.ne ∘ nnnorm_mul_eq_max_of_nnnorm_ne_nnnorm)\n\n"}
{"name":"IsUltrametricDist.norm_sub_eq_max_of_norm_sub_ne_norm_sub","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedAddGroup S\ninst✝ : IsUltrametricDist S\nx y z : S\nh : Ne (Norm.norm (HSub.hSub x y)) (Norm.norm (HSub.hSub y z))\n⊢ Eq (Norm.norm (HSub.hSub x z)) (Max.max (Norm.norm (HSub.hSub x y)) (Norm.norm (HSub.hSub y z)))","decl":"/-- All triangles are isosceles in an ultrametric normed group. -/\n@[to_additive \"All triangles are isosceles in an ultrametric normed additive group.\"]\nlemma norm_div_eq_max_of_norm_div_ne_norm_div (x y z : S) (h : ‖x / y‖ ≠ ‖y / z‖) :\n    ‖x / z‖ = max ‖x / y‖ ‖y / z‖ := by\n  simpa only [div_mul_div_cancel] using norm_mul_eq_max_of_norm_ne_norm h\n\n"}
{"name":"IsUltrametricDist.norm_div_eq_max_of_norm_div_ne_norm_div","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedGroup S\ninst✝ : IsUltrametricDist S\nx y z : S\nh : Ne (Norm.norm (HDiv.hDiv x y)) (Norm.norm (HDiv.hDiv y z))\n⊢ Eq (Norm.norm (HDiv.hDiv x z)) (Max.max (Norm.norm (HDiv.hDiv x y)) (Norm.norm (HDiv.hDiv y z)))","decl":"/-- All triangles are isosceles in an ultrametric normed group. -/\n@[to_additive \"All triangles are isosceles in an ultrametric normed additive group.\"]\nlemma norm_div_eq_max_of_norm_div_ne_norm_div (x y z : S) (h : ‖x / y‖ ≠ ‖y / z‖) :\n    ‖x / z‖ = max ‖x / y‖ ‖y / z‖ := by\n  simpa only [div_mul_div_cancel] using norm_mul_eq_max_of_norm_ne_norm h\n\n"}
{"name":"IsUltrametricDist.nnnorm_div_eq_max_of_nnnorm_div_ne_nnnorm_div","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedGroup S\ninst✝ : IsUltrametricDist S\nx y z : S\nh : Ne (NNNorm.nnnorm (HDiv.hDiv x y)) (NNNorm.nnnorm (HDiv.hDiv y z))\n⊢ Eq (NNNorm.nnnorm (HDiv.hDiv x z)) (Max.max (NNNorm.nnnorm (HDiv.hDiv x y)) (NNNorm.nnnorm (HDiv.hDiv y z)))","decl":"/-- All triangles are isosceles in an ultrametric normed group. -/\n@[to_additive \"All triangles are isosceles in an ultrametric normed additive group.\"]\nlemma nnnorm_div_eq_max_of_nnnorm_div_ne_nnnorm_div (x y z : S) (h : ‖x / y‖₊ ≠ ‖y / z‖₊) :\n    ‖x / z‖₊ = max ‖x / y‖₊ ‖y / z‖₊ := by\n  simpa only [← NNReal.coe_inj, NNReal.coe_max] using\n    norm_div_eq_max_of_norm_div_ne_norm_div _ _ _ (NNReal.coe_injective.ne h)\n\n"}
{"name":"IsUltrametricDist.nnnorm_sub_eq_max_of_nnnorm_sub_ne_nnnorm_sub","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedAddGroup S\ninst✝ : IsUltrametricDist S\nx y z : S\nh : Ne (NNNorm.nnnorm (HSub.hSub x y)) (NNNorm.nnnorm (HSub.hSub y z))\n⊢ Eq (NNNorm.nnnorm (HSub.hSub x z)) (Max.max (NNNorm.nnnorm (HSub.hSub x y)) (NNNorm.nnnorm (HSub.hSub y z)))","decl":"/-- All triangles are isosceles in an ultrametric normed group. -/\n@[to_additive \"All triangles are isosceles in an ultrametric normed additive group.\"]\nlemma nnnorm_div_eq_max_of_nnnorm_div_ne_nnnorm_div (x y z : S) (h : ‖x / y‖₊ ≠ ‖y / z‖₊) :\n    ‖x / z‖₊ = max ‖x / y‖₊ ‖y / z‖₊ := by\n  simpa only [← NNReal.coe_inj, NNReal.coe_max] using\n    norm_div_eq_max_of_norm_div_ne_norm_div _ _ _ (NNReal.coe_injective.ne h)\n\n"}
{"name":"IsUltrametricDist.nnnorm_pow_le","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedGroup S\ninst✝ : IsUltrametricDist S\nx : S\nn : Nat\n⊢ LE.le (NNNorm.nnnorm (HPow.hPow x n)) (NNNorm.nnnorm x)","decl":"@[to_additive]\nlemma nnnorm_pow_le (x : S) (n : ℕ) :\n    ‖x ^ n‖₊ ≤ ‖x‖₊ := by\n  induction n with\n  | zero => simp\n  | succ n hn => simpa [pow_add, hn] using nnnorm_mul_le_max (x ^ n) x\n\n"}
{"name":"IsUltrametricDist.nnnorm_nsmul_le","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedAddGroup S\ninst✝ : IsUltrametricDist S\nx : S\nn : Nat\n⊢ LE.le (NNNorm.nnnorm (HSMul.hSMul n x)) (NNNorm.nnnorm x)","decl":"@[to_additive]\nlemma nnnorm_pow_le (x : S) (n : ℕ) :\n    ‖x ^ n‖₊ ≤ ‖x‖₊ := by\n  induction n with\n  | zero => simp\n  | succ n hn => simpa [pow_add, hn] using nnnorm_mul_le_max (x ^ n) x\n\n"}
{"name":"IsUltrametricDist.norm_nsmul_le","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedAddGroup S\ninst✝ : IsUltrametricDist S\nx : S\nn : Nat\n⊢ LE.le (Norm.norm (HSMul.hSMul n x)) (Norm.norm x)","decl":"@[to_additive]\nlemma norm_pow_le (x : S) (n : ℕ) :\n    ‖x ^ n‖ ≤ ‖x‖ :=\n  nnnorm_pow_le x n\n\n"}
{"name":"IsUltrametricDist.norm_pow_le","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedGroup S\ninst✝ : IsUltrametricDist S\nx : S\nn : Nat\n⊢ LE.le (Norm.norm (HPow.hPow x n)) (Norm.norm x)","decl":"@[to_additive]\nlemma norm_pow_le (x : S) (n : ℕ) :\n    ‖x ^ n‖ ≤ ‖x‖ :=\n  nnnorm_pow_le x n\n\n"}
{"name":"IsUltrametricDist.nnnorm_zpow_le","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedGroup S\ninst✝ : IsUltrametricDist S\nx : S\nz : Int\n⊢ LE.le (NNNorm.nnnorm (HPow.hPow x z)) (NNNorm.nnnorm x)","decl":"@[to_additive]\nlemma nnnorm_zpow_le (x : S) (z : ℤ) :\n    ‖x ^ z‖₊ ≤ ‖x‖₊ := by\n  cases z <;>\n  simpa using nnnorm_pow_le _ _\n\n"}
{"name":"IsUltrametricDist.nnnorm_zsmul_le","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedAddGroup S\ninst✝ : IsUltrametricDist S\nx : S\nz : Int\n⊢ LE.le (NNNorm.nnnorm (HSMul.hSMul z x)) (NNNorm.nnnorm x)","decl":"@[to_additive]\nlemma nnnorm_zpow_le (x : S) (z : ℤ) :\n    ‖x ^ z‖₊ ≤ ‖x‖₊ := by\n  cases z <;>\n  simpa using nnnorm_pow_le _ _\n\n"}
{"name":"IsUltrametricDist.norm_zsmul_le","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedAddGroup S\ninst✝ : IsUltrametricDist S\nx : S\nz : Int\n⊢ LE.le (Norm.norm (HSMul.hSMul z x)) (Norm.norm x)","decl":"@[to_additive]\nlemma norm_zpow_le (x : S) (z : ℤ) :\n    ‖x ^ z‖ ≤ ‖x‖ :=\n  nnnorm_zpow_le x z\n\n"}
{"name":"IsUltrametricDist.norm_zpow_le","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"S : Type u_1\ninst✝¹ : SeminormedGroup S\ninst✝ : IsUltrametricDist S\nx : S\nz : Int\n⊢ LE.le (Norm.norm (HPow.hPow x z)) (Norm.norm x)","decl":"@[to_additive]\nlemma norm_zpow_le (x : S) (z : ℤ) :\n    ‖x ^ z‖ ≤ ‖x‖ :=\n  nnnorm_zpow_le x z\n\n"}
{"name":"IsUltrametricDist.nonarchimedeanAddGroup","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\ninst✝ : SeminormedAddCommGroup M\n⊢ NonarchimedeanAddGroup M","decl":"/-- A commutative group with an ultrametric group seminorm is nonarchimedean (as a topological\ngroup, i.e. every neighborhood of 1 contains an open subgroup). -/\n@[to_additive \"A commutative additive group with an ultrametric group seminorm is nonarchimedean\n(as a topological group, i.e. every neighborhood of 0 contains an open subgroup).\"]\ninstance nonarchimedeanGroup : NonarchimedeanGroup M where\n  is_nonarchimedean := by simpa only [Metric.mem_nhds_iff]\n    using fun U ⟨ε, hεp, hεU⟩ ↦ ⟨ball_openSubgroup M hεp, hεU⟩\n\n"}
{"name":"IsUltrametricDist.nonarchimedeanGroup","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\ninst✝ : SeminormedCommGroup M\n⊢ NonarchimedeanGroup M","decl":"/-- A commutative group with an ultrametric group seminorm is nonarchimedean (as a topological\ngroup, i.e. every neighborhood of 1 contains an open subgroup). -/\n@[to_additive \"A commutative additive group with an ultrametric group seminorm is nonarchimedean\n(as a topological group, i.e. every neighborhood of 0 contains an open subgroup).\"]\ninstance nonarchimedeanGroup : NonarchimedeanGroup M where\n  is_nonarchimedean := by simpa only [Metric.mem_nhds_iff]\n    using fun U ⟨ε, hεp, hεU⟩ ↦ ⟨ball_openSubgroup M hεp, hεU⟩\n\n"}
{"name":"Finset.Nonempty.norm_sum_le_sup'_norm","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝¹ : SeminormedAddCommGroup M\ninst✝ : IsUltrametricDist M\ns : Finset ι\nhs : s.Nonempty\nf : ι → M\n⊢ LE.le (Norm.norm (s.sum fun i => f i)) (s.sup' hs fun x => Norm.norm (f x))","decl":"/-- Nonarchimedean norm of a product is less than or equal the norm of any term in the product.\nThis version is phrased using `Finset.sup'` and `Finset.Nonempty` due to `Finset.sup`\noperating over an `OrderBot`, which `ℝ` is not.\n-/\n@[to_additive \"Nonarchimedean norm of a sum is less than or equal the norm of any term in the sum.\nThis version is phrased using `Finset.sup'` and `Finset.Nonempty` due to `Finset.sup`\noperating over an `OrderBot`, which `ℝ` is not. \"]\nlemma _root_.Finset.Nonempty.norm_prod_le_sup'_norm {s : Finset ι} (hs : s.Nonempty) (f : ι → M) :\n    ‖∏ i ∈ s, f i‖ ≤ s.sup' hs (‖f ·‖) := by\n  simp only [Finset.le_sup'_iff]\n  induction hs using Finset.Nonempty.cons_induction with\n  | singleton j => simp only [Finset.mem_singleton, Finset.prod_singleton, exists_eq_left, le_refl]\n  | cons j t hj _ IH =>\n      simp only [Finset.prod_cons, Finset.mem_cons, exists_eq_or_imp]\n      refine (le_total ‖∏ i ∈ t, f i‖ ‖f j‖).imp ?_ ?_ <;> intro h\n      · exact (norm_mul_le_max _ _).trans (max_eq_left h).le\n      · exact ⟨_, IH.choose_spec.left, (norm_mul_le_max _ _).trans <|\n          ((max_eq_right h).le.trans IH.choose_spec.right)⟩\n\n"}
{"name":"Finset.Nonempty.norm_prod_le_sup'_norm","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝¹ : SeminormedCommGroup M\ninst✝ : IsUltrametricDist M\ns : Finset ι\nhs : s.Nonempty\nf : ι → M\n⊢ LE.le (Norm.norm (s.prod fun i => f i)) (s.sup' hs fun x => Norm.norm (f x))","decl":"/-- Nonarchimedean norm of a product is less than or equal the norm of any term in the product.\nThis version is phrased using `Finset.sup'` and `Finset.Nonempty` due to `Finset.sup`\noperating over an `OrderBot`, which `ℝ` is not.\n-/\n@[to_additive \"Nonarchimedean norm of a sum is less than or equal the norm of any term in the sum.\nThis version is phrased using `Finset.sup'` and `Finset.Nonempty` due to `Finset.sup`\noperating over an `OrderBot`, which `ℝ` is not. \"]\nlemma _root_.Finset.Nonempty.norm_prod_le_sup'_norm {s : Finset ι} (hs : s.Nonempty) (f : ι → M) :\n    ‖∏ i ∈ s, f i‖ ≤ s.sup' hs (‖f ·‖) := by\n  simp only [Finset.le_sup'_iff]\n  induction hs using Finset.Nonempty.cons_induction with\n  | singleton j => simp only [Finset.mem_singleton, Finset.prod_singleton, exists_eq_left, le_refl]\n  | cons j t hj _ IH =>\n      simp only [Finset.prod_cons, Finset.mem_cons, exists_eq_or_imp]\n      refine (le_total ‖∏ i ∈ t, f i‖ ‖f j‖).imp ?_ ?_ <;> intro h\n      · exact (norm_mul_le_max _ _).trans (max_eq_left h).le\n      · exact ⟨_, IH.choose_spec.left, (norm_mul_le_max _ _).trans <|\n          ((max_eq_right h).le.trans IH.choose_spec.right)⟩\n\n"}
{"name":"Finset.nnnorm_sum_le_sup_nnnorm","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝¹ : SeminormedAddCommGroup M\ninst✝ : IsUltrametricDist M\ns : Finset ι\nf : ι → M\n⊢ LE.le (NNNorm.nnnorm (s.sum fun i => f i)) (s.sup fun x => NNNorm.nnnorm (f x))","decl":"/-- Nonarchimedean norm of a product is less than or equal to the largest norm of a term in the\nproduct. -/\n@[to_additive \"Nonarchimedean norm of a sum is less than or equal to the largest norm of a term in\nthe sum.\"]\nlemma _root_.Finset.nnnorm_prod_le_sup_nnnorm (s : Finset ι) (f : ι → M) :\n    ‖∏ i ∈ s, f i‖₊ ≤ s.sup (‖f ·‖₊) := by\n  rcases s.eq_empty_or_nonempty with rfl|hs\n  · simp only [Finset.prod_empty, nnnorm_one', Finset.sup_empty, bot_eq_zero', le_refl]\n  · simpa only [← Finset.sup'_eq_sup hs, Finset.le_sup'_iff, coe_le_coe, coe_nnnorm']\n      using hs.norm_prod_le_sup'_norm f\n\n"}
{"name":"Finset.nnnorm_prod_le_sup_nnnorm","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝¹ : SeminormedCommGroup M\ninst✝ : IsUltrametricDist M\ns : Finset ι\nf : ι → M\n⊢ LE.le (NNNorm.nnnorm (s.prod fun i => f i)) (s.sup fun x => NNNorm.nnnorm (f x))","decl":"/-- Nonarchimedean norm of a product is less than or equal to the largest norm of a term in the\nproduct. -/\n@[to_additive \"Nonarchimedean norm of a sum is less than or equal to the largest norm of a term in\nthe sum.\"]\nlemma _root_.Finset.nnnorm_prod_le_sup_nnnorm (s : Finset ι) (f : ι → M) :\n    ‖∏ i ∈ s, f i‖₊ ≤ s.sup (‖f ·‖₊) := by\n  rcases s.eq_empty_or_nonempty with rfl|hs\n  · simp only [Finset.prod_empty, nnnorm_one', Finset.sup_empty, bot_eq_zero', le_refl]\n  · simpa only [← Finset.sup'_eq_sup hs, Finset.le_sup'_iff, coe_le_coe, coe_nnnorm']\n      using hs.norm_prod_le_sup'_norm f\n\n"}
{"name":"IsUltrametricDist.nnnorm_sum_le_of_forall_le","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝¹ : SeminormedAddCommGroup M\ninst✝ : IsUltrametricDist M\ns : Finset ι\nf : ι → M\nC : NNReal\nhC : ∀ (i : ι), Membership.mem s i → LE.le (NNNorm.nnnorm (f i)) C\n⊢ LE.le (NNNorm.nnnorm (s.sum fun i => f i)) C","decl":"/--\nGeneralised ultrametric triangle inequality for finite products in commutative groups with\nan ultrametric norm.\n-/\n@[to_additive \"Generalised ultrametric triangle inequality for finite sums in additive commutative\ngroups with an ultrametric norm.\"]\nlemma nnnorm_prod_le_of_forall_le {s : Finset ι} {f : ι → M} {C : ℝ≥0}\n    (hC : ∀ i ∈ s, ‖f i‖₊ ≤ C) : ‖∏ i ∈ s, f i‖₊ ≤ C :=\n  (s.nnnorm_prod_le_sup_nnnorm f).trans <| Finset.sup_le hC\n\n"}
{"name":"IsUltrametricDist.nnnorm_prod_le_of_forall_le","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝¹ : SeminormedCommGroup M\ninst✝ : IsUltrametricDist M\ns : Finset ι\nf : ι → M\nC : NNReal\nhC : ∀ (i : ι), Membership.mem s i → LE.le (NNNorm.nnnorm (f i)) C\n⊢ LE.le (NNNorm.nnnorm (s.prod fun i => f i)) C","decl":"/--\nGeneralised ultrametric triangle inequality for finite products in commutative groups with\nan ultrametric norm.\n-/\n@[to_additive \"Generalised ultrametric triangle inequality for finite sums in additive commutative\ngroups with an ultrametric norm.\"]\nlemma nnnorm_prod_le_of_forall_le {s : Finset ι} {f : ι → M} {C : ℝ≥0}\n    (hC : ∀ i ∈ s, ‖f i‖₊ ≤ C) : ‖∏ i ∈ s, f i‖₊ ≤ C :=\n  (s.nnnorm_prod_le_sup_nnnorm f).trans <| Finset.sup_le hC\n\n"}
{"name":"IsUltrametricDist.norm_prod_le_of_forall_le_of_nonempty","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝¹ : SeminormedCommGroup M\ninst✝ : IsUltrametricDist M\ns : Finset ι\nhs : s.Nonempty\nf : ι → M\nC : Real\nhC : ∀ (i : ι), Membership.mem s i → LE.le (Norm.norm (f i)) C\n⊢ LE.le (Norm.norm (s.prod fun i => f i)) C","decl":"/--\nGeneralised ultrametric triangle inequality for nonempty finite products in commutative groups with\nan ultrametric norm.\n-/\n@[to_additive \"Generalised ultrametric triangle inequality for nonempty finite sums in additive\ncommutative groups with an ultrametric norm.\"]\nlemma norm_prod_le_of_forall_le_of_nonempty {s : Finset ι} (hs : s.Nonempty) {f : ι → M} {C : ℝ}\n    (hC : ∀ i ∈ s, ‖f i‖ ≤ C) : ‖∏ i ∈ s, f i‖ ≤ C :=\n  (hs.norm_prod_le_sup'_norm f).trans (Finset.sup'_le hs _ hC)\n\n"}
{"name":"IsUltrametricDist.norm_sum_le_of_forall_le_of_nonempty","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝¹ : SeminormedAddCommGroup M\ninst✝ : IsUltrametricDist M\ns : Finset ι\nhs : s.Nonempty\nf : ι → M\nC : Real\nhC : ∀ (i : ι), Membership.mem s i → LE.le (Norm.norm (f i)) C\n⊢ LE.le (Norm.norm (s.sum fun i => f i)) C","decl":"/--\nGeneralised ultrametric triangle inequality for nonempty finite products in commutative groups with\nan ultrametric norm.\n-/\n@[to_additive \"Generalised ultrametric triangle inequality for nonempty finite sums in additive\ncommutative groups with an ultrametric norm.\"]\nlemma norm_prod_le_of_forall_le_of_nonempty {s : Finset ι} (hs : s.Nonempty) {f : ι → M} {C : ℝ}\n    (hC : ∀ i ∈ s, ‖f i‖ ≤ C) : ‖∏ i ∈ s, f i‖ ≤ C :=\n  (hs.norm_prod_le_sup'_norm f).trans (Finset.sup'_le hs _ hC)\n\n"}
{"name":"IsUltrametricDist.norm_sum_le_of_forall_le_of_nonneg","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝¹ : SeminormedAddCommGroup M\ninst✝ : IsUltrametricDist M\ns : Finset ι\nf : ι → M\nC : Real\nh_nonneg : LE.le 0 C\nhC : ∀ (i : ι), Membership.mem s i → LE.le (Norm.norm (f i)) C\n⊢ LE.le (Norm.norm (s.sum fun i => f i)) C","decl":"/--\nGeneralised ultrametric triangle inequality for finite products in commutative groups with\nan ultrametric norm.\n-/\n@[to_additive \"Generalised ultrametric triangle inequality for finite sums in additive commutative\ngroups with an ultrametric norm.\"]\nlemma norm_prod_le_of_forall_le_of_nonneg {s : Finset ι} {f : ι → M} {C : ℝ}\n    (h_nonneg : 0 ≤ C) (hC : ∀ i ∈ s, ‖f i‖ ≤ C) : ‖∏ i ∈ s, f i‖ ≤ C := by\n  lift C to NNReal using h_nonneg\n  exact nnnorm_prod_le_of_forall_le hC\n\n"}
{"name":"IsUltrametricDist.norm_prod_le_of_forall_le_of_nonneg","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝¹ : SeminormedCommGroup M\ninst✝ : IsUltrametricDist M\ns : Finset ι\nf : ι → M\nC : Real\nh_nonneg : LE.le 0 C\nhC : ∀ (i : ι), Membership.mem s i → LE.le (Norm.norm (f i)) C\n⊢ LE.le (Norm.norm (s.prod fun i => f i)) C","decl":"/--\nGeneralised ultrametric triangle inequality for finite products in commutative groups with\nan ultrametric norm.\n-/\n@[to_additive \"Generalised ultrametric triangle inequality for finite sums in additive commutative\ngroups with an ultrametric norm.\"]\nlemma norm_prod_le_of_forall_le_of_nonneg {s : Finset ι} {f : ι → M} {C : ℝ}\n    (h_nonneg : 0 ≤ C) (hC : ∀ i ∈ s, ‖f i‖ ≤ C) : ‖∏ i ∈ s, f i‖ ≤ C := by\n  lift C to NNReal using h_nonneg\n  exact nnnorm_prod_le_of_forall_le hC\n\n"}
{"name":"IsUltrametricDist.exists_norm_finset_sum_le_of_nonempty","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝¹ : SeminormedAddCommGroup M\ninst✝ : IsUltrametricDist M\nt : Finset ι\nht : t.Nonempty\nf : ι → M\n⊢ Exists fun i => And (Membership.mem t i) (LE.le (Norm.norm (t.sum fun j => f j)) (Norm.norm (f i)))","decl":"/--\nGiven a function `f : ι → M` and a nonempty finite set `t ⊆ ι`, we can always find `i ∈ t` such that\n`‖∏ j in t, f j‖ ≤ ‖f i‖`.\n-/\n@[to_additive \"Given a function `f : ι → M` and a nonempty finite set `t ⊆ ι`, we can always find\n`i ∈ t` such that `‖∑ j ∈ t, f j‖ ≤ ‖f i‖`.\"]\ntheorem exists_norm_finset_prod_le_of_nonempty {t : Finset ι} (ht : t.Nonempty) (f : ι → M) :\n    ∃ i ∈ t, ‖∏ j ∈ t, f j‖ ≤ ‖f i‖ :=\n  match t.exists_mem_eq_sup' ht (‖f ·‖) with\n  |⟨j, hj, hj'⟩ => ⟨j, hj, (ht.norm_prod_le_sup'_norm f).trans (le_of_eq hj')⟩\n\n"}
{"name":"IsUltrametricDist.exists_norm_finset_prod_le_of_nonempty","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝¹ : SeminormedCommGroup M\ninst✝ : IsUltrametricDist M\nt : Finset ι\nht : t.Nonempty\nf : ι → M\n⊢ Exists fun i => And (Membership.mem t i) (LE.le (Norm.norm (t.prod fun j => f j)) (Norm.norm (f i)))","decl":"/--\nGiven a function `f : ι → M` and a nonempty finite set `t ⊆ ι`, we can always find `i ∈ t` such that\n`‖∏ j in t, f j‖ ≤ ‖f i‖`.\n-/\n@[to_additive \"Given a function `f : ι → M` and a nonempty finite set `t ⊆ ι`, we can always find\n`i ∈ t` such that `‖∑ j ∈ t, f j‖ ≤ ‖f i‖`.\"]\ntheorem exists_norm_finset_prod_le_of_nonempty {t : Finset ι} (ht : t.Nonempty) (f : ι → M) :\n    ∃ i ∈ t, ‖∏ j ∈ t, f j‖ ≤ ‖f i‖ :=\n  match t.exists_mem_eq_sup' ht (‖f ·‖) with\n  |⟨j, hj, hj'⟩ => ⟨j, hj, (ht.norm_prod_le_sup'_norm f).trans (le_of_eq hj')⟩\n\n"}
{"name":"IsUltrametricDist.exists_norm_finset_sum_le","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝² : SeminormedAddCommGroup M\ninst✝¹ : IsUltrametricDist M\nt : Finset ι\ninst✝ : Nonempty ι\nf : ι → M\n⊢ Exists fun i => And (t.Nonempty → Membership.mem t i) (LE.le (Norm.norm (t.sum fun j => f j)) (Norm.norm (f i)))","decl":"/--\nGiven a function `f : ι → M` and a finite set `t ⊆ ι`, we can always find `i : ι`, belonging to `t`\nif `t` is nonempty, such that `‖∏ j ∈ t, f j‖ ≤ ‖f i‖`.\n-/\n@[to_additive \"Given a function `f : ι → M` and a finite set `t ⊆ ι`, we can always find `i : ι`,\nbelonging to `t` if `t` is nonempty, such that `‖∑ j ∈ t, f j‖ ≤ ‖f i‖`.\"]\ntheorem exists_norm_finset_prod_le (t : Finset ι) [Nonempty ι] (f : ι → M) :\n    ∃ i : ι, (t.Nonempty → i ∈ t) ∧ ‖∏ j ∈ t, f j‖ ≤ ‖f i‖ := by\n  rcases t.eq_empty_or_nonempty with rfl | ht\n  · simp\n  exact (fun ⟨i, h, h'⟩ => ⟨i, fun _ ↦ h, h'⟩) <| exists_norm_finset_prod_le_of_nonempty ht f\n\n"}
{"name":"IsUltrametricDist.exists_norm_finset_prod_le","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝² : SeminormedCommGroup M\ninst✝¹ : IsUltrametricDist M\nt : Finset ι\ninst✝ : Nonempty ι\nf : ι → M\n⊢ Exists fun i => And (t.Nonempty → Membership.mem t i) (LE.le (Norm.norm (t.prod fun j => f j)) (Norm.norm (f i)))","decl":"/--\nGiven a function `f : ι → M` and a finite set `t ⊆ ι`, we can always find `i : ι`, belonging to `t`\nif `t` is nonempty, such that `‖∏ j ∈ t, f j‖ ≤ ‖f i‖`.\n-/\n@[to_additive \"Given a function `f : ι → M` and a finite set `t ⊆ ι`, we can always find `i : ι`,\nbelonging to `t` if `t` is nonempty, such that `‖∑ j ∈ t, f j‖ ≤ ‖f i‖`.\"]\ntheorem exists_norm_finset_prod_le (t : Finset ι) [Nonempty ι] (f : ι → M) :\n    ∃ i : ι, (t.Nonempty → i ∈ t) ∧ ‖∏ j ∈ t, f j‖ ≤ ‖f i‖ := by\n  rcases t.eq_empty_or_nonempty with rfl | ht\n  · simp\n  exact (fun ⟨i, h, h'⟩ => ⟨i, fun _ ↦ h, h'⟩) <| exists_norm_finset_prod_le_of_nonempty ht f\n\n"}
{"name":"IsUltrametricDist.exists_norm_multiset_sum_le","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝² : SeminormedAddCommGroup M\ninst✝¹ : IsUltrametricDist M\ns : Multiset ι\ninst✝ : Nonempty ι\nf : ι → M\n⊢ Exists fun i => And (Ne s 0 → Membership.mem s i) (LE.le (Norm.norm (Multiset.map f s).sum) (Norm.norm (f i)))","decl":"/--\nGiven a function `f : ι → M` and a multiset `t : Multiset ι`, we can always find `i : ι`, belonging\nto `t` if `t` is nonempty, such that `‖(s.map f).prod‖ ≤ ‖f i‖`.\n-/\n@[to_additive \"Given a function `f : ι → M` and a multiset `t : Multiset ι`, we can always find\n`i : ι`, belonging to `t` if `t` is nonempty, such that `‖(s.map f).sum‖ ≤ ‖f i‖`.\"]\ntheorem exists_norm_multiset_prod_le (s : Multiset ι) [Nonempty ι] {f : ι → M} :\n    ∃ i : ι, (s ≠ 0 → i ∈ s) ∧ ‖(s.map f).prod‖ ≤ ‖f i‖ := by\n  inhabit ι\n  induction s using Multiset.induction_on with\n  | empty => simp\n  | @cons a t hM =>\n      obtain ⟨M, hMs, hM⟩ := hM\n      by_cases hMa : ‖f M‖ ≤ ‖f a‖\n      · refine ⟨a, by simp, ?_⟩\n        · rw [Multiset.map_cons, Multiset.prod_cons]\n          exact le_trans (norm_mul_le_max _ _) (max_le (le_refl _) (le_trans hM hMa))\n      · rw [not_le] at hMa\n        rcases eq_or_ne t 0 with rfl|ht\n        · exact ⟨a, by simp, by simp⟩\n        · refine ⟨M, ?_, ?_⟩\n          · simp [hMs ht]\n          rw [Multiset.map_cons, Multiset.prod_cons]\n          exact le_trans (norm_mul_le_max _ _) (max_le hMa.le hM)\n\n"}
{"name":"IsUltrametricDist.exists_norm_multiset_prod_le","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝² : SeminormedCommGroup M\ninst✝¹ : IsUltrametricDist M\ns : Multiset ι\ninst✝ : Nonempty ι\nf : ι → M\n⊢ Exists fun i => And (Ne s 0 → Membership.mem s i) (LE.le (Norm.norm (Multiset.map f s).prod) (Norm.norm (f i)))","decl":"/--\nGiven a function `f : ι → M` and a multiset `t : Multiset ι`, we can always find `i : ι`, belonging\nto `t` if `t` is nonempty, such that `‖(s.map f).prod‖ ≤ ‖f i‖`.\n-/\n@[to_additive \"Given a function `f : ι → M` and a multiset `t : Multiset ι`, we can always find\n`i : ι`, belonging to `t` if `t` is nonempty, such that `‖(s.map f).sum‖ ≤ ‖f i‖`.\"]\ntheorem exists_norm_multiset_prod_le (s : Multiset ι) [Nonempty ι] {f : ι → M} :\n    ∃ i : ι, (s ≠ 0 → i ∈ s) ∧ ‖(s.map f).prod‖ ≤ ‖f i‖ := by\n  inhabit ι\n  induction s using Multiset.induction_on with\n  | empty => simp\n  | @cons a t hM =>\n      obtain ⟨M, hMs, hM⟩ := hM\n      by_cases hMa : ‖f M‖ ≤ ‖f a‖\n      · refine ⟨a, by simp, ?_⟩\n        · rw [Multiset.map_cons, Multiset.prod_cons]\n          exact le_trans (norm_mul_le_max _ _) (max_le (le_refl _) (le_trans hM hMa))\n      · rw [not_le] at hMa\n        rcases eq_or_ne t 0 with rfl|ht\n        · exact ⟨a, by simp, by simp⟩\n        · refine ⟨M, ?_, ?_⟩\n          · simp [hMs ht]\n          rw [Multiset.map_cons, Multiset.prod_cons]\n          exact le_trans (norm_mul_le_max _ _) (max_le hMa.le hM)\n\n"}
{"name":"IsUltrametricDist.norm_tprod_le","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝¹ : SeminormedCommGroup M\ninst✝ : IsUltrametricDist M\nf : ι → M\n⊢ LE.le (Norm.norm (tprod fun i => f i)) (iSup fun i => Norm.norm (f i))","decl":"@[to_additive]\nlemma norm_tprod_le (f : ι → M) : ‖∏' i, f i‖ ≤ ⨆ i, ‖f i‖ := by\n  rcases isEmpty_or_nonempty ι with hι | hι\n  · -- Silly case #1 : the index type is empty\n    simp only [tprod_empty, norm_one', Real.iSup_of_isEmpty, le_refl]\n  by_cases h : Multipliable f; swap\n  · -- Silly case #2 : the product is divergent\n    rw [tprod_eq_one_of_not_multipliable h, norm_one']\n    by_cases h_bd : BddAbove (Set.range fun i ↦ ‖f i‖)\n    · exact le_ciSup_of_le h_bd hι.some (norm_nonneg' _)\n    · rw [Real.iSup_of_not_bddAbove h_bd]\n  -- now the interesting case\n  have h_bd : BddAbove (Set.range fun i ↦ ‖f i‖) :=\n    h.tendsto_cofinite_one.norm'.bddAbove_range_of_cofinite\n  refine le_of_tendsto' h.hasProd.norm' (fun s ↦ norm_prod_le_of_forall_le_of_nonneg ?_ ?_)\n  · exact le_ciSup_of_le h_bd hι.some (norm_nonneg' _)\n  · exact fun i _ ↦ le_ciSup h_bd i\n\n"}
{"name":"IsUltrametricDist.norm_tsum_le","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝¹ : SeminormedAddCommGroup M\ninst✝ : IsUltrametricDist M\nf : ι → M\n⊢ LE.le (Norm.norm (tsum fun i => f i)) (iSup fun i => Norm.norm (f i))","decl":"@[to_additive]\nlemma norm_tprod_le (f : ι → M) : ‖∏' i, f i‖ ≤ ⨆ i, ‖f i‖ := by\n  rcases isEmpty_or_nonempty ι with hι | hι\n  · -- Silly case #1 : the index type is empty\n    simp only [tprod_empty, norm_one', Real.iSup_of_isEmpty, le_refl]\n  by_cases h : Multipliable f; swap\n  · -- Silly case #2 : the product is divergent\n    rw [tprod_eq_one_of_not_multipliable h, norm_one']\n    by_cases h_bd : BddAbove (Set.range fun i ↦ ‖f i‖)\n    · exact le_ciSup_of_le h_bd hι.some (norm_nonneg' _)\n    · rw [Real.iSup_of_not_bddAbove h_bd]\n  -- now the interesting case\n  have h_bd : BddAbove (Set.range fun i ↦ ‖f i‖) :=\n    h.tendsto_cofinite_one.norm'.bddAbove_range_of_cofinite\n  refine le_of_tendsto' h.hasProd.norm' (fun s ↦ norm_prod_le_of_forall_le_of_nonneg ?_ ?_)\n  · exact le_ciSup_of_le h_bd hι.some (norm_nonneg' _)\n  · exact fun i _ ↦ le_ciSup h_bd i\n\n"}
{"name":"IsUltrametricDist.nnnorm_tsum_le","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝¹ : SeminormedAddCommGroup M\ninst✝ : IsUltrametricDist M\nf : ι → M\n⊢ LE.le (NNNorm.nnnorm (tsum fun i => f i)) (iSup fun i => NNNorm.nnnorm (f i))","decl":"@[to_additive]\nlemma nnnorm_tprod_le (f : ι → M) : ‖∏' i, f i‖₊ ≤ ⨆ i, ‖f i‖₊ := by\n  simpa only [← NNReal.coe_le_coe, coe_nnnorm', coe_iSup] using norm_tprod_le f\n\n"}
{"name":"IsUltrametricDist.nnnorm_tprod_le","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝¹ : SeminormedCommGroup M\ninst✝ : IsUltrametricDist M\nf : ι → M\n⊢ LE.le (NNNorm.nnnorm (tprod fun i => f i)) (iSup fun i => NNNorm.nnnorm (f i))","decl":"@[to_additive]\nlemma nnnorm_tprod_le (f : ι → M) : ‖∏' i, f i‖₊ ≤ ⨆ i, ‖f i‖₊ := by\n  simpa only [← NNReal.coe_le_coe, coe_nnnorm', coe_iSup] using norm_tprod_le f\n\n"}
{"name":"IsUltrametricDist.norm_tprod_le_of_forall_le","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝² : SeminormedCommGroup M\ninst✝¹ : IsUltrametricDist M\ninst✝ : Nonempty ι\nf : ι → M\nC : Real\nh : ∀ (i : ι), LE.le (Norm.norm (f i)) C\n⊢ LE.le (Norm.norm (tprod fun i => f i)) C","decl":"@[to_additive]\nlemma norm_tprod_le_of_forall_le [Nonempty ι] {f : ι → M} {C : ℝ} (h : ∀ i, ‖f i‖ ≤ C) :\n    ‖∏' i, f i‖ ≤ C :=\n  (norm_tprod_le f).trans (ciSup_le h)\n\n"}
{"name":"IsUltrametricDist.norm_tsum_le_of_forall_le","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝² : SeminormedAddCommGroup M\ninst✝¹ : IsUltrametricDist M\ninst✝ : Nonempty ι\nf : ι → M\nC : Real\nh : ∀ (i : ι), LE.le (Norm.norm (f i)) C\n⊢ LE.le (Norm.norm (tsum fun i => f i)) C","decl":"@[to_additive]\nlemma norm_tprod_le_of_forall_le [Nonempty ι] {f : ι → M} {C : ℝ} (h : ∀ i, ‖f i‖ ≤ C) :\n    ‖∏' i, f i‖ ≤ C :=\n  (norm_tprod_le f).trans (ciSup_le h)\n\n"}
{"name":"IsUltrametricDist.norm_tsum_le_of_forall_le_of_nonneg","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝¹ : SeminormedAddCommGroup M\ninst✝ : IsUltrametricDist M\nf : ι → M\nC : Real\nhC : LE.le 0 C\nh : ∀ (i : ι), LE.le (Norm.norm (f i)) C\n⊢ LE.le (Norm.norm (tsum fun i => f i)) C","decl":"@[to_additive]\nlemma norm_tprod_le_of_forall_le_of_nonneg {f : ι → M} {C : ℝ} (hC : 0 ≤ C) (h : ∀ i, ‖f i‖ ≤ C) :\n    ‖∏' i, f i‖ ≤ C := by\n  rcases isEmpty_or_nonempty ι\n  · simpa only [tprod_empty, norm_one'] using hC\n  · exact norm_tprod_le_of_forall_le h\n\n"}
{"name":"IsUltrametricDist.norm_tprod_le_of_forall_le_of_nonneg","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝¹ : SeminormedCommGroup M\ninst✝ : IsUltrametricDist M\nf : ι → M\nC : Real\nhC : LE.le 0 C\nh : ∀ (i : ι), LE.le (Norm.norm (f i)) C\n⊢ LE.le (Norm.norm (tprod fun i => f i)) C","decl":"@[to_additive]\nlemma norm_tprod_le_of_forall_le_of_nonneg {f : ι → M} {C : ℝ} (hC : 0 ≤ C) (h : ∀ i, ‖f i‖ ≤ C) :\n    ‖∏' i, f i‖ ≤ C := by\n  rcases isEmpty_or_nonempty ι\n  · simpa only [tprod_empty, norm_one'] using hC\n  · exact norm_tprod_le_of_forall_le h\n\n"}
{"name":"IsUltrametricDist.nnnorm_tsum_le_of_forall_le","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝¹ : SeminormedAddCommGroup M\ninst✝ : IsUltrametricDist M\nf : ι → M\nC : NNReal\nh : ∀ (i : ι), LE.le (NNNorm.nnnorm (f i)) C\n⊢ LE.le (NNNorm.nnnorm (tsum fun i => f i)) C","decl":"@[to_additive]\nlemma nnnorm_tprod_le_of_forall_le {f : ι → M} {C : ℝ≥0} (h : ∀ i, ‖f i‖₊ ≤ C) : ‖∏' i, f i‖₊ ≤ C :=\n  (nnnorm_tprod_le f).trans (ciSup_le' h)\n\n"}
{"name":"IsUltrametricDist.nnnorm_tprod_le_of_forall_le","module":"Mathlib.Analysis.Normed.Group.Ultra","initialProofState":"M : Type u_1\nι : Type u_2\ninst✝¹ : SeminormedCommGroup M\ninst✝ : IsUltrametricDist M\nf : ι → M\nC : NNReal\nh : ∀ (i : ι), LE.le (NNNorm.nnnorm (f i)) C\n⊢ LE.le (NNNorm.nnnorm (tprod fun i => f i)) C","decl":"@[to_additive]\nlemma nnnorm_tprod_le_of_forall_le {f : ι → M} {C : ℝ≥0} (h : ∀ i, ‖f i‖₊ ≤ C) : ‖∏' i, f i‖₊ ≤ C :=\n  (nnnorm_tprod_le f).trans (ciSup_le' h)\n\n"}
