{"name":"UniformConvexSpace.uniform_convex","module":"Mathlib.Analysis.Convex.Uniform","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nself : UniformConvexSpace E\nε : Real\na✝ : LT.lt 0 ε\n⊢ Exists fun δ => And (LT.lt 0 δ) (∀ ⦃x : E⦄, Eq (Norm.norm x) 1 → ∀ ⦃y : E⦄, Eq (Norm.norm y) 1 → LE.le ε (Norm.norm (HSub.hSub x y)) → LE.le (Norm.norm (HAdd.hAdd x y)) (HSub.hSub 2 δ))","decl":"/-- A *uniformly convex space* is a real normed space where the triangle inequality is strict with a\nuniform bound. Namely, over the `x` and `y` of norm `1`, `‖x + y‖` is uniformly bounded above\nby a constant `< 2` when `‖x - y‖` is uniformly bounded below by a positive constant. -/\nclass UniformConvexSpace (E : Type*) [SeminormedAddCommGroup E] : Prop where\n  uniform_convex : ∀ ⦃ε : ℝ⦄,\n    0 < ε → ∃ δ, 0 < δ ∧ ∀ ⦃x : E⦄, ‖x‖ = 1 → ∀ ⦃y⦄, ‖y‖ = 1 → ε ≤ ‖x - y‖ → ‖x + y‖ ≤ 2 - δ\n\n"}
{"name":"exists_forall_sphere_dist_add_le_two_sub","module":"Mathlib.Analysis.Convex.Uniform","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : UniformConvexSpace E\nε : Real\nhε : LT.lt 0 ε\n⊢ Exists fun δ => And (LT.lt 0 δ) (∀ ⦃x : E⦄, Eq (Norm.norm x) 1 → ∀ ⦃y : E⦄, Eq (Norm.norm y) 1 → LE.le ε (Norm.norm (HSub.hSub x y)) → LE.le (Norm.norm (HAdd.hAdd x y)) (HSub.hSub 2 δ))","decl":"theorem exists_forall_sphere_dist_add_le_two_sub (hε : 0 < ε) :\n    ∃ δ, 0 < δ ∧ ∀ ⦃x : E⦄, ‖x‖ = 1 → ∀ ⦃y⦄, ‖y‖ = 1 → ε ≤ ‖x - y‖ → ‖x + y‖ ≤ 2 - δ :=\n  UniformConvexSpace.uniform_convex hε\n\n"}
{"name":"exists_forall_closed_ball_dist_add_le_two_sub","module":"Mathlib.Analysis.Convex.Uniform","initialProofState":"E : Type u_1\ninst✝² : SeminormedAddCommGroup E\ninst✝¹ : UniformConvexSpace E\nε : Real\ninst✝ : NormedSpace Real E\nhε : LT.lt 0 ε\n⊢ Exists fun δ => And (LT.lt 0 δ) (∀ ⦃x : E⦄, LE.le (Norm.norm x) 1 → ∀ ⦃y : E⦄, LE.le (Norm.norm y) 1 → LE.le ε (Norm.norm (HSub.hSub x y)) → LE.le (Norm.norm (HAdd.hAdd x y)) (HSub.hSub 2 δ))","decl":"theorem exists_forall_closed_ball_dist_add_le_two_sub (hε : 0 < ε) :\n    ∃ δ, 0 < δ ∧ ∀ ⦃x : E⦄, ‖x‖ ≤ 1 → ∀ ⦃y⦄, ‖y‖ ≤ 1 → ε ≤ ‖x - y‖ → ‖x + y‖ ≤ 2 - δ := by\n  have hε' : 0 < ε / 3 := div_pos hε zero_lt_three\n  obtain ⟨δ, hδ, h⟩ := exists_forall_sphere_dist_add_le_two_sub E hε'\n  set δ' := min (1 / 2) (min (ε / 3) <| δ / 3)\n  refine ⟨δ', lt_min one_half_pos <| lt_min hε' (div_pos hδ zero_lt_three), fun x hx y hy hxy => ?_⟩\n  obtain hx' | hx' := le_or_lt ‖x‖ (1 - δ')\n  · rw [← one_add_one_eq_two]\n    exact (norm_add_le_of_le hx' hy).trans (sub_add_eq_add_sub _ _ _).le\n  obtain hy' | hy' := le_or_lt ‖y‖ (1 - δ')\n  · rw [← one_add_one_eq_two]\n    exact (norm_add_le_of_le hx hy').trans (add_sub_assoc _ _ _).ge\n  have hδ' : 0 < 1 - δ' := sub_pos_of_lt (min_lt_of_left_lt one_half_lt_one)\n  have h₁ : ∀ z : E, 1 - δ' < ‖z‖ → ‖‖z‖⁻¹ • z‖ = 1 := by\n    rintro z hz\n    rw [norm_smul_of_nonneg (inv_nonneg.2 <| norm_nonneg _), inv_mul_cancel₀ (hδ'.trans hz).ne']\n  have h₂ : ∀ z : E, ‖z‖ ≤ 1 → 1 - δ' ≤ ‖z‖ → ‖‖z‖⁻¹ • z - z‖ ≤ δ' := by\n    rintro z hz hδz\n    nth_rw 3 [← one_smul ℝ z]\n    rwa [← sub_smul,\n      norm_smul_of_nonneg (sub_nonneg_of_le <| (one_le_inv₀ (hδ'.trans_le hδz)).2 hz),\n      sub_mul, inv_mul_cancel₀ (hδ'.trans_le hδz).ne', one_mul, sub_le_comm]\n  set x' := ‖x‖⁻¹ • x\n  set y' := ‖y‖⁻¹ • y\n  have hxy' : ε / 3 ≤ ‖x' - y'‖ :=\n    calc\n      ε / 3 = ε - (ε / 3 + ε / 3) := by ring\n      _ ≤ ‖x - y‖ - (‖x' - x‖ + ‖y' - y‖) := by\n        gcongr\n        · exact (h₂ _ hx hx'.le).trans <| min_le_of_right_le <| min_le_left _ _\n        · exact (h₂ _ hy hy'.le).trans <| min_le_of_right_le <| min_le_left _ _\n      _ ≤ _ := by\n        have : ∀ x' y', x - y = x' - y' + (x - x') + (y' - y) := fun _ _ => by abel\n        rw [sub_le_iff_le_add, norm_sub_rev _ x, ← add_assoc, this]\n        exact norm_add₃_le\n  calc\n    ‖x + y‖ ≤ ‖x' + y'‖ + ‖x' - x‖ + ‖y' - y‖ := by\n      have : ∀ x' y', x + y = x' + y' + (x - x') + (y - y') := fun _ _ => by abel\n      rw [norm_sub_rev, norm_sub_rev y', this]\n      exact norm_add₃_le\n    _ ≤ 2 - δ + δ' + δ' :=\n      (add_le_add_three (h (h₁ _ hx') (h₁ _ hy') hxy') (h₂ _ hx hx'.le) (h₂ _ hy hy'.le))\n    _ ≤ 2 - δ' := by\n      suffices δ' ≤ δ / 3 by linarith\n      exact min_le_of_right_le <| min_le_right _ _\n\n"}
{"name":"exists_forall_closed_ball_dist_add_le_two_mul_sub","module":"Mathlib.Analysis.Convex.Uniform","initialProofState":"E : Type u_1\ninst✝² : SeminormedAddCommGroup E\ninst✝¹ : UniformConvexSpace E\nε : Real\ninst✝ : NormedSpace Real E\nhε : LT.lt 0 ε\nr : Real\n⊢ Exists fun δ => And (LT.lt 0 δ) (∀ ⦃x : E⦄, LE.le (Norm.norm x) r → ∀ ⦃y : E⦄, LE.le (Norm.norm y) r → LE.le ε (Norm.norm (HSub.hSub x y)) → LE.le (Norm.norm (HAdd.hAdd x y)) (HSub.hSub (HMul.hMul 2 r) δ))","decl":"theorem exists_forall_closed_ball_dist_add_le_two_mul_sub (hε : 0 < ε) (r : ℝ) :\n    ∃ δ, 0 < δ ∧ ∀ ⦃x : E⦄, ‖x‖ ≤ r → ∀ ⦃y⦄, ‖y‖ ≤ r → ε ≤ ‖x - y‖ → ‖x + y‖ ≤ 2 * r - δ := by\n  obtain hr | hr := le_or_lt r 0\n  · exact ⟨1, one_pos, fun x hx y hy h => (hε.not_le <|\n      h.trans <| (norm_sub_le _ _).trans <| add_nonpos (hx.trans hr) (hy.trans hr)).elim⟩\n  obtain ⟨δ, hδ, h⟩ := exists_forall_closed_ball_dist_add_le_two_sub E (div_pos hε hr)\n  refine ⟨δ * r, mul_pos hδ hr, fun x hx y hy hxy => ?_⟩\n  rw [← div_le_one hr, div_eq_inv_mul, ← norm_smul_of_nonneg (inv_nonneg.2 hr.le)] at hx hy\n  have := h hx hy\n  simp_rw [← smul_add, ← smul_sub, norm_smul_of_nonneg (inv_nonneg.2 hr.le), ← div_eq_inv_mul,\n    div_le_div_iff_of_pos_right hr, div_le_iff₀ hr, sub_mul] at this\n  exact this hxy\n\n"}
{"name":"UniformConvexSpace.toStrictConvexSpace","module":"Mathlib.Analysis.Convex.Uniform","initialProofState":"E : Type u_1\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : UniformConvexSpace E\n⊢ StrictConvexSpace Real E","decl":"instance (priority := 100) UniformConvexSpace.toStrictConvexSpace : StrictConvexSpace ℝ E :=\n  StrictConvexSpace.of_norm_add_ne_two fun _ _ hx hy hxy =>\n    let ⟨_, hδ, h⟩ := exists_forall_closed_ball_dist_add_le_two_sub E (norm_sub_pos_iff.2 hxy)\n    ((h hx.le hy.le le_rfl).trans_lt <| sub_lt_self _ hδ).ne\n"}
