{"name":"Nat.Prime.dvd_choose_add","module":"Mathlib.Data.Nat.Choose.Dvd","initialProofState":"p a b : Nat\nhp : Nat.Prime p\nhap : LT.lt a p\nhbp : LT.lt b p\nh : LE.le p (HAdd.hAdd a b)\n⊢ Dvd.dvd p ((HAdd.hAdd a b).choose a)","decl":"theorem dvd_choose_add (hp : Prime p) (hap : a < p) (hbp : b < p) (h : p ≤ a + b) :\n    p ∣ choose (a + b) a := by\n  have h₁ : p ∣ (a + b)! := hp.dvd_factorial.2 h\n  rw [← add_choose_mul_factorial_mul_factorial, ← choose_symm_add, hp.dvd_mul, hp.dvd_mul,\n    hp.dvd_factorial, hp.dvd_factorial] at h₁\n  exact (h₁.resolve_right hbp.not_le).resolve_right hap.not_le\n\n"}
{"name":"Nat.Prime.dvd_choose","module":"Mathlib.Data.Nat.Choose.Dvd","initialProofState":"p a b : Nat\nhp : Nat.Prime p\nha : LT.lt a p\nhab : LT.lt (HSub.hSub b a) p\nh : LE.le p b\n⊢ Dvd.dvd p (b.choose a)","decl":"lemma dvd_choose (hp : Prime p) (ha : a < p) (hab : b - a < p) (h : p ≤ b) : p ∣ choose b a :=\n  have : a + (b - a) = b := Nat.add_sub_of_le (ha.le.trans h)\n  this ▸ hp.dvd_choose_add ha hab (this.symm ▸ h)\n\n"}
{"name":"Nat.Prime.dvd_choose_self","module":"Mathlib.Data.Nat.Choose.Dvd","initialProofState":"p k : Nat\nhp : Nat.Prime p\nhk : Ne k 0\nhkp : LT.lt k p\n⊢ Dvd.dvd p (p.choose k)","decl":"lemma dvd_choose_self (hp : Prime p) (hk : k ≠ 0) (hkp : k < p) : p ∣ choose p k :=\n  hp.dvd_choose hkp (sub_lt ((zero_le _).trans_lt hkp) <| zero_lt_of_ne_zero hk) le_rfl\n\n"}
