{"name":"Module.fgSystem.instIsDirectedSubtypeSubmoduleFGLe","module":"Mathlib.Algebra.Colimit.Finiteness","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\n⊢ IsDirected (Subtype fun N => N.FG) fun x1 x2 => LE.le x1 x2","decl":"instance : IsDirected {N : Submodule R M // N.FG} (· ≤ ·) where\n  directed N₁ N₂ :=\n    ⟨⟨_, N₁.2.sup N₂.2⟩, Subtype.coe_le_coe.mp le_sup_left, Subtype.coe_le_coe.mp le_sup_right⟩\n\n"}
{"name":"Module.fgSystem.instDirectedSystemSubtypeSubmoduleFGMemValCoeLinearMapId","module":"Mathlib.Algebra.Colimit.Finiteness","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\n⊢ DirectedSystem (fun x2 => Subtype fun x => Membership.mem (↑x2) x) fun x1 x2 x3 x4 => (Module.fgSystem R M x1 x2 x3) x4","decl":"instance : DirectedSystem _ (fgSystem R M · · · ·) where\n  map_self _ _ := rfl\n  map_map _ _ _ _ _ _ := rfl\n\n"}
{"name":"Module.fgSystem.equiv_comp_of","module":"Mathlib.Algebra.Colimit.Finiteness","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝³ : Semiring R\ninst✝² : AddCommMonoid M\ninst✝¹ : Module R M\ninst✝ : DecidableEq (Submodule R M)\nN : Subtype fun N => N.FG\n⊢ Eq ((↑(Module.fgSystem.equiv R M)).comp (Module.DirectLimit.of R (Subtype fun N => N.FG) (fun i => Subtype fun x => Membership.mem (↑i) x) (Module.fgSystem R M) N)) (↑N).subtype","decl":"lemma equiv_comp_of (N : {N : Submodule R M // N.FG}) :\n    (equiv R M).toLinearMap ∘ₗ of _ _ _ _ N = N.1.subtype := by\n  ext; simp [equiv]\n\n"}
