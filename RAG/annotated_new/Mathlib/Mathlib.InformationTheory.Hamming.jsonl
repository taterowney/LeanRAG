{"name":"hammingDist_self","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝¹ : Fintype ι\ninst✝ : (i : ι) → DecidableEq (β i)\nx : (i : ι) → β i\n⊢ Eq (hammingDist x x) 0","decl":"/-- Corresponds to `dist_self`. -/\n@[simp]\ntheorem hammingDist_self (x : ∀ i, β i) : hammingDist x x = 0 := by\n  rw [hammingDist, card_eq_zero, filter_eq_empty_iff]\n  exact fun _ _ H => H rfl\n\n"}
{"name":"hammingDist_nonneg","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝¹ : Fintype ι\ninst✝ : (i : ι) → DecidableEq (β i)\nx y : (i : ι) → β i\n⊢ LE.le 0 (hammingDist x y)","decl":"/-- Corresponds to `dist_nonneg`. -/\ntheorem hammingDist_nonneg {x y : ∀ i, β i} : 0 ≤ hammingDist x y :=\n  zero_le _\n\n"}
{"name":"hammingDist_comm","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝¹ : Fintype ι\ninst✝ : (i : ι) → DecidableEq (β i)\nx y : (i : ι) → β i\n⊢ Eq (hammingDist x y) (hammingDist y x)","decl":"/-- Corresponds to `dist_comm`. -/\ntheorem hammingDist_comm (x y : ∀ i, β i) : hammingDist x y = hammingDist y x := by\n  simp_rw [hammingDist, ne_comm]\n\n"}
{"name":"hammingDist_triangle","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝¹ : Fintype ι\ninst✝ : (i : ι) → DecidableEq (β i)\nx y z : (i : ι) → β i\n⊢ LE.le (hammingDist x z) (HAdd.hAdd (hammingDist x y) (hammingDist y z))","decl":"/-- Corresponds to `dist_triangle`. -/\ntheorem hammingDist_triangle (x y z : ∀ i, β i) :\n    hammingDist x z ≤ hammingDist x y + hammingDist y z := by\n  classical\n    unfold hammingDist\n    refine le_trans (card_mono ?_) (card_union_le _ _)\n    rw [← filter_or]\n    exact monotone_filter_right _ fun i h ↦ (h.ne_or_ne _).imp_right Ne.symm\n\n"}
{"name":"hammingDist_triangle_left","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝¹ : Fintype ι\ninst✝ : (i : ι) → DecidableEq (β i)\nx y z : (i : ι) → β i\n⊢ LE.le (hammingDist x y) (HAdd.hAdd (hammingDist z x) (hammingDist z y))","decl":"/-- Corresponds to `dist_triangle_left`. -/\ntheorem hammingDist_triangle_left (x y z : ∀ i, β i) :\n    hammingDist x y ≤ hammingDist z x + hammingDist z y := by\n  rw [hammingDist_comm z]\n  exact hammingDist_triangle _ _ _\n\n"}
{"name":"hammingDist_triangle_right","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝¹ : Fintype ι\ninst✝ : (i : ι) → DecidableEq (β i)\nx y z : (i : ι) → β i\n⊢ LE.le (hammingDist x y) (HAdd.hAdd (hammingDist x z) (hammingDist y z))","decl":"/-- Corresponds to `dist_triangle_right`. -/\ntheorem hammingDist_triangle_right (x y z : ∀ i, β i) :\n    hammingDist x y ≤ hammingDist x z + hammingDist y z := by\n  rw [hammingDist_comm y]\n  exact hammingDist_triangle _ _ _\n\n"}
{"name":"swap_hammingDist","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝¹ : Fintype ι\ninst✝ : (i : ι) → DecidableEq (β i)\n⊢ Eq (Function.swap hammingDist) hammingDist","decl":"/-- Corresponds to `swap_dist`. -/\ntheorem swap_hammingDist : swap (@hammingDist _ β _ _) = hammingDist := by\n  funext x y\n  exact hammingDist_comm _ _\n\n"}
{"name":"eq_of_hammingDist_eq_zero","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝¹ : Fintype ι\ninst✝ : (i : ι) → DecidableEq (β i)\nx y : (i : ι) → β i\na✝ : Eq (hammingDist x y) 0\n⊢ Eq x y","decl":"/-- Corresponds to `eq_of_dist_eq_zero`. -/\ntheorem eq_of_hammingDist_eq_zero {x y : ∀ i, β i} : hammingDist x y = 0 → x = y := by\n  simp_rw [hammingDist, card_eq_zero, filter_eq_empty_iff, Classical.not_not, funext_iff, mem_univ,\n    forall_true_left, imp_self]\n\n"}
{"name":"hammingDist_eq_zero","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝¹ : Fintype ι\ninst✝ : (i : ι) → DecidableEq (β i)\nx y : (i : ι) → β i\n⊢ Iff (Eq (hammingDist x y) 0) (Eq x y)","decl":"/-- Corresponds to `dist_eq_zero`. -/\n@[simp]\ntheorem hammingDist_eq_zero {x y : ∀ i, β i} : hammingDist x y = 0 ↔ x = y :=\n  ⟨eq_of_hammingDist_eq_zero, fun H => by\n    rw [H]\n    exact hammingDist_self _⟩\n\n"}
{"name":"hamming_zero_eq_dist","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝¹ : Fintype ι\ninst✝ : (i : ι) → DecidableEq (β i)\nx y : (i : ι) → β i\n⊢ Iff (Eq 0 (hammingDist x y)) (Eq x y)","decl":"/-- Corresponds to `zero_eq_dist`. -/\n@[simp]\ntheorem hamming_zero_eq_dist {x y : ∀ i, β i} : 0 = hammingDist x y ↔ x = y := by\n  rw [eq_comm, hammingDist_eq_zero]\n\n"}
{"name":"hammingDist_ne_zero","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝¹ : Fintype ι\ninst✝ : (i : ι) → DecidableEq (β i)\nx y : (i : ι) → β i\n⊢ Iff (Ne (hammingDist x y) 0) (Ne x y)","decl":"/-- Corresponds to `dist_ne_zero`. -/\ntheorem hammingDist_ne_zero {x y : ∀ i, β i} : hammingDist x y ≠ 0 ↔ x ≠ y :=\n  hammingDist_eq_zero.not\n\n"}
{"name":"hammingDist_pos","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝¹ : Fintype ι\ninst✝ : (i : ι) → DecidableEq (β i)\nx y : (i : ι) → β i\n⊢ Iff (LT.lt 0 (hammingDist x y)) (Ne x y)","decl":"/-- Corresponds to `dist_pos`. -/\n@[simp]\ntheorem hammingDist_pos {x y : ∀ i, β i} : 0 < hammingDist x y ↔ x ≠ y := by\n  rw [← hammingDist_ne_zero, iff_not_comm, not_lt, Nat.le_zero]\n\n"}
{"name":"hammingDist_lt_one","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝¹ : Fintype ι\ninst✝ : (i : ι) → DecidableEq (β i)\nx y : (i : ι) → β i\n⊢ Iff (LT.lt (hammingDist x y) 1) (Eq x y)","decl":"theorem hammingDist_lt_one {x y : ∀ i, β i} : hammingDist x y < 1 ↔ x = y := by\n  rw [Nat.lt_one_iff, hammingDist_eq_zero]\n\n"}
{"name":"hammingDist_le_card_fintype","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝¹ : Fintype ι\ninst✝ : (i : ι) → DecidableEq (β i)\nx y : (i : ι) → β i\n⊢ LE.le (hammingDist x y) (Fintype.card ι)","decl":"theorem hammingDist_le_card_fintype {x y : ∀ i, β i} : hammingDist x y ≤ Fintype.card ι :=\n  card_le_univ _\n\n"}
{"name":"hammingDist_comp_le_hammingDist","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝² : Fintype ι\ninst✝¹ : (i : ι) → DecidableEq (β i)\nγ : ι → Type u_4\ninst✝ : (i : ι) → DecidableEq (γ i)\nf : (i : ι) → γ i → β i\nx y : (i : ι) → γ i\n⊢ LE.le (hammingDist (fun i => f i (x i)) fun i => f i (y i)) (hammingDist x y)","decl":"theorem hammingDist_comp_le_hammingDist (f : ∀ i, γ i → β i) {x y : ∀ i, γ i} :\n    (hammingDist (fun i => f i (x i)) fun i => f i (y i)) ≤ hammingDist x y :=\n  card_mono (monotone_filter_right _ fun i H1 H2 => H1 <| congr_arg (f i) H2)\n\n"}
{"name":"hammingDist_comp","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝² : Fintype ι\ninst✝¹ : (i : ι) → DecidableEq (β i)\nγ : ι → Type u_4\ninst✝ : (i : ι) → DecidableEq (γ i)\nf : (i : ι) → γ i → β i\nx y : (i : ι) → γ i\nhf : ∀ (i : ι), Function.Injective (f i)\n⊢ Eq (hammingDist (fun i => f i (x i)) fun i => f i (y i)) (hammingDist x y)","decl":"theorem hammingDist_comp (f : ∀ i, γ i → β i) {x y : ∀ i, γ i} (hf : ∀ i, Injective (f i)) :\n    (hammingDist (fun i => f i (x i)) fun i => f i (y i)) = hammingDist x y :=\n  le_antisymm (hammingDist_comp_le_hammingDist _) <|\n    card_mono (monotone_filter_right _ fun i H1 H2 => H1 <| hf i H2)\n\n"}
{"name":"hammingDist_smul_le_hammingDist","module":"Mathlib.InformationTheory.Hamming","initialProofState":"α : Type u_1\nι : Type u_2\nβ : ι → Type u_3\ninst✝² : Fintype ι\ninst✝¹ : (i : ι) → DecidableEq (β i)\ninst✝ : (i : ι) → SMul α (β i)\nk : α\nx y : (i : ι) → β i\n⊢ LE.le (hammingDist (HSMul.hSMul k x) (HSMul.hSMul k y)) (hammingDist x y)","decl":"theorem hammingDist_smul_le_hammingDist [∀ i, SMul α (β i)] {k : α} {x y : ∀ i, β i} :\n    hammingDist (k • x) (k • y) ≤ hammingDist x y :=\n  hammingDist_comp_le_hammingDist fun i => (k • · : β i → β i)\n\n"}
{"name":"hammingDist_smul","module":"Mathlib.InformationTheory.Hamming","initialProofState":"α : Type u_1\nι : Type u_2\nβ : ι → Type u_3\ninst✝² : Fintype ι\ninst✝¹ : (i : ι) → DecidableEq (β i)\ninst✝ : (i : ι) → SMul α (β i)\nk : α\nx y : (i : ι) → β i\nhk : ∀ (i : ι), IsSMulRegular (β i) k\n⊢ Eq (hammingDist (HSMul.hSMul k x) (HSMul.hSMul k y)) (hammingDist x y)","decl":"/-- Corresponds to `dist_smul` with the discrete norm on `α`. -/\ntheorem hammingDist_smul [∀ i, SMul α (β i)] {k : α} {x y : ∀ i, β i}\n    (hk : ∀ i, IsSMulRegular (β i) k) : hammingDist (k • x) (k • y) = hammingDist x y :=\n  hammingDist_comp (fun i => (k • · : β i → β i)) hk\n\n"}
{"name":"hammingDist_zero_right","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝² : Fintype ι\ninst✝¹ : (i : ι) → DecidableEq (β i)\ninst✝ : (i : ι) → Zero (β i)\nx : (i : ι) → β i\n⊢ Eq (hammingDist x 0) (hammingNorm x)","decl":"/-- Corresponds to `dist_zero_right`. -/\n@[simp]\ntheorem hammingDist_zero_right (x : ∀ i, β i) : hammingDist x 0 = hammingNorm x :=\n  rfl\n\n"}
{"name":"hammingDist_zero_left","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝² : Fintype ι\ninst✝¹ : (i : ι) → DecidableEq (β i)\ninst✝ : (i : ι) → Zero (β i)\n⊢ Eq (hammingDist 0) hammingNorm","decl":"/-- Corresponds to `dist_zero_left`. -/\n@[simp]\ntheorem hammingDist_zero_left : hammingDist (0 : ∀ i, β i) = hammingNorm :=\n  funext fun x => by rw [hammingDist_comm, hammingDist_zero_right]\n\n"}
{"name":"hammingNorm_nonneg","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝² : Fintype ι\ninst✝¹ : (i : ι) → DecidableEq (β i)\ninst✝ : (i : ι) → Zero (β i)\nx : (i : ι) → β i\n⊢ LE.le 0 (hammingNorm x)","decl":"/-- Corresponds to `norm_nonneg`. -/\ntheorem hammingNorm_nonneg {x : ∀ i, β i} : 0 ≤ hammingNorm x :=\n  zero_le _\n\n"}
{"name":"hammingNorm_zero","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝² : Fintype ι\ninst✝¹ : (i : ι) → DecidableEq (β i)\ninst✝ : (i : ι) → Zero (β i)\n⊢ Eq (hammingNorm 0) 0","decl":"/-- Corresponds to `norm_zero`. -/\n@[simp]\ntheorem hammingNorm_zero : hammingNorm (0 : ∀ i, β i) = 0 :=\n  hammingDist_self _\n\n"}
{"name":"hammingNorm_eq_zero","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝² : Fintype ι\ninst✝¹ : (i : ι) → DecidableEq (β i)\ninst✝ : (i : ι) → Zero (β i)\nx : (i : ι) → β i\n⊢ Iff (Eq (hammingNorm x) 0) (Eq x 0)","decl":"/-- Corresponds to `norm_eq_zero`. -/\n@[simp]\ntheorem hammingNorm_eq_zero {x : ∀ i, β i} : hammingNorm x = 0 ↔ x = 0 :=\n  hammingDist_eq_zero\n\n"}
{"name":"hammingNorm_ne_zero_iff","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝² : Fintype ι\ninst✝¹ : (i : ι) → DecidableEq (β i)\ninst✝ : (i : ι) → Zero (β i)\nx : (i : ι) → β i\n⊢ Iff (Ne (hammingNorm x) 0) (Ne x 0)","decl":"/-- Corresponds to `norm_ne_zero_iff`. -/\ntheorem hammingNorm_ne_zero_iff {x : ∀ i, β i} : hammingNorm x ≠ 0 ↔ x ≠ 0 :=\n  hammingNorm_eq_zero.not\n\n"}
{"name":"hammingNorm_pos_iff","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝² : Fintype ι\ninst✝¹ : (i : ι) → DecidableEq (β i)\ninst✝ : (i : ι) → Zero (β i)\nx : (i : ι) → β i\n⊢ Iff (LT.lt 0 (hammingNorm x)) (Ne x 0)","decl":"/-- Corresponds to `norm_pos_iff`. -/\n@[simp]\ntheorem hammingNorm_pos_iff {x : ∀ i, β i} : 0 < hammingNorm x ↔ x ≠ 0 :=\n  hammingDist_pos\n\n"}
{"name":"hammingNorm_lt_one","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝² : Fintype ι\ninst✝¹ : (i : ι) → DecidableEq (β i)\ninst✝ : (i : ι) → Zero (β i)\nx : (i : ι) → β i\n⊢ Iff (LT.lt (hammingNorm x) 1) (Eq x 0)","decl":"theorem hammingNorm_lt_one {x : ∀ i, β i} : hammingNorm x < 1 ↔ x = 0 :=\n  hammingDist_lt_one\n\n"}
{"name":"hammingNorm_le_card_fintype","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝² : Fintype ι\ninst✝¹ : (i : ι) → DecidableEq (β i)\ninst✝ : (i : ι) → Zero (β i)\nx : (i : ι) → β i\n⊢ LE.le (hammingNorm x) (Fintype.card ι)","decl":"theorem hammingNorm_le_card_fintype {x : ∀ i, β i} : hammingNorm x ≤ Fintype.card ι :=\n  hammingDist_le_card_fintype\n\n"}
{"name":"hammingNorm_comp_le_hammingNorm","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝⁴ : Fintype ι\ninst✝³ : (i : ι) → DecidableEq (β i)\nγ : ι → Type u_4\ninst✝² : (i : ι) → DecidableEq (γ i)\ninst✝¹ : (i : ι) → Zero (β i)\ninst✝ : (i : ι) → Zero (γ i)\nf : (i : ι) → γ i → β i\nx : (i : ι) → γ i\nhf : ∀ (i : ι), Eq (f i 0) 0\n⊢ LE.le (hammingNorm fun i => f i (x i)) (hammingNorm x)","decl":"theorem hammingNorm_comp_le_hammingNorm (f : ∀ i, γ i → β i) {x : ∀ i, γ i} (hf : ∀ i, f i 0 = 0) :\n    (hammingNorm fun i => f i (x i)) ≤ hammingNorm x := by\n  simpa only [← hammingDist_zero_right, hf] using hammingDist_comp_le_hammingDist f (y := fun _ ↦ 0)\n\n"}
{"name":"hammingNorm_comp","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝⁴ : Fintype ι\ninst✝³ : (i : ι) → DecidableEq (β i)\nγ : ι → Type u_4\ninst✝² : (i : ι) → DecidableEq (γ i)\ninst✝¹ : (i : ι) → Zero (β i)\ninst✝ : (i : ι) → Zero (γ i)\nf : (i : ι) → γ i → β i\nx : (i : ι) → γ i\nhf₁ : ∀ (i : ι), Function.Injective (f i)\nhf₂ : ∀ (i : ι), Eq (f i 0) 0\n⊢ Eq (hammingNorm fun i => f i (x i)) (hammingNorm x)","decl":"theorem hammingNorm_comp (f : ∀ i, γ i → β i) {x : ∀ i, γ i} (hf₁ : ∀ i, Injective (f i))\n    (hf₂ : ∀ i, f i 0 = 0) : (hammingNorm fun i => f i (x i)) = hammingNorm x := by\n  simpa only [← hammingDist_zero_right, hf₂] using hammingDist_comp f hf₁ (y := fun _ ↦ 0)\n\n"}
{"name":"hammingNorm_smul_le_hammingNorm","module":"Mathlib.InformationTheory.Hamming","initialProofState":"α : Type u_1\nι : Type u_2\nβ : ι → Type u_3\ninst✝⁴ : Fintype ι\ninst✝³ : (i : ι) → DecidableEq (β i)\ninst✝² : (i : ι) → Zero (β i)\ninst✝¹ : Zero α\ninst✝ : (i : ι) → SMulWithZero α (β i)\nk : α\nx : (i : ι) → β i\n⊢ LE.le (hammingNorm (HSMul.hSMul k x)) (hammingNorm x)","decl":"theorem hammingNorm_smul_le_hammingNorm [Zero α] [∀ i, SMulWithZero α (β i)] {k : α}\n    {x : ∀ i, β i} : hammingNorm (k • x) ≤ hammingNorm x :=\n  hammingNorm_comp_le_hammingNorm (fun i (c : β i) => k • c) fun i => by simp_rw [smul_zero]\n\n"}
{"name":"hammingNorm_smul","module":"Mathlib.InformationTheory.Hamming","initialProofState":"α : Type u_1\nι : Type u_2\nβ : ι → Type u_3\ninst✝⁴ : Fintype ι\ninst✝³ : (i : ι) → DecidableEq (β i)\ninst✝² : (i : ι) → Zero (β i)\ninst✝¹ : Zero α\ninst✝ : (i : ι) → SMulWithZero α (β i)\nk : α\nhk : ∀ (i : ι), IsSMulRegular (β i) k\nx : (i : ι) → β i\n⊢ Eq (hammingNorm (HSMul.hSMul k x)) (hammingNorm x)","decl":"theorem hammingNorm_smul [Zero α] [∀ i, SMulWithZero α (β i)] {k : α}\n    (hk : ∀ i, IsSMulRegular (β i) k) (x : ∀ i, β i) : hammingNorm (k • x) = hammingNorm x :=\n  hammingNorm_comp (fun i (c : β i) => k • c) hk fun i => by simp_rw [smul_zero]\n\n"}
{"name":"hammingDist_eq_hammingNorm","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝² : Fintype ι\ninst✝¹ : (i : ι) → DecidableEq (β i)\ninst✝ : (i : ι) → AddGroup (β i)\nx y : (i : ι) → β i\n⊢ Eq (hammingDist x y) (hammingNorm (HSub.hSub x y))","decl":"/-- Corresponds to `dist_eq_norm`. -/\ntheorem hammingDist_eq_hammingNorm [∀ i, AddGroup (β i)] (x y : ∀ i, β i) :\n    hammingDist x y = hammingNorm (x - y) := by\n  simp_rw [hammingNorm, hammingDist, Pi.sub_apply, sub_ne_zero]\n\n"}
{"name":"Hamming.instNontrivialOfNonemptyOfDefault","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝² : Inhabited ι\ninst✝¹ : ∀ (i : ι), Nonempty (β i)\ninst✝ : Nontrivial (β Inhabited.default)\n⊢ Nontrivial (Hamming β)","decl":"instance [Inhabited ι] [∀ i, Nonempty (β i)] [Nontrivial (β default)] : Nontrivial (Hamming β) :=\n  Pi.nontrivial\n\n"}
{"name":"Hamming.toHamming_symm_eq","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\n⊢ Eq Hamming.toHamming.symm Hamming.ofHamming","decl":"@[simp]\ntheorem toHamming_symm_eq : (@toHamming _ β).symm = ofHamming :=\n  rfl\n\n"}
{"name":"Hamming.ofHamming_symm_eq","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\n⊢ Eq Hamming.ofHamming.symm Hamming.toHamming","decl":"@[simp]\ntheorem ofHamming_symm_eq : (@ofHamming _ β).symm = toHamming :=\n  rfl\n\n"}
{"name":"Hamming.toHamming_ofHamming","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\nx : Hamming β\n⊢ Eq (Hamming.toHamming (Hamming.ofHamming x)) x","decl":"@[simp]\ntheorem toHamming_ofHamming (x : Hamming β) : toHamming (ofHamming x) = x :=\n  rfl\n\n"}
{"name":"Hamming.ofHamming_toHamming","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\nx : (i : ι) → β i\n⊢ Eq (Hamming.ofHamming (Hamming.toHamming x)) x","decl":"@[simp]\ntheorem ofHamming_toHamming (x : ∀ i, β i) : ofHamming (toHamming x) = x :=\n  rfl\n\n"}
{"name":"Hamming.toHamming_inj","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\nx y : (i : ι) → β i\n⊢ Iff (Eq (Hamming.toHamming x) (Hamming.toHamming y)) (Eq x y)","decl":"theorem toHamming_inj {x y : ∀ i, β i} : toHamming x = toHamming y ↔ x = y :=\n  Iff.rfl\n\n"}
{"name":"Hamming.ofHamming_inj","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\nx y : Hamming β\n⊢ Iff (Eq (Hamming.ofHamming x) (Hamming.ofHamming y)) (Eq x y)","decl":"theorem ofHamming_inj {x y : Hamming β} : ofHamming x = ofHamming y ↔ x = y :=\n  Iff.rfl\n\n"}
{"name":"Hamming.toHamming_zero","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝ : (i : ι) → Zero (β i)\n⊢ Eq (Hamming.toHamming 0) 0","decl":"@[simp]\ntheorem toHamming_zero [∀ i, Zero (β i)] : toHamming (0 : ∀ i, β i) = 0 :=\n  rfl\n\n"}
{"name":"Hamming.ofHamming_zero","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝ : (i : ι) → Zero (β i)\n⊢ Eq (Hamming.ofHamming 0) 0","decl":"@[simp]\ntheorem ofHamming_zero [∀ i, Zero (β i)] : ofHamming (0 : Hamming β) = 0 :=\n  rfl\n\n"}
{"name":"Hamming.toHamming_neg","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝ : (i : ι) → Neg (β i)\nx : (i : ι) → β i\n⊢ Eq (Hamming.toHamming (Neg.neg x)) (Neg.neg (Hamming.toHamming x))","decl":"@[simp]\ntheorem toHamming_neg [∀ i, Neg (β i)] {x : ∀ i, β i} : toHamming (-x) = -toHamming x :=\n  rfl\n\n"}
{"name":"Hamming.ofHamming_neg","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝ : (i : ι) → Neg (β i)\nx : Hamming β\n⊢ Eq (Hamming.ofHamming (Neg.neg x)) (Neg.neg (Hamming.ofHamming x))","decl":"@[simp]\ntheorem ofHamming_neg [∀ i, Neg (β i)] {x : Hamming β} : ofHamming (-x) = -ofHamming x :=\n  rfl\n\n"}
{"name":"Hamming.toHamming_add","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝ : (i : ι) → Add (β i)\nx y : (i : ι) → β i\n⊢ Eq (Hamming.toHamming (HAdd.hAdd x y)) (HAdd.hAdd (Hamming.toHamming x) (Hamming.toHamming y))","decl":"@[simp]\ntheorem toHamming_add [∀ i, Add (β i)] {x y : ∀ i, β i} :\n    toHamming (x + y) = toHamming x + toHamming y :=\n  rfl\n\n"}
{"name":"Hamming.ofHamming_add","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝ : (i : ι) → Add (β i)\nx y : Hamming β\n⊢ Eq (Hamming.ofHamming (HAdd.hAdd x y)) (HAdd.hAdd (Hamming.ofHamming x) (Hamming.ofHamming y))","decl":"@[simp]\ntheorem ofHamming_add [∀ i, Add (β i)] {x y : Hamming β} :\n    ofHamming (x + y) = ofHamming x + ofHamming y :=\n  rfl\n\n"}
{"name":"Hamming.toHamming_sub","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝ : (i : ι) → Sub (β i)\nx y : (i : ι) → β i\n⊢ Eq (Hamming.toHamming (HSub.hSub x y)) (HSub.hSub (Hamming.toHamming x) (Hamming.toHamming y))","decl":"@[simp]\ntheorem toHamming_sub [∀ i, Sub (β i)] {x y : ∀ i, β i} :\n    toHamming (x - y) = toHamming x - toHamming y :=\n  rfl\n\n"}
{"name":"Hamming.ofHamming_sub","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝ : (i : ι) → Sub (β i)\nx y : Hamming β\n⊢ Eq (Hamming.ofHamming (HSub.hSub x y)) (HSub.hSub (Hamming.ofHamming x) (Hamming.ofHamming y))","decl":"@[simp]\ntheorem ofHamming_sub [∀ i, Sub (β i)] {x y : Hamming β} :\n    ofHamming (x - y) = ofHamming x - ofHamming y :=\n  rfl\n\n"}
{"name":"Hamming.toHamming_smul","module":"Mathlib.InformationTheory.Hamming","initialProofState":"α : Type u_1\nι : Type u_2\nβ : ι → Type u_3\ninst✝ : (i : ι) → SMul α (β i)\nr : α\nx : (i : ι) → β i\n⊢ Eq (Hamming.toHamming (HSMul.hSMul r x)) (HSMul.hSMul r (Hamming.toHamming x))","decl":"@[simp]\ntheorem toHamming_smul [∀ i, SMul α (β i)] {r : α} {x : ∀ i, β i} :\n    toHamming (r • x) = r • toHamming x :=\n  rfl\n\n"}
{"name":"Hamming.ofHamming_smul","module":"Mathlib.InformationTheory.Hamming","initialProofState":"α : Type u_1\nι : Type u_2\nβ : ι → Type u_3\ninst✝ : (i : ι) → SMul α (β i)\nr : α\nx : Hamming β\n⊢ Eq (Hamming.ofHamming (HSMul.hSMul r x)) (HSMul.hSMul r (Hamming.ofHamming x))","decl":"@[simp]\ntheorem ofHamming_smul [∀ i, SMul α (β i)] {r : α} {x : Hamming β} :\n    ofHamming (r • x) = r • ofHamming x :=\n  rfl\n\n"}
{"name":"Hamming.dist_eq_hammingDist","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝¹ : Fintype ι\ninst✝ : (i : ι) → DecidableEq (β i)\nx y : Hamming β\n⊢ Eq (Dist.dist x y) ↑(hammingDist (Hamming.ofHamming x) (Hamming.ofHamming y))","decl":"@[simp, push_cast]\ntheorem dist_eq_hammingDist (x y : Hamming β) :\n    dist x y = hammingDist (ofHamming x) (ofHamming y) :=\n  rfl\n\n"}
{"name":"Hamming.nndist_eq_hammingDist","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝¹ : Fintype ι\ninst✝ : (i : ι) → DecidableEq (β i)\nx y : Hamming β\n⊢ Eq (NNDist.nndist x y) ↑(hammingDist (Hamming.ofHamming x) (Hamming.ofHamming y))","decl":"@[simp, push_cast]\ntheorem nndist_eq_hammingDist (x y : Hamming β) :\n    nndist x y = hammingDist (ofHamming x) (ofHamming y) :=\n  rfl\n\n"}
{"name":"Hamming.instDiscreteTopology","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝¹ : Fintype ι\ninst✝ : (i : ι) → DecidableEq (β i)\n⊢ DiscreteTopology (Hamming β)","decl":"instance : DiscreteTopology (Hamming β) := ⟨rfl⟩\n\n"}
{"name":"Hamming.norm_eq_hammingNorm","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝² : Fintype ι\ninst✝¹ : (i : ι) → DecidableEq (β i)\ninst✝ : (i : ι) → Zero (β i)\nx : Hamming β\n⊢ Eq (Norm.norm x) ↑(hammingNorm (Hamming.ofHamming x))","decl":"@[simp, push_cast]\ntheorem norm_eq_hammingNorm [∀ i, Zero (β i)] (x : Hamming β) : ‖x‖ = hammingNorm (ofHamming x) :=\n  rfl\n\n"}
{"name":"Hamming.nnnorm_eq_hammingNorm","module":"Mathlib.InformationTheory.Hamming","initialProofState":"ι : Type u_2\nβ : ι → Type u_3\ninst✝² : Fintype ι\ninst✝¹ : (i : ι) → DecidableEq (β i)\ninst✝ : (i : ι) → AddGroup (β i)\nx : Hamming β\n⊢ Eq (NNNorm.nnnorm x) ↑(hammingNorm (Hamming.ofHamming x))","decl":"@[simp, push_cast]\ntheorem nnnorm_eq_hammingNorm [∀ i, AddGroup (β i)] (x : Hamming β) :\n    ‖x‖₊ = hammingNorm (ofHamming x) := rfl\n\n"}
