{"name":"AddSubmonoid.coe_centralizer","module":"Mathlib.GroupTheory.Submonoid.Centralizer","initialProofState":"M : Type u_1\nS : Set M\ninst✝ : AddMonoid M\n⊢ Eq (↑(AddSubmonoid.centralizer S)) S.addCentralizer","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem coe_centralizer : ↑(centralizer S) = S.centralizer :=\n  rfl\n\n"}
{"name":"Submonoid.coe_centralizer","module":"Mathlib.GroupTheory.Submonoid.Centralizer","initialProofState":"M : Type u_1\nS : Set M\ninst✝ : Monoid M\n⊢ Eq (↑(Submonoid.centralizer S)) S.centralizer","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem coe_centralizer : ↑(centralizer S) = S.centralizer :=\n  rfl\n\n"}
{"name":"Submonoid.centralizer_toSubsemigroup","module":"Mathlib.GroupTheory.Submonoid.Centralizer","initialProofState":"M : Type u_1\nS : Set M\ninst✝ : Monoid M\n⊢ Eq (Submonoid.centralizer S).toSubsemigroup (Subsemigroup.centralizer S)","decl":"theorem centralizer_toSubsemigroup : (centralizer S).toSubsemigroup = Subsemigroup.centralizer S :=\n  rfl\n\n"}
{"name":"AddSubmonoid.centralizer_toAddSubsemigroup","module":"Mathlib.GroupTheory.Submonoid.Centralizer","initialProofState":"M : Type u_2\ninst✝ : AddMonoid M\nS : Set M\n⊢ Eq (AddSubmonoid.centralizer S).toAddSubsemigroup (AddSubsemigroup.centralizer S)","decl":"theorem _root_.AddSubmonoid.centralizer_toAddSubsemigroup {M} [AddMonoid M] (S : Set M) :\n    (AddSubmonoid.centralizer S).toAddSubsemigroup = AddSubsemigroup.centralizer S :=\n  rfl\n\n"}
{"name":"AddSubmonoid.mem_centralizer_iff","module":"Mathlib.GroupTheory.Submonoid.Centralizer","initialProofState":"M : Type u_1\nS : Set M\ninst✝ : AddMonoid M\nz : M\n⊢ Iff (Membership.mem (AddSubmonoid.centralizer S) z) (∀ (g : M), Membership.mem S g → Eq (HAdd.hAdd g z) (HAdd.hAdd z g))","decl":"@[to_additive]\ntheorem mem_centralizer_iff {z : M} : z ∈ centralizer S ↔ ∀ g ∈ S, g * z = z * g :=\n  Iff.rfl\n\n"}
{"name":"Submonoid.mem_centralizer_iff","module":"Mathlib.GroupTheory.Submonoid.Centralizer","initialProofState":"M : Type u_1\nS : Set M\ninst✝ : Monoid M\nz : M\n⊢ Iff (Membership.mem (Submonoid.centralizer S) z) (∀ (g : M), Membership.mem S g → Eq (HMul.hMul g z) (HMul.hMul z g))","decl":"@[to_additive]\ntheorem mem_centralizer_iff {z : M} : z ∈ centralizer S ↔ ∀ g ∈ S, g * z = z * g :=\n  Iff.rfl\n\n"}
{"name":"AddSubmonoid.center_le_centralizer","module":"Mathlib.GroupTheory.Submonoid.Centralizer","initialProofState":"M : Type u_1\ninst✝ : AddMonoid M\ns : Set M\n⊢ LE.le (AddSubmonoid.center M) (AddSubmonoid.centralizer s)","decl":"@[to_additive]\ntheorem center_le_centralizer (s) : center M ≤ centralizer s :=\n  s.center_subset_centralizer\n\n"}
{"name":"Submonoid.center_le_centralizer","module":"Mathlib.GroupTheory.Submonoid.Centralizer","initialProofState":"M : Type u_1\ninst✝ : Monoid M\ns : Set M\n⊢ LE.le (Submonoid.center M) (Submonoid.centralizer s)","decl":"@[to_additive]\ntheorem center_le_centralizer (s) : center M ≤ centralizer s :=\n  s.center_subset_centralizer\n\n"}
{"name":"Submonoid.centralizer_le","module":"Mathlib.GroupTheory.Submonoid.Centralizer","initialProofState":"M : Type u_1\nS T : Set M\ninst✝ : Monoid M\nh : HasSubset.Subset S T\n⊢ LE.le (Submonoid.centralizer T) (Submonoid.centralizer S)","decl":"@[to_additive]\ntheorem centralizer_le (h : S ⊆ T) : centralizer T ≤ centralizer S :=\n  Set.centralizer_subset h\n\n"}
{"name":"AddSubmonoid.centralizer_le","module":"Mathlib.GroupTheory.Submonoid.Centralizer","initialProofState":"M : Type u_1\nS T : Set M\ninst✝ : AddMonoid M\nh : HasSubset.Subset S T\n⊢ LE.le (AddSubmonoid.centralizer T) (AddSubmonoid.centralizer S)","decl":"@[to_additive]\ntheorem centralizer_le (h : S ⊆ T) : centralizer T ≤ centralizer S :=\n  Set.centralizer_subset h\n\n"}
{"name":"Submonoid.centralizer_eq_top_iff_subset","module":"Mathlib.GroupTheory.Submonoid.Centralizer","initialProofState":"M : Type u_1\ninst✝ : Monoid M\ns : Set M\n⊢ Iff (Eq (Submonoid.centralizer s) Top.top) (HasSubset.Subset s ↑(Submonoid.center M))","decl":"@[to_additive (attr := simp)]\ntheorem centralizer_eq_top_iff_subset {s : Set M} : centralizer s = ⊤ ↔ s ⊆ center M :=\n  SetLike.ext'_iff.trans Set.centralizer_eq_top_iff_subset\n\n"}
{"name":"AddSubmonoid.centralizer_eq_top_iff_subset","module":"Mathlib.GroupTheory.Submonoid.Centralizer","initialProofState":"M : Type u_1\ninst✝ : AddMonoid M\ns : Set M\n⊢ Iff (Eq (AddSubmonoid.centralizer s) Top.top) (HasSubset.Subset s ↑(AddSubmonoid.center M))","decl":"@[to_additive (attr := simp)]\ntheorem centralizer_eq_top_iff_subset {s : Set M} : centralizer s = ⊤ ↔ s ⊆ center M :=\n  SetLike.ext'_iff.trans Set.centralizer_eq_top_iff_subset\n\n"}
{"name":"AddSubmonoid.centralizer_univ","module":"Mathlib.GroupTheory.Submonoid.Centralizer","initialProofState":"M : Type u_1\ninst✝ : AddMonoid M\n⊢ Eq (AddSubmonoid.centralizer Set.univ) (AddSubmonoid.center M)","decl":"@[to_additive (attr := simp)]\ntheorem centralizer_univ : centralizer Set.univ = center M :=\n  SetLike.ext' (Set.centralizer_univ M)\n\n"}
{"name":"Submonoid.centralizer_univ","module":"Mathlib.GroupTheory.Submonoid.Centralizer","initialProofState":"M : Type u_1\ninst✝ : Monoid M\n⊢ Eq (Submonoid.centralizer Set.univ) (Submonoid.center M)","decl":"@[to_additive (attr := simp)]\ntheorem centralizer_univ : centralizer Set.univ = center M :=\n  SetLike.ext' (Set.centralizer_univ M)\n\n"}
{"name":"Submonoid.le_centralizer_centralizer","module":"Mathlib.GroupTheory.Submonoid.Centralizer","initialProofState":"M : Type u_1\ninst✝ : Monoid M\ns : Submonoid M\n⊢ LE.le s (Submonoid.centralizer ↑(Submonoid.centralizer ↑s))","decl":"@[to_additive]\nlemma le_centralizer_centralizer {s : Submonoid M} : s ≤ centralizer (centralizer (s : Set M)) :=\n  Set.subset_centralizer_centralizer\n\n"}
{"name":"AddSubmonoid.le_centralizer_centralizer","module":"Mathlib.GroupTheory.Submonoid.Centralizer","initialProofState":"M : Type u_1\ninst✝ : AddMonoid M\ns : AddSubmonoid M\n⊢ LE.le s (AddSubmonoid.centralizer ↑(AddSubmonoid.centralizer ↑s))","decl":"@[to_additive]\nlemma le_centralizer_centralizer {s : Submonoid M} : s ≤ centralizer (centralizer (s : Set M)) :=\n  Set.subset_centralizer_centralizer\n\n"}
{"name":"Submonoid.centralizer_centralizer_centralizer","module":"Mathlib.GroupTheory.Submonoid.Centralizer","initialProofState":"M : Type u_1\ninst✝ : Monoid M\ns : Set M\n⊢ Eq (Submonoid.centralizer s.centralizer.centralizer) (Submonoid.centralizer s)","decl":"@[to_additive (attr := simp)]\nlemma centralizer_centralizer_centralizer {s : Set M} :\n    centralizer s.centralizer.centralizer = centralizer s := by\n  apply SetLike.coe_injective\n  simp only [coe_centralizer, Set.centralizer_centralizer_centralizer]\n\n"}
{"name":"AddSubmonoid.centralizer_centralizer_centralizer","module":"Mathlib.GroupTheory.Submonoid.Centralizer","initialProofState":"M : Type u_1\ninst✝ : AddMonoid M\ns : Set M\n⊢ Eq (AddSubmonoid.centralizer s.addCentralizer.addCentralizer) (AddSubmonoid.centralizer s)","decl":"@[to_additive (attr := simp)]\nlemma centralizer_centralizer_centralizer {s : Set M} :\n    centralizer s.centralizer.centralizer = centralizer s := by\n  apply SetLike.coe_injective\n  simp only [coe_centralizer, Set.centralizer_centralizer_centralizer]\n\n"}
{"name":"Submonoid.closure_le_centralizer_centralizer","module":"Mathlib.GroupTheory.Submonoid.Centralizer","initialProofState":"M : Type u_1\ninst✝ : Monoid M\ns : Set M\n⊢ LE.le (Submonoid.closure s) (Submonoid.centralizer ↑(Submonoid.centralizer s))","decl":"variable {M} in\n@[to_additive]\nlemma closure_le_centralizer_centralizer (s : Set M) :\n    closure s ≤ centralizer (centralizer s) :=\n  closure_le.mpr Set.subset_centralizer_centralizer\n\n"}
{"name":"AddSubmonoid.closure_le_centralizer_centralizer","module":"Mathlib.GroupTheory.Submonoid.Centralizer","initialProofState":"M : Type u_1\ninst✝ : AddMonoid M\ns : Set M\n⊢ LE.le (AddSubmonoid.closure s) (AddSubmonoid.centralizer ↑(AddSubmonoid.centralizer s))","decl":"variable {M} in\n@[to_additive]\nlemma closure_le_centralizer_centralizer (s : Set M) :\n    closure s ≤ centralizer (centralizer s) :=\n  closure_le.mpr Set.subset_centralizer_centralizer\n\n"}
