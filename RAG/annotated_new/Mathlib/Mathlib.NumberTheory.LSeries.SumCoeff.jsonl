{"name":"LSeriesSummable_of_sum_norm_bigO","module":"Mathlib.NumberTheory.LSeries.SumCoeff","initialProofState":"f : Nat → Complex\nr : Real\ns : Complex\nhO : Asymptotics.IsBigO Filter.atTop (fun n => (Finset.Icc 1 n).sum fun k => Norm.norm (f k)) fun n => HPow.hPow (↑n) r\nhr : LE.le 0 r\nhs : LT.lt r s.re\n⊢ LSeriesSummable f s","decl":"/-- If the partial sums `∑ k ∈ Icc 1 n, ‖f k‖` are `O(n ^ r)` for some real `0 ≤ r`, then the\nL-series `LSeries f` converges at `s : ℂ` for all `s` such that `r < s.re`. -/\ntheorem LSeriesSummable_of_sum_norm_bigO\n    (hO : (fun n ↦ ∑ k ∈ Icc 1 n, ‖f k‖) =O[atTop] fun n ↦ (n : ℝ) ^ r)\n    (hr : 0 ≤ r) (hs : r < s.re) :\n    LSeriesSummable f s := by\n  have h₁ : (fun n ↦ if n = 0 then 0 else f n) =ᶠ[atTop] f := by\n    filter_upwards [eventually_ne_atTop 0] with n hn using by simp_rw [if_neg hn]\n  refine (LSeriesSummable_of_sum_norm_bigO_aux (if_pos rfl) ?_ hr hs).congr' _ h₁\n  refine hO.congr' (Eventually.of_forall fun _ ↦ Finset.sum_congr rfl fun _ h ↦ ?_) EventuallyEq.rfl\n  rw [if_neg (zero_lt_one.trans_le (mem_Icc.mp h).1).ne']\n\n"}
{"name":"LSeriesSummable_of_sum_norm_bigO_and_nonneg","module":"Mathlib.NumberTheory.LSeries.SumCoeff","initialProofState":"r : Real\ns : Complex\nf : Nat → Real\nhO : Asymptotics.IsBigO Filter.atTop (fun n => (Finset.Icc 1 n).sum fun k => f k) fun n => HPow.hPow (↑n) r\nhf : ∀ (n : Nat), LE.le 0 (f n)\nhr : LE.le 0 r\nhs : LT.lt r s.re\n⊢ LSeriesSummable (fun n => ↑(f n)) s","decl":"/-- If `f` takes nonnegative real values and the partial sums `∑ k ∈ Icc 1 n, f k` are `O(n ^ r)`\nfor some real `0 ≤ r`, then the L-series `LSeries f` converges at `s : ℂ` for all `s`\nsuch that `r < s.re`. -/\ntheorem LSeriesSummable_of_sum_norm_bigO_and_nonneg\n    {f : ℕ → ℝ} (hO : (fun n ↦ ∑ k ∈ Icc 1 n, f k) =O[atTop] fun n ↦ (n : ℝ) ^ r)\n    (hf : ∀ n, 0 ≤ f n) (hr : 0 ≤ r) (hs : r < s.re) :\n    LSeriesSummable (fun n ↦ f n) s :=\n  LSeriesSummable_of_sum_norm_bigO (by simpa [_root_.abs_of_nonneg (hf _)]) hr hs\n\n"}
{"name":"LSeries_eq_mul_integral","module":"Mathlib.NumberTheory.LSeries.SumCoeff","initialProofState":"f : Nat → Complex\nr : Real\nhr : LE.le 0 r\ns : Complex\nhs : LT.lt r s.re\nhS : LSeriesSummable f s\nhO : Asymptotics.IsBigO Filter.atTop (fun n => (Finset.Icc 1 n).sum fun k => f k) fun n => HPow.hPow (↑n) r\n⊢ Eq (LSeries f s) (HMul.hMul s (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.Ioi 1)) fun t => HMul.hMul ((Finset.Icc 1 (Nat.floor t)).sum fun k => f k) (HPow.hPow (↑t) (Neg.neg (HAdd.hAdd s 1)))))","decl":"/-- If the partial sums `∑ k ∈ Icc 1 n, f k` are `O(n ^ r)` for some real `0 ≤ r` and the\nL-series `LSeries f` converges at `s : ℂ` with `r < s.re`, then\n`LSeries f s = s * ∫ t in Set.Ioi 1, (∑ k ∈ Icc 1 ⌊t⌋₊, f k) * t ^ (-(s + 1))`. -/\ntheorem LSeries_eq_mul_integral (f : ℕ → ℂ) {r : ℝ} (hr : 0 ≤ r) {s : ℂ} (hs : r < s.re)\n    (hS : LSeriesSummable f s)\n    (hO : (fun n ↦ ∑ k ∈ Icc 1 n, f k) =O[atTop] fun n ↦ (n : ℝ) ^ r) :\n    LSeries f s = s * ∫ t in Set.Ioi (1 : ℝ), (∑ k ∈ Icc 1 ⌊t⌋₊, f k) * t ^ (-(s + 1)) := by\n  rw [← LSeriesSummable_congr' s (f := fun n ↦ if n = 0 then 0 else f n)\n    (by filter_upwards [eventually_ne_atTop 0] with n h using if_neg h)] at hS\n  have (n) : ∑ k ∈ Icc 1 n, (if k = 0 then 0 else f k) = ∑ k ∈ Icc 1 n, f k :=\n    Finset.sum_congr rfl fun k hk ↦ by rw [if_neg (zero_lt_one.trans_le (mem_Icc.mp hk).1).ne']\n  rw [← LSeries_congr _ (fun _ ↦ if_neg _), LSeries_eq_mul_integral_aux (if_pos rfl) hr hs hS] <;>\n  simp_all\n\n"}
{"name":"LSeries_eq_mul_integral'","module":"Mathlib.NumberTheory.LSeries.SumCoeff","initialProofState":"f : Nat → Complex\nr : Real\nhr : LE.le 0 r\ns : Complex\nhs : LT.lt r s.re\nhO : Asymptotics.IsBigO Filter.atTop (fun n => (Finset.Icc 1 n).sum fun k => Norm.norm (f k)) fun n => HPow.hPow (↑n) r\n⊢ Eq (LSeries f s) (HMul.hMul s (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.Ioi 1)) fun t => HMul.hMul ((Finset.Icc 1 (Nat.floor t)).sum fun k => f k) (HPow.hPow (↑t) (Neg.neg (HAdd.hAdd s 1)))))","decl":"/-- A version of `LSeries_eq_mul_integral` where we use the stronger condition that the partial sums\n`∑ k ∈ Icc 1 n, ‖f k‖` are `O(n ^ r)` to deduce the integral representation. -/\ntheorem LSeries_eq_mul_integral' (f : ℕ → ℂ) {r : ℝ} (hr : 0 ≤ r) {s : ℂ} (hs : r < s.re)\n    (hO : (fun n ↦ ∑ k ∈ Icc 1 n, ‖f k‖) =O[atTop] fun n ↦ (n : ℝ) ^ r) :\n    LSeries f s = s * ∫ t in Set.Ioi (1 : ℝ), (∑ k ∈ Icc 1 ⌊t⌋₊, f k) * t ^ (-(s + 1)) :=\n  LSeries_eq_mul_integral _ hr hs (LSeriesSummable_of_sum_norm_bigO hO hr hs) <|\n    (isBigO_of_le _ fun _ ↦ (norm_sum_le _ _).trans <| Real.le_norm_self _).trans hO\n\n"}
{"name":"LSeries_eq_mul_integral_of_nonneg","module":"Mathlib.NumberTheory.LSeries.SumCoeff","initialProofState":"f : Nat → Real\nr : Real\nhr : LE.le 0 r\ns : Complex\nhs : LT.lt r s.re\nhO : Asymptotics.IsBigO Filter.atTop (fun n => (Finset.Icc 1 n).sum fun k => f k) fun n => HPow.hPow (↑n) r\nhf : ∀ (n : Nat), LE.le 0 (f n)\n⊢ Eq (LSeries (fun n => ↑(f n)) s) (HMul.hMul s (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.Ioi 1)) fun t => HMul.hMul ((Finset.Icc 1 (Nat.floor t)).sum fun k => ↑(f k)) (HPow.hPow (↑t) (Neg.neg (HAdd.hAdd s 1)))))","decl":"/-- If `f` takes nonnegative real values and the partial sums `∑ k ∈ Icc 1 n, f k` are `O(n ^ r)`\nfor some real `0 ≤ r`, then for `s : ℂ` with `r < s.re`, we have\n`LSeries f s = s * ∫ t in Set.Ioi 1, (∑ k ∈ Icc 1 ⌊t⌋₊, f k) * t ^ (-(s + 1))`. -/\ntheorem LSeries_eq_mul_integral_of_nonneg (f : ℕ → ℝ) {r : ℝ} (hr : 0 ≤ r) {s : ℂ} (hs : r < s.re)\n    (hO : (fun n ↦ ∑ k ∈ Icc 1 n, f k) =O[atTop] fun n ↦ (n : ℝ) ^ r) (hf : ∀ n, 0 ≤ f n) :\n    LSeries (fun n ↦ f n) s =\n      s * ∫ t in Set.Ioi (1 : ℝ), (∑ k ∈ Icc 1 ⌊t⌋₊, (f k : ℂ)) * t ^ (-(s + 1)) :=\n  LSeries_eq_mul_integral' _ hr hs <| hO.congr_left fun _ ↦ by simp [_root_.abs_of_nonneg (hf _)]\n\n"}
