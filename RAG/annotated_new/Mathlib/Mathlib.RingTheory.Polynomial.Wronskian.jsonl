{"name":"Polynomial.wronskianBilin_apply","module":"Mathlib.RingTheory.Polynomial.Wronskian","initialProofState":"R : Type u_1\ninst✝ : CommRing R\na b : Polynomial R\n⊢ Eq (((Polynomial.wronskianBilin R) a) b) (a.wronskian b)","decl":"@[simp]\ntheorem wronskianBilin_apply (a b : R[X]) : wronskianBilin R a b = wronskian a b := rfl\n\n"}
{"name":"Polynomial.wronskian_zero_left","module":"Mathlib.RingTheory.Polynomial.Wronskian","initialProofState":"R : Type u_1\ninst✝ : CommRing R\na : Polynomial R\n⊢ Eq (Polynomial.wronskian 0 a) 0","decl":"@[simp]\ntheorem wronskian_zero_left (a : R[X]) : wronskian 0 a = 0 := by\n  rw [← wronskianBilin_apply 0 a, map_zero]; rfl\n\n"}
{"name":"Polynomial.wronskian_zero_right","module":"Mathlib.RingTheory.Polynomial.Wronskian","initialProofState":"R : Type u_1\ninst✝ : CommRing R\na : Polynomial R\n⊢ Eq (a.wronskian 0) 0","decl":"@[simp]\ntheorem wronskian_zero_right (a : R[X]) : wronskian a 0 = 0 := (wronskianBilin R a).map_zero\n\n"}
{"name":"Polynomial.wronskian_neg_left","module":"Mathlib.RingTheory.Polynomial.Wronskian","initialProofState":"R : Type u_1\ninst✝ : CommRing R\na b : Polynomial R\n⊢ Eq ((Neg.neg a).wronskian b) (Neg.neg (a.wronskian b))","decl":"theorem wronskian_neg_left (a b : R[X]) : wronskian (-a) b = -wronskian a b :=\n  LinearMap.map_neg₂ (wronskianBilin R) a b\n\n"}
{"name":"Polynomial.wronskian_neg_right","module":"Mathlib.RingTheory.Polynomial.Wronskian","initialProofState":"R : Type u_1\ninst✝ : CommRing R\na b : Polynomial R\n⊢ Eq (a.wronskian (Neg.neg b)) (Neg.neg (a.wronskian b))","decl":"theorem wronskian_neg_right (a b : R[X]) : wronskian a (-b) = -wronskian a b :=\n  (wronskianBilin R a).map_neg b\n\n"}
{"name":"Polynomial.wronskian_add_right","module":"Mathlib.RingTheory.Polynomial.Wronskian","initialProofState":"R : Type u_1\ninst✝ : CommRing R\na b c : Polynomial R\n⊢ Eq (a.wronskian (HAdd.hAdd b c)) (HAdd.hAdd (a.wronskian b) (a.wronskian c))","decl":"theorem wronskian_add_right (a b c : R[X]) : wronskian a (b + c) = wronskian a b + wronskian a c :=\n  (wronskianBilin R a).map_add b c\n\n"}
{"name":"Polynomial.wronskian_add_left","module":"Mathlib.RingTheory.Polynomial.Wronskian","initialProofState":"R : Type u_1\ninst✝ : CommRing R\na b c : Polynomial R\n⊢ Eq ((HAdd.hAdd a b).wronskian c) (HAdd.hAdd (a.wronskian c) (b.wronskian c))","decl":"theorem wronskian_add_left (a b c : R[X]) : wronskian (a + b) c = wronskian a c + wronskian b c :=\n  (wronskianBilin R).map_add₂ a b c\n\n"}
{"name":"Polynomial.wronskian_self_eq_zero","module":"Mathlib.RingTheory.Polynomial.Wronskian","initialProofState":"R : Type u_1\ninst✝ : CommRing R\na : Polynomial R\n⊢ Eq (a.wronskian a) 0","decl":"theorem wronskian_self_eq_zero (a : R[X]) : wronskian a a = 0 := by\n  rw [wronskian, mul_comm, sub_self]\n\n"}
{"name":"Polynomial.isAlt_wronskianBilin","module":"Mathlib.RingTheory.Polynomial.Wronskian","initialProofState":"R : Type u_1\ninst✝ : CommRing R\n⊢ (Polynomial.wronskianBilin R).IsAlt","decl":"theorem isAlt_wronskianBilin : (wronskianBilin R).IsAlt := wronskian_self_eq_zero\n\n"}
{"name":"Polynomial.wronskian_neg_eq","module":"Mathlib.RingTheory.Polynomial.Wronskian","initialProofState":"R : Type u_1\ninst✝ : CommRing R\na b : Polynomial R\n⊢ Eq (Neg.neg (a.wronskian b)) (b.wronskian a)","decl":"theorem wronskian_neg_eq (a b : R[X]) : -wronskian a b = wronskian b a :=\n  LinearMap.IsAlt.neg isAlt_wronskianBilin a b\n\n"}
{"name":"Polynomial.wronskian_eq_of_sum_zero","module":"Mathlib.RingTheory.Polynomial.Wronskian","initialProofState":"R : Type u_1\ninst✝ : CommRing R\na b c : Polynomial R\nhAdd : Eq (HAdd.hAdd (HAdd.hAdd a b) c) 0\n⊢ Eq (a.wronskian b) (b.wronskian c)","decl":"theorem wronskian_eq_of_sum_zero {a b c : R[X]} (hAdd : a + b + c = 0) :\n    wronskian a b = wronskian b c := isAlt_wronskianBilin.eq_of_add_add_eq_zero hAdd\n\n"}
{"name":"Polynomial.degree_wronskian_lt_add","module":"Mathlib.RingTheory.Polynomial.Wronskian","initialProofState":"R : Type u_1\ninst✝ : CommRing R\na b : Polynomial R\nha : Ne a 0\nhb : Ne b 0\n⊢ LT.lt (a.wronskian b).degree (HAdd.hAdd a.degree b.degree)","decl":"/-- Degree of `W(a,b)` is strictly less than the sum of degrees of `a` and `b` (both nonzero). -/\ntheorem degree_wronskian_lt_add {a b : R[X]} (ha : a ≠ 0) (hb : b ≠ 0) :\n    (wronskian a b).degree < a.degree + b.degree := by\n  calc\n    (wronskian a b).degree ≤ max (a * derivative b).degree (derivative a * b).degree :=\n      Polynomial.degree_sub_le _ _\n    _ < a.degree + b.degree := by\n      rw [max_lt_iff]\n      constructor\n      case left =>\n        apply lt_of_le_of_lt\n        · exact degree_mul_le a (derivative b)\n        · rw [← Polynomial.degree_ne_bot] at ha\n          rw [WithBot.add_lt_add_iff_left ha]\n          exact Polynomial.degree_derivative_lt hb\n      case right =>\n        apply lt_of_le_of_lt\n        · exact degree_mul_le (derivative a) b\n        · rw [← Polynomial.degree_ne_bot] at hb\n          rw [WithBot.add_lt_add_iff_right hb]\n          exact Polynomial.degree_derivative_lt ha\n\n"}
{"name":"Polynomial.natDegree_wronskian_lt_add","module":"Mathlib.RingTheory.Polynomial.Wronskian","initialProofState":"R : Type u_1\ninst✝ : CommRing R\na b : Polynomial R\nhw : Ne (a.wronskian b) 0\n⊢ LT.lt (a.wronskian b).natDegree (HAdd.hAdd a.natDegree b.natDegree)","decl":"/--\n`natDegree` version of the above theorem.\nNote this would be false with just `(ha : a ≠ 0) (hb : b ≠ 0),\nas when `a = b = 1` we have `(wronskian a b).natDegree = a.natDegree = b.natDegree = 0`.\n-/\ntheorem natDegree_wronskian_lt_add {a b : R[X]} (hw : wronskian a b ≠ 0) :\n    (wronskian a b).natDegree < a.natDegree + b.natDegree := by\n  have ha : a ≠ 0 := by intro h; subst h; rw [wronskian_zero_left] at hw; exact hw rfl\n  have hb : b ≠ 0 := by intro h; subst h; rw [wronskian_zero_right] at hw; exact hw rfl\n  rw [← WithBot.coe_lt_coe, WithBot.coe_add]\n  convert ← degree_wronskian_lt_add ha hb\n  · exact Polynomial.degree_eq_natDegree hw\n  · exact Polynomial.degree_eq_natDegree ha\n  · exact Polynomial.degree_eq_natDegree hb\n\n"}
{"name":"IsCoprime.wronskian_eq_zero_iff","module":"Mathlib.RingTheory.Polynomial.Wronskian","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\na b : Polynomial R\nhc : IsCoprime a b\n⊢ Iff (Eq (a.wronskian b) 0) (And (Eq (Polynomial.derivative a) 0) (Eq (Polynomial.derivative b) 0))","decl":"/--\nFor coprime polynomials `a` and `b`, their Wronskian is zero\nif and only if their derivatives are zeros.\n-/\ntheorem _root_.IsCoprime.wronskian_eq_zero_iff\n    [NoZeroDivisors R] {a b : R[X]} (hc : IsCoprime a b) :\n    wronskian a b = 0 ↔ derivative a = 0 ∧ derivative b = 0 where\n  mp hw := by\n    rw [wronskian, sub_eq_iff_eq_add, zero_add] at hw\n    constructor\n    · rw [← dvd_derivative_iff]\n      apply hc.dvd_of_dvd_mul_right\n      rw [← hw]; exact dvd_mul_right _ _\n    · rw [← dvd_derivative_iff]\n      apply hc.symm.dvd_of_dvd_mul_left\n      rw [hw]; exact dvd_mul_left _ _\n  mpr hdab := by\n    cases' hdab with hda hdb\n    rw [wronskian]\n    rw [hda, hdb]; simp only [MulZeroClass.mul_zero, MulZeroClass.zero_mul, sub_self]\n\n"}
{"name":"Polynomial.IsCoprime.wronskian_eq_zero_iff","module":"Mathlib.RingTheory.Polynomial.Wronskian","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\na b : Polynomial R\nhc : IsCoprime a b\n⊢ Iff (Eq (a.wronskian b) 0) (And (Eq (Polynomial.derivative a) 0) (Eq (Polynomial.derivative b) 0))","decl":"@[deprecated (since := \"2024-11-06\")]\nalias IsCoprime.wronskian_eq_zero_iff := IsCoprime.wronskian_eq_zero_iff\n\n"}
