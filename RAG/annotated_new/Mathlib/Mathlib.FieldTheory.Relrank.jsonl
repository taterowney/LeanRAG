{"name":"Subfield.relfinrank_eq_toNat_relrank","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B : Subfield E\n⊢ Eq (A.relfinrank B) (Cardinal.toNat (A.relrank B))","decl":"theorem relfinrank_eq_toNat_relrank : relfinrank A B = toNat (relrank A B) := rfl\n\n"}
{"name":"Subfield.relrank_eq_of_inf_eq","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B C : Subfield E\nh : Eq (Min.min A C) (Min.min B C)\n⊢ Eq (A.relrank C) (B.relrank C)","decl":"theorem relrank_eq_of_inf_eq (h : A ⊓ C = B ⊓ C) : relrank A C = relrank B C := by\n  simp_rw [relrank]\n  congr!\n\n"}
{"name":"Subfield.relfinrank_eq_of_inf_eq","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B C : Subfield E\nh : Eq (Min.min A C) (Min.min B C)\n⊢ Eq (A.relfinrank C) (B.relfinrank C)","decl":"theorem relfinrank_eq_of_inf_eq (h : A ⊓ C = B ⊓ C) : relfinrank A C = relfinrank B C :=\n  congr(toNat $(relrank_eq_of_inf_eq h))\n\n"}
{"name":"Subfield.relrank_eq_rank_of_le","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B : Subfield E\nh : LE.le A B\n⊢ Eq (A.relrank B) (Module.rank (Subtype fun x => Membership.mem A x) (Subtype fun x => Membership.mem (Subfield.extendScalars h) x))","decl":"set_option synthInstance.maxHeartbeats 400000 in\n/-- If `A ≤ B`, then `Subfield.relrank A B` is `[B : A]` -/\ntheorem relrank_eq_rank_of_le (h : A ≤ B) : relrank A B = Module.rank A (extendScalars h) := by\n  rw [relrank]\n  have := inf_of_le_left h\n  congr!\n\n"}
{"name":"Subfield.relfinrank_eq_finrank_of_le","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B : Subfield E\nh : LE.le A B\n⊢ Eq (A.relfinrank B) (Module.finrank (Subtype fun x => Membership.mem A x) (Subtype fun x => Membership.mem (Subfield.extendScalars h) x))","decl":"set_option synthInstance.maxHeartbeats 400000 in\n/-- If `A ≤ B`, then `Subfield.relfinrank A B` is `[B : A]` -/\ntheorem relfinrank_eq_finrank_of_le (h : A ≤ B) : relfinrank A B = finrank A (extendScalars h) :=\n  congr(toNat $(relrank_eq_rank_of_le h))\n\n"}
{"name":"Subfield.inf_relrank_right","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B : Subfield E\n⊢ Eq ((Min.min A B).relrank B) (A.relrank B)","decl":"theorem inf_relrank_right : relrank (A ⊓ B) B = relrank A B :=\n  relrank_eq_rank_of_le (inf_le_right : A ⊓ B ≤ B)\n\n"}
{"name":"Subfield.inf_relfinrank_right","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B : Subfield E\n⊢ Eq ((Min.min A B).relfinrank B) (A.relfinrank B)","decl":"theorem inf_relfinrank_right : relfinrank (A ⊓ B) B = relfinrank A B :=\n  congr(toNat $(inf_relrank_right A B))\n\n"}
{"name":"Subfield.inf_relrank_left","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B : Subfield E\n⊢ Eq ((Min.min A B).relrank A) (B.relrank A)","decl":"theorem inf_relrank_left : relrank (A ⊓ B) A = relrank B A := by\n  rw [inf_comm, inf_relrank_right]\n\n"}
{"name":"Subfield.inf_relfinrank_left","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B : Subfield E\n⊢ Eq ((Min.min A B).relfinrank A) (B.relfinrank A)","decl":"theorem inf_relfinrank_left : relfinrank (A ⊓ B) A = relfinrank B A :=\n  congr(toNat $(inf_relrank_left A B))\n\n"}
{"name":"Subfield.relrank_self","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA : Subfield E\n⊢ Eq (A.relrank A) 1","decl":"@[simp]\ntheorem relrank_self : relrank A A = 1 := by\n  rw [relrank_eq_rank_of_le (le_refl A), extendScalars_self, IntermediateField.rank_bot]\n\n"}
{"name":"Subfield.relfinrank_self","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA : Subfield E\n⊢ Eq (A.relfinrank A) 1","decl":"@[simp]\ntheorem relfinrank_self : relfinrank A A = 1 := by\n  simp [relfinrank_eq_toNat_relrank]\n\n"}
{"name":"Subfield.relrank_eq_one_of_le","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B : Subfield E\nh : LE.le B A\n⊢ Eq (A.relrank B) 1","decl":"variable {A B} in\ntheorem relrank_eq_one_of_le (h : B ≤ A) : relrank A B = 1 := by\n  rw [← inf_relrank_right, inf_eq_right.2 h, relrank_self]\n\n"}
{"name":"Subfield.relfinrank_eq_one_of_le","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B : Subfield E\nh : LE.le B A\n⊢ Eq (A.relfinrank B) 1","decl":"variable {A B} in\ntheorem relfinrank_eq_one_of_le (h : B ≤ A) : relfinrank A B = 1 := by\n  simp [relfinrank_eq_toNat_relrank, relrank_eq_one_of_le h]\n\n"}
{"name":"Subfield.relrank_mul_rank_top","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B : Subfield E\nh : LE.le A B\n⊢ Eq (HMul.hMul (A.relrank B) (Module.rank (Subtype fun x => Membership.mem B x) E)) (Module.rank (Subtype fun x => Membership.mem A x) E)","decl":"variable {A B} in\ntheorem relrank_mul_rank_top (h : A ≤ B) : relrank A B * Module.rank B E = Module.rank A E := by\n  rw [relrank_eq_rank_of_le h]\n  letI : Algebra A B := (inclusion h).toAlgebra\n  haveI : IsScalarTower A B E := IsScalarTower.of_algebraMap_eq' rfl\n  exact rank_mul_rank A B E\n\n"}
{"name":"Subfield.relfinrank_mul_finrank_top","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B : Subfield E\nh : LE.le A B\n⊢ Eq (HMul.hMul (A.relfinrank B) (Module.finrank (Subtype fun x => Membership.mem B x) E)) (Module.finrank (Subtype fun x => Membership.mem A x) E)","decl":"variable {A B} in\ntheorem relfinrank_mul_finrank_top (h : A ≤ B) : relfinrank A B * finrank B E = finrank A E := by\n  simpa using congr(toNat $(relrank_mul_rank_top h))\n\n"}
{"name":"Subfield.relrank_top_left","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA : Subfield E\n⊢ Eq (Top.top.relrank A) 1","decl":"@[simp]\ntheorem relrank_top_left : relrank ⊤ A = 1 := relrank_eq_one_of_le le_top\n\n"}
{"name":"Subfield.relfinrank_top_left","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA : Subfield E\n⊢ Eq (Top.top.relfinrank A) 1","decl":"@[simp]\ntheorem relfinrank_top_left : relfinrank ⊤ A = 1 := relfinrank_eq_one_of_le le_top\n\n"}
{"name":"Subfield.relrank_top_right","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA : Subfield E\n⊢ Eq (A.relrank Top.top) (Module.rank (Subtype fun x => Membership.mem A x) E)","decl":"set_option synthInstance.maxHeartbeats 400000 in\n@[simp]\ntheorem relrank_top_right : relrank A ⊤ = Module.rank A E := by\n  let _ : AddCommMonoid (⊤ : IntermediateField A E) := inferInstance\n  rw [relrank_eq_rank_of_le (show A ≤ ⊤ from le_top), extendScalars_top,\n    IntermediateField.topEquiv.toLinearEquiv.rank_eq]\n\n"}
{"name":"Subfield.relfinrank_top_right","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA : Subfield E\n⊢ Eq (A.relfinrank Top.top) (Module.finrank (Subtype fun x => Membership.mem A x) E)","decl":"@[simp]\ntheorem relfinrank_top_right : relfinrank A ⊤ = finrank A E := by\n  simp [relfinrank_eq_toNat_relrank, finrank]\n\n"}
{"name":"Subfield.lift_relrank_map_map","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝¹ : Field E\nL : Type w\ninst✝ : Field L\nA B : Subfield E\nf : RingHom E L\n⊢ Eq (Cardinal.lift.{v, w} ((Subfield.map f A).relrank (Subfield.map f B))) (Cardinal.lift.{w, v} (A.relrank B))","decl":"theorem lift_relrank_map_map (f : E →+* L) :\n    lift.{v} (relrank (A.map f) (B.map f)) = lift.{w} (relrank A B) :=\n  -- typeclass inference is slow\n  .symm <| Algebra.lift_rank_eq_of_equiv_equiv (((A ⊓ B).equivMapOfInjective f f.injective).trans\n    <| .subringCongr <| by rw [← map_inf]; rfl) (B.equivMapOfInjective f f.injective) rfl\n\n"}
{"name":"Subfield.relrank_map_map","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝¹ : Field E\nA B : Subfield E\nL : Type v\ninst✝ : Field L\nf : RingHom E L\n⊢ Eq ((Subfield.map f A).relrank (Subfield.map f B)) (A.relrank B)","decl":"theorem relrank_map_map {L : Type v} [Field L] (f : E →+* L) :\n    relrank (A.map f) (B.map f) = relrank A B := by\n  simpa only [lift_id] using lift_relrank_map_map A B f\n\n"}
{"name":"Subfield.lift_relrank_comap","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝¹ : Field E\nL : Type w\ninst✝ : Field L\nA : Subfield E\nf : RingHom L E\nB : Subfield L\n⊢ Eq (Cardinal.lift.{v, w} ((Subfield.comap f A).relrank B)) (Cardinal.lift.{w, v} (A.relrank (Subfield.map f B)))","decl":"theorem lift_relrank_comap (f : L →+* E) (B : Subfield L) :\n    lift.{v} (relrank (A.comap f) B) = lift.{w} (relrank A (B.map f)) :=\n  (lift_relrank_map_map _ _ f).symm.trans <| congr_arg lift <| relrank_eq_of_inf_eq <| by\n    rw [map_comap_eq, f.fieldRange_eq_map, inf_assoc, ← map_inf, top_inf_eq]\n\n"}
{"name":"Subfield.relrank_comap","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝¹ : Field E\nA : Subfield E\nL : Type v\ninst✝ : Field L\nf : RingHom L E\nB : Subfield L\n⊢ Eq ((Subfield.comap f A).relrank B) (A.relrank (Subfield.map f B))","decl":"theorem relrank_comap {L : Type v} [Field L] (f : L →+* E)\n    (B : Subfield L) : relrank (A.comap f) B = relrank A (B.map f) := by\n  simpa only [lift_id] using A.lift_relrank_comap f B\n\n"}
{"name":"Subfield.relfinrank_comap","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝¹ : Field E\nL : Type w\ninst✝ : Field L\nA : Subfield E\nf : RingHom L E\nB : Subfield L\n⊢ Eq ((Subfield.comap f A).relfinrank B) (A.relfinrank (Subfield.map f B))","decl":"theorem relfinrank_comap (f : L →+* E) (B : Subfield L) :\n    relfinrank (A.comap f) B = relfinrank A (B.map f) := by\n  simpa using congr(toNat $(lift_relrank_comap A f B))\n\n"}
{"name":"Subfield.lift_rank_comap","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝¹ : Field E\nL : Type w\ninst✝ : Field L\nA : Subfield E\nf : RingHom L E\n⊢ Eq (Cardinal.lift.{v, w} (Module.rank (Subtype fun x => Membership.mem (Subfield.comap f A) x) L)) (Cardinal.lift.{w, v} (A.relrank f.fieldRange))","decl":"theorem lift_rank_comap (f : L →+* E) :\n    lift.{v} (Module.rank (A.comap f) L) = lift.{w} (relrank A f.fieldRange) := by\n  simpa only [relrank_top_right, ← RingHom.fieldRange_eq_map] using lift_relrank_comap A f ⊤\n\n"}
{"name":"Subfield.rank_comap","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝¹ : Field E\nA : Subfield E\nL : Type v\ninst✝ : Field L\nf : RingHom L E\n⊢ Eq (Module.rank (Subtype fun x => Membership.mem (Subfield.comap f A) x) L) (A.relrank f.fieldRange)","decl":"theorem rank_comap {L : Type v} [Field L] (f : L →+* E) :\n    Module.rank (A.comap f) L = relrank A f.fieldRange := by\n  simpa only [lift_id] using A.lift_rank_comap f\n\n"}
{"name":"Subfield.finrank_comap","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝¹ : Field E\nL : Type w\ninst✝ : Field L\nA : Subfield E\nf : RingHom L E\n⊢ Eq (Module.finrank (Subtype fun x => Membership.mem (Subfield.comap f A) x) L) (A.relfinrank f.fieldRange)","decl":"theorem finrank_comap (f : L →+* E) : finrank (A.comap f) L = relfinrank A f.fieldRange := by\n  simpa using congr(toNat $(lift_rank_comap A f))\n\n"}
{"name":"Subfield.relfinrank_map_map","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝¹ : Field E\nL : Type w\ninst✝ : Field L\nA B : Subfield E\nf : RingHom E L\n⊢ Eq ((Subfield.map f A).relfinrank (Subfield.map f B)) (A.relfinrank B)","decl":"theorem relfinrank_map_map (f : E →+* L) :\n    relfinrank (A.map f) (B.map f) = relfinrank A B := by\n  simpa using congr(toNat $(lift_relrank_map_map A B f))\n\n"}
{"name":"Subfield.lift_relrank_comap_comap_eq_lift_relrank_inf","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝¹ : Field E\nL : Type w\ninst✝ : Field L\nA B : Subfield E\nf : RingHom L E\n⊢ Eq (Cardinal.lift.{v, w} ((Subfield.comap f A).relrank (Subfield.comap f B))) (Cardinal.lift.{w, v} (A.relrank (Min.min B f.fieldRange)))","decl":"theorem lift_relrank_comap_comap_eq_lift_relrank_inf (f : L →+* E) :\n    lift.{v} (relrank (A.comap f) (B.comap f)) =\n    lift.{w} (relrank A (B ⊓ f.fieldRange)) := by\n  conv_lhs => rw [← lift_relrank_map_map _ _ f, map_comap_eq, map_comap_eq]\n  congr 1\n  apply relrank_eq_of_inf_eq\n  rw [inf_assoc, inf_left_comm _ B, inf_of_le_left (le_refl _)]\n\n"}
{"name":"Subfield.relrank_comap_comap_eq_relrank_inf","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝¹ : Field E\nA B : Subfield E\nL : Type v\ninst✝ : Field L\nf : RingHom L E\n⊢ Eq ((Subfield.comap f A).relrank (Subfield.comap f B)) (A.relrank (Min.min B f.fieldRange))","decl":"theorem relrank_comap_comap_eq_relrank_inf\n    {L : Type v} [Field L] (f : L →+* E) :\n    relrank (A.comap f) (B.comap f) = relrank A (B ⊓ f.fieldRange) := by\n  simpa only [lift_id] using lift_relrank_comap_comap_eq_lift_relrank_inf A B f\n\n"}
{"name":"Subfield.relfinrank_comap_comap_eq_relfinrank_inf","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝¹ : Field E\nL : Type w\ninst✝ : Field L\nA B : Subfield E\nf : RingHom L E\n⊢ Eq ((Subfield.comap f A).relfinrank (Subfield.comap f B)) (A.relfinrank (Min.min B f.fieldRange))","decl":"theorem relfinrank_comap_comap_eq_relfinrank_inf (f : L →+* E) :\n    relfinrank (A.comap f) (B.comap f) = relfinrank A (B ⊓ f.fieldRange) := by\n  simpa using congr(toNat $(lift_relrank_comap_comap_eq_lift_relrank_inf A B f))\n\n"}
{"name":"Subfield.lift_relrank_comap_comap_eq_lift_relrank_of_le","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝¹ : Field E\nL : Type w\ninst✝ : Field L\nA B : Subfield E\nf : RingHom L E\nh : LE.le B f.fieldRange\n⊢ Eq (Cardinal.lift.{v, w} ((Subfield.comap f A).relrank (Subfield.comap f B))) (Cardinal.lift.{w, v} (A.relrank B))","decl":"theorem lift_relrank_comap_comap_eq_lift_relrank_of_le (f : L →+* E) (h : B ≤ f.fieldRange) :\n    lift.{v} (relrank (A.comap f) (B.comap f)) =\n    lift.{w} (relrank A B) := by\n  simpa only [inf_of_le_left h] using lift_relrank_comap_comap_eq_lift_relrank_inf A B f\n\n"}
{"name":"Subfield.relrank_comap_comap_eq_relrank_of_le","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝¹ : Field E\nA B : Subfield E\nL : Type v\ninst✝ : Field L\nf : RingHom L E\nh : LE.le B f.fieldRange\n⊢ Eq ((Subfield.comap f A).relrank (Subfield.comap f B)) (A.relrank B)","decl":"theorem relrank_comap_comap_eq_relrank_of_le\n    {L : Type v} [Field L] (f : L →+* E) (h : B ≤ f.fieldRange) :\n    relrank (A.comap f) (B.comap f) = relrank A B := by\n  simpa only [lift_id] using lift_relrank_comap_comap_eq_lift_relrank_of_le A B f h\n\n"}
{"name":"Subfield.relfinrank_comap_comap_eq_relfinrank_of_le","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝¹ : Field E\nL : Type w\ninst✝ : Field L\nA B : Subfield E\nf : RingHom L E\nh : LE.le B f.fieldRange\n⊢ Eq ((Subfield.comap f A).relfinrank (Subfield.comap f B)) (A.relfinrank B)","decl":"theorem relfinrank_comap_comap_eq_relfinrank_of_le (f : L →+* E) (h : B ≤ f.fieldRange) :\n    relfinrank (A.comap f) (B.comap f) = relfinrank A B := by\n  simpa using congr(toNat $(lift_relrank_comap_comap_eq_lift_relrank_of_le A B f h))\n\n"}
{"name":"Subfield.lift_relrank_comap_comap_eq_lift_relrank_of_surjective","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝¹ : Field E\nL : Type w\ninst✝ : Field L\nA B : Subfield E\nf : RingHom L E\nh : Function.Surjective ⇑f\n⊢ Eq (Cardinal.lift.{v, w} ((Subfield.comap f A).relrank (Subfield.comap f B))) (Cardinal.lift.{w, v} (A.relrank B))","decl":"theorem lift_relrank_comap_comap_eq_lift_relrank_of_surjective\n    (f : L →+* E) (h : Function.Surjective f) :\n    lift.{v} (relrank (A.comap f) (B.comap f)) =\n    lift.{w} (relrank A B) :=\n  lift_relrank_comap_comap_eq_lift_relrank_of_le A B f fun x _ ↦ h x\n\n"}
{"name":"Subfield.relrank_comap_comap_eq_relrank_of_surjective","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝¹ : Field E\nA B : Subfield E\nL : Type v\ninst✝ : Field L\nf : RingHom L E\nh : Function.Surjective ⇑f\n⊢ Eq ((Subfield.comap f A).relrank (Subfield.comap f B)) (A.relrank B)","decl":"theorem relrank_comap_comap_eq_relrank_of_surjective\n    {L : Type v} [Field L] (f : L →+* E) (h : Function.Surjective f) :\n    relrank (A.comap f) (B.comap f) = relrank A B := by\n  simpa using lift_relrank_comap_comap_eq_lift_relrank_of_surjective A B f h\n\n"}
{"name":"Subfield.relfinrank_comap_comap_eq_relfinrank_of_surjective","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝¹ : Field E\nL : Type w\ninst✝ : Field L\nA B : Subfield E\nf : RingHom L E\nh : Function.Surjective ⇑f\n⊢ Eq ((Subfield.comap f A).relfinrank (Subfield.comap f B)) (A.relfinrank B)","decl":"theorem relfinrank_comap_comap_eq_relfinrank_of_surjective\n    (f : L →+* E) (h : Function.Surjective f) :\n    relfinrank (A.comap f) (B.comap f) = relfinrank A B := by\n  simpa using congr(toNat $(lift_relrank_comap_comap_eq_lift_relrank_of_surjective A B f h))\n\n"}
{"name":"Subfield.relrank_dvd_rank_top_of_le","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B : Subfield E\nh : LE.le A B\n⊢ Dvd.dvd (A.relrank B) (Module.rank (Subtype fun x => Membership.mem A x) E)","decl":"variable {A B} in\ntheorem relrank_dvd_rank_top_of_le (h : A ≤ B) : relrank A B ∣ Module.rank A E :=\n  dvd_of_mul_right_eq _ (relrank_mul_rank_top h)\n\n"}
{"name":"Subfield.relfinrank_dvd_finrank_top_of_le","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B : Subfield E\nh : LE.le A B\n⊢ Dvd.dvd (A.relfinrank B) (Module.finrank (Subtype fun x => Membership.mem A x) E)","decl":"variable {A B} in\ntheorem relfinrank_dvd_finrank_top_of_le (h : A ≤ B) : relfinrank A B ∣ finrank A E :=\n  dvd_of_mul_right_eq _ (relfinrank_mul_finrank_top h)\n\n"}
{"name":"Subfield.relrank_mul_relrank","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B C : Subfield E\nh1 : LE.le A B\nh2 : LE.le B C\n⊢ Eq (HMul.hMul (A.relrank B) (B.relrank C)) (A.relrank C)","decl":"variable {A B C} in\ntheorem relrank_mul_relrank (h1 : A ≤ B) (h2 : B ≤ C) :\n    relrank A B * relrank B C = relrank A C := by\n  have h3 := h1.trans h2\n  rw [relrank_eq_rank_of_le h1, relrank_eq_rank_of_le h2, relrank_eq_rank_of_le h3]\n  letI : Algebra A B := (inclusion h1).toAlgebra\n  letI : Algebra B C := (inclusion h2).toAlgebra\n  letI : Algebra A C := (inclusion h3).toAlgebra\n  haveI : IsScalarTower A B C := IsScalarTower.of_algebraMap_eq' rfl\n  exact rank_mul_rank A B C\n\n"}
{"name":"Subfield.relfinrank_mul_relfinrank","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B C : Subfield E\nh1 : LE.le A B\nh2 : LE.le B C\n⊢ Eq (HMul.hMul (A.relfinrank B) (B.relfinrank C)) (A.relfinrank C)","decl":"variable {A B C} in\ntheorem relfinrank_mul_relfinrank (h1 : A ≤ B) (h2 : B ≤ C) :\n    relfinrank A B * relfinrank B C = relfinrank A C := by\n  simpa using congr(toNat $(relrank_mul_relrank h1 h2))\n\n"}
{"name":"Subfield.relrank_inf_mul_relrank","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B C : Subfield E\n⊢ Eq (HMul.hMul (A.relrank (Min.min B C)) (B.relrank C)) ((Min.min A B).relrank C)","decl":"theorem relrank_inf_mul_relrank : A.relrank (B ⊓ C) * B.relrank C = (A ⊓ B).relrank C := by\n  rw [← inf_relrank_right A (B ⊓ C), ← inf_relrank_right B C, ← inf_relrank_right (A ⊓ B) C,\n    inf_assoc, relrank_mul_relrank inf_le_right inf_le_right]\n\n"}
{"name":"Subfield.relfinrank_inf_mul_relfinrank","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B C : Subfield E\n⊢ Eq (HMul.hMul (A.relfinrank (Min.min B C)) (B.relfinrank C)) ((Min.min A B).relfinrank C)","decl":"theorem relfinrank_inf_mul_relfinrank :\n    A.relfinrank (B ⊓ C) * B.relfinrank C = (A ⊓ B).relfinrank C := by\n  simpa using congr(toNat $(relrank_inf_mul_relrank A B C))\n\n"}
{"name":"Subfield.relrank_mul_relrank_eq_inf_relrank","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B C : Subfield E\nh : LE.le B C\n⊢ Eq (HMul.hMul (A.relrank B) (B.relrank C)) ((Min.min A B).relrank C)","decl":"variable {B C} in\ntheorem relrank_mul_relrank_eq_inf_relrank (h : B ≤ C) :\n    relrank A B * relrank B C = (A ⊓ B).relrank C := by\n  simpa only [inf_of_le_left h] using relrank_inf_mul_relrank A B C\n\n"}
{"name":"Subfield.relfinrank_mul_relfinrank_eq_inf_relfinrank","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B C : Subfield E\nh : LE.le B C\n⊢ Eq (HMul.hMul (A.relfinrank B) (B.relfinrank C)) ((Min.min A B).relfinrank C)","decl":"variable {B C} in\ntheorem relfinrank_mul_relfinrank_eq_inf_relfinrank (h : B ≤ C) :\n    relfinrank A B * relfinrank B C = (A ⊓ B).relfinrank C := by\n  simpa using congr(toNat $(relrank_mul_relrank_eq_inf_relrank A h))\n\n"}
{"name":"Subfield.relrank_inf_mul_relrank_of_le","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B C : Subfield E\nh : LE.le A B\n⊢ Eq (HMul.hMul (A.relrank (Min.min B C)) (B.relrank C)) (A.relrank C)","decl":"variable {A B} in\ntheorem relrank_inf_mul_relrank_of_le (h : A ≤ B) :\n    A.relrank (B ⊓ C) * B.relrank C = A.relrank C := by\n  simpa only [inf_of_le_left h] using relrank_inf_mul_relrank A B C\n\n"}
{"name":"Subfield.relfinrank_inf_mul_relfinrank_of_le","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B C : Subfield E\nh : LE.le A B\n⊢ Eq (HMul.hMul (A.relfinrank (Min.min B C)) (B.relfinrank C)) (A.relfinrank C)","decl":"variable {A B} in\ntheorem relfinrank_inf_mul_relfinrank_of_le (h : A ≤ B) :\n    A.relfinrank (B ⊓ C) * B.relfinrank C = A.relfinrank C := by\n  simpa using congr(toNat $(relrank_inf_mul_relrank_of_le C h))\n\n"}
{"name":"Subfield.relrank_dvd_of_le_left","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B C : Subfield E\nh : LE.le A B\n⊢ Dvd.dvd (B.relrank C) (A.relrank C)","decl":"variable {A B} in\ntheorem relrank_dvd_of_le_left (h : A ≤ B) : B.relrank C ∣ A.relrank C :=\n  dvd_of_mul_left_eq _ (relrank_inf_mul_relrank_of_le C h)\n\n"}
{"name":"Subfield.relfinrank_dvd_of_le_left","module":"Mathlib.FieldTheory.Relrank","initialProofState":"E : Type v\ninst✝ : Field E\nA B C : Subfield E\nh : LE.le A B\n⊢ Dvd.dvd (B.relfinrank C) (A.relfinrank C)","decl":"variable {A B} in\ntheorem relfinrank_dvd_of_le_left (h : A ≤ B) : B.relfinrank C ∣ A.relfinrank C :=\n  dvd_of_mul_left_eq _ (relfinrank_inf_mul_relfinrank_of_le C h)\n\n"}
{"name":"IntermediateField.relfinrank_eq_toNat_relrank","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B : IntermediateField F E\n⊢ Eq (A.relfinrank B) (Cardinal.toNat (A.relrank B))","decl":"theorem relfinrank_eq_toNat_relrank : relfinrank A B = toNat (relrank A B) := rfl\n\n"}
{"name":"IntermediateField.relrank_eq_of_inf_eq","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B C : IntermediateField F E\nh : Eq (Min.min A C) (Min.min B C)\n⊢ Eq (A.relrank C) (B.relrank C)","decl":"theorem relrank_eq_of_inf_eq (h : A ⊓ C = B ⊓ C) : relrank A C = relrank B C :=\n  Subfield.relrank_eq_of_inf_eq congr(toSubfield $h)\n\n"}
{"name":"IntermediateField.relfinrank_eq_of_inf_eq","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B C : IntermediateField F E\nh : Eq (Min.min A C) (Min.min B C)\n⊢ Eq (A.relfinrank C) (B.relfinrank C)","decl":"theorem relfinrank_eq_of_inf_eq (h : A ⊓ C = B ⊓ C) : relfinrank A C = relfinrank B C :=\n  congr(toNat $(relrank_eq_of_inf_eq h))\n\n"}
{"name":"IntermediateField.relrank_eq_rank_of_le","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B : IntermediateField F E\nh : LE.le A B\n⊢ Eq (A.relrank B) (Module.rank (Subtype fun x => Membership.mem A x) (Subtype fun x => Membership.mem (IntermediateField.extendScalars h) x))","decl":"/-- If `A ≤ B`, then `IntermediateField.relrank A B` is `[B : A]` -/\ntheorem relrank_eq_rank_of_le (h : A ≤ B) : relrank A B = Module.rank A (extendScalars h) :=\n  Subfield.relrank_eq_rank_of_le h\n\n"}
{"name":"IntermediateField.relfinrank_eq_finrank_of_le","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B : IntermediateField F E\nh : LE.le A B\n⊢ Eq (A.relfinrank B) (Module.finrank (Subtype fun x => Membership.mem A x) (Subtype fun x => Membership.mem (IntermediateField.extendScalars h) x))","decl":"/-- If `A ≤ B`, then `IntermediateField.relrank A B` is `[B : A]` -/\ntheorem relfinrank_eq_finrank_of_le (h : A ≤ B) : relfinrank A B = finrank A (extendScalars h) :=\n  congr(toNat $(relrank_eq_rank_of_le h))\n\n"}
{"name":"IntermediateField.inf_relrank_right","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B : IntermediateField F E\n⊢ Eq ((Min.min A B).relrank B) (A.relrank B)","decl":"theorem inf_relrank_right : relrank (A ⊓ B) B = relrank A B :=\n  relrank_eq_rank_of_le (inf_le_right : A ⊓ B ≤ B)\n\n"}
{"name":"IntermediateField.inf_relfinrank_right","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B : IntermediateField F E\n⊢ Eq ((Min.min A B).relfinrank B) (A.relfinrank B)","decl":"theorem inf_relfinrank_right : relfinrank (A ⊓ B) B = relfinrank A B :=\n  congr(toNat $(inf_relrank_right A B))\n\n"}
{"name":"IntermediateField.inf_relrank_left","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B : IntermediateField F E\n⊢ Eq ((Min.min A B).relrank A) (B.relrank A)","decl":"theorem inf_relrank_left : relrank (A ⊓ B) A = relrank B A := by\n  rw [inf_comm, inf_relrank_right]\n\n"}
{"name":"IntermediateField.inf_relfinrank_left","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B : IntermediateField F E\n⊢ Eq ((Min.min A B).relfinrank A) (B.relfinrank A)","decl":"theorem inf_relfinrank_left : relfinrank (A ⊓ B) A = relfinrank B A :=\n  congr(toNat $(inf_relrank_left A B))\n\n"}
{"name":"IntermediateField.relrank_self","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA : IntermediateField F E\n⊢ Eq (A.relrank A) 1","decl":"@[simp]\ntheorem relrank_self : relrank A A = 1 := A.toSubfield.relrank_self\n\n"}
{"name":"IntermediateField.relfinrank_self","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA : IntermediateField F E\n⊢ Eq (A.relfinrank A) 1","decl":"@[simp]\ntheorem relfinrank_self : relfinrank A A = 1 := A.toSubfield.relfinrank_self\n\n"}
{"name":"IntermediateField.relrank_eq_one_of_le","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B : IntermediateField F E\nh : LE.le B A\n⊢ Eq (A.relrank B) 1","decl":"variable {A B} in\ntheorem relrank_eq_one_of_le (h : B ≤ A) : relrank A B = 1 := by\n  rw [← inf_relrank_right, inf_eq_right.2 h, relrank_self]\n\n"}
{"name":"IntermediateField.relfinrank_eq_one_of_le","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B : IntermediateField F E\nh : LE.le B A\n⊢ Eq (A.relfinrank B) 1","decl":"variable {A B} in\ntheorem relfinrank_eq_one_of_le (h : B ≤ A) : relfinrank A B = 1 := by\n  simp [relfinrank_eq_toNat_relrank, relrank_eq_one_of_le h]\n\n"}
{"name":"IntermediateField.lift_rank_comap","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝⁴ : Field F\ninst✝³ : Field E\ninst✝² : Algebra F E\nL : Type w\ninst✝¹ : Field L\ninst✝ : Algebra F L\nA : IntermediateField F E\nf : AlgHom F L E\n⊢ Eq (Cardinal.lift.{v, w} (Module.rank (Subtype fun x => Membership.mem (IntermediateField.comap f A) x) L)) (Cardinal.lift.{w, v} (A.relrank f.fieldRange))","decl":"theorem lift_rank_comap (f : L →ₐ[F] E) :\n    Cardinal.lift.{v} (Module.rank (A.comap f) L) = Cardinal.lift.{w} (relrank A f.fieldRange) :=\n  A.toSubfield.lift_rank_comap f.toRingHom\n\n"}
{"name":"IntermediateField.rank_comap","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝⁴ : Field F\ninst✝³ : Field E\ninst✝² : Algebra F E\nA : IntermediateField F E\nL : Type v\ninst✝¹ : Field L\ninst✝ : Algebra F L\nf : AlgHom F L E\n⊢ Eq (Module.rank (Subtype fun x => Membership.mem (IntermediateField.comap f A) x) L) (A.relrank f.fieldRange)","decl":"theorem rank_comap {L : Type v} [Field L] [Algebra F L] (f : L →ₐ[F] E) :\n    Module.rank (A.comap f) L = relrank A f.fieldRange := by\n  simpa only [lift_id] using A.lift_rank_comap f\n\n"}
{"name":"IntermediateField.finrank_comap","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝⁴ : Field F\ninst✝³ : Field E\ninst✝² : Algebra F E\nL : Type w\ninst✝¹ : Field L\ninst✝ : Algebra F L\nA : IntermediateField F E\nf : AlgHom F L E\n⊢ Eq (Module.finrank (Subtype fun x => Membership.mem (IntermediateField.comap f A) x) L) (A.relfinrank f.fieldRange)","decl":"theorem finrank_comap (f : L →ₐ[F] E) : finrank (A.comap f) L = relfinrank A f.fieldRange := by\n  simpa using congr(toNat $(lift_rank_comap A f))\n\n"}
{"name":"IntermediateField.lift_relrank_comap","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝⁴ : Field F\ninst✝³ : Field E\ninst✝² : Algebra F E\nL : Type w\ninst✝¹ : Field L\ninst✝ : Algebra F L\nA : IntermediateField F E\nf : AlgHom F L E\nB : IntermediateField F L\n⊢ Eq (Cardinal.lift.{v, w} ((IntermediateField.comap f A).relrank B)) (Cardinal.lift.{w, v} (A.relrank (IntermediateField.map f B)))","decl":"theorem lift_relrank_comap (f : L →ₐ[F] E) (B : IntermediateField F L) :\n    Cardinal.lift.{v} (relrank (A.comap f) B) = Cardinal.lift.{w} (relrank A (B.map f)) :=\n  A.toSubfield.lift_relrank_comap f.toRingHom B.toSubfield\n\n"}
{"name":"IntermediateField.relrank_comap","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝⁴ : Field F\ninst✝³ : Field E\ninst✝² : Algebra F E\nA : IntermediateField F E\nL : Type v\ninst✝¹ : Field L\ninst✝ : Algebra F L\nf : AlgHom F L E\nB : IntermediateField F L\n⊢ Eq ((IntermediateField.comap f A).relrank B) (A.relrank (IntermediateField.map f B))","decl":"theorem relrank_comap {L : Type v} [Field L] [Algebra F L] (f : L →ₐ[F] E)\n    (B : IntermediateField F L) : relrank (A.comap f) B = relrank A (B.map f) := by\n  simpa only [lift_id] using A.lift_relrank_comap f B\n\n"}
{"name":"IntermediateField.relfinrank_comap","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝⁴ : Field F\ninst✝³ : Field E\ninst✝² : Algebra F E\nL : Type w\ninst✝¹ : Field L\ninst✝ : Algebra F L\nA : IntermediateField F E\nf : AlgHom F L E\nB : IntermediateField F L\n⊢ Eq ((IntermediateField.comap f A).relfinrank B) (A.relfinrank (IntermediateField.map f B))","decl":"theorem relfinrank_comap (f : L →ₐ[F] E) (B : IntermediateField F L) :\n    relfinrank (A.comap f) B = relfinrank A (B.map f) := by\n  simpa using congr(toNat $(lift_relrank_comap A f B))\n\n"}
{"name":"IntermediateField.lift_relrank_map_map","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝⁴ : Field F\ninst✝³ : Field E\ninst✝² : Algebra F E\nL : Type w\ninst✝¹ : Field L\ninst✝ : Algebra F L\nA B : IntermediateField F E\nf : AlgHom F E L\n⊢ Eq (Cardinal.lift.{v, w} ((IntermediateField.map f A).relrank (IntermediateField.map f B))) (Cardinal.lift.{w, v} (A.relrank B))","decl":"theorem lift_relrank_map_map (f : E →ₐ[F] L) :\n    Cardinal.lift.{v} (relrank (A.map f) (B.map f)) = Cardinal.lift.{w} (relrank A B) := by\n  rw [← lift_relrank_comap, comap_map]\n\n"}
{"name":"IntermediateField.relrank_map_map","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝⁴ : Field F\ninst✝³ : Field E\ninst✝² : Algebra F E\nA B : IntermediateField F E\nL : Type v\ninst✝¹ : Field L\ninst✝ : Algebra F L\nf : AlgHom F E L\n⊢ Eq ((IntermediateField.map f A).relrank (IntermediateField.map f B)) (A.relrank B)","decl":"theorem relrank_map_map {L : Type v} [Field L] [Algebra F L] (f : E →ₐ[F] L) :\n    relrank (A.map f) (B.map f) = relrank A B := by\n  simpa only [lift_id] using lift_relrank_map_map A B f\n\n"}
{"name":"IntermediateField.relfinrank_map_map","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝⁴ : Field F\ninst✝³ : Field E\ninst✝² : Algebra F E\nL : Type w\ninst✝¹ : Field L\ninst✝ : Algebra F L\nA B : IntermediateField F E\nf : AlgHom F E L\n⊢ Eq ((IntermediateField.map f A).relfinrank (IntermediateField.map f B)) (A.relfinrank B)","decl":"theorem relfinrank_map_map (f : E →ₐ[F] L) :\n    relfinrank (A.map f) (B.map f) = relfinrank A B := by\n  simpa using congr(toNat $(lift_relrank_map_map A B f))\n\n"}
{"name":"IntermediateField.lift_relrank_comap_comap_eq_lift_relrank_inf","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝⁴ : Field F\ninst✝³ : Field E\ninst✝² : Algebra F E\nL : Type w\ninst✝¹ : Field L\ninst✝ : Algebra F L\nA B : IntermediateField F E\nf : AlgHom F L E\n⊢ Eq (Cardinal.lift.{v, w} ((IntermediateField.comap f A).relrank (IntermediateField.comap f B))) (Cardinal.lift.{w, v} (A.relrank (Min.min B f.fieldRange)))","decl":"theorem lift_relrank_comap_comap_eq_lift_relrank_inf (f : L →ₐ[F] E) :\n    Cardinal.lift.{v} (relrank (A.comap f) (B.comap f)) =\n    Cardinal.lift.{w} (relrank A (B ⊓ f.fieldRange)) :=\n  A.toSubfield.lift_relrank_comap_comap_eq_lift_relrank_inf B.toSubfield f.toRingHom\n\n"}
{"name":"IntermediateField.relrank_comap_comap_eq_relrank_inf","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝⁴ : Field F\ninst✝³ : Field E\ninst✝² : Algebra F E\nA B : IntermediateField F E\nL : Type v\ninst✝¹ : Field L\ninst✝ : Algebra F L\nf : AlgHom F L E\n⊢ Eq ((IntermediateField.comap f A).relrank (IntermediateField.comap f B)) (A.relrank (Min.min B f.fieldRange))","decl":"theorem relrank_comap_comap_eq_relrank_inf\n    {L : Type v} [Field L] [Algebra F L] (f : L →ₐ[F] E) :\n    relrank (A.comap f) (B.comap f) = relrank A (B ⊓ f.fieldRange) := by\n  simpa only [lift_id] using lift_relrank_comap_comap_eq_lift_relrank_inf A B f\n\n"}
{"name":"IntermediateField.relfinrank_comap_comap_eq_relfinrank_inf","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝⁴ : Field F\ninst✝³ : Field E\ninst✝² : Algebra F E\nL : Type w\ninst✝¹ : Field L\ninst✝ : Algebra F L\nA B : IntermediateField F E\nf : AlgHom F L E\n⊢ Eq ((IntermediateField.comap f A).relfinrank (IntermediateField.comap f B)) (A.relfinrank (Min.min B f.fieldRange))","decl":"theorem relfinrank_comap_comap_eq_relfinrank_inf (f : L →ₐ[F] E) :\n    relfinrank (A.comap f) (B.comap f) = relfinrank A (B ⊓ f.fieldRange) := by\n  simpa using congr(toNat $(lift_relrank_comap_comap_eq_lift_relrank_inf A B f))\n\n"}
{"name":"IntermediateField.lift_relrank_comap_comap_eq_lift_relrank_of_le","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝⁴ : Field F\ninst✝³ : Field E\ninst✝² : Algebra F E\nL : Type w\ninst✝¹ : Field L\ninst✝ : Algebra F L\nA B : IntermediateField F E\nf : AlgHom F L E\nh : LE.le B f.fieldRange\n⊢ Eq (Cardinal.lift.{v, w} ((IntermediateField.comap f A).relrank (IntermediateField.comap f B))) (Cardinal.lift.{w, v} (A.relrank B))","decl":"theorem lift_relrank_comap_comap_eq_lift_relrank_of_le (f : L →ₐ[F] E) (h : B ≤ f.fieldRange) :\n    Cardinal.lift.{v} (relrank (A.comap f) (B.comap f)) = Cardinal.lift.{w} (relrank A B) := by\n  simpa only [inf_of_le_left h] using lift_relrank_comap_comap_eq_lift_relrank_inf A B f\n\n"}
{"name":"IntermediateField.relrank_comap_comap_eq_relrank_of_le","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝⁴ : Field F\ninst✝³ : Field E\ninst✝² : Algebra F E\nA B : IntermediateField F E\nL : Type v\ninst✝¹ : Field L\ninst✝ : Algebra F L\nf : AlgHom F L E\nh : LE.le B f.fieldRange\n⊢ Eq ((IntermediateField.comap f A).relrank (IntermediateField.comap f B)) (A.relrank B)","decl":"theorem relrank_comap_comap_eq_relrank_of_le\n    {L : Type v} [Field L] [Algebra F L] (f : L →ₐ[F] E) (h : B ≤ f.fieldRange) :\n    relrank (A.comap f) (B.comap f) = relrank A B := by\n  simpa only [lift_id] using lift_relrank_comap_comap_eq_lift_relrank_of_le A B f h\n\n"}
{"name":"IntermediateField.relfinrank_comap_comap_eq_relfinrank_of_le","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝⁴ : Field F\ninst✝³ : Field E\ninst✝² : Algebra F E\nL : Type w\ninst✝¹ : Field L\ninst✝ : Algebra F L\nA B : IntermediateField F E\nf : AlgHom F L E\nh : LE.le B f.fieldRange\n⊢ Eq ((IntermediateField.comap f A).relfinrank (IntermediateField.comap f B)) (A.relfinrank B)","decl":"theorem relfinrank_comap_comap_eq_relfinrank_of_le (f : L →ₐ[F] E) (h : B ≤ f.fieldRange) :\n    relfinrank (A.comap f) (B.comap f) = relfinrank A B := by\n  simpa using congr(toNat $(lift_relrank_comap_comap_eq_lift_relrank_of_le A B f h))\n\n"}
{"name":"IntermediateField.lift_relrank_comap_comap_eq_lift_relrank_of_surjective","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝⁴ : Field F\ninst✝³ : Field E\ninst✝² : Algebra F E\nL : Type w\ninst✝¹ : Field L\ninst✝ : Algebra F L\nA B : IntermediateField F E\nf : AlgHom F L E\nh : Function.Surjective ⇑f\n⊢ Eq (Cardinal.lift.{v, w} ((IntermediateField.comap f A).relrank (IntermediateField.comap f B))) (Cardinal.lift.{w, v} (A.relrank B))","decl":"theorem lift_relrank_comap_comap_eq_lift_relrank_of_surjective\n    (f : L →ₐ[F] E) (h : Function.Surjective f) :\n    Cardinal.lift.{v} (relrank (A.comap f) (B.comap f)) = Cardinal.lift.{w} (relrank A B) :=\n  lift_relrank_comap_comap_eq_lift_relrank_of_le A B f fun x _ ↦ h x\n\n"}
{"name":"IntermediateField.relrank_comap_comap_eq_relrank_of_surjective","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝⁴ : Field F\ninst✝³ : Field E\ninst✝² : Algebra F E\nA B : IntermediateField F E\nL : Type v\ninst✝¹ : Field L\ninst✝ : Algebra F L\nf : AlgHom F L E\nh : Function.Surjective ⇑f\n⊢ Eq ((IntermediateField.comap f A).relrank (IntermediateField.comap f B)) (A.relrank B)","decl":"theorem relrank_comap_comap_eq_relrank_of_surjective\n    {L : Type v} [Field L] [Algebra F L] (f : L →ₐ[F] E) (h : Function.Surjective f) :\n    relrank (A.comap f) (B.comap f) = relrank A B := by\n  simpa using lift_relrank_comap_comap_eq_lift_relrank_of_surjective A B f h\n\n"}
{"name":"IntermediateField.relfinrank_comap_comap_eq_relfinrank_of_surjective","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝⁴ : Field F\ninst✝³ : Field E\ninst✝² : Algebra F E\nL : Type w\ninst✝¹ : Field L\ninst✝ : Algebra F L\nA B : IntermediateField F E\nf : AlgHom F L E\nh : Function.Surjective ⇑f\n⊢ Eq ((IntermediateField.comap f A).relfinrank (IntermediateField.comap f B)) (A.relfinrank B)","decl":"theorem relfinrank_comap_comap_eq_relfinrank_of_surjective\n    (f : L →ₐ[F] E) (h : Function.Surjective f) :\n    relfinrank (A.comap f) (B.comap f) = relfinrank A B := by\n  simpa using congr(toNat $(lift_relrank_comap_comap_eq_lift_relrank_of_surjective A B f h))\n\n"}
{"name":"IntermediateField.relrank_mul_rank_top","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B : IntermediateField F E\nh : LE.le A B\n⊢ Eq (HMul.hMul (A.relrank B) (Module.rank (Subtype fun x => Membership.mem B x) E)) (Module.rank (Subtype fun x => Membership.mem A x) E)","decl":"variable {A B} in\ntheorem relrank_mul_rank_top (h : A ≤ B) : relrank A B * Module.rank B E = Module.rank A E :=\n  Subfield.relrank_mul_rank_top h\n\n"}
{"name":"IntermediateField.relfinrank_mul_finrank_top","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B : IntermediateField F E\nh : LE.le A B\n⊢ Eq (HMul.hMul (A.relfinrank B) (Module.finrank (Subtype fun x => Membership.mem B x) E)) (Module.finrank (Subtype fun x => Membership.mem A x) E)","decl":"variable {A B} in\ntheorem relfinrank_mul_finrank_top (h : A ≤ B) : relfinrank A B * finrank B E = finrank A E := by\n  simpa using congr(toNat $(relrank_mul_rank_top h))\n\n"}
{"name":"IntermediateField.rank_bot_mul_relrank","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B : IntermediateField F E\nh : LE.le A B\n⊢ Eq (HMul.hMul (Module.rank F (Subtype fun x => Membership.mem A x)) (A.relrank B)) (Module.rank F (Subtype fun x => Membership.mem B x))","decl":"variable {A B} in\ntheorem rank_bot_mul_relrank (h : A ≤ B) : Module.rank F A * relrank A B = Module.rank F B := by\n  rw [relrank_eq_rank_of_le h]\n  letI : Algebra A B := (inclusion h).toAlgebra\n  haveI : IsScalarTower F A B := IsScalarTower.of_algebraMap_eq' rfl\n  exact rank_mul_rank F A B\n\n"}
{"name":"IntermediateField.finrank_bot_mul_relfinrank","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B : IntermediateField F E\nh : LE.le A B\n⊢ Eq (HMul.hMul (Module.finrank F (Subtype fun x => Membership.mem A x)) (A.relfinrank B)) (Module.finrank F (Subtype fun x => Membership.mem B x))","decl":"variable {A B} in\ntheorem finrank_bot_mul_relfinrank (h : A ≤ B) : finrank F A * relfinrank A B = finrank F B := by\n  simpa using congr(toNat $(rank_bot_mul_relrank h))\n\n"}
{"name":"IntermediateField.relrank_dvd_rank_top_of_le","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B : IntermediateField F E\nh : LE.le A B\n⊢ Dvd.dvd (A.relrank B) (Module.rank (Subtype fun x => Membership.mem A x) E)","decl":"variable {A B} in\ntheorem relrank_dvd_rank_top_of_le (h : A ≤ B) : relrank A B ∣ Module.rank A E :=\n  dvd_of_mul_right_eq _ (relrank_mul_rank_top h)\n\n"}
{"name":"IntermediateField.relfinrank_dvd_finrank_top_of_le","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B : IntermediateField F E\nh : LE.le A B\n⊢ Dvd.dvd (A.relfinrank B) (Module.finrank (Subtype fun x => Membership.mem A x) E)","decl":"variable {A B} in\ntheorem relfinrank_dvd_finrank_top_of_le (h : A ≤ B) : relfinrank A B ∣ finrank A E :=\n  dvd_of_mul_right_eq _ (relfinrank_mul_finrank_top h)\n\n"}
{"name":"IntermediateField.relrank_dvd_rank_bot","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B : IntermediateField F E\n⊢ Dvd.dvd (A.relrank B) (Module.rank F (Subtype fun x => Membership.mem B x))","decl":"theorem relrank_dvd_rank_bot : relrank A B ∣ Module.rank F B :=\n  inf_relrank_right A B ▸ dvd_of_mul_left_eq _ (rank_bot_mul_relrank inf_le_right)\n\n"}
{"name":"IntermediateField.relfinrank_dvd_finrank_bot","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B : IntermediateField F E\n⊢ Dvd.dvd (A.relfinrank B) (Module.finrank F (Subtype fun x => Membership.mem B x))","decl":"theorem relfinrank_dvd_finrank_bot : relfinrank A B ∣ finrank F B :=\n  inf_relfinrank_right A B ▸ dvd_of_mul_left_eq _ (finrank_bot_mul_relfinrank inf_le_right)\n\n"}
{"name":"IntermediateField.relrank_mul_relrank","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B C : IntermediateField F E\nh1 : LE.le A B\nh2 : LE.le B C\n⊢ Eq (HMul.hMul (A.relrank B) (B.relrank C)) (A.relrank C)","decl":"variable {A B C} in\ntheorem relrank_mul_relrank (h1 : A ≤ B) (h2 : B ≤ C) :\n    relrank A B * relrank B C = relrank A C :=\n  Subfield.relrank_mul_relrank h1 h2\n\n"}
{"name":"IntermediateField.relfinrank_mul_relfinrank","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B C : IntermediateField F E\nh1 : LE.le A B\nh2 : LE.le B C\n⊢ Eq (HMul.hMul (A.relfinrank B) (B.relfinrank C)) (A.relfinrank C)","decl":"variable {A B C} in\ntheorem relfinrank_mul_relfinrank (h1 : A ≤ B) (h2 : B ≤ C) :\n    relfinrank A B * relfinrank B C = relfinrank A C := by\n  simpa using congr(toNat $(relrank_mul_relrank h1 h2))\n\n"}
{"name":"IntermediateField.relrank_inf_mul_relrank","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B C : IntermediateField F E\n⊢ Eq (HMul.hMul (A.relrank (Min.min B C)) (B.relrank C)) ((Min.min A B).relrank C)","decl":"theorem relrank_inf_mul_relrank : A.relrank (B ⊓ C) * B.relrank C = (A ⊓ B).relrank C :=\n  Subfield.relrank_inf_mul_relrank A.toSubfield B.toSubfield C.toSubfield\n\n"}
{"name":"IntermediateField.relfinrank_inf_mul_relfinrank","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B C : IntermediateField F E\n⊢ Eq (HMul.hMul (A.relfinrank (Min.min B C)) (B.relfinrank C)) ((Min.min A B).relfinrank C)","decl":"theorem relfinrank_inf_mul_relfinrank :\n    A.relfinrank (B ⊓ C) * B.relfinrank C = (A ⊓ B).relfinrank C := by\n  simpa using congr(toNat $(relrank_inf_mul_relrank A B C))\n\n"}
{"name":"IntermediateField.relrank_mul_relrank_eq_inf_relrank","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B C : IntermediateField F E\nh : LE.le B C\n⊢ Eq (HMul.hMul (A.relrank B) (B.relrank C)) ((Min.min A B).relrank C)","decl":"variable {B C} in\ntheorem relrank_mul_relrank_eq_inf_relrank (h : B ≤ C) :\n    relrank A B * relrank B C = (A ⊓ B).relrank C := by\n  simpa only [inf_of_le_left h] using relrank_inf_mul_relrank A B C\n\n"}
{"name":"IntermediateField.relfinrank_mul_relfinrank_eq_inf_relfinrank","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B C : IntermediateField F E\nh : LE.le B C\n⊢ Eq (HMul.hMul (A.relfinrank B) (B.relfinrank C)) ((Min.min A B).relfinrank C)","decl":"variable {B C} in\ntheorem relfinrank_mul_relfinrank_eq_inf_relfinrank (h : B ≤ C) :\n    relfinrank A B * relfinrank B C = (A ⊓ B).relfinrank C := by\n  simpa using congr(toNat $(relrank_mul_relrank_eq_inf_relrank A h))\n\n"}
{"name":"IntermediateField.relrank_inf_mul_relrank_of_le","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B C : IntermediateField F E\nh : LE.le A B\n⊢ Eq (HMul.hMul (A.relrank (Min.min B C)) (B.relrank C)) (A.relrank C)","decl":"variable {A B} in\ntheorem relrank_inf_mul_relrank_of_le (h : A ≤ B) :\n    A.relrank (B ⊓ C) * B.relrank C = A.relrank C := by\n  simpa only [inf_of_le_left h] using relrank_inf_mul_relrank A B C\n\n"}
{"name":"IntermediateField.relfinrank_inf_mul_relfinrank_of_le","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B C : IntermediateField F E\nh : LE.le A B\n⊢ Eq (HMul.hMul (A.relfinrank (Min.min B C)) (B.relfinrank C)) (A.relfinrank C)","decl":"variable {A B} in\ntheorem relfinrank_inf_mul_relfinrank_of_le (h : A ≤ B) :\n    A.relfinrank (B ⊓ C) * B.relfinrank C = A.relfinrank C := by\n  simpa using congr(toNat $(relrank_inf_mul_relrank_of_le C h))\n\n"}
{"name":"IntermediateField.relrank_top_left","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA : IntermediateField F E\n⊢ Eq (Top.top.relrank A) 1","decl":"@[simp]\ntheorem relrank_top_left : relrank ⊤ A = 1 := relrank_eq_one_of_le le_top\n\n"}
{"name":"IntermediateField.relfinrank_top_left","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA : IntermediateField F E\n⊢ Eq (Top.top.relfinrank A) 1","decl":"@[simp]\ntheorem relfinrank_top_left : relfinrank ⊤ A = 1 := relfinrank_eq_one_of_le le_top\n\n"}
{"name":"IntermediateField.relrank_top_right","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA : IntermediateField F E\n⊢ Eq (A.relrank Top.top) (Module.rank (Subtype fun x => Membership.mem A x) E)","decl":"@[simp]\ntheorem relrank_top_right : relrank A ⊤ = Module.rank A E := by\n  rw [← relrank_mul_rank_top (show A ≤ ⊤ from le_top), IntermediateField.rank_top, mul_one]\n\n"}
{"name":"IntermediateField.relfinrank_top_right","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA : IntermediateField F E\n⊢ Eq (A.relfinrank Top.top) (Module.finrank (Subtype fun x => Membership.mem A x) E)","decl":"@[simp]\ntheorem relfinrank_top_right : relfinrank A ⊤ = finrank A E := by\n  simp [relfinrank_eq_toNat_relrank, finrank]\n\n"}
{"name":"IntermediateField.relrank_bot_left","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA : IntermediateField F E\n⊢ Eq (Bot.bot.relrank A) (Module.rank F (Subtype fun x => Membership.mem A x))","decl":"@[simp]\ntheorem relrank_bot_left : relrank ⊥ A = Module.rank F A := by\n  rw [← rank_bot_mul_relrank (show ⊥ ≤ A from bot_le), IntermediateField.rank_bot, one_mul]\n\n"}
{"name":"IntermediateField.relfinrank_bot_left","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA : IntermediateField F E\n⊢ Eq (Bot.bot.relfinrank A) (Module.finrank F (Subtype fun x => Membership.mem A x))","decl":"@[simp]\ntheorem relfinrank_bot_left : relfinrank ⊥ A = finrank F A := by\n  simp [relfinrank_eq_toNat_relrank, finrank]\n\n"}
{"name":"IntermediateField.relrank_bot_right","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA : IntermediateField F E\n⊢ Eq (A.relrank Bot.bot) 1","decl":"@[simp]\ntheorem relrank_bot_right : relrank A ⊥ = 1 := relrank_eq_one_of_le bot_le\n\n"}
{"name":"IntermediateField.relfinrank_bot_right","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA : IntermediateField F E\n⊢ Eq (A.relfinrank Bot.bot) 1","decl":"@[simp]\ntheorem relfinrank_bot_right : relfinrank A ⊥ = 1 := relfinrank_eq_one_of_le bot_le\n\n"}
{"name":"IntermediateField.relrank_dvd_of_le_left","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B C : IntermediateField F E\nh : LE.le A B\n⊢ Dvd.dvd (B.relrank C) (A.relrank C)","decl":"variable {A B} in\ntheorem relrank_dvd_of_le_left (h : A ≤ B) : B.relrank C ∣ A.relrank C :=\n  dvd_of_mul_left_eq _ (relrank_inf_mul_relrank_of_le C h)\n\n"}
{"name":"IntermediateField.relfinrank_dvd_of_le_left","module":"Mathlib.FieldTheory.Relrank","initialProofState":"F : Type u\nE : Type v\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nA B C : IntermediateField F E\nh : LE.le A B\n⊢ Dvd.dvd (B.relfinrank C) (A.relfinrank C)","decl":"variable {A B} in\ntheorem relfinrank_dvd_of_le_left (h : A ≤ B) : B.relfinrank C ∣ A.relfinrank C :=\n  dvd_of_mul_left_eq _ (relfinrank_inf_mul_relfinrank_of_le C h)\n\n"}
