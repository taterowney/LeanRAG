{"name":"isometry_iff_nndist_eq","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nf : α → β\n⊢ Iff (Isometry f) (∀ (x y : α), Eq (NNDist.nndist (f x) (f y)) (NNDist.nndist x y))","decl":"/-- On pseudometric spaces, a map is an isometry if and only if it preserves nonnegative\ndistances. -/\ntheorem isometry_iff_nndist_eq [PseudoMetricSpace α] [PseudoMetricSpace β] {f : α → β} :\n    Isometry f ↔ ∀ x y, nndist (f x) (f y) = nndist x y := by\n  simp only [Isometry, edist_nndist, ENNReal.coe_inj]\n\n"}
{"name":"isometry_iff_dist_eq","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nf : α → β\n⊢ Iff (Isometry f) (∀ (x y : α), Eq (Dist.dist (f x) (f y)) (Dist.dist x y))","decl":"/-- On pseudometric spaces, a map is an isometry if and only if it preserves distances. -/\ntheorem isometry_iff_dist_eq [PseudoMetricSpace α] [PseudoMetricSpace β] {f : α → β} :\n    Isometry f ↔ ∀ x y, dist (f x) (f y) = dist x y := by\n  simp only [isometry_iff_nndist_eq, ← coe_nndist, NNReal.coe_inj]\n\n"}
{"name":"Isometry.dist_eq","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nf : α → β\na✝ : Isometry f\nx y : α\n⊢ Eq (Dist.dist (f x) (f y)) (Dist.dist x y)","decl":"/-- An isometry preserves distances. -/\nalias ⟨Isometry.dist_eq, _⟩ := isometry_iff_dist_eq\n\n"}
{"name":"Isometry.of_dist_eq","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nf : α → β\na✝ : ∀ (x y : α), Eq (Dist.dist (f x) (f y)) (Dist.dist x y)\n⊢ Isometry f","decl":"/-- A map that preserves distances is an isometry -/\nalias ⟨_, Isometry.of_dist_eq⟩ := isometry_iff_dist_eq\n\n"}
{"name":"Isometry.nndist_eq","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nf : α → β\na✝ : Isometry f\nx y : α\n⊢ Eq (NNDist.nndist (f x) (f y)) (NNDist.nndist x y)","decl":"/-- An isometry preserves non-negative distances. -/\nalias ⟨Isometry.nndist_eq, _⟩ := isometry_iff_nndist_eq\n\n"}
{"name":"Isometry.of_nndist_eq","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nf : α → β\na✝ : ∀ (x y : α), Eq (NNDist.nndist (f x) (f y)) (NNDist.nndist x y)\n⊢ Isometry f","decl":"/-- A map that preserves non-negative distances is an isometry. -/\nalias ⟨_, Isometry.of_nndist_eq⟩ := isometry_iff_nndist_eq\n\n"}
{"name":"Isometry.edist_eq","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nhf : Isometry f\nx y : α\n⊢ Eq (EDist.edist (f x) (f y)) (EDist.edist x y)","decl":"/-- An isometry preserves edistances. -/\ntheorem edist_eq (hf : Isometry f) (x y : α) : edist (f x) (f y) = edist x y :=\n  hf x y\n\n"}
{"name":"Isometry.lipschitz","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nh : Isometry f\n⊢ LipschitzWith 1 f","decl":"theorem lipschitz (h : Isometry f) : LipschitzWith 1 f :=\n  LipschitzWith.of_edist_le fun x y => (h x y).le\n\n"}
{"name":"Isometry.antilipschitz","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nh : Isometry f\n⊢ AntilipschitzWith 1 f","decl":"theorem antilipschitz (h : Isometry f) : AntilipschitzWith 1 f := fun x y => by\n  simp only [h x y, ENNReal.coe_one, one_mul, le_refl]\n\n"}
{"name":"isometry_subsingleton","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\nf : α → β\ninst✝ : Subsingleton α\n⊢ Isometry f","decl":"/-- Any map on a subsingleton is an isometry -/\n@[nontriviality]\ntheorem _root_.isometry_subsingleton [Subsingleton α] : Isometry f := fun x y => by\n  rw [Subsingleton.elim x y]; simp\n\n"}
{"name":"isometry_id","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\ninst✝ : PseudoEMetricSpace α\n⊢ Isometry id","decl":"/-- The identity is an isometry -/\ntheorem _root_.isometry_id : Isometry (id : α → α) := fun _ _ => rfl\n\n"}
{"name":"Isometry.prod_map","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\nγ : Type w\ninst✝³ : PseudoEMetricSpace α\ninst✝² : PseudoEMetricSpace β\ninst✝¹ : PseudoEMetricSpace γ\nδ : Type u_2\ninst✝ : PseudoEMetricSpace δ\nf : α → β\ng : γ → δ\nhf : Isometry f\nhg : Isometry g\n⊢ Isometry (Prod.map f g)","decl":"theorem prod_map {δ} [PseudoEMetricSpace δ] {f : α → β} {g : γ → δ} (hf : Isometry f)\n    (hg : Isometry g) : Isometry (Prod.map f g) := fun x y => by\n  simp only [Prod.edist_eq, Prod.map_fst, hf.edist_eq, Prod.map_snd, hg.edist_eq]\n\n"}
{"name":"Isometry.piMap","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"ι : Type u_4\ninst✝² : Fintype ι\nα : ι → Type u_2\nβ : ι → Type u_3\ninst✝¹ : (i : ι) → PseudoEMetricSpace (α i)\ninst✝ : (i : ι) → PseudoEMetricSpace (β i)\nf : (i : ι) → α i → β i\nhf : ∀ (i : ι), Isometry (f i)\n⊢ Isometry (Pi.map f)","decl":"protected theorem piMap {ι} [Fintype ι] {α β : ι → Type*} [∀ i, PseudoEMetricSpace (α i)]\n    [∀ i, PseudoEMetricSpace (β i)] (f : ∀ i, α i → β i) (hf : ∀ i, Isometry (f i)) :\n    Isometry (Pi.map f) := fun x y => by\n  simp only [edist_pi_def, (hf _).edist_eq, Pi.map_apply]\n\n"}
{"name":"isometry_dcomp","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"ι : Type u_4\ninst✝² : Fintype ι\nα : ι → Type u_2\nβ : ι → Type u_3\ninst✝¹ : (i : ι) → PseudoEMetricSpace (α i)\ninst✝ : (i : ι) → PseudoEMetricSpace (β i)\nf : (i : ι) → α i → β i\nhf : ∀ (i : ι), Isometry (f i)\n⊢ Isometry (Pi.map f)","decl":"@[deprecated (since := \"2024-10-06\")] alias _root_.isometry_dcomp := Isometry.piMap\n\n"}
{"name":"Isometry.comp","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\nγ : Type w\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\ninst✝ : PseudoEMetricSpace γ\ng : β → γ\nf : α → β\nhg : Isometry g\nhf : Isometry f\n⊢ Isometry (Function.comp g f)","decl":"/-- The composition of isometries is an isometry. -/\ntheorem comp {g : β → γ} {f : α → β} (hg : Isometry g) (hf : Isometry f) : Isometry (g ∘ f) :=\n  fun _ _ => (hg _ _).trans (hf _ _)\n\n"}
{"name":"Isometry.uniformContinuous","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nhf : Isometry f\n⊢ UniformContinuous f","decl":"/-- An isometry from a metric space is a uniform continuous map -/\nprotected theorem uniformContinuous (hf : Isometry f) : UniformContinuous f :=\n  hf.lipschitz.uniformContinuous\n\n"}
{"name":"Isometry.isUniformInducing","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nhf : Isometry f\n⊢ IsUniformInducing f","decl":"/-- An isometry from a metric space is a uniform inducing map -/\ntheorem isUniformInducing (hf : Isometry f) : IsUniformInducing f :=\n  hf.antilipschitz.isUniformInducing hf.uniformContinuous\n\n"}
{"name":"Isometry.uniformInducing","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nhf : Isometry f\n⊢ IsUniformInducing f","decl":"@[deprecated (since := \"2024-10-05\")]\nalias uniformInducing := isUniformInducing\n\n"}
{"name":"Isometry.tendsto_nhds_iff","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nι : Type u_2\nf : α → β\ng : ι → α\na : Filter ι\nb : α\nhf : Isometry f\n⊢ Iff (Filter.Tendsto g a (nhds b)) (Filter.Tendsto (Function.comp f g) a (nhds (f b)))","decl":"theorem tendsto_nhds_iff {ι : Type*} {f : α → β} {g : ι → α} {a : Filter ι} {b : α}\n    (hf : Isometry f) : Filter.Tendsto g a (𝓝 b) ↔ Filter.Tendsto (f ∘ g) a (𝓝 (f b)) :=\n  hf.isUniformInducing.isInducing.tendsto_nhds_iff\n\n"}
{"name":"Isometry.continuous","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nhf : Isometry f\n⊢ Continuous f","decl":"/-- An isometry is continuous. -/\nprotected theorem continuous (hf : Isometry f) : Continuous f :=\n  hf.lipschitz.continuous\n\n"}
{"name":"Isometry.right_inv","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\ng : β → α\nh : Isometry f\nhg : Function.RightInverse g f\n⊢ Isometry g","decl":"/-- The right inverse of an isometry is an isometry. -/\ntheorem right_inv {f : α → β} {g : β → α} (h : Isometry f) (hg : RightInverse g f) : Isometry g :=\n  fun x y => by rw [← h, hg _, hg _]\n\n"}
{"name":"Isometry.preimage_emetric_closedBall","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nh : Isometry f\nx : α\nr : ENNReal\n⊢ Eq (Set.preimage f (EMetric.closedBall (f x) r)) (EMetric.closedBall x r)","decl":"theorem preimage_emetric_closedBall (h : Isometry f) (x : α) (r : ℝ≥0∞) :\n    f ⁻¹' EMetric.closedBall (f x) r = EMetric.closedBall x r := by\n  ext y\n  simp [h.edist_eq]\n\n"}
{"name":"Isometry.preimage_emetric_ball","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nh : Isometry f\nx : α\nr : ENNReal\n⊢ Eq (Set.preimage f (EMetric.ball (f x) r)) (EMetric.ball x r)","decl":"theorem preimage_emetric_ball (h : Isometry f) (x : α) (r : ℝ≥0∞) :\n    f ⁻¹' EMetric.ball (f x) r = EMetric.ball x r := by\n  ext y\n  simp [h.edist_eq]\n\n"}
{"name":"Isometry.ediam_image","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nhf : Isometry f\ns : Set α\n⊢ Eq (EMetric.diam (Set.image f s)) (EMetric.diam s)","decl":"/-- Isometries preserve the diameter in pseudoemetric spaces. -/\ntheorem ediam_image (hf : Isometry f) (s : Set α) : EMetric.diam (f '' s) = EMetric.diam s :=\n  eq_of_forall_ge_iff fun d => by simp only [EMetric.diam_le_iff, forall_mem_image, hf.edist_eq]\n\n"}
{"name":"Isometry.ediam_range","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nhf : Isometry f\n⊢ Eq (EMetric.diam (Set.range f)) (EMetric.diam Set.univ)","decl":"theorem ediam_range (hf : Isometry f) : EMetric.diam (range f) = EMetric.diam (univ : Set α) := by\n  rw [← image_univ]\n  exact hf.ediam_image univ\n\n"}
{"name":"Isometry.mapsTo_emetric_ball","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nhf : Isometry f\nx : α\nr : ENNReal\n⊢ Set.MapsTo f (EMetric.ball x r) (EMetric.ball (f x) r)","decl":"theorem mapsTo_emetric_ball (hf : Isometry f) (x : α) (r : ℝ≥0∞) :\n    MapsTo f (EMetric.ball x r) (EMetric.ball (f x) r) :=\n  (hf.preimage_emetric_ball x r).ge\n\n"}
{"name":"Isometry.mapsTo_emetric_closedBall","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nhf : Isometry f\nx : α\nr : ENNReal\n⊢ Set.MapsTo f (EMetric.closedBall x r) (EMetric.closedBall (f x) r)","decl":"theorem mapsTo_emetric_closedBall (hf : Isometry f) (x : α) (r : ℝ≥0∞) :\n    MapsTo f (EMetric.closedBall x r) (EMetric.closedBall (f x) r) :=\n  (hf.preimage_emetric_closedBall x r).ge\n\n"}
{"name":"isometry_subtype_coe","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\ninst✝ : PseudoEMetricSpace α\ns : Set α\n⊢ Isometry Subtype.val","decl":"/-- The injection from a subtype is an isometry -/\ntheorem _root_.isometry_subtype_coe {s : Set α} : Isometry ((↑) : s → α) := fun _ _ => rfl\n\n"}
{"name":"Isometry.comp_continuousOn_iff","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\nf : α → β\nγ : Type u_2\ninst✝ : TopologicalSpace γ\nhf : Isometry f\ng : γ → α\ns : Set γ\n⊢ Iff (ContinuousOn (Function.comp f g) s) (ContinuousOn g s)","decl":"theorem comp_continuousOn_iff {γ} [TopologicalSpace γ] (hf : Isometry f) {g : γ → α} {s : Set γ} :\n    ContinuousOn (f ∘ g) s ↔ ContinuousOn g s :=\n  hf.isUniformInducing.isInducing.continuousOn_iff.symm\n\n"}
{"name":"Isometry.comp_continuous_iff","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\nf : α → β\nγ : Type u_2\ninst✝ : TopologicalSpace γ\nhf : Isometry f\ng : γ → α\n⊢ Iff (Continuous (Function.comp f g)) (Continuous g)","decl":"theorem comp_continuous_iff {γ} [TopologicalSpace γ] (hf : Isometry f) {g : γ → α} :\n    Continuous (f ∘ g) ↔ Continuous g :=\n  hf.isUniformInducing.isInducing.continuous_iff.symm\n\n"}
{"name":"Isometry.injective","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : EMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nh : Isometry f\n⊢ Function.Injective f","decl":"/-- An isometry from an emetric space is injective -/\nprotected theorem injective (h : Isometry f) : Injective f :=\n  h.antilipschitz.injective\n\n"}
{"name":"Isometry.isUniformEmbedding","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : EMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nhf : Isometry f\n⊢ IsUniformEmbedding f","decl":"/-- An isometry from an emetric space is a uniform embedding -/\nlemma isUniformEmbedding (hf : Isometry f) : IsUniformEmbedding f :=\n  hf.antilipschitz.isUniformEmbedding hf.lipschitz.uniformContinuous\n\n"}
{"name":"Isometry.uniformEmbedding","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : EMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nhf : Isometry f\n⊢ IsUniformEmbedding f","decl":"@[deprecated (since := \"2024-10-01\")] alias uniformEmbedding := isUniformEmbedding\n\n"}
{"name":"Isometry.isEmbedding","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : EMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nhf : Isometry f\n⊢ Topology.IsEmbedding f","decl":"/-- An isometry from an emetric space is an embedding -/\ntheorem isEmbedding (hf : Isometry f) : IsEmbedding f := hf.isUniformEmbedding.isEmbedding\n\n"}
{"name":"Isometry.embedding","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : EMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nhf : Isometry f\n⊢ Topology.IsEmbedding f","decl":"@[deprecated (since := \"2024-10-26\")]\nalias embedding := isEmbedding\n\n"}
{"name":"Isometry.isClosedEmbedding","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nγ : Type w\ninst✝² : EMetricSpace α\ninst✝¹ : CompleteSpace α\ninst✝ : EMetricSpace γ\nf : α → γ\nhf : Isometry f\n⊢ Topology.IsClosedEmbedding f","decl":"/-- An isometry from a complete emetric space is a closed embedding -/\ntheorem isClosedEmbedding [CompleteSpace α] [EMetricSpace γ] {f : α → γ} (hf : Isometry f) :\n    IsClosedEmbedding f :=\n  hf.antilipschitz.isClosedEmbedding hf.lipschitz.uniformContinuous\n\n"}
{"name":"Isometry.closedEmbedding","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nγ : Type w\ninst✝² : EMetricSpace α\ninst✝¹ : CompleteSpace α\ninst✝ : EMetricSpace γ\nf : α → γ\nhf : Isometry f\n⊢ Topology.IsClosedEmbedding f","decl":"@[deprecated (since := \"2024-10-20\")]\nalias closedEmbedding := isClosedEmbedding\n\n"}
{"name":"Isometry.diam_image","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nf : α → β\nhf : Isometry f\ns : Set α\n⊢ Eq (Metric.diam (Set.image f s)) (Metric.diam s)","decl":"/-- An isometry preserves the diameter in pseudometric spaces. -/\ntheorem diam_image (hf : Isometry f) (s : Set α) : Metric.diam (f '' s) = Metric.diam s := by\n  rw [Metric.diam, Metric.diam, hf.ediam_image]\n\n"}
{"name":"Isometry.diam_range","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nf : α → β\nhf : Isometry f\n⊢ Eq (Metric.diam (Set.range f)) (Metric.diam Set.univ)","decl":"theorem diam_range (hf : Isometry f) : Metric.diam (range f) = Metric.diam (univ : Set α) := by\n  rw [← image_univ]\n  exact hf.diam_image univ\n\n"}
{"name":"Isometry.preimage_setOf_dist","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nf : α → β\nhf : Isometry f\nx : α\np : Real → Prop\n⊢ Eq (Set.preimage f (setOf fun y => p (Dist.dist y (f x)))) (setOf fun y => p (Dist.dist y x))","decl":"theorem preimage_setOf_dist (hf : Isometry f) (x : α) (p : ℝ → Prop) :\n    f ⁻¹' { y | p (dist y (f x)) } = { y | p (dist y x) } := by\n  ext y\n  simp [hf.dist_eq]\n\n"}
{"name":"Isometry.preimage_closedBall","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nf : α → β\nhf : Isometry f\nx : α\nr : Real\n⊢ Eq (Set.preimage f (Metric.closedBall (f x) r)) (Metric.closedBall x r)","decl":"theorem preimage_closedBall (hf : Isometry f) (x : α) (r : ℝ) :\n    f ⁻¹' Metric.closedBall (f x) r = Metric.closedBall x r :=\n  hf.preimage_setOf_dist x (· ≤ r)\n\n"}
{"name":"Isometry.preimage_ball","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nf : α → β\nhf : Isometry f\nx : α\nr : Real\n⊢ Eq (Set.preimage f (Metric.ball (f x) r)) (Metric.ball x r)","decl":"theorem preimage_ball (hf : Isometry f) (x : α) (r : ℝ) :\n    f ⁻¹' Metric.ball (f x) r = Metric.ball x r :=\n  hf.preimage_setOf_dist x (· < r)\n\n"}
{"name":"Isometry.preimage_sphere","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nf : α → β\nhf : Isometry f\nx : α\nr : Real\n⊢ Eq (Set.preimage f (Metric.sphere (f x) r)) (Metric.sphere x r)","decl":"theorem preimage_sphere (hf : Isometry f) (x : α) (r : ℝ) :\n    f ⁻¹' Metric.sphere (f x) r = Metric.sphere x r :=\n  hf.preimage_setOf_dist x (· = r)\n\n"}
{"name":"Isometry.mapsTo_ball","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nf : α → β\nhf : Isometry f\nx : α\nr : Real\n⊢ Set.MapsTo f (Metric.ball x r) (Metric.ball (f x) r)","decl":"theorem mapsTo_ball (hf : Isometry f) (x : α) (r : ℝ) :\n    MapsTo f (Metric.ball x r) (Metric.ball (f x) r) :=\n  (hf.preimage_ball x r).ge\n\n"}
{"name":"Isometry.mapsTo_sphere","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nf : α → β\nhf : Isometry f\nx : α\nr : Real\n⊢ Set.MapsTo f (Metric.sphere x r) (Metric.sphere (f x) r)","decl":"theorem mapsTo_sphere (hf : Isometry f) (x : α) (r : ℝ) :\n    MapsTo f (Metric.sphere x r) (Metric.sphere (f x) r) :=\n  (hf.preimage_sphere x r).ge\n\n"}
{"name":"Isometry.mapsTo_closedBall","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nf : α → β\nhf : Isometry f\nx : α\nr : Real\n⊢ Set.MapsTo f (Metric.closedBall x r) (Metric.closedBall (f x) r)","decl":"theorem mapsTo_closedBall (hf : Isometry f) (x : α) (r : ℝ) :\n    MapsTo f (Metric.closedBall x r) (Metric.closedBall (f x) r) :=\n  (hf.preimage_closedBall x r).ge\n\n"}
{"name":"IsUniformEmbedding.to_isometry","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : UniformSpace α\ninst✝ : MetricSpace β\nf : α → β\nh : IsUniformEmbedding f\n⊢ Isometry f","decl":"/-- A uniform embedding from a uniform space to a metric space is an isometry with respect to the\ninduced metric space structure on the source space. -/\ntheorem IsUniformEmbedding.to_isometry {α β} [UniformSpace α] [MetricSpace β] {f : α → β}\n    (h : IsUniformEmbedding f) : (letI := h.comapMetricSpace f; Isometry f) :=\n  let _ := h.comapMetricSpace f\n  Isometry.of_dist_eq fun _ _ => rfl\n\n"}
{"name":"UniformEmbedding.to_isometry","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : UniformSpace α\ninst✝ : MetricSpace β\nf : α → β\nh : IsUniformEmbedding f\n⊢ Isometry f","decl":"@[deprecated (since := \"2024-10-01\")]\nalias UniformEmbedding.to_isometry := IsUniformEmbedding.to_isometry\n\n"}
{"name":"Topology.IsEmbedding.to_isometry","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : TopologicalSpace α\ninst✝ : MetricSpace β\nf : α → β\nh : Topology.IsEmbedding f\n⊢ Isometry f","decl":"/-- An embedding from a topological space to a metric space is an isometry with respect to the\ninduced metric space structure on the source space. -/\ntheorem Topology.IsEmbedding.to_isometry {α β} [TopologicalSpace α] [MetricSpace β] {f : α → β}\n    (h : IsEmbedding f) : (letI := h.comapMetricSpace f; Isometry f) :=\n  let _ := h.comapMetricSpace f\n  Isometry.of_dist_eq fun _ _ => rfl\n\n"}
{"name":"Embedding.to_isometry","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : TopologicalSpace α\ninst✝ : MetricSpace β\nf : α → β\nh : Topology.IsEmbedding f\n⊢ Isometry f","decl":"@[deprecated (since := \"2024-10-26\")]\nalias Embedding.to_isometry := IsEmbedding.to_isometry\n\n"}
{"name":"PseudoEMetricSpace.isometry_induced","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\nf : α → β\nm : PseudoEMetricSpace β\n⊢ Isometry f","decl":"theorem PseudoEMetricSpace.isometry_induced (f : α → β) [m : PseudoEMetricSpace β] :\n    letI := m.induced f; Isometry f := fun _ _ ↦ rfl\n\n"}
{"name":"PsuedoMetricSpace.isometry_induced","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\nf : α → β\nm : PseudoMetricSpace β\n⊢ Isometry f","decl":"theorem PsuedoMetricSpace.isometry_induced (f : α → β) [m : PseudoMetricSpace β] :\n    letI := m.induced f; Isometry f := fun _ _ ↦ rfl\n\n"}
{"name":"EMetricSpace.isometry_induced","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\nf : α → β\nhf : Function.Injective f\nm : EMetricSpace β\n⊢ Isometry f","decl":"theorem EMetricSpace.isometry_induced (f : α → β) (hf : f.Injective) [m : EMetricSpace β] :\n    letI := m.induced f hf; Isometry f := fun _ _ ↦ rfl\n\n"}
{"name":"MetricSpace.isometry_induced","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\nf : α → β\nhf : Function.Injective f\nm : MetricSpace β\n⊢ Isometry f","decl":"theorem MetricSpace.isometry_induced (f : α → β) (hf : f.Injective) [m : MetricSpace β] :\n    letI := m.induced f hf; Isometry f := fun _ _ ↦ rfl\n\n-- such a bijection need not exist\n"}
{"name":"IsometryEquiv.isometry_toFun","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nself : IsometryEquiv α β\n⊢ Isometry self.toFun","decl":"/-- `α` and `β` are isometric if there is an isometric bijection between them. -/\nstructure IsometryEquiv (α : Type u) (β : Type v) [PseudoEMetricSpace α] [PseudoEMetricSpace β]\n    extends α ≃ β where\n  isometry_toFun : Isometry toFun\n\n"}
{"name":"IsometryEquiv.mk.sizeOf_spec","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝³ : PseudoEMetricSpace α\ninst✝² : PseudoEMetricSpace β\ninst✝¹ : SizeOf α\ninst✝ : SizeOf β\ntoEquiv : Equiv α β\nisometry_toFun : Isometry toEquiv.toFun\n⊢ Eq (SizeOf.sizeOf { toEquiv := toEquiv, isometry_toFun := isometry_toFun }) (HAdd.hAdd 1 (SizeOf.sizeOf toEquiv))","decl":"/-- `α` and `β` are isometric if there is an isometric bijection between them. -/\nstructure IsometryEquiv (α : Type u) (β : Type v) [PseudoEMetricSpace α] [PseudoEMetricSpace β]\n    extends α ≃ β where\n  isometry_toFun : Isometry toFun\n\n"}
{"name":"IsometryEquiv.mk.inj","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\ntoEquiv✝ : Equiv α β\nisometry_toFun✝ : Isometry toEquiv✝.toFun\ntoEquiv : Equiv α β\nisometry_toFun : Isometry toEquiv.toFun\nx✝ : Eq { toEquiv := toEquiv✝, isometry_toFun := isometry_toFun✝ } { toEquiv := toEquiv, isometry_toFun := isometry_toFun }\n⊢ Eq toEquiv✝ toEquiv","decl":"/-- `α` and `β` are isometric if there is an isometric bijection between them. -/\nstructure IsometryEquiv (α : Type u) (β : Type v) [PseudoEMetricSpace α] [PseudoEMetricSpace β]\n    extends α ≃ β where\n  isometry_toFun : Isometry toFun\n\n"}
{"name":"IsometryEquiv.mk.injEq","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\ntoEquiv✝ : Equiv α β\nisometry_toFun✝ : Isometry toEquiv✝.toFun\ntoEquiv : Equiv α β\nisometry_toFun : Isometry toEquiv.toFun\n⊢ Eq (Eq { toEquiv := toEquiv✝, isometry_toFun := isometry_toFun✝ } { toEquiv := toEquiv, isometry_toFun := isometry_toFun }) (Eq toEquiv✝ toEquiv)","decl":"/-- `α` and `β` are isometric if there is an isometric bijection between them. -/\nstructure IsometryEquiv (α : Type u) (β : Type v) [PseudoEMetricSpace α] [PseudoEMetricSpace β]\n    extends α ≃ β where\n  isometry_toFun : Isometry toFun\n\n"}
{"name":"IsometryEquiv.toEquiv_injective","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\n⊢ Function.Injective IsometryEquiv.toEquiv","decl":"theorem toEquiv_injective : Injective (toEquiv : (α ≃ᵢ β) → (α ≃ β))\n  | ⟨_, _⟩, ⟨_, _⟩, rfl => rfl\n\n"}
{"name":"IsometryEquiv.toEquiv_inj","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\ne₁ e₂ : IsometryEquiv α β\n⊢ Iff (Eq e₁.toEquiv e₂.toEquiv) (Eq e₁ e₂)","decl":"@[simp] theorem toEquiv_inj {e₁ e₂ : α ≃ᵢ β} : e₁.toEquiv = e₂.toEquiv ↔ e₁ = e₂ :=\n  toEquiv_injective.eq_iff\n\n"}
{"name":"IsometryEquiv.coe_eq_toEquiv","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\na : α\n⊢ Eq (h a) (h.toEquiv a)","decl":"theorem coe_eq_toEquiv (h : α ≃ᵢ β) (a : α) : h a = h.toEquiv a := rfl\n\n"}
{"name":"IsometryEquiv.coe_toEquiv","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\n⊢ Eq ⇑h.toEquiv ⇑h","decl":"@[simp] theorem coe_toEquiv (h : α ≃ᵢ β) : ⇑h.toEquiv = h := rfl\n\n"}
{"name":"IsometryEquiv.coe_mk","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\ne : Equiv α β\nh : Isometry e.toFun\n⊢ Eq ⇑{ toEquiv := e, isometry_toFun := h } ⇑e","decl":"@[simp] theorem coe_mk (e : α ≃ β) (h) : ⇑(mk e h) = e := rfl\n\n"}
{"name":"IsometryEquiv.isometry","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\n⊢ Isometry ⇑h","decl":"protected theorem isometry (h : α ≃ᵢ β) : Isometry h :=\n  h.isometry_toFun\n\n"}
{"name":"IsometryEquiv.bijective","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\n⊢ Function.Bijective ⇑h","decl":"protected theorem bijective (h : α ≃ᵢ β) : Bijective h :=\n  h.toEquiv.bijective\n\n"}
{"name":"IsometryEquiv.injective","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\n⊢ Function.Injective ⇑h","decl":"protected theorem injective (h : α ≃ᵢ β) : Injective h :=\n  h.toEquiv.injective\n\n"}
{"name":"IsometryEquiv.surjective","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\n⊢ Function.Surjective ⇑h","decl":"protected theorem surjective (h : α ≃ᵢ β) : Surjective h :=\n  h.toEquiv.surjective\n\n"}
{"name":"IsometryEquiv.edist_eq","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\nx y : α\n⊢ Eq (EDist.edist (h x) (h y)) (EDist.edist x y)","decl":"protected theorem edist_eq (h : α ≃ᵢ β) (x y : α) : edist (h x) (h y) = edist x y :=\n  h.isometry.edist_eq x y\n\n"}
{"name":"IsometryEquiv.dist_eq","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nh : IsometryEquiv α β\nx y : α\n⊢ Eq (Dist.dist (h x) (h y)) (Dist.dist x y)","decl":"protected theorem dist_eq {α β : Type*} [PseudoMetricSpace α] [PseudoMetricSpace β] (h : α ≃ᵢ β)\n    (x y : α) : dist (h x) (h y) = dist x y :=\n  h.isometry.dist_eq x y\n\n"}
{"name":"IsometryEquiv.nndist_eq","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nh : IsometryEquiv α β\nx y : α\n⊢ Eq (NNDist.nndist (h x) (h y)) (NNDist.nndist x y)","decl":"protected theorem nndist_eq {α β : Type*} [PseudoMetricSpace α] [PseudoMetricSpace β] (h : α ≃ᵢ β)\n    (x y : α) : nndist (h x) (h y) = nndist x y :=\n  h.isometry.nndist_eq x y\n\n"}
{"name":"IsometryEquiv.continuous","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\n⊢ Continuous ⇑h","decl":"protected theorem continuous (h : α ≃ᵢ β) : Continuous h :=\n  h.isometry.continuous\n\n"}
{"name":"IsometryEquiv.ediam_image","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\ns : Set α\n⊢ Eq (EMetric.diam (Set.image (⇑h) s)) (EMetric.diam s)","decl":"@[simp]\ntheorem ediam_image (h : α ≃ᵢ β) (s : Set α) : EMetric.diam (h '' s) = EMetric.diam s :=\n  h.isometry.ediam_image s\n\n"}
{"name":"IsometryEquiv.ext","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh₁ h₂ : IsometryEquiv α β\nH : ∀ (x : α), Eq (h₁ x) (h₂ x)\n⊢ Eq h₁ h₂","decl":"@[ext]\ntheorem ext ⦃h₁ h₂ : α ≃ᵢ β⦄ (H : ∀ x, h₁ x = h₂ x) : h₁ = h₂ :=\n  DFunLike.ext _ _ H\n\n"}
{"name":"IsometryEquiv.ext_iff","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh₁ h₂ : IsometryEquiv α β\n⊢ Iff (Eq h₁ h₂) (∀ (x : α), Eq (h₁ x) (h₂ x))","decl":"@[ext]\ntheorem ext ⦃h₁ h₂ : α ≃ᵢ β⦄ (H : ∀ x, h₁ x = h₂ x) : h₁ = h₂ :=\n  DFunLike.ext _ _ H\n\n"}
{"name":"IsometryEquiv.trans_apply","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\nγ : Type w\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\ninst✝ : PseudoEMetricSpace γ\nh₁ : IsometryEquiv α β\nh₂ : IsometryEquiv β γ\nx : α\n⊢ Eq ((h₁.trans h₂) x) (h₂ (h₁ x))","decl":"@[simp]\ntheorem trans_apply (h₁ : α ≃ᵢ β) (h₂ : β ≃ᵢ γ) (x : α) : h₁.trans h₂ x = h₂ (h₁ x) :=\n  rfl\n\n"}
{"name":"IsometryEquiv.symm_symm","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\n⊢ Eq h.symm.symm h","decl":"@[simp]\ntheorem symm_symm (h : α ≃ᵢ β) : h.symm.symm = h := rfl\n\n"}
{"name":"IsometryEquiv.symm_bijective","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\n⊢ Function.Bijective IsometryEquiv.symm","decl":"theorem symm_bijective : Bijective (IsometryEquiv.symm : (α ≃ᵢ β) → β ≃ᵢ α) :=\n  Function.bijective_iff_has_inverse.mpr ⟨_, symm_symm, symm_symm⟩\n\n"}
{"name":"IsometryEquiv.apply_symm_apply","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\ny : β\n⊢ Eq (h (h.symm y)) y","decl":"@[simp]\ntheorem apply_symm_apply (h : α ≃ᵢ β) (y : β) : h (h.symm y) = y :=\n  h.toEquiv.apply_symm_apply y\n\n"}
{"name":"IsometryEquiv.symm_apply_apply","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\nx : α\n⊢ Eq (h.symm (h x)) x","decl":"@[simp]\ntheorem symm_apply_apply (h : α ≃ᵢ β) (x : α) : h.symm (h x) = x :=\n  h.toEquiv.symm_apply_apply x\n\n"}
{"name":"IsometryEquiv.symm_apply_eq","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\nx : α\ny : β\n⊢ Iff (Eq (h.symm y) x) (Eq y (h x))","decl":"theorem symm_apply_eq (h : α ≃ᵢ β) {x : α} {y : β} : h.symm y = x ↔ y = h x :=\n  h.toEquiv.symm_apply_eq\n\n"}
{"name":"IsometryEquiv.eq_symm_apply","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\nx : α\ny : β\n⊢ Iff (Eq x (h.symm y)) (Eq (h x) y)","decl":"theorem eq_symm_apply (h : α ≃ᵢ β) {x : α} {y : β} : x = h.symm y ↔ h x = y :=\n  h.toEquiv.eq_symm_apply\n\n"}
{"name":"IsometryEquiv.symm_comp_self","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\n⊢ Eq (Function.comp ⇑h.symm ⇑h) id","decl":"theorem symm_comp_self (h : α ≃ᵢ β) : (h.symm : β → α) ∘ h = id := funext h.left_inv\n\n"}
{"name":"IsometryEquiv.self_comp_symm","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\n⊢ Eq (Function.comp ⇑h ⇑h.symm) id","decl":"theorem self_comp_symm (h : α ≃ᵢ β) : (h : α → β) ∘ h.symm = id := funext h.right_inv\n\n"}
{"name":"IsometryEquiv.range_eq_univ","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\n⊢ Eq (Set.range ⇑h) Set.univ","decl":"@[simp]\ntheorem range_eq_univ (h : α ≃ᵢ β) : range h = univ :=\n  h.toEquiv.range_eq_univ\n\n"}
{"name":"IsometryEquiv.image_symm","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\n⊢ Eq (Set.image ⇑h.symm) (Set.preimage ⇑h)","decl":"theorem image_symm (h : α ≃ᵢ β) : image h.symm = preimage h :=\n  image_eq_preimage_of_inverse h.symm.toEquiv.left_inv h.symm.toEquiv.right_inv\n\n"}
{"name":"IsometryEquiv.preimage_symm","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\n⊢ Eq (Set.preimage ⇑h.symm) (Set.image ⇑h)","decl":"theorem preimage_symm (h : α ≃ᵢ β) : preimage h.symm = image h :=\n  (image_eq_preimage_of_inverse h.toEquiv.left_inv h.toEquiv.right_inv).symm\n\n"}
{"name":"IsometryEquiv.symm_trans_apply","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\nγ : Type w\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\ninst✝ : PseudoEMetricSpace γ\nh₁ : IsometryEquiv α β\nh₂ : IsometryEquiv β γ\nx : γ\n⊢ Eq ((h₁.trans h₂).symm x) (h₁.symm (h₂.symm x))","decl":"@[simp]\ntheorem symm_trans_apply (h₁ : α ≃ᵢ β) (h₂ : β ≃ᵢ γ) (x : γ) :\n    (h₁.trans h₂).symm x = h₁.symm (h₂.symm x) :=\n  rfl\n\n"}
{"name":"IsometryEquiv.ediam_univ","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\n⊢ Eq (EMetric.diam Set.univ) (EMetric.diam Set.univ)","decl":"theorem ediam_univ (h : α ≃ᵢ β) : EMetric.diam (univ : Set α) = EMetric.diam (univ : Set β) := by\n  rw [← h.range_eq_univ, h.isometry.ediam_range]\n\n"}
{"name":"IsometryEquiv.ediam_preimage","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\ns : Set β\n⊢ Eq (EMetric.diam (Set.preimage (⇑h) s)) (EMetric.diam s)","decl":"@[simp]\ntheorem ediam_preimage (h : α ≃ᵢ β) (s : Set β) : EMetric.diam (h ⁻¹' s) = EMetric.diam s := by\n  rw [← image_symm, ediam_image]\n\n"}
{"name":"IsometryEquiv.preimage_emetric_ball","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\nx : β\nr : ENNReal\n⊢ Eq (Set.preimage (⇑h) (EMetric.ball x r)) (EMetric.ball (h.symm x) r)","decl":"@[simp]\ntheorem preimage_emetric_ball (h : α ≃ᵢ β) (x : β) (r : ℝ≥0∞) :\n    h ⁻¹' EMetric.ball x r = EMetric.ball (h.symm x) r := by\n  rw [← h.isometry.preimage_emetric_ball (h.symm x) r, h.apply_symm_apply]\n\n"}
{"name":"IsometryEquiv.preimage_emetric_closedBall","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\nx : β\nr : ENNReal\n⊢ Eq (Set.preimage (⇑h) (EMetric.closedBall x r)) (EMetric.closedBall (h.symm x) r)","decl":"@[simp]\ntheorem preimage_emetric_closedBall (h : α ≃ᵢ β) (x : β) (r : ℝ≥0∞) :\n    h ⁻¹' EMetric.closedBall x r = EMetric.closedBall (h.symm x) r := by\n  rw [← h.isometry.preimage_emetric_closedBall (h.symm x) r, h.apply_symm_apply]\n\n"}
{"name":"IsometryEquiv.image_emetric_ball","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\nx : α\nr : ENNReal\n⊢ Eq (Set.image (⇑h) (EMetric.ball x r)) (EMetric.ball (h x) r)","decl":"@[simp]\ntheorem image_emetric_ball (h : α ≃ᵢ β) (x : α) (r : ℝ≥0∞) :\n    h '' EMetric.ball x r = EMetric.ball (h x) r := by\n  rw [← h.preimage_symm, h.symm.preimage_emetric_ball, symm_symm]\n\n"}
{"name":"IsometryEquiv.image_emetric_closedBall","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\nx : α\nr : ENNReal\n⊢ Eq (Set.image (⇑h) (EMetric.closedBall x r)) (EMetric.closedBall (h x) r)","decl":"@[simp]\ntheorem image_emetric_closedBall (h : α ≃ᵢ β) (x : α) (r : ℝ≥0∞) :\n    h '' EMetric.closedBall x r = EMetric.closedBall (h x) r := by\n  rw [← h.preimage_symm, h.symm.preimage_emetric_closedBall, symm_symm]\n\n"}
{"name":"IsometryEquiv.toHomeomorph_toEquiv","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\n⊢ Eq h.toHomeomorph.toEquiv h.toEquiv","decl":"/-- The (bundled) homeomorphism associated to an isometric isomorphism. -/\n@[simps toEquiv]\nprotected def toHomeomorph (h : α ≃ᵢ β) : α ≃ₜ β where\n  continuous_toFun := h.continuous\n  continuous_invFun := h.symm.continuous\n  toEquiv := h.toEquiv\n\n"}
{"name":"IsometryEquiv.coe_toHomeomorph","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\n⊢ Eq ⇑h.toHomeomorph ⇑h","decl":"@[simp]\ntheorem coe_toHomeomorph (h : α ≃ᵢ β) : ⇑h.toHomeomorph = h :=\n  rfl\n\n"}
{"name":"IsometryEquiv.coe_toHomeomorph_symm","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nh : IsometryEquiv α β\n⊢ Eq ⇑h.toHomeomorph.symm ⇑h.symm","decl":"@[simp]\ntheorem coe_toHomeomorph_symm (h : α ≃ᵢ β) : ⇑h.toHomeomorph.symm = h.symm :=\n  rfl\n\n"}
{"name":"IsometryEquiv.comp_continuousOn_iff","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\nγ : Type u_2\ninst✝ : TopologicalSpace γ\nh : IsometryEquiv α β\nf : γ → α\ns : Set γ\n⊢ Iff (ContinuousOn (Function.comp (⇑h) f) s) (ContinuousOn f s)","decl":"@[simp]\ntheorem comp_continuousOn_iff {γ} [TopologicalSpace γ] (h : α ≃ᵢ β) {f : γ → α} {s : Set γ} :\n    ContinuousOn (h ∘ f) s ↔ ContinuousOn f s :=\n  h.toHomeomorph.comp_continuousOn_iff _ _\n\n"}
{"name":"IsometryEquiv.comp_continuous_iff","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\nγ : Type u_2\ninst✝ : TopologicalSpace γ\nh : IsometryEquiv α β\nf : γ → α\n⊢ Iff (Continuous (Function.comp (⇑h) f)) (Continuous f)","decl":"@[simp]\ntheorem comp_continuous_iff {γ} [TopologicalSpace γ] (h : α ≃ᵢ β) {f : γ → α} :\n    Continuous (h ∘ f) ↔ Continuous f :=\n  h.toHomeomorph.comp_continuous_iff\n\n"}
{"name":"IsometryEquiv.comp_continuous_iff'","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\nγ : Type u_2\ninst✝ : TopologicalSpace γ\nh : IsometryEquiv α β\nf : β → γ\n⊢ Iff (Continuous (Function.comp f ⇑h)) (Continuous f)","decl":"@[simp]\ntheorem comp_continuous_iff' {γ} [TopologicalSpace γ] (h : α ≃ᵢ β) {f : β → γ} :\n    Continuous (f ∘ h) ↔ Continuous f :=\n  h.toHomeomorph.comp_continuous_iff'\n\n"}
{"name":"IsometryEquiv.coe_one","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\ninst✝ : PseudoEMetricSpace α\n⊢ Eq (⇑1) id","decl":"@[simp] theorem coe_one : ⇑(1 : α ≃ᵢ α) = id := rfl\n\n"}
{"name":"IsometryEquiv.coe_mul","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\ninst✝ : PseudoEMetricSpace α\ne₁ e₂ : IsometryEquiv α α\n⊢ Eq (⇑(HMul.hMul e₁ e₂)) (Function.comp ⇑e₁ ⇑e₂)","decl":"@[simp] theorem coe_mul (e₁ e₂ : α ≃ᵢ α) : ⇑(e₁ * e₂) = e₁ ∘ e₂ := rfl\n\n"}
{"name":"IsometryEquiv.mul_apply","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\ninst✝ : PseudoEMetricSpace α\ne₁ e₂ : IsometryEquiv α α\nx : α\n⊢ Eq ((HMul.hMul e₁ e₂) x) (e₁ (e₂ x))","decl":"theorem mul_apply (e₁ e₂ : α ≃ᵢ α) (x : α) : (e₁ * e₂) x = e₁ (e₂ x) := rfl\n\n"}
{"name":"IsometryEquiv.inv_apply_self","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\ninst✝ : PseudoEMetricSpace α\ne : IsometryEquiv α α\nx : α\n⊢ Eq ((Inv.inv e) (e x)) x","decl":"@[simp] theorem inv_apply_self (e : α ≃ᵢ α) (x : α) : e⁻¹ (e x) = x := e.symm_apply_apply x\n\n"}
{"name":"IsometryEquiv.apply_inv_self","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\ninst✝ : PseudoEMetricSpace α\ne : IsometryEquiv α α\nx : α\n⊢ Eq (e ((Inv.inv e) x)) x","decl":"@[simp] theorem apply_inv_self (e : α ≃ᵢ α) (x : α) : e (e⁻¹ x) = x := e.apply_symm_apply x\n\n"}
{"name":"IsometryEquiv.completeSpace_iff","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\ne : IsometryEquiv α β\n⊢ Iff (CompleteSpace α) (CompleteSpace β)","decl":"theorem completeSpace_iff (e : α ≃ᵢ β) : CompleteSpace α ↔ CompleteSpace β := by\n  simp only [completeSpace_iff_isComplete_univ, ← e.range_eq_univ, ← image_univ,\n    isComplete_image_iff e.isometry.isUniformInducing]\n\n"}
{"name":"IsometryEquiv.completeSpace","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\ninst✝ : CompleteSpace β\ne : IsometryEquiv α β\n⊢ CompleteSpace α","decl":"protected theorem completeSpace [CompleteSpace β] (e : α ≃ᵢ β) : CompleteSpace α :=\n  e.completeSpace_iff.2 ‹_›\n\n"}
{"name":"IsometryEquiv.piCongrLeft'_symm_apply","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"ι : Type u_1\nι' : Type u_2\ninst✝² : Fintype ι\ninst✝¹ : Fintype ι'\nY : ι → Type u_3\ninst✝ : (j : ι) → PseudoEMetricSpace (Y j)\ne : Equiv ι ι'\nf : (b : ι') → Y (e.symm b)\nx : ι\n⊢ Eq ((IsometryEquiv.piCongrLeft' e).symm f x) (Eq.rec (f (e x)) ⋯)","decl":"/-- The natural isometry `∀ i, Y i ≃ᵢ ∀ j, Y (e.symm j)` obtained from a bijection `ι ≃ ι'` of\nfintypes. `Equiv.piCongrLeft'` as an `IsometryEquiv`.-/\n@[simps!]\ndef piCongrLeft' {ι' : Type*} [Fintype ι] [Fintype ι'] {Y : ι → Type*}\n    [∀ j, PseudoEMetricSpace (Y j)] (e : ι ≃ ι') : (∀ i, Y i) ≃ᵢ ∀ j, Y (e.symm j) where\n  toEquiv := Equiv.piCongrLeft' _ e\n  isometry_toFun x1 x2 := by\n    simp_rw [edist_pi_def, Finset.sup_univ_eq_iSup]\n    exact (Equiv.iSup_comp (g := fun b ↦ edist (x1 b) (x2 b)) e.symm)\n\n"}
{"name":"IsometryEquiv.piCongrLeft'_apply","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"ι : Type u_1\nι' : Type u_2\ninst✝² : Fintype ι\ninst✝¹ : Fintype ι'\nY : ι → Type u_3\ninst✝ : (j : ι) → PseudoEMetricSpace (Y j)\ne : Equiv ι ι'\nf : (a : ι) → Y a\nx : ι'\n⊢ Eq ((IsometryEquiv.piCongrLeft' e) f x) (f (e.symm x))","decl":"/-- The natural isometry `∀ i, Y i ≃ᵢ ∀ j, Y (e.symm j)` obtained from a bijection `ι ≃ ι'` of\nfintypes. `Equiv.piCongrLeft'` as an `IsometryEquiv`.-/\n@[simps!]\ndef piCongrLeft' {ι' : Type*} [Fintype ι] [Fintype ι'] {Y : ι → Type*}\n    [∀ j, PseudoEMetricSpace (Y j)] (e : ι ≃ ι') : (∀ i, Y i) ≃ᵢ ∀ j, Y (e.symm j) where\n  toEquiv := Equiv.piCongrLeft' _ e\n  isometry_toFun x1 x2 := by\n    simp_rw [edist_pi_def, Finset.sup_univ_eq_iSup]\n    exact (Equiv.iSup_comp (g := fun b ↦ edist (x1 b) (x2 b)) e.symm)\n\n"}
{"name":"IsometryEquiv.piCongrLeft_apply","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"ι : Type u_1\nι' : Type u_2\ninst✝² : Fintype ι\ninst✝¹ : Fintype ι'\nY : ι' → Type u_3\ninst✝ : (j : ι') → PseudoEMetricSpace (Y j)\ne : Equiv ι ι'\na✝ : (j : ι) → Y (e.symm.symm j)\ni : ι'\n⊢ Eq ((IsometryEquiv.piCongrLeft e) a✝ i) ((IsometryEquiv.piCongrLeft' e.symm).symm a✝ i)","decl":"/-- The natural isometry `∀ i, Y (e i) ≃ᵢ ∀ j, Y j` obtained from a bijection `ι ≃ ι'` of fintypes.\n`Equiv.piCongrLeft` as an `IsometryEquiv`. -/\n@[simps!]\ndef piCongrLeft {ι' : Type*} [Fintype ι] [Fintype ι'] {Y : ι' → Type*}\n    [∀ j, PseudoEMetricSpace (Y j)] (e : ι ≃ ι') : (∀ i, Y (e i)) ≃ᵢ ∀ j, Y j :=\n  (piCongrLeft' e.symm).symm\n\n"}
{"name":"IsometryEquiv.piCongrLeft_symm_apply","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"ι : Type u_1\nι' : Type u_2\ninst✝² : Fintype ι\ninst✝¹ : Fintype ι'\nY : ι' → Type u_3\ninst✝ : (j : ι') → PseudoEMetricSpace (Y j)\ne : Equiv ι ι'\na✝ : (i : ι') → Y i\nj : ι\n⊢ Eq ((IsometryEquiv.piCongrLeft e).symm a✝ j) ((IsometryEquiv.piCongrLeft' e.symm) a✝ j)","decl":"/-- The natural isometry `∀ i, Y (e i) ≃ᵢ ∀ j, Y j` obtained from a bijection `ι ≃ ι'` of fintypes.\n`Equiv.piCongrLeft` as an `IsometryEquiv`. -/\n@[simps!]\ndef piCongrLeft {ι' : Type*} [Fintype ι] [Fintype ι'] {Y : ι' → Type*}\n    [∀ j, PseudoEMetricSpace (Y j)] (e : ι ≃ ι') : (∀ i, Y (e i)) ≃ᵢ ∀ j, Y j :=\n  (piCongrLeft' e.symm).symm\n\n"}
{"name":"IsometryEquiv.sumArrowIsometryEquivProdArrow_symm_apply","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\nγ : Type w\ninst✝² : PseudoEMetricSpace γ\ninst✝¹ : Fintype α\ninst✝ : Fintype β\np : Prod (α → γ) (β → γ)\na✝ : Sum α β\n⊢ Eq (IsometryEquiv.sumArrowIsometryEquivProdArrow.symm p a✝) (Sum.elim p.1 p.2 a✝)","decl":"/-- The natural isometry `(α ⊕ β → γ) ≃ᵢ (α → γ) × (β → γ)` between the type of maps on a sum of\nfintypes `α ⊕ β` and the pairs of functions on the types `α` and `β`.\n`Equiv.sumArrowEquivProdArrow` as an `IsometryEquiv`.-/\n@[simps!]\ndef sumArrowIsometryEquivProdArrow [Fintype α] [Fintype β] : (α ⊕ β → γ) ≃ᵢ (α → γ) × (β → γ) where\n  toEquiv := Equiv.sumArrowEquivProdArrow _ _ _\n  isometry_toFun _ _ := by simp [Prod.edist_eq, edist_pi_def, Finset.sup_univ_eq_iSup, iSup_sum]\n\n"}
{"name":"IsometryEquiv.sumArrowIsometryEquivProdArrow_apply","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\nγ : Type w\ninst✝² : PseudoEMetricSpace γ\ninst✝¹ : Fintype α\ninst✝ : Fintype β\nf : Sum α β → γ\n⊢ Eq (IsometryEquiv.sumArrowIsometryEquivProdArrow f) { fst := Function.comp f Sum.inl, snd := Function.comp f Sum.inr }","decl":"/-- The natural isometry `(α ⊕ β → γ) ≃ᵢ (α → γ) × (β → γ)` between the type of maps on a sum of\nfintypes `α ⊕ β` and the pairs of functions on the types `α` and `β`.\n`Equiv.sumArrowEquivProdArrow` as an `IsometryEquiv`.-/\n@[simps!]\ndef sumArrowIsometryEquivProdArrow [Fintype α] [Fintype β] : (α ⊕ β → γ) ≃ᵢ (α → γ) × (β → γ) where\n  toEquiv := Equiv.sumArrowEquivProdArrow _ _ _\n  isometry_toFun _ _ := by simp [Prod.edist_eq, edist_pi_def, Finset.sup_univ_eq_iSup, iSup_sum]\n\n"}
{"name":"IsometryEquiv.sumArrowIsometryEquivProdArrow_toHomeomorph","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"γ : Type w\ninst✝² : PseudoEMetricSpace γ\nα : Type u_2\nβ : Type u_3\ninst✝¹ : Fintype α\ninst✝ : Fintype β\n⊢ Eq IsometryEquiv.sumArrowIsometryEquivProdArrow.toHomeomorph Homeomorph.sumArrowHomeomorphProdArrow","decl":"@[simp]\ntheorem sumArrowIsometryEquivProdArrow_toHomeomorph {α β : Type*} [Fintype α] [Fintype β] :\n    sumArrowIsometryEquivProdArrow.toHomeomorph\n    = Homeomorph.sumArrowHomeomorphProdArrow (ι := α) (ι' := β) (X := γ) :=\n  rfl\n\n"}
{"name":"Fin.edist_append_eq_max_edist","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\ninst✝ : PseudoEMetricSpace α\nm n : Nat\nx x2 : Fin m → α\ny y2 : Fin n → α\n⊢ Eq (EDist.edist (Fin.append x y) (Fin.append x2 y2)) (Max.max (EDist.edist x x2) (EDist.edist y y2))","decl":"theorem _root_.Fin.edist_append_eq_max_edist (m n : ℕ) {x x2 : Fin m → α} {y y2 : Fin n → α} :\n    edist (Fin.append x y) (Fin.append x2 y2) = max (edist x x2) (edist y y2) := by\n  simp [edist_pi_def, Finset.sup_univ_eq_iSup, ← Equiv.iSup_comp (e := finSumFinEquiv),\n    Prod.edist_eq, iSup_sum]\n\n"}
{"name":"Fin.appendIsometry_apply","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\ninst✝ : PseudoEMetricSpace α\nm n : Nat\nfg : Prod (Fin m → α) (Fin n → α)\na✝ : Fin (HAdd.hAdd m n)\n⊢ Eq ((Fin.appendIsometry m n) fg a✝) (Fin.append fg.1 fg.2 a✝)","decl":"/-- The natural `IsometryEquiv` between `(Fin m → α) × (Fin n → α)` and `Fin (m + n) → α`.\n`Fin.appendEquiv` as an `IsometryEquiv`.-/\n@[simps!]\ndef _root_.Fin.appendIsometry (m n : ℕ) : (Fin m → α) × (Fin n → α) ≃ᵢ (Fin (m + n) → α) where\n  toEquiv := Fin.appendEquiv _ _\n  isometry_toFun _ _ := by simp_rw [Fin.appendEquiv, Fin.edist_append_eq_max_edist, Prod.edist_eq]\n\n"}
{"name":"Fin.appendIsometry_symm_apply","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\ninst✝ : PseudoEMetricSpace α\nm n : Nat\nf : Fin (HAdd.hAdd m n) → α\n⊢ Eq ((Fin.appendIsometry m n).symm f) { fst := fun i => f (Fin.castAdd n i), snd := fun i => f (Fin.natAdd m i) }","decl":"/-- The natural `IsometryEquiv` between `(Fin m → α) × (Fin n → α)` and `Fin (m + n) → α`.\n`Fin.appendEquiv` as an `IsometryEquiv`.-/\n@[simps!]\ndef _root_.Fin.appendIsometry (m n : ℕ) : (Fin m → α) × (Fin n → α) ≃ᵢ (Fin (m + n) → α) where\n  toEquiv := Fin.appendEquiv _ _\n  isometry_toFun _ _ := by simp_rw [Fin.appendEquiv, Fin.edist_append_eq_max_edist, Prod.edist_eq]\n\n"}
{"name":"Fin.appendIsometry_toHomeomorph","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\ninst✝ : PseudoEMetricSpace α\nm n : Nat\n⊢ Eq (Fin.appendIsometry m n).toHomeomorph (Fin.appendHomeomorph m n)","decl":"@[simp]\ntheorem _root_.Fin.appendIsometry_toHomeomorph (m n : ℕ) :\n    (Fin.appendIsometry m n).toHomeomorph = Fin.appendHomeomorph (X := α) m n :=\n  rfl\n\n"}
{"name":"IsometryEquiv.funUnique_symm_apply","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"ι : Type u_1\nα : Type u\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : Unique ι\ninst✝ : Fintype ι\nx : α\ni : ι\n⊢ Eq ((IsometryEquiv.funUnique ι α).symm x i) x","decl":"/-- `Equiv.funUnique` as an `IsometryEquiv`. -/\n@[simps!]\ndef funUnique [Unique ι] [Fintype ι] : (ι → α) ≃ᵢ α where\n  toEquiv := Equiv.funUnique ι α\n  isometry_toFun x hx := by simp [edist_pi_def, Finset.univ_unique, Finset.sup_singleton]\n\n"}
{"name":"IsometryEquiv.funUnique_apply","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"ι : Type u_1\nα : Type u\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : Unique ι\ninst✝ : Fintype ι\nf : (i : ι) → (fun a => α) i\n⊢ Eq ((IsometryEquiv.funUnique ι α) f) (f Inhabited.default)","decl":"/-- `Equiv.funUnique` as an `IsometryEquiv`. -/\n@[simps!]\ndef funUnique [Unique ι] [Fintype ι] : (ι → α) ≃ᵢ α where\n  toEquiv := Equiv.funUnique ι α\n  isometry_toFun x hx := by simp [edist_pi_def, Finset.univ_unique, Finset.sup_singleton]\n\n"}
{"name":"IsometryEquiv.piFinTwo_symm_apply","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Fin 2 → Type u_2\ninst✝ : (i : Fin 2) → PseudoEMetricSpace (α i)\np : Prod (α 0) (α 1)\ni : Fin (HAdd.hAdd 1 1)\n⊢ Eq ((IsometryEquiv.piFinTwo α).symm p i) (Fin.cons p.1 (Fin.cons p.2 finZeroElim) i)","decl":"/-- `piFinTwoEquiv` as an `IsometryEquiv`. -/\n@[simps!]\ndef piFinTwo (α : Fin 2 → Type*) [∀ i, PseudoEMetricSpace (α i)] : (∀ i, α i) ≃ᵢ α 0 × α 1 where\n  toEquiv := piFinTwoEquiv α\n  isometry_toFun x hx := by simp [edist_pi_def, Fin.univ_succ, Prod.edist_eq]\n\n"}
{"name":"IsometryEquiv.piFinTwo_apply","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Fin 2 → Type u_2\ninst✝ : (i : Fin 2) → PseudoEMetricSpace (α i)\nf : (i : Fin 2) → α i\n⊢ Eq ((IsometryEquiv.piFinTwo α) f) { fst := f 0, snd := f 1 }","decl":"/-- `piFinTwoEquiv` as an `IsometryEquiv`. -/\n@[simps!]\ndef piFinTwo (α : Fin 2 → Type*) [∀ i, PseudoEMetricSpace (α i)] : (∀ i, α i) ≃ᵢ α 0 × α 1 where\n  toEquiv := piFinTwoEquiv α\n  isometry_toFun x hx := by simp [edist_pi_def, Fin.univ_succ, Prod.edist_eq]\n\n"}
{"name":"IsometryEquiv.diam_image","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nh : IsometryEquiv α β\ns : Set α\n⊢ Eq (Metric.diam (Set.image (⇑h) s)) (Metric.diam s)","decl":"@[simp]\ntheorem diam_image (s : Set α) : Metric.diam (h '' s) = Metric.diam s :=\n  h.isometry.diam_image s\n\n"}
{"name":"IsometryEquiv.diam_preimage","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nh : IsometryEquiv α β\ns : Set β\n⊢ Eq (Metric.diam (Set.preimage (⇑h) s)) (Metric.diam s)","decl":"@[simp]\ntheorem diam_preimage (s : Set β) : Metric.diam (h ⁻¹' s) = Metric.diam s := by\n  rw [← image_symm, diam_image]\n\n"}
{"name":"IsometryEquiv.diam_univ","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nh : IsometryEquiv α β\n⊢ Eq (Metric.diam Set.univ) (Metric.diam Set.univ)","decl":"include h in\ntheorem diam_univ : Metric.diam (univ : Set α) = Metric.diam (univ : Set β) :=\n  congr_arg ENNReal.toReal h.ediam_univ\n\n"}
{"name":"IsometryEquiv.preimage_ball","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nh : IsometryEquiv α β\nx : β\nr : Real\n⊢ Eq (Set.preimage (⇑h) (Metric.ball x r)) (Metric.ball (h.symm x) r)","decl":"@[simp]\ntheorem preimage_ball (h : α ≃ᵢ β) (x : β) (r : ℝ) :\n    h ⁻¹' Metric.ball x r = Metric.ball (h.symm x) r := by\n  rw [← h.isometry.preimage_ball (h.symm x) r, h.apply_symm_apply]\n\n"}
{"name":"IsometryEquiv.preimage_sphere","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nh : IsometryEquiv α β\nx : β\nr : Real\n⊢ Eq (Set.preimage (⇑h) (Metric.sphere x r)) (Metric.sphere (h.symm x) r)","decl":"@[simp]\ntheorem preimage_sphere (h : α ≃ᵢ β) (x : β) (r : ℝ) :\n    h ⁻¹' Metric.sphere x r = Metric.sphere (h.symm x) r := by\n  rw [← h.isometry.preimage_sphere (h.symm x) r, h.apply_symm_apply]\n\n"}
{"name":"IsometryEquiv.preimage_closedBall","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nh : IsometryEquiv α β\nx : β\nr : Real\n⊢ Eq (Set.preimage (⇑h) (Metric.closedBall x r)) (Metric.closedBall (h.symm x) r)","decl":"@[simp]\ntheorem preimage_closedBall (h : α ≃ᵢ β) (x : β) (r : ℝ) :\n    h ⁻¹' Metric.closedBall x r = Metric.closedBall (h.symm x) r := by\n  rw [← h.isometry.preimage_closedBall (h.symm x) r, h.apply_symm_apply]\n\n"}
{"name":"IsometryEquiv.image_ball","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nh : IsometryEquiv α β\nx : α\nr : Real\n⊢ Eq (Set.image (⇑h) (Metric.ball x r)) (Metric.ball (h x) r)","decl":"@[simp]\ntheorem image_ball (h : α ≃ᵢ β) (x : α) (r : ℝ) : h '' Metric.ball x r = Metric.ball (h x) r := by\n  rw [← h.preimage_symm, h.symm.preimage_ball, symm_symm]\n\n"}
{"name":"IsometryEquiv.image_sphere","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nh : IsometryEquiv α β\nx : α\nr : Real\n⊢ Eq (Set.image (⇑h) (Metric.sphere x r)) (Metric.sphere (h x) r)","decl":"@[simp]\ntheorem image_sphere (h : α ≃ᵢ β) (x : α) (r : ℝ) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  rw [← h.preimage_symm, h.symm.preimage_sphere, symm_symm]\n\n"}
{"name":"IsometryEquiv.image_closedBall","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nh : IsometryEquiv α β\nx : α\nr : Real\n⊢ Eq (Set.image (⇑h) (Metric.closedBall x r)) (Metric.closedBall (h x) r)","decl":"@[simp]\ntheorem image_closedBall (h : α ≃ᵢ β) (x : α) (r : ℝ) :\n    h '' Metric.closedBall x r = Metric.closedBall (h x) r := by\n  rw [← h.preimage_symm, h.symm.preimage_closedBall, symm_symm]\n\n"}
{"name":"Isometry.isometryEquivOnRange_apply","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : EMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nh : Isometry f\na : α\n⊢ Eq (h.isometryEquivOnRange a) ⟨f a, ⋯⟩","decl":"/-- An isometry induces an isometric isomorphism between the source space and the\nrange of the isometry. -/\n@[simps! (config := { simpRhs := true }) toEquiv apply]\ndef Isometry.isometryEquivOnRange [EMetricSpace α] [PseudoEMetricSpace β] {f : α → β}\n    (h : Isometry f) : α ≃ᵢ range f where\n  isometry_toFun := h\n  toEquiv := Equiv.ofInjective f h.injective\n\n"}
{"name":"Isometry.isometryEquivOnRange_toEquiv","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : EMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nh : Isometry f\n⊢ Eq h.isometryEquivOnRange.toEquiv (Equiv.ofInjective f ⋯)","decl":"/-- An isometry induces an isometric isomorphism between the source space and the\nrange of the isometry. -/\n@[simps! (config := { simpRhs := true }) toEquiv apply]\ndef Isometry.isometryEquivOnRange [EMetricSpace α] [PseudoEMetricSpace β] {f : α → β}\n    (h : Isometry f) : α ≃ᵢ range f where\n  isometry_toFun := h\n  toEquiv := Equiv.ofInjective f h.injective\n\n"}
{"name":"Isometry.lipschitzWith_iff","module":"Mathlib.Topology.MetricSpace.Isometry","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\ninst✝ : PseudoEMetricSpace γ\nf : α → β\ng : β → γ\nK : NNReal\nh : Isometry g\n⊢ Iff (LipschitzWith K (Function.comp g f)) (LipschitzWith K f)","decl":"open NNReal in\n/-- Post-composition by an isometry does not change the Lipschitz-property of a function. -/\nlemma Isometry.lipschitzWith_iff {α β γ : Type*} [PseudoEMetricSpace α] [PseudoEMetricSpace β]\n    [PseudoEMetricSpace γ] {f : α → β} {g : β → γ} (K : ℝ≥0) (h : Isometry g) :\n    LipschitzWith K (g ∘ f) ↔ LipschitzWith K f := by\n  simp [LipschitzWith, h.edist_eq]\n"}
