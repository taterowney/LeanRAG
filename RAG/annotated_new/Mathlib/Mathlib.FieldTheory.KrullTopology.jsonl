{"name":"IntermediateField.map_id","module":"Mathlib.FieldTheory.KrullTopology","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\nE : IntermediateField K L\n⊢ Eq (IntermediateField.map (AlgHom.id K L) E) E","decl":"/-- Mapping intermediate fields along the identity does not change them -/\ntheorem IntermediateField.map_id {K L : Type*} [Field K] [Field L] [Algebra K L]\n    (E : IntermediateField K L) : E.map (AlgHom.id K L) = E :=\n  SetLike.coe_injective <| Set.image_id _\n\n"}
{"name":"im_finiteDimensional","module":"Mathlib.FieldTheory.KrullTopology","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\nE : IntermediateField K L\nσ : AlgEquiv K L L\ninst✝ : FiniteDimensional K (Subtype fun x => Membership.mem E x)\n⊢ FiniteDimensional K (Subtype fun x => Membership.mem (IntermediateField.map (↑σ) E) x)","decl":"/-- Mapping a finite dimensional intermediate field along an algebra equivalence gives\na finite-dimensional intermediate field. -/\ninstance im_finiteDimensional {K L : Type*} [Field K] [Field L] [Algebra K L]\n    {E : IntermediateField K L} (σ : L ≃ₐ[K] L) [FiniteDimensional K E] :\n    FiniteDimensional K (E.map σ.toAlgHom) :=\n  LinearEquiv.finiteDimensional (IntermediateField.intermediateFieldMap σ E).toLinearEquiv\n\n"}
{"name":"IntermediateField.finiteDimensional_bot","module":"Mathlib.FieldTheory.KrullTopology","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\n⊢ FiniteDimensional K (Subtype fun x => Membership.mem Bot.bot x)","decl":"/-- For a field extension `L/K`, the intermediate field `K` is finite-dimensional over `K` -/\ntheorem IntermediateField.finiteDimensional_bot (K L : Type*) [Field K] [Field L] [Algebra K L] :\n    FiniteDimensional K (⊥ : IntermediateField K L) :=\n  .of_rank_eq_one IntermediateField.rank_bot\n\n"}
{"name":"IntermediateField.fixingSubgroup.bot","module":"Mathlib.FieldTheory.KrullTopology","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\n⊢ Eq Bot.bot.fixingSubgroup Top.top","decl":"/-- This lemma says that `Gal(L/K) = L ≃ₐ[K] L` -/\ntheorem IntermediateField.fixingSubgroup.bot {K L : Type*} [Field K] [Field L] [Algebra K L] :\n    IntermediateField.fixingSubgroup (⊥ : IntermediateField K L) = ⊤ := by\n  ext f\n  refine ⟨fun _ => Subgroup.mem_top _, fun _ => ?_⟩\n  rintro ⟨x, hx : x ∈ (⊥ : IntermediateField K L)⟩\n  rw [IntermediateField.mem_bot] at hx\n  rcases hx with ⟨y, rfl⟩\n  exact f.commutes y\n\n"}
{"name":"top_fixedByFinite","module":"Mathlib.FieldTheory.KrullTopology","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\n⊢ Membership.mem (fixedByFinite K L) Top.top","decl":"/-- If `L/K` is a field extension, then we have `Gal(L/K) ∈ fixedByFinite K L` -/\ntheorem top_fixedByFinite {K L : Type*} [Field K] [Field L] [Algebra K L] :\n    ⊤ ∈ fixedByFinite K L :=\n  ⟨⊥, IntermediateField.finiteDimensional_bot K L, IntermediateField.fixingSubgroup.bot⟩\n\n"}
{"name":"finiteDimensional_sup","module":"Mathlib.FieldTheory.KrullTopology","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\nE1 E2 : IntermediateField K L\nx✝¹ : FiniteDimensional K (Subtype fun x => Membership.mem E1 x)\nx✝ : FiniteDimensional K (Subtype fun x => Membership.mem E2 x)\n⊢ FiniteDimensional K (Subtype fun x => Membership.mem (Max.max E1 E2) x)","decl":"/-- If `E1` and `E2` are finite-dimensional intermediate fields, then so is their compositum.\nThis rephrases a result already in mathlib so that it is compatible with our type classes -/\ntheorem finiteDimensional_sup {K L : Type*} [Field K] [Field L] [Algebra K L]\n    (E1 E2 : IntermediateField K L) (_ : FiniteDimensional K E1) (_ : FiniteDimensional K E2) :\n    FiniteDimensional K (↥(E1 ⊔ E2)) :=\n  IntermediateField.finiteDimensional_sup E1 E2\n\n"}
{"name":"IntermediateField.mem_fixingSubgroup_iff","module":"Mathlib.FieldTheory.KrullTopology","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\nE : IntermediateField K L\nσ : AlgEquiv K L L\n⊢ Iff (Membership.mem E.fixingSubgroup σ) (∀ (x : L), Membership.mem E x → Eq (σ x) x)","decl":"/-- An element of `L ≃ₐ[K] L` is in `Gal(L/E)` if and only if it fixes every element of `E`-/\ntheorem IntermediateField.mem_fixingSubgroup_iff {K L : Type*} [Field K] [Field L] [Algebra K L]\n    (E : IntermediateField K L) (σ : L ≃ₐ[K] L) : σ ∈ E.fixingSubgroup ↔ ∀ x : L, x ∈ E → σ x = x :=\n  ⟨fun hσ x hx => hσ ⟨x, hx⟩, fun h ⟨x, hx⟩ => h x hx⟩\n\n"}
{"name":"IntermediateField.fixingSubgroup.antimono","module":"Mathlib.FieldTheory.KrullTopology","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\nE1 E2 : IntermediateField K L\nh12 : LE.le E1 E2\n⊢ LE.le E2.fixingSubgroup E1.fixingSubgroup","decl":"/-- The map `E ↦ Gal(L/E)` is inclusion-reversing -/\ntheorem IntermediateField.fixingSubgroup.antimono {K L : Type*} [Field K] [Field L] [Algebra K L]\n    {E1 E2 : IntermediateField K L} (h12 : E1 ≤ E2) : E2.fixingSubgroup ≤ E1.fixingSubgroup := by\n  rintro σ hσ ⟨x, hx⟩\n  exact hσ ⟨x, h12 hx⟩\n\n"}
{"name":"mem_galBasis_iff","module":"Mathlib.FieldTheory.KrullTopology","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\nU : Set (AlgEquiv K L L)\n⊢ Iff (Membership.mem (galBasis K L) U) (Membership.mem (Set.image (fun g => g.carrier) (fixedByFinite K L)) U)","decl":"/-- A subset of `L ≃ₐ[K] L` is a member of `galBasis K L` if and only if it is the underlying set\nof `Gal(L/E)` for some finite subextension `E/K`-/\ntheorem mem_galBasis_iff (K L : Type*) [Field K] [Field L] [Algebra K L] (U : Set (L ≃ₐ[K] L)) :\n    U ∈ galBasis K L ↔ U ∈ (fun g => g.carrier) '' fixedByFinite K L :=\n  Iff.rfl\n\n"}
{"name":"instTopologicalGroupAlgEquiv","module":"Mathlib.FieldTheory.KrullTopology","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\n⊢ TopologicalGroup (AlgEquiv K L L)","decl":"/-- For a field extension `L/K`, the Krull topology on `L ≃ₐ[K] L` makes it a topological group. -/\ninstance (K L : Type*) [Field K] [Field L] [Algebra K L] : TopologicalGroup (L ≃ₐ[K] L) :=\n  GroupFilterBasis.isTopologicalGroup (galGroupBasis K L)\n\n"}
{"name":"krullTopology_mem_nhds_one","module":"Mathlib.FieldTheory.KrullTopology","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\ns : Set (AlgEquiv K L L)\n⊢ Iff (Membership.mem (nhds 1) s) (Exists fun E => And (FiniteDimensional K (Subtype fun x => Membership.mem E x)) (HasSubset.Subset (↑E.fixingSubgroup) s))","decl":"open scoped Topology in\nlemma krullTopology_mem_nhds_one (K L : Type*) [Field K] [Field L] [Algebra K L]\n    (s : Set (L ≃ₐ[K] L)) : s ∈ 𝓝 1 ↔ ∃ E : IntermediateField K L,\n    FiniteDimensional K E ∧ (E.fixingSubgroup : Set (L ≃ₐ[K] L)) ⊆ s := by\n  rw [GroupFilterBasis.nhds_one_eq]\n  constructor\n  · rintro ⟨-, ⟨-, ⟨E, fin, rfl⟩, rfl⟩, hE⟩\n    exact ⟨E, fin, hE⟩\n  · rintro ⟨E, fin, hE⟩\n    exact ⟨E.fixingSubgroup, ⟨E.fixingSubgroup, ⟨E, fin, rfl⟩, rfl⟩, hE⟩\n\n"}
{"name":"IntermediateField.fixingSubgroup_isOpen","module":"Mathlib.FieldTheory.KrullTopology","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\nE : IntermediateField K L\ninst✝ : FiniteDimensional K (Subtype fun x => Membership.mem E x)\n⊢ IsOpen ↑E.fixingSubgroup","decl":"/-- Let `L/E/K` be a tower of fields with `E/K` finite. Then `Gal(L/E)` is an open subgroup of\n  `L ≃ₐ[K] L`. -/\ntheorem IntermediateField.fixingSubgroup_isOpen {K L : Type*} [Field K] [Field L] [Algebra K L]\n    (E : IntermediateField K L) [FiniteDimensional K E] :\n    IsOpen (E.fixingSubgroup : Set (L ≃ₐ[K] L)) := by\n  have h_basis : E.fixingSubgroup.carrier ∈ galGroupBasis K L :=\n    ⟨E.fixingSubgroup, ⟨E, ‹_›, rfl⟩, rfl⟩\n  have h_nhd := GroupFilterBasis.mem_nhds_one (galGroupBasis K L) h_basis\n  exact Subgroup.isOpen_of_mem_nhds _ h_nhd\n\n"}
{"name":"IntermediateField.fixingSubgroup_isClosed","module":"Mathlib.FieldTheory.KrullTopology","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\nE : IntermediateField K L\ninst✝ : FiniteDimensional K (Subtype fun x => Membership.mem E x)\n⊢ IsClosed ↑E.fixingSubgroup","decl":"/-- Given a tower of fields `L/E/K`, with `E/K` finite, the subgroup `Gal(L/E) ≤ L ≃ₐ[K] L` is\n  closed. -/\ntheorem IntermediateField.fixingSubgroup_isClosed {K L : Type*} [Field K] [Field L] [Algebra K L]\n    (E : IntermediateField K L) [FiniteDimensional K E] :\n    IsClosed (E.fixingSubgroup : Set (L ≃ₐ[K] L)) :=\n  OpenSubgroup.isClosed ⟨E.fixingSubgroup, E.fixingSubgroup_isOpen⟩\n\n"}
{"name":"krullTopology_t2","module":"Mathlib.FieldTheory.KrullTopology","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\ninst✝ : Algebra.IsIntegral K L\n⊢ T2Space (AlgEquiv K L L)","decl":"/-- If `L/K` is an algebraic extension, then the Krull topology on `L ≃ₐ[K] L` is Hausdorff. -/\ntheorem krullTopology_t2 {K L : Type*} [Field K] [Field L] [Algebra K L]\n    [Algebra.IsIntegral K L] : T2Space (L ≃ₐ[K] L) :=\n  { t2 := fun f g hfg => by\n      let φ := f⁻¹ * g\n      cases' DFunLike.exists_ne hfg with x hx\n      have hφx : φ x ≠ x := by\n        apply ne_of_apply_ne f\n        change f (f.symm (g x)) ≠ f x\n        rw [AlgEquiv.apply_symm_apply f (g x), ne_comm]\n        exact hx\n      let E : IntermediateField K L := IntermediateField.adjoin K {x}\n      let h_findim : FiniteDimensional K E := IntermediateField.adjoin.finiteDimensional\n        (Algebra.IsIntegral.isIntegral x)\n      let H := E.fixingSubgroup\n      have h_basis : (H : Set (L ≃ₐ[K] L)) ∈ galGroupBasis K L := ⟨H, ⟨E, ⟨h_findim, rfl⟩⟩, rfl⟩\n      have h_nhd := GroupFilterBasis.mem_nhds_one (galGroupBasis K L) h_basis\n      rw [mem_nhds_iff] at h_nhd\n      rcases h_nhd with ⟨W, hWH, hW_open, hW_1⟩\n      refine ⟨f • W, g • W,\n        ⟨hW_open.leftCoset f, hW_open.leftCoset g, ⟨1, hW_1, mul_one _⟩, ⟨1, hW_1, mul_one _⟩, ?_⟩⟩\n      rw [Set.disjoint_left]\n      rintro σ ⟨w1, hw1, h⟩ ⟨w2, hw2, rfl⟩\n      dsimp at h\n      rw [eq_inv_mul_iff_mul_eq.symm, ← mul_assoc, mul_inv_eq_iff_eq_mul.symm] at h\n      have h_in_H : w1 * w2⁻¹ ∈ H := H.mul_mem (hWH hw1) (H.inv_mem (hWH hw2))\n      rw [h] at h_in_H\n      change φ ∈ E.fixingSubgroup at h_in_H\n      rw [IntermediateField.mem_fixingSubgroup_iff] at h_in_H\n      specialize h_in_H x\n      have hxE : x ∈ E := by\n        apply IntermediateField.subset_adjoin\n        apply Set.mem_singleton\n      exact hφx (h_in_H hxE) }\n\n"}
{"name":"krullTopology_totallyDisconnected","module":"Mathlib.FieldTheory.KrullTopology","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\ninst✝ : Algebra.IsIntegral K L\n⊢ IsTotallyDisconnected Set.univ","decl":"/-- If `L/K` is an algebraic field extension, then the Krull topology on `L ≃ₐ[K] L` is\n  totally disconnected. -/\ntheorem krullTopology_totallyDisconnected {K L : Type*} [Field K] [Field L] [Algebra K L]\n    [Algebra.IsIntegral K L] : IsTotallyDisconnected (Set.univ : Set (L ≃ₐ[K] L)) := by\n  apply isTotallyDisconnected_of_isClopen_set\n  intro σ τ h_diff\n  have hστ : σ⁻¹ * τ ≠ 1 := by rwa [Ne, inv_mul_eq_one]\n  rcases DFunLike.exists_ne hστ with ⟨x, hx : (σ⁻¹ * τ) x ≠ x⟩\n  let E := IntermediateField.adjoin K ({x} : Set L)\n  haveI := IntermediateField.adjoin.finiteDimensional\n    (Algebra.IsIntegral.isIntegral (R := K) x)\n  refine ⟨σ • E.fixingSubgroup,\n    ⟨E.fixingSubgroup_isClosed.leftCoset σ, E.fixingSubgroup_isOpen.leftCoset σ⟩,\n    ⟨1, E.fixingSubgroup.one_mem', mul_one σ⟩, ?_⟩\n  simp only [mem_leftCoset_iff, SetLike.mem_coe, IntermediateField.mem_fixingSubgroup_iff,\n    not_forall]\n  exact ⟨x, IntermediateField.mem_adjoin_simple_self K x, hx⟩\n\n"}
{"name":"IntermediateField.fixingSubgroup_top","module":"Mathlib.FieldTheory.KrullTopology","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\n⊢ Eq Top.top.fixingSubgroup Bot.bot","decl":"@[simp] lemma IntermediateField.fixingSubgroup_top (K L : Type*) [Field K] [Field L] [Algebra K L] :\n    IntermediateField.fixingSubgroup (⊤ : IntermediateField K L) = ⊥ := by\n  ext\n  simp [mem_fixingSubgroup_iff, DFunLike.ext_iff]\n\n"}
{"name":"IntermediateField.fixingSubgroup_bot","module":"Mathlib.FieldTheory.KrullTopology","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\n⊢ Eq Bot.bot.fixingSubgroup Top.top","decl":"@[simp] lemma IntermediateField.fixingSubgroup_bot (K L : Type*) [Field K] [Field L] [Algebra K L] :\n    IntermediateField.fixingSubgroup (⊥ : IntermediateField K L) = ⊤ := by\n  ext\n  simp [mem_fixingSubgroup_iff, mem_bot]\n\n"}
{"name":"krullTopology_discreteTopology_of_finiteDimensional","module":"Mathlib.FieldTheory.KrullTopology","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\ninst✝ : FiniteDimensional K L\n⊢ DiscreteTopology (AlgEquiv K L L)","decl":"instance krullTopology_discreteTopology_of_finiteDimensional (K L : Type*) [Field K] [Field L]\n    [Algebra K L] [FiniteDimensional K L] : DiscreteTopology (L ≃ₐ[K] L) := by\n  rw [discreteTopology_iff_isOpen_singleton_one]\n  change IsOpen ((⊥ : Subgroup (L ≃ₐ[K] L)) : Set (L ≃ₐ[K] L))\n  rw [← IntermediateField.fixingSubgroup_top]\n  exact IntermediateField.fixingSubgroup_isOpen ⊤\n"}
