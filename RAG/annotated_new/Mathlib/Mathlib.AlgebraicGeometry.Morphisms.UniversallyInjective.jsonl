{"name":"AlgebraicGeometry.UniversallyInjective.universally_injective","module":"Mathlib.AlgebraicGeometry.Morphisms.UniversallyInjective","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\nself : AlgebraicGeometry.UniversallyInjective f\n⊢ (AlgebraicGeometry.topologically fun {α β} [TopologicalSpace α] [TopologicalSpace β] x => Function.Injective x).universally f","decl":"/--\nA morphism of schemes `f : X ⟶ Y` is universally injective if the base change `X ×[Y] Y' ⟶ Y'`\nalong any morphism `Y' ⟶ Y` is injective (on points).\n-/\n@[mk_iff]\nclass UniversallyInjective (f : X ⟶ Y) : Prop where\n  universally_injective : universally (topologically (Injective ·)) f\n\n"}
{"name":"AlgebraicGeometry.universallyInjective_iff","module":"Mathlib.AlgebraicGeometry.Morphisms.UniversallyInjective","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\n⊢ Iff (AlgebraicGeometry.UniversallyInjective f) ((AlgebraicGeometry.topologically fun {α β} [TopologicalSpace α] [TopologicalSpace β] x => Function.Injective x).universally f)","decl":"/--\nA morphism of schemes `f : X ⟶ Y` is universally injective if the base change `X ×[Y] Y' ⟶ Y'`\nalong any morphism `Y' ⟶ Y` is injective (on points).\n-/\n@[mk_iff]\nclass UniversallyInjective (f : X ⟶ Y) : Prop where\n  universally_injective : universally (topologically (Injective ·)) f\n\n"}
{"name":"AlgebraicGeometry.Scheme.Hom.injective","module":"Mathlib.AlgebraicGeometry.Morphisms.UniversallyInjective","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : X.Hom Y\ninst✝ : AlgebraicGeometry.UniversallyInjective f\n⊢ Function.Injective ⇑f.base","decl":"theorem Scheme.Hom.injective (f : X.Hom Y) [UniversallyInjective f] :\n    Function.Injective f.base :=\n  UniversallyInjective.universally_injective _ _ _ .of_id_snd\n\n"}
{"name":"AlgebraicGeometry.universallyInjective_eq","module":"Mathlib.AlgebraicGeometry.Morphisms.UniversallyInjective","initialProofState":"⊢ Eq (@AlgebraicGeometry.UniversallyInjective) (AlgebraicGeometry.topologically fun {α β} [TopologicalSpace α] [TopologicalSpace β] x => Function.Injective x).universally","decl":"theorem universallyInjective_eq :\n    @UniversallyInjective = universally (topologically (Injective ·)) := by\n  ext X Y f; rw [universallyInjective_iff]\n\n"}
{"name":"AlgebraicGeometry.universallyInjective_eq_diagonal","module":"Mathlib.AlgebraicGeometry.Morphisms.UniversallyInjective","initialProofState":"⊢ Eq (@AlgebraicGeometry.UniversallyInjective) (CategoryTheory.MorphismProperty.diagonal @AlgebraicGeometry.Surjective)","decl":"theorem universallyInjective_eq_diagonal :\n    @UniversallyInjective = diagonal @Surjective := by\n  apply le_antisymm\n  · intro X Y f hf\n    refine ⟨fun x ↦ ⟨(pullback.fst f f).base x, hf.1 _ _ _ (IsPullback.of_hasPullback f f) ?_⟩⟩\n    rw [← Scheme.comp_base_apply, pullback.diagonal_fst]\n    rfl\n  · rw [← universally_eq_iff.mpr (inferInstanceAs (IsStableUnderBaseChange (diagonal @Surjective))),\n      universallyInjective_eq]\n    apply universally_mono\n    intro X Y f hf x₁ x₂ e\n    obtain ⟨t, ht₁, ht₂⟩ := Scheme.Pullback.exists_preimage_pullback _ _ e\n    obtain ⟨t, rfl⟩ := hf.1 t\n    rw [← ht₁, ← ht₂, ← Scheme.comp_base_apply, ← Scheme.comp_base_apply, pullback.diagonal_fst,\n      pullback.diagonal_snd]\n\n"}
{"name":"AlgebraicGeometry.UniversallyInjective.iff_diagonal","module":"Mathlib.AlgebraicGeometry.Morphisms.UniversallyInjective","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\n⊢ Iff (AlgebraicGeometry.UniversallyInjective f) (AlgebraicGeometry.Surjective (CategoryTheory.Limits.pullback.diagonal f))","decl":"theorem UniversallyInjective.iff_diagonal :\n    UniversallyInjective f ↔ Surjective (pullback.diagonal f) := by\n  rw [universallyInjective_eq_diagonal]; rfl\n\n"}
{"name":"AlgebraicGeometry.instUniversallyInjectiveOfMonoScheme","module":"Mathlib.AlgebraicGeometry.Morphisms.UniversallyInjective","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\ninst✝ : CategoryTheory.Mono f\n⊢ AlgebraicGeometry.UniversallyInjective f","decl":"instance (priority := 900) [Mono f] : UniversallyInjective f :=\n  have := (pullback.isIso_diagonal_iff f).mpr inferInstance\n  (UniversallyInjective.iff_diagonal f).mpr inferInstance\n\n"}
{"name":"AlgebraicGeometry.UniversallyInjective.respectsIso","module":"Mathlib.AlgebraicGeometry.Morphisms.UniversallyInjective","initialProofState":"⊢ CategoryTheory.MorphismProperty.RespectsIso @AlgebraicGeometry.UniversallyInjective","decl":"theorem UniversallyInjective.respectsIso : RespectsIso @UniversallyInjective :=\n  universallyInjective_eq_diagonal.symm ▸ inferInstance\n\n"}
{"name":"AlgebraicGeometry.UniversallyInjective.isStableUnderBaseChange","module":"Mathlib.AlgebraicGeometry.Morphisms.UniversallyInjective","initialProofState":"⊢ CategoryTheory.MorphismProperty.IsStableUnderBaseChange @AlgebraicGeometry.UniversallyInjective","decl":"instance UniversallyInjective.isStableUnderBaseChange :\n    IsStableUnderBaseChange @UniversallyInjective :=\n  universallyInjective_eq_diagonal.symm ▸ inferInstance\n\n"}
{"name":"AlgebraicGeometry.universallyInjective_isStableUnderComposition","module":"Mathlib.AlgebraicGeometry.Morphisms.UniversallyInjective","initialProofState":"⊢ CategoryTheory.MorphismProperty.IsStableUnderComposition @AlgebraicGeometry.UniversallyInjective","decl":"instance universallyInjective_isStableUnderComposition :\n    IsStableUnderComposition @UniversallyInjective :=\n  universallyInjective_eq ▸ inferInstance\n\n"}
{"name":"AlgebraicGeometry.instIsMultiplicativeSchemeUniversallyInjective","module":"Mathlib.AlgebraicGeometry.Morphisms.UniversallyInjective","initialProofState":"⊢ CategoryTheory.MorphismProperty.IsMultiplicative @AlgebraicGeometry.UniversallyInjective","decl":"instance : MorphismProperty.IsMultiplicative @UniversallyInjective where\n  id_mem _ := inferInstance\n\n"}
{"name":"AlgebraicGeometry.universallyInjective_isLocalAtTarget","module":"Mathlib.AlgebraicGeometry.Morphisms.UniversallyInjective","initialProofState":"⊢ AlgebraicGeometry.IsLocalAtTarget @AlgebraicGeometry.UniversallyInjective","decl":"instance universallyInjective_isLocalAtTarget : IsLocalAtTarget @UniversallyInjective :=\n  universallyInjective_eq_diagonal.symm ▸ inferInstance\n\n"}
