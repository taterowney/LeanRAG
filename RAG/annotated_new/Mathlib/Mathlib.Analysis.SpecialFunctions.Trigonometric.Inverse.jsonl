{"name":"Real.arcsin_mem_Icc","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Membership.mem (Set.Icc (Neg.neg (HDiv.hDiv Real.pi 2)) (HDiv.hDiv Real.pi 2)) (Real.arcsin x)","decl":"theorem arcsin_mem_Icc (x : ℝ) : arcsin x ∈ Icc (-(π / 2)) (π / 2) :=\n  Subtype.coe_prop _\n\n"}
{"name":"Real.range_arcsin","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"⊢ Eq (Set.range Real.arcsin) (Set.Icc (Neg.neg (HDiv.hDiv Real.pi 2)) (HDiv.hDiv Real.pi 2))","decl":"@[simp]\ntheorem range_arcsin : range arcsin = Icc (-(π / 2)) (π / 2) := by\n  rw [arcsin, range_comp Subtype.val]\n  simp [Icc]\n\n"}
{"name":"Real.arcsin_le_pi_div_two","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ LE.le (Real.arcsin x) (HDiv.hDiv Real.pi 2)","decl":"theorem arcsin_le_pi_div_two (x : ℝ) : arcsin x ≤ π / 2 :=\n  (arcsin_mem_Icc x).2\n\n"}
{"name":"Real.neg_pi_div_two_le_arcsin","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ LE.le (Neg.neg (HDiv.hDiv Real.pi 2)) (Real.arcsin x)","decl":"theorem neg_pi_div_two_le_arcsin (x : ℝ) : -(π / 2) ≤ arcsin x :=\n  (arcsin_mem_Icc x).1\n\n"}
{"name":"Real.arcsin_projIcc","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Eq (Real.arcsin ↑(Set.projIcc (-1) 1 ⋯ x)) (Real.arcsin x)","decl":"theorem arcsin_projIcc (x : ℝ) :\n    arcsin (projIcc (-1) 1 (neg_le_self zero_le_one) x) = arcsin x := by\n  rw [arcsin, Function.comp_apply, IccExtend_val, Function.comp_apply, IccExtend,\n        Function.comp_apply]\n\n"}
{"name":"Real.sin_arcsin'","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\nhx : Membership.mem (Set.Icc (-1) 1) x\n⊢ Eq (Real.sin (Real.arcsin x)) x","decl":"theorem sin_arcsin' {x : ℝ} (hx : x ∈ Icc (-1 : ℝ) 1) : sin (arcsin x) = x := by\n  simpa [arcsin, IccExtend_of_mem _ _ hx, -OrderIso.apply_symm_apply] using\n    Subtype.ext_iff.1 (sinOrderIso.apply_symm_apply ⟨x, hx⟩)\n\n"}
{"name":"Real.sin_arcsin","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\nhx₁ : LE.le (-1) x\nhx₂ : LE.le x 1\n⊢ Eq (Real.sin (Real.arcsin x)) x","decl":"theorem sin_arcsin {x : ℝ} (hx₁ : -1 ≤ x) (hx₂ : x ≤ 1) : sin (arcsin x) = x :=\n  sin_arcsin' ⟨hx₁, hx₂⟩\n\n"}
{"name":"Real.arcsin_sin'","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\nhx : Membership.mem (Set.Icc (Neg.neg (HDiv.hDiv Real.pi 2)) (HDiv.hDiv Real.pi 2)) x\n⊢ Eq (Real.arcsin (Real.sin x)) x","decl":"theorem arcsin_sin' {x : ℝ} (hx : x ∈ Icc (-(π / 2)) (π / 2)) : arcsin (sin x) = x :=\n  injOn_sin (arcsin_mem_Icc _) hx <| by rw [sin_arcsin (neg_one_le_sin _) (sin_le_one _)]\n\n"}
{"name":"Real.arcsin_sin","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\nhx₁ : LE.le (Neg.neg (HDiv.hDiv Real.pi 2)) x\nhx₂ : LE.le x (HDiv.hDiv Real.pi 2)\n⊢ Eq (Real.arcsin (Real.sin x)) x","decl":"theorem arcsin_sin {x : ℝ} (hx₁ : -(π / 2) ≤ x) (hx₂ : x ≤ π / 2) : arcsin (sin x) = x :=\n  arcsin_sin' ⟨hx₁, hx₂⟩\n\n"}
{"name":"Real.strictMonoOn_arcsin","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"⊢ StrictMonoOn Real.arcsin (Set.Icc (-1) 1)","decl":"theorem strictMonoOn_arcsin : StrictMonoOn arcsin (Icc (-1) 1) :=\n  (Subtype.strictMono_coe _).comp_strictMonoOn <|\n    sinOrderIso.symm.strictMono.strictMonoOn_IccExtend _\n\n"}
{"name":"Real.monotone_arcsin","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"⊢ Monotone Real.arcsin","decl":"theorem monotone_arcsin : Monotone arcsin :=\n  (Subtype.mono_coe _).comp <| sinOrderIso.symm.monotone.IccExtend _\n\n"}
{"name":"Real.injOn_arcsin","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"⊢ Set.InjOn Real.arcsin (Set.Icc (-1) 1)","decl":"theorem injOn_arcsin : InjOn arcsin (Icc (-1) 1) :=\n  strictMonoOn_arcsin.injOn\n\n"}
{"name":"Real.arcsin_inj","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x y : Real\nhx₁ : LE.le (-1) x\nhx₂ : LE.le x 1\nhy₁ : LE.le (-1) y\nhy₂ : LE.le y 1\n⊢ Iff (Eq (Real.arcsin x) (Real.arcsin y)) (Eq x y)","decl":"theorem arcsin_inj {x y : ℝ} (hx₁ : -1 ≤ x) (hx₂ : x ≤ 1) (hy₁ : -1 ≤ y) (hy₂ : y ≤ 1) :\n    arcsin x = arcsin y ↔ x = y :=\n  injOn_arcsin.eq_iff ⟨hx₁, hx₂⟩ ⟨hy₁, hy₂⟩\n\n"}
{"name":"Real.continuous_arcsin","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"⊢ Continuous Real.arcsin","decl":"@[continuity]\ntheorem continuous_arcsin : Continuous arcsin :=\n  continuous_subtype_val.comp sinOrderIso.symm.continuous.Icc_extend'\n\n"}
{"name":"Real.continuousAt_arcsin","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ ContinuousAt Real.arcsin x","decl":"theorem continuousAt_arcsin {x : ℝ} : ContinuousAt arcsin x :=\n  continuous_arcsin.continuousAt\n\n"}
{"name":"Real.arcsin_eq_of_sin_eq","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x y : Real\nh₁ : Eq (Real.sin x) y\nh₂ : Membership.mem (Set.Icc (Neg.neg (HDiv.hDiv Real.pi 2)) (HDiv.hDiv Real.pi 2)) x\n⊢ Eq (Real.arcsin y) x","decl":"theorem arcsin_eq_of_sin_eq {x y : ℝ} (h₁ : sin x = y) (h₂ : x ∈ Icc (-(π / 2)) (π / 2)) :\n    arcsin y = x := by\n  subst y\n  exact injOn_sin (arcsin_mem_Icc _) h₂ (sin_arcsin' (sin_mem_Icc x))\n\n"}
{"name":"Real.arcsin_zero","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"⊢ Eq (Real.arcsin 0) 0","decl":"@[simp]\ntheorem arcsin_zero : arcsin 0 = 0 :=\n  arcsin_eq_of_sin_eq sin_zero ⟨neg_nonpos.2 pi_div_two_pos.le, pi_div_two_pos.le⟩\n\n"}
{"name":"Real.arcsin_one","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"⊢ Eq (Real.arcsin 1) (HDiv.hDiv Real.pi 2)","decl":"@[simp]\ntheorem arcsin_one : arcsin 1 = π / 2 :=\n  arcsin_eq_of_sin_eq sin_pi_div_two <| right_mem_Icc.2 (neg_le_self pi_div_two_pos.le)\n\n"}
{"name":"Real.arcsin_of_one_le","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\nhx : LE.le 1 x\n⊢ Eq (Real.arcsin x) (HDiv.hDiv Real.pi 2)","decl":"theorem arcsin_of_one_le {x : ℝ} (hx : 1 ≤ x) : arcsin x = π / 2 := by\n  rw [← arcsin_projIcc, projIcc_of_right_le _ hx, Subtype.coe_mk, arcsin_one]\n\n"}
{"name":"Real.arcsin_neg_one","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"⊢ Eq (Real.arcsin (-1)) (Neg.neg (HDiv.hDiv Real.pi 2))","decl":"theorem arcsin_neg_one : arcsin (-1) = -(π / 2) :=\n  arcsin_eq_of_sin_eq (by rw [sin_neg, sin_pi_div_two]) <|\n    left_mem_Icc.2 (neg_le_self pi_div_two_pos.le)\n\n"}
{"name":"Real.arcsin_of_le_neg_one","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\nhx : LE.le x (-1)\n⊢ Eq (Real.arcsin x) (Neg.neg (HDiv.hDiv Real.pi 2))","decl":"theorem arcsin_of_le_neg_one {x : ℝ} (hx : x ≤ -1) : arcsin x = -(π / 2) := by\n  rw [← arcsin_projIcc, projIcc_of_le_left _ hx, Subtype.coe_mk, arcsin_neg_one]\n\n"}
{"name":"Real.arcsin_neg","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Eq (Real.arcsin (Neg.neg x)) (Neg.neg (Real.arcsin x))","decl":"@[simp]\ntheorem arcsin_neg (x : ℝ) : arcsin (-x) = -arcsin x := by\n  rcases le_total x (-1) with hx₁ | hx₁\n  · rw [arcsin_of_le_neg_one hx₁, neg_neg, arcsin_of_one_le (le_neg.2 hx₁)]\n  rcases le_total 1 x with hx₂ | hx₂\n  · rw [arcsin_of_one_le hx₂, arcsin_of_le_neg_one (neg_le_neg hx₂)]\n  refine arcsin_eq_of_sin_eq ?_ ?_\n  · rw [sin_neg, sin_arcsin hx₁ hx₂]\n  · exact ⟨neg_le_neg (arcsin_le_pi_div_two _), neg_le.2 (neg_pi_div_two_le_arcsin _)⟩\n\n"}
{"name":"Real.arcsin_le_iff_le_sin","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x y : Real\nhx : Membership.mem (Set.Icc (-1) 1) x\nhy : Membership.mem (Set.Icc (Neg.neg (HDiv.hDiv Real.pi 2)) (HDiv.hDiv Real.pi 2)) y\n⊢ Iff (LE.le (Real.arcsin x) y) (LE.le x (Real.sin y))","decl":"theorem arcsin_le_iff_le_sin {x y : ℝ} (hx : x ∈ Icc (-1 : ℝ) 1) (hy : y ∈ Icc (-(π / 2)) (π / 2)) :\n    arcsin x ≤ y ↔ x ≤ sin y := by\n  rw [← arcsin_sin' hy, strictMonoOn_arcsin.le_iff_le hx (sin_mem_Icc _), arcsin_sin' hy]\n\n"}
{"name":"Real.arcsin_le_iff_le_sin'","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x y : Real\nhy : Membership.mem (Set.Ico (Neg.neg (HDiv.hDiv Real.pi 2)) (HDiv.hDiv Real.pi 2)) y\n⊢ Iff (LE.le (Real.arcsin x) y) (LE.le x (Real.sin y))","decl":"theorem arcsin_le_iff_le_sin' {x y : ℝ} (hy : y ∈ Ico (-(π / 2)) (π / 2)) :\n    arcsin x ≤ y ↔ x ≤ sin y := by\n  rcases le_total x (-1) with hx₁ | hx₁\n  · simp [arcsin_of_le_neg_one hx₁, hy.1, hx₁.trans (neg_one_le_sin _)]\n  cases' lt_or_le 1 x with hx₂ hx₂\n  · simp [arcsin_of_one_le hx₂.le, hy.2.not_le, (sin_le_one y).trans_lt hx₂]\n  exact arcsin_le_iff_le_sin ⟨hx₁, hx₂⟩ (mem_Icc_of_Ico hy)\n\n"}
{"name":"Real.le_arcsin_iff_sin_le","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x y : Real\nhx : Membership.mem (Set.Icc (Neg.neg (HDiv.hDiv Real.pi 2)) (HDiv.hDiv Real.pi 2)) x\nhy : Membership.mem (Set.Icc (-1) 1) y\n⊢ Iff (LE.le x (Real.arcsin y)) (LE.le (Real.sin x) y)","decl":"theorem le_arcsin_iff_sin_le {x y : ℝ} (hx : x ∈ Icc (-(π / 2)) (π / 2)) (hy : y ∈ Icc (-1 : ℝ) 1) :\n    x ≤ arcsin y ↔ sin x ≤ y := by\n  rw [← neg_le_neg_iff, ← arcsin_neg,\n    arcsin_le_iff_le_sin ⟨neg_le_neg hy.2, neg_le.2 hy.1⟩ ⟨neg_le_neg hx.2, neg_le.2 hx.1⟩, sin_neg,\n    neg_le_neg_iff]\n\n"}
{"name":"Real.le_arcsin_iff_sin_le'","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x y : Real\nhx : Membership.mem (Set.Ioc (Neg.neg (HDiv.hDiv Real.pi 2)) (HDiv.hDiv Real.pi 2)) x\n⊢ Iff (LE.le x (Real.arcsin y)) (LE.le (Real.sin x) y)","decl":"theorem le_arcsin_iff_sin_le' {x y : ℝ} (hx : x ∈ Ioc (-(π / 2)) (π / 2)) :\n    x ≤ arcsin y ↔ sin x ≤ y := by\n  rw [← neg_le_neg_iff, ← arcsin_neg, arcsin_le_iff_le_sin' ⟨neg_le_neg hx.2, neg_lt.2 hx.1⟩,\n    sin_neg, neg_le_neg_iff]\n\n"}
{"name":"Real.arcsin_lt_iff_lt_sin","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x y : Real\nhx : Membership.mem (Set.Icc (-1) 1) x\nhy : Membership.mem (Set.Icc (Neg.neg (HDiv.hDiv Real.pi 2)) (HDiv.hDiv Real.pi 2)) y\n⊢ Iff (LT.lt (Real.arcsin x) y) (LT.lt x (Real.sin y))","decl":"theorem arcsin_lt_iff_lt_sin {x y : ℝ} (hx : x ∈ Icc (-1 : ℝ) 1) (hy : y ∈ Icc (-(π / 2)) (π / 2)) :\n    arcsin x < y ↔ x < sin y :=\n  not_le.symm.trans <| (not_congr <| le_arcsin_iff_sin_le hy hx).trans not_le\n\n"}
{"name":"Real.arcsin_lt_iff_lt_sin'","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x y : Real\nhy : Membership.mem (Set.Ioc (Neg.neg (HDiv.hDiv Real.pi 2)) (HDiv.hDiv Real.pi 2)) y\n⊢ Iff (LT.lt (Real.arcsin x) y) (LT.lt x (Real.sin y))","decl":"theorem arcsin_lt_iff_lt_sin' {x y : ℝ} (hy : y ∈ Ioc (-(π / 2)) (π / 2)) :\n    arcsin x < y ↔ x < sin y :=\n  not_le.symm.trans <| (not_congr <| le_arcsin_iff_sin_le' hy).trans not_le\n\n"}
{"name":"Real.lt_arcsin_iff_sin_lt","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x y : Real\nhx : Membership.mem (Set.Icc (Neg.neg (HDiv.hDiv Real.pi 2)) (HDiv.hDiv Real.pi 2)) x\nhy : Membership.mem (Set.Icc (-1) 1) y\n⊢ Iff (LT.lt x (Real.arcsin y)) (LT.lt (Real.sin x) y)","decl":"theorem lt_arcsin_iff_sin_lt {x y : ℝ} (hx : x ∈ Icc (-(π / 2)) (π / 2)) (hy : y ∈ Icc (-1 : ℝ) 1) :\n    x < arcsin y ↔ sin x < y :=\n  not_le.symm.trans <| (not_congr <| arcsin_le_iff_le_sin hy hx).trans not_le\n\n"}
{"name":"Real.lt_arcsin_iff_sin_lt'","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x y : Real\nhx : Membership.mem (Set.Ico (Neg.neg (HDiv.hDiv Real.pi 2)) (HDiv.hDiv Real.pi 2)) x\n⊢ Iff (LT.lt x (Real.arcsin y)) (LT.lt (Real.sin x) y)","decl":"theorem lt_arcsin_iff_sin_lt' {x y : ℝ} (hx : x ∈ Ico (-(π / 2)) (π / 2)) :\n    x < arcsin y ↔ sin x < y :=\n  not_le.symm.trans <| (not_congr <| arcsin_le_iff_le_sin' hx).trans not_le\n\n"}
{"name":"Real.arcsin_eq_iff_eq_sin","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x y : Real\nhy : Membership.mem (Set.Ioo (Neg.neg (HDiv.hDiv Real.pi 2)) (HDiv.hDiv Real.pi 2)) y\n⊢ Iff (Eq (Real.arcsin x) y) (Eq x (Real.sin y))","decl":"theorem arcsin_eq_iff_eq_sin {x y : ℝ} (hy : y ∈ Ioo (-(π / 2)) (π / 2)) :\n    arcsin x = y ↔ x = sin y := by\n  simp only [le_antisymm_iff, arcsin_le_iff_le_sin' (mem_Ico_of_Ioo hy),\n    le_arcsin_iff_sin_le' (mem_Ioc_of_Ioo hy)]\n\n"}
{"name":"Real.arcsin_nonneg","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Iff (LE.le 0 (Real.arcsin x)) (LE.le 0 x)","decl":"@[simp]\ntheorem arcsin_nonneg {x : ℝ} : 0 ≤ arcsin x ↔ 0 ≤ x :=\n  (le_arcsin_iff_sin_le' ⟨neg_lt_zero.2 pi_div_two_pos, pi_div_two_pos.le⟩).trans <| by\n    rw [sin_zero]\n\n"}
{"name":"Real.arcsin_nonpos","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Iff (LE.le (Real.arcsin x) 0) (LE.le x 0)","decl":"@[simp]\ntheorem arcsin_nonpos {x : ℝ} : arcsin x ≤ 0 ↔ x ≤ 0 :=\n  neg_nonneg.symm.trans <| arcsin_neg x ▸ arcsin_nonneg.trans neg_nonneg\n\n"}
{"name":"Real.arcsin_eq_zero_iff","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Iff (Eq (Real.arcsin x) 0) (Eq x 0)","decl":"@[simp]\ntheorem arcsin_eq_zero_iff {x : ℝ} : arcsin x = 0 ↔ x = 0 := by simp [le_antisymm_iff]\n\n"}
{"name":"Real.zero_eq_arcsin_iff","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Iff (Eq 0 (Real.arcsin x)) (Eq x 0)","decl":"@[simp]\ntheorem zero_eq_arcsin_iff {x} : 0 = arcsin x ↔ x = 0 :=\n  eq_comm.trans arcsin_eq_zero_iff\n\n"}
{"name":"Real.arcsin_pos","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Iff (LT.lt 0 (Real.arcsin x)) (LT.lt 0 x)","decl":"@[simp]\ntheorem arcsin_pos {x : ℝ} : 0 < arcsin x ↔ 0 < x :=\n  lt_iff_lt_of_le_iff_le arcsin_nonpos\n\n"}
{"name":"Real.arcsin_lt_zero","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Iff (LT.lt (Real.arcsin x) 0) (LT.lt x 0)","decl":"@[simp]\ntheorem arcsin_lt_zero {x : ℝ} : arcsin x < 0 ↔ x < 0 :=\n  lt_iff_lt_of_le_iff_le arcsin_nonneg\n\n"}
{"name":"Real.arcsin_lt_pi_div_two","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Iff (LT.lt (Real.arcsin x) (HDiv.hDiv Real.pi 2)) (LT.lt x 1)","decl":"@[simp]\ntheorem arcsin_lt_pi_div_two {x : ℝ} : arcsin x < π / 2 ↔ x < 1 :=\n  (arcsin_lt_iff_lt_sin' (right_mem_Ioc.2 <| neg_lt_self pi_div_two_pos)).trans <| by\n    rw [sin_pi_div_two]\n\n"}
{"name":"Real.neg_pi_div_two_lt_arcsin","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Iff (LT.lt (Neg.neg (HDiv.hDiv Real.pi 2)) (Real.arcsin x)) (LT.lt (-1) x)","decl":"@[simp]\ntheorem neg_pi_div_two_lt_arcsin {x : ℝ} : -(π / 2) < arcsin x ↔ -1 < x :=\n  (lt_arcsin_iff_sin_lt' <| left_mem_Ico.2 <| neg_lt_self pi_div_two_pos).trans <| by\n    rw [sin_neg, sin_pi_div_two]\n\n"}
{"name":"Real.arcsin_eq_pi_div_two","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Iff (Eq (Real.arcsin x) (HDiv.hDiv Real.pi 2)) (LE.le 1 x)","decl":"@[simp]\ntheorem arcsin_eq_pi_div_two {x : ℝ} : arcsin x = π / 2 ↔ 1 ≤ x :=\n  ⟨fun h => not_lt.1 fun h' => (arcsin_lt_pi_div_two.2 h').ne h, arcsin_of_one_le⟩\n\n"}
{"name":"Real.pi_div_two_eq_arcsin","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Iff (Eq (HDiv.hDiv Real.pi 2) (Real.arcsin x)) (LE.le 1 x)","decl":"@[simp]\ntheorem pi_div_two_eq_arcsin {x} : π / 2 = arcsin x ↔ 1 ≤ x :=\n  eq_comm.trans arcsin_eq_pi_div_two\n\n"}
{"name":"Real.pi_div_two_le_arcsin","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Iff (LE.le (HDiv.hDiv Real.pi 2) (Real.arcsin x)) (LE.le 1 x)","decl":"@[simp]\ntheorem pi_div_two_le_arcsin {x} : π / 2 ≤ arcsin x ↔ 1 ≤ x :=\n  (arcsin_le_pi_div_two x).le_iff_eq.trans pi_div_two_eq_arcsin\n\n"}
{"name":"Real.arcsin_eq_neg_pi_div_two","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Iff (Eq (Real.arcsin x) (Neg.neg (HDiv.hDiv Real.pi 2))) (LE.le x (-1))","decl":"@[simp]\ntheorem arcsin_eq_neg_pi_div_two {x : ℝ} : arcsin x = -(π / 2) ↔ x ≤ -1 :=\n  ⟨fun h => not_lt.1 fun h' => (neg_pi_div_two_lt_arcsin.2 h').ne' h, arcsin_of_le_neg_one⟩\n\n"}
{"name":"Real.neg_pi_div_two_eq_arcsin","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Iff (Eq (Neg.neg (HDiv.hDiv Real.pi 2)) (Real.arcsin x)) (LE.le x (-1))","decl":"@[simp]\ntheorem neg_pi_div_two_eq_arcsin {x} : -(π / 2) = arcsin x ↔ x ≤ -1 :=\n  eq_comm.trans arcsin_eq_neg_pi_div_two\n\n"}
{"name":"Real.arcsin_le_neg_pi_div_two","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Iff (LE.le (Real.arcsin x) (Neg.neg (HDiv.hDiv Real.pi 2))) (LE.le x (-1))","decl":"@[simp]\ntheorem arcsin_le_neg_pi_div_two {x} : arcsin x ≤ -(π / 2) ↔ x ≤ -1 :=\n  (neg_pi_div_two_le_arcsin x).le_iff_eq.trans arcsin_eq_neg_pi_div_two\n\n"}
{"name":"Real.pi_div_four_le_arcsin","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Iff (LE.le (HDiv.hDiv Real.pi 4) (Real.arcsin x)) (LE.le (HDiv.hDiv (Real.sqrt 2) 2) x)","decl":"@[simp]\ntheorem pi_div_four_le_arcsin {x} : π / 4 ≤ arcsin x ↔ √2 / 2 ≤ x := by\n  rw [← sin_pi_div_four, le_arcsin_iff_sin_le']\n  have := pi_pos\n  constructor <;> linarith\n\n"}
{"name":"Real.mapsTo_sin_Ioo","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"⊢ Set.MapsTo Real.sin (Set.Ioo (Neg.neg (HDiv.hDiv Real.pi 2)) (HDiv.hDiv Real.pi 2)) (Set.Ioo (-1) 1)","decl":"theorem mapsTo_sin_Ioo : MapsTo sin (Ioo (-(π / 2)) (π / 2)) (Ioo (-1) 1) := fun x h => by\n  rwa [mem_Ioo, ← arcsin_lt_pi_div_two, ← neg_pi_div_two_lt_arcsin, arcsin_sin h.1.le h.2.le]\n\n"}
{"name":"Real.cos_arcsin_nonneg","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ LE.le 0 (Real.cos (Real.arcsin x))","decl":"theorem cos_arcsin_nonneg (x : ℝ) : 0 ≤ cos (arcsin x) :=\n  cos_nonneg_of_mem_Icc ⟨neg_pi_div_two_le_arcsin _, arcsin_le_pi_div_two _⟩\n\n-- The junk values for `arcsin` and `sqrt` make this true even outside `[-1, 1]`.\n"}
{"name":"Real.cos_arcsin","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Eq (Real.cos (Real.arcsin x)) (HSub.hSub 1 (HPow.hPow x 2)).sqrt","decl":"theorem cos_arcsin (x : ℝ) : cos (arcsin x) = √(1 - x ^ 2) := by\n  by_cases hx₁ : -1 ≤ x; swap\n  · rw [not_le] at hx₁\n    rw [arcsin_of_le_neg_one hx₁.le, cos_neg, cos_pi_div_two, sqrt_eq_zero_of_nonpos]\n    nlinarith\n  by_cases hx₂ : x ≤ 1; swap\n  · rw [not_le] at hx₂\n    rw [arcsin_of_one_le hx₂.le, cos_pi_div_two, sqrt_eq_zero_of_nonpos]\n    nlinarith\n  have : sin (arcsin x) ^ 2 + cos (arcsin x) ^ 2 = 1 := sin_sq_add_cos_sq (arcsin x)\n  rw [← eq_sub_iff_add_eq', ← sqrt_inj (sq_nonneg _) (sub_nonneg.2 (sin_sq_le_one (arcsin x))), sq,\n    sqrt_mul_self (cos_arcsin_nonneg _)] at this\n  rw [this, sin_arcsin hx₁ hx₂]\n\n-- The junk values for `arcsin` and `sqrt` make this true even outside `[-1, 1]`.\n"}
{"name":"Real.tan_arcsin","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Eq (Real.tan (Real.arcsin x)) (HDiv.hDiv x (HSub.hSub 1 (HPow.hPow x 2)).sqrt)","decl":"theorem tan_arcsin (x : ℝ) : tan (arcsin x) = x / √(1 - x ^ 2) := by\n  rw [tan_eq_sin_div_cos, cos_arcsin]\n  by_cases hx₁ : -1 ≤ x; swap\n  · have h : √(1 - x ^ 2) = 0 := sqrt_eq_zero_of_nonpos (by nlinarith)\n    rw [h]\n    simp\n  by_cases hx₂ : x ≤ 1; swap\n  · have h : √(1 - x ^ 2) = 0 := sqrt_eq_zero_of_nonpos (by nlinarith)\n    rw [h]\n    simp\n  rw [sin_arcsin hx₁ hx₂]\n\n"}
{"name":"Real.arccos_eq_pi_div_two_sub_arcsin","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Eq (Real.arccos x) (HSub.hSub (HDiv.hDiv Real.pi 2) (Real.arcsin x))","decl":"theorem arccos_eq_pi_div_two_sub_arcsin (x : ℝ) : arccos x = π / 2 - arcsin x :=\n  rfl\n\n"}
{"name":"Real.arcsin_eq_pi_div_two_sub_arccos","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Eq (Real.arcsin x) (HSub.hSub (HDiv.hDiv Real.pi 2) (Real.arccos x))","decl":"theorem arcsin_eq_pi_div_two_sub_arccos (x : ℝ) : arcsin x = π / 2 - arccos x := by simp [arccos]\n\n"}
{"name":"Real.arccos_le_pi","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ LE.le (Real.arccos x) Real.pi","decl":"theorem arccos_le_pi (x : ℝ) : arccos x ≤ π := by\n  unfold arccos; linarith [neg_pi_div_two_le_arcsin x]\n\n"}
{"name":"Real.arccos_nonneg","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ LE.le 0 (Real.arccos x)","decl":"theorem arccos_nonneg (x : ℝ) : 0 ≤ arccos x := by\n  unfold arccos; linarith [arcsin_le_pi_div_two x]\n\n"}
{"name":"Real.arccos_pos","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Iff (LT.lt 0 (Real.arccos x)) (LT.lt x 1)","decl":"@[simp]\ntheorem arccos_pos {x : ℝ} : 0 < arccos x ↔ x < 1 := by simp [arccos]\n\n"}
{"name":"Real.cos_arccos","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\nhx₁ : LE.le (-1) x\nhx₂ : LE.le x 1\n⊢ Eq (Real.cos (Real.arccos x)) x","decl":"theorem cos_arccos {x : ℝ} (hx₁ : -1 ≤ x) (hx₂ : x ≤ 1) : cos (arccos x) = x := by\n  rw [arccos, cos_pi_div_two_sub, sin_arcsin hx₁ hx₂]\n\n"}
{"name":"Real.arccos_cos","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\nhx₁ : LE.le 0 x\nhx₂ : LE.le x Real.pi\n⊢ Eq (Real.arccos (Real.cos x)) x","decl":"theorem arccos_cos {x : ℝ} (hx₁ : 0 ≤ x) (hx₂ : x ≤ π) : arccos (cos x) = x := by\n  rw [arccos, ← sin_pi_div_two_sub, arcsin_sin] <;> simp [sub_eq_add_neg] <;> linarith\n\n"}
{"name":"Real.arccos_eq_of_eq_cos","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x y : Real\nhy₀ : LE.le 0 y\nhy₁ : LE.le y Real.pi\nhxy : Eq x (Real.cos y)\n⊢ Eq (Real.arccos x) y","decl":"lemma arccos_eq_of_eq_cos (hy₀ : 0 ≤ y) (hy₁ : y ≤ π) (hxy : x = cos y) : arccos x = y := by\n  rw [hxy, arccos_cos hy₀ hy₁]\n\n"}
{"name":"Real.strictAntiOn_arccos","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"⊢ StrictAntiOn Real.arccos (Set.Icc (-1) 1)","decl":"theorem strictAntiOn_arccos : StrictAntiOn arccos (Icc (-1) 1) := fun _ hx _ hy h =>\n  sub_lt_sub_left (strictMonoOn_arcsin hx hy h) _\n\n"}
{"name":"Real.arccos_injOn","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"⊢ Set.InjOn Real.arccos (Set.Icc (-1) 1)","decl":"theorem arccos_injOn : InjOn arccos (Icc (-1) 1) :=\n  strictAntiOn_arccos.injOn\n\n"}
{"name":"Real.arccos_inj","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x y : Real\nhx₁ : LE.le (-1) x\nhx₂ : LE.le x 1\nhy₁ : LE.le (-1) y\nhy₂ : LE.le y 1\n⊢ Iff (Eq (Real.arccos x) (Real.arccos y)) (Eq x y)","decl":"theorem arccos_inj {x y : ℝ} (hx₁ : -1 ≤ x) (hx₂ : x ≤ 1) (hy₁ : -1 ≤ y) (hy₂ : y ≤ 1) :\n    arccos x = arccos y ↔ x = y :=\n  arccos_injOn.eq_iff ⟨hx₁, hx₂⟩ ⟨hy₁, hy₂⟩\n\n"}
{"name":"Real.arccos_zero","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"⊢ Eq (Real.arccos 0) (HDiv.hDiv Real.pi 2)","decl":"@[simp]\ntheorem arccos_zero : arccos 0 = π / 2 := by simp [arccos]\n\n"}
{"name":"Real.arccos_one","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"⊢ Eq (Real.arccos 1) 0","decl":"@[simp]\ntheorem arccos_one : arccos 1 = 0 := by simp [arccos]\n\n"}
{"name":"Real.arccos_neg_one","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"⊢ Eq (Real.arccos (-1)) Real.pi","decl":"@[simp]\ntheorem arccos_neg_one : arccos (-1) = π := by simp [arccos, add_halves]\n\n"}
{"name":"Real.arccos_eq_zero","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Iff (Eq (Real.arccos x) 0) (LE.le 1 x)","decl":"@[simp]\ntheorem arccos_eq_zero {x} : arccos x = 0 ↔ 1 ≤ x := by simp [arccos, sub_eq_zero]\n\n"}
{"name":"Real.arccos_eq_pi_div_two","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Iff (Eq (Real.arccos x) (HDiv.hDiv Real.pi 2)) (Eq x 0)","decl":"@[simp]\ntheorem arccos_eq_pi_div_two {x} : arccos x = π / 2 ↔ x = 0 := by simp [arccos]\n\n"}
{"name":"Real.arccos_eq_pi","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Iff (Eq (Real.arccos x) Real.pi) (LE.le x (-1))","decl":"@[simp]\ntheorem arccos_eq_pi {x} : arccos x = π ↔ x ≤ -1 := by\n  rw [arccos, sub_eq_iff_eq_add, ← sub_eq_iff_eq_add', div_two_sub_self, neg_pi_div_two_eq_arcsin]\n\n"}
{"name":"Real.arccos_neg","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Eq (Real.arccos (Neg.neg x)) (HSub.hSub Real.pi (Real.arccos x))","decl":"theorem arccos_neg (x : ℝ) : arccos (-x) = π - arccos x := by\n  rw [← add_halves π, arccos, arcsin_neg, arccos, add_sub_assoc, sub_sub_self, sub_neg_eq_add]\n\n"}
{"name":"Real.arccos_of_one_le","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\nhx : LE.le 1 x\n⊢ Eq (Real.arccos x) 0","decl":"theorem arccos_of_one_le {x : ℝ} (hx : 1 ≤ x) : arccos x = 0 := by\n  rw [arccos, arcsin_of_one_le hx, sub_self]\n\n"}
{"name":"Real.arccos_of_le_neg_one","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\nhx : LE.le x (-1)\n⊢ Eq (Real.arccos x) Real.pi","decl":"theorem arccos_of_le_neg_one {x : ℝ} (hx : x ≤ -1) : arccos x = π := by\n  rw [arccos, arcsin_of_le_neg_one hx, sub_neg_eq_add, add_halves]\n\n-- The junk values for `arccos` and `sqrt` make this true even outside `[-1, 1]`.\n"}
{"name":"Real.sin_arccos","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Eq (Real.sin (Real.arccos x)) (HSub.hSub 1 (HPow.hPow x 2)).sqrt","decl":"theorem sin_arccos (x : ℝ) : sin (arccos x) = √(1 - x ^ 2) := by\n  by_cases hx₁ : -1 ≤ x; swap\n  · rw [not_le] at hx₁\n    rw [arccos_of_le_neg_one hx₁.le, sin_pi, sqrt_eq_zero_of_nonpos]\n    nlinarith\n  by_cases hx₂ : x ≤ 1; swap\n  · rw [not_le] at hx₂\n    rw [arccos_of_one_le hx₂.le, sin_zero, sqrt_eq_zero_of_nonpos]\n    nlinarith\n  rw [arccos_eq_pi_div_two_sub_arcsin, sin_pi_div_two_sub, cos_arcsin]\n\n"}
{"name":"Real.arccos_le_pi_div_two","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Iff (LE.le (Real.arccos x) (HDiv.hDiv Real.pi 2)) (LE.le 0 x)","decl":"@[simp]\ntheorem arccos_le_pi_div_two {x} : arccos x ≤ π / 2 ↔ 0 ≤ x := by simp [arccos]\n\n"}
{"name":"Real.arccos_lt_pi_div_two","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Iff (LT.lt (Real.arccos x) (HDiv.hDiv Real.pi 2)) (LT.lt 0 x)","decl":"@[simp]\ntheorem arccos_lt_pi_div_two {x : ℝ} : arccos x < π / 2 ↔ 0 < x := by simp [arccos]\n\n"}
{"name":"Real.arccos_le_pi_div_four","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Iff (LE.le (Real.arccos x) (HDiv.hDiv Real.pi 4)) (LE.le (HDiv.hDiv (Real.sqrt 2) 2) x)","decl":"@[simp]\ntheorem arccos_le_pi_div_four {x} : arccos x ≤ π / 4 ↔ √2 / 2 ≤ x := by\n  rw [arccos, ← pi_div_four_le_arcsin]\n  constructor <;>\n    · intro\n      linarith\n\n"}
{"name":"Real.continuous_arccos","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"⊢ Continuous Real.arccos","decl":"@[continuity]\ntheorem continuous_arccos : Continuous arccos :=\n  continuous_const.sub continuous_arcsin\n\n-- The junk values for `arccos` and `sqrt` make this true even outside `[-1, 1]`.\n"}
{"name":"Real.tan_arccos","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\n⊢ Eq (Real.tan (Real.arccos x)) (HDiv.hDiv (HSub.hSub 1 (HPow.hPow x 2)).sqrt x)","decl":"theorem tan_arccos (x : ℝ) : tan (arccos x) = √(1 - x ^ 2) / x := by\n  rw [arccos, tan_pi_div_two_sub, tan_arcsin, inv_div]\n\n-- The junk values for `arccos` and `sqrt` make this true even for `1 < x`.\n"}
{"name":"Real.arccos_eq_arcsin","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\nh : LE.le 0 x\n⊢ Eq (Real.arccos x) (Real.arcsin (HSub.hSub 1 (HPow.hPow x 2)).sqrt)","decl":"theorem arccos_eq_arcsin {x : ℝ} (h : 0 ≤ x) : arccos x = arcsin (√(1 - x ^ 2)) :=\n  (arcsin_eq_of_sin_eq (sin_arccos _)\n      ⟨(Left.neg_nonpos_iff.2 (div_nonneg pi_pos.le (by norm_num))).trans (arccos_nonneg _),\n        arccos_le_pi_div_two.2 h⟩).symm\n\n-- The junk values for `arcsin` and `sqrt` make this true even for `1 < x`.\n"}
{"name":"Real.arcsin_eq_arccos","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse","initialProofState":"x : Real\nh : LE.le 0 x\n⊢ Eq (Real.arcsin x) (Real.arccos (HSub.hSub 1 (HPow.hPow x 2)).sqrt)","decl":"theorem arcsin_eq_arccos {x : ℝ} (h : 0 ≤ x) : arcsin x = arccos (√(1 - x ^ 2)) := by\n  rw [eq_comm, ← cos_arcsin]\n  exact\n    arccos_cos (arcsin_nonneg.2 h)\n      ((arcsin_le_pi_div_two _).trans (div_le_self pi_pos.le one_le_two))\n\n"}
