{"name":"MulMemClass.mul_mem","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"S : Type u_3\nM : outParam (Type u_4)\ninst✝¹ : Mul M\ninst✝ : SetLike S M\nself : MulMemClass S M\ns : S\na b : M\na✝¹ : Membership.mem s a\na✝ : Membership.mem s b\n⊢ Membership.mem s (HMul.hMul a b)","decl":"/-- `MulMemClass S M` says `S` is a type of sets `s : Set M` that are closed under `(*)` -/\nclass MulMemClass (S : Type*) (M : outParam Type*) [Mul M] [SetLike S M] : Prop where\n  /-- A substructure satisfying `MulMemClass` is closed under multiplication. -/\n  mul_mem : ∀ {s : S} {a b : M}, a ∈ s → b ∈ s → a * b ∈ s\n\n"}
{"name":"AddMemClass.add_mem","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"S : Type u_3\nM : outParam (Type u_4)\ninst✝¹ : Add M\ninst✝ : SetLike S M\nself : AddMemClass S M\ns : S\na b : M\na✝¹ : Membership.mem s a\na✝ : Membership.mem s b\n⊢ Membership.mem s (HAdd.hAdd a b)","decl":"/-- `AddMemClass S M` says `S` is a type of sets `s : Set M` that are closed under `(+)` -/\nclass AddMemClass (S : Type*) (M : outParam Type*) [Add M] [SetLike S M] : Prop where\n  /-- A substructure satisfying `AddMemClass` is closed under addition. -/\n  add_mem : ∀ {s : S} {a b : M}, a ∈ s → b ∈ s → a + b ∈ s\n\n"}
{"name":"Subsemigroup.mk.inj","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_3\ninst✝ : Mul M\ncarrier✝ : Set M\nmul_mem'✝ : ∀ {a b : M}, Membership.mem carrier✝ a → Membership.mem carrier✝ b → Membership.mem carrier✝ (HMul.hMul a b)\ncarrier : Set M\nmul_mem' : ∀ {a b : M}, Membership.mem carrier a → Membership.mem carrier b → Membership.mem carrier (HMul.hMul a b)\nx✝ : Eq { carrier := carrier✝, mul_mem' := mul_mem'✝ } { carrier := carrier, mul_mem' := mul_mem' }\n⊢ Eq carrier✝ carrier","decl":"/-- A subsemigroup of a magma `M` is a subset closed under multiplication. -/\nstructure Subsemigroup (M : Type*) [Mul M] where\n  /-- The carrier of a subsemigroup. -/\n  carrier : Set M\n  /-- The product of two elements of a subsemigroup belongs to the subsemigroup. -/\n  mul_mem' {a b} : a ∈ carrier → b ∈ carrier → a * b ∈ carrier\n\n"}
{"name":"Subsemigroup.mk.injEq","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_3\ninst✝ : Mul M\ncarrier✝ : Set M\nmul_mem'✝ : ∀ {a b : M}, Membership.mem carrier✝ a → Membership.mem carrier✝ b → Membership.mem carrier✝ (HMul.hMul a b)\ncarrier : Set M\nmul_mem' : ∀ {a b : M}, Membership.mem carrier a → Membership.mem carrier b → Membership.mem carrier (HMul.hMul a b)\n⊢ Eq (Eq { carrier := carrier✝, mul_mem' := mul_mem'✝ } { carrier := carrier, mul_mem' := mul_mem' }) (Eq carrier✝ carrier)","decl":"/-- A subsemigroup of a magma `M` is a subset closed under multiplication. -/\nstructure Subsemigroup (M : Type*) [Mul M] where\n  /-- The carrier of a subsemigroup. -/\n  carrier : Set M\n  /-- The product of two elements of a subsemigroup belongs to the subsemigroup. -/\n  mul_mem' {a b} : a ∈ carrier → b ∈ carrier → a * b ∈ carrier\n\n"}
{"name":"Subsemigroup.mul_mem'","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_3\ninst✝ : Mul M\nself : Subsemigroup M\na b : M\na✝¹ : Membership.mem self.carrier a\na✝ : Membership.mem self.carrier b\n⊢ Membership.mem self.carrier (HMul.hMul a b)","decl":"/-- A subsemigroup of a magma `M` is a subset closed under multiplication. -/\nstructure Subsemigroup (M : Type*) [Mul M] where\n  /-- The carrier of a subsemigroup. -/\n  carrier : Set M\n  /-- The product of two elements of a subsemigroup belongs to the subsemigroup. -/\n  mul_mem' {a b} : a ∈ carrier → b ∈ carrier → a * b ∈ carrier\n\n"}
{"name":"Subsemigroup.mk.sizeOf_spec","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_3\ninst✝¹ : Mul M\ninst✝ : SizeOf M\ncarrier : Set M\nmul_mem' : ∀ {a b : M}, Membership.mem carrier a → Membership.mem carrier b → Membership.mem carrier (HMul.hMul a b)\n⊢ Eq (SizeOf.sizeOf { carrier := carrier, mul_mem' := mul_mem' }) 1","decl":"/-- A subsemigroup of a magma `M` is a subset closed under multiplication. -/\nstructure Subsemigroup (M : Type*) [Mul M] where\n  /-- The carrier of a subsemigroup. -/\n  carrier : Set M\n  /-- The product of two elements of a subsemigroup belongs to the subsemigroup. -/\n  mul_mem' {a b} : a ∈ carrier → b ∈ carrier → a * b ∈ carrier\n\n"}
{"name":"AddSubsemigroup.mk.injEq","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_3\ninst✝ : Add M\ncarrier✝ : Set M\nadd_mem'✝ : ∀ {a b : M}, Membership.mem carrier✝ a → Membership.mem carrier✝ b → Membership.mem carrier✝ (HAdd.hAdd a b)\ncarrier : Set M\nadd_mem' : ∀ {a b : M}, Membership.mem carrier a → Membership.mem carrier b → Membership.mem carrier (HAdd.hAdd a b)\n⊢ Eq (Eq { carrier := carrier✝, add_mem' := add_mem'✝ } { carrier := carrier, add_mem' := add_mem' }) (Eq carrier✝ carrier)","decl":"/-- An additive subsemigroup of an additive magma `M` is a subset closed under addition. -/\nstructure AddSubsemigroup (M : Type*) [Add M] where\n  /-- The carrier of an additive subsemigroup. -/\n  carrier : Set M\n  /-- The sum of two elements of an additive subsemigroup belongs to the subsemigroup. -/\n  add_mem' {a b} : a ∈ carrier → b ∈ carrier → a + b ∈ carrier\n\n"}
{"name":"AddSubsemigroup.mk.sizeOf_spec","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_3\ninst✝¹ : Add M\ninst✝ : SizeOf M\ncarrier : Set M\nadd_mem' : ∀ {a b : M}, Membership.mem carrier a → Membership.mem carrier b → Membership.mem carrier (HAdd.hAdd a b)\n⊢ Eq (SizeOf.sizeOf { carrier := carrier, add_mem' := add_mem' }) 1","decl":"/-- An additive subsemigroup of an additive magma `M` is a subset closed under addition. -/\nstructure AddSubsemigroup (M : Type*) [Add M] where\n  /-- The carrier of an additive subsemigroup. -/\n  carrier : Set M\n  /-- The sum of two elements of an additive subsemigroup belongs to the subsemigroup. -/\n  add_mem' {a b} : a ∈ carrier → b ∈ carrier → a + b ∈ carrier\n\n"}
{"name":"AddSubsemigroup.mk.inj","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_3\ninst✝ : Add M\ncarrier✝ : Set M\nadd_mem'✝ : ∀ {a b : M}, Membership.mem carrier✝ a → Membership.mem carrier✝ b → Membership.mem carrier✝ (HAdd.hAdd a b)\ncarrier : Set M\nadd_mem' : ∀ {a b : M}, Membership.mem carrier a → Membership.mem carrier b → Membership.mem carrier (HAdd.hAdd a b)\nx✝ : Eq { carrier := carrier✝, add_mem' := add_mem'✝ } { carrier := carrier, add_mem' := add_mem' }\n⊢ Eq carrier✝ carrier","decl":"/-- An additive subsemigroup of an additive magma `M` is a subset closed under addition. -/\nstructure AddSubsemigroup (M : Type*) [Add M] where\n  /-- The carrier of an additive subsemigroup. -/\n  carrier : Set M\n  /-- The sum of two elements of an additive subsemigroup belongs to the subsemigroup. -/\n  add_mem' {a b} : a ∈ carrier → b ∈ carrier → a + b ∈ carrier\n\n"}
{"name":"AddSubsemigroup.add_mem'","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_3\ninst✝ : Add M\nself : AddSubsemigroup M\na b : M\na✝¹ : Membership.mem self.carrier a\na✝ : Membership.mem self.carrier b\n⊢ Membership.mem self.carrier (HAdd.hAdd a b)","decl":"/-- An additive subsemigroup of an additive magma `M` is a subset closed under addition. -/\nstructure AddSubsemigroup (M : Type*) [Add M] where\n  /-- The carrier of an additive subsemigroup. -/\n  carrier : Set M\n  /-- The sum of two elements of an additive subsemigroup belongs to the subsemigroup. -/\n  add_mem' {a b} : a ∈ carrier → b ∈ carrier → a + b ∈ carrier\n\n"}
{"name":"Subsemigroup.instMulMemClass","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Mul M\n⊢ MulMemClass (Subsemigroup M) M","decl":"@[to_additive]\ninstance : MulMemClass (Subsemigroup M) M where mul_mem := fun {_ _ _} => Subsemigroup.mul_mem' _\n\n"}
{"name":"AddSubsemigroup.instAddMemClass","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Add M\n⊢ AddMemClass (AddSubsemigroup M) M","decl":"@[to_additive]\ninstance : MulMemClass (Subsemigroup M) M where mul_mem := fun {_ _ _} => Subsemigroup.mul_mem' _\n\n"}
{"name":"AddSubsemigroup.mem_carrier","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Add M\ns : AddSubsemigroup M\nx : M\n⊢ Iff (Membership.mem s.carrier x) (Membership.mem s x)","decl":"@[to_additive (attr := simp)]\ntheorem mem_carrier {s : Subsemigroup M} {x : M} : x ∈ s.carrier ↔ x ∈ s :=\n  Iff.rfl\n\n"}
{"name":"Subsemigroup.mem_carrier","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Mul M\ns : Subsemigroup M\nx : M\n⊢ Iff (Membership.mem s.carrier x) (Membership.mem s x)","decl":"@[to_additive (attr := simp)]\ntheorem mem_carrier {s : Subsemigroup M} {x : M} : x ∈ s.carrier ↔ x ∈ s :=\n  Iff.rfl\n\n"}
{"name":"Subsemigroup.mem_mk","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Mul M\ns : Set M\nx : M\nh_mul : ∀ {a b : M}, Membership.mem s a → Membership.mem s b → Membership.mem s (HMul.hMul a b)\n⊢ Iff (Membership.mem { carrier := s, mul_mem' := h_mul } x) (Membership.mem s x)","decl":"@[to_additive (attr := simp)]\ntheorem mem_mk {s : Set M} {x : M} (h_mul) : x ∈ mk s h_mul ↔ x ∈ s :=\n  Iff.rfl\n\n"}
{"name":"AddSubsemigroup.mem_mk","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Add M\ns : Set M\nx : M\nh_mul : ∀ {a b : M}, Membership.mem s a → Membership.mem s b → Membership.mem s (HAdd.hAdd a b)\n⊢ Iff (Membership.mem { carrier := s, add_mem' := h_mul } x) (Membership.mem s x)","decl":"@[to_additive (attr := simp)]\ntheorem mem_mk {s : Set M} {x : M} (h_mul) : x ∈ mk s h_mul ↔ x ∈ s :=\n  Iff.rfl\n\n"}
{"name":"Subsemigroup.coe_set_mk","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Mul M\ns : Set M\nh_mul : ∀ {a b : M}, Membership.mem s a → Membership.mem s b → Membership.mem s (HMul.hMul a b)\n⊢ Eq (↑{ carrier := s, mul_mem' := h_mul }) s","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem coe_set_mk (s : Set M) (h_mul) : (mk s h_mul : Set M) = s :=\n  rfl\n\n"}
{"name":"AddSubsemigroup.coe_set_mk","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Add M\ns : Set M\nh_mul : ∀ {a b : M}, Membership.mem s a → Membership.mem s b → Membership.mem s (HAdd.hAdd a b)\n⊢ Eq (↑{ carrier := s, add_mem' := h_mul }) s","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem coe_set_mk (s : Set M) (h_mul) : (mk s h_mul : Set M) = s :=\n  rfl\n\n"}
{"name":"Subsemigroup.mk_le_mk","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Mul M\ns t : Set M\nh_mul : ∀ {a b : M}, Membership.mem s a → Membership.mem s b → Membership.mem s (HMul.hMul a b)\nh_mul' : ∀ {a b : M}, Membership.mem t a → Membership.mem t b → Membership.mem t (HMul.hMul a b)\n⊢ Iff (LE.le { carrier := s, mul_mem' := h_mul } { carrier := t, mul_mem' := h_mul' }) (HasSubset.Subset s t)","decl":"@[to_additive (attr := simp)]\ntheorem mk_le_mk {s t : Set M} (h_mul) (h_mul') : mk s h_mul ≤ mk t h_mul' ↔ s ⊆ t :=\n  Iff.rfl\n\n"}
{"name":"AddSubsemigroup.mk_le_mk","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Add M\ns t : Set M\nh_mul : ∀ {a b : M}, Membership.mem s a → Membership.mem s b → Membership.mem s (HAdd.hAdd a b)\nh_mul' : ∀ {a b : M}, Membership.mem t a → Membership.mem t b → Membership.mem t (HAdd.hAdd a b)\n⊢ Iff (LE.le { carrier := s, add_mem' := h_mul } { carrier := t, add_mem' := h_mul' }) (HasSubset.Subset s t)","decl":"@[to_additive (attr := simp)]\ntheorem mk_le_mk {s t : Set M} (h_mul) (h_mul') : mk s h_mul ≤ mk t h_mul' ↔ s ⊆ t :=\n  Iff.rfl\n\n"}
{"name":"Subsemigroup.ext_iff","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Mul M\nS T : Subsemigroup M\n⊢ Iff (Eq S T) (∀ (x : M), Iff (Membership.mem S x) (Membership.mem T x))","decl":"/-- Two subsemigroups are equal if they have the same elements. -/\n@[to_additive (attr := ext) \"Two `AddSubsemigroup`s are equal if they have the same elements.\"]\ntheorem ext {S T : Subsemigroup M} (h : ∀ x, x ∈ S ↔ x ∈ T) : S = T :=\n  SetLike.ext h\n\n"}
{"name":"Subsemigroup.ext","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Mul M\nS T : Subsemigroup M\nh : ∀ (x : M), Iff (Membership.mem S x) (Membership.mem T x)\n⊢ Eq S T","decl":"/-- Two subsemigroups are equal if they have the same elements. -/\n@[to_additive (attr := ext) \"Two `AddSubsemigroup`s are equal if they have the same elements.\"]\ntheorem ext {S T : Subsemigroup M} (h : ∀ x, x ∈ S ↔ x ∈ T) : S = T :=\n  SetLike.ext h\n\n"}
{"name":"AddSubsemigroup.ext","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Add M\nS T : AddSubsemigroup M\nh : ∀ (x : M), Iff (Membership.mem S x) (Membership.mem T x)\n⊢ Eq S T","decl":"/-- Two subsemigroups are equal if they have the same elements. -/\n@[to_additive (attr := ext) \"Two `AddSubsemigroup`s are equal if they have the same elements.\"]\ntheorem ext {S T : Subsemigroup M} (h : ∀ x, x ∈ S ↔ x ∈ T) : S = T :=\n  SetLike.ext h\n\n"}
{"name":"AddSubsemigroup.ext_iff","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Add M\nS T : AddSubsemigroup M\n⊢ Iff (Eq S T) (∀ (x : M), Iff (Membership.mem S x) (Membership.mem T x))","decl":"/-- Two subsemigroups are equal if they have the same elements. -/\n@[to_additive (attr := ext) \"Two `AddSubsemigroup`s are equal if they have the same elements.\"]\ntheorem ext {S T : Subsemigroup M} (h : ∀ x, x ∈ S ↔ x ∈ T) : S = T :=\n  SetLike.ext h\n\n"}
{"name":"Subsemigroup.coe_copy","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Mul M\nS : Subsemigroup M\ns : Set M\nhs : Eq s ↑S\n⊢ Eq (↑(S.copy s hs)) s","decl":"@[to_additive (attr := simp)]\ntheorem coe_copy {s : Set M} (hs : s = S) : (S.copy s hs : Set M) = s :=\n  rfl\n\n"}
{"name":"AddSubsemigroup.coe_copy","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Add M\nS : AddSubsemigroup M\ns : Set M\nhs : Eq s ↑S\n⊢ Eq (↑(S.copy s hs)) s","decl":"@[to_additive (attr := simp)]\ntheorem coe_copy {s : Set M} (hs : s = S) : (S.copy s hs : Set M) = s :=\n  rfl\n\n"}
{"name":"Subsemigroup.copy_eq","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Mul M\nS : Subsemigroup M\ns : Set M\nhs : Eq s ↑S\n⊢ Eq (S.copy s hs) S","decl":"@[to_additive]\ntheorem copy_eq {s : Set M} (hs : s = S) : S.copy s hs = S :=\n  SetLike.coe_injective hs\n\n"}
{"name":"AddSubsemigroup.copy_eq","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Add M\nS : AddSubsemigroup M\ns : Set M\nhs : Eq s ↑S\n⊢ Eq (S.copy s hs) S","decl":"@[to_additive]\ntheorem copy_eq {s : Set M} (hs : s = S) : S.copy s hs = S :=\n  SetLike.coe_injective hs\n\n"}
{"name":"Subsemigroup.mul_mem","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Mul M\nS : Subsemigroup M\nx y : M\na✝¹ : Membership.mem S x\na✝ : Membership.mem S y\n⊢ Membership.mem S (HMul.hMul x y)","decl":"/-- A subsemigroup is closed under multiplication. -/\n@[to_additive \"An `AddSubsemigroup` is closed under addition.\"]\nprotected theorem mul_mem {x y : M} : x ∈ S → y ∈ S → x * y ∈ S :=\n  Subsemigroup.mul_mem' S\n\n"}
{"name":"AddSubsemigroup.add_mem","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Add M\nS : AddSubsemigroup M\nx y : M\na✝¹ : Membership.mem S x\na✝ : Membership.mem S y\n⊢ Membership.mem S (HAdd.hAdd x y)","decl":"/-- A subsemigroup is closed under multiplication. -/\n@[to_additive \"An `AddSubsemigroup` is closed under addition.\"]\nprotected theorem mul_mem {x y : M} : x ∈ S → y ∈ S → x * y ∈ S :=\n  Subsemigroup.mul_mem' S\n\n"}
{"name":"Subsemigroup.not_mem_bot","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Mul M\nx : M\n⊢ Not (Membership.mem Bot.bot x)","decl":"@[to_additive]\ntheorem not_mem_bot {x : M} : x ∉ (⊥ : Subsemigroup M) :=\n  Set.not_mem_empty x\n\n"}
{"name":"AddSubsemigroup.not_mem_bot","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Add M\nx : M\n⊢ Not (Membership.mem Bot.bot x)","decl":"@[to_additive]\ntheorem not_mem_bot {x : M} : x ∉ (⊥ : Subsemigroup M) :=\n  Set.not_mem_empty x\n\n"}
{"name":"AddSubsemigroup.mem_top","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Add M\nx : M\n⊢ Membership.mem Top.top x","decl":"@[to_additive (attr := simp)]\ntheorem mem_top (x : M) : x ∈ (⊤ : Subsemigroup M) :=\n  Set.mem_univ x\n\n"}
{"name":"Subsemigroup.mem_top","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Mul M\nx : M\n⊢ Membership.mem Top.top x","decl":"@[to_additive (attr := simp)]\ntheorem mem_top (x : M) : x ∈ (⊤ : Subsemigroup M) :=\n  Set.mem_univ x\n\n"}
{"name":"Subsemigroup.coe_top","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Mul M\n⊢ Eq (↑Top.top) Set.univ","decl":"@[to_additive (attr := simp)]\ntheorem coe_top : ((⊤ : Subsemigroup M) : Set M) = Set.univ :=\n  rfl\n\n"}
{"name":"AddSubsemigroup.coe_top","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Add M\n⊢ Eq (↑Top.top) Set.univ","decl":"@[to_additive (attr := simp)]\ntheorem coe_top : ((⊤ : Subsemigroup M) : Set M) = Set.univ :=\n  rfl\n\n"}
{"name":"Subsemigroup.coe_bot","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Mul M\n⊢ Eq (↑Bot.bot) EmptyCollection.emptyCollection","decl":"@[to_additive (attr := simp)]\ntheorem coe_bot : ((⊥ : Subsemigroup M) : Set M) = ∅ :=\n  rfl\n\n"}
{"name":"AddSubsemigroup.coe_bot","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Add M\n⊢ Eq (↑Bot.bot) EmptyCollection.emptyCollection","decl":"@[to_additive (attr := simp)]\ntheorem coe_bot : ((⊥ : Subsemigroup M) : Set M) = ∅ :=\n  rfl\n\n"}
{"name":"AddSubsemigroup.coe_inf","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Add M\np p' : AddSubsemigroup M\n⊢ Eq (↑(Min.min p p')) (Inter.inter ↑p ↑p')","decl":"@[to_additive (attr := simp)]\ntheorem coe_inf (p p' : Subsemigroup M) : ((p ⊓ p' : Subsemigroup M) : Set M) = (p : Set M) ∩ p' :=\n  rfl\n\n"}
{"name":"Subsemigroup.coe_inf","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Mul M\np p' : Subsemigroup M\n⊢ Eq (↑(Min.min p p')) (Inter.inter ↑p ↑p')","decl":"@[to_additive (attr := simp)]\ntheorem coe_inf (p p' : Subsemigroup M) : ((p ⊓ p' : Subsemigroup M) : Set M) = (p : Set M) ∩ p' :=\n  rfl\n\n"}
{"name":"Subsemigroup.mem_inf","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Mul M\np p' : Subsemigroup M\nx : M\n⊢ Iff (Membership.mem (Min.min p p') x) (And (Membership.mem p x) (Membership.mem p' x))","decl":"@[to_additive (attr := simp)]\ntheorem mem_inf {p p' : Subsemigroup M} {x : M} : x ∈ p ⊓ p' ↔ x ∈ p ∧ x ∈ p' :=\n  Iff.rfl\n\n"}
{"name":"AddSubsemigroup.mem_inf","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Add M\np p' : AddSubsemigroup M\nx : M\n⊢ Iff (Membership.mem (Min.min p p') x) (And (Membership.mem p x) (Membership.mem p' x))","decl":"@[to_additive (attr := simp)]\ntheorem mem_inf {p p' : Subsemigroup M} {x : M} : x ∈ p ⊓ p' ↔ x ∈ p ∧ x ∈ p' :=\n  Iff.rfl\n\n"}
{"name":"Subsemigroup.subsingleton_of_subsingleton","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝¹ : Mul M\ninst✝ : Subsingleton (Subsemigroup M)\n⊢ Subsingleton M","decl":"@[to_additive]\ntheorem subsingleton_of_subsingleton [Subsingleton (Subsemigroup M)] : Subsingleton M := by\n  constructor; intro x y\n  have : ∀ a : M, a ∈ (⊥ : Subsemigroup M) := by simp [Subsingleton.elim (⊥ : Subsemigroup M) ⊤]\n  exact absurd (this x) not_mem_bot\n\n"}
{"name":"AddSubsemigroup.subsingleton_of_subsingleton","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝¹ : Add M\ninst✝ : Subsingleton (AddSubsemigroup M)\n⊢ Subsingleton M","decl":"@[to_additive]\ntheorem subsingleton_of_subsingleton [Subsingleton (Subsemigroup M)] : Subsingleton M := by\n  constructor; intro x y\n  have : ∀ a : M, a ∈ (⊥ : Subsemigroup M) := by simp [Subsingleton.elim (⊥ : Subsemigroup M) ⊤]\n  exact absurd (this x) not_mem_bot\n\n"}
{"name":"AddSubsemigroup.instNontrivialOfNonempty","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Add M\nhn : Nonempty M\n⊢ Nontrivial (AddSubsemigroup M)","decl":"@[to_additive]\ninstance [hn : Nonempty M] : Nontrivial (Subsemigroup M) :=\n  ⟨⟨⊥, ⊤, fun h => by\n      obtain ⟨x⟩ := id hn\n      refine absurd (?_ : x ∈ ⊥) not_mem_bot\n      simp [h]⟩⟩\n\n"}
{"name":"Subsemigroup.instNontrivialOfNonempty","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\ninst✝ : Mul M\nhn : Nonempty M\n⊢ Nontrivial (Subsemigroup M)","decl":"@[to_additive]\ninstance [hn : Nonempty M] : Nontrivial (Subsemigroup M) :=\n  ⟨⟨⊥, ⊤, fun h => by\n      obtain ⟨x⟩ := id hn\n      refine absurd (?_ : x ∈ ⊥) not_mem_bot\n      simp [h]⟩⟩\n\n"}
{"name":"AddHom.eq_of_eqOn_top","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\nN : Type u_2\ninst✝¹ : Add M\ninst✝ : Add N\nf g : AddHom M N\nh : Set.EqOn ⇑f ⇑g ↑Top.top\n⊢ Eq f g","decl":"@[to_additive]\ntheorem eq_of_eqOn_top {f g : M →ₙ* N} (h : Set.EqOn f g (⊤ : Subsemigroup M)) : f = g :=\n  ext fun _ => h trivial\n\n"}
{"name":"MulHom.eq_of_eqOn_top","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\nN : Type u_2\ninst✝¹ : Mul M\ninst✝ : Mul N\nf g : MulHom M N\nh : Set.EqOn ⇑f ⇑g ↑Top.top\n⊢ Eq f g","decl":"@[to_additive]\ntheorem eq_of_eqOn_top {f g : M →ₙ* N} (h : Set.EqOn f g (⊤ : Subsemigroup M)) : f = g :=\n  ext fun _ => h trivial\n\n"}
{"name":"MulMemClass.coe_mul","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\nA : Type u_3\ninst✝¹ : Mul M\ninst✝ : SetLike A M\nhA : MulMemClass A M\nS' : A\nx y : Subtype fun x => Membership.mem S' x\n⊢ Eq (↑(HMul.hMul x y)) (HMul.hMul ↑x ↑y)","decl":"@[to_additive (attr := simp low, norm_cast)]\ntheorem coe_mul (x y : S') : (↑(x * y) : M) = ↑x * ↑y :=\n  rfl\n\n-- lower priority so later simp lemmas are used first; to appease simp_nf\n"}
{"name":"AddMemClass.coe_add","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\nA : Type u_3\ninst✝¹ : Add M\ninst✝ : SetLike A M\nhA : AddMemClass A M\nS' : A\nx y : Subtype fun x => Membership.mem S' x\n⊢ Eq (↑(HAdd.hAdd x y)) (HAdd.hAdd ↑x ↑y)","decl":"@[to_additive (attr := simp low, norm_cast)]\ntheorem coe_mul (x y : S') : (↑(x * y) : M) = ↑x * ↑y :=\n  rfl\n\n-- lower priority so later simp lemmas are used first; to appease simp_nf\n"}
{"name":"AddMemClass.mk_add_mk","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\nA : Type u_3\ninst✝¹ : Add M\ninst✝ : SetLike A M\nhA : AddMemClass A M\nS' : A\nx y : M\nhx : Membership.mem S' x\nhy : Membership.mem S' y\n⊢ Eq (HAdd.hAdd ⟨x, hx⟩ ⟨y, hy⟩) ⟨HAdd.hAdd x y, ⋯⟩","decl":"@[to_additive (attr := simp low)]\ntheorem mk_mul_mk (x y : M) (hx : x ∈ S') (hy : y ∈ S') :\n    (⟨x, hx⟩ : S') * ⟨y, hy⟩ = ⟨x * y, mul_mem hx hy⟩ :=\n  rfl\n\n"}
{"name":"MulMemClass.mk_mul_mk","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\nA : Type u_3\ninst✝¹ : Mul M\ninst✝ : SetLike A M\nhA : MulMemClass A M\nS' : A\nx y : M\nhx : Membership.mem S' x\nhy : Membership.mem S' y\n⊢ Eq (HMul.hMul ⟨x, hx⟩ ⟨y, hy⟩) ⟨HMul.hMul x y, ⋯⟩","decl":"@[to_additive (attr := simp low)]\ntheorem mk_mul_mk (x y : M) (hx : x ∈ S') (hy : y ∈ S') :\n    (⟨x, hx⟩ : S') * ⟨y, hy⟩ = ⟨x * y, mul_mem hx hy⟩ :=\n  rfl\n\n"}
{"name":"AddMemClass.add_def","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\nA : Type u_3\ninst✝¹ : Add M\ninst✝ : SetLike A M\nhA : AddMemClass A M\nS' : A\nx y : Subtype fun x => Membership.mem S' x\n⊢ Eq (HAdd.hAdd x y) ⟨HAdd.hAdd ↑x ↑y, ⋯⟩","decl":"@[to_additive]\ntheorem mul_def (x y : S') : x * y = ⟨x * y, mul_mem x.2 y.2⟩ :=\n  rfl\n\n"}
{"name":"MulMemClass.mul_def","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\nA : Type u_3\ninst✝¹ : Mul M\ninst✝ : SetLike A M\nhA : MulMemClass A M\nS' : A\nx y : Subtype fun x => Membership.mem S' x\n⊢ Eq (HMul.hMul x y) ⟨HMul.hMul ↑x ↑y, ⋯⟩","decl":"@[to_additive]\ntheorem mul_def (x y : S') : x * y = ⟨x * y, mul_mem x.2 y.2⟩ :=\n  rfl\n\n"}
{"name":"AddMemClass.coe_subtype","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\nA : Type u_3\ninst✝¹ : Add M\ninst✝ : SetLike A M\nhA : AddMemClass A M\nS' : A\n⊢ Eq (⇑(AddMemClass.subtype S')) Subtype.val","decl":"@[to_additive (attr := simp)]\ntheorem coe_subtype : (MulMemClass.subtype S' : S' → M) = Subtype.val :=\n  rfl\n\n"}
{"name":"MulMemClass.coe_subtype","module":"Mathlib.Algebra.Group.Subsemigroup.Defs","initialProofState":"M : Type u_1\nA : Type u_3\ninst✝¹ : Mul M\ninst✝ : SetLike A M\nhA : MulMemClass A M\nS' : A\n⊢ Eq (⇑(MulMemClass.subtype S')) Subtype.val","decl":"@[to_additive (attr := simp)]\ntheorem coe_subtype : (MulMemClass.subtype S' : S' → M) = Subtype.val :=\n  rfl\n\n"}
