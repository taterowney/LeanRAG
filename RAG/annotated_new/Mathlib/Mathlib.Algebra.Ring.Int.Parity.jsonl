{"name":"Int.odd_iff","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Int\n⊢ Iff (Odd n) (Eq (HMod.hMod n 2) 1)","decl":"lemma odd_iff : Odd n ↔ n % 2 = 1 where\n  mp := fun ⟨m, hm⟩ ↦ by simp [hm, add_emod]\n  mpr h := ⟨n / 2, by rw [← h, add_comm, emod_add_ediv n 2]⟩\n\n"}
{"name":"Int.not_odd_iff","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Int\n⊢ Iff (Not (Odd n)) (Eq (HMod.hMod n 2) 0)","decl":"lemma not_odd_iff : ¬Odd n ↔ n % 2 = 0 := by rw [odd_iff, emod_two_ne_one]\n\n"}
{"name":"Int.not_odd_zero","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"⊢ Not (Odd 0)","decl":"@[simp] lemma not_odd_zero : ¬Odd (0 : ℤ) := not_odd_iff.mpr rfl\n\n"}
{"name":"Int.not_odd_iff_even","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Int\n⊢ Iff (Not (Odd n)) (Even n)","decl":"@[simp] lemma not_odd_iff_even : ¬Odd n ↔ Even n := by rw [not_odd_iff, even_iff]\n"}
{"name":"Int.not_even_iff_odd","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Int\n⊢ Iff (Not (Even n)) (Odd n)","decl":"@[simp] lemma not_even_iff_odd : ¬Even n ↔ Odd n := by rw [not_even_iff, odd_iff]\n\n"}
{"name":"Int.even_iff_not_odd","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Int\n⊢ Iff (Even n) (Not (Odd n))","decl":"@[deprecated not_odd_iff_even (since := \"2024-08-21\")]\nlemma even_iff_not_odd : Even n ↔ ¬Odd n := by rw [not_odd_iff, even_iff]\n\n"}
{"name":"Int.odd_iff_not_even","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Int\n⊢ Iff (Odd n) (Not (Even n))","decl":"@[deprecated not_even_iff_odd (since := \"2024-08-21\")]\nlemma odd_iff_not_even : Odd n ↔ ¬Even n := by rw [not_even_iff, odd_iff]\n\n"}
{"name":"Int.even_or_odd","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Int\n⊢ Or (Even n) (Odd n)","decl":"lemma even_or_odd (n : ℤ) : Even n ∨ Odd n := Or.imp_right not_even_iff_odd.1 <| em <| Even n\n\n"}
{"name":"Int.even_or_odd'","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Int\n⊢ Exists fun k => Or (Eq n (HMul.hMul 2 k)) (Eq n (HAdd.hAdd (HMul.hMul 2 k) 1))","decl":"lemma even_or_odd' (n : ℤ) : ∃ k, n = 2 * k ∨ n = 2 * k + 1 := by\n  simpa only [two_mul, exists_or, Odd, Even] using even_or_odd n\n\n"}
{"name":"Int.even_xor'_odd","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Int\n⊢ Xor' (Even n) (Odd n)","decl":"lemma even_xor'_odd (n : ℤ) : Xor' (Even n) (Odd n) := by\n  cases even_or_odd n with\n  | inl h => exact Or.inl ⟨h, not_odd_iff_even.2 h⟩\n  | inr h => exact Or.inr ⟨h, not_even_iff_odd.2 h⟩\n\n"}
{"name":"Int.even_xor'_odd'","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Int\n⊢ Exists fun k => Xor' (Eq n (HMul.hMul 2 k)) (Eq n (HAdd.hAdd (HMul.hMul 2 k) 1))","decl":"lemma even_xor'_odd' (n : ℤ) : ∃ k, Xor' (n = 2 * k) (n = 2 * k + 1) := by\n  rcases even_or_odd n with (⟨k, rfl⟩ | ⟨k, rfl⟩) <;> use k\n  · simpa only [← two_mul, Xor', true_and, eq_self_iff_true, not_true, or_false,\n      and_false] using (succ_ne_self (2 * k)).symm\n  · simp only [Xor', add_right_eq_self, false_or, eq_self_iff_true, not_true, not_false_iff,\n      one_ne_zero, and_self_iff]\n\n"}
{"name":"Int.even_add'","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"m n : Int\n⊢ Iff (Even (HAdd.hAdd m n)) (Iff (Odd m) (Odd n))","decl":"lemma even_add' : Even (m + n) ↔ (Odd m ↔ Odd n) := by\n  rw [even_add, ← not_odd_iff_even, ← not_odd_iff_even, not_iff_not]\n\n"}
{"name":"Int.not_even_two_mul_add_one","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Int\n⊢ Not (Even (HAdd.hAdd (HMul.hMul 2 n) 1))","decl":"lemma not_even_two_mul_add_one (n : ℤ) : ¬ Even (2 * n + 1) :=\n  not_even_iff_odd.2 <| odd_two_mul_add_one n\n\n"}
{"name":"Int.even_sub'","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"m n : Int\n⊢ Iff (Even (HSub.hSub m n)) (Iff (Odd m) (Odd n))","decl":"lemma even_sub' : Even (m - n) ↔ (Odd m ↔ Odd n) := by\n  rw [even_sub, ← not_odd_iff_even, ← not_odd_iff_even, not_iff_not]\n\n"}
{"name":"Int.odd_mul","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"m n : Int\n⊢ Iff (Odd (HMul.hMul m n)) (And (Odd m) (Odd n))","decl":"lemma odd_mul : Odd (m * n) ↔ Odd m ∧ Odd n := by simp [← not_even_iff_odd, not_or, parity_simps]\n\n"}
{"name":"Int.Odd.of_mul_left","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"m n : Int\nh : Odd (HMul.hMul m n)\n⊢ Odd m","decl":"lemma Odd.of_mul_left (h : Odd (m * n)) : Odd m := (odd_mul.mp h).1\n\n"}
{"name":"Int.Odd.of_mul_right","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"m n : Int\nh : Odd (HMul.hMul m n)\n⊢ Odd n","decl":"lemma Odd.of_mul_right (h : Odd (m * n)) : Odd n := (odd_mul.mp h).2\n\n"}
{"name":"Int.odd_pow","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"m : Int\nn : Nat\n⊢ Iff (Odd (HPow.hPow m n)) (Or (Odd m) (Eq n 0))","decl":"@[parity_simps] lemma odd_pow {n : ℕ} : Odd (m ^ n) ↔ Odd m ∨ n = 0 := by\n  rw [← not_iff_not, not_odd_iff_even, not_or, not_odd_iff_even, even_pow]\n\n"}
{"name":"Int.odd_pow'","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"m : Int\nn : Nat\nh : Ne n 0\n⊢ Iff (Odd (HPow.hPow m n)) (Odd m)","decl":"lemma odd_pow' {n : ℕ} (h : n ≠ 0) : Odd (m ^ n) ↔ Odd m := odd_pow.trans <| or_iff_left h\n\n"}
{"name":"Int.odd_add","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"m n : Int\n⊢ Iff (Odd (HAdd.hAdd m n)) (Iff (Odd m) (Even n))","decl":"@[parity_simps] lemma odd_add : Odd (m + n) ↔ (Odd m ↔ Even n) := by\n  rw [← not_even_iff_odd, even_add, not_iff, ← not_even_iff_odd]\n\n"}
{"name":"Int.odd_add'","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"m n : Int\n⊢ Iff (Odd (HAdd.hAdd m n)) (Iff (Odd n) (Even m))","decl":"lemma odd_add' : Odd (m + n) ↔ (Odd n ↔ Even m) := by rw [add_comm, odd_add]\n\n"}
{"name":"Int.ne_of_odd_add","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"m n : Int\nh : Odd (HAdd.hAdd m n)\n⊢ Ne m n","decl":"lemma ne_of_odd_add (h : Odd (m + n)) : m ≠ n := by rintro rfl; simp [← not_even_iff_odd] at h\n\n"}
{"name":"Int.odd_sub","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"m n : Int\n⊢ Iff (Odd (HSub.hSub m n)) (Iff (Odd m) (Even n))","decl":"@[parity_simps] lemma odd_sub : Odd (m - n) ↔ (Odd m ↔ Even n) := by\n  rw [← not_even_iff_odd, even_sub, not_iff, ← not_even_iff_odd]\n\n"}
{"name":"Int.odd_sub'","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"m n : Int\n⊢ Iff (Odd (HSub.hSub m n)) (Iff (Odd n) (Even m))","decl":"lemma odd_sub' : Odd (m - n) ↔ (Odd n ↔ Even m) := by\n  rw [← not_even_iff_odd, even_sub, not_iff, not_iff_comm, ← not_even_iff_odd]\n\n"}
{"name":"Int.even_mul_succ_self","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Int\n⊢ Even (HMul.hMul n (HAdd.hAdd n 1))","decl":"lemma even_mul_succ_self (n : ℤ) : Even (n * (n + 1)) := by\n  simpa [even_mul, parity_simps] using n.even_or_odd\n\n"}
{"name":"Int.even_mul_pred_self","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Int\n⊢ Even (HMul.hMul n (HSub.hSub n 1))","decl":"lemma even_mul_pred_self (n : ℤ) : Even (n * (n - 1)) := by\n  simpa [even_mul, parity_simps] using n.even_or_odd\n\n"}
{"name":"Int.odd_coe_nat","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Nat\n⊢ Iff (Odd ↑n) (Odd n)","decl":"@[simp, norm_cast] lemma odd_coe_nat (n : ℕ) : Odd (n : ℤ) ↔ Odd n := by\n  rw [← not_even_iff_odd, ← Nat.not_even_iff_odd, even_coe_nat]\n\n"}
{"name":"Int.natAbs_even","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Int\n⊢ Iff (Even n.natAbs) (Even n)","decl":"@[simp] lemma natAbs_even : Even n.natAbs ↔ Even n := by\n  simp [even_iff_two_dvd, dvd_natAbs, natCast_dvd.symm]\n\n"}
{"name":"Int.natAbs_odd","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Int\n⊢ Iff (Odd n.natAbs) (Odd n)","decl":"@[simp]\nlemma natAbs_odd : Odd n.natAbs ↔ Odd n := by\n  rw [← not_even_iff_odd, ← Nat.not_even_iff_odd, natAbs_even]\n\n"}
{"name":"Even.natAbs","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Int\na✝ : Even n\n⊢ Even n.natAbs","decl":"protected alias ⟨_, _root_.Even.natAbs⟩ := natAbs_even\n"}
{"name":"Odd.natAbs","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Int\na✝ : Odd n\n⊢ Odd n.natAbs","decl":"protected alias ⟨_, _root_.Odd.natAbs⟩ := natAbs_odd\n\n"}
{"name":"Int.four_dvd_add_or_sub_of_odd","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"a b : Int\nha : Odd a\nhb : Odd b\n⊢ Or (Dvd.dvd 4 (HAdd.hAdd a b)) (Dvd.dvd 4 (HSub.hSub a b))","decl":"lemma four_dvd_add_or_sub_of_odd {a b : ℤ} (ha : Odd a) (hb : Odd b) :\n    4 ∣ a + b ∨ 4 ∣ a - b := by\n  obtain ⟨m, rfl⟩ := ha\n  obtain ⟨n, rfl⟩ := hb\n  omega\n\n"}
{"name":"Int.two_mul_ediv_two_add_one_of_odd","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Int\na✝ : Odd n\n⊢ Eq (HAdd.hAdd (HMul.hMul 2 (HDiv.hDiv n 2)) 1) n","decl":"lemma two_mul_ediv_two_add_one_of_odd : Odd n → 2 * (n / 2) + 1 = n := by\n  rintro ⟨c, rfl⟩\n  rw [mul_comm]\n  convert Int.ediv_add_emod' (2 * c + 1) 2\n  simp [Int.add_emod]\n\n"}
{"name":"Int.ediv_two_mul_two_add_one_of_odd","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Int\na✝ : Odd n\n⊢ Eq (HAdd.hAdd (HMul.hMul (HDiv.hDiv n 2) 2) 1) n","decl":"lemma ediv_two_mul_two_add_one_of_odd : Odd n → n / 2 * 2 + 1 = n := by\n  rintro ⟨c, rfl⟩\n  convert Int.ediv_add_emod' (2 * c + 1) 2\n  simp [Int.add_emod]\n\n"}
{"name":"Int.add_one_ediv_two_mul_two_of_odd","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Int\na✝ : Odd n\n⊢ Eq (HAdd.hAdd 1 (HMul.hMul (HDiv.hDiv n 2) 2)) n","decl":"lemma add_one_ediv_two_mul_two_of_odd : Odd n → 1 + n / 2 * 2 = n := by\n  rintro ⟨c, rfl⟩\n  rw [add_comm]\n  convert Int.ediv_add_emod' (2 * c + 1) 2\n  simp [Int.add_emod]\n\n"}
{"name":"Int.two_mul_ediv_two_of_odd","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Int\nh : Odd n\n⊢ Eq (HMul.hMul 2 (HDiv.hDiv n 2)) (HSub.hSub n 1)","decl":"lemma two_mul_ediv_two_of_odd (h : Odd n) : 2 * (n / 2) = n - 1 :=\n  eq_sub_of_add_eq (two_mul_ediv_two_add_one_of_odd h)\n\n"}
{"name":"Int.isSquare_natCast_iff","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Nat\n⊢ Iff (IsSquare ↑n) (IsSquare n)","decl":"@[norm_cast, simp]\ntheorem isSquare_natCast_iff {n : ℕ} : IsSquare (n : ℤ) ↔ IsSquare n := by\n  constructor <;> rintro ⟨x, h⟩\n  · exact ⟨x.natAbs, (natAbs_mul_natAbs_eq h.symm).symm⟩\n  · exact ⟨x, mod_cast h⟩\n\n"}
{"name":"Int.isSquare_ofNat_iff","module":"Mathlib.Algebra.Ring.Int.Parity","initialProofState":"n : Nat\n⊢ Iff (IsSquare (OfNat.ofNat n)) (IsSquare (OfNat.ofNat n))","decl":"@[simp]\ntheorem isSquare_ofNat_iff {n : ℕ} :\n    IsSquare (ofNat(n) : ℤ) ↔ IsSquare (ofNat(n) : ℕ) :=\n  isSquare_natCast_iff\n\n"}
