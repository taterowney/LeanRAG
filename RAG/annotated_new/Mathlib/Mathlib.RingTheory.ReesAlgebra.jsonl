{"name":"mem_reesAlgebra_iff","module":"Mathlib.RingTheory.ReesAlgebra","initialProofState":"R : Type u\ninst✝ : CommRing R\nI : Ideal R\nf : Polynomial R\n⊢ Iff (Membership.mem (reesAlgebra I) f) (∀ (i : Nat), Membership.mem (HPow.hPow I i) (f.coeff i))","decl":"theorem mem_reesAlgebra_iff (f : R[X]) : f ∈ reesAlgebra I ↔ ∀ i, f.coeff i ∈ I ^ i :=\n  Iff.rfl\n\n"}
{"name":"mem_reesAlgebra_iff_support","module":"Mathlib.RingTheory.ReesAlgebra","initialProofState":"R : Type u\ninst✝ : CommRing R\nI : Ideal R\nf : Polynomial R\n⊢ Iff (Membership.mem (reesAlgebra I) f) (∀ (i : Nat), Membership.mem f.support i → Membership.mem (HPow.hPow I i) (f.coeff i))","decl":"theorem mem_reesAlgebra_iff_support (f : R[X]) :\n    f ∈ reesAlgebra I ↔ ∀ i ∈ f.support, f.coeff i ∈ I ^ i := by\n  apply forall_congr'\n  intro a\n  rw [mem_support_iff, Iff.comm, Classical.imp_iff_right_iff, Ne, ← imp_iff_not_or]\n  exact fun e => e.symm ▸ (I ^ a).zero_mem\n\n"}
{"name":"reesAlgebra.monomial_mem","module":"Mathlib.RingTheory.ReesAlgebra","initialProofState":"R : Type u\ninst✝ : CommRing R\nI : Ideal R\ni : Nat\nr : R\n⊢ Iff (Membership.mem (reesAlgebra I) ((Polynomial.monomial i) r)) (Membership.mem (HPow.hPow I i) r)","decl":"theorem reesAlgebra.monomial_mem {I : Ideal R} {i : ℕ} {r : R} :\n    monomial i r ∈ reesAlgebra I ↔ r ∈ I ^ i := by\n  simp +contextual [mem_reesAlgebra_iff_support, coeff_monomial, ←\n    imp_iff_not_or]\n\n"}
{"name":"monomial_mem_adjoin_monomial","module":"Mathlib.RingTheory.ReesAlgebra","initialProofState":"R : Type u\ninst✝ : CommRing R\nI : Ideal R\nn : Nat\nr : R\nhr : Membership.mem (HPow.hPow I n) r\n⊢ Membership.mem (Algebra.adjoin R ↑(Submodule.map (Polynomial.monomial 1) I)) ((Polynomial.monomial n) r)","decl":"theorem monomial_mem_adjoin_monomial {I : Ideal R} {n : ℕ} {r : R} (hr : r ∈ I ^ n) :\n    monomial n r ∈ Algebra.adjoin R (Submodule.map (monomial 1 : R →ₗ[R] R[X]) I : Set R[X]) := by\n  induction' n with n hn generalizing r\n  · exact Subalgebra.algebraMap_mem _ _\n  · rw [pow_succ'] at hr\n    apply Submodule.smul_induction_on\n      -- Porting note: did not need help with motive previously\n      (p := fun r => (monomial (Nat.succ n)) r ∈ Algebra.adjoin R (Submodule.map (monomial 1) I)) hr\n    · intro r hr s hs\n      rw [Nat.succ_eq_one_add, smul_eq_mul, ← monomial_mul_monomial]\n      exact Subalgebra.mul_mem _ (Algebra.subset_adjoin (Set.mem_image_of_mem _ hr)) (hn hs)\n    · intro x y hx hy\n      rw [monomial_add]\n      exact Subalgebra.add_mem _ hx hy\n\n"}
{"name":"adjoin_monomial_eq_reesAlgebra","module":"Mathlib.RingTheory.ReesAlgebra","initialProofState":"R : Type u\ninst✝ : CommRing R\nI : Ideal R\n⊢ Eq (Algebra.adjoin R ↑(Submodule.map (Polynomial.monomial 1) I)) (reesAlgebra I)","decl":"theorem adjoin_monomial_eq_reesAlgebra :\n    Algebra.adjoin R (Submodule.map (monomial 1 : R →ₗ[R] R[X]) I : Set R[X]) = reesAlgebra I := by\n  apply le_antisymm\n  · apply Algebra.adjoin_le _\n    rintro _ ⟨r, hr, rfl⟩\n    exact reesAlgebra.monomial_mem.mpr (by rwa [pow_one])\n  · intro p hp\n    rw [p.as_sum_support]\n    apply Subalgebra.sum_mem _ _\n    rintro i -\n    exact monomial_mem_adjoin_monomial (hp i)\n\n"}
{"name":"reesAlgebra.fg","module":"Mathlib.RingTheory.ReesAlgebra","initialProofState":"R : Type u\ninst✝ : CommRing R\nI : Ideal R\nhI : I.FG\n⊢ (reesAlgebra I).FG","decl":"theorem reesAlgebra.fg (hI : I.FG) : (reesAlgebra I).FG := by\n  classical\n    obtain ⟨s, hs⟩ := hI\n    rw [← adjoin_monomial_eq_reesAlgebra, ← hs]\n    use s.image (monomial 1)\n    rw [Finset.coe_image]\n    change\n      _ =\n        Algebra.adjoin R\n          (Submodule.map (monomial 1 : R →ₗ[R] R[X]) (Submodule.span R ↑s) : Set R[X])\n    rw [Submodule.map_span, Algebra.adjoin_span]\n\n"}
{"name":"instFiniteTypeSubtypePolynomialMemSubalgebraReesAlgebraOfIsNoetherianRing","module":"Mathlib.RingTheory.ReesAlgebra","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nI : Ideal R\ninst✝ : IsNoetherianRing R\n⊢ Algebra.FiniteType R (Subtype fun x => Membership.mem (reesAlgebra I) x)","decl":"instance [IsNoetherianRing R] : Algebra.FiniteType R (reesAlgebra I) :=\n  ⟨(reesAlgebra I).fg_top.mpr (reesAlgebra.fg <| IsNoetherian.noetherian I)⟩\n\n"}
{"name":"instIsNoetherianRingSubtypePolynomialMemSubalgebraReesAlgebra","module":"Mathlib.RingTheory.ReesAlgebra","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nI : Ideal R\ninst✝ : IsNoetherianRing R\n⊢ IsNoetherianRing (Subtype fun x => Membership.mem (reesAlgebra I) x)","decl":"instance [IsNoetherianRing R] : IsNoetherianRing (reesAlgebra I) :=\n  Algebra.FiniteType.isNoetherianRing R _\n"}
