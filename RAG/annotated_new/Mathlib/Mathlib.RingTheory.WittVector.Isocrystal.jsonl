{"name":"WittVector.inv_pair₁","module":"Mathlib.RingTheory.WittVector.Isocrystal","initialProofState":"p : Nat\ninst✝³ : Fact (Nat.Prime p)\nk : Type u_1\ninst✝² : CommRing k\ninst✝¹ : CharP k p\ninst✝ : PerfectRing k p\n⊢ RingHomInvPair (WittVector.FractionRing.frobeniusRingHom p k) ↑(WittVector.FractionRing.frobenius p k).symm","decl":"instance inv_pair₁ : RingHomInvPair φ(p, k) (FractionRing.frobenius p k).symm :=\n  RingHomInvPair.of_ringEquiv (FractionRing.frobenius p k)\n\n"}
{"name":"WittVector.inv_pair₂","module":"Mathlib.RingTheory.WittVector.Isocrystal","initialProofState":"p : Nat\ninst✝³ : Fact (Nat.Prime p)\nk : Type u_1\ninst✝² : CommRing k\ninst✝¹ : CharP k p\ninst✝ : PerfectRing k p\n⊢ RingHomInvPair ↑(WittVector.FractionRing.frobenius p k).symm ↑(WittVector.FractionRing.frobenius p k)","decl":"instance inv_pair₂ : RingHomInvPair ((FractionRing.frobenius p k).symm : K(p, k) →+* K(p, k))\n    (FractionRing.frobenius p k) :=\n  RingHomInvPair.of_ringEquiv (FractionRing.frobenius p k).symm\n\n"}
{"name":"WittVector.IsocrystalHom.mk.inj","module":"Mathlib.RingTheory.WittVector.Isocrystal","initialProofState":"p : Nat\ninst✝⁷ : Fact (Nat.Prime p)\nk : Type u_1\ninst✝⁶ : CommRing k\ninst✝⁵ : CharP k p\ninst✝⁴ : PerfectRing k p\nV : Type u_2\ninst✝³ : AddCommGroup V\ninst✝² : WittVector.Isocrystal p k V\nV₂ : Type u_3\ninst✝¹ : AddCommGroup V₂\ninst✝ : WittVector.Isocrystal p k V₂\ntoLinearMap✝ : LinearMap (RingHom.id (FractionRing (WittVector p k))) V V₂\nfrob_equivariant✝ : ∀ (x : V), Eq ((WittVector.Isocrystal.frobenius p k) (toLinearMap✝ x)) (toLinearMap✝ ((WittVector.Isocrystal.frobenius p k) x))\ntoLinearMap : LinearMap (RingHom.id (FractionRing (WittVector p k))) V V₂\nfrob_equivariant : ∀ (x : V), Eq ((WittVector.Isocrystal.frobenius p k) (toLinearMap x)) (toLinearMap ((WittVector.Isocrystal.frobenius p k) x))\nx✝ : Eq { toLinearMap := toLinearMap✝, frob_equivariant := frob_equivariant✝ } { toLinearMap := toLinearMap, frob_equivariant := frob_equivariant }\n⊢ Eq toLinearMap✝ toLinearMap","decl":"/-- A homomorphism between isocrystals respects the Frobenius map.\nNotation `M →ᶠⁱ [p, k]` in the `Isocrystal` namespace. -/\nstructure IsocrystalHom extends V →ₗ[K(p, k)] V₂ where\n  frob_equivariant : ∀ x : V, Φ(p, k) (toLinearMap x) = toLinearMap (Φ(p, k) x)\n\n"}
{"name":"WittVector.IsocrystalHom.mk.sizeOf_spec","module":"Mathlib.RingTheory.WittVector.Isocrystal","initialProofState":"p : Nat\ninst✝¹⁰ : Fact (Nat.Prime p)\nk : Type u_1\ninst✝⁹ : CommRing k\ninst✝⁸ : CharP k p\ninst✝⁷ : PerfectRing k p\nV : Type u_2\ninst✝⁶ : AddCommGroup V\ninst✝⁵ : WittVector.Isocrystal p k V\nV₂ : Type u_3\ninst✝⁴ : AddCommGroup V₂\ninst✝³ : WittVector.Isocrystal p k V₂\ninst✝² : SizeOf k\ninst✝¹ : SizeOf V\ninst✝ : SizeOf V₂\ntoLinearMap : LinearMap (RingHom.id (FractionRing (WittVector p k))) V V₂\nfrob_equivariant : ∀ (x : V), Eq ((WittVector.Isocrystal.frobenius p k) (toLinearMap x)) (toLinearMap ((WittVector.Isocrystal.frobenius p k) x))\n⊢ Eq (SizeOf.sizeOf { toLinearMap := toLinearMap, frob_equivariant := frob_equivariant }) (HAdd.hAdd 1 (SizeOf.sizeOf toLinearMap))","decl":"/-- A homomorphism between isocrystals respects the Frobenius map.\nNotation `M →ᶠⁱ [p, k]` in the `Isocrystal` namespace. -/\nstructure IsocrystalHom extends V →ₗ[K(p, k)] V₂ where\n  frob_equivariant : ∀ x : V, Φ(p, k) (toLinearMap x) = toLinearMap (Φ(p, k) x)\n\n"}
{"name":"WittVector.IsocrystalHom.frob_equivariant","module":"Mathlib.RingTheory.WittVector.Isocrystal","initialProofState":"p : Nat\ninst✝⁷ : Fact (Nat.Prime p)\nk : Type u_1\ninst✝⁶ : CommRing k\ninst✝⁵ : CharP k p\ninst✝⁴ : PerfectRing k p\nV : Type u_2\ninst✝³ : AddCommGroup V\ninst✝² : WittVector.Isocrystal p k V\nV₂ : Type u_3\ninst✝¹ : AddCommGroup V₂\ninst✝ : WittVector.Isocrystal p k V₂\nself : WittVector.IsocrystalHom p k V V₂\nx : V\n⊢ Eq ((WittVector.Isocrystal.frobenius p k) (self.toLinearMap x)) (self.toLinearMap ((WittVector.Isocrystal.frobenius p k) x))","decl":"/-- A homomorphism between isocrystals respects the Frobenius map.\nNotation `M →ᶠⁱ [p, k]` in the `Isocrystal` namespace. -/\nstructure IsocrystalHom extends V →ₗ[K(p, k)] V₂ where\n  frob_equivariant : ∀ x : V, Φ(p, k) (toLinearMap x) = toLinearMap (Φ(p, k) x)\n\n"}
{"name":"WittVector.IsocrystalHom.mk.injEq","module":"Mathlib.RingTheory.WittVector.Isocrystal","initialProofState":"p : Nat\ninst✝⁷ : Fact (Nat.Prime p)\nk : Type u_1\ninst✝⁶ : CommRing k\ninst✝⁵ : CharP k p\ninst✝⁴ : PerfectRing k p\nV : Type u_2\ninst✝³ : AddCommGroup V\ninst✝² : WittVector.Isocrystal p k V\nV₂ : Type u_3\ninst✝¹ : AddCommGroup V₂\ninst✝ : WittVector.Isocrystal p k V₂\ntoLinearMap✝ : LinearMap (RingHom.id (FractionRing (WittVector p k))) V V₂\nfrob_equivariant✝ : ∀ (x : V), Eq ((WittVector.Isocrystal.frobenius p k) (toLinearMap✝ x)) (toLinearMap✝ ((WittVector.Isocrystal.frobenius p k) x))\ntoLinearMap : LinearMap (RingHom.id (FractionRing (WittVector p k))) V V₂\nfrob_equivariant : ∀ (x : V), Eq ((WittVector.Isocrystal.frobenius p k) (toLinearMap x)) (toLinearMap ((WittVector.Isocrystal.frobenius p k) x))\n⊢ Eq (Eq { toLinearMap := toLinearMap✝, frob_equivariant := frob_equivariant✝ } { toLinearMap := toLinearMap, frob_equivariant := frob_equivariant }) (Eq toLinearMap✝ toLinearMap)","decl":"/-- A homomorphism between isocrystals respects the Frobenius map.\nNotation `M →ᶠⁱ [p, k]` in the `Isocrystal` namespace. -/\nstructure IsocrystalHom extends V →ₗ[K(p, k)] V₂ where\n  frob_equivariant : ∀ x : V, Φ(p, k) (toLinearMap x) = toLinearMap (Φ(p, k) x)\n\n"}
{"name":"WittVector.IsocrystalEquiv.mk.inj","module":"Mathlib.RingTheory.WittVector.Isocrystal","initialProofState":"p : Nat\ninst✝⁷ : Fact (Nat.Prime p)\nk : Type u_1\ninst✝⁶ : CommRing k\ninst✝⁵ : CharP k p\ninst✝⁴ : PerfectRing k p\nV : Type u_2\ninst✝³ : AddCommGroup V\ninst✝² : WittVector.Isocrystal p k V\nV₂ : Type u_3\ninst✝¹ : AddCommGroup V₂\ninst✝ : WittVector.Isocrystal p k V₂\ntoLinearEquiv✝ : LinearEquiv (RingHom.id (FractionRing (WittVector p k))) V V₂\nfrob_equivariant✝ : ∀ (x : V), Eq ((WittVector.Isocrystal.frobenius p k) (toLinearEquiv✝ x)) (toLinearEquiv✝ ((WittVector.Isocrystal.frobenius p k) x))\ntoLinearEquiv : LinearEquiv (RingHom.id (FractionRing (WittVector p k))) V V₂\nfrob_equivariant : ∀ (x : V), Eq ((WittVector.Isocrystal.frobenius p k) (toLinearEquiv x)) (toLinearEquiv ((WittVector.Isocrystal.frobenius p k) x))\nx✝ : Eq { toLinearEquiv := toLinearEquiv✝, frob_equivariant := frob_equivariant✝ } { toLinearEquiv := toLinearEquiv, frob_equivariant := frob_equivariant }\n⊢ Eq toLinearEquiv✝ toLinearEquiv","decl":"/-- An isomorphism between isocrystals respects the Frobenius map.\n\nNotation `M ≃ᶠⁱ [p, k]` in the `Isocrystal` namespace. -/\nstructure IsocrystalEquiv extends V ≃ₗ[K(p, k)] V₂ where\n  frob_equivariant : ∀ x : V, Φ(p, k) (toLinearEquiv x) = toLinearEquiv (Φ(p, k) x)\n\n"}
{"name":"WittVector.IsocrystalEquiv.mk.injEq","module":"Mathlib.RingTheory.WittVector.Isocrystal","initialProofState":"p : Nat\ninst✝⁷ : Fact (Nat.Prime p)\nk : Type u_1\ninst✝⁶ : CommRing k\ninst✝⁵ : CharP k p\ninst✝⁴ : PerfectRing k p\nV : Type u_2\ninst✝³ : AddCommGroup V\ninst✝² : WittVector.Isocrystal p k V\nV₂ : Type u_3\ninst✝¹ : AddCommGroup V₂\ninst✝ : WittVector.Isocrystal p k V₂\ntoLinearEquiv✝ : LinearEquiv (RingHom.id (FractionRing (WittVector p k))) V V₂\nfrob_equivariant✝ : ∀ (x : V), Eq ((WittVector.Isocrystal.frobenius p k) (toLinearEquiv✝ x)) (toLinearEquiv✝ ((WittVector.Isocrystal.frobenius p k) x))\ntoLinearEquiv : LinearEquiv (RingHom.id (FractionRing (WittVector p k))) V V₂\nfrob_equivariant : ∀ (x : V), Eq ((WittVector.Isocrystal.frobenius p k) (toLinearEquiv x)) (toLinearEquiv ((WittVector.Isocrystal.frobenius p k) x))\n⊢ Eq (Eq { toLinearEquiv := toLinearEquiv✝, frob_equivariant := frob_equivariant✝ } { toLinearEquiv := toLinearEquiv, frob_equivariant := frob_equivariant }) (Eq toLinearEquiv✝ toLinearEquiv)","decl":"/-- An isomorphism between isocrystals respects the Frobenius map.\n\nNotation `M ≃ᶠⁱ [p, k]` in the `Isocrystal` namespace. -/\nstructure IsocrystalEquiv extends V ≃ₗ[K(p, k)] V₂ where\n  frob_equivariant : ∀ x : V, Φ(p, k) (toLinearEquiv x) = toLinearEquiv (Φ(p, k) x)\n\n"}
{"name":"WittVector.IsocrystalEquiv.frob_equivariant","module":"Mathlib.RingTheory.WittVector.Isocrystal","initialProofState":"p : Nat\ninst✝⁷ : Fact (Nat.Prime p)\nk : Type u_1\ninst✝⁶ : CommRing k\ninst✝⁵ : CharP k p\ninst✝⁴ : PerfectRing k p\nV : Type u_2\ninst✝³ : AddCommGroup V\ninst✝² : WittVector.Isocrystal p k V\nV₂ : Type u_3\ninst✝¹ : AddCommGroup V₂\ninst✝ : WittVector.Isocrystal p k V₂\nself : WittVector.IsocrystalEquiv p k V V₂\nx : V\n⊢ Eq ((WittVector.Isocrystal.frobenius p k) (self.toLinearEquiv x)) (self.toLinearEquiv ((WittVector.Isocrystal.frobenius p k) x))","decl":"/-- An isomorphism between isocrystals respects the Frobenius map.\n\nNotation `M ≃ᶠⁱ [p, k]` in the `Isocrystal` namespace. -/\nstructure IsocrystalEquiv extends V ≃ₗ[K(p, k)] V₂ where\n  frob_equivariant : ∀ x : V, Φ(p, k) (toLinearEquiv x) = toLinearEquiv (Φ(p, k) x)\n\n"}
{"name":"WittVector.IsocrystalEquiv.mk.sizeOf_spec","module":"Mathlib.RingTheory.WittVector.Isocrystal","initialProofState":"p : Nat\ninst✝¹⁰ : Fact (Nat.Prime p)\nk : Type u_1\ninst✝⁹ : CommRing k\ninst✝⁸ : CharP k p\ninst✝⁷ : PerfectRing k p\nV : Type u_2\ninst✝⁶ : AddCommGroup V\ninst✝⁵ : WittVector.Isocrystal p k V\nV₂ : Type u_3\ninst✝⁴ : AddCommGroup V₂\ninst✝³ : WittVector.Isocrystal p k V₂\ninst✝² : SizeOf k\ninst✝¹ : SizeOf V\ninst✝ : SizeOf V₂\ntoLinearEquiv : LinearEquiv (RingHom.id (FractionRing (WittVector p k))) V V₂\nfrob_equivariant : ∀ (x : V), Eq ((WittVector.Isocrystal.frobenius p k) (toLinearEquiv x)) (toLinearEquiv ((WittVector.Isocrystal.frobenius p k) x))\n⊢ Eq (SizeOf.sizeOf { toLinearEquiv := toLinearEquiv, frob_equivariant := frob_equivariant }) (HAdd.hAdd 1 (SizeOf.sizeOf toLinearEquiv))","decl":"/-- An isomorphism between isocrystals respects the Frobenius map.\n\nNotation `M ≃ᶠⁱ [p, k]` in the `Isocrystal` namespace. -/\nstructure IsocrystalEquiv extends V ≃ₗ[K(p, k)] V₂ where\n  frob_equivariant : ∀ x : V, Φ(p, k) (toLinearEquiv x) = toLinearEquiv (Φ(p, k) x)\n\n"}
{"name":"WittVector.StandardOneDimIsocrystal.frobenius_apply","module":"Mathlib.RingTheory.WittVector.Isocrystal","initialProofState":"p : Nat\ninst✝⁴ : Fact (Nat.Prime p)\nk : Type u_1\ninst✝³ : CommRing k\ninst✝² : IsDomain k\ninst✝¹ : CharP k p\ninst✝ : PerfectRing k p\nm : Int\nx : WittVector.StandardOneDimIsocrystal p k m\n⊢ Eq ((WittVector.Isocrystal.frobenius p k) x) (HSMul.hSMul (HPow.hPow (↑p) m) ((WittVector.FractionRing.frobeniusRingHom p k) x))","decl":"@[simp]\ntheorem StandardOneDimIsocrystal.frobenius_apply (m : ℤ) (x : StandardOneDimIsocrystal p k m) :\n    Φ(p, k) x = (p : K(p, k)) ^ m • φ(p, k) x := rfl\n\n"}
{"name":"WittVector.isocrystal_classification","module":"Mathlib.RingTheory.WittVector.Isocrystal","initialProofState":"p : Nat\ninst✝⁵ : Fact (Nat.Prime p)\nk : Type u_2\ninst✝⁴ : Field k\ninst✝³ : IsAlgClosed k\ninst✝² : CharP k p\nV : Type u_3\ninst✝¹ : AddCommGroup V\ninst✝ : WittVector.Isocrystal p k V\nh_dim : Eq (Module.finrank (FractionRing (WittVector p k)) V) 1\n⊢ Exists fun m => Nonempty (WittVector.IsocrystalEquiv p k (WittVector.StandardOneDimIsocrystal p k m) V)","decl":"/-- A one-dimensional isocrystal over an algebraically closed field\nadmits an isomorphism to one of the standard (indexed by `m : ℤ`) one-dimensional isocrystals. -/\ntheorem isocrystal_classification (k : Type*) [Field k] [IsAlgClosed k] [CharP k p] (V : Type*)\n    [AddCommGroup V] [Isocrystal p k V] (h_dim : finrank K(p, k) V = 1) :\n    ∃ m : ℤ, Nonempty (StandardOneDimIsocrystal p k m ≃ᶠⁱ[p, k] V) := by\n  haveI : Nontrivial V := Module.nontrivial_of_finrank_eq_succ h_dim\n  obtain ⟨x, hx⟩ : ∃ x : V, x ≠ 0 := exists_ne 0\n  have : Φ(p, k) x ≠ 0 := by simpa only [map_zero] using Φ(p, k).injective.ne hx\n  obtain ⟨a, ha, hax⟩ : ∃ a : K(p, k), a ≠ 0 ∧ Φ(p, k) x = a • x := by\n    rw [finrank_eq_one_iff_of_nonzero' x hx] at h_dim\n    obtain ⟨a, ha⟩ := h_dim (Φ(p, k) x)\n    refine ⟨a, ?_, ha.symm⟩\n    intro ha'\n    apply this\n    simp only [← ha, ha', zero_smul]\n  obtain ⟨b, hb, m, hmb⟩ := WittVector.exists_frobenius_solution_fractionRing p ha\n  replace hmb : φ(p, k) b * a = (p : K(p, k)) ^ m * b := by convert hmb\n  use m\n  let F₀ : StandardOneDimIsocrystal p k m →ₗ[K(p, k)] V := LinearMap.toSpanSingleton K(p, k) V x\n  let F : StandardOneDimIsocrystal p k m ≃ₗ[K(p, k)] V := by\n    refine LinearEquiv.ofBijective F₀ ⟨?_, ?_⟩\n    · rw [← LinearMap.ker_eq_bot]\n      exact LinearMap.ker_toSpanSingleton K(p, k) V hx\n    · rw [← LinearMap.range_eq_top]\n      rw [← (finrank_eq_one_iff_of_nonzero x hx).mp h_dim]\n      rw [LinearMap.span_singleton_eq_range]\n  refine ⟨⟨(LinearEquiv.smulOfNeZero K(p, k) _ _ hb).trans F, fun c ↦ ?_⟩⟩\n  rw [LinearEquiv.trans_apply, LinearEquiv.trans_apply, LinearEquiv.smulOfNeZero_apply,\n    LinearEquiv.smulOfNeZero_apply, Units.smul_mk0, Units.smul_mk0, LinearEquiv.map_smul,\n    LinearEquiv.map_smul]\n  -- Porting note: was\n  -- simp only [hax, LinearEquiv.ofBijective_apply, LinearMap.toSpanSingleton_apply,\n  --   LinearEquiv.map_smulₛₗ, StandardOneDimIsocrystal.frobenius_apply, Algebra.id.smul_eq_mul]\n  rw [LinearEquiv.ofBijective_apply, LinearEquiv.ofBijective_apply]\n  erw [LinearMap.toSpanSingleton_apply K(p, k) V x c, LinearMap.toSpanSingleton_apply K(p, k) V x]\n  simp only [hax, LinearEquiv.ofBijective_apply, LinearMap.toSpanSingleton_apply,\n    LinearEquiv.map_smulₛₗ, StandardOneDimIsocrystal.frobenius_apply, Algebra.id.smul_eq_mul]\n  simp only [← mul_smul]\n  congr 1\n  linear_combination φ(p, k) c * hmb\n\n"}
