{"name":"measurableSet_integrable","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝³ : MeasurableSpace α\ninst✝² : MeasurableSpace β\nν : MeasureTheory.Measure β\ninst✝¹ : NormedAddCommGroup E\ninst✝ : MeasureTheory.SFinite ν\nf : α → β → E\nhf : MeasureTheory.StronglyMeasurable (Function.uncurry f)\n⊢ MeasurableSet (setOf fun x => MeasureTheory.Integrable (f x) ν)","decl":"theorem measurableSet_integrable [SFinite ν] ⦃f : α → β → E⦄\n    (hf : StronglyMeasurable (uncurry f)) : MeasurableSet {x | Integrable (f x) ν} := by\n  simp_rw [Integrable, hf.of_uncurry_left.aestronglyMeasurable, true_and]\n  exact measurableSet_lt (Measurable.lintegral_prod_right hf.enorm) measurable_const\n\n"}
{"name":"MeasureTheory.StronglyMeasurable.integral_prod_right","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\nν : MeasureTheory.Measure β\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : MeasureTheory.SFinite ν\nf : α → β → E\nhf : MeasureTheory.StronglyMeasurable (Function.uncurry f)\n⊢ MeasureTheory.StronglyMeasurable fun x => MeasureTheory.integral ν fun y => f x y","decl":"/-- The Bochner integral is measurable. This shows that the integrand of (the right-hand-side of)\n  Fubini's theorem is measurable.\n  This version has `f` in curried form. -/\ntheorem MeasureTheory.StronglyMeasurable.integral_prod_right [SFinite ν] ⦃f : α → β → E⦄\n    (hf : StronglyMeasurable (uncurry f)) : StronglyMeasurable fun x => ∫ y, f x y ∂ν := by\n  classical\n  by_cases hE : CompleteSpace E; swap; · simp [integral, hE, stronglyMeasurable_const]\n  borelize E\n  haveI : SeparableSpace (range (uncurry f) ∪ {0} : Set E) :=\n    hf.separableSpace_range_union_singleton\n  let s : ℕ → SimpleFunc (α × β) E :=\n    SimpleFunc.approxOn _ hf.measurable (range (uncurry f) ∪ {0}) 0 (by simp)\n  let s' : ℕ → α → SimpleFunc β E := fun n x => (s n).comp (Prod.mk x) measurable_prod_mk_left\n  let f' : ℕ → α → E := fun n => {x | Integrable (f x) ν}.indicator fun x => (s' n x).integral ν\n  have hf' : ∀ n, StronglyMeasurable (f' n) := by\n    intro n; refine StronglyMeasurable.indicator ?_ (measurableSet_integrable hf)\n    have : ∀ x, ((s' n x).range.filter fun x => x ≠ 0) ⊆ (s n).range := by\n      intro x; refine Finset.Subset.trans (Finset.filter_subset _ _) ?_; intro y\n      simp_rw [SimpleFunc.mem_range]; rintro ⟨z, rfl⟩; exact ⟨(x, z), rfl⟩\n    simp only [SimpleFunc.integral_eq_sum_of_subset (this _)]\n    refine Finset.stronglyMeasurable_sum _ fun x _ => ?_\n    refine (Measurable.ennreal_toReal ?_).stronglyMeasurable.smul_const _\n    simp only [s', SimpleFunc.coe_comp, preimage_comp]\n    apply measurable_measure_prod_mk_left\n    exact (s n).measurableSet_fiber x\n  have h2f' : Tendsto f' atTop (𝓝 fun x : α => ∫ y : β, f x y ∂ν) := by\n    rw [tendsto_pi_nhds]; intro x\n    by_cases hfx : Integrable (f x) ν\n    · have (n) : Integrable (s' n x) ν := by\n        apply (hfx.norm.add hfx.norm).mono' (s' n x).aestronglyMeasurable\n        filter_upwards with y\n        simp_rw [s', SimpleFunc.coe_comp]; exact SimpleFunc.norm_approxOn_zero_le _ _ (x, y) n\n      simp only [f', hfx, SimpleFunc.integral_eq_integral _ (this _), indicator_of_mem,\n        mem_setOf_eq]\n      refine\n        tendsto_integral_of_dominated_convergence (fun y => ‖f x y‖ + ‖f x y‖)\n          (fun n => (s' n x).aestronglyMeasurable) (hfx.norm.add hfx.norm) ?_ ?_\n      · refine fun n => Eventually.of_forall fun y =>\n          SimpleFunc.norm_approxOn_zero_le ?_ ?_ (x, y) n\n        -- Porting note: Lean 3 solved the following two subgoals on its own\n        · exact hf.measurable\n        · simp\n      · refine Eventually.of_forall fun y => SimpleFunc.tendsto_approxOn ?_ ?_ ?_\n        -- Porting note: Lean 3 solved the following two subgoals on its own\n        · exact hf.measurable.of_uncurry_left\n        · simp\n        apply subset_closure\n        simp [-uncurry_apply_pair]\n    · simp [f', hfx, integral_undef]\n  exact stronglyMeasurable_of_tendsto _ hf' h2f'\n\n"}
{"name":"MeasureTheory.StronglyMeasurable.integral_prod_right'","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\nν : MeasureTheory.Measure β\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : MeasureTheory.SFinite ν\nf : Prod α β → E\nhf : MeasureTheory.StronglyMeasurable f\n⊢ MeasureTheory.StronglyMeasurable fun x => MeasureTheory.integral ν fun y => f { fst := x, snd := y }","decl":"/-- The Bochner integral is measurable. This shows that the integrand of (the right-hand-side of)\n  Fubini's theorem is measurable. -/\ntheorem MeasureTheory.StronglyMeasurable.integral_prod_right' [SFinite ν] ⦃f : α × β → E⦄\n    (hf : StronglyMeasurable f) : StronglyMeasurable fun x => ∫ y, f (x, y) ∂ν := by\n  rw [← uncurry_curry f] at hf; exact hf.integral_prod_right\n\n"}
{"name":"MeasureTheory.StronglyMeasurable.integral_prod_left","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : MeasureTheory.SFinite μ\nf : α → β → E\nhf : MeasureTheory.StronglyMeasurable (Function.uncurry f)\n⊢ MeasureTheory.StronglyMeasurable fun y => MeasureTheory.integral μ fun x => f x y","decl":"/-- The Bochner integral is measurable. This shows that the integrand of (the right-hand-side of)\n  the symmetric version of Fubini's theorem is measurable.\n  This version has `f` in curried form. -/\ntheorem MeasureTheory.StronglyMeasurable.integral_prod_left [SFinite μ] ⦃f : α → β → E⦄\n    (hf : StronglyMeasurable (uncurry f)) : StronglyMeasurable fun y => ∫ x, f x y ∂μ :=\n  (hf.comp_measurable measurable_swap).integral_prod_right'\n\n"}
{"name":"MeasureTheory.StronglyMeasurable.integral_prod_left'","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : MeasureTheory.SFinite μ\nf : Prod α β → E\nhf : MeasureTheory.StronglyMeasurable f\n⊢ MeasureTheory.StronglyMeasurable fun y => MeasureTheory.integral μ fun x => f { fst := x, snd := y }","decl":"/-- The Bochner integral is measurable. This shows that the integrand of (the right-hand-side of)\n  the symmetric version of Fubini's theorem is measurable. -/\ntheorem MeasureTheory.StronglyMeasurable.integral_prod_left' [SFinite μ] ⦃f : α × β → E⦄\n    (hf : StronglyMeasurable f) : StronglyMeasurable fun y => ∫ x, f (x, y) ∂μ :=\n  (hf.comp_measurable measurable_swap).integral_prod_right'\n\n"}
{"name":"MeasureTheory.Measure.integrable_measure_prod_mk_left","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : MeasurableSpace α\ninst✝¹ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝ : MeasureTheory.SFinite ν\ns : Set (Prod α β)\nhs : MeasurableSet s\nh2s : Ne ((μ.prod ν) s) Top.top\n⊢ MeasureTheory.Integrable (fun x => (ν (Set.preimage (Prod.mk x) s)).toReal) μ","decl":"theorem integrable_measure_prod_mk_left {s : Set (α × β)} (hs : MeasurableSet s)\n    (h2s : (μ.prod ν) s ≠ ∞) : Integrable (fun x => (ν (Prod.mk x ⁻¹' s)).toReal) μ := by\n  refine ⟨(measurable_measure_prod_mk_left hs).ennreal_toReal.aemeasurable.aestronglyMeasurable, ?_⟩\n  simp_rw [hasFiniteIntegral_iff_enorm, enorm_eq_ofReal toReal_nonneg]\n  convert h2s.lt_top using 1\n  rw [prod_apply hs]\n  apply lintegral_congr_ae\n  filter_upwards [ae_measure_lt_top hs h2s] with x hx\n  rw [lt_top_iff_ne_top] at hx; simp [ofReal_toReal, hx]\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.prod_swap","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nγ : Type u_4\ninst✝² : TopologicalSpace γ\ninst✝¹ : MeasureTheory.SFinite μ\ninst✝ : MeasureTheory.SFinite ν\nf : Prod β α → γ\nhf : MeasureTheory.AEStronglyMeasurable f (ν.prod μ)\n⊢ MeasureTheory.AEStronglyMeasurable (fun z => f z.swap) (μ.prod ν)","decl":"nonrec theorem MeasureTheory.AEStronglyMeasurable.prod_swap {γ : Type*} [TopologicalSpace γ]\n    [SFinite μ] [SFinite ν] {f : β × α → γ} (hf : AEStronglyMeasurable f (ν.prod μ)) :\n    AEStronglyMeasurable (fun z : α × β => f z.swap) (μ.prod ν) := by\n  rw [← prod_swap] at hf\n  exact hf.comp_measurable measurable_swap\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.fst","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : MeasurableSpace α\ninst✝² : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nγ : Type u_4\ninst✝¹ : TopologicalSpace γ\ninst✝ : MeasureTheory.SFinite ν\nf : α → γ\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ MeasureTheory.AEStronglyMeasurable (fun z => f z.1) (μ.prod ν)","decl":"theorem MeasureTheory.AEStronglyMeasurable.fst {γ} [TopologicalSpace γ] [SFinite ν] {f : α → γ}\n    (hf : AEStronglyMeasurable f μ) : AEStronglyMeasurable (fun z : α × β => f z.1) (μ.prod ν) :=\n  hf.comp_quasiMeasurePreserving quasiMeasurePreserving_fst\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.snd","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : MeasurableSpace α\ninst✝² : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nγ : Type u_4\ninst✝¹ : TopologicalSpace γ\ninst✝ : MeasureTheory.SFinite ν\nf : β → γ\nhf : MeasureTheory.AEStronglyMeasurable f ν\n⊢ MeasureTheory.AEStronglyMeasurable (fun z => f z.2) (μ.prod ν)","decl":"theorem MeasureTheory.AEStronglyMeasurable.snd {γ} [TopologicalSpace γ] [SFinite ν] {f : β → γ}\n    (hf : AEStronglyMeasurable f ν) : AEStronglyMeasurable (fun z : α × β => f z.2) (μ.prod ν) :=\n  hf.comp_quasiMeasurePreserving quasiMeasurePreserving_snd\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.integral_prod_right'","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝² : NormedAddCommGroup E\ninst✝¹ : MeasureTheory.SFinite ν\ninst✝ : NormedSpace Real E\nf : Prod α β → E\nhf : MeasureTheory.AEStronglyMeasurable f (μ.prod ν)\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => MeasureTheory.integral ν fun y => f { fst := x, snd := y }) μ","decl":"/-- The Bochner integral is a.e.-measurable.\n  This shows that the integrand of (the right-hand-side of) Fubini's theorem is a.e.-measurable. -/\ntheorem MeasureTheory.AEStronglyMeasurable.integral_prod_right' [SFinite ν] [NormedSpace ℝ E]\n    ⦃f : α × β → E⦄ (hf : AEStronglyMeasurable f (μ.prod ν)) :\n    AEStronglyMeasurable (fun x => ∫ y, f (x, y) ∂ν) μ :=\n  ⟨fun x => ∫ y, hf.mk f (x, y) ∂ν, hf.stronglyMeasurable_mk.integral_prod_right', by\n    filter_upwards [ae_ae_of_ae_prod hf.ae_eq_mk] with _ hx using integral_congr_ae hx⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.prod_mk_left","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : MeasurableSpace α\ninst✝² : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nγ : Type u_4\ninst✝¹ : MeasureTheory.SFinite ν\ninst✝ : TopologicalSpace γ\nf : Prod α β → γ\nhf : MeasureTheory.AEStronglyMeasurable f (μ.prod ν)\n⊢ Filter.Eventually (fun x => MeasureTheory.AEStronglyMeasurable (fun y => f { fst := x, snd := y }) ν) (MeasureTheory.ae μ)","decl":"theorem MeasureTheory.AEStronglyMeasurable.prod_mk_left {γ : Type*} [SFinite ν]\n    [TopologicalSpace γ] {f : α × β → γ} (hf : AEStronglyMeasurable f (μ.prod ν)) :\n    ∀ᵐ x ∂μ, AEStronglyMeasurable (fun y => f (x, y)) ν := by\n  filter_upwards [ae_ae_of_ae_prod hf.ae_eq_mk] with x hx\n  exact\n    ⟨fun y => hf.mk f (x, y), hf.stronglyMeasurable_mk.comp_measurable measurable_prod_mk_left, hx⟩\n\n"}
{"name":"MeasureTheory.integrable_swap_iff","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝² : NormedAddCommGroup E\ninst✝¹ : MeasureTheory.SFinite ν\ninst✝ : MeasureTheory.SFinite μ\nf : Prod α β → E\n⊢ Iff (MeasureTheory.Integrable (Function.comp f Prod.swap) (ν.prod μ)) (MeasureTheory.Integrable f (μ.prod ν))","decl":"theorem integrable_swap_iff [SFinite μ] {f : α × β → E} :\n    Integrable (f ∘ Prod.swap) (ν.prod μ) ↔ Integrable f (μ.prod ν) :=\n  measurePreserving_swap.integrable_comp_emb MeasurableEquiv.prodComm.measurableEmbedding\n\n"}
{"name":"MeasureTheory.Integrable.swap","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝² : NormedAddCommGroup E\ninst✝¹ : MeasureTheory.SFinite ν\ninst✝ : MeasureTheory.SFinite μ\nf : Prod α β → E\nhf : MeasureTheory.Integrable f (μ.prod ν)\n⊢ MeasureTheory.Integrable (Function.comp f Prod.swap) (ν.prod μ)","decl":"theorem Integrable.swap [SFinite μ] ⦃f : α × β → E⦄ (hf : Integrable f (μ.prod ν)) :\n    Integrable (f ∘ Prod.swap) (ν.prod μ) :=\n  integrable_swap_iff.2 hf\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_prod_iff","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝³ : MeasurableSpace α\ninst✝² : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝¹ : NormedAddCommGroup E\ninst✝ : MeasureTheory.SFinite ν\nf : Prod α β → E\nh1f : MeasureTheory.StronglyMeasurable f\n⊢ Iff (MeasureTheory.HasFiniteIntegral f (μ.prod ν)) (And (Filter.Eventually (fun x => MeasureTheory.HasFiniteIntegral (fun y => f { fst := x, snd := y }) ν) (MeasureTheory.ae μ)) (MeasureTheory.HasFiniteIntegral (fun x => MeasureTheory.integral ν fun y => Norm.norm (f { fst := x, snd := y })) μ))","decl":"theorem hasFiniteIntegral_prod_iff ⦃f : α × β → E⦄ (h1f : StronglyMeasurable f) :\n    HasFiniteIntegral f (μ.prod ν) ↔\n      (∀ᵐ x ∂μ, HasFiniteIntegral (fun y => f (x, y)) ν) ∧\n        HasFiniteIntegral (fun x => ∫ y, ‖f (x, y)‖ ∂ν) μ := by\n  simp only [hasFiniteIntegral_iff_enorm, lintegral_prod_of_measurable _ h1f.enorm]\n  have (x) : ∀ᵐ y ∂ν, 0 ≤ ‖f (x, y)‖ := by filter_upwards with y using norm_nonneg _\n  simp_rw [integral_eq_lintegral_of_nonneg_ae (this _)\n      (h1f.norm.comp_measurable measurable_prod_mk_left).aestronglyMeasurable,\n    enorm_eq_ofReal toReal_nonneg, ofReal_norm_eq_enorm]\n  -- this fact is probably too specialized to be its own lemma\n  have : ∀ {p q r : Prop} (_ : r → p), (r ↔ p ∧ q) ↔ p → (r ↔ q) := fun {p q r} h1 => by\n    rw [← and_congr_right_iff, and_iff_right_of_imp h1]\n  rw [this]\n  · intro h2f; rw [lintegral_congr_ae]\n    filter_upwards [h2f] with x hx\n    rw [ofReal_toReal]; rw [← lt_top_iff_ne_top]; exact hx\n  · intro h2f; refine ae_lt_top ?_ h2f.ne; exact h1f.enorm.lintegral_prod_right'\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_prod_iff'","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝³ : MeasurableSpace α\ninst✝² : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝¹ : NormedAddCommGroup E\ninst✝ : MeasureTheory.SFinite ν\nf : Prod α β → E\nh1f : MeasureTheory.AEStronglyMeasurable f (μ.prod ν)\n⊢ Iff (MeasureTheory.HasFiniteIntegral f (μ.prod ν)) (And (Filter.Eventually (fun x => MeasureTheory.HasFiniteIntegral (fun y => f { fst := x, snd := y }) ν) (MeasureTheory.ae μ)) (MeasureTheory.HasFiniteIntegral (fun x => MeasureTheory.integral ν fun y => Norm.norm (f { fst := x, snd := y })) μ))","decl":"theorem hasFiniteIntegral_prod_iff' ⦃f : α × β → E⦄ (h1f : AEStronglyMeasurable f (μ.prod ν)) :\n    HasFiniteIntegral f (μ.prod ν) ↔\n      (∀ᵐ x ∂μ, HasFiniteIntegral (fun y => f (x, y)) ν) ∧\n        HasFiniteIntegral (fun x => ∫ y, ‖f (x, y)‖ ∂ν) μ := by\n  rw [hasFiniteIntegral_congr h1f.ae_eq_mk,\n    hasFiniteIntegral_prod_iff h1f.stronglyMeasurable_mk]\n  apply and_congr\n  · apply eventually_congr\n    filter_upwards [ae_ae_of_ae_prod h1f.ae_eq_mk.symm]\n    intro x hx\n    exact hasFiniteIntegral_congr hx\n  · apply hasFiniteIntegral_congr\n    filter_upwards [ae_ae_of_ae_prod h1f.ae_eq_mk.symm] with _ hx using\n      integral_congr_ae (EventuallyEq.fun_comp hx _)\n\n"}
{"name":"MeasureTheory.integrable_prod_iff","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝³ : MeasurableSpace α\ninst✝² : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝¹ : NormedAddCommGroup E\ninst✝ : MeasureTheory.SFinite ν\nf : Prod α β → E\nh1f : MeasureTheory.AEStronglyMeasurable f (μ.prod ν)\n⊢ Iff (MeasureTheory.Integrable f (μ.prod ν)) (And (Filter.Eventually (fun x => MeasureTheory.Integrable (fun y => f { fst := x, snd := y }) ν) (MeasureTheory.ae μ)) (MeasureTheory.Integrable (fun x => MeasureTheory.integral ν fun y => Norm.norm (f { fst := x, snd := y })) μ))","decl":"/-- A binary function is integrable if the function `y ↦ f (x, y)` is integrable for almost every\n  `x` and the function `x ↦ ∫ ‖f (x, y)‖ dy` is integrable. -/\ntheorem integrable_prod_iff ⦃f : α × β → E⦄ (h1f : AEStronglyMeasurable f (μ.prod ν)) :\n    Integrable f (μ.prod ν) ↔\n      (∀ᵐ x ∂μ, Integrable (fun y => f (x, y)) ν) ∧ Integrable (fun x => ∫ y, ‖f (x, y)‖ ∂ν) μ := by\n  simp [Integrable, h1f, hasFiniteIntegral_prod_iff', h1f.norm.integral_prod_right',\n    h1f.prod_mk_left]\n\n"}
{"name":"MeasureTheory.integrable_prod_iff'","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝² : NormedAddCommGroup E\ninst✝¹ : MeasureTheory.SFinite ν\ninst✝ : MeasureTheory.SFinite μ\nf : Prod α β → E\nh1f : MeasureTheory.AEStronglyMeasurable f (μ.prod ν)\n⊢ Iff (MeasureTheory.Integrable f (μ.prod ν)) (And (Filter.Eventually (fun y => MeasureTheory.Integrable (fun x => f { fst := x, snd := y }) μ) (MeasureTheory.ae ν)) (MeasureTheory.Integrable (fun y => MeasureTheory.integral μ fun x => Norm.norm (f { fst := x, snd := y })) ν))","decl":"/-- A binary function is integrable if the function `x ↦ f (x, y)` is integrable for almost every\n  `y` and the function `y ↦ ∫ ‖f (x, y)‖ dx` is integrable. -/\ntheorem integrable_prod_iff' [SFinite μ] ⦃f : α × β → E⦄\n    (h1f : AEStronglyMeasurable f (μ.prod ν)) :\n    Integrable f (μ.prod ν) ↔\n      (∀ᵐ y ∂ν, Integrable (fun x => f (x, y)) μ) ∧ Integrable (fun y => ∫ x, ‖f (x, y)‖ ∂μ) ν := by\n  convert integrable_prod_iff h1f.prod_swap using 1\n  rw [funext fun _ => Function.comp_apply.symm, integrable_swap_iff]\n\n"}
{"name":"MeasureTheory.Integrable.prod_left_ae","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝² : NormedAddCommGroup E\ninst✝¹ : MeasureTheory.SFinite ν\ninst✝ : MeasureTheory.SFinite μ\nf : Prod α β → E\nhf : MeasureTheory.Integrable f (μ.prod ν)\n⊢ Filter.Eventually (fun y => MeasureTheory.Integrable (fun x => f { fst := x, snd := y }) μ) (MeasureTheory.ae ν)","decl":"theorem Integrable.prod_left_ae [SFinite μ] ⦃f : α × β → E⦄ (hf : Integrable f (μ.prod ν)) :\n    ∀ᵐ y ∂ν, Integrable (fun x => f (x, y)) μ :=\n  ((integrable_prod_iff' hf.aestronglyMeasurable).mp hf).1\n\n"}
{"name":"MeasureTheory.Integrable.prod_right_ae","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝² : NormedAddCommGroup E\ninst✝¹ : MeasureTheory.SFinite ν\ninst✝ : MeasureTheory.SFinite μ\nf : Prod α β → E\nhf : MeasureTheory.Integrable f (μ.prod ν)\n⊢ Filter.Eventually (fun x => MeasureTheory.Integrable (fun y => f { fst := x, snd := y }) ν) (MeasureTheory.ae μ)","decl":"theorem Integrable.prod_right_ae [SFinite μ] ⦃f : α × β → E⦄ (hf : Integrable f (μ.prod ν)) :\n    ∀ᵐ x ∂μ, Integrable (fun y => f (x, y)) ν :=\n  hf.swap.prod_left_ae\n\n"}
{"name":"MeasureTheory.Integrable.integral_norm_prod_left","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝³ : MeasurableSpace α\ninst✝² : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝¹ : NormedAddCommGroup E\ninst✝ : MeasureTheory.SFinite ν\nf : Prod α β → E\nhf : MeasureTheory.Integrable f (μ.prod ν)\n⊢ MeasureTheory.Integrable (fun x => MeasureTheory.integral ν fun y => Norm.norm (f { fst := x, snd := y })) μ","decl":"theorem Integrable.integral_norm_prod_left ⦃f : α × β → E⦄ (hf : Integrable f (μ.prod ν)) :\n    Integrable (fun x => ∫ y, ‖f (x, y)‖ ∂ν) μ :=\n  ((integrable_prod_iff hf.aestronglyMeasurable).mp hf).2\n\n"}
{"name":"MeasureTheory.Integrable.integral_norm_prod_right","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝² : NormedAddCommGroup E\ninst✝¹ : MeasureTheory.SFinite ν\ninst✝ : MeasureTheory.SFinite μ\nf : Prod α β → E\nhf : MeasureTheory.Integrable f (μ.prod ν)\n⊢ MeasureTheory.Integrable (fun y => MeasureTheory.integral μ fun x => Norm.norm (f { fst := x, snd := y })) ν","decl":"theorem Integrable.integral_norm_prod_right [SFinite μ] ⦃f : α × β → E⦄\n    (hf : Integrable f (μ.prod ν)) : Integrable (fun y => ∫ x, ‖f (x, y)‖ ∂μ) ν :=\n  hf.swap.integral_norm_prod_left\n\n"}
{"name":"MeasureTheory.Integrable.prod_smul","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝³ : NormedAddCommGroup E\ninst✝² : MeasureTheory.SFinite ν\n𝕜 : Type u_4\ninst✝¹ : NontriviallyNormedField 𝕜\ninst✝ : NormedSpace 𝕜 E\nf : α → 𝕜\ng : β → E\nhf : MeasureTheory.Integrable f μ\nhg : MeasureTheory.Integrable g ν\n⊢ MeasureTheory.Integrable (fun z => HSMul.hSMul (f z.1) (g z.2)) (μ.prod ν)","decl":"theorem Integrable.prod_smul {𝕜 : Type*} [NontriviallyNormedField 𝕜] [NormedSpace 𝕜 E]\n    {f : α → 𝕜} {g : β → E} (hf : Integrable f μ) (hg : Integrable g ν) :\n    Integrable (fun z : α × β => f z.1 • g z.2) (μ.prod ν) := by\n  refine (integrable_prod_iff ?_).2 ⟨?_, ?_⟩\n  · exact hf.1.fst.smul hg.1.snd\n  · exact Eventually.of_forall fun x => hg.smul (f x)\n  · simpa only [norm_smul, integral_mul_left] using hf.norm.mul_const _\n\n"}
{"name":"MeasureTheory.Integrable.prod_mul","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : MeasurableSpace α\ninst✝² : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝¹ : MeasureTheory.SFinite ν\nL : Type u_4\ninst✝ : RCLike L\nf : α → L\ng : β → L\nhf : MeasureTheory.Integrable f μ\nhg : MeasureTheory.Integrable g ν\n⊢ MeasureTheory.Integrable (fun z => HMul.hMul (f z.1) (g z.2)) (μ.prod ν)","decl":"theorem Integrable.prod_mul {L : Type*} [RCLike L] {f : α → L} {g : β → L} (hf : Integrable f μ)\n    (hg : Integrable g ν) : Integrable (fun z : α × β => f z.1 * g z.2) (μ.prod ν) :=\n  hf.prod_smul hg\n\n"}
{"name":"MeasureTheory.Integrable.integral_prod_left","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝² : NormedAddCommGroup E\ninst✝¹ : MeasureTheory.SFinite ν\ninst✝ : NormedSpace Real E\nf : Prod α β → E\nhf : MeasureTheory.Integrable f (μ.prod ν)\n⊢ MeasureTheory.Integrable (fun x => MeasureTheory.integral ν fun y => f { fst := x, snd := y }) μ","decl":"theorem Integrable.integral_prod_left ⦃f : α × β → E⦄ (hf : Integrable f (μ.prod ν)) :\n    Integrable (fun x => ∫ y, f (x, y) ∂ν) μ :=\n  Integrable.mono hf.integral_norm_prod_left hf.aestronglyMeasurable.integral_prod_right' <|\n    Eventually.of_forall fun x =>\n      (norm_integral_le_integral_norm _).trans_eq <|\n        (norm_of_nonneg <|\n            integral_nonneg_of_ae <|\n              Eventually.of_forall fun y => (norm_nonneg (f (x, y)) :)).symm\n\n"}
{"name":"MeasureTheory.Integrable.integral_prod_right","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝³ : NormedAddCommGroup E\ninst✝² : MeasureTheory.SFinite ν\ninst✝¹ : NormedSpace Real E\ninst✝ : MeasureTheory.SFinite μ\nf : Prod α β → E\nhf : MeasureTheory.Integrable f (μ.prod ν)\n⊢ MeasureTheory.Integrable (fun y => MeasureTheory.integral μ fun x => f { fst := x, snd := y }) ν","decl":"theorem Integrable.integral_prod_right [SFinite μ] ⦃f : α × β → E⦄\n    (hf : Integrable f (μ.prod ν)) : Integrable (fun y => ∫ x, f (x, y) ∂μ) ν :=\n  hf.swap.integral_prod_left\n\n"}
{"name":"MeasureTheory.integral_prod_swap","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝³ : NormedAddCommGroup E\ninst✝² : MeasureTheory.SFinite ν\ninst✝¹ : NormedSpace Real E\ninst✝ : MeasureTheory.SFinite μ\nf : Prod α β → E\n⊢ Eq (MeasureTheory.integral (ν.prod μ) fun z => f z.swap) (MeasureTheory.integral (μ.prod ν) fun z => f z)","decl":"theorem integral_prod_swap (f : α × β → E) :\n    ∫ z, f z.swap ∂ν.prod μ = ∫ z, f z ∂μ.prod ν :=\n  measurePreserving_swap.integral_comp MeasurableEquiv.prodComm.measurableEmbedding _\n\n"}
{"name":"MeasureTheory.integral_fn_integral_add","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁷ : MeasurableSpace α\ninst✝⁶ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : MeasureTheory.SFinite ν\ninst✝³ : NormedSpace Real E\ninst✝² : MeasureTheory.SFinite μ\nE' : Type u_4\ninst✝¹ : NormedAddCommGroup E'\ninst✝ : NormedSpace Real E'\nf g : Prod α β → E\nF : E → E'\nhf : MeasureTheory.Integrable f (μ.prod ν)\nhg : MeasureTheory.Integrable g (μ.prod ν)\n⊢ Eq (MeasureTheory.integral μ fun x => F (MeasureTheory.integral ν fun y => HAdd.hAdd (f { fst := x, snd := y }) (g { fst := x, snd := y }))) (MeasureTheory.integral μ fun x => F (HAdd.hAdd (MeasureTheory.integral ν fun y => f { fst := x, snd := y }) (MeasureTheory.integral ν fun y => g { fst := x, snd := y })))","decl":"/-- Integrals commute with addition inside another integral. `F` can be any function. -/\ntheorem integral_fn_integral_add ⦃f g : α × β → E⦄ (F : E → E') (hf : Integrable f (μ.prod ν))\n    (hg : Integrable g (μ.prod ν)) :\n    (∫ x, F (∫ y, f (x, y) + g (x, y) ∂ν) ∂μ) =\n      ∫ x, F ((∫ y, f (x, y) ∂ν) + ∫ y, g (x, y) ∂ν) ∂μ := by\n  refine integral_congr_ae ?_\n  filter_upwards [hf.prod_right_ae, hg.prod_right_ae] with _ h2f h2g\n  simp [integral_add h2f h2g]\n\n"}
{"name":"MeasureTheory.integral_fn_integral_sub","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁷ : MeasurableSpace α\ninst✝⁶ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : MeasureTheory.SFinite ν\ninst✝³ : NormedSpace Real E\ninst✝² : MeasureTheory.SFinite μ\nE' : Type u_4\ninst✝¹ : NormedAddCommGroup E'\ninst✝ : NormedSpace Real E'\nf g : Prod α β → E\nF : E → E'\nhf : MeasureTheory.Integrable f (μ.prod ν)\nhg : MeasureTheory.Integrable g (μ.prod ν)\n⊢ Eq (MeasureTheory.integral μ fun x => F (MeasureTheory.integral ν fun y => HSub.hSub (f { fst := x, snd := y }) (g { fst := x, snd := y }))) (MeasureTheory.integral μ fun x => F (HSub.hSub (MeasureTheory.integral ν fun y => f { fst := x, snd := y }) (MeasureTheory.integral ν fun y => g { fst := x, snd := y })))","decl":"/-- Integrals commute with subtraction inside another integral.\n  `F` can be any measurable function. -/\ntheorem integral_fn_integral_sub ⦃f g : α × β → E⦄ (F : E → E') (hf : Integrable f (μ.prod ν))\n    (hg : Integrable g (μ.prod ν)) :\n    (∫ x, F (∫ y, f (x, y) - g (x, y) ∂ν) ∂μ) =\n      ∫ x, F ((∫ y, f (x, y) ∂ν) - ∫ y, g (x, y) ∂ν) ∂μ := by\n  refine integral_congr_ae ?_\n  filter_upwards [hf.prod_right_ae, hg.prod_right_ae] with _ h2f h2g\n  simp [integral_sub h2f h2g]\n\n"}
{"name":"MeasureTheory.lintegral_fn_integral_sub","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝³ : NormedAddCommGroup E\ninst✝² : MeasureTheory.SFinite ν\ninst✝¹ : NormedSpace Real E\ninst✝ : MeasureTheory.SFinite μ\nf g : Prod α β → E\nF : E → ENNReal\nhf : MeasureTheory.Integrable f (μ.prod ν)\nhg : MeasureTheory.Integrable g (μ.prod ν)\n⊢ Eq (MeasureTheory.lintegral μ fun x => F (MeasureTheory.integral ν fun y => HSub.hSub (f { fst := x, snd := y }) (g { fst := x, snd := y }))) (MeasureTheory.lintegral μ fun x => F (HSub.hSub (MeasureTheory.integral ν fun y => f { fst := x, snd := y }) (MeasureTheory.integral ν fun y => g { fst := x, snd := y })))","decl":"/-- Integrals commute with subtraction inside a lower Lebesgue integral.\n  `F` can be any function. -/\ntheorem lintegral_fn_integral_sub ⦃f g : α × β → E⦄ (F : E → ℝ≥0∞) (hf : Integrable f (μ.prod ν))\n    (hg : Integrable g (μ.prod ν)) :\n    (∫⁻ x, F (∫ y, f (x, y) - g (x, y) ∂ν) ∂μ) =\n      ∫⁻ x, F ((∫ y, f (x, y) ∂ν) - ∫ y, g (x, y) ∂ν) ∂μ := by\n  refine lintegral_congr_ae ?_\n  filter_upwards [hf.prod_right_ae, hg.prod_right_ae] with _ h2f h2g\n  simp [integral_sub h2f h2g]\n\n"}
{"name":"MeasureTheory.integral_integral_add","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝³ : NormedAddCommGroup E\ninst✝² : MeasureTheory.SFinite ν\ninst✝¹ : NormedSpace Real E\ninst✝ : MeasureTheory.SFinite μ\nf g : Prod α β → E\nhf : MeasureTheory.Integrable f (μ.prod ν)\nhg : MeasureTheory.Integrable g (μ.prod ν)\n⊢ Eq (MeasureTheory.integral μ fun x => MeasureTheory.integral ν fun y => HAdd.hAdd (f { fst := x, snd := y }) (g { fst := x, snd := y })) (HAdd.hAdd (MeasureTheory.integral μ fun x => MeasureTheory.integral ν fun y => f { fst := x, snd := y }) (MeasureTheory.integral μ fun x => MeasureTheory.integral ν fun y => g { fst := x, snd := y }))","decl":"/-- Double integrals commute with addition. -/\ntheorem integral_integral_add ⦃f g : α × β → E⦄ (hf : Integrable f (μ.prod ν))\n    (hg : Integrable g (μ.prod ν)) :\n    (∫ x, ∫ y, f (x, y) + g (x, y) ∂ν ∂μ) = (∫ x, ∫ y, f (x, y) ∂ν ∂μ) + ∫ x, ∫ y, g (x, y) ∂ν ∂μ :=\n  (integral_fn_integral_add id hf hg).trans <|\n    integral_add hf.integral_prod_left hg.integral_prod_left\n\n"}
{"name":"MeasureTheory.integral_integral_add'","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝³ : NormedAddCommGroup E\ninst✝² : MeasureTheory.SFinite ν\ninst✝¹ : NormedSpace Real E\ninst✝ : MeasureTheory.SFinite μ\nf g : Prod α β → E\nhf : MeasureTheory.Integrable f (μ.prod ν)\nhg : MeasureTheory.Integrable g (μ.prod ν)\n⊢ Eq (MeasureTheory.integral μ fun x => MeasureTheory.integral ν fun y => HAdd.hAdd f g { fst := x, snd := y }) (HAdd.hAdd (MeasureTheory.integral μ fun x => MeasureTheory.integral ν fun y => f { fst := x, snd := y }) (MeasureTheory.integral μ fun x => MeasureTheory.integral ν fun y => g { fst := x, snd := y }))","decl":"/-- Double integrals commute with addition. This is the version with `(f + g) (x, y)`\n  (instead of `f (x, y) + g (x, y)`) in the LHS. -/\ntheorem integral_integral_add' ⦃f g : α × β → E⦄ (hf : Integrable f (μ.prod ν))\n    (hg : Integrable g (μ.prod ν)) :\n    (∫ x, ∫ y, (f + g) (x, y) ∂ν ∂μ) = (∫ x, ∫ y, f (x, y) ∂ν ∂μ) + ∫ x, ∫ y, g (x, y) ∂ν ∂μ :=\n  integral_integral_add hf hg\n\n"}
{"name":"MeasureTheory.integral_integral_sub","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝³ : NormedAddCommGroup E\ninst✝² : MeasureTheory.SFinite ν\ninst✝¹ : NormedSpace Real E\ninst✝ : MeasureTheory.SFinite μ\nf g : Prod α β → E\nhf : MeasureTheory.Integrable f (μ.prod ν)\nhg : MeasureTheory.Integrable g (μ.prod ν)\n⊢ Eq (MeasureTheory.integral μ fun x => MeasureTheory.integral ν fun y => HSub.hSub (f { fst := x, snd := y }) (g { fst := x, snd := y })) (HSub.hSub (MeasureTheory.integral μ fun x => MeasureTheory.integral ν fun y => f { fst := x, snd := y }) (MeasureTheory.integral μ fun x => MeasureTheory.integral ν fun y => g { fst := x, snd := y }))","decl":"/-- Double integrals commute with subtraction. -/\ntheorem integral_integral_sub ⦃f g : α × β → E⦄ (hf : Integrable f (μ.prod ν))\n    (hg : Integrable g (μ.prod ν)) :\n    (∫ x, ∫ y, f (x, y) - g (x, y) ∂ν ∂μ) = (∫ x, ∫ y, f (x, y) ∂ν ∂μ) - ∫ x, ∫ y, g (x, y) ∂ν ∂μ :=\n  (integral_fn_integral_sub id hf hg).trans <|\n    integral_sub hf.integral_prod_left hg.integral_prod_left\n\n"}
{"name":"MeasureTheory.integral_integral_sub'","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝³ : NormedAddCommGroup E\ninst✝² : MeasureTheory.SFinite ν\ninst✝¹ : NormedSpace Real E\ninst✝ : MeasureTheory.SFinite μ\nf g : Prod α β → E\nhf : MeasureTheory.Integrable f (μ.prod ν)\nhg : MeasureTheory.Integrable g (μ.prod ν)\n⊢ Eq (MeasureTheory.integral μ fun x => MeasureTheory.integral ν fun y => HSub.hSub f g { fst := x, snd := y }) (HSub.hSub (MeasureTheory.integral μ fun x => MeasureTheory.integral ν fun y => f { fst := x, snd := y }) (MeasureTheory.integral μ fun x => MeasureTheory.integral ν fun y => g { fst := x, snd := y }))","decl":"/-- Double integrals commute with subtraction. This is the version with `(f - g) (x, y)`\n  (instead of `f (x, y) - g (x, y)`) in the LHS. -/\ntheorem integral_integral_sub' ⦃f g : α × β → E⦄ (hf : Integrable f (μ.prod ν))\n    (hg : Integrable g (μ.prod ν)) :\n    (∫ x, ∫ y, (f - g) (x, y) ∂ν ∂μ) = (∫ x, ∫ y, f (x, y) ∂ν ∂μ) - ∫ x, ∫ y, g (x, y) ∂ν ∂μ :=\n  integral_integral_sub hf hg\n\n"}
{"name":"MeasureTheory.continuous_integral_integral","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝³ : NormedAddCommGroup E\ninst✝² : MeasureTheory.SFinite ν\ninst✝¹ : NormedSpace Real E\ninst✝ : MeasureTheory.SFinite μ\n⊢ Continuous fun f => MeasureTheory.integral μ fun x => MeasureTheory.integral ν fun y => ↑↑f { fst := x, snd := y }","decl":"/-- The map that sends an L¹-function `f : α × β → E` to `∫∫f` is continuous. -/\ntheorem continuous_integral_integral :\n    Continuous fun f : α × β →₁[μ.prod ν] E => ∫ x, ∫ y, f (x, y) ∂ν ∂μ := by\n  rw [continuous_iff_continuousAt]; intro g\n  refine\n    tendsto_integral_of_L1 _ (L1.integrable_coeFn g).integral_prod_left\n      (Eventually.of_forall fun h => (L1.integrable_coeFn h).integral_prod_left) ?_\n  simp_rw [← lintegral_fn_integral_sub _ (L1.integrable_coeFn _) (L1.integrable_coeFn g)]\n  apply tendsto_of_tendsto_of_tendsto_of_le_of_le tendsto_const_nhds _ (fun i => zero_le _) _\n  · exact fun i => ∫⁻ x, ∫⁻ y, ‖i (x, y) - g (x, y)‖ₑ ∂ν ∂μ\n  swap; · exact fun i => lintegral_mono fun x => enorm_integral_le_lintegral_enorm _\n  show\n    Tendsto (fun i : α × β →₁[μ.prod ν] E => ∫⁻ x, ∫⁻ y : β, ‖i (x, y) - g (x, y)‖ₑ ∂ν ∂μ) (𝓝 g)\n      (𝓝 0)\n  have this (i : α × β →₁[μ.prod ν] E) : Measurable fun z => ‖i z - g z‖ₑ :=\n    ((Lp.stronglyMeasurable i).sub (Lp.stronglyMeasurable g)).enorm\n  -- Porting note: was\n  -- simp_rw [← lintegral_prod_of_measurable _ (this _), ← L1.ofReal_norm_sub_eq_lintegral, ←\n  --   ofReal_zero]\n  conv =>\n    congr\n    ext\n    rw [← lintegral_prod_of_measurable _ (this _), ← L1.ofReal_norm_sub_eq_lintegral]\n  rw [← ofReal_zero]\n  refine (continuous_ofReal.tendsto 0).comp ?_\n  rw [← tendsto_iff_norm_sub_tendsto_zero]; exact tendsto_id\n\n"}
{"name":"MeasureTheory.integral_prod","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝³ : NormedAddCommGroup E\ninst✝² : MeasureTheory.SFinite ν\ninst✝¹ : NormedSpace Real E\ninst✝ : MeasureTheory.SFinite μ\nf : Prod α β → E\nhf : MeasureTheory.Integrable f (μ.prod ν)\n⊢ Eq (MeasureTheory.integral (μ.prod ν) fun z => f z) (MeasureTheory.integral μ fun x => MeasureTheory.integral ν fun y => f { fst := x, snd := y })","decl":"/-- **Fubini's Theorem**: For integrable functions on `α × β`,\n  the Bochner integral of `f` is equal to the iterated Bochner integral.\n  `integrable_prod_iff` can be useful to show that the function in question in integrable.\n  `MeasureTheory.Integrable.integral_prod_right` is useful to show that the inner integral\n  of the right-hand side is integrable. -/\ntheorem integral_prod (f : α × β → E) (hf : Integrable f (μ.prod ν)) :\n    ∫ z, f z ∂μ.prod ν = ∫ x, ∫ y, f (x, y) ∂ν ∂μ := by\n  by_cases hE : CompleteSpace E; swap; · simp only [integral, dif_neg hE]\n  revert f\n  apply Integrable.induction\n  · intro c s hs h2s\n    simp_rw [integral_indicator hs, ← indicator_comp_right, Function.comp_def,\n      integral_indicator (measurable_prod_mk_left hs), setIntegral_const, integral_smul_const,\n      integral_toReal (measurable_measure_prod_mk_left hs).aemeasurable\n        (ae_measure_lt_top hs h2s.ne)]\n    rw [prod_apply hs]\n  · rintro f g - i_f i_g hf hg\n    simp_rw [integral_add' i_f i_g, integral_integral_add' i_f i_g, hf, hg]\n  · exact isClosed_eq continuous_integral continuous_integral_integral\n  · rintro f g hfg - hf; convert hf using 1\n    · exact integral_congr_ae hfg.symm\n    · apply integral_congr_ae\n      filter_upwards [ae_ae_of_ae_prod hfg] with x hfgx using integral_congr_ae (ae_eq_symm hfgx)\n\n"}
{"name":"MeasureTheory.integral_prod_symm","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝³ : NormedAddCommGroup E\ninst✝² : MeasureTheory.SFinite ν\ninst✝¹ : NormedSpace Real E\ninst✝ : MeasureTheory.SFinite μ\nf : Prod α β → E\nhf : MeasureTheory.Integrable f (μ.prod ν)\n⊢ Eq (MeasureTheory.integral (μ.prod ν) fun z => f z) (MeasureTheory.integral ν fun y => MeasureTheory.integral μ fun x => f { fst := x, snd := y })","decl":"/-- Symmetric version of **Fubini's Theorem**: For integrable functions on `α × β`,\n  the Bochner integral of `f` is equal to the iterated Bochner integral.\n  This version has the integrals on the right-hand side in the other order. -/\ntheorem integral_prod_symm (f : α × β → E) (hf : Integrable f (μ.prod ν)) :\n    ∫ z, f z ∂μ.prod ν = ∫ y, ∫ x, f (x, y) ∂μ ∂ν := by\n  rw [← integral_prod_swap f]; exact integral_prod _ hf.swap\n\n"}
{"name":"MeasureTheory.integral_integral","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝³ : NormedAddCommGroup E\ninst✝² : MeasureTheory.SFinite ν\ninst✝¹ : NormedSpace Real E\ninst✝ : MeasureTheory.SFinite μ\nf : α → β → E\nhf : MeasureTheory.Integrable (Function.uncurry f) (μ.prod ν)\n⊢ Eq (MeasureTheory.integral μ fun x => MeasureTheory.integral ν fun y => f x y) (MeasureTheory.integral (μ.prod ν) fun z => f z.1 z.2)","decl":"/-- Reversed version of **Fubini's Theorem**. -/\ntheorem integral_integral {f : α → β → E} (hf : Integrable (uncurry f) (μ.prod ν)) :\n    ∫ x, ∫ y, f x y ∂ν ∂μ = ∫ z, f z.1 z.2 ∂μ.prod ν :=\n  (integral_prod _ hf).symm\n\n"}
{"name":"MeasureTheory.integral_integral_symm","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝³ : NormedAddCommGroup E\ninst✝² : MeasureTheory.SFinite ν\ninst✝¹ : NormedSpace Real E\ninst✝ : MeasureTheory.SFinite μ\nf : α → β → E\nhf : MeasureTheory.Integrable (Function.uncurry f) (μ.prod ν)\n⊢ Eq (MeasureTheory.integral μ fun x => MeasureTheory.integral ν fun y => f x y) (MeasureTheory.integral (ν.prod μ) fun z => f z.2 z.1)","decl":"/-- Reversed version of **Fubini's Theorem** (symmetric version). -/\ntheorem integral_integral_symm {f : α → β → E} (hf : Integrable (uncurry f) (μ.prod ν)) :\n    ∫ x, ∫ y, f x y ∂ν ∂μ = ∫ z, f z.2 z.1 ∂ν.prod μ :=\n  (integral_prod_symm _ hf.swap).symm\n\n"}
{"name":"MeasureTheory.integral_integral_swap","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝³ : NormedAddCommGroup E\ninst✝² : MeasureTheory.SFinite ν\ninst✝¹ : NormedSpace Real E\ninst✝ : MeasureTheory.SFinite μ\nf : α → β → E\nhf : MeasureTheory.Integrable (Function.uncurry f) (μ.prod ν)\n⊢ Eq (MeasureTheory.integral μ fun x => MeasureTheory.integral ν fun y => f x y) (MeasureTheory.integral ν fun y => MeasureTheory.integral μ fun x => f x y)","decl":"/-- Change the order of Bochner integration. -/\ntheorem integral_integral_swap ⦃f : α → β → E⦄ (hf : Integrable (uncurry f) (μ.prod ν)) :\n    ∫ x, ∫ y, f x y ∂ν ∂μ = ∫ y, ∫ x, f x y ∂μ ∂ν :=\n  (integral_integral hf).trans (integral_prod_symm _ hf)\n\n"}
{"name":"MeasureTheory.setIntegral_prod","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝³ : NormedAddCommGroup E\ninst✝² : MeasureTheory.SFinite ν\ninst✝¹ : NormedSpace Real E\ninst✝ : MeasureTheory.SFinite μ\nf : Prod α β → E\ns : Set α\nt : Set β\nhf : MeasureTheory.IntegrableOn f (SProd.sprod s t) (μ.prod ν)\n⊢ Eq (MeasureTheory.integral ((μ.prod ν).restrict (SProd.sprod s t)) fun z => f z) (MeasureTheory.integral (μ.restrict s) fun x => MeasureTheory.integral (ν.restrict t) fun y => f { fst := x, snd := y })","decl":"/-- **Fubini's Theorem** for set integrals. -/\ntheorem setIntegral_prod (f : α × β → E) {s : Set α} {t : Set β}\n    (hf : IntegrableOn f (s ×ˢ t) (μ.prod ν)) :\n    ∫ z in s ×ˢ t, f z ∂μ.prod ν = ∫ x in s, ∫ y in t, f (x, y) ∂ν ∂μ := by\n  simp only [← Measure.prod_restrict s t, IntegrableOn] at hf ⊢\n  exact integral_prod f hf\n\n"}
{"name":"MeasureTheory.integral_prod_smul","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁷ : MeasurableSpace α\ninst✝⁶ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : MeasureTheory.SFinite ν\ninst✝³ : NormedSpace Real E\ninst✝² : MeasureTheory.SFinite μ\n𝕜 : Type u_5\ninst✝¹ : RCLike 𝕜\ninst✝ : NormedSpace 𝕜 E\nf : α → 𝕜\ng : β → E\n⊢ Eq (MeasureTheory.integral (μ.prod ν) fun z => HSMul.hSMul (f z.1) (g z.2)) (HSMul.hSMul (MeasureTheory.integral μ fun x => f x) (MeasureTheory.integral ν fun y => g y))","decl":"theorem integral_prod_smul {𝕜 : Type*} [RCLike 𝕜] [NormedSpace 𝕜 E] (f : α → 𝕜) (g : β → E) :\n    ∫ z, f z.1 • g z.2 ∂μ.prod ν = (∫ x, f x ∂μ) • ∫ y, g y ∂ν := by\n  by_cases hE : CompleteSpace E; swap; · simp [integral, hE]\n  by_cases h : Integrable (fun z : α × β => f z.1 • g z.2) (μ.prod ν)\n  · rw [integral_prod _ h]\n    simp_rw [integral_smul, integral_smul_const]\n  have H : ¬Integrable f μ ∨ ¬Integrable g ν := by\n    contrapose! h\n    exact h.1.prod_smul h.2\n  cases' H with H H <;> simp [integral_undef h, integral_undef H]\n\n"}
{"name":"MeasureTheory.integral_prod_mul","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝² : MeasureTheory.SFinite ν\ninst✝¹ : MeasureTheory.SFinite μ\nL : Type u_5\ninst✝ : RCLike L\nf : α → L\ng : β → L\n⊢ Eq (MeasureTheory.integral (μ.prod ν) fun z => HMul.hMul (f z.1) (g z.2)) (HMul.hMul (MeasureTheory.integral μ fun x => f x) (MeasureTheory.integral ν fun y => g y))","decl":"theorem integral_prod_mul {L : Type*} [RCLike L] (f : α → L) (g : β → L) :\n    ∫ z, f z.1 * g z.2 ∂μ.prod ν = (∫ x, f x ∂μ) * ∫ y, g y ∂ν :=\n  integral_prod_smul f g\n\n"}
{"name":"MeasureTheory.setIntegral_prod_mul","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝² : MeasureTheory.SFinite ν\ninst✝¹ : MeasureTheory.SFinite μ\nL : Type u_5\ninst✝ : RCLike L\nf : α → L\ng : β → L\ns : Set α\nt : Set β\n⊢ Eq (MeasureTheory.integral ((μ.prod ν).restrict (SProd.sprod s t)) fun z => HMul.hMul (f z.1) (g z.2)) (HMul.hMul (MeasureTheory.integral (μ.restrict s) fun x => f x) (MeasureTheory.integral (ν.restrict t) fun y => g y))","decl":"theorem setIntegral_prod_mul {L : Type*} [RCLike L] (f : α → L) (g : β → L) (s : Set α)\n    (t : Set β) :\n    ∫ z in s ×ˢ t, f z.1 * g z.2 ∂μ.prod ν = (∫ x in s, f x ∂μ) * ∫ y in t, g y ∂ν := by\n  -- Porting note: added\n  rw [← Measure.prod_restrict s t]\n  apply integral_prod_mul\n\n"}
{"name":"MeasureTheory.integral_fun_snd","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝³ : NormedAddCommGroup E\ninst✝² : MeasureTheory.SFinite ν\ninst✝¹ : NormedSpace Real E\ninst✝ : MeasureTheory.SFinite μ\nf : β → E\n⊢ Eq (MeasureTheory.integral (μ.prod ν) fun z => f z.2) (HSMul.hSMul (μ Set.univ).toReal (MeasureTheory.integral ν fun y => f y))","decl":"theorem integral_fun_snd (f : β → E) : ∫ z, f z.2 ∂μ.prod ν = (μ univ).toReal • ∫ y, f y ∂ν := by\n  simpa using integral_prod_smul (1 : α → ℝ) f\n\n"}
{"name":"MeasureTheory.integral_fun_fst","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝³ : NormedAddCommGroup E\ninst✝² : MeasureTheory.SFinite ν\ninst✝¹ : NormedSpace Real E\ninst✝ : MeasureTheory.SFinite μ\nf : α → E\n⊢ Eq (MeasureTheory.integral (μ.prod ν) fun z => f z.1) (HSMul.hSMul (ν Set.univ).toReal (MeasureTheory.integral μ fun x => f x))","decl":"theorem integral_fun_fst (f : α → E) : ∫ z, f z.1 ∂μ.prod ν = (ν univ).toReal • ∫ x, f x ∂μ := by\n  rw [← integral_prod_swap]\n  apply integral_fun_snd\n\n"}
{"name":"MeasureTheory.integral_integral_swap_of_hasCompactSupport","module":"Mathlib.MeasureTheory.Integral.Prod","initialProofState":"E : Type u_3\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace Real E\nX : Type u_5\nY : Type u_6\ninst✝⁷ : TopologicalSpace X\ninst✝⁶ : TopologicalSpace Y\ninst✝⁵ : MeasurableSpace X\ninst✝⁴ : MeasurableSpace Y\ninst✝³ : OpensMeasurableSpace X\ninst✝² : OpensMeasurableSpace Y\nf : X → Y → E\nhf : Continuous (Function.uncurry f)\nh'f : HasCompactSupport (Function.uncurry f)\nμ : MeasureTheory.Measure X\nν : MeasureTheory.Measure Y\ninst✝¹ : MeasureTheory.IsFiniteMeasureOnCompacts μ\ninst✝ : MeasureTheory.IsFiniteMeasureOnCompacts ν\n⊢ Eq (MeasureTheory.integral μ fun x => MeasureTheory.integral ν fun y => f x y) (MeasureTheory.integral ν fun y => MeasureTheory.integral μ fun x => f x y)","decl":"/-- A version of *Fubini theorem* for continuous functions with compact support: one may swap\nthe order of integration with respect to locally finite measures. One does not assume that the\nmeasures are σ-finite, contrary to the usual Fubini theorem. -/\nlemma integral_integral_swap_of_hasCompactSupport\n    {f : X → Y → E} (hf : Continuous f.uncurry) (h'f : HasCompactSupport f.uncurry)\n    {μ : Measure X} {ν : Measure Y} [IsFiniteMeasureOnCompacts μ] [IsFiniteMeasureOnCompacts ν] :\n    ∫ x, (∫ y, f x y ∂ν) ∂μ = ∫ y, (∫ x, f x y ∂μ) ∂ν := by\n  let U := Prod.fst '' (tsupport f.uncurry)\n  have : Fact (μ U < ∞) := ⟨(IsCompact.image h'f continuous_fst).measure_lt_top⟩\n  let V := Prod.snd '' (tsupport f.uncurry)\n  have : Fact (ν V < ∞) := ⟨(IsCompact.image h'f continuous_snd).measure_lt_top⟩\n  calc\n  ∫ x, (∫ y, f x y ∂ν) ∂μ = ∫ x, (∫ y in V, f x y ∂ν) ∂μ := by\n    congr 1 with x\n    apply (setIntegral_eq_integral_of_forall_compl_eq_zero (fun y hy ↦ ?_)).symm\n    contrapose! hy\n    have : (x, y) ∈ Function.support f.uncurry := hy\n    exact mem_image_of_mem _ (subset_tsupport _ this)\n  _ = ∫ x in U, (∫ y in V, f x y ∂ν) ∂μ := by\n    apply (setIntegral_eq_integral_of_forall_compl_eq_zero (fun x hx ↦ ?_)).symm\n    have : ∀ y, f x y = 0 := by\n      intro y\n      contrapose! hx\n      have : (x, y) ∈ Function.support f.uncurry := hx\n      exact mem_image_of_mem _ (subset_tsupport _ this)\n    simp [this]\n  _ = ∫ y in V, (∫ x in U, f x y ∂μ) ∂ν := by\n    apply integral_integral_swap\n    apply (integrableOn_iff_integrable_of_support_subset (subset_tsupport f.uncurry)).mp\n    refine ⟨(h'f.stronglyMeasurable_of_prod hf).aestronglyMeasurable, ?_⟩\n    obtain ⟨C, hC⟩ : ∃ C, ∀ p, ‖f.uncurry p‖ ≤ C := hf.bounded_above_of_compact_support h'f\n    exact hasFiniteIntegral_of_bounded (C := C) (Eventually.of_forall hC)\n  _ = ∫ y, (∫ x in U, f x y ∂μ) ∂ν := by\n    apply setIntegral_eq_integral_of_forall_compl_eq_zero (fun y hy ↦ ?_)\n    have : ∀ x, f x y = 0 := by\n      intro x\n      contrapose! hy\n      have : (x, y) ∈ Function.support f.uncurry := hy\n      exact mem_image_of_mem _ (subset_tsupport _ this)\n    simp [this]\n  _ = ∫ y, (∫ x, f x y ∂μ) ∂ν := by\n    congr 1 with y\n    apply setIntegral_eq_integral_of_forall_compl_eq_zero (fun x hx ↦ ?_)\n    contrapose! hx\n    have : (x, y) ∈ Function.support f.uncurry := hx\n    exact mem_image_of_mem _ (subset_tsupport _ this)\n\n"}
