{"name":"Even.add_self","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : Add α\nr : α\n⊢ Even (HAdd.hAdd r r)","decl":"@[to_additive (attr := simp)] lemma IsSquare.mul_self (r : α) : IsSquare (r * r) := ⟨r, rfl⟩\n\n"}
{"name":"IsSquare.mul_self","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : Mul α\nr : α\n⊢ IsSquare (HMul.hMul r r)","decl":"@[to_additive (attr := simp)] lemma IsSquare.mul_self (r : α) : IsSquare (r * r) := ⟨r, rfl⟩\n\n"}
{"name":"isSquare_mul_self","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : Mul α\nr : α\n⊢ IsSquare (HMul.hMul r r)","decl":"@[deprecated (since := \"2024-08-27\")] alias isSquare_mul_self := IsSquare.mul_self\n"}
{"name":"even_add_self","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : Add α\nr : α\n⊢ Even (HAdd.hAdd r r)","decl":"@[deprecated (since := \"2024-08-27\")] alias even_add_self := Even.add_self\n\n"}
{"name":"even_op_iff","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : Add α\na : α\n⊢ Iff (Even (AddOpposite.op a)) (Even a)","decl":"@[to_additive]\nlemma isSquare_op_iff {a : α} : IsSquare (op a) ↔ IsSquare a :=\n  ⟨fun ⟨r, hr⟩ ↦ ⟨unop r, congr_arg unop hr⟩, fun ⟨r, hr⟩ ↦ ⟨op r, congr_arg op hr⟩⟩\n\n"}
{"name":"isSquare_op_iff","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : Mul α\na : α\n⊢ Iff (IsSquare (MulOpposite.op a)) (IsSquare a)","decl":"@[to_additive]\nlemma isSquare_op_iff {a : α} : IsSquare (op a) ↔ IsSquare a :=\n  ⟨fun ⟨r, hr⟩ ↦ ⟨unop r, congr_arg unop hr⟩, fun ⟨r, hr⟩ ↦ ⟨op r, congr_arg op hr⟩⟩\n\n"}
{"name":"isSquare_unop_iff","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : Mul α\na : MulOpposite α\n⊢ Iff (IsSquare (MulOpposite.unop a)) (IsSquare a)","decl":"@[to_additive]\nlemma isSquare_unop_iff {a : αᵐᵒᵖ} : IsSquare (unop a) ↔ IsSquare a := isSquare_op_iff.symm\n\n"}
{"name":"even_unop_iff","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : Add α\na : AddOpposite α\n⊢ Iff (Even (AddOpposite.unop a)) (Even a)","decl":"@[to_additive]\nlemma isSquare_unop_iff {a : αᵐᵒᵖ} : IsSquare (unop a) ↔ IsSquare a := isSquare_op_iff.symm\n\n"}
{"name":"even_ofMul_iff","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : Mul α\na : α\n⊢ Iff (Even (Additive.ofMul a)) (IsSquare a)","decl":"@[simp]\nlemma even_ofMul_iff {a : α} : Even (Additive.ofMul a) ↔ IsSquare a := Iff.rfl\n\n"}
{"name":"isSquare_toMul_iff","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : Mul α\na : Additive α\n⊢ Iff (IsSquare (Additive.toMul a)) (Even a)","decl":"@[simp]\nlemma isSquare_toMul_iff {a : Additive α} : IsSquare (a.toMul) ↔ Even a := Iff.rfl\n\n"}
{"name":"isSquare_ofAdd_iff","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : Add α\na : α\n⊢ Iff (IsSquare (Multiplicative.ofAdd a)) (Even a)","decl":"@[simp] lemma isSquare_ofAdd_iff {a : α} : IsSquare (Multiplicative.ofAdd a) ↔ Even a := Iff.rfl\n\n"}
{"name":"even_toAdd_iff","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : Add α\na : Multiplicative α\n⊢ Iff (Even (Multiplicative.toAdd a)) (IsSquare a)","decl":"@[simp]\nlemma even_toAdd_iff {a : Multiplicative α} : Even a.toAdd ↔ IsSquare a := Iff.rfl\n\n"}
{"name":"Even.zero","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : AddZeroClass α\n⊢ Even 0","decl":"@[to_additive (attr := simp)]\nlemma IsSquare.one [MulOneClass α] : IsSquare (1 : α) := ⟨1, (mul_one _).symm⟩\n\n"}
{"name":"IsSquare.one","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : MulOneClass α\n⊢ IsSquare 1","decl":"@[to_additive (attr := simp)]\nlemma IsSquare.one [MulOneClass α] : IsSquare (1 : α) := ⟨1, (mul_one _).symm⟩\n\n"}
{"name":"isSquare_one","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : MulOneClass α\n⊢ IsSquare 1","decl":"@[deprecated (since := \"2024-12-27\")] alias isSquare_one := IsSquare.one\n"}
{"name":"even_zero","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : AddZeroClass α\n⊢ Even 0","decl":"@[deprecated (since := \"2024-12-27\")] alias even_zero := Even.zero\n\n"}
{"name":"IsSquare.map","module":"Mathlib.Algebra.Group.Even","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : MulOneClass α\ninst✝² : MulOneClass β\ninst✝¹ : FunLike F α β\ninst✝ : MonoidHomClass F α β\na : α\nf : F\na✝ : IsSquare a\n⊢ IsSquare (f a)","decl":"@[to_additive]\nlemma IsSquare.map {a : α} (f : F) : IsSquare a → IsSquare (f a) :=\n  fun ⟨r, _⟩ => ⟨f r, by simp_all⟩\n\n"}
{"name":"Even.map","module":"Mathlib.Algebra.Group.Even","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : AddZeroClass α\ninst✝² : AddZeroClass β\ninst✝¹ : FunLike F α β\ninst✝ : AddMonoidHomClass F α β\na : α\nf : F\na✝ : Even a\n⊢ Even (f a)","decl":"@[to_additive]\nlemma IsSquare.map {a : α} (f : F) : IsSquare a → IsSquare (f a) :=\n  fun ⟨r, _⟩ => ⟨f r, by simp_all⟩\n\n"}
{"name":"even_iff_exists_two_nsmul","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : AddMonoid α\na : α\n⊢ Iff (Even a) (Exists fun r => Eq a (HSMul.hSMul 2 r))","decl":"@[to_additive even_iff_exists_two_nsmul]\nlemma isSquare_iff_exists_sq (a : α) : IsSquare a ↔ ∃ r, a = r ^ 2 := by simp [IsSquare, pow_two]\n\n"}
{"name":"isSquare_iff_exists_sq","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : Monoid α\na : α\n⊢ Iff (IsSquare a) (Exists fun r => Eq a (HPow.hPow r 2))","decl":"@[to_additive even_iff_exists_two_nsmul]\nlemma isSquare_iff_exists_sq (a : α) : IsSquare a ↔ ∃ r, a = r ^ 2 := by simp [IsSquare, pow_two]\n\n"}
{"name":"Even.exists_two_nsmul","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : AddMonoid α\na : α\na✝ : Even a\n⊢ Exists fun r => Eq a (HSMul.hSMul 2 r)","decl":"@[to_additive Even.exists_two_nsmul\n  \"Alias of the forwards direction of `even_iff_exists_two_nsmul`.\"]\nalias ⟨IsSquare.exists_sq, _⟩ := isSquare_iff_exists_sq\n\n-- provable by simp in `Algebra.Ring.Parity`\n"}
{"name":"IsSquare.exists_sq","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : Monoid α\na : α\na✝ : IsSquare a\n⊢ Exists fun r => Eq a (HPow.hPow r 2)","decl":"@[to_additive Even.exists_two_nsmul\n  \"Alias of the forwards direction of `even_iff_exists_two_nsmul`.\"]\nalias ⟨IsSquare.exists_sq, _⟩ := isSquare_iff_exists_sq\n\n-- provable by simp in `Algebra.Ring.Parity`\n"}
{"name":"IsSquare.sq","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : Monoid α\nr : α\n⊢ IsSquare (HPow.hPow r 2)","decl":"@[to_additive Even.two_nsmul]\nlemma IsSquare.sq (r : α) : IsSquare (r ^ 2) := ⟨r, pow_two _⟩\n\n"}
{"name":"Even.two_nsmul","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : AddMonoid α\nr : α\n⊢ Even (HSMul.hSMul 2 r)","decl":"@[to_additive Even.two_nsmul]\nlemma IsSquare.sq (r : α) : IsSquare (r ^ 2) := ⟨r, pow_two _⟩\n\n"}
{"name":"IsSquare_sq","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : Monoid α\nr : α\n⊢ IsSquare (HPow.hPow r 2)","decl":"@[deprecated (since := \"2024-12-27\")] alias IsSquare_sq := IsSquare.sq\n"}
{"name":"even_two_nsmul","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : AddMonoid α\nr : α\n⊢ Even (HSMul.hSMul 2 r)","decl":"@[deprecated (since := \"2024-12-27\")] alias even_two_nsmul := Even.two_nsmul\n\n"}
{"name":"Even.nsmul_right","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : AddMonoid α\na : α\nn : Nat\na✝ : Even a\n⊢ Even (HSMul.hSMul n a)","decl":"@[to_additive Even.nsmul_right] lemma IsSquare.pow (n : ℕ) : IsSquare a → IsSquare (a ^ n) := by\n  rintro ⟨r, rfl⟩; exact ⟨r ^ n, (Commute.refl _).mul_pow _⟩\n\n"}
{"name":"IsSquare.pow","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : Monoid α\na : α\nn : Nat\na✝ : IsSquare a\n⊢ IsSquare (HPow.hPow a n)","decl":"@[to_additive Even.nsmul_right] lemma IsSquare.pow (n : ℕ) : IsSquare a → IsSquare (a ^ n) := by\n  rintro ⟨r, rfl⟩; exact ⟨r ^ n, (Commute.refl _).mul_pow _⟩\n\n"}
{"name":"Even.nsmul","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : AddMonoid α\na : α\nn : Nat\na✝ : Even a\n⊢ Even (HSMul.hSMul n a)","decl":"@[deprecated (since := \"2025-01-19\")] alias Even.nsmul := Even.nsmul_right\n\n"}
{"name":"Even.nsmul_left","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : AddMonoid α\nn : Nat\na✝ : Even n\na : α\n⊢ Even (HSMul.hSMul n a)","decl":"@[to_additive (attr := simp) Even.nsmul_left]\nlemma Even.isSquare_pow : Even n → ∀ a : α, IsSquare (a ^ n) := by\n  rintro ⟨m, rfl⟩ a; exact ⟨a ^ m, pow_add _ _ _⟩\n\n"}
{"name":"Even.isSquare_pow","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : Monoid α\nn : Nat\na✝ : Even n\na : α\n⊢ IsSquare (HPow.hPow a n)","decl":"@[to_additive (attr := simp) Even.nsmul_left]\nlemma Even.isSquare_pow : Even n → ∀ a : α, IsSquare (a ^ n) := by\n  rintro ⟨m, rfl⟩ a; exact ⟨a ^ m, pow_add _ _ _⟩\n\n"}
{"name":"Even.nsmul'","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : AddMonoid α\nn : Nat\na✝ : Even n\na : α\n⊢ Even (HSMul.hSMul n a)","decl":"@[deprecated (since := \"2025-01-19\")] alias Even.nsmul' := Even.nsmul_left\n\n"}
{"name":"Even.add","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : AddCommSemigroup α\na b : α\na✝¹ : Even a\na✝ : Even b\n⊢ Even (HAdd.hAdd a b)","decl":"@[to_additive]\nlemma IsSquare.mul [CommSemigroup α] {a b : α} : IsSquare a → IsSquare b → IsSquare (a * b) := by\n  rintro ⟨r, rfl⟩ ⟨s, rfl⟩; exact ⟨r * s, mul_mul_mul_comm _ _ _ _⟩\n\n"}
{"name":"IsSquare.mul","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : CommSemigroup α\na b : α\na✝¹ : IsSquare a\na✝ : IsSquare b\n⊢ IsSquare (HMul.hMul a b)","decl":"@[to_additive]\nlemma IsSquare.mul [CommSemigroup α] {a b : α} : IsSquare a → IsSquare b → IsSquare (a * b) := by\n  rintro ⟨r, rfl⟩ ⟨s, rfl⟩; exact ⟨r * s, mul_mul_mul_comm _ _ _ _⟩\n\n"}
{"name":"even_neg","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : SubtractionMonoid α\na : α\n⊢ Iff (Even (Neg.neg a)) (Even a)","decl":"@[to_additive (attr := simp)] lemma isSquare_inv : IsSquare a⁻¹ ↔ IsSquare a := by\n  constructor <;> intro h <;> simpa using (isSquare_op_iff.mpr h).map (MulEquiv.inv' α).symm\n\n"}
{"name":"isSquare_inv","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : DivisionMonoid α\na : α\n⊢ Iff (IsSquare (Inv.inv a)) (IsSquare a)","decl":"@[to_additive (attr := simp)] lemma isSquare_inv : IsSquare a⁻¹ ↔ IsSquare a := by\n  constructor <;> intro h <;> simpa using (isSquare_op_iff.mpr h).map (MulEquiv.inv' α).symm\n\n"}
{"name":"IsSquare.inv","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : DivisionMonoid α\na : α\na✝ : IsSquare a\n⊢ IsSquare (Inv.inv a)","decl":"@[to_additive] alias ⟨_, IsSquare.inv⟩ := isSquare_inv\n\n"}
{"name":"Even.neg","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : SubtractionMonoid α\na : α\na✝ : Even a\n⊢ Even (Neg.neg a)","decl":"@[to_additive] alias ⟨_, IsSquare.inv⟩ := isSquare_inv\n\n"}
{"name":"IsSquare.zpow","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : DivisionMonoid α\na : α\nn : Int\na✝ : IsSquare a\n⊢ IsSquare (HPow.hPow a n)","decl":"@[to_additive Even.zsmul_right] lemma IsSquare.zpow (n : ℤ) : IsSquare a → IsSquare (a ^ n) := by\n  rintro ⟨r, rfl⟩; exact ⟨r ^ n, (Commute.refl _).mul_zpow _⟩\n\n"}
{"name":"Even.zsmul_right","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : SubtractionMonoid α\na : α\nn : Int\na✝ : Even a\n⊢ Even (HSMul.hSMul n a)","decl":"@[to_additive Even.zsmul_right] lemma IsSquare.zpow (n : ℤ) : IsSquare a → IsSquare (a ^ n) := by\n  rintro ⟨r, rfl⟩; exact ⟨r ^ n, (Commute.refl _).mul_zpow _⟩\n\n"}
{"name":"IsSquare.div","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : DivisionCommMonoid α\na b : α\nha : IsSquare a\nhb : IsSquare b\n⊢ IsSquare (HDiv.hDiv a b)","decl":"@[to_additive]\nlemma IsSquare.div [DivisionCommMonoid α] {a b : α} (ha : IsSquare a) (hb : IsSquare b) :\n    IsSquare (a / b) := by rw [div_eq_mul_inv]; exact ha.mul hb.inv\n\n"}
{"name":"Even.sub","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : SubtractionCommMonoid α\na b : α\nha : Even a\nhb : Even b\n⊢ Even (HSub.hSub a b)","decl":"@[to_additive]\nlemma IsSquare.div [DivisionCommMonoid α] {a b : α} (ha : IsSquare a) (hb : IsSquare b) :\n    IsSquare (a / b) := by rw [div_eq_mul_inv]; exact ha.mul hb.inv\n\n"}
{"name":"Even.isSquare_zpow","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : Group α\nn : Int\na✝ : Even n\na : α\n⊢ IsSquare (HPow.hPow a n)","decl":"@[to_additive (attr := simp) Even.zsmul_left]\nlemma Even.isSquare_zpow [Group α] {n : ℤ} : Even n → ∀ a : α, IsSquare (a ^ n) := by\n  rintro ⟨m, rfl⟩ a; exact ⟨a ^ m, zpow_add _ _ _⟩\n"}
{"name":"Even.zsmul_left","module":"Mathlib.Algebra.Group.Even","initialProofState":"α : Type u_2\ninst✝ : AddGroup α\nn : Int\na✝ : Even n\na : α\n⊢ Even (HSMul.hSMul n a)","decl":"@[to_additive (attr := simp) Even.zsmul_left]\nlemma Even.isSquare_zpow [Group α] {n : ℤ} : Even n → ∀ a : α, IsSquare (a ^ n) := by\n  rintro ⟨m, rfl⟩ a; exact ⟨a ^ m, zpow_add _ _ _⟩\n"}
