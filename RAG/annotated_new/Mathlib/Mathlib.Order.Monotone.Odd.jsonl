{"name":"strictMono_of_odd_strictMonoOn_nonneg","module":"Mathlib.Order.Monotone.Odd","initialProofState":"G : Type u_1\nH : Type u_2\ninst✝¹ : LinearOrderedAddCommGroup G\ninst✝ : OrderedAddCommGroup H\nf : G → H\nh₁ : ∀ (x : G), Eq (f (Neg.neg x)) (Neg.neg (f x))\nh₂ : StrictMonoOn f (Set.Ici 0)\n⊢ StrictMono f","decl":"/-- An odd function on a linear ordered additive commutative group is strictly monotone on the whole\ngroup provided that it is strictly monotone on `Set.Ici 0`. -/\ntheorem strictMono_of_odd_strictMonoOn_nonneg {f : G → H} (h₁ : ∀ x, f (-x) = -f x)\n    (h₂ : StrictMonoOn f (Ici 0)) : StrictMono f := by\n  refine StrictMonoOn.Iic_union_Ici (fun x hx y hy hxy => neg_lt_neg_iff.1 ?_) h₂\n  rw [← h₁, ← h₁]\n  exact h₂ (neg_nonneg.2 hy) (neg_nonneg.2 hx) (neg_lt_neg hxy)\n\n"}
{"name":"strictAnti_of_odd_strictAntiOn_nonneg","module":"Mathlib.Order.Monotone.Odd","initialProofState":"G : Type u_1\nH : Type u_2\ninst✝¹ : LinearOrderedAddCommGroup G\ninst✝ : OrderedAddCommGroup H\nf : G → H\nh₁ : ∀ (x : G), Eq (f (Neg.neg x)) (Neg.neg (f x))\nh₂ : StrictAntiOn f (Set.Ici 0)\n⊢ StrictAnti f","decl":"/-- An odd function on a linear ordered additive commutative group is strictly antitone on the whole\ngroup provided that it is strictly antitone on `Set.Ici 0`. -/\ntheorem strictAnti_of_odd_strictAntiOn_nonneg {f : G → H} (h₁ : ∀ x, f (-x) = -f x)\n    (h₂ : StrictAntiOn f (Ici 0)) : StrictAnti f :=\n  @strictMono_of_odd_strictMonoOn_nonneg G Hᵒᵈ _ _ _ h₁ h₂\n\n"}
{"name":"monotone_of_odd_of_monotoneOn_nonneg","module":"Mathlib.Order.Monotone.Odd","initialProofState":"G : Type u_1\nH : Type u_2\ninst✝¹ : LinearOrderedAddCommGroup G\ninst✝ : OrderedAddCommGroup H\nf : G → H\nh₁ : ∀ (x : G), Eq (f (Neg.neg x)) (Neg.neg (f x))\nh₂ : MonotoneOn f (Set.Ici 0)\n⊢ Monotone f","decl":"/-- An odd function on a linear ordered additive commutative group is monotone on the whole group\nprovided that it is monotone on `Set.Ici 0`. -/\ntheorem monotone_of_odd_of_monotoneOn_nonneg {f : G → H} (h₁ : ∀ x, f (-x) = -f x)\n    (h₂ : MonotoneOn f (Ici 0)) : Monotone f := by\n  refine MonotoneOn.Iic_union_Ici (fun x hx y hy hxy => neg_le_neg_iff.1 ?_) h₂\n  rw [← h₁, ← h₁]\n  exact h₂ (neg_nonneg.2 hy) (neg_nonneg.2 hx) (neg_le_neg hxy)\n\n"}
{"name":"antitone_of_odd_of_monotoneOn_nonneg","module":"Mathlib.Order.Monotone.Odd","initialProofState":"G : Type u_1\nH : Type u_2\ninst✝¹ : LinearOrderedAddCommGroup G\ninst✝ : OrderedAddCommGroup H\nf : G → H\nh₁ : ∀ (x : G), Eq (f (Neg.neg x)) (Neg.neg (f x))\nh₂ : AntitoneOn f (Set.Ici 0)\n⊢ Antitone f","decl":"/-- An odd function on a linear ordered additive commutative group is antitone on the whole group\nprovided that it is monotone on `Set.Ici 0`. -/\ntheorem antitone_of_odd_of_monotoneOn_nonneg {f : G → H} (h₁ : ∀ x, f (-x) = -f x)\n    (h₂ : AntitoneOn f (Ici 0)) : Antitone f :=\n  @monotone_of_odd_of_monotoneOn_nonneg G Hᵒᵈ _ _ _ h₁ h₂\n"}
