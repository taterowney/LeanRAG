{"name":"Con.ker_rel","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : MulOneClass M\ninst✝ : MulOneClass P\nf : MonoidHom M P\nx y : M\n⊢ Iff ((Con.ker f) x y) (Eq (f x) (f y))","decl":"/-- The definition of the congruence relation defined by a monoid homomorphism's kernel. -/\n@[to_additive (attr := simp) \"The definition of the additive congruence relation defined by an\n`AddMonoid` homomorphism's kernel.\"]\ntheorem ker_rel (f : M →* P) {x y} : ker f x y ↔ f x = f y :=\n  Iff.rfl\n\n"}
{"name":"AddCon.ker_rel","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : AddZeroClass M\ninst✝ : AddZeroClass P\nf : AddMonoidHom M P\nx y : M\n⊢ Iff ((AddCon.ker f) x y) (Eq (f x) (f y))","decl":"/-- The definition of the congruence relation defined by a monoid homomorphism's kernel. -/\n@[to_additive (attr := simp) \"The definition of the additive congruence relation defined by an\n`AddMonoid` homomorphism's kernel.\"]\ntheorem ker_rel (f : M →* P) {x y} : ker f x y ↔ f x = f y :=\n  Iff.rfl\n\n"}
{"name":"AddCon.mk'_ker","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\ninst✝ : AddZeroClass M\nc : AddCon M\n⊢ Eq (AddCon.ker c.mk') c","decl":"/-- The kernel of the natural homomorphism from a monoid to its quotient by a congruence\n    relation `c` equals `c`. -/\n@[to_additive (attr := simp) \"The kernel of the natural homomorphism from an `AddMonoid` to its\nquotient by an additive congruence relation `c` equals `c`.\"]\ntheorem mk'_ker : ker c.mk' = c :=\n  ext fun _ _ => c.eq\n\n"}
{"name":"Con.mk'_ker","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\ninst✝ : MulOneClass M\nc : Con M\n⊢ Eq (Con.ker c.mk') c","decl":"/-- The kernel of the natural homomorphism from a monoid to its quotient by a congruence\n    relation `c` equals `c`. -/\n@[to_additive (attr := simp) \"The kernel of the natural homomorphism from an `AddMonoid` to its\nquotient by an additive congruence relation `c` equals `c`.\"]\ntheorem mk'_ker : ker c.mk' = c :=\n  ext fun _ _ => c.eq\n\n"}
{"name":"Con.mk'_surjective","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\ninst✝ : MulOneClass M\nc : Con M\n⊢ Function.Surjective ⇑c.mk'","decl":"/-- The natural homomorphism from a monoid to its quotient by a congruence relation is\n    surjective. -/\n@[to_additive \"The natural homomorphism from an `AddMonoid` to its quotient by a congruence\nrelation is surjective.\"]\ntheorem mk'_surjective : Surjective c.mk' :=\n  Quotient.mk''_surjective\n\n"}
{"name":"AddCon.mk'_surjective","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\ninst✝ : AddZeroClass M\nc : AddCon M\n⊢ Function.Surjective ⇑c.mk'","decl":"/-- The natural homomorphism from a monoid to its quotient by a congruence relation is\n    surjective. -/\n@[to_additive \"The natural homomorphism from an `AddMonoid` to its quotient by a congruence\nrelation is surjective.\"]\ntheorem mk'_surjective : Surjective c.mk' :=\n  Quotient.mk''_surjective\n\n"}
{"name":"AddCon.coe_mk'","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\ninst✝ : AddZeroClass M\nc : AddCon M\n⊢ Eq (⇑c.mk') AddCon.toQuotient","decl":"@[to_additive (attr := simp)]\ntheorem coe_mk' : (c.mk' : M → c.Quotient) = ((↑) : M → c.Quotient) :=\n  rfl\n\n-- Porting note: used to abuse defeq between sets and predicates\n"}
{"name":"Con.coe_mk'","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\ninst✝ : MulOneClass M\nc : Con M\n⊢ Eq (⇑c.mk') Con.toQuotient","decl":"@[to_additive (attr := simp)]\ntheorem coe_mk' : (c.mk' : M → c.Quotient) = ((↑) : M → c.Quotient) :=\n  rfl\n\n-- Porting note: used to abuse defeq between sets and predicates\n"}
{"name":"AddCon.ker_apply","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : AddZeroClass M\ninst✝ : AddZeroClass P\nf : AddMonoidHom M P\nx y : M\n⊢ Iff ((AddCon.ker f) x y) (Eq (f x) (f y))","decl":"@[to_additive]\ntheorem ker_apply {f : M →* P} {x y} : ker f x y ↔ f x = f y := Iff.rfl\n\n"}
{"name":"Con.ker_apply","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : MulOneClass M\ninst✝ : MulOneClass P\nf : MonoidHom M P\nx y : M\n⊢ Iff ((Con.ker f) x y) (Eq (f x) (f y))","decl":"@[to_additive]\ntheorem ker_apply {f : M →* P} {x y} : ker f x y ↔ f x = f y := Iff.rfl\n\n"}
{"name":"Con.comap_eq","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nN : Type u_2\ninst✝¹ : MulOneClass M\ninst✝ : MulOneClass N\nc : Con M\nf : MonoidHom N M\n⊢ Eq (Con.comap ⇑f ⋯ c) (Con.ker (c.mk'.comp f))","decl":"/-- Given a monoid homomorphism `f : N → M` and a congruence relation `c` on `M`, the congruence\n    relation induced on `N` by `f` equals the kernel of `c`'s quotient homomorphism composed with\n    `f`. -/\n@[to_additive \"Given an `AddMonoid` homomorphism `f : N → M` and an additive congruence relation\n`c` on `M`, the additive congruence relation induced on `N` by `f` equals the kernel of `c`'s\nquotient homomorphism composed with `f`.\"]\ntheorem comap_eq {f : N →* M} : comap f f.map_mul c = ker (c.mk'.comp f) :=\n  ext fun x y => show c _ _ ↔ c.mk' _ = c.mk' _ by rw [← c.eq]; rfl\n\n"}
{"name":"AddCon.comap_eq","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nN : Type u_2\ninst✝¹ : AddZeroClass M\ninst✝ : AddZeroClass N\nc : AddCon M\nf : AddMonoidHom N M\n⊢ Eq (AddCon.comap ⇑f ⋯ c) (AddCon.ker (c.mk'.comp f))","decl":"/-- Given a monoid homomorphism `f : N → M` and a congruence relation `c` on `M`, the congruence\n    relation induced on `N` by `f` equals the kernel of `c`'s quotient homomorphism composed with\n    `f`. -/\n@[to_additive \"Given an `AddMonoid` homomorphism `f : N → M` and an additive congruence relation\n`c` on `M`, the additive congruence relation induced on `N` by `f` equals the kernel of `c`'s\nquotient homomorphism composed with `f`.\"]\ntheorem comap_eq {f : N →* M} : comap f f.map_mul c = ker (c.mk'.comp f) :=\n  ext fun x y => show c _ _ ↔ c.mk' _ = c.mk' _ by rw [← c.eq]; rfl\n\n"}
{"name":"AddCon.lift_mk'","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : AddZeroClass M\ninst✝ : AddZeroClass P\nc : AddCon M\nf : AddMonoidHom M P\nH : LE.le c (AddCon.ker f)\nx : M\n⊢ Eq ((c.lift f H) (c.mk' x)) (f x)","decl":"/-- The diagram describing the universal property for quotients of monoids commutes. -/\n@[to_additive \"The diagram describing the universal property for quotients of `AddMonoid`s\ncommutes.\"]\ntheorem lift_mk' (H : c ≤ ker f) (x) : c.lift f H (c.mk' x) = f x :=\n  rfl\n\n"}
{"name":"Con.lift_mk'","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : MulOneClass M\ninst✝ : MulOneClass P\nc : Con M\nf : MonoidHom M P\nH : LE.le c (Con.ker f)\nx : M\n⊢ Eq ((c.lift f H) (c.mk' x)) (f x)","decl":"/-- The diagram describing the universal property for quotients of monoids commutes. -/\n@[to_additive \"The diagram describing the universal property for quotients of `AddMonoid`s\ncommutes.\"]\ntheorem lift_mk' (H : c ≤ ker f) (x) : c.lift f H (c.mk' x) = f x :=\n  rfl\n\n"}
{"name":"Con.lift_coe","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : MulOneClass M\ninst✝ : MulOneClass P\nc : Con M\nf : MonoidHom M P\nH : LE.le c (Con.ker f)\nx : M\n⊢ Eq ((c.lift f H) ↑x) (f x)","decl":"/-- The diagram describing the universal property for quotients of monoids commutes. -/\n@[to_additive (attr := simp) \"The diagram describing the universal property for quotients of\n`AddMonoid`s commutes.\"]\ntheorem lift_coe (H : c ≤ ker f) (x : M) : c.lift f H x = f x :=\n  rfl\n\n"}
{"name":"AddCon.lift_coe","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : AddZeroClass M\ninst✝ : AddZeroClass P\nc : AddCon M\nf : AddMonoidHom M P\nH : LE.le c (AddCon.ker f)\nx : M\n⊢ Eq ((c.lift f H) ↑x) (f x)","decl":"/-- The diagram describing the universal property for quotients of monoids commutes. -/\n@[to_additive (attr := simp) \"The diagram describing the universal property for quotients of\n`AddMonoid`s commutes.\"]\ntheorem lift_coe (H : c ≤ ker f) (x : M) : c.lift f H x = f x :=\n  rfl\n\n"}
{"name":"AddCon.lift_comp_mk'","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : AddZeroClass M\ninst✝ : AddZeroClass P\nc : AddCon M\nf : AddMonoidHom M P\nH : LE.le c (AddCon.ker f)\n⊢ Eq ((c.lift f H).comp c.mk') f","decl":"/-- The diagram describing the universal property for quotients of monoids commutes. -/\n@[to_additive (attr := simp) \"The diagram describing the universal property for quotients of\n`AddMonoid`s commutes.\"]\ntheorem lift_comp_mk' (H : c ≤ ker f) : (c.lift f H).comp c.mk' = f := by ext; rfl\n\n"}
{"name":"Con.lift_comp_mk'","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : MulOneClass M\ninst✝ : MulOneClass P\nc : Con M\nf : MonoidHom M P\nH : LE.le c (Con.ker f)\n⊢ Eq ((c.lift f H).comp c.mk') f","decl":"/-- The diagram describing the universal property for quotients of monoids commutes. -/\n@[to_additive (attr := simp) \"The diagram describing the universal property for quotients of\n`AddMonoid`s commutes.\"]\ntheorem lift_comp_mk' (H : c ≤ ker f) : (c.lift f H).comp c.mk' = f := by ext; rfl\n\n"}
{"name":"AddCon.lift_apply_mk'","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : AddZeroClass M\ninst✝ : AddZeroClass P\nc : AddCon M\nf : AddMonoidHom c.Quotient P\n⊢ Eq (c.lift (f.comp c.mk') ⋯) f","decl":"/-- Given a homomorphism `f` from the quotient of a monoid by a congruence relation, `f` equals the\n    homomorphism on the quotient induced by `f` composed with the natural map from the monoid to\n    the quotient. -/\n@[to_additive (attr := simp) \"Given a homomorphism `f` from the quotient of an `AddMonoid` by an\nadditive congruence relation, `f` equals the homomorphism on the quotient induced by `f` composed\nwith the natural map from the `AddMonoid` to the quotient.\"]\ntheorem lift_apply_mk' (f : c.Quotient →* P) :\n    (c.lift (f.comp c.mk') fun x y h => show f ↑x = f ↑y by rw [c.eq.2 h]) = f := by\n  ext x; rcases x with ⟨⟩; rfl\n\n"}
{"name":"Con.lift_apply_mk'","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : MulOneClass M\ninst✝ : MulOneClass P\nc : Con M\nf : MonoidHom c.Quotient P\n⊢ Eq (c.lift (f.comp c.mk') ⋯) f","decl":"/-- Given a homomorphism `f` from the quotient of a monoid by a congruence relation, `f` equals the\n    homomorphism on the quotient induced by `f` composed with the natural map from the monoid to\n    the quotient. -/\n@[to_additive (attr := simp) \"Given a homomorphism `f` from the quotient of an `AddMonoid` by an\nadditive congruence relation, `f` equals the homomorphism on the quotient induced by `f` composed\nwith the natural map from the `AddMonoid` to the quotient.\"]\ntheorem lift_apply_mk' (f : c.Quotient →* P) :\n    (c.lift (f.comp c.mk') fun x y h => show f ↑x = f ↑y by rw [c.eq.2 h]) = f := by\n  ext x; rcases x with ⟨⟩; rfl\n\n"}
{"name":"Con.lift_funext","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : MulOneClass M\ninst✝ : MulOneClass P\nc : Con M\nf g : MonoidHom c.Quotient P\nh : ∀ (a : M), Eq (f ↑a) (g ↑a)\n⊢ Eq f g","decl":"/-- Homomorphisms on the quotient of a monoid by a congruence relation are equal if they\n    are equal on elements that are coercions from the monoid. -/\n@[to_additive \"Homomorphisms on the quotient of an `AddMonoid` by an additive congruence relation\nare equal if they are equal on elements that are coercions from the `AddMonoid`.\"]\ntheorem lift_funext (f g : c.Quotient →* P) (h : ∀ a : M, f a = g a) : f = g := by\n  rw [← lift_apply_mk' f, ← lift_apply_mk' g]\n  congr 1\n  exact DFunLike.ext_iff.2 h\n\n"}
{"name":"AddCon.lift_funext","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : AddZeroClass M\ninst✝ : AddZeroClass P\nc : AddCon M\nf g : AddMonoidHom c.Quotient P\nh : ∀ (a : M), Eq (f ↑a) (g ↑a)\n⊢ Eq f g","decl":"/-- Homomorphisms on the quotient of a monoid by a congruence relation are equal if they\n    are equal on elements that are coercions from the monoid. -/\n@[to_additive \"Homomorphisms on the quotient of an `AddMonoid` by an additive congruence relation\nare equal if they are equal on elements that are coercions from the `AddMonoid`.\"]\ntheorem lift_funext (f g : c.Quotient →* P) (h : ∀ a : M, f a = g a) : f = g := by\n  rw [← lift_apply_mk' f, ← lift_apply_mk' g]\n  congr 1\n  exact DFunLike.ext_iff.2 h\n\n"}
{"name":"AddCon.lift_unique","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : AddZeroClass M\ninst✝ : AddZeroClass P\nc : AddCon M\nf : AddMonoidHom M P\nH : LE.le c (AddCon.ker f)\ng : AddMonoidHom c.Quotient P\nHg : Eq (g.comp c.mk') f\n⊢ Eq g (c.lift f H)","decl":"/-- The uniqueness part of the universal property for quotients of monoids. -/\n@[to_additive \"The uniqueness part of the universal property for quotients of `AddMonoid`s.\"]\ntheorem lift_unique (H : c ≤ ker f) (g : c.Quotient →* P) (Hg : g.comp c.mk' = f) :\n    g = c.lift f H :=\n  (lift_funext g (c.lift f H)) fun x => by\n    subst f\n    rfl\n\n"}
{"name":"Con.lift_unique","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : MulOneClass M\ninst✝ : MulOneClass P\nc : Con M\nf : MonoidHom M P\nH : LE.le c (Con.ker f)\ng : MonoidHom c.Quotient P\nHg : Eq (g.comp c.mk') f\n⊢ Eq g (c.lift f H)","decl":"/-- The uniqueness part of the universal property for quotients of monoids. -/\n@[to_additive \"The uniqueness part of the universal property for quotients of `AddMonoid`s.\"]\ntheorem lift_unique (H : c ≤ ker f) (g : c.Quotient →* P) (Hg : g.comp c.mk' = f) :\n    g = c.lift f H :=\n  (lift_funext g (c.lift f H)) fun x => by\n    subst f\n    rfl\n\n"}
{"name":"AddCon.lift_surjective_of_surjective","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : AddZeroClass M\ninst✝ : AddZeroClass P\nc : AddCon M\nf : AddMonoidHom M P\nh : LE.le c (AddCon.ker f)\nhf : Function.Surjective ⇑f\n⊢ Function.Surjective ⇑(c.lift f h)","decl":"/-- Surjective monoid homomorphisms constant on a congruence relation `c`'s equivalence classes\n    induce a surjective homomorphism on `c`'s quotient. -/\n@[to_additive \"Surjective `AddMonoid` homomorphisms constant on an additive congruence\nrelation `c`'s equivalence classes induce a surjective homomorphism on `c`'s quotient.\"]\ntheorem lift_surjective_of_surjective (h : c ≤ ker f) (hf : Surjective f) :\n    Surjective (c.lift f h) := fun y =>\n  (Exists.elim (hf y)) fun w hw => ⟨w, (lift_mk' h w).symm ▸ hw⟩\n\n"}
{"name":"Con.lift_surjective_of_surjective","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : MulOneClass M\ninst✝ : MulOneClass P\nc : Con M\nf : MonoidHom M P\nh : LE.le c (Con.ker f)\nhf : Function.Surjective ⇑f\n⊢ Function.Surjective ⇑(c.lift f h)","decl":"/-- Surjective monoid homomorphisms constant on a congruence relation `c`'s equivalence classes\n    induce a surjective homomorphism on `c`'s quotient. -/\n@[to_additive \"Surjective `AddMonoid` homomorphisms constant on an additive congruence\nrelation `c`'s equivalence classes induce a surjective homomorphism on `c`'s quotient.\"]\ntheorem lift_surjective_of_surjective (h : c ≤ ker f) (hf : Surjective f) :\n    Surjective (c.lift f h) := fun y =>\n  (Exists.elim (hf y)) fun w hw => ⟨w, (lift_mk' h w).symm ▸ hw⟩\n\n"}
{"name":"AddCon.ker_eq_lift_of_injective","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : AddZeroClass M\ninst✝ : AddZeroClass P\nc : AddCon M\nf : AddMonoidHom M P\nH : LE.le c (AddCon.ker f)\nh : Function.Injective ⇑(c.lift f H)\n⊢ Eq (AddCon.ker f) c","decl":"/-- Given a monoid homomorphism `f` from `M` to `P`, the kernel of `f` is the unique congruence\n    relation on `M` whose induced map from the quotient of `M` to `P` is injective. -/\n@[to_additive \"Given an `AddMonoid` homomorphism `f` from `M` to `P`, the kernel of `f`\nis the unique additive congruence relation on `M` whose induced map from the quotient of `M`\nto `P` is injective.\"]\ntheorem ker_eq_lift_of_injective (H : c ≤ ker f) (h : Injective (c.lift f H)) : ker f = c :=\n  toSetoid_inj <| Setoid.ker_eq_lift_of_injective f H h\n\n"}
{"name":"Con.ker_eq_lift_of_injective","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : MulOneClass M\ninst✝ : MulOneClass P\nc : Con M\nf : MonoidHom M P\nH : LE.le c (Con.ker f)\nh : Function.Injective ⇑(c.lift f H)\n⊢ Eq (Con.ker f) c","decl":"/-- Given a monoid homomorphism `f` from `M` to `P`, the kernel of `f` is the unique congruence\n    relation on `M` whose induced map from the quotient of `M` to `P` is injective. -/\n@[to_additive \"Given an `AddMonoid` homomorphism `f` from `M` to `P`, the kernel of `f`\nis the unique additive congruence relation on `M` whose induced map from the quotient of `M`\nto `P` is injective.\"]\ntheorem ker_eq_lift_of_injective (H : c ≤ ker f) (h : Injective (c.lift f H)) : ker f = c :=\n  toSetoid_inj <| Setoid.ker_eq_lift_of_injective f H h\n\n"}
{"name":"Con.kerLift_mk","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : MulOneClass M\ninst✝ : MulOneClass P\nf : MonoidHom M P\nx : M\n⊢ Eq ((Con.kerLift f) ↑x) (f x)","decl":"/-- The diagram described by the universal property for quotients of monoids, when the congruence\n    relation is the kernel of the homomorphism, commutes. -/\n@[to_additive (attr := simp) \"The diagram described by the universal property for quotients\nof `AddMonoid`s, when the additive congruence relation is the kernel of the homomorphism,\ncommutes.\"]\ntheorem kerLift_mk (x : M) : kerLift f x = f x :=\n  rfl\n\n"}
{"name":"AddCon.kerLift_mk","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : AddZeroClass M\ninst✝ : AddZeroClass P\nf : AddMonoidHom M P\nx : M\n⊢ Eq ((AddCon.kerLift f) ↑x) (f x)","decl":"/-- The diagram described by the universal property for quotients of monoids, when the congruence\n    relation is the kernel of the homomorphism, commutes. -/\n@[to_additive (attr := simp) \"The diagram described by the universal property for quotients\nof `AddMonoid`s, when the additive congruence relation is the kernel of the homomorphism,\ncommutes.\"]\ntheorem kerLift_mk (x : M) : kerLift f x = f x :=\n  rfl\n\n"}
{"name":"Con.kerLift_injective","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : MulOneClass M\ninst✝ : MulOneClass P\nf : MonoidHom M P\n⊢ Function.Injective ⇑(Con.kerLift f)","decl":"/-- A monoid homomorphism `f` induces an injective homomorphism on the quotient by `f`'s kernel. -/\n@[to_additive \"An `AddMonoid` homomorphism `f` induces an injective homomorphism on the quotient\nby `f`'s kernel.\"]\ntheorem kerLift_injective (f : M →* P) : Injective (kerLift f) := fun x y =>\n  Quotient.inductionOn₂' x y fun _ _ => (ker f).eq.2\n\n"}
{"name":"AddCon.kerLift_injective","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\nP : Type u_3\ninst✝¹ : AddZeroClass M\ninst✝ : AddZeroClass P\nf : AddMonoidHom M P\n⊢ Function.Injective ⇑(AddCon.kerLift f)","decl":"/-- A monoid homomorphism `f` induces an injective homomorphism on the quotient by `f`'s kernel. -/\n@[to_additive \"An `AddMonoid` homomorphism `f` induces an injective homomorphism on the quotient\nby `f`'s kernel.\"]\ntheorem kerLift_injective (f : M →* P) : Injective (kerLift f) := fun x y =>\n  Quotient.inductionOn₂' x y fun _ _ => (ker f).eq.2\n\n"}
{"name":"Con.map_apply","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\ninst✝ : MulOneClass M\nc d : Con M\nh : LE.le c d\nx : c.Quotient\n⊢ Eq ((c.map d h) x) ((c.lift d.mk' ⋯) x)","decl":"/-- Given congruence relations `c, d` on a monoid such that `d` contains `c`, the definition of\n    the homomorphism from the quotient by `c` to the quotient by `d` induced by `d`'s quotient\n    map. -/\n@[to_additive \"Given additive congruence relations `c, d` on an `AddMonoid` such that `d`\ncontains `c`, the definition of the homomorphism from the quotient by `c` to the quotient by `d`\ninduced by `d`'s quotient map.\"]\ntheorem map_apply {c d : Con M} (h : c ≤ d) (x) :\n    c.map d h x = c.lift d.mk' (fun _ _ hc => d.eq.2 <| h hc) x :=\n  rfl\n\n"}
{"name":"AddCon.map_apply","module":"Mathlib.GroupTheory.Congruence.Hom","initialProofState":"M : Type u_1\ninst✝ : AddZeroClass M\nc d : AddCon M\nh : LE.le c d\nx : c.Quotient\n⊢ Eq ((c.map d h) x) ((c.lift d.mk' ⋯) x)","decl":"/-- Given congruence relations `c, d` on a monoid such that `d` contains `c`, the definition of\n    the homomorphism from the quotient by `c` to the quotient by `d` induced by `d`'s quotient\n    map. -/\n@[to_additive \"Given additive congruence relations `c, d` on an `AddMonoid` such that `d`\ncontains `c`, the definition of the homomorphism from the quotient by `c` to the quotient by `d`\ninduced by `d`'s quotient map.\"]\ntheorem map_apply {c d : Con M} (h : c ≤ d) (x) :\n    c.map d h x = c.lift d.mk' (fun _ _ hc => d.eq.2 <| h hc) x :=\n  rfl\n\n"}
