{"name":"ProbabilityTheory.integrable_exp_mul_of_le_of_le","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nt a b : Real\nha : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul a (X ω))) μ\nhb : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul b (X ω))) μ\nhat : LE.le a t\nhtb : LE.le t b\n⊢ MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul t (X ω))) μ","decl":"lemma integrable_exp_mul_of_le_of_le {a b : ℝ}\n    (ha : Integrable (fun ω ↦ exp (a * X ω)) μ) (hb : Integrable (fun ω ↦ exp (b * X ω)) μ)\n    (hat : a ≤ t) (htb : t ≤ b) :\n    Integrable (fun ω ↦ exp (t * X ω)) μ := by\n  refine Integrable.mono (ha.add hb) ?_ (ae_of_all _ fun ω ↦ ?_)\n  · by_cases hab : a = b\n    · have ha_eq_t : a = t := le_antisymm hat (hab ▸ htb)\n      rw [← ha_eq_t]\n      exact ha.1\n    · refine AEMeasurable.aestronglyMeasurable ?_\n      refine measurable_exp.comp_aemeasurable (AEMeasurable.const_mul ?_ _)\n      by_cases ha_zero : a = 0\n      · refine aemeasurable_of_aemeasurable_exp_mul ?_ hb.1.aemeasurable\n        rw [ha_zero] at hab\n        exact Ne.symm hab\n      · exact aemeasurable_of_aemeasurable_exp_mul ha_zero ha.1.aemeasurable\n  · simp only [norm_eq_abs, abs_exp, Pi.add_apply]\n    conv_rhs => rw [abs_of_nonneg (by positivity)]\n    rcases le_total 0 (X ω) with h | h\n    · calc exp (t * X ω)\n      _ ≤ exp (b * X ω) := exp_le_exp.mpr (mul_le_mul_of_nonneg_right htb h)\n      _ ≤ exp (a * X ω) + exp (b * X ω) := le_add_of_nonneg_left (exp_nonneg _)\n    · calc exp (t * X ω)\n      _ ≤ exp (a * X ω) := exp_le_exp.mpr (mul_le_mul_of_nonpos_right hat h)\n      _ ≤ exp (a * X ω) + exp (b * X ω) := le_add_of_nonneg_right (exp_nonneg _)\n\n"}
{"name":"ProbabilityTheory.integrable_exp_mul_of_abs_le","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nt u : Real\nhu_int_pos : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul u (X ω))) μ\nhu_int_neg : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (Neg.neg u) (X ω))) μ\nhtu : LE.le (abs t) (abs u)\n⊢ MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul t (X ω))) μ","decl":"/-- If `ω ↦ exp (u * X ω)` is integrable at `u` and `-u`, then it is integrable on `[-u, u]`. -/\nlemma integrable_exp_mul_of_abs_le\n    (hu_int_pos : Integrable (fun ω ↦ exp (u * X ω)) μ)\n    (hu_int_neg : Integrable (fun ω ↦ exp (- u * X ω)) μ)\n    (htu : |t| ≤ |u|) :\n    Integrable (fun ω ↦ exp (t * X ω)) μ := by\n  refine integrable_exp_mul_of_le_of_le (a := -|u|) (b := |u|) ?_ ?_ ?_ ?_\n  · rcases le_total 0 u with hu | hu\n    · rwa [abs_of_nonneg hu]\n    · simpa [abs_of_nonpos hu]\n  · rcases le_total 0 u with hu | hu\n    · rwa [abs_of_nonneg hu]\n    · rwa [abs_of_nonpos hu]\n  · rw [neg_le]\n    exact (neg_le_abs t).trans htu\n  · exact (le_abs_self t).trans htu\n\n"}
{"name":"ProbabilityTheory.integrable_exp_mul_of_nonneg_of_le","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nt u : Real\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nhu : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul u (X ω))) μ\nh_nonneg : LE.le 0 t\nhtu : LE.le t u\n⊢ MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul t (X ω))) μ","decl":"/-- If `ω ↦ exp (u * X ω)` is integrable at `u ≥ 0`, then it is integrable on `[0, u]`. -/\nlemma integrable_exp_mul_of_nonneg_of_le [IsFiniteMeasure μ]\n    (hu : Integrable (fun ω ↦ exp (u * X ω)) μ) (h_nonneg : 0 ≤ t) (htu : t ≤ u) :\n    Integrable (fun ω ↦ exp (t * X ω)) μ :=\n  integrable_exp_mul_of_le_of_le (by simp) hu h_nonneg htu\n\n"}
{"name":"ProbabilityTheory.integrable_exp_mul_of_nonpos_of_ge","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nt u : Real\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nhu : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul u (X ω))) μ\nh_nonpos : LE.le t 0\nhtu : LE.le u t\n⊢ MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul t (X ω))) μ","decl":"/-- If `ω ↦ exp (u * X ω)` is integrable at `u ≤ 0`, then it is integrable on `[u, 0]`. -/\nlemma integrable_exp_mul_of_nonpos_of_ge [IsFiniteMeasure μ]\n    (hu : Integrable (fun ω ↦ exp (u * X ω)) μ) (h_nonpos : t ≤ 0) (htu : u ≤ t) :\n    Integrable (fun ω ↦ exp (t * X ω)) μ :=\n  integrable_exp_mul_of_le_of_le hu (by simp) htu h_nonpos\n\n"}
{"name":"ProbabilityTheory.integrable_of_mem_integrableExpSet","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nt : Real\nh : Membership.mem (ProbabilityTheory.integrableExpSet X μ) t\n⊢ MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul t (X ω))) μ","decl":"lemma integrable_of_mem_integrableExpSet (h : t ∈ integrableExpSet X μ) :\n    Integrable (fun ω ↦ exp (t * X ω)) μ := h\n\n"}
{"name":"ProbabilityTheory.convex_integrableExpSet","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\n⊢ Convex Real (ProbabilityTheory.integrableExpSet X μ)","decl":"/-- `integrableExpSet X μ` is a convex subset of `ℝ` (it is an interval). -/\nlemma convex_integrableExpSet : Convex ℝ (integrableExpSet X μ) := by\n  rintro t₁ ht₁ t₂ ht₂ a b ha hb hab\n  wlog h_le : t₁ ≤ t₂\n  · rw [add_comm] at hab ⊢\n    exact this ht₂ ht₁ hb ha hab (not_le.mp h_le).le\n  refine integrable_exp_mul_of_le_of_le ht₁ ht₂ ?_ ?_\n  · simp only [smul_eq_mul]\n    calc t₁\n    _ = a * t₁ + b * t₁ := by rw [← add_mul, hab, one_mul]\n    _ ≤ a * t₁ + b * t₂ := by gcongr\n  · simp only [smul_eq_mul]\n    calc a * t₁ + b * t₂\n    _ ≤ a * t₂ + b * t₂ := by gcongr\n    _ = t₂ := by rw [← add_mul, hab, one_mul]\n\n"}
{"name":"ProbabilityTheory.aemeasurable_of_integrable_exp_mul","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nu v : Real\nhuv : Ne u v\nhu_int : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul u (X ω))) μ\nhv_int : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul v (X ω))) μ\n⊢ AEMeasurable X μ","decl":"lemma aemeasurable_of_integrable_exp_mul (huv : u ≠ v)\n    (hu_int : Integrable (fun ω ↦ exp (u * X ω)) μ)\n    (hv_int : Integrable (fun ω ↦ exp (v * X ω)) μ) :\n    AEMeasurable X μ := by\n  by_cases hu : u = 0\n  · have hv : v ≠ 0 := fun h_eq ↦ huv (h_eq ▸ hu)\n    exact aemeasurable_of_aemeasurable_exp_mul hv hv_int.aemeasurable\n  · exact aemeasurable_of_aemeasurable_exp_mul hu hu_int.aemeasurable\n\n"}
{"name":"ProbabilityTheory.integrable_exp_mul_abs_add","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nt v : Real\nht_int_pos : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (HAdd.hAdd v t) (X ω))) μ\nht_int_neg : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (HSub.hSub v t) (X ω))) μ\n⊢ MeasureTheory.Integrable (fun ω => Real.exp (HAdd.hAdd (HMul.hMul t (abs (X ω))) (HMul.hMul v (X ω)))) μ","decl":"/-- If `exp ((v + t) * X)` and `exp ((v - t) * X)` are integrable, then\n`ω ↦ exp (t * |X| + v * X)` is integrable. -/\nlemma integrable_exp_mul_abs_add (ht_int_pos : Integrable (fun ω ↦ exp ((v + t) * X ω)) μ)\n    (ht_int_neg : Integrable (fun ω ↦ exp ((v - t) * X ω)) μ) :\n    Integrable (fun ω ↦ exp (t * |X ω| + v * X ω)) μ := by\n  have h_int_add : Integrable (fun a ↦ exp ((v + t) * X a) + exp ((v - t) * X a)) μ :=\n    ht_int_pos.add <| by simpa using ht_int_neg\n  refine Integrable.mono h_int_add ?_ (ae_of_all _ fun ω ↦ ?_)\n  · by_cases ht : t = 0\n    · simp only [ht, zero_mul, zero_add, add_zero] at ht_int_pos ⊢\n      exact ht_int_pos.1\n    have hX : AEMeasurable X μ := aemeasurable_of_integrable_exp_mul ?_ ht_int_pos ht_int_neg\n    swap; · rw [← sub_ne_zero]; simp [ht]\n    refine AEMeasurable.aestronglyMeasurable ?_\n    exact measurable_exp.comp_aemeasurable ((hX.abs.const_mul _).add (hX.const_mul _))\n  · simp only [norm_eq_abs, abs_exp]\n    conv_rhs => rw [abs_of_nonneg (by positivity)]\n    -- ⊢ exp (t * |X ω| + v * X ω) ≤ exp ((v + t) * X ω) + exp ((v - t) * X ω)\n    rcases le_total 0 (X ω) with h_nonneg | h_nonpos\n    · rw [abs_of_nonneg h_nonneg, ← add_mul, add_comm, le_add_iff_nonneg_right]\n      positivity\n    · rw [abs_of_nonpos h_nonpos, mul_neg, mul_comm, ← mul_neg, mul_comm, ← add_mul, add_comm,\n        ← sub_eq_add_neg, le_add_iff_nonneg_left]\n      positivity\n\n"}
{"name":"ProbabilityTheory.integrable_exp_mul_abs","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nt : Real\nht_int_pos : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul t (X ω))) μ\nht_int_neg : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (Neg.neg t) (X ω))) μ\n⊢ MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul t (abs (X ω)))) μ","decl":"/-- If `ω ↦ exp (t * X ω)` is integrable at `t` and `-t`, then `ω ↦ exp (t * |X ω|)` is\nintegrable. -/\nlemma integrable_exp_mul_abs (ht_int_pos : Integrable (fun ω ↦ exp (t * X ω)) μ)\n    (ht_int_neg : Integrable (fun ω ↦ exp (- t * X ω)) μ) :\n    Integrable (fun ω ↦ exp (t * |X ω|)) μ := by\n  have h := integrable_exp_mul_abs_add (t := t) (μ := μ) (X := X) (v := 0) ?_ ?_\n  · simpa using h\n  · simpa using ht_int_pos\n  · simpa using ht_int_neg\n\n"}
{"name":"ProbabilityTheory.integrable_exp_abs_mul_abs_add","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nt v : Real\nht_int_pos : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (HAdd.hAdd v t) (X ω))) μ\nht_int_neg : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (HSub.hSub v t) (X ω))) μ\n⊢ MeasureTheory.Integrable (fun ω => Real.exp (HAdd.hAdd (HMul.hMul (abs t) (abs (X ω))) (HMul.hMul v (X ω)))) μ","decl":"/-- If `exp ((v + t) * X)` and `exp ((v - t) * X)` are integrable, then\n`ω ↦ exp (|t| * |X| + v * X)` is integrable. -/\nlemma integrable_exp_abs_mul_abs_add (ht_int_pos : Integrable (fun ω ↦ exp ((v + t) * X ω)) μ)\n    (ht_int_neg : Integrable (fun ω ↦ exp ((v - t) * X ω)) μ) :\n    Integrable (fun ω ↦ exp (|t| * |X ω| + v * X ω)) μ := by\n  rcases le_total 0 t with ht_nonneg | ht_nonpos\n  · simp_rw [abs_of_nonneg ht_nonneg]\n    exact integrable_exp_mul_abs_add ht_int_pos ht_int_neg\n  · simp_rw [abs_of_nonpos ht_nonpos]\n    exact integrable_exp_mul_abs_add ht_int_neg (by simpa using ht_int_pos)\n\n"}
{"name":"ProbabilityTheory.integrable_exp_abs_mul_abs","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nt : Real\nht_int_pos : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul t (X ω))) μ\nht_int_neg : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (Neg.neg t) (X ω))) μ\n⊢ MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (abs t) (abs (X ω)))) μ","decl":"/-- If `ω ↦ exp (t * X ω)` is integrable at `t` and `-t`, then `ω ↦ exp (|t| * |X ω|)` is\nintegrable. -/\nlemma integrable_exp_abs_mul_abs (ht_int_pos : Integrable (fun ω ↦ exp (t * X ω)) μ)\n    (ht_int_neg : Integrable (fun ω ↦ exp (- t * X ω)) μ) :\n    Integrable (fun ω ↦ exp (|t| * |X ω|)) μ := by\n  rcases le_total 0 t with ht_nonneg | ht_nonpos\n  · simp_rw [abs_of_nonneg ht_nonneg]\n    exact integrable_exp_mul_abs ht_int_pos ht_int_neg\n  · simp_rw [abs_of_nonpos ht_nonpos]\n    exact integrable_exp_mul_abs ht_int_neg (by simpa using ht_int_pos)\n\n"}
{"name":"ProbabilityTheory.rpow_abs_le_mul_max_exp_of_pos","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"x t p : Real\nhp : LE.le 0 p\nht : LT.lt 0 t\n⊢ LE.le (HPow.hPow (abs x) p) (HMul.hMul (HPow.hPow (HDiv.hDiv p t) p) (Max.max (Real.exp (HMul.hMul t x)) (Real.exp (HMul.hMul (Neg.neg t) x))))","decl":"/-- Auxiliary lemma for `rpow_abs_le_mul_max_exp`. -/\nlemma rpow_abs_le_mul_max_exp_of_pos (x : ℝ) {t p : ℝ} (hp : 0 ≤ p) (ht : 0 < t) :\n    |x| ^ p ≤ (p / t) ^ p * max (exp (t * x)) (exp (- t * x)) := by\n  by_cases hp_zero : p = 0\n  · simp only [hp_zero, rpow_zero, zero_div, neg_mul, one_mul, le_sup_iff, one_le_exp_iff,\n      Left.nonneg_neg_iff]\n    exact le_total 0 (t * x)\n  have h_x_le c (hc : 0 < c) : x ≤ c⁻¹ * exp (c * x) := le_inv_mul_exp x hc\n  have h_neg_x_le c (hc : 0 < c) : -x ≤ c⁻¹ * exp (- c * x) := by simpa using le_inv_mul_exp (-x) hc\n  have h_abs_le c (hc : 0 < c) : |x| ≤ c⁻¹ * max (exp (c * x)) (exp (- c * x)) := by\n    refine abs_le.mpr ⟨?_, ?_⟩\n    · rw [neg_le]\n      refine (h_neg_x_le c hc).trans ?_\n      gcongr\n      exact le_max_right _ _\n    · refine (h_x_le c hc).trans ?_\n      gcongr\n      exact le_max_left _ _\n  calc |x| ^ p\n  _ ≤ ((t / p)⁻¹ * max (exp (t / p * x)) (exp (- t / p * x))) ^ p := by\n    refine rpow_le_rpow (abs_nonneg _) ?_ hp\n    convert h_abs_le (t / p) (div_pos ht (hp.lt_of_ne' hp_zero)) using 5\n    rw [neg_div]\n  _ = (p / t) ^ p * max (exp (t * x)) (exp (- t * x)) := by\n    rw [mul_rpow (by positivity) (by positivity)]\n    congr\n    · field_simp\n    · rw [rpow_max (by positivity) (by positivity) hp, ← exp_mul, ← exp_mul]\n      ring_nf\n      congr <;> rw [mul_assoc, mul_inv_cancel₀ hp_zero, mul_one]\n\n"}
{"name":"ProbabilityTheory.rpow_abs_le_mul_max_exp","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"x t p : Real\nhp : LE.le 0 p\nht : Ne t 0\n⊢ LE.le (HPow.hPow (abs x) p) (HMul.hMul (HPow.hPow (HDiv.hDiv p (abs t)) p) (Max.max (Real.exp (HMul.hMul t x)) (Real.exp (HMul.hMul (Neg.neg t) x))))","decl":"lemma rpow_abs_le_mul_max_exp (x : ℝ) {t p : ℝ} (hp : 0 ≤ p) (ht : t ≠ 0) :\n    |x| ^ p ≤ (p / |t|) ^ p * max (exp (t * x)) (exp (- t * x)) := by\n  rcases lt_or_gt_of_ne ht with ht_neg | ht_pos\n  · rw [abs_of_nonpos ht_neg.le, sup_comm]\n    convert rpow_abs_le_mul_max_exp_of_pos x hp (t := -t) (by simp [ht_neg])\n    simp\n  · rw [abs_of_nonneg ht_pos.le]\n    exact rpow_abs_le_mul_max_exp_of_pos x hp ht_pos\n\n"}
{"name":"ProbabilityTheory.rpow_abs_le_mul_exp_abs","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"x t p : Real\nhp : LE.le 0 p\nht : Ne t 0\n⊢ LE.le (HPow.hPow (abs x) p) (HMul.hMul (HPow.hPow (HDiv.hDiv p (abs t)) p) (Real.exp (HMul.hMul (abs t) (abs x))))","decl":"lemma rpow_abs_le_mul_exp_abs (x : ℝ) {t p : ℝ} (hp : 0 ≤ p) (ht : t ≠ 0) :\n    |x| ^ p ≤ (p / |t|) ^ p * exp (|t| * |x|) := by\n  refine (rpow_abs_le_mul_max_exp_of_pos x hp (t := |t|) ?_).trans_eq ?_\n  · simp [ht]\n  · congr\n    rcases le_total 0 x with hx | hx\n    · rw [abs_of_nonneg hx]\n      simp only [neg_mul, sup_eq_left, exp_le_exp, neg_le_self_iff]\n      positivity\n    · rw [abs_of_nonpos hx]\n      simp only [neg_mul, mul_neg, sup_eq_right, exp_le_exp, le_neg_self_iff]\n      exact mul_nonpos_of_nonneg_of_nonpos (abs_nonneg _) hx\n\n"}
{"name":"ProbabilityTheory.integrable_rpow_abs_mul_exp_add_of_integrable_exp_mul","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nt v x : Real\nh_int_pos : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (HAdd.hAdd v t) (X ω))) μ\nh_int_neg : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (HSub.hSub v t) (X ω))) μ\nh_nonneg : LE.le 0 x\nhx : LT.lt x (abs t)\np : Real\nhp : LE.le 0 p\n⊢ MeasureTheory.Integrable (fun a => HMul.hMul (HPow.hPow (abs (X a)) p) (Real.exp (HAdd.hAdd (HMul.hMul v (X a)) (HMul.hMul x (abs (X a)))))) μ","decl":"/-- If `exp ((v + t) * X)` and `exp ((v - t) * X)` are integrable\nthen for nonnegative `p : ℝ` and any `x ∈ [0, |t|)`,\n`|X| ^ p * exp (v * X + x * |X|)` is integrable. -/\nlemma integrable_rpow_abs_mul_exp_add_of_integrable_exp_mul {x : ℝ}\n    (h_int_pos : Integrable (fun ω ↦ exp ((v + t) * X ω)) μ)\n    (h_int_neg : Integrable (fun ω ↦ exp ((v - t) * X ω)) μ) (h_nonneg : 0 ≤ x) (hx : x < |t|)\n    {p : ℝ} (hp : 0 ≤ p) :\n    Integrable (fun a ↦ |X a| ^ p * exp (v * X a + x * |X a|)) μ := by\n  have ht : t ≠ 0 := by\n    suffices |t| ≠ 0 by simpa\n    exact (h_nonneg.trans_lt hx).ne'\n  have hX : AEMeasurable X μ := aemeasurable_of_integrable_exp_mul ?_ h_int_pos h_int_neg\n  swap; · rw [← sub_ne_zero]; simp [ht]\n  rw [← integrable_norm_iff]\n  swap\n  · exact AEMeasurable.aestronglyMeasurable <| by fun_prop\n  simp only [norm_mul, norm_pow, norm_eq_abs, sq_abs, abs_exp]\n  have h_le a : |X a| ^ p * exp (v * X a + x * |X a|)\n      ≤ (p / (|t| - x)) ^ p * exp (v * X a + |t| * |X a|) := by\n    simp_rw [exp_add, mul_comm (exp (v * X a)), ← mul_assoc]\n    gcongr ?_ * _\n    have : |t| = |t| - x + x := by simp\n    nth_rw 2 [this]\n    rw [add_mul, exp_add, ← mul_assoc]\n    gcongr ?_ * _\n    convert rpow_abs_le_mul_exp_abs (X a) hp (t := |t| - x) _ using 4\n    · nth_rw 2 [abs_of_nonneg]\n      simp [hx.le]\n    · nth_rw 2 [abs_of_nonneg]\n      simp [hx.le]\n    · rw [sub_ne_zero]\n      exact hx.ne'\n  refine Integrable.mono (g := fun a ↦ (p / (|t| - x)) ^ p * exp (v * X a + |t| * |X a|))\n    ?_ ?_ <| ae_of_all _ fun ω ↦ ?_\n  · refine Integrable.const_mul ?_ _\n    simp_rw [add_comm (v * X _)]\n    exact integrable_exp_abs_mul_abs_add h_int_pos h_int_neg\n  · refine AEMeasurable.aestronglyMeasurable ?_\n    exact AEMeasurable.mul (by fun_prop) (measurable_exp.comp_aemeasurable (by fun_prop))\n  · simp only [sq_abs, norm_mul, norm_pow, norm_eq_abs, abs_exp, norm_div, norm_ofNat]\n    simp_rw [abs_rpow_of_nonneg (abs_nonneg _), abs_abs]\n    refine (h_le ω).trans_eq ?_\n    congr\n    symm\n    simp only [abs_eq_self, sub_nonneg]\n    exact rpow_nonneg (div_nonneg hp (sub_nonneg_of_le hx.le)) _\n\n"}
{"name":"ProbabilityTheory.integrable_pow_abs_mul_exp_add_of_integrable_exp_mul","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nt v x : Real\nh_int_pos : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (HAdd.hAdd v t) (X ω))) μ\nh_int_neg : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (HSub.hSub v t) (X ω))) μ\nh_nonneg : LE.le 0 x\nhx : LT.lt x (abs t)\nn : Nat\n⊢ MeasureTheory.Integrable (fun a => HMul.hMul (HPow.hPow (abs (X a)) n) (Real.exp (HAdd.hAdd (HMul.hMul v (X a)) (HMul.hMul x (abs (X a)))))) μ","decl":"/-- If `exp ((v + t) * X)` and `exp ((v - t) * X)` are integrable\nthen for any `n : ℕ` and any `x ∈ [0, |t|)`,\n`|X| ^ n * exp (v * X + x * |X|)` is integrable. -/\nlemma integrable_pow_abs_mul_exp_add_of_integrable_exp_mul {x : ℝ}\n    (h_int_pos : Integrable (fun ω ↦ exp ((v + t) * X ω)) μ)\n    (h_int_neg : Integrable (fun ω ↦ exp ((v - t) * X ω)) μ) (h_nonneg : 0 ≤ x) (hx : x < |t|)\n    (n : ℕ) :\n    Integrable (fun a ↦ |X a| ^ n * exp (v * X a + x * |X a|)) μ := by\n  convert integrable_rpow_abs_mul_exp_add_of_integrable_exp_mul h_int_pos h_int_neg h_nonneg hx\n    n.cast_nonneg\n  simp\n\n"}
{"name":"ProbabilityTheory.integrable_rpow_abs_mul_exp_of_integrable_exp_mul","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nt v : Real\nht : Ne t 0\nht_int_pos : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (HAdd.hAdd v t) (X ω))) μ\nht_int_neg : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (HSub.hSub v t) (X ω))) μ\np : Real\nhp : LE.le 0 p\n⊢ MeasureTheory.Integrable (fun ω => HMul.hMul (HPow.hPow (abs (X ω)) p) (Real.exp (HMul.hMul v (X ω)))) μ","decl":"/-- If `exp ((v + t) * X)` and `exp ((v - t) * X)` are integrable\nthen for nonnegative `p : ℝ`, `|X| ^ p * exp (v * X)` is integrable. -/\nlemma integrable_rpow_abs_mul_exp_of_integrable_exp_mul (ht : t ≠ 0)\n    (ht_int_pos : Integrable (fun ω ↦ exp ((v + t) * X ω)) μ)\n    (ht_int_neg : Integrable (fun ω ↦ exp ((v - t) * X ω)) μ) {p : ℝ} (hp : 0 ≤ p) :\n    Integrable (fun ω ↦ |X ω| ^ p * exp (v * X ω)) μ := by\n  convert integrable_rpow_abs_mul_exp_add_of_integrable_exp_mul ht_int_pos ht_int_neg le_rfl _ hp\n    using 4\n  · simp\n  · simp [ht]\n\n"}
{"name":"ProbabilityTheory.integrable_pow_abs_mul_exp_of_integrable_exp_mul","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nt v : Real\nht : Ne t 0\nht_int_pos : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (HAdd.hAdd v t) (X ω))) μ\nht_int_neg : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (HSub.hSub v t) (X ω))) μ\nn : Nat\n⊢ MeasureTheory.Integrable (fun ω => HMul.hMul (HPow.hPow (abs (X ω)) n) (Real.exp (HMul.hMul v (X ω)))) μ","decl":"/-- If `exp ((v + t) * X)` and `exp ((v - t) * X)` are integrable, then for all `n : ℕ`,\n`|X| ^ n * exp (v * X)` is integrable. -/\nlemma integrable_pow_abs_mul_exp_of_integrable_exp_mul (ht : t ≠ 0)\n    (ht_int_pos : Integrable (fun ω ↦ exp ((v + t) * X ω)) μ)\n    (ht_int_neg : Integrable (fun ω ↦ exp ((v - t) * X ω)) μ) (n : ℕ) :\n    Integrable (fun ω ↦ |X ω| ^ n * exp (v * X ω)) μ := by\n  convert integrable_rpow_abs_mul_exp_of_integrable_exp_mul ht ht_int_pos ht_int_neg\n    (by positivity : 0 ≤ (n : ℝ)) with ω\n  simp\n\n"}
{"name":"ProbabilityTheory.integrable_rpow_mul_exp_of_integrable_exp_mul","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nt v : Real\nht : Ne t 0\nht_int_pos : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (HAdd.hAdd v t) (X ω))) μ\nht_int_neg : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (HSub.hSub v t) (X ω))) μ\np : Real\nhp : LE.le 0 p\n⊢ MeasureTheory.Integrable (fun ω => HMul.hMul (HPow.hPow (X ω) p) (Real.exp (HMul.hMul v (X ω)))) μ","decl":"/-- If `exp ((v + t) * X)` and `exp ((v - t) * X)` are integrable, then for all nonnegative `p : ℝ`,\n`X ^ p * exp (v * X)` is integrable. -/\nlemma integrable_rpow_mul_exp_of_integrable_exp_mul (ht : t ≠ 0)\n    (ht_int_pos : Integrable (fun ω ↦ exp ((v + t) * X ω)) μ)\n    (ht_int_neg : Integrable (fun ω ↦ exp ((v - t) * X ω)) μ) {p : ℝ} (hp : 0 ≤ p) :\n    Integrable (fun ω ↦ X ω ^ p * exp (v * X ω)) μ := by\n  have hX : AEMeasurable X μ := aemeasurable_of_integrable_exp_mul ?_ ht_int_pos ht_int_neg\n  swap; · rw [← sub_ne_zero]; simp [ht]\n  rw [← integrable_norm_iff]\n  · simp_rw [norm_eq_abs, abs_mul, abs_exp]\n    have h := integrable_rpow_abs_mul_exp_of_integrable_exp_mul ht ht_int_pos ht_int_neg hp\n    refine h.mono' ?_ ?_\n    · exact ((hX.pow_const _).abs.mul\n        (measurable_exp.comp_aemeasurable (hX.const_mul _))).aestronglyMeasurable\n    · refine ae_of_all _ fun ω ↦ ?_\n      simp only [norm_mul, norm_eq_abs, abs_abs, abs_exp]\n      gcongr\n      exact abs_rpow_le_abs_rpow _ _\n  · exact ((hX.pow_const _).mul\n      (measurable_exp.comp_aemeasurable (hX.const_mul _))).aestronglyMeasurable\n\n"}
{"name":"ProbabilityTheory.integrable_pow_mul_exp_of_integrable_exp_mul","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nt v : Real\nht : Ne t 0\nht_int_pos : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (HAdd.hAdd v t) (X ω))) μ\nht_int_neg : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (HSub.hSub v t) (X ω))) μ\nn : Nat\n⊢ MeasureTheory.Integrable (fun ω => HMul.hMul (HPow.hPow (X ω) n) (Real.exp (HMul.hMul v (X ω)))) μ","decl":"/-- If `exp ((v + t) * X)` and `exp ((v - t) * X)` are integrable, then for all `n : ℕ`,\n`X ^ n * exp (v * X)` is integrable. -/\nlemma integrable_pow_mul_exp_of_integrable_exp_mul (ht : t ≠ 0)\n    (ht_int_pos : Integrable (fun ω ↦ exp ((v + t) * X ω)) μ)\n    (ht_int_neg : Integrable (fun ω ↦ exp ((v - t) * X ω)) μ) (n : ℕ) :\n    Integrable (fun ω ↦ X ω ^ n * exp (v * X ω)) μ := by\n  convert integrable_rpow_mul_exp_of_integrable_exp_mul ht ht_int_pos ht_int_neg\n    (by positivity : 0 ≤ (n : ℝ)) with ω\n  simp\n\n"}
{"name":"ProbabilityTheory.integrable_rpow_abs_of_integrable_exp_mul","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nt : Real\nht : Ne t 0\nht_int_pos : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul t (X ω))) μ\nht_int_neg : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (Neg.neg t) (X ω))) μ\np : Real\nhp : LE.le 0 p\n⊢ MeasureTheory.Integrable (fun ω => HPow.hPow (abs (X ω)) p) μ","decl":"/-- If `ω ↦ exp (t * X ω)` is integrable at `t` and `-t` for `t ≠ 0`, then `ω ↦ |X ω| ^ p` is\nintegrable for all nonnegative `p : ℝ`. -/\nlemma integrable_rpow_abs_of_integrable_exp_mul (ht : t ≠ 0)\n    (ht_int_pos : Integrable (fun ω ↦ exp (t * X ω)) μ)\n    (ht_int_neg : Integrable (fun ω ↦ exp (- t * X ω)) μ) {p : ℝ} (hp : 0 ≤ p) :\n    Integrable (fun ω ↦ |X ω| ^ p) μ := by\n  have h := integrable_rpow_abs_mul_exp_of_integrable_exp_mul (μ := μ) (X := X) ht (v := 0) ?_ ?_ hp\n  · simpa using h\n  · simpa using ht_int_pos\n  · simpa using ht_int_neg\n\n"}
{"name":"ProbabilityTheory.integrable_pow_abs_of_integrable_exp_mul","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nt : Real\nht : Ne t 0\nht_int_pos : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul t (X ω))) μ\nht_int_neg : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (Neg.neg t) (X ω))) μ\nn : Nat\n⊢ MeasureTheory.Integrable (fun ω => HPow.hPow (abs (X ω)) n) μ","decl":"/-- If `ω ↦ exp (t * X ω)` is integrable at `t` and `-t` for `t ≠ 0`, then `ω ↦ |X ω| ^ n` is\nintegrable for all `n : ℕ`. That is, all moments of `X` are finite. -/\nlemma integrable_pow_abs_of_integrable_exp_mul (ht : t ≠ 0)\n    (ht_int_pos : Integrable (fun ω ↦ exp (t * X ω)) μ)\n    (ht_int_neg : Integrable (fun ω ↦ exp (- t * X ω)) μ) (n : ℕ) :\n    Integrable (fun ω ↦ |X ω| ^ n) μ := by\n  convert integrable_rpow_abs_of_integrable_exp_mul ht ht_int_pos ht_int_neg\n    (by positivity : 0 ≤ (n : ℝ)) with ω\n  simp\n\n"}
{"name":"ProbabilityTheory.integrable_rpow_of_integrable_exp_mul","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nt : Real\nht : Ne t 0\nht_int_pos : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul t (X ω))) μ\nht_int_neg : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (Neg.neg t) (X ω))) μ\np : Real\nhp : LE.le 0 p\n⊢ MeasureTheory.Integrable (fun ω => HPow.hPow (X ω) p) μ","decl":"/-- If `ω ↦ exp (t * X ω)` is integrable at `t` and `-t` for `t ≠ 0`, then `ω ↦ X ω ^ p` is\nintegrable for all nonnegative `p : ℝ`. -/\nlemma integrable_rpow_of_integrable_exp_mul (ht : t ≠ 0)\n    (ht_int_pos : Integrable (fun ω ↦ exp (t * X ω)) μ)\n    (ht_int_neg : Integrable (fun ω ↦ exp (- t * X ω)) μ) {p : ℝ} (hp : 0 ≤ p) :\n    Integrable (fun ω ↦ X ω ^ p) μ := by\n  have h := integrable_rpow_mul_exp_of_integrable_exp_mul (μ := μ) (X := X) ht (v := 0) ?_ ?_ hp\n  · simpa using h\n  · simpa using ht_int_pos\n  · simpa using ht_int_neg\n\n"}
{"name":"ProbabilityTheory.integrable_pow_of_integrable_exp_mul","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nt : Real\nht : Ne t 0\nht_int_pos : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul t (X ω))) μ\nht_int_neg : MeasureTheory.Integrable (fun ω => Real.exp (HMul.hMul (Neg.neg t) (X ω))) μ\nn : Nat\n⊢ MeasureTheory.Integrable (fun ω => HPow.hPow (X ω) n) μ","decl":"/-- If `ω ↦ exp (t * X ω)` is integrable at `t` and `-t` for `t ≠ 0`, then `ω ↦ X ω ^ n` is\nintegrable for all `n : ℕ`. -/\nlemma integrable_pow_of_integrable_exp_mul (ht : t ≠ 0)\n    (ht_int_pos : Integrable (fun ω ↦ exp (t * X ω)) μ)\n    (ht_int_neg : Integrable (fun ω ↦ exp (- t * X ω)) μ) (n : ℕ) :\n    Integrable (fun ω ↦ X ω ^ n) μ := by\n  convert integrable_rpow_of_integrable_exp_mul ht ht_int_pos ht_int_neg\n    (by positivity : 0 ≤ (n : ℝ)) with ω\n  simp\n\n"}
{"name":"ProbabilityTheory.add_half_inf_sub_mem_Ioo","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"l u v : Real\nhv : Membership.mem (Set.Ioo l u) v\n⊢ Membership.mem (Set.Ioo l u) (HAdd.hAdd v (HDiv.hDiv (Min.min (HSub.hSub v l) (HSub.hSub u v)) 2))","decl":"lemma add_half_inf_sub_mem_Ioo {l u v : ℝ} (hv : v ∈ Set.Ioo l u) :\n    v + ((v - l) ⊓ (u - v)) / 2 ∈ Set.Ioo l u := by\n  have h_pos : 0 < (v - l) ⊓ (u - v) := by simp [hv.1, hv.2]\n  constructor\n  · calc l < v := hv.1\n    _ ≤ v + ((v - l) ⊓ (u - v)) / 2 := le_add_of_nonneg_right (by positivity)\n  · calc v + ((v - l) ⊓ (u - v)) / 2\n    _ < v + ((v - l) ⊓ (u - v)) := by gcongr; exact half_lt_self (by positivity)\n    _ ≤ v + (u - v) := by gcongr; exact inf_le_right\n    _ = u := by abel\n\n"}
{"name":"ProbabilityTheory.sub_half_inf_sub_mem_Ioo","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"l u v : Real\nhv : Membership.mem (Set.Ioo l u) v\n⊢ Membership.mem (Set.Ioo l u) (HSub.hSub v (HDiv.hDiv (Min.min (HSub.hSub v l) (HSub.hSub u v)) 2))","decl":"lemma sub_half_inf_sub_mem_Ioo {l u v : ℝ} (hv : v ∈ Set.Ioo l u) :\n    v - ((v - l) ⊓ (u - v)) / 2 ∈ Set.Ioo l u := by\n  have h_pos : 0 < (v - l) ⊓ (u - v) := by simp [hv.1, hv.2]\n  constructor\n  · calc l = v - (v - l) := by abel\n    _ ≤ v - ((v - l) ⊓ (u - v)) := by gcongr; exact inf_le_left\n    _ < v - ((v - l) ⊓ (u - v)) / 2 := by gcongr; exact half_lt_self (by positivity)\n  · calc v - ((v - l) ⊓ (u - v)) / 2\n    _ ≤ v := by\n      rw [sub_le_iff_le_add]\n      exact le_add_of_nonneg_right (by positivity)\n    _ < u := hv.2\n\n"}
{"name":"ProbabilityTheory.aemeasurable_of_mem_interior_integrableExpSet","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nv : Real\nhv : Membership.mem (interior (ProbabilityTheory.integrableExpSet X μ)) v\n⊢ AEMeasurable X μ","decl":"/-- If the interior of the interval `integrableExpSet X μ` is nonempty,\nthen `X` is a.e. measurable. -/\nlemma aemeasurable_of_mem_interior_integrableExpSet (hv : v ∈ interior (integrableExpSet X μ)) :\n    AEMeasurable X μ := by\n  rw [mem_interior_iff_mem_nhds, mem_nhds_iff_exists_Ioo_subset] at hv\n  obtain ⟨l, u, hvlu, h_subset⟩ := hv\n  let t := ((v - l) ⊓ (u - v)) / 2\n  have h_pos : 0 < (v - l) ⊓ (u - v) := by simp [hvlu.1, hvlu.2]\n  have ht : 0 < t := half_pos h_pos\n  by_cases hvt : v + t = 0\n  · have hvt' : v - t ≠ 0 := by\n      rw [sub_ne_zero]\n      refine fun h_eq ↦ ht.ne' ?_\n      simpa [h_eq] using hvt\n    exact aemeasurable_of_aemeasurable_exp_mul hvt'\n      (h_subset (sub_half_inf_sub_mem_Ioo hvlu)).aemeasurable\n  · exact aemeasurable_of_aemeasurable_exp_mul hvt\n      (h_subset (add_half_inf_sub_mem_Ioo hvlu)).aemeasurable\n\n"}
{"name":"ProbabilityTheory.integrable_rpow_abs_mul_exp_of_mem_interior_integrableExpSet","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nv : Real\nhv : Membership.mem (interior (ProbabilityTheory.integrableExpSet X μ)) v\np : Real\nhp : LE.le 0 p\n⊢ MeasureTheory.Integrable (fun ω => HMul.hMul (HPow.hPow (abs (X ω)) p) (Real.exp (HMul.hMul v (X ω)))) μ","decl":"/-- If `v` belongs to the interior of the interval `integrableExpSet X μ`,\nthen `|X| ^ p * exp (v * X)` is integrable for all nonnegative `p : ℝ`. -/\nlemma integrable_rpow_abs_mul_exp_of_mem_interior_integrableExpSet\n    (hv : v ∈ interior (integrableExpSet X μ)) {p : ℝ} (hp : 0 ≤ p) :\n    Integrable (fun ω ↦ |X ω| ^ p * exp (v * X ω)) μ := by\n  rw [mem_interior_iff_mem_nhds, mem_nhds_iff_exists_Ioo_subset] at hv\n  obtain ⟨l, u, hvlu, h_subset⟩ := hv\n  have h_pos : 0 < (v - l) ⊓ (u - v) := by simp [hvlu.1, hvlu.2]\n  refine integrable_rpow_abs_mul_exp_of_integrable_exp_mul\n    (t := min (v - l) (u - v) / 2) ?_ ?_ ?_ hp\n  · positivity\n  · exact h_subset (add_half_inf_sub_mem_Ioo hvlu)\n  · exact h_subset (sub_half_inf_sub_mem_Ioo hvlu)\n\n"}
{"name":"ProbabilityTheory.integrable_pow_abs_mul_exp_of_mem_interior_integrableExpSet","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nv : Real\nhv : Membership.mem (interior (ProbabilityTheory.integrableExpSet X μ)) v\nn : Nat\n⊢ MeasureTheory.Integrable (fun ω => HMul.hMul (HPow.hPow (abs (X ω)) n) (Real.exp (HMul.hMul v (X ω)))) μ","decl":"/-- If `v` belongs to the interior of the interval `integrableExpSet X μ`,\nthen `|X| ^ n * exp (v * X)` is integrable for all `n : ℕ`. -/\nlemma integrable_pow_abs_mul_exp_of_mem_interior_integrableExpSet\n    (hv : v ∈ interior (integrableExpSet X μ)) (n : ℕ) :\n    Integrable (fun ω ↦ |X ω| ^ n * exp (v * X ω)) μ := by\n  convert integrable_rpow_abs_mul_exp_of_mem_interior_integrableExpSet hv\n    (by positivity : 0 ≤ (n : ℝ)) with ω\n  simp\n\n"}
{"name":"ProbabilityTheory.integrable_rpow_mul_exp_of_mem_interior_integrableExpSet","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nv : Real\nhv : Membership.mem (interior (ProbabilityTheory.integrableExpSet X μ)) v\np : Real\nhp : LE.le 0 p\n⊢ MeasureTheory.Integrable (fun ω => HMul.hMul (HPow.hPow (X ω) p) (Real.exp (HMul.hMul v (X ω)))) μ","decl":"/-- If `v` belongs to the interior of the interval `integrableExpSet X μ`,\nthen `X ^ p * exp (v * X)` is integrable for all nonnegative `p : ℝ`. -/\nlemma integrable_rpow_mul_exp_of_mem_interior_integrableExpSet\n    (hv : v ∈ interior (integrableExpSet X μ)) {p : ℝ} (hp : 0 ≤ p) :\n    Integrable (fun ω ↦ X ω ^ p * exp (v * X ω)) μ := by\n  rw [mem_interior_iff_mem_nhds, mem_nhds_iff_exists_Ioo_subset] at hv\n  obtain ⟨l, u, hvlu, h_subset⟩ := hv\n  have h_pos : 0 < (v - l) ⊓ (u - v) := by simp [hvlu.1, hvlu.2]\n  refine integrable_rpow_mul_exp_of_integrable_exp_mul\n    (t := min (v - l) (u - v) / 2) ?_ ?_ ?_ hp\n  · positivity\n  · exact h_subset (add_half_inf_sub_mem_Ioo hvlu)\n  · exact h_subset (sub_half_inf_sub_mem_Ioo hvlu)\n\n"}
{"name":"ProbabilityTheory.integrable_pow_mul_exp_of_mem_interior_integrableExpSet","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nv : Real\nhv : Membership.mem (interior (ProbabilityTheory.integrableExpSet X μ)) v\nn : Nat\n⊢ MeasureTheory.Integrable (fun ω => HMul.hMul (HPow.hPow (X ω) n) (Real.exp (HMul.hMul v (X ω)))) μ","decl":"/-- If `v` belongs to the interior of the interval `integrableExpSet X μ`,\nthen `X ^ n * exp (v * X)` is integrable for all `n : ℕ`. -/\nlemma integrable_pow_mul_exp_of_mem_interior_integrableExpSet\n    (hv : v ∈ interior (integrableExpSet X μ)) (n : ℕ) :\n    Integrable (fun ω ↦ X ω ^ n * exp (v * X ω)) μ := by\n  convert integrable_rpow_mul_exp_of_mem_interior_integrableExpSet hv\n    (by positivity : 0 ≤ (n : ℝ)) with ω\n  simp\n\n"}
{"name":"ProbabilityTheory.integrable_rpow_abs_of_mem_interior_integrableExpSet","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nh : Membership.mem (interior (ProbabilityTheory.integrableExpSet X μ)) 0\np : Real\nhp : LE.le 0 p\n⊢ MeasureTheory.Integrable (fun ω => HPow.hPow (abs (X ω)) p) μ","decl":"/-- If 0 belongs to the interior of the interval `integrableExpSet X μ`,\nthen `|X| ^ n` is integrable for all nonnegative `p : ℝ`. -/\nlemma integrable_rpow_abs_of_mem_interior_integrableExpSet\n    (h : 0 ∈ interior (integrableExpSet X μ)) {p : ℝ} (hp : 0 ≤ p) :\n    Integrable (fun ω ↦ |X ω| ^ p) μ := by\n  convert integrable_rpow_abs_mul_exp_of_mem_interior_integrableExpSet h hp using 1\n  simp\n\n"}
{"name":"ProbabilityTheory.integrable_pow_abs_of_mem_interior_integrableExpSet","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nh : Membership.mem (interior (ProbabilityTheory.integrableExpSet X μ)) 0\nn : Nat\n⊢ MeasureTheory.Integrable (fun ω => HPow.hPow (abs (X ω)) n) μ","decl":"/-- If 0 belongs to the interior of the interval `integrableExpSet X μ`,\nthen `|X| ^ n` is integrable for all `n : ℕ`. -/\nlemma integrable_pow_abs_of_mem_interior_integrableExpSet\n    (h : 0 ∈ interior (integrableExpSet X μ)) (n : ℕ) :\n    Integrable (fun ω ↦ |X ω| ^ n) μ := by\n  convert integrable_pow_abs_mul_exp_of_mem_interior_integrableExpSet h n\n  simp\n\n"}
{"name":"ProbabilityTheory.integrable_rpow_of_mem_interior_integrableExpSet","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nh : Membership.mem (interior (ProbabilityTheory.integrableExpSet X μ)) 0\np : Real\nhp : LE.le 0 p\n⊢ MeasureTheory.Integrable (fun ω => HPow.hPow (X ω) p) μ","decl":"/-- If 0 belongs to the interior of the interval `integrableExpSet X μ`,\nthen `X ^ n` is integrable for all nonnegative `p : ℝ`. -/\nlemma integrable_rpow_of_mem_interior_integrableExpSet\n    (h : 0 ∈ interior (integrableExpSet X μ)) {p : ℝ} (hp : 0 ≤ p) :\n    Integrable (fun ω ↦ X ω ^ p) μ := by\n  convert integrable_rpow_mul_exp_of_mem_interior_integrableExpSet h hp using 1\n  simp\n\n"}
{"name":"ProbabilityTheory.integrable_pow_of_mem_interior_integrableExpSet","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nh : Membership.mem (interior (ProbabilityTheory.integrableExpSet X μ)) 0\nn : Nat\n⊢ MeasureTheory.Integrable (fun ω => HPow.hPow (X ω) n) μ","decl":"/-- If 0 belongs to the interior of the interval `integrableExpSet X μ`,\nthen `X ^ n` is integrable for all `n : ℕ`. -/\nlemma integrable_pow_of_mem_interior_integrableExpSet\n    (h : 0 ∈ interior (integrableExpSet X μ)) (n : ℕ) :\n    Integrable (fun ω ↦ X ω ^ n) μ := by\n  convert integrable_pow_mul_exp_of_mem_interior_integrableExpSet h n\n  simp\n\n"}
{"name":"ProbabilityTheory.memℒp_of_mem_interior_integrableExpSet","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nh : Membership.mem (interior (ProbabilityTheory.integrableExpSet X μ)) 0\np : NNReal\n⊢ MeasureTheory.Memℒp X (↑p) μ","decl":"/-- If 0 belongs to the interior of `integrableExpSet X μ`, then `X` is in `ℒp` for all\nfinite `p`. -/\nlemma memℒp_of_mem_interior_integrableExpSet (h : 0 ∈ interior (integrableExpSet X μ)) (p : ℝ≥0) :\n    Memℒp X p μ := by\n  have hX : AEMeasurable X μ := aemeasurable_of_mem_interior_integrableExpSet h\n  by_cases hp_zero : p = 0\n  · simp only [hp_zero, ENNReal.coe_zero, memℒp_zero_iff_aestronglyMeasurable]\n    exact hX.aestronglyMeasurable\n  rw [← integrable_norm_rpow_iff hX.aestronglyMeasurable (mod_cast hp_zero) (by simp)]\n  simp only [norm_eq_abs, ENNReal.coe_toReal]\n  exact integrable_rpow_abs_of_mem_interior_integrableExpSet h p.2\n\n"}
{"name":"ProbabilityTheory.integrable_cexp_mul_of_re_mem_integrableExpSet","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nz : Complex\nhX : AEMeasurable X μ\nhz : Membership.mem (ProbabilityTheory.integrableExpSet X μ) z.re\n⊢ MeasureTheory.Integrable (fun ω => Complex.exp (HMul.hMul z ↑(X ω))) μ","decl":"lemma integrable_cexp_mul_of_re_mem_integrableExpSet (hX : AEMeasurable X μ)\n    (hz : z.re ∈ integrableExpSet X μ) :\n    Integrable (fun ω ↦ cexp (z * X ω)) μ := by\n  rw [← integrable_norm_iff]\n  · simpa [Complex.norm_eq_abs, Complex.abs_exp] using hz\n  · exact AEMeasurable.aestronglyMeasurable (by fun_prop)\n\n"}
{"name":"ProbabilityTheory.integrable_cexp_mul_of_re_mem_interior_integrableExpSet","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nz : Complex\nhz : Membership.mem (interior (ProbabilityTheory.integrableExpSet X μ)) z.re\n⊢ MeasureTheory.Integrable (fun ω => Complex.exp (HMul.hMul z ↑(X ω))) μ","decl":"lemma integrable_cexp_mul_of_re_mem_interior_integrableExpSet\n    (hz : z.re ∈ interior (integrableExpSet X μ)) :\n    Integrable (fun ω ↦ cexp (z * X ω)) μ :=\n  integrable_cexp_mul_of_re_mem_integrableExpSet\n    (aemeasurable_of_mem_interior_integrableExpSet hz) (interior_subset hz)\n\n"}
{"name":"ProbabilityTheory.integrable_rpow_abs_mul_cexp_of_re_mem_interior_integrableExpSet","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nz : Complex\nhz : Membership.mem (interior (ProbabilityTheory.integrableExpSet X μ)) z.re\np : Real\nhp : LE.le 0 p\n⊢ MeasureTheory.Integrable (fun ω => HMul.hMul (↑(HPow.hPow (abs (X ω)) p)) (Complex.exp (HMul.hMul z ↑(X ω)))) μ","decl":"lemma integrable_rpow_abs_mul_cexp_of_re_mem_interior_integrableExpSet\n    (hz : z.re ∈ interior (integrableExpSet X μ)) {p : ℝ} (hp : 0 ≤ p) :\n    Integrable (fun ω ↦ (|X ω| ^ p : ℝ) * cexp (z * X ω)) μ := by\n  have hX : AEMeasurable X μ := aemeasurable_of_mem_interior_integrableExpSet hz\n  rw [← integrable_norm_iff]\n  swap; · exact AEMeasurable.aestronglyMeasurable (by fun_prop)\n  simpa [abs_rpow_of_nonneg (abs_nonneg _), Complex.abs_exp]\n    using integrable_rpow_abs_mul_exp_of_mem_interior_integrableExpSet hz hp\n\n"}
{"name":"ProbabilityTheory.integrable_pow_abs_mul_cexp_of_re_mem_interior_integrableExpSet","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nz : Complex\nhz : Membership.mem (interior (ProbabilityTheory.integrableExpSet X μ)) z.re\nn : Nat\n⊢ MeasureTheory.Integrable (fun ω => HMul.hMul (HPow.hPow (↑(abs (X ω))) n) (Complex.exp (HMul.hMul z ↑(X ω)))) μ","decl":"lemma integrable_pow_abs_mul_cexp_of_re_mem_interior_integrableExpSet\n    (hz : z.re ∈ interior (integrableExpSet X μ)) (n : ℕ) :\n    Integrable (fun ω ↦ |X ω| ^ n * cexp (z * X ω)) μ := by\n  convert integrable_rpow_abs_mul_cexp_of_re_mem_interior_integrableExpSet hz (Nat.cast_nonneg n)\n  simp\n\n"}
{"name":"ProbabilityTheory.integrable_rpow_mul_cexp_of_re_mem_interior_integrableExpSet","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nz : Complex\nhz : Membership.mem (interior (ProbabilityTheory.integrableExpSet X μ)) z.re\np : Real\nhp : LE.le 0 p\n⊢ MeasureTheory.Integrable (fun ω => HMul.hMul (↑(HPow.hPow (X ω) p)) (Complex.exp (HMul.hMul z ↑(X ω)))) μ","decl":"lemma integrable_rpow_mul_cexp_of_re_mem_interior_integrableExpSet\n    (hz : z.re ∈ interior (integrableExpSet X μ)) {p : ℝ} (hp : 0 ≤ p) :\n    Integrable (fun ω ↦ (X ω ^ p : ℝ) * cexp (z * X ω)) μ := by\n  have hX : AEMeasurable X μ := aemeasurable_of_mem_interior_integrableExpSet hz\n  rw [← integrable_norm_iff]\n  swap; · exact AEMeasurable.aestronglyMeasurable (by fun_prop)\n  simp only [norm_mul, norm_real, Real.norm_eq_abs, Complex.norm_eq_abs, Complex.abs_exp, mul_re,\n    ofReal_re, ofReal_im, mul_zero, sub_zero, Complex.abs_ofReal]\n  refine (integrable_rpow_abs_mul_exp_of_mem_interior_integrableExpSet hz hp).mono ?_ ?_\n  · exact AEMeasurable.aestronglyMeasurable (by fun_prop)\n  refine ae_of_all _ fun ω ↦ ?_\n  simp only [norm_mul, Real.norm_eq_abs, abs_abs, Real.abs_exp]\n  gcongr\n  exact abs_rpow_le_abs_rpow _ _\n\n"}
{"name":"ProbabilityTheory.integrable_pow_mul_cexp_of_re_mem_interior_integrableExpSet","module":"Mathlib.Probability.Moments.IntegrableExpMul","initialProofState":"Ω : Type u_1\nm : MeasurableSpace Ω\nX : Ω → Real\nμ : MeasureTheory.Measure Ω\nz : Complex\nhz : Membership.mem (interior (ProbabilityTheory.integrableExpSet X μ)) z.re\nn : Nat\n⊢ MeasureTheory.Integrable (fun ω => HMul.hMul (HPow.hPow (↑(X ω)) n) (Complex.exp (HMul.hMul z ↑(X ω)))) μ","decl":"lemma integrable_pow_mul_cexp_of_re_mem_interior_integrableExpSet\n    (hz : z.re ∈ interior (integrableExpSet X μ)) (n : ℕ) :\n    Integrable (fun ω ↦ X ω ^ n * cexp (z * X ω)) μ := by\n  convert integrable_rpow_mul_cexp_of_re_mem_interior_integrableExpSet hz (Nat.cast_nonneg n)\n  simp\n\n"}
