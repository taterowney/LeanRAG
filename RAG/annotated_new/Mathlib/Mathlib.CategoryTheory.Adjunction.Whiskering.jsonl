{"name":"CategoryTheory.Adjunction.whiskerRight_unit_app_app","module":"Mathlib.CategoryTheory.Adjunction.Whiskering","initialProofState":"C : Type u_1\nD : Type u_2\nE : Type u_3\ninst✝² : CategoryTheory.Category.{u_4, u_1} C\ninst✝¹ : CategoryTheory.Category.{u_5, u_2} D\ninst✝ : CategoryTheory.Category.{u_6, u_3} E\nF : CategoryTheory.Functor D E\nG : CategoryTheory.Functor E D\nadj : CategoryTheory.Adjunction F G\nX✝ : CategoryTheory.Functor C D\nX : C\n⊢ Eq (((CategoryTheory.Adjunction.whiskerRight C adj).unit.app X✝).app X) (adj.unit.app (X✝.obj X))","decl":"/-- Given an adjunction `F ⊣ G`, this provides the natural adjunction\n  `(whiskeringRight C _ _).obj F ⊣ (whiskeringRight C _ _).obj G`. -/\n@[simps! unit_app_app counit_app_app]\nprotected def whiskerRight (adj : F ⊣ G) :\n    (whiskeringRight C D E).obj F ⊣ (whiskeringRight C E D).obj G where\n  unit :=\n    { app := fun X =>\n        (Functor.rightUnitor _).inv ≫ whiskerLeft X adj.unit ≫ (Functor.associator _ _ _).inv\n      naturality := by intros; ext; dsimp; simp }\n  counit :=\n    { app := fun X =>\n        (Functor.associator _ _ _).hom ≫ whiskerLeft X adj.counit ≫ (Functor.rightUnitor _).hom\n      naturality := by intros; ext; dsimp; simp }\n\n"}
{"name":"CategoryTheory.Adjunction.whiskerRight_counit_app_app","module":"Mathlib.CategoryTheory.Adjunction.Whiskering","initialProofState":"C : Type u_1\nD : Type u_2\nE : Type u_3\ninst✝² : CategoryTheory.Category.{u_4, u_1} C\ninst✝¹ : CategoryTheory.Category.{u_5, u_2} D\ninst✝ : CategoryTheory.Category.{u_6, u_3} E\nF : CategoryTheory.Functor D E\nG : CategoryTheory.Functor E D\nadj : CategoryTheory.Adjunction F G\nX✝ : CategoryTheory.Functor C E\nX : C\n⊢ Eq (((CategoryTheory.Adjunction.whiskerRight C adj).counit.app X✝).app X) (adj.counit.app (X✝.obj X))","decl":"/-- Given an adjunction `F ⊣ G`, this provides the natural adjunction\n  `(whiskeringRight C _ _).obj F ⊣ (whiskeringRight C _ _).obj G`. -/\n@[simps! unit_app_app counit_app_app]\nprotected def whiskerRight (adj : F ⊣ G) :\n    (whiskeringRight C D E).obj F ⊣ (whiskeringRight C E D).obj G where\n  unit :=\n    { app := fun X =>\n        (Functor.rightUnitor _).inv ≫ whiskerLeft X adj.unit ≫ (Functor.associator _ _ _).inv\n      naturality := by intros; ext; dsimp; simp }\n  counit :=\n    { app := fun X =>\n        (Functor.associator _ _ _).hom ≫ whiskerLeft X adj.counit ≫ (Functor.rightUnitor _).hom\n      naturality := by intros; ext; dsimp; simp }\n\n"}
{"name":"CategoryTheory.Adjunction.whiskerLeft_counit_app_app","module":"Mathlib.CategoryTheory.Adjunction.Whiskering","initialProofState":"C : Type u_1\nD : Type u_2\nE : Type u_3\ninst✝² : CategoryTheory.Category.{u_4, u_1} C\ninst✝¹ : CategoryTheory.Category.{u_5, u_2} D\ninst✝ : CategoryTheory.Category.{u_6, u_3} E\nF : CategoryTheory.Functor D E\nG : CategoryTheory.Functor E D\nadj : CategoryTheory.Adjunction F G\nX✝ : CategoryTheory.Functor E C\nX : E\n⊢ Eq (((CategoryTheory.Adjunction.whiskerLeft C adj).counit.app X✝).app X) (X✝.map (adj.counit.app X))","decl":"/-- Given an adjunction `F ⊣ G`, this provides the natural adjunction\n  `(whiskeringLeft _ _ C).obj G ⊣ (whiskeringLeft _ _ C).obj F`. -/\n@[simps! unit_app_app counit_app_app]\nprotected def whiskerLeft (adj : F ⊣ G) :\n    (whiskeringLeft E D C).obj G ⊣ (whiskeringLeft D E C).obj F where\n  unit :=\n    { app := fun X =>\n        (Functor.leftUnitor _).inv ≫ whiskerRight adj.unit X ≫ (Functor.associator _ _ _).hom }\n  counit :=\n    { app := fun X =>\n        (Functor.associator _ _ _).inv ≫ whiskerRight adj.counit X ≫ (Functor.leftUnitor _).hom }\n  left_triangle_components X := by ext; simp [← X.map_comp]\n  right_triangle_components X := by ext; simp [← X.map_comp]\n\n"}
{"name":"CategoryTheory.Adjunction.whiskerLeft_unit_app_app","module":"Mathlib.CategoryTheory.Adjunction.Whiskering","initialProofState":"C : Type u_1\nD : Type u_2\nE : Type u_3\ninst✝² : CategoryTheory.Category.{u_4, u_1} C\ninst✝¹ : CategoryTheory.Category.{u_5, u_2} D\ninst✝ : CategoryTheory.Category.{u_6, u_3} E\nF : CategoryTheory.Functor D E\nG : CategoryTheory.Functor E D\nadj : CategoryTheory.Adjunction F G\nX✝ : CategoryTheory.Functor D C\nX : D\n⊢ Eq (((CategoryTheory.Adjunction.whiskerLeft C adj).unit.app X✝).app X) (X✝.map (adj.unit.app X))","decl":"/-- Given an adjunction `F ⊣ G`, this provides the natural adjunction\n  `(whiskeringLeft _ _ C).obj G ⊣ (whiskeringLeft _ _ C).obj F`. -/\n@[simps! unit_app_app counit_app_app]\nprotected def whiskerLeft (adj : F ⊣ G) :\n    (whiskeringLeft E D C).obj G ⊣ (whiskeringLeft D E C).obj F where\n  unit :=\n    { app := fun X =>\n        (Functor.leftUnitor _).inv ≫ whiskerRight adj.unit X ≫ (Functor.associator _ _ _).hom }\n  counit :=\n    { app := fun X =>\n        (Functor.associator _ _ _).inv ≫ whiskerRight adj.counit X ≫ (Functor.leftUnitor _).hom }\n  left_triangle_components X := by ext; simp [← X.map_comp]\n  right_triangle_components X := by ext; simp [← X.map_comp]\n\n"}
