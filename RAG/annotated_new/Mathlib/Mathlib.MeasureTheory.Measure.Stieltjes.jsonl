{"name":"StieltjesFunction.mk.sizeOf_spec","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"toFun : Real → Real\nmono' : Monotone toFun\nright_continuous' : ∀ (x : Real), ContinuousWithinAt toFun (Set.Ici x) x\n⊢ Eq (SizeOf.sizeOf { toFun := toFun, mono' := mono', right_continuous' := right_continuous' }) 1","decl":"/-- Bundled monotone right-continuous real functions, used to construct Stieltjes measures. -/\nstructure StieltjesFunction where\n  toFun : ℝ → ℝ\n  mono' : Monotone toFun\n  right_continuous' : ∀ x, ContinuousWithinAt toFun (Ici x) x\n\n"}
{"name":"StieltjesFunction.mono'","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"self : StieltjesFunction\n⊢ Monotone self.toFun","decl":"/-- Bundled monotone right-continuous real functions, used to construct Stieltjes measures. -/\nstructure StieltjesFunction where\n  toFun : ℝ → ℝ\n  mono' : Monotone toFun\n  right_continuous' : ∀ x, ContinuousWithinAt toFun (Ici x) x\n\n"}
{"name":"StieltjesFunction.right_continuous'","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"self : StieltjesFunction\nx : Real\n⊢ ContinuousWithinAt self.toFun (Set.Ici x) x","decl":"/-- Bundled monotone right-continuous real functions, used to construct Stieltjes measures. -/\nstructure StieltjesFunction where\n  toFun : ℝ → ℝ\n  mono' : Monotone toFun\n  right_continuous' : ∀ x, ContinuousWithinAt toFun (Ici x) x\n\n"}
{"name":"StieltjesFunction.mk.injEq","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"toFun✝ : Real → Real\nmono'✝ : Monotone toFun✝\nright_continuous'✝ : ∀ (x : Real), ContinuousWithinAt toFun✝ (Set.Ici x) x\ntoFun : Real → Real\nmono' : Monotone toFun\nright_continuous' : ∀ (x : Real), ContinuousWithinAt toFun (Set.Ici x) x\n⊢ Eq (Eq { toFun := toFun✝, mono' := mono'✝, right_continuous' := right_continuous'✝ } { toFun := toFun, mono' := mono', right_continuous' := right_continuous' }) (Eq toFun✝ toFun)","decl":"/-- Bundled monotone right-continuous real functions, used to construct Stieltjes measures. -/\nstructure StieltjesFunction where\n  toFun : ℝ → ℝ\n  mono' : Monotone toFun\n  right_continuous' : ∀ x, ContinuousWithinAt toFun (Ici x) x\n\n"}
{"name":"StieltjesFunction.mk.inj","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"toFun✝ : Real → Real\nmono'✝ : Monotone toFun✝\nright_continuous'✝ : ∀ (x : Real), ContinuousWithinAt toFun✝ (Set.Ici x) x\ntoFun : Real → Real\nmono' : Monotone toFun\nright_continuous' : ∀ (x : Real), ContinuousWithinAt toFun (Set.Ici x) x\nx✝ : Eq { toFun := toFun✝, mono' := mono'✝, right_continuous' := right_continuous'✝ } { toFun := toFun, mono' := mono', right_continuous' := right_continuous' }\n⊢ Eq toFun✝ toFun","decl":"/-- Bundled monotone right-continuous real functions, used to construct Stieltjes measures. -/\nstructure StieltjesFunction where\n  toFun : ℝ → ℝ\n  mono' : Monotone toFun\n  right_continuous' : ∀ x, ContinuousWithinAt toFun (Ici x) x\n\n"}
{"name":"StieltjesFunction.ext","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f g : StieltjesFunction\nh : ∀ (x : Real), Eq (↑f x) (↑g x)\n⊢ Eq f g","decl":"@[ext] lemma ext {f g : StieltjesFunction} (h : ∀ x, f x = g x) : f = g := by\n  exact (StieltjesFunction.mk.injEq ..).mpr (funext h)\n\n"}
{"name":"StieltjesFunction.ext_iff","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f g : StieltjesFunction\n⊢ Iff (Eq f g) (∀ (x : Real), Eq (↑f x) (↑g x))","decl":"@[ext] lemma ext {f g : StieltjesFunction} (h : ∀ x, f x = g x) : f = g := by\n  exact (StieltjesFunction.mk.injEq ..).mpr (funext h)\n\n"}
{"name":"StieltjesFunction.mono","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\n⊢ Monotone ↑f","decl":"theorem mono : Monotone f :=\n  f.mono'\n\n"}
{"name":"StieltjesFunction.right_continuous","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\nx : Real\n⊢ ContinuousWithinAt (↑f) (Set.Ici x) x","decl":"theorem right_continuous (x : ℝ) : ContinuousWithinAt f (Ici x) x :=\n  f.right_continuous' x\n\n"}
{"name":"StieltjesFunction.rightLim_eq","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\nx : Real\n⊢ Eq (Function.rightLim (↑f) x) (↑f x)","decl":"theorem rightLim_eq (f : StieltjesFunction) (x : ℝ) : Function.rightLim f x = f x := by\n  rw [← f.mono.continuousWithinAt_Ioi_iff_rightLim_eq, continuousWithinAt_Ioi_iff_Ici]\n  exact f.right_continuous' x\n\n"}
{"name":"StieltjesFunction.iInf_Ioi_eq","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\nx : Real\n⊢ Eq (iInf fun r => ↑f ↑r) (↑f x)","decl":"theorem iInf_Ioi_eq (f : StieltjesFunction) (x : ℝ) : ⨅ r : Ioi x, f r = f x := by\n  suffices Function.rightLim f x = ⨅ r : Ioi x, f r by rw [← this, f.rightLim_eq]\n  rw [f.mono.rightLim_eq_sInf, sInf_image']\n  rw [← neBot_iff]\n  infer_instance\n\n"}
{"name":"StieltjesFunction.iInf_rat_gt_eq","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\nx : Real\n⊢ Eq (iInf fun r => ↑f ↑↑r) (↑f x)","decl":"theorem iInf_rat_gt_eq (f : StieltjesFunction) (x : ℝ) :\n    ⨅ r : { r' : ℚ // x < r' }, f r = f x := by\n  rw [← iInf_Ioi_eq f x]\n  refine (Real.iInf_Ioi_eq_iInf_rat_gt _ ?_ f.mono).symm\n  refine ⟨f x, fun y => ?_⟩\n  rintro ⟨y, hy_mem, rfl⟩\n  exact f.mono (le_of_lt hy_mem)\n\n"}
{"name":"StieltjesFunction.id_apply","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"a : Real\n⊢ Eq (↑StieltjesFunction.id a) (id a)","decl":"/-- The identity of `ℝ` as a Stieltjes function, used to construct Lebesgue measure. -/\n@[simps]\nprotected def id : StieltjesFunction where\n  toFun := id\n  mono' _ _ := id\n  right_continuous' _ := continuousWithinAt_id\n\n"}
{"name":"StieltjesFunction.id_leftLim","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"x : Real\n⊢ Eq (Function.leftLim (↑StieltjesFunction.id) x) x","decl":"@[simp]\ntheorem id_leftLim (x : ℝ) : leftLim StieltjesFunction.id x = x :=\n  tendsto_nhds_unique (StieltjesFunction.id.mono.tendsto_leftLim x) <|\n    continuousAt_id.tendsto.mono_left nhdsWithin_le_nhds\n\n"}
{"name":"StieltjesFunction.const_apply","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"c x : Real\n⊢ Eq (↑(StieltjesFunction.const c) x) c","decl":"@[simp] lemma const_apply (c x : ℝ) : (StieltjesFunction.const c) x = c := rfl\n\n"}
{"name":"StieltjesFunction.zero_apply","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"x : Real\n⊢ Eq (↑0 x) 0","decl":"@[simp] lemma zero_apply (x : ℝ) : (0 : StieltjesFunction) x = 0 := rfl\n\n"}
{"name":"StieltjesFunction.add_apply","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f g : StieltjesFunction\nx : Real\n⊢ Eq (↑(HAdd.hAdd f g) x) (HAdd.hAdd (↑f x) (↑g x))","decl":"@[simp] lemma add_apply (f g : StieltjesFunction) (x : ℝ) : (f + g) x = f x + g x := rfl\n\n"}
{"name":"Monotone.stieltjesFunction_eq","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : Real → Real\nhf : Monotone f\nx : Real\n⊢ Eq (↑hf.stieltjesFunction x) (Function.rightLim f x)","decl":"theorem _root_.Monotone.stieltjesFunction_eq {f : ℝ → ℝ} (hf : Monotone f) (x : ℝ) :\n    hf.stieltjesFunction x = rightLim f x :=\n  rfl\n\n"}
{"name":"StieltjesFunction.countable_leftLim_ne","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\n⊢ (setOf fun x => Ne (Function.leftLim (↑f) x) (↑f x)).Countable","decl":"theorem countable_leftLim_ne (f : StieltjesFunction) : Set.Countable { x | leftLim f x ≠ f x } := by\n  refine Countable.mono ?_ f.mono.countable_not_continuousAt\n  intro x hx h'x\n  apply hx\n  exact tendsto_nhds_unique (f.mono.tendsto_leftLim x) (h'x.tendsto.mono_left nhdsWithin_le_nhds)\n\n"}
{"name":"StieltjesFunction.length_empty","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\n⊢ Eq (f.length EmptyCollection.emptyCollection) 0","decl":"@[simp]\ntheorem length_empty : f.length ∅ = 0 :=\n  nonpos_iff_eq_zero.1 <| iInf_le_of_le 0 <| iInf_le_of_le 0 <| by simp\n\n"}
{"name":"StieltjesFunction.length_Ioc","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\na b : Real\n⊢ Eq (f.length (Set.Ioc a b)) (ENNReal.ofReal (HSub.hSub (↑f b) (↑f a)))","decl":"@[simp]\ntheorem length_Ioc (a b : ℝ) : f.length (Ioc a b) = ofReal (f b - f a) := by\n  refine\n    le_antisymm (iInf_le_of_le a <| iInf₂_le b Subset.rfl)\n      (le_iInf fun a' => le_iInf fun b' => le_iInf fun h => ENNReal.coe_le_coe.2 ?_)\n  rcases le_or_lt b a with ab | ab\n  · rw [Real.toNNReal_of_nonpos (sub_nonpos.2 (f.mono ab))]\n    apply zero_le\n  cases' (Ioc_subset_Ioc_iff ab).1 h with h₁ h₂\n  exact Real.toNNReal_le_toNNReal (sub_le_sub (f.mono h₁) (f.mono h₂))\n\n"}
{"name":"StieltjesFunction.length_mono","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\ns₁ s₂ : Set Real\nh : HasSubset.Subset s₁ s₂\n⊢ LE.le (f.length s₁) (f.length s₂)","decl":"theorem length_mono {s₁ s₂ : Set ℝ} (h : s₁ ⊆ s₂) : f.length s₁ ≤ f.length s₂ :=\n  iInf_mono fun _ => biInf_mono fun _ => h.trans\n\n"}
{"name":"StieltjesFunction.outer_le_length","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\ns : Set Real\n⊢ LE.le (f.outer s) (f.length s)","decl":"theorem outer_le_length (s : Set ℝ) : f.outer s ≤ f.length s :=\n  OuterMeasure.ofFunction_le _\n\n"}
{"name":"StieltjesFunction.length_subadditive_Icc_Ioo","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\na b : Real\nc d : Nat → Real\nss : HasSubset.Subset (Set.Icc a b) (Set.iUnion fun i => Set.Ioo (c i) (d i))\n⊢ LE.le (ENNReal.ofReal (HSub.hSub (↑f b) (↑f a))) (tsum fun i => ENNReal.ofReal (HSub.hSub (↑f (d i)) (↑f (c i))))","decl":"/-- If a compact interval `[a, b]` is covered by a union of open interval `(c i, d i)`, then\n`f b - f a ≤ ∑ f (d i) - f (c i)`. This is an auxiliary technical statement to prove the same\nstatement for half-open intervals, the point of the current statement being that one can use\ncompactness to reduce it to a finite sum, and argue by induction on the size of the covering set. -/\ntheorem length_subadditive_Icc_Ioo {a b : ℝ} {c d : ℕ → ℝ} (ss : Icc a b ⊆ ⋃ i, Ioo (c i) (d i)) :\n    ofReal (f b - f a) ≤ ∑' i, ofReal (f (d i) - f (c i)) := by\n  suffices\n    ∀ (s : Finset ℕ) (b), Icc a b ⊆ (⋃ i ∈ (s : Set ℕ), Ioo (c i) (d i)) →\n      (ofReal (f b - f a) : ℝ≥0∞) ≤ ∑ i ∈ s, ofReal (f (d i) - f (c i)) by\n    rcases isCompact_Icc.elim_finite_subcover_image\n        (fun (i : ℕ) (_ : i ∈ univ) => @isOpen_Ioo _ _ _ _ (c i) (d i)) (by simpa using ss) with\n      ⟨s, _, hf, hs⟩\n    have e : ⋃ i ∈ (hf.toFinset : Set ℕ), Ioo (c i) (d i) = ⋃ i ∈ s, Ioo (c i) (d i) := by\n      simp only [Set.ext_iff, exists_prop, Finset.set_biUnion_coe, mem_iUnion, forall_const,\n        Finite.mem_toFinset]\n    rw [ENNReal.tsum_eq_iSup_sum]\n    refine le_trans ?_ (le_iSup _ hf.toFinset)\n    exact this hf.toFinset _ (by simpa only [e] )\n  clear ss b\n  refine fun s => Finset.strongInductionOn s fun s IH b cv => ?_\n  rcases le_total b a with ab | ab\n  · rw [ENNReal.ofReal_eq_zero.2 (sub_nonpos.2 (f.mono ab))]\n    exact zero_le _\n  have := cv ⟨ab, le_rfl⟩\n  simp only [Finset.mem_coe, gt_iff_lt, not_lt, mem_iUnion, mem_Ioo, exists_and_left,\n    exists_prop] at this\n  rcases this with ⟨i, cb, is, bd⟩\n  rw [← Finset.insert_erase is] at cv ⊢\n  rw [Finset.coe_insert, biUnion_insert] at cv\n  rw [Finset.sum_insert (Finset.not_mem_erase _ _)]\n  refine le_trans ?_ (add_le_add_left (IH _ (Finset.erase_ssubset is) (c i) ?_) _)\n  · refine le_trans (ENNReal.ofReal_le_ofReal ?_) ENNReal.ofReal_add_le\n    rw [sub_add_sub_cancel]\n    exact sub_le_sub_right (f.mono bd.le) _\n  · rintro x ⟨h₁, h₂⟩\n    exact (cv ⟨h₁, le_trans h₂ (le_of_lt cb)⟩).resolve_left (mt And.left (not_lt_of_le h₂))\n\n"}
{"name":"StieltjesFunction.outer_Ioc","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\na b : Real\n⊢ Eq (f.outer (Set.Ioc a b)) (ENNReal.ofReal (HSub.hSub (↑f b) (↑f a)))","decl":"@[simp]\ntheorem outer_Ioc (a b : ℝ) : f.outer (Ioc a b) = ofReal (f b - f a) := by\n  /- It suffices to show that, if `(a, b]` is covered by sets `s i`, then `f b - f a` is bounded\n    by `∑ f.length (s i) + ε`. The difficulty is that `f.length` is expressed in terms of half-open\n    intervals, while we would like to have a compact interval covered by open intervals to use\n    compactness and finite sums, as provided by `length_subadditive_Icc_Ioo`. The trick is to use\n    the right-continuity of `f`. If `a'` is close enough to `a` on its right, then `[a', b]` is\n    still covered by the sets `s i` and moreover `f b - f a'` is very close to `f b - f a`\n    (up to `ε/2`).\n    Also, by definition one can cover `s i` by a half-closed interval `(p i, q i]` with `f`-length\n    very close to that of `s i` (within a suitably small `ε' i`, say). If one moves `q i` very\n    slightly to the right, then the `f`-length will change very little by right continuity, and we\n    will get an open interval `(p i, q' i)` covering `s i` with `f (q' i) - f (p i)` within `ε' i`\n    of the `f`-length of `s i`. -/\n  refine\n    le_antisymm\n      (by\n        rw [← f.length_Ioc]\n        apply outer_le_length)\n      (le_iInf₂ fun s hs => ENNReal.le_of_forall_pos_le_add fun ε εpos h => ?_)\n  let δ := ε / 2\n  have δpos : 0 < (δ : ℝ≥0∞) := by simpa [δ] using εpos.ne'\n  rcases ENNReal.exists_pos_sum_of_countable δpos.ne' ℕ with ⟨ε', ε'0, hε⟩\n  obtain ⟨a', ha', aa'⟩ : ∃ a', f a' - f a < δ ∧ a < a' := by\n    have A : ContinuousWithinAt (fun r => f r - f a) (Ioi a) a := by\n      refine ContinuousWithinAt.sub ?_ continuousWithinAt_const\n      exact (f.right_continuous a).mono Ioi_subset_Ici_self\n    have B : f a - f a < δ := by rwa [sub_self, NNReal.coe_pos, ← ENNReal.coe_pos]\n    exact (((tendsto_order.1 A).2 _ B).and self_mem_nhdsWithin).exists\n  have : ∀ i, ∃ p : ℝ × ℝ, s i ⊆ Ioo p.1 p.2 ∧\n      (ofReal (f p.2 - f p.1) : ℝ≥0∞) < f.length (s i) + ε' i := by\n    intro i\n    have hl :=\n      ENNReal.lt_add_right ((ENNReal.le_tsum i).trans_lt h).ne (ENNReal.coe_ne_zero.2 (ε'0 i).ne')\n    conv at hl =>\n      lhs\n      rw [length]\n    simp only [iInf_lt_iff, exists_prop] at hl\n    rcases hl with ⟨p, q', spq, hq'⟩\n    have : ContinuousWithinAt (fun r => ofReal (f r - f p)) (Ioi q') q' := by\n      apply ENNReal.continuous_ofReal.continuousAt.comp_continuousWithinAt\n      refine ContinuousWithinAt.sub ?_ continuousWithinAt_const\n      exact (f.right_continuous q').mono Ioi_subset_Ici_self\n    rcases (((tendsto_order.1 this).2 _ hq').and self_mem_nhdsWithin).exists with ⟨q, hq, q'q⟩\n    exact ⟨⟨p, q⟩, spq.trans (Ioc_subset_Ioo_right q'q), hq⟩\n  choose g hg using this\n  have I_subset : Icc a' b ⊆ ⋃ i, Ioo (g i).1 (g i).2 :=\n    calc\n      Icc a' b ⊆ Ioc a b := fun x hx => ⟨aa'.trans_le hx.1, hx.2⟩\n      _ ⊆ ⋃ i, s i := hs\n      _ ⊆ ⋃ i, Ioo (g i).1 (g i).2 := iUnion_mono fun i => (hg i).1\n  calc\n    ofReal (f b - f a) = ofReal (f b - f a' + (f a' - f a)) := by rw [sub_add_sub_cancel]\n    _ ≤ ofReal (f b - f a') + ofReal (f a' - f a) := ENNReal.ofReal_add_le\n    _ ≤ ∑' i, ofReal (f (g i).2 - f (g i).1) + ofReal δ :=\n      (add_le_add (f.length_subadditive_Icc_Ioo I_subset) (ENNReal.ofReal_le_ofReal ha'.le))\n    _ ≤ ∑' i, (f.length (s i) + ε' i) + δ :=\n      (add_le_add (ENNReal.tsum_le_tsum fun i => (hg i).2.le)\n        (by simp only [ENNReal.ofReal_coe_nnreal, le_rfl]))\n    _ = ∑' i, f.length (s i) + ∑' i, (ε' i : ℝ≥0∞) + δ := by rw [ENNReal.tsum_add]\n    _ ≤ ∑' i, f.length (s i) + δ + δ := add_le_add (add_le_add le_rfl hε.le) le_rfl\n    _ = ∑' i : ℕ, f.length (s i) + ε := by simp [δ, add_assoc, ENNReal.add_halves]\n\n"}
{"name":"StieltjesFunction.measurableSet_Ioi","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\nc : Real\n⊢ MeasurableSet (Set.Ioi c)","decl":"theorem measurableSet_Ioi {c : ℝ} : MeasurableSet[f.outer.caratheodory] (Ioi c) := by\n  refine OuterMeasure.ofFunction_caratheodory fun t => ?_\n  refine le_iInf fun a => le_iInf fun b => le_iInf fun h => ?_\n  refine\n    le_trans\n      (add_le_add (f.length_mono <| inter_subset_inter_left _ h)\n        (f.length_mono <| diff_subset_diff_left h)) ?_\n  rcases le_total a c with hac | hac <;> rcases le_total b c with hbc | hbc\n  · simp only [Ioc_inter_Ioi, f.length_Ioc, hac, hbc, le_refl, Ioc_eq_empty,\n      max_eq_right, min_eq_left, Ioc_diff_Ioi, f.length_empty, zero_add, not_lt]\n  · simp only [hac, hbc, Ioc_inter_Ioi, Ioc_diff_Ioi, f.length_Ioc, min_eq_right,\n      ← ENNReal.ofReal_add, f.mono hac, f.mono hbc, sub_nonneg,\n      sub_add_sub_cancel, le_refl,\n      max_eq_right]\n  · simp only [hbc, le_refl, Ioc_eq_empty, Ioc_inter_Ioi, min_eq_left, Ioc_diff_Ioi, f.length_empty,\n      zero_add, or_true, le_sup_iff, f.length_Ioc, not_lt]\n  · simp only [hac, hbc, Ioc_inter_Ioi, Ioc_diff_Ioi, f.length_Ioc, min_eq_right,\n      le_refl, Ioc_eq_empty, add_zero, max_eq_left, f.length_empty, not_lt]\n\n"}
{"name":"StieltjesFunction.outer_trim","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\n⊢ Eq f.outer.trim f.outer","decl":"theorem outer_trim : f.outer.trim = f.outer := by\n  refine le_antisymm (fun s => ?_) (OuterMeasure.le_trim _)\n  rw [OuterMeasure.trim_eq_iInf]\n  refine le_iInf fun t => le_iInf fun ht => ENNReal.le_of_forall_pos_le_add fun ε ε0 h => ?_\n  rcases ENNReal.exists_pos_sum_of_countable (ENNReal.coe_pos.2 ε0).ne' ℕ with ⟨ε', ε'0, hε⟩\n  refine le_trans ?_ (add_le_add_left (le_of_lt hε) _)\n  rw [← ENNReal.tsum_add]\n  choose g hg using\n    show ∀ i, ∃ s, t i ⊆ s ∧ MeasurableSet s ∧ f.outer s ≤ f.length (t i) + ofReal (ε' i) by\n      intro i\n      have hl :=\n        ENNReal.lt_add_right ((ENNReal.le_tsum i).trans_lt h).ne (ENNReal.coe_pos.2 (ε'0 i)).ne'\n      conv at hl =>\n        lhs\n        rw [length]\n      simp only [iInf_lt_iff] at hl\n      rcases hl with ⟨a, b, h₁, h₂⟩\n      rw [← f.outer_Ioc] at h₂\n      exact ⟨_, h₁, measurableSet_Ioc, le_of_lt <| by simpa using h₂⟩\n  simp only [ofReal_coe_nnreal] at hg\n  apply iInf_le_of_le (iUnion g) _\n  apply iInf_le_of_le (ht.trans <| iUnion_mono fun i => (hg i).1) _\n  apply iInf_le_of_le (MeasurableSet.iUnion fun i => (hg i).2.1) _\n  exact le_trans (measure_iUnion_le _) (ENNReal.tsum_le_tsum fun i => (hg i).2.2)\n\n"}
{"name":"StieltjesFunction.borel_le_measurable","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\n⊢ LE.le (borel Real) f.outer.caratheodory","decl":"theorem borel_le_measurable : borel ℝ ≤ f.outer.caratheodory := by\n  rw [borel_eq_generateFrom_Ioi]\n  refine MeasurableSpace.generateFrom_le ?_\n  simp +contextual [f.measurableSet_Ioi]\n\n"}
{"name":"StieltjesFunction.measure_def","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\n⊢ Eq f.measure { toOuterMeasure := f.outer, m_iUnion := ⋯, trim_le := ⋯ }","decl":"/-- The measure associated to a Stieltjes function, giving mass `f b - f a` to the\ninterval `(a, b]`. -/\nprotected irreducible_def measure : Measure ℝ where\n  toOuterMeasure := f.outer\n  m_iUnion _s hs := f.outer.iUnion_eq_of_caratheodory fun i => f.borel_le_measurable _ (hs i)\n  trim_le := f.outer_trim.le\n\n"}
{"name":"StieltjesFunction.measure_Ioc","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\na b : Real\n⊢ Eq (f.measure (Set.Ioc a b)) (ENNReal.ofReal (HSub.hSub (↑f b) (↑f a)))","decl":"@[simp]\ntheorem measure_Ioc (a b : ℝ) : f.measure (Ioc a b) = ofReal (f b - f a) := by\n  rw [StieltjesFunction.measure]\n  exact f.outer_Ioc a b\n\n"}
{"name":"StieltjesFunction.measure_singleton","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\na : Real\n⊢ Eq (f.measure (Singleton.singleton a)) (ENNReal.ofReal (HSub.hSub (↑f a) (Function.leftLim (↑f) a)))","decl":"@[simp]\ntheorem measure_singleton (a : ℝ) : f.measure {a} = ofReal (f a - leftLim f a) := by\n  obtain ⟨u, u_mono, u_lt_a, u_lim⟩ :\n    ∃ u : ℕ → ℝ, StrictMono u ∧ (∀ n : ℕ, u n < a) ∧ Tendsto u atTop (𝓝 a) :=\n    exists_seq_strictMono_tendsto a\n  have A : {a} = ⋂ n, Ioc (u n) a := by\n    refine Subset.antisymm (fun x hx => by simp [mem_singleton_iff.1 hx, u_lt_a]) fun x hx => ?_\n    simp? at hx says simp only [mem_iInter, mem_Ioc] at hx\n    have : a ≤ x := le_of_tendsto' u_lim fun n => (hx n).1.le\n    simp [le_antisymm this (hx 0).2]\n  have L1 : Tendsto (fun n => f.measure (Ioc (u n) a)) atTop (𝓝 (f.measure {a})) := by\n    rw [A]\n    refine tendsto_measure_iInter_atTop (fun n => nullMeasurableSet_Ioc)\n      (fun m n hmn => ?_) ?_\n    · exact Ioc_subset_Ioc_left (u_mono.monotone hmn)\n    · exact ⟨0, by simpa only [measure_Ioc] using ENNReal.ofReal_ne_top⟩\n  have L2 :\n      Tendsto (fun n => f.measure (Ioc (u n) a)) atTop (𝓝 (ofReal (f a - leftLim f a))) := by\n    simp only [measure_Ioc]\n    have : Tendsto (fun n => f (u n)) atTop (𝓝 (leftLim f a)) := by\n      apply (f.mono.tendsto_leftLim a).comp\n      exact\n        tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within _ u_lim\n          (Eventually.of_forall fun n => u_lt_a n)\n    exact ENNReal.continuous_ofReal.continuousAt.tendsto.comp (tendsto_const_nhds.sub this)\n  exact tendsto_nhds_unique L1 L2\n\n"}
{"name":"StieltjesFunction.measure_Icc","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\na b : Real\n⊢ Eq (f.measure (Set.Icc a b)) (ENNReal.ofReal (HSub.hSub (↑f b) (Function.leftLim (↑f) a)))","decl":"@[simp]\ntheorem measure_Icc (a b : ℝ) : f.measure (Icc a b) = ofReal (f b - leftLim f a) := by\n  rcases le_or_lt a b with (hab | hab)\n  · have A : Disjoint {a} (Ioc a b) := by simp\n    simp [← Icc_union_Ioc_eq_Icc le_rfl hab, -singleton_union, ← ENNReal.ofReal_add,\n      f.mono.leftLim_le, measure_union A measurableSet_Ioc, f.mono hab]\n  · simp only [hab, measure_empty, Icc_eq_empty, not_le]\n    symm\n    simp [ENNReal.ofReal_eq_zero, f.mono.le_leftLim hab]\n\n"}
{"name":"StieltjesFunction.measure_Ioo","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\na b : Real\n⊢ Eq (f.measure (Set.Ioo a b)) (ENNReal.ofReal (HSub.hSub (Function.leftLim (↑f) b) (↑f a)))","decl":"@[simp]\ntheorem measure_Ioo {a b : ℝ} : f.measure (Ioo a b) = ofReal (leftLim f b - f a) := by\n  rcases le_or_lt b a with (hab | hab)\n  · simp only [hab, measure_empty, Ioo_eq_empty, not_lt]\n    symm\n    simp [ENNReal.ofReal_eq_zero, f.mono.leftLim_le hab]\n  · have A : Disjoint (Ioo a b) {b} := by simp\n    have D : f b - f a = f b - leftLim f b + (leftLim f b - f a) := by abel\n    have := f.measure_Ioc a b\n    simp only [← Ioo_union_Icc_eq_Ioc hab le_rfl, measure_singleton,\n      measure_union A (measurableSet_singleton b), Icc_self] at this\n    rw [D, ENNReal.ofReal_add, add_comm] at this\n    · simpa only [ENNReal.add_right_inj ENNReal.ofReal_ne_top]\n    · simp only [f.mono.leftLim_le le_rfl, sub_nonneg]\n    · simp only [f.mono.le_leftLim hab, sub_nonneg]\n\n"}
{"name":"StieltjesFunction.measure_Ico","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\na b : Real\n⊢ Eq (f.measure (Set.Ico a b)) (ENNReal.ofReal (HSub.hSub (Function.leftLim (↑f) b) (Function.leftLim (↑f) a)))","decl":"@[simp]\ntheorem measure_Ico (a b : ℝ) : f.measure (Ico a b) = ofReal (leftLim f b - leftLim f a) := by\n  rcases le_or_lt b a with (hab | hab)\n  · simp only [hab, measure_empty, Ico_eq_empty, not_lt]\n    symm\n    simp [ENNReal.ofReal_eq_zero, f.mono.leftLim hab]\n  · have A : Disjoint {a} (Ioo a b) := by simp\n    simp [← Icc_union_Ioo_eq_Ico le_rfl hab, -singleton_union, hab.ne, f.mono.leftLim_le,\n      measure_union A measurableSet_Ioo, f.mono.le_leftLim hab, ← ENNReal.ofReal_add]\n\n"}
{"name":"StieltjesFunction.measure_Iic","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\nl : Real\nhf : Filter.Tendsto (↑f) Filter.atBot (nhds l)\nx : Real\n⊢ Eq (f.measure (Set.Iic x)) (ENNReal.ofReal (HSub.hSub (↑f x) l))","decl":"theorem measure_Iic {l : ℝ} (hf : Tendsto f atBot (𝓝 l)) (x : ℝ) :\n    f.measure (Iic x) = ofReal (f x - l) := by\n  refine tendsto_nhds_unique (tendsto_measure_Ioc_atBot _ _) ?_\n  simp_rw [measure_Ioc]\n  exact ENNReal.tendsto_ofReal (Tendsto.const_sub _ hf)\n\n"}
{"name":"StieltjesFunction.measure_Iio","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\nl : Real\nhf : Filter.Tendsto (↑f) Filter.atBot (nhds l)\nx : Real\n⊢ Eq (f.measure (Set.Iio x)) (ENNReal.ofReal (HSub.hSub (Function.leftLim (↑f) x) l))","decl":"lemma measure_Iio {l : ℝ} (hf : Tendsto f atBot (𝓝 l)) (x : ℝ) :\n    f.measure (Iio x) = ofReal (leftLim f x - l) := by\n  rw [← Iic_diff_right, measure_diff _ (nullMeasurableSet_singleton x), measure_singleton,\n    f.measure_Iic hf, ← ofReal_sub _ (sub_nonneg.mpr <| Monotone.leftLim_le f.mono' le_rfl)]\n    <;> simp\n\n"}
{"name":"StieltjesFunction.measure_Ici","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\nl : Real\nhf : Filter.Tendsto (↑f) Filter.atTop (nhds l)\nx : Real\n⊢ Eq (f.measure (Set.Ici x)) (ENNReal.ofReal (HSub.hSub l (Function.leftLim (↑f) x)))","decl":"theorem measure_Ici {l : ℝ} (hf : Tendsto f atTop (𝓝 l)) (x : ℝ) :\n    f.measure (Ici x) = ofReal (l - leftLim f x) := by\n  refine tendsto_nhds_unique (tendsto_measure_Ico_atTop _ _) ?_\n  simp_rw [measure_Ico]\n  refine ENNReal.tendsto_ofReal (Tendsto.sub_const ?_ _)\n  have h_le1 : ∀ x, f (x - 1) ≤ leftLim f x := fun x => Monotone.le_leftLim f.mono (sub_one_lt x)\n  have h_le2 : ∀ x, leftLim f x ≤ f x := fun x => Monotone.leftLim_le f.mono le_rfl\n  refine tendsto_of_tendsto_of_tendsto_of_le_of_le (hf.comp ?_) hf h_le1 h_le2\n  rw [tendsto_atTop_atTop]\n  exact fun y => ⟨y + 1, fun z hyz => by rwa [le_sub_iff_add_le]⟩\n\n"}
{"name":"StieltjesFunction.measure_Ioi","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\nl : Real\nhf : Filter.Tendsto (↑f) Filter.atTop (nhds l)\nx : Real\n⊢ Eq (f.measure (Set.Ioi x)) (ENNReal.ofReal (HSub.hSub l (↑f x)))","decl":"lemma measure_Ioi {l : ℝ} (hf : Tendsto f atTop (𝓝 l)) (x : ℝ) :\n    f.measure (Ioi x) = ofReal (l - f x) := by\n  rw [← Ici_diff_left, measure_diff _ (nullMeasurableSet_singleton x), measure_singleton,\n    f.measure_Ici hf, ← ofReal_sub _ (sub_nonneg.mpr <| Monotone.leftLim_le f.mono' le_rfl)]\n    <;> simp\n\n"}
{"name":"StieltjesFunction.measure_Ioi_of_tendsto_atTop_atTop","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\nhf : Filter.Tendsto (↑f) Filter.atTop Filter.atTop\nx : Real\n⊢ Eq (f.measure (Set.Ioi x)) Top.top","decl":"lemma measure_Ioi_of_tendsto_atTop_atTop (hf : Tendsto f atTop atTop) (x : ℝ) :\n    f.measure (Ioi x) = ∞ := by\n  refine ENNReal.eq_top_of_forall_nnreal_le fun r ↦ ?_\n  obtain ⟨N, hN⟩ := eventually_atTop.mp (tendsto_atTop.mp hf (r + f x))\n  exact (f.measure_Ioc x (max x N) ▸ ENNReal.coe_nnreal_eq r ▸ (ENNReal.ofReal_le_ofReal <|\n    le_tsub_of_add_le_right <| hN _ (le_max_right x N))).trans (measure_mono Ioc_subset_Ioi_self)\n\n"}
{"name":"StieltjesFunction.measure_Ici_of_tendsto_atTop_atTop","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\nhf : Filter.Tendsto (↑f) Filter.atTop Filter.atTop\nx : Real\n⊢ Eq (f.measure (Set.Ici x)) Top.top","decl":"lemma measure_Ici_of_tendsto_atTop_atTop (hf : Tendsto f atTop atTop) (x : ℝ) :\n    f.measure (Ici x) = ∞ := by\n  rw [← top_le_iff, ← f.measure_Ioi_of_tendsto_atTop_atTop hf x]\n  exact measure_mono Ioi_subset_Ici_self\n\n"}
{"name":"StieltjesFunction.measure_Iic_of_tendsto_atBot_atBot","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\nhf : Filter.Tendsto (↑f) Filter.atBot Filter.atBot\nx : Real\n⊢ Eq (f.measure (Set.Iic x)) Top.top","decl":"lemma measure_Iic_of_tendsto_atBot_atBot (hf : Tendsto f atBot atBot) (x : ℝ) :\n    f.measure (Iic x) = ∞ := by\n  refine ENNReal.eq_top_of_forall_nnreal_le fun r ↦ ?_\n  obtain ⟨N, hN⟩ := eventually_atBot.mp (tendsto_atBot.mp hf (f x - r))\n  exact (f.measure_Ioc (min x N) x ▸ ENNReal.coe_nnreal_eq r ▸ (ENNReal.ofReal_le_ofReal <|\n    le_sub_comm.mp <| hN _ (min_le_right x N))).trans (measure_mono Ioc_subset_Iic_self)\n\n"}
{"name":"StieltjesFunction.measure_Iio_of_tendsto_atBot_atBot","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\nhf : Filter.Tendsto (↑f) Filter.atBot Filter.atBot\nx : Real\n⊢ Eq (f.measure (Set.Iio x)) Top.top","decl":"lemma measure_Iio_of_tendsto_atBot_atBot (hf : Tendsto f atBot atBot) (x : ℝ) :\n    f.measure (Iio x) = ∞ := by\n  rw [← top_le_iff, ← f.measure_Iic_of_tendsto_atBot_atBot hf (x - 1)]\n  exact measure_mono <| Set.Iic_subset_Iio.mpr <| sub_one_lt x\n\n"}
{"name":"StieltjesFunction.measure_univ","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\nl u : Real\nhfl : Filter.Tendsto (↑f) Filter.atBot (nhds l)\nhfu : Filter.Tendsto (↑f) Filter.atTop (nhds u)\n⊢ Eq (f.measure Set.univ) (ENNReal.ofReal (HSub.hSub u l))","decl":"theorem measure_univ {l u : ℝ} (hfl : Tendsto f atBot (𝓝 l)) (hfu : Tendsto f atTop (𝓝 u)) :\n    f.measure univ = ofReal (u - l) := by\n  refine tendsto_nhds_unique (tendsto_measure_Iic_atTop _) ?_\n  simp_rw [measure_Iic f hfl]\n  exact ENNReal.tendsto_ofReal (Tendsto.sub_const hfu _)\n\n"}
{"name":"StieltjesFunction.measure_univ_of_tendsto_atTop_atTop","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\nhf : Filter.Tendsto (↑f) Filter.atTop Filter.atTop\n⊢ Eq (f.measure Set.univ) Top.top","decl":"lemma measure_univ_of_tendsto_atTop_atTop (hf : Tendsto f atTop atTop) :\n    f.measure univ = ∞ := by\n  rw [← top_le_iff, ← f.measure_Ioi_of_tendsto_atTop_atTop hf 0]\n  exact measure_mono (subset_univ _)\n\n"}
{"name":"StieltjesFunction.measure_univ_of_tendsto_atBot_atBot","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\nhf : Filter.Tendsto (↑f) Filter.atBot Filter.atBot\n⊢ Eq (f.measure Set.univ) Top.top","decl":"lemma measure_univ_of_tendsto_atBot_atBot (hf : Tendsto f atBot atBot) :\n    f.measure univ = ∞ := by\n  rw [← top_le_iff, ← f.measure_Iio_of_tendsto_atBot_atBot hf 0]\n  exact measure_mono (subset_univ _)\n\n"}
{"name":"StieltjesFunction.isFiniteMeasure","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\nl u : Real\nhfl : Filter.Tendsto (↑f) Filter.atBot (nhds l)\nhfu : Filter.Tendsto (↑f) Filter.atTop (nhds u)\n⊢ MeasureTheory.IsFiniteMeasure f.measure","decl":"lemma isFiniteMeasure {l u : ℝ} (hfl : Tendsto f atBot (𝓝 l)) (hfu : Tendsto f atTop (𝓝 u)) :\n    IsFiniteMeasure f.measure := ⟨by simp [f.measure_univ hfl hfu]⟩\n\n"}
{"name":"StieltjesFunction.isProbabilityMeasure","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\nhf_bot : Filter.Tendsto (↑f) Filter.atBot (nhds 0)\nhf_top : Filter.Tendsto (↑f) Filter.atTop (nhds 1)\n⊢ MeasureTheory.IsProbabilityMeasure f.measure","decl":"lemma isProbabilityMeasure (hf_bot : Tendsto f atBot (𝓝 0)) (hf_top : Tendsto f atTop (𝓝 1)) :\n    IsProbabilityMeasure f.measure := ⟨by simp [f.measure_univ hf_bot hf_top]⟩\n\n"}
{"name":"StieltjesFunction.instIsLocallyFiniteMeasure","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f : StieltjesFunction\n⊢ MeasureTheory.IsLocallyFiniteMeasure f.measure","decl":"instance instIsLocallyFiniteMeasure : IsLocallyFiniteMeasure f.measure :=\n  ⟨fun x => ⟨Ioo (x - 1) (x + 1), Ioo_mem_nhds (by linarith) (by linarith), by simp⟩⟩\n\n"}
{"name":"StieltjesFunction.eq_of_measure_of_tendsto_atBot","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f g : StieltjesFunction\nl : Real\nhfg : Eq f.measure g.measure\nhfl : Filter.Tendsto (↑f) Filter.atBot (nhds l)\nhgl : Filter.Tendsto (↑g) Filter.atBot (nhds l)\n⊢ Eq f g","decl":"lemma eq_of_measure_of_tendsto_atBot (g : StieltjesFunction) {l : ℝ}\n    (hfg : f.measure = g.measure) (hfl : Tendsto f atBot (𝓝 l)) (hgl : Tendsto g atBot (𝓝 l)) :\n    f = g := by\n  ext x\n  have hf := measure_Iic f hfl x\n  rw [hfg, measure_Iic g hgl x, ENNReal.ofReal_eq_ofReal_iff, eq_comm] at hf\n  · simpa using hf\n  · rw [sub_nonneg]\n    exact Monotone.le_of_tendsto g.mono hgl x\n  · rw [sub_nonneg]\n    exact Monotone.le_of_tendsto f.mono hfl x\n\n"}
{"name":"StieltjesFunction.eq_of_measure_of_eq","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f g : StieltjesFunction\ny : Real\nhfg : Eq f.measure g.measure\nhy : Eq (↑f y) (↑g y)\n⊢ Eq f g","decl":"lemma eq_of_measure_of_eq (g : StieltjesFunction) {y : ℝ}\n    (hfg : f.measure = g.measure) (hy : f y = g y) :\n    f = g := by\n  ext x\n  cases le_total x y with\n  | inl hxy =>\n    have hf := measure_Ioc f x y\n    rw [hfg, measure_Ioc g x y, ENNReal.ofReal_eq_ofReal_iff, eq_comm, hy] at hf\n    · simpa using hf\n    · rw [sub_nonneg]\n      exact g.mono hxy\n    · rw [sub_nonneg]\n      exact f.mono hxy\n  | inr hxy =>\n    have hf := measure_Ioc f y x\n    rw [hfg, measure_Ioc g y x, ENNReal.ofReal_eq_ofReal_iff, eq_comm, hy] at hf\n    · simpa using hf\n    · rw [sub_nonneg]\n      exact g.mono hxy\n    · rw [sub_nonneg]\n      exact f.mono hxy\n\n"}
{"name":"StieltjesFunction.measure_zero","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"⊢ Eq (StieltjesFunction.measure 0) 0","decl":"@[simp]\nlemma measure_zero : StieltjesFunction.measure 0 = 0 :=\n  Measure.ext_of_Ioc _ _ (by simp)\n\n"}
{"name":"StieltjesFunction.measure_const","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"c : Real\n⊢ Eq (StieltjesFunction.const c).measure 0","decl":"@[simp]\nlemma measure_const (c : ℝ) : (StieltjesFunction.const c).measure = 0 :=\n  Measure.ext_of_Ioc _ _ (by simp)\n\n"}
{"name":"StieltjesFunction.measure_add","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"f g : StieltjesFunction\n⊢ Eq (HAdd.hAdd f g).measure (HAdd.hAdd f.measure g.measure)","decl":"@[simp]\nlemma measure_add (f g : StieltjesFunction) : (f + g).measure = f.measure + g.measure := by\n  refine Measure.ext_of_Ioc _ _ (fun a b h ↦ ?_)\n  simp only [measure_Ioc, add_apply, Measure.coe_add, Pi.add_apply]\n  rw [← ENNReal.ofReal_add (sub_nonneg_of_le (f.mono h.le)) (sub_nonneg_of_le (g.mono h.le))]\n  ring_nf\n\n"}
{"name":"StieltjesFunction.measure_smul","module":"Mathlib.MeasureTheory.Measure.Stieltjes","initialProofState":"c : NNReal\nf : StieltjesFunction\n⊢ Eq (HSMul.hSMul c f).measure (HSMul.hSMul c f.measure)","decl":"@[simp]\nlemma measure_smul (c : ℝ≥0) (f : StieltjesFunction) : (c • f).measure = c • f.measure := by\n  refine Measure.ext_of_Ioc _ _ (fun a b _ ↦ ?_)\n  simp only [measure_Ioc, Measure.smul_apply]\n  change ofReal (c * f b - c * f a) = c • ofReal (f b - f a)\n  rw [← _root_.mul_sub, ENNReal.ofReal_mul zero_le_coe, ofReal_coe_nnreal, ← smul_eq_mul]\n  rfl\n\n"}
