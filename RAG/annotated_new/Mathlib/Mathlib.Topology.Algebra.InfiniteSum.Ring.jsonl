{"name":"HasSum.mul_left","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝² : NonUnitalNonAssocSemiring α\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSemiring α\nf : ι → α\na₁ a₂ : α\nh : HasSum f a₁\n⊢ HasSum (fun i => HMul.hMul a₂ (f i)) (HMul.hMul a₂ a₁)","decl":"theorem HasSum.mul_left (a₂) (h : HasSum f a₁) : HasSum (fun i ↦ a₂ * f i) (a₂ * a₁) := by\n  simpa only using h.map (AddMonoidHom.mulLeft a₂) (continuous_const.mul continuous_id)\n\n"}
{"name":"HasSum.mul_right","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝² : NonUnitalNonAssocSemiring α\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSemiring α\nf : ι → α\na₁ a₂ : α\nhf : HasSum f a₁\n⊢ HasSum (fun i => HMul.hMul (f i) a₂) (HMul.hMul a₁ a₂)","decl":"theorem HasSum.mul_right (a₂) (hf : HasSum f a₁) : HasSum (fun i ↦ f i * a₂) (a₁ * a₂) := by\n  simpa only using hf.map (AddMonoidHom.mulRight a₂) (continuous_id.mul continuous_const)\n\n"}
{"name":"Summable.mul_left","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝² : NonUnitalNonAssocSemiring α\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSemiring α\nf : ι → α\na : α\nhf : Summable f\n⊢ Summable fun i => HMul.hMul a (f i)","decl":"theorem Summable.mul_left (a) (hf : Summable f) : Summable fun i ↦ a * f i :=\n  (hf.hasSum.mul_left _).summable\n\n"}
{"name":"Summable.mul_right","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝² : NonUnitalNonAssocSemiring α\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSemiring α\nf : ι → α\na : α\nhf : Summable f\n⊢ Summable fun i => HMul.hMul (f i) a","decl":"theorem Summable.mul_right (a) (hf : Summable f) : Summable fun i ↦ f i * a :=\n  (hf.hasSum.mul_right _).summable\n\n"}
{"name":"Summable.tsum_mul_left","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝³ : NonUnitalNonAssocSemiring α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSemiring α\nf : ι → α\ninst✝ : T2Space α\na : α\nhf : Summable f\n⊢ Eq (tsum fun i => HMul.hMul a (f i)) (HMul.hMul a (tsum fun i => f i))","decl":"theorem Summable.tsum_mul_left (a) (hf : Summable f) : ∑' i, a * f i = a * ∑' i, f i :=\n  (hf.hasSum.mul_left _).tsum_eq\n\n"}
{"name":"Summable.tsum_mul_right","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝³ : NonUnitalNonAssocSemiring α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSemiring α\nf : ι → α\ninst✝ : T2Space α\na : α\nhf : Summable f\n⊢ Eq (tsum fun i => HMul.hMul (f i) a) (HMul.hMul (tsum fun i => f i) a)","decl":"theorem Summable.tsum_mul_right (a) (hf : Summable f) : ∑' i, f i * a = (∑' i, f i) * a :=\n  (hf.hasSum.mul_right _).tsum_eq\n\n"}
{"name":"Commute.tsum_right","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝³ : NonUnitalNonAssocSemiring α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSemiring α\nf : ι → α\ninst✝ : T2Space α\na : α\nh : ∀ (i : ι), Commute a (f i)\n⊢ Commute a (tsum fun i => f i)","decl":"theorem Commute.tsum_right (a) (h : ∀ i, Commute a (f i)) : Commute a (∑' i, f i) := by\n  classical\n  by_cases hf : Summable f\n  · exact (hf.tsum_mul_left a).symm.trans ((congr_arg _ <| funext h).trans (hf.tsum_mul_right a))\n  · exact (tsum_eq_zero_of_not_summable hf).symm ▸ Commute.zero_right _\n\n"}
{"name":"Commute.tsum_left","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝³ : NonUnitalNonAssocSemiring α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSemiring α\nf : ι → α\ninst✝ : T2Space α\na : α\nh : ∀ (i : ι), Commute (f i) a\n⊢ Commute (tsum fun i => f i) a","decl":"theorem Commute.tsum_left (a) (h : ∀ i, Commute (f i) a) : Commute (∑' i, f i) a :=\n  (Commute.tsum_right _ fun i ↦ (h i).symm).symm\n\n"}
{"name":"HasSum.div_const","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝² : DivisionSemiring α\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSemiring α\nf : ι → α\na : α\nh : HasSum f a\nb : α\n⊢ HasSum (fun i => HDiv.hDiv (f i) b) (HDiv.hDiv a b)","decl":"theorem HasSum.div_const (h : HasSum f a) (b : α) : HasSum (fun i ↦ f i / b) (a / b) := by\n  simp only [div_eq_mul_inv, h.mul_right b⁻¹]\n\n"}
{"name":"Summable.div_const","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝² : DivisionSemiring α\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSemiring α\nf : ι → α\nh : Summable f\nb : α\n⊢ Summable fun i => HDiv.hDiv (f i) b","decl":"theorem Summable.div_const (h : Summable f) (b : α) : Summable fun i ↦ f i / b :=\n  (h.hasSum.div_const _).summable\n\n"}
{"name":"hasSum_mul_left_iff","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝² : DivisionSemiring α\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSemiring α\nf : ι → α\na₁ a₂ : α\nh : Ne a₂ 0\n⊢ Iff (HasSum (fun i => HMul.hMul a₂ (f i)) (HMul.hMul a₂ a₁)) (HasSum f a₁)","decl":"theorem hasSum_mul_left_iff (h : a₂ ≠ 0) : HasSum (fun i ↦ a₂ * f i) (a₂ * a₁) ↔ HasSum f a₁ :=\n  ⟨fun H ↦ by simpa only [inv_mul_cancel_left₀ h] using H.mul_left a₂⁻¹, HasSum.mul_left _⟩\n\n"}
{"name":"hasSum_mul_right_iff","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝² : DivisionSemiring α\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSemiring α\nf : ι → α\na₁ a₂ : α\nh : Ne a₂ 0\n⊢ Iff (HasSum (fun i => HMul.hMul (f i) a₂) (HMul.hMul a₁ a₂)) (HasSum f a₁)","decl":"theorem hasSum_mul_right_iff (h : a₂ ≠ 0) : HasSum (fun i ↦ f i * a₂) (a₁ * a₂) ↔ HasSum f a₁ :=\n  ⟨fun H ↦ by simpa only [mul_inv_cancel_right₀ h] using H.mul_right a₂⁻¹, HasSum.mul_right _⟩\n\n"}
{"name":"hasSum_div_const_iff","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝² : DivisionSemiring α\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSemiring α\nf : ι → α\na₁ a₂ : α\nh : Ne a₂ 0\n⊢ Iff (HasSum (fun i => HDiv.hDiv (f i) a₂) (HDiv.hDiv a₁ a₂)) (HasSum f a₁)","decl":"theorem hasSum_div_const_iff (h : a₂ ≠ 0) : HasSum (fun i ↦ f i / a₂) (a₁ / a₂) ↔ HasSum f a₁ := by\n  simpa only [div_eq_mul_inv] using hasSum_mul_right_iff (inv_ne_zero h)\n\n"}
{"name":"summable_mul_left_iff","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝² : DivisionSemiring α\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSemiring α\nf : ι → α\na : α\nh : Ne a 0\n⊢ Iff (Summable fun i => HMul.hMul a (f i)) (Summable f)","decl":"theorem summable_mul_left_iff (h : a ≠ 0) : (Summable fun i ↦ a * f i) ↔ Summable f :=\n  ⟨fun H ↦ by simpa only [inv_mul_cancel_left₀ h] using H.mul_left a⁻¹, fun H ↦ H.mul_left _⟩\n\n"}
{"name":"summable_mul_right_iff","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝² : DivisionSemiring α\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSemiring α\nf : ι → α\na : α\nh : Ne a 0\n⊢ Iff (Summable fun i => HMul.hMul (f i) a) (Summable f)","decl":"theorem summable_mul_right_iff (h : a ≠ 0) : (Summable fun i ↦ f i * a) ↔ Summable f :=\n  ⟨fun H ↦ by simpa only [mul_inv_cancel_right₀ h] using H.mul_right a⁻¹, fun H ↦ H.mul_right _⟩\n\n"}
{"name":"summable_div_const_iff","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝² : DivisionSemiring α\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSemiring α\nf : ι → α\na : α\nh : Ne a 0\n⊢ Iff (Summable fun i => HDiv.hDiv (f i) a) (Summable f)","decl":"theorem summable_div_const_iff (h : a ≠ 0) : (Summable fun i ↦ f i / a) ↔ Summable f := by\n  simpa only [div_eq_mul_inv] using summable_mul_right_iff (inv_ne_zero h)\n\n"}
{"name":"tsum_mul_left","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝³ : DivisionSemiring α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSemiring α\nf : ι → α\na : α\ninst✝ : T2Space α\n⊢ Eq (tsum fun x => HMul.hMul a (f x)) (HMul.hMul a (tsum fun x => f x))","decl":"theorem tsum_mul_left [T2Space α] : ∑' x, a * f x = a * ∑' x, f x := by\n  classical\n  exact if hf : Summable f then hf.tsum_mul_left a\n  else if ha : a = 0 then by simp [ha]\n  else by rw [tsum_eq_zero_of_not_summable hf,\n              tsum_eq_zero_of_not_summable (mt (summable_mul_left_iff ha).mp hf), mul_zero]\n\n"}
{"name":"tsum_mul_right","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝³ : DivisionSemiring α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSemiring α\nf : ι → α\na : α\ninst✝ : T2Space α\n⊢ Eq (tsum fun x => HMul.hMul (f x) a) (HMul.hMul (tsum fun x => f x) a)","decl":"theorem tsum_mul_right [T2Space α] : ∑' x, f x * a = (∑' x, f x) * a := by\n  classical\n  exact if hf : Summable f then hf.tsum_mul_right a\n  else if ha : a = 0 then by simp [ha]\n  else by rw [tsum_eq_zero_of_not_summable hf,\n              tsum_eq_zero_of_not_summable (mt (summable_mul_right_iff ha).mp hf), zero_mul]\n\n"}
{"name":"tsum_div_const","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝³ : DivisionSemiring α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSemiring α\nf : ι → α\na : α\ninst✝ : T2Space α\n⊢ Eq (tsum fun x => HDiv.hDiv (f x) a) (HDiv.hDiv (tsum fun x => f x) a)","decl":"theorem tsum_div_const [T2Space α] : ∑' x, f x / a = (∑' x, f x) / a := by\n  simpa only [div_eq_mul_inv] using tsum_mul_right\n\n"}
{"name":"HasSum.const_div","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝² : DivisionSemiring α\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSemiring α\nf : ι → α\na : α\nh : HasSum (fun x => HDiv.hDiv 1 (f x)) a\nb : α\n⊢ HasSum (fun i => HDiv.hDiv b (f i)) (HMul.hMul b a)","decl":"theorem HasSum.const_div (h :  HasSum (fun x ↦ 1 / f x) a) (b : α) :\n    HasSum (fun i ↦ b / f i) (b * a) := by\n  have := h.mul_left b\n  simpa only [div_eq_mul_inv, one_mul] using this\n\n"}
{"name":"Summable.const_div","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝² : DivisionSemiring α\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSemiring α\nf : ι → α\nh : Summable fun x => HDiv.hDiv 1 (f x)\nb : α\n⊢ Summable fun i => HDiv.hDiv b (f i)","decl":"theorem Summable.const_div (h : Summable (fun x ↦ 1 / f x)) (b : α) :\n    Summable fun i ↦ b / f i :=\n  (h.hasSum.const_div b).summable\n\n"}
{"name":"hasSum_const_div_iff","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝² : DivisionSemiring α\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSemiring α\nf : ι → α\na₁ a₂ : α\nh : Ne a₂ 0\n⊢ Iff (HasSum (fun i => HDiv.hDiv a₂ (f i)) (HMul.hMul a₂ a₁)) (HasSum (HDiv.hDiv 1 f) a₁)","decl":"theorem hasSum_const_div_iff (h : a₂ ≠ 0) :\n    HasSum (fun i ↦ a₂ / f i) (a₂ * a₁) ↔ HasSum (1/ f) a₁ := by\n  simpa only [div_eq_mul_inv, one_mul] using hasSum_mul_left_iff h\n\n"}
{"name":"summable_const_div_iff","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nα : Type u_3\ninst✝² : DivisionSemiring α\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSemiring α\nf : ι → α\na : α\nh : Ne a 0\n⊢ Iff (Summable fun i => HDiv.hDiv a (f i)) (Summable (HDiv.hDiv 1 f))","decl":"theorem summable_const_div_iff (h : a ≠ 0) : (Summable fun i ↦ a / f i) ↔ Summable (1 / f) := by\n  simpa only [div_eq_mul_inv, one_mul] using summable_mul_left_iff h\n\n"}
{"name":"HasSum.mul_eq","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nκ : Type u_2\nα : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : T3Space α\ninst✝¹ : NonUnitalNonAssocSemiring α\ninst✝ : TopologicalSemiring α\nf : ι → α\ng : κ → α\ns t u : α\nhf : HasSum f s\nhg : HasSum g t\nhfg : HasSum (fun x => HMul.hMul (f x.1) (g x.2)) u\n⊢ Eq (HMul.hMul s t) u","decl":"theorem HasSum.mul_eq (hf : HasSum f s) (hg : HasSum g t)\n    (hfg : HasSum (fun x : ι × κ ↦ f x.1 * g x.2) u) : s * t = u :=\n  have key₁ : HasSum (fun i ↦ f i * t) (s * t) := hf.mul_right t\n  have this : ∀ i : ι, HasSum (fun c : κ ↦ f i * g c) (f i * t) := fun i ↦ hg.mul_left (f i)\n  have key₂ : HasSum (fun i ↦ f i * t) u := HasSum.prod_fiberwise hfg this\n  key₁.unique key₂\n\n"}
{"name":"HasSum.mul","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nκ : Type u_2\nα : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : T3Space α\ninst✝¹ : NonUnitalNonAssocSemiring α\ninst✝ : TopologicalSemiring α\nf : ι → α\ng : κ → α\ns t : α\nhf : HasSum f s\nhg : HasSum g t\nhfg : Summable fun x => HMul.hMul (f x.1) (g x.2)\n⊢ HasSum (fun x => HMul.hMul (f x.1) (g x.2)) (HMul.hMul s t)","decl":"theorem HasSum.mul (hf : HasSum f s) (hg : HasSum g t)\n    (hfg : Summable fun x : ι × κ ↦ f x.1 * g x.2) :\n    HasSum (fun x : ι × κ ↦ f x.1 * g x.2) (s * t) :=\n  let ⟨_u, hu⟩ := hfg\n  (hf.mul_eq hg hu).symm ▸ hu\n\n"}
{"name":"tsum_mul_tsum","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"ι : Type u_1\nκ : Type u_2\nα : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : T3Space α\ninst✝¹ : NonUnitalNonAssocSemiring α\ninst✝ : TopologicalSemiring α\nf : ι → α\ng : κ → α\nhf : Summable f\nhg : Summable g\nhfg : Summable fun x => HMul.hMul (f x.1) (g x.2)\n⊢ Eq (HMul.hMul (tsum fun x => f x) (tsum fun y => g y)) (tsum fun z => HMul.hMul (f z.1) (g z.2))","decl":"/-- Product of two infinites sums indexed by arbitrary types.\n    See also `tsum_mul_tsum_of_summable_norm` if `f` and `g` are absolutely summable. -/\ntheorem tsum_mul_tsum (hf : Summable f) (hg : Summable g)\n    (hfg : Summable fun x : ι × κ ↦ f x.1 * g x.2) :\n    ((∑' x, f x) * ∑' y, g y) = ∑' z : ι × κ, f z.1 * g z.2 :=\n  hf.hasSum.mul_eq hg.hasSum hfg.hasSum\n\n"}
{"name":"summable_mul_prod_iff_summable_mul_sigma_antidiagonal","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"α : Type u_3\nA : Type u_4\ninst✝³ : AddCommMonoid A\ninst✝² : Finset.HasAntidiagonal A\ninst✝¹ : TopologicalSpace α\ninst✝ : NonUnitalNonAssocSemiring α\nf g : A → α\n⊢ Iff (Summable fun x => HMul.hMul (f x.1) (g x.2)) (Summable fun x => HMul.hMul (f (↑x.snd).1) (g (↑x.snd).2))","decl":"/-- The family `(k, l) : ℕ × ℕ ↦ f k * g l` is summable if and only if the family\n`(n, k, l) : Σ (n : ℕ), antidiagonal n ↦ f k * g l` is summable. -/\ntheorem summable_mul_prod_iff_summable_mul_sigma_antidiagonal :\n    (Summable fun x : A × A ↦ f x.1 * g x.2) ↔\n      Summable fun x : Σn : A, antidiagonal n ↦ f (x.2 : A × A).1 * g (x.2 : A × A).2 :=\n  Finset.sigmaAntidiagonalEquivProd.summable_iff.symm\n\n"}
{"name":"summable_sum_mul_antidiagonal_of_summable_mul","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"α : Type u_3\nA : Type u_4\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Finset.HasAntidiagonal A\ninst✝³ : TopologicalSpace α\ninst✝² : NonUnitalNonAssocSemiring α\nf g : A → α\ninst✝¹ : T3Space α\ninst✝ : TopologicalSemiring α\nh : Summable fun x => HMul.hMul (f x.1) (g x.2)\n⊢ Summable fun n => (Finset.HasAntidiagonal.antidiagonal n).sum fun kl => HMul.hMul (f kl.1) (g kl.2)","decl":"theorem summable_sum_mul_antidiagonal_of_summable_mul\n    (h : Summable fun x : A × A ↦ f x.1 * g x.2) :\n    Summable fun n ↦ ∑ kl ∈ antidiagonal n, f kl.1 * g kl.2 := by\n  rw [summable_mul_prod_iff_summable_mul_sigma_antidiagonal] at h\n  conv => congr; ext; rw [← Finset.sum_finset_coe, ← tsum_fintype]\n  exact h.sigma' fun n ↦ (hasSum_fintype _).summable\n\n"}
{"name":"tsum_mul_tsum_eq_tsum_sum_antidiagonal","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"α : Type u_3\nA : Type u_4\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Finset.HasAntidiagonal A\ninst✝³ : TopologicalSpace α\ninst✝² : NonUnitalNonAssocSemiring α\nf g : A → α\ninst✝¹ : T3Space α\ninst✝ : TopologicalSemiring α\nhf : Summable f\nhg : Summable g\nhfg : Summable fun x => HMul.hMul (f x.1) (g x.2)\n⊢ Eq (HMul.hMul (tsum fun n => f n) (tsum fun n => g n)) (tsum fun n => (Finset.HasAntidiagonal.antidiagonal n).sum fun kl => HMul.hMul (f kl.1) (g kl.2))","decl":"/-- The **Cauchy product formula** for the product of two infinites sums indexed by `ℕ`, expressed\nby summing on `Finset.antidiagonal`.\n\nSee also `tsum_mul_tsum_eq_tsum_sum_antidiagonal_of_summable_norm` if `f` and `g` are absolutely\nsummable. -/\ntheorem tsum_mul_tsum_eq_tsum_sum_antidiagonal (hf : Summable f) (hg : Summable g)\n    (hfg : Summable fun x : A × A ↦ f x.1 * g x.2) :\n    ((∑' n, f n) * ∑' n, g n) = ∑' n, ∑ kl ∈ antidiagonal n, f kl.1 * g kl.2 := by\n  conv_rhs => congr; ext; rw [← Finset.sum_finset_coe, ← tsum_fintype]\n  rw [tsum_mul_tsum hf hg hfg, ← sigmaAntidiagonalEquivProd.tsum_eq (_ : A × A → α)]\n  exact\n    tsum_sigma' (fun n ↦ (hasSum_fintype _).summable)\n      (summable_mul_prod_iff_summable_mul_sigma_antidiagonal.mp hfg)\n\n"}
{"name":"summable_sum_mul_range_of_summable_mul","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"α : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : NonUnitalNonAssocSemiring α\nf g : Nat → α\ninst✝¹ : T3Space α\ninst✝ : TopologicalSemiring α\nh : Summable fun x => HMul.hMul (f x.1) (g x.2)\n⊢ Summable fun n => (Finset.range (HAdd.hAdd n 1)).sum fun k => HMul.hMul (f k) (g (HSub.hSub n k))","decl":"theorem summable_sum_mul_range_of_summable_mul (h : Summable fun x : ℕ × ℕ ↦ f x.1 * g x.2) :\n    Summable fun n ↦ ∑ k ∈ range (n + 1), f k * g (n - k) := by\n  simp_rw [← Nat.sum_antidiagonal_eq_sum_range_succ fun k l ↦ f k * g l]\n  exact summable_sum_mul_antidiagonal_of_summable_mul h\n\n"}
{"name":"tsum_mul_tsum_eq_tsum_sum_range","module":"Mathlib.Topology.Algebra.InfiniteSum.Ring","initialProofState":"α : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : NonUnitalNonAssocSemiring α\nf g : Nat → α\ninst✝¹ : T3Space α\ninst✝ : TopologicalSemiring α\nhf : Summable f\nhg : Summable g\nhfg : Summable fun x => HMul.hMul (f x.1) (g x.2)\n⊢ Eq (HMul.hMul (tsum fun n => f n) (tsum fun n => g n)) (tsum fun n => (Finset.range (HAdd.hAdd n 1)).sum fun k => HMul.hMul (f k) (g (HSub.hSub n k)))","decl":"/-- The **Cauchy product formula** for the product of two infinites sums indexed by `ℕ`, expressed\nby summing on `Finset.range`.\n\nSee also `tsum_mul_tsum_eq_tsum_sum_range_of_summable_norm` if `f` and `g` are absolutely summable.\n-/\ntheorem tsum_mul_tsum_eq_tsum_sum_range (hf : Summable f) (hg : Summable g)\n    (hfg : Summable fun x : ℕ × ℕ ↦ f x.1 * g x.2) :\n    ((∑' n, f n) * ∑' n, g n) = ∑' n, ∑ k ∈ range (n + 1), f k * g (n - k) := by\n  simp_rw [← Nat.sum_antidiagonal_eq_sum_range_succ fun k l ↦ f k * g l]\n  exact tsum_mul_tsum_eq_tsum_sum_antidiagonal hf hg hfg\n\n"}
