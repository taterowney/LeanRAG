{"name":"IsIntegralCurve.isIntegralCurveOn","module":"Mathlib.Geometry.Manifold.IntegralCurve.Basic","initialProofState":"E : Type u_1\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type u_2\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_3\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nγ : Real → M\nv : (x : M) → TangentSpace I x\nh : IsIntegralCurve γ v\ns : Set Real\n⊢ IsIntegralCurveOn γ v s","decl":"lemma IsIntegralCurve.isIntegralCurveOn (h : IsIntegralCurve γ v) (s : Set ℝ) :\n    IsIntegralCurveOn γ v s := fun t _ ↦ h t\n\n"}
{"name":"isIntegralCurve_iff_isIntegralCurveOn","module":"Mathlib.Geometry.Manifold.IntegralCurve.Basic","initialProofState":"E : Type u_1\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type u_2\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_3\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nγ : Real → M\nv : (x : M) → TangentSpace I x\n⊢ Iff (IsIntegralCurve γ v) (IsIntegralCurveOn γ v Set.univ)","decl":"lemma isIntegralCurve_iff_isIntegralCurveOn : IsIntegralCurve γ v ↔ IsIntegralCurveOn γ v univ :=\n  ⟨fun h ↦ h.isIntegralCurveOn _, fun h t ↦ h t (mem_univ _)⟩\n\n"}
{"name":"isIntegralCurveAt_iff","module":"Mathlib.Geometry.Manifold.IntegralCurve.Basic","initialProofState":"E : Type u_1\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type u_2\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_3\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nγ : Real → M\nv : (x : M) → TangentSpace I x\nt₀ : Real\n⊢ Iff (IsIntegralCurveAt γ v t₀) (Exists fun s => And (Membership.mem (nhds t₀) s) (IsIntegralCurveOn γ v s))","decl":"lemma isIntegralCurveAt_iff :\n    IsIntegralCurveAt γ v t₀ ↔ ∃ s ∈ 𝓝 t₀, IsIntegralCurveOn γ v s := by\n  simp_rw [IsIntegralCurveOn, ← Filter.eventually_iff_exists_mem, IsIntegralCurveAt]\n\n"}
{"name":"isIntegralCurveAt_iff'","module":"Mathlib.Geometry.Manifold.IntegralCurve.Basic","initialProofState":"E : Type u_1\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type u_2\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_3\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nγ : Real → M\nv : (x : M) → TangentSpace I x\nt₀ : Real\n⊢ Iff (IsIntegralCurveAt γ v t₀) (Exists fun ε => And (GT.gt ε 0) (IsIntegralCurveOn γ v (Metric.ball t₀ ε)))","decl":"/-- `γ` is an integral curve for `v` at `t₀` iff `γ` is an integral curve on some interval\ncontaining `t₀`. -/\nlemma isIntegralCurveAt_iff' :\n    IsIntegralCurveAt γ v t₀ ↔ ∃ ε > 0, IsIntegralCurveOn γ v (Metric.ball t₀ ε) := by\n  simp_rw [IsIntegralCurveOn, ← Metric.eventually_nhds_iff_ball, IsIntegralCurveAt]\n\n"}
{"name":"IsIntegralCurve.isIntegralCurveAt","module":"Mathlib.Geometry.Manifold.IntegralCurve.Basic","initialProofState":"E : Type u_1\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type u_2\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_3\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nγ : Real → M\nv : (x : M) → TangentSpace I x\nh : IsIntegralCurve γ v\nt : Real\n⊢ IsIntegralCurveAt γ v t","decl":"lemma IsIntegralCurve.isIntegralCurveAt (h : IsIntegralCurve γ v) (t : ℝ) :\n    IsIntegralCurveAt γ v t := isIntegralCurveAt_iff.mpr ⟨univ, Filter.univ_mem, fun t _ ↦ h t⟩\n\n"}
{"name":"isIntegralCurve_iff_isIntegralCurveAt","module":"Mathlib.Geometry.Manifold.IntegralCurve.Basic","initialProofState":"E : Type u_1\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type u_2\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_3\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nγ : Real → M\nv : (x : M) → TangentSpace I x\n⊢ Iff (IsIntegralCurve γ v) (∀ (t : Real), IsIntegralCurveAt γ v t)","decl":"lemma isIntegralCurve_iff_isIntegralCurveAt :\n    IsIntegralCurve γ v ↔ ∀ t : ℝ, IsIntegralCurveAt γ v t :=\n  ⟨fun h ↦ h.isIntegralCurveAt, fun h t ↦ by\n    obtain ⟨s, hs, h⟩ := isIntegralCurveAt_iff.mp (h t)\n    exact h t (mem_of_mem_nhds hs)⟩\n\n"}
{"name":"IsIntegralCurveOn.mono","module":"Mathlib.Geometry.Manifold.IntegralCurve.Basic","initialProofState":"E : Type u_1\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type u_2\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_3\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nγ : Real → M\nv : (x : M) → TangentSpace I x\ns s' : Set Real\nh : IsIntegralCurveOn γ v s\nhs : HasSubset.Subset s' s\n⊢ IsIntegralCurveOn γ v s'","decl":"lemma IsIntegralCurveOn.mono (h : IsIntegralCurveOn γ v s) (hs : s' ⊆ s) :\n    IsIntegralCurveOn γ v s' := fun t ht ↦ h t (mem_of_mem_of_subset ht hs)\n\n"}
{"name":"IsIntegralCurveOn.of_union","module":"Mathlib.Geometry.Manifold.IntegralCurve.Basic","initialProofState":"E : Type u_1\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type u_2\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_3\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nγ : Real → M\nv : (x : M) → TangentSpace I x\ns s' : Set Real\nh : IsIntegralCurveOn γ v s\nh' : IsIntegralCurveOn γ v s'\n⊢ IsIntegralCurveOn γ v (Union.union s s')","decl":"lemma IsIntegralCurveOn.of_union (h : IsIntegralCurveOn γ v s) (h' : IsIntegralCurveOn γ v s') :\n    IsIntegralCurveOn γ v (s ∪ s') := fun _ ↦ fun | .inl ht => h _ ht | .inr ht => h' _ ht\n\n"}
{"name":"IsIntegralCurveAt.hasMFDerivAt","module":"Mathlib.Geometry.Manifold.IntegralCurve.Basic","initialProofState":"E : Type u_1\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type u_2\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_3\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nγ : Real → M\nv : (x : M) → TangentSpace I x\nt₀ : Real\nh : IsIntegralCurveAt γ v t₀\n⊢ HasMFDerivAt (modelWithCornersSelf Real Real) I γ t₀ (ContinuousLinearMap.smulRight 1 (v (γ t₀)))","decl":"lemma IsIntegralCurveAt.hasMFDerivAt (h : IsIntegralCurveAt γ v t₀) :\n    HasMFDerivAt 𝓘(ℝ, ℝ) I γ t₀ ((1 : ℝ →L[ℝ] ℝ).smulRight (v (γ t₀))) :=\n  have ⟨_, hs, h⟩ := isIntegralCurveAt_iff.mp h\n  h t₀ (mem_of_mem_nhds hs)\n\n"}
{"name":"IsIntegralCurveOn.isIntegralCurveAt","module":"Mathlib.Geometry.Manifold.IntegralCurve.Basic","initialProofState":"E : Type u_1\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type u_2\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_3\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nγ : Real → M\nv : (x : M) → TangentSpace I x\ns : Set Real\nt₀ : Real\nh : IsIntegralCurveOn γ v s\nhs : Membership.mem (nhds t₀) s\n⊢ IsIntegralCurveAt γ v t₀","decl":"lemma IsIntegralCurveOn.isIntegralCurveAt (h : IsIntegralCurveOn γ v s) (hs : s ∈ 𝓝 t₀) :\n    IsIntegralCurveAt γ v t₀ := isIntegralCurveAt_iff.mpr ⟨s, hs, h⟩\n\n"}
{"name":"IsIntegralCurveAt.isIntegralCurveOn","module":"Mathlib.Geometry.Manifold.IntegralCurve.Basic","initialProofState":"E : Type u_1\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type u_2\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_3\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nγ : Real → M\nv : (x : M) → TangentSpace I x\ns : Set Real\nh : ∀ (t : Real), Membership.mem s t → IsIntegralCurveAt γ v t\n⊢ IsIntegralCurveOn γ v s","decl":"/-- If `γ` is an integral curve at each `t ∈ s`, it is an integral curve on `s`. -/\nlemma IsIntegralCurveAt.isIntegralCurveOn (h : ∀ t ∈ s, IsIntegralCurveAt γ v t) :\n    IsIntegralCurveOn γ v s := by\n  intros t ht\n  obtain ⟨s, hs, h⟩ := isIntegralCurveAt_iff.mp (h t ht)\n  exact h t (mem_of_mem_nhds hs)\n\n"}
{"name":"isIntegralCurveOn_iff_isIntegralCurveAt","module":"Mathlib.Geometry.Manifold.IntegralCurve.Basic","initialProofState":"E : Type u_1\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type u_2\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_3\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nγ : Real → M\nv : (x : M) → TangentSpace I x\ns : Set Real\nhs : IsOpen s\n⊢ Iff (IsIntegralCurveOn γ v s) (∀ (t : Real), Membership.mem s t → IsIntegralCurveAt γ v t)","decl":"lemma isIntegralCurveOn_iff_isIntegralCurveAt (hs : IsOpen s) :\n    IsIntegralCurveOn γ v s ↔ ∀ t ∈ s, IsIntegralCurveAt γ v t :=\n  ⟨fun h _ ht ↦ h.isIntegralCurveAt (hs.mem_nhds ht), IsIntegralCurveAt.isIntegralCurveOn⟩\n\n"}
{"name":"IsIntegralCurveOn.continuousAt","module":"Mathlib.Geometry.Manifold.IntegralCurve.Basic","initialProofState":"E : Type u_1\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type u_2\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_3\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nγ : Real → M\nv : (x : M) → TangentSpace I x\ns : Set Real\nt₀ : Real\nhγ : IsIntegralCurveOn γ v s\nht : Membership.mem s t₀\n⊢ ContinuousAt γ t₀","decl":"lemma IsIntegralCurveOn.continuousAt (hγ : IsIntegralCurveOn γ v s) (ht : t₀ ∈ s) :\n    ContinuousAt γ t₀ := (hγ t₀ ht).1\n\n"}
{"name":"IsIntegralCurveOn.continuousOn","module":"Mathlib.Geometry.Manifold.IntegralCurve.Basic","initialProofState":"E : Type u_1\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type u_2\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_3\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nγ : Real → M\nv : (x : M) → TangentSpace I x\ns : Set Real\nhγ : IsIntegralCurveOn γ v s\n⊢ ContinuousOn γ s","decl":"lemma IsIntegralCurveOn.continuousOn (hγ : IsIntegralCurveOn γ v s) :\n    ContinuousOn γ s := fun t ht ↦ (hγ t ht).1.continuousWithinAt\n\n"}
{"name":"IsIntegralCurveAt.continuousAt","module":"Mathlib.Geometry.Manifold.IntegralCurve.Basic","initialProofState":"E : Type u_1\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type u_2\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_3\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nγ : Real → M\nv : (x : M) → TangentSpace I x\nt₀ : Real\nhγ : IsIntegralCurveAt γ v t₀\n⊢ ContinuousAt γ t₀","decl":"lemma IsIntegralCurveAt.continuousAt (hγ : IsIntegralCurveAt γ v t₀) :\n    ContinuousAt γ t₀ :=\n  have ⟨_, hs, hγ⟩ := isIntegralCurveAt_iff.mp hγ\n  hγ.continuousAt <| mem_of_mem_nhds hs\n\n"}
{"name":"IsIntegralCurve.continuous","module":"Mathlib.Geometry.Manifold.IntegralCurve.Basic","initialProofState":"E : Type u_1\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type u_2\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_3\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nγ : Real → M\nv : (x : M) → TangentSpace I x\nhγ : IsIntegralCurve γ v\n⊢ Continuous γ","decl":"lemma IsIntegralCurve.continuous (hγ : IsIntegralCurve γ v) : Continuous γ :=\n  continuous_iff_continuousAt.mpr fun _ ↦ (hγ.isIntegralCurveOn univ).continuousAt (mem_univ _)\n\n"}
{"name":"IsIntegralCurveOn.hasDerivAt","module":"Mathlib.Geometry.Manifold.IntegralCurve.Basic","initialProofState":"E : Type u_1\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\nH : Type u_2\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_3\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\nγ : Real → M\nv : (x : M) → TangentSpace I x\ns : Set Real\nt₀ : Real\ninst✝ : IsManifold I 1 M\nhγ : IsIntegralCurveOn γ v s\nt : Real\nht : Membership.mem s t\nhsrc : Membership.mem (extChartAt I (γ t₀)).source (γ t)\n⊢ HasDerivAt (Function.comp (↑(extChartAt I (γ t₀))) γ) ((tangentCoordChange I (γ t) (γ t₀) (γ t)) (v (γ t))) t","decl":"/-- If `γ` is an integral curve of a vector field `v`, then `γ t` is tangent to `v (γ t)` when\n  expressed in the local chart around the initial point `γ t₀`. -/\nlemma IsIntegralCurveOn.hasDerivAt (hγ : IsIntegralCurveOn γ v s) {t : ℝ} (ht : t ∈ s)\n    (hsrc : γ t ∈ (extChartAt I (γ t₀)).source) :\n    HasDerivAt ((extChartAt I (γ t₀)) ∘ γ)\n      (tangentCoordChange I (γ t) (γ t₀) (γ t) (v (γ t))) t := by\n  -- turn `HasDerivAt` into comp of `HasMFDerivAt`\n  have hsrc := extChartAt_source I (γ t₀) ▸ hsrc\n  rw [hasDerivAt_iff_hasFDerivAt, ← hasMFDerivAt_iff_hasFDerivAt]\n  apply (HasMFDerivAt.comp t\n    (hasMFDerivAt_extChartAt (I := I) hsrc) (hγ _ ht)).congr_mfderiv\n  rw [ContinuousLinearMap.ext_iff]\n  intro a\n  rw [ContinuousLinearMap.comp_apply, ContinuousLinearMap.smulRight_apply, map_smul,\n    ← ContinuousLinearMap.one_apply (R₁ := ℝ) a, ← ContinuousLinearMap.smulRight_apply,\n    mfderiv_chartAt_eq_tangentCoordChange hsrc]\n  rfl\n\n"}
{"name":"IsIntegralCurveAt.eventually_hasDerivAt","module":"Mathlib.Geometry.Manifold.IntegralCurve.Basic","initialProofState":"E : Type u_1\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\nH : Type u_2\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_3\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\nγ : Real → M\nv : (x : M) → TangentSpace I x\nt₀ : Real\ninst✝ : IsManifold I 1 M\nhγ : IsIntegralCurveAt γ v t₀\n⊢ Filter.Eventually (fun t => HasDerivAt (Function.comp (↑(extChartAt I (γ t₀))) γ) ((tangentCoordChange I (γ t) (γ t₀) (γ t)) (v (γ t))) t) (nhds t₀)","decl":"lemma IsIntegralCurveAt.eventually_hasDerivAt (hγ : IsIntegralCurveAt γ v t₀) :\n    ∀ᶠ t in 𝓝 t₀, HasDerivAt ((extChartAt I (γ t₀)) ∘ γ)\n      (tangentCoordChange I (γ t) (γ t₀) (γ t) (v (γ t))) t := by\n  apply eventually_mem_nhds_iff.mpr\n    (hγ.continuousAt.preimage_mem_nhds (extChartAt_source_mem_nhds (I := I) _)) |>.and hγ |>.mono\n  rintro t ⟨ht1, ht2⟩\n  have hsrc := mem_of_mem_nhds ht1\n  rw [mem_preimage, extChartAt_source I (γ t₀)] at hsrc\n  rw [hasDerivAt_iff_hasFDerivAt, ← hasMFDerivAt_iff_hasFDerivAt]\n  apply (HasMFDerivAt.comp t (hasMFDerivAt_extChartAt (I := I) hsrc) ht2).congr_mfderiv\n  rw [ContinuousLinearMap.ext_iff]\n  intro a\n  rw [ContinuousLinearMap.comp_apply, ContinuousLinearMap.smulRight_apply, map_smul,\n    ← ContinuousLinearMap.one_apply (R₁ := ℝ) a, ← ContinuousLinearMap.smulRight_apply,\n    mfderiv_chartAt_eq_tangentCoordChange hsrc]\n  rfl\n"}
