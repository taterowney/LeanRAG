{"name":"Rat.cast_injective","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionRing α\ninst✝ : CharZero α\n⊢ Function.Injective Rat.cast","decl":"@[stacks 09FR \"Characteristic zero case.\"]\nlemma cast_injective : Injective ((↑) : ℚ → α)\n  | ⟨n₁, d₁, d₁0, c₁⟩, ⟨n₂, d₂, d₂0, c₂⟩, h => by\n    have d₁a : (d₁ : α) ≠ 0 := Nat.cast_ne_zero.2 d₁0\n    have d₂a : (d₂ : α) ≠ 0 := Nat.cast_ne_zero.2 d₂0\n    rw [mk'_eq_divInt, mk'_eq_divInt] at h ⊢\n    rw [cast_divInt_of_ne_zero, cast_divInt_of_ne_zero] at h <;> simp [d₁0, d₂0] at h ⊢\n    rwa [eq_div_iff_mul_eq d₂a, division_def, mul_assoc, (d₁.cast_commute (d₂ : α)).inv_left₀.eq, ←\n      mul_assoc, ← division_def, eq_comm, eq_div_iff_mul_eq d₁a, eq_comm, ← Int.cast_natCast d₁, ←\n      Int.cast_mul, ← Int.cast_natCast d₂, ← Int.cast_mul, Int.cast_inj, ← mkRat_eq_iff d₁0 d₂0]\n      at h\n\n"}
{"name":"Rat.cast_inj","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionRing α\ninst✝ : CharZero α\np q : Rat\n⊢ Iff (Eq ↑p ↑q) (Eq p q)","decl":"@[simp, norm_cast] lemma cast_inj : (p : α) = q ↔ p = q := cast_injective.eq_iff\n\n"}
{"name":"Rat.cast_eq_zero","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionRing α\ninst✝ : CharZero α\np : Rat\n⊢ Iff (Eq (↑p) 0) (Eq p 0)","decl":"@[simp, norm_cast] lemma cast_eq_zero : (p : α) = 0 ↔ p = 0 := cast_injective.eq_iff' cast_zero\n"}
{"name":"Rat.cast_ne_zero","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionRing α\ninst✝ : CharZero α\np : Rat\n⊢ Iff (Ne (↑p) 0) (Ne p 0)","decl":"lemma cast_ne_zero : (p : α) ≠ 0 ↔ p ≠ 0 := cast_eq_zero.ne\n\n"}
{"name":"Rat.cast_add","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionRing α\ninst✝ : CharZero α\np q : Rat\n⊢ Eq (↑(HAdd.hAdd p q)) (HAdd.hAdd ↑p ↑q)","decl":"@[simp, norm_cast] lemma cast_add (p q : ℚ) : ↑(p + q) = (p + q : α) :=\n  cast_add_of_ne_zero (Nat.cast_ne_zero.2 p.pos.ne') (Nat.cast_ne_zero.2 q.pos.ne')\n\n"}
{"name":"Rat.cast_sub","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionRing α\ninst✝ : CharZero α\np q : Rat\n⊢ Eq (↑(HSub.hSub p q)) (HSub.hSub ↑p ↑q)","decl":"@[simp, norm_cast] lemma cast_sub (p q : ℚ) : ↑(p - q) = (p - q : α) :=\n  cast_sub_of_ne_zero (Nat.cast_ne_zero.2 p.pos.ne') (Nat.cast_ne_zero.2 q.pos.ne')\n\n"}
{"name":"Rat.cast_mul","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionRing α\ninst✝ : CharZero α\np q : Rat\n⊢ Eq (↑(HMul.hMul p q)) (HMul.hMul ↑p ↑q)","decl":"@[simp, norm_cast] lemma cast_mul (p q : ℚ) : ↑(p * q) = (p * q : α) :=\n  cast_mul_of_ne_zero (Nat.cast_ne_zero.2 p.pos.ne') (Nat.cast_ne_zero.2 q.pos.ne')\n\n"}
{"name":"Rat.coe_castHom","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionRing α\ninst✝ : CharZero α\n⊢ Eq (⇑(Rat.castHom α)) Rat.cast","decl":"@[simp] lemma coe_castHom : ⇑(castHom α) = ((↑) : ℚ → α) := rfl\n\n"}
{"name":"Rat.cast_inv","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionRing α\ninst✝ : CharZero α\np : Rat\n⊢ Eq (↑(Inv.inv p)) (Inv.inv ↑p)","decl":"@[simp, norm_cast] lemma cast_inv (p : ℚ) : ↑(p⁻¹) = (p⁻¹ : α) := map_inv₀ (castHom α) _\n"}
{"name":"Rat.cast_div","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionRing α\ninst✝ : CharZero α\np q : Rat\n⊢ Eq (↑(HDiv.hDiv p q)) (HDiv.hDiv ↑p ↑q)","decl":"@[simp, norm_cast] lemma cast_div (p q : ℚ) : ↑(p / q) = (p / q : α) := map_div₀ (castHom α) ..\n\n"}
{"name":"Rat.cast_zpow","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionRing α\ninst✝ : CharZero α\np : Rat\nn : Int\n⊢ Eq (↑(HPow.hPow p n)) (HPow.hPow (↑p) n)","decl":"@[simp, norm_cast]\nlemma cast_zpow (p : ℚ) (n : ℤ) : ↑(p ^ n) = (p ^ n : α) := map_zpow₀ (castHom α) ..\n\n"}
{"name":"Rat.cast_mk","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionRing α\ninst✝ : CharZero α\na b : Int\n⊢ Eq (↑(Rat.divInt a b)) (HDiv.hDiv ↑a ↑b)","decl":"@[norm_cast]\ntheorem cast_mk (a b : ℤ) : (a /. b : α) = a / b := by\n  simp only [divInt_eq_div, cast_div, cast_intCast]\n\n"}
{"name":"NNRat.cast_injective","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionSemiring α\ninst✝ : CharZero α\n⊢ Function.Injective NNRat.cast","decl":"lemma cast_injective : Injective ((↑) : ℚ≥0 → α) := by\n  rintro p q hpq\n  rw [NNRat.cast_def, NNRat.cast_def, Commute.div_eq_div_iff] at hpq\n  on_goal 1 => rw [← p.num_div_den, ← q.num_div_den, div_eq_div_iff]\n  · norm_cast at hpq ⊢\n  any_goals norm_cast\n  any_goals apply den_ne_zero\n  exact Nat.cast_commute ..\n\n"}
{"name":"NNRat.cast_inj","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionSemiring α\ninst✝ : CharZero α\np q : NNRat\n⊢ Iff (Eq ↑p ↑q) (Eq p q)","decl":"@[simp, norm_cast] lemma cast_inj : (p : α) = q ↔ p = q := cast_injective.eq_iff\n\n"}
{"name":"NNRat.cast_eq_zero","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionSemiring α\ninst✝ : CharZero α\nq : NNRat\n⊢ Iff (Eq (↑q) 0) (Eq q 0)","decl":"@[simp, norm_cast] lemma cast_eq_zero : (q : α) = 0 ↔ q = 0 := by rw [← cast_zero, cast_inj]\n"}
{"name":"NNRat.cast_ne_zero","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionSemiring α\ninst✝ : CharZero α\nq : NNRat\n⊢ Iff (Ne (↑q) 0) (Ne q 0)","decl":"lemma cast_ne_zero : (q : α) ≠ 0 ↔ q ≠ 0 := cast_eq_zero.not\n\n"}
{"name":"NNRat.cast_add","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionSemiring α\ninst✝ : CharZero α\np q : NNRat\n⊢ Eq (↑(HAdd.hAdd p q)) (HAdd.hAdd ↑p ↑q)","decl":"@[simp, norm_cast] lemma cast_add (p q : ℚ≥0) : ↑(p + q) = (p + q : α) :=\n  cast_add_of_ne_zero (Nat.cast_ne_zero.2 p.den_pos.ne') (Nat.cast_ne_zero.2 q.den_pos.ne')\n\n"}
{"name":"NNRat.cast_mul","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionSemiring α\ninst✝ : CharZero α\np q : NNRat\n⊢ Eq (↑(HMul.hMul p q)) (HMul.hMul ↑p ↑q)","decl":"@[simp, norm_cast] lemma cast_mul (p q) : (p * q : ℚ≥0) = (p * q : α) :=\n  cast_mul_of_ne_zero (Nat.cast_ne_zero.2 p.den_pos.ne') (Nat.cast_ne_zero.2 q.den_pos.ne')\n\n"}
{"name":"NNRat.coe_castHom","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionSemiring α\ninst✝ : CharZero α\n⊢ Eq (⇑(NNRat.castHom α)) NNRat.cast","decl":"@[simp, norm_cast] lemma coe_castHom : ⇑(castHom α) = (↑) := rfl\n\n"}
{"name":"NNRat.cast_inv","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionSemiring α\ninst✝ : CharZero α\np : NNRat\n⊢ Eq (↑(Inv.inv p)) (Inv.inv ↑p)","decl":"@[simp, norm_cast] lemma cast_inv (p) : (p⁻¹ : ℚ≥0) = (p : α)⁻¹ := map_inv₀ (castHom α) _\n"}
{"name":"NNRat.cast_div","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionSemiring α\ninst✝ : CharZero α\np q : NNRat\n⊢ Eq (↑(HDiv.hDiv p q)) (HDiv.hDiv ↑p ↑q)","decl":"@[simp, norm_cast] lemma cast_div (p q) : (p / q : ℚ≥0) = (p / q : α) := map_div₀ (castHom α) ..\n\n"}
{"name":"NNRat.cast_zpow","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionSemiring α\ninst✝ : CharZero α\nq : NNRat\np : Int\n⊢ Eq (↑(HPow.hPow q p)) (HPow.hPow (↑q) p)","decl":"@[simp, norm_cast]\nlemma cast_zpow (q : ℚ≥0) (p : ℤ) : ↑(q ^ p) = ((q : α) ^ p : α) := map_zpow₀ (castHom α) ..\n\n"}
{"name":"NNRat.cast_divNat","module":"Mathlib.Data.Rat.Cast.CharZero","initialProofState":"α : Type u_3\ninst✝¹ : DivisionSemiring α\ninst✝ : CharZero α\na b : Nat\n⊢ Eq (↑(NNRat.divNat a b)) (HDiv.hDiv ↑a ↑b)","decl":"@[simp]\nlemma cast_divNat (a b : ℕ) : (divNat a b : α) = a / b := by\n  rw [← cast_natCast, ← cast_natCast b, ← cast_div]\n  congr\n  ext\n  apply Rat.mkRat_eq_div\n\n"}
