{"name":"SimpleGraph.sum_adj","module":"Mathlib.Combinatorics.SimpleGraph.Sum","initialProofState":"α : Type u_1\nβ : Type u_2\nG : SimpleGraph α\nH : SimpleGraph β\nx✝¹ x✝ : Sum α β\n⊢ Eq ((G.sum H).Adj x✝¹ x✝) (SimpleGraph.sum.match_1 (fun x x => Prop) x✝¹ x✝ (fun u v => G.Adj u v) (fun u v => H.Adj u v) fun x x => False)","decl":"/-- Disjoint sum of `G` and `H`. -/\n@[simps!]\nprotected def sum (G : SimpleGraph α) (H : SimpleGraph β) : SimpleGraph (α ⊕ β) where\n  Adj\n    | Sum.inl u, Sum.inl v => G.Adj u v\n    | Sum.inr u, Sum.inr v => H.Adj u v\n    | _, _ => false\n  symm\n    | Sum.inl u, Sum.inl v => G.adj_symm\n    | Sum.inr u, Sum.inr v => H.adj_symm\n    | Sum.inl _, Sum.inr _ | Sum.inr _, Sum.inl _ => id\n  loopless u := by cases u <;> simp\n\n"}
{"name":"SimpleGraph.Iso.sumComm_symm_apply","module":"Mathlib.Combinatorics.SimpleGraph.Sum","initialProofState":"α : Type u_1\nβ : Type u_2\nG : SimpleGraph α\nH : SimpleGraph β\na✝ : Sum β α\n⊢ Eq ((RelIso.symm SimpleGraph.Iso.sumComm) a✝) a✝.swap","decl":"/-- The disjoint sum is commutative up to isomorphism. `Iso.sumComm` as a graph isomorphism. -/\n@[simps!]\ndef Iso.sumComm : G ⊕g H ≃g H ⊕g G := ⟨Equiv.sumComm α β, by\n  rintro (u | u) (v | v) <;> simp⟩\n\n"}
{"name":"SimpleGraph.Iso.sumComm_apply","module":"Mathlib.Combinatorics.SimpleGraph.Sum","initialProofState":"α : Type u_1\nβ : Type u_2\nG : SimpleGraph α\nH : SimpleGraph β\na✝ : Sum α β\n⊢ Eq (SimpleGraph.Iso.sumComm a✝) a✝.swap","decl":"/-- The disjoint sum is commutative up to isomorphism. `Iso.sumComm` as a graph isomorphism. -/\n@[simps!]\ndef Iso.sumComm : G ⊕g H ≃g H ⊕g G := ⟨Equiv.sumComm α β, by\n  rintro (u | u) (v | v) <;> simp⟩\n\n"}
{"name":"SimpleGraph.Iso.sumAssoc_apply","module":"Mathlib.Combinatorics.SimpleGraph.Sum","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nG : SimpleGraph α\nH : SimpleGraph β\nI : SimpleGraph γ\na✝ : Sum (Sum α β) γ\n⊢ Eq (SimpleGraph.Iso.sumAssoc a✝) (Sum.elim (Sum.elim Sum.inl (Function.comp Sum.inr Sum.inl)) (Function.comp Sum.inr Sum.inr) a✝)","decl":"/-- The disjoint sum is associative up to isomorphism. `Iso.sumAssoc` as a graph isomorphism. -/\n@[simps!]\ndef Iso.sumAssoc {I : SimpleGraph γ} : (G ⊕g H) ⊕g I ≃g G ⊕g (H ⊕g I) := ⟨Equiv.sumAssoc α β γ, by\n  rintro ((u | u) | u) ((v | v) | v) <;> simp⟩\n\n"}
{"name":"SimpleGraph.Iso.sumAssoc_symm_apply","module":"Mathlib.Combinatorics.SimpleGraph.Sum","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nG : SimpleGraph α\nH : SimpleGraph β\nI : SimpleGraph γ\na✝ : Sum α (Sum β γ)\n⊢ Eq ((RelIso.symm SimpleGraph.Iso.sumAssoc) a✝) (Sum.elim (Function.comp Sum.inl Sum.inl) (Sum.elim (Function.comp Sum.inl Sum.inr) Sum.inr) a✝)","decl":"/-- The disjoint sum is associative up to isomorphism. `Iso.sumAssoc` as a graph isomorphism. -/\n@[simps!]\ndef Iso.sumAssoc {I : SimpleGraph γ} : (G ⊕g H) ⊕g I ≃g G ⊕g (H ⊕g I) := ⟨Equiv.sumAssoc α β γ, by\n  rintro ((u | u) | u) ((v | v) | v) <;> simp⟩\n\n"}
{"name":"SimpleGraph.Embedding.sumInl_apply","module":"Mathlib.Combinatorics.SimpleGraph.Sum","initialProofState":"α : Type u_1\nβ : Type u_2\nG : SimpleGraph α\nH : SimpleGraph β\nu : α\n⊢ Eq (SimpleGraph.Embedding.sumInl u) (Sum.inl u)","decl":"/-- The embedding of `G` into `G ⊕g H`. -/\n@[simps]\ndef Embedding.sumInl : G ↪g G ⊕g H where\n  toFun u := _root_.Sum.inl u\n  inj' u v := by simp\n  map_rel_iff' := by simp\n\n"}
{"name":"SimpleGraph.Embedding.sumInr_apply","module":"Mathlib.Combinatorics.SimpleGraph.Sum","initialProofState":"α : Type u_1\nβ : Type u_2\nG : SimpleGraph α\nH : SimpleGraph β\nu : β\n⊢ Eq (SimpleGraph.Embedding.sumInr u) (Sum.inr u)","decl":"/-- The embedding of `H` into `G ⊕g H`. -/\n@[simps]\ndef Embedding.sumInr : H ↪g G ⊕g H where\n  toFun u := _root_.Sum.inr u\n  inj' u v := by simp\n  map_rel_iff' := by simp\n\n"}
{"name":"SimpleGraph.Coloring.sumLeft_sum","module":"Mathlib.Combinatorics.SimpleGraph.Sum","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nG : SimpleGraph α\nH : SimpleGraph β\ncG : G.Coloring γ\ncH : H.Coloring γ\n⊢ Eq (cG.sum cH).sumLeft cG","decl":"@[simp]\ntheorem Coloring.sumLeft_sum (cG : G.Coloring γ) (cH : H.Coloring γ) : (cG.sum cH).sumLeft = cG :=\n  rfl\n\n"}
{"name":"SimpleGraph.Coloring.sumRight_sum","module":"Mathlib.Combinatorics.SimpleGraph.Sum","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nG : SimpleGraph α\nH : SimpleGraph β\ncG : G.Coloring γ\ncH : H.Coloring γ\n⊢ Eq (cG.sum cH).sumRight cH","decl":"@[simp]\ntheorem Coloring.sumRight_sum (cG : G.Coloring γ) (cH : H.Coloring γ) : (cG.sum cH).sumRight = cH :=\n  rfl\n\n"}
{"name":"SimpleGraph.Coloring.sum_sumLeft_sumRight","module":"Mathlib.Combinatorics.SimpleGraph.Sum","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nG : SimpleGraph α\nH : SimpleGraph β\nc : (G.sum H).Coloring γ\n⊢ Eq (c.sumLeft.sum c.sumRight) c","decl":"@[simp]\ntheorem Coloring.sum_sumLeft_sumRight (c : (G ⊕g H).Coloring γ) : c.sumLeft.sum c.sumRight = c := by\n  ext (u | u) <;> rfl\n\n"}
{"name":"SimpleGraph.Colorable.sum_max","module":"Mathlib.Combinatorics.SimpleGraph.Sum","initialProofState":"α : Type u_1\nβ : Type u_2\nG : SimpleGraph α\nH : SimpleGraph β\nn m : Nat\nhG : G.Colorable n\nhH : H.Colorable m\n⊢ (G.sum H).Colorable (Max.max n m)","decl":"theorem Colorable.sum_max {n m : ℕ} (hG : G.Colorable n) (hH : H.Colorable m) :\n    (G ⊕g H).Colorable (max n m) := Nonempty.intro (hG.some.sumFin hH.some)\n\n"}
{"name":"SimpleGraph.Colorable.of_sum_left","module":"Mathlib.Combinatorics.SimpleGraph.Sum","initialProofState":"α : Type u_1\nβ : Type u_2\nG : SimpleGraph α\nH : SimpleGraph β\nn : Nat\nh : (G.sum H).Colorable n\n⊢ G.Colorable n","decl":"theorem Colorable.of_sum_left {n : ℕ} (h : (G ⊕g H).Colorable n) : G.Colorable n :=\n  Nonempty.intro (h.some.sumLeft)\n\n"}
{"name":"SimpleGraph.Colorable.of_sum_right","module":"Mathlib.Combinatorics.SimpleGraph.Sum","initialProofState":"α : Type u_1\nβ : Type u_2\nG : SimpleGraph α\nH : SimpleGraph β\nn : Nat\nh : (G.sum H).Colorable n\n⊢ H.Colorable n","decl":"theorem Colorable.of_sum_right {n : ℕ} (h : (G ⊕g H).Colorable n) : H.Colorable n :=\n  Nonempty.intro (h.some.sumRight)\n\n"}
{"name":"SimpleGraph.colorable_sum","module":"Mathlib.Combinatorics.SimpleGraph.Sum","initialProofState":"α : Type u_1\nβ : Type u_2\nG : SimpleGraph α\nH : SimpleGraph β\nn : Nat\n⊢ Iff ((G.sum H).Colorable n) (And (G.Colorable n) (H.Colorable n))","decl":"@[simp]\ntheorem colorable_sum {n : ℕ} : (G ⊕g H).Colorable n ↔ G.Colorable n ∧ H.Colorable n :=\n  ⟨fun cGH => ⟨cGH.of_sum_left, cGH.of_sum_right⟩,\n    fun ⟨cG, cH⟩ => by rw [← n.max_self]; exact cG.sum_max cH⟩\n\n"}
{"name":"SimpleGraph.chromaticNumber_le_sum_left","module":"Mathlib.Combinatorics.SimpleGraph.Sum","initialProofState":"α : Type u_1\nβ : Type u_2\nG : SimpleGraph α\nH : SimpleGraph β\n⊢ LE.le G.chromaticNumber (G.sum H).chromaticNumber","decl":"theorem chromaticNumber_le_sum_left : G.chromaticNumber ≤ (G ⊕g H).chromaticNumber :=\n  chromaticNumber_le_of_forall_imp (fun _ h ↦ h.of_sum_left)\n\n"}
{"name":"SimpleGraph.chromaticNumber_le_sum_right","module":"Mathlib.Combinatorics.SimpleGraph.Sum","initialProofState":"α : Type u_1\nβ : Type u_2\nG : SimpleGraph α\nH : SimpleGraph β\n⊢ LE.le H.chromaticNumber (G.sum H).chromaticNumber","decl":"theorem chromaticNumber_le_sum_right : H.chromaticNumber ≤ (G ⊕g H).chromaticNumber :=\n  chromaticNumber_le_of_forall_imp (fun _ h ↦ h.of_sum_right)\n\n"}
{"name":"SimpleGraph.chromaticNumber_sum","module":"Mathlib.Combinatorics.SimpleGraph.Sum","initialProofState":"α : Type u_1\nβ : Type u_2\nG : SimpleGraph α\nH : SimpleGraph β\n⊢ Eq (G.sum H).chromaticNumber (Max.max G.chromaticNumber H.chromaticNumber)","decl":"@[simp]\ntheorem chromaticNumber_sum :\n    (G ⊕g H).chromaticNumber = max G.chromaticNumber H.chromaticNumber := by\n  refine eq_max chromaticNumber_le_sum_left chromaticNumber_le_sum_right ?_\n  rintro (n | n) hG hH\n  · simp [show (none : ℕ∞) = (⊤ : ℕ∞) from rfl]\n  · let cG : G.Coloring (Fin n) := (chromaticNumber_le_iff_colorable.mp hG).some\n    let cH : H.Coloring (Fin n) := (chromaticNumber_le_iff_colorable.mp hH).some\n    exact chromaticNumber_le_iff_colorable.mpr (Nonempty.intro (cG.sum cH))\n\n"}
