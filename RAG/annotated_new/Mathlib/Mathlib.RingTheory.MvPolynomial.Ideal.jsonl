{"name":"MvPolynomial.mem_ideal_span_monomial_image","module":"Mathlib.RingTheory.MvPolynomial.Ideal","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\nx : MvPolynomial σ R\ns : Set (Finsupp σ Nat)\n⊢ Iff (Membership.mem (Ideal.span (Set.image (fun s => (MvPolynomial.monomial s) 1) s)) x) (∀ (xi : Finsupp σ Nat), Membership.mem x.support xi → Exists fun si => And (Membership.mem s si) (LE.le si xi))","decl":"/-- `x` is in a monomial ideal generated by `s` iff every element of its support dominates one of\nthe generators. Note that `si ≤ xi` is analogous to saying that the monomial corresponding to `si`\ndivides the monomial corresponding to `xi`. -/\ntheorem mem_ideal_span_monomial_image {x : MvPolynomial σ R} {s : Set (σ →₀ ℕ)} :\n    x ∈ Ideal.span ((fun s => monomial s (1 : R)) '' s) ↔ ∀ xi ∈ x.support, ∃ si ∈ s, si ≤ xi := by\n  refine AddMonoidAlgebra.mem_ideal_span_of'_image.trans ?_\n  simp_rw [le_iff_exists_add, add_comm]\n  rfl\n\n"}
{"name":"MvPolynomial.mem_ideal_span_monomial_image_iff_dvd","module":"Mathlib.RingTheory.MvPolynomial.Ideal","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\nx : MvPolynomial σ R\ns : Set (Finsupp σ Nat)\n⊢ Iff (Membership.mem (Ideal.span (Set.image (fun s => (MvPolynomial.monomial s) 1) s)) x) (∀ (xi : Finsupp σ Nat), Membership.mem x.support xi → Exists fun si => And (Membership.mem s si) (Dvd.dvd ((MvPolynomial.monomial si) 1) ((MvPolynomial.monomial xi) (MvPolynomial.coeff xi x))))","decl":"theorem mem_ideal_span_monomial_image_iff_dvd {x : MvPolynomial σ R} {s : Set (σ →₀ ℕ)} :\n    x ∈ Ideal.span ((fun s => monomial s (1 : R)) '' s) ↔\n      ∀ xi ∈ x.support, ∃ si ∈ s, monomial si 1 ∣ monomial xi (x.coeff xi) := by\n  refine mem_ideal_span_monomial_image.trans (forall₂_congr fun xi hxi => ?_)\n  simp_rw [monomial_dvd_monomial, one_dvd, and_true, mem_support_iff.mp hxi, false_or]\n\n"}
{"name":"MvPolynomial.mem_ideal_span_X_image","module":"Mathlib.RingTheory.MvPolynomial.Ideal","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\nx : MvPolynomial σ R\ns : Set σ\n⊢ Iff (Membership.mem (Ideal.span (Set.image MvPolynomial.X s)) x) (∀ (m : Finsupp σ Nat), Membership.mem x.support m → Exists fun i => And (Membership.mem s i) (Ne (m i) 0))","decl":"/-- `x` is in a monomial ideal generated by variables `X` iff every element of its support\nhas a component in `s`. -/\ntheorem mem_ideal_span_X_image {x : MvPolynomial σ R} {s : Set σ} :\n    x ∈ Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial σ R)) ↔\n      ∀ m ∈ x.support, ∃ i ∈ s, (m : σ →₀ ℕ) i ≠ 0 := by\n  have := @mem_ideal_span_monomial_image σ R _ x ((fun i => Finsupp.single i 1) '' s)\n  rw [Set.image_image] at this\n  refine this.trans ?_\n  simp [Nat.one_le_iff_ne_zero]\n\n"}
