{"name":"aeSeq.mk_eq_fun_of_mem_aeSeqSet","module":"Mathlib.MeasureTheory.Function.AEMeasurableSequence","initialProofState":"ι : Sort u_1\nα : Type u_2\nβ : Type u_3\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSpace β\nf : ι → α → β\nμ : MeasureTheory.Measure α\np : α → (ι → β) → Prop\nhf : ∀ (i : ι), AEMeasurable (f i) μ\nx : α\nhx : Membership.mem (aeSeqSet hf p) x\ni : ι\n⊢ Eq (AEMeasurable.mk (f i) ⋯ x) (f i x)","decl":"theorem mk_eq_fun_of_mem_aeSeqSet (hf : ∀ i, AEMeasurable (f i) μ) {x : α} (hx : x ∈ aeSeqSet hf p)\n    (i : ι) : (hf i).mk (f i) x = f i x :=\n  haveI h_ss : aeSeqSet hf p ⊆ { x | ∀ i, f i x = (hf i).mk (f i) x } := by\n    rw [aeSeqSet, ← compl_compl { x | ∀ i, f i x = (hf i).mk (f i) x }, Set.compl_subset_compl]\n    refine Set.Subset.trans (Set.compl_subset_compl.mpr fun x h => ?_) (subset_toMeasurable _ _)\n    exact h.1\n  (h_ss hx i).symm\n\n"}
{"name":"aeSeq.aeSeq_eq_mk_of_mem_aeSeqSet","module":"Mathlib.MeasureTheory.Function.AEMeasurableSequence","initialProofState":"ι : Sort u_1\nα : Type u_2\nβ : Type u_3\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSpace β\nf : ι → α → β\nμ : MeasureTheory.Measure α\np : α → (ι → β) → Prop\nhf : ∀ (i : ι), AEMeasurable (f i) μ\nx : α\nhx : Membership.mem (aeSeqSet hf p) x\ni : ι\n⊢ Eq (aeSeq hf p i x) (AEMeasurable.mk (f i) ⋯ x)","decl":"theorem aeSeq_eq_mk_of_mem_aeSeqSet (hf : ∀ i, AEMeasurable (f i) μ) {x : α}\n    (hx : x ∈ aeSeqSet hf p) (i : ι) : aeSeq hf p i x = (hf i).mk (f i) x := by\n  simp only [aeSeq, hx, if_true]\n\n"}
{"name":"aeSeq.aeSeq_eq_fun_of_mem_aeSeqSet","module":"Mathlib.MeasureTheory.Function.AEMeasurableSequence","initialProofState":"ι : Sort u_1\nα : Type u_2\nβ : Type u_3\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSpace β\nf : ι → α → β\nμ : MeasureTheory.Measure α\np : α → (ι → β) → Prop\nhf : ∀ (i : ι), AEMeasurable (f i) μ\nx : α\nhx : Membership.mem (aeSeqSet hf p) x\ni : ι\n⊢ Eq (aeSeq hf p i x) (f i x)","decl":"theorem aeSeq_eq_fun_of_mem_aeSeqSet (hf : ∀ i, AEMeasurable (f i) μ) {x : α}\n    (hx : x ∈ aeSeqSet hf p) (i : ι) : aeSeq hf p i x = f i x := by\n  simp only [aeSeq_eq_mk_of_mem_aeSeqSet hf hx i, mk_eq_fun_of_mem_aeSeqSet hf hx i]\n\n"}
{"name":"aeSeq.prop_of_mem_aeSeqSet","module":"Mathlib.MeasureTheory.Function.AEMeasurableSequence","initialProofState":"ι : Sort u_1\nα : Type u_2\nβ : Type u_3\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSpace β\nf : ι → α → β\nμ : MeasureTheory.Measure α\np : α → (ι → β) → Prop\nhf : ∀ (i : ι), AEMeasurable (f i) μ\nx : α\nhx : Membership.mem (aeSeqSet hf p) x\n⊢ p x fun n => aeSeq hf p n x","decl":"theorem prop_of_mem_aeSeqSet (hf : ∀ i, AEMeasurable (f i) μ) {x : α} (hx : x ∈ aeSeqSet hf p) :\n    p x fun n => aeSeq hf p n x := by\n  simp only [aeSeq, hx, if_true]\n  rw [funext fun n => mk_eq_fun_of_mem_aeSeqSet hf hx n]\n  have h_ss : aeSeqSet hf p ⊆ { x | p x fun n => f n x } := by\n    rw [← compl_compl { x | p x fun n => f n x }, aeSeqSet, Set.compl_subset_compl]\n    refine Set.Subset.trans (Set.compl_subset_compl.mpr ?_) (subset_toMeasurable _ _)\n    exact fun x hx => hx.2\n  have hx' := Set.mem_of_subset_of_mem h_ss hx\n  exact hx'\n\n"}
{"name":"aeSeq.fun_prop_of_mem_aeSeqSet","module":"Mathlib.MeasureTheory.Function.AEMeasurableSequence","initialProofState":"ι : Sort u_1\nα : Type u_2\nβ : Type u_3\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSpace β\nf : ι → α → β\nμ : MeasureTheory.Measure α\np : α → (ι → β) → Prop\nhf : ∀ (i : ι), AEMeasurable (f i) μ\nx : α\nhx : Membership.mem (aeSeqSet hf p) x\n⊢ p x fun n => f n x","decl":"theorem fun_prop_of_mem_aeSeqSet (hf : ∀ i, AEMeasurable (f i) μ) {x : α} (hx : x ∈ aeSeqSet hf p) :\n    p x fun n => f n x := by\n  have h_eq : (fun n => f n x) = fun n => aeSeq hf p n x :=\n    funext fun n => (aeSeq_eq_fun_of_mem_aeSeqSet hf hx n).symm\n  rw [h_eq]\n  exact prop_of_mem_aeSeqSet hf hx\n\n"}
{"name":"aeSeq.aeSeqSet_measurableSet","module":"Mathlib.MeasureTheory.Function.AEMeasurableSequence","initialProofState":"ι : Sort u_1\nα : Type u_2\nβ : Type u_3\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSpace β\nf : ι → α → β\nμ : MeasureTheory.Measure α\np : α → (ι → β) → Prop\nhf : ∀ (i : ι), AEMeasurable (f i) μ\n⊢ MeasurableSet (aeSeqSet hf p)","decl":"theorem aeSeqSet_measurableSet {hf : ∀ i, AEMeasurable (f i) μ} : MeasurableSet (aeSeqSet hf p) :=\n  (measurableSet_toMeasurable _ _).compl\n\n"}
{"name":"aeSeq.measurable","module":"Mathlib.MeasureTheory.Function.AEMeasurableSequence","initialProofState":"ι : Sort u_1\nα : Type u_2\nβ : Type u_3\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSpace β\nf : ι → α → β\nμ : MeasureTheory.Measure α\nhf : ∀ (i : ι), AEMeasurable (f i) μ\np : α → (ι → β) → Prop\ni : ι\n⊢ Measurable (aeSeq hf p i)","decl":"theorem measurable (hf : ∀ i, AEMeasurable (f i) μ) (p : α → (ι → β) → Prop) (i : ι) :\n    Measurable (aeSeq hf p i) :=\n  Measurable.ite aeSeqSet_measurableSet (hf i).measurable_mk <| measurable_const' fun _ _ => rfl\n\n"}
{"name":"aeSeq.measure_compl_aeSeqSet_eq_zero","module":"Mathlib.MeasureTheory.Function.AEMeasurableSequence","initialProofState":"ι : Sort u_1\nα : Type u_2\nβ : Type u_3\ninst✝² : MeasurableSpace α\ninst✝¹ : MeasurableSpace β\nf : ι → α → β\nμ : MeasureTheory.Measure α\np : α → (ι → β) → Prop\ninst✝ : Countable ι\nhf : ∀ (i : ι), AEMeasurable (f i) μ\nhp : Filter.Eventually (fun x => p x fun n => f n x) (MeasureTheory.ae μ)\n⊢ Eq (μ (HasCompl.compl (aeSeqSet hf p))) 0","decl":"theorem measure_compl_aeSeqSet_eq_zero [Countable ι] (hf : ∀ i, AEMeasurable (f i) μ)\n    (hp : ∀ᵐ x ∂μ, p x fun n => f n x) : μ (aeSeqSet hf p)ᶜ = 0 := by\n  rw [aeSeqSet, compl_compl, measure_toMeasurable]\n  have hf_eq := fun i => (hf i).ae_eq_mk\n  simp_rw [Filter.EventuallyEq, ← ae_all_iff] at hf_eq\n  exact Filter.Eventually.and hf_eq hp\n\n"}
{"name":"aeSeq.aeSeq_eq_mk_ae","module":"Mathlib.MeasureTheory.Function.AEMeasurableSequence","initialProofState":"ι : Sort u_1\nα : Type u_2\nβ : Type u_3\ninst✝² : MeasurableSpace α\ninst✝¹ : MeasurableSpace β\nf : ι → α → β\nμ : MeasureTheory.Measure α\np : α → (ι → β) → Prop\ninst✝ : Countable ι\nhf : ∀ (i : ι), AEMeasurable (f i) μ\nhp : Filter.Eventually (fun x => p x fun n => f n x) (MeasureTheory.ae μ)\n⊢ Filter.Eventually (fun a => ∀ (i : ι), Eq (aeSeq hf p i a) (AEMeasurable.mk (f i) ⋯ a)) (MeasureTheory.ae μ)","decl":"theorem aeSeq_eq_mk_ae [Countable ι] (hf : ∀ i, AEMeasurable (f i) μ)\n    (hp : ∀ᵐ x ∂μ, p x fun n => f n x) : ∀ᵐ a : α ∂μ, ∀ i : ι, aeSeq hf p i a = (hf i).mk (f i) a :=\n  have h_ss : aeSeqSet hf p ⊆ { a : α | ∀ i, aeSeq hf p i a = (hf i).mk (f i) a } := fun x hx i =>\n    by simp only [aeSeq, hx, if_true]\n  (ae_iff.2 (measure_compl_aeSeqSet_eq_zero hf hp)).mono h_ss\n\n"}
{"name":"aeSeq.aeSeq_eq_fun_ae","module":"Mathlib.MeasureTheory.Function.AEMeasurableSequence","initialProofState":"ι : Sort u_1\nα : Type u_2\nβ : Type u_3\ninst✝² : MeasurableSpace α\ninst✝¹ : MeasurableSpace β\nf : ι → α → β\nμ : MeasureTheory.Measure α\np : α → (ι → β) → Prop\ninst✝ : Countable ι\nhf : ∀ (i : ι), AEMeasurable (f i) μ\nhp : Filter.Eventually (fun x => p x fun n => f n x) (MeasureTheory.ae μ)\n⊢ Filter.Eventually (fun a => ∀ (i : ι), Eq (aeSeq hf p i a) (f i a)) (MeasureTheory.ae μ)","decl":"theorem aeSeq_eq_fun_ae [Countable ι] (hf : ∀ i, AEMeasurable (f i) μ)\n    (hp : ∀ᵐ x ∂μ, p x fun n => f n x) : ∀ᵐ a : α ∂μ, ∀ i : ι, aeSeq hf p i a = f i a :=\n  haveI h_ss : { a : α | ¬∀ i : ι, aeSeq hf p i a = f i a } ⊆ (aeSeqSet hf p)ᶜ := fun _ =>\n    mt fun hx i => aeSeq_eq_fun_of_mem_aeSeqSet hf hx i\n  measure_mono_null h_ss (measure_compl_aeSeqSet_eq_zero hf hp)\n\n"}
{"name":"aeSeq.aeSeq_n_eq_fun_n_ae","module":"Mathlib.MeasureTheory.Function.AEMeasurableSequence","initialProofState":"ι : Sort u_1\nα : Type u_2\nβ : Type u_3\ninst✝² : MeasurableSpace α\ninst✝¹ : MeasurableSpace β\nf : ι → α → β\nμ : MeasureTheory.Measure α\np : α → (ι → β) → Prop\ninst✝ : Countable ι\nhf : ∀ (i : ι), AEMeasurable (f i) μ\nhp : Filter.Eventually (fun x => p x fun n => f n x) (MeasureTheory.ae μ)\nn : ι\n⊢ (MeasureTheory.ae μ).EventuallyEq (aeSeq hf p n) (f n)","decl":"theorem aeSeq_n_eq_fun_n_ae [Countable ι] (hf : ∀ i, AEMeasurable (f i) μ)\n    (hp : ∀ᵐ x ∂μ, p x fun n => f n x) (n : ι) : aeSeq hf p n =ᵐ[μ] f n :=\n  ae_all_iff.mp (aeSeq_eq_fun_ae hf hp) n\n\n"}
{"name":"aeSeq.iSup","module":"Mathlib.MeasureTheory.Function.AEMeasurableSequence","initialProofState":"ι : Sort u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : MeasurableSpace α\ninst✝² : MeasurableSpace β\nf : ι → α → β\nμ : MeasureTheory.Measure α\np : α → (ι → β) → Prop\ninst✝¹ : CompleteLattice β\ninst✝ : Countable ι\nhf : ∀ (i : ι), AEMeasurable (f i) μ\nhp : Filter.Eventually (fun x => p x fun n => f n x) (MeasureTheory.ae μ)\n⊢ (MeasureTheory.ae μ).EventuallyEq (iSup fun n => aeSeq hf p n) (iSup fun n => f n)","decl":"theorem iSup [CompleteLattice β] [Countable ι] (hf : ∀ i, AEMeasurable (f i) μ)\n    (hp : ∀ᵐ x ∂μ, p x fun n => f n x) : ⨆ n, aeSeq hf p n =ᵐ[μ] ⨆ n, f n := by\n  simp_rw [Filter.EventuallyEq, ae_iff, iSup_apply]\n  have h_ss : aeSeqSet hf p ⊆ { a : α | ⨆ i : ι, aeSeq hf p i a = ⨆ i : ι, f i a } := by\n    intro x hx\n    congr\n    exact funext fun i => aeSeq_eq_fun_of_mem_aeSeqSet hf hx i\n  exact measure_mono_null (Set.compl_subset_compl.mpr h_ss) (measure_compl_aeSeqSet_eq_zero hf hp)\n\n"}
{"name":"aeSeq.iInf","module":"Mathlib.MeasureTheory.Function.AEMeasurableSequence","initialProofState":"ι : Sort u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : MeasurableSpace α\ninst✝² : MeasurableSpace β\nf : ι → α → β\nμ : MeasureTheory.Measure α\np : α → (ι → β) → Prop\ninst✝¹ : CompleteLattice β\ninst✝ : Countable ι\nhf : ∀ (i : ι), AEMeasurable (f i) μ\nhp : Filter.Eventually (fun x => p x fun n => f n x) (MeasureTheory.ae μ)\n⊢ (MeasureTheory.ae μ).EventuallyEq (iInf fun n => aeSeq hf p n) (iInf fun n => f n)","decl":"theorem iInf [CompleteLattice β] [Countable ι] (hf : ∀ i, AEMeasurable (f i) μ)\n    (hp : ∀ᵐ x ∂μ, p x fun n ↦ f n x) : ⨅ n, aeSeq hf p n =ᵐ[μ] ⨅ n, f n :=\n  iSup (β := βᵒᵈ) hf hp\n\n"}
