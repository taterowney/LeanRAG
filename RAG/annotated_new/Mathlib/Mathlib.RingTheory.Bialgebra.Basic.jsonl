{"name":"Bialgebra.mul_compr₂_counit","module":"Mathlib.RingTheory.Bialgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝¹ : CommSemiring R\ninst✝ : Semiring A\nself : Bialgebra R A\n⊢ Eq ((LinearMap.mul R A).compr₂ CoalgebraStruct.counit) ((LinearMap.mul R R).compl₁₂ CoalgebraStruct.counit CoalgebraStruct.counit)","decl":"/-- A bialgebra over a commutative (semi)ring `R` is both an algebra and a coalgebra over `R`, such\nthat the counit and comultiplication are algebra morphisms. -/\nclass Bialgebra (R : Type u) (A : Type v) [CommSemiring R] [Semiring A] extends\n    Algebra R A, Coalgebra R A where\n  -- The counit is an algebra morphism\n  /-- The counit on a bialgebra preserves 1. -/\n  counit_one : counit 1 = 1\n  /-- The counit on a bialgebra preserves multiplication. Note that this is written\n  in a rather obscure way: it says that two bilinear maps `A →ₗ[R] A →ₗ[R]` are equal.\n  The two corresponding equal linear maps `A ⊗[R] A →ₗ[R]`\n  are the following: the first factors through `A` and is multiplication on `A` followed\n  by `counit`. The second factors through `R ⊗[R] R`, and is `counit ⊗ counit` followed by\n  multiplication on `R`.\n\n  See `Bialgebra.mk'` for a constructor for bialgebras which uses\n  the more familiar but mathematically equivalent `counit (a * b) = counit a * counit b`. -/\n  mul_compr₂_counit : (LinearMap.mul R A).compr₂ counit = (LinearMap.mul R R).compl₁₂ counit counit\n  -- The comultiplication is an algebra morphism\n  /-- The comultiplication on a bialgebra preserves `1`. -/\n  comul_one : comul 1 = 1\n  /-- The comultiplication on a bialgebra preserves multiplication. This is written in\n  a rather obscure way: it says that two bilinear maps `A →ₗ[R] A →ₗ[R] (A ⊗[R] A)`\n  are equal. The corresponding equal linear maps `A ⊗[R] A →ₗ[R] A ⊗[R] A`\n  are firstly multiplication followed by `comul`, and secondly `comul ⊗ comul` followed\n  by multiplication on `A ⊗[R] A`.\n\n  See `Bialgebra.mk'` for a constructor for bialgebras which uses the more familiar\n  but mathematically equivalent `comul (a * b) = comul a * comul b`. -/\n  mul_compr₂_comul :\n    (LinearMap.mul R A).compr₂ comul = (LinearMap.mul R (A ⊗[R] A)).compl₁₂ comul comul\n\n"}
{"name":"Bialgebra.mul_compr₂_comul","module":"Mathlib.RingTheory.Bialgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝¹ : CommSemiring R\ninst✝ : Semiring A\nself : Bialgebra R A\n⊢ Eq ((LinearMap.mul R A).compr₂ CoalgebraStruct.comul) ((LinearMap.mul R (TensorProduct R A A)).compl₁₂ CoalgebraStruct.comul CoalgebraStruct.comul)","decl":"/-- A bialgebra over a commutative (semi)ring `R` is both an algebra and a coalgebra over `R`, such\nthat the counit and comultiplication are algebra morphisms. -/\nclass Bialgebra (R : Type u) (A : Type v) [CommSemiring R] [Semiring A] extends\n    Algebra R A, Coalgebra R A where\n  -- The counit is an algebra morphism\n  /-- The counit on a bialgebra preserves 1. -/\n  counit_one : counit 1 = 1\n  /-- The counit on a bialgebra preserves multiplication. Note that this is written\n  in a rather obscure way: it says that two bilinear maps `A →ₗ[R] A →ₗ[R]` are equal.\n  The two corresponding equal linear maps `A ⊗[R] A →ₗ[R]`\n  are the following: the first factors through `A` and is multiplication on `A` followed\n  by `counit`. The second factors through `R ⊗[R] R`, and is `counit ⊗ counit` followed by\n  multiplication on `R`.\n\n  See `Bialgebra.mk'` for a constructor for bialgebras which uses\n  the more familiar but mathematically equivalent `counit (a * b) = counit a * counit b`. -/\n  mul_compr₂_counit : (LinearMap.mul R A).compr₂ counit = (LinearMap.mul R R).compl₁₂ counit counit\n  -- The comultiplication is an algebra morphism\n  /-- The comultiplication on a bialgebra preserves `1`. -/\n  comul_one : comul 1 = 1\n  /-- The comultiplication on a bialgebra preserves multiplication. This is written in\n  a rather obscure way: it says that two bilinear maps `A →ₗ[R] A →ₗ[R] (A ⊗[R] A)`\n  are equal. The corresponding equal linear maps `A ⊗[R] A →ₗ[R] A ⊗[R] A`\n  are firstly multiplication followed by `comul`, and secondly `comul ⊗ comul` followed\n  by multiplication on `A ⊗[R] A`.\n\n  See `Bialgebra.mk'` for a constructor for bialgebras which uses the more familiar\n  but mathematically equivalent `comul (a * b) = comul a * comul b`. -/\n  mul_compr₂_comul :\n    (LinearMap.mul R A).compr₂ comul = (LinearMap.mul R (A ⊗[R] A)).compl₁₂ comul comul\n\n"}
{"name":"Bialgebra.comul_one","module":"Mathlib.RingTheory.Bialgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝¹ : CommSemiring R\ninst✝ : Semiring A\nself : Bialgebra R A\n⊢ Eq (CoalgebraStruct.comul 1) 1","decl":"/-- A bialgebra over a commutative (semi)ring `R` is both an algebra and a coalgebra over `R`, such\nthat the counit and comultiplication are algebra morphisms. -/\nclass Bialgebra (R : Type u) (A : Type v) [CommSemiring R] [Semiring A] extends\n    Algebra R A, Coalgebra R A where\n  -- The counit is an algebra morphism\n  /-- The counit on a bialgebra preserves 1. -/\n  counit_one : counit 1 = 1\n  /-- The counit on a bialgebra preserves multiplication. Note that this is written\n  in a rather obscure way: it says that two bilinear maps `A →ₗ[R] A →ₗ[R]` are equal.\n  The two corresponding equal linear maps `A ⊗[R] A →ₗ[R]`\n  are the following: the first factors through `A` and is multiplication on `A` followed\n  by `counit`. The second factors through `R ⊗[R] R`, and is `counit ⊗ counit` followed by\n  multiplication on `R`.\n\n  See `Bialgebra.mk'` for a constructor for bialgebras which uses\n  the more familiar but mathematically equivalent `counit (a * b) = counit a * counit b`. -/\n  mul_compr₂_counit : (LinearMap.mul R A).compr₂ counit = (LinearMap.mul R R).compl₁₂ counit counit\n  -- The comultiplication is an algebra morphism\n  /-- The comultiplication on a bialgebra preserves `1`. -/\n  comul_one : comul 1 = 1\n  /-- The comultiplication on a bialgebra preserves multiplication. This is written in\n  a rather obscure way: it says that two bilinear maps `A →ₗ[R] A →ₗ[R] (A ⊗[R] A)`\n  are equal. The corresponding equal linear maps `A ⊗[R] A →ₗ[R] A ⊗[R] A`\n  are firstly multiplication followed by `comul`, and secondly `comul ⊗ comul` followed\n  by multiplication on `A ⊗[R] A`.\n\n  See `Bialgebra.mk'` for a constructor for bialgebras which uses the more familiar\n  but mathematically equivalent `comul (a * b) = comul a * comul b`. -/\n  mul_compr₂_comul :\n    (LinearMap.mul R A).compr₂ comul = (LinearMap.mul R (A ⊗[R] A)).compl₁₂ comul comul\n\n"}
{"name":"Bialgebra.counit_one","module":"Mathlib.RingTheory.Bialgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝¹ : CommSemiring R\ninst✝ : Semiring A\nself : Bialgebra R A\n⊢ Eq (CoalgebraStruct.counit 1) 1","decl":"/-- A bialgebra over a commutative (semi)ring `R` is both an algebra and a coalgebra over `R`, such\nthat the counit and comultiplication are algebra morphisms. -/\nclass Bialgebra (R : Type u) (A : Type v) [CommSemiring R] [Semiring A] extends\n    Algebra R A, Coalgebra R A where\n  -- The counit is an algebra morphism\n  /-- The counit on a bialgebra preserves 1. -/\n  counit_one : counit 1 = 1\n  /-- The counit on a bialgebra preserves multiplication. Note that this is written\n  in a rather obscure way: it says that two bilinear maps `A →ₗ[R] A →ₗ[R]` are equal.\n  The two corresponding equal linear maps `A ⊗[R] A →ₗ[R]`\n  are the following: the first factors through `A` and is multiplication on `A` followed\n  by `counit`. The second factors through `R ⊗[R] R`, and is `counit ⊗ counit` followed by\n  multiplication on `R`.\n\n  See `Bialgebra.mk'` for a constructor for bialgebras which uses\n  the more familiar but mathematically equivalent `counit (a * b) = counit a * counit b`. -/\n  mul_compr₂_counit : (LinearMap.mul R A).compr₂ counit = (LinearMap.mul R R).compl₁₂ counit counit\n  -- The comultiplication is an algebra morphism\n  /-- The comultiplication on a bialgebra preserves `1`. -/\n  comul_one : comul 1 = 1\n  /-- The comultiplication on a bialgebra preserves multiplication. This is written in\n  a rather obscure way: it says that two bilinear maps `A →ₗ[R] A →ₗ[R] (A ⊗[R] A)`\n  are equal. The corresponding equal linear maps `A ⊗[R] A →ₗ[R] A ⊗[R] A`\n  are firstly multiplication followed by `comul`, and secondly `comul ⊗ comul` followed\n  by multiplication on `A ⊗[R] A`.\n\n  See `Bialgebra.mk'` for a constructor for bialgebras which uses the more familiar\n  but mathematically equivalent `comul (a * b) = comul a * comul b`. -/\n  mul_compr₂_comul :\n    (LinearMap.mul R A).compr₂ comul = (LinearMap.mul R (A ⊗[R] A)).compl₁₂ comul comul\n\n"}
{"name":"Bialgebra.counit_mul","module":"Mathlib.RingTheory.Bialgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Bialgebra R A\na b : A\n⊢ Eq (CoalgebraStruct.counit (HMul.hMul a b)) (HMul.hMul (CoalgebraStruct.counit a) (CoalgebraStruct.counit b))","decl":"lemma counit_mul (a b : A) : counit (R := R) (a * b) = counit a * counit b :=\n  DFunLike.congr_fun (DFunLike.congr_fun mul_compr₂_counit a) b\n\n"}
{"name":"Bialgebra.comul_mul","module":"Mathlib.RingTheory.Bialgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Bialgebra R A\na b : A\n⊢ Eq (CoalgebraStruct.comul (HMul.hMul a b)) (HMul.hMul (CoalgebraStruct.comul a) (CoalgebraStruct.comul b))","decl":"lemma comul_mul (a b : A) : comul (R := R) (a * b) = comul a * comul b :=\n  DFunLike.congr_fun (DFunLike.congr_fun mul_compr₂_comul a) b\n\n"}
{"name":"Bialgebra.counitAlgHom_apply","module":"Mathlib.RingTheory.Bialgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Bialgebra R A\na : A\n⊢ Eq ((Bialgebra.counitAlgHom R A) a) (CoalgebraStruct.counit a)","decl":"/-- `counitAlgHom R A` is the counit of the `R`-bialgebra `A`, as an `R`-algebra map. -/\n@[simps!]\ndef counitAlgHom : A →ₐ[R] R :=\n  .ofLinearMap counit counit_one counit_mul\n\n"}
{"name":"Bialgebra.comulAlgHom_apply","module":"Mathlib.RingTheory.Bialgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Bialgebra R A\na : A\n⊢ Eq ((Bialgebra.comulAlgHom R A) a) (CoalgebraStruct.comul a)","decl":"/-- `comulAlgHom R A` is the comultiplication of the `R`-bialgebra `A`, as an `R`-algebra map. -/\n@[simps!]\ndef comulAlgHom : A →ₐ[R] A ⊗[R] A :=\n  .ofLinearMap comul comul_one comul_mul\n\n"}
{"name":"Bialgebra.counit_algebraMap","module":"Mathlib.RingTheory.Bialgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Bialgebra R A\nr : R\n⊢ Eq (CoalgebraStruct.counit ((algebraMap R A) r)) r","decl":"@[simp] lemma counit_algebraMap (r : R) : counit (R := R) (algebraMap R A r) = r :=\n  (counitAlgHom R A).commutes r\n\n"}
{"name":"Bialgebra.comul_algebraMap","module":"Mathlib.RingTheory.Bialgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Bialgebra R A\nr : R\n⊢ Eq (CoalgebraStruct.comul ((algebraMap R A) r)) ((algebraMap R (TensorProduct R A A)) r)","decl":"@[simp] lemma comul_algebraMap (r : R) :\n    comul (R := R) (algebraMap R A r) = algebraMap R (A ⊗[R] A) r :=\n  (comulAlgHom R A).commutes r\n\n"}
{"name":"Bialgebra.counit_natCast","module":"Mathlib.RingTheory.Bialgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Bialgebra R A\nn : Nat\n⊢ Eq (CoalgebraStruct.counit ↑n) ↑n","decl":"@[simp] lemma counit_natCast (n : ℕ) : counit (R := R) (n : A) = n :=\n  map_natCast (counitAlgHom R A) _\n\n"}
{"name":"Bialgebra.comul_natCast","module":"Mathlib.RingTheory.Bialgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Bialgebra R A\nn : Nat\n⊢ Eq (CoalgebraStruct.comul ↑n) ↑n","decl":"@[simp] lemma comul_natCast (n : ℕ) : comul (R := R) (n : A) = n :=\n  map_natCast (comulAlgHom R A) _\n\n"}
{"name":"Bialgebra.counit_pow","module":"Mathlib.RingTheory.Bialgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Bialgebra R A\na : A\nn : Nat\n⊢ Eq (CoalgebraStruct.counit (HPow.hPow a n)) (HPow.hPow (CoalgebraStruct.counit a) n)","decl":"@[simp] lemma counit_pow (a : A) (n : ℕ) : counit (R := R) (a ^ n) = counit a ^ n :=\n  map_pow (counitAlgHom R A) a n\n\n"}
{"name":"Bialgebra.comul_pow","module":"Mathlib.RingTheory.Bialgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Bialgebra R A\na : A\nn : Nat\n⊢ Eq (CoalgebraStruct.comul (HPow.hPow a n)) (HPow.hPow (CoalgebraStruct.comul a) n)","decl":"@[simp] lemma comul_pow (a : A) (n : ℕ) : comul (R := R) (a ^ n) = comul a ^ n :=\n  map_pow (comulAlgHom R A) a n\n\n"}
