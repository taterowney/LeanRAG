{"name":"CategoryTheory.NatTrans.appHom_apply","module":"Mathlib.CategoryTheory.Preadditive.FunctorCategory","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝² : CategoryTheory.Category.{u_3, u_1} C\ninst✝¹ : CategoryTheory.Category.{u_4, u_2} D\ninst✝ : CategoryTheory.Preadditive D\nF G : CategoryTheory.Functor C D\nX : C\nα : Quiver.Hom F G\n⊢ Eq ((CategoryTheory.NatTrans.appHom X) α) (α.app X)","decl":"/-- Application of a natural transformation at a fixed object,\nas group homomorphism -/\n@[simps]\ndef appHom (X : C) : (F ⟶ G) →+ (F.obj X ⟶ G.obj X) where\n  toFun α := α.app X\n  map_zero' := rfl\n  map_add' _ _ := rfl\n\n"}
{"name":"CategoryTheory.NatTrans.app_zero","module":"Mathlib.CategoryTheory.Preadditive.FunctorCategory","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝² : CategoryTheory.Category.{u_4, u_1} C\ninst✝¹ : CategoryTheory.Category.{u_3, u_2} D\ninst✝ : CategoryTheory.Preadditive D\nF G : CategoryTheory.Functor C D\nX : C\n⊢ Eq (CategoryTheory.NatTrans.app 0 X) 0","decl":"@[simp]\ntheorem app_zero (X : C) : (0 : F ⟶ G).app X = 0 :=\n  rfl\n\n"}
{"name":"CategoryTheory.NatTrans.app_add","module":"Mathlib.CategoryTheory.Preadditive.FunctorCategory","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝² : CategoryTheory.Category.{u_4, u_1} C\ninst✝¹ : CategoryTheory.Category.{u_3, u_2} D\ninst✝ : CategoryTheory.Preadditive D\nF G : CategoryTheory.Functor C D\nX : C\nα β : Quiver.Hom F G\n⊢ Eq ((HAdd.hAdd α β).app X) (HAdd.hAdd (α.app X) (β.app X))","decl":"@[simp]\ntheorem app_add (X : C) (α β : F ⟶ G) : (α + β).app X = α.app X + β.app X :=\n  rfl\n\n"}
{"name":"CategoryTheory.NatTrans.app_sub","module":"Mathlib.CategoryTheory.Preadditive.FunctorCategory","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝² : CategoryTheory.Category.{u_4, u_1} C\ninst✝¹ : CategoryTheory.Category.{u_3, u_2} D\ninst✝ : CategoryTheory.Preadditive D\nF G : CategoryTheory.Functor C D\nX : C\nα β : Quiver.Hom F G\n⊢ Eq ((HSub.hSub α β).app X) (HSub.hSub (α.app X) (β.app X))","decl":"@[simp]\ntheorem app_sub (X : C) (α β : F ⟶ G) : (α - β).app X = α.app X - β.app X :=\n  rfl\n\n"}
{"name":"CategoryTheory.NatTrans.app_neg","module":"Mathlib.CategoryTheory.Preadditive.FunctorCategory","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝² : CategoryTheory.Category.{u_4, u_1} C\ninst✝¹ : CategoryTheory.Category.{u_3, u_2} D\ninst✝ : CategoryTheory.Preadditive D\nF G : CategoryTheory.Functor C D\nX : C\nα : Quiver.Hom F G\n⊢ Eq ((Neg.neg α).app X) (Neg.neg (α.app X))","decl":"@[simp]\ntheorem app_neg (X : C) (α : F ⟶ G) : (-α).app X = -α.app X :=\n  rfl\n\n"}
{"name":"CategoryTheory.NatTrans.app_nsmul","module":"Mathlib.CategoryTheory.Preadditive.FunctorCategory","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝² : CategoryTheory.Category.{u_4, u_1} C\ninst✝¹ : CategoryTheory.Category.{u_3, u_2} D\ninst✝ : CategoryTheory.Preadditive D\nF G : CategoryTheory.Functor C D\nX : C\nα : Quiver.Hom F G\nn : Nat\n⊢ Eq ((HSMul.hSMul n α).app X) (HSMul.hSMul n (α.app X))","decl":"@[simp]\ntheorem app_nsmul (X : C) (α : F ⟶ G) (n : ℕ) : (n • α).app X = n • α.app X :=\n  (appHom X).map_nsmul α n\n\n"}
{"name":"CategoryTheory.NatTrans.app_zsmul","module":"Mathlib.CategoryTheory.Preadditive.FunctorCategory","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝² : CategoryTheory.Category.{u_4, u_1} C\ninst✝¹ : CategoryTheory.Category.{u_3, u_2} D\ninst✝ : CategoryTheory.Preadditive D\nF G : CategoryTheory.Functor C D\nX : C\nα : Quiver.Hom F G\nn : Int\n⊢ Eq ((HSMul.hSMul n α).app X) (HSMul.hSMul n (α.app X))","decl":"@[simp]\ntheorem app_zsmul (X : C) (α : F ⟶ G) (n : ℤ) : (n • α).app X = n • α.app X :=\n  (appHom X : (F ⟶ G) →+ (F.obj X ⟶ G.obj X)).map_zsmul α n\n\n"}
{"name":"CategoryTheory.NatTrans.app_units_zsmul","module":"Mathlib.CategoryTheory.Preadditive.FunctorCategory","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝² : CategoryTheory.Category.{u_4, u_1} C\ninst✝¹ : CategoryTheory.Category.{u_3, u_2} D\ninst✝ : CategoryTheory.Preadditive D\nF G : CategoryTheory.Functor C D\nX : C\nα : Quiver.Hom F G\nn : Units Int\n⊢ Eq ((HSMul.hSMul n α).app X) (HSMul.hSMul n (α.app X))","decl":"@[simp]\ntheorem app_units_zsmul (X : C) (α : F ⟶ G) (n : ℤˣ) : (n • α).app X = n • α.app X := by\n  apply app_zsmul\n\n"}
{"name":"CategoryTheory.NatTrans.app_sum","module":"Mathlib.CategoryTheory.Preadditive.FunctorCategory","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝² : CategoryTheory.Category.{u_5, u_1} C\ninst✝¹ : CategoryTheory.Category.{u_4, u_2} D\ninst✝ : CategoryTheory.Preadditive D\nF G : CategoryTheory.Functor C D\nι : Type u_3\ns : Finset ι\nX : C\nα : ι → Quiver.Hom F G\n⊢ Eq ((s.sum fun i => α i).app X) (s.sum fun i => (α i).app X)","decl":"@[simp]\ntheorem app_sum {ι : Type*} (s : Finset ι) (X : C) (α : ι → (F ⟶ G)) :\n    (∑ i ∈ s, α i).app X = ∑ i ∈ s, (α i).app X := by\n  simp only [← appHom_apply, map_sum]\n\n"}
