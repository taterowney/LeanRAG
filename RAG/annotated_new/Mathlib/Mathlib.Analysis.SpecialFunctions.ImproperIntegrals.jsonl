{"name":"integrableOn_exp_Iic","module":"Mathlib.Analysis.SpecialFunctions.ImproperIntegrals","initialProofState":"c : Real\n‚ä¢ MeasureTheory.IntegrableOn Real.exp (Set.Iic c) MeasureTheory.MeasureSpace.volume","decl":"theorem integrableOn_exp_Iic (c : ‚Ñù) : IntegrableOn exp (Iic c) := by\n  refine\n    integrableOn_Iic_of_intervalIntegral_norm_bounded (exp c) c\n      (fun y => intervalIntegrable_exp.1) tendsto_id\n      (eventually_of_mem (Iic_mem_atBot 0) fun y _ => ?_)\n  simp_rw [norm_of_nonneg (exp_pos _).le, integral_exp, sub_le_self_iff]\n  exact (exp_pos _).le\n\n"}
{"name":"integral_exp_Iic","module":"Mathlib.Analysis.SpecialFunctions.ImproperIntegrals","initialProofState":"c : Real\n‚ä¢ Eq (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.Iic c)) fun x => Real.exp x) (Real.exp c)","decl":"theorem integral_exp_Iic (c : ‚Ñù) : ‚à´ x : ‚Ñù in Iic c, exp x = exp c := by\n  refine\n    tendsto_nhds_unique\n      (intervalIntegral_tendsto_integral_Iic _ (integrableOn_exp_Iic _) tendsto_id) ?_\n  simp_rw [integral_exp, show ùìù (exp c) = ùìù (exp c - 0) by rw [sub_zero]]\n  exact tendsto_exp_atBot.const_sub _\n\n"}
{"name":"integral_exp_Iic_zero","module":"Mathlib.Analysis.SpecialFunctions.ImproperIntegrals","initialProofState":"‚ä¢ Eq (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.Iic 0)) fun x => Real.exp x) 1","decl":"theorem integral_exp_Iic_zero : ‚à´ x : ‚Ñù in Iic 0, exp x = 1 :=\n  exp_zero ‚ñ∏ integral_exp_Iic 0\n\n"}
{"name":"integral_exp_neg_Ioi","module":"Mathlib.Analysis.SpecialFunctions.ImproperIntegrals","initialProofState":"c : Real\n‚ä¢ Eq (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.Ioi c)) fun x => Real.exp (Neg.neg x)) (Real.exp (Neg.neg c))","decl":"theorem integral_exp_neg_Ioi (c : ‚Ñù) : (‚à´ x : ‚Ñù in Ioi c, exp (-x)) = exp (-c) := by\n  simpa only [integral_comp_neg_Ioi] using integral_exp_Iic (-c)\n\n"}
{"name":"integral_exp_neg_Ioi_zero","module":"Mathlib.Analysis.SpecialFunctions.ImproperIntegrals","initialProofState":"‚ä¢ Eq (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.Ioi 0)) fun x => Real.exp (Neg.neg x)) 1","decl":"theorem integral_exp_neg_Ioi_zero : (‚à´ x : ‚Ñù in Ioi 0, exp (-x)) = 1 := by\n  simpa only [neg_zero, exp_zero] using integral_exp_neg_Ioi 0\n\n"}
{"name":"integrableOn_Ioi_rpow_of_lt","module":"Mathlib.Analysis.SpecialFunctions.ImproperIntegrals","initialProofState":"a : Real\nha : LT.lt a (-1)\nc : Real\nhc : LT.lt 0 c\n‚ä¢ MeasureTheory.IntegrableOn (fun t => HPow.hPow t a) (Set.Ioi c) MeasureTheory.MeasureSpace.volume","decl":"/-- If `0 < c`, then `(fun t : ‚Ñù ‚Ü¶ t ^ a)` is integrable on `(c, ‚àû)` for all `a < -1`. -/\ntheorem integrableOn_Ioi_rpow_of_lt {a : ‚Ñù} (ha : a < -1) {c : ‚Ñù} (hc : 0 < c) :\n    IntegrableOn (fun t : ‚Ñù => t ^ a) (Ioi c) := by\n  have hd : ‚àÄ x ‚àà Ici c, HasDerivAt (fun t => t ^ (a + 1) / (a + 1)) (x ^ a) x := by\n    intro x hx\n    -- Porting note: helped `convert` with explicit arguments\n    convert (hasDerivAt_rpow_const (p := a + 1) (Or.inl (hc.trans_le hx).ne')).div_const _ using 1\n    field_simp [show a + 1 ‚â† 0 from ne_of_lt (by linarith), mul_comm]\n  have ht : Tendsto (fun t => t ^ (a + 1) / (a + 1)) atTop (ùìù (0 / (a + 1))) := by\n    apply Tendsto.div_const\n    simpa only [neg_neg] using tendsto_rpow_neg_atTop (by linarith : 0 < -(a + 1))\n  exact\n    integrableOn_Ioi_deriv_of_nonneg' hd (fun t ht => rpow_nonneg (hc.trans ht).le a) ht\n\n"}
{"name":"integrableOn_Ioi_rpow_iff","module":"Mathlib.Analysis.SpecialFunctions.ImproperIntegrals","initialProofState":"s t : Real\nht : LT.lt 0 t\n‚ä¢ Iff (MeasureTheory.IntegrableOn (fun x => HPow.hPow x s) (Set.Ioi t) MeasureTheory.MeasureSpace.volume) (LT.lt s (-1))","decl":"theorem integrableOn_Ioi_rpow_iff {s t : ‚Ñù} (ht : 0 < t) :\n    IntegrableOn (fun x ‚Ü¶ x ^ s) (Ioi t) ‚Üî s < -1 := by\n  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ integrableOn_Ioi_rpow_of_lt h ht‚ü©\n  contrapose! h\n  intro H\n  have H' : IntegrableOn (fun x ‚Ü¶ x ^ s) (Ioi (max 1 t)) :=\n    H.mono (Set.Ioi_subset_Ioi (le_max_right _ _)) le_rfl\n  have : IntegrableOn (fun x ‚Ü¶ x‚Åª¬π) (Ioi (max 1 t)) := by\n    apply H'.mono' measurable_inv.aestronglyMeasurable\n    filter_upwards [ae_restrict_mem measurableSet_Ioi] with x hx\n    have x_one : 1 ‚â§ x := ((le_max_left _ _).trans_lt (mem_Ioi.1 hx)).le\n    simp only [norm_inv, Real.norm_eq_abs, abs_of_nonneg (zero_le_one.trans x_one)]\n    rw [‚Üê Real.rpow_neg_one x]\n    exact Real.rpow_le_rpow_of_exponent_le x_one h\n  exact not_IntegrableOn_Ioi_inv this\n\n"}
{"name":"integrableAtFilter_rpow_atTop_iff","module":"Mathlib.Analysis.SpecialFunctions.ImproperIntegrals","initialProofState":"s : Real\n‚ä¢ Iff (MeasureTheory.IntegrableAtFilter (fun x => HPow.hPow x s) Filter.atTop MeasureTheory.MeasureSpace.volume) (LT.lt s (-1))","decl":"theorem integrableAtFilter_rpow_atTop_iff {s : ‚Ñù} :\n    IntegrableAtFilter (fun x : ‚Ñù ‚Ü¶ x ^ s) atTop ‚Üî s < -1 := by\n  refine ‚ü®fun ‚ü®t, ht, hint‚ü© ‚Ü¶ ?_, fun h ‚Ü¶\n    ‚ü®Set.Ioi 1, Ioi_mem_atTop 1, (integrableOn_Ioi_rpow_iff zero_lt_one).mpr h‚ü©‚ü©\n  obtain ‚ü®a, ha‚ü© := mem_atTop_sets.mp ht\n  refine (integrableOn_Ioi_rpow_iff (zero_lt_one.trans_le (le_max_right a 1))).mp ?_\n  exact hint.mono_set <| fun x hx ‚Ü¶ ha _ <| (le_max_left a 1).trans hx.le\n\n"}
{"name":"not_integrableOn_Ioi_rpow","module":"Mathlib.Analysis.SpecialFunctions.ImproperIntegrals","initialProofState":"s : Real\n‚ä¢ Not (MeasureTheory.IntegrableOn (fun x => HPow.hPow x s) (Set.Ioi 0) MeasureTheory.MeasureSpace.volume)","decl":"/-- The real power function with any exponent is not integrable on `(0, +‚àû)`. -/\ntheorem not_integrableOn_Ioi_rpow (s : ‚Ñù) : ¬¨ IntegrableOn (fun x ‚Ü¶ x ^ s) (Ioi (0 : ‚Ñù)) := by\n  intro h\n  rcases le_or_lt s (-1) with hs|hs\n  ¬∑ have : IntegrableOn (fun x ‚Ü¶ x ^ s) (Ioo (0 : ‚Ñù) 1) := h.mono Ioo_subset_Ioi_self le_rfl\n    rw [integrableOn_Ioo_rpow_iff zero_lt_one] at this\n    exact hs.not_lt this\n  ¬∑ have : IntegrableOn (fun x ‚Ü¶ x ^ s) (Ioi (1 : ‚Ñù)) := h.mono (Ioi_subset_Ioi zero_le_one) le_rfl\n    rw [integrableOn_Ioi_rpow_iff zero_lt_one] at this\n    exact hs.not_lt this\n\n"}
{"name":"setIntegral_Ioi_zero_rpow","module":"Mathlib.Analysis.SpecialFunctions.ImproperIntegrals","initialProofState":"s : Real\n‚ä¢ Eq (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.Ioi 0)) fun x => HPow.hPow x s) 0","decl":"theorem setIntegral_Ioi_zero_rpow (s : ‚Ñù) : ‚à´ x in Ioi (0 : ‚Ñù), x ^ s = 0 :=\n  MeasureTheory.integral_undef (not_integrableOn_Ioi_rpow s)\n\n"}
{"name":"integral_Ioi_rpow_of_lt","module":"Mathlib.Analysis.SpecialFunctions.ImproperIntegrals","initialProofState":"a : Real\nha : LT.lt a (-1)\nc : Real\nhc : LT.lt 0 c\n‚ä¢ Eq (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.Ioi c)) fun t => HPow.hPow t a) (HDiv.hDiv (Neg.neg (HPow.hPow c (HAdd.hAdd a 1))) (HAdd.hAdd a 1))","decl":"theorem integral_Ioi_rpow_of_lt {a : ‚Ñù} (ha : a < -1) {c : ‚Ñù} (hc : 0 < c) :\n    ‚à´ t : ‚Ñù in Ioi c, t ^ a = -c ^ (a + 1) / (a + 1) := by\n  have hd : ‚àÄ x ‚àà Ici c, HasDerivAt (fun t => t ^ (a + 1) / (a + 1)) (x ^ a) x := by\n    intro x hx\n    convert (hasDerivAt_rpow_const (p := a + 1) (Or.inl (hc.trans_le hx).ne')).div_const _ using 1\n    field_simp [show a + 1 ‚â† 0 from ne_of_lt (by linarith), mul_comm]\n  have ht : Tendsto (fun t => t ^ (a + 1) / (a + 1)) atTop (ùìù (0 / (a + 1))) := by\n    apply Tendsto.div_const\n    simpa only [neg_neg] using tendsto_rpow_neg_atTop (by linarith : 0 < -(a + 1))\n  convert integral_Ioi_of_hasDerivAt_of_tendsto' hd (integrableOn_Ioi_rpow_of_lt ha hc) ht using 1\n  simp only [neg_div, zero_div, zero_sub]\n\n"}
{"name":"integrableOn_Ioi_cpow_of_lt","module":"Mathlib.Analysis.SpecialFunctions.ImproperIntegrals","initialProofState":"a : Complex\nha : LT.lt a.re (-1)\nc : Real\nhc : LT.lt 0 c\n‚ä¢ MeasureTheory.IntegrableOn (fun t => HPow.hPow (‚Üët) a) (Set.Ioi c) MeasureTheory.MeasureSpace.volume","decl":"theorem integrableOn_Ioi_cpow_of_lt {a : ‚ÑÇ} (ha : a.re < -1) {c : ‚Ñù} (hc : 0 < c) :\n    IntegrableOn (fun t : ‚Ñù => (t : ‚ÑÇ) ^ a) (Ioi c) := by\n  rw [IntegrableOn, ‚Üê integrable_norm_iff, ‚Üê IntegrableOn]\n  ¬∑ refine (integrableOn_Ioi_rpow_of_lt ha hc).congr_fun (fun x hx => ?_) measurableSet_Ioi\n    ¬∑ dsimp only\n      rw [Complex.norm_eq_abs, Complex.abs_cpow_eq_rpow_re_of_pos (hc.trans hx)]\n  ¬∑ refine ContinuousOn.aestronglyMeasurable (fun t ht => ?_) measurableSet_Ioi\n    exact\n      (Complex.continuousAt_ofReal_cpow_const _ _ (Or.inr (hc.trans ht).ne')).continuousWithinAt\n\n"}
{"name":"integrableOn_Ioi_cpow_iff","module":"Mathlib.Analysis.SpecialFunctions.ImproperIntegrals","initialProofState":"s : Complex\nt : Real\nht : LT.lt 0 t\n‚ä¢ Iff (MeasureTheory.IntegrableOn (fun x => HPow.hPow (‚Üëx) s) (Set.Ioi t) MeasureTheory.MeasureSpace.volume) (LT.lt s.re (-1))","decl":"theorem integrableOn_Ioi_cpow_iff {s : ‚ÑÇ} {t : ‚Ñù} (ht : 0 < t) :\n    IntegrableOn (fun x : ‚Ñù ‚Ü¶ (x : ‚ÑÇ) ^ s) (Ioi t) ‚Üî s.re < -1 := by\n  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ integrableOn_Ioi_cpow_of_lt h ht‚ü©\n  have B : IntegrableOn (fun a ‚Ü¶ a ^ s.re) (Ioi t) := by\n    apply (integrableOn_congr_fun _ measurableSet_Ioi).1 h.norm\n    intro a ha\n    have : 0 < a := ht.trans ha\n    simp [Complex.abs_cpow_eq_rpow_re_of_pos this]\n  rwa [integrableOn_Ioi_rpow_iff ht] at B\n\n"}
{"name":"integrableOn_Ioi_deriv_ofReal_cpow","module":"Mathlib.Analysis.SpecialFunctions.ImproperIntegrals","initialProofState":"s : Complex\nt : Real\nht : LT.lt 0 t\nhs : LT.lt s.re 0\n‚ä¢ MeasureTheory.IntegrableOn (deriv fun x => HPow.hPow (‚Üëx) s) (Set.Ioi t) MeasureTheory.MeasureSpace.volume","decl":"theorem integrableOn_Ioi_deriv_ofReal_cpow {s : ‚ÑÇ} {t : ‚Ñù} (ht : 0 < t) (hs : s.re < 0) :\n    IntegrableOn (deriv fun x : ‚Ñù ‚Ü¶ (x : ‚ÑÇ) ^ s) (Set.Ioi t) := by\n  have h : IntegrableOn (fun x : ‚Ñù ‚Ü¶ s * x ^ (s - 1)) (Set.Ioi t) := by\n    refine (integrableOn_Ioi_cpow_of_lt ?_ ht).const_mul _\n    rwa [Complex.sub_re, Complex.one_re, sub_lt_iff_lt_add, neg_add_cancel]\n  refine h.congr_fun (fun x hx ‚Ü¶ ?_) measurableSet_Ioi\n  rw [Complex.deriv_ofReal_cpow_const (ht.trans hx).ne' (fun h ‚Ü¶ (Complex.zero_re ‚ñ∏ h ‚ñ∏ hs).false)]\n\n"}
{"name":"integrableOn_Ioi_deriv_norm_ofReal_cpow","module":"Mathlib.Analysis.SpecialFunctions.ImproperIntegrals","initialProofState":"s : Complex\nt : Real\nht : LT.lt 0 t\nhs : LE.le s.re 0\n‚ä¢ MeasureTheory.IntegrableOn (deriv fun x => Norm.norm (HPow.hPow (‚Üëx) s)) (Set.Ioi t) MeasureTheory.MeasureSpace.volume","decl":"theorem integrableOn_Ioi_deriv_norm_ofReal_cpow {s : ‚ÑÇ} {t : ‚Ñù} (ht : 0 < t) (hs : s.re ‚â§ 0):\n    IntegrableOn (deriv fun x : ‚Ñù ‚Ü¶ ‚Äñ(x : ‚ÑÇ) ^ s‚Äñ) (Set.Ioi t) := by\n  rw [integrableOn_congr_fun (fun x hx ‚Ü¶ by\n    rw [deriv_norm_ofReal_cpow _ (ht.trans hx)]) measurableSet_Ioi]\n  obtain hs | hs := eq_or_lt_of_le hs\n  ¬∑ simp_rw [hs, zero_mul]\n    exact integrableOn_zero\n  ¬∑ replace hs : s.re - 1 < - 1 := by rwa [sub_lt_iff_lt_add, neg_add_cancel]\n    exact (integrableOn_Ioi_rpow_of_lt hs ht).const_mul s.re\n\n"}
{"name":"not_integrableOn_Ioi_cpow","module":"Mathlib.Analysis.SpecialFunctions.ImproperIntegrals","initialProofState":"s : Complex\n‚ä¢ Not (MeasureTheory.IntegrableOn (fun x => HPow.hPow (‚Üëx) s) (Set.Ioi 0) MeasureTheory.MeasureSpace.volume)","decl":"/-- The complex power function with any exponent is not integrable on `(0, +‚àû)`. -/\ntheorem not_integrableOn_Ioi_cpow (s : ‚ÑÇ) :\n    ¬¨ IntegrableOn (fun x : ‚Ñù ‚Ü¶ (x : ‚ÑÇ) ^ s) (Ioi (0 : ‚Ñù)) := by\n  intro h\n  rcases le_or_lt s.re (-1) with hs|hs\n  ¬∑ have : IntegrableOn (fun x : ‚Ñù ‚Ü¶ (x : ‚ÑÇ) ^ s) (Ioo (0 : ‚Ñù) 1) :=\n      h.mono Ioo_subset_Ioi_self le_rfl\n    rw [integrableOn_Ioo_cpow_iff zero_lt_one] at this\n    exact hs.not_lt this\n  ¬∑ have : IntegrableOn (fun x : ‚Ñù ‚Ü¶ (x : ‚ÑÇ) ^ s) (Ioi 1) :=\n      h.mono (Ioi_subset_Ioi zero_le_one) le_rfl\n    rw [integrableOn_Ioi_cpow_iff zero_lt_one] at this\n    exact hs.not_lt this\n\n"}
{"name":"setIntegral_Ioi_zero_cpow","module":"Mathlib.Analysis.SpecialFunctions.ImproperIntegrals","initialProofState":"s : Complex\n‚ä¢ Eq (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.Ioi 0)) fun x => HPow.hPow (‚Üëx) s) 0","decl":"theorem setIntegral_Ioi_zero_cpow (s : ‚ÑÇ) : ‚à´ x in Ioi (0 : ‚Ñù), (x : ‚ÑÇ) ^ s = 0 :=\n  MeasureTheory.integral_undef (not_integrableOn_Ioi_cpow s)\n\n"}
{"name":"integral_Ioi_cpow_of_lt","module":"Mathlib.Analysis.SpecialFunctions.ImproperIntegrals","initialProofState":"a : Complex\nha : LT.lt a.re (-1)\nc : Real\nhc : LT.lt 0 c\n‚ä¢ Eq (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.Ioi c)) fun t => HPow.hPow (‚Üët) a) (HDiv.hDiv (Neg.neg (HPow.hPow (‚Üëc) (HAdd.hAdd a 1))) (HAdd.hAdd a 1))","decl":"theorem integral_Ioi_cpow_of_lt {a : ‚ÑÇ} (ha : a.re < -1) {c : ‚Ñù} (hc : 0 < c) :\n    (‚à´ t : ‚Ñù in Ioi c, (t : ‚ÑÇ) ^ a) = -(c : ‚ÑÇ) ^ (a + 1) / (a + 1) := by\n  refine\n    tendsto_nhds_unique\n      (intervalIntegral_tendsto_integral_Ioi c (integrableOn_Ioi_cpow_of_lt ha hc) tendsto_id) ?_\n  suffices\n    Tendsto (fun x : ‚Ñù => ((x : ‚ÑÇ) ^ (a + 1) - (c : ‚ÑÇ) ^ (a + 1)) / (a + 1)) atTop\n      (ùìù <| -c ^ (a + 1) / (a + 1)) by\n    refine this.congr' ((eventually_gt_atTop 0).mp (Eventually.of_forall fun x hx => ?_))\n    dsimp only\n    rw [integral_cpow, id]\n    refine Or.inr ‚ü®?_, not_mem_uIcc_of_lt hc hx‚ü©\n    apply_fun Complex.re\n    rw [Complex.neg_re, Complex.one_re]\n    exact ha.ne\n  simp_rw [‚Üê zero_sub, sub_div]\n  refine (Tendsto.div_const ?_ _).sub_const _\n  rw [tendsto_zero_iff_norm_tendsto_zero]\n  refine\n    (tendsto_rpow_neg_atTop (by linarith : 0 < -(a.re + 1))).congr'\n      ((eventually_gt_atTop 0).mp (Eventually.of_forall fun x hx => ?_))\n  simp_rw [neg_neg, Complex.norm_eq_abs, Complex.abs_cpow_eq_rpow_re_of_pos hx, Complex.add_re,\n    Complex.one_re]\n\n"}
{"name":"integrable_inv_one_add_sq","module":"Mathlib.Analysis.SpecialFunctions.ImproperIntegrals","initialProofState":"‚ä¢ MeasureTheory.Integrable (fun x => Inv.inv (HAdd.hAdd 1 (HPow.hPow x 2))) MeasureTheory.MeasureSpace.volume","decl":"theorem integrable_inv_one_add_sq : Integrable fun (x : ‚Ñù) ‚Ü¶ (1 + x ^ 2)‚Åª¬π := by\n  suffices Integrable fun (x : ‚Ñù) ‚Ü¶ (1 + ‚Äñx‚Äñ ^ 2) ^ ((-2 : ‚Ñù) / 2) by simpa [rpow_neg_one]\n  exact integrable_rpow_neg_one_add_norm_sq (by simp)\n\n"}
{"name":"integral_Iic_inv_one_add_sq","module":"Mathlib.Analysis.SpecialFunctions.ImproperIntegrals","initialProofState":"i : Real\n‚ä¢ Eq (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.Iic i)) fun x => Inv.inv (HAdd.hAdd 1 (HPow.hPow x 2))) (HAdd.hAdd (Real.arctan i) (HDiv.hDiv Real.pi 2))","decl":"@[simp]\ntheorem integral_Iic_inv_one_add_sq {i : ‚Ñù} :\n    ‚à´ (x : ‚Ñù) in Set.Iic i, (1 + x ^ 2)‚Åª¬π = arctan i + (œÄ / 2) :=\n  integral_Iic_of_hasDerivAt_of_tendsto' (fun x _ => hasDerivAt_arctan' x)\n    integrable_inv_one_add_sq.integrableOn (tendsto_nhds_of_tendsto_nhdsWithin tendsto_arctan_atBot)\n    |>.trans (sub_neg_eq_add _ _)\n\n"}
{"name":"integral_Ioi_inv_one_add_sq","module":"Mathlib.Analysis.SpecialFunctions.ImproperIntegrals","initialProofState":"i : Real\n‚ä¢ Eq (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.Ioi i)) fun x => Inv.inv (HAdd.hAdd 1 (HPow.hPow x 2))) (HSub.hSub (HDiv.hDiv Real.pi 2) (Real.arctan i))","decl":"@[simp]\ntheorem integral_Ioi_inv_one_add_sq {i : ‚Ñù} :\n    ‚à´ (x : ‚Ñù) in Set.Ioi i, (1 + x ^ 2)‚Åª¬π = (œÄ / 2) - arctan i :=\n  integral_Ioi_of_hasDerivAt_of_tendsto' (fun x _ => hasDerivAt_arctan' x)\n    integrable_inv_one_add_sq.integrableOn (tendsto_nhds_of_tendsto_nhdsWithin tendsto_arctan_atTop)\n\n"}
{"name":"integral_univ_inv_one_add_sq","module":"Mathlib.Analysis.SpecialFunctions.ImproperIntegrals","initialProofState":"‚ä¢ Eq (MeasureTheory.integral MeasureTheory.MeasureSpace.volume fun x => Inv.inv (HAdd.hAdd 1 (HPow.hPow x 2))) Real.pi","decl":"@[simp]\ntheorem integral_univ_inv_one_add_sq : ‚à´ (x : ‚Ñù), (1 + x ^ 2)‚Åª¬π = œÄ :=\n  (by ring : œÄ = (œÄ / 2) - (-(œÄ / 2))) ‚ñ∏ integral_of_hasDerivAt_of_tendsto hasDerivAt_arctan'\n    integrable_inv_one_add_sq (tendsto_nhds_of_tendsto_nhdsWithin tendsto_arctan_atBot)\n    (tendsto_nhds_of_tendsto_nhdsWithin tendsto_arctan_atTop)\n"}
