{"name":"Filter.Tendsto.IccExtend","module":"Mathlib.Topology.Order.ProjIcc","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝ : LinearOrder α\na b : α\nh : LE.le a b\nf : γ → ↑(Set.Icc a b) → β\nla : Filter α\nlb : Filter β\nlc : Filter γ\nhf : Filter.Tendsto (Function.HasUncurry.uncurry f) (SProd.sprod lc (Filter.map (Set.projIcc a b h) la)) lb\n⊢ Filter.Tendsto (Function.HasUncurry.uncurry (Function.comp (Set.IccExtend h) f)) (SProd.sprod lc la) lb","decl":"protected theorem Filter.Tendsto.IccExtend (f : γ → Icc a b → β) {la : Filter α} {lb : Filter β}\n    {lc : Filter γ} (hf : Tendsto (↿f) (lc ×ˢ la.map (projIcc a b h)) lb) :\n    Tendsto (↿(IccExtend h ∘ f)) (lc ×ˢ la) lb :=\n  hf.comp <| tendsto_id.prod_map tendsto_map\n\n"}
{"name":"continuous_projIcc","module":"Mathlib.Topology.Order.ProjIcc","initialProofState":"α : Type u_1\ninst✝² : LinearOrder α\na b : α\nh : LE.le a b\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\n⊢ Continuous (Set.projIcc a b h)","decl":"@[continuity]\ntheorem continuous_projIcc : Continuous (projIcc a b h) :=\n  (continuous_const.max <| continuous_const.min continuous_id).subtype_mk _\n\n"}
{"name":"isQuotientMap_projIcc","module":"Mathlib.Topology.Order.ProjIcc","initialProofState":"α : Type u_1\ninst✝² : LinearOrder α\na b : α\nh : LE.le a b\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\n⊢ Topology.IsQuotientMap (Set.projIcc a b h)","decl":"theorem isQuotientMap_projIcc : IsQuotientMap (projIcc a b h) :=\n  isQuotientMap_iff.2 ⟨projIcc_surjective h, fun s =>\n    ⟨fun hs => hs.preimage continuous_projIcc, fun hs => ⟨_, hs, by ext; simp⟩⟩⟩\n\n"}
{"name":"quotientMap_projIcc","module":"Mathlib.Topology.Order.ProjIcc","initialProofState":"α : Type u_1\ninst✝² : LinearOrder α\na b : α\nh : LE.le a b\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\n⊢ Topology.IsQuotientMap (Set.projIcc a b h)","decl":"@[deprecated (since := \"2024-10-22\")]\nalias quotientMap_projIcc := isQuotientMap_projIcc\n\n"}
{"name":"continuous_IccExtend_iff","module":"Mathlib.Topology.Order.ProjIcc","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrder α\na b : α\nh : LE.le a b\ninst✝² : TopologicalSpace α\ninst✝¹ : OrderTopology α\ninst✝ : TopologicalSpace β\nf : ↑(Set.Icc a b) → β\n⊢ Iff (Continuous (Set.IccExtend h f)) (Continuous f)","decl":"@[simp]\ntheorem continuous_IccExtend_iff {f : Icc a b → β} : Continuous (IccExtend h f) ↔ Continuous f :=\n  isQuotientMap_projIcc.continuous_iff.symm\n\n"}
{"name":"Continuous.IccExtend","module":"Mathlib.Topology.Order.ProjIcc","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : LinearOrder α\na b : α\nh : LE.le a b\ninst✝³ : TopologicalSpace α\ninst✝² : OrderTopology α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\nf : γ → ↑(Set.Icc a b) → β\ng : γ → α\nhf : Continuous (Function.HasUncurry.uncurry f)\nhg : Continuous g\n⊢ Continuous fun a_1 => Set.IccExtend h (f a_1) (g a_1)","decl":"/-- See Note [continuity lemma statement]. -/\nprotected theorem Continuous.IccExtend {f : γ → Icc a b → β} {g : γ → α} (hf : Continuous ↿f)\n    (hg : Continuous g) : Continuous fun a => IccExtend h (f a) (g a) :=\n  show Continuous (↿f ∘ fun x => (x, projIcc a b h (g x)))\n  from hf.comp <| continuous_id.prod_mk <| continuous_projIcc.comp hg\n\n"}
{"name":"Continuous.Icc_extend'","module":"Mathlib.Topology.Order.ProjIcc","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrder α\na b : α\nh : LE.le a b\ninst✝² : TopologicalSpace α\ninst✝¹ : OrderTopology α\ninst✝ : TopologicalSpace β\nf : ↑(Set.Icc a b) → β\nhf : Continuous f\n⊢ Continuous (Set.IccExtend h f)","decl":"/-- A useful special case of `Continuous.IccExtend`. -/\n@[continuity]\nprotected theorem Continuous.Icc_extend' {f : Icc a b → β} (hf : Continuous f) :\n    Continuous (IccExtend h f) :=\n  hf.comp continuous_projIcc\n\n"}
{"name":"ContinuousAt.IccExtend","module":"Mathlib.Topology.Order.ProjIcc","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : LinearOrder α\na b : α\nh : LE.le a b\ninst✝³ : TopologicalSpace α\ninst✝² : OrderTopology α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\nx : γ\nf : γ → ↑(Set.Icc a b) → β\ng : γ → α\nhf : ContinuousAt (Function.HasUncurry.uncurry f) { fst := x, snd := Set.projIcc a b h (g x) }\nhg : ContinuousAt g x\n⊢ ContinuousAt (fun a_1 => Set.IccExtend h (f a_1) (g a_1)) x","decl":"theorem ContinuousAt.IccExtend {x : γ} (f : γ → Icc a b → β) {g : γ → α}\n    (hf : ContinuousAt (↿f) (x, projIcc a b h (g x))) (hg : ContinuousAt g x) :\n    ContinuousAt (fun a => IccExtend h (f a) (g a)) x :=\n  show ContinuousAt (↿f ∘ fun x => (x, projIcc a b h (g x))) x from\n    ContinuousAt.comp hf <| continuousAt_id.prod <| continuous_projIcc.continuousAt.comp hg\n"}
