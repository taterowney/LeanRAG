{"name":"MeasureTheory.ae_toFiniteAux","module":"Mathlib.MeasureTheory.Measure.WithDensityFinite","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SFinite μ\n⊢ Eq (MeasureTheory.ae μ.toFiniteAux) (MeasureTheory.ae μ)","decl":"@[local simp]\nlemma ae_toFiniteAux [SFinite μ] : ae μ.toFiniteAux = ae μ := by\n  rw [Measure.toFiniteAux]\n  split_ifs\n  · simp\n  · obtain ⟨_, h₁, h₂⟩ := (exists_isFiniteMeasure_absolutelyContinuous μ).choose_spec\n    exact h₂.ae_le.antisymm h₁.ae_le\n\n"}
{"name":"MeasureTheory.isFiniteMeasure_toFiniteAux","module":"Mathlib.MeasureTheory.Measure.WithDensityFinite","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SFinite μ\n⊢ MeasureTheory.IsFiniteMeasure μ.toFiniteAux","decl":"@[local instance]\ntheorem isFiniteMeasure_toFiniteAux [SFinite μ] : IsFiniteMeasure μ.toFiniteAux := by\n  rw [Measure.toFiniteAux]\n  split_ifs\n  · assumption\n  · exact (exists_isFiniteMeasure_absolutelyContinuous μ).choose_spec.1\n\n"}
{"name":"MeasureTheory.ae_toFinite","module":"Mathlib.MeasureTheory.Measure.WithDensityFinite","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SFinite μ\n⊢ Eq (MeasureTheory.ae μ.toFinite) (MeasureTheory.ae μ)","decl":"@[simp]\nlemma ae_toFinite [SFinite μ] : ae μ.toFinite = ae μ := by\n  simp [Measure.toFinite, ProbabilityTheory.cond]\n\n"}
{"name":"MeasureTheory.toFinite_apply_eq_zero_iff","module":"Mathlib.MeasureTheory.Measure.WithDensityFinite","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SFinite μ\ns : Set α\n⊢ Iff (Eq (μ.toFinite s) 0) (Eq (μ s) 0)","decl":"@[simp]\nlemma toFinite_apply_eq_zero_iff [SFinite μ] {s : Set α} : μ.toFinite s = 0 ↔ μ s = 0 := by\n  simp only [← compl_mem_ae_iff, ae_toFinite]\n\n"}
{"name":"MeasureTheory.toFinite_eq_zero_iff","module":"Mathlib.MeasureTheory.Measure.WithDensityFinite","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SFinite μ\n⊢ Iff (Eq μ.toFinite 0) (Eq μ 0)","decl":"@[simp]\nlemma toFinite_eq_zero_iff [SFinite μ] : μ.toFinite = 0 ↔ μ = 0 := by\n  simp_rw [← Measure.measure_univ_eq_zero, toFinite_apply_eq_zero_iff]\n\n"}
{"name":"MeasureTheory.toFinite_zero","module":"Mathlib.MeasureTheory.Measure.WithDensityFinite","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\n⊢ Eq (MeasureTheory.Measure.toFinite 0) 0","decl":"@[simp]\nlemma toFinite_zero : Measure.toFinite (0 : Measure α) = 0 := by simp\n\n"}
{"name":"MeasureTheory.toFinite_eq_self","module":"Mathlib.MeasureTheory.Measure.WithDensityFinite","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsProbabilityMeasure μ\n⊢ Eq μ.toFinite μ","decl":"lemma toFinite_eq_self [IsProbabilityMeasure μ] : μ.toFinite = μ := by\n  rw [Measure.toFinite, Measure.toFiniteAux, if_pos, ProbabilityTheory.cond_univ]\n  infer_instance\n\n"}
{"name":"MeasureTheory.instIsFiniteMeasureToFinite","module":"Mathlib.MeasureTheory.Measure.WithDensityFinite","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SFinite μ\n⊢ MeasureTheory.IsFiniteMeasure μ.toFinite","decl":"instance [SFinite μ] : IsFiniteMeasure μ.toFinite := by\n  rw [Measure.toFinite]\n  infer_instance\n\n"}
{"name":"MeasureTheory.instIsProbabilityMeasureToFiniteOfNeZeroMeasure","module":"Mathlib.MeasureTheory.Measure.WithDensityFinite","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : MeasureTheory.SFinite μ\ninst✝ : NeZero μ\n⊢ MeasureTheory.IsProbabilityMeasure μ.toFinite","decl":"instance [SFinite μ] [NeZero μ] : IsProbabilityMeasure μ.toFinite := by\n  apply ProbabilityTheory.cond_isProbabilityMeasure\n  simp [ne_eq, ← compl_mem_ae_iff, ae_toFiniteAux]\n\n"}
{"name":"MeasureTheory.absolutelyContinuous_toFinite","module":"Mathlib.MeasureTheory.Measure.WithDensityFinite","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SFinite μ\n⊢ μ.AbsolutelyContinuous μ.toFinite","decl":"lemma absolutelyContinuous_toFinite (μ : Measure α) [SFinite μ] : μ ≪ μ.toFinite :=\n  Measure.ae_le_iff_absolutelyContinuous.mp ae_toFinite.ge\n\n"}
{"name":"MeasureTheory.sfiniteSeq_absolutelyContinuous_toFinite","module":"Mathlib.MeasureTheory.Measure.WithDensityFinite","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SFinite μ\nn : Nat\n⊢ (MeasureTheory.sfiniteSeq μ n).AbsolutelyContinuous μ.toFinite","decl":"lemma sfiniteSeq_absolutelyContinuous_toFinite (μ : Measure α) [SFinite μ] (n : ℕ) :\n    sfiniteSeq μ n ≪ μ.toFinite :=\n  (sfiniteSeq_le μ n).absolutelyContinuous.trans (absolutelyContinuous_toFinite μ)\n\n"}
{"name":"MeasureTheory.sFiniteSeq_absolutelyContinuous_toFinite","module":"Mathlib.MeasureTheory.Measure.WithDensityFinite","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SFinite μ\nn : Nat\n⊢ (MeasureTheory.sfiniteSeq μ n).AbsolutelyContinuous μ.toFinite","decl":"@[deprecated (since := \"2024-10-11\")]\nalias sFiniteSeq_absolutelyContinuous_toFinite := sfiniteSeq_absolutelyContinuous_toFinite\n\n"}
{"name":"MeasureTheory.toFinite_absolutelyContinuous","module":"Mathlib.MeasureTheory.Measure.WithDensityFinite","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SFinite μ\n⊢ μ.toFinite.AbsolutelyContinuous μ","decl":"lemma toFinite_absolutelyContinuous (μ : Measure α) [SFinite μ] : μ.toFinite ≪ μ :=\n  Measure.ae_le_iff_absolutelyContinuous.mp ae_toFinite.le\n\n"}
{"name":"MeasureTheory.densityToFinite_def","module":"Mathlib.MeasureTheory.Measure.WithDensityFinite","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SFinite μ\n⊢ Eq μ.densityToFinite (μ.rnDeriv μ.toFinite)","decl":"set_option linter.deprecated false in\n@[deprecated \"No deprecation message was provided.\" (since := \"2024-10-04\")]\nlemma densityToFinite_def (μ : Measure α) [SFinite μ] :\n    μ.densityToFinite = μ.rnDeriv μ.toFinite :=\n  rfl\n\n"}
{"name":"MeasureTheory.measurable_densityToFinite","module":"Mathlib.MeasureTheory.Measure.WithDensityFinite","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SFinite μ\n⊢ Measurable μ.densityToFinite","decl":"set_option linter.deprecated false in\n@[deprecated Measure.measurable_rnDeriv (since := \"2024-10-04\")]\nlemma measurable_densityToFinite (μ : Measure α) [SFinite μ] : Measurable μ.densityToFinite :=\n  Measure.measurable_rnDeriv _ _\n\n"}
{"name":"MeasureTheory.withDensity_densitytoFinite","module":"Mathlib.MeasureTheory.Measure.WithDensityFinite","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SFinite μ\n⊢ Eq (μ.toFinite.withDensity μ.densityToFinite) μ","decl":"set_option linter.deprecated false in\n@[deprecated Measure.withDensity_rnDeriv_eq (since := \"2024-10-04\")]\ntheorem withDensity_densitytoFinite (μ : Measure α) [SFinite μ] :\n    μ.toFinite.withDensity μ.densityToFinite = μ :=\n  Measure.withDensity_rnDeriv_eq _ _ (absolutelyContinuous_toFinite _)\n\n"}
{"name":"MeasureTheory.densityToFinite_ae_lt_top","module":"Mathlib.MeasureTheory.Measure.WithDensityFinite","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SigmaFinite μ\n⊢ Filter.Eventually (fun x => LT.lt (μ.densityToFinite x) Top.top) (MeasureTheory.ae μ)","decl":"set_option linter.deprecated false in\n@[deprecated Measure.rnDeriv_lt_top (since := \"2024-10-04\")]\nlemma densityToFinite_ae_lt_top (μ : Measure α) [SigmaFinite μ] :\n    ∀ᵐ x ∂μ, μ.densityToFinite x < ∞ :=\n  (absolutelyContinuous_toFinite μ).ae_le <| Measure.rnDeriv_lt_top _ _\n\n"}
{"name":"MeasureTheory.densityToFinite_ae_ne_top","module":"Mathlib.MeasureTheory.Measure.WithDensityFinite","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SigmaFinite μ\n⊢ Filter.Eventually (fun x => Ne (μ.densityToFinite x) Top.top) (MeasureTheory.ae μ)","decl":"set_option linter.deprecated false in\n@[deprecated Measure.rnDeriv_ne_top (since := \"2024-10-04\")]\nlemma densityToFinite_ae_ne_top (μ : Measure α) [SigmaFinite μ] :\n    ∀ᵐ x ∂μ, μ.densityToFinite x ≠ ∞ :=\n  (densityToFinite_ae_lt_top μ).mono (fun _ hx ↦ hx.ne)\n\n"}
{"name":"MeasureTheory.restrict_compl_sigmaFiniteSet","module":"Mathlib.MeasureTheory.Measure.WithDensityFinite","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SFinite μ\n⊢ Eq (μ.restrict (HasCompl.compl μ.sigmaFiniteSet)) (HSMul.hSMul Top.top (μ.toFinite.restrict (HasCompl.compl μ.sigmaFiniteSet)))","decl":"lemma restrict_compl_sigmaFiniteSet [SFinite μ] :\n    μ.restrict μ.sigmaFiniteSetᶜ = ∞ • μ.toFinite.restrict μ.sigmaFiniteSetᶜ := by\n  rw [Measure.sigmaFiniteSet,\n    restrict_compl_sigmaFiniteSetWRT (Measure.AbsolutelyContinuous.refl μ)]\n  ext t ht\n  simp only [Measure.smul_apply, smul_eq_mul]\n  rw [Measure.restrict_apply ht, Measure.restrict_apply ht]\n  by_cases hμt : μ (t ∩ (μ.sigmaFiniteSetWRT μ)ᶜ) = 0\n  · rw [hμt, toFinite_absolutelyContinuous μ hμt]\n  · rw [ENNReal.top_mul hμt, ENNReal.top_mul]\n    exact fun h ↦ hμt (absolutelyContinuous_toFinite μ h)\n\n"}
