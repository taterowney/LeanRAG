{"name":"AddSubmonoid.vaddCommClass_left","module":"Mathlib.Algebra.Group.Submonoid.MulAction","initialProofState":"M' : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : AddZeroClass M'\ninst✝² : VAdd M' β\ninst✝¹ : VAdd α β\ninst✝ : VAddCommClass M' α β\nS : AddSubmonoid M'\n⊢ VAddCommClass (Subtype fun x => Membership.mem S x) α β","decl":"@[to_additive]\ninstance smulCommClass_left [SMul M' β] [SMul α β] [SMulCommClass M' α β]\n    (S : Submonoid M') : SMulCommClass S α β :=\n  ⟨fun a _ _ => smul_comm (a : M') _ _⟩\n\n"}
{"name":"Submonoid.smulCommClass_left","module":"Mathlib.Algebra.Group.Submonoid.MulAction","initialProofState":"M' : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : MulOneClass M'\ninst✝² : SMul M' β\ninst✝¹ : SMul α β\ninst✝ : SMulCommClass M' α β\nS : Submonoid M'\n⊢ SMulCommClass (Subtype fun x => Membership.mem S x) α β","decl":"@[to_additive]\ninstance smulCommClass_left [SMul M' β] [SMul α β] [SMulCommClass M' α β]\n    (S : Submonoid M') : SMulCommClass S α β :=\n  ⟨fun a _ _ => smul_comm (a : M') _ _⟩\n\n"}
{"name":"AddSubmonoid.vaddCommClass_right","module":"Mathlib.Algebra.Group.Submonoid.MulAction","initialProofState":"M' : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : AddZeroClass M'\ninst✝² : VAdd α β\ninst✝¹ : VAdd M' β\ninst✝ : VAddCommClass α M' β\nS : AddSubmonoid M'\n⊢ VAddCommClass α (Subtype fun x => Membership.mem S x) β","decl":"@[to_additive]\ninstance smulCommClass_right [SMul α β] [SMul M' β] [SMulCommClass α M' β]\n    (S : Submonoid M') : SMulCommClass α S β :=\n  ⟨fun a s => smul_comm a (s : M')⟩\n\n"}
{"name":"Submonoid.smulCommClass_right","module":"Mathlib.Algebra.Group.Submonoid.MulAction","initialProofState":"M' : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : MulOneClass M'\ninst✝² : SMul α β\ninst✝¹ : SMul M' β\ninst✝ : SMulCommClass α M' β\nS : Submonoid M'\n⊢ SMulCommClass α (Subtype fun x => Membership.mem S x) β","decl":"@[to_additive]\ninstance smulCommClass_right [SMul α β] [SMul M' β] [SMulCommClass α M' β]\n    (S : Submonoid M') : SMulCommClass α S β :=\n  ⟨fun a s => smul_comm a (s : M')⟩\n\n"}
{"name":"Submonoid.isScalarTower","module":"Mathlib.Algebra.Group.Submonoid.MulAction","initialProofState":"M' : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝⁴ : MulOneClass M'\ninst✝³ : SMul α β\ninst✝² : SMul M' α\ninst✝¹ : SMul M' β\ninst✝ : IsScalarTower M' α β\nS : Submonoid M'\n⊢ IsScalarTower (Subtype fun x => Membership.mem S x) α β","decl":"/-- Note that this provides `IsScalarTower S M' M'` which is needed by `SMulMulAssoc`. -/\ninstance isScalarTower [SMul α β] [SMul M' α] [SMul M' β] [IsScalarTower M' α β]\n      (S : Submonoid M') :\n    IsScalarTower S α β :=\n  ⟨fun a => smul_assoc (a : M')⟩\n\n"}
{"name":"AddSubmonoid.vadd_def","module":"Mathlib.Algebra.Group.Submonoid.MulAction","initialProofState":"M' : Type u_1\nα : Type u_2\ninst✝¹ : AddZeroClass M'\ninst✝ : VAdd M' α\nS : AddSubmonoid M'\ng : Subtype fun x => Membership.mem S x\na : α\n⊢ Eq (HVAdd.hVAdd g a) (HVAdd.hVAdd (↑g) a)","decl":"@[to_additive] lemma smul_def (g : S) (a : α) : g • a = (g : M') • a := rfl\n\n"}
{"name":"Submonoid.smul_def","module":"Mathlib.Algebra.Group.Submonoid.MulAction","initialProofState":"M' : Type u_1\nα : Type u_2\ninst✝¹ : MulOneClass M'\ninst✝ : SMul M' α\nS : Submonoid M'\ng : Subtype fun x => Membership.mem S x\na : α\n⊢ Eq (HSMul.hSMul g a) (HSMul.hSMul (↑g) a)","decl":"@[to_additive] lemma smul_def (g : S) (a : α) : g • a = (g : M') • a := rfl\n\n"}
{"name":"Submonoid.mk_smul","module":"Mathlib.Algebra.Group.Submonoid.MulAction","initialProofState":"M' : Type u_1\nα : Type u_2\ninst✝¹ : MulOneClass M'\ninst✝ : SMul M' α\nS : Submonoid M'\ng : M'\nhg : Membership.mem S g\na : α\n⊢ Eq (HSMul.hSMul ⟨g, hg⟩ a) (HSMul.hSMul g a)","decl":"@[to_additive (attr := simp)]\nlemma mk_smul (g : M') (hg : g ∈ S) (a : α) : (⟨g, hg⟩ : S) • a = g • a := rfl\n\n"}
{"name":"AddSubmonoid.mk_vadd","module":"Mathlib.Algebra.Group.Submonoid.MulAction","initialProofState":"M' : Type u_1\nα : Type u_2\ninst✝¹ : AddZeroClass M'\ninst✝ : VAdd M' α\nS : AddSubmonoid M'\ng : M'\nhg : Membership.mem S g\na : α\n⊢ Eq (HVAdd.hVAdd ⟨g, hg⟩ a) (HVAdd.hVAdd g a)","decl":"@[to_additive (attr := simp)]\nlemma mk_smul (g : M') (hg : g ∈ S) (a : α) : (⟨g, hg⟩ : S) • a = g • a := rfl\n\n"}
