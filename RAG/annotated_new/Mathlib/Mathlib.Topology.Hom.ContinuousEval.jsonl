{"name":"ContinuousEval.continuous_eval","module":"Mathlib.Topology.Hom.ContinuousEval","initialProofState":"F : Type u_1\nX : outParam (Type u_2)\nY : outParam (Type u_3)\ninst✝³ : FunLike F X Y\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nself : ContinuousEval F X Y\n⊢ Continuous fun fx => fx.1 fx.2","decl":"/-- A typeclass saying that `F` is a bundled morphism class (in the sense of `FunLike`)\nwith a topology such that `fun (f, x) : F × X ↦ f x` is a continuous function. -/\nclass ContinuousEval (F : Type*) (X Y : outParam Type*) [FunLike F X Y]\n    [TopologicalSpace F] [TopologicalSpace X] [TopologicalSpace Y] : Prop where\n  /-- Evaluation of a bundled morphism at a point is continuous in both variables. -/\n  continuous_eval : Continuous fun fx : F × X ↦ fx.1 fx.2\n\n"}
{"name":"Continuous.eval","module":"Mathlib.Topology.Hom.ContinuousEval","initialProofState":"F : Type u_1\nX : Type u_2\nY : Type u_3\nZ : Type u_4\ninst✝⁵ : FunLike F X Y\ninst✝⁴ : TopologicalSpace F\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : ContinuousEval F X Y\ninst✝ : TopologicalSpace Z\nf : Z → F\ng : Z → X\nhf : Continuous f\nhg : Continuous g\n⊢ Continuous fun z => (f z) (g z)","decl":"@[continuity, fun_prop]\nprotected theorem Continuous.eval (hf : Continuous f) (hg : Continuous g) :\n    Continuous fun z ↦ f z (g z) :=\n  continuous_eval.comp (hf.prod_mk hg)\n\n"}
{"name":"ContinuousEval.of_continuous_forget","module":"Mathlib.Topology.Hom.ContinuousEval","initialProofState":"F : Type u_1\nX : Type u_2\nY : Type u_3\ninst✝⁶ : FunLike F X Y\ninst✝⁵ : TopologicalSpace F\ninst✝⁴ : TopologicalSpace X\ninst✝³ : TopologicalSpace Y\ninst✝² : ContinuousEval F X Y\nF' : Type u_5\ninst✝¹ : FunLike F' X Y\ninst✝ : TopologicalSpace F'\nf : F' → F\nhc : Continuous f\nhf : autoParam (∀ (g : F'), Eq ⇑(f g) ⇑g) _auto✝\n⊢ ContinuousEval F' X Y","decl":"/-- If a type `F'` of bundled morphisms admits a continuous projection\nto a type satisfying `ContinuousEval`,\nthen `F'` satisfies this predicate too.\n\nThe word \"forget\" in the name is motivated by the term \"forgetful functor\". -/\ntheorem ContinuousEval.of_continuous_forget {F' : Type*} [FunLike F' X Y] [TopologicalSpace F']\n    {f : F' → F} (hc : Continuous f) (hf : ∀ g, ⇑(f g) = g := by intro; rfl) :\n    ContinuousEval F' X Y where\n  continuous_eval := by simpa only [← hf] using hc.fst'.eval continuous_snd\n\n"}
{"name":"ContinuousEval.toContinuousMapClass","module":"Mathlib.Topology.Hom.ContinuousEval","initialProofState":"F : Type u_1\nX : Type u_2\nY : Type u_3\ninst✝⁴ : FunLike F X Y\ninst✝³ : TopologicalSpace F\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : ContinuousEval F X Y\n⊢ ContinuousMapClass F X Y","decl":"instance (priority := 100) ContinuousEval.toContinuousMapClass : ContinuousMapClass F X Y where\n  map_continuous _ := continuous_const.eval continuous_id\n\n"}
{"name":"ContinuousEval.toContinuousEvalConst","module":"Mathlib.Topology.Hom.ContinuousEval","initialProofState":"F : Type u_1\nX : Type u_2\nY : Type u_3\ninst✝⁴ : FunLike F X Y\ninst✝³ : TopologicalSpace F\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : ContinuousEval F X Y\n⊢ ContinuousEvalConst F X Y","decl":"instance (priority := 100) ContinuousEval.toContinuousEvalConst : ContinuousEvalConst F X Y where\n  continuous_eval_const _ := continuous_id.eval continuous_const\n\n"}
{"name":"Filter.Tendsto.eval","module":"Mathlib.Topology.Hom.ContinuousEval","initialProofState":"F : Type u_1\nX : Type u_2\nY : Type u_3\ninst✝⁴ : FunLike F X Y\ninst✝³ : TopologicalSpace F\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : ContinuousEval F X Y\nα : Type u_5\nl : Filter α\nf : α → F\nf₀ : F\ng : α → X\nx₀ : X\nhf : Filter.Tendsto f l (nhds f₀)\nhg : Filter.Tendsto g l (nhds x₀)\n⊢ Filter.Tendsto (fun a => (f a) (g a)) l (nhds (f₀ x₀))","decl":"protected theorem Filter.Tendsto.eval {α : Type*} {l : Filter α} {f : α → F} {f₀ : F}\n    {g : α → X} {x₀ : X} (hf : Tendsto f l (𝓝 f₀)) (hg : Tendsto g l (𝓝 x₀)) :\n    Tendsto (fun a ↦ f a (g a)) l (𝓝 (f₀ x₀)) :=\n  (ContinuousEval.continuous_eval.tendsto _).comp (hf.prod_mk_nhds hg)\n\n"}
{"name":"ContinuousAt.eval","module":"Mathlib.Topology.Hom.ContinuousEval","initialProofState":"F : Type u_1\nX : Type u_2\nY : Type u_3\nZ : Type u_4\ninst✝⁵ : FunLike F X Y\ninst✝⁴ : TopologicalSpace F\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : ContinuousEval F X Y\ninst✝ : TopologicalSpace Z\nf : Z → F\ng : Z → X\nz : Z\nhf : ContinuousAt f z\nhg : ContinuousAt g z\n⊢ ContinuousAt (fun z => (f z) (g z)) z","decl":"protected nonrec theorem ContinuousAt.eval (hf : ContinuousAt f z) (hg : ContinuousAt g z) :\n    ContinuousAt (fun z ↦ f z (g z)) z :=\n  hf.eval hg\n\n"}
{"name":"ContinuousWithinAt.eval","module":"Mathlib.Topology.Hom.ContinuousEval","initialProofState":"F : Type u_1\nX : Type u_2\nY : Type u_3\nZ : Type u_4\ninst✝⁵ : FunLike F X Y\ninst✝⁴ : TopologicalSpace F\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : ContinuousEval F X Y\ninst✝ : TopologicalSpace Z\nf : Z → F\ng : Z → X\ns : Set Z\nz : Z\nhf : ContinuousWithinAt f s z\nhg : ContinuousWithinAt g s z\n⊢ ContinuousWithinAt (fun z => (f z) (g z)) s z","decl":"protected nonrec theorem ContinuousWithinAt.eval (hf : ContinuousWithinAt f s z)\n    (hg : ContinuousWithinAt g s z) : ContinuousWithinAt (fun z ↦ f z (g z)) s z :=\n  hf.eval hg\n\n"}
{"name":"ContinuousOn.eval","module":"Mathlib.Topology.Hom.ContinuousEval","initialProofState":"F : Type u_1\nX : Type u_2\nY : Type u_3\nZ : Type u_4\ninst✝⁵ : FunLike F X Y\ninst✝⁴ : TopologicalSpace F\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : ContinuousEval F X Y\ninst✝ : TopologicalSpace Z\nf : Z → F\ng : Z → X\ns : Set Z\nhf : ContinuousOn f s\nhg : ContinuousOn g s\n⊢ ContinuousOn (fun z => (f z) (g z)) s","decl":"protected theorem ContinuousOn.eval (hf : ContinuousOn f s) (hg : ContinuousOn g s) :\n    ContinuousOn (fun z ↦ f z (g z)) s :=\n  fun z hz ↦ (hf z hz).eval (hg z hz)\n"}
