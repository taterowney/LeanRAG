{"name":"CoalgEquiv.left_inv","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_5\ninst✝⁶ : CommSemiring R\nA : Type u_6\nB : Type u_7\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nself : CoalgEquiv R A B\n⊢ Function.LeftInverse self.invFun self.toFun","decl":"/-- An equivalence of coalgebras is an invertible coalgebra homomorphism. -/\nstructure CoalgEquiv (R : Type*) [CommSemiring R] (A B : Type*)\n    [AddCommMonoid A] [AddCommMonoid B] [Module R A] [Module R B]\n    [CoalgebraStruct R A] [CoalgebraStruct R B] extends A →ₗc[R] B, A ≃ₗ[R] B where\n\n"}
{"name":"CoalgEquiv.mk.inj","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_5\ninst✝⁶ : CommSemiring R\nA : Type u_6\nB : Type u_7\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ntoCoalgHom✝ : CoalgHom R A B\ninvFun✝ : B → A\nleft_inv✝ : Function.LeftInverse invFun✝ toCoalgHom✝.toFun\nright_inv✝ : Function.RightInverse invFun✝ toCoalgHom✝.toFun\ntoCoalgHom : CoalgHom R A B\ninvFun : B → A\nleft_inv : Function.LeftInverse invFun toCoalgHom.toFun\nright_inv : Function.RightInverse invFun toCoalgHom.toFun\nx✝ : Eq { toCoalgHom := toCoalgHom✝, invFun := invFun✝, left_inv := left_inv✝, right_inv := right_inv✝ } { toCoalgHom := toCoalgHom, invFun := invFun, left_inv := left_inv, right_inv := right_inv }\n⊢ And (Eq toCoalgHom✝ toCoalgHom) (Eq invFun✝ invFun)","decl":"/-- An equivalence of coalgebras is an invertible coalgebra homomorphism. -/\nstructure CoalgEquiv (R : Type*) [CommSemiring R] (A B : Type*)\n    [AddCommMonoid A] [AddCommMonoid B] [Module R A] [Module R B]\n    [CoalgebraStruct R A] [CoalgebraStruct R B] extends A →ₗc[R] B, A ≃ₗ[R] B where\n\n"}
{"name":"CoalgEquiv.mk.injEq","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_5\ninst✝⁶ : CommSemiring R\nA : Type u_6\nB : Type u_7\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ntoCoalgHom✝ : CoalgHom R A B\ninvFun✝ : B → A\nleft_inv✝ : Function.LeftInverse invFun✝ toCoalgHom✝.toFun\nright_inv✝ : Function.RightInverse invFun✝ toCoalgHom✝.toFun\ntoCoalgHom : CoalgHom R A B\ninvFun : B → A\nleft_inv : Function.LeftInverse invFun toCoalgHom.toFun\nright_inv : Function.RightInverse invFun toCoalgHom.toFun\n⊢ Eq (Eq { toCoalgHom := toCoalgHom✝, invFun := invFun✝, left_inv := left_inv✝, right_inv := right_inv✝ } { toCoalgHom := toCoalgHom, invFun := invFun, left_inv := left_inv, right_inv := right_inv }) (And (Eq toCoalgHom✝ toCoalgHom) (Eq invFun✝ invFun))","decl":"/-- An equivalence of coalgebras is an invertible coalgebra homomorphism. -/\nstructure CoalgEquiv (R : Type*) [CommSemiring R] (A B : Type*)\n    [AddCommMonoid A] [AddCommMonoid B] [Module R A] [Module R B]\n    [CoalgebraStruct R A] [CoalgebraStruct R B] extends A →ₗc[R] B, A ≃ₗ[R] B where\n\n"}
{"name":"CoalgEquiv.right_inv","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_5\ninst✝⁶ : CommSemiring R\nA : Type u_6\nB : Type u_7\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nself : CoalgEquiv R A B\n⊢ Function.RightInverse self.invFun self.toFun","decl":"/-- An equivalence of coalgebras is an invertible coalgebra homomorphism. -/\nstructure CoalgEquiv (R : Type*) [CommSemiring R] (A B : Type*)\n    [AddCommMonoid A] [AddCommMonoid B] [Module R A] [Module R B]\n    [CoalgebraStruct R A] [CoalgebraStruct R B] extends A →ₗc[R] B, A ≃ₗ[R] B where\n\n"}
{"name":"CoalgEquiv.mk.sizeOf_spec","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_5\ninst✝⁹ : CommSemiring R\nA : Type u_6\nB : Type u_7\ninst✝⁸ : AddCommMonoid A\ninst✝⁷ : AddCommMonoid B\ninst✝⁶ : Module R A\ninst✝⁵ : Module R B\ninst✝⁴ : CoalgebraStruct R A\ninst✝³ : CoalgebraStruct R B\ninst✝² : SizeOf R\ninst✝¹ : SizeOf A\ninst✝ : SizeOf B\ntoCoalgHom : CoalgHom R A B\ninvFun : B → A\nleft_inv : Function.LeftInverse invFun toCoalgHom.toFun\nright_inv : Function.RightInverse invFun toCoalgHom.toFun\n⊢ Eq (SizeOf.sizeOf { toCoalgHom := toCoalgHom, invFun := invFun, left_inv := left_inv, right_inv := right_inv }) (HAdd.hAdd 1 (SizeOf.sizeOf toCoalgHom))","decl":"/-- An equivalence of coalgebras is an invertible coalgebra homomorphism. -/\nstructure CoalgEquiv (R : Type*) [CommSemiring R] (A B : Type*)\n    [AddCommMonoid A] [AddCommMonoid B] [Module R A] [Module R B]\n    [CoalgebraStruct R A] [CoalgebraStruct R B] extends A →ₗc[R] B, A ≃ₗ[R] B where\n\n"}
{"name":"CoalgEquivClass.toSemilinearEquivClass","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"F : Type u_5\nR : outParam (Type u_6)\nA : outParam (Type u_7)\nB : outParam (Type u_8)\ninst✝⁷ : CommSemiring R\ninst✝⁶ : AddCommMonoid A\ninst✝⁵ : AddCommMonoid B\ninst✝⁴ : Module R A\ninst✝³ : Module R B\ninst✝² : CoalgebraStruct R A\ninst✝¹ : CoalgebraStruct R B\ninst✝ : EquivLike F A B\nself : CoalgEquivClass F R A B\n⊢ SemilinearEquivClass F (RingHom.id R) A B","decl":"/-- `CoalgEquivClass F R A B` asserts `F` is a type of bundled coalgebra equivalences\nfrom `A` to `B`. -/\nclass CoalgEquivClass (F : Type*) (R A B : outParam Type*) [CommSemiring R]\n    [AddCommMonoid A] [AddCommMonoid B] [Module R A] [Module R B]\n    [CoalgebraStruct R A] [CoalgebraStruct R B] [EquivLike F A B]\n    extends CoalgHomClass F R A B, SemilinearEquivClass F (RingHom.id R) A B : Prop\n\n"}
{"name":"CoalgEquivClass.toCoalgHomClass","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"F : Type u_5\nR : outParam (Type u_6)\nA : outParam (Type u_7)\nB : outParam (Type u_8)\ninst✝⁷ : CommSemiring R\ninst✝⁶ : AddCommMonoid A\ninst✝⁵ : AddCommMonoid B\ninst✝⁴ : Module R A\ninst✝³ : Module R B\ninst✝² : CoalgebraStruct R A\ninst✝¹ : CoalgebraStruct R B\ninst✝ : EquivLike F A B\nself : CoalgEquivClass F R A B\n⊢ CoalgHomClass F R A B","decl":"/-- `CoalgEquivClass F R A B` asserts `F` is a type of bundled coalgebra equivalences\nfrom `A` to `B`. -/\nclass CoalgEquivClass (F : Type*) (R A B : outParam Type*) [CommSemiring R]\n    [AddCommMonoid A] [AddCommMonoid B] [Module R A] [Module R B]\n    [CoalgebraStruct R A] [CoalgebraStruct R B] [EquivLike F A B]\n    extends CoalgHomClass F R A B, SemilinearEquivClass F (RingHom.id R) A B : Prop\n\n"}
{"name":"CoalgEquiv.toEquiv_injective","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\n⊢ Function.Injective CoalgEquiv.toEquiv","decl":"theorem toEquiv_injective : Function.Injective (toEquiv : (A ≃ₗc[R] B) → A ≃ B) :=\n  fun ⟨_, _, _, _⟩ ⟨_, _, _, _⟩ h =>\n    (CoalgEquiv.mk.injEq _ _ _ _ _ _ _ _).mpr\n      ⟨CoalgHom.ext (congr_fun (Equiv.mk.inj h).1), (Equiv.mk.inj h).2⟩\n\n"}
{"name":"CoalgEquiv.toEquiv_inj","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne₁ e₂ : CoalgEquiv R A B\n⊢ Iff (Eq e₁.toEquiv e₂.toEquiv) (Eq e₁ e₂)","decl":"@[simp]\ntheorem toEquiv_inj {e₁ e₂ : A ≃ₗc[R] B} : e₁.toEquiv = e₂.toEquiv ↔ e₁ = e₂ :=\n  toEquiv_injective.eq_iff\n\n"}
{"name":"CoalgEquiv.toCoalgHom_injective","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\n⊢ Function.Injective CoalgEquiv.toCoalgHom","decl":"theorem toCoalgHom_injective : Function.Injective (toCoalgHom : (A ≃ₗc[R] B) → A →ₗc[R] B) :=\n  fun _ _ H => toEquiv_injective <| Equiv.ext <| CoalgHom.congr_fun H\n\n"}
{"name":"CoalgEquiv.instCoalgEquivClass","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\n⊢ CoalgEquivClass (CoalgEquiv R A B) R A B","decl":"instance : CoalgEquivClass (A ≃ₗc[R] B) R A B where\n  map_add := (·.map_add')\n  map_smulₛₗ := (·.map_smul')\n  counit_comp := (·.counit_comp)\n  map_comp_comul := (·.map_comp_comul)\n\n"}
{"name":"CoalgEquiv.toCoalgHom_inj","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne₁ e₂ : CoalgEquiv R A B\n⊢ Iff (Eq ↑e₁ ↑e₂) (Eq e₁ e₂)","decl":"@[simp, norm_cast]\ntheorem toCoalgHom_inj {e₁ e₂ : A ≃ₗc[R] B} : (↑e₁ : A →ₗc[R] B) = e₂ ↔ e₁ = e₂ :=\n  toCoalgHom_injective.eq_iff\n\n"}
{"name":"CoalgEquiv.coe_mk","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nf : A → B\nh : ∀ (x y : A), Eq (f (HAdd.hAdd x y)) (HAdd.hAdd (f x) (f y))\nh₀ : ∀ (m : R) (x : A), Eq ({ toFun := f, map_add' := h }.toFun (HSMul.hSMul m x)) (HSMul.hSMul ((RingHom.id R) m) ({ toFun := f, map_add' := h }.toFun x))\nh₁ : Eq (CoalgebraStruct.counit.comp { toFun := f, map_add' := h, map_smul' := h₀ }) CoalgebraStruct.counit\nh₂ : Eq ((TensorProduct.map { toFun := f, map_add' := h, map_smul' := h₀ } { toFun := f, map_add' := h, map_smul' := h₀ }).comp CoalgebraStruct.comul) (CoalgebraStruct.comul.comp { toFun := f, map_add' := h, map_smul' := h₀ })\nh₃ : B → A\nh₄ : Function.LeftInverse h₃ { toFun := f, map_add' := h, map_smul' := h₀, counit_comp := h₁, map_comp_comul := h₂ }.toFun\nh₅ : Function.RightInverse h₃ { toFun := f, map_add' := h, map_smul' := h₀, counit_comp := h₁, map_comp_comul := h₂ }.toFun\n⊢ Eq (⇑{ toFun := f, map_add' := h, map_smul' := h₀, counit_comp := h₁, map_comp_comul := h₂, invFun := h₃, left_inv := h₄, right_inv := h₅ }) f","decl":"@[simp]\ntheorem coe_mk {f h h₀ h₁ h₂ h₃ h₄ h₅} :\n    (⟨⟨⟨⟨f, h⟩, h₀⟩, h₁, h₂⟩, h₃, h₄, h₅⟩ : A ≃ₗc[R] B) = f := rfl\n\n"}
{"name":"CoalgEquiv.coe_coe","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne : CoalgEquiv R A B\n⊢ Eq ⇑↑e ⇑e","decl":"@[simp, norm_cast]\ntheorem coe_coe : ⇑(e : A →ₗc[R] B) = e :=\n  rfl\n\n"}
{"name":"CoalgEquiv.toLinearEquiv_eq_coe","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nf : CoalgEquiv R A B\n⊢ Eq f.toLinearEquiv ↑f","decl":"@[simp]\ntheorem toLinearEquiv_eq_coe (f : A ≃ₗc[R] B) : f.toLinearEquiv = f :=\n  rfl\n\n"}
{"name":"CoalgEquiv.toCoalgHom_eq_coe","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nf : CoalgEquiv R A B\n⊢ Eq f.toCoalgHom ↑f","decl":"@[simp]\ntheorem toCoalgHom_eq_coe (f : A ≃ₗc[R] B) : f.toCoalgHom = f :=\n  rfl\n\n"}
{"name":"CoalgEquiv.coe_toLinearEquiv","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne : CoalgEquiv R A B\n⊢ Eq ⇑↑e ⇑e","decl":"@[simp]\ntheorem coe_toLinearEquiv : ⇑(e : A ≃ₗ[R] B) = e :=\n  rfl\n\n"}
{"name":"CoalgEquiv.coe_toCoalgHom","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne : CoalgEquiv R A B\n⊢ Eq ⇑↑e ⇑e","decl":"@[simp]\ntheorem coe_toCoalgHom : ⇑(e : A →ₗc[R] B) = e :=\n  rfl\n\n"}
{"name":"CoalgEquiv.toLinearEquiv_toLinearMap","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne : CoalgEquiv R A B\n⊢ Eq ↑↑e ↑↑e","decl":"theorem toLinearEquiv_toLinearMap : ((e : A ≃ₗ[R] B) : A →ₗ[R] B) = (e : A →ₗc[R] B) :=\n  rfl\n\n"}
{"name":"CoalgEquiv.ext_iff","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne e' : CoalgEquiv R A B\n⊢ Iff (Eq e e') (∀ (x : A), Eq (e x) (e' x))","decl":"@[ext]\ntheorem ext (h : ∀ x, e x = e' x) : e = e' :=\n  DFunLike.ext _ _ h\n\n"}
{"name":"CoalgEquiv.ext","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne e' : CoalgEquiv R A B\nh : ∀ (x : A), Eq (e x) (e' x)\n⊢ Eq e e'","decl":"@[ext]\ntheorem ext (h : ∀ x, e x = e' x) : e = e' :=\n  DFunLike.ext _ _ h\n\n"}
{"name":"CoalgEquiv.congr_arg","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne : CoalgEquiv R A B\nx x' : A\na✝ : Eq x x'\n⊢ Eq (e x) (e x')","decl":"protected theorem congr_arg {x x'} : x = x' → e x = e x' :=\n  DFunLike.congr_arg e\n\n"}
{"name":"CoalgEquiv.congr_fun","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne e' : CoalgEquiv R A B\nh : Eq e e'\nx : A\n⊢ Eq (e x) (e' x)","decl":"protected theorem congr_fun (h : e = e') (x : A) : e x = e' x :=\n  DFunLike.congr_fun h x\n\n"}
{"name":"CoalgEquiv.refl_apply","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : CoalgebraStruct R A\na : A\n⊢ Eq ((CoalgEquiv.refl R A) a) a","decl":"/-- The identity map is a coalgebra equivalence. -/\n@[refl, simps!]\ndef refl : A ≃ₗc[R] A :=\n  { CoalgHom.id R A, LinearEquiv.refl R A with }\n\n"}
{"name":"CoalgEquiv.refl_invFun","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : CoalgebraStruct R A\na✝ : A\n⊢ Eq ((CoalgEquiv.refl R A).invFun a✝) a✝","decl":"/-- The identity map is a coalgebra equivalence. -/\n@[refl, simps!]\ndef refl : A ≃ₗc[R] A :=\n  { CoalgHom.id R A, LinearEquiv.refl R A with }\n\n"}
{"name":"CoalgEquiv.refl_toLinearEquiv","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : CoalgebraStruct R A\n⊢ Eq (↑(CoalgEquiv.refl R A)) (LinearEquiv.refl R A)","decl":"@[simp]\ntheorem refl_toLinearEquiv : refl R A = LinearEquiv.refl R A := rfl\n\n"}
{"name":"CoalgEquiv.refl_toCoalgHom","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : CoalgebraStruct R A\n⊢ Eq (↑(CoalgEquiv.refl R A)) (CoalgHom.id R A)","decl":"@[simp]\ntheorem refl_toCoalgHom : refl R A = CoalgHom.id R A :=\n  rfl\n\n"}
{"name":"CoalgEquiv.symm_toLinearEquiv","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne : CoalgEquiv R A B\n⊢ Eq (↑e.symm) (↑e).symm","decl":"@[simp]\ntheorem symm_toLinearEquiv (e : A ≃ₗc[R] B) :\n    e.symm = (e : A ≃ₗ[R] B).symm := rfl\n\n"}
{"name":"CoalgEquiv.coe_symm_toLinearEquiv","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne : CoalgEquiv R A B\n⊢ Eq ⇑(↑e).symm ⇑e.symm","decl":"theorem coe_symm_toLinearEquiv (e : A ≃ₗc[R] B) :\n    ⇑(e : A ≃ₗ[R] B).symm = e.symm := rfl\n\n"}
{"name":"CoalgEquiv.symm_toCoalgHom","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne : CoalgEquiv R A B\n⊢ Eq ↑↑e.symm ↑(↑e).symm","decl":"@[simp]\ntheorem symm_toCoalgHom (e : A ≃ₗc[R] B) :\n    ((e.symm : B →ₗc[R] A) : B →ₗ[R] A) = (e : A ≃ₗ[R] B).symm := rfl\n\n"}
{"name":"CoalgEquiv.symm_apply_apply","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne : CoalgEquiv R A B\nx : A\n⊢ Eq (e.symm (e x)) x","decl":"@[simp]\ntheorem symm_apply_apply (e : A ≃ₗc[R] B) (x) :\n    e.symm (e x) = x :=\n  LinearEquiv.symm_apply_apply (e : A ≃ₗ[R] B) x\n\n"}
{"name":"CoalgEquiv.apply_symm_apply","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne : CoalgEquiv R A B\nx : B\n⊢ Eq (e (e.symm x)) x","decl":"@[simp]\ntheorem apply_symm_apply (e : A ≃ₗc[R] B) (x) :\n    e (e.symm x) = x :=\n  LinearEquiv.apply_symm_apply (e : A ≃ₗ[R] B) x\n\n"}
{"name":"CoalgEquiv.invFun_eq_symm","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne : CoalgEquiv R A B\n⊢ Eq e.invFun ⇑e.symm","decl":"@[simp]\ntheorem invFun_eq_symm : e.invFun = e.symm :=\n  rfl\n\n"}
{"name":"CoalgEquiv.coe_toEquiv_symm","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne : CoalgEquiv R A B\n⊢ Eq e.toEquiv.symm ↑e.symm","decl":"@[simp]\ntheorem coe_toEquiv_symm : e.toEquiv.symm = e.symm :=\n  rfl\n\n"}
{"name":"CoalgEquiv.trans_apply","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\nC : Type u_4\ninst✝⁹ : CommSemiring R\ninst✝⁸ : AddCommMonoid A\ninst✝⁷ : AddCommMonoid B\ninst✝⁶ : AddCommMonoid C\ninst✝⁵ : Module R A\ninst✝⁴ : Module R B\ninst✝³ : Module R C\ninst✝² : CoalgebraStruct R A\ninst✝¹ : CoalgebraStruct R B\ninst✝ : CoalgebraStruct R C\ne₁₂ : CoalgEquiv R A B\ne₂₃ : CoalgEquiv R B C\na✝ : A\n⊢ Eq ((e₁₂.trans e₂₃) a✝) (e₂₃ (e₁₂ a✝))","decl":"/-- Coalgebra equivalences are transitive. -/\n@[trans, simps!]\ndef trans (e₁₂ : A ≃ₗc[R] B) (e₂₃ : B ≃ₗc[R] C) : A ≃ₗc[R] C :=\n  { (e₂₃ : B →ₗc[R] C).comp (e₁₂ : A →ₗc[R] B), e₁₂.toLinearEquiv ≪≫ₗ e₂₃.toLinearEquiv with }\n\n"}
{"name":"CoalgEquiv.trans_invFun","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\nC : Type u_4\ninst✝⁹ : CommSemiring R\ninst✝⁸ : AddCommMonoid A\ninst✝⁷ : AddCommMonoid B\ninst✝⁶ : AddCommMonoid C\ninst✝⁵ : Module R A\ninst✝⁴ : Module R B\ninst✝³ : Module R C\ninst✝² : CoalgebraStruct R A\ninst✝¹ : CoalgebraStruct R B\ninst✝ : CoalgebraStruct R C\ne₁₂ : CoalgEquiv R A B\ne₂₃ : CoalgEquiv R B C\na✝ : C\n⊢ Eq ((e₁₂.trans e₂₃).invFun a✝) ((↑e₁₂).symm ((↑e₂₃).symm a✝))","decl":"/-- Coalgebra equivalences are transitive. -/\n@[trans, simps!]\ndef trans (e₁₂ : A ≃ₗc[R] B) (e₂₃ : B ≃ₗc[R] C) : A ≃ₗc[R] C :=\n  { (e₂₃ : B →ₗc[R] C).comp (e₁₂ : A →ₗc[R] B), e₁₂.toLinearEquiv ≪≫ₗ e₂₃.toLinearEquiv with }\n\n"}
{"name":"CoalgEquiv.trans_toLinearEquiv","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\nC : Type u_4\ninst✝⁹ : CommSemiring R\ninst✝⁸ : AddCommMonoid A\ninst✝⁷ : AddCommMonoid B\ninst✝⁶ : AddCommMonoid C\ninst✝⁵ : Module R A\ninst✝⁴ : Module R B\ninst✝³ : Module R C\ninst✝² : CoalgebraStruct R A\ninst✝¹ : CoalgebraStruct R B\ninst✝ : CoalgebraStruct R C\ne₁₂ : CoalgEquiv R A B\ne₂₃ : CoalgEquiv R B C\n⊢ Eq (↑(e₁₂.trans e₂₃)) ((↑e₁₂).trans ↑e₂₃)","decl":"theorem trans_toLinearEquiv :\n    (e₁₂.trans e₂₃ : A ≃ₗ[R] C) = (e₁₂ : A ≃ₗ[R] B) ≪≫ₗ e₂₃ := rfl\n\n"}
{"name":"CoalgEquiv.trans_toCoalgHom","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\nC : Type u_4\ninst✝⁹ : CommSemiring R\ninst✝⁸ : AddCommMonoid A\ninst✝⁷ : AddCommMonoid B\ninst✝⁶ : AddCommMonoid C\ninst✝⁵ : Module R A\ninst✝⁴ : Module R B\ninst✝³ : Module R C\ninst✝² : CoalgebraStruct R A\ninst✝¹ : CoalgebraStruct R B\ninst✝ : CoalgebraStruct R C\ne₁₂ : CoalgEquiv R A B\ne₂₃ : CoalgEquiv R B C\n⊢ Eq (↑(e₁₂.trans e₂₃)) (e₂₃.comp ↑e₁₂)","decl":"@[simp]\ntheorem trans_toCoalgHom :\n    (e₁₂.trans e₂₃ : A →ₗc[R] C) = e₂₃.comp e₁₂ := rfl\n\n"}
{"name":"CoalgEquiv.coe_toEquiv_trans","module":"Mathlib.RingTheory.Coalgebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\nC : Type u_4\ninst✝⁹ : CommSemiring R\ninst✝⁸ : AddCommMonoid A\ninst✝⁷ : AddCommMonoid B\ninst✝⁶ : AddCommMonoid C\ninst✝⁵ : Module R A\ninst✝⁴ : Module R B\ninst✝³ : Module R C\ninst✝² : CoalgebraStruct R A\ninst✝¹ : CoalgebraStruct R B\ninst✝ : CoalgebraStruct R C\ne₁₂ : CoalgEquiv R A B\ne₂₃ : CoalgEquiv R B C\n⊢ Eq ((↑e₁₂).trans ↑e₂₃) ↑(e₁₂.trans e₂₃)","decl":"@[simp]\ntheorem coe_toEquiv_trans : (e₁₂ : A ≃ B).trans e₂₃ = (e₁₂.trans e₂₃ : A ≃ C) :=\n  rfl\n\n"}
