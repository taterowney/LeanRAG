{"name":"RingHom.map_rat_algebraMap","module":"Mathlib.Algebra.Algebra.Rat","initialProofState":"R : Type u_2\nS : Type u_3\ninst✝³ : Semiring R\ninst✝² : Semiring S\ninst✝¹ : Algebra Rat R\ninst✝ : Algebra Rat S\nf : RingHom R S\nr : Rat\n⊢ Eq (f ((algebraMap Rat R) r)) ((algebraMap Rat S) r)","decl":"@[simp]\ntheorem map_rat_algebraMap [Semiring R] [Semiring S] [Algebra ℚ R] [Algebra ℚ S] (f : R →+* S)\n    (r : ℚ) : f (algebraMap ℚ R r) = algebraMap ℚ S r :=\n  RingHom.ext_iff.1 (Subsingleton.elim (f.comp (algebraMap ℚ R)) (algebraMap ℚ S)) r\n\n"}
{"name":"NNRat.cast_smul_eq_nnqsmul","module":"Mathlib.Algebra.Algebra.Rat","initialProofState":"R : Type u_2\nS : Type u_3\ninst✝⁴ : DivisionSemiring R\ninst✝³ : CharZero R\ninst✝² : Semiring S\ninst✝¹ : Module NNRat S\ninst✝ : Module R S\nq : NNRat\na : S\n⊢ Eq (HSMul.hSMul (↑q) a) (HSMul.hSMul q a)","decl":"variable (R) in\n/-- `nnqsmul` is equal to any other module structure via a cast. -/\nlemma cast_smul_eq_nnqsmul [Module R S] (q : ℚ≥0) (a : S) : (q : R) • a = q • a := by\n  refine MulAction.injective₀ (G₀ := ℚ≥0) (Nat.cast_ne_zero.2 q.den_pos.ne') ?_\n  dsimp\n  rw [← mul_smul, den_mul_eq_num, Nat.cast_smul_eq_nsmul, Nat.cast_smul_eq_nsmul, ← smul_assoc,\n    nsmul_eq_mul q.den, ← cast_natCast, ← cast_mul, den_mul_eq_num, cast_natCast,\n    Nat.cast_smul_eq_nsmul]\n\n"}
{"name":"RingHomClass.toLinearMapClassNNRat","module":"Mathlib.Algebra.Algebra.Rat","initialProofState":"F : Type u_1\nR : Type u_2\nS : Type u_3\ninst✝⁵ : DivisionSemiring R\ninst✝⁴ : CharZero R\ninst✝³ : DivisionSemiring S\ninst✝² : CharZero S\ninst✝¹ : FunLike F R S\ninst✝ : RingHomClass F R S\n⊢ LinearMapClass F NNRat R S","decl":"instance _root_.RingHomClass.toLinearMapClassNNRat [FunLike F R S] [RingHomClass F R S] :\n    LinearMapClass F ℚ≥0 R S where\n  map_smulₛₗ f q a := by simp [smul_def, cast_id]\n\n"}
{"name":"NNRat.instSMulCommClass","module":"Mathlib.Algebra.Algebra.Rat","initialProofState":"R : Type u_2\nS : Type u_3\ninst✝³ : DivisionSemiring S\ninst✝² : CharZero S\ninst✝¹ : SMul R S\ninst✝ : SMulCommClass R S S\n⊢ SMulCommClass NNRat R S","decl":"instance instSMulCommClass [SMulCommClass R S S] : SMulCommClass ℚ≥0 R S where\n  smul_comm q a b := by simp [smul_def, mul_smul_comm]\n\n"}
{"name":"NNRat.instSMulCommClass'","module":"Mathlib.Algebra.Algebra.Rat","initialProofState":"R : Type u_2\nS : Type u_3\ninst✝³ : DivisionSemiring S\ninst✝² : CharZero S\ninst✝¹ : SMul R S\ninst✝ : SMulCommClass S R S\n⊢ SMulCommClass R NNRat S","decl":"instance instSMulCommClass' [SMulCommClass S R S] : SMulCommClass R ℚ≥0 S :=\n  have := SMulCommClass.symm S R S; SMulCommClass.symm _ _ _\n\n"}
{"name":"Rat.cast_smul_eq_qsmul","module":"Mathlib.Algebra.Algebra.Rat","initialProofState":"R : Type u_2\nS : Type u_3\ninst✝⁴ : DivisionRing R\ninst✝³ : CharZero R\ninst✝² : Ring S\ninst✝¹ : Module Rat S\ninst✝ : Module R S\nq : Rat\na : S\n⊢ Eq (HSMul.hSMul (↑q) a) (HSMul.hSMul q a)","decl":"variable (R) in\n/-- `nnqsmul` is equal to any other module structure via a cast. -/\nlemma cast_smul_eq_qsmul [Module R S] (q : ℚ) (a : S) : (q : R) • a = q • a := by\n  refine MulAction.injective₀ (G₀ := ℚ) (Nat.cast_ne_zero.2 q.den_pos.ne') ?_\n  dsimp\n  rw [← mul_smul, den_mul_eq_num, Nat.cast_smul_eq_nsmul, Int.cast_smul_eq_zsmul, ← smul_assoc,\n    nsmul_eq_mul q.den, ← cast_natCast, ← cast_mul, den_mul_eq_num, cast_intCast,\n    Int.cast_smul_eq_zsmul]\n\n"}
{"name":"RingHomClass.toLinearMapClassRat","module":"Mathlib.Algebra.Algebra.Rat","initialProofState":"F : Type u_1\nR : Type u_2\nS : Type u_3\ninst✝⁵ : DivisionRing R\ninst✝⁴ : CharZero R\ninst✝³ : DivisionRing S\ninst✝² : CharZero S\ninst✝¹ : FunLike F R S\ninst✝ : RingHomClass F R S\n⊢ LinearMapClass F Rat R S","decl":"instance _root_.RingHomClass.toLinearMapClassRat [FunLike F R S] [RingHomClass F R S] :\n    LinearMapClass F ℚ R S where\n  map_smulₛₗ f q a := by simp [smul_def, cast_id]\n\n"}
{"name":"Rat.instSMulCommClass","module":"Mathlib.Algebra.Algebra.Rat","initialProofState":"R : Type u_2\nS : Type u_3\ninst✝³ : DivisionRing S\ninst✝² : CharZero S\ninst✝¹ : SMul R S\ninst✝ : SMulCommClass R S S\n⊢ SMulCommClass Rat R S","decl":"instance instSMulCommClass [SMulCommClass R S S] : SMulCommClass ℚ R S where\n  smul_comm q a b := by simp [smul_def, mul_smul_comm]\n\n"}
{"name":"Rat.instSMulCommClass'","module":"Mathlib.Algebra.Algebra.Rat","initialProofState":"R : Type u_2\nS : Type u_3\ninst✝³ : DivisionRing S\ninst✝² : CharZero S\ninst✝¹ : SMul R S\ninst✝ : SMulCommClass S R S\n⊢ SMulCommClass R Rat S","decl":"instance instSMulCommClass' [SMulCommClass S R S] : SMulCommClass R ℚ S :=\n  have := SMulCommClass.symm S R S; SMulCommClass.symm _ _ _\n\n"}
{"name":"Rat.algebra_rat_subsingleton","module":"Mathlib.Algebra.Algebra.Rat","initialProofState":"R : Type u_4\ninst✝ : Semiring R\n⊢ Subsingleton (Algebra Rat R)","decl":"instance algebra_rat_subsingleton {R} [Semiring R] : Subsingleton (Algebra ℚ R) :=\n  ⟨fun x y => Algebra.algebra_ext x y <| RingHom.congr_fun <| Subsingleton.elim _ _⟩\n\n"}
