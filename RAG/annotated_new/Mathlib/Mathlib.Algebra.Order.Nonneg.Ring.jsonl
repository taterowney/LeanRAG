{"name":"Nonneg.existsAddOfLE","module":"Mathlib.Algebra.Order.Nonneg.Ring","initialProofState":"α : Type u_1\ninst✝¹ : StrictOrderedCommSemiring α\ninst✝ : ExistsAddOfLE α\n⊢ ExistsAddOfLE (Subtype fun x => LE.le 0 x)","decl":"instance existsAddOfLE [StrictOrderedCommSemiring α] [ExistsAddOfLE α] :\n    ExistsAddOfLE { x : α // 0 ≤ x } :=\n  ⟨fun {a b} h ↦ by\n    rw [← Subtype.coe_le_coe] at h\n    obtain ⟨c, hc⟩ := exists_add_of_le h\n    refine ⟨⟨c, ?_⟩, by simp [Subtype.ext_iff, hc]⟩\n    rw [← add_zero a.val, hc] at h\n    exact le_of_add_le_add_left h⟩\n\n"}
{"name":"Nonneg.nontrivial","module":"Mathlib.Algebra.Order.Nonneg.Ring","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedSemiring α\n⊢ Nontrivial (Subtype fun x => LE.le 0 x)","decl":"instance nontrivial [LinearOrderedSemiring α] : Nontrivial { x : α // 0 ≤ x } :=\n  ⟨⟨0, 1, fun h => zero_ne_one (congr_arg Subtype.val h)⟩⟩\n\n"}
{"name":"Nonneg.canonicallyOrderedAdd","module":"Mathlib.Algebra.Order.Nonneg.Ring","initialProofState":"α : Type u_1\ninst✝ : OrderedRing α\n⊢ CanonicallyOrderedAdd (Subtype fun x => LE.le 0 x)","decl":"instance canonicallyOrderedAdd [OrderedRing α] :\n    CanonicallyOrderedAdd { x : α // 0 ≤ x } :=\n  { le_self_add := fun _ b => le_add_of_nonneg_right b.2\n    exists_add_of_le := fun {a b} h =>\n      ⟨⟨b - a, sub_nonneg_of_le h⟩, Subtype.ext (add_sub_cancel _ _).symm⟩ }\n\n"}
{"name":"Nonneg.noZeroDivisors","module":"Mathlib.Algebra.Order.Nonneg.Ring","initialProofState":"α : Type u_1\ninst✝¹ : OrderedSemiring α\ninst✝ : NoZeroDivisors α\n⊢ NoZeroDivisors (Subtype fun x => LE.le 0 x)","decl":"instance noZeroDivisors [OrderedSemiring α] [NoZeroDivisors α] :\n    NoZeroDivisors { x : α // 0 ≤ x } :=\n  { eq_zero_or_eq_zero_of_mul_eq_zero := by\n      rintro ⟨a, ha⟩ ⟨b, hb⟩\n      simp only [mk_mul_mk, mk_eq_zero, mul_eq_zero, imp_self]}\n\n"}
{"name":"Nonneg.orderedSub","module":"Mathlib.Algebra.Order.Nonneg.Ring","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedRing α\n⊢ OrderedSub (Subtype fun x => LE.le 0 x)","decl":"instance orderedSub [LinearOrderedRing α] : OrderedSub { x : α // 0 ≤ x } :=\n  ⟨by\n    rintro ⟨a, ha⟩ ⟨b, hb⟩ ⟨c, hc⟩\n    simp only [sub_le_iff_le_add, Subtype.mk_le_mk, mk_sub_mk, mk_add_mk, toNonneg_le,\n      Subtype.coe_mk]⟩\n\n"}
