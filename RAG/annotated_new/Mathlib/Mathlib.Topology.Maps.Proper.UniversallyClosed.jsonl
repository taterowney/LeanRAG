{"name":"isProperMap_iff_isClosedMap_ultrafilter","module":"Mathlib.Topology.Maps.Proper.UniversallyClosed","initialProofState":"X : Type u\nY : Type v\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\n⊢ Iff (IsProperMap f) (And (Continuous f) (IsClosedMap (Prod.map f id)))","decl":"/-- A map `f : X → Y` is proper if and only if it is continuous and the map\n`(Prod.map f id : X × Ultrafilter X → Y × Ultrafilter X)` is closed. This is stronger than\n`isProperMap_iff_universally_closed` since it shows that there's only one space to check to get\nproperness, but in most cases it doesn't matter. -/\ntheorem isProperMap_iff_isClosedMap_ultrafilter {X : Type u} {Y : Type v} [TopologicalSpace X]\n    [TopologicalSpace Y] {f : X → Y} :\n    IsProperMap f ↔ Continuous f ∧ IsClosedMap\n      (Prod.map f id : X × Ultrafilter X → Y × Ultrafilter X) := by\n  -- The proof is basically the same as above.\n  constructor <;> intro H\n  · exact ⟨H.continuous, H.universally_closed _⟩\n  · rw [isProperMap_iff_ultrafilter]\n    refine ⟨H.1, fun 𝒰 y hy ↦ ?_⟩\n    let F : Set (X × Ultrafilter X) := closure {xℱ | xℱ.2 = pure xℱ.1}\n    have := H.2 F isClosed_closure\n    have : (y, 𝒰) ∈ Prod.map f id '' F :=\n      this.mem_of_tendsto (hy.prod_mk_nhds (Ultrafilter.tendsto_pure_self 𝒰))\n        (Eventually.of_forall fun x ↦ ⟨⟨x, pure x⟩, subset_closure rfl, rfl⟩)\n    rcases this with ⟨⟨x, _⟩, hx, ⟨_, _⟩⟩\n    refine ⟨x, rfl, fun U hU ↦ Ultrafilter.compl_not_mem_iff.mp fun hUc ↦ ?_⟩\n    rw [mem_closure_iff_nhds] at hx\n    rcases hx (U ×ˢ {𝒢 | Uᶜ ∈ 𝒢}) (prod_mem_nhds hU ((ultrafilter_isOpen_basic _).mem_nhds hUc))\n      with ⟨⟨y, 𝒢⟩, ⟨⟨hy : y ∈ U, hy' : Uᶜ ∈ 𝒢⟩, rfl : 𝒢 = pure y⟩⟩\n    exact hy' hy\n\n"}
{"name":"isProperMap_iff_universally_closed","module":"Mathlib.Topology.Maps.Proper.UniversallyClosed","initialProofState":"X : Type u\nY : Type v\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\n⊢ Iff (IsProperMap f) (And (Continuous f) (∀ (Z : Type u) [inst : TopologicalSpace Z], IsClosedMap (Prod.map f id)))","decl":"/-- A map `f : X → Y` is proper if and only if it is continuous and **universally closed**, in the\nsense that for any topological space `Z`, the map `Prod.map f id : X × Z → Y × Z` is closed. Note\nthat `Z` lives in the same universe as `X` here, but `IsProperMap.universally_closed` does not\nhave this restriction.\n\nThis is taken as the definition of properness in\n[N. Bourbaki, *General Topology*][bourbaki1966]. -/\ntheorem isProperMap_iff_universally_closed {X : Type u} {Y : Type v} [TopologicalSpace X]\n    [TopologicalSpace Y] {f : X → Y} :\n    IsProperMap f ↔ Continuous f ∧ ∀ (Z : Type u) [TopologicalSpace Z],\n      IsClosedMap (Prod.map f id : X × Z → Y × Z) := by\n  constructor <;> intro H\n  · exact ⟨H.continuous, fun Z ↦ H.universally_closed _⟩\n  · rw [isProperMap_iff_isClosedMap_ultrafilter]\n    exact ⟨H.1, H.2 _⟩\n"}
