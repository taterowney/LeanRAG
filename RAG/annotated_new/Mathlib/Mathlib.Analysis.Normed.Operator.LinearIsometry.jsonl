{"name":"LinearIsometry.mk.sizeOf_spec","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\ninst✝⁹ : Semiring R\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R R₂\nE : Type u_11\nE₂ : Type u_12\ninst✝⁷ : SeminormedAddCommGroup E\ninst✝⁶ : SeminormedAddCommGroup E₂\ninst✝⁵ : Module R E\ninst✝⁴ : Module R₂ E₂\ninst✝³ : SizeOf R\ninst✝² : SizeOf R₂\ninst✝¹ : SizeOf E\ninst✝ : SizeOf E₂\ntoLinearMap : LinearMap σ₁₂ E E₂\nnorm_map' : ∀ (x : E), Eq (Norm.norm (toLinearMap x)) (Norm.norm x)\n⊢ Eq (SizeOf.sizeOf { toLinearMap := toLinearMap, norm_map' := norm_map' }) (HAdd.hAdd 1 (SizeOf.sizeOf toLinearMap))","decl":"/-- A `σ₁₂`-semilinear isometric embedding of a normed `R`-module into an `R₂`-module,\ndenoted as `f : E →ₛₗᵢ[σ₁₂] E₂`. -/\nstructure LinearIsometry (σ₁₂ : R →+* R₂) (E E₂ : Type*) [SeminormedAddCommGroup E]\n  [SeminormedAddCommGroup E₂] [Module R E] [Module R₂ E₂] extends E →ₛₗ[σ₁₂] E₂ where\n  norm_map' : ∀ x, ‖toLinearMap x‖ = ‖x‖\n\n"}
{"name":"LinearIsometry.mk.inj","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\nE : Type u_11\nE₂ : Type u_12\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ntoLinearMap✝ : LinearMap σ₁₂ E E₂\nnorm_map'✝ : ∀ (x : E), Eq (Norm.norm (toLinearMap✝ x)) (Norm.norm x)\ntoLinearMap : LinearMap σ₁₂ E E₂\nnorm_map' : ∀ (x : E), Eq (Norm.norm (toLinearMap x)) (Norm.norm x)\nx✝ : Eq { toLinearMap := toLinearMap✝, norm_map' := norm_map'✝ } { toLinearMap := toLinearMap, norm_map' := norm_map' }\n⊢ Eq toLinearMap✝ toLinearMap","decl":"/-- A `σ₁₂`-semilinear isometric embedding of a normed `R`-module into an `R₂`-module,\ndenoted as `f : E →ₛₗᵢ[σ₁₂] E₂`. -/\nstructure LinearIsometry (σ₁₂ : R →+* R₂) (E E₂ : Type*) [SeminormedAddCommGroup E]\n  [SeminormedAddCommGroup E₂] [Module R E] [Module R₂ E₂] extends E →ₛₗ[σ₁₂] E₂ where\n  norm_map' : ∀ x, ‖toLinearMap x‖ = ‖x‖\n\n"}
{"name":"LinearIsometry.mk.injEq","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\nE : Type u_11\nE₂ : Type u_12\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ntoLinearMap✝ : LinearMap σ₁₂ E E₂\nnorm_map'✝ : ∀ (x : E), Eq (Norm.norm (toLinearMap✝ x)) (Norm.norm x)\ntoLinearMap : LinearMap σ₁₂ E E₂\nnorm_map' : ∀ (x : E), Eq (Norm.norm (toLinearMap x)) (Norm.norm x)\n⊢ Eq (Eq { toLinearMap := toLinearMap✝, norm_map' := norm_map'✝ } { toLinearMap := toLinearMap, norm_map' := norm_map' }) (Eq toLinearMap✝ toLinearMap)","decl":"/-- A `σ₁₂`-semilinear isometric embedding of a normed `R`-module into an `R₂`-module,\ndenoted as `f : E →ₛₗᵢ[σ₁₂] E₂`. -/\nstructure LinearIsometry (σ₁₂ : R →+* R₂) (E E₂ : Type*) [SeminormedAddCommGroup E]\n  [SeminormedAddCommGroup E₂] [Module R E] [Module R₂ E₂] extends E →ₛₗ[σ₁₂] E₂ where\n  norm_map' : ∀ x, ‖toLinearMap x‖ = ‖x‖\n\n"}
{"name":"LinearIsometry.norm_map'","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\nE : Type u_11\nE₂ : Type u_12\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nself : LinearIsometry σ₁₂ E E₂\nx : E\n⊢ Eq (Norm.norm (self.toLinearMap x)) (Norm.norm x)","decl":"/-- A `σ₁₂`-semilinear isometric embedding of a normed `R`-module into an `R₂`-module,\ndenoted as `f : E →ₛₗᵢ[σ₁₂] E₂`. -/\nstructure LinearIsometry (σ₁₂ : R →+* R₂) (E E₂ : Type*) [SeminormedAddCommGroup E]\n  [SeminormedAddCommGroup E₂] [Module R E] [Module R₂ E₂] extends E →ₛₗ[σ₁₂] E₂ where\n  norm_map' : ∀ x, ‖toLinearMap x‖ = ‖x‖\n\n"}
{"name":"SemilinearIsometryClass.toSemilinearMapClass","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"𝓕 : Type u_11\nR : outParam (Type u_12)\nR₂ : outParam (Type u_13)\ninst✝⁶ : Semiring R\ninst✝⁵ : Semiring R₂\nσ₁₂ : outParam (RingHom R R₂)\nE : outParam (Type u_14)\nE₂ : outParam (Type u_15)\ninst✝⁴ : SeminormedAddCommGroup E\ninst✝³ : SeminormedAddCommGroup E₂\ninst✝² : Module R E\ninst✝¹ : Module R₂ E₂\ninst✝ : FunLike 𝓕 E E₂\nself : SemilinearIsometryClass 𝓕 σ₁₂ E E₂\n⊢ SemilinearMapClass 𝓕 σ₁₂ E E₂","decl":"/-- `SemilinearIsometryClass F σ E E₂` asserts `F` is a type of bundled `σ`-semilinear isometries\n`E → E₂`.\n\nSee also `LinearIsometryClass F R E E₂` for the case where `σ` is the identity map on `R`.\n\nA map `f` between an `R`-module and an `S`-module over a ring homomorphism `σ : R →+* S`\nis semilinear if it satisfies the two properties `f (x + y) = f x + f y` and\n`f (c • x) = (σ c) • f x`. -/\nclass SemilinearIsometryClass (𝓕 : Type*) {R R₂ : outParam Type*} [Semiring R] [Semiring R₂]\n  (σ₁₂ : outParam <| R →+* R₂) (E E₂ : outParam Type*) [SeminormedAddCommGroup E]\n  [SeminormedAddCommGroup E₂] [Module R E] [Module R₂ E₂] [FunLike 𝓕 E E₂] extends\n  SemilinearMapClass 𝓕 σ₁₂ E E₂ : Prop where\n  norm_map : ∀ (f : 𝓕) (x : E), ‖f x‖ = ‖x‖\n\n"}
{"name":"SemilinearIsometryClass.norm_map","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"𝓕 : Type u_11\nR : outParam (Type u_12)\nR₂ : outParam (Type u_13)\ninst✝⁶ : Semiring R\ninst✝⁵ : Semiring R₂\nσ₁₂ : outParam (RingHom R R₂)\nE : outParam (Type u_14)\nE₂ : outParam (Type u_15)\ninst✝⁴ : SeminormedAddCommGroup E\ninst✝³ : SeminormedAddCommGroup E₂\ninst✝² : Module R E\ninst✝¹ : Module R₂ E₂\ninst✝ : FunLike 𝓕 E E₂\nself : SemilinearIsometryClass 𝓕 σ₁₂ E E₂\nf : 𝓕\nx : E\n⊢ Eq (Norm.norm (f x)) (Norm.norm x)","decl":"/-- `SemilinearIsometryClass F σ E E₂` asserts `F` is a type of bundled `σ`-semilinear isometries\n`E → E₂`.\n\nSee also `LinearIsometryClass F R E E₂` for the case where `σ` is the identity map on `R`.\n\nA map `f` between an `R`-module and an `S`-module over a ring homomorphism `σ : R →+* S`\nis semilinear if it satisfies the two properties `f (x + y) = f x + f y` and\n`f (c • x) = (σ c) • f x`. -/\nclass SemilinearIsometryClass (𝓕 : Type*) {R R₂ : outParam Type*} [Semiring R] [Semiring R₂]\n  (σ₁₂ : outParam <| R →+* R₂) (E E₂ : outParam Type*) [SeminormedAddCommGroup E]\n  [SeminormedAddCommGroup E₂] [Module R E] [Module R₂ E₂] [FunLike 𝓕 E E₂] extends\n  SemilinearMapClass 𝓕 σ₁₂ E E₂ : Prop where\n  norm_map : ∀ (f : 𝓕) (x : E), ‖f x‖ = ‖x‖\n\n"}
{"name":"SemilinearIsometryClass.isometry","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\n𝓕 : Type u_10\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝⁵ : SeminormedAddCommGroup E\ninst✝⁴ : SeminormedAddCommGroup E₂\ninst✝³ : Module R E\ninst✝² : Module R₂ E₂\ninst✝¹ : FunLike 𝓕 E E₂\ninst✝ : SemilinearIsometryClass 𝓕 σ₁₂ E E₂\nf : 𝓕\n⊢ Isometry ⇑f","decl":"protected theorem isometry [SemilinearIsometryClass 𝓕 σ₁₂ E E₂] (f : 𝓕) : Isometry f :=\n  AddMonoidHomClass.isometry_of_norm _ (norm_map _)\n\n"}
{"name":"SemilinearIsometryClass.continuous","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\n𝓕 : Type u_10\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝⁵ : SeminormedAddCommGroup E\ninst✝⁴ : SeminormedAddCommGroup E₂\ninst✝³ : Module R E\ninst✝² : Module R₂ E₂\ninst✝¹ : FunLike 𝓕 E E₂\ninst✝ : SemilinearIsometryClass 𝓕 σ₁₂ E E₂\nf : 𝓕\n⊢ Continuous ⇑f","decl":"@[continuity]\nprotected theorem continuous [SemilinearIsometryClass 𝓕 σ₁₂ E E₂] (f : 𝓕) : Continuous f :=\n  (SemilinearIsometryClass.isometry f).continuous\n\n-- Should be `@[simp]` but it doesn't fire due to https://github.com/leanprover/lean4/issues/3107.\n"}
{"name":"SemilinearIsometryClass.nnnorm_map","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\n𝓕 : Type u_10\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝⁵ : SeminormedAddCommGroup E\ninst✝⁴ : SeminormedAddCommGroup E₂\ninst✝³ : Module R E\ninst✝² : Module R₂ E₂\ninst✝¹ : FunLike 𝓕 E E₂\ninst✝ : SemilinearIsometryClass 𝓕 σ₁₂ E E₂\nf : 𝓕\nx : E\n⊢ Eq (NNNorm.nnnorm (f x)) (NNNorm.nnnorm x)","decl":"theorem nnnorm_map [SemilinearIsometryClass 𝓕 σ₁₂ E E₂] (f : 𝓕) (x : E) : ‖f x‖₊ = ‖x‖₊ :=\n  NNReal.eq <| norm_map f x\n\n"}
{"name":"SemilinearIsometryClass.lipschitz","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\n𝓕 : Type u_10\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝⁵ : SeminormedAddCommGroup E\ninst✝⁴ : SeminormedAddCommGroup E₂\ninst✝³ : Module R E\ninst✝² : Module R₂ E₂\ninst✝¹ : FunLike 𝓕 E E₂\ninst✝ : SemilinearIsometryClass 𝓕 σ₁₂ E E₂\nf : 𝓕\n⊢ LipschitzWith 1 ⇑f","decl":"protected theorem lipschitz [SemilinearIsometryClass 𝓕 σ₁₂ E E₂] (f : 𝓕) : LipschitzWith 1 f :=\n  (SemilinearIsometryClass.isometry f).lipschitz\n\n"}
{"name":"SemilinearIsometryClass.antilipschitz","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\n𝓕 : Type u_10\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝⁵ : SeminormedAddCommGroup E\ninst✝⁴ : SeminormedAddCommGroup E₂\ninst✝³ : Module R E\ninst✝² : Module R₂ E₂\ninst✝¹ : FunLike 𝓕 E E₂\ninst✝ : SemilinearIsometryClass 𝓕 σ₁₂ E E₂\nf : 𝓕\n⊢ AntilipschitzWith 1 ⇑f","decl":"protected theorem antilipschitz [SemilinearIsometryClass 𝓕 σ₁₂ E E₂] (f : 𝓕) :\n    AntilipschitzWith 1 f :=\n  (SemilinearIsometryClass.isometry f).antilipschitz\n\n"}
{"name":"SemilinearIsometryClass.ediam_image","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\n𝓕 : Type u_10\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝⁵ : SeminormedAddCommGroup E\ninst✝⁴ : SeminormedAddCommGroup E₂\ninst✝³ : Module R E\ninst✝² : Module R₂ E₂\ninst✝¹ : FunLike 𝓕 E E₂\ninst✝ : SemilinearIsometryClass 𝓕 σ₁₂ E E₂\nf : 𝓕\ns : Set E\n⊢ Eq (EMetric.diam (Set.image (⇑f) s)) (EMetric.diam s)","decl":"theorem ediam_image [SemilinearIsometryClass 𝓕 σ₁₂ E E₂] (f : 𝓕) (s : Set E) :\n    EMetric.diam (f '' s) = EMetric.diam s :=\n  (SemilinearIsometryClass.isometry f).ediam_image s\n\n"}
{"name":"SemilinearIsometryClass.ediam_range","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\n𝓕 : Type u_10\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝⁵ : SeminormedAddCommGroup E\ninst✝⁴ : SeminormedAddCommGroup E₂\ninst✝³ : Module R E\ninst✝² : Module R₂ E₂\ninst✝¹ : FunLike 𝓕 E E₂\ninst✝ : SemilinearIsometryClass 𝓕 σ₁₂ E E₂\nf : 𝓕\n⊢ Eq (EMetric.diam (Set.range ⇑f)) (EMetric.diam Set.univ)","decl":"theorem ediam_range [SemilinearIsometryClass 𝓕 σ₁₂ E E₂] (f : 𝓕) :\n    EMetric.diam (range f) = EMetric.diam (univ : Set E) :=\n  (SemilinearIsometryClass.isometry f).ediam_range\n\n"}
{"name":"SemilinearIsometryClass.diam_image","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\n𝓕 : Type u_10\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝⁵ : SeminormedAddCommGroup E\ninst✝⁴ : SeminormedAddCommGroup E₂\ninst✝³ : Module R E\ninst✝² : Module R₂ E₂\ninst✝¹ : FunLike 𝓕 E E₂\ninst✝ : SemilinearIsometryClass 𝓕 σ₁₂ E E₂\nf : 𝓕\ns : Set E\n⊢ Eq (Metric.diam (Set.image (⇑f) s)) (Metric.diam s)","decl":"theorem diam_image [SemilinearIsometryClass 𝓕 σ₁₂ E E₂] (f : 𝓕) (s : Set E) :\n    Metric.diam (f '' s) = Metric.diam s :=\n  (SemilinearIsometryClass.isometry f).diam_image s\n\n"}
{"name":"SemilinearIsometryClass.diam_range","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\n𝓕 : Type u_10\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝⁵ : SeminormedAddCommGroup E\ninst✝⁴ : SeminormedAddCommGroup E₂\ninst✝³ : Module R E\ninst✝² : Module R₂ E₂\ninst✝¹ : FunLike 𝓕 E E₂\ninst✝ : SemilinearIsometryClass 𝓕 σ₁₂ E E₂\nf : 𝓕\n⊢ Eq (Metric.diam (Set.range ⇑f)) (Metric.diam Set.univ)","decl":"theorem diam_range [SemilinearIsometryClass 𝓕 σ₁₂ E E₂] (f : 𝓕) :\n    Metric.diam (range f) = Metric.diam (univ : Set E) :=\n  (SemilinearIsometryClass.isometry f).diam_range\n\n"}
{"name":"SemilinearIsometryClass.toContinuousSemilinearMapClass","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\n𝓕 : Type u_10\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝⁵ : SeminormedAddCommGroup E\ninst✝⁴ : SeminormedAddCommGroup E₂\ninst✝³ : Module R E\ninst✝² : Module R₂ E₂\ninst✝¹ : FunLike 𝓕 E E₂\ninst✝ : SemilinearIsometryClass 𝓕 σ₁₂ E E₂\n⊢ ContinuousSemilinearMapClass 𝓕 σ₁₂ E E₂","decl":"instance (priority := 100) toContinuousSemilinearMapClass\n    [SemilinearIsometryClass 𝓕 σ₁₂ E E₂] : ContinuousSemilinearMapClass 𝓕 σ₁₂ E E₂ where\n  map_continuous := SemilinearIsometryClass.continuous\n\n"}
{"name":"LinearIsometry.toLinearMap_injective","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\n⊢ Function.Injective LinearIsometry.toLinearMap","decl":"theorem toLinearMap_injective : Injective (toLinearMap : (E →ₛₗᵢ[σ₁₂] E₂) → E →ₛₗ[σ₁₂] E₂)\n  | ⟨_, _⟩, ⟨_, _⟩, rfl => rfl\n\n"}
{"name":"LinearIsometry.toLinearMap_inj","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf g : LinearIsometry σ₁₂ E E₂\n⊢ Iff (Eq f.toLinearMap g.toLinearMap) (Eq f g)","decl":"@[simp]\ntheorem toLinearMap_inj {f g : E →ₛₗᵢ[σ₁₂] E₂} : f.toLinearMap = g.toLinearMap ↔ f = g :=\n  toLinearMap_injective.eq_iff\n\n"}
{"name":"LinearIsometry.instSemilinearIsometryClass","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\n⊢ SemilinearIsometryClass (LinearIsometry σ₁₂ E E₂) σ₁₂ E E₂","decl":"instance instSemilinearIsometryClass : SemilinearIsometryClass (E →ₛₗᵢ[σ₁₂] E₂) σ₁₂ E E₂ where\n  map_add f := map_add f.toLinearMap\n  map_smulₛₗ f := map_smulₛₗ f.toLinearMap\n  norm_map f := f.norm_map'\n\n"}
{"name":"LinearIsometry.coe_toLinearMap","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\n⊢ Eq ⇑f.toLinearMap ⇑f","decl":"@[simp]\ntheorem coe_toLinearMap : ⇑f.toLinearMap = f :=\n  rfl\n\n"}
{"name":"LinearIsometry.coe_mk","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearMap σ₁₂ E E₂\nhf : ∀ (x : E), Eq (Norm.norm (f x)) (Norm.norm x)\n⊢ Eq ⇑{ toLinearMap := f, norm_map' := hf } ⇑f","decl":"@[simp]\ntheorem coe_mk (f : E →ₛₗ[σ₁₂] E₂) (hf) : ⇑(mk f hf) = f :=\n  rfl\n\n"}
{"name":"LinearIsometry.coe_injective","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\n⊢ Function.Injective fun f => ⇑f","decl":"theorem coe_injective : @Injective (E →ₛₗᵢ[σ₁₂] E₂) (E → E₂) (fun f => f) := by\n  rintro ⟨_⟩ ⟨_⟩\n  simp\n\n"}
{"name":"LinearIsometry.ext_iff","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf g : LinearIsometry σ₁₂ E E₂\n⊢ Iff (Eq f g) (∀ (x : E), Eq (f x) (g x))","decl":"@[ext]\ntheorem ext {f g : E →ₛₗᵢ[σ₁₂] E₂} (h : ∀ x, f x = g x) : f = g :=\n  coe_injective <| funext h\n\n"}
{"name":"LinearIsometry.ext","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf g : LinearIsometry σ₁₂ E E₂\nh : ∀ (x : E), Eq (f x) (g x)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : E →ₛₗᵢ[σ₁₂] E₂} (h : ∀ x, f x = g x) : f = g :=\n  coe_injective <| funext h\n\n"}
{"name":"LinearIsometry.map_zero","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\n⊢ Eq (f 0) 0","decl":"protected theorem map_zero : f 0 = 0 :=\n  f.toLinearMap.map_zero\n\n"}
{"name":"LinearIsometry.map_add","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\nx y : E\n⊢ Eq (f (HAdd.hAdd x y)) (HAdd.hAdd (f x) (f y))","decl":"protected theorem map_add (x y : E) : f (x + y) = f x + f y :=\n  f.toLinearMap.map_add x y\n\n"}
{"name":"LinearIsometry.map_neg","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\nx : E\n⊢ Eq (f (Neg.neg x)) (Neg.neg (f x))","decl":"protected theorem map_neg (x : E) : f (-x) = -f x :=\n  f.toLinearMap.map_neg x\n\n"}
{"name":"LinearIsometry.map_sub","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\nx y : E\n⊢ Eq (f (HSub.hSub x y)) (HSub.hSub (f x) (f y))","decl":"protected theorem map_sub (x y : E) : f (x - y) = f x - f y :=\n  f.toLinearMap.map_sub x y\n\n"}
{"name":"LinearIsometry.map_smulₛₗ","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\nc : R\nx : E\n⊢ Eq (f (HSMul.hSMul c x)) (HSMul.hSMul (σ₁₂ c) (f x))","decl":"protected theorem map_smulₛₗ (c : R) (x : E) : f (c • x) = σ₁₂ c • f x :=\n  f.toLinearMap.map_smulₛₗ c x\n\n"}
{"name":"LinearIsometry.map_smul","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\nE₂ : Type u_6\ninst✝⁴ : Semiring R\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R E₂\nf : LinearIsometry (RingHom.id R) E E₂\nc : R\nx : E\n⊢ Eq (f (HSMul.hSMul c x)) (HSMul.hSMul c (f x))","decl":"protected theorem map_smul [Module R E₂] (f : E →ₗᵢ[R] E₂) (c : R) (x : E) : f (c • x) = c • f x :=\n  f.toLinearMap.map_smul c x\n\n"}
{"name":"LinearIsometry.norm_map","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\nx : E\n⊢ Eq (Norm.norm (f x)) (Norm.norm x)","decl":"@[simp]\ntheorem norm_map (x : E) : ‖f x‖ = ‖x‖ :=\n  SemilinearIsometryClass.norm_map f x\n\n"}
{"name":"LinearIsometry.nnnorm_map","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\nx : E\n⊢ Eq (NNNorm.nnnorm (f x)) (NNNorm.nnnorm x)","decl":"@[simp] -- Should be replaced with `SemilinearIsometryClass.nnorm_map` when https://github.com/leanprover/lean4/issues/3107 is fixed.\ntheorem nnnorm_map (x : E) : ‖f x‖₊ = ‖x‖₊ :=\n  NNReal.eq <| norm_map f x\n\n"}
{"name":"LinearIsometry.isometry","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\n⊢ Isometry ⇑f","decl":"protected theorem isometry : Isometry f :=\n  AddMonoidHomClass.isometry_of_norm f.toLinearMap (norm_map _)\n\n"}
{"name":"LinearIsometry.isEmbedding","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE₂ : Type u_6\nF : Type u_9\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E₂\ninst✝² : Module R₂ E₂\ninst✝¹ : NormedAddCommGroup F\ninst✝ : Module R F\nf : LinearIsometry σ₁₂ F E₂\n⊢ Topology.IsEmbedding ⇑f","decl":"lemma isEmbedding (f : F →ₛₗᵢ[σ₁₂] E₂) : IsEmbedding f := f.isometry.isEmbedding\n\n"}
{"name":"LinearIsometry.embedding","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE₂ : Type u_6\nF : Type u_9\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E₂\ninst✝² : Module R₂ E₂\ninst✝¹ : NormedAddCommGroup F\ninst✝ : Module R F\nf : LinearIsometry σ₁₂ F E₂\n⊢ Topology.IsEmbedding ⇑f","decl":"@[deprecated (since := \"2024-10-26\")]\nalias embedding := isEmbedding\n\n-- Should be `@[simp]` but it doesn't fire due to https://github.com/leanprover/lean4/issues/3107.\n"}
{"name":"LinearIsometry.isComplete_image_iff","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\n𝓕 : Type u_10\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝⁵ : SeminormedAddCommGroup E\ninst✝⁴ : SeminormedAddCommGroup E₂\ninst✝³ : Module R E\ninst✝² : Module R₂ E₂\ninst✝¹ : FunLike 𝓕 E E₂\ninst✝ : SemilinearIsometryClass 𝓕 σ₁₂ E E₂\nf : 𝓕\ns : Set E\n⊢ Iff (IsComplete (Set.image (⇑f) s)) (IsComplete s)","decl":"theorem isComplete_image_iff [SemilinearIsometryClass 𝓕 σ₁₂ E E₂] (f : 𝓕) {s : Set E} :\n    IsComplete (f '' s) ↔ IsComplete s :=\n  _root_.isComplete_image_iff (SemilinearIsometryClass.isometry f).isUniformInducing\n\n"}
{"name":"LinearIsometry.isComplete_image_iff'","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\ns : Set E\n⊢ Iff (IsComplete (Set.image (⇑f) s)) (IsComplete s)","decl":"@[simp] -- Should be replaced with `LinearIsometry.isComplete_image_iff` when https://github.com/leanprover/lean4/issues/3107 is fixed.\ntheorem isComplete_image_iff' (f : LinearIsometry σ₁₂ E E₂) {s : Set E} :\n    IsComplete (f '' s) ↔ IsComplete s :=\n  LinearIsometry.isComplete_image_iff _\n\n"}
{"name":"LinearIsometry.isComplete_map_iff","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁶ : Semiring R\ninst✝⁵ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝⁴ : SeminormedAddCommGroup E\ninst✝³ : SeminormedAddCommGroup E₂\ninst✝² : Module R E\ninst✝¹ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\ninst✝ : RingHomSurjective σ₁₂\np : Submodule R E\n⊢ Iff (IsComplete ↑(Submodule.map f.toLinearMap p)) (IsComplete ↑p)","decl":"theorem isComplete_map_iff [RingHomSurjective σ₁₂] {p : Submodule R E} :\n    IsComplete (p.map f.toLinearMap : Set E₂) ↔ IsComplete (p : Set E) :=\n  isComplete_image_iff f\n\n"}
{"name":"LinearIsometry.isComplete_map_iff'","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\n𝓕 : Type u_10\ninst✝⁸ : Semiring R\ninst✝⁷ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝⁶ : SeminormedAddCommGroup E\ninst✝⁵ : SeminormedAddCommGroup E₂\ninst✝⁴ : Module R E\ninst✝³ : Module R₂ E₂\ninst✝² : FunLike 𝓕 E E₂\ninst✝¹ : SemilinearIsometryClass 𝓕 σ₁₂ E E₂\nf : 𝓕\ninst✝ : RingHomSurjective σ₁₂\np : Submodule R E\n⊢ Iff (IsComplete ↑(Submodule.map f p)) (IsComplete ↑p)","decl":"theorem isComplete_map_iff' [SemilinearIsometryClass 𝓕 σ₁₂ E E₂] (f : 𝓕) [RingHomSurjective σ₁₂]\n    {p : Submodule R E} : IsComplete (p.map f : Set E₂) ↔ IsComplete (p : Set E) :=\n  isComplete_image_iff f\n\n"}
{"name":"LinearIsometry.completeSpace_map","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\n𝓕 : Type u_10\ninst✝⁹ : Semiring R\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝⁷ : SeminormedAddCommGroup E\ninst✝⁶ : SeminormedAddCommGroup E₂\ninst✝⁵ : Module R E\ninst✝⁴ : Module R₂ E₂\ninst✝³ : FunLike 𝓕 E E₂\ninst✝² : SemilinearIsometryClass 𝓕 σ₁₂ E E₂\nf : 𝓕\ninst✝¹ : RingHomSurjective σ₁₂\np : Submodule R E\ninst✝ : CompleteSpace (Subtype fun x => Membership.mem p x)\n⊢ CompleteSpace (Subtype fun x => Membership.mem (Submodule.map f p) x)","decl":"instance completeSpace_map [SemilinearIsometryClass 𝓕 σ₁₂ E E₂] (f : 𝓕) [RingHomSurjective σ₁₂]\n    (p : Submodule R E) [CompleteSpace p] : CompleteSpace (p.map f) :=\n  ((isComplete_map_iff' f).2 <| completeSpace_coe_iff_isComplete.1 ‹_›).completeSpace_coe\n\n"}
{"name":"LinearIsometry.completeSpace_map'","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝⁵ : SeminormedAddCommGroup E\ninst✝⁴ : SeminormedAddCommGroup E₂\ninst✝³ : Module R E\ninst✝² : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\ninst✝¹ : RingHomSurjective σ₁₂\np : Submodule R E\ninst✝ : CompleteSpace (Subtype fun x => Membership.mem p x)\n⊢ CompleteSpace (Subtype fun x => Membership.mem (Submodule.map f.toLinearMap p) x)","decl":"instance completeSpace_map' [RingHomSurjective σ₁₂] (p : Submodule R E) [CompleteSpace p] :\n    CompleteSpace (p.map f.toLinearMap) :=\n  (f.isComplete_map_iff.2 <| completeSpace_coe_iff_isComplete.1 ‹_›).completeSpace_coe\n\n"}
{"name":"LinearIsometry.dist_map","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\nx y : E\n⊢ Eq (Dist.dist (f x) (f y)) (Dist.dist x y)","decl":"@[simp]\ntheorem dist_map (x y : E) : dist (f x) (f y) = dist x y :=\n  f.isometry.dist_eq x y\n\n"}
{"name":"LinearIsometry.edist_map","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\nx y : E\n⊢ Eq (EDist.edist (f x) (f y)) (EDist.edist x y)","decl":"@[simp]\ntheorem edist_map (x y : E) : edist (f x) (f y) = edist x y :=\n  f.isometry.edist_eq x y\n\n"}
{"name":"LinearIsometry.injective","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE₂ : Type u_6\nF : Type u_9\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E₂\ninst✝² : Module R₂ E₂\ninst✝¹ : NormedAddCommGroup F\ninst✝ : Module R F\nf₁ : LinearIsometry σ₁₂ F E₂\n⊢ Function.Injective ⇑f₁","decl":"protected theorem injective : Injective f₁ :=\n  Isometry.injective (LinearIsometry.isometry f₁)\n\n"}
{"name":"LinearIsometry.map_eq_iff","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE₂ : Type u_6\nF : Type u_9\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E₂\ninst✝² : Module R₂ E₂\ninst✝¹ : NormedAddCommGroup F\ninst✝ : Module R F\nf₁ : LinearIsometry σ₁₂ F E₂\nx y : F\n⊢ Iff (Eq (f₁ x) (f₁ y)) (Eq x y)","decl":"@[simp]\ntheorem map_eq_iff {x y : F} : f₁ x = f₁ y ↔ x = y :=\n  f₁.injective.eq_iff\n\n"}
{"name":"LinearIsometry.map_ne","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE₂ : Type u_6\nF : Type u_9\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E₂\ninst✝² : Module R₂ E₂\ninst✝¹ : NormedAddCommGroup F\ninst✝ : Module R F\nf₁ : LinearIsometry σ₁₂ F E₂\nx y : F\nh : Ne x y\n⊢ Ne (f₁ x) (f₁ y)","decl":"theorem map_ne {x y : F} (h : x ≠ y) : f₁ x ≠ f₁ y :=\n  f₁.injective.ne h\n\n"}
{"name":"LinearIsometry.lipschitz","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\n⊢ LipschitzWith 1 ⇑f","decl":"protected theorem lipschitz : LipschitzWith 1 f :=\n  f.isometry.lipschitz\n\n"}
{"name":"LinearIsometry.antilipschitz","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\n⊢ AntilipschitzWith 1 ⇑f","decl":"protected theorem antilipschitz : AntilipschitzWith 1 f :=\n  f.isometry.antilipschitz\n\n"}
{"name":"LinearIsometry.continuous","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\n⊢ Continuous ⇑f","decl":"@[continuity]\nprotected theorem continuous : Continuous f :=\n  f.isometry.continuous\n\n"}
{"name":"LinearIsometry.preimage_ball","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\nx : E\nr : Real\n⊢ Eq (Set.preimage (⇑f) (Metric.ball (f x) r)) (Metric.ball x r)","decl":"@[simp]\ntheorem preimage_ball (x : E) (r : ℝ) : f ⁻¹' Metric.ball (f x) r = Metric.ball x r :=\n  f.isometry.preimage_ball x r\n\n"}
{"name":"LinearIsometry.preimage_sphere","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\nx : E\nr : Real\n⊢ Eq (Set.preimage (⇑f) (Metric.sphere (f x) r)) (Metric.sphere x r)","decl":"@[simp]\ntheorem preimage_sphere (x : E) (r : ℝ) : f ⁻¹' Metric.sphere (f x) r = Metric.sphere x r :=\n  f.isometry.preimage_sphere x r\n\n"}
{"name":"LinearIsometry.preimage_closedBall","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\nx : E\nr : Real\n⊢ Eq (Set.preimage (⇑f) (Metric.closedBall (f x) r)) (Metric.closedBall x r)","decl":"@[simp]\ntheorem preimage_closedBall (x : E) (r : ℝ) :\n    f ⁻¹' Metric.closedBall (f x) r = Metric.closedBall x r :=\n  f.isometry.preimage_closedBall x r\n\n"}
{"name":"LinearIsometry.ediam_image","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\ns : Set E\n⊢ Eq (EMetric.diam (Set.image (⇑f) s)) (EMetric.diam s)","decl":"theorem ediam_image (s : Set E) : EMetric.diam (f '' s) = EMetric.diam s :=\n  f.isometry.ediam_image s\n\n"}
{"name":"LinearIsometry.ediam_range","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\n⊢ Eq (EMetric.diam (Set.range ⇑f)) (EMetric.diam Set.univ)","decl":"theorem ediam_range : EMetric.diam (range f) = EMetric.diam (univ : Set E) :=\n  f.isometry.ediam_range\n\n"}
{"name":"LinearIsometry.diam_image","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\ns : Set E\n⊢ Eq (Metric.diam (Set.image (⇑f) s)) (Metric.diam s)","decl":"theorem diam_image (s : Set E) : Metric.diam (f '' s) = Metric.diam s :=\n  Isometry.diam_image (LinearIsometry.isometry f) s\n\n"}
{"name":"LinearIsometry.diam_range","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\n⊢ Eq (Metric.diam (Set.range ⇑f)) (Metric.diam Set.univ)","decl":"theorem diam_range : Metric.diam (range f) = Metric.diam (univ : Set E) :=\n  Isometry.diam_range (LinearIsometry.isometry f)\n\n"}
{"name":"LinearIsometry.toContinuousLinearMap_injective","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\n⊢ Function.Injective LinearIsometry.toContinuousLinearMap","decl":"theorem toContinuousLinearMap_injective :\n    Function.Injective (toContinuousLinearMap : _ → E →SL[σ₁₂] E₂) := fun x _ h =>\n  coe_injective (congr_arg _ h : ⇑x.toContinuousLinearMap = _)\n\n"}
{"name":"LinearIsometry.toContinuousLinearMap_inj","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf g : LinearIsometry σ₁₂ E E₂\n⊢ Iff (Eq f.toContinuousLinearMap g.toContinuousLinearMap) (Eq f g)","decl":"@[simp]\ntheorem toContinuousLinearMap_inj {f g : E →ₛₗᵢ[σ₁₂] E₂} :\n    f.toContinuousLinearMap = g.toContinuousLinearMap ↔ f = g :=\n  toContinuousLinearMap_injective.eq_iff\n\n"}
{"name":"LinearIsometry.coe_toContinuousLinearMap","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\n⊢ Eq ⇑f.toContinuousLinearMap ⇑f","decl":"@[simp]\ntheorem coe_toContinuousLinearMap : ⇑f.toContinuousLinearMap = f :=\n  rfl\n\n"}
{"name":"LinearIsometry.comp_continuous_iff","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁶ : Semiring R\ninst✝⁵ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝⁴ : SeminormedAddCommGroup E\ninst✝³ : SeminormedAddCommGroup E₂\ninst✝² : Module R E\ninst✝¹ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\nα : Type u_11\ninst✝ : TopologicalSpace α\ng : α → E\n⊢ Iff (Continuous (Function.comp (⇑f) g)) (Continuous g)","decl":"@[simp]\ntheorem comp_continuous_iff {α : Type*} [TopologicalSpace α] {g : α → E} :\n    Continuous (f ∘ g) ↔ Continuous g :=\n  f.isometry.comp_continuous_iff\n\n"}
{"name":"LinearIsometry.coe_id","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\ninst✝² : Semiring R\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : Module R E\n⊢ Eq (⇑LinearIsometry.id) id","decl":"@[simp, norm_cast]\ntheorem coe_id : ((id : E →ₗᵢ[R] E) : E → E) = _root_.id :=\n  rfl\n\n"}
{"name":"LinearIsometry.id_apply","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\ninst✝² : Semiring R\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : Module R E\nx : E\n⊢ Eq (LinearIsometry.id x) x","decl":"@[simp]\ntheorem id_apply (x : E) : (id : E →ₗᵢ[R] E) x = x :=\n  rfl\n\n"}
{"name":"LinearIsometry.id_toLinearMap","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\ninst✝² : Semiring R\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : Module R E\n⊢ Eq LinearIsometry.id.toLinearMap LinearMap.id","decl":"@[simp]\ntheorem id_toLinearMap : (id.toLinearMap : E →ₗ[R] E) = LinearMap.id :=\n  rfl\n\n"}
{"name":"LinearIsometry.id_toContinuousLinearMap","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\ninst✝² : Semiring R\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : Module R E\n⊢ Eq LinearIsometry.id.toContinuousLinearMap (ContinuousLinearMap.id R E)","decl":"@[simp]\ntheorem id_toContinuousLinearMap : id.toContinuousLinearMap = ContinuousLinearMap.id R E :=\n  rfl\n\n"}
{"name":"LinearIsometry.coe_comp","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\nE : Type u_5\nE₂ : Type u_6\nE₃ : Type u_7\ninst✝⁹ : Semiring R\ninst✝⁸ : Semiring R₂\ninst✝⁷ : Semiring R₃\nσ₁₂ : RingHom R R₂\nσ₁₃ : RingHom R R₃\nσ₂₃ : RingHom R₂ R₃\ninst✝⁶ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝⁵ : SeminormedAddCommGroup E\ninst✝⁴ : SeminormedAddCommGroup E₂\ninst✝³ : SeminormedAddCommGroup E₃\ninst✝² : Module R E\ninst✝¹ : Module R₂ E₂\ninst✝ : Module R₃ E₃\ng : LinearIsometry σ₂₃ E₂ E₃\nf : LinearIsometry σ₁₂ E E₂\n⊢ Eq (⇑(g.comp f)) (Function.comp ⇑g ⇑f)","decl":"@[simp]\ntheorem coe_comp (g : E₂ →ₛₗᵢ[σ₂₃] E₃) (f : E →ₛₗᵢ[σ₁₂] E₂) : ⇑(g.comp f) = g ∘ f :=\n  rfl\n\n"}
{"name":"LinearIsometry.id_comp","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\n⊢ Eq (LinearIsometry.id.comp f) f","decl":"@[simp]\ntheorem id_comp : (id : E₂ →ₗᵢ[R₂] E₂).comp f = f :=\n  ext fun _ => rfl\n\n"}
{"name":"LinearIsometry.comp_id","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\n⊢ Eq (f.comp LinearIsometry.id) f","decl":"@[simp]\ntheorem comp_id : f.comp id = f :=\n  ext fun _ => rfl\n\n"}
{"name":"LinearIsometry.comp_assoc","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\nR₄ : Type u_4\nE : Type u_5\nE₂ : Type u_6\nE₃ : Type u_7\nE₄ : Type u_8\ninst✝¹⁵ : Semiring R\ninst✝¹⁴ : Semiring R₂\ninst✝¹³ : Semiring R₃\ninst✝¹² : Semiring R₄\nσ₁₂ : RingHom R R₂\nσ₁₃ : RingHom R R₃\nσ₁₄ : RingHom R R₄\nσ₂₃ : RingHom R₂ R₃\nσ₂₄ : RingHom R₂ R₄\nσ₃₄ : RingHom R₃ R₄\ninst✝¹¹ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝¹⁰ : RingHomCompTriple σ₁₂ σ₂₄ σ₁₄\ninst✝⁹ : RingHomCompTriple σ₂₃ σ₃₄ σ₂₄\ninst✝⁸ : RingHomCompTriple σ₁₃ σ₃₄ σ₁₄\ninst✝⁷ : SeminormedAddCommGroup E\ninst✝⁶ : SeminormedAddCommGroup E₂\ninst✝⁵ : SeminormedAddCommGroup E₃\ninst✝⁴ : SeminormedAddCommGroup E₄\ninst✝³ : Module R E\ninst✝² : Module R₂ E₂\ninst✝¹ : Module R₃ E₃\ninst✝ : Module R₄ E₄\nf : LinearIsometry σ₃₄ E₃ E₄\ng : LinearIsometry σ₂₃ E₂ E₃\nh : LinearIsometry σ₁₂ E E₂\n⊢ Eq ((f.comp g).comp h) (f.comp (g.comp h))","decl":"theorem comp_assoc (f : E₃ →ₛₗᵢ[σ₃₄] E₄) (g : E₂ →ₛₗᵢ[σ₂₃] E₃) (h : E →ₛₗᵢ[σ₁₂] E₂) :\n    (f.comp g).comp h = f.comp (g.comp h) :=\n  rfl\n\n"}
{"name":"LinearIsometry.coe_one","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\ninst✝² : Semiring R\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : Module R E\n⊢ Eq (⇑1) id","decl":"@[simp]\ntheorem coe_one : ((1 : E →ₗᵢ[R] E) : E → E) = _root_.id :=\n  rfl\n\n"}
{"name":"LinearIsometry.coe_mul","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\ninst✝² : Semiring R\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : Module R E\nf g : LinearIsometry (RingHom.id R) E E\n⊢ Eq (⇑(HMul.hMul f g)) (Function.comp ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_mul (f g : E →ₗᵢ[R] E) : ⇑(f * g) = f ∘ g :=\n  rfl\n\n"}
{"name":"LinearIsometry.one_def","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\ninst✝² : Semiring R\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : Module R E\n⊢ Eq 1 LinearIsometry.id","decl":"theorem one_def : (1 : E →ₗᵢ[R] E) = id :=\n  rfl\n\n"}
{"name":"LinearIsometry.mul_def","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\ninst✝² : Semiring R\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : Module R E\nf g : LinearIsometry (RingHom.id R) E E\n⊢ Eq (HMul.hMul f g) (f.comp g)","decl":"theorem mul_def (f g : E →ₗᵢ[R] E) : (f * g : E →ₗᵢ[R] E) = f.comp g :=\n  rfl\n\n"}
{"name":"LinearIsometry.coe_pow","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\ninst✝² : Semiring R\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : Module R E\nf : LinearIsometry (RingHom.id R) E E\nn : Nat\n⊢ Eq (⇑(HPow.hPow f n)) (Nat.iterate (⇑f) n)","decl":"theorem coe_pow (f : E →ₗᵢ[R] E) (n : ℕ) : ⇑(f ^ n) = f^[n] :=\n  hom_coe_pow _ rfl (fun _ _ ↦ rfl) _ _\n\n"}
{"name":"Submodule.coe_subtypeₗᵢ","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"E : Type u_5\ninst✝² : SeminormedAddCommGroup E\nR' : Type u_11\ninst✝¹ : Ring R'\ninst✝ : Module R' E\np : Submodule R' E\n⊢ Eq ⇑p.subtypeₗᵢ ⇑p.subtype","decl":"@[simp]\ntheorem coe_subtypeₗᵢ : ⇑p.subtypeₗᵢ = p.subtype :=\n  rfl\n\n"}
{"name":"Submodule.subtypeₗᵢ_toLinearMap","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"E : Type u_5\ninst✝² : SeminormedAddCommGroup E\nR' : Type u_11\ninst✝¹ : Ring R'\ninst✝ : Module R' E\np : Submodule R' E\n⊢ Eq p.subtypeₗᵢ.toLinearMap p.subtype","decl":"@[simp]\ntheorem subtypeₗᵢ_toLinearMap : p.subtypeₗᵢ.toLinearMap = p.subtype :=\n  rfl\n\n"}
{"name":"Submodule.subtypeₗᵢ_toContinuousLinearMap","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"E : Type u_5\ninst✝² : SeminormedAddCommGroup E\nR' : Type u_11\ninst✝¹ : Ring R'\ninst✝ : Module R' E\np : Submodule R' E\n⊢ Eq p.subtypeₗᵢ.toContinuousLinearMap p.subtypeL","decl":"@[simp]\ntheorem subtypeₗᵢ_toContinuousLinearMap : p.subtypeₗᵢ.toContinuousLinearMap = p.subtypeL :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.mk.injEq","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\nE : Type u_11\nE₂ : Type u_12\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ntoLinearEquiv✝ : LinearEquiv σ₁₂ E E₂\nnorm_map'✝ : ∀ (x : E), Eq (Norm.norm (toLinearEquiv✝ x)) (Norm.norm x)\ntoLinearEquiv : LinearEquiv σ₁₂ E E₂\nnorm_map' : ∀ (x : E), Eq (Norm.norm (toLinearEquiv x)) (Norm.norm x)\n⊢ Eq (Eq { toLinearEquiv := toLinearEquiv✝, norm_map' := norm_map'✝ } { toLinearEquiv := toLinearEquiv, norm_map' := norm_map' }) (Eq toLinearEquiv✝ toLinearEquiv)","decl":"/-- A semilinear isometric equivalence between two normed vector spaces,\ndenoted as `f : E ≃ₛₗᵢ[σ₁₂] E₂`. -/\nstructure LinearIsometryEquiv (σ₁₂ : R →+* R₂) {σ₂₁ : R₂ →+* R} [RingHomInvPair σ₁₂ σ₂₁]\n  [RingHomInvPair σ₂₁ σ₁₂] (E E₂ : Type*) [SeminormedAddCommGroup E] [SeminormedAddCommGroup E₂]\n  [Module R E] [Module R₂ E₂] extends E ≃ₛₗ[σ₁₂] E₂ where\n  norm_map' : ∀ x, ‖toLinearEquiv x‖ = ‖x‖\n\n"}
{"name":"LinearIsometryEquiv.norm_map'","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\nE : Type u_11\nE₂ : Type u_12\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nself : LinearIsometryEquiv σ₁₂ E E₂\nx : E\n⊢ Eq (Norm.norm (self.toLinearEquiv x)) (Norm.norm x)","decl":"/-- A semilinear isometric equivalence between two normed vector spaces,\ndenoted as `f : E ≃ₛₗᵢ[σ₁₂] E₂`. -/\nstructure LinearIsometryEquiv (σ₁₂ : R →+* R₂) {σ₂₁ : R₂ →+* R} [RingHomInvPair σ₁₂ σ₂₁]\n  [RingHomInvPair σ₂₁ σ₁₂] (E E₂ : Type*) [SeminormedAddCommGroup E] [SeminormedAddCommGroup E₂]\n  [Module R E] [Module R₂ E₂] extends E ≃ₛₗ[σ₁₂] E₂ where\n  norm_map' : ∀ x, ‖toLinearEquiv x‖ = ‖x‖\n\n"}
{"name":"LinearIsometryEquiv.mk.inj","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\nE : Type u_11\nE₂ : Type u_12\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ntoLinearEquiv✝ : LinearEquiv σ₁₂ E E₂\nnorm_map'✝ : ∀ (x : E), Eq (Norm.norm (toLinearEquiv✝ x)) (Norm.norm x)\ntoLinearEquiv : LinearEquiv σ₁₂ E E₂\nnorm_map' : ∀ (x : E), Eq (Norm.norm (toLinearEquiv x)) (Norm.norm x)\nx✝ : Eq { toLinearEquiv := toLinearEquiv✝, norm_map' := norm_map'✝ } { toLinearEquiv := toLinearEquiv, norm_map' := norm_map' }\n⊢ Eq toLinearEquiv✝ toLinearEquiv","decl":"/-- A semilinear isometric equivalence between two normed vector spaces,\ndenoted as `f : E ≃ₛₗᵢ[σ₁₂] E₂`. -/\nstructure LinearIsometryEquiv (σ₁₂ : R →+* R₂) {σ₂₁ : R₂ →+* R} [RingHomInvPair σ₁₂ σ₂₁]\n  [RingHomInvPair σ₂₁ σ₁₂] (E E₂ : Type*) [SeminormedAddCommGroup E] [SeminormedAddCommGroup E₂]\n  [Module R E] [Module R₂ E₂] extends E ≃ₛₗ[σ₁₂] E₂ where\n  norm_map' : ∀ x, ‖toLinearEquiv x‖ = ‖x‖\n\n"}
{"name":"LinearIsometryEquiv.mk.sizeOf_spec","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\ninst✝¹¹ : Semiring R\ninst✝¹⁰ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁹ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁸ : RingHomInvPair σ₂₁ σ₁₂\nE : Type u_11\nE₂ : Type u_12\ninst✝⁷ : SeminormedAddCommGroup E\ninst✝⁶ : SeminormedAddCommGroup E₂\ninst✝⁵ : Module R E\ninst✝⁴ : Module R₂ E₂\ninst✝³ : SizeOf R\ninst✝² : SizeOf R₂\ninst✝¹ : SizeOf E\ninst✝ : SizeOf E₂\ntoLinearEquiv : LinearEquiv σ₁₂ E E₂\nnorm_map' : ∀ (x : E), Eq (Norm.norm (toLinearEquiv x)) (Norm.norm x)\n⊢ Eq (SizeOf.sizeOf { toLinearEquiv := toLinearEquiv, norm_map' := norm_map' }) (HAdd.hAdd 1 (SizeOf.sizeOf toLinearEquiv))","decl":"/-- A semilinear isometric equivalence between two normed vector spaces,\ndenoted as `f : E ≃ₛₗᵢ[σ₁₂] E₂`. -/\nstructure LinearIsometryEquiv (σ₁₂ : R →+* R₂) {σ₂₁ : R₂ →+* R} [RingHomInvPair σ₁₂ σ₂₁]\n  [RingHomInvPair σ₂₁ σ₁₂] (E E₂ : Type*) [SeminormedAddCommGroup E] [SeminormedAddCommGroup E₂]\n  [Module R E] [Module R₂ E₂] extends E ≃ₛₗ[σ₁₂] E₂ where\n  norm_map' : ∀ x, ‖toLinearEquiv x‖ = ‖x‖\n\n"}
{"name":"SemilinearIsometryEquivClass.norm_map","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"𝓕 : Type u_11\nR : outParam (Type u_12)\nR₂ : outParam (Type u_13)\ninst✝⁸ : Semiring R\ninst✝⁷ : Semiring R₂\nσ₁₂ : outParam (RingHom R R₂)\nσ₂₁ : outParam (RingHom R₂ R)\ninst✝⁶ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁵ : RingHomInvPair σ₂₁ σ₁₂\nE : outParam (Type u_14)\nE₂ : outParam (Type u_15)\ninst✝⁴ : SeminormedAddCommGroup E\ninst✝³ : SeminormedAddCommGroup E₂\ninst✝² : Module R E\ninst✝¹ : Module R₂ E₂\ninst✝ : EquivLike 𝓕 E E₂\nself : SemilinearIsometryEquivClass 𝓕 σ₁₂ E E₂\nf : 𝓕\nx : E\n⊢ Eq (Norm.norm (f x)) (Norm.norm x)","decl":"/-- `SemilinearIsometryEquivClass F σ E E₂` asserts `F` is a type of bundled `σ`-semilinear\nisometric equivs `E → E₂`.\n\nSee also `LinearIsometryEquivClass F R E E₂` for the case where `σ` is the identity map on `R`.\n\nA map `f` between an `R`-module and an `S`-module over a ring homomorphism `σ : R →+* S`\nis semilinear if it satisfies the two properties `f (x + y) = f x + f y` and\n`f (c • x) = (σ c) • f x`. -/\nclass SemilinearIsometryEquivClass (𝓕 : Type*) {R R₂ : outParam Type*} [Semiring R]\n  [Semiring R₂] (σ₁₂ : outParam <| R →+* R₂) {σ₂₁ : outParam <| R₂ →+* R} [RingHomInvPair σ₁₂ σ₂₁]\n  [RingHomInvPair σ₂₁ σ₁₂] (E E₂ : outParam Type*) [SeminormedAddCommGroup E]\n  [SeminormedAddCommGroup E₂] [Module R E] [Module R₂ E₂] [EquivLike 𝓕 E E₂]\n  extends SemilinearEquivClass 𝓕 σ₁₂ E E₂ : Prop where\n  norm_map : ∀ (f : 𝓕) (x : E), ‖f x‖ = ‖x‖\n\n"}
{"name":"SemilinearIsometryEquivClass.toSemilinearEquivClass","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"𝓕 : Type u_11\nR : outParam (Type u_12)\nR₂ : outParam (Type u_13)\ninst✝⁸ : Semiring R\ninst✝⁷ : Semiring R₂\nσ₁₂ : outParam (RingHom R R₂)\nσ₂₁ : outParam (RingHom R₂ R)\ninst✝⁶ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁵ : RingHomInvPair σ₂₁ σ₁₂\nE : outParam (Type u_14)\nE₂ : outParam (Type u_15)\ninst✝⁴ : SeminormedAddCommGroup E\ninst✝³ : SeminormedAddCommGroup E₂\ninst✝² : Module R E\ninst✝¹ : Module R₂ E₂\ninst✝ : EquivLike 𝓕 E E₂\nself : SemilinearIsometryEquivClass 𝓕 σ₁₂ E E₂\n⊢ SemilinearEquivClass 𝓕 σ₁₂ E E₂","decl":"/-- `SemilinearIsometryEquivClass F σ E E₂` asserts `F` is a type of bundled `σ`-semilinear\nisometric equivs `E → E₂`.\n\nSee also `LinearIsometryEquivClass F R E E₂` for the case where `σ` is the identity map on `R`.\n\nA map `f` between an `R`-module and an `S`-module over a ring homomorphism `σ : R →+* S`\nis semilinear if it satisfies the two properties `f (x + y) = f x + f y` and\n`f (c • x) = (σ c) • f x`. -/\nclass SemilinearIsometryEquivClass (𝓕 : Type*) {R R₂ : outParam Type*} [Semiring R]\n  [Semiring R₂] (σ₁₂ : outParam <| R →+* R₂) {σ₂₁ : outParam <| R₂ →+* R} [RingHomInvPair σ₁₂ σ₂₁]\n  [RingHomInvPair σ₂₁ σ₁₂] (E E₂ : outParam Type*) [SeminormedAddCommGroup E]\n  [SeminormedAddCommGroup E₂] [Module R E] [Module R₂ E₂] [EquivLike 𝓕 E E₂]\n  extends SemilinearEquivClass 𝓕 σ₁₂ E E₂ : Prop where\n  norm_map : ∀ (f : 𝓕) (x : E), ‖f x‖ = ‖x‖\n\n"}
{"name":"SemilinearIsometryEquivClass.toSemilinearIsometryClass","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\n𝓕 : Type u_10\ninst✝⁸ : Semiring R\ninst✝⁷ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁶ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁵ : RingHomInvPair σ₂₁ σ₁₂\ninst✝⁴ : SeminormedAddCommGroup E\ninst✝³ : SeminormedAddCommGroup E₂\ninst✝² : Module R E\ninst✝¹ : Module R₂ E₂\ninst✝ : EquivLike 𝓕 E E₂\ns : SemilinearIsometryEquivClass 𝓕 σ₁₂ E E₂\n⊢ SemilinearIsometryClass 𝓕 σ₁₂ E E₂","decl":"instance (priority := 100) toSemilinearIsometryClass [EquivLike 𝓕 E E₂]\n    [s : SemilinearIsometryEquivClass 𝓕 σ₁₂ E E₂] : SemilinearIsometryClass 𝓕 σ₁₂ E E₂ :=\n  { s with }\n\n"}
{"name":"LinearIsometryEquiv.toLinearEquiv_injective","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\n⊢ Function.Injective LinearIsometryEquiv.toLinearEquiv","decl":"theorem toLinearEquiv_injective : Injective (toLinearEquiv : (E ≃ₛₗᵢ[σ₁₂] E₂) → E ≃ₛₗ[σ₁₂] E₂)\n  | ⟨_, _⟩, ⟨_, _⟩, rfl => rfl\n\n"}
{"name":"LinearIsometryEquiv.toLinearEquiv_inj","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf g : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Iff (Eq f.toLinearEquiv g.toLinearEquiv) (Eq f g)","decl":"@[simp]\ntheorem toLinearEquiv_inj {f g : E ≃ₛₗᵢ[σ₁₂] E₂} : f.toLinearEquiv = g.toLinearEquiv ↔ f = g :=\n  toLinearEquiv_injective.eq_iff\n\n"}
{"name":"LinearIsometryEquiv.instSemilinearIsometryEquivClass","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\n⊢ SemilinearIsometryEquivClass (LinearIsometryEquiv σ₁₂ E E₂) σ₁₂ E E₂","decl":"instance instSemilinearIsometryEquivClass :\n    SemilinearIsometryEquivClass (E ≃ₛₗᵢ[σ₁₂] E₂) σ₁₂ E E₂ where\n  map_add f := map_add f.toLinearEquiv\n  map_smulₛₗ e := map_smulₛₗ e.toLinearEquiv\n  norm_map e := e.norm_map'\n\n"}
{"name":"LinearIsometryEquiv.coe_injective","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\n⊢ Function.Injective DFunLike.coe","decl":"theorem coe_injective : @Function.Injective (E ≃ₛₗᵢ[σ₁₂] E₂) (E → E₂) (↑) :=\n  DFunLike.coe_injective\n\n"}
{"name":"LinearIsometryEquiv.coe_mk","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearEquiv σ₁₂ E E₂\nhe : ∀ (x : E), Eq (Norm.norm (e x)) (Norm.norm x)\n⊢ Eq ⇑{ toLinearEquiv := e, norm_map' := he } ⇑e","decl":"@[simp]\ntheorem coe_mk (e : E ≃ₛₗ[σ₁₂] E₂) (he : ∀ x, ‖e x‖ = ‖x‖) : ⇑(mk e he) = e :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.coe_toLinearEquiv","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Eq ⇑e.toLinearEquiv ⇑e","decl":"@[simp]\ntheorem coe_toLinearEquiv (e : E ≃ₛₗᵢ[σ₁₂] E₂) : ⇑e.toLinearEquiv = e :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.ext","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne e' : LinearIsometryEquiv σ₁₂ E E₂\nh : ∀ (x : E), Eq (e x) (e' x)\n⊢ Eq e e'","decl":"@[ext]\ntheorem ext {e e' : E ≃ₛₗᵢ[σ₁₂] E₂} (h : ∀ x, e x = e' x) : e = e' :=\n  toLinearEquiv_injective <| LinearEquiv.ext h\n\n"}
{"name":"LinearIsometryEquiv.ext_iff","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne e' : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Iff (Eq e e') (∀ (x : E), Eq (e x) (e' x))","decl":"@[ext]\ntheorem ext {e e' : E ≃ₛₗᵢ[σ₁₂] E₂} (h : ∀ x, e x = e' x) : e = e' :=\n  toLinearEquiv_injective <| LinearEquiv.ext h\n\n"}
{"name":"LinearIsometryEquiv.congr_arg","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometryEquiv σ₁₂ E E₂\nx x' : E\na✝ : Eq x x'\n⊢ Eq (f x) (f x')","decl":"protected theorem congr_arg {f : E ≃ₛₗᵢ[σ₁₂] E₂} : ∀ {x x' : E}, x = x' → f x = f x'\n  | _, _, rfl => rfl\n\n"}
{"name":"LinearIsometryEquiv.congr_fun","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf g : LinearIsometryEquiv σ₁₂ E E₂\nh : Eq f g\nx : E\n⊢ Eq (f x) (g x)","decl":"protected theorem congr_fun {f g : E ≃ₛₗᵢ[σ₁₂] E₂} (h : f = g) (x : E) : f x = g x :=\n  h ▸ rfl\n\n"}
{"name":"LinearIsometryEquiv.norm_map","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\nx : E\n⊢ Eq (Norm.norm (e x)) (Norm.norm x)","decl":"@[simp]\ntheorem norm_map (x : E) : ‖e x‖ = ‖x‖ :=\n  e.norm_map' x\n\n"}
{"name":"LinearIsometryEquiv.toLinearIsometry_injective","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\n⊢ Function.Injective LinearIsometryEquiv.toLinearIsometry","decl":"theorem toLinearIsometry_injective : Function.Injective (toLinearIsometry : _ → E →ₛₗᵢ[σ₁₂] E₂) :=\n  fun x _ h => coe_injective (congr_arg _ h : ⇑x.toLinearIsometry = _)\n\n"}
{"name":"LinearIsometryEquiv.toLinearIsometry_inj","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf g : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Iff (Eq f.toLinearIsometry g.toLinearIsometry) (Eq f g)","decl":"@[simp]\ntheorem toLinearIsometry_inj {f g : E ≃ₛₗᵢ[σ₁₂] E₂} :\n    f.toLinearIsometry = g.toLinearIsometry ↔ f = g :=\n  toLinearIsometry_injective.eq_iff\n\n"}
{"name":"LinearIsometryEquiv.coe_toLinearIsometry","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Eq ⇑e.toLinearIsometry ⇑e","decl":"@[simp]\ntheorem coe_toLinearIsometry : ⇑e.toLinearIsometry = e :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.isometry","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Isometry ⇑e","decl":"protected theorem isometry : Isometry e :=\n  e.toLinearIsometry.isometry\n\n"}
{"name":"LinearIsometryEquiv.toIsometryEquiv_injective","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\n⊢ Function.Injective LinearIsometryEquiv.toIsometryEquiv","decl":"theorem toIsometryEquiv_injective :\n    Function.Injective (toIsometryEquiv : (E ≃ₛₗᵢ[σ₁₂] E₂) → E ≃ᵢ E₂) := fun x _ h =>\n  coe_injective (congr_arg _ h : ⇑x.toIsometryEquiv = _)\n\n"}
{"name":"LinearIsometryEquiv.toIsometryEquiv_inj","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf g : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Iff (Eq f.toIsometryEquiv g.toIsometryEquiv) (Eq f g)","decl":"@[simp]\ntheorem toIsometryEquiv_inj {f g : E ≃ₛₗᵢ[σ₁₂] E₂} :\n    f.toIsometryEquiv = g.toIsometryEquiv ↔ f = g :=\n  toIsometryEquiv_injective.eq_iff\n\n"}
{"name":"LinearIsometryEquiv.coe_toIsometryEquiv","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Eq ⇑e.toIsometryEquiv ⇑e","decl":"@[simp]\ntheorem coe_toIsometryEquiv : ⇑e.toIsometryEquiv = e :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.range_eq_univ","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Eq (Set.range ⇑e) Set.univ","decl":"theorem range_eq_univ (e : E ≃ₛₗᵢ[σ₁₂] E₂) : Set.range e = Set.univ := by\n  rw [← coe_toIsometryEquiv]\n  exact IsometryEquiv.range_eq_univ _\n\n"}
{"name":"LinearIsometryEquiv.toHomeomorph_injective","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\n⊢ Function.Injective LinearIsometryEquiv.toHomeomorph","decl":"theorem toHomeomorph_injective : Function.Injective (toHomeomorph : (E ≃ₛₗᵢ[σ₁₂] E₂) → E ≃ₜ E₂) :=\n  fun x _ h => coe_injective (congr_arg _ h : ⇑x.toHomeomorph = _)\n\n"}
{"name":"LinearIsometryEquiv.toHomeomorph_inj","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf g : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Iff (Eq f.toHomeomorph g.toHomeomorph) (Eq f g)","decl":"@[simp]\ntheorem toHomeomorph_inj {f g : E ≃ₛₗᵢ[σ₁₂] E₂} : f.toHomeomorph = g.toHomeomorph ↔ f = g :=\n  toHomeomorph_injective.eq_iff\n\n"}
{"name":"LinearIsometryEquiv.coe_toHomeomorph","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Eq ⇑e.toHomeomorph ⇑e","decl":"@[simp]\ntheorem coe_toHomeomorph : ⇑e.toHomeomorph = e :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.continuous","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Continuous ⇑e","decl":"protected theorem continuous : Continuous e :=\n  e.isometry.continuous\n\n"}
{"name":"LinearIsometryEquiv.continuousAt","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\nx : E\n⊢ ContinuousAt (⇑e) x","decl":"protected theorem continuousAt {x} : ContinuousAt e x :=\n  e.continuous.continuousAt\n\n"}
{"name":"LinearIsometryEquiv.continuousOn","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\ns : Set E\n⊢ ContinuousOn (⇑e) s","decl":"protected theorem continuousOn {s} : ContinuousOn e s :=\n  e.continuous.continuousOn\n\n"}
{"name":"LinearIsometryEquiv.continuousWithinAt","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\ns : Set E\nx : E\n⊢ ContinuousWithinAt (⇑e) s x","decl":"protected theorem continuousWithinAt {s x} : ContinuousWithinAt e s x :=\n  e.continuous.continuousWithinAt\n\n"}
{"name":"LinearIsometryEquiv.toContinuousLinearEquiv_injective","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\n⊢ Function.Injective LinearIsometryEquiv.toContinuousLinearEquiv","decl":"theorem toContinuousLinearEquiv_injective :\n    Function.Injective (toContinuousLinearEquiv : _ → E ≃SL[σ₁₂] E₂) := fun x _ h =>\n  coe_injective (congr_arg _ h : ⇑x.toContinuousLinearEquiv = _)\n\n"}
{"name":"LinearIsometryEquiv.toContinuousLinearEquiv_inj","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf g : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Iff (Eq f.toContinuousLinearEquiv g.toContinuousLinearEquiv) (Eq f g)","decl":"@[simp]\ntheorem toContinuousLinearEquiv_inj {f g : E ≃ₛₗᵢ[σ₁₂] E₂} :\n    f.toContinuousLinearEquiv = g.toContinuousLinearEquiv ↔ f = g :=\n  toContinuousLinearEquiv_injective.eq_iff\n\n"}
{"name":"LinearIsometryEquiv.coe_toContinuousLinearEquiv","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Eq ⇑e.toContinuousLinearEquiv ⇑e","decl":"@[simp]\ntheorem coe_toContinuousLinearEquiv : ⇑e.toContinuousLinearEquiv = e :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.coe_refl","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\ninst✝² : Semiring R\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : Module R E\n⊢ Eq (⇑(LinearIsometryEquiv.refl R E)) id","decl":"@[simp]\ntheorem coe_refl : ⇑(refl R E) = id :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.apply_symm_apply","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\nx : E₂\n⊢ Eq (e (e.symm x)) x","decl":"@[simp]\ntheorem apply_symm_apply (x : E₂) : e (e.symm x) = x :=\n  e.toLinearEquiv.apply_symm_apply x\n\n"}
{"name":"LinearIsometryEquiv.symm_apply_apply","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\nx : E\n⊢ Eq (e.symm (e x)) x","decl":"@[simp]\ntheorem symm_apply_apply (x : E) : e.symm (e x) = x :=\n  e.toLinearEquiv.symm_apply_apply x\n\n"}
{"name":"LinearIsometryEquiv.map_eq_zero_iff","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\nx : E\n⊢ Iff (Eq (e x) 0) (Eq x 0)","decl":"theorem map_eq_zero_iff {x : E} : e x = 0 ↔ x = 0 :=\n  e.toLinearEquiv.map_eq_zero_iff\n\n"}
{"name":"LinearIsometryEquiv.symm_symm","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Eq e.symm.symm e","decl":"@[simp]\ntheorem symm_symm : e.symm.symm = e := rfl\n\n"}
{"name":"LinearIsometryEquiv.toLinearEquiv_symm","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Eq e.symm e.symm.toLinearEquiv","decl":"@[simp]\ntheorem toLinearEquiv_symm : e.toLinearEquiv.symm = e.symm.toLinearEquiv :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.toIsometryEquiv_symm","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Eq e.toIsometryEquiv.symm e.symm.toIsometryEquiv","decl":"@[simp]\ntheorem toIsometryEquiv_symm : e.toIsometryEquiv.symm = e.symm.toIsometryEquiv :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.toHomeomorph_symm","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Eq e.toHomeomorph.symm e.symm.toHomeomorph","decl":"@[simp]\ntheorem toHomeomorph_symm : e.toHomeomorph.symm = e.symm.toHomeomorph :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.coe_trans","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\nE : Type u_5\nE₂ : Type u_6\nE₃ : Type u_7\ninst✝¹⁶ : Semiring R\ninst✝¹⁵ : Semiring R₂\ninst✝¹⁴ : Semiring R₃\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\nσ₁₃ : RingHom R R₃\nσ₃₁ : RingHom R₃ R\nσ₂₃ : RingHom R₂ R₃\nσ₃₂ : RingHom R₃ R₂\ninst✝¹³ : RingHomInvPair σ₁₂ σ₂₁\ninst✝¹² : RingHomInvPair σ₂₁ σ₁₂\ninst✝¹¹ : RingHomInvPair σ₁₃ σ₃₁\ninst✝¹⁰ : RingHomInvPair σ₃₁ σ₁₃\ninst✝⁹ : RingHomInvPair σ₂₃ σ₃₂\ninst✝⁸ : RingHomInvPair σ₃₂ σ₂₃\ninst✝⁷ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝⁶ : RingHomCompTriple σ₃₂ σ₂₁ σ₃₁\ninst✝⁵ : SeminormedAddCommGroup E\ninst✝⁴ : SeminormedAddCommGroup E₂\ninst✝³ : SeminormedAddCommGroup E₃\ninst✝² : Module R E\ninst✝¹ : Module R₂ E₂\ninst✝ : Module R₃ E₃\ne₁ : LinearIsometryEquiv σ₁₂ E E₂\ne₂ : LinearIsometryEquiv σ₂₃ E₂ E₃\n⊢ Eq (⇑(e₁.trans e₂)) (Function.comp ⇑e₂ ⇑e₁)","decl":"@[simp]\ntheorem coe_trans (e₁ : E ≃ₛₗᵢ[σ₁₂] E₂) (e₂ : E₂ ≃ₛₗᵢ[σ₂₃] E₃) : ⇑(e₁.trans e₂) = e₂ ∘ e₁ :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.trans_apply","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\nE : Type u_5\nE₂ : Type u_6\nE₃ : Type u_7\ninst✝¹⁶ : Semiring R\ninst✝¹⁵ : Semiring R₂\ninst✝¹⁴ : Semiring R₃\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\nσ₁₃ : RingHom R R₃\nσ₃₁ : RingHom R₃ R\nσ₂₃ : RingHom R₂ R₃\nσ₃₂ : RingHom R₃ R₂\ninst✝¹³ : RingHomInvPair σ₁₂ σ₂₁\ninst✝¹² : RingHomInvPair σ₂₁ σ₁₂\ninst✝¹¹ : RingHomInvPair σ₁₃ σ₃₁\ninst✝¹⁰ : RingHomInvPair σ₃₁ σ₁₃\ninst✝⁹ : RingHomInvPair σ₂₃ σ₃₂\ninst✝⁸ : RingHomInvPair σ₃₂ σ₂₃\ninst✝⁷ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝⁶ : RingHomCompTriple σ₃₂ σ₂₁ σ₃₁\ninst✝⁵ : SeminormedAddCommGroup E\ninst✝⁴ : SeminormedAddCommGroup E₂\ninst✝³ : SeminormedAddCommGroup E₃\ninst✝² : Module R E\ninst✝¹ : Module R₂ E₂\ninst✝ : Module R₃ E₃\ne₁ : LinearIsometryEquiv σ₁₂ E E₂\ne₂ : LinearIsometryEquiv σ₂₃ E₂ E₃\nc : E\n⊢ Eq ((e₁.trans e₂) c) (e₂ (e₁ c))","decl":"@[simp]\ntheorem trans_apply (e₁ : E ≃ₛₗᵢ[σ₁₂] E₂) (e₂ : E₂ ≃ₛₗᵢ[σ₂₃] E₃) (c : E) :\n    (e₁.trans e₂ : E ≃ₛₗᵢ[σ₁₃] E₃) c = e₂ (e₁ c) :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.toLinearEquiv_trans","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\nE : Type u_5\nE₂ : Type u_6\nE₃ : Type u_7\ninst✝¹⁶ : Semiring R\ninst✝¹⁵ : Semiring R₂\ninst✝¹⁴ : Semiring R₃\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\nσ₁₃ : RingHom R R₃\nσ₃₁ : RingHom R₃ R\nσ₂₃ : RingHom R₂ R₃\nσ₃₂ : RingHom R₃ R₂\ninst✝¹³ : RingHomInvPair σ₁₂ σ₂₁\ninst✝¹² : RingHomInvPair σ₂₁ σ₁₂\ninst✝¹¹ : RingHomInvPair σ₁₃ σ₃₁\ninst✝¹⁰ : RingHomInvPair σ₃₁ σ₁₃\ninst✝⁹ : RingHomInvPair σ₂₃ σ₃₂\ninst✝⁸ : RingHomInvPair σ₃₂ σ₂₃\ninst✝⁷ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝⁶ : RingHomCompTriple σ₃₂ σ₂₁ σ₃₁\ninst✝⁵ : SeminormedAddCommGroup E\ninst✝⁴ : SeminormedAddCommGroup E₂\ninst✝³ : SeminormedAddCommGroup E₃\ninst✝² : Module R E\ninst✝¹ : Module R₂ E₂\ninst✝ : Module R₃ E₃\ne : LinearIsometryEquiv σ₁₂ E E₂\ne' : LinearIsometryEquiv σ₂₃ E₂ E₃\n⊢ Eq (e.trans e').toLinearEquiv (e.trans e'.toLinearEquiv)","decl":"@[simp]\ntheorem toLinearEquiv_trans (e' : E₂ ≃ₛₗᵢ[σ₂₃] E₃) :\n    (e.trans e').toLinearEquiv = e.toLinearEquiv.trans e'.toLinearEquiv :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.trans_refl","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Eq (e.trans (LinearIsometryEquiv.refl R₂ E₂)) e","decl":"@[simp]\ntheorem trans_refl : e.trans (refl R₂ E₂) = e :=\n  ext fun _ => rfl\n\n"}
{"name":"LinearIsometryEquiv.refl_trans","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Eq ((LinearIsometryEquiv.refl R E).trans e) e","decl":"@[simp]\ntheorem refl_trans : (refl R E).trans e = e :=\n  ext fun _ => rfl\n\n"}
{"name":"LinearIsometryEquiv.self_trans_symm","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Eq (e.trans e.symm) (LinearIsometryEquiv.refl R E)","decl":"@[simp]\ntheorem self_trans_symm : e.trans e.symm = refl R E :=\n  ext e.symm_apply_apply\n\n"}
{"name":"LinearIsometryEquiv.symm_trans_self","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Eq (e.symm.trans e) (LinearIsometryEquiv.refl R₂ E₂)","decl":"@[simp]\ntheorem symm_trans_self : e.symm.trans e = refl R₂ E₂ :=\n  ext e.apply_symm_apply\n\n"}
{"name":"LinearIsometryEquiv.symm_comp_self","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Eq (Function.comp ⇑e.symm ⇑e) id","decl":"@[simp]\ntheorem symm_comp_self : e.symm ∘ e = id :=\n  funext e.symm_apply_apply\n\n"}
{"name":"LinearIsometryEquiv.self_comp_symm","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Eq (Function.comp ⇑e ⇑e.symm) id","decl":"@[simp]\ntheorem self_comp_symm : e ∘ e.symm = id :=\n  e.symm.symm_comp_self\n\n"}
{"name":"LinearIsometryEquiv.symm_trans","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\nE : Type u_5\nE₂ : Type u_6\nE₃ : Type u_7\ninst✝¹⁶ : Semiring R\ninst✝¹⁵ : Semiring R₂\ninst✝¹⁴ : Semiring R₃\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\nσ₁₃ : RingHom R R₃\nσ₃₁ : RingHom R₃ R\nσ₂₃ : RingHom R₂ R₃\nσ₃₂ : RingHom R₃ R₂\ninst✝¹³ : RingHomInvPair σ₁₂ σ₂₁\ninst✝¹² : RingHomInvPair σ₂₁ σ₁₂\ninst✝¹¹ : RingHomInvPair σ₁₃ σ₃₁\ninst✝¹⁰ : RingHomInvPair σ₃₁ σ₁₃\ninst✝⁹ : RingHomInvPair σ₂₃ σ₃₂\ninst✝⁸ : RingHomInvPair σ₃₂ σ₂₃\ninst✝⁷ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝⁶ : RingHomCompTriple σ₃₂ σ₂₁ σ₃₁\ninst✝⁵ : SeminormedAddCommGroup E\ninst✝⁴ : SeminormedAddCommGroup E₂\ninst✝³ : SeminormedAddCommGroup E₃\ninst✝² : Module R E\ninst✝¹ : Module R₂ E₂\ninst✝ : Module R₃ E₃\ne₁ : LinearIsometryEquiv σ₁₂ E E₂\ne₂ : LinearIsometryEquiv σ₂₃ E₂ E₃\n⊢ Eq (e₁.trans e₂).symm (e₂.symm.trans e₁.symm)","decl":"@[simp]\ntheorem symm_trans (e₁ : E ≃ₛₗᵢ[σ₁₂] E₂) (e₂ : E₂ ≃ₛₗᵢ[σ₂₃] E₃) :\n    (e₁.trans e₂).symm = e₂.symm.trans e₁.symm :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.coe_symm_trans","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\nE : Type u_5\nE₂ : Type u_6\nE₃ : Type u_7\ninst✝¹⁶ : Semiring R\ninst✝¹⁵ : Semiring R₂\ninst✝¹⁴ : Semiring R₃\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\nσ₁₃ : RingHom R R₃\nσ₃₁ : RingHom R₃ R\nσ₂₃ : RingHom R₂ R₃\nσ₃₂ : RingHom R₃ R₂\ninst✝¹³ : RingHomInvPair σ₁₂ σ₂₁\ninst✝¹² : RingHomInvPair σ₂₁ σ₁₂\ninst✝¹¹ : RingHomInvPair σ₁₃ σ₃₁\ninst✝¹⁰ : RingHomInvPair σ₃₁ σ₁₃\ninst✝⁹ : RingHomInvPair σ₂₃ σ₃₂\ninst✝⁸ : RingHomInvPair σ₃₂ σ₂₃\ninst✝⁷ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝⁶ : RingHomCompTriple σ₃₂ σ₂₁ σ₃₁\ninst✝⁵ : SeminormedAddCommGroup E\ninst✝⁴ : SeminormedAddCommGroup E₂\ninst✝³ : SeminormedAddCommGroup E₃\ninst✝² : Module R E\ninst✝¹ : Module R₂ E₂\ninst✝ : Module R₃ E₃\ne₁ : LinearIsometryEquiv σ₁₂ E E₂\ne₂ : LinearIsometryEquiv σ₂₃ E₂ E₃\n⊢ Eq (⇑(e₁.trans e₂).symm) (Function.comp ⇑e₁.symm ⇑e₂.symm)","decl":"theorem coe_symm_trans (e₁ : E ≃ₛₗᵢ[σ₁₂] E₂) (e₂ : E₂ ≃ₛₗᵢ[σ₂₃] E₃) :\n    ⇑(e₁.trans e₂).symm = e₁.symm ∘ e₂.symm :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.trans_assoc","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\nR₄ : Type u_4\nE : Type u_5\nE₂ : Type u_6\nE₃ : Type u_7\nE₄ : Type u_8\ninst✝³¹ : Semiring R\ninst✝³⁰ : Semiring R₂\ninst✝²⁹ : Semiring R₃\ninst✝²⁸ : Semiring R₄\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\nσ₁₃ : RingHom R R₃\nσ₃₁ : RingHom R₃ R\nσ₁₄ : RingHom R R₄\nσ₄₁ : RingHom R₄ R\nσ₂₃ : RingHom R₂ R₃\nσ₃₂ : RingHom R₃ R₂\nσ₂₄ : RingHom R₂ R₄\nσ₄₂ : RingHom R₄ R₂\nσ₃₄ : RingHom R₃ R₄\nσ₄₃ : RingHom R₄ R₃\ninst✝²⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝²⁶ : RingHomInvPair σ₂₁ σ₁₂\ninst✝²⁵ : RingHomInvPair σ₁₃ σ₃₁\ninst✝²⁴ : RingHomInvPair σ₃₁ σ₁₃\ninst✝²³ : RingHomInvPair σ₂₃ σ₃₂\ninst✝²² : RingHomInvPair σ₃₂ σ₂₃\ninst✝²¹ : RingHomInvPair σ₁₄ σ₄₁\ninst✝²⁰ : RingHomInvPair σ₄₁ σ₁₄\ninst✝¹⁹ : RingHomInvPair σ₂₄ σ₄₂\ninst✝¹⁸ : RingHomInvPair σ₄₂ σ₂₄\ninst✝¹⁷ : RingHomInvPair σ₃₄ σ₄₃\ninst✝¹⁶ : RingHomInvPair σ₄₃ σ₃₄\ninst✝¹⁵ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝¹⁴ : RingHomCompTriple σ₁₂ σ₂₄ σ₁₄\ninst✝¹³ : RingHomCompTriple σ₂₃ σ₃₄ σ₂₄\ninst✝¹² : RingHomCompTriple σ₁₃ σ₃₄ σ₁₄\ninst✝¹¹ : RingHomCompTriple σ₃₂ σ₂₁ σ₃₁\ninst✝¹⁰ : RingHomCompTriple σ₄₂ σ₂₁ σ₄₁\ninst✝⁹ : RingHomCompTriple σ₄₃ σ₃₂ σ₄₂\ninst✝⁸ : RingHomCompTriple σ₄₃ σ₃₁ σ₄₁\ninst✝⁷ : SeminormedAddCommGroup E\ninst✝⁶ : SeminormedAddCommGroup E₂\ninst✝⁵ : SeminormedAddCommGroup E₃\ninst✝⁴ : SeminormedAddCommGroup E₄\ninst✝³ : Module R E\ninst✝² : Module R₂ E₂\ninst✝¹ : Module R₃ E₃\ninst✝ : Module R₄ E₄\neEE₂ : LinearIsometryEquiv σ₁₂ E E₂\neE₂E₃ : LinearIsometryEquiv σ₂₃ E₂ E₃\neE₃E₄ : LinearIsometryEquiv σ₃₄ E₃ E₄\n⊢ Eq (eEE₂.trans (eE₂E₃.trans eE₃E₄)) ((eEE₂.trans eE₂E₃).trans eE₃E₄)","decl":"theorem trans_assoc (eEE₂ : E ≃ₛₗᵢ[σ₁₂] E₂) (eE₂E₃ : E₂ ≃ₛₗᵢ[σ₂₃] E₃) (eE₃E₄ : E₃ ≃ₛₗᵢ[σ₃₄] E₄) :\n    eEE₂.trans (eE₂E₃.trans eE₃E₄) = (eEE₂.trans eE₂E₃).trans eE₃E₄ :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.coe_one","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\ninst✝² : Semiring R\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : Module R E\n⊢ Eq (⇑1) id","decl":"@[simp]\ntheorem coe_one : ⇑(1 : E ≃ₗᵢ[R] E) = id :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.coe_mul","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\ninst✝² : Semiring R\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : Module R E\ne e' : LinearIsometryEquiv (RingHom.id R) E E\n⊢ Eq (⇑(HMul.hMul e e')) (Function.comp ⇑e ⇑e')","decl":"@[simp]\ntheorem coe_mul (e e' : E ≃ₗᵢ[R] E) : ⇑(e * e') = e ∘ e' :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.coe_inv","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\ninst✝² : Semiring R\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : Module R E\ne : LinearIsometryEquiv (RingHom.id R) E E\n⊢ Eq ⇑(Inv.inv e) ⇑e.symm","decl":"@[simp]\ntheorem coe_inv (e : E ≃ₗᵢ[R] E) : ⇑e⁻¹ = e.symm :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.one_def","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\ninst✝² : Semiring R\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : Module R E\n⊢ Eq 1 (LinearIsometryEquiv.refl R E)","decl":"theorem one_def : (1 : E ≃ₗᵢ[R] E) = refl _ _ :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.mul_def","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\ninst✝² : Semiring R\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : Module R E\ne e' : LinearIsometryEquiv (RingHom.id R) E E\n⊢ Eq (HMul.hMul e e') (e'.trans e)","decl":"theorem mul_def (e e' : E ≃ₗᵢ[R] E) : (e * e' : E ≃ₗᵢ[R] E) = e'.trans e :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.inv_def","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\ninst✝² : Semiring R\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : Module R E\ne : LinearIsometryEquiv (RingHom.id R) E E\n⊢ Eq (Inv.inv e) e.symm","decl":"theorem inv_def (e : E ≃ₗᵢ[R] E) : (e⁻¹ : E ≃ₗᵢ[R] E) = e.symm :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.trans_one","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Eq (e.trans 1) e","decl":"@[simp]\ntheorem trans_one : e.trans (1 : E₂ ≃ₗᵢ[R₂] E₂) = e :=\n  trans_refl _\n\n"}
{"name":"LinearIsometryEquiv.one_trans","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Eq (LinearIsometryEquiv.trans 1 e) e","decl":"@[simp]\ntheorem one_trans : (1 : E ≃ₗᵢ[R] E).trans e = e :=\n  refl_trans _\n\n"}
{"name":"LinearIsometryEquiv.refl_mul","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\ninst✝² : Semiring R\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : Module R E\ne : LinearIsometryEquiv (RingHom.id R) E E\n⊢ Eq (HMul.hMul (LinearIsometryEquiv.refl R E) e) e","decl":"@[simp]\ntheorem refl_mul (e : E ≃ₗᵢ[R] E) : refl _ _ * e = e :=\n  trans_refl _\n\n"}
{"name":"LinearIsometryEquiv.mul_refl","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\ninst✝² : Semiring R\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : Module R E\ne : LinearIsometryEquiv (RingHom.id R) E E\n⊢ Eq (HMul.hMul e (LinearIsometryEquiv.refl R E)) e","decl":"@[simp]\ntheorem mul_refl (e : E ≃ₗᵢ[R] E) : e * refl _ _ = e :=\n  refl_trans _\n\n"}
{"name":"LinearIsometryEquiv.coe_coe","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Eq ⇑{ toLinearEquiv := e.toLinearEquiv, continuous_toFun := ⋯, continuous_invFun := ⋯ } ⇑e","decl":"@[simp]\ntheorem coe_coe : ⇑(e : E ≃SL[σ₁₂] E₂) = e :=\n  rfl\n\n-- @[simp] -- Porting note: now a syntactic tautology\n-- theorem coe_coe' : ((e : E ≃SL[σ₁₂] E₂) : E →SL[σ₁₂] E₂) = e :=\n--   rfl\n\n"}
{"name":"LinearIsometryEquiv.coe_coe''","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Eq ⇑↑{ toLinearEquiv := e.toLinearEquiv, continuous_toFun := ⋯, continuous_invFun := ⋯ } ⇑e","decl":"@[simp]\ntheorem coe_coe'' : ⇑(e : E →SL[σ₁₂] E₂) = e :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.map_zero","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Eq (e 0) 0","decl":"theorem map_zero : e 0 = 0 :=\n  e.1.map_zero\n\n"}
{"name":"LinearIsometryEquiv.map_add","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\nx y : E\n⊢ Eq (e (HAdd.hAdd x y)) (HAdd.hAdd (e x) (e y))","decl":"theorem map_add (x y : E) : e (x + y) = e x + e y :=\n  e.1.map_add x y\n\n"}
{"name":"LinearIsometryEquiv.map_sub","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\nx y : E\n⊢ Eq (e (HSub.hSub x y)) (HSub.hSub (e x) (e y))","decl":"theorem map_sub (x y : E) : e (x - y) = e x - e y :=\n  e.1.map_sub x y\n\n"}
{"name":"LinearIsometryEquiv.map_smulₛₗ","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\nc : R\nx : E\n⊢ Eq (e (HSMul.hSMul c x)) (HSMul.hSMul (σ₁₂ c) (e x))","decl":"theorem map_smulₛₗ (c : R) (x : E) : e (c • x) = σ₁₂ c • e x :=\n  e.1.map_smulₛₗ c x\n\n"}
{"name":"LinearIsometryEquiv.map_smul","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\nE₂ : Type u_6\ninst✝⁴ : Semiring R\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R E₂\ne : LinearIsometryEquiv (RingHom.id R) E E₂\nc : R\nx : E\n⊢ Eq (e (HSMul.hSMul c x)) (HSMul.hSMul c (e x))","decl":"theorem map_smul [Module R E₂] {e : E ≃ₗᵢ[R] E₂} (c : R) (x : E) : e (c • x) = c • e x :=\n  e.1.map_smul c x\n\n"}
{"name":"LinearIsometryEquiv.nnnorm_map","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\nx : E\n⊢ Eq (NNNorm.nnnorm (e x)) (NNNorm.nnnorm x)","decl":"@[simp] -- Should be replaced with `SemilinearIsometryClass.nnorm_map` when https://github.com/leanprover/lean4/issues/3107 is fixed.\ntheorem nnnorm_map (x : E) : ‖e x‖₊ = ‖x‖₊ :=\n  SemilinearIsometryClass.nnnorm_map e x\n\n"}
{"name":"LinearIsometryEquiv.dist_map","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\nx y : E\n⊢ Eq (Dist.dist (e x) (e y)) (Dist.dist x y)","decl":"@[simp]\ntheorem dist_map (x y : E) : dist (e x) (e y) = dist x y :=\n  e.toLinearIsometry.dist_map x y\n\n"}
{"name":"LinearIsometryEquiv.edist_map","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\nx y : E\n⊢ Eq (EDist.edist (e x) (e y)) (EDist.edist x y)","decl":"@[simp]\ntheorem edist_map (x y : E) : edist (e x) (e y) = edist x y :=\n  e.toLinearIsometry.edist_map x y\n\n"}
{"name":"LinearIsometryEquiv.bijective","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Function.Bijective ⇑e","decl":"protected theorem bijective : Bijective e :=\n  e.1.bijective\n\n"}
{"name":"LinearIsometryEquiv.injective","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Function.Injective ⇑e","decl":"protected theorem injective : Injective e :=\n  e.1.injective\n\n"}
{"name":"LinearIsometryEquiv.surjective","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ Function.Surjective ⇑e","decl":"protected theorem surjective : Surjective e :=\n  e.1.surjective\n\n"}
{"name":"LinearIsometryEquiv.map_eq_iff","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\nx y : E\n⊢ Iff (Eq (e x) (e y)) (Eq x y)","decl":"theorem map_eq_iff {x y : E} : e x = e y ↔ x = y :=\n  e.injective.eq_iff\n\n"}
{"name":"LinearIsometryEquiv.map_ne","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\nx y : E\nh : Ne x y\n⊢ Ne (e x) (e y)","decl":"theorem map_ne {x y : E} (h : x ≠ y) : e x ≠ e y :=\n  e.injective.ne h\n\n"}
{"name":"LinearIsometryEquiv.lipschitz","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ LipschitzWith 1 ⇑e","decl":"protected theorem lipschitz : LipschitzWith 1 e :=\n  e.isometry.lipschitz\n\n"}
{"name":"LinearIsometryEquiv.antilipschitz","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\n⊢ AntilipschitzWith 1 ⇑e","decl":"protected theorem antilipschitz : AntilipschitzWith 1 e :=\n  e.isometry.antilipschitz\n\n"}
{"name":"LinearIsometryEquiv.image_eq_preimage","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\ns : Set E\n⊢ Eq (Set.image (⇑e) s) (Set.preimage (⇑e.symm) s)","decl":"theorem image_eq_preimage (s : Set E) : e '' s = e.symm ⁻¹' s :=\n  e.toLinearEquiv.image_eq_preimage s\n\n"}
{"name":"LinearIsometryEquiv.ediam_image","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\ns : Set E\n⊢ Eq (EMetric.diam (Set.image (⇑e) s)) (EMetric.diam s)","decl":"@[simp]\ntheorem ediam_image (s : Set E) : EMetric.diam (e '' s) = EMetric.diam s :=\n  e.isometry.ediam_image s\n\n"}
{"name":"LinearIsometryEquiv.diam_image","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\ns : Set E\n⊢ Eq (Metric.diam (Set.image (⇑e) s)) (Metric.diam s)","decl":"@[simp]\ntheorem diam_image (s : Set E) : Metric.diam (e '' s) = Metric.diam s :=\n  e.isometry.diam_image s\n\n"}
{"name":"LinearIsometryEquiv.preimage_ball","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\nx : E₂\nr : Real\n⊢ Eq (Set.preimage (⇑e) (Metric.ball x r)) (Metric.ball (e.symm x) r)","decl":"@[simp]\ntheorem preimage_ball (x : E₂) (r : ℝ) : e ⁻¹' Metric.ball x r = Metric.ball (e.symm x) r :=\n  e.toIsometryEquiv.preimage_ball x r\n\n"}
{"name":"LinearIsometryEquiv.preimage_sphere","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\nx : E₂\nr : Real\n⊢ Eq (Set.preimage (⇑e) (Metric.sphere x r)) (Metric.sphere (e.symm x) r)","decl":"@[simp]\ntheorem preimage_sphere (x : E₂) (r : ℝ) : e ⁻¹' Metric.sphere x r = Metric.sphere (e.symm x) r :=\n  e.toIsometryEquiv.preimage_sphere x r\n\n"}
{"name":"LinearIsometryEquiv.preimage_closedBall","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\nx : E₂\nr : Real\n⊢ Eq (Set.preimage (⇑e) (Metric.closedBall x r)) (Metric.closedBall (e.symm x) r)","decl":"@[simp]\ntheorem preimage_closedBall (x : E₂) (r : ℝ) :\n    e ⁻¹' Metric.closedBall x r = Metric.closedBall (e.symm x) r :=\n  e.toIsometryEquiv.preimage_closedBall x r\n\n"}
{"name":"LinearIsometryEquiv.image_ball","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\nx : E\nr : Real\n⊢ Eq (Set.image (⇑e) (Metric.ball x r)) (Metric.ball (e x) r)","decl":"@[simp]\ntheorem image_ball (x : E) (r : ℝ) : e '' Metric.ball x r = Metric.ball (e x) r :=\n  e.toIsometryEquiv.image_ball x r\n\n"}
{"name":"LinearIsometryEquiv.image_sphere","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\nx : E\nr : Real\n⊢ Eq (Set.image (⇑e) (Metric.sphere x r)) (Metric.sphere (e x) r)","decl":"@[simp]\ntheorem image_sphere (x : E) (r : ℝ) : e '' Metric.sphere x r = Metric.sphere (e x) r :=\n  e.toIsometryEquiv.image_sphere x r\n\n"}
{"name":"LinearIsometryEquiv.image_closedBall","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\nx : E\nr : Real\n⊢ Eq (Set.image (⇑e) (Metric.closedBall x r)) (Metric.closedBall (e x) r)","decl":"@[simp]\ntheorem image_closedBall (x : E) (r : ℝ) : e '' Metric.closedBall x r = Metric.closedBall (e x) r :=\n  e.toIsometryEquiv.image_closedBall x r\n\n"}
{"name":"LinearIsometryEquiv.comp_continuousOn_iff","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁸ : Semiring R\ninst✝⁷ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁶ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁵ : RingHomInvPair σ₂₁ σ₁₂\ninst✝⁴ : SeminormedAddCommGroup E\ninst✝³ : SeminormedAddCommGroup E₂\ninst✝² : Module R E\ninst✝¹ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\nα : Type u_11\ninst✝ : TopologicalSpace α\nf : α → E\ns : Set α\n⊢ Iff (ContinuousOn (Function.comp (⇑e) f) s) (ContinuousOn f s)","decl":"@[simp]\ntheorem comp_continuousOn_iff {f : α → E} {s : Set α} : ContinuousOn (e ∘ f) s ↔ ContinuousOn f s :=\n  e.isometry.comp_continuousOn_iff\n\n"}
{"name":"LinearIsometryEquiv.comp_continuous_iff","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁸ : Semiring R\ninst✝⁷ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁶ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁵ : RingHomInvPair σ₂₁ σ₁₂\ninst✝⁴ : SeminormedAddCommGroup E\ninst✝³ : SeminormedAddCommGroup E₂\ninst✝² : Module R E\ninst✝¹ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\nα : Type u_11\ninst✝ : TopologicalSpace α\nf : α → E\n⊢ Iff (Continuous (Function.comp (⇑e) f)) (Continuous f)","decl":"@[simp]\ntheorem comp_continuous_iff {f : α → E} : Continuous (e ∘ f) ↔ Continuous f :=\n  e.isometry.comp_continuous_iff\n\n"}
{"name":"LinearIsometryEquiv.completeSpace_map","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁸ : Semiring R\ninst✝⁷ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁶ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁵ : RingHomInvPair σ₂₁ σ₁₂\ninst✝⁴ : SeminormedAddCommGroup E\ninst✝³ : SeminormedAddCommGroup E₂\ninst✝² : Module R E\ninst✝¹ : Module R₂ E₂\ne : LinearIsometryEquiv σ₁₂ E E₂\np : Submodule R E\ninst✝ : CompleteSpace (Subtype fun x => Membership.mem p x)\n⊢ CompleteSpace (Subtype fun x => Membership.mem (Submodule.map (↑e.toLinearEquiv) p) x)","decl":"instance completeSpace_map (p : Submodule R E) [CompleteSpace p] :\n    CompleteSpace (p.map (e.toLinearEquiv : E →ₛₗ[σ₁₂] E₂)) :=\n  e.toLinearIsometry.completeSpace_map' p\n\n"}
{"name":"LinearIsometryEquiv.coe_ofSurjective","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE₂ : Type u_6\nF : Type u_9\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E₂\ninst✝² : Module R₂ E₂\ninst✝¹ : NormedAddCommGroup F\ninst✝ : Module R F\nf : LinearIsometry σ₁₂ F E₂\nhfr : Function.Surjective ⇑f\n⊢ Eq ⇑(LinearIsometryEquiv.ofSurjective f hfr) ⇑f","decl":"@[simp]\ntheorem coe_ofSurjective (f : F →ₛₗᵢ[σ₁₂] E₂) (hfr : Function.Surjective f) :\n    ⇑(LinearIsometryEquiv.ofSurjective f hfr) = f := by\n  ext\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.coe_ofLinearIsometry","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\ng : LinearMap σ₂₁ E₂ E\nh₁ : Eq (f.comp g) LinearMap.id\nh₂ : Eq (g.comp f.toLinearMap) LinearMap.id\n⊢ Eq ⇑(LinearIsometryEquiv.ofLinearIsometry f g h₁ h₂) ⇑f","decl":"@[simp]\ntheorem coe_ofLinearIsometry (f : E →ₛₗᵢ[σ₁₂] E₂) (g : E₂ →ₛₗ[σ₂₁] E)\n    (h₁ : f.toLinearMap.comp g = LinearMap.id) (h₂ : g.comp f.toLinearMap = LinearMap.id) :\n    (ofLinearIsometry f g h₁ h₂ : E → E₂) = (f : E → E₂) :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.coe_ofLinearIsometry_symm","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nf : LinearIsometry σ₁₂ E E₂\ng : LinearMap σ₂₁ E₂ E\nh₁ : Eq (f.comp g) LinearMap.id\nh₂ : Eq (g.comp f.toLinearMap) LinearMap.id\n⊢ Eq ⇑(LinearIsometryEquiv.ofLinearIsometry f g h₁ h₂).symm ⇑g","decl":"@[simp]\ntheorem coe_ofLinearIsometry_symm (f : E →ₛₗᵢ[σ₁₂] E₂) (g : E₂ →ₛₗ[σ₂₁] E)\n    (h₁ : f.toLinearMap.comp g = LinearMap.id) (h₂ : g.comp f.toLinearMap = LinearMap.id) :\n    ((ofLinearIsometry f g h₁ h₂).symm : E₂ → E) = (g : E₂ → E) :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.coe_neg","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\ninst✝² : Semiring R\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : Module R E\n⊢ Eq ⇑(LinearIsometryEquiv.neg R) fun x => Neg.neg x","decl":"@[simp]\ntheorem coe_neg : (neg R : E → E) = fun x => -x :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.symm_neg","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\ninst✝² : Semiring R\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : Module R E\n⊢ Eq (LinearIsometryEquiv.neg R).symm (LinearIsometryEquiv.neg R)","decl":"@[simp]\ntheorem symm_neg : (neg R : E ≃ₗᵢ[R] E).symm = neg R :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.coe_prodAssoc","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\nE₂ : Type u_6\nE₃ : Type u_7\ninst✝⁶ : Semiring R\ninst✝⁵ : SeminormedAddCommGroup E\ninst✝⁴ : SeminormedAddCommGroup E₂\ninst✝³ : SeminormedAddCommGroup E₃\ninst✝² : Module R E\ninst✝¹ : Module R E₂\ninst✝ : Module R E₃\n⊢ Eq ⇑(LinearIsometryEquiv.prodAssoc R E E₂ E₃) ⇑(Equiv.prodAssoc E E₂ E₃)","decl":"@[simp]\ntheorem coe_prodAssoc [Module R E₂] [Module R E₃] :\n    (prodAssoc R E E₂ E₃ : (E × E₂) × E₃ → E × E₂ × E₃) = Equiv.prodAssoc E E₂ E₃ :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.coe_prodAssoc_symm","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nE : Type u_5\nE₂ : Type u_6\nE₃ : Type u_7\ninst✝⁶ : Semiring R\ninst✝⁵ : SeminormedAddCommGroup E\ninst✝⁴ : SeminormedAddCommGroup E₂\ninst✝³ : SeminormedAddCommGroup E₃\ninst✝² : Module R E\ninst✝¹ : Module R E₂\ninst✝ : Module R E₃\n⊢ Eq ⇑(LinearIsometryEquiv.prodAssoc R E E₂ E₃).symm ⇑(Equiv.prodAssoc E E₂ E₃).symm","decl":"@[simp]\ntheorem coe_prodAssoc_symm [Module R E₂] [Module R E₃] :\n    ((prodAssoc R E E₂ E₃).symm : E × E₂ × E₃ → (E × E₂) × E₃) = (Equiv.prodAssoc E E₂ E₃).symm :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.ofTop_apply","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"E : Type u_5\ninst✝² : SeminormedAddCommGroup E\nR : Type u_12\ninst✝¹ : Ring R\ninst✝ : Module R E\np : Submodule R E\nhp : Eq p Top.top\nself : Subtype fun x => Membership.mem p x\n⊢ Eq ((LinearIsometryEquiv.ofTop E p hp) self) ↑self","decl":"/-- If `p` is a submodule that is equal to `⊤`, then `LinearIsometryEquiv.ofTop p hp` is the\n\"identity\" equivalence between `p` and `E`. -/\n@[simps! toLinearEquiv apply symm_apply_coe]\ndef ofTop {R : Type*} [Ring R] [Module R E] (p : Submodule R E) (hp : p = ⊤) : p ≃ₗᵢ[R] E :=\n  { p.subtypeₗᵢ with toLinearEquiv := LinearEquiv.ofTop p hp }\n\n"}
{"name":"LinearIsometryEquiv.ofTop_symm_apply_coe","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"E : Type u_5\ninst✝² : SeminormedAddCommGroup E\nR : Type u_12\ninst✝¹ : Ring R\ninst✝ : Module R E\np : Submodule R E\nhp : Eq p Top.top\nx : E\n⊢ Eq (↑((LinearIsometryEquiv.ofTop E p hp).symm x)) x","decl":"/-- If `p` is a submodule that is equal to `⊤`, then `LinearIsometryEquiv.ofTop p hp` is the\n\"identity\" equivalence between `p` and `E`. -/\n@[simps! toLinearEquiv apply symm_apply_coe]\ndef ofTop {R : Type*} [Ring R] [Module R E] (p : Submodule R E) (hp : p = ⊤) : p ≃ₗᵢ[R] E :=\n  { p.subtypeₗᵢ with toLinearEquiv := LinearEquiv.ofTop p hp }\n\n"}
{"name":"LinearIsometryEquiv.ofTop_toLinearEquiv","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"E : Type u_5\ninst✝² : SeminormedAddCommGroup E\nR : Type u_12\ninst✝¹ : Ring R\ninst✝ : Module R E\np : Submodule R E\nhp : Eq p Top.top\n⊢ Eq (LinearIsometryEquiv.ofTop E p hp).toLinearEquiv (LinearEquiv.ofTop p hp)","decl":"/-- If `p` is a submodule that is equal to `⊤`, then `LinearIsometryEquiv.ofTop p hp` is the\n\"identity\" equivalence between `p` and `E`. -/\n@[simps! toLinearEquiv apply symm_apply_coe]\ndef ofTop {R : Type*} [Ring R] [Module R E] (p : Submodule R E) (hp : p = ⊤) : p ≃ₗᵢ[R] E :=\n  { p.subtypeₗᵢ with toLinearEquiv := LinearEquiv.ofTop p hp }\n\n"}
{"name":"LinearIsometryEquiv.coe_ofEq_apply","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"E : Type u_5\ninst✝² : SeminormedAddCommGroup E\nR' : Type u_12\ninst✝¹ : Ring R'\ninst✝ : Module R' E\np q : Submodule R' E\nh : Eq p q\nx : Subtype fun x => Membership.mem p x\n⊢ Eq ↑((LinearIsometryEquiv.ofEq p q h) x) ↑x","decl":"@[simp]\ntheorem coe_ofEq_apply (h : p = q) (x : p) : (ofEq p q h x : E) = x :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.ofEq_symm","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"E : Type u_5\ninst✝² : SeminormedAddCommGroup E\nR' : Type u_12\ninst✝¹ : Ring R'\ninst✝ : Module R' E\np q : Submodule R' E\nh : Eq p q\n⊢ Eq (LinearIsometryEquiv.ofEq p q h).symm (LinearIsometryEquiv.ofEq q p ⋯)","decl":"@[simp]\ntheorem ofEq_symm (h : p = q) : (ofEq p q h).symm = ofEq q p h.symm :=\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.ofEq_rfl","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"E : Type u_5\ninst✝² : SeminormedAddCommGroup E\nR' : Type u_12\ninst✝¹ : Ring R'\ninst✝ : Module R' E\np : Submodule R' E\n⊢ Eq (LinearIsometryEquiv.ofEq p p ⋯) (LinearIsometryEquiv.refl R' (Subtype fun x => Membership.mem p x))","decl":"@[simp]\ntheorem ofEq_rfl : ofEq p p rfl = LinearIsometryEquiv.refl R' p := rfl\n\n"}
{"name":"Basis.ext_linearIsometry","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁵ : Semiring R\ninst✝⁴ : Semiring R₂\nσ₁₂ : RingHom R R₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nι : Type u_11\nb : Basis ι R E\nf₁ f₂ : LinearIsometry σ₁₂ E E₂\nh : ∀ (i : ι), Eq (f₁ (b i)) (f₂ (b i))\n⊢ Eq f₁ f₂","decl":"/-- Two linear isometries are equal if they are equal on basis vectors. -/\ntheorem Basis.ext_linearIsometry {ι : Type*} (b : Basis ι R E) {f₁ f₂ : E →ₛₗᵢ[σ₁₂] E₂}\n    (h : ∀ i, f₁ (b i) = f₂ (b i)) : f₁ = f₂ :=\n  LinearIsometry.toLinearMap_injective <| b.ext h\n\n"}
{"name":"Basis.ext_linearIsometryEquiv","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"R : Type u_1\nR₂ : Type u_2\nE : Type u_5\nE₂ : Type u_6\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝⁵ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁴ : RingHomInvPair σ₂₁ σ₁₂\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup E₂\ninst✝¹ : Module R E\ninst✝ : Module R₂ E₂\nι : Type u_11\nb : Basis ι R E\nf₁ f₂ : LinearIsometryEquiv σ₁₂ E E₂\nh : ∀ (i : ι), Eq (f₁ (b i)) (f₂ (b i))\n⊢ Eq f₁ f₂","decl":"/-- Two linear isometric equivalences are equal if they are equal on basis vectors. -/\ntheorem Basis.ext_linearIsometryEquiv {ι : Type*} (b : Basis ι R E) {f₁ f₂ : E ≃ₛₗᵢ[σ₁₂] E₂}\n    (h : ∀ i, f₁ (b i) = f₂ (b i)) : f₁ = f₂ :=\n  LinearIsometryEquiv.toLinearEquiv_injective <| b.ext' h\n\n"}
{"name":"LinearIsometry.equivRange_apply_coe","module":"Mathlib.Analysis.Normed.Operator.LinearIsometry","initialProofState":"E : Type u_5\nF : Type u_9\ninst✝⁷ : SeminormedAddCommGroup E\ninst✝⁶ : NormedAddCommGroup F\nR : Type u_11\nS : Type u_12\ninst✝⁵ : Semiring R\ninst✝⁴ : Ring S\ninst✝³ : Module S E\ninst✝² : Module R F\nσ₁₂ : RingHom R S\nσ₂₁ : RingHom S R\ninst✝¹ : RingHomInvPair σ₁₂ σ₂₁\ninst✝ : RingHomInvPair σ₂₁ σ₁₂\nf : LinearIsometry σ₁₂ F E\na : F\n⊢ Eq (↑(f.equivRange a)) (f a)","decl":"/-- Reinterpret a `LinearIsometry` as a `LinearIsometryEquiv` to the range. -/\n@[simps! apply_coe] -- Porting note: `toLinearEquiv` projection does not simplify using itself\nnoncomputable def LinearIsometry.equivRange {R S : Type*} [Semiring R] [Ring S] [Module S E]\n    [Module R F] {σ₁₂ : R →+* S} {σ₂₁ : S →+* R} [RingHomInvPair σ₁₂ σ₂₁] [RingHomInvPair σ₂₁ σ₁₂]\n    (f : F →ₛₗᵢ[σ₁₂] E) : F ≃ₛₗᵢ[σ₁₂] (LinearMap.range f.toLinearMap) :=\n  { f with toLinearEquiv := LinearEquiv.ofInjective f.toLinearMap f.injective }\n"}
