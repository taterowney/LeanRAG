{"name":"FiniteField.isSplittingField_sub","module":"Mathlib.FieldTheory.Finite.GaloisField","initialProofState":"K : Type u_1\nF : Type u_2\ninst✝³ : Field K\ninst✝² : Fintype K\ninst✝¹ : Field F\ninst✝ : Algebra F K\n⊢ Polynomial.IsSplittingField F K (HSub.hSub (HPow.hPow Polynomial.X (Fintype.card K)) Polynomial.X)","decl":"instance FiniteField.isSplittingField_sub (K F : Type*) [Field K] [Fintype K]\n    [Field F] [Algebra F K] : IsSplittingField F K (X ^ Fintype.card K - X) where\n  splits' := by\n    have h : (X ^ Fintype.card K - X : K[X]).natDegree = Fintype.card K :=\n      FiniteField.X_pow_card_sub_X_natDegree_eq K Fintype.one_lt_card\n    rw [← splits_id_iff_splits, splits_iff_card_roots, Polynomial.map_sub, Polynomial.map_pow,\n      map_X, h, FiniteField.roots_X_pow_card_sub_X K, ← Finset.card_def, Finset.card_univ]\n  adjoin_rootSet' := by\n    classical\n    trans Algebra.adjoin F ((roots (X ^ Fintype.card K - X : K[X])).toFinset : Set K)\n    · simp only [rootSet, aroots, Polynomial.map_pow, map_X, Polynomial.map_sub]\n    · rw [FiniteField.roots_X_pow_card_sub_X, val_toFinset, coe_univ, Algebra.adjoin_univ]\n\n"}
{"name":"galois_poly_separable","module":"Mathlib.FieldTheory.Finite.GaloisField","initialProofState":"K : Type u_1\ninst✝¹ : Field K\np q : Nat\ninst✝ : CharP K p\nh : Dvd.dvd p q\n⊢ (HSub.hSub (HPow.hPow Polynomial.X q) Polynomial.X).Separable","decl":"theorem galois_poly_separable {K : Type*} [Field K] (p q : ℕ) [CharP K p] (h : p ∣ q) :\n    Separable (X ^ q - X : K[X]) := by\n  use 1, X ^ q - X - 1\n  rw [← CharP.cast_eq_zero_iff K[X] p] at h\n  rw [derivative_sub, derivative_X_pow, derivative_X, C_eq_natCast, h]\n  ring\n\n"}
{"name":"GaloisField.instIsSplittingFieldZModHSubPolynomialHPowNatX","module":"Mathlib.FieldTheory.Finite.GaloisField","initialProofState":"p : Nat\nh_prime : Fact (Nat.Prime p)\nn : Nat\n⊢ Polynomial.IsSplittingField (ZMod p) (GaloisField p n) (HSub.hSub (HPow.hPow Polynomial.X (HPow.hPow p n)) Polynomial.X)","decl":"instance : IsSplittingField (ZMod p) (GaloisField p n) (X ^ p ^ n - X) :=\n  Polynomial.IsSplittingField.splittingField _\n\n"}
{"name":"GaloisField.instCharP","module":"Mathlib.FieldTheory.Finite.GaloisField","initialProofState":"p : Nat\nh_prime : Fact (Nat.Prime p)\nn : Nat\n⊢ CharP (GaloisField p n) p","decl":"instance : CharP (GaloisField p n) p :=\n  (Algebra.charP_iff (ZMod p) (GaloisField p n) p).mp (by infer_instance)\n\n"}
{"name":"GaloisField.instFiniteDimensionalZMod","module":"Mathlib.FieldTheory.Finite.GaloisField","initialProofState":"p : Nat\nh_prime : Fact (Nat.Prime p)\nn : Nat\n⊢ FiniteDimensional (ZMod p) (GaloisField p n)","decl":"instance : FiniteDimensional (ZMod p) (GaloisField p n) := by\n  dsimp only [GaloisField]; infer_instance\n\n"}
{"name":"GaloisField.instFinite","module":"Mathlib.FieldTheory.Finite.GaloisField","initialProofState":"p : Nat\nh_prime : Fact (Nat.Prime p)\nn : Nat\n⊢ Finite (GaloisField p n)","decl":"instance : Finite (GaloisField p n) :=\n  Module.finite_of_finite (ZMod p)\n\n"}
{"name":"GaloisField.finrank","module":"Mathlib.FieldTheory.Finite.GaloisField","initialProofState":"p : Nat\nh_prime : Fact (Nat.Prime p)\nn : Nat\nh : Ne n 0\n⊢ Eq (Module.finrank (ZMod p) (GaloisField p n)) n","decl":"theorem finrank {n} (h : n ≠ 0) : Module.finrank (ZMod p) (GaloisField p n) = n := by\n  haveI : Fintype (GaloisField p n) := Fintype.ofFinite (GaloisField p n)\n  set g_poly := (X ^ p ^ n - X : (ZMod p)[X])\n  have hp : 1 < p := h_prime.out.one_lt\n  have aux : g_poly ≠ 0 := FiniteField.X_pow_card_pow_sub_X_ne_zero _ h hp\n  -- Porting note: in the statement of `key`, replaced `g_poly` by its value otherwise the\n  -- proof fails\n  have key : Fintype.card (g_poly.rootSet (GaloisField p n)) = g_poly.natDegree :=\n    card_rootSet_eq_natDegree (galois_poly_separable p _ (dvd_pow (dvd_refl p) h))\n      (SplittingField.splits (X ^ p ^ n - X : (ZMod p)[X]))\n  have nat_degree_eq : g_poly.natDegree = p ^ n :=\n    FiniteField.X_pow_card_pow_sub_X_natDegree_eq _ h hp\n  rw [nat_degree_eq] at key\n  suffices g_poly.rootSet (GaloisField p n) = Set.univ by\n    simp_rw [this, ← Fintype.ofEquiv_card (Equiv.Set.univ _)] at key\n    -- Porting note: prevents `card_eq_pow_finrank` from using a wrong instance for `Fintype`\n    rw [@card_eq_pow_finrank (ZMod p) _ _ _ _ _ (_), ZMod.card] at key\n    exact Nat.pow_right_injective (Nat.Prime.one_lt' p).out key\n  rw [Set.eq_univ_iff_forall]\n  suffices ∀ (x) (hx : x ∈ (⊤ : Subalgebra (ZMod p) (GaloisField p n))),\n      x ∈ (X ^ p ^ n - X : (ZMod p)[X]).rootSet (GaloisField p n)\n    by simpa\n  rw [← SplittingField.adjoin_rootSet]\n  simp_rw [Algebra.mem_adjoin_iff]\n  intro x hx\n  -- We discharge the `p = 0` separately, to avoid typeclass issues on `ZMod p`.\n  cases p; cases hp\n  simp only [g_poly] at aux\n  refine Subring.closure_induction ?_ ?_ ?_ ?_ ?_ ?_ hx\n    <;> simp_rw [mem_rootSet_of_ne aux]\n  · rintro x (⟨r, rfl⟩ | hx)\n    · simp only [g_poly, map_sub, map_pow, aeval_X]\n      rw [← map_pow, ZMod.pow_card_pow, sub_self]\n    · dsimp only [GaloisField] at hx\n      rwa [mem_rootSet_of_ne aux] at hx\n  · rw [← coeff_zero_eq_aeval_zero']\n    simp only [g_poly, coeff_X_pow, coeff_X_zero, sub_zero, _root_.map_eq_zero, ite_eq_right_iff,\n      one_ne_zero, coeff_sub]\n    intro hn\n    exact Nat.not_lt_zero 1 (pow_eq_zero hn.symm ▸ hp)\n  · simp [g_poly]\n  · simp only [g_poly, aeval_X_pow, aeval_X, map_sub, add_pow_char_pow, sub_eq_zero]\n    intro x y _ _ hx hy\n    rw [hx, hy]\n  · intro x _ hx\n    simp only [g_poly, sub_eq_zero, aeval_X_pow, aeval_X, map_sub, sub_neg_eq_add] at *\n    rw [neg_pow, hx, neg_one_pow_char_pow]\n    simp\n  · simp only [g_poly, aeval_X_pow, aeval_X, map_sub, mul_pow, sub_eq_zero]\n    intro x y _ _ hx hy\n    rw [hx, hy]\n\n"}
{"name":"GaloisField.card","module":"Mathlib.FieldTheory.Finite.GaloisField","initialProofState":"p : Nat\nh_prime : Fact (Nat.Prime p)\nn : Nat\nh : Ne n 0\n⊢ Eq (Nat.card (GaloisField p n)) (HPow.hPow p n)","decl":"theorem card (h : n ≠ 0) : Nat.card (GaloisField p n) = p ^ n := by\n  let b := IsNoetherian.finsetBasis (ZMod p) (GaloisField p n)\n  haveI : Fintype (GaloisField p n) := Fintype.ofFinite (GaloisField p n)\n  rw [Nat.card_eq_fintype_card, Module.card_fintype b, ← Module.finrank_eq_card_basis b,\n    ZMod.card, finrank p h]\n\n"}
{"name":"GaloisField.splits_zmod_X_pow_sub_X","module":"Mathlib.FieldTheory.Finite.GaloisField","initialProofState":"p : Nat\nh_prime : Fact (Nat.Prime p)\n⊢ Polynomial.Splits (RingHom.id (ZMod p)) (HSub.hSub (HPow.hPow Polynomial.X p) Polynomial.X)","decl":"theorem splits_zmod_X_pow_sub_X : Splits (RingHom.id (ZMod p)) (X ^ p - X) := by\n  have hp : 1 < p := h_prime.out.one_lt\n  have h1 : roots (X ^ p - X : (ZMod p)[X]) = Finset.univ.val := by\n    convert FiniteField.roots_X_pow_card_sub_X (ZMod p)\n    exact (ZMod.card p).symm\n  have h2 := FiniteField.X_pow_card_sub_X_natDegree_eq (ZMod p) hp\n  -- We discharge the `p = 0` separately, to avoid typeclass issues on `ZMod p`.\n  cases p; cases hp\n  rw [splits_iff_card_roots, h1, ← Finset.card_def, Finset.card_univ, h2, ZMod.card]\n\n"}
{"name":"FiniteField.splits_X_pow_card_sub_X","module":"Mathlib.FieldTheory.Finite.GaloisField","initialProofState":"p : Nat\nh_prime : Fact (Nat.Prime p)\nK : Type u_1\ninst✝² : Field K\ninst✝¹ : Fintype K\ninst✝ : Algebra (ZMod p) K\n⊢ Polynomial.Splits (algebraMap (ZMod p) K) (HSub.hSub (HPow.hPow Polynomial.X (Fintype.card K)) Polynomial.X)","decl":"theorem _root_.FiniteField.splits_X_pow_card_sub_X :\n    Splits (algebraMap (ZMod p) K) (X ^ Fintype.card K - X) :=\n  (FiniteField.isSplittingField_sub K (ZMod p)).splits\n\n"}
{"name":"GaloisField.splits_X_pow_card_sub_X","module":"Mathlib.FieldTheory.Finite.GaloisField","initialProofState":"p : Nat\nh_prime : Fact (Nat.Prime p)\nK : Type u_1\ninst✝² : Field K\ninst✝¹ : Fintype K\ninst✝ : Algebra (ZMod p) K\n⊢ Polynomial.Splits (algebraMap (ZMod p) K) (HSub.hSub (HPow.hPow Polynomial.X (Fintype.card K)) Polynomial.X)","decl":"@[deprecated (since := \"2024-11-12\")]\nalias splits_X_pow_card_sub_X := FiniteField.splits_X_pow_card_sub_X\n\n"}
{"name":"FiniteField.isSplittingField_of_card_eq","module":"Mathlib.FieldTheory.Finite.GaloisField","initialProofState":"p : Nat\nh_prime : Fact (Nat.Prime p)\nn : Nat\nK : Type u_1\ninst✝² : Field K\ninst✝¹ : Fintype K\ninst✝ : Algebra (ZMod p) K\nh : Eq (Fintype.card K) (HPow.hPow p n)\n⊢ Polynomial.IsSplittingField (ZMod p) K (HSub.hSub (HPow.hPow Polynomial.X (HPow.hPow p n)) Polynomial.X)","decl":"theorem _root_.FiniteField.isSplittingField_of_card_eq (h : Fintype.card K = p ^ n) :\n    IsSplittingField (ZMod p) K (X ^ p ^ n - X) :=\n  h ▸ FiniteField.isSplittingField_sub K (ZMod p)\n\n"}
{"name":"GaloisField.isSplittingField_of_card_eq","module":"Mathlib.FieldTheory.Finite.GaloisField","initialProofState":"p : Nat\nh_prime : Fact (Nat.Prime p)\nn : Nat\nK : Type u_1\ninst✝² : Field K\ninst✝¹ : Fintype K\ninst✝ : Algebra (ZMod p) K\nh : Eq (Fintype.card K) (HPow.hPow p n)\n⊢ Polynomial.IsSplittingField (ZMod p) K (HSub.hSub (HPow.hPow Polynomial.X (HPow.hPow p n)) Polynomial.X)","decl":"@[deprecated (since := \"2024-11-12\")]\nalias isSplittingField_of_card_eq := FiniteField.isSplittingField_of_card_eq\n\n"}
{"name":"FiniteField.splits_X_pow_nat_card_sub_X","module":"Mathlib.FieldTheory.Finite.GaloisField","initialProofState":"p : Nat\nh_prime : Fact (Nat.Prime p)\nK : Type u_1\ninst✝² : Field K\ninst✝¹ : Algebra (ZMod p) K\ninst✝ : Finite K\n⊢ Polynomial.Splits (algebraMap (ZMod p) K) (HSub.hSub (HPow.hPow Polynomial.X (Nat.card K)) Polynomial.X)","decl":"theorem _root_.FiniteField.splits_X_pow_nat_card_sub_X [Finite K] :\n    Splits (algebraMap (ZMod p) K) (X ^ Nat.card K - X) := by\n  haveI : Fintype K := Fintype.ofFinite K\n  rw [Nat.card_eq_fintype_card]\n  exact (FiniteField.isSplittingField_sub K (ZMod p)).splits\n\n"}
{"name":"FiniteField.isSplittingField_of_nat_card_eq","module":"Mathlib.FieldTheory.Finite.GaloisField","initialProofState":"p : Nat\nh_prime : Fact (Nat.Prime p)\nn : Nat\nK : Type u_1\ninst✝¹ : Field K\ninst✝ : Algebra (ZMod p) K\nh : Eq (Nat.card K) (HPow.hPow p n)\n⊢ Polynomial.IsSplittingField (ZMod p) K (HSub.hSub (HPow.hPow Polynomial.X (HPow.hPow p n)) Polynomial.X)","decl":"theorem _root_.FiniteField.isSplittingField_of_nat_card_eq (h : Nat.card K = p ^ n) :\n    IsSplittingField (ZMod p) K (X ^ p ^ n - X) := by\n  haveI : Finite K := (Nat.card_pos_iff.mp (h ▸ pow_pos h_prime.1.pos n)).2\n  haveI : Fintype K := Fintype.ofFinite K\n  rw [← h, Nat.card_eq_fintype_card]\n  exact FiniteField.isSplittingField_sub K (ZMod p)\n\n"}
{"name":"GaloisField.instIsGaloisOfFinite","module":"Mathlib.FieldTheory.Finite.GaloisField","initialProofState":"K : Type u_2\nK' : Type u_3\ninst✝³ : Field K\ninst✝² : Field K'\ninst✝¹ : Finite K'\ninst✝ : Algebra K K'\n⊢ IsGalois K K'","decl":"instance (priority := 100) {K K' : Type*} [Field K] [Field K'] [Finite K'] [Algebra K K'] :\n    IsGalois K K' := by\n  cases nonempty_fintype K'\n  obtain ⟨p, hp⟩ := CharP.exists K\n  haveI : CharP K p := hp\n  haveI : CharP K' p := charP_of_injective_algebraMap' K K' p\n  exact IsGalois.of_separable_splitting_field\n    (galois_poly_separable p (Fintype.card K')\n      (let ⟨n, _, hn⟩ := FiniteField.card K' p\n      hn.symm ▸ dvd_pow_self p n.ne_zero))\n\n"}
