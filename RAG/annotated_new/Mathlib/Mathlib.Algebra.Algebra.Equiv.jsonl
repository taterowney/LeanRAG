{"name":"AlgEquiv.mk.injEq","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\ntoEquiv✝ : Equiv A B\nmap_mul'✝ : ∀ (x y : A), Eq (toEquiv✝.toFun (HMul.hMul x y)) (HMul.hMul (toEquiv✝.toFun x) (toEquiv✝.toFun y))\nmap_add'✝ : ∀ (x y : A), Eq (toEquiv✝.toFun (HAdd.hAdd x y)) (HAdd.hAdd (toEquiv✝.toFun x) (toEquiv✝.toFun y))\ncommutes'✝ : ∀ (r : R), Eq (toEquiv✝.toFun ((algebraMap R A) r)) ((algebraMap R B) r)\ntoEquiv : Equiv A B\nmap_mul' : ∀ (x y : A), Eq (toEquiv.toFun (HMul.hMul x y)) (HMul.hMul (toEquiv.toFun x) (toEquiv.toFun y))\nmap_add' : ∀ (x y : A), Eq (toEquiv.toFun (HAdd.hAdd x y)) (HAdd.hAdd (toEquiv.toFun x) (toEquiv.toFun y))\ncommutes' : ∀ (r : R), Eq (toEquiv.toFun ((algebraMap R A) r)) ((algebraMap R B) r)\n⊢ Eq (Eq { toEquiv := toEquiv✝, map_mul' := map_mul'✝, map_add' := map_add'✝, commutes' := commutes'✝ } { toEquiv := toEquiv, map_mul' := map_mul', map_add' := map_add', commutes' := commutes' }) (Eq toEquiv✝ toEquiv)","decl":"/-- An equivalence of algebras (denoted as `A ≃ₐ[R] B`)\nis an equivalence of rings commuting with the actions of scalars. -/\nstructure AlgEquiv (R : Type u) (A : Type v) (B : Type w) [CommSemiring R] [Semiring A] [Semiring B]\n  [Algebra R A] [Algebra R B] extends A ≃ B, A ≃* B, A ≃+ B, A ≃+* B where\n  /-- An equivalence of algebras commutes with the action of scalars. -/\n  protected commutes' : ∀ r : R, toFun (algebraMap R A r) = algebraMap R B r\n\n"}
{"name":"AlgEquiv.commutes'","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nself : AlgEquiv R A B\nr : R\n⊢ Eq (self.toFun ((algebraMap R A) r)) ((algebraMap R B) r)","decl":"/-- An equivalence of algebras (denoted as `A ≃ₐ[R] B`)\nis an equivalence of rings commuting with the actions of scalars. -/\nstructure AlgEquiv (R : Type u) (A : Type v) (B : Type w) [CommSemiring R] [Semiring A] [Semiring B]\n  [Algebra R A] [Algebra R B] extends A ≃ B, A ≃* B, A ≃+ B, A ≃+* B where\n  /-- An equivalence of algebras commutes with the action of scalars. -/\n  protected commutes' : ∀ r : R, toFun (algebraMap R A r) = algebraMap R B r\n\n"}
{"name":"AlgEquiv.map_add'","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nself : AlgEquiv R A B\nx y : A\n⊢ Eq (self.toFun (HAdd.hAdd x y)) (HAdd.hAdd (self.toFun x) (self.toFun y))","decl":"/-- An equivalence of algebras (denoted as `A ≃ₐ[R] B`)\nis an equivalence of rings commuting with the actions of scalars. -/\nstructure AlgEquiv (R : Type u) (A : Type v) (B : Type w) [CommSemiring R] [Semiring A] [Semiring B]\n  [Algebra R A] [Algebra R B] extends A ≃ B, A ≃* B, A ≃+ B, A ≃+* B where\n  /-- An equivalence of algebras commutes with the action of scalars. -/\n  protected commutes' : ∀ r : R, toFun (algebraMap R A r) = algebraMap R B r\n\n"}
{"name":"AlgEquiv.mk.inj","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\ntoEquiv✝ : Equiv A B\nmap_mul'✝ : ∀ (x y : A), Eq (toEquiv✝.toFun (HMul.hMul x y)) (HMul.hMul (toEquiv✝.toFun x) (toEquiv✝.toFun y))\nmap_add'✝ : ∀ (x y : A), Eq (toEquiv✝.toFun (HAdd.hAdd x y)) (HAdd.hAdd (toEquiv✝.toFun x) (toEquiv✝.toFun y))\ncommutes'✝ : ∀ (r : R), Eq (toEquiv✝.toFun ((algebraMap R A) r)) ((algebraMap R B) r)\ntoEquiv : Equiv A B\nmap_mul' : ∀ (x y : A), Eq (toEquiv.toFun (HMul.hMul x y)) (HMul.hMul (toEquiv.toFun x) (toEquiv.toFun y))\nmap_add' : ∀ (x y : A), Eq (toEquiv.toFun (HAdd.hAdd x y)) (HAdd.hAdd (toEquiv.toFun x) (toEquiv.toFun y))\ncommutes' : ∀ (r : R), Eq (toEquiv.toFun ((algebraMap R A) r)) ((algebraMap R B) r)\nx✝ : Eq { toEquiv := toEquiv✝, map_mul' := map_mul'✝, map_add' := map_add'✝, commutes' := commutes'✝ } { toEquiv := toEquiv, map_mul' := map_mul', map_add' := map_add', commutes' := commutes' }\n⊢ Eq toEquiv✝ toEquiv","decl":"/-- An equivalence of algebras (denoted as `A ≃ₐ[R] B`)\nis an equivalence of rings commuting with the actions of scalars. -/\nstructure AlgEquiv (R : Type u) (A : Type v) (B : Type w) [CommSemiring R] [Semiring A] [Semiring B]\n  [Algebra R A] [Algebra R B] extends A ≃ B, A ≃* B, A ≃+ B, A ≃+* B where\n  /-- An equivalence of algebras commutes with the action of scalars. -/\n  protected commutes' : ∀ r : R, toFun (algebraMap R A r) = algebraMap R B r\n\n"}
{"name":"AlgEquiv.mk.sizeOf_spec","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁷ : CommSemiring R\ninst✝⁶ : Semiring A\ninst✝⁵ : Semiring B\ninst✝⁴ : Algebra R A\ninst✝³ : Algebra R B\ninst✝² : SizeOf R\ninst✝¹ : SizeOf A\ninst✝ : SizeOf B\ntoEquiv : Equiv A B\nmap_mul' : ∀ (x y : A), Eq (toEquiv.toFun (HMul.hMul x y)) (HMul.hMul (toEquiv.toFun x) (toEquiv.toFun y))\nmap_add' : ∀ (x y : A), Eq (toEquiv.toFun (HAdd.hAdd x y)) (HAdd.hAdd (toEquiv.toFun x) (toEquiv.toFun y))\ncommutes' : ∀ (r : R), Eq (toEquiv.toFun ((algebraMap R A) r)) ((algebraMap R B) r)\n⊢ Eq (SizeOf.sizeOf { toEquiv := toEquiv, map_mul' := map_mul', map_add' := map_add', commutes' := commutes' }) (HAdd.hAdd 1 (SizeOf.sizeOf toEquiv))","decl":"/-- An equivalence of algebras (denoted as `A ≃ₐ[R] B`)\nis an equivalence of rings commuting with the actions of scalars. -/\nstructure AlgEquiv (R : Type u) (A : Type v) (B : Type w) [CommSemiring R] [Semiring A] [Semiring B]\n  [Algebra R A] [Algebra R B] extends A ≃ B, A ≃* B, A ≃+ B, A ≃+* B where\n  /-- An equivalence of algebras commutes with the action of scalars. -/\n  protected commutes' : ∀ r : R, toFun (algebraMap R A r) = algebraMap R B r\n\n"}
{"name":"AlgEquiv.map_mul'","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nself : AlgEquiv R A B\nx y : A\n⊢ Eq (self.toFun (HMul.hMul x y)) (HMul.hMul (self.toFun x) (self.toFun y))","decl":"/-- An equivalence of algebras (denoted as `A ≃ₐ[R] B`)\nis an equivalence of rings commuting with the actions of scalars. -/\nstructure AlgEquiv (R : Type u) (A : Type v) (B : Type w) [CommSemiring R] [Semiring A] [Semiring B]\n  [Algebra R A] [Algebra R B] extends A ≃ B, A ≃* B, A ≃+ B, A ≃+* B where\n  /-- An equivalence of algebras commutes with the action of scalars. -/\n  protected commutes' : ∀ r : R, toFun (algebraMap R A r) = algebraMap R B r\n\n"}
{"name":"AlgEquivClass.toRingEquivClass","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"F : Type u_1\nR : outParam (Type u_2)\nA : outParam (Type u_3)\nB : outParam (Type u_4)\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Semiring B\ninst✝² : Algebra R A\ninst✝¹ : Algebra R B\ninst✝ : EquivLike F A B\nself : AlgEquivClass F R A B\n⊢ RingEquivClass F A B","decl":"/-- `AlgEquivClass F R A B` states that `F` is a type of algebra structure preserving\n  equivalences. You should extend this class when you extend `AlgEquiv`. -/\nclass AlgEquivClass (F : Type*) (R A B : outParam Type*) [CommSemiring R] [Semiring A]\n    [Semiring B] [Algebra R A] [Algebra R B] [EquivLike F A B]\n    extends RingEquivClass F A B : Prop where\n  /-- An equivalence of algebras commutes with the action of scalars. -/\n  commutes : ∀ (f : F) (r : R), f (algebraMap R A r) = algebraMap R B r\n\n"}
{"name":"AlgEquivClass.commutes","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"F : Type u_1\nR : outParam (Type u_2)\nA : outParam (Type u_3)\nB : outParam (Type u_4)\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Semiring B\ninst✝² : Algebra R A\ninst✝¹ : Algebra R B\ninst✝ : EquivLike F A B\nself : AlgEquivClass F R A B\nf : F\nr : R\n⊢ Eq (f ((algebraMap R A) r)) ((algebraMap R B) r)","decl":"/-- `AlgEquivClass F R A B` states that `F` is a type of algebra structure preserving\n  equivalences. You should extend this class when you extend `AlgEquiv`. -/\nclass AlgEquivClass (F : Type*) (R A B : outParam Type*) [CommSemiring R] [Semiring A]\n    [Semiring B] [Algebra R A] [Algebra R B] [EquivLike F A B]\n    extends RingEquivClass F A B : Prop where\n  /-- An equivalence of algebras commutes with the action of scalars. -/\n  commutes : ∀ (f : F) (r : R), f (algebraMap R A r) = algebraMap R B r\n\n"}
{"name":"AlgEquivClass.toAlgHomClass","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"F : Type u_1\nR : Type u_2\nA : Type u_3\nB : Type u_4\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Semiring B\ninst✝² : Algebra R A\ninst✝¹ : Algebra R B\ninst✝ : EquivLike F A B\nh : AlgEquivClass F R A B\n⊢ AlgHomClass F R A B","decl":"instance (priority := 100) toAlgHomClass (F R A B : Type*) [CommSemiring R] [Semiring A]\n    [Semiring B] [Algebra R A] [Algebra R B] [EquivLike F A B] [h : AlgEquivClass F R A B] :\n    AlgHomClass F R A B :=\n  { h with }\n\n"}
{"name":"AlgEquivClass.toLinearEquivClass","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"F : Type u_1\nR : Type u_2\nA : Type u_3\nB : Type u_4\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Semiring B\ninst✝² : Algebra R A\ninst✝¹ : Algebra R B\ninst✝ : EquivLike F A B\nh : AlgEquivClass F R A B\n⊢ LinearEquivClass F R A B","decl":"instance (priority := 100) toLinearEquivClass (F R A B : Type*) [CommSemiring R]\n    [Semiring A] [Semiring B] [Algebra R A] [Algebra R B]\n    [EquivLike F A B] [h : AlgEquivClass F R A B] : LinearEquivClass F R A B :=\n  { h with map_smulₛₗ := fun f => map_smulₛₗ f }\n\n"}
{"name":"AlgEquiv.instAlgEquivClass","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\n⊢ AlgEquivClass (AlgEquiv R A₁ A₂) R A₁ A₂","decl":"instance : AlgEquivClass (A₁ ≃ₐ[R] A₂) R A₁ A₂ where\n  map_add f := f.map_add'\n  map_mul f := f.map_mul'\n  commutes f := f.commutes'\n\n"}
{"name":"AlgEquiv.ext_iff","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\nf g : AlgEquiv R A₁ A₂\n⊢ Iff (Eq f g) (∀ (a : A₁), Eq (f a) (g a))","decl":"@[ext]\ntheorem ext {f g : A₁ ≃ₐ[R] A₂} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"AlgEquiv.ext","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\nf g : AlgEquiv R A₁ A₂\nh : ∀ (a : A₁), Eq (f a) (g a)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : A₁ ≃ₐ[R] A₂} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"AlgEquiv.congr_arg","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\nf : AlgEquiv R A₁ A₂\nx x' : A₁\na✝ : Eq x x'\n⊢ Eq (f x) (f x')","decl":"protected theorem congr_arg {f : A₁ ≃ₐ[R] A₂} {x x' : A₁} : x = x' → f x = f x' :=\n  DFunLike.congr_arg f\n\n"}
{"name":"AlgEquiv.congr_fun","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\nf g : AlgEquiv R A₁ A₂\nh : Eq f g\nx : A₁\n⊢ Eq (f x) (g x)","decl":"protected theorem congr_fun {f g : A₁ ≃ₐ[R] A₂} (h : f = g) (x : A₁) : f x = g x :=\n  DFunLike.congr_fun h x\n\n"}
{"name":"AlgEquiv.coe_mk","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ntoEquiv : Equiv A₁ A₂\nmap_mul : ∀ (x y : A₁), Eq (toEquiv.toFun (HMul.hMul x y)) (HMul.hMul (toEquiv.toFun x) (toEquiv.toFun y))\nmap_add : ∀ (x y : A₁), Eq (toEquiv.toFun (HAdd.hAdd x y)) (HAdd.hAdd (toEquiv.toFun x) (toEquiv.toFun y))\ncommutes : ∀ (r : R), Eq (toEquiv.toFun ((algebraMap R A₁) r)) ((algebraMap R A₂) r)\n⊢ Eq ⇑{ toEquiv := toEquiv, map_mul' := map_mul, map_add' := map_add, commutes' := commutes } ⇑toEquiv","decl":"@[simp]\ntheorem coe_mk {toEquiv map_mul map_add commutes} :\n    ⇑(⟨toEquiv, map_mul, map_add, commutes⟩ : A₁ ≃ₐ[R] A₂) = toEquiv :=\n  rfl\n\n"}
{"name":"AlgEquiv.mk_coe","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\ne' : A₂ → A₁\nh₁ : Function.LeftInverse e' ⇑e\nh₂ : Function.RightInverse e' ⇑e\nh₃ : ∀ (x y : A₁), Eq ({ toFun := ⇑e, invFun := e', left_inv := h₁, right_inv := h₂ }.toFun (HMul.hMul x y)) (HMul.hMul ({ toFun := ⇑e, invFun := e', left_inv := h₁, right_inv := h₂ }.toFun x) ({ toFun := ⇑e, invFun := e', left_inv := h₁, right_inv := h₂ }.toFun y))\nh₄ : ∀ (x y : A₁), Eq ({ toFun := ⇑e, invFun := e', left_inv := h₁, right_inv := h₂ }.toFun (HAdd.hAdd x y)) (HAdd.hAdd ({ toFun := ⇑e, invFun := e', left_inv := h₁, right_inv := h₂ }.toFun x) ({ toFun := ⇑e, invFun := e', left_inv := h₁, right_inv := h₂ }.toFun y))\nh₅ : ∀ (r : R), Eq ({ toFun := ⇑e, invFun := e', left_inv := h₁, right_inv := h₂ }.toFun ((algebraMap R A₁) r)) ((algebraMap R A₂) r)\n⊢ Eq { toFun := ⇑e, invFun := e', left_inv := h₁, right_inv := h₂, map_mul' := h₃, map_add' := h₄, commutes' := h₅ } e","decl":"@[simp]\ntheorem mk_coe (e : A₁ ≃ₐ[R] A₂) (e' h₁ h₂ h₃ h₄ h₅) :\n    (⟨⟨e, e', h₁, h₂⟩, h₃, h₄, h₅⟩ : A₁ ≃ₐ[R] A₂) = e :=\n  ext fun _ => rfl\n\n"}
{"name":"AlgEquiv.toEquiv_eq_coe","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Eq e.toEquiv ↑e","decl":"@[simp]\ntheorem toEquiv_eq_coe : e.toEquiv = e :=\n  rfl\n\n"}
{"name":"AlgEquiv.coe_coe","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A₁\ninst✝⁴ : Semiring A₂\ninst✝³ : Algebra R A₁\ninst✝² : Algebra R A₂\nF : Type u_1\ninst✝¹ : EquivLike F A₁ A₂\ninst✝ : AlgEquivClass F R A₁ A₂\nf : F\n⊢ Eq ⇑↑f ⇑f","decl":"@[simp]\nprotected theorem coe_coe {F : Type*} [EquivLike F A₁ A₂] [AlgEquivClass F R A₁ A₂] (f : F) :\n    ⇑(f : A₁ ≃ₐ[R] A₂) = f :=\n  rfl\n\n"}
{"name":"AlgEquiv.coe_fun_injective","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\n⊢ Function.Injective fun e => ⇑e","decl":"theorem coe_fun_injective : @Function.Injective (A₁ ≃ₐ[R] A₂) (A₁ → A₂) fun e => (e : A₁ → A₂) :=\n  DFunLike.coe_injective\n\n"}
{"name":"AlgEquiv.coe_toEquiv","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Eq ⇑↑e ⇑e","decl":"@[simp]\ntheorem coe_toEquiv : ((e : A₁ ≃ A₂) : A₁ → A₂) = e :=\n  rfl\n\n"}
{"name":"AlgEquiv.toRingEquiv_eq_coe","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Eq e.toRingEquiv ↑e","decl":"@[simp]\ntheorem toRingEquiv_eq_coe : e.toRingEquiv = e :=\n  rfl\n\n"}
{"name":"AlgEquiv.toRingEquiv_toRingHom","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Eq ↑↑e ↑e","decl":"@[simp, norm_cast]\nlemma toRingEquiv_toRingHom : ((e : A₁ ≃+* A₂) : A₁ →+* A₂) = e :=\n  rfl\n\n"}
{"name":"AlgEquiv.coe_ringEquiv","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Eq ⇑↑e ⇑e","decl":"@[simp, norm_cast]\ntheorem coe_ringEquiv : ((e : A₁ ≃+* A₂) : A₁ → A₂) = e :=\n  rfl\n\n"}
{"name":"AlgEquiv.coe_ringEquiv'","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Eq ⇑e.toRingEquiv ⇑e","decl":"theorem coe_ringEquiv' : (e.toRingEquiv : A₁ → A₂) = e :=\n  rfl\n\n"}
{"name":"AlgEquiv.coe_ringEquiv_injective","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\n⊢ Function.Injective RingEquivClass.toRingEquiv","decl":"theorem coe_ringEquiv_injective : Function.Injective ((↑) : (A₁ ≃ₐ[R] A₂) → A₁ ≃+* A₂) :=\n  fun _ _ h => ext <| RingEquiv.congr_fun h\n\n"}
{"name":"AlgEquiv.toAlgHom_eq_coe","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Eq ↑e ↑e","decl":"@[simp]\ntheorem toAlgHom_eq_coe : e.toAlgHom = e :=\n  rfl\n\n"}
{"name":"AlgEquiv.coe_algHom","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Eq ⇑↑e ⇑e","decl":"@[simp, norm_cast]\ntheorem coe_algHom : DFunLike.coe (e.toAlgHom) = DFunLike.coe e :=\n  rfl\n\n"}
{"name":"AlgEquiv.coe_algHom_injective","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\n⊢ Function.Injective AlgHomClass.toAlgHom","decl":"theorem coe_algHom_injective : Function.Injective ((↑) : (A₁ ≃ₐ[R] A₂) → A₁ →ₐ[R] A₂) :=\n  fun _ _ h => ext <| AlgHom.congr_fun h\n\n"}
{"name":"AlgEquiv.toAlgHom_toRingHom","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Eq ↑↑e ↑e","decl":"@[simp, norm_cast]\nlemma toAlgHom_toRingHom : ((e : A₁ →ₐ[R] A₂) : A₁ →+* A₂) = e :=\n  rfl\n\n"}
{"name":"AlgEquiv.coe_ringHom_commutes","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Eq ↑↑e ↑↑e","decl":"/-- The two paths coercion can take to a `RingHom` are equivalent -/\ntheorem coe_ringHom_commutes : ((e : A₁ →ₐ[R] A₂) : A₁ →+* A₂) = ((e : A₁ ≃+* A₂) : A₁ →+* A₂) :=\n  rfl\n\n"}
{"name":"AlgEquiv.commutes","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\nr : R\n⊢ Eq (e ((algebraMap R A₁) r)) ((algebraMap R A₂) r)","decl":"@[simp]\ntheorem commutes : ∀ r : R, e (algebraMap R A₁ r) = algebraMap R A₂ r :=\n  e.commutes'\n\n"}
{"name":"AlgEquiv.map_add","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\nx y : A₁\n⊢ Eq (e (HAdd.hAdd x y)) (HAdd.hAdd (e x) (e y))","decl":"@[deprecated map_add (since := \"2024-06-20\")]\nprotected theorem map_add : ∀ x y, e (x + y) = e x + e y :=\n  map_add e\n\n"}
{"name":"AlgEquiv.map_zero","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Eq (e 0) 0","decl":"@[deprecated map_zero (since := \"2024-06-20\")]\nprotected theorem map_zero : e 0 = 0 :=\n  map_zero e\n\n"}
{"name":"AlgEquiv.map_mul","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\nx y : A₁\n⊢ Eq (e (HMul.hMul x y)) (HMul.hMul (e x) (e y))","decl":"@[deprecated map_mul (since := \"2024-06-20\")]\nprotected theorem map_mul : ∀ x y, e (x * y) = e x * e y :=\n  map_mul e\n\n"}
{"name":"AlgEquiv.map_one","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Eq (e 1) 1","decl":"@[deprecated map_one (since := \"2024-06-20\")]\nprotected theorem map_one : e 1 = 1 :=\n  map_one e\n\n"}
{"name":"AlgEquiv.map_smul","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\nr : R\nx : A₁\n⊢ Eq (e (HSMul.hSMul r x)) (HSMul.hSMul r (e x))","decl":"@[deprecated map_smul (since := \"2024-06-20\")]\nprotected theorem map_smul (r : R) (x : A₁) : e (r • x) = r • e x :=\n  map_smul _ _ _\n\n"}
{"name":"AlgEquiv.map_pow","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\nx : A₁\nn : Nat\n⊢ Eq (e (HPow.hPow x n)) (HPow.hPow (e x) n)","decl":"@[deprecated map_pow (since := \"2024-06-20\")]\nprotected theorem map_pow : ∀ (x : A₁) (n : ℕ), e (x ^ n) = e x ^ n :=\n  map_pow _\n\n"}
{"name":"AlgEquiv.bijective","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Function.Bijective ⇑e","decl":"protected theorem bijective : Function.Bijective e :=\n  EquivLike.bijective e\n\n"}
{"name":"AlgEquiv.injective","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Function.Injective ⇑e","decl":"protected theorem injective : Function.Injective e :=\n  EquivLike.injective e\n\n"}
{"name":"AlgEquiv.surjective","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Function.Surjective ⇑e","decl":"protected theorem surjective : Function.Surjective e :=\n  EquivLike.surjective e\n\n"}
{"name":"AlgEquiv.refl_toAlgHom","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A₁\ninst✝ : Algebra R A₁\n⊢ Eq (↑AlgEquiv.refl) (AlgHom.id R A₁)","decl":"@[simp]\ntheorem refl_toAlgHom : ↑(refl : A₁ ≃ₐ[R] A₁) = AlgHom.id R A₁ :=\n  rfl\n\n"}
{"name":"AlgEquiv.coe_refl","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A₁\ninst✝ : Algebra R A₁\n⊢ Eq (⇑AlgEquiv.refl) id","decl":"@[simp]\ntheorem coe_refl : ⇑(refl : A₁ ≃ₐ[R] A₁) = id :=\n  rfl\n\n"}
{"name":"AlgEquiv.invFun_eq_symm","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Eq e.invFun ⇑e.symm","decl":"theorem invFun_eq_symm {e : A₁ ≃ₐ[R] A₂} : e.invFun = e.symm :=\n  rfl\n\n"}
{"name":"AlgEquiv.coe_apply_coe_coe_symm_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A₁\ninst✝⁴ : Semiring A₂\ninst✝³ : Algebra R A₁\ninst✝² : Algebra R A₂\nF : Type u_1\ninst✝¹ : EquivLike F A₁ A₂\ninst✝ : AlgEquivClass F R A₁ A₂\nf : F\nx : A₂\n⊢ Eq (f ((↑f).symm x)) x","decl":"@[simp]\ntheorem coe_apply_coe_coe_symm_apply {F : Type*} [EquivLike F A₁ A₂] [AlgEquivClass F R A₁ A₂]\n    (f : F) (x : A₂) :\n    f ((f : A₁ ≃ₐ[R] A₂).symm x) = x :=\n  EquivLike.right_inv f x\n\n"}
{"name":"AlgEquiv.coe_coe_symm_apply_coe_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A₁\ninst✝⁴ : Semiring A₂\ninst✝³ : Algebra R A₁\ninst✝² : Algebra R A₂\nF : Type u_1\ninst✝¹ : EquivLike F A₁ A₂\ninst✝ : AlgEquivClass F R A₁ A₂\nf : F\nx : A₁\n⊢ Eq ((↑f).symm (f x)) x","decl":"@[simp]\ntheorem coe_coe_symm_apply_coe_apply {F : Type*} [EquivLike F A₁ A₂] [AlgEquivClass F R A₁ A₂]\n    (f : F) (x : A₁) :\n    (f : A₁ ≃ₐ[R] A₂).symm (f x) = x :=\n  EquivLike.left_inv f x\n\n"}
{"name":"AlgEquiv.symm_toEquiv_eq_symm","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Eq (↑e).symm ↑e.symm","decl":"/-- `simp` normal form of `invFun_eq_symm` -/\n@[simp]\ntheorem symm_toEquiv_eq_symm {e : A₁ ≃ₐ[R] A₂} : (e : A₁ ≃ A₂).symm = e.symm :=\n  rfl\n\n"}
{"name":"AlgEquiv.symm_symm","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Eq e.symm.symm e","decl":"@[simp]\ntheorem symm_symm (e : A₁ ≃ₐ[R] A₂) : e.symm.symm = e := rfl\n\n"}
{"name":"AlgEquiv.symm_bijective","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\n⊢ Function.Bijective AlgEquiv.symm","decl":"theorem symm_bijective : Function.Bijective (symm : (A₁ ≃ₐ[R] A₂) → A₂ ≃ₐ[R] A₁) :=\n  Function.bijective_iff_has_inverse.mpr ⟨_, symm_symm, symm_symm⟩\n\n"}
{"name":"AlgEquiv.mk_coe'","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\nf : A₂ → A₁\nh₁ : Function.LeftInverse (⇑e) f\nh₂ : Function.RightInverse (⇑e) f\nh₃ : ∀ (x y : A₂), Eq ({ toFun := f, invFun := ⇑e, left_inv := h₁, right_inv := h₂ }.toFun (HMul.hMul x y)) (HMul.hMul ({ toFun := f, invFun := ⇑e, left_inv := h₁, right_inv := h₂ }.toFun x) ({ toFun := f, invFun := ⇑e, left_inv := h₁, right_inv := h₂ }.toFun y))\nh₄ : ∀ (x y : A₂), Eq ({ toFun := f, invFun := ⇑e, left_inv := h₁, right_inv := h₂ }.toFun (HAdd.hAdd x y)) (HAdd.hAdd ({ toFun := f, invFun := ⇑e, left_inv := h₁, right_inv := h₂ }.toFun x) ({ toFun := f, invFun := ⇑e, left_inv := h₁, right_inv := h₂ }.toFun y))\nh₅ : ∀ (r : R), Eq ({ toFun := f, invFun := ⇑e, left_inv := h₁, right_inv := h₂ }.toFun ((algebraMap R A₂) r)) ((algebraMap R A₁) r)\n⊢ Eq { toFun := f, invFun := ⇑e, left_inv := h₁, right_inv := h₂, map_mul' := h₃, map_add' := h₄, commutes' := h₅ } e.symm","decl":"@[simp]\ntheorem mk_coe' (e : A₁ ≃ₐ[R] A₂) (f h₁ h₂ h₃ h₄ h₅) :\n    (⟨⟨f, e, h₁, h₂⟩, h₃, h₄, h₅⟩ : A₂ ≃ₐ[R] A₁) = e.symm :=\n  symm_bijective.injective <| ext fun _ => rfl\n\n"}
{"name":"AlgEquiv.symm_mk","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\nf : A₁ → A₂\nf' : A₂ → A₁\nh₁ : Function.LeftInverse f' f\nh₂ : Function.RightInverse f' f\nh₃ : ∀ (x y : A₁), Eq ({ toFun := f, invFun := f', left_inv := h₁, right_inv := h₂ }.toFun (HMul.hMul x y)) (HMul.hMul ({ toFun := f, invFun := f', left_inv := h₁, right_inv := h₂ }.toFun x) ({ toFun := f, invFun := f', left_inv := h₁, right_inv := h₂ }.toFun y))\nh₄ : ∀ (x y : A₁), Eq ({ toFun := f, invFun := f', left_inv := h₁, right_inv := h₂ }.toFun (HAdd.hAdd x y)) (HAdd.hAdd ({ toFun := f, invFun := f', left_inv := h₁, right_inv := h₂ }.toFun x) ({ toFun := f, invFun := f', left_inv := h₁, right_inv := h₂ }.toFun y))\nh₅ : ∀ (r : R), Eq ({ toFun := f, invFun := f', left_inv := h₁, right_inv := h₂ }.toFun ((algebraMap R A₁) r)) ((algebraMap R A₂) r)\n⊢ Eq { toFun := f, invFun := f', left_inv := h₁, right_inv := h₂, map_mul' := h₃, map_add' := h₄, commutes' := h₅ }.symm\n    (let __src := AlgEquiv.symm_mk.aux f f' h₁ h₂ h₃ h₄ h₅;\n    { toFun := f', invFun := f, left_inv := ⋯, right_inv := ⋯, map_mul' := ⋯, map_add' := ⋯, commutes' := ⋯ })","decl":"@[simp]\ntheorem symm_mk (f f') (h₁ h₂ h₃ h₄ h₅) :\n    (⟨⟨f, f', h₁, h₂⟩, h₃, h₄, h₅⟩ : A₁ ≃ₐ[R] A₂).symm =\n      { symm_mk.aux f f' h₁ h₂ h₃ h₄ h₅ with\n        toFun := f'\n        invFun := f } :=\n  rfl\n\n"}
{"name":"AlgEquiv.refl_symm","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A₁\ninst✝ : Algebra R A₁\n⊢ Eq AlgEquiv.refl.symm AlgEquiv.refl","decl":"@[simp]\ntheorem refl_symm : (AlgEquiv.refl : A₁ ≃ₐ[R] A₁).symm = AlgEquiv.refl :=\n  rfl\n\n--this should be a simp lemma but causes a lint timeout\n"}
{"name":"AlgEquiv.toRingEquiv_symm","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A₁\ninst✝ : Algebra R A₁\nf : AlgEquiv R A₁ A₁\n⊢ Eq (↑f).symm ↑f.symm","decl":"theorem toRingEquiv_symm (f : A₁ ≃ₐ[R] A₁) : (f : A₁ ≃+* A₁).symm = f.symm :=\n  rfl\n\n"}
{"name":"AlgEquiv.symm_toRingEquiv","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Eq (↑e.symm) (↑e).symm","decl":"@[simp]\ntheorem symm_toRingEquiv : (e.symm : A₂ ≃+* A₁) = (e : A₁ ≃+* A₂).symm :=\n  rfl\n\n"}
{"name":"AlgEquiv.apply_symm_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\nx : A₂\n⊢ Eq (e (e.symm x)) x","decl":"@[simp]\ntheorem apply_symm_apply (e : A₁ ≃ₐ[R] A₂) : ∀ x, e (e.symm x) = x :=\n  e.toEquiv.apply_symm_apply\n\n"}
{"name":"AlgEquiv.symm_apply_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\nx : A₁\n⊢ Eq (e.symm (e x)) x","decl":"@[simp]\ntheorem symm_apply_apply (e : A₁ ≃ₐ[R] A₂) : ∀ x, e.symm (e x) = x :=\n  e.toEquiv.symm_apply_apply\n\n"}
{"name":"AlgEquiv.symm_apply_eq","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\nx : A₂\ny : A₁\n⊢ Iff (Eq (e.symm x) y) (Eq x (e y))","decl":"theorem symm_apply_eq (e : A₁ ≃ₐ[R] A₂) {x y} : e.symm x = y ↔ x = e y :=\n  e.toEquiv.symm_apply_eq\n\n"}
{"name":"AlgEquiv.eq_symm_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\nx : A₂\ny : A₁\n⊢ Iff (Eq y (e.symm x)) (Eq (e y) x)","decl":"theorem eq_symm_apply (e : A₁ ≃ₐ[R] A₂) {x y} : y = e.symm x ↔ e y = x :=\n  e.toEquiv.eq_symm_apply\n\n"}
{"name":"AlgEquiv.comp_symm","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Eq ((↑e).comp ↑e.symm) (AlgHom.id R A₂)","decl":"@[simp]\ntheorem comp_symm (e : A₁ ≃ₐ[R] A₂) : AlgHom.comp (e : A₁ →ₐ[R] A₂) ↑e.symm = AlgHom.id R A₂ := by\n  ext\n  simp\n\n"}
{"name":"AlgEquiv.symm_comp","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Eq ((↑e.symm).comp ↑e) (AlgHom.id R A₁)","decl":"@[simp]\ntheorem symm_comp (e : A₁ ≃ₐ[R] A₂) : AlgHom.comp ↑e.symm (e : A₁ →ₐ[R] A₂) = AlgHom.id R A₁ := by\n  ext\n  simp\n\n"}
{"name":"AlgEquiv.leftInverse_symm","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Function.LeftInverse ⇑e.symm ⇑e","decl":"theorem leftInverse_symm (e : A₁ ≃ₐ[R] A₂) : Function.LeftInverse e.symm e :=\n  e.left_inv\n\n"}
{"name":"AlgEquiv.rightInverse_symm","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Function.RightInverse ⇑e.symm ⇑e","decl":"theorem rightInverse_symm (e : A₁ ≃ₐ[R] A₂) : Function.RightInverse e.symm e :=\n  e.right_inv\n\n"}
{"name":"AlgEquiv.coe_trans","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\nA₃ : Type uA₃\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A₁\ninst✝⁴ : Semiring A₂\ninst✝³ : Semiring A₃\ninst✝² : Algebra R A₁\ninst✝¹ : Algebra R A₂\ninst✝ : Algebra R A₃\ne₁ : AlgEquiv R A₁ A₂\ne₂ : AlgEquiv R A₂ A₃\n⊢ Eq (⇑(e₁.trans e₂)) (Function.comp ⇑e₂ ⇑e₁)","decl":"@[simp]\ntheorem coe_trans (e₁ : A₁ ≃ₐ[R] A₂) (e₂ : A₂ ≃ₐ[R] A₃) : ⇑(e₁.trans e₂) = e₂ ∘ e₁ :=\n  rfl\n\n"}
{"name":"AlgEquiv.trans_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\nA₃ : Type uA₃\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A₁\ninst✝⁴ : Semiring A₂\ninst✝³ : Semiring A₃\ninst✝² : Algebra R A₁\ninst✝¹ : Algebra R A₂\ninst✝ : Algebra R A₃\ne₁ : AlgEquiv R A₁ A₂\ne₂ : AlgEquiv R A₂ A₃\nx : A₁\n⊢ Eq ((e₁.trans e₂) x) (e₂ (e₁ x))","decl":"@[simp]\ntheorem trans_apply (e₁ : A₁ ≃ₐ[R] A₂) (e₂ : A₂ ≃ₐ[R] A₃) (x : A₁) : (e₁.trans e₂) x = e₂ (e₁ x) :=\n  rfl\n\n"}
{"name":"AlgEquiv.symm_trans_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\nA₃ : Type uA₃\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A₁\ninst✝⁴ : Semiring A₂\ninst✝³ : Semiring A₃\ninst✝² : Algebra R A₁\ninst✝¹ : Algebra R A₂\ninst✝ : Algebra R A₃\ne₁ : AlgEquiv R A₁ A₂\ne₂ : AlgEquiv R A₂ A₃\nx : A₃\n⊢ Eq ((e₁.trans e₂).symm x) (e₁.symm (e₂.symm x))","decl":"@[simp]\ntheorem symm_trans_apply (e₁ : A₁ ≃ₐ[R] A₂) (e₂ : A₂ ≃ₐ[R] A₃) (x : A₃) :\n    (e₁.trans e₂).symm x = e₁.symm (e₂.symm x) :=\n  rfl\n\n"}
{"name":"AlgEquiv.arrowCongr_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\nA₁' : Type uA₁'\nA₂' : Type uA₂'\ninst✝⁸ : CommSemiring R\ninst✝⁷ : Semiring A₁\ninst✝⁶ : Semiring A₂\ninst✝⁵ : Semiring A₁'\ninst✝⁴ : Semiring A₂'\ninst✝³ : Algebra R A₁\ninst✝² : Algebra R A₂\ninst✝¹ : Algebra R A₁'\ninst✝ : Algebra R A₂'\ne₁ : AlgEquiv R A₁ A₁'\ne₂ : AlgEquiv R A₂ A₂'\nf : AlgHom R A₁ A₂\n⊢ Eq ((e₁.arrowCongr e₂) f) (((↑e₂).comp f).comp ↑e₁.symm)","decl":"/-- If `A₁` is equivalent to `A₁'` and `A₂` is equivalent to `A₂'`, then the type of maps\n`A₁ →ₐ[R] A₂` is equivalent to the type of maps `A₁' →ₐ[R] A₂'`. -/\n@[simps apply]\ndef arrowCongr (e₁ : A₁ ≃ₐ[R] A₁') (e₂ : A₂ ≃ₐ[R] A₂') : (A₁ →ₐ[R] A₂) ≃ (A₁' →ₐ[R] A₂') where\n  toFun f := (e₂.toAlgHom.comp f).comp e₁.symm.toAlgHom\n  invFun f := (e₂.symm.toAlgHom.comp f).comp e₁.toAlgHom\n  left_inv f := by\n    simp only [AlgHom.comp_assoc, toAlgHom_eq_coe, symm_comp]\n    simp only [← AlgHom.comp_assoc, symm_comp, AlgHom.id_comp, AlgHom.comp_id]\n  right_inv f := by\n    simp only [AlgHom.comp_assoc, toAlgHom_eq_coe, comp_symm]\n    simp only [← AlgHom.comp_assoc, comp_symm, AlgHom.id_comp, AlgHom.comp_id]\n\n"}
{"name":"AlgEquiv.arrowCongr_comp","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\nA₃ : Type uA₃\nA₁' : Type uA₁'\nA₂' : Type uA₂'\nA₃' : Type uA₃'\ninst✝¹² : CommSemiring R\ninst✝¹¹ : Semiring A₁\ninst✝¹⁰ : Semiring A₂\ninst✝⁹ : Semiring A₃\ninst✝⁸ : Semiring A₁'\ninst✝⁷ : Semiring A₂'\ninst✝⁶ : Semiring A₃'\ninst✝⁵ : Algebra R A₁\ninst✝⁴ : Algebra R A₂\ninst✝³ : Algebra R A₃\ninst✝² : Algebra R A₁'\ninst✝¹ : Algebra R A₂'\ninst✝ : Algebra R A₃'\ne₁ : AlgEquiv R A₁ A₁'\ne₂ : AlgEquiv R A₂ A₂'\ne₃ : AlgEquiv R A₃ A₃'\nf : AlgHom R A₁ A₂\ng : AlgHom R A₂ A₃\n⊢ Eq ((e₁.arrowCongr e₃) (g.comp f)) (((e₂.arrowCongr e₃) g).comp ((e₁.arrowCongr e₂) f))","decl":"theorem arrowCongr_comp (e₁ : A₁ ≃ₐ[R] A₁') (e₂ : A₂ ≃ₐ[R] A₂')\n    (e₃ : A₃ ≃ₐ[R] A₃') (f : A₁ →ₐ[R] A₂) (g : A₂ →ₐ[R] A₃) :\n    arrowCongr e₁ e₃ (g.comp f) = (arrowCongr e₂ e₃ g).comp (arrowCongr e₁ e₂ f) := by\n  ext\n  simp only [arrowCongr, Equiv.coe_fn_mk, AlgHom.comp_apply]\n  congr\n  exact (e₂.symm_apply_apply _).symm\n\n"}
{"name":"AlgEquiv.arrowCongr_refl","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\n⊢ Eq (AlgEquiv.refl.arrowCongr AlgEquiv.refl) (Equiv.refl (AlgHom R A₁ A₂))","decl":"@[simp]\ntheorem arrowCongr_refl : arrowCongr AlgEquiv.refl AlgEquiv.refl = Equiv.refl (A₁ →ₐ[R] A₂) :=\n  rfl\n\n"}
{"name":"AlgEquiv.arrowCongr_trans","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\nA₃ : Type uA₃\nA₁' : Type uA₁'\nA₂' : Type uA₂'\nA₃' : Type uA₃'\ninst✝¹² : CommSemiring R\ninst✝¹¹ : Semiring A₁\ninst✝¹⁰ : Semiring A₂\ninst✝⁹ : Semiring A₃\ninst✝⁸ : Semiring A₁'\ninst✝⁷ : Semiring A₂'\ninst✝⁶ : Semiring A₃'\ninst✝⁵ : Algebra R A₁\ninst✝⁴ : Algebra R A₂\ninst✝³ : Algebra R A₃\ninst✝² : Algebra R A₁'\ninst✝¹ : Algebra R A₂'\ninst✝ : Algebra R A₃'\ne₁ : AlgEquiv R A₁ A₂\ne₁' : AlgEquiv R A₁' A₂'\ne₂ : AlgEquiv R A₂ A₃\ne₂' : AlgEquiv R A₂' A₃'\n⊢ Eq ((e₁.trans e₂).arrowCongr (e₁'.trans e₂')) ((e₁.arrowCongr e₁').trans (e₂.arrowCongr e₂'))","decl":"@[simp]\ntheorem arrowCongr_trans (e₁ : A₁ ≃ₐ[R] A₂) (e₁' : A₁' ≃ₐ[R] A₂')\n    (e₂ : A₂ ≃ₐ[R] A₃) (e₂' : A₂' ≃ₐ[R] A₃') :\n    arrowCongr (e₁.trans e₂) (e₁'.trans e₂') = (arrowCongr e₁ e₁').trans (arrowCongr e₂ e₂') :=\n  rfl\n\n"}
{"name":"AlgEquiv.arrowCongr_symm","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\nA₁' : Type uA₁'\nA₂' : Type uA₂'\ninst✝⁸ : CommSemiring R\ninst✝⁷ : Semiring A₁\ninst✝⁶ : Semiring A₂\ninst✝⁵ : Semiring A₁'\ninst✝⁴ : Semiring A₂'\ninst✝³ : Algebra R A₁\ninst✝² : Algebra R A₂\ninst✝¹ : Algebra R A₁'\ninst✝ : Algebra R A₂'\ne₁ : AlgEquiv R A₁ A₁'\ne₂ : AlgEquiv R A₂ A₂'\n⊢ Eq (e₁.arrowCongr e₂).symm (e₁.symm.arrowCongr e₂.symm)","decl":"@[simp]\ntheorem arrowCongr_symm (e₁ : A₁ ≃ₐ[R] A₁') (e₂ : A₂ ≃ₐ[R] A₂') :\n    (arrowCongr e₁ e₂).symm = arrowCongr e₁.symm e₂.symm :=\n  rfl\n\n"}
{"name":"AlgEquiv.equivCongr_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\nA₁' : Type uA₁'\nA₂' : Type uA₂'\ninst✝⁸ : CommSemiring R\ninst✝⁷ : Semiring A₁\ninst✝⁶ : Semiring A₂\ninst✝⁵ : Semiring A₁'\ninst✝⁴ : Semiring A₂'\ninst✝³ : Algebra R A₁\ninst✝² : Algebra R A₂\ninst✝¹ : Algebra R A₁'\ninst✝ : Algebra R A₂'\ne : AlgEquiv R A₁ A₂\ne' : AlgEquiv R A₁' A₂'\nψ : AlgEquiv R A₁ A₁'\n⊢ Eq ((e.equivCongr e') ψ) (e.symm.trans (ψ.trans e'))","decl":"/-- If `A₁` is equivalent to `A₂` and `A₁'` is equivalent to `A₂'`, then the type of maps\n`A₁ ≃ₐ[R] A₁'` is equivalent to the type of maps `A₂ ≃ ₐ[R] A₂'`.\n\nThis is the `AlgEquiv` version of `AlgEquiv.arrowCongr`. -/\n@[simps apply]\ndef equivCongr (e : A₁ ≃ₐ[R] A₂) (e' : A₁' ≃ₐ[R] A₂') : (A₁ ≃ₐ[R] A₁') ≃ A₂ ≃ₐ[R] A₂' where\n  toFun ψ := e.symm.trans (ψ.trans e')\n  invFun ψ := e.trans (ψ.trans e'.symm)\n  left_inv ψ := by\n    ext\n    simp_rw [trans_apply, symm_apply_apply]\n  right_inv ψ := by\n    ext\n    simp_rw [trans_apply, apply_symm_apply]\n\n"}
{"name":"AlgEquiv.equivCongr_refl","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₁' : Type uA₁'\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₁'\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₁'\n⊢ Eq (AlgEquiv.refl.equivCongr AlgEquiv.refl) (Equiv.refl (AlgEquiv R A₁ A₁'))","decl":"@[simp]\ntheorem equivCongr_refl : equivCongr AlgEquiv.refl AlgEquiv.refl = Equiv.refl (A₁ ≃ₐ[R] A₁') :=\n  rfl\n\n"}
{"name":"AlgEquiv.equivCongr_symm","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\nA₁' : Type uA₁'\nA₂' : Type uA₂'\ninst✝⁸ : CommSemiring R\ninst✝⁷ : Semiring A₁\ninst✝⁶ : Semiring A₂\ninst✝⁵ : Semiring A₁'\ninst✝⁴ : Semiring A₂'\ninst✝³ : Algebra R A₁\ninst✝² : Algebra R A₂\ninst✝¹ : Algebra R A₁'\ninst✝ : Algebra R A₂'\ne : AlgEquiv R A₁ A₂\ne' : AlgEquiv R A₁' A₂'\n⊢ Eq (e.equivCongr e').symm (e.symm.equivCongr e'.symm)","decl":"@[simp]\ntheorem equivCongr_symm (e : A₁ ≃ₐ[R] A₂) (e' : A₁' ≃ₐ[R] A₂') :\n    (equivCongr e e').symm = equivCongr e.symm e'.symm :=\n  rfl\n\n"}
{"name":"AlgEquiv.equivCongr_trans","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\nA₃ : Type uA₃\nA₁' : Type uA₁'\nA₂' : Type uA₂'\nA₃' : Type uA₃'\ninst✝¹² : CommSemiring R\ninst✝¹¹ : Semiring A₁\ninst✝¹⁰ : Semiring A₂\ninst✝⁹ : Semiring A₃\ninst✝⁸ : Semiring A₁'\ninst✝⁷ : Semiring A₂'\ninst✝⁶ : Semiring A₃'\ninst✝⁵ : Algebra R A₁\ninst✝⁴ : Algebra R A₂\ninst✝³ : Algebra R A₃\ninst✝² : Algebra R A₁'\ninst✝¹ : Algebra R A₂'\ninst✝ : Algebra R A₃'\ne₁₂ : AlgEquiv R A₁ A₂\ne₁₂' : AlgEquiv R A₁' A₂'\ne₂₃ : AlgEquiv R A₂ A₃\ne₂₃' : AlgEquiv R A₂' A₃'\n⊢ Eq ((e₁₂.equivCongr e₁₂').trans (e₂₃.equivCongr e₂₃')) ((e₁₂.trans e₂₃).equivCongr (e₁₂'.trans e₂₃'))","decl":"@[simp]\ntheorem equivCongr_trans (e₁₂ : A₁ ≃ₐ[R] A₂) (e₁₂' : A₁' ≃ₐ[R] A₂')\n    (e₂₃ : A₂ ≃ₐ[R] A₃) (e₂₃' : A₂' ≃ₐ[R] A₃') :\n    (equivCongr e₁₂ e₁₂').trans (equivCongr e₂₃ e₂₃') =\n      equivCongr (e₁₂.trans e₂₃) (e₁₂'.trans e₂₃') :=\n  rfl\n\n"}
{"name":"AlgEquiv.ofAlgHom_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\nf : AlgHom R A₁ A₂\ng : AlgHom R A₂ A₁\nh₁ : Eq (f.comp g) (AlgHom.id R A₂)\nh₂ : Eq (g.comp f) (AlgHom.id R A₁)\na : A₁\n⊢ Eq ((AlgEquiv.ofAlgHom f g h₁ h₂) a) (f a)","decl":"/-- If an algebra morphism has an inverse, it is an algebra isomorphism. -/\n@[simps]\ndef ofAlgHom (f : A₁ →ₐ[R] A₂) (g : A₂ →ₐ[R] A₁) (h₁ : f.comp g = AlgHom.id R A₂)\n    (h₂ : g.comp f = AlgHom.id R A₁) : A₁ ≃ₐ[R] A₂ :=\n  { f with\n    toFun := f\n    invFun := g\n    left_inv := AlgHom.ext_iff.1 h₂\n    right_inv := AlgHom.ext_iff.1 h₁ }\n\n"}
{"name":"AlgEquiv.ofAlgHom_symm_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\nf : AlgHom R A₁ A₂\ng : AlgHom R A₂ A₁\nh₁ : Eq (f.comp g) (AlgHom.id R A₂)\nh₂ : Eq (g.comp f) (AlgHom.id R A₁)\na : A₂\n⊢ Eq ((AlgEquiv.ofAlgHom f g h₁ h₂).symm a) (g a)","decl":"/-- If an algebra morphism has an inverse, it is an algebra isomorphism. -/\n@[simps]\ndef ofAlgHom (f : A₁ →ₐ[R] A₂) (g : A₂ →ₐ[R] A₁) (h₁ : f.comp g = AlgHom.id R A₂)\n    (h₂ : g.comp f = AlgHom.id R A₁) : A₁ ≃ₐ[R] A₂ :=\n  { f with\n    toFun := f\n    invFun := g\n    left_inv := AlgHom.ext_iff.1 h₂\n    right_inv := AlgHom.ext_iff.1 h₁ }\n\n"}
{"name":"AlgEquiv.coe_algHom_ofAlgHom","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\nf : AlgHom R A₁ A₂\ng : AlgHom R A₂ A₁\nh₁ : Eq (f.comp g) (AlgHom.id R A₂)\nh₂ : Eq (g.comp f) (AlgHom.id R A₁)\n⊢ Eq (↑(AlgEquiv.ofAlgHom f g h₁ h₂)) f","decl":"theorem coe_algHom_ofAlgHom (f : A₁ →ₐ[R] A₂) (g : A₂ →ₐ[R] A₁) (h₁ h₂) :\n    ↑(ofAlgHom f g h₁ h₂) = f :=\n  rfl\n\n"}
{"name":"AlgEquiv.ofAlgHom_coe_algHom","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\nf : AlgEquiv R A₁ A₂\ng : AlgHom R A₂ A₁\nh₁ : Eq ((↑f).comp g) (AlgHom.id R A₂)\nh₂ : Eq (g.comp ↑f) (AlgHom.id R A₁)\n⊢ Eq (AlgEquiv.ofAlgHom (↑f) g h₁ h₂) f","decl":"@[simp]\ntheorem ofAlgHom_coe_algHom (f : A₁ ≃ₐ[R] A₂) (g : A₂ →ₐ[R] A₁) (h₁ h₂) :\n    ofAlgHom (↑f) g h₁ h₂ = f :=\n  ext fun _ => rfl\n\n"}
{"name":"AlgEquiv.ofAlgHom_symm","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\nf : AlgHom R A₁ A₂\ng : AlgHom R A₂ A₁\nh₁ : Eq (f.comp g) (AlgHom.id R A₂)\nh₂ : Eq (g.comp f) (AlgHom.id R A₁)\n⊢ Eq (AlgEquiv.ofAlgHom f g h₁ h₂).symm (AlgEquiv.ofAlgHom g f h₂ h₁)","decl":"theorem ofAlgHom_symm (f : A₁ →ₐ[R] A₂) (g : A₂ →ₐ[R] A₁) (h₁ h₂) :\n    (ofAlgHom f g h₁ h₂).symm = ofAlgHom g f h₂ h₁ :=\n  rfl\n\n"}
{"name":"AlgEquiv.coe_ofBijective","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\nf : AlgHom R A₁ A₂\nhf : Function.Bijective ⇑f\n⊢ Eq ⇑(AlgEquiv.ofBijective f hf) ⇑f","decl":"@[simp]\ntheorem coe_ofBijective {f : A₁ →ₐ[R] A₂} {hf : Function.Bijective f} :\n    (AlgEquiv.ofBijective f hf : A₁ → A₂) = f :=\n  rfl\n\n"}
{"name":"AlgEquiv.ofBijective_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\nf : AlgHom R A₁ A₂\nhf : Function.Bijective ⇑f\na : A₁\n⊢ Eq ((AlgEquiv.ofBijective f hf) a) (f a)","decl":"theorem ofBijective_apply {f : A₁ →ₐ[R] A₂} {hf : Function.Bijective f} (a : A₁) :\n    (AlgEquiv.ofBijective f hf) a = f a :=\n  rfl\n\n"}
{"name":"AlgEquiv.toLinearEquiv_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\na : A₁\n⊢ Eq (e.toLinearEquiv a) (e a)","decl":"/-- Forgetting the multiplicative structures, an equivalence of algebras is a linear equivalence. -/\n@[simps apply]\ndef toLinearEquiv (e : A₁ ≃ₐ[R] A₂) : A₁ ≃ₗ[R] A₂ :=\n  { e with\n    toFun := e\n    map_smul' := map_smul e\n    invFun := e.symm }\n\n"}
{"name":"AlgEquiv.toLinearEquiv_refl","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A₁\ninst✝ : Algebra R A₁\n⊢ Eq AlgEquiv.refl.toLinearEquiv (LinearEquiv.refl R A₁)","decl":"@[simp]\ntheorem toLinearEquiv_refl : (AlgEquiv.refl : A₁ ≃ₐ[R] A₁).toLinearEquiv = LinearEquiv.refl R A₁ :=\n  rfl\n\n"}
{"name":"AlgEquiv.toLinearEquiv_symm","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Eq e.toLinearEquiv.symm e.symm.toLinearEquiv","decl":"@[simp]\ntheorem toLinearEquiv_symm (e : A₁ ≃ₐ[R] A₂) : e.toLinearEquiv.symm = e.symm.toLinearEquiv :=\n  rfl\n\n"}
{"name":"AlgEquiv.toLinearEquiv_trans","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\nA₃ : Type uA₃\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A₁\ninst✝⁴ : Semiring A₂\ninst✝³ : Semiring A₃\ninst✝² : Algebra R A₁\ninst✝¹ : Algebra R A₂\ninst✝ : Algebra R A₃\ne₁ : AlgEquiv R A₁ A₂\ne₂ : AlgEquiv R A₂ A₃\n⊢ Eq (e₁.trans e₂).toLinearEquiv (e₁.toLinearEquiv.trans e₂.toLinearEquiv)","decl":"@[simp]\ntheorem toLinearEquiv_trans (e₁ : A₁ ≃ₐ[R] A₂) (e₂ : A₂ ≃ₐ[R] A₃) :\n    (e₁.trans e₂).toLinearEquiv = e₁.toLinearEquiv.trans e₂.toLinearEquiv :=\n  rfl\n\n"}
{"name":"AlgEquiv.toLinearEquiv_injective","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\n⊢ Function.Injective AlgEquiv.toLinearEquiv","decl":"theorem toLinearEquiv_injective : Function.Injective (toLinearEquiv : _ → A₁ ≃ₗ[R] A₂) :=\n  fun _ _ h => ext <| LinearEquiv.congr_fun h\n\n"}
{"name":"AlgEquiv.toAlgHom_toLinearMap","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Eq (↑e).toLinearMap e.toLinearMap","decl":"@[simp]\ntheorem toAlgHom_toLinearMap : (e : A₁ →ₐ[R] A₂).toLinearMap = e.toLinearMap :=\n  rfl\n\n"}
{"name":"AlgEquiv.toLinearMap_ofAlgHom","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\nf : AlgHom R A₁ A₂\ng : AlgHom R A₂ A₁\nh₁ : Eq (f.comp g) (AlgHom.id R A₂)\nh₂ : Eq (g.comp f) (AlgHom.id R A₁)\n⊢ Eq (AlgEquiv.ofAlgHom f g h₁ h₂).toLinearMap f.toLinearMap","decl":"theorem toLinearMap_ofAlgHom (f : A₁ →ₐ[R] A₂) (g : A₂ →ₐ[R] A₁) (h₁ h₂) :\n    (ofAlgHom f g h₁ h₂).toLinearMap = f.toLinearMap :=\n  LinearMap.ext fun _ => rfl\n\n"}
{"name":"AlgEquiv.toLinearEquiv_toLinearMap","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\n⊢ Eq (↑e.toLinearEquiv) e.toLinearMap","decl":"@[simp]\ntheorem toLinearEquiv_toLinearMap : e.toLinearEquiv.toLinearMap = e.toLinearMap :=\n  rfl\n\n"}
{"name":"AlgEquiv.toLinearMap_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\nx : A₁\n⊢ Eq (e.toLinearMap x) (e x)","decl":"@[simp]\ntheorem toLinearMap_apply (x : A₁) : e.toLinearMap x = e x :=\n  rfl\n\n"}
{"name":"AlgEquiv.toLinearMap_injective","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\n⊢ Function.Injective AlgEquiv.toLinearMap","decl":"theorem toLinearMap_injective : Function.Injective (toLinearMap : _ → A₁ →ₗ[R] A₂) := fun _ _ h =>\n  ext <| LinearMap.congr_fun h\n\n"}
{"name":"AlgEquiv.trans_toLinearMap","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\nA₃ : Type uA₃\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A₁\ninst✝⁴ : Semiring A₂\ninst✝³ : Semiring A₃\ninst✝² : Algebra R A₁\ninst✝¹ : Algebra R A₂\ninst✝ : Algebra R A₃\nf : AlgEquiv R A₁ A₂\ng : AlgEquiv R A₂ A₃\n⊢ Eq (f.trans g).toLinearMap (g.toLinearMap.comp f.toLinearMap)","decl":"@[simp]\ntheorem trans_toLinearMap (f : A₁ ≃ₐ[R] A₂) (g : A₂ ≃ₐ[R] A₃) :\n    (f.trans g).toLinearMap = g.toLinearMap.comp f.toLinearMap :=\n  rfl\n\n"}
{"name":"AlgEquiv.ofLinearEquiv_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\nl : LinearEquiv (RingHom.id R) A₁ A₂\nmap_one : Eq (l 1) 1\nmap_mul : ∀ (x y : A₁), Eq (l (HMul.hMul x y)) (HMul.hMul (l x) (l y))\na : A₁\n⊢ Eq ((AlgEquiv.ofLinearEquiv l map_one map_mul) a) (l a)","decl":"/--\nUpgrade a linear equivalence to an algebra equivalence,\ngiven that it distributes over multiplication and the identity\n-/\n@[simps apply]\ndef ofLinearEquiv : A₁ ≃ₐ[R] A₂ :=\n  { l with\n    toFun := l\n    invFun := l.symm\n    map_mul' := map_mul\n    commutes' := (AlgHom.ofLinearMap l map_one map_mul : A₁ →ₐ[R] A₂).commutes }\n\n"}
{"name":"AlgEquiv.ofLinearEquiv_symm","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\nl : LinearEquiv (RingHom.id R) A₁ A₂\nmap_one : Eq (l 1) 1\nmap_mul : ∀ (x y : A₁), Eq (l (HMul.hMul x y)) (HMul.hMul (l x) (l y))\n⊢ Eq (AlgEquiv.ofLinearEquiv l map_one map_mul).symm (AlgEquiv.ofLinearEquiv l.symm ⋯ ⋯)","decl":"@[simp]\ntheorem ofLinearEquiv_symm :\n    (ofLinearEquiv l map_one map_mul).symm =\n      ofLinearEquiv l.symm\n        (_root_.map_one <| ofLinearEquiv_symm.aux l map_one map_mul)\n        (_root_.map_mul <| ofLinearEquiv_symm.aux l map_one map_mul) :=\n  rfl\n\n"}
{"name":"AlgEquiv.ofLinearEquiv_toLinearEquiv","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\nmap_mul : Eq (e.toLinearEquiv 1) 1\nmap_one : ∀ (x y : A₁), Eq (e.toLinearEquiv (HMul.hMul x y)) (HMul.hMul (e.toLinearEquiv x) (e.toLinearEquiv y))\n⊢ Eq (AlgEquiv.ofLinearEquiv e.toLinearEquiv map_mul map_one) e","decl":"@[simp]\ntheorem ofLinearEquiv_toLinearEquiv (map_mul) (map_one) :\n    ofLinearEquiv e.toLinearEquiv map_mul map_one = e :=\n  rfl\n\n"}
{"name":"AlgEquiv.toLinearEquiv_ofLinearEquiv","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\nl : LinearEquiv (RingHom.id R) A₁ A₂\nmap_one : Eq (l 1) 1\nmap_mul : ∀ (x y : A₁), Eq (l (HMul.hMul x y)) (HMul.hMul (l x) (l y))\n⊢ Eq (AlgEquiv.ofLinearEquiv l map_one map_mul).toLinearEquiv l","decl":"@[simp]\ntheorem toLinearEquiv_ofLinearEquiv : toLinearEquiv (ofLinearEquiv l map_one map_mul) = l :=\n  rfl\n\n"}
{"name":"AlgEquiv.ofRingEquiv_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\nf : RingEquiv A₁ A₂\nhf : ∀ (x : R), Eq (f ((algebraMap R A₁) x)) ((algebraMap R A₂) x)\na : A₁\n⊢ Eq ((AlgEquiv.ofRingEquiv hf) a) (f a)","decl":"/-- Promotes a linear `RingEquiv` to an `AlgEquiv`. -/\n@[simps apply symm_apply toEquiv]\ndef ofRingEquiv {f : A₁ ≃+* A₂} (hf : ∀ x, f (algebraMap R A₁ x) = algebraMap R A₂ x) :\n    A₁ ≃ₐ[R] A₂ :=\n  { f with\n    toFun := f\n    invFun := f.symm\n    commutes' := hf }\n\n"}
{"name":"AlgEquiv.ofRingEquiv_toEquiv","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\nf : RingEquiv A₁ A₂\nhf : ∀ (x : R), Eq (f ((algebraMap R A₁) x)) ((algebraMap R A₂) x)\n⊢ Eq ↑(AlgEquiv.ofRingEquiv hf) { toFun := ⇑f, invFun := ⇑f.symm, left_inv := ⋯, right_inv := ⋯ }","decl":"/-- Promotes a linear `RingEquiv` to an `AlgEquiv`. -/\n@[simps apply symm_apply toEquiv]\ndef ofRingEquiv {f : A₁ ≃+* A₂} (hf : ∀ x, f (algebraMap R A₁ x) = algebraMap R A₂ x) :\n    A₁ ≃ₐ[R] A₂ :=\n  { f with\n    toFun := f\n    invFun := f.symm\n    commutes' := hf }\n\n"}
{"name":"AlgEquiv.ofRingEquiv_symm_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\nf : RingEquiv A₁ A₂\nhf : ∀ (x : R), Eq (f ((algebraMap R A₁) x)) ((algebraMap R A₂) x)\na : A₂\n⊢ Eq ((AlgEquiv.ofRingEquiv hf).symm a) (f.symm a)","decl":"/-- Promotes a linear `RingEquiv` to an `AlgEquiv`. -/\n@[simps apply symm_apply toEquiv]\ndef ofRingEquiv {f : A₁ ≃+* A₂} (hf : ∀ x, f (algebraMap R A₁ x) = algebraMap R A₂ x) :\n    A₁ ≃ₐ[R] A₂ :=\n  { f with\n    toFun := f\n    invFun := f.symm\n    commutes' := hf }\n\n"}
{"name":"AlgEquiv.aut_one","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A₁\ninst✝ : Algebra R A₁\n⊢ Eq 1 AlgEquiv.refl","decl":"@[simps (config := .lemmasOnly) one mul, stacks 09HR]\ninstance aut : Group (A₁ ≃ₐ[R] A₁) where\n  mul ϕ ψ := ψ.trans ϕ\n  mul_assoc _ _ _ := rfl\n  one := refl\n  one_mul _ := ext fun _ => rfl\n  mul_one _ := ext fun _ => rfl\n  inv := symm\n  inv_mul_cancel ϕ := ext <| symm_apply_apply ϕ\n\n"}
{"name":"AlgEquiv.aut_mul","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A₁\ninst✝ : Algebra R A₁\nϕ ψ : AlgEquiv R A₁ A₁\n⊢ Eq (HMul.hMul ϕ ψ) (ψ.trans ϕ)","decl":"@[simps (config := .lemmasOnly) one mul, stacks 09HR]\ninstance aut : Group (A₁ ≃ₐ[R] A₁) where\n  mul ϕ ψ := ψ.trans ϕ\n  mul_assoc _ _ _ := rfl\n  one := refl\n  one_mul _ := ext fun _ => rfl\n  mul_one _ := ext fun _ => rfl\n  inv := symm\n  inv_mul_cancel ϕ := ext <| symm_apply_apply ϕ\n\n"}
{"name":"AlgEquiv.one_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A₁\ninst✝ : Algebra R A₁\nx : A₁\n⊢ Eq (1 x) x","decl":"@[simp]\ntheorem one_apply (x : A₁) : (1 : A₁ ≃ₐ[R] A₁) x = x :=\n  rfl\n\n"}
{"name":"AlgEquiv.mul_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A₁\ninst✝ : Algebra R A₁\ne₁ e₂ : AlgEquiv R A₁ A₁\nx : A₁\n⊢ Eq ((HMul.hMul e₁ e₂) x) (e₁ (e₂ x))","decl":"@[simp]\ntheorem mul_apply (e₁ e₂ : A₁ ≃ₐ[R] A₁) (x : A₁) : (e₁ * e₂) x = e₁ (e₂ x) :=\n  rfl\n\n"}
{"name":"AlgEquiv.autCongr_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\nϕ : AlgEquiv R A₁ A₂\nψ : AlgEquiv R A₁ A₁\n⊢ Eq (ϕ.autCongr ψ) (ϕ.symm.trans (ψ.trans ϕ))","decl":"/-- An algebra isomorphism induces a group isomorphism between automorphism groups.\n\nThis is a more bundled version of `AlgEquiv.equivCongr`. -/\n@[simps apply]\ndef autCongr (ϕ : A₁ ≃ₐ[R] A₂) : (A₁ ≃ₐ[R] A₁) ≃* A₂ ≃ₐ[R] A₂ where\n  __ := equivCongr ϕ ϕ\n  toFun ψ := ϕ.symm.trans (ψ.trans ϕ)\n  invFun ψ := ϕ.trans (ψ.trans ϕ.symm)\n  map_mul' ψ χ := by\n    ext\n    simp only [mul_apply, trans_apply, symm_apply_apply]\n\n"}
{"name":"AlgEquiv.autCongr_refl","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A₁\ninst✝ : Algebra R A₁\n⊢ Eq AlgEquiv.refl.autCongr (MulEquiv.refl (AlgEquiv R A₁ A₁))","decl":"@[simp]\ntheorem autCongr_refl : autCongr AlgEquiv.refl = MulEquiv.refl (A₁ ≃ₐ[R] A₁) := rfl\n\n"}
{"name":"AlgEquiv.autCongr_symm","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\nϕ : AlgEquiv R A₁ A₂\n⊢ Eq ϕ.autCongr.symm ϕ.symm.autCongr","decl":"@[simp]\ntheorem autCongr_symm (ϕ : A₁ ≃ₐ[R] A₂) : (autCongr ϕ).symm = autCongr ϕ.symm :=\n  rfl\n\n"}
{"name":"AlgEquiv.autCongr_trans","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\nA₃ : Type uA₃\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A₁\ninst✝⁴ : Semiring A₂\ninst✝³ : Semiring A₃\ninst✝² : Algebra R A₁\ninst✝¹ : Algebra R A₂\ninst✝ : Algebra R A₃\nϕ : AlgEquiv R A₁ A₂\nψ : AlgEquiv R A₂ A₃\n⊢ Eq (ϕ.autCongr.trans ψ.autCongr) (ϕ.trans ψ).autCongr","decl":"@[simp]\ntheorem autCongr_trans (ϕ : A₁ ≃ₐ[R] A₂) (ψ : A₂ ≃ₐ[R] A₃) :\n    (autCongr ϕ).trans (autCongr ψ) = autCongr (ϕ.trans ψ) :=\n  rfl\n\n"}
{"name":"AlgEquiv.smul_def","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A₁\ninst✝ : Algebra R A₁\nf : AlgEquiv R A₁ A₁\na : A₁\n⊢ Eq (HSMul.hSMul f a) (f a)","decl":"@[simp]\nprotected theorem smul_def (f : A₁ ≃ₐ[R] A₁) (a : A₁) : f • a = f a :=\n  rfl\n\n"}
{"name":"AlgEquiv.apply_faithfulSMul","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A₁\ninst✝ : Algebra R A₁\n⊢ FaithfulSMul (AlgEquiv R A₁ A₁) A₁","decl":"instance apply_faithfulSMul : FaithfulSMul (A₁ ≃ₐ[R] A₁) A₁ :=\n  ⟨AlgEquiv.ext⟩\n\n"}
{"name":"AlgEquiv.apply_smulCommClass","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A₁\ninst✝³ : Algebra R A₁\nS : Type u_1\ninst✝² : SMul S R\ninst✝¹ : SMul S A₁\ninst✝ : IsScalarTower S R A₁\n⊢ SMulCommClass S (AlgEquiv R A₁ A₁) A₁","decl":"instance apply_smulCommClass {S} [SMul S R] [SMul S A₁] [IsScalarTower S R A₁] :\n    SMulCommClass S (A₁ ≃ₐ[R] A₁) A₁ where\n  smul_comm r e a := (e.toLinearEquiv.map_smul_of_tower r a).symm\n\n"}
{"name":"AlgEquiv.apply_smulCommClass'","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A₁\ninst✝³ : Algebra R A₁\nS : Type u_1\ninst✝² : SMul S R\ninst✝¹ : SMul S A₁\ninst✝ : IsScalarTower S R A₁\n⊢ SMulCommClass (AlgEquiv R A₁ A₁) S A₁","decl":"instance apply_smulCommClass' {S} [SMul S R] [SMul S A₁] [IsScalarTower S R A₁] :\n    SMulCommClass (A₁ ≃ₐ[R] A₁) S A₁ :=\n  SMulCommClass.symm _ _ _\n\n"}
{"name":"AlgEquiv.smul_units_def","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A₁\ninst✝ : Algebra R A₁\nf : AlgEquiv R A₁ A₁\nx : Units A₁\n⊢ Eq (HSMul.hSMul f x) ((Units.map ↑f) x)","decl":"@[simp]\ntheorem smul_units_def (f : A₁ ≃ₐ[R] A₁) (x : A₁ˣ) :\n    f • x = Units.map f x := rfl\n\n"}
{"name":"AlgEquiv.algebraMap_eq_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A₁\ninst✝² : Semiring A₂\ninst✝¹ : Algebra R A₁\ninst✝ : Algebra R A₂\ne : AlgEquiv R A₁ A₂\ny : R\nx : A₁\n⊢ Iff (Eq ((algebraMap R A₂) y) (e x)) (Eq ((algebraMap R A₁) y) x)","decl":"@[simp]\ntheorem algebraMap_eq_apply (e : A₁ ≃ₐ[R] A₂) {y : R} {x : A₁} :\n    algebraMap R A₂ y = e x ↔ algebraMap R A₁ y = x :=\n  ⟨fun h => by simpa using e.symm.toAlgHom.algebraMap_eq_apply h, fun h =>\n    e.toAlgHom.algebraMap_eq_apply h⟩\n\n"}
{"name":"AlgEquiv.toLinearMapHom_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\ne : AlgEquiv R A A\n⊢ Eq ((AlgEquiv.toLinearMapHom R A) e) e.toLinearMap","decl":"/-- `AlgEquiv.toLinearMap` as a `MonoidHom`. -/\n@[simps]\ndef toLinearMapHom (R A) [CommSemiring R] [Semiring A] [Algebra R A] :\n    (A ≃ₐ[R] A) →* A →ₗ[R] A where\n  toFun := AlgEquiv.toLinearMap\n  map_one' := rfl\n  map_mul' := fun _ _ ↦ rfl\n\n"}
{"name":"AlgEquiv.pow_toLinearMap","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A₁\ninst✝ : Algebra R A₁\nσ : AlgEquiv R A₁ A₁\nn : Nat\n⊢ Eq (HPow.hPow σ n).toLinearMap (HPow.hPow σ.toLinearMap n)","decl":"lemma pow_toLinearMap (σ : A₁ ≃ₐ[R] A₁) (n : ℕ) :\n    (σ ^ n).toLinearMap = σ.toLinearMap ^ n :=\n  (AlgEquiv.toLinearMapHom R A₁).map_pow σ n\n\n"}
{"name":"AlgEquiv.one_toLinearMap","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A₁\ninst✝ : Algebra R A₁\n⊢ Eq (AlgEquiv.toLinearMap 1) 1","decl":"@[simp]\nlemma one_toLinearMap :\n    (1 : A₁ ≃ₐ[R] A₁).toLinearMap = 1 := rfl\n\n"}
{"name":"AlgEquiv.algHomUnitsEquiv_apply_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : Semiring S\ninst✝ : Algebra R S\nf : Units (AlgHom R S S)\na✝ : S\n⊢ Eq (((AlgEquiv.algHomUnitsEquiv R S) f) a✝) ((↑↑(↑f).toRingHom).toFun a✝)","decl":"/-- The units group of `S →ₐ[R] S` is `S ≃ₐ[R] S`.\nSee `LinearMap.GeneralLinearGroup.generalLinearEquiv` for the linear map version. -/\n@[simps]\ndef algHomUnitsEquiv (R S : Type*) [CommSemiring R] [Semiring S] [Algebra R S] :\n    (S →ₐ[R] S)ˣ ≃* (S ≃ₐ[R] S) where\n  toFun := fun f ↦\n    { (f : S →ₐ[R] S) with\n      invFun := ↑(f⁻¹)\n      left_inv := (fun x ↦ show (↑(f⁻¹ * f) : S →ₐ[R] S) x = x by rw [inv_mul_cancel]; rfl)\n      right_inv := (fun x ↦ show (↑(f * f⁻¹) : S →ₐ[R] S) x = x by rw [mul_inv_cancel]; rfl) }\n  invFun := fun f ↦ ⟨f, f.symm, f.comp_symm, f.symm_comp⟩\n  left_inv := fun _ ↦ rfl\n  right_inv := fun _ ↦ rfl\n  map_mul' := fun _ _ ↦ rfl\n\n"}
{"name":"AlgEquiv.val_algHomUnitsEquiv_symm_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : Semiring S\ninst✝ : Algebra R S\nf : AlgEquiv R S S\n⊢ Eq ↑((AlgEquiv.algHomUnitsEquiv R S).symm f) ↑f","decl":"/-- The units group of `S →ₐ[R] S` is `S ≃ₐ[R] S`.\nSee `LinearMap.GeneralLinearGroup.generalLinearEquiv` for the linear map version. -/\n@[simps]\ndef algHomUnitsEquiv (R S : Type*) [CommSemiring R] [Semiring S] [Algebra R S] :\n    (S →ₐ[R] S)ˣ ≃* (S ≃ₐ[R] S) where\n  toFun := fun f ↦\n    { (f : S →ₐ[R] S) with\n      invFun := ↑(f⁻¹)\n      left_inv := (fun x ↦ show (↑(f⁻¹ * f) : S →ₐ[R] S) x = x by rw [inv_mul_cancel]; rfl)\n      right_inv := (fun x ↦ show (↑(f * f⁻¹) : S →ₐ[R] S) x = x by rw [mul_inv_cancel]; rfl) }\n  invFun := fun f ↦ ⟨f, f.symm, f.comp_symm, f.symm_comp⟩\n  left_inv := fun _ ↦ rfl\n  right_inv := fun _ ↦ rfl\n  map_mul' := fun _ _ ↦ rfl\n\n"}
{"name":"AlgEquiv.val_inv_algHomUnitsEquiv_symm_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : Semiring S\ninst✝ : Algebra R S\nf : AlgEquiv R S S\n⊢ Eq ↑(Inv.inv ((AlgEquiv.algHomUnitsEquiv R S).symm f)) ↑f.symm","decl":"/-- The units group of `S →ₐ[R] S` is `S ≃ₐ[R] S`.\nSee `LinearMap.GeneralLinearGroup.generalLinearEquiv` for the linear map version. -/\n@[simps]\ndef algHomUnitsEquiv (R S : Type*) [CommSemiring R] [Semiring S] [Algebra R S] :\n    (S →ₐ[R] S)ˣ ≃* (S ≃ₐ[R] S) where\n  toFun := fun f ↦\n    { (f : S →ₐ[R] S) with\n      invFun := ↑(f⁻¹)\n      left_inv := (fun x ↦ show (↑(f⁻¹ * f) : S →ₐ[R] S) x = x by rw [inv_mul_cancel]; rfl)\n      right_inv := (fun x ↦ show (↑(f * f⁻¹) : S →ₐ[R] S) x = x by rw [mul_inv_cancel]; rfl) }\n  invFun := fun f ↦ ⟨f, f.symm, f.comp_symm, f.symm_comp⟩\n  left_inv := fun _ ↦ rfl\n  right_inv := fun _ ↦ rfl\n  map_mul' := fun _ _ ↦ rfl\n\n"}
{"name":"AlgEquiv.algHomUnitsEquiv_apply_symm_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : Semiring S\ninst✝ : Algebra R S\nf : Units (AlgHom R S S)\na : S\n⊢ Eq (((AlgEquiv.algHomUnitsEquiv R S) f).symm a) (↑↑(Inv.inv f) a)","decl":"/-- The units group of `S →ₐ[R] S` is `S ≃ₐ[R] S`.\nSee `LinearMap.GeneralLinearGroup.generalLinearEquiv` for the linear map version. -/\n@[simps]\ndef algHomUnitsEquiv (R S : Type*) [CommSemiring R] [Semiring S] [Algebra R S] :\n    (S →ₐ[R] S)ˣ ≃* (S ≃ₐ[R] S) where\n  toFun := fun f ↦\n    { (f : S →ₐ[R] S) with\n      invFun := ↑(f⁻¹)\n      left_inv := (fun x ↦ show (↑(f⁻¹ * f) : S →ₐ[R] S) x = x by rw [inv_mul_cancel]; rfl)\n      right_inv := (fun x ↦ show (↑(f * f⁻¹) : S →ₐ[R] S) x = x by rw [mul_inv_cancel]; rfl) }\n  invFun := fun f ↦ ⟨f, f.symm, f.comp_symm, f.symm_comp⟩\n  left_inv := fun _ ↦ rfl\n  right_inv := fun _ ↦ rfl\n  map_mul' := fun _ _ ↦ rfl\n\n"}
{"name":"Finite.algEquiv","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"R : Type uR\nA₁ : Type uA₁\nA₂ : Type uA₂\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A₁\ninst✝³ : Semiring A₂\ninst✝² : Algebra R A₁\ninst✝¹ : Algebra R A₂\ninst✝ : Finite (AlgHom R A₁ A₂)\n⊢ Finite (AlgEquiv R A₁ A₂)","decl":"/-- See also `Finite.algHom` -/\ninstance _root_.Finite.algEquiv [Finite (A₁ →ₐ[R] A₂)] : Finite (A₁ ≃ₐ[R] A₂) :=\n  Finite.of_injective _ AlgEquiv.coe_algHom_injective\n\n"}
{"name":"MulSemiringAction.toAlgEquiv_toEquiv","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"G : Type u_2\nR : Type u_3\nA : Type u_4\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\ninst✝² : Group G\ninst✝¹ : MulSemiringAction G A\ninst✝ : SMulCommClass G R A\ng : G\n⊢ Eq ↑(MulSemiringAction.toAlgEquiv R A g) ↑(MulSemiringAction.toRingEquiv G A g)","decl":"/-- Each element of the group defines an algebra equivalence.\n\nThis is a stronger version of `MulSemiringAction.toRingEquiv` and\n`DistribMulAction.toLinearEquiv`. -/\n@[simps! apply symm_apply toEquiv]\ndef toAlgEquiv (g : G) : A ≃ₐ[R] A :=\n  { MulSemiringAction.toRingEquiv _ _ g, MulSemiringAction.toAlgHom R A g with }\n\n"}
{"name":"MulSemiringAction.toAlgEquiv_symm_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"G : Type u_2\nR : Type u_3\nA : Type u_4\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\ninst✝² : Group G\ninst✝¹ : MulSemiringAction G A\ninst✝ : SMulCommClass G R A\ng : G\na✝ : A\n⊢ Eq ((MulSemiringAction.toAlgEquiv R A g).symm a✝) (HSMul.hSMul (Inv.inv g) a✝)","decl":"/-- Each element of the group defines an algebra equivalence.\n\nThis is a stronger version of `MulSemiringAction.toRingEquiv` and\n`DistribMulAction.toLinearEquiv`. -/\n@[simps! apply symm_apply toEquiv]\ndef toAlgEquiv (g : G) : A ≃ₐ[R] A :=\n  { MulSemiringAction.toRingEquiv _ _ g, MulSemiringAction.toAlgHom R A g with }\n\n"}
{"name":"MulSemiringAction.toAlgEquiv_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"G : Type u_2\nR : Type u_3\nA : Type u_4\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\ninst✝² : Group G\ninst✝¹ : MulSemiringAction G A\ninst✝ : SMulCommClass G R A\ng : G\na✝ : A\n⊢ Eq ((MulSemiringAction.toAlgEquiv R A g) a✝) (HSMul.hSMul g a✝)","decl":"/-- Each element of the group defines an algebra equivalence.\n\nThis is a stronger version of `MulSemiringAction.toRingEquiv` and\n`DistribMulAction.toLinearEquiv`. -/\n@[simps! apply symm_apply toEquiv]\ndef toAlgEquiv (g : G) : A ≃ₐ[R] A :=\n  { MulSemiringAction.toRingEquiv _ _ g, MulSemiringAction.toAlgHom R A g with }\n\n"}
{"name":"MulSemiringAction.toAlgEquiv_injective","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"G : Type u_2\nR : Type u_3\nA : Type u_4\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Algebra R A\ninst✝³ : Group G\ninst✝² : MulSemiringAction G A\ninst✝¹ : SMulCommClass G R A\ninst✝ : FaithfulSMul G A\n⊢ Function.Injective (MulSemiringAction.toAlgEquiv R A)","decl":"theorem toAlgEquiv_injective [FaithfulSMul G A] :\n    Function.Injective (MulSemiringAction.toAlgEquiv R A : G → A ≃ₐ[R] A) := fun _ _ h =>\n  eq_of_smul_eq_smul fun r => AlgEquiv.ext_iff.1 h r\n\n"}
{"name":"MulSemiringAction.toAlgAut_apply","module":"Mathlib.Algebra.Algebra.Equiv","initialProofState":"G : Type u_2\nR : Type u_3\nA : Type u_4\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\ninst✝² : Group G\ninst✝¹ : MulSemiringAction G A\ninst✝ : SMulCommClass G R A\ng : G\n⊢ Eq ((MulSemiringAction.toAlgAut G R A) g) (MulSemiringAction.toAlgEquiv R A g)","decl":"/-- Each element of the group defines an algebra equivalence.\n\nThis is a stronger version of `MulSemiringAction.toRingAut` and\n`DistribMulAction.toModuleEnd`. -/\n@[simps]\ndef toAlgAut : G →* A ≃ₐ[R] A where\n  toFun := toAlgEquiv R A\n  map_one' := AlgEquiv.ext <| one_smul _\n  map_mul' g h := AlgEquiv.ext <| mul_smul g h\n\n"}
