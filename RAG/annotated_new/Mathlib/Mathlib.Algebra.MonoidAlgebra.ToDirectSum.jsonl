{"name":"AddMonoidAlgebra.toDirectSum_single","module":"Mathlib.Algebra.MonoidAlgebra.ToDirectSum","initialProofState":"ι : Type u_1\nM : Type u_3\ninst✝¹ : DecidableEq ι\ninst✝ : Semiring M\ni : ι\nm : M\n⊢ Eq (AddMonoidAlgebra.toDirectSum (Finsupp.single i m)) ((DirectSum.of (fun i => M) i) m)","decl":"@[simp]\ntheorem AddMonoidAlgebra.toDirectSum_single (i : ι) (m : M) :\n    AddMonoidAlgebra.toDirectSum (Finsupp.single i m) = DirectSum.of _ i m :=\n  Finsupp.toDFinsupp_single i m\n\n"}
{"name":"DirectSum.toAddMonoidAlgebra_of","module":"Mathlib.Algebra.MonoidAlgebra.ToDirectSum","initialProofState":"ι : Type u_1\nM : Type u_3\ninst✝² : DecidableEq ι\ninst✝¹ : Semiring M\ninst✝ : (m : M) → Decidable (Ne m 0)\ni : ι\nm : M\n⊢ Eq ((DirectSum.of (fun x => M) i) m).toAddMonoidAlgebra (Finsupp.single i m)","decl":"@[simp]\ntheorem DirectSum.toAddMonoidAlgebra_of (i : ι) (m : M) :\n    (DirectSum.of _ i m : ⨁ _ : ι, M).toAddMonoidAlgebra = Finsupp.single i m :=\n  DFinsupp.toFinsupp_single i m\n\n"}
{"name":"AddMonoidAlgebra.toDirectSum_toAddMonoidAlgebra","module":"Mathlib.Algebra.MonoidAlgebra.ToDirectSum","initialProofState":"ι : Type u_1\nM : Type u_3\ninst✝² : DecidableEq ι\ninst✝¹ : Semiring M\ninst✝ : (m : M) → Decidable (Ne m 0)\nf : AddMonoidAlgebra M ι\n⊢ Eq f.toDirectSum.toAddMonoidAlgebra f","decl":"@[simp]\ntheorem AddMonoidAlgebra.toDirectSum_toAddMonoidAlgebra (f : AddMonoidAlgebra M ι) :\n    f.toDirectSum.toAddMonoidAlgebra = f :=\n  Finsupp.toDFinsupp_toFinsupp f\n\n"}
{"name":"DirectSum.toAddMonoidAlgebra_toDirectSum","module":"Mathlib.Algebra.MonoidAlgebra.ToDirectSum","initialProofState":"ι : Type u_1\nM : Type u_3\ninst✝² : DecidableEq ι\ninst✝¹ : Semiring M\ninst✝ : (m : M) → Decidable (Ne m 0)\nf : DirectSum ι fun x => M\n⊢ Eq f.toAddMonoidAlgebra.toDirectSum f","decl":"@[simp]\ntheorem DirectSum.toAddMonoidAlgebra_toDirectSum (f : ⨁ _ : ι, M) :\n    f.toAddMonoidAlgebra.toDirectSum = f :=\n  (DFinsupp.toFinsupp_toDFinsupp (show Π₀ _ : ι, M from f) :)\n\n"}
{"name":"AddMonoidAlgebra.toDirectSum_zero","module":"Mathlib.Algebra.MonoidAlgebra.ToDirectSum","initialProofState":"ι : Type u_1\nM : Type u_3\ninst✝ : Semiring M\n⊢ Eq (AddMonoidAlgebra.toDirectSum 0) 0","decl":"@[simp]\ntheorem toDirectSum_zero [Semiring M] : (0 : AddMonoidAlgebra M ι).toDirectSum = 0 :=\n  Finsupp.toDFinsupp_zero\n\n"}
{"name":"AddMonoidAlgebra.toDirectSum_add","module":"Mathlib.Algebra.MonoidAlgebra.ToDirectSum","initialProofState":"ι : Type u_1\nM : Type u_3\ninst✝ : Semiring M\nf g : AddMonoidAlgebra M ι\n⊢ Eq (HAdd.hAdd f g).toDirectSum (HAdd.hAdd f.toDirectSum g.toDirectSum)","decl":"@[simp]\ntheorem toDirectSum_add [Semiring M] (f g : AddMonoidAlgebra M ι) :\n    (f + g).toDirectSum = f.toDirectSum + g.toDirectSum :=\n  Finsupp.toDFinsupp_add _ _\n\n"}
{"name":"AddMonoidAlgebra.toDirectSum_mul","module":"Mathlib.Algebra.MonoidAlgebra.ToDirectSum","initialProofState":"ι : Type u_1\nM : Type u_3\ninst✝² : DecidableEq ι\ninst✝¹ : AddMonoid ι\ninst✝ : Semiring M\nf g : AddMonoidAlgebra M ι\n⊢ Eq (HMul.hMul f g).toDirectSum (HMul.hMul f.toDirectSum g.toDirectSum)","decl":"@[simp]\ntheorem toDirectSum_mul [DecidableEq ι] [AddMonoid ι] [Semiring M] (f g : AddMonoidAlgebra M ι) :\n    (f * g).toDirectSum = f.toDirectSum * g.toDirectSum := by\n  let to_hom : AddMonoidAlgebra M ι →+ ⨁ _ : ι, M :=\n  { toFun := toDirectSum\n    map_zero' := toDirectSum_zero\n    map_add' := toDirectSum_add }\n  show to_hom (f * g) = to_hom f * to_hom g\n  let _ : NonUnitalNonAssocSemiring (ι →₀ M) := AddMonoidAlgebra.nonUnitalNonAssocSemiring\n  revert f g\n  rw [AddMonoidHom.map_mul_iff]\n  -- Porting note (https://github.com/leanprover-community/mathlib4/issues/11041): does not find `addHom_ext'`, was `ext (xi xv yi yv) : 4`\n  refine Finsupp.addHom_ext' fun xi => AddMonoidHom.ext fun xv => ?_\n  refine Finsupp.addHom_ext' fun yi => AddMonoidHom.ext fun yv => ?_\n  dsimp only [AddMonoidHom.comp_apply, AddMonoidHom.compl₂_apply, AddMonoidHom.compr₂_apply,\n    AddMonoidHom.mul_apply, Finsupp.singleAddHom_apply]\n  -- This was not needed before https://github.com/leanprover/lean4/pull/2644\n  erw [AddMonoidHom.compl₂_apply]\n  -- If we remove the next `rw`, the `erw` after it will complain (when we get an `erw` linter)\n  -- that it could be a `rw`. But the `erw` and `rw` will rewrite different occurrences.\n  -- So first get rid of the `rw`-able occurrences to force `erw` to do the expensive rewrite only.\n  rw [AddMonoidHom.coe_mk, AddMonoidHom.coe_mk]\n  -- This was not needed before https://github.com/leanprover/lean4/pull/2644\n  erw [AddMonoidHom.coe_mk]\n  simp only [AddMonoidHom.coe_mk, ZeroHom.coe_mk, toDirectSum_single]\n  -- This was not needed before https://github.com/leanprover/lean4/pull/2644\n  dsimp\n  rw [AddMonoidAlgebra.single_mul_single, AddMonoidHom.coe_mk, AddMonoidHom.coe_mk, ZeroHom.coe_mk,\n    AddMonoidAlgebra.toDirectSum_single]\n  simp only [AddMonoidHom.coe_comp, AddMonoidHom.coe_mul, AddMonoidHom.coe_mk, ZeroHom.coe_mk,\n    Function.comp_apply, toDirectSum_single, AddMonoidHom.id_apply, Finsupp.singleAddHom_apply,\n    AddMonoidHom.coe_mulLeft]\n  rw [DirectSum.of_mul_of, Mul.gMul_mul]\n\n"}
{"name":"DirectSum.toAddMonoidAlgebra_zero","module":"Mathlib.Algebra.MonoidAlgebra.ToDirectSum","initialProofState":"ι : Type u_1\nM : Type u_3\ninst✝² : DecidableEq ι\ninst✝¹ : Semiring M\ninst✝ : (m : M) → Decidable (Ne m 0)\n⊢ Eq (DirectSum.toAddMonoidAlgebra 0) 0","decl":"@[simp]\ntheorem toAddMonoidAlgebra_zero [Semiring M] [∀ m : M, Decidable (m ≠ 0)] :\n    toAddMonoidAlgebra 0 = (0 : AddMonoidAlgebra M ι) :=\n  DFinsupp.toFinsupp_zero\n\n"}
{"name":"DirectSum.toAddMonoidAlgebra_add","module":"Mathlib.Algebra.MonoidAlgebra.ToDirectSum","initialProofState":"ι : Type u_1\nM : Type u_3\ninst✝² : DecidableEq ι\ninst✝¹ : Semiring M\ninst✝ : (m : M) → Decidable (Ne m 0)\nf g : DirectSum ι fun x => M\n⊢ Eq (HAdd.hAdd f g).toAddMonoidAlgebra (HAdd.hAdd f.toAddMonoidAlgebra g.toAddMonoidAlgebra)","decl":"@[simp]\ntheorem toAddMonoidAlgebra_add [Semiring M] [∀ m : M, Decidable (m ≠ 0)] (f g : ⨁ _ : ι, M) :\n    (f + g).toAddMonoidAlgebra = toAddMonoidAlgebra f + toAddMonoidAlgebra g :=\n  DFinsupp.toFinsupp_add _ _\n\n"}
{"name":"DirectSum.toAddMonoidAlgebra_mul","module":"Mathlib.Algebra.MonoidAlgebra.ToDirectSum","initialProofState":"ι : Type u_1\nM : Type u_3\ninst✝³ : DecidableEq ι\ninst✝² : AddMonoid ι\ninst✝¹ : Semiring M\ninst✝ : (m : M) → Decidable (Ne m 0)\nf g : DirectSum ι fun x => M\n⊢ Eq (HMul.hMul f g).toAddMonoidAlgebra (HMul.hMul f.toAddMonoidAlgebra g.toAddMonoidAlgebra)","decl":"@[simp]\ntheorem toAddMonoidAlgebra_mul [AddMonoid ι] [Semiring M]\n    [∀ m : M, Decidable (m ≠ 0)] (f g : ⨁ _ : ι, M) :\n    (f * g).toAddMonoidAlgebra = toAddMonoidAlgebra f * toAddMonoidAlgebra g := by\n  apply_fun AddMonoidAlgebra.toDirectSum\n  · simp\n  · apply Function.LeftInverse.injective\n    apply AddMonoidAlgebra.toDirectSum_toAddMonoidAlgebra\n\n"}
{"name":"addMonoidAlgebraEquivDirectSum_apply","module":"Mathlib.Algebra.MonoidAlgebra.ToDirectSum","initialProofState":"ι : Type u_1\nM : Type u_3\ninst✝² : DecidableEq ι\ninst✝¹ : Semiring M\ninst✝ : (m : M) → Decidable (Ne m 0)\n⊢ Eq (⇑addMonoidAlgebraEquivDirectSum) AddMonoidAlgebra.toDirectSum","decl":"/-- `AddMonoidAlgebra.toDirectSum` and `DirectSum.toAddMonoidAlgebra` together form an\nequiv. -/\n@[simps (config := .asFn)]\ndef addMonoidAlgebraEquivDirectSum [DecidableEq ι] [Semiring M] [∀ m : M, Decidable (m ≠ 0)] :\n    AddMonoidAlgebra M ι ≃ ⨁ _ : ι, M :=\n  { finsuppEquivDFinsupp with\n    toFun := AddMonoidAlgebra.toDirectSum\n    invFun := DirectSum.toAddMonoidAlgebra }\n\n"}
{"name":"addMonoidAlgebraEquivDirectSum_symm_apply","module":"Mathlib.Algebra.MonoidAlgebra.ToDirectSum","initialProofState":"ι : Type u_1\nM : Type u_3\ninst✝² : DecidableEq ι\ninst✝¹ : Semiring M\ninst✝ : (m : M) → Decidable (Ne m 0)\n⊢ Eq (⇑addMonoidAlgebraEquivDirectSum.symm) DirectSum.toAddMonoidAlgebra","decl":"/-- `AddMonoidAlgebra.toDirectSum` and `DirectSum.toAddMonoidAlgebra` together form an\nequiv. -/\n@[simps (config := .asFn)]\ndef addMonoidAlgebraEquivDirectSum [DecidableEq ι] [Semiring M] [∀ m : M, Decidable (m ≠ 0)] :\n    AddMonoidAlgebra M ι ≃ ⨁ _ : ι, M :=\n  { finsuppEquivDFinsupp with\n    toFun := AddMonoidAlgebra.toDirectSum\n    invFun := DirectSum.toAddMonoidAlgebra }\n\n"}
{"name":"addMonoidAlgebraAddEquivDirectSum_apply","module":"Mathlib.Algebra.MonoidAlgebra.ToDirectSum","initialProofState":"ι : Type u_1\nM : Type u_3\ninst✝² : DecidableEq ι\ninst✝¹ : Semiring M\ninst✝ : (m : M) → Decidable (Ne m 0)\n⊢ Eq (⇑addMonoidAlgebraAddEquivDirectSum) AddMonoidAlgebra.toDirectSum","decl":"/-- The additive version of `AddMonoidAlgebra.addMonoidAlgebraEquivDirectSum`. -/\n@[simps (config := .asFn)]\ndef addMonoidAlgebraAddEquivDirectSum [DecidableEq ι] [Semiring M] [∀ m : M, Decidable (m ≠ 0)] :\n    AddMonoidAlgebra M ι ≃+ ⨁ _ : ι, M :=\n  { addMonoidAlgebraEquivDirectSum with\n    toFun := AddMonoidAlgebra.toDirectSum\n    invFun := DirectSum.toAddMonoidAlgebra\n    map_add' := AddMonoidAlgebra.toDirectSum_add }\n\n"}
{"name":"addMonoidAlgebraAddEquivDirectSum_symm_apply","module":"Mathlib.Algebra.MonoidAlgebra.ToDirectSum","initialProofState":"ι : Type u_1\nM : Type u_3\ninst✝² : DecidableEq ι\ninst✝¹ : Semiring M\ninst✝ : (m : M) → Decidable (Ne m 0)\n⊢ Eq (⇑addMonoidAlgebraAddEquivDirectSum.symm) DirectSum.toAddMonoidAlgebra","decl":"/-- The additive version of `AddMonoidAlgebra.addMonoidAlgebraEquivDirectSum`. -/\n@[simps (config := .asFn)]\ndef addMonoidAlgebraAddEquivDirectSum [DecidableEq ι] [Semiring M] [∀ m : M, Decidable (m ≠ 0)] :\n    AddMonoidAlgebra M ι ≃+ ⨁ _ : ι, M :=\n  { addMonoidAlgebraEquivDirectSum with\n    toFun := AddMonoidAlgebra.toDirectSum\n    invFun := DirectSum.toAddMonoidAlgebra\n    map_add' := AddMonoidAlgebra.toDirectSum_add }\n\n"}
{"name":"addMonoidAlgebraRingEquivDirectSum_apply","module":"Mathlib.Algebra.MonoidAlgebra.ToDirectSum","initialProofState":"ι : Type u_1\nM : Type u_3\ninst✝³ : DecidableEq ι\ninst✝² : AddMonoid ι\ninst✝¹ : Semiring M\ninst✝ : (m : M) → Decidable (Ne m 0)\n⊢ Eq (⇑addMonoidAlgebraRingEquivDirectSum) AddMonoidAlgebra.toDirectSum","decl":"/-- The ring version of `AddMonoidAlgebra.addMonoidAlgebraEquivDirectSum`. -/\n@[simps (config := .asFn)]\ndef addMonoidAlgebraRingEquivDirectSum [DecidableEq ι] [AddMonoid ι] [Semiring M]\n    [∀ m : M, Decidable (m ≠ 0)] : AddMonoidAlgebra M ι ≃+* ⨁ _ : ι, M :=\n  { (addMonoidAlgebraAddEquivDirectSum : AddMonoidAlgebra M ι ≃+ ⨁ _ : ι, M) with\n    toFun := AddMonoidAlgebra.toDirectSum\n    invFun := DirectSum.toAddMonoidAlgebra\n    map_mul' := AddMonoidAlgebra.toDirectSum_mul }\n\n"}
{"name":"addMonoidAlgebraRingEquivDirectSum_symm_apply","module":"Mathlib.Algebra.MonoidAlgebra.ToDirectSum","initialProofState":"ι : Type u_1\nM : Type u_3\ninst✝³ : DecidableEq ι\ninst✝² : AddMonoid ι\ninst✝¹ : Semiring M\ninst✝ : (m : M) → Decidable (Ne m 0)\n⊢ Eq (⇑addMonoidAlgebraRingEquivDirectSum.symm) DirectSum.toAddMonoidAlgebra","decl":"/-- The ring version of `AddMonoidAlgebra.addMonoidAlgebraEquivDirectSum`. -/\n@[simps (config := .asFn)]\ndef addMonoidAlgebraRingEquivDirectSum [DecidableEq ι] [AddMonoid ι] [Semiring M]\n    [∀ m : M, Decidable (m ≠ 0)] : AddMonoidAlgebra M ι ≃+* ⨁ _ : ι, M :=\n  { (addMonoidAlgebraAddEquivDirectSum : AddMonoidAlgebra M ι ≃+ ⨁ _ : ι, M) with\n    toFun := AddMonoidAlgebra.toDirectSum\n    invFun := DirectSum.toAddMonoidAlgebra\n    map_mul' := AddMonoidAlgebra.toDirectSum_mul }\n\n"}
{"name":"addMonoidAlgebraAlgEquivDirectSum_symm_apply","module":"Mathlib.Algebra.MonoidAlgebra.ToDirectSum","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_4\ninst✝⁵ : DecidableEq ι\ninst✝⁴ : AddMonoid ι\ninst✝³ : CommSemiring R\ninst✝² : Semiring A\ninst✝¹ : Algebra R A\ninst✝ : (m : A) → Decidable (Ne m 0)\n⊢ Eq (⇑addMonoidAlgebraAlgEquivDirectSum.symm) DirectSum.toAddMonoidAlgebra","decl":"/-- The algebra version of `AddMonoidAlgebra.addMonoidAlgebraEquivDirectSum`. -/\n@[simps (config := .asFn)]\ndef addMonoidAlgebraAlgEquivDirectSum [DecidableEq ι] [AddMonoid ι] [CommSemiring R] [Semiring A]\n    [Algebra R A] [∀ m : A, Decidable (m ≠ 0)] : AddMonoidAlgebra A ι ≃ₐ[R] ⨁ _ : ι, A :=\n  { (addMonoidAlgebraRingEquivDirectSum : AddMonoidAlgebra A ι ≃+* ⨁ _ : ι, A) with\n    toFun := AddMonoidAlgebra.toDirectSum\n    invFun := DirectSum.toAddMonoidAlgebra\n    commutes' := fun _r => AddMonoidAlgebra.toDirectSum_single _ _ }\n\n"}
{"name":"addMonoidAlgebraAlgEquivDirectSum_apply","module":"Mathlib.Algebra.MonoidAlgebra.ToDirectSum","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_4\ninst✝⁵ : DecidableEq ι\ninst✝⁴ : AddMonoid ι\ninst✝³ : CommSemiring R\ninst✝² : Semiring A\ninst✝¹ : Algebra R A\ninst✝ : (m : A) → Decidable (Ne m 0)\n⊢ Eq (⇑addMonoidAlgebraAlgEquivDirectSum) AddMonoidAlgebra.toDirectSum","decl":"/-- The algebra version of `AddMonoidAlgebra.addMonoidAlgebraEquivDirectSum`. -/\n@[simps (config := .asFn)]\ndef addMonoidAlgebraAlgEquivDirectSum [DecidableEq ι] [AddMonoid ι] [CommSemiring R] [Semiring A]\n    [Algebra R A] [∀ m : A, Decidable (m ≠ 0)] : AddMonoidAlgebra A ι ≃ₐ[R] ⨁ _ : ι, A :=\n  { (addMonoidAlgebraRingEquivDirectSum : AddMonoidAlgebra A ι ≃+* ⨁ _ : ι, A) with\n    toFun := AddMonoidAlgebra.toDirectSum\n    invFun := DirectSum.toAddMonoidAlgebra\n    commutes' := fun _r => AddMonoidAlgebra.toDirectSum_single _ _ }\n\n"}
