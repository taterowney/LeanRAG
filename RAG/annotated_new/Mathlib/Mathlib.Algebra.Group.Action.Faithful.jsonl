{"name":"FaithfulVAdd.eq_of_vadd_eq_vadd","module":"Mathlib.Algebra.Group.Action.Faithful","initialProofState":"G : Type u_4\nP : Type u_5\ninst✝ : VAdd G P\nself : FaithfulVAdd G P\ng₁ g₂ : G\na✝ : ∀ (p : P), Eq (HVAdd.hVAdd g₁ p) (HVAdd.hVAdd g₂ p)\n⊢ Eq g₁ g₂","decl":"/-- Typeclass for faithful actions. -/\nclass FaithfulVAdd (G : Type*) (P : Type*) [VAdd G P] : Prop where\n  /-- Two elements `g₁` and `g₂` are equal whenever they act in the same way on all points. -/\n  eq_of_vadd_eq_vadd : ∀ {g₁ g₂ : G}, (∀ p : P, g₁ +ᵥ p = g₂ +ᵥ p) → g₁ = g₂\n\n"}
{"name":"FaithfulSMul.eq_of_smul_eq_smul","module":"Mathlib.Algebra.Group.Action.Faithful","initialProofState":"M : Type u_4\nα : Type u_5\ninst✝ : SMul M α\nself : FaithfulSMul M α\nm₁ m₂ : M\na✝ : ∀ (a : α), Eq (HSMul.hSMul m₁ a) (HSMul.hSMul m₂ a)\n⊢ Eq m₁ m₂","decl":"/-- Typeclass for faithful actions. -/\n@[to_additive]\nclass FaithfulSMul (M : Type*) (α : Type*) [SMul M α] : Prop where\n  /-- Two elements `m₁` and `m₂` are equal whenever they act in the same way on all points. -/\n  eq_of_smul_eq_smul : ∀ {m₁ m₂ : M}, (∀ a : α, m₁ • a = m₂ • a) → m₁ = m₂\n\n"}
{"name":"vadd_left_injective'","module":"Mathlib.Algebra.Group.Action.Faithful","initialProofState":"M : Type u_1\nα : Type u_3\ninst✝¹ : VAdd M α\ninst✝ : FaithfulVAdd M α\n⊢ Function.Injective fun x1 x2 => HVAdd.hVAdd x1 x2","decl":"@[to_additive]\nlemma smul_left_injective' [SMul M α] [FaithfulSMul M α] : Injective ((· • ·) : M → α → α) :=\n  fun _ _ h ↦ FaithfulSMul.eq_of_smul_eq_smul (congr_fun h)\n\n"}
{"name":"smul_left_injective'","module":"Mathlib.Algebra.Group.Action.Faithful","initialProofState":"M : Type u_1\nα : Type u_3\ninst✝¹ : SMul M α\ninst✝ : FaithfulSMul M α\n⊢ Function.Injective fun x1 x2 => HSMul.hSMul x1 x2","decl":"@[to_additive]\nlemma smul_left_injective' [SMul M α] [FaithfulSMul M α] : Injective ((· • ·) : M → α → α) :=\n  fun _ _ h ↦ FaithfulSMul.eq_of_smul_eq_smul (congr_fun h)\n\n"}
{"name":"RightCancelMonoid.faithfulSMul","module":"Mathlib.Algebra.Group.Action.Faithful","initialProofState":"α : Type u_3\ninst✝ : RightCancelMonoid α\n⊢ FaithfulSMul α α","decl":"/-- `Monoid.toMulAction` is faithful on cancellative monoids. -/\n@[to_additive \" `AddMonoid.toAddAction` is faithful on additive cancellative monoids. \"]\ninstance RightCancelMonoid.faithfulSMul [RightCancelMonoid α] : FaithfulSMul α α :=\n  ⟨fun h ↦ mul_right_cancel (h 1)⟩\n\n"}
{"name":"AddRightCancelMonoid.faithfulVAdd","module":"Mathlib.Algebra.Group.Action.Faithful","initialProofState":"α : Type u_3\ninst✝ : AddRightCancelMonoid α\n⊢ FaithfulVAdd α α","decl":"/-- `Monoid.toMulAction` is faithful on cancellative monoids. -/\n@[to_additive \" `AddMonoid.toAddAction` is faithful on additive cancellative monoids. \"]\ninstance RightCancelMonoid.faithfulSMul [RightCancelMonoid α] : FaithfulSMul α α :=\n  ⟨fun h ↦ mul_right_cancel (h 1)⟩\n\n"}
{"name":"Function.End.apply_FaithfulSMul","module":"Mathlib.Algebra.Group.Action.Faithful","initialProofState":"α : Type u_3\n⊢ FaithfulSMul (Function.End α) α","decl":"/-- `Function.End.applyMulAction` is faithful. -/\ninstance Function.End.apply_FaithfulSMul : FaithfulSMul (Function.End α) α :=\n  ⟨fun {_ _} ↦ funext⟩\n"}
