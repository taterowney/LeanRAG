{"name":"MulAut.coe_mul","module":"Mathlib.Algebra.Group.Aut","initialProofState":"M : Type u_2\ninst✝ : Mul M\ne₁ e₂ : MulAut M\n⊢ Eq (⇑(HMul.hMul e₁ e₂)) (Function.comp ⇑e₁ ⇑e₂)","decl":"@[simp]\ntheorem coe_mul (e₁ e₂ : MulAut M) : ⇑(e₁ * e₂) = e₁ ∘ e₂ :=\n  rfl\n\n"}
{"name":"MulAut.coe_one","module":"Mathlib.Algebra.Group.Aut","initialProofState":"M : Type u_2\ninst✝ : Mul M\n⊢ Eq (⇑1) id","decl":"@[simp]\ntheorem coe_one : ⇑(1 : MulAut M) = id :=\n  rfl\n\n"}
{"name":"MulAut.mul_def","module":"Mathlib.Algebra.Group.Aut","initialProofState":"M : Type u_2\ninst✝ : Mul M\ne₁ e₂ : MulAut M\n⊢ Eq (HMul.hMul e₁ e₂) (MulEquiv.trans e₂ e₁)","decl":"theorem mul_def (e₁ e₂ : MulAut M) : e₁ * e₂ = e₂.trans e₁ :=\n  rfl\n\n"}
{"name":"MulAut.one_def","module":"Mathlib.Algebra.Group.Aut","initialProofState":"M : Type u_2\ninst✝ : Mul M\n⊢ Eq 1 (MulEquiv.refl M)","decl":"theorem one_def : (1 : MulAut M) = MulEquiv.refl _ :=\n  rfl\n\n"}
{"name":"MulAut.inv_def","module":"Mathlib.Algebra.Group.Aut","initialProofState":"M : Type u_2\ninst✝ : Mul M\ne₁ : MulAut M\n⊢ Eq (Inv.inv e₁) (MulEquiv.symm e₁)","decl":"theorem inv_def (e₁ : MulAut M) : e₁⁻¹ = e₁.symm :=\n  rfl\n\n"}
{"name":"MulAut.mul_apply","module":"Mathlib.Algebra.Group.Aut","initialProofState":"M : Type u_2\ninst✝ : Mul M\ne₁ e₂ : MulAut M\nm : M\n⊢ Eq ((HMul.hMul e₁ e₂) m) (e₁ (e₂ m))","decl":"@[simp]\ntheorem mul_apply (e₁ e₂ : MulAut M) (m : M) : (e₁ * e₂) m = e₁ (e₂ m) :=\n  rfl\n\n"}
{"name":"MulAut.one_apply","module":"Mathlib.Algebra.Group.Aut","initialProofState":"M : Type u_2\ninst✝ : Mul M\nm : M\n⊢ Eq (1 m) m","decl":"@[simp]\ntheorem one_apply (m : M) : (1 : MulAut M) m = m :=\n  rfl\n\n"}
{"name":"MulAut.apply_inv_self","module":"Mathlib.Algebra.Group.Aut","initialProofState":"M : Type u_2\ninst✝ : Mul M\ne : MulAut M\nm : M\n⊢ Eq (e ((Inv.inv e) m)) m","decl":"@[simp]\ntheorem apply_inv_self (e : MulAut M) (m : M) : e (e⁻¹ m) = m :=\n  MulEquiv.apply_symm_apply _ _\n\n"}
{"name":"MulAut.inv_apply_self","module":"Mathlib.Algebra.Group.Aut","initialProofState":"M : Type u_2\ninst✝ : Mul M\ne : MulAut M\nm : M\n⊢ Eq ((Inv.inv e) (e m)) m","decl":"@[simp]\ntheorem inv_apply_self (e : MulAut M) (m : M) : e⁻¹ (e m) = m :=\n  MulEquiv.apply_symm_apply _ _\n\n"}
{"name":"MulAut.smul_def","module":"Mathlib.Algebra.Group.Aut","initialProofState":"M : Type u_4\ninst✝ : Monoid M\nf : MulAut M\na : M\n⊢ Eq (HSMul.hSMul f a) (f a)","decl":"@[simp]\nprotected theorem smul_def {M} [Monoid M] (f : MulAut M) (a : M) : f • a = f a :=\n  rfl\n\n"}
{"name":"MulAut.apply_faithfulSMul","module":"Mathlib.Algebra.Group.Aut","initialProofState":"M : Type u_4\ninst✝ : Monoid M\n⊢ FaithfulSMul (MulAut M) M","decl":"/-- `MulAut.applyDistribMulAction` is faithful. -/\ninstance apply_faithfulSMul {M} [Monoid M] : FaithfulSMul (MulAut M) M :=\n  ⟨ fun h => MulEquiv.ext h ⟩\n\n"}
{"name":"MulAut.conj_apply","module":"Mathlib.Algebra.Group.Aut","initialProofState":"G : Type u_3\ninst✝ : Group G\ng h : G\n⊢ Eq ((MulAut.conj g) h) (HMul.hMul (HMul.hMul g h) (Inv.inv g))","decl":"@[simp]\ntheorem conj_apply [Group G] (g h : G) : conj g h = g * h * g⁻¹ :=\n  rfl\n\n"}
{"name":"MulAut.conj_symm_apply","module":"Mathlib.Algebra.Group.Aut","initialProofState":"G : Type u_3\ninst✝ : Group G\ng h : G\n⊢ Eq ((MulEquiv.symm (MulAut.conj g)) h) (HMul.hMul (HMul.hMul (Inv.inv g) h) g)","decl":"@[simp]\ntheorem conj_symm_apply [Group G] (g h : G) : (conj g).symm h = g⁻¹ * h * g :=\n  rfl\n\n"}
{"name":"MulAut.conj_inv_apply","module":"Mathlib.Algebra.Group.Aut","initialProofState":"G : Type u_3\ninst✝ : Group G\ng h : G\n⊢ Eq ((Inv.inv (MulAut.conj g)) h) (HMul.hMul (HMul.hMul (Inv.inv g) h) g)","decl":"@[simp]\ntheorem conj_inv_apply [Group G] (g h : G) : (conj g)⁻¹ h = g⁻¹ * h * g :=\n  rfl\n\n"}
{"name":"MulAut.congr_symm_apply","module":"Mathlib.Algebra.Group.Aut","initialProofState":"G : Type u_3\ninst✝¹ : Group G\nH : Type u_4\ninst✝ : Group H\nϕ : MulEquiv G H\nf : MulAut H\n⊢ Eq ((MulAut.congr ϕ).symm f) (ϕ.trans (MulEquiv.trans f ϕ.symm))","decl":"/-- Isomorphic groups have isomorphic automorphism groups. -/\n@[simps]\ndef congr [Group G] {H : Type*} [Group H] (ϕ : G ≃* H) :\n    MulAut G ≃* MulAut H where\n  toFun f := ϕ.symm.trans (f.trans ϕ)\n  invFun f := ϕ.trans (f.trans ϕ.symm)\n  left_inv _ := by simp [DFunLike.ext_iff]\n  right_inv _ := by simp [DFunLike.ext_iff]\n  map_mul' := by simp [DFunLike.ext_iff]\n\n"}
{"name":"MulAut.congr_apply","module":"Mathlib.Algebra.Group.Aut","initialProofState":"G : Type u_3\ninst✝¹ : Group G\nH : Type u_4\ninst✝ : Group H\nϕ : MulEquiv G H\nf : MulAut G\n⊢ Eq ((MulAut.congr ϕ) f) (ϕ.symm.trans (MulEquiv.trans f ϕ))","decl":"/-- Isomorphic groups have isomorphic automorphism groups. -/\n@[simps]\ndef congr [Group G] {H : Type*} [Group H] (ϕ : G ≃* H) :\n    MulAut G ≃* MulAut H where\n  toFun f := ϕ.symm.trans (f.trans ϕ)\n  invFun f := ϕ.trans (f.trans ϕ.symm)\n  left_inv _ := by simp [DFunLike.ext_iff]\n  right_inv _ := by simp [DFunLike.ext_iff]\n  map_mul' := by simp [DFunLike.ext_iff]\n\n"}
{"name":"AddAut.coe_mul","module":"Mathlib.Algebra.Group.Aut","initialProofState":"A : Type u_1\ninst✝ : Add A\ne₁ e₂ : AddAut A\n⊢ Eq (⇑(HMul.hMul e₁ e₂)) (Function.comp ⇑e₁ ⇑e₂)","decl":"@[simp]\ntheorem coe_mul (e₁ e₂ : AddAut A) : ⇑(e₁ * e₂) = e₁ ∘ e₂ :=\n  rfl\n\n"}
{"name":"AddAut.coe_one","module":"Mathlib.Algebra.Group.Aut","initialProofState":"A : Type u_1\ninst✝ : Add A\n⊢ Eq (⇑1) id","decl":"@[simp]\ntheorem coe_one : ⇑(1 : AddAut A) = id :=\n  rfl\n\n"}
{"name":"AddAut.mul_def","module":"Mathlib.Algebra.Group.Aut","initialProofState":"A : Type u_1\ninst✝ : Add A\ne₁ e₂ : AddAut A\n⊢ Eq (HMul.hMul e₁ e₂) (AddEquiv.trans e₂ e₁)","decl":"theorem mul_def (e₁ e₂ : AddAut A) : e₁ * e₂ = e₂.trans e₁ :=\n  rfl\n\n"}
{"name":"AddAut.one_def","module":"Mathlib.Algebra.Group.Aut","initialProofState":"A : Type u_1\ninst✝ : Add A\n⊢ Eq 1 (AddEquiv.refl A)","decl":"theorem one_def : (1 : AddAut A) = AddEquiv.refl _ :=\n  rfl\n\n"}
{"name":"AddAut.inv_def","module":"Mathlib.Algebra.Group.Aut","initialProofState":"A : Type u_1\ninst✝ : Add A\ne₁ : AddAut A\n⊢ Eq (Inv.inv e₁) (AddEquiv.symm e₁)","decl":"theorem inv_def (e₁ : AddAut A) : e₁⁻¹ = e₁.symm :=\n  rfl\n\n"}
{"name":"AddAut.mul_apply","module":"Mathlib.Algebra.Group.Aut","initialProofState":"A : Type u_1\ninst✝ : Add A\ne₁ e₂ : AddAut A\na : A\n⊢ Eq ((HMul.hMul e₁ e₂) a) (e₁ (e₂ a))","decl":"@[simp]\ntheorem mul_apply (e₁ e₂ : AddAut A) (a : A) : (e₁ * e₂) a = e₁ (e₂ a) :=\n  rfl\n\n"}
{"name":"AddAut.one_apply","module":"Mathlib.Algebra.Group.Aut","initialProofState":"A : Type u_1\ninst✝ : Add A\na : A\n⊢ Eq (1 a) a","decl":"@[simp]\ntheorem one_apply (a : A) : (1 : AddAut A) a = a :=\n  rfl\n\n"}
{"name":"AddAut.apply_inv_self","module":"Mathlib.Algebra.Group.Aut","initialProofState":"A : Type u_1\ninst✝ : Add A\ne : AddAut A\na : A\n⊢ Eq ((Inv.inv e) (e a)) a","decl":"@[simp]\ntheorem apply_inv_self (e : AddAut A) (a : A) : e⁻¹ (e a) = a :=\n  AddEquiv.apply_symm_apply _ _\n\n"}
{"name":"AddAut.inv_apply_self","module":"Mathlib.Algebra.Group.Aut","initialProofState":"A : Type u_1\ninst✝ : Add A\ne : AddAut A\na : A\n⊢ Eq (e ((Inv.inv e) a)) a","decl":"@[simp]\ntheorem inv_apply_self (e : AddAut A) (a : A) : e (e⁻¹ a) = a :=\n  AddEquiv.apply_symm_apply _ _\n\n"}
{"name":"AddAut.smul_def","module":"Mathlib.Algebra.Group.Aut","initialProofState":"A : Type u_4\ninst✝ : AddMonoid A\nf : AddAut A\na : A\n⊢ Eq (HSMul.hSMul f a) (f a)","decl":"@[simp]\nprotected theorem smul_def {A} [AddMonoid A] (f : AddAut A) (a : A) : f • a = f a :=\n  rfl\n\n"}
{"name":"AddAut.apply_faithfulSMul","module":"Mathlib.Algebra.Group.Aut","initialProofState":"A : Type u_4\ninst✝ : AddMonoid A\n⊢ FaithfulSMul (AddAut A) A","decl":"/-- `AddAut.applyDistribMulAction` is faithful. -/\ninstance apply_faithfulSMul {A} [AddMonoid A] : FaithfulSMul (AddAut A) A :=\n  ⟨fun h => AddEquiv.ext h⟩\n\n"}
{"name":"AddAut.conj_apply","module":"Mathlib.Algebra.Group.Aut","initialProofState":"G : Type u_3\ninst✝ : AddGroup G\ng h : G\n⊢ Eq ((Additive.toMul (AddAut.conj g)) h) (HAdd.hAdd (HAdd.hAdd g h) (Neg.neg g))","decl":"@[simp]\ntheorem conj_apply [AddGroup G] (g h : G) : conj g h = g + h + -g :=\n  rfl\n\n"}
{"name":"AddAut.conj_symm_apply","module":"Mathlib.Algebra.Group.Aut","initialProofState":"G : Type u_3\ninst✝ : AddGroup G\ng h : G\n⊢ Eq ((AddEquiv.symm (AddAut.conj g)) h) (HAdd.hAdd (HAdd.hAdd (Neg.neg g) h) g)","decl":"@[simp]\ntheorem conj_symm_apply [AddGroup G] (g h : G) : (conj g).symm h = -g + h + g :=\n  rfl\n\n-- Porting note: the exact translation of this mathlib3 lemma would be`(-conj g) h = -g + h + g`,\n-- but this no longer pass the simp_nf linter, as the LHS simplifies by `toMul_neg` to\n-- `(conj g).toMul⁻¹`.\n"}
{"name":"AddAut.conj_inv_apply","module":"Mathlib.Algebra.Group.Aut","initialProofState":"G : Type u_3\ninst✝ : AddGroup G\ng h : G\n⊢ Eq ((Inv.inv (Additive.toMul (AddAut.conj g))) h) (HAdd.hAdd (HAdd.hAdd (Neg.neg g) h) g)","decl":"@[simp]\ntheorem conj_inv_apply [AddGroup G] (g h : G) : (conj g).toMul⁻¹ h = -g + h + g :=\n  rfl\n\n"}
{"name":"AddAut.congr_symm_apply","module":"Mathlib.Algebra.Group.Aut","initialProofState":"G : Type u_3\ninst✝¹ : AddGroup G\nH : Type u_4\ninst✝ : AddGroup H\nϕ : AddEquiv G H\nf : AddAut H\n⊢ Eq ((AddAut.congr ϕ).symm f) (ϕ.trans (AddEquiv.trans f ϕ.symm))","decl":"/-- Isomorphic additive groups have isomorphic automorphism groups. -/\n@[simps]\ndef congr [AddGroup G] {H : Type*} [AddGroup H] (ϕ : G ≃+ H) :\n    AddAut G ≃* AddAut H where\n  toFun f := ϕ.symm.trans (f.trans ϕ)\n  invFun f := ϕ.trans (f.trans ϕ.symm)\n  left_inv _ := by simp [DFunLike.ext_iff]\n  right_inv _ := by simp [DFunLike.ext_iff]\n  map_mul' := by simp [DFunLike.ext_iff]\n\n"}
{"name":"AddAut.congr_apply","module":"Mathlib.Algebra.Group.Aut","initialProofState":"G : Type u_3\ninst✝¹ : AddGroup G\nH : Type u_4\ninst✝ : AddGroup H\nϕ : AddEquiv G H\nf : AddAut G\n⊢ Eq ((AddAut.congr ϕ) f) (ϕ.symm.trans (AddEquiv.trans f ϕ))","decl":"/-- Isomorphic additive groups have isomorphic automorphism groups. -/\n@[simps]\ndef congr [AddGroup G] {H : Type*} [AddGroup H] (ϕ : G ≃+ H) :\n    AddAut G ≃* AddAut H where\n  toFun f := ϕ.symm.trans (f.trans ϕ)\n  invFun f := ϕ.trans (f.trans ϕ.symm)\n  left_inv _ := by simp [DFunLike.ext_iff]\n  right_inv _ := by simp [DFunLike.ext_iff]\n  map_mul' := by simp [DFunLike.ext_iff]\n\n"}
{"name":"MulAutMultiplicative_symm_apply_symm_apply","module":"Mathlib.Algebra.Group.Aut","initialProofState":"G : Type u_3\ninst✝ : AddGroup G\na✝ : AddEquiv G G\na : Multiplicative G\n⊢ Eq ((MulEquiv.symm ((MulAutMultiplicative G).symm a✝)) a) (Multiplicative.ofAdd (a✝.symm (Multiplicative.toAdd a)))","decl":"/-- `Multiplicative G` and `G` have isomorphic automorphism groups. -/\n@[simps!]\ndef MulAutMultiplicative [AddGroup G] : MulAut (Multiplicative G) ≃* AddAut G :=\n  { AddEquiv.toMultiplicative.symm with map_mul' := fun _ _ ↦ rfl }\n\n"}
{"name":"MulAutMultiplicative_symm_apply_apply","module":"Mathlib.Algebra.Group.Aut","initialProofState":"G : Type u_3\ninst✝ : AddGroup G\na✝ : AddEquiv G G\na : Multiplicative G\n⊢ Eq (((MulAutMultiplicative G).symm a✝) a) (Multiplicative.ofAdd (a✝ (Multiplicative.toAdd a)))","decl":"/-- `Multiplicative G` and `G` have isomorphic automorphism groups. -/\n@[simps!]\ndef MulAutMultiplicative [AddGroup G] : MulAut (Multiplicative G) ≃* AddAut G :=\n  { AddEquiv.toMultiplicative.symm with map_mul' := fun _ _ ↦ rfl }\n\n"}
{"name":"MulAutMultiplicative_apply_apply","module":"Mathlib.Algebra.Group.Aut","initialProofState":"G : Type u_3\ninst✝ : AddGroup G\na✝ : MulEquiv (Multiplicative G) (Multiplicative G)\na : G\n⊢ Eq (((MulAutMultiplicative G) a✝) a) (Multiplicative.toAdd (a✝ (Multiplicative.ofAdd a)))","decl":"/-- `Multiplicative G` and `G` have isomorphic automorphism groups. -/\n@[simps!]\ndef MulAutMultiplicative [AddGroup G] : MulAut (Multiplicative G) ≃* AddAut G :=\n  { AddEquiv.toMultiplicative.symm with map_mul' := fun _ _ ↦ rfl }\n\n"}
{"name":"MulAutMultiplicative_apply_symm_apply","module":"Mathlib.Algebra.Group.Aut","initialProofState":"G : Type u_3\ninst✝ : AddGroup G\na✝ : MulEquiv (Multiplicative G) (Multiplicative G)\na : G\n⊢ Eq ((AddEquiv.symm ((MulAutMultiplicative G) a✝)) a) (Multiplicative.toAdd (a✝.symm (Multiplicative.ofAdd a)))","decl":"/-- `Multiplicative G` and `G` have isomorphic automorphism groups. -/\n@[simps!]\ndef MulAutMultiplicative [AddGroup G] : MulAut (Multiplicative G) ≃* AddAut G :=\n  { AddEquiv.toMultiplicative.symm with map_mul' := fun _ _ ↦ rfl }\n\n"}
{"name":"AddAutAdditive_symm_apply_apply","module":"Mathlib.Algebra.Group.Aut","initialProofState":"G : Type u_3\ninst✝ : Group G\na✝ : MulEquiv G G\na : Additive G\n⊢ Eq (((AddAutAdditive G).symm a✝) a) (Additive.ofMul (a✝ (Additive.toMul a)))","decl":"/-- `Additive G` and `G` have isomorphic automorphism groups. -/\n@[simps!]\ndef AddAutAdditive [Group G] : AddAut (Additive G) ≃* MulAut G :=\n  { MulEquiv.toAdditive.symm with map_mul' := fun _ _ ↦ rfl }\n"}
{"name":"AddAutAdditive_apply_symm_apply","module":"Mathlib.Algebra.Group.Aut","initialProofState":"G : Type u_3\ninst✝ : Group G\na✝ : AddEquiv (Additive G) (Additive G)\na : G\n⊢ Eq ((MulEquiv.symm ((AddAutAdditive G) a✝)) a) (Additive.toMul (a✝.symm (Additive.ofMul a)))","decl":"/-- `Additive G` and `G` have isomorphic automorphism groups. -/\n@[simps!]\ndef AddAutAdditive [Group G] : AddAut (Additive G) ≃* MulAut G :=\n  { MulEquiv.toAdditive.symm with map_mul' := fun _ _ ↦ rfl }\n"}
{"name":"AddAutAdditive_apply_apply","module":"Mathlib.Algebra.Group.Aut","initialProofState":"G : Type u_3\ninst✝ : Group G\na✝ : AddEquiv (Additive G) (Additive G)\na : G\n⊢ Eq (((AddAutAdditive G) a✝) a) (Additive.toMul (a✝ (Additive.ofMul a)))","decl":"/-- `Additive G` and `G` have isomorphic automorphism groups. -/\n@[simps!]\ndef AddAutAdditive [Group G] : AddAut (Additive G) ≃* MulAut G :=\n  { MulEquiv.toAdditive.symm with map_mul' := fun _ _ ↦ rfl }\n"}
{"name":"AddAutAdditive_symm_apply_symm_apply","module":"Mathlib.Algebra.Group.Aut","initialProofState":"G : Type u_3\ninst✝ : Group G\na✝ : MulEquiv G G\na : Additive G\n⊢ Eq ((AddEquiv.symm ((AddAutAdditive G).symm a✝)) a) (Additive.ofMul (a✝.symm (Additive.toMul a)))","decl":"/-- `Additive G` and `G` have isomorphic automorphism groups. -/\n@[simps!]\ndef AddAutAdditive [Group G] : AddAut (Additive G) ≃* MulAut G :=\n  { MulEquiv.toAdditive.symm with map_mul' := fun _ _ ↦ rfl }\n"}
