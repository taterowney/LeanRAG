{"name":"QuadraticMap.IsometryEquiv.mk.sizeOf_spec","module":"Mathlib.LinearAlgebra.QuadraticForm.IsometryEquiv","initialProofState":"R : Type u_2\nM₁ : Type u_5\nM₂ : Type u_6\nN : Type u_9\ninst✝¹⁰ : CommSemiring R\ninst✝⁹ : AddCommMonoid M₁\ninst✝⁸ : AddCommMonoid M₂\ninst✝⁷ : AddCommMonoid N\ninst✝⁶ : Module R M₁\ninst✝⁵ : Module R M₂\ninst✝⁴ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\ninst✝³ : SizeOf R\ninst✝² : SizeOf M₁\ninst✝¹ : SizeOf M₂\ninst✝ : SizeOf N\ntoLinearEquiv : LinearEquiv (RingHom.id R) M₁ M₂\nmap_app' : ∀ (m : M₁), Eq (Q₂ ((↑toLinearEquiv).toFun m)) (Q₁ m)\n⊢ Eq (SizeOf.sizeOf { toLinearEquiv := toLinearEquiv, map_app' := map_app' }) (HAdd.hAdd 1 (SizeOf.sizeOf toLinearEquiv))","decl":"/-- An isometric equivalence between two quadratic spaces `M₁, Q₁` and `M₂, Q₂` over a ring `R`,\nis a linear equivalence between `M₁` and `M₂` that commutes with the quadratic forms. -/\nstructure IsometryEquiv (Q₁ : QuadraticMap R M₁ N) (Q₂ : QuadraticMap R M₂ N)\n    extends M₁ ≃ₗ[R] M₂ where\n  map_app' : ∀ m, Q₂ (toFun m) = Q₁ m\n\n"}
{"name":"QuadraticMap.IsometryEquiv.map_app'","module":"Mathlib.LinearAlgebra.QuadraticForm.IsometryEquiv","initialProofState":"R : Type u_2\nM₁ : Type u_5\nM₂ : Type u_6\nN : Type u_9\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid N\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\nself : Q₁.IsometryEquiv Q₂\nm : M₁\n⊢ Eq (Q₂ ((↑self.toLinearEquiv).toFun m)) (Q₁ m)","decl":"/-- An isometric equivalence between two quadratic spaces `M₁, Q₁` and `M₂, Q₂` over a ring `R`,\nis a linear equivalence between `M₁` and `M₂` that commutes with the quadratic forms. -/\nstructure IsometryEquiv (Q₁ : QuadraticMap R M₁ N) (Q₂ : QuadraticMap R M₂ N)\n    extends M₁ ≃ₗ[R] M₂ where\n  map_app' : ∀ m, Q₂ (toFun m) = Q₁ m\n\n"}
{"name":"QuadraticMap.IsometryEquiv.mk.inj","module":"Mathlib.LinearAlgebra.QuadraticForm.IsometryEquiv","initialProofState":"R : Type u_2\nM₁ : Type u_5\nM₂ : Type u_6\nN : Type u_9\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid N\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\ntoLinearEquiv✝ : LinearEquiv (RingHom.id R) M₁ M₂\nmap_app'✝ : ∀ (m : M₁), Eq (Q₂ ((↑toLinearEquiv✝).toFun m)) (Q₁ m)\ntoLinearEquiv : LinearEquiv (RingHom.id R) M₁ M₂\nmap_app' : ∀ (m : M₁), Eq (Q₂ ((↑toLinearEquiv).toFun m)) (Q₁ m)\nx✝ : Eq { toLinearEquiv := toLinearEquiv✝, map_app' := map_app'✝ } { toLinearEquiv := toLinearEquiv, map_app' := map_app' }\n⊢ Eq toLinearEquiv✝ toLinearEquiv","decl":"/-- An isometric equivalence between two quadratic spaces `M₁, Q₁` and `M₂, Q₂` over a ring `R`,\nis a linear equivalence between `M₁` and `M₂` that commutes with the quadratic forms. -/\nstructure IsometryEquiv (Q₁ : QuadraticMap R M₁ N) (Q₂ : QuadraticMap R M₂ N)\n    extends M₁ ≃ₗ[R] M₂ where\n  map_app' : ∀ m, Q₂ (toFun m) = Q₁ m\n\n"}
{"name":"QuadraticMap.IsometryEquiv.mk.injEq","module":"Mathlib.LinearAlgebra.QuadraticForm.IsometryEquiv","initialProofState":"R : Type u_2\nM₁ : Type u_5\nM₂ : Type u_6\nN : Type u_9\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid N\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\ntoLinearEquiv✝ : LinearEquiv (RingHom.id R) M₁ M₂\nmap_app'✝ : ∀ (m : M₁), Eq (Q₂ ((↑toLinearEquiv✝).toFun m)) (Q₁ m)\ntoLinearEquiv : LinearEquiv (RingHom.id R) M₁ M₂\nmap_app' : ∀ (m : M₁), Eq (Q₂ ((↑toLinearEquiv).toFun m)) (Q₁ m)\n⊢ Eq (Eq { toLinearEquiv := toLinearEquiv✝, map_app' := map_app'✝ } { toLinearEquiv := toLinearEquiv, map_app' := map_app' }) (Eq toLinearEquiv✝ toLinearEquiv)","decl":"/-- An isometric equivalence between two quadratic spaces `M₁, Q₁` and `M₂, Q₂` over a ring `R`,\nis a linear equivalence between `M₁` and `M₂` that commutes with the quadratic forms. -/\nstructure IsometryEquiv (Q₁ : QuadraticMap R M₁ N) (Q₂ : QuadraticMap R M₂ N)\n    extends M₁ ≃ₗ[R] M₂ where\n  map_app' : ∀ m, Q₂ (toFun m) = Q₁ m\n\n"}
{"name":"QuadraticMap.IsometryEquiv.instLinearEquivClass","module":"Mathlib.LinearAlgebra.QuadraticForm.IsometryEquiv","initialProofState":"R : Type u_2\nM₁ : Type u_5\nM₂ : Type u_6\nN : Type u_9\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid N\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\n⊢ LinearEquivClass (Q₁.IsometryEquiv Q₂) R M₁ M₂","decl":"instance : LinearEquivClass (Q₁.IsometryEquiv Q₂) R M₁ M₂ where\n  map_add f := map_add f.toLinearEquiv\n  map_smulₛₗ f := map_smulₛₗ f.toLinearEquiv\n\n-- Porting note: was `Coe`\n"}
{"name":"QuadraticMap.IsometryEquiv.coe_toLinearEquiv","module":"Mathlib.LinearAlgebra.QuadraticForm.IsometryEquiv","initialProofState":"R : Type u_2\nM₁ : Type u_5\nM₂ : Type u_6\nN : Type u_9\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid N\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\nf : Q₁.IsometryEquiv Q₂\n⊢ Eq ⇑f.toLinearEquiv ⇑f","decl":"@[simp]\ntheorem coe_toLinearEquiv (f : Q₁.IsometryEquiv Q₂) : ⇑(f : M₁ ≃ₗ[R] M₂) = f :=\n  rfl\n\n"}
{"name":"QuadraticMap.IsometryEquiv.map_app","module":"Mathlib.LinearAlgebra.QuadraticForm.IsometryEquiv","initialProofState":"R : Type u_2\nM₁ : Type u_5\nM₂ : Type u_6\nN : Type u_9\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid N\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\nf : Q₁.IsometryEquiv Q₂\nm : M₁\n⊢ Eq (Q₂ (f m)) (Q₁ m)","decl":"@[simp]\ntheorem map_app (f : Q₁.IsometryEquiv Q₂) (m : M₁) : Q₂ (f m) = Q₁ m :=\n  f.map_app' m\n\n"}
{"name":"QuadraticMap.IsometryEquiv.toIsometry_apply","module":"Mathlib.LinearAlgebra.QuadraticForm.IsometryEquiv","initialProofState":"R : Type u_2\nM₁ : Type u_5\nM₂ : Type u_6\nN : Type u_9\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid N\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\ng : Q₁.IsometryEquiv Q₂\nx : M₁\n⊢ Eq (g.toIsometry x) (g x)","decl":"/-- Isometric equivalences are isometric maps -/\n@[simps]\ndef toIsometry (g : Q₁.IsometryEquiv Q₂) : Q₁ →qᵢ Q₂ where\n  toFun x := g x\n  __ := g\n\n"}
{"name":"QuadraticMap.Equivalent.refl","module":"Mathlib.LinearAlgebra.QuadraticForm.IsometryEquiv","initialProofState":"R : Type u_2\nM : Type u_4\nN : Type u_9\ninst✝⁴ : CommSemiring R\ninst✝³ : AddCommMonoid M\ninst✝² : AddCommMonoid N\ninst✝¹ : Module R M\ninst✝ : Module R N\nQ : QuadraticMap R M N\n⊢ Q.Equivalent Q","decl":"@[refl]\ntheorem refl (Q : QuadraticMap R M N) : Q.Equivalent Q :=\n  ⟨IsometryEquiv.refl Q⟩\n\n"}
{"name":"QuadraticMap.Equivalent.symm","module":"Mathlib.LinearAlgebra.QuadraticForm.IsometryEquiv","initialProofState":"R : Type u_2\nM₁ : Type u_5\nM₂ : Type u_6\nN : Type u_9\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid N\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\nh : Q₁.Equivalent Q₂\n⊢ Q₂.Equivalent Q₁","decl":"@[symm]\ntheorem symm (h : Q₁.Equivalent Q₂) : Q₂.Equivalent Q₁ :=\n  h.elim fun f => ⟨f.symm⟩\n\n"}
{"name":"QuadraticMap.Equivalent.trans","module":"Mathlib.LinearAlgebra.QuadraticForm.IsometryEquiv","initialProofState":"R : Type u_2\nM₁ : Type u_5\nM₂ : Type u_6\nM₃ : Type u_7\nN : Type u_9\ninst✝⁸ : CommSemiring R\ninst✝⁷ : AddCommMonoid M₁\ninst✝⁶ : AddCommMonoid M₂\ninst✝⁵ : AddCommMonoid M₃\ninst✝⁴ : AddCommMonoid N\ninst✝³ : Module R M₁\ninst✝² : Module R M₂\ninst✝¹ : Module R M₃\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\nQ₃ : QuadraticMap R M₃ N\nh : Q₁.Equivalent Q₂\nh' : Q₂.Equivalent Q₃\n⊢ Q₁.Equivalent Q₃","decl":"@[trans]\ntheorem trans (h : Q₁.Equivalent Q₂) (h' : Q₂.Equivalent Q₃) : Q₁.Equivalent Q₃ :=\n  h'.elim <| h.elim fun f g => ⟨f.trans g⟩\n\n"}
{"name":"QuadraticForm.equivalent_weightedSumSquares","module":"Mathlib.LinearAlgebra.QuadraticForm.IsometryEquiv","initialProofState":"K : Type u_3\nV : Type u_8\ninst✝⁴ : Field K\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module K V\ninst✝ : FiniteDimensional K V\nQ : QuadraticForm K V\n⊢ Exists fun w => QuadraticMap.Equivalent Q (QuadraticMap.weightedSumSquares K w)","decl":"theorem equivalent_weightedSumSquares (Q : QuadraticForm K V) :\n    ∃ w : Fin (Module.finrank K V) → K, Equivalent Q (weightedSumSquares K w) :=\n  let ⟨v, hv₁⟩ := exists_orthogonal_basis (associated_isSymm _ Q)\n  ⟨_, ⟨Q.isometryEquivWeightedSumSquares v hv₁⟩⟩\n\n"}
{"name":"QuadraticForm.equivalent_weightedSumSquares_units_of_nondegenerate'","module":"Mathlib.LinearAlgebra.QuadraticForm.IsometryEquiv","initialProofState":"K : Type u_3\nV : Type u_8\ninst✝⁴ : Field K\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module K V\ninst✝ : FiniteDimensional K V\nQ : QuadraticForm K V\nhQ : LinearMap.SeparatingLeft (QuadraticMap.associated Q)\n⊢ Exists fun w => QuadraticMap.Equivalent Q (QuadraticMap.weightedSumSquares K w)","decl":"theorem equivalent_weightedSumSquares_units_of_nondegenerate' (Q : QuadraticForm K V)\n    (hQ : (associated (R := K) Q).SeparatingLeft) :\n    ∃ w : Fin (Module.finrank K V) → Kˣ, Equivalent Q (weightedSumSquares K w) := by\n  obtain ⟨v, hv₁⟩ := exists_orthogonal_basis (associated_isSymm K Q)\n  have hv₂ := hv₁.not_isOrtho_basis_self_of_separatingLeft hQ\n  simp_rw [LinearMap.IsOrtho, associated_eq_self_apply] at hv₂\n  exact ⟨fun i => Units.mk0 _ (hv₂ i), ⟨Q.isometryEquivWeightedSumSquares v hv₁⟩⟩\n\n"}
