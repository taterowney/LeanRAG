{"name":"MvPolynomial.expand_C","module":"Mathlib.Algebra.MvPolynomial.Expand","initialProofState":"σ : Type u_1\nR : Type u_3\ninst✝ : CommSemiring R\np : Nat\nr : R\n⊢ Eq ((MvPolynomial.expand p) (MvPolynomial.C r)) (MvPolynomial.C r)","decl":"theorem expand_C (p : ℕ) (r : R) : expand p (C r : MvPolynomial σ R) = C r :=\n  eval₂Hom_C _ _ _\n\n"}
{"name":"MvPolynomial.expand_X","module":"Mathlib.Algebra.MvPolynomial.Expand","initialProofState":"σ : Type u_1\nR : Type u_3\ninst✝ : CommSemiring R\np : Nat\ni : σ\n⊢ Eq ((MvPolynomial.expand p) (MvPolynomial.X i)) (HPow.hPow (MvPolynomial.X i) p)","decl":"@[simp]\ntheorem expand_X (p : ℕ) (i : σ) : expand p (X i : MvPolynomial σ R) = X i ^ p :=\n  eval₂Hom_X' _ _ _\n\n"}
{"name":"MvPolynomial.expand_monomial","module":"Mathlib.Algebra.MvPolynomial.Expand","initialProofState":"σ : Type u_1\nR : Type u_3\ninst✝ : CommSemiring R\np : Nat\nd : Finsupp σ Nat\nr : R\n⊢ Eq ((MvPolynomial.expand p) ((MvPolynomial.monomial d) r)) (HMul.hMul (MvPolynomial.C r) (d.support.prod fun i => HPow.hPow (HPow.hPow (MvPolynomial.X i) p) (d i)))","decl":"@[simp]\ntheorem expand_monomial (p : ℕ) (d : σ →₀ ℕ) (r : R) :\n    expand p (monomial d r) = C r * ∏ i ∈ d.support, (X i ^ p) ^ d i :=\n  bind₁_monomial _ _ _\n\n"}
{"name":"MvPolynomial.expand_one_apply","module":"Mathlib.Algebra.MvPolynomial.Expand","initialProofState":"σ : Type u_1\nR : Type u_3\ninst✝ : CommSemiring R\nf : MvPolynomial σ R\n⊢ Eq ((MvPolynomial.expand 1) f) f","decl":"theorem expand_one_apply (f : MvPolynomial σ R) : expand 1 f = f := by\n  simp only [expand, pow_one, eval₂Hom_eq_bind₂, bind₂_C_left, RingHom.toMonoidHom_eq_coe,\n    RingHom.coe_monoidHom_id, AlgHom.coe_mk, RingHom.coe_mk, MonoidHom.id_apply, RingHom.id_apply]\n\n"}
{"name":"MvPolynomial.expand_one","module":"Mathlib.Algebra.MvPolynomial.Expand","initialProofState":"σ : Type u_1\nR : Type u_3\ninst✝ : CommSemiring R\n⊢ Eq (MvPolynomial.expand 1) (AlgHom.id R (MvPolynomial σ R))","decl":"@[simp]\ntheorem expand_one : expand 1 = AlgHom.id R (MvPolynomial σ R) := by\n  ext1 f\n  rw [expand_one_apply, AlgHom.id_apply]\n\n"}
{"name":"MvPolynomial.expand_comp_bind₁","module":"Mathlib.Algebra.MvPolynomial.Expand","initialProofState":"σ : Type u_1\nτ : Type u_2\nR : Type u_3\ninst✝ : CommSemiring R\np : Nat\nf : σ → MvPolynomial τ R\n⊢ Eq ((MvPolynomial.expand p).comp (MvPolynomial.bind₁ f)) (MvPolynomial.bind₁ fun i => (MvPolynomial.expand p) (f i))","decl":"theorem expand_comp_bind₁ (p : ℕ) (f : σ → MvPolynomial τ R) :\n    (expand p).comp (bind₁ f) = bind₁ fun i ↦ expand p (f i) := by\n  apply algHom_ext\n  intro i\n  simp only [AlgHom.comp_apply, bind₁_X_right]\n\n"}
{"name":"MvPolynomial.expand_bind₁","module":"Mathlib.Algebra.MvPolynomial.Expand","initialProofState":"σ : Type u_1\nτ : Type u_2\nR : Type u_3\ninst✝ : CommSemiring R\np : Nat\nf : σ → MvPolynomial τ R\nφ : MvPolynomial σ R\n⊢ Eq ((MvPolynomial.expand p) ((MvPolynomial.bind₁ f) φ)) ((MvPolynomial.bind₁ fun i => (MvPolynomial.expand p) (f i)) φ)","decl":"theorem expand_bind₁ (p : ℕ) (f : σ → MvPolynomial τ R) (φ : MvPolynomial σ R) :\n    expand p (bind₁ f φ) = bind₁ (fun i ↦ expand p (f i)) φ := by\n  rw [← AlgHom.comp_apply, expand_comp_bind₁]\n\n"}
{"name":"MvPolynomial.map_expand","module":"Mathlib.Algebra.MvPolynomial.Expand","initialProofState":"σ : Type u_1\nR : Type u_3\nS : Type u_4\ninst✝¹ : CommSemiring R\ninst✝ : CommSemiring S\nf : RingHom R S\np : Nat\nφ : MvPolynomial σ R\n⊢ Eq ((MvPolynomial.map f) ((MvPolynomial.expand p) φ)) ((MvPolynomial.expand p) ((MvPolynomial.map f) φ))","decl":"@[simp]\ntheorem map_expand (f : R →+* S) (p : ℕ) (φ : MvPolynomial σ R) :\n    map f (expand p φ) = expand p (map f φ) := by simp [expand, map_bind₁]\n\n"}
{"name":"MvPolynomial.rename_expand","module":"Mathlib.Algebra.MvPolynomial.Expand","initialProofState":"σ : Type u_1\nτ : Type u_2\nR : Type u_3\ninst✝ : CommSemiring R\nf : σ → τ\np : Nat\nφ : MvPolynomial σ R\n⊢ Eq ((MvPolynomial.rename f) ((MvPolynomial.expand p) φ)) ((MvPolynomial.expand p) ((MvPolynomial.rename f) φ))","decl":"@[simp]\ntheorem rename_expand (f : σ → τ) (p : ℕ) (φ : MvPolynomial σ R) :\n    rename f (expand p φ) = expand p (rename f φ) := by\n  simp [expand, bind₁_rename, rename_bind₁, Function.comp_def]\n\n"}
{"name":"MvPolynomial.rename_comp_expand","module":"Mathlib.Algebra.MvPolynomial.Expand","initialProofState":"σ : Type u_1\nτ : Type u_2\nR : Type u_3\ninst✝ : CommSemiring R\nf : σ → τ\np : Nat\n⊢ Eq ((MvPolynomial.rename f).comp (MvPolynomial.expand p)) ((MvPolynomial.expand p).comp (MvPolynomial.rename f))","decl":"@[simp]\ntheorem rename_comp_expand (f : σ → τ) (p : ℕ) :\n    (rename f).comp (expand p) =\n      (expand p).comp (rename f : MvPolynomial σ R →ₐ[R] MvPolynomial τ R) := by\n  ext1 φ\n  simp only [rename_expand, AlgHom.comp_apply]\n\n"}
