{"name":"Homeomorph.mk.sizeOf_spec","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_5\nY : Type u_6\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : SizeOf X\ninst✝ : SizeOf Y\ntoEquiv : Equiv X Y\ncontinuous_toFun : autoParam (Continuous toEquiv.toFun) _auto✝\ncontinuous_invFun : autoParam (Continuous toEquiv.invFun) _auto✝\n⊢ Eq (SizeOf.sizeOf { toEquiv := toEquiv, continuous_toFun := continuous_toFun, continuous_invFun := continuous_invFun }) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toEquiv)) (SizeOf.sizeOf continuous_toFun)) (SizeOf.sizeOf continuous_invFun))","decl":"/-- Homeomorphism between `X` and `Y`, also called topological isomorphism -/\nstructure Homeomorph (X : Type*) (Y : Type*) [TopologicalSpace X] [TopologicalSpace Y]\n    extends X ≃ Y where\n  /-- The forward map of a homeomorphism is a continuous function. -/\n  continuous_toFun : Continuous toFun := by continuity\n  /-- The inverse map of a homeomorphism is a continuous function. -/\n  continuous_invFun : Continuous invFun := by continuity\n\n"}
{"name":"Homeomorph.continuous_invFun","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_5\nY : Type u_6\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nself : Homeomorph X Y\n⊢ Continuous self.invFun","decl":"/-- Homeomorphism between `X` and `Y`, also called topological isomorphism -/\nstructure Homeomorph (X : Type*) (Y : Type*) [TopologicalSpace X] [TopologicalSpace Y]\n    extends X ≃ Y where\n  /-- The forward map of a homeomorphism is a continuous function. -/\n  continuous_toFun : Continuous toFun := by continuity\n  /-- The inverse map of a homeomorphism is a continuous function. -/\n  continuous_invFun : Continuous invFun := by continuity\n\n"}
{"name":"Homeomorph.continuous_toFun","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_5\nY : Type u_6\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nself : Homeomorph X Y\n⊢ Continuous self.toFun","decl":"/-- Homeomorphism between `X` and `Y`, also called topological isomorphism -/\nstructure Homeomorph (X : Type*) (Y : Type*) [TopologicalSpace X] [TopologicalSpace Y]\n    extends X ≃ Y where\n  /-- The forward map of a homeomorphism is a continuous function. -/\n  continuous_toFun : Continuous toFun := by continuity\n  /-- The inverse map of a homeomorphism is a continuous function. -/\n  continuous_invFun : Continuous invFun := by continuity\n\n"}
{"name":"Homeomorph.mk.injEq","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_5\nY : Type u_6\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ntoEquiv✝ : Equiv X Y\ncontinuous_toFun✝ : autoParam (Continuous toEquiv✝.toFun) _auto✝\ncontinuous_invFun✝ : autoParam (Continuous toEquiv✝.invFun) _auto✝\ntoEquiv : Equiv X Y\ncontinuous_toFun : autoParam (Continuous toEquiv.toFun) _auto✝\ncontinuous_invFun : autoParam (Continuous toEquiv.invFun) _auto✝\n⊢ Eq (Eq { toEquiv := toEquiv✝, continuous_toFun := continuous_toFun✝, continuous_invFun := continuous_invFun✝ } { toEquiv := toEquiv, continuous_toFun := continuous_toFun, continuous_invFun := continuous_invFun }) (Eq toEquiv✝ toEquiv)","decl":"/-- Homeomorphism between `X` and `Y`, also called topological isomorphism -/\nstructure Homeomorph (X : Type*) (Y : Type*) [TopologicalSpace X] [TopologicalSpace Y]\n    extends X ≃ Y where\n  /-- The forward map of a homeomorphism is a continuous function. -/\n  continuous_toFun : Continuous toFun := by continuity\n  /-- The inverse map of a homeomorphism is a continuous function. -/\n  continuous_invFun : Continuous invFun := by continuity\n\n"}
{"name":"Homeomorph.mk.inj","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_5\nY : Type u_6\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ntoEquiv✝ : Equiv X Y\ncontinuous_toFun✝ : autoParam (Continuous toEquiv✝.toFun) _auto✝\ncontinuous_invFun✝ : autoParam (Continuous toEquiv✝.invFun) _auto✝\ntoEquiv : Equiv X Y\ncontinuous_toFun : autoParam (Continuous toEquiv.toFun) _auto✝\ncontinuous_invFun : autoParam (Continuous toEquiv.invFun) _auto✝\nx✝ : Eq { toEquiv := toEquiv✝, continuous_toFun := continuous_toFun✝, continuous_invFun := continuous_invFun✝ } { toEquiv := toEquiv, continuous_toFun := continuous_toFun, continuous_invFun := continuous_invFun }\n⊢ Eq toEquiv✝ toEquiv","decl":"/-- Homeomorphism between `X` and `Y`, also called topological isomorphism -/\nstructure Homeomorph (X : Type*) (Y : Type*) [TopologicalSpace X] [TopologicalSpace Y]\n    extends X ≃ Y where\n  /-- The forward map of a homeomorphism is a continuous function. -/\n  continuous_toFun : Continuous toFun := by continuity\n  /-- The inverse map of a homeomorphism is a continuous function. -/\n  continuous_invFun : Continuous invFun := by continuity\n\n"}
{"name":"Homeomorph.toEquiv_injective","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\n⊢ Function.Injective Homeomorph.toEquiv","decl":"theorem toEquiv_injective : Function.Injective (toEquiv : X ≃ₜ Y → X ≃ Y)\n  | ⟨_, _, _⟩, ⟨_, _, _⟩, rfl => rfl\n\n"}
{"name":"Homeomorph.homeomorph_mk_coe","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\na : Equiv X Y\nb : Continuous a.toFun\nc : Continuous a.invFun\n⊢ Eq ⇑{ toEquiv := a, continuous_toFun := b, continuous_invFun := c } ⇑a","decl":"@[simp] theorem homeomorph_mk_coe (a : X ≃ Y) (b c) : (Homeomorph.mk a b c : X → Y) = a :=\n  rfl\n\n"}
{"name":"Homeomorph.symm_symm","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Eq h.symm.symm h","decl":"@[simp] theorem symm_symm (h : X ≃ₜ Y) : h.symm.symm = h := rfl\n\n"}
{"name":"Homeomorph.symm_bijective","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\n⊢ Function.Bijective Homeomorph.symm","decl":"theorem symm_bijective : Function.Bijective (Homeomorph.symm : (X ≃ₜ Y) → Y ≃ₜ X) :=\n  Function.bijective_iff_has_inverse.mpr ⟨_, symm_symm, symm_symm⟩\n\n"}
{"name":"Homeomorph.coe_toEquiv","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Eq ⇑h.toEquiv ⇑h","decl":"@[simp]\ntheorem coe_toEquiv (h : X ≃ₜ Y) : ⇑h.toEquiv = h :=\n  rfl\n\n"}
{"name":"Homeomorph.coe_symm_toEquiv","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Eq ⇑h.symm ⇑h.symm","decl":"@[simp]\ntheorem coe_symm_toEquiv (h : X ≃ₜ Y) : ⇑h.toEquiv.symm = h.symm :=\n  rfl\n\n"}
{"name":"Homeomorph.ext","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh h' : Homeomorph X Y\nH : ∀ (x : X), Eq (h x) (h' x)\n⊢ Eq h h'","decl":"@[ext]\ntheorem ext {h h' : X ≃ₜ Y} (H : ∀ x, h x = h' x) : h = h' :=\n  DFunLike.ext _ _ H\n\n"}
{"name":"Homeomorph.ext_iff","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh h' : Homeomorph X Y\n⊢ Iff (Eq h h') (∀ (x : X), Eq (h x) (h' x))","decl":"@[ext]\ntheorem ext {h h' : X ≃ₜ Y} (H : ∀ x, h x = h' x) : h = h' :=\n  DFunLike.ext _ _ H\n\n"}
{"name":"Homeomorph.refl_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_7\ninst✝ : TopologicalSpace X\n⊢ Eq (⇑(Homeomorph.refl X)) id","decl":"/-- Identity map as a homeomorphism. -/\n@[simps! (config := .asFn) apply]\nprotected def refl (X : Type*) [TopologicalSpace X] : X ≃ₜ X where\n  continuous_toFun := continuous_id\n  continuous_invFun := continuous_id\n  toEquiv := Equiv.refl X\n\n"}
{"name":"Homeomorph.trans_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\nh₁ : Homeomorph X Y\nh₂ : Homeomorph Y Z\nx : X\n⊢ Eq ((h₁.trans h₂) x) (h₂ (h₁ x))","decl":"@[simp]\ntheorem trans_apply (h₁ : X ≃ₜ Y) (h₂ : Y ≃ₜ Z) (x : X) : h₁.trans h₂ x = h₂ (h₁ x) :=\n  rfl\n\n"}
{"name":"Homeomorph.symm_trans_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\nf : Homeomorph X Y\ng : Homeomorph Y Z\nz : Z\n⊢ Eq ((f.trans g).symm z) (f.symm (g.symm z))","decl":"@[simp]\ntheorem symm_trans_apply (f : X ≃ₜ Y) (g : Y ≃ₜ Z) (z : Z) :\n    (f.trans g).symm z = f.symm (g.symm z) := rfl\n\n"}
{"name":"Homeomorph.homeomorph_mk_coe_symm","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\na : Equiv X Y\nb : Continuous a.toFun\nc : Continuous a.invFun\n⊢ Eq ⇑{ toEquiv := a, continuous_toFun := b, continuous_invFun := c }.symm ⇑a.symm","decl":"@[simp]\ntheorem homeomorph_mk_coe_symm (a : X ≃ Y) (b c) :\n    ((Homeomorph.mk a b c).symm : Y → X) = a.symm :=\n  rfl\n\n"}
{"name":"Homeomorph.refl_symm","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\n⊢ Eq (Homeomorph.refl X).symm (Homeomorph.refl X)","decl":"@[simp]\ntheorem refl_symm : (Homeomorph.refl X).symm = Homeomorph.refl X :=\n  rfl\n\n"}
{"name":"Homeomorph.continuous","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Continuous ⇑h","decl":"@[continuity, fun_prop]\nprotected theorem continuous (h : X ≃ₜ Y) : Continuous h :=\n  h.continuous_toFun\n\n-- otherwise `by continuity` can't prove continuity of `h.to_equiv.symm`\n"}
{"name":"Homeomorph.continuous_symm","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Continuous ⇑h.symm","decl":"@[continuity]\nprotected theorem continuous_symm (h : X ≃ₜ Y) : Continuous h.symm :=\n  h.continuous_invFun\n\n"}
{"name":"Homeomorph.apply_symm_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\ny : Y\n⊢ Eq (h (h.symm y)) y","decl":"@[simp]\ntheorem apply_symm_apply (h : X ≃ₜ Y) (y : Y) : h (h.symm y) = y :=\n  h.toEquiv.apply_symm_apply y\n\n"}
{"name":"Homeomorph.symm_apply_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\nx : X\n⊢ Eq (h.symm (h x)) x","decl":"@[simp]\ntheorem symm_apply_apply (h : X ≃ₜ Y) (x : X) : h.symm (h x) = x :=\n  h.toEquiv.symm_apply_apply x\n\n"}
{"name":"Homeomorph.self_trans_symm","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Eq (h.trans h.symm) (Homeomorph.refl X)","decl":"@[simp]\ntheorem self_trans_symm (h : X ≃ₜ Y) : h.trans h.symm = Homeomorph.refl X := by\n  ext\n  apply symm_apply_apply\n\n"}
{"name":"Homeomorph.symm_trans_self","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Eq (h.symm.trans h) (Homeomorph.refl Y)","decl":"@[simp]\ntheorem symm_trans_self (h : X ≃ₜ Y) : h.symm.trans h = Homeomorph.refl Y := by\n  ext\n  apply apply_symm_apply\n\n"}
{"name":"Homeomorph.bijective","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Function.Bijective ⇑h","decl":"protected theorem bijective (h : X ≃ₜ Y) : Function.Bijective h :=\n  h.toEquiv.bijective\n\n"}
{"name":"Homeomorph.injective","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Function.Injective ⇑h","decl":"protected theorem injective (h : X ≃ₜ Y) : Function.Injective h :=\n  h.toEquiv.injective\n\n"}
{"name":"Homeomorph.surjective","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Function.Surjective ⇑h","decl":"protected theorem surjective (h : X ≃ₜ Y) : Function.Surjective h :=\n  h.toEquiv.surjective\n\n"}
{"name":"Homeomorph.symm_comp_self","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Eq (Function.comp ⇑h.symm ⇑h) id","decl":"@[simp]\ntheorem symm_comp_self (h : X ≃ₜ Y) : h.symm ∘ h = id :=\n  funext h.symm_apply_apply\n\n"}
{"name":"Homeomorph.self_comp_symm","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Eq (Function.comp ⇑h ⇑h.symm) id","decl":"@[simp]\ntheorem self_comp_symm (h : X ≃ₜ Y) : h ∘ h.symm = id :=\n  funext h.apply_symm_apply\n\n"}
{"name":"Homeomorph.range_coe","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Eq (Set.range ⇑h) Set.univ","decl":"@[simp]\ntheorem range_coe (h : X ≃ₜ Y) : range h = univ :=\n  h.surjective.range_eq\n\n"}
{"name":"Homeomorph.image_symm","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Eq (Set.image ⇑h.symm) (Set.preimage ⇑h)","decl":"theorem image_symm (h : X ≃ₜ Y) : image h.symm = preimage h :=\n  funext h.symm.toEquiv.image_eq_preimage\n\n"}
{"name":"Homeomorph.preimage_symm","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Eq (Set.preimage ⇑h.symm) (Set.image ⇑h)","decl":"theorem preimage_symm (h : X ≃ₜ Y) : preimage h.symm = image h :=\n  (funext h.toEquiv.image_eq_preimage).symm\n\n"}
{"name":"Homeomorph.image_preimage","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\ns : Set Y\n⊢ Eq (Set.image (⇑h) (Set.preimage (⇑h) s)) s","decl":"@[simp]\ntheorem image_preimage (h : X ≃ₜ Y) (s : Set Y) : h '' (h ⁻¹' s) = s :=\n  h.toEquiv.image_preimage s\n\n"}
{"name":"Homeomorph.preimage_image","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\ns : Set X\n⊢ Eq (Set.preimage (⇑h) (Set.image (⇑h) s)) s","decl":"@[simp]\ntheorem preimage_image (h : X ≃ₜ Y) (s : Set X) : h ⁻¹' (h '' s) = s :=\n  h.toEquiv.preimage_image s\n\n"}
{"name":"Homeomorph.image_eq_preimage","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\ns : Set X\n⊢ Eq (Set.image (⇑h) s) (Set.preimage (⇑h.symm) s)","decl":"theorem image_eq_preimage (h : X ≃ₜ Y) (s : Set X) : h '' s = h.symm ⁻¹' s :=\n  h.toEquiv.image_eq_preimage s\n\n"}
{"name":"Homeomorph.image_compl","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\ns : Set X\n⊢ Eq (Set.image (⇑h) (HasCompl.compl s)) (HasCompl.compl (Set.image (⇑h) s))","decl":"lemma image_compl (h : X ≃ₜ Y) (s : Set X) : h '' (sᶜ) = (h '' s)ᶜ :=\n  h.toEquiv.image_compl s\n\n"}
{"name":"Homeomorph.isInducing","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Topology.IsInducing ⇑h","decl":"lemma isInducing (h : X ≃ₜ Y) : IsInducing h :=\n  .of_comp h.continuous h.symm.continuous <| by simp only [symm_comp_self, IsInducing.id]\n\n"}
{"name":"Homeomorph.inducing","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Topology.IsInducing ⇑h","decl":"@[deprecated (since := \"2024-10-28\")] alias inducing := isInducing\n\n"}
{"name":"Homeomorph.induced_eq","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Eq (TopologicalSpace.induced (⇑h) inst✝) inst✝¹","decl":"theorem induced_eq (h : X ≃ₜ Y) : TopologicalSpace.induced h ‹_› = ‹_› := h.isInducing.1.symm\n\n"}
{"name":"Homeomorph.isQuotientMap","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Topology.IsQuotientMap ⇑h","decl":"theorem isQuotientMap (h : X ≃ₜ Y) : IsQuotientMap h :=\n  IsQuotientMap.of_comp h.symm.continuous h.continuous <| by\n    simp only [self_comp_symm, IsQuotientMap.id]\n\n"}
{"name":"Homeomorph.quotientMap","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Topology.IsQuotientMap ⇑h","decl":"@[deprecated (since := \"2024-10-22\")]\nalias quotientMap := isQuotientMap\n\n"}
{"name":"Homeomorph.coinduced_eq","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Eq (TopologicalSpace.coinduced (⇑h) inst✝¹) inst✝","decl":"theorem coinduced_eq (h : X ≃ₜ Y) : TopologicalSpace.coinduced h ‹_› = ‹_› :=\n  h.isQuotientMap.2.symm\n\n"}
{"name":"Homeomorph.isEmbedding","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Topology.IsEmbedding ⇑h","decl":"theorem isEmbedding (h : X ≃ₜ Y) : IsEmbedding h := ⟨h.isInducing, h.injective⟩\n\n"}
{"name":"Homeomorph.embedding","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Topology.IsEmbedding ⇑h","decl":"@[deprecated (since := \"2024-10-26\")]\nalias embedding := isEmbedding\n\n"}
{"name":"Homeomorph.secondCountableTopology","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : SecondCountableTopology Y\nh : Homeomorph X Y\n⊢ SecondCountableTopology X","decl":"protected theorem secondCountableTopology [SecondCountableTopology Y]\n    (h : X ≃ₜ Y) : SecondCountableTopology X :=\n  h.isInducing.secondCountableTopology\n\n"}
{"name":"Homeomorph.isCompact_image","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ns : Set X\nh : Homeomorph X Y\n⊢ Iff (IsCompact (Set.image (⇑h) s)) (IsCompact s)","decl":"/-- If `h : X → Y` is a homeomorphism, `h(s)` is compact iff `s` is. -/\n@[simp]\ntheorem isCompact_image {s : Set X} (h : X ≃ₜ Y) : IsCompact (h '' s) ↔ IsCompact s :=\n  h.isEmbedding.isCompact_iff.symm\n\n"}
{"name":"Homeomorph.isCompact_preimage","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ns : Set Y\nh : Homeomorph X Y\n⊢ Iff (IsCompact (Set.preimage (⇑h) s)) (IsCompact s)","decl":"/-- If `h : X → Y` is a homeomorphism, `h⁻¹(s)` is compact iff `s` is. -/\n@[simp]\ntheorem isCompact_preimage {s : Set Y} (h : X ≃ₜ Y) : IsCompact (h ⁻¹' s) ↔ IsCompact s := by\n  rw [← image_symm]; exact h.symm.isCompact_image\n\n"}
{"name":"Homeomorph.isSigmaCompact_image","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ns : Set X\nh : Homeomorph X Y\n⊢ Iff (IsSigmaCompact (Set.image (⇑h) s)) (IsSigmaCompact s)","decl":"/-- If `h : X → Y` is a homeomorphism, `s` is σ-compact iff `h(s)` is. -/\n@[simp]\ntheorem isSigmaCompact_image {s : Set X} (h : X ≃ₜ Y) :\n    IsSigmaCompact (h '' s) ↔ IsSigmaCompact s :=\n  h.isEmbedding.isSigmaCompact_iff.symm\n\n"}
{"name":"Homeomorph.isSigmaCompact_preimage","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ns : Set Y\nh : Homeomorph X Y\n⊢ Iff (IsSigmaCompact (Set.preimage (⇑h) s)) (IsSigmaCompact s)","decl":"/-- If `h : X → Y` is a homeomorphism, `h⁻¹(s)` is σ-compact iff `s` is. -/\n@[simp]\ntheorem isSigmaCompact_preimage {s : Set Y} (h : X ≃ₜ Y) :\n    IsSigmaCompact (h ⁻¹' s) ↔ IsSigmaCompact s := by\n  rw [← image_symm]; exact h.symm.isSigmaCompact_image\n\n"}
{"name":"Homeomorph.isPreconnected_image","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ns : Set X\nh : Homeomorph X Y\n⊢ Iff (IsPreconnected (Set.image (⇑h) s)) (IsPreconnected s)","decl":"@[simp]\ntheorem isPreconnected_image {s : Set X} (h : X ≃ₜ Y) :\n    IsPreconnected (h '' s) ↔ IsPreconnected s :=\n  ⟨fun hs ↦ by simpa only [image_symm, preimage_image]\n    using hs.image _ h.symm.continuous.continuousOn,\n    fun hs ↦ hs.image _ h.continuous.continuousOn⟩\n\n"}
{"name":"Homeomorph.isPreconnected_preimage","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ns : Set Y\nh : Homeomorph X Y\n⊢ Iff (IsPreconnected (Set.preimage (⇑h) s)) (IsPreconnected s)","decl":"@[simp]\ntheorem isPreconnected_preimage {s : Set Y} (h : X ≃ₜ Y) :\n    IsPreconnected (h ⁻¹' s) ↔ IsPreconnected s := by\n  rw [← image_symm, isPreconnected_image]\n\n"}
{"name":"Homeomorph.isConnected_image","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ns : Set X\nh : Homeomorph X Y\n⊢ Iff (IsConnected (Set.image (⇑h) s)) (IsConnected s)","decl":"@[simp]\ntheorem isConnected_image {s : Set X} (h : X ≃ₜ Y) :\n    IsConnected (h '' s) ↔ IsConnected s :=\n  image_nonempty.and h.isPreconnected_image\n\n"}
{"name":"Homeomorph.isConnected_preimage","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ns : Set Y\nh : Homeomorph X Y\n⊢ Iff (IsConnected (Set.preimage (⇑h) s)) (IsConnected s)","decl":"@[simp]\ntheorem isConnected_preimage {s : Set Y} (h : X ≃ₜ Y) :\n    IsConnected (h ⁻¹' s) ↔ IsConnected s := by\n  rw [← image_symm, isConnected_image]\n\n"}
{"name":"Homeomorph.image_connectedComponentIn","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ns : Set X\nh : Homeomorph X Y\nx : X\nhx : Membership.mem s x\n⊢ Eq (Set.image (⇑h) (connectedComponentIn s x)) (connectedComponentIn (Set.image (⇑h) s) (h x))","decl":"theorem image_connectedComponentIn {s : Set X} (h : X ≃ₜ Y) {x : X} (hx : x ∈ s) :\n    h '' connectedComponentIn s x = connectedComponentIn (h '' s) (h x) := by\n  refine (h.continuous.image_connectedComponentIn_subset hx).antisymm ?_\n  have := h.symm.continuous.image_connectedComponentIn_subset (mem_image_of_mem h hx)\n  rwa [image_subset_iff, h.preimage_symm, h.image_symm, h.preimage_image, h.symm_apply_apply]\n    at this\n\n"}
{"name":"Homeomorph.comap_cocompact","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Eq (Filter.comap (⇑h) (Filter.cocompact Y)) (Filter.cocompact X)","decl":"@[simp]\ntheorem comap_cocompact (h : X ≃ₜ Y) : comap h (cocompact Y) = cocompact X :=\n  (comap_cocompact_le h.continuous).antisymm <|\n    (hasBasis_cocompact.le_basis_iff (hasBasis_cocompact.comap h)).2 fun K hK =>\n      ⟨h ⁻¹' K, h.isCompact_preimage.2 hK, Subset.rfl⟩\n\n"}
{"name":"Homeomorph.map_cocompact","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Eq (Filter.map (⇑h) (Filter.cocompact X)) (Filter.cocompact Y)","decl":"@[simp]\ntheorem map_cocompact (h : X ≃ₜ Y) : map h (cocompact X) = cocompact Y := by\n  rw [← h.comap_cocompact, map_comap_of_surjective h.surjective]\n\n"}
{"name":"Homeomorph.compactSpace","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : CompactSpace X\nh : Homeomorph X Y\n⊢ CompactSpace Y","decl":"protected theorem compactSpace [CompactSpace X] (h : X ≃ₜ Y) : CompactSpace Y where\n  isCompact_univ := h.symm.isCompact_preimage.2 isCompact_univ\n\n"}
{"name":"Homeomorph.t0Space","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : T0Space X\nh : Homeomorph X Y\n⊢ T0Space Y","decl":"protected theorem t0Space [T0Space X] (h : X ≃ₜ Y) : T0Space Y := h.symm.isEmbedding.t0Space\n"}
{"name":"Homeomorph.t1Space","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : T1Space X\nh : Homeomorph X Y\n⊢ T1Space Y","decl":"protected theorem t1Space [T1Space X] (h : X ≃ₜ Y) : T1Space Y := h.symm.isEmbedding.t1Space\n"}
{"name":"Homeomorph.t2Space","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : T2Space X\nh : Homeomorph X Y\n⊢ T2Space Y","decl":"protected theorem t2Space [T2Space X] (h : X ≃ₜ Y) : T2Space Y := h.symm.isEmbedding.t2Space\n"}
{"name":"Homeomorph.t25Space","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : T25Space X\nh : Homeomorph X Y\n⊢ T25Space Y","decl":"protected theorem t25Space [T25Space X] (h : X ≃ₜ Y) : T25Space Y := h.symm.isEmbedding.t25Space\n"}
{"name":"Homeomorph.t3Space","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : T3Space X\nh : Homeomorph X Y\n⊢ T3Space Y","decl":"protected theorem t3Space [T3Space X] (h : X ≃ₜ Y) : T3Space Y := h.symm.isEmbedding.t3Space\n\n"}
{"name":"Homeomorph.isDenseEmbedding","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ IsDenseEmbedding ⇑h","decl":"theorem isDenseEmbedding (h : X ≃ₜ Y) : IsDenseEmbedding h :=\n  { h.isEmbedding with dense := h.surjective.denseRange }\n\n"}
{"name":"Homeomorph.totallyDisconnectedSpace","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\ntdc : TotallyDisconnectedSpace X\n⊢ TotallyDisconnectedSpace Y","decl":"protected lemma totallyDisconnectedSpace (h : X ≃ₜ Y) [tdc : TotallyDisconnectedSpace X] :\n    TotallyDisconnectedSpace Y :=\n  (totallyDisconnectedSpace_iff Y).mpr\n    (h.range_coe ▸ ((IsEmbedding.isTotallyDisconnected_range h.isEmbedding).mpr tdc))\n\n"}
{"name":"Homeomorph.denseEmbedding","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ IsDenseEmbedding ⇑h","decl":"@[deprecated (since := \"2024-09-30\")]\nalias denseEmbedding := isDenseEmbedding\n\n"}
{"name":"Homeomorph.isOpen_preimage","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\ns : Set Y\n⊢ Iff (IsOpen (Set.preimage (⇑h) s)) (IsOpen s)","decl":"@[simp]\ntheorem isOpen_preimage (h : X ≃ₜ Y) {s : Set Y} : IsOpen (h ⁻¹' s) ↔ IsOpen s :=\n  h.isQuotientMap.isOpen_preimage\n\n"}
{"name":"Homeomorph.isOpen_image","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\ns : Set X\n⊢ Iff (IsOpen (Set.image (⇑h) s)) (IsOpen s)","decl":"@[simp]\ntheorem isOpen_image (h : X ≃ₜ Y) {s : Set X} : IsOpen (h '' s) ↔ IsOpen s := by\n  rw [← preimage_symm, isOpen_preimage]\n\n"}
{"name":"Homeomorph.isOpenMap","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ IsOpenMap ⇑h","decl":"protected theorem isOpenMap (h : X ≃ₜ Y) : IsOpenMap h := fun _ => h.isOpen_image.2\n\n"}
{"name":"Homeomorph.isClosed_preimage","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\ns : Set Y\n⊢ Iff (IsClosed (Set.preimage (⇑h) s)) (IsClosed s)","decl":"@[simp]\ntheorem isClosed_preimage (h : X ≃ₜ Y) {s : Set Y} : IsClosed (h ⁻¹' s) ↔ IsClosed s := by\n  simp only [← isOpen_compl_iff, ← preimage_compl, isOpen_preimage]\n\n"}
{"name":"Homeomorph.isClosed_image","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\ns : Set X\n⊢ Iff (IsClosed (Set.image (⇑h) s)) (IsClosed s)","decl":"@[simp]\ntheorem isClosed_image (h : X ≃ₜ Y) {s : Set X} : IsClosed (h '' s) ↔ IsClosed s := by\n  rw [← preimage_symm, isClosed_preimage]\n\n"}
{"name":"Homeomorph.isClosedMap","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ IsClosedMap ⇑h","decl":"protected theorem isClosedMap (h : X ≃ₜ Y) : IsClosedMap h := fun _ => h.isClosed_image.2\n\n"}
{"name":"Homeomorph.isOpenEmbedding","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Topology.IsOpenEmbedding ⇑h","decl":"theorem isOpenEmbedding (h : X ≃ₜ Y) : IsOpenEmbedding h :=\n  .of_isEmbedding_isOpenMap h.isEmbedding h.isOpenMap\n\n"}
{"name":"Homeomorph.openEmbedding","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Topology.IsOpenEmbedding ⇑h","decl":"@[deprecated (since := \"2024-10-18\")]\nalias openEmbedding := isOpenEmbedding\n\n"}
{"name":"Homeomorph.isClosedEmbedding","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Topology.IsClosedEmbedding ⇑h","decl":"theorem isClosedEmbedding (h : X ≃ₜ Y) : IsClosedEmbedding h :=\n  .of_isEmbedding_isClosedMap h.isEmbedding h.isClosedMap\n\n"}
{"name":"Homeomorph.closedEmbedding","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Topology.IsClosedEmbedding ⇑h","decl":"@[deprecated (since := \"2024-10-20\")]\nalias closedEmbedding := isClosedEmbedding\n\n"}
{"name":"Homeomorph.normalSpace","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : NormalSpace X\nh : Homeomorph X Y\n⊢ NormalSpace Y","decl":"protected theorem normalSpace [NormalSpace X] (h : X ≃ₜ Y) : NormalSpace Y :=\n  h.symm.isClosedEmbedding.normalSpace\n\n"}
{"name":"Homeomorph.t4Space","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : T4Space X\nh : Homeomorph X Y\n⊢ T4Space Y","decl":"protected theorem t4Space [T4Space X] (h : X ≃ₜ Y) : T4Space Y := h.symm.isClosedEmbedding.t4Space\n"}
{"name":"Homeomorph.t5Space","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : T5Space X\nh : Homeomorph X Y\n⊢ T5Space Y","decl":"protected theorem t5Space [T5Space X] (h : X ≃ₜ Y) : T5Space Y := h.symm.isClosedEmbedding.t5Space\n\n"}
{"name":"Homeomorph.preimage_closure","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\ns : Set Y\n⊢ Eq (Set.preimage (⇑h) (closure s)) (closure (Set.preimage (⇑h) s))","decl":"theorem preimage_closure (h : X ≃ₜ Y) (s : Set Y) : h ⁻¹' closure s = closure (h ⁻¹' s) :=\n  h.isOpenMap.preimage_closure_eq_closure_preimage h.continuous _\n\n"}
{"name":"Homeomorph.image_closure","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\ns : Set X\n⊢ Eq (Set.image (⇑h) (closure s)) (closure (Set.image (⇑h) s))","decl":"theorem image_closure (h : X ≃ₜ Y) (s : Set X) : h '' closure s = closure (h '' s) := by\n  rw [← preimage_symm, preimage_closure]\n\n"}
{"name":"Homeomorph.preimage_interior","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\ns : Set Y\n⊢ Eq (Set.preimage (⇑h) (interior s)) (interior (Set.preimage (⇑h) s))","decl":"theorem preimage_interior (h : X ≃ₜ Y) (s : Set Y) : h ⁻¹' interior s = interior (h ⁻¹' s) :=\n  h.isOpenMap.preimage_interior_eq_interior_preimage h.continuous _\n\n"}
{"name":"Homeomorph.image_interior","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\ns : Set X\n⊢ Eq (Set.image (⇑h) (interior s)) (interior (Set.image (⇑h) s))","decl":"theorem image_interior (h : X ≃ₜ Y) (s : Set X) : h '' interior s = interior (h '' s) := by\n  rw [← preimage_symm, preimage_interior]\n\n"}
{"name":"Homeomorph.preimage_frontier","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\ns : Set Y\n⊢ Eq (Set.preimage (⇑h) (frontier s)) (frontier (Set.preimage (⇑h) s))","decl":"theorem preimage_frontier (h : X ≃ₜ Y) (s : Set Y) : h ⁻¹' frontier s = frontier (h ⁻¹' s) :=\n  h.isOpenMap.preimage_frontier_eq_frontier_preimage h.continuous _\n\n"}
{"name":"Homeomorph.image_frontier","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\ns : Set X\n⊢ Eq (Set.image (⇑h) (frontier s)) (frontier (Set.image (⇑h) s))","decl":"theorem image_frontier (h : X ≃ₜ Y) (s : Set X) : h '' frontier s = frontier (h '' s) := by\n  rw [← preimage_symm, preimage_frontier]\n\n"}
{"name":"HasCompactSupport.comp_homeomorph","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\nM : Type u_7\ninst✝ : Zero M\nf : Y → M\nhf : HasCompactSupport f\nφ : Homeomorph X Y\n⊢ HasCompactSupport (Function.comp f ⇑φ)","decl":"@[to_additive]\ntheorem _root_.HasCompactMulSupport.comp_homeomorph {M} [One M] {f : Y → M}\n    (hf : HasCompactMulSupport f) (φ : X ≃ₜ Y) : HasCompactMulSupport (f ∘ φ) :=\n  hf.comp_isClosedEmbedding φ.isClosedEmbedding\n\n"}
{"name":"HasCompactMulSupport.comp_homeomorph","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\nM : Type u_7\ninst✝ : One M\nf : Y → M\nhf : HasCompactMulSupport f\nφ : Homeomorph X Y\n⊢ HasCompactMulSupport (Function.comp f ⇑φ)","decl":"@[to_additive]\ntheorem _root_.HasCompactMulSupport.comp_homeomorph {M} [One M] {f : Y → M}\n    (hf : HasCompactMulSupport f) (φ : X ≃ₜ Y) : HasCompactMulSupport (f ∘ φ) :=\n  hf.comp_isClosedEmbedding φ.isClosedEmbedding\n\n"}
{"name":"Homeomorph.map_nhds_eq","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\nx : X\n⊢ Eq (Filter.map (⇑h) (nhds x)) (nhds (h x))","decl":"@[simp]\ntheorem map_nhds_eq (h : X ≃ₜ Y) (x : X) : map h (𝓝 x) = 𝓝 (h x) :=\n  h.isEmbedding.map_nhds_of_mem _ (by simp)\n\n"}
{"name":"Homeomorph.map_punctured_nhds_eq","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\nx : X\n⊢ Eq (Filter.map (⇑h) (nhdsWithin x (HasCompl.compl (Singleton.singleton x)))) (nhdsWithin (h x) (HasCompl.compl (Singleton.singleton (h x))))","decl":"@[simp]\ntheorem map_punctured_nhds_eq (h : X ≃ₜ Y) (x : X) : map h (𝓝[≠] x) = 𝓝[≠] (h x) := by\n  convert h.isEmbedding.map_nhdsWithin_eq ({x}ᶜ) x\n  rw [h.image_compl, Set.image_singleton]\n\n"}
{"name":"Homeomorph.symm_map_nhds_eq","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\nx : X\n⊢ Eq (Filter.map (⇑h.symm) (nhds (h x))) (nhds x)","decl":"theorem symm_map_nhds_eq (h : X ≃ₜ Y) (x : X) : map h.symm (𝓝 (h x)) = 𝓝 x := by\n  rw [h.symm.map_nhds_eq, h.symm_apply_apply]\n\n"}
{"name":"Homeomorph.nhds_eq_comap","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\nx : X\n⊢ Eq (nhds x) (Filter.comap (⇑h) (nhds (h x)))","decl":"theorem nhds_eq_comap (h : X ≃ₜ Y) (x : X) : 𝓝 x = comap h (𝓝 (h x)) :=\n  h.isInducing.nhds_eq_comap x\n\n"}
{"name":"Homeomorph.comap_nhds_eq","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\ny : Y\n⊢ Eq (Filter.comap (⇑h) (nhds y)) (nhds (h.symm y))","decl":"@[simp]\ntheorem comap_nhds_eq (h : X ≃ₜ Y) (y : Y) : comap h (𝓝 y) = 𝓝 (h.symm y) := by\n  rw [h.nhds_eq_comap, h.apply_symm_apply]\n\n"}
{"name":"Homeomorph.comap_coclosedCompact","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Eq (Filter.comap (⇑h) (Filter.coclosedCompact Y)) (Filter.coclosedCompact X)","decl":"@[simp]\ntheorem comap_coclosedCompact (h : X ≃ₜ Y) : comap h (coclosedCompact Y) = coclosedCompact X :=\n  (hasBasis_coclosedCompact.comap h).eq_of_same_basis <| by\n    simpa [comp_def] using hasBasis_coclosedCompact.comp_surjective h.injective.preimage_surjective\n\n"}
{"name":"Homeomorph.map_coclosedCompact","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Eq (Filter.map (⇑h) (Filter.coclosedCompact X)) (Filter.coclosedCompact Y)","decl":"@[simp]\ntheorem map_coclosedCompact (h : X ≃ₜ Y) : map h (coclosedCompact X) = coclosedCompact Y := by\n  rw [← h.comap_coclosedCompact, map_comap_of_surjective h.surjective]\n\n"}
{"name":"Homeomorph.locallyConnectedSpace","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ni : LocallyConnectedSpace Y\nh : Homeomorph X Y\n⊢ LocallyConnectedSpace X","decl":"/-- If the codomain of a homeomorphism is a locally connected space, then the domain is also\na locally connected space. -/\ntheorem locallyConnectedSpace [i : LocallyConnectedSpace Y] (h : X ≃ₜ Y) :\n    LocallyConnectedSpace X := by\n  have : ∀ x, (𝓝 x).HasBasis (fun s ↦ IsOpen s ∧ h x ∈ s ∧ IsConnected s)\n      (h.symm '' ·) := fun x ↦ by\n    rw [← h.symm_map_nhds_eq]\n    exact (i.1 _).map _\n  refine locallyConnectedSpace_of_connected_bases _ _ this fun _ _ hs ↦ ?_\n  exact hs.2.2.2.image _ h.symm.continuous.continuousOn\n\n"}
{"name":"Homeomorph.locallyCompactSpace_iff","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Iff (LocallyCompactSpace X) (LocallyCompactSpace Y)","decl":"/-- The codomain of a homeomorphism is a locally compact space if and only if\nthe domain is a locally compact space. -/\ntheorem locallyCompactSpace_iff (h : X ≃ₜ Y) :\n    LocallyCompactSpace X ↔ LocallyCompactSpace Y := by\n  exact ⟨fun _ => h.symm.isOpenEmbedding.locallyCompactSpace,\n    fun _ => h.isClosedEmbedding.locallyCompactSpace⟩\n\n"}
{"name":"Homeomorph.homeomorphOfContinuousOpen_toEquiv","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : Equiv X Y\nh₁ : Continuous ⇑e\nh₂ : IsOpenMap ⇑e\n⊢ Eq (Homeomorph.homeomorphOfContinuousOpen e h₁ h₂).toEquiv e","decl":"/-- If a bijective map `e : X ≃ Y` is continuous and open, then it is a homeomorphism. -/\n@[simps toEquiv]\ndef homeomorphOfContinuousOpen (e : X ≃ Y) (h₁ : Continuous e) (h₂ : IsOpenMap e) : X ≃ₜ Y where\n  continuous_toFun := h₁\n  continuous_invFun := e.continuous_symm_iff.2 h₂\n  toEquiv := e\n\n"}
{"name":"Homeomorph.homeomorphOfContinuousOpen_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : Equiv X Y\nh₁ : Continuous ⇑e\nh₂ : IsOpenMap ⇑e\n⊢ Eq ⇑(Homeomorph.homeomorphOfContinuousOpen e h₁ h₂) ⇑e","decl":"@[simp]\ntheorem homeomorphOfContinuousOpen_apply (e : X ≃ Y) (h₁ : Continuous e) (h₂ : IsOpenMap e) :\n    ⇑(homeomorphOfContinuousOpen e h₁ h₂) = e := rfl\n\n"}
{"name":"Homeomorph.homeomorphOfContinuousOpen_symm_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : Equiv X Y\nh₁ : Continuous ⇑e\nh₂ : IsOpenMap ⇑e\n⊢ Eq ⇑(Homeomorph.homeomorphOfContinuousOpen e h₁ h₂).symm ⇑e.symm","decl":"@[simp]\ntheorem homeomorphOfContinuousOpen_symm_apply (e : X ≃ Y) (h₁ : Continuous e) (h₂ : IsOpenMap e) :\n    ⇑(homeomorphOfContinuousOpen e h₁ h₂).symm = e.symm := rfl\n\n"}
{"name":"Homeomorph.comp_continuousOn_iff","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\nh : Homeomorph X Y\nf : Z → X\ns : Set Z\n⊢ Iff (ContinuousOn (Function.comp (⇑h) f) s) (ContinuousOn f s)","decl":"@[simp]\ntheorem comp_continuousOn_iff (h : X ≃ₜ Y) (f : Z → X) (s : Set Z) :\n    ContinuousOn (h ∘ f) s ↔ ContinuousOn f s :=\n  h.isInducing.continuousOn_iff.symm\n\n"}
{"name":"Homeomorph.comp_continuous_iff","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\nh : Homeomorph X Y\nf : Z → X\n⊢ Iff (Continuous (Function.comp (⇑h) f)) (Continuous f)","decl":"@[simp]\ntheorem comp_continuous_iff (h : X ≃ₜ Y) {f : Z → X} : Continuous (h ∘ f) ↔ Continuous f :=\n  h.isInducing.continuous_iff.symm\n\n"}
{"name":"Homeomorph.comp_continuous_iff'","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\nh : Homeomorph X Y\nf : Y → Z\n⊢ Iff (Continuous (Function.comp f ⇑h)) (Continuous f)","decl":"@[simp]\ntheorem comp_continuous_iff' (h : X ≃ₜ Y) {f : Y → Z} : Continuous (f ∘ h) ↔ Continuous f :=\n  h.isQuotientMap.continuous_iff.symm\n\n"}
{"name":"Homeomorph.comp_continuousAt_iff","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\nh : Homeomorph X Y\nf : Z → X\nz : Z\n⊢ Iff (ContinuousAt (Function.comp (⇑h) f) z) (ContinuousAt f z)","decl":"theorem comp_continuousAt_iff (h : X ≃ₜ Y) (f : Z → X) (z : Z) :\n    ContinuousAt (h ∘ f) z ↔ ContinuousAt f z :=\n  h.isInducing.continuousAt_iff.symm\n\n"}
{"name":"Homeomorph.comp_continuousAt_iff'","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\nh : Homeomorph X Y\nf : Y → Z\nx : X\n⊢ Iff (ContinuousAt (Function.comp f ⇑h) x) (ContinuousAt f (h x))","decl":"theorem comp_continuousAt_iff' (h : X ≃ₜ Y) (f : Y → Z) (x : X) :\n    ContinuousAt (f ∘ h) x ↔ ContinuousAt f (h x) :=\n  h.isInducing.continuousAt_iff' (by simp)\n\n"}
{"name":"Homeomorph.comp_continuousWithinAt_iff","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\nh : Homeomorph X Y\nf : Z → X\ns : Set Z\nz : Z\n⊢ Iff (ContinuousWithinAt f s z) (ContinuousWithinAt (Function.comp (⇑h) f) s z)","decl":"theorem comp_continuousWithinAt_iff (h : X ≃ₜ Y) (f : Z → X) (s : Set Z) (z : Z) :\n    ContinuousWithinAt f s z ↔ ContinuousWithinAt (h ∘ f) s z :=\n  h.isInducing.continuousWithinAt_iff\n\n"}
{"name":"Homeomorph.comp_isOpenMap_iff","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\nh : Homeomorph X Y\nf : Z → X\n⊢ Iff (IsOpenMap (Function.comp (⇑h) f)) (IsOpenMap f)","decl":"@[simp]\ntheorem comp_isOpenMap_iff (h : X ≃ₜ Y) {f : Z → X} : IsOpenMap (h ∘ f) ↔ IsOpenMap f := by\n  refine ⟨?_, fun hf => h.isOpenMap.comp hf⟩\n  intro hf\n  rw [← Function.id_comp f, ← h.symm_comp_self, Function.comp_assoc]\n  exact h.symm.isOpenMap.comp hf\n\n"}
{"name":"Homeomorph.comp_isOpenMap_iff'","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\nh : Homeomorph X Y\nf : Y → Z\n⊢ Iff (IsOpenMap (Function.comp f ⇑h)) (IsOpenMap f)","decl":"@[simp]\ntheorem comp_isOpenMap_iff' (h : X ≃ₜ Y) {f : Y → Z} : IsOpenMap (f ∘ h) ↔ IsOpenMap f := by\n  refine ⟨?_, fun hf => hf.comp h.isOpenMap⟩\n  intro hf\n  rw [← Function.comp_id f, ← h.self_comp_symm, ← Function.comp_assoc]\n  exact hf.comp h.symm.isOpenMap\n\n"}
{"name":"Homeomorph.subtype_symm_apply_coe","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\np : X → Prop\nq : Y → Prop\nh : Homeomorph X Y\nh_iff : ∀ (x : X), Iff (p x) (q (h x))\nb : Subtype fun b => q b\n⊢ Eq (↑((h.subtype h_iff).symm b)) (h.symm ↑b)","decl":"/-- A homeomorphism `h : X ≃ₜ Y` lifts to a homeomorphism between subtypes corresponding to\npredicates `p : X → Prop` and `q : Y → Prop` so long as `p = q ∘ h`. -/\n@[simps!]\ndef subtype {p : X → Prop} {q : Y → Prop} (h : X ≃ₜ Y) (h_iff : ∀ x, p x ↔ q (h x)) :\n    {x // p x} ≃ₜ {y // q y} where\n  continuous_toFun := by simpa [Equiv.coe_subtypeEquiv_eq_map] using h.continuous.subtype_map _\n  continuous_invFun := by simpa [Equiv.coe_subtypeEquiv_eq_map] using\n    h.symm.continuous.subtype_map _\n  __ := h.subtypeEquiv h_iff\n\n"}
{"name":"Homeomorph.subtype_apply_coe","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\np : X → Prop\nq : Y → Prop\nh : Homeomorph X Y\nh_iff : ∀ (x : X), Iff (p x) (q (h x))\na : Subtype fun a => p a\n⊢ Eq (↑((h.subtype h_iff) a)) (h ↑a)","decl":"/-- A homeomorphism `h : X ≃ₜ Y` lifts to a homeomorphism between subtypes corresponding to\npredicates `p : X → Prop` and `q : Y → Prop` so long as `p = q ∘ h`. -/\n@[simps!]\ndef subtype {p : X → Prop} {q : Y → Prop} (h : X ≃ₜ Y) (h_iff : ∀ x, p x ↔ q (h x)) :\n    {x // p x} ≃ₜ {y // q y} where\n  continuous_toFun := by simpa [Equiv.coe_subtypeEquiv_eq_map] using h.continuous.subtype_map _\n  continuous_invFun := by simpa [Equiv.coe_subtypeEquiv_eq_map] using\n    h.symm.continuous.subtype_map _\n  __ := h.subtypeEquiv h_iff\n\n"}
{"name":"Homeomorph.subtype_toEquiv","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\np : X → Prop\nq : Y → Prop\nh : Homeomorph X Y\nh_iff : ∀ (x : X), Iff (p x) (q (h x))\n⊢ Eq (h.subtype h_iff).toEquiv (h.subtypeEquiv h_iff)","decl":"@[simp]\nlemma subtype_toEquiv {p : X → Prop} {q : Y → Prop} (h : X ≃ₜ Y) (h_iff : ∀ x, p x ↔ q (h x)) :\n    (h.subtype h_iff).toEquiv = h.toEquiv.subtypeEquiv h_iff :=\n  rfl\n\n"}
{"name":"Homeomorph.prodCongr_symm","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\nX' : Type u_5\nY' : Type u_6\ninst✝¹ : TopologicalSpace X'\ninst✝ : TopologicalSpace Y'\nh₁ : Homeomorph X X'\nh₂ : Homeomorph Y Y'\n⊢ Eq (h₁.prodCongr h₂).symm (h₁.symm.prodCongr h₂.symm)","decl":"@[simp]\ntheorem prodCongr_symm (h₁ : X ≃ₜ X') (h₂ : Y ≃ₜ Y') :\n    (h₁.prodCongr h₂).symm = h₁.symm.prodCongr h₂.symm :=\n  rfl\n\n"}
{"name":"Homeomorph.coe_prodCongr","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\nX' : Type u_5\nY' : Type u_6\ninst✝¹ : TopologicalSpace X'\ninst✝ : TopologicalSpace Y'\nh₁ : Homeomorph X X'\nh₂ : Homeomorph Y Y'\n⊢ Eq (⇑(h₁.prodCongr h₂)) (Prod.map ⇑h₁ ⇑h₂)","decl":"@[simp]\ntheorem coe_prodCongr (h₁ : X ≃ₜ X') (h₂ : Y ≃ₜ Y') : ⇑(h₁.prodCongr h₂) = Prod.map h₁ h₂ :=\n  rfl\n\n-- Commutativity and associativity of the disjoint union of topological spaces,\n-- and the sum with an empty space.\n"}
{"name":"Homeomorph.sumComm_symm","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\n⊢ Eq (Homeomorph.sumComm X Y).symm (Homeomorph.sumComm Y X)","decl":"@[simp]\ntheorem sumComm_symm : (sumComm X Y).symm = sumComm Y X :=\n  rfl\n\n"}
{"name":"Homeomorph.coe_sumComm","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\n⊢ Eq (⇑(Homeomorph.sumComm X Y)) Sum.swap","decl":"@[simp]\ntheorem coe_sumComm : ⇑(sumComm X Y) = Sum.swap :=\n  rfl\n\n"}
{"name":"Homeomorph.continuous_sumAssoc","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\n⊢ Continuous ⇑(Equiv.sumAssoc X Y Z)","decl":"@[continuity, fun_prop]\nlemma continuous_sumAssoc : Continuous (Equiv.sumAssoc X Y Z) :=\n  Continuous.sum_elim (by fun_prop) (by fun_prop)\n\n"}
{"name":"Homeomorph.continuous_sumAssoc_symm","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\n⊢ Continuous ⇑(Equiv.sumAssoc X Y Z).symm","decl":"@[continuity, fun_prop]\nlemma continuous_sumAssoc_symm : Continuous (Equiv.sumAssoc X Y Z).symm :=\n  Continuous.sum_elim (by fun_prop) (by fun_prop)\n\n"}
{"name":"Homeomorph.sumAssoc_toEquiv","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\n⊢ Eq (Homeomorph.sumAssoc X Y Z).toEquiv (Equiv.sumAssoc X Y Z)","decl":"@[simp]\nlemma sumAssoc_toEquiv : (sumAssoc X Y Z).toEquiv = Equiv.sumAssoc X Y Z := rfl\n\n"}
{"name":"Homeomorph.sumSumSumComm_toEquiv","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nW : Type u_3\nZ : Type u_4\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : TopologicalSpace W\ninst✝ : TopologicalSpace Z\n⊢ Eq (Homeomorph.sumSumSumComm X Y W Z).toEquiv (Equiv.sumSumSumComm X Y W Z)","decl":"@[simp]\nlemma sumSumSumComm_toEquiv : (sumSumSumComm X Y W Z).toEquiv = (Equiv.sumSumSumComm X Y W Z) := rfl\n\n"}
{"name":"Homeomorph.sumSumSumComm_symm","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nW : Type u_3\nZ : Type u_4\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : TopologicalSpace W\ninst✝ : TopologicalSpace Z\n⊢ Eq (Homeomorph.sumSumSumComm X Y W Z).symm (Homeomorph.sumSumSumComm X W Y Z)","decl":"@[simp]\nlemma sumSumSumComm_symm : (sumSumSumComm X Y W Z).symm = (sumSumSumComm X W Y Z) := rfl\n\n"}
{"name":"Homeomorph.sumEmpty_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : IsEmpty Y\n⊢ Eq (⇑(Homeomorph.sumEmpty X Y)) (Sum.elim id fun a => isEmptyElim a)","decl":"/-- The sum of `X` with any empty topological space is homeomorphic to `X`. -/\n@[simps! (config := .asFn) apply]\ndef sumEmpty [IsEmpty Y] : X ⊕ Y ≃ₜ X where\n  toEquiv := Equiv.sumEmpty X Y\n  continuous_toFun := Continuous.sum_elim continuous_id (by fun_prop)\n  continuous_invFun := continuous_inl\n\n"}
{"name":"Homeomorph.coe_emptySum","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : IsEmpty Y\n⊢ Eq (Homeomorph.emptySum X Y).toEquiv (Equiv.emptySum Y X)","decl":"@[simp] theorem coe_emptySum [IsEmpty Y] : (emptySum X Y).toEquiv = Equiv.emptySum Y X := rfl\n\n"}
{"name":"Homeomorph.prodComm_symm","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\n⊢ Eq (Homeomorph.prodComm X Y).symm (Homeomorph.prodComm Y X)","decl":"@[simp]\ntheorem prodComm_symm : (prodComm X Y).symm = prodComm Y X :=\n  rfl\n\n"}
{"name":"Homeomorph.coe_prodComm","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\n⊢ Eq (⇑(Homeomorph.prodComm X Y)) Prod.swap","decl":"@[simp]\ntheorem coe_prodComm : ⇑(prodComm X Y) = Prod.swap :=\n  rfl\n\n"}
{"name":"Homeomorph.prodAssoc_toEquiv","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\n⊢ Eq (Homeomorph.prodAssoc X Y Z).toEquiv (Equiv.prodAssoc X Y Z)","decl":"@[simp]\nlemma prodAssoc_toEquiv : (prodAssoc X Y Z).toEquiv = Equiv.prodAssoc X Y Z := rfl\n\n"}
{"name":"Homeomorph.prodProdProdComm_symm","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nW : Type u_3\nZ : Type u_4\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : TopologicalSpace W\ninst✝ : TopologicalSpace Z\n⊢ Eq (Homeomorph.prodProdProdComm X Y W Z).symm (Homeomorph.prodProdProdComm X W Y Z)","decl":"@[simp]\ntheorem prodProdProdComm_symm : (prodProdProdComm X Y W Z).symm = prodProdProdComm X W Y Z :=\n  rfl\n\n"}
{"name":"Homeomorph.prodPUnit_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\n⊢ Eq ⇑(Homeomorph.prodPUnit X) fun p => p.1","decl":"/-- `X × {*}` is homeomorphic to `X`. -/\n@[simps! (config := .asFn) apply]\ndef prodPUnit : X × PUnit ≃ₜ X where\n  toEquiv := Equiv.prodPUnit X\n  continuous_toFun := continuous_fst\n  continuous_invFun := continuous_id.prod_mk continuous_const\n\n"}
{"name":"Homeomorph.coe_punitProd","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\n⊢ Eq (⇑(Homeomorph.punitProd X)) Prod.snd","decl":"@[simp] theorem coe_punitProd : ⇑(punitProd X) = Prod.snd := rfl\n\n"}
{"name":"Homeomorph.homeomorphOfUnique_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : Unique X\ninst✝ : Unique Y\na✝ : X\n⊢ Eq ((Homeomorph.homeomorphOfUnique X Y) a✝) Inhabited.default","decl":"/-- If both `X` and `Y` have a unique element, then `X ≃ₜ Y`. -/\n@[simps!]\ndef homeomorphOfUnique [Unique X] [Unique Y] : X ≃ₜ Y :=\n  { Equiv.ofUnique X Y with\n    continuous_toFun := continuous_const\n    continuous_invFun := continuous_const }\n\n"}
{"name":"Homeomorph.homeomorphOfUnique_symm_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : Unique X\ninst✝ : Unique Y\na✝ : Y\n⊢ Eq ((Homeomorph.homeomorphOfUnique X Y).symm a✝) Inhabited.default","decl":"/-- If both `X` and `Y` have a unique element, then `X ≃ₜ Y`. -/\n@[simps!]\ndef homeomorphOfUnique [Unique X] [Unique Y] : X ≃ₜ Y :=\n  { Equiv.ofUnique X Y with\n    continuous_toFun := continuous_const\n    continuous_invFun := continuous_const }\n\n"}
{"name":"Homeomorph.piUnique_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"α : Type u_7\ninst✝¹ : Unique α\nf : α → Type u_8\ninst✝ : (x : α) → TopologicalSpace (f x)\n⊢ Eq ⇑(Homeomorph.piUnique f) fun f => f Inhabited.default","decl":"/-- The product `Π t : α, f t` of a family of topological spaces is homeomorphic to the\nspace `f ⬝` when `α` only contains `⬝`.\n\nThis is `Equiv.piUnique` as a `Homeomorph`.\n-/\n@[simps! (config := .asFn)]\ndef piUnique {α : Type*} [Unique α] (f : α → Type*) [∀ x, TopologicalSpace (f x)] :\n    (Π t, f t) ≃ₜ f default :=\n  homeomorphOfContinuousOpen (Equiv.piUnique f) (continuous_apply default) (isOpenMap_eval _)\n\n"}
{"name":"Homeomorph.piUnique_symm_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"α : Type u_7\ninst✝¹ : Unique α\nf : α → Type u_8\ninst✝ : (x : α) → TopologicalSpace (f x)\n⊢ Eq (⇑(Homeomorph.piUnique f).symm) uniqueElim","decl":"/-- The product `Π t : α, f t` of a family of topological spaces is homeomorphic to the\nspace `f ⬝` when `α` only contains `⬝`.\n\nThis is `Equiv.piUnique` as a `Homeomorph`.\n-/\n@[simps! (config := .asFn)]\ndef piUnique {α : Type*} [Unique α] (f : α → Type*) [∀ x, TopologicalSpace (f x)] :\n    (Π t, f t) ≃ₜ f default :=\n  homeomorphOfContinuousOpen (Equiv.piUnique f) (continuous_apply default) (isOpenMap_eval _)\n\n"}
{"name":"Homeomorph.piCongrLeft_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"ι : Type u_7\nι' : Type u_8\nY : ι' → Type u_9\ninst✝ : (j : ι') → TopologicalSpace (Y j)\ne : Equiv ι ι'\na✝ : (b : ι) → Y (e.symm.symm b)\na : ι'\n⊢ Eq ((Homeomorph.piCongrLeft e) a✝ a) ((Equiv.piCongrLeft' Y e.symm).symm a✝ a)","decl":"/-- `Equiv.piCongrLeft` as a homeomorphism: this is the natural homeomorphism\n`Π i, Y (e i) ≃ₜ Π j, Y j` obtained from a bijection `ι ≃ ι'`. -/\n@[simps! apply toEquiv]\ndef piCongrLeft {ι ι' : Type*} {Y : ι' → Type*} [∀ j, TopologicalSpace (Y j)]\n    (e : ι ≃ ι') : (∀ i, Y (e i)) ≃ₜ ∀ j, Y j where\n  continuous_toFun := continuous_pi <| e.forall_congr_right.mp fun i ↦ by\n    simpa only [Equiv.toFun_as_coe, Equiv.piCongrLeft_apply_apply] using continuous_apply i\n  continuous_invFun := Pi.continuous_precomp' e\n  toEquiv := Equiv.piCongrLeft _ e\n\n"}
{"name":"Homeomorph.piCongrLeft_toEquiv","module":"Mathlib.Topology.Homeomorph","initialProofState":"ι : Type u_7\nι' : Type u_8\nY : ι' → Type u_9\ninst✝ : (j : ι') → TopologicalSpace (Y j)\ne : Equiv ι ι'\n⊢ Eq (Homeomorph.piCongrLeft e).toEquiv (Equiv.piCongrLeft Y e)","decl":"/-- `Equiv.piCongrLeft` as a homeomorphism: this is the natural homeomorphism\n`Π i, Y (e i) ≃ₜ Π j, Y j` obtained from a bijection `ι ≃ ι'`. -/\n@[simps! apply toEquiv]\ndef piCongrLeft {ι ι' : Type*} {Y : ι' → Type*} [∀ j, TopologicalSpace (Y j)]\n    (e : ι ≃ ι') : (∀ i, Y (e i)) ≃ₜ ∀ j, Y j where\n  continuous_toFun := continuous_pi <| e.forall_congr_right.mp fun i ↦ by\n    simpa only [Equiv.toFun_as_coe, Equiv.piCongrLeft_apply_apply] using continuous_apply i\n  continuous_invFun := Pi.continuous_precomp' e\n  toEquiv := Equiv.piCongrLeft _ e\n\n"}
{"name":"Homeomorph.piCongrRight_toEquiv","module":"Mathlib.Topology.Homeomorph","initialProofState":"ι : Type u_7\nY₁ : ι → Type u_8\nY₂ : ι → Type u_9\ninst✝¹ : (i : ι) → TopologicalSpace (Y₁ i)\ninst✝ : (i : ι) → TopologicalSpace (Y₂ i)\nF : (i : ι) → Homeomorph (Y₁ i) (Y₂ i)\n⊢ Eq (Homeomorph.piCongrRight F).toEquiv (Equiv.piCongrRight fun i => (F i).toEquiv)","decl":"/-- `Equiv.piCongrRight` as a homeomorphism: this is the natural homeomorphism\n`Π i, Y₁ i ≃ₜ Π j, Y₂ i` obtained from homeomorphisms `Y₁ i ≃ₜ Y₂ i` for each `i`. -/\n@[simps! apply toEquiv]\ndef piCongrRight {ι : Type*} {Y₁ Y₂ : ι → Type*} [∀ i, TopologicalSpace (Y₁ i)]\n    [∀ i, TopologicalSpace (Y₂ i)] (F : ∀ i, Y₁ i ≃ₜ Y₂ i) : (∀ i, Y₁ i) ≃ₜ ∀ i, Y₂ i where\n  continuous_toFun := Pi.continuous_postcomp' fun i ↦ (F i).continuous\n  continuous_invFun := Pi.continuous_postcomp' fun i ↦ (F i).symm.continuous\n  toEquiv := Equiv.piCongrRight fun i => (F i).toEquiv\n\n"}
{"name":"Homeomorph.piCongrRight_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"ι : Type u_7\nY₁ : ι → Type u_8\nY₂ : ι → Type u_9\ninst✝¹ : (i : ι) → TopologicalSpace (Y₁ i)\ninst✝ : (i : ι) → TopologicalSpace (Y₂ i)\nF : (i : ι) → Homeomorph (Y₁ i) (Y₂ i)\na✝ : (i : ι) → Y₁ i\ni : ι\n⊢ Eq ((Homeomorph.piCongrRight F) a✝ i) ((F i) (a✝ i))","decl":"/-- `Equiv.piCongrRight` as a homeomorphism: this is the natural homeomorphism\n`Π i, Y₁ i ≃ₜ Π j, Y₂ i` obtained from homeomorphisms `Y₁ i ≃ₜ Y₂ i` for each `i`. -/\n@[simps! apply toEquiv]\ndef piCongrRight {ι : Type*} {Y₁ Y₂ : ι → Type*} [∀ i, TopologicalSpace (Y₁ i)]\n    [∀ i, TopologicalSpace (Y₂ i)] (F : ∀ i, Y₁ i ≃ₜ Y₂ i) : (∀ i, Y₁ i) ≃ₜ ∀ i, Y₂ i where\n  continuous_toFun := Pi.continuous_postcomp' fun i ↦ (F i).continuous\n  continuous_invFun := Pi.continuous_postcomp' fun i ↦ (F i).symm.continuous\n  toEquiv := Equiv.piCongrRight fun i => (F i).toEquiv\n\n"}
{"name":"Homeomorph.piCongrRight_symm","module":"Mathlib.Topology.Homeomorph","initialProofState":"ι : Type u_7\nY₁ : ι → Type u_8\nY₂ : ι → Type u_9\ninst✝¹ : (i : ι) → TopologicalSpace (Y₁ i)\ninst✝ : (i : ι) → TopologicalSpace (Y₂ i)\nF : (i : ι) → Homeomorph (Y₁ i) (Y₂ i)\n⊢ Eq (Homeomorph.piCongrRight F).symm (Homeomorph.piCongrRight fun i => (F i).symm)","decl":"@[simp]\ntheorem piCongrRight_symm {ι : Type*} {Y₁ Y₂ : ι → Type*} [∀ i, TopologicalSpace (Y₁ i)]\n    [∀ i, TopologicalSpace (Y₂ i)] (F : ∀ i, Y₁ i ≃ₜ Y₂ i) :\n    (piCongrRight F).symm = piCongrRight fun i => (F i).symm :=\n  rfl\n\n"}
{"name":"Homeomorph.piCongr_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"ι₁ : Type u_7\nι₂ : Type u_8\nY₁ : ι₁ → Type u_9\nY₂ : ι₂ → Type u_10\ninst✝¹ : (i₁ : ι₁) → TopologicalSpace (Y₁ i₁)\ninst✝ : (i₂ : ι₂) → TopologicalSpace (Y₂ i₂)\ne : Equiv ι₁ ι₂\nF : (i₁ : ι₁) → Homeomorph (Y₁ i₁) (Y₂ (e i₁))\na✝ : (i : ι₁) → Y₁ i\ni₂ : ι₂\n⊢ Eq ((Homeomorph.piCongr e F) a✝ i₂) (Eq.rec ((F (e.symm i₂)) (a✝ (e.symm i₂))) ⋯)","decl":"/-- `Equiv.piCongr` as a homeomorphism: this is the natural homeomorphism\n`Π i₁, Y₁ i ≃ₜ Π i₂, Y₂ i₂` obtained from a bijection `ι₁ ≃ ι₂` and homeomorphisms\n`Y₁ i₁ ≃ₜ Y₂ (e i₁)` for each `i₁ : ι₁`. -/\n@[simps! apply toEquiv]\ndef piCongr {ι₁ ι₂ : Type*} {Y₁ : ι₁ → Type*} {Y₂ : ι₂ → Type*}\n    [∀ i₁, TopologicalSpace (Y₁ i₁)] [∀ i₂, TopologicalSpace (Y₂ i₂)]\n    (e : ι₁ ≃ ι₂) (F : ∀ i₁, Y₁ i₁ ≃ₜ Y₂ (e i₁)) : (∀ i₁, Y₁ i₁) ≃ₜ ∀ i₂, Y₂ i₂ :=\n  (Homeomorph.piCongrRight F).trans (Homeomorph.piCongrLeft e)\n\n-- Porting note (https://github.com/leanprover-community/mathlib4/issues/11215): TODO: align the order of universes with `Equiv.ulift`\n"}
{"name":"Homeomorph.piCongr_toEquiv","module":"Mathlib.Topology.Homeomorph","initialProofState":"ι₁ : Type u_7\nι₂ : Type u_8\nY₁ : ι₁ → Type u_9\nY₂ : ι₂ → Type u_10\ninst✝¹ : (i₁ : ι₁) → TopologicalSpace (Y₁ i₁)\ninst✝ : (i₂ : ι₂) → TopologicalSpace (Y₂ i₂)\ne : Equiv ι₁ ι₂\nF : (i₁ : ι₁) → Homeomorph (Y₁ i₁) (Y₂ (e i₁))\n⊢ Eq (Homeomorph.piCongr e F).toEquiv ((Equiv.piCongrRight fun i => (F i).toEquiv).trans (Equiv.piCongrLeft Y₂ e))","decl":"/-- `Equiv.piCongr` as a homeomorphism: this is the natural homeomorphism\n`Π i₁, Y₁ i ≃ₜ Π i₂, Y₂ i₂` obtained from a bijection `ι₁ ≃ ι₂` and homeomorphisms\n`Y₁ i₁ ≃ₜ Y₂ (e i₁)` for each `i₁ : ι₁`. -/\n@[simps! apply toEquiv]\ndef piCongr {ι₁ ι₂ : Type*} {Y₁ : ι₁ → Type*} {Y₂ : ι₂ → Type*}\n    [∀ i₁, TopologicalSpace (Y₁ i₁)] [∀ i₂, TopologicalSpace (Y₂ i₂)]\n    (e : ι₁ ≃ ι₂) (F : ∀ i₁, Y₁ i₁ ≃ₜ Y₂ (e i₁)) : (∀ i₁, Y₁ i₁) ≃ₜ ∀ i₂, Y₂ i₂ :=\n  (Homeomorph.piCongrRight F).trans (Homeomorph.piCongrLeft e)\n\n-- Porting note (https://github.com/leanprover-community/mathlib4/issues/11215): TODO: align the order of universes with `Equiv.ulift`\n"}
{"name":"Homeomorph.sumArrowHomeomorphProdArrow_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nι : Type u_7\nι' : Type u_8\nf : Sum ι ι' → X\n⊢ Eq (Homeomorph.sumArrowHomeomorphProdArrow f) { fst := Function.comp f Sum.inl, snd := Function.comp f Sum.inr }","decl":"/-- The natural homeomorphism `(ι ⊕ ι' → X) ≃ₜ (ι → X) × (ι' → X)`.\n`Equiv.sumArrowEquivProdArrow` as a homeomorphism. -/\n@[simps!]\ndef sumArrowHomeomorphProdArrow {ι ι' : Type*} : (ι ⊕ ι' → X) ≃ₜ (ι → X) × (ι' → X)  where\n  toEquiv := Equiv.sumArrowEquivProdArrow _ _ _\n  continuous_toFun := by\n    simp only [Equiv.sumArrowEquivProdArrow, Equiv.coe_fn_mk, continuous_prod_mk]\n    continuity\n  continuous_invFun := continuous_pi fun i ↦ match i with\n    | .inl i => by apply (continuous_apply _).comp' continuous_fst\n    | .inr i => by apply (continuous_apply _).comp' continuous_snd\n\n"}
{"name":"Homeomorph.sumArrowHomeomorphProdArrow_symm_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nι : Type u_7\nι' : Type u_8\np : Prod (ι → X) (ι' → X)\na✝ : Sum ι ι'\n⊢ Eq (Homeomorph.sumArrowHomeomorphProdArrow.symm p a✝) (Sum.elim p.1 p.2 a✝)","decl":"/-- The natural homeomorphism `(ι ⊕ ι' → X) ≃ₜ (ι → X) × (ι' → X)`.\n`Equiv.sumArrowEquivProdArrow` as a homeomorphism. -/\n@[simps!]\ndef sumArrowHomeomorphProdArrow {ι ι' : Type*} : (ι ⊕ ι' → X) ≃ₜ (ι → X) × (ι' → X)  where\n  toEquiv := Equiv.sumArrowEquivProdArrow _ _ _\n  continuous_toFun := by\n    simp only [Equiv.sumArrowEquivProdArrow, Equiv.coe_fn_mk, continuous_prod_mk]\n    continuity\n  continuous_invFun := continuous_pi fun i ↦ match i with\n    | .inl i => by apply (continuous_apply _).comp' continuous_fst\n    | .inr i => by apply (continuous_apply _).comp' continuous_snd\n\n"}
{"name":"Fin.continuous_append","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nm n : Nat\n⊢ Continuous fun p => Fin.append p.1 p.2","decl":"theorem _root_.Fin.continuous_append (m n : ℕ) :\n    Continuous fun (p : (Fin m → X) × (Fin n → X)) ↦ Fin.append p.1 p.2 := by\n  suffices Continuous (Fin.appendEquiv m n) by exact this\n  rw [Fin.appendEquiv_eq_Homeomorph]\n  exact Homeomorph.continuous_toFun _\n\n"}
{"name":"Fin.appendHomeomorph_symm_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nm n : Nat\nf : Fin (HAdd.hAdd m n) → X\n⊢ Eq ((Fin.appendHomeomorph m n).symm f) { fst := fun i => f (Fin.castAdd n i), snd := fun i => f (Fin.natAdd m i) }","decl":"/-- The natural homeomorphism between `(Fin m → X) × (Fin n → X)` and `Fin (m + n) → X`.\n`Fin.appendEquiv` as a homeomorphism.-/\n@[simps!]\ndef _root_.Fin.appendHomeomorph (m n : ℕ) : (Fin m → X) × (Fin n → X) ≃ₜ (Fin (m + n) → X) where\n  toEquiv := Fin.appendEquiv m n\n  continuous_toFun := Fin.continuous_append m n\n  continuous_invFun := by\n    rw [Fin.appendEquiv_eq_Homeomorph]\n    exact Homeomorph.continuous_invFun _\n\n"}
{"name":"Fin.appendHomeomorph_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nm n : Nat\nfg : Prod (Fin m → X) (Fin n → X)\na✝ : Fin (HAdd.hAdd m n)\n⊢ Eq ((Fin.appendHomeomorph m n) fg a✝) (Fin.append fg.1 fg.2 a✝)","decl":"/-- The natural homeomorphism between `(Fin m → X) × (Fin n → X)` and `Fin (m + n) → X`.\n`Fin.appendEquiv` as a homeomorphism.-/\n@[simps!]\ndef _root_.Fin.appendHomeomorph (m n : ℕ) : (Fin m → X) × (Fin n → X) ≃ₜ (Fin (m + n) → X) where\n  toEquiv := Fin.appendEquiv m n\n  continuous_toFun := Fin.continuous_append m n\n  continuous_invFun := by\n    rw [Fin.appendEquiv_eq_Homeomorph]\n    exact Homeomorph.continuous_invFun _\n\n"}
{"name":"Fin.appendHomeomorph_toEquiv","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nm n : Nat\n⊢ Eq (Fin.appendHomeomorph m n).toEquiv (Fin.appendEquiv m n)","decl":"@[simp]\ntheorem _root_.Fin.appendHomeomorph_toEquiv (m n : ℕ) :\n    (Fin.appendHomeomorph (X := X) m n).toEquiv = Fin.appendEquiv m n :=\n  rfl\n\n"}
{"name":"Homeomorph.sumProdDistrib_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\na✝ : Prod (Sum X Y) Z\n⊢ Eq (Homeomorph.sumProdDistrib a✝) ((Equiv.sumProdDistrib X Y Z) a✝)","decl":"/-- `(X ⊕ Y) × Z` is homeomorphic to `X × Z ⊕ Y × Z`. -/\n@[simps!]\ndef sumProdDistrib : (X ⊕ Y) × Z ≃ₜ (X × Z) ⊕ (Y × Z) :=\n  Homeomorph.symm <|\n    homeomorphOfContinuousOpen (Equiv.sumProdDistrib X Y Z).symm\n        ((continuous_inl.prodMap continuous_id).sum_elim\n          (continuous_inr.prodMap continuous_id)) <|\n      (isOpenMap_inl.prodMap IsOpenMap.id).sum_elim (isOpenMap_inr.prodMap IsOpenMap.id)\n\n"}
{"name":"Homeomorph.sumProdDistrib_symm_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\na✝ : Sum (Prod X Z) (Prod Y Z)\n⊢ Eq (Homeomorph.sumProdDistrib.symm a✝) ((Equiv.sumProdDistrib X Y Z).symm a✝)","decl":"/-- `(X ⊕ Y) × Z` is homeomorphic to `X × Z ⊕ Y × Z`. -/\n@[simps!]\ndef sumProdDistrib : (X ⊕ Y) × Z ≃ₜ (X × Z) ⊕ (Y × Z) :=\n  Homeomorph.symm <|\n    homeomorphOfContinuousOpen (Equiv.sumProdDistrib X Y Z).symm\n        ((continuous_inl.prodMap continuous_id).sum_elim\n          (continuous_inr.prodMap continuous_id)) <|\n      (isOpenMap_inl.prodMap IsOpenMap.id).sum_elim (isOpenMap_inr.prodMap IsOpenMap.id)\n\n"}
{"name":"Homeomorph.sigmaProdDistrib_symm_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"Y : Type u_2\ninst✝¹ : TopologicalSpace Y\nι : Type u_7\nX : ι → Type u_8\ninst✝ : (i : ι) → TopologicalSpace (X i)\na✝ : Sigma fun i => Prod (X i) Y\n⊢ Eq (Homeomorph.sigmaProdDistrib.symm a✝) { fst := ⟨a✝.fst, a✝.snd.1⟩, snd := a✝.snd.2 }","decl":"/-- `(Σ i, X i) × Y` is homeomorphic to `Σ i, (X i × Y)`. -/\n@[simps! apply symm_apply toEquiv]\ndef sigmaProdDistrib : (Σ i, X i) × Y ≃ₜ Σ i, X i × Y :=\n  Homeomorph.symm <|\n    homeomorphOfContinuousOpen (Equiv.sigmaProdDistrib X Y).symm\n      (continuous_sigma fun _ => continuous_sigmaMk.fst'.prod_mk continuous_snd)\n      (isOpenMap_sigma.2 fun _ => isOpenMap_sigmaMk.prodMap IsOpenMap.id)\n\n"}
{"name":"Homeomorph.sigmaProdDistrib_toEquiv","module":"Mathlib.Topology.Homeomorph","initialProofState":"Y : Type u_2\ninst✝¹ : TopologicalSpace Y\nι : Type u_7\nX : ι → Type u_8\ninst✝ : (i : ι) → TopologicalSpace (X i)\n⊢ Eq Homeomorph.sigmaProdDistrib.toEquiv (Equiv.sigmaProdDistrib X Y)","decl":"/-- `(Σ i, X i) × Y` is homeomorphic to `Σ i, (X i × Y)`. -/\n@[simps! apply symm_apply toEquiv]\ndef sigmaProdDistrib : (Σ i, X i) × Y ≃ₜ Σ i, X i × Y :=\n  Homeomorph.symm <|\n    homeomorphOfContinuousOpen (Equiv.sigmaProdDistrib X Y).symm\n      (continuous_sigma fun _ => continuous_sigmaMk.fst'.prod_mk continuous_snd)\n      (isOpenMap_sigma.2 fun _ => isOpenMap_sigmaMk.prodMap IsOpenMap.id)\n\n"}
{"name":"Homeomorph.sigmaProdDistrib_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"Y : Type u_2\ninst✝¹ : TopologicalSpace Y\nι : Type u_7\nX : ι → Type u_8\ninst✝ : (i : ι) → TopologicalSpace (X i)\na✝ : Prod (Sigma fun i => X i) Y\n⊢ Eq (Homeomorph.sigmaProdDistrib a✝) ⟨a✝.1.fst, { fst := a✝.1.snd, snd := a✝.2 }⟩","decl":"/-- `(Σ i, X i) × Y` is homeomorphic to `Σ i, (X i × Y)`. -/\n@[simps! apply symm_apply toEquiv]\ndef sigmaProdDistrib : (Σ i, X i) × Y ≃ₜ Σ i, X i × Y :=\n  Homeomorph.symm <|\n    homeomorphOfContinuousOpen (Equiv.sigmaProdDistrib X Y).symm\n      (continuous_sigma fun _ => continuous_sigmaMk.fst'.prod_mk continuous_snd)\n      (isOpenMap_sigma.2 fun _ => isOpenMap_sigmaMk.prodMap IsOpenMap.id)\n\n"}
{"name":"Homeomorph.funUnique_symm_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"ι : Type u_7\nX : Type u_8\ninst✝¹ : Unique ι\ninst✝ : TopologicalSpace X\n⊢ Eq (⇑(Homeomorph.funUnique ι X).symm) uniqueElim","decl":"/-- If `ι` has a unique element, then `ι → X` is homeomorphic to `X`. -/\n@[simps! (config := .asFn)]\ndef funUnique (ι X : Type*) [Unique ι] [TopologicalSpace X] : (ι → X) ≃ₜ X where\n  toEquiv := Equiv.funUnique ι X\n  continuous_toFun := continuous_apply _\n  continuous_invFun := continuous_pi fun _ => continuous_id\n\n"}
{"name":"Homeomorph.funUnique_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"ι : Type u_7\nX : Type u_8\ninst✝¹ : Unique ι\ninst✝ : TopologicalSpace X\n⊢ Eq ⇑(Homeomorph.funUnique ι X) fun f => f Inhabited.default","decl":"/-- If `ι` has a unique element, then `ι → X` is homeomorphic to `X`. -/\n@[simps! (config := .asFn)]\ndef funUnique (ι X : Type*) [Unique ι] [TopologicalSpace X] : (ι → X) ≃ₜ X where\n  toEquiv := Equiv.funUnique ι X\n  continuous_toFun := continuous_apply _\n  continuous_invFun := continuous_pi fun _ => continuous_id\n\n"}
{"name":"Homeomorph.piFinTwo_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Fin 2 → Type u\ninst✝ : (i : Fin 2) → TopologicalSpace (X i)\n⊢ Eq ⇑(Homeomorph.piFinTwo X) fun f => { fst := f 0, snd := f 1 }","decl":"/-- Homeomorphism between dependent functions `Π i : Fin 2, X i` and `X 0 × X 1`. -/\n@[simps! (config := .asFn)]\ndef piFinTwo.{u} (X : Fin 2 → Type u) [∀ i, TopologicalSpace (X i)] : (∀ i, X i) ≃ₜ X 0 × X 1 where\n  toEquiv := piFinTwoEquiv X\n  continuous_toFun := (continuous_apply 0).prod_mk (continuous_apply 1)\n  continuous_invFun := continuous_pi <| Fin.forall_fin_two.2 ⟨continuous_fst, continuous_snd⟩\n\n"}
{"name":"Homeomorph.piFinTwo_symm_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Fin 2 → Type u\ninst✝ : (i : Fin 2) → TopologicalSpace (X i)\n⊢ Eq ⇑(Homeomorph.piFinTwo X).symm fun p => Fin.cons p.1 (Fin.cons p.2 finZeroElim)","decl":"/-- Homeomorphism between dependent functions `Π i : Fin 2, X i` and `X 0 × X 1`. -/\n@[simps! (config := .asFn)]\ndef piFinTwo.{u} (X : Fin 2 → Type u) [∀ i, TopologicalSpace (X i)] : (∀ i, X i) ≃ₜ X 0 × X 1 where\n  toEquiv := piFinTwoEquiv X\n  continuous_toFun := (continuous_apply 0).prod_mk (continuous_apply 1)\n  continuous_invFun := continuous_pi <| Fin.forall_fin_two.2 ⟨continuous_fst, continuous_snd⟩\n\n"}
{"name":"Homeomorph.finTwoArrow_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\n⊢ Eq ⇑Homeomorph.finTwoArrow fun f => { fst := f 0, snd := f 1 }","decl":"/-- Homeomorphism between `X² = Fin 2 → X` and `X × X`. -/\n@[simps! (config := .asFn)]\ndef finTwoArrow : (Fin 2 → X) ≃ₜ X × X :=\n  { piFinTwo fun _ => X with toEquiv := finTwoArrowEquiv X }\n\n"}
{"name":"Homeomorph.finTwoArrow_symm_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\n⊢ Eq ⇑Homeomorph.finTwoArrow.symm fun x => Matrix.vecCons x.1 (Matrix.vecCons x.2 Matrix.vecEmpty)","decl":"/-- Homeomorphism between `X² = Fin 2 → X` and `X × X`. -/\n@[simps! (config := .asFn)]\ndef finTwoArrow : (Fin 2 → X) ≃ₜ X × X :=\n  { piFinTwo fun _ => X with toEquiv := finTwoArrowEquiv X }\n\n"}
{"name":"Homeomorph.image_symm_apply_coe","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : Homeomorph X Y\ns : Set X\ny : ↑(Set.image (⇑e.toEquiv) s)\n⊢ Eq (↑((e.image s).symm y)) (e.symm ↑y)","decl":"/-- A subset of a topological space is homeomorphic to its image under a homeomorphism.\n-/\n@[simps!]\ndef image (e : X ≃ₜ Y) (s : Set X) : s ≃ₜ e '' s where\n  -- Porting note (https://github.com/leanprover-community/mathlib4/issues/11215): TODO: by continuity!\n  continuous_toFun := e.continuous.continuousOn.restrict_mapsTo (mapsTo_image _ _)\n  continuous_invFun := (e.symm.continuous.comp continuous_subtype_val).codRestrict _\n  toEquiv := e.toEquiv.image s\n\n"}
{"name":"Homeomorph.image_apply_coe","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : Homeomorph X Y\ns : Set X\nx : ↑s\n⊢ Eq (↑((e.image s) x)) (e ↑x)","decl":"/-- A subset of a topological space is homeomorphic to its image under a homeomorphism.\n-/\n@[simps!]\ndef image (e : X ≃ₜ Y) (s : Set X) : s ≃ₜ e '' s where\n  -- Porting note (https://github.com/leanprover-community/mathlib4/issues/11215): TODO: by continuity!\n  continuous_toFun := e.continuous.continuousOn.restrict_mapsTo (mapsTo_image _ _)\n  continuous_invFun := (e.symm.continuous.comp continuous_subtype_val).codRestrict _\n  toEquiv := e.toEquiv.image s\n\n"}
{"name":"Homeomorph.Set.univ_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_7\ninst✝ : TopologicalSpace X\n⊢ Eq (⇑(Homeomorph.Set.univ X)) Subtype.val","decl":"/-- `Set.univ X` is homeomorphic to `X`. -/\n@[simps! (config := .asFn)]\ndef Set.univ (X : Type*) [TopologicalSpace X] : (univ : Set X) ≃ₜ X where\n  toEquiv := Equiv.Set.univ X\n  continuous_toFun := continuous_subtype_val\n  continuous_invFun := continuous_id.subtype_mk _\n\n"}
{"name":"Homeomorph.Set.univ_symm_apply_coe","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_7\ninst✝ : TopologicalSpace X\na : X\n⊢ Eq (↑((Homeomorph.Set.univ X).symm a)) a","decl":"/-- `Set.univ X` is homeomorphic to `X`. -/\n@[simps! (config := .asFn)]\ndef Set.univ (X : Type*) [TopologicalSpace X] : (univ : Set X) ≃ₜ X where\n  toEquiv := Equiv.Set.univ X\n  continuous_toFun := continuous_subtype_val\n  continuous_invFun := continuous_id.subtype_mk _\n\n"}
{"name":"Homeomorph.Set.prod_symm_apply_coe","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ns : Set X\nt : Set Y\nx : Prod (Subtype fun a => s a) (Subtype fun b => t b)\n⊢ Eq ↑((Homeomorph.Set.prod s t).symm x) { fst := ↑x.1, snd := ↑x.2 }","decl":"/-- `s ×ˢ t` is homeomorphic to `s × t`. -/\n@[simps!]\ndef Set.prod (s : Set X) (t : Set Y) : ↥(s ×ˢ t) ≃ₜ s × t where\n  toEquiv := Equiv.Set.prod s t\n  continuous_toFun :=\n    (continuous_subtype_val.fst.subtype_mk _).prod_mk (continuous_subtype_val.snd.subtype_mk _)\n  continuous_invFun :=\n    (continuous_subtype_val.fst'.prod_mk continuous_subtype_val.snd').subtype_mk _\n\n"}
{"name":"Homeomorph.Set.prod_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ns : Set X\nt : Set Y\nx : Subtype fun c => And (s c.1) (t c.2)\n⊢ Eq ((Homeomorph.Set.prod s t) x) { fst := ⟨(↑x).1, ⋯⟩, snd := ⟨(↑x).2, ⋯⟩ }","decl":"/-- `s ×ˢ t` is homeomorphic to `s × t`. -/\n@[simps!]\ndef Set.prod (s : Set X) (t : Set Y) : ↥(s ×ˢ t) ≃ₜ s × t where\n  toEquiv := Equiv.Set.prod s t\n  continuous_toFun :=\n    (continuous_subtype_val.fst.subtype_mk _).prod_mk (continuous_subtype_val.snd.subtype_mk _)\n  continuous_invFun :=\n    (continuous_subtype_val.fst'.prod_mk continuous_subtype_val.snd').subtype_mk _\n\n"}
{"name":"Homeomorph.piEquivPiSubtypeProd_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"ι : Type u_7\np : ι → Prop\nY : ι → Type u_8\ninst✝¹ : (i : ι) → TopologicalSpace (Y i)\ninst✝ : DecidablePred p\nf : (i : ι) → Y i\n⊢ Eq ((Homeomorph.piEquivPiSubtypeProd p Y) f) { fst := fun x => f ↑x, snd := fun x => f ↑x }","decl":"/-- The topological space `Π i, Y i` can be split as a product by separating the indices in ι\n  depending on whether they satisfy a predicate p or not. -/\n@[simps!]\ndef piEquivPiSubtypeProd (p : ι → Prop) (Y : ι → Type*) [∀ i, TopologicalSpace (Y i)]\n    [DecidablePred p] : (∀ i, Y i) ≃ₜ (∀ i : { x // p x }, Y i) × ∀ i : { x // ¬p x }, Y i where\n  toEquiv := Equiv.piEquivPiSubtypeProd p Y\n  continuous_toFun := by\n    apply Continuous.prod_mk <;> exact continuous_pi fun j => continuous_apply j.1\n  continuous_invFun :=\n    continuous_pi fun j => by\n      dsimp only [Equiv.piEquivPiSubtypeProd]; split_ifs\n      exacts [(continuous_apply _).comp continuous_fst, (continuous_apply _).comp continuous_snd]\n\n"}
{"name":"Homeomorph.piEquivPiSubtypeProd_symm_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"ι : Type u_7\np : ι → Prop\nY : ι → Type u_8\ninst✝¹ : (i : ι) → TopologicalSpace (Y i)\ninst✝ : DecidablePred p\nf : Prod ((i : Subtype fun x => p x) → Y ↑i) ((i : Subtype fun x => Not (p x)) → Y ↑i)\nx : ι\n⊢ Eq ((Homeomorph.piEquivPiSubtypeProd p Y).symm f x) (dite (p x) (fun h => f.1 ⟨x, h⟩) fun h => f.2 ⟨x, h⟩)","decl":"/-- The topological space `Π i, Y i` can be split as a product by separating the indices in ι\n  depending on whether they satisfy a predicate p or not. -/\n@[simps!]\ndef piEquivPiSubtypeProd (p : ι → Prop) (Y : ι → Type*) [∀ i, TopologicalSpace (Y i)]\n    [DecidablePred p] : (∀ i, Y i) ≃ₜ (∀ i : { x // p x }, Y i) × ∀ i : { x // ¬p x }, Y i where\n  toEquiv := Equiv.piEquivPiSubtypeProd p Y\n  continuous_toFun := by\n    apply Continuous.prod_mk <;> exact continuous_pi fun j => continuous_apply j.1\n  continuous_invFun :=\n    continuous_pi fun j => by\n      dsimp only [Equiv.piEquivPiSubtypeProd]; split_ifs\n      exacts [(continuous_apply _).comp continuous_fst, (continuous_apply _).comp continuous_snd]\n\n"}
{"name":"Homeomorph.piSplitAt_symm_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"ι : Type u_7\ninst✝¹ : DecidableEq ι\ni : ι\nY : ι → Type u_8\ninst✝ : (j : ι) → TopologicalSpace (Y j)\nf : Prod (Y i) ((j : Subtype fun j => Ne j i) → Y ↑j)\nj : ι\n⊢ Eq ((Homeomorph.piSplitAt i Y).symm f j) (dite (Eq j i) (fun h => Eq.rec f.1 ⋯) fun h => f.2 ⟨j, h⟩)","decl":"/-- A product of topological spaces can be split as the binary product of one of the spaces and\n  the product of all the remaining spaces. -/\n@[simps!]\ndef piSplitAt (Y : ι → Type*) [∀ j, TopologicalSpace (Y j)] :\n    (∀ j, Y j) ≃ₜ Y i × ∀ j : { j // j ≠ i }, Y j where\n  toEquiv := Equiv.piSplitAt i Y\n  continuous_toFun := (continuous_apply i).prod_mk (continuous_pi fun j => continuous_apply j.1)\n  continuous_invFun :=\n    continuous_pi fun j => by\n      dsimp only [Equiv.piSplitAt]\n      split_ifs with h\n      · subst h\n        exact continuous_fst\n      · exact (continuous_apply _).comp continuous_snd\n\n"}
{"name":"Homeomorph.piSplitAt_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"ι : Type u_7\ninst✝¹ : DecidableEq ι\ni : ι\nY : ι → Type u_8\ninst✝ : (j : ι) → TopologicalSpace (Y j)\nf : (j : ι) → Y j\n⊢ Eq ((Homeomorph.piSplitAt i Y) f) { fst := f i, snd := fun j => f ↑j }","decl":"/-- A product of topological spaces can be split as the binary product of one of the spaces and\n  the product of all the remaining spaces. -/\n@[simps!]\ndef piSplitAt (Y : ι → Type*) [∀ j, TopologicalSpace (Y j)] :\n    (∀ j, Y j) ≃ₜ Y i × ∀ j : { j // j ≠ i }, Y j where\n  toEquiv := Equiv.piSplitAt i Y\n  continuous_toFun := (continuous_apply i).prod_mk (continuous_pi fun j => continuous_apply j.1)\n  continuous_invFun :=\n    continuous_pi fun j => by\n      dsimp only [Equiv.piSplitAt]\n      split_ifs with h\n      · subst h\n        exact continuous_fst\n      · exact (continuous_apply _).comp continuous_snd\n\n"}
{"name":"Homeomorph.funSplitAt_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"Y : Type u_2\ninst✝¹ : TopologicalSpace Y\nι : Type u_7\ninst✝ : DecidableEq ι\ni : ι\nf : (j : ι) → (fun a => Y) j\n⊢ Eq ((Homeomorph.funSplitAt Y i) f) { fst := f i, snd := fun j => f ↑j }","decl":"/-- A product of copies of a topological space can be split as the binary product of one copy and\n  the product of all the remaining copies. -/\n@[simps!]\ndef funSplitAt : (ι → Y) ≃ₜ Y × ({ j // j ≠ i } → Y) :=\n  piSplitAt i _\n\n"}
{"name":"Homeomorph.funSplitAt_symm_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"Y : Type u_2\ninst✝¹ : TopologicalSpace Y\nι : Type u_7\ninst✝ : DecidableEq ι\ni : ι\nf : Prod ((fun a => Y) i) ((j : Subtype fun j => Ne j i) → (fun a => Y) ↑j)\nj : ι\n⊢ Eq ((Homeomorph.funSplitAt Y i).symm f j) (dite (Eq j i) (fun h => f.1) fun h => f.2 ⟨j, ⋯⟩)","decl":"/-- A product of copies of a topological space can be split as the binary product of one copy and\n  the product of all the remaining copies. -/\n@[simps!]\ndef funSplitAt : (ι → Y) ≃ₜ Y × ({ j // j ≠ i } → Y) :=\n  piSplitAt i _\n\n"}
{"name":"Equiv.toHomeomorph_toEquiv","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : Equiv X Y\nhe : ∀ (s : Set Y), Iff (IsOpen (Set.preimage (⇑e) s)) (IsOpen s)\n⊢ Eq (e.toHomeomorph he).toEquiv e","decl":"/-- An equiv between topological spaces respecting openness is a homeomorphism. -/\n@[simps toEquiv]\ndef toHomeomorph (e : X ≃ Y) (he : ∀ s, IsOpen (e ⁻¹' s) ↔ IsOpen s) : X ≃ₜ Y where\n  toEquiv := e\n  continuous_toFun := continuous_def.2 fun _ ↦ (he _).2\n  continuous_invFun := continuous_def.2 fun s ↦ by convert (he _).1; simp\n\n"}
{"name":"Equiv.coe_toHomeomorph","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : Equiv X Y\nhe : ∀ (s : Set Y), Iff (IsOpen (Set.preimage (⇑e) s)) (IsOpen s)\n⊢ Eq ⇑(e.toHomeomorph he) ⇑e","decl":"@[simp] lemma coe_toHomeomorph (e : X ≃ Y) (he) : ⇑(e.toHomeomorph he) = e := rfl\n"}
{"name":"Equiv.toHomeomorph_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : Equiv X Y\nhe : ∀ (s : Set Y), Iff (IsOpen (Set.preimage (⇑e) s)) (IsOpen s)\nx : X\n⊢ Eq ((e.toHomeomorph he) x) (e x)","decl":"lemma toHomeomorph_apply (e : X ≃ Y) (he) (x : X) : e.toHomeomorph he x = e x := rfl\n\n"}
{"name":"Equiv.toHomeomorph_refl","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\n⊢ Eq ((Equiv.refl X).toHomeomorph ⋯) (Homeomorph.refl X)","decl":"@[simp] lemma toHomeomorph_refl :\n  (Equiv.refl X).toHomeomorph (fun _s ↦ Iff.rfl) = Homeomorph.refl _ := rfl\n\n"}
{"name":"Equiv.toHomeomorph_symm","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : Equiv X Y\nhe : ∀ (s : Set Y), Iff (IsOpen (Set.preimage (⇑e) s)) (IsOpen s)\n⊢ Eq (e.toHomeomorph he).symm (e.symm.toHomeomorph ⋯)","decl":"@[simp] lemma toHomeomorph_symm (e : X ≃ Y) (he) :\n  (e.toHomeomorph he).symm = e.symm.toHomeomorph fun s ↦ by convert (he _).symm; simp := rfl\n\n"}
{"name":"Equiv.toHomeomorph_trans","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : Equiv X Y\nf : Equiv Y Z\nhe : ∀ (s : Set Y), Iff (IsOpen (Set.preimage (⇑e) s)) (IsOpen s)\nhf : ∀ (s : Set Z), Iff (IsOpen (Set.preimage (⇑f) s)) (IsOpen s)\n⊢ Eq ((e.trans f).toHomeomorph ⋯) ((e.toHomeomorph he).trans (f.toHomeomorph hf))","decl":"lemma toHomeomorph_trans (e : X ≃ Y) (f : Y ≃ Z) (he hf) :\n    (e.trans f).toHomeomorph (fun _s ↦ (he _).trans (hf _)) =\n    (e.toHomeomorph he).trans (f.toHomeomorph hf) := rfl\n\n"}
{"name":"Equiv.toHomeomorphOfIsInducing_toEquiv","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : Equiv X Y\nhf : Topology.IsInducing ⇑f\n⊢ Eq (f.toHomeomorphOfIsInducing hf).toEquiv f","decl":"/-- An inducing equiv between topological spaces is a homeomorphism. -/\n@[simps toEquiv] -- Porting note (https://github.com/leanprover-community/mathlib4/issues/11215): TODO: was `@[simps]`\ndef toHomeomorphOfIsInducing (f : X ≃ Y) (hf : IsInducing f) : X ≃ₜ Y :=\n  { f with\n    continuous_toFun := hf.continuous\n    continuous_invFun := hf.continuous_iff.2 <| by simpa using continuous_id }\n\n"}
{"name":"Continuous.continuous_symm_of_equiv_compact_to_t2","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : CompactSpace X\ninst✝ : T2Space Y\nf : Equiv X Y\nhf : Continuous ⇑f\n⊢ Continuous ⇑f.symm","decl":"theorem continuous_symm_of_equiv_compact_to_t2 [CompactSpace X] [T2Space Y] {f : X ≃ Y}\n    (hf : Continuous f) : Continuous f.symm := by\n  rw [continuous_iff_isClosed]\n  intro C hC\n  have hC' : IsClosed (f '' C) := (hC.isCompact.image hf).isClosed\n  rwa [Equiv.image_eq_preimage] at hC'\n\n"}
{"name":"Continuous.homeoOfEquivCompactToT2_toEquiv","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : CompactSpace X\ninst✝ : T2Space Y\nf : Equiv X Y\nhf : Continuous ⇑f\n⊢ Eq hf.homeoOfEquivCompactToT2.toEquiv f","decl":"/-- Continuous equivalences from a compact space to a T2 space are homeomorphisms.\n\nThis is not true when T2 is weakened to T1\n(see `Continuous.homeoOfEquivCompactToT2.t1_counterexample`). -/\n@[simps toEquiv] -- Porting note: was `@[simps]`\ndef homeoOfEquivCompactToT2 [CompactSpace X] [T2Space Y] {f : X ≃ Y} (hf : Continuous f) : X ≃ₜ Y :=\n  { f with\n    continuous_toFun := hf\n    continuous_invFun := hf.continuous_symm_of_equiv_compact_to_t2 }\n\n"}
{"name":"IsHomeomorph.isOpenMap","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nself : IsHomeomorph f\n⊢ IsOpenMap f","decl":"/-- Predicate saying that `f` is a homeomorphism.\n\nThis should be used only when `f` is a concrete function whose continuous inverse is not easy to\nwrite down. Otherwise, `Homeomorph` should be preferred as it bundles the continuous inverse.\n\nHaving both `Homeomorph` and `IsHomeomorph` is justified by the fact that so many function\nproperties are unbundled in the topology part of the library, and by the fact that a homeomorphism\nis not merely a continuous bijection, that is `IsHomeomorph f` is not equivalent to\n`Continuous f ∧ Bijective f` but to `Continuous f ∧ Bijective f ∧ IsOpenMap f`. -/\nstructure IsHomeomorph (f : X → Y) : Prop where\n  continuous : Continuous f\n  isOpenMap : IsOpenMap f\n  bijective : Bijective f\n\n"}
{"name":"IsHomeomorph.continuous","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nself : IsHomeomorph f\n⊢ Continuous f","decl":"/-- Predicate saying that `f` is a homeomorphism.\n\nThis should be used only when `f` is a concrete function whose continuous inverse is not easy to\nwrite down. Otherwise, `Homeomorph` should be preferred as it bundles the continuous inverse.\n\nHaving both `Homeomorph` and `IsHomeomorph` is justified by the fact that so many function\nproperties are unbundled in the topology part of the library, and by the fact that a homeomorphism\nis not merely a continuous bijection, that is `IsHomeomorph f` is not equivalent to\n`Continuous f ∧ Bijective f` but to `Continuous f ∧ Bijective f ∧ IsOpenMap f`. -/\nstructure IsHomeomorph (f : X → Y) : Prop where\n  continuous : Continuous f\n  isOpenMap : IsOpenMap f\n  bijective : Bijective f\n\n"}
{"name":"IsHomeomorph.bijective","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nself : IsHomeomorph f\n⊢ Function.Bijective f","decl":"/-- Predicate saying that `f` is a homeomorphism.\n\nThis should be used only when `f` is a concrete function whose continuous inverse is not easy to\nwrite down. Otherwise, `Homeomorph` should be preferred as it bundles the continuous inverse.\n\nHaving both `Homeomorph` and `IsHomeomorph` is justified by the fact that so many function\nproperties are unbundled in the topology part of the library, and by the fact that a homeomorphism\nis not merely a continuous bijection, that is `IsHomeomorph f` is not equivalent to\n`Continuous f ∧ Bijective f` but to `Continuous f ∧ Bijective f ∧ IsOpenMap f`. -/\nstructure IsHomeomorph (f : X → Y) : Prop where\n  continuous : Continuous f\n  isOpenMap : IsOpenMap f\n  bijective : Bijective f\n\n"}
{"name":"Homeomorph.isHomeomorph","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ IsHomeomorph ⇑h","decl":"protected theorem Homeomorph.isHomeomorph (h : X ≃ₜ Y) : IsHomeomorph h :=\n  ⟨h.continuous, h.isOpenMap, h.bijective⟩\n\n"}
{"name":"IsHomeomorph.injective","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : IsHomeomorph f\n⊢ Function.Injective f","decl":"protected lemma injective : Function.Injective f := hf.bijective.injective\n"}
{"name":"IsHomeomorph.surjective","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : IsHomeomorph f\n⊢ Function.Surjective f","decl":"protected lemma surjective : Function.Surjective f := hf.bijective.surjective\n\n"}
{"name":"IsHomeomorph.homeomorph_symm_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : IsHomeomorph f\nb : Y\n⊢ Eq ((IsHomeomorph.homeomorph f hf).symm b) (Function.surjInv ⋯ b)","decl":"variable (f) in\n/-- Bundled homeomorphism constructed from a map that is a homeomorphism. -/\n@[simps! toEquiv apply symm_apply]\nnoncomputable def homeomorph : X ≃ₜ Y where\n  continuous_toFun := hf.1\n  continuous_invFun := by\n    rw [continuous_iff_continuousOn_univ, ← hf.bijective.2.range_eq]\n    exact hf.isOpenMap.continuousOn_range_of_leftInverse (leftInverse_surjInv hf.bijective)\n  toEquiv := Equiv.ofBijective f hf.bijective\n\n"}
{"name":"IsHomeomorph.homeomorph_apply","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : IsHomeomorph f\na✝ : X\n⊢ Eq ((IsHomeomorph.homeomorph f hf) a✝) (f a✝)","decl":"variable (f) in\n/-- Bundled homeomorphism constructed from a map that is a homeomorphism. -/\n@[simps! toEquiv apply symm_apply]\nnoncomputable def homeomorph : X ≃ₜ Y where\n  continuous_toFun := hf.1\n  continuous_invFun := by\n    rw [continuous_iff_continuousOn_univ, ← hf.bijective.2.range_eq]\n    exact hf.isOpenMap.continuousOn_range_of_leftInverse (leftInverse_surjInv hf.bijective)\n  toEquiv := Equiv.ofBijective f hf.bijective\n\n"}
{"name":"IsHomeomorph.homeomorph_toEquiv","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : IsHomeomorph f\n⊢ Eq (IsHomeomorph.homeomorph f hf).toEquiv (Equiv.ofBijective f ⋯)","decl":"variable (f) in\n/-- Bundled homeomorphism constructed from a map that is a homeomorphism. -/\n@[simps! toEquiv apply symm_apply]\nnoncomputable def homeomorph : X ≃ₜ Y where\n  continuous_toFun := hf.1\n  continuous_invFun := by\n    rw [continuous_iff_continuousOn_univ, ← hf.bijective.2.range_eq]\n    exact hf.isOpenMap.continuousOn_range_of_leftInverse (leftInverse_surjInv hf.bijective)\n  toEquiv := Equiv.ofBijective f hf.bijective\n\n"}
{"name":"IsHomeomorph.isClosedMap","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : IsHomeomorph f\n⊢ IsClosedMap f","decl":"protected lemma isClosedMap : IsClosedMap f := (hf.homeomorph f).isClosedMap\n"}
{"name":"IsHomeomorph.isInducing","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : IsHomeomorph f\n⊢ Topology.IsInducing f","decl":"lemma isInducing : IsInducing f := (hf.homeomorph f).isInducing\n"}
{"name":"IsHomeomorph.isQuotientMap","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : IsHomeomorph f\n⊢ Topology.IsQuotientMap f","decl":"lemma isQuotientMap : IsQuotientMap f := (hf.homeomorph f).isQuotientMap\n"}
{"name":"IsHomeomorph.isEmbedding","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : IsHomeomorph f\n⊢ Topology.IsEmbedding f","decl":"lemma isEmbedding : IsEmbedding f := (hf.homeomorph f).isEmbedding\n"}
{"name":"IsHomeomorph.isOpenEmbedding","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : IsHomeomorph f\n⊢ Topology.IsOpenEmbedding f","decl":"lemma isOpenEmbedding : IsOpenEmbedding f := (hf.homeomorph f).isOpenEmbedding\n"}
{"name":"IsHomeomorph.isClosedEmbedding","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : IsHomeomorph f\n⊢ Topology.IsClosedEmbedding f","decl":"lemma isClosedEmbedding : IsClosedEmbedding f := (hf.homeomorph f).isClosedEmbedding\n"}
{"name":"IsHomeomorph.isDenseEmbedding","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : IsHomeomorph f\n⊢ IsDenseEmbedding f","decl":"lemma isDenseEmbedding : IsDenseEmbedding f := (hf.homeomorph f).isDenseEmbedding\n\n"}
{"name":"IsHomeomorph.inducing","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : IsHomeomorph f\n⊢ Topology.IsInducing f","decl":"@[deprecated (since := \"2024-10-28\")] alias inducing := isInducing\n\n"}
{"name":"IsHomeomorph.embedding","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : IsHomeomorph f\n⊢ Topology.IsEmbedding f","decl":"@[deprecated (since := \"2024-10-26\")]\nalias embedding := isEmbedding\n\n"}
{"name":"IsHomeomorph.quotientMap","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : IsHomeomorph f\n⊢ Topology.IsQuotientMap f","decl":"@[deprecated (since := \"2024-10-22\")]\nalias quotientMap := isQuotientMap\n\n"}
{"name":"IsHomeomorph.closedEmbedding","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : IsHomeomorph f\n⊢ Topology.IsClosedEmbedding f","decl":"@[deprecated (since := \"2024-10-20\")] alias closedEmbedding := isClosedEmbedding\n"}
{"name":"IsHomeomorph.openEmbedding","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : IsHomeomorph f\n⊢ Topology.IsOpenEmbedding f","decl":"@[deprecated (since := \"2024-10-18\")]\nalias openEmbedding := isOpenEmbedding\n\n"}
{"name":"IsHomeomorph.denseEmbedding","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : IsHomeomorph f\n⊢ IsDenseEmbedding f","decl":"@[deprecated (since := \"2024-09-30\")]\nalias denseEmbedding := isDenseEmbedding\n\n"}
{"name":"isHomeomorph_iff_exists_homeomorph","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\n⊢ Iff (IsHomeomorph f) (Exists fun h => Eq (⇑h) f)","decl":"/-- A map is a homeomorphism iff it is the map underlying a bundled homeomorphism `h : X ≃ₜ Y`. -/\nlemma isHomeomorph_iff_exists_homeomorph : IsHomeomorph f ↔ ∃ h : X ≃ₜ Y, h = f :=\n  ⟨fun hf => ⟨hf.homeomorph f, rfl⟩, fun ⟨h, h'⟩ => h' ▸ h.isHomeomorph⟩\n\n"}
{"name":"isHomeomorph_iff_exists_inverse","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\n⊢ Iff (IsHomeomorph f) (And (Continuous f) (Exists fun g => And (Function.LeftInverse g f) (And (Function.RightInverse g f) (Continuous g))))","decl":"/-- A map is a homeomorphism iff it is continuous and has a continuous inverse. -/\nlemma isHomeomorph_iff_exists_inverse : IsHomeomorph f ↔ Continuous f ∧ ∃ g : Y → X,\n    LeftInverse g f ∧ RightInverse g f ∧ Continuous g := by\n  refine ⟨fun hf ↦ ⟨hf.continuous, ?_⟩, fun ⟨hf, g, hg⟩ ↦ ?_⟩\n  · let h := hf.homeomorph f\n    exact ⟨h.symm, h.left_inv, h.right_inv, h.continuous_invFun⟩\n  · exact (Homeomorph.mk ⟨f, g, hg.1, hg.2.1⟩ hf hg.2.2).isHomeomorph\n\n"}
{"name":"isHomeomorph_iff_isEmbedding_surjective","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\n⊢ Iff (IsHomeomorph f) (And (Topology.IsEmbedding f) (Function.Surjective f))","decl":"/-- A map is a homeomorphism iff it is a surjective embedding. -/\nlemma isHomeomorph_iff_isEmbedding_surjective : IsHomeomorph f ↔ IsEmbedding f ∧ Surjective f where\n  mp hf := ⟨hf.isEmbedding, hf.surjective⟩\n  mpr h := ⟨h.1.continuous, ((isOpenEmbedding_iff f).2 ⟨h.1, h.2.range_eq ▸ isOpen_univ⟩).isOpenMap,\n    h.1.injective, h.2⟩\n\n"}
{"name":"isHomeomorph_iff_embedding_surjective","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\n⊢ Iff (IsHomeomorph f) (And (Topology.IsEmbedding f) (Function.Surjective f))","decl":"@[deprecated (since := \"2024-10-26\")]\nalias isHomeomorph_iff_embedding_surjective := isHomeomorph_iff_isEmbedding_surjective\n\n"}
{"name":"isHomeomorph_iff_continuous_isClosedMap_bijective","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\n⊢ Iff (IsHomeomorph f) (And (Continuous f) (And (IsClosedMap f) (Function.Bijective f)))","decl":"/-- A map is a homeomorphism iff it is continuous, closed and bijective. -/\nlemma isHomeomorph_iff_continuous_isClosedMap_bijective  : IsHomeomorph f ↔\n    Continuous f ∧ IsClosedMap f ∧ Function.Bijective f :=\n  ⟨fun hf => ⟨hf.continuous, hf.isClosedMap, hf.bijective⟩, fun ⟨hf, hf', hf''⟩ =>\n    ⟨hf, fun _ hu => isClosed_compl_iff.1 (image_compl_eq hf'' ▸ hf' _ hu.isClosed_compl), hf''⟩⟩\n\n"}
{"name":"isHomeomorph_iff_continuous_bijective","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\nf : X → Y\ninst✝¹ : CompactSpace X\ninst✝ : T2Space Y\n⊢ Iff (IsHomeomorph f) (And (Continuous f) (Function.Bijective f))","decl":"/-- A map from a compact space to a T2 space is a homeomorphism iff it is continuous and\n  bijective. -/\nlemma isHomeomorph_iff_continuous_bijective [CompactSpace X] [T2Space Y] :\n    IsHomeomorph f ↔ Continuous f ∧ Bijective f := by\n  rw [isHomeomorph_iff_continuous_isClosedMap_bijective]\n  refine and_congr_right fun hf ↦ ?_\n  rw [eq_true hf.isClosedMap, true_and]\n\n"}
{"name":"IsHomeomorph.id","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\n⊢ IsHomeomorph id","decl":"protected lemma IsHomeomorph.id : IsHomeomorph (@id X) := ⟨continuous_id, .id, bijective_id⟩\n\n"}
{"name":"IsHomeomorph.comp","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\nf : X → Y\ng : Y → Z\nhg : IsHomeomorph g\nhf : IsHomeomorph f\n⊢ IsHomeomorph (Function.comp g f)","decl":"lemma IsHomeomorph.comp {g : Y → Z} (hg : IsHomeomorph g) (hf : IsHomeomorph f) :\n    IsHomeomorph (g ∘ f) := ⟨hg.1.comp hf.1, hg.2.comp hf.2, hg.3.comp hf.3⟩\n\n"}
{"name":"IsHomeomorph.sumMap","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_4\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : TopologicalSpace Z\nW : Type u_5\ninst✝ : TopologicalSpace W\nf : X → Y\ng : Z → W\nhf : IsHomeomorph f\nhg : IsHomeomorph g\n⊢ IsHomeomorph (Sum.map f g)","decl":"lemma IsHomeomorph.sumMap {g : Z → W} (hf : IsHomeomorph f) (hg : IsHomeomorph g) :\n    IsHomeomorph (Sum.map f g) := ⟨hf.1.sum_map hg.1, hf.2.sumMap hg.2, hf.3.sum_map hg.3⟩\n\n"}
{"name":"IsHomeomorph.prodMap","module":"Mathlib.Topology.Homeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_4\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : TopologicalSpace Z\nW : Type u_5\ninst✝ : TopologicalSpace W\nf : X → Y\ng : Z → W\nhf : IsHomeomorph f\nhg : IsHomeomorph g\n⊢ IsHomeomorph (Prod.map f g)","decl":"lemma IsHomeomorph.prodMap {g : Z → W} (hf : IsHomeomorph f) (hg : IsHomeomorph g) :\n    IsHomeomorph (Prod.map f g) := ⟨hf.1.prodMap hg.1, hf.2.prodMap hg.2, hf.3.prodMap hg.3⟩\n\n"}
{"name":"IsHomeomorph.sigmaMap","module":"Mathlib.Topology.Homeomorph","initialProofState":"ι : Type u_6\nκ : Type u_7\nX : ι → Type u_8\nY : κ → Type u_9\ninst✝¹ : (i : ι) → TopologicalSpace (X i)\ninst✝ : (i : κ) → TopologicalSpace (Y i)\nf : ι → κ\nhf : Function.Bijective f\ng : (i : ι) → X i → Y (f i)\nhg : ∀ (i : ι), IsHomeomorph (g i)\n⊢ IsHomeomorph (Sigma.map f g)","decl":"lemma IsHomeomorph.sigmaMap {ι κ : Type*} {X : ι → Type*} {Y : κ → Type*}\n    [∀ i, TopologicalSpace (X i)] [∀ i, TopologicalSpace (Y i)] {f : ι → κ}\n    (hf : Bijective f) {g : (i : ι) → X i → Y (f i)} (hg : ∀ i, IsHomeomorph (g i)) :\n    IsHomeomorph (Sigma.map f g) := by\n  simp_rw [isHomeomorph_iff_isEmbedding_surjective,] at hg ⊢\n  exact ⟨(isEmbedding_sigmaMap hf.1).2 fun i ↦ (hg i).1, hf.2.sigma_map fun i ↦ (hg i).2⟩\n\n"}
{"name":"IsHomeomorph.pi_map","module":"Mathlib.Topology.Homeomorph","initialProofState":"ι : Type u_6\nX : ι → Type u_7\nY : ι → Type u_8\ninst✝¹ : (i : ι) → TopologicalSpace (X i)\ninst✝ : (i : ι) → TopologicalSpace (Y i)\nf : (i : ι) → X i → Y i\nh : ∀ (i : ι), IsHomeomorph (f i)\n⊢ IsHomeomorph fun x i => f i (x i)","decl":"lemma IsHomeomorph.pi_map {ι : Type*} {X Y : ι → Type*} [∀ i, TopologicalSpace (X i)]\n    [∀ i, TopologicalSpace (Y i)] {f : (i : ι) → X i → Y i} (h : ∀ i, IsHomeomorph (f i)) :\n    IsHomeomorph (fun (x : ∀ i, X i) i ↦ f i (x i)) :=\n  (Homeomorph.piCongrRight fun i ↦ (h i).homeomorph (f i)).isHomeomorph\n\n"}
{"name":"HomeomorphClass.inv_continuous","module":"Mathlib.Topology.Homeomorph","initialProofState":"F : Type u_6\nA : outParam (Type u_7)\nB : outParam (Type u_8)\ninst✝¹ : TopologicalSpace A\ninst✝ : TopologicalSpace B\nh : EquivLike F A B\nself : HomeomorphClass F A B\nf : F\n⊢ Continuous (EquivLike.inv f)","decl":"/-- `HomeomorphClass F A B` states that `F` is a type of homeomorphisms.-/\nclass HomeomorphClass (F : Type*) (A B : outParam Type*)\n    [TopologicalSpace A] [TopologicalSpace B] [h : EquivLike F A B] : Prop where\n  map_continuous : ∀ (f : F), Continuous f\n  inv_continuous : ∀ (f : F), Continuous (h.inv f)\n\n"}
{"name":"HomeomorphClass.map_continuous","module":"Mathlib.Topology.Homeomorph","initialProofState":"F : Type u_6\nA : outParam (Type u_7)\nB : outParam (Type u_8)\ninst✝¹ : TopologicalSpace A\ninst✝ : TopologicalSpace B\nh : EquivLike F A B\nself : HomeomorphClass F A B\nf : F\n⊢ Continuous ⇑f","decl":"/-- `HomeomorphClass F A B` states that `F` is a type of homeomorphisms.-/\nclass HomeomorphClass (F : Type*) (A B : outParam Type*)\n    [TopologicalSpace A] [TopologicalSpace B] [h : EquivLike F A B] : Prop where\n  map_continuous : ∀ (f : F), Continuous f\n  inv_continuous : ∀ (f : F), Continuous (h.inv f)\n\n"}
{"name":"HomeomorphClass.coe_coe","module":"Mathlib.Topology.Homeomorph","initialProofState":"F : Type u_6\nα : Type u_7\nβ : Type u_8\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : EquivLike F α β\nh : HomeomorphClass F α β\nf : F\n⊢ Eq ⇑↑f ⇑f","decl":"@[simp]\ntheorem coe_coe [h : HomeomorphClass F α β] (f : F) : ⇑(h.toHomeomorph f) = ⇑f := rfl\n\n"}
{"name":"HomeomorphClass.toHomeomorph_injective","module":"Mathlib.Topology.Homeomorph","initialProofState":"F : Type u_6\nα : Type u_7\nβ : Type u_8\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : EquivLike F α β\ninst✝ : HomeomorphClass F α β\n⊢ Function.Injective HomeomorphClass.toHomeomorph","decl":"theorem toHomeomorph_injective [HomeomorphClass F α β] : Function.Injective ((↑) : F → α ≃ₜ β) :=\n  fun _ _ e ↦ DFunLike.ext _ _ fun a ↦ congr_arg (fun e : α ≃ₜ β ↦ e.toFun a) e\n\n"}
{"name":"HomeomorphClass.instContinuousMapClass","module":"Mathlib.Topology.Homeomorph","initialProofState":"F : Type u_6\nα : Type u_7\nβ : Type u_8\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : EquivLike F α β\ninst✝ : HomeomorphClass F α β\n⊢ ContinuousMapClass F α β","decl":"instance [HomeomorphClass F α β] : ContinuousMapClass F α β where\n  map_continuous  f := map_continuous f\n\n"}
{"name":"HomeomorphClass.instHomeomorph","module":"Mathlib.Topology.Homeomorph","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\n⊢ HomeomorphClass (Homeomorph α β) α β","decl":"instance : HomeomorphClass (α ≃ₜ β) α β where\n  map_continuous e := e.continuous_toFun\n  inv_continuous e := e.continuous_invFun\n\n"}
