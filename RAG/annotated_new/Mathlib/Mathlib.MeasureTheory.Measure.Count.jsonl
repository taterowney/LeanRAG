{"name":"MeasureTheory.Measure.count_ne_zero''","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ninst✝ : Nonempty α\n⊢ Ne MeasureTheory.Measure.count 0","decl":"@[simp] lemma count_ne_zero'' [Nonempty α] : (count : Measure α) ≠ 0 := by simp [count]\n\n"}
{"name":"MeasureTheory.Measure.le_count_apply","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\ns : Set α\n⊢ LE.le (tsum fun x => 1) (MeasureTheory.Measure.count s)","decl":"theorem le_count_apply : ∑' _ : s, (1 : ℝ≥0∞) ≤ count s :=\n  calc\n    (∑' _ : s, 1 : ℝ≥0∞) = ∑' i, indicator s 1 i := tsum_subtype s 1\n    _ ≤ ∑' i, dirac i s := ENNReal.tsum_le_tsum fun _ => le_dirac_apply\n    _ ≤ count s := le_sum_apply _ _\n\n"}
{"name":"MeasureTheory.Measure.count_apply","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\ns : Set α\nhs : MeasurableSet s\n⊢ Eq (MeasureTheory.Measure.count s) (tsum fun x => 1)","decl":"theorem count_apply (hs : MeasurableSet s) : count s = ∑' _ : s, 1 := by\n  simp only [count, sum_apply, hs, dirac_apply', ← tsum_subtype s (1 : α → ℝ≥0∞), Pi.one_apply]\n\n"}
{"name":"MeasureTheory.Measure.count_empty","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\n⊢ Eq (MeasureTheory.Measure.count EmptyCollection.emptyCollection) 0","decl":"theorem count_empty : count (∅ : Set α) = 0 := by rw [count_apply MeasurableSet.empty, tsum_empty]\n\n"}
{"name":"MeasureTheory.Measure.count_apply_finset'","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\ns : Finset α\ns_mble : MeasurableSet ↑s\n⊢ Eq (MeasureTheory.Measure.count ↑s) ↑s.card","decl":"@[simp]\ntheorem count_apply_finset' {s : Finset α} (s_mble : MeasurableSet (s : Set α)) :\n    count (↑s : Set α) = s.card :=\n  calc\n    count (↑s : Set α) = ∑' _ : (↑s : Set α), 1 := count_apply s_mble\n    _ = ∑ _ ∈ s, 1 := s.tsum_subtype 1\n    _ = s.card := by simp\n\n"}
{"name":"MeasureTheory.Measure.count_apply_finset","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSingletonClass α\ns : Finset α\n⊢ Eq (MeasureTheory.Measure.count ↑s) ↑s.card","decl":"@[simp]\ntheorem count_apply_finset [MeasurableSingletonClass α] (s : Finset α) :\n    count (↑s : Set α) = s.card :=\n  count_apply_finset' s.measurableSet\n\n"}
{"name":"MeasureTheory.Measure.count_apply_finite'","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\ns : Set α\ns_fin : s.Finite\ns_mble : MeasurableSet s\n⊢ Eq (MeasureTheory.Measure.count s) ↑s_fin.toFinset.card","decl":"theorem count_apply_finite' {s : Set α} (s_fin : s.Finite) (s_mble : MeasurableSet s) :\n    count s = s_fin.toFinset.card := by\n  simp [←\n    @count_apply_finset' _ _ s_fin.toFinset (by simpa only [Finite.coe_toFinset] using s_mble)]\n\n"}
{"name":"MeasureTheory.Measure.count_apply_finite","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSingletonClass α\ns : Set α\nhs : s.Finite\n⊢ Eq (MeasureTheory.Measure.count s) ↑hs.toFinset.card","decl":"theorem count_apply_finite [MeasurableSingletonClass α] (s : Set α) (hs : s.Finite) :\n    count s = hs.toFinset.card := by rw [← count_apply_finset, Finite.coe_toFinset]\n\n"}
{"name":"MeasureTheory.Measure.count_apply_infinite","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\ns : Set α\nhs : s.Infinite\n⊢ Eq (MeasureTheory.Measure.count s) Top.top","decl":"/-- `count` measure evaluates to infinity at infinite sets. -/\ntheorem count_apply_infinite (hs : s.Infinite) : count s = ∞ := by\n  refine top_unique (le_of_tendsto' ENNReal.tendsto_nat_nhds_top fun n => ?_)\n  rcases hs.exists_subset_card_eq n with ⟨t, ht, rfl⟩\n  calc\n    (t.card : ℝ≥0∞) = ∑ i ∈ t, 1 := by simp\n    _ = ∑' i : (t : Set α), 1 := (t.tsum_subtype 1).symm\n    _ ≤ count (t : Set α) := le_count_apply\n    _ ≤ count s := measure_mono ht\n\n"}
{"name":"MeasureTheory.Measure.count_apply_eq_top'","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\ns : Set α\ns_mble : MeasurableSet s\n⊢ Iff (Eq (MeasureTheory.Measure.count s) Top.top) s.Infinite","decl":"@[simp]\ntheorem count_apply_eq_top' (s_mble : MeasurableSet s) : count s = ∞ ↔ s.Infinite := by\n  by_cases hs : s.Finite\n  · simp [Set.Infinite, hs, count_apply_finite' hs s_mble]\n  · change s.Infinite at hs\n    simp [hs, count_apply_infinite]\n\n"}
{"name":"MeasureTheory.Measure.count_apply_eq_top","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ns : Set α\ninst✝ : MeasurableSingletonClass α\n⊢ Iff (Eq (MeasureTheory.Measure.count s) Top.top) s.Infinite","decl":"@[simp]\ntheorem count_apply_eq_top [MeasurableSingletonClass α] : count s = ∞ ↔ s.Infinite := by\n  by_cases hs : s.Finite\n  · exact count_apply_eq_top' hs.measurableSet\n  · change s.Infinite at hs\n    simp [hs, count_apply_infinite]\n\n"}
{"name":"MeasureTheory.Measure.count_apply_lt_top'","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\ns : Set α\ns_mble : MeasurableSet s\n⊢ Iff (LT.lt (MeasureTheory.Measure.count s) Top.top) s.Finite","decl":"@[simp]\ntheorem count_apply_lt_top' (s_mble : MeasurableSet s) : count s < ∞ ↔ s.Finite :=\n  calc\n    count s < ∞ ↔ count s ≠ ∞ := lt_top_iff_ne_top\n    _ ↔ ¬s.Infinite := not_congr (count_apply_eq_top' s_mble)\n    _ ↔ s.Finite := Classical.not_not\n\n"}
{"name":"MeasureTheory.Measure.count_apply_lt_top","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ns : Set α\ninst✝ : MeasurableSingletonClass α\n⊢ Iff (LT.lt (MeasureTheory.Measure.count s) Top.top) s.Finite","decl":"@[simp]\ntheorem count_apply_lt_top [MeasurableSingletonClass α] : count s < ∞ ↔ s.Finite :=\n  calc\n    count s < ∞ ↔ count s ≠ ∞ := lt_top_iff_ne_top\n    _ ↔ ¬s.Infinite := not_congr count_apply_eq_top\n    _ ↔ s.Finite := Classical.not_not\n\n"}
{"name":"MeasureTheory.Measure.count_eq_zero_iff","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\ns : Set α\n⊢ Iff (Eq (MeasureTheory.Measure.count s) 0) (Eq s EmptyCollection.emptyCollection)","decl":"@[simp]\ntheorem count_eq_zero_iff : count s = 0 ↔ s = ∅ where\n  mp h := eq_empty_of_forall_not_mem fun x hx ↦ by\n    simpa [hx] using ((ENNReal.le_tsum x).trans <| le_sum_apply _ _).trans_eq h\n  mpr := by rintro rfl; exact count_empty\n\n"}
{"name":"MeasureTheory.Measure.count_ne_zero_iff","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\ns : Set α\n⊢ Iff (Ne (MeasureTheory.Measure.count s) 0) s.Nonempty","decl":"lemma count_ne_zero_iff : count s ≠ 0 ↔ s.Nonempty :=\n  count_eq_zero_iff.not.trans nonempty_iff_ne_empty.symm\n\n"}
{"name":"MeasureTheory.Measure.count_ne_zero","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\ns : Set α\na✝ : s.Nonempty\n⊢ Ne (MeasureTheory.Measure.count s) 0","decl":"alias ⟨_, count_ne_zero⟩ := count_ne_zero_iff\n\n"}
{"name":"MeasureTheory.Measure.empty_of_count_eq_zero","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\ns : Set α\na✝ : Eq (MeasureTheory.Measure.count s) 0\n⊢ Eq s EmptyCollection.emptyCollection","decl":"@[deprecated (since := \"2024-11-20\")] alias ⟨empty_of_count_eq_zero, _⟩ := count_eq_zero_iff\n"}
{"name":"MeasureTheory.Measure.empty_of_count_eq_zero'","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\ns : Set α\na✝ : Eq (MeasureTheory.Measure.count s) 0\n⊢ Eq s EmptyCollection.emptyCollection","decl":"@[deprecated (since := \"2024-11-20\")] alias empty_of_count_eq_zero' := empty_of_count_eq_zero\n"}
{"name":"MeasureTheory.Measure.count_eq_zero_iff'","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\ns : Set α\n⊢ Iff (Eq (MeasureTheory.Measure.count s) 0) (Eq s EmptyCollection.emptyCollection)","decl":"@[deprecated (since := \"2024-11-20\")] alias count_eq_zero_iff' := count_eq_zero_iff\n"}
{"name":"MeasureTheory.Measure.count_ne_zero'","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\ns : Set α\na✝ : s.Nonempty\n⊢ Ne (MeasureTheory.Measure.count s) 0","decl":"@[deprecated (since := \"2024-11-20\")] alias count_ne_zero' := count_ne_zero\n\n"}
{"name":"MeasureTheory.Measure.count_singleton'","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\na : α\nha : MeasurableSet (Singleton.singleton a)\n⊢ Eq (MeasureTheory.Measure.count (Singleton.singleton a)) 1","decl":"@[simp]\ntheorem count_singleton' {a : α} (ha : MeasurableSet ({a} : Set α)) : count ({a} : Set α) = 1 := by\n  rw [count_apply_finite' (Set.finite_singleton a) ha, Set.Finite.toFinset]\n  simp [@toFinset_card _ _ (Set.finite_singleton a).fintype,\n    @Fintype.card_unique _ _ (Set.finite_singleton a).fintype]\n\n"}
{"name":"MeasureTheory.Measure.count_singleton","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSingletonClass α\na : α\n⊢ Eq (MeasureTheory.Measure.count (Singleton.singleton a)) 1","decl":"theorem count_singleton [MeasurableSingletonClass α] (a : α) : count ({a} : Set α) = 1 :=\n  count_singleton' (measurableSet_singleton a)\n\n"}
{"name":"MeasureTheory.Measure.count_injective_image'","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSpace β\nf : β → α\nhf : Function.Injective f\ns : Set β\ns_mble : MeasurableSet s\nfs_mble : MeasurableSet (Set.image f s)\n⊢ Eq (MeasureTheory.Measure.count (Set.image f s)) (MeasureTheory.Measure.count s)","decl":"theorem count_injective_image' {f : β → α} (hf : Function.Injective f) {s : Set β}\n    (s_mble : MeasurableSet s) (fs_mble : MeasurableSet (f '' s)) : count (f '' s) = count s := by\n  classical\n  by_cases hs : s.Finite\n  · lift s to Finset β using hs\n    rw [← Finset.coe_image, count_apply_finset' _, count_apply_finset' s_mble,\n      s.card_image_of_injective hf]\n    simpa only [Finset.coe_image] using fs_mble\n  · rw [count_apply_infinite hs]\n    rw [← finite_image_iff hf.injOn] at hs\n    rw [count_apply_infinite hs]\n\n"}
{"name":"MeasureTheory.Measure.count_injective_image","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : MeasurableSpace α\ninst✝² : MeasurableSpace β\ninst✝¹ : MeasurableSingletonClass α\ninst✝ : MeasurableSingletonClass β\nf : β → α\nhf : Function.Injective f\ns : Set β\n⊢ Eq (MeasureTheory.Measure.count (Set.image f s)) (MeasureTheory.Measure.count s)","decl":"theorem count_injective_image [MeasurableSingletonClass α] [MeasurableSingletonClass β] {f : β → α}\n    (hf : Function.Injective f) (s : Set β) : count (f '' s) = count s := by\n  by_cases hs : s.Finite\n  · exact count_injective_image' hf hs.measurableSet (Finite.image f hs).measurableSet\n  rw [count_apply_infinite hs]\n  rw [← finite_image_iff hf.injOn] at hs\n  rw [count_apply_infinite hs]\n\n"}
{"name":"MeasureTheory.Measure.count.isFiniteMeasure","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ninst✝ : Finite α\n⊢ MeasureTheory.IsFiniteMeasure MeasureTheory.Measure.count","decl":"instance count.isFiniteMeasure [Finite α] :\n    IsFiniteMeasure (Measure.count : Measure α) :=\n  ⟨by cases nonempty_fintype α; simp [Measure.count_apply, tsum_fintype]⟩\n\n"}
{"name":"MeasureTheory.Measure.count_univ","module":"Mathlib.MeasureTheory.Measure.Count","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ninst✝ : Fintype α\n⊢ Eq (MeasureTheory.Measure.count Set.univ) ↑(Fintype.card α)","decl":"@[simp] lemma count_univ [Fintype α] : count (univ : Set α) = Fintype.card α := by\n  rw [count_apply .univ]; exact (tsum_univ 1).trans (by simp [tsum_fintype])\n\n"}
