{"name":"List.trop_sum","module":"Mathlib.Algebra.Tropical.BigOperators","initialProofState":"R : Type u_1\ninst✝ : AddMonoid R\nl : List R\n⊢ Eq (Tropical.trop l.sum) (List.map Tropical.trop l).prod","decl":"theorem List.trop_sum [AddMonoid R] (l : List R) : trop l.sum = List.prod (l.map trop) := by\n  induction' l with hd tl IH\n  · simp\n  · simp [← IH]\n\n"}
{"name":"Multiset.trop_sum","module":"Mathlib.Algebra.Tropical.BigOperators","initialProofState":"R : Type u_1\ninst✝ : AddCommMonoid R\ns : Multiset R\n⊢ Eq (Tropical.trop s.sum) (Multiset.map Tropical.trop s).prod","decl":"theorem Multiset.trop_sum [AddCommMonoid R] (s : Multiset R) :\n    trop s.sum = Multiset.prod (s.map trop) :=\n  Quotient.inductionOn s (by simpa using List.trop_sum)\n\n"}
{"name":"trop_sum","module":"Mathlib.Algebra.Tropical.BigOperators","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝ : AddCommMonoid R\ns : Finset S\nf : S → R\n⊢ Eq (Tropical.trop (s.sum fun i => f i)) (s.prod fun i => Tropical.trop (f i))","decl":"theorem trop_sum [AddCommMonoid R] (s : Finset S) (f : S → R) :\n    trop (∑ i ∈ s, f i) = ∏ i ∈ s, trop (f i) := by\n  convert Multiset.trop_sum (s.val.map f)\n  simp only [Multiset.map_map, Function.comp_apply]\n  rfl\n\n"}
{"name":"List.untrop_prod","module":"Mathlib.Algebra.Tropical.BigOperators","initialProofState":"R : Type u_1\ninst✝ : AddMonoid R\nl : List (Tropical R)\n⊢ Eq (Tropical.untrop l.prod) (List.map Tropical.untrop l).sum","decl":"theorem List.untrop_prod [AddMonoid R] (l : List (Tropical R)) :\n    untrop l.prod = List.sum (l.map untrop) := by\n  induction' l with hd tl IH\n  · simp\n  · simp [← IH]\n\n"}
{"name":"Multiset.untrop_prod","module":"Mathlib.Algebra.Tropical.BigOperators","initialProofState":"R : Type u_1\ninst✝ : AddCommMonoid R\ns : Multiset (Tropical R)\n⊢ Eq (Tropical.untrop s.prod) (Multiset.map Tropical.untrop s).sum","decl":"theorem Multiset.untrop_prod [AddCommMonoid R] (s : Multiset (Tropical R)) :\n    untrop s.prod = Multiset.sum (s.map untrop) :=\n  Quotient.inductionOn s (by simpa using List.untrop_prod)\n\n"}
{"name":"untrop_prod","module":"Mathlib.Algebra.Tropical.BigOperators","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝ : AddCommMonoid R\ns : Finset S\nf : S → Tropical R\n⊢ Eq (Tropical.untrop (s.prod fun i => f i)) (s.sum fun i => Tropical.untrop (f i))","decl":"theorem untrop_prod [AddCommMonoid R] (s : Finset S) (f : S → Tropical R) :\n    untrop (∏ i ∈ s, f i) = ∑ i ∈ s, untrop (f i) := by\n  convert Multiset.untrop_prod (s.val.map f)\n  simp only [Multiset.map_map, Function.comp_apply]\n  rfl\n\n-- Porting note: replaced `coe` with `WithTop.some` in statement\n"}
{"name":"List.trop_minimum","module":"Mathlib.Algebra.Tropical.BigOperators","initialProofState":"R : Type u_1\ninst✝ : LinearOrder R\nl : List R\n⊢ Eq (Tropical.trop l.minimum) (List.map (Function.comp Tropical.trop WithTop.some) l).sum","decl":"theorem List.trop_minimum [LinearOrder R] (l : List R) :\n    trop l.minimum = List.sum (l.map (trop ∘ WithTop.some)) := by\n  induction' l with hd tl IH\n  · simp\n  · simp [List.minimum_cons, ← IH]\n\n"}
{"name":"Multiset.trop_inf","module":"Mathlib.Algebra.Tropical.BigOperators","initialProofState":"R : Type u_1\ninst✝¹ : LinearOrder R\ninst✝ : OrderTop R\ns : Multiset R\n⊢ Eq (Tropical.trop s.inf) (Multiset.map Tropical.trop s).sum","decl":"theorem Multiset.trop_inf [LinearOrder R] [OrderTop R] (s : Multiset R) :\n    trop s.inf = Multiset.sum (s.map trop) := by\n  induction' s using Multiset.induction with s x IH\n  · simp\n  · simp [← IH]\n\n"}
{"name":"Finset.trop_inf","module":"Mathlib.Algebra.Tropical.BigOperators","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝¹ : LinearOrder R\ninst✝ : OrderTop R\ns : Finset S\nf : S → R\n⊢ Eq (Tropical.trop (s.inf f)) (s.sum fun i => Tropical.trop (f i))","decl":"theorem Finset.trop_inf [LinearOrder R] [OrderTop R] (s : Finset S) (f : S → R) :\n    trop (s.inf f) = ∑ i ∈ s, trop (f i) := by\n  convert Multiset.trop_inf (s.val.map f)\n  simp only [Multiset.map_map, Function.comp_apply]\n  rfl\n\n"}
{"name":"trop_sInf_image","module":"Mathlib.Algebra.Tropical.BigOperators","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝ : ConditionallyCompleteLinearOrder R\ns : Finset S\nf : S → WithTop R\n⊢ Eq (Tropical.trop (InfSet.sInf (Set.image f ↑s))) (s.sum fun i => Tropical.trop (f i))","decl":"theorem trop_sInf_image [ConditionallyCompleteLinearOrder R] (s : Finset S) (f : S → WithTop R) :\n    trop (sInf (f '' s)) = ∑ i ∈ s, trop (f i) := by\n  rcases s.eq_empty_or_nonempty with (rfl | h)\n  · simp only [Set.image_empty, coe_empty, sum_empty, WithTop.sInf_empty, trop_top]\n  rw [← inf'_eq_csInf_image _ h, inf'_eq_inf, s.trop_inf]\n\n"}
{"name":"trop_iInf","module":"Mathlib.Algebra.Tropical.BigOperators","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝¹ : ConditionallyCompleteLinearOrder R\ninst✝ : Fintype S\nf : S → WithTop R\n⊢ Eq (Tropical.trop (iInf fun i => f i)) (Finset.univ.sum fun i => Tropical.trop (f i))","decl":"theorem trop_iInf [ConditionallyCompleteLinearOrder R] [Fintype S] (f : S → WithTop R) :\n    trop (⨅ i : S, f i) = ∑ i : S, trop (f i) := by\n  rw [iInf, ← Set.image_univ, ← coe_univ, trop_sInf_image]\n\n"}
{"name":"Multiset.untrop_sum","module":"Mathlib.Algebra.Tropical.BigOperators","initialProofState":"R : Type u_1\ninst✝¹ : LinearOrder R\ninst✝ : OrderTop R\ns : Multiset (Tropical R)\n⊢ Eq (Tropical.untrop s.sum) (Multiset.map Tropical.untrop s).inf","decl":"theorem Multiset.untrop_sum [LinearOrder R] [OrderTop R] (s : Multiset (Tropical R)) :\n    untrop s.sum = Multiset.inf (s.map untrop) := by\n  induction' s using Multiset.induction with s x IH\n  · simp\n  · simp only [sum_cons, untrop_add, untrop_le_iff, map_cons, inf_cons, ← IH]\n\n"}
{"name":"Finset.untrop_sum'","module":"Mathlib.Algebra.Tropical.BigOperators","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝¹ : LinearOrder R\ninst✝ : OrderTop R\ns : Finset S\nf : S → Tropical R\n⊢ Eq (Tropical.untrop (s.sum fun i => f i)) (s.inf (Function.comp Tropical.untrop f))","decl":"theorem Finset.untrop_sum' [LinearOrder R] [OrderTop R] (s : Finset S) (f : S → Tropical R) :\n    untrop (∑ i ∈ s, f i) = s.inf (untrop ∘ f) := by\n  convert Multiset.untrop_sum (s.val.map f)\n  simp only [Multiset.map_map, Function.comp_apply, inf_def]\n\n"}
{"name":"untrop_sum_eq_sInf_image","module":"Mathlib.Algebra.Tropical.BigOperators","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝ : ConditionallyCompleteLinearOrder R\ns : Finset S\nf : S → Tropical (WithTop R)\n⊢ Eq (Tropical.untrop (s.sum fun i => f i)) (InfSet.sInf (Set.image (Function.comp Tropical.untrop f) ↑s))","decl":"theorem untrop_sum_eq_sInf_image [ConditionallyCompleteLinearOrder R] (s : Finset S)\n    (f : S → Tropical (WithTop R)) : untrop (∑ i ∈ s, f i) = sInf (untrop ∘ f '' s) := by\n  rcases s.eq_empty_or_nonempty with (rfl | h)\n  · simp only [Set.image_empty, coe_empty, sum_empty, WithTop.sInf_empty, untrop_zero]\n  · rw [← inf'_eq_csInf_image _ h, inf'_eq_inf, Finset.untrop_sum']\n\n"}
{"name":"untrop_sum","module":"Mathlib.Algebra.Tropical.BigOperators","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝¹ : ConditionallyCompleteLinearOrder R\ninst✝ : Fintype S\nf : S → Tropical (WithTop R)\n⊢ Eq (Tropical.untrop (Finset.univ.sum fun i => f i)) (iInf fun i => Tropical.untrop (f i))","decl":"theorem untrop_sum [ConditionallyCompleteLinearOrder R] [Fintype S] (f : S → Tropical (WithTop R)) :\n    untrop (∑ i : S, f i) = ⨅ i : S, untrop (f i) := by\n  rw [iInf, ← Set.image_univ, ← coe_univ, untrop_sum_eq_sInf_image, Function.comp_def]\n\n"}
{"name":"Finset.untrop_sum","module":"Mathlib.Algebra.Tropical.BigOperators","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝ : ConditionallyCompleteLinearOrder R\ns : Finset S\nf : S → Tropical (WithTop R)\n⊢ Eq (Tropical.untrop (s.sum fun i => f i)) (iInf fun i => Tropical.untrop (f ↑i))","decl":"/-- Note we cannot use `i ∈ s` instead of `i : s` here\nas it is simply not true on conditionally complete lattices! -/\ntheorem Finset.untrop_sum [ConditionallyCompleteLinearOrder R] (s : Finset S)\n    (f : S → Tropical (WithTop R)) : untrop (∑ i ∈ s, f i) = ⨅ i : s, untrop (f i) := by\n  simpa [← _root_.untrop_sum] using (sum_attach _ _).symm\n"}
