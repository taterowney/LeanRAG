{"name":"IsClosed.isGŒ¥","module":"Mathlib.Topology.GDelta.UniformSpace","initialProofState":"X : Type u_3\ninst‚úù¬π : UniformSpace X\ninst‚úù : (uniformity X).IsCountablyGenerated\ns : Set X\nhs : IsClosed s\n‚ä¢ IsGŒ¥ s","decl":"theorem IsClosed.isGŒ¥ {X : Type*} [UniformSpace X] [IsCountablyGenerated (ùì§ X)] {s : Set X}\n    (hs : IsClosed s) : IsGŒ¥ s := by\n  rcases (@uniformity_hasBasis_open X _).exists_antitone_subbasis with ‚ü®U, hUo, hU, -‚ü©\n  rw [‚Üê hs.closure_eq, ‚Üê hU.biInter_biUnion_ball]\n  refine .biInter (to_countable _) fun n _ => IsOpen.isGŒ¥ ?_\n  exact isOpen_biUnion fun x _ => UniformSpace.isOpen_ball _ (hUo _).2\n\n"}
{"name":"IsGŒ¥.setOf_continuousAt","module":"Mathlib.Topology.GDelta.UniformSpace","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬≤ : TopologicalSpace X\ninst‚úù¬π : UniformSpace Y\ninst‚úù : (uniformity Y).IsCountablyGenerated\nf : X ‚Üí Y\n‚ä¢ IsGŒ¥ (setOf fun x => ContinuousAt f x)","decl":"/-- The set of points where a function is continuous is a GŒ¥ set. -/\ntheorem IsGŒ¥.setOf_continuousAt [UniformSpace Y] [IsCountablyGenerated (ùì§ Y)] (f : X ‚Üí Y) :\n    IsGŒ¥ { x | ContinuousAt f x } := by\n  obtain ‚ü®U, _, hU‚ü© := (@uniformity_hasBasis_open_symmetric Y _).exists_antitone_subbasis\n  simp only [Uniform.continuousAt_iff_prod, nhds_prod_eq]\n  simp only [(nhds_basis_opens _).prod_self.tendsto_iff hU.toHasBasis, forall_prop_of_true,\n    setOf_forall, id]\n  refine .iInter fun k ‚Ü¶ IsOpen.isGŒ¥ <| isOpen_iff_mem_nhds.2 fun x ‚Ü¶ ?_\n  rintro ‚ü®s, ‚ü®hsx, hso‚ü©, hsU‚ü©\n  filter_upwards [IsOpen.mem_nhds hso hsx] with _ hy using ‚ü®s, ‚ü®hy, hso‚ü©, hsU‚ü©\n\n\n"}
