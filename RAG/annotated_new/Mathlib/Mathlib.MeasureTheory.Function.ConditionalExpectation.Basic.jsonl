{"name":"MeasureTheory.condExp_def","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_5\nE : Type u_6\nm m₀ : MeasurableSpace α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nμ : MeasureTheory.Measure α\nf : α → E\n⊢ Eq (MeasureTheory.condExp m μ f) (dite (LE.le m m₀) (fun hm => dite (And (MeasureTheory.SigmaFinite (μ.trim hm)) (MeasureTheory.Integrable f μ)) (fun h => ite (MeasureTheory.StronglyMeasurable f) f (letFun ⋯ fun this => MeasureTheory.AEStronglyMeasurable.mk ↑↑(MeasureTheory.condExpL1 hm μ f) ⋯)) fun h => 0) fun hm => 0)","decl":"open scoped Classical in\nvariable (m) in\n/-- Conditional expectation of a function. It is defined as 0 if any one of the following conditions\nis true:\n- `m` is not a sub-σ-algebra of `m₀`,\n- `μ` is not σ-finite with respect to `m`,\n- `f` is not integrable. -/\nnoncomputable irreducible_def condExp (μ : Measure[m₀] α) (f : α → E) : α → E :=\n  if hm : m ≤ m₀ then\n    if h : SigmaFinite (μ.trim hm) ∧ Integrable f μ then\n      if StronglyMeasurable[m] f then f\n      else have := h.1; aestronglyMeasurable_condExpL1.mk (condExpL1 hm μ f)\n    else 0\n  else 0\n\n"}
{"name":"MeasureTheory.condExp_of_not_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhm_not : Not (LE.le m m₀)\n⊢ Eq (MeasureTheory.condExp m μ f) 0","decl":"theorem condExp_of_not_le (hm_not : ¬m ≤ m₀) : μ[f|m] = 0 := by rw [condExp, dif_neg hm_not]\n\n"}
{"name":"MeasureTheory.condexp_of_not_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhm_not : Not (LE.le m m₀)\n⊢ Eq (MeasureTheory.condExp m μ f) 0","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_of_not_le := condExp_of_not_le\n\n"}
{"name":"MeasureTheory.condExp_of_not_sigmaFinite","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhm : LE.le m m₀\nhμm_not : Not (MeasureTheory.SigmaFinite (μ.trim hm))\n⊢ Eq (MeasureTheory.condExp m μ f) 0","decl":"theorem condExp_of_not_sigmaFinite (hm : m ≤ m₀) (hμm_not : ¬SigmaFinite (μ.trim hm)) :\n    μ[f|m] = 0 := by rw [condExp, dif_pos hm, dif_neg]; push_neg; exact fun h => absurd h hμm_not\n\n"}
{"name":"MeasureTheory.condexp_of_not_sigmaFinite","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhm : LE.le m m₀\nhμm_not : Not (MeasureTheory.SigmaFinite (μ.trim hm))\n⊢ Eq (MeasureTheory.condExp m μ f) 0","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_of_not_sigmaFinite := condExp_of_not_sigmaFinite\n\n"}
{"name":"MeasureTheory.condExp_of_sigmaFinite","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhm : LE.le m m₀\nhμm : MeasureTheory.SigmaFinite (μ.trim hm)\n⊢ Eq (MeasureTheory.condExp m μ f) (ite (MeasureTheory.Integrable f μ) (ite (MeasureTheory.StronglyMeasurable f) f (MeasureTheory.AEStronglyMeasurable.mk ↑↑(MeasureTheory.condExpL1 hm μ f) ⋯)) 0)","decl":"open scoped Classical in\ntheorem condExp_of_sigmaFinite (hm : m ≤ m₀) [hμm : SigmaFinite (μ.trim hm)] :\n    μ[f|m] =\n      if Integrable f μ then\n        if StronglyMeasurable[m] f then f\n        else aestronglyMeasurable_condExpL1.mk (condExpL1 hm μ f)\n      else 0 := by\n  rw [condExp, dif_pos hm]\n  simp only [hμm, Ne, true_and]\n  by_cases hf : Integrable f μ\n  · rw [dif_pos hf, if_pos hf]\n  · rw [dif_neg hf, if_neg hf]\n\n"}
{"name":"MeasureTheory.condexp_of_sigmaFinite","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhm : LE.le m m₀\nhμm : MeasureTheory.SigmaFinite (μ.trim hm)\n⊢ Eq (MeasureTheory.condExp m μ f) (ite (MeasureTheory.Integrable f μ) (ite (MeasureTheory.StronglyMeasurable f) f (MeasureTheory.AEStronglyMeasurable.mk ↑↑(MeasureTheory.condExpL1 hm μ f) ⋯)) 0)","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_of_sigmaFinite := condExp_of_sigmaFinite\n\n"}
{"name":"MeasureTheory.condExp_of_stronglyMeasurable","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhm : LE.le m m₀\nhμm : MeasureTheory.SigmaFinite (μ.trim hm)\nf : α → E\nhf : MeasureTheory.StronglyMeasurable f\nhfi : MeasureTheory.Integrable f μ\n⊢ Eq (MeasureTheory.condExp m μ f) f","decl":"theorem condExp_of_stronglyMeasurable (hm : m ≤ m₀) [hμm : SigmaFinite (μ.trim hm)] {f : α → E}\n    (hf : StronglyMeasurable[m] f) (hfi : Integrable f μ) : μ[f|m] = f := by\n  rw [condExp_of_sigmaFinite hm, if_pos hfi, if_pos hf]\n\n"}
{"name":"MeasureTheory.condexp_of_stronglyMeasurable","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhm : LE.le m m₀\nhμm : MeasureTheory.SigmaFinite (μ.trim hm)\nf : α → E\nhf : MeasureTheory.StronglyMeasurable f\nhfi : MeasureTheory.Integrable f μ\n⊢ Eq (MeasureTheory.condExp m μ f) f","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexp_of_stronglyMeasurable := condExp_of_stronglyMeasurable\n\n"}
{"name":"MeasureTheory.condExp_const","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nhm : LE.le m m₀\nc : E\ninst✝ : MeasureTheory.IsFiniteMeasure μ\n⊢ Eq (MeasureTheory.condExp m μ fun x => c) fun x => c","decl":"@[simp]\ntheorem condExp_const (hm : m ≤ m₀) (c : E) [IsFiniteMeasure μ] : μ[fun _ : α ↦ c|m] = fun _ ↦ c :=\n  condExp_of_stronglyMeasurable hm stronglyMeasurable_const (integrable_const c)\n\n"}
{"name":"MeasureTheory.condexp_const","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nhm : LE.le m m₀\nc : E\ninst✝ : MeasureTheory.IsFiniteMeasure μ\n⊢ Eq (MeasureTheory.condExp m μ fun x => c) fun x => c","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_const := condExp_const\n\n"}
{"name":"MeasureTheory.condExp_ae_eq_condExpL1","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhm : LE.le m m₀\nhμm : MeasureTheory.SigmaFinite (μ.trim hm)\nf : α → E\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ f) ↑↑(MeasureTheory.condExpL1 hm μ f)","decl":"theorem condExp_ae_eq_condExpL1 (hm : m ≤ m₀) [hμm : SigmaFinite (μ.trim hm)] (f : α → E) :\n    μ[f|m] =ᵐ[μ] condExpL1 hm μ f := by\n  rw [condExp_of_sigmaFinite hm]\n  by_cases hfi : Integrable f μ\n  · rw [if_pos hfi]\n    by_cases hfm : StronglyMeasurable[m] f\n    · rw [if_pos hfm]\n      exact (condExpL1_of_aestronglyMeasurable' hfm.aestronglyMeasurable hfi).symm\n    · rw [if_neg hfm]\n      exact aestronglyMeasurable_condExpL1.ae_eq_mk.symm\n  rw [if_neg hfi, condExpL1_undef hfi]\n  exact (coeFn_zero _ _ _).symm\n\n"}
{"name":"MeasureTheory.condexp_ae_eq_condexpL1","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhm : LE.le m m₀\nhμm : MeasureTheory.SigmaFinite (μ.trim hm)\nf : α → E\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ f) ↑↑(MeasureTheory.condExpL1 hm μ f)","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_ae_eq_condexpL1 := condExp_ae_eq_condExpL1\n\n"}
{"name":"MeasureTheory.condExp_ae_eq_condExpL1CLM","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nhm : LE.le m m₀\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhf : MeasureTheory.Integrable f μ\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ f) ↑↑((MeasureTheory.condExpL1CLM E hm μ) (MeasureTheory.Integrable.toL1 f hf))","decl":"theorem condExp_ae_eq_condExpL1CLM (hm : m ≤ m₀) [SigmaFinite (μ.trim hm)] (hf : Integrable f μ) :\n    μ[f|m] =ᵐ[μ] condExpL1CLM E hm μ (hf.toL1 f) := by\n  refine (condExp_ae_eq_condExpL1 hm f).trans (Eventually.of_forall fun x => ?_)\n  rw [condExpL1_eq hf]\n\n"}
{"name":"MeasureTheory.condexp_ae_eq_condexpL1CLM","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nhm : LE.le m m₀\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhf : MeasureTheory.Integrable f μ\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ f) ↑↑((MeasureTheory.condExpL1CLM E hm μ) (MeasureTheory.Integrable.toL1 f hf))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_ae_eq_condexpL1CLM := condExp_ae_eq_condExpL1CLM\n\n"}
{"name":"MeasureTheory.condExp_of_not_integrable","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhf : Not (MeasureTheory.Integrable f μ)\n⊢ Eq (MeasureTheory.condExp m μ f) 0","decl":"theorem condExp_of_not_integrable (hf : ¬Integrable f μ) : μ[f|m] = 0 := by\n  by_cases hm : m ≤ m₀\n  swap; · rw [condExp_of_not_le hm]\n  by_cases hμm : SigmaFinite (μ.trim hm)\n  swap; · rw [condExp_of_not_sigmaFinite hm hμm]\n  rw [condExp_of_sigmaFinite, if_neg hf]\n\n"}
{"name":"MeasureTheory.condexp_undef","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhf : Not (MeasureTheory.Integrable f μ)\n⊢ Eq (MeasureTheory.condExp m μ f) 0","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_undef := condExp_of_not_integrable\n"}
{"name":"MeasureTheory.condExp_undef","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhf : Not (MeasureTheory.Integrable f μ)\n⊢ Eq (MeasureTheory.condExp m μ f) 0","decl":"@[deprecated (since := \"2025-01-21\")] alias condExp_undef := condExp_of_not_integrable\n\n"}
{"name":"MeasureTheory.condExp_zero","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\n⊢ Eq (MeasureTheory.condExp m μ 0) 0","decl":"@[simp]\ntheorem condExp_zero : μ[(0 : α → E)|m] = 0 := by\n  by_cases hm : m ≤ m₀\n  swap; · rw [condExp_of_not_le hm]\n  by_cases hμm : SigmaFinite (μ.trim hm)\n  swap; · rw [condExp_of_not_sigmaFinite hm hμm]\n  exact condExp_of_stronglyMeasurable hm stronglyMeasurable_zero (integrable_zero _ _ _)\n\n"}
{"name":"MeasureTheory.condexp_zero","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\n⊢ Eq (MeasureTheory.condExp m μ 0) 0","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_zero := condExp_zero\n\n"}
{"name":"MeasureTheory.stronglyMeasurable_condExp","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\n⊢ MeasureTheory.StronglyMeasurable (MeasureTheory.condExp m μ f)","decl":"theorem stronglyMeasurable_condExp : StronglyMeasurable[m] (μ[f|m]) := by\n  by_cases hm : m ≤ m₀\n  swap; · rw [condExp_of_not_le hm]; exact stronglyMeasurable_zero\n  by_cases hμm : SigmaFinite (μ.trim hm)\n  swap; · rw [condExp_of_not_sigmaFinite hm hμm]; exact stronglyMeasurable_zero\n  rw [condExp_of_sigmaFinite hm]\n  split_ifs with hfi hfm\n  · exact hfm\n  · exact aestronglyMeasurable_condExpL1.stronglyMeasurable_mk\n  · exact stronglyMeasurable_zero\n\n"}
{"name":"MeasureTheory.stronglyMeasurable_condexp","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\n⊢ MeasureTheory.StronglyMeasurable (MeasureTheory.condExp m μ f)","decl":"@[deprecated (since := \"2025-01-21\")] alias stronglyMeasurable_condexp := stronglyMeasurable_condExp\n\n"}
{"name":"MeasureTheory.condExp_congr_ae","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nh : (MeasureTheory.ae μ).EventuallyEq f g\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ f) (MeasureTheory.condExp m μ g)","decl":"theorem condExp_congr_ae (h : f =ᵐ[μ] g) : μ[f|m] =ᵐ[μ] μ[g|m] := by\n  by_cases hm : m ≤ m₀\n  swap; · simp_rw [condExp_of_not_le hm]; rfl\n  by_cases hμm : SigmaFinite (μ.trim hm)\n  swap; · simp_rw [condExp_of_not_sigmaFinite hm hμm]; rfl\n  exact (condExp_ae_eq_condExpL1 hm f).trans\n    (Filter.EventuallyEq.trans (by rw [condExpL1_congr_ae hm h])\n      (condExp_ae_eq_condExpL1 hm g).symm)\n\n"}
{"name":"MeasureTheory.condexp_congr_ae","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nh : (MeasureTheory.ae μ).EventuallyEq f g\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ f) (MeasureTheory.condExp m μ g)","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_congr_ae := condExp_congr_ae\n\n"}
{"name":"MeasureTheory.condExp_of_aestronglyMeasurable'","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhm : LE.le m m₀\nhμm : MeasureTheory.SigmaFinite (μ.trim hm)\nf : α → E\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhfi : MeasureTheory.Integrable f μ\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ f) f","decl":"theorem condExp_of_aestronglyMeasurable' (hm : m ≤ m₀) [hμm : SigmaFinite (μ.trim hm)] {f : α → E}\n    (hf : AEStronglyMeasurable[m] f μ) (hfi : Integrable f μ) : μ[f|m] =ᵐ[μ] f := by\n  refine ((condExp_congr_ae hf.ae_eq_mk).trans ?_).trans hf.ae_eq_mk.symm\n  rw [condExp_of_stronglyMeasurable hm hf.stronglyMeasurable_mk\n    ((integrable_congr hf.ae_eq_mk).mp hfi)]\n\n"}
{"name":"MeasureTheory.condexp_of_aestronglyMeasurable'","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhm : LE.le m m₀\nhμm : MeasureTheory.SigmaFinite (μ.trim hm)\nf : α → E\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhfi : MeasureTheory.Integrable f μ\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ f) f","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexp_of_aestronglyMeasurable' := condExp_of_aestronglyMeasurable'\n\n"}
{"name":"MeasureTheory.integrable_condExp","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\n⊢ MeasureTheory.Integrable (MeasureTheory.condExp m μ f) μ","decl":"@[fun_prop]\ntheorem integrable_condExp : Integrable (μ[f|m]) μ := by\n  by_cases hm : m ≤ m₀\n  swap; · rw [condExp_of_not_le hm]; exact integrable_zero _ _ _\n  by_cases hμm : SigmaFinite (μ.trim hm)\n  swap; · rw [condExp_of_not_sigmaFinite hm hμm]; exact integrable_zero _ _ _\n  exact (integrable_condExpL1 f).congr (condExp_ae_eq_condExpL1 hm f).symm\n\n"}
{"name":"MeasureTheory.integrable_condexp","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\n⊢ MeasureTheory.Integrable (MeasureTheory.condExp m μ f) μ","decl":"@[deprecated (since := \"2025-01-21\")] alias integrable_condexp := integrable_condExp\n\n"}
{"name":"MeasureTheory.setIntegral_condExp","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ns : Set α\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nhm : LE.le m m₀\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhf : MeasureTheory.Integrable f μ\nhs : MeasurableSet s\n⊢ Eq (MeasureTheory.integral (μ.restrict s) fun x => MeasureTheory.condExp m μ f x) (MeasureTheory.integral (μ.restrict s) fun x => f x)","decl":"/-- The integral of the conditional expectation `μ[f|hm]` over an `m`-measurable set is equal to\nthe integral of `f` on that set. -/\ntheorem setIntegral_condExp (hm : m ≤ m₀) [SigmaFinite (μ.trim hm)] (hf : Integrable f μ)\n    (hs : MeasurableSet[m] s) : ∫ x in s, (μ[f|m]) x ∂μ = ∫ x in s, f x ∂μ := by\n  rw [setIntegral_congr_ae (hm s hs) ((condExp_ae_eq_condExpL1 hm f).mono fun x hx _ => hx)]\n  exact setIntegral_condExpL1 hf hs\n\n"}
{"name":"MeasureTheory.setIntegral_condexp","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ns : Set α\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nhm : LE.le m m₀\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhf : MeasureTheory.Integrable f μ\nhs : MeasurableSet s\n⊢ Eq (MeasureTheory.integral (μ.restrict s) fun x => MeasureTheory.condExp m μ f x) (MeasureTheory.integral (μ.restrict s) fun x => f x)","decl":"@[deprecated (since := \"2025-01-21\")] alias setIntegral_condexp := setIntegral_condExp\n\n"}
{"name":"MeasureTheory.integral_condExp","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhm : LE.le m m₀\nhμm : MeasureTheory.SigmaFinite (μ.trim hm)\n⊢ Eq (MeasureTheory.integral μ fun x => MeasureTheory.condExp m μ f x) (MeasureTheory.integral μ fun x => f x)","decl":"theorem integral_condExp (hm : m ≤ m₀) [hμm : SigmaFinite (μ.trim hm)] :\n    ∫ x, (μ[f|m]) x ∂μ = ∫ x, f x ∂μ := by\n  by_cases hf : Integrable f μ\n  · suffices ∫ x in Set.univ, (μ[f|m]) x ∂μ = ∫ x in Set.univ, f x ∂μ by\n      simp_rw [setIntegral_univ] at this; exact this\n    exact setIntegral_condExp hm hf .univ\n  simp only [condExp_of_not_integrable hf, Pi.zero_apply, integral_zero, integral_undef hf]\n\n"}
{"name":"MeasureTheory.integral_condexp","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhm : LE.le m m₀\nhμm : MeasureTheory.SigmaFinite (μ.trim hm)\n⊢ Eq (MeasureTheory.integral μ fun x => MeasureTheory.condExp m μ f x) (MeasureTheory.integral μ fun x => f x)","decl":"@[deprecated (since := \"2025-01-21\")] alias integral_condexp := integral_condExp\n\n"}
{"name":"MeasureTheory.integral_condExp_indicator","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nβ : Type u_2\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nmβ : MeasurableSpace β\nY : α → β\nhY : Measurable Y\ninst✝ : MeasureTheory.SigmaFinite (μ.trim ⋯)\nA : Set α\nhA : MeasurableSet A\n⊢ Eq (MeasureTheory.integral μ fun x => MeasureTheory.condExp (MeasurableSpace.comap Y mβ) μ (A.indicator fun x => 1) x) (μ A).toReal","decl":"/-- **Law of total probability** using `condExp` as conditional probability. -/\ntheorem integral_condExp_indicator [mβ : MeasurableSpace β] {Y : α → β} (hY : Measurable Y)\n    [SigmaFinite (μ.trim hY.comap_le)] {A : Set α} (hA : MeasurableSet A) :\n    ∫ x, (μ[(A.indicator fun _ ↦ (1 : ℝ)) | mβ.comap Y]) x ∂μ = (μ A).toReal := by\n  rw [integral_condExp, integral_indicator hA, setIntegral_const, smul_eq_mul, mul_one]\n\n"}
{"name":"MeasureTheory.integral_condexp_indicator","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nβ : Type u_2\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nmβ : MeasurableSpace β\nY : α → β\nhY : Measurable Y\ninst✝ : MeasureTheory.SigmaFinite (μ.trim ⋯)\nA : Set α\nhA : MeasurableSet A\n⊢ Eq (MeasureTheory.integral μ fun x => MeasureTheory.condExp (MeasurableSpace.comap Y mβ) μ (A.indicator fun x => 1) x) (μ A).toReal","decl":"@[deprecated (since := \"2025-01-21\")] alias integral_condexp_indicator := integral_condExp_indicator\n\n"}
{"name":"MeasureTheory.ae_eq_condExp_of_forall_setIntegral_eq","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nhm : LE.le m m₀\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf g : α → E\nhf : MeasureTheory.Integrable f μ\nhg_int_finite : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → MeasureTheory.IntegrableOn g s μ\nhg_eq : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → Eq (MeasureTheory.integral (μ.restrict s) fun x => g x) (MeasureTheory.integral (μ.restrict s) fun x => f x)\nhgm : MeasureTheory.AEStronglyMeasurable g μ\n⊢ (MeasureTheory.ae μ).EventuallyEq g (MeasureTheory.condExp m μ f)","decl":"/-- **Uniqueness of the conditional expectation**\nIf a function is a.e. `m`-measurable, verifies an integrability condition and has same integral\nas `f` on all `m`-measurable sets, then it is a.e. equal to `μ[f|hm]`. -/\ntheorem ae_eq_condExp_of_forall_setIntegral_eq (hm : m ≤ m₀) [SigmaFinite (μ.trim hm)]\n    {f g : α → E} (hf : Integrable f μ)\n    (hg_int_finite : ∀ s, MeasurableSet[m] s → μ s < ∞ → IntegrableOn g s μ)\n    (hg_eq : ∀ s : Set α, MeasurableSet[m] s → μ s < ∞ → ∫ x in s, g x ∂μ = ∫ x in s, f x ∂μ)\n    (hgm : AEStronglyMeasurable[m] g μ) : g =ᵐ[μ] μ[f|m] := by\n  refine ae_eq_of_forall_setIntegral_eq_of_sigmaFinite' hm hg_int_finite\n    (fun s _ _ => integrable_condExp.integrableOn) (fun s hs hμs => ?_) hgm\n    (StronglyMeasurable.aestronglyMeasurable stronglyMeasurable_condExp)\n  rw [hg_eq s hs hμs, setIntegral_condExp hm hf hs]\n\n"}
{"name":"MeasureTheory.ae_eq_condexp_of_forall_setIntegral_eq","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nhm : LE.le m m₀\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf g : α → E\nhf : MeasureTheory.Integrable f μ\nhg_int_finite : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → MeasureTheory.IntegrableOn g s μ\nhg_eq : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → Eq (MeasureTheory.integral (μ.restrict s) fun x => g x) (MeasureTheory.integral (μ.restrict s) fun x => f x)\nhgm : MeasureTheory.AEStronglyMeasurable g μ\n⊢ (MeasureTheory.ae μ).EventuallyEq g (MeasureTheory.condExp m μ f)","decl":"@[deprecated (since := \"2025-01-21\")]\nalias ae_eq_condexp_of_forall_setIntegral_eq := ae_eq_condExp_of_forall_setIntegral_eq\n\n"}
{"name":"MeasureTheory.condExp_bot'","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhμ : NeZero μ\nf : α → E\n⊢ Eq (MeasureTheory.condExp Bot.bot μ f) fun x => HSMul.hSMul (Inv.inv (μ Set.univ).toReal) (MeasureTheory.integral μ fun x => f x)","decl":"theorem condExp_bot' [hμ : NeZero μ] (f : α → E) :\n    μ[f|⊥] = fun _ => (μ Set.univ).toReal⁻¹ • ∫ x, f x ∂μ := by\n  by_cases hμ_finite : IsFiniteMeasure μ\n  swap\n  · have h : ¬SigmaFinite (μ.trim bot_le) := by rwa [sigmaFinite_trim_bot_iff]\n    rw [not_isFiniteMeasure_iff] at hμ_finite\n    rw [condExp_of_not_sigmaFinite bot_le h]\n    simp only [hμ_finite, ENNReal.top_toReal, inv_zero, zero_smul]\n    rfl\n  have h_meas : StronglyMeasurable[⊥] (μ[f|⊥]) := stronglyMeasurable_condExp\n  obtain ⟨c, h_eq⟩ := stronglyMeasurable_bot_iff.mp h_meas\n  rw [h_eq]\n  have h_integral : ∫ x, (μ[f|⊥]) x ∂μ = ∫ x, f x ∂μ := integral_condExp bot_le\n  simp_rw [h_eq, integral_const] at h_integral\n  rw [← h_integral, ← smul_assoc, smul_eq_mul, inv_mul_cancel₀, one_smul]\n  rw [Ne, ENNReal.toReal_eq_zero_iff, not_or]\n  exact ⟨NeZero.ne _, measure_ne_top μ Set.univ⟩\n\n"}
{"name":"MeasureTheory.condexp_bot'","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhμ : NeZero μ\nf : α → E\n⊢ Eq (MeasureTheory.condExp Bot.bot μ f) fun x => HSMul.hSMul (Inv.inv (μ Set.univ).toReal) (MeasureTheory.integral μ fun x => f x)","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_bot' := condExp_bot'\n\n"}
{"name":"MeasureTheory.condExp_bot_ae_eq","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : α → E\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp Bot.bot μ f) fun x => HSMul.hSMul (Inv.inv (μ Set.univ).toReal) (MeasureTheory.integral μ fun x => f x)","decl":"theorem condExp_bot_ae_eq (f : α → E) :\n    μ[f|⊥] =ᵐ[μ] fun _ => (μ Set.univ).toReal⁻¹ • ∫ x, f x ∂μ := by\n  rcases eq_zero_or_neZero μ with rfl | hμ\n  · rw [ae_zero]; exact eventually_bot\n  · exact Eventually.of_forall <| congr_fun (condExp_bot' f)\n\n"}
{"name":"MeasureTheory.condexp_bot_ae_eq","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : α → E\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp Bot.bot μ f) fun x => HSMul.hSMul (Inv.inv (μ Set.univ).toReal) (MeasureTheory.integral μ fun x => f x)","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_bot_ae_eq := condExp_bot_ae_eq\n\n"}
{"name":"MeasureTheory.condExp_bot","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\ninst✝ : MeasureTheory.IsProbabilityMeasure μ\nf : α → E\n⊢ Eq (MeasureTheory.condExp Bot.bot μ f) fun x => MeasureTheory.integral μ fun x => f x","decl":"theorem condExp_bot [IsProbabilityMeasure μ] (f : α → E) : μ[f|⊥] = fun _ => ∫ x, f x ∂μ := by\n  refine (condExp_bot' f).trans ?_; rw [measure_univ, ENNReal.one_toReal, inv_one, one_smul]\n\n"}
{"name":"MeasureTheory.condexp_bot","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\ninst✝ : MeasureTheory.IsProbabilityMeasure μ\nf : α → E\n⊢ Eq (MeasureTheory.condExp Bot.bot μ f) fun x => MeasureTheory.integral μ fun x => f x","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_bot := condExp_bot\n\n"}
{"name":"MeasureTheory.condExp_add","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhf : MeasureTheory.Integrable f μ\nhg : MeasureTheory.Integrable g μ\nm : MeasurableSpace α\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ (HAdd.hAdd f g)) (HAdd.hAdd (MeasureTheory.condExp m μ f) (MeasureTheory.condExp m μ g))","decl":"theorem condExp_add (hf : Integrable f μ) (hg : Integrable g μ) (m : MeasurableSpace α) :\n    μ[f + g|m] =ᵐ[μ] μ[f|m] + μ[g|m] := by\n  by_cases hm : m ≤ m₀\n  swap; · simp_rw [condExp_of_not_le hm]; simp\n  by_cases hμm : SigmaFinite (μ.trim hm)\n  swap; · simp_rw [condExp_of_not_sigmaFinite hm hμm]; simp\n  refine (condExp_ae_eq_condExpL1 hm _).trans ?_\n  rw [condExpL1_add hf hg]\n  exact (coeFn_add _ _).trans\n    ((condExp_ae_eq_condExpL1 hm _).symm.add (condExp_ae_eq_condExpL1 hm _).symm)\n\n"}
{"name":"MeasureTheory.condexp_add","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhf : MeasureTheory.Integrable f μ\nhg : MeasureTheory.Integrable g μ\nm : MeasurableSpace α\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ (HAdd.hAdd f g)) (HAdd.hAdd (MeasureTheory.condExp m μ f) (MeasureTheory.condExp m μ g))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_add := condExp_add\n\n"}
{"name":"MeasureTheory.condExp_finset_sum","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nι : Type u_5\ns : Finset ι\nf : ι → α → E\nhf : ∀ (i : ι), Membership.mem s i → MeasureTheory.Integrable (f i) μ\nm : MeasurableSpace α\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ (s.sum fun i => f i)) (s.sum fun i => MeasureTheory.condExp m μ (f i))","decl":"theorem condExp_finset_sum {ι : Type*} {s : Finset ι} {f : ι → α → E}\n    (hf : ∀ i ∈ s, Integrable (f i) μ) (m : MeasurableSpace α) :\n    μ[∑ i ∈ s, f i|m] =ᵐ[μ] ∑ i ∈ s, μ[f i|m] := by\n  classical\n  induction' s using Finset.induction_on with i s his heq hf\n  · rw [Finset.sum_empty, Finset.sum_empty, condExp_zero]\n  · rw [Finset.sum_insert his, Finset.sum_insert his]\n    exact (condExp_add (hf i <| Finset.mem_insert_self i s)\n      (integrable_finset_sum' _ <| Finset.forall_of_forall_insert hf) _).trans\n        ((EventuallyEq.refl _ _).add <| heq <| Finset.forall_of_forall_insert hf)\n\n"}
{"name":"MeasureTheory.condexp_finset_sum","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nι : Type u_5\ns : Finset ι\nf : ι → α → E\nhf : ∀ (i : ι), Membership.mem s i → MeasureTheory.Integrable (f i) μ\nm : MeasurableSpace α\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ (s.sum fun i => f i)) (s.sum fun i => MeasureTheory.condExp m μ (f i))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_finset_sum := condExp_finset_sum\n\n"}
{"name":"MeasureTheory.condExp_smul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\n𝕜 : Type u_4\ninst✝⁴ : RCLike 𝕜\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\ninst✝ : NormedSpace 𝕜 E\nc : 𝕜\nf : α → E\nm : MeasurableSpace α\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ (HSMul.hSMul c f)) (HSMul.hSMul c (MeasureTheory.condExp m μ f))","decl":"theorem condExp_smul [NormedSpace 𝕜 E] (c : 𝕜) (f : α → E) (m : MeasurableSpace α) :\n    μ[c • f|m] =ᵐ[μ] c • μ[f|m] := by\n  by_cases hm : m ≤ m₀\n  swap; · simp_rw [condExp_of_not_le hm]; simp\n  by_cases hμm : SigmaFinite (μ.trim hm)\n  swap; · simp_rw [condExp_of_not_sigmaFinite hm hμm]; simp\n  refine (condExp_ae_eq_condExpL1 hm _).trans ?_\n  rw [condExpL1_smul c f]\n  refine (condExp_ae_eq_condExpL1 hm f).mp ?_\n  refine (coeFn_smul c (condExpL1 hm μ f)).mono fun x hx1 hx2 => ?_\n  simp only [hx1, hx2, Pi.smul_apply]\n\n"}
{"name":"MeasureTheory.condexp_smul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\n𝕜 : Type u_4\ninst✝⁴ : RCLike 𝕜\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\ninst✝ : NormedSpace 𝕜 E\nc : 𝕜\nf : α → E\nm : MeasurableSpace α\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ (HSMul.hSMul c f)) (HSMul.hSMul c (MeasureTheory.condExp m μ f))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_smul := condExp_smul\n\n"}
{"name":"MeasureTheory.condExp_neg","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : α → E\nm : MeasurableSpace α\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ (Neg.neg f)) (Neg.neg (MeasureTheory.condExp m μ f))","decl":"theorem condExp_neg (f : α → E) (m : MeasurableSpace α) : μ[-f|m] =ᵐ[μ] -μ[f|m] := by\n  calc\n    μ[-f|m] = μ[(-1 : ℝ) • f|m] := by rw [neg_one_smul ℝ f]\n    _ =ᵐ[μ] (-1 : ℝ) • μ[f|m] := condExp_smul ..\n    _ = -μ[f|m] := neg_one_smul ℝ (μ[f|m])\n\n"}
{"name":"MeasureTheory.condexp_neg","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : α → E\nm : MeasurableSpace α\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ (Neg.neg f)) (Neg.neg (MeasureTheory.condExp m μ f))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_neg := condExp_neg\n\n"}
{"name":"MeasureTheory.condExp_sub","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhf : MeasureTheory.Integrable f μ\nhg : MeasureTheory.Integrable g μ\nm : MeasurableSpace α\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ (HSub.hSub f g)) (HSub.hSub (MeasureTheory.condExp m μ f) (MeasureTheory.condExp m μ g))","decl":"theorem condExp_sub (hf : Integrable f μ) (hg : Integrable g μ) (m : MeasurableSpace α) :\n    μ[f - g|m] =ᵐ[μ] μ[f|m] - μ[g|m] := by\n  simp_rw [sub_eq_add_neg]\n  exact (condExp_add hf hg.neg _).trans (EventuallyEq.rfl.add (condExp_neg ..))\n\n"}
{"name":"MeasureTheory.condexp_sub","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhf : MeasureTheory.Integrable f μ\nhg : MeasureTheory.Integrable g μ\nm : MeasurableSpace α\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ (HSub.hSub f g)) (HSub.hSub (MeasureTheory.condExp m μ f) (MeasureTheory.condExp m μ g))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_sub := condExp_sub\n\n"}
{"name":"MeasureTheory.condExp_condExp_of_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nf : α → E\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nm₁ m₂ m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm₁₂ : LE.le m₁ m₂\nhm₂ : LE.le m₂ m₀\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm₂)\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m₁ μ (MeasureTheory.condExp m₂ μ f)) (MeasureTheory.condExp m₁ μ f)","decl":"/-- **Tower property of the conditional expectation**.\n\nTaking the `m₂`-conditional expectation then the `m₁`-conditional expectation, where `m₁` is a\nsmaller σ-algebra, is the same as taking the `m₁`-conditional expectation directly. -/\ntheorem condExp_condExp_of_le {m₁ m₂ m₀ : MeasurableSpace α} {μ : Measure α} (hm₁₂ : m₁ ≤ m₂)\n    (hm₂ : m₂ ≤ m₀) [SigmaFinite (μ.trim hm₂)] : μ[μ[f|m₂]|m₁] =ᵐ[μ] μ[f|m₁] := by\n  by_cases hμm₁ : SigmaFinite (μ.trim (hm₁₂.trans hm₂))\n  swap; · simp_rw [condExp_of_not_sigmaFinite (hm₁₂.trans hm₂) hμm₁]; rfl\n  by_cases hf : Integrable f μ\n  swap; · simp_rw [condExp_of_not_integrable hf, condExp_zero]; rfl\n  refine ae_eq_of_forall_setIntegral_eq_of_sigmaFinite' (hm₁₂.trans hm₂)\n    (fun s _ _ => integrable_condExp.integrableOn) (fun s _ _ => integrable_condExp.integrableOn) ?_\n    stronglyMeasurable_condExp.aestronglyMeasurable\n    stronglyMeasurable_condExp.aestronglyMeasurable\n  intro s hs _\n  rw [setIntegral_condExp (hm₁₂.trans hm₂) integrable_condExp hs]\n  rw [setIntegral_condExp (hm₁₂.trans hm₂) hf hs, setIntegral_condExp hm₂ hf (hm₁₂ s hs)]\n\n"}
{"name":"MeasureTheory.condexp_condexp_of_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nf : α → E\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nm₁ m₂ m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm₁₂ : LE.le m₁ m₂\nhm₂ : LE.le m₂ m₀\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm₂)\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m₁ μ (MeasureTheory.condExp m₂ μ f)) (MeasureTheory.condExp m₁ μ f)","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_condexp_of_le := condExp_condExp_of_le\n\n"}
{"name":"MeasureTheory.Memℒp.condExpL2_ae_eq_condExp'","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\n𝕜 : Type u_4\ninst✝⁵ : RCLike 𝕜\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : CompleteSpace E\ninst✝¹ : InnerProductSpace 𝕜 E\nhm : LE.le m m₀\nhf1 : MeasureTheory.Integrable f μ\nhf2 : MeasureTheory.Memℒp f 2 μ\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑↑↑((MeasureTheory.condExpL2 E 𝕜 hm) (MeasureTheory.Memℒp.toLp f hf2))) (MeasureTheory.condExp m μ f)","decl":"lemma Memℒp.condExpL2_ae_eq_condExp' (hm : m ≤ m₀) (hf1 : Integrable f μ) (hf2 : Memℒp f 2 μ)\n    [SigmaFinite (μ.trim hm)] : condExpL2 E 𝕜 hm hf2.toLp =ᵐ[μ] μ[f | m] := by\n  refine ae_eq_condExp_of_forall_setIntegral_eq hm hf1\n    (fun s hs htop ↦ integrableOn_condExpL2_of_measure_ne_top hm htop.ne _) (fun s hs htop ↦ ?_)\n    (aestronglyMeasurable_condExpL2 hm _)\n  rw [integral_condExpL2_eq hm (hf2.toLp _) hs htop.ne]\n  refine setIntegral_congr_ae (hm _ hs) ?_\n  filter_upwards [hf2.coeFn_toLp] with ω hω _ using hω\n\n"}
{"name":"MeasureTheory.Memℒp.condExpL2_ae_eq_condExp","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\n𝕜 : Type u_4\ninst✝⁵ : RCLike 𝕜\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : CompleteSpace E\ninst✝¹ : InnerProductSpace 𝕜 E\nhm : LE.le m m₀\nhf : MeasureTheory.Memℒp f 2 μ\ninst✝ : MeasureTheory.IsFiniteMeasure μ\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑↑↑((MeasureTheory.condExpL2 E 𝕜 hm) (MeasureTheory.Memℒp.toLp f hf))) (MeasureTheory.condExp m μ f)","decl":"lemma Memℒp.condExpL2_ae_eq_condExp (hm : m ≤ m₀) (hf : Memℒp f 2 μ) [IsFiniteMeasure μ] :\n    condExpL2 E 𝕜 hm hf.toLp =ᵐ[μ] μ[f | m] :=\n  hf.condExpL2_ae_eq_condExp' hm (memℒp_one_iff_integrable.1 <| hf.mono_exponent one_le_two)\n\n"}
{"name":"MeasureTheory.eLpNorm_condExp_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\ninst✝ : InnerProductSpace Real E\n⊢ LE.le (MeasureTheory.eLpNorm (MeasureTheory.condExp m μ f) 2 μ) (MeasureTheory.eLpNorm f 2 μ)","decl":"lemma eLpNorm_condExp_le : eLpNorm (μ[f | m]) 2 μ ≤ eLpNorm f 2 μ := by\n  by_cases hm : m ≤ m₀; swap\n  · simp [condExp_of_not_le hm]\n  by_cases hfμ : SigmaFinite (μ.trim hm); swap\n  · rw [condExp_of_not_sigmaFinite hm hfμ]\n    simp\n  by_cases hfi : Integrable f μ; swap\n  · rw [condExp_of_not_integrable hfi]\n    simp\n  obtain hf | hf := eq_or_ne (eLpNorm f 2 μ) ∞\n  · simp [hf]\n  replace hf : Memℒp f 2 μ := ⟨hfi.1, Ne.lt_top' fun a ↦ hf (id (Eq.symm a))⟩\n  rw [← eLpNorm_congr_ae (hf.condExpL2_ae_eq_condExp' (𝕜 := ℝ) hm hfi)]\n  refine le_trans (eLpNorm_condExpL2_le hm _) ?_\n  rw [eLpNorm_congr_ae hf.coeFn_toLp]\n\n"}
{"name":"MeasureTheory.Memℒp.condExp","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\ninst✝ : InnerProductSpace Real E\nhf : MeasureTheory.Memℒp f 2 μ\n⊢ MeasureTheory.Memℒp (MeasureTheory.condExp m μ f) 2 μ","decl":"protected lemma Memℒp.condExp (hf : Memℒp f 2 μ) : Memℒp (μ[f | m]) 2 μ := by\n  by_cases hm : m ≤ m₀\n  · exact ⟨(stronglyMeasurable_condExp.mono hm).aestronglyMeasurable,\n      eLpNorm_condExp_le.trans_lt hf.eLpNorm_lt_top⟩\n  · simp [condExp_of_not_le hm]\n\n"}
{"name":"MeasureTheory.condExp_ofNat","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nR : Type u_5\ninst✝³ : NormedRing R\ninst✝² : NormedSpace Real R\ninst✝¹ : CompleteSpace R\nn : Nat\ninst✝ : n.AtLeastTwo\nf : α → R\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ (HMul.hMul (OfNat.ofNat n) f)) (HMul.hMul (OfNat.ofNat n) (MeasureTheory.condExp m μ f))","decl":"@[simp]\nlemma condExp_ofNat (n : ℕ) [n.AtLeastTwo] (f : α → R) :\n    μ[ofNat(n) * f|m] =ᵐ[μ] ofNat(n) * μ[f|m] := by\n  simpa [Nat.cast_smul_eq_nsmul] using condExp_smul (μ := μ) (m := m) (n : ℝ) f\n\n"}
{"name":"MeasureTheory.tendsto_condExpL1_of_dominated_convergence","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : NormedLatticeAddCommGroup E\ninst✝² : CompleteSpace E\ninst✝¹ : NormedSpace Real E\nhm : LE.le m m₀\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nfs : Nat → α → E\nf : α → E\nbound_fs : α → Real\nhfs_meas : ∀ (n : Nat), MeasureTheory.AEStronglyMeasurable (fs n) μ\nh_int_bound_fs : MeasureTheory.Integrable bound_fs μ\nhfs_bound : ∀ (n : Nat), Filter.Eventually (fun x => LE.le (Norm.norm (fs n x)) (bound_fs x)) (MeasureTheory.ae μ)\nhfs : Filter.Eventually (fun x => Filter.Tendsto (fun n => fs n x) Filter.atTop (nhds (f x))) (MeasureTheory.ae μ)\n⊢ Filter.Tendsto (fun n => MeasureTheory.condExpL1 hm μ (fs n)) Filter.atTop (nhds (MeasureTheory.condExpL1 hm μ f))","decl":"/-- **Lebesgue dominated convergence theorem**: sufficient conditions under which almost\n  everywhere convergence of a sequence of functions implies the convergence of their image by\n  `condExpL1`. -/\ntheorem tendsto_condExpL1_of_dominated_convergence (hm : m ≤ m₀) [SigmaFinite (μ.trim hm)]\n    {fs : ℕ → α → E} {f : α → E} (bound_fs : α → ℝ)\n    (hfs_meas : ∀ n, AEStronglyMeasurable (fs n) μ) (h_int_bound_fs : Integrable bound_fs μ)\n    (hfs_bound : ∀ n, ∀ᵐ x ∂μ, ‖fs n x‖ ≤ bound_fs x)\n    (hfs : ∀ᵐ x ∂μ, Tendsto (fun n => fs n x) atTop (𝓝 (f x))) :\n    Tendsto (fun n => condExpL1 hm μ (fs n)) atTop (𝓝 (condExpL1 hm μ f)) :=\n  tendsto_setToFun_of_dominated_convergence _ bound_fs hfs_meas h_int_bound_fs hfs_bound hfs\n\n"}
{"name":"MeasureTheory.tendsto_condexpL1_of_dominated_convergence","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : NormedLatticeAddCommGroup E\ninst✝² : CompleteSpace E\ninst✝¹ : NormedSpace Real E\nhm : LE.le m m₀\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nfs : Nat → α → E\nf : α → E\nbound_fs : α → Real\nhfs_meas : ∀ (n : Nat), MeasureTheory.AEStronglyMeasurable (fs n) μ\nh_int_bound_fs : MeasureTheory.Integrable bound_fs μ\nhfs_bound : ∀ (n : Nat), Filter.Eventually (fun x => LE.le (Norm.norm (fs n x)) (bound_fs x)) (MeasureTheory.ae μ)\nhfs : Filter.Eventually (fun x => Filter.Tendsto (fun n => fs n x) Filter.atTop (nhds (f x))) (MeasureTheory.ae μ)\n⊢ Filter.Tendsto (fun n => MeasureTheory.condExpL1 hm μ (fs n)) Filter.atTop (nhds (MeasureTheory.condExpL1 hm μ f))","decl":"@[deprecated (since := \"2025-01-21\")]\nalias tendsto_condexpL1_of_dominated_convergence := tendsto_condExpL1_of_dominated_convergence\n\n"}
{"name":"MeasureTheory.tendsto_condExp_unique","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedLatticeAddCommGroup E\ninst✝¹ : CompleteSpace E\ninst✝ : NormedSpace Real E\nfs gs : Nat → α → E\nf g : α → E\nhfs_int : ∀ (n : Nat), MeasureTheory.Integrable (fs n) μ\nhgs_int : ∀ (n : Nat), MeasureTheory.Integrable (gs n) μ\nhfs : Filter.Eventually (fun x => Filter.Tendsto (fun n => fs n x) Filter.atTop (nhds (f x))) (MeasureTheory.ae μ)\nhgs : Filter.Eventually (fun x => Filter.Tendsto (fun n => gs n x) Filter.atTop (nhds (g x))) (MeasureTheory.ae μ)\nbound_fs : α → Real\nh_int_bound_fs : MeasureTheory.Integrable bound_fs μ\nbound_gs : α → Real\nh_int_bound_gs : MeasureTheory.Integrable bound_gs μ\nhfs_bound : ∀ (n : Nat), Filter.Eventually (fun x => LE.le (Norm.norm (fs n x)) (bound_fs x)) (MeasureTheory.ae μ)\nhgs_bound : ∀ (n : Nat), Filter.Eventually (fun x => LE.le (Norm.norm (gs n x)) (bound_gs x)) (MeasureTheory.ae μ)\nhfg : ∀ (n : Nat), (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ (fs n)) (MeasureTheory.condExp m μ (gs n))\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ f) (MeasureTheory.condExp m μ g)","decl":"/-- If two sequences of functions have a.e. equal conditional expectations at each step, converge\nand verify dominated convergence hypotheses, then the conditional expectations of their limits are\na.e. equal. -/\ntheorem tendsto_condExp_unique (fs gs : ℕ → α → E) (f g : α → E)\n    (hfs_int : ∀ n, Integrable (fs n) μ) (hgs_int : ∀ n, Integrable (gs n) μ)\n    (hfs : ∀ᵐ x ∂μ, Tendsto (fun n => fs n x) atTop (𝓝 (f x)))\n    (hgs : ∀ᵐ x ∂μ, Tendsto (fun n => gs n x) atTop (𝓝 (g x))) (bound_fs : α → ℝ)\n    (h_int_bound_fs : Integrable bound_fs μ) (bound_gs : α → ℝ)\n    (h_int_bound_gs : Integrable bound_gs μ) (hfs_bound : ∀ n, ∀ᵐ x ∂μ, ‖fs n x‖ ≤ bound_fs x)\n    (hgs_bound : ∀ n, ∀ᵐ x ∂μ, ‖gs n x‖ ≤ bound_gs x) (hfg : ∀ n, μ[fs n|m] =ᵐ[μ] μ[gs n|m]) :\n    μ[f|m] =ᵐ[μ] μ[g|m] := by\n  by_cases hm : m ≤ m₀; swap; · simp_rw [condExp_of_not_le hm]; rfl\n  by_cases hμm : SigmaFinite (μ.trim hm); swap; · simp_rw [condExp_of_not_sigmaFinite hm hμm]; rfl\n  refine (condExp_ae_eq_condExpL1 hm f).trans ((condExp_ae_eq_condExpL1 hm g).trans ?_).symm\n  rw [← Lp.ext_iff]\n  have hn_eq : ∀ n, condExpL1 hm μ (gs n) = condExpL1 hm μ (fs n) := by\n    intro n\n    ext1\n    refine (condExp_ae_eq_condExpL1 hm (gs n)).symm.trans ((hfg n).symm.trans ?_)\n    exact condExp_ae_eq_condExpL1 hm (fs n)\n  have hcond_fs : Tendsto (fun n => condExpL1 hm μ (fs n)) atTop (𝓝 (condExpL1 hm μ f)) :=\n    tendsto_condExpL1_of_dominated_convergence hm _ (fun n => (hfs_int n).1) h_int_bound_fs\n      hfs_bound hfs\n  have hcond_gs : Tendsto (fun n => condExpL1 hm μ (gs n)) atTop (𝓝 (condExpL1 hm μ g)) :=\n    tendsto_condExpL1_of_dominated_convergence hm _ (fun n => (hgs_int n).1) h_int_bound_gs\n      hgs_bound hgs\n  exact tendsto_nhds_unique_of_eventuallyEq hcond_gs hcond_fs (Eventually.of_forall hn_eq)\n\n"}
{"name":"MeasureTheory.tendsto_condexp_unique","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedLatticeAddCommGroup E\ninst✝¹ : CompleteSpace E\ninst✝ : NormedSpace Real E\nfs gs : Nat → α → E\nf g : α → E\nhfs_int : ∀ (n : Nat), MeasureTheory.Integrable (fs n) μ\nhgs_int : ∀ (n : Nat), MeasureTheory.Integrable (gs n) μ\nhfs : Filter.Eventually (fun x => Filter.Tendsto (fun n => fs n x) Filter.atTop (nhds (f x))) (MeasureTheory.ae μ)\nhgs : Filter.Eventually (fun x => Filter.Tendsto (fun n => gs n x) Filter.atTop (nhds (g x))) (MeasureTheory.ae μ)\nbound_fs : α → Real\nh_int_bound_fs : MeasureTheory.Integrable bound_fs μ\nbound_gs : α → Real\nh_int_bound_gs : MeasureTheory.Integrable bound_gs μ\nhfs_bound : ∀ (n : Nat), Filter.Eventually (fun x => LE.le (Norm.norm (fs n x)) (bound_fs x)) (MeasureTheory.ae μ)\nhgs_bound : ∀ (n : Nat), Filter.Eventually (fun x => LE.le (Norm.norm (gs n x)) (bound_gs x)) (MeasureTheory.ae μ)\nhfg : ∀ (n : Nat), (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ (fs n)) (MeasureTheory.condExp m μ (gs n))\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp m μ f) (MeasureTheory.condExp m μ g)","decl":"@[deprecated (since := \"2025-01-21\")] alias tendsto_condexp_unique := tendsto_condExp_unique\n\n"}
{"name":"MeasureTheory.condExp_mono","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → E\ninst✝³ : NormedLatticeAddCommGroup E\ninst✝² : CompleteSpace E\ninst✝¹ : NormedSpace Real E\ninst✝ : OrderedSMul Real E\nhf : MeasureTheory.Integrable f μ\nhg : MeasureTheory.Integrable g μ\nhfg : (MeasureTheory.ae μ).EventuallyLE f g\n⊢ (MeasureTheory.ae μ).EventuallyLE (MeasureTheory.condExp m μ f) (MeasureTheory.condExp m μ g)","decl":"lemma condExp_mono (hf : Integrable f μ) (hg : Integrable g μ) (hfg : f ≤ᵐ[μ] g) :\n    μ[f|m] ≤ᵐ[μ] μ[g|m] := by\n  by_cases hm : m ≤ m₀\n  swap; · simp_rw [condExp_of_not_le hm]; rfl\n  by_cases hμm : SigmaFinite (μ.trim hm)\n  swap; · simp_rw [condExp_of_not_sigmaFinite hm hμm]; rfl\n  exact (condExp_ae_eq_condExpL1 hm _).trans_le\n    ((condExpL1_mono hf hg hfg).trans_eq (condExp_ae_eq_condExpL1 hm _).symm)\n\n"}
{"name":"MeasureTheory.condExp_nonneg","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝³ : NormedLatticeAddCommGroup E\ninst✝² : CompleteSpace E\ninst✝¹ : NormedSpace Real E\ninst✝ : OrderedSMul Real E\nhf : (MeasureTheory.ae μ).EventuallyLE 0 f\n⊢ (MeasureTheory.ae μ).EventuallyLE 0 (MeasureTheory.condExp m μ f)","decl":"lemma condExp_nonneg (hf : 0 ≤ᵐ[μ] f) : 0 ≤ᵐ[μ] μ[f|m] := by\n  by_cases hfint : Integrable f μ\n  · rw [(condExp_zero.symm : (0 : α → E) = μ[0|m])]\n    exact condExp_mono (integrable_zero _ _ _) hfint hf\n  · rw [condExp_of_not_integrable hfint]\n\n"}
{"name":"MeasureTheory.condExp_nonpos","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝³ : NormedLatticeAddCommGroup E\ninst✝² : CompleteSpace E\ninst✝¹ : NormedSpace Real E\ninst✝ : OrderedSMul Real E\nhf : (MeasureTheory.ae μ).EventuallyLE f 0\n⊢ (MeasureTheory.ae μ).EventuallyLE (MeasureTheory.condExp m μ f) 0","decl":"lemma condExp_nonpos (hf : f ≤ᵐ[μ] 0) : μ[f|m] ≤ᵐ[μ] 0 := by\n  by_cases hfint : Integrable f μ\n  · rw [(condExp_zero.symm : (0 : α → E) = μ[0|m])]\n    exact condExp_mono hfint (integrable_zero _ _ _) hf\n  · rw [condExp_of_not_integrable hfint]\n\n"}
{"name":"MeasureTheory.condexp_mono","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → E\ninst✝³ : NormedLatticeAddCommGroup E\ninst✝² : CompleteSpace E\ninst✝¹ : NormedSpace Real E\ninst✝ : OrderedSMul Real E\nhf : MeasureTheory.Integrable f μ\nhg : MeasureTheory.Integrable g μ\nhfg : (MeasureTheory.ae μ).EventuallyLE f g\n⊢ (MeasureTheory.ae μ).EventuallyLE (MeasureTheory.condExp m μ f) (MeasureTheory.condExp m μ g)","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_mono := condExp_mono\n"}
{"name":"MeasureTheory.condexp_nonneg","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝³ : NormedLatticeAddCommGroup E\ninst✝² : CompleteSpace E\ninst✝¹ : NormedSpace Real E\ninst✝ : OrderedSMul Real E\nhf : (MeasureTheory.ae μ).EventuallyLE 0 f\n⊢ (MeasureTheory.ae μ).EventuallyLE 0 (MeasureTheory.condExp m μ f)","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_nonneg := condExp_nonneg\n"}
{"name":"MeasureTheory.condexp_nonpos","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic","initialProofState":"α : Type u_1\nE : Type u_3\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → E\ninst✝³ : NormedLatticeAddCommGroup E\ninst✝² : CompleteSpace E\ninst✝¹ : NormedSpace Real E\ninst✝ : OrderedSMul Real E\nhf : (MeasureTheory.ae μ).EventuallyLE f 0\n⊢ (MeasureTheory.ae μ).EventuallyLE (MeasureTheory.condExp m μ f) 0","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_nonpos := condExp_nonpos\n\n"}
