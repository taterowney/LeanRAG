{"name":"SkewMonoidAlgebra.ofFinsupp.sizeOf_spec","module":"Mathlib.Algebra.SkewMonoidAlgebra.Basic","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝² : Zero k\ninst✝¹ : SizeOf k\ninst✝ : SizeOf G\ntoFinsupp : Finsupp G k\n⊢ Eq (SizeOf.sizeOf { toFinsupp := toFinsupp }) (HAdd.hAdd 1 (SizeOf.sizeOf toFinsupp))","decl":"/-- The skew monoid algebra over a semiring `k` generated by the monoid `G`.\nIt is the type of finite formal `k`-linear combinations of terms of `G`,\nendowed with a skewed convolution product. -/\nstructure SkewMonoidAlgebra (k : Type*) (G : Type*) [Zero k] where\n  /-- The natural map from `G →₀ k` to `SkewMonoidAlgebra k G`. -/\n  ofFinsupp ::\n  /-- The natural map from `SkewMonoidAlgebra k G` to `G →₀ k`. -/\n  toFinsupp : G →₀ k\n\n"}
{"name":"SkewMonoidAlgebra.ofFinsupp.injEq","module":"Mathlib.Algebra.SkewMonoidAlgebra.Basic","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝ : Zero k\ntoFinsupp✝ toFinsupp : Finsupp G k\n⊢ Eq (Eq { toFinsupp := toFinsupp✝ } { toFinsupp := toFinsupp }) (Eq toFinsupp✝ toFinsupp)","decl":"/-- The skew monoid algebra over a semiring `k` generated by the monoid `G`.\nIt is the type of finite formal `k`-linear combinations of terms of `G`,\nendowed with a skewed convolution product. -/\nstructure SkewMonoidAlgebra (k : Type*) (G : Type*) [Zero k] where\n  /-- The natural map from `G →₀ k` to `SkewMonoidAlgebra k G`. -/\n  ofFinsupp ::\n  /-- The natural map from `SkewMonoidAlgebra k G` to `G →₀ k`. -/\n  toFinsupp : G →₀ k\n\n"}
{"name":"SkewMonoidAlgebra.ofFinsupp.inj","module":"Mathlib.Algebra.SkewMonoidAlgebra.Basic","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝ : Zero k\ntoFinsupp✝ toFinsupp : Finsupp G k\nx✝ : Eq { toFinsupp := toFinsupp✝ } { toFinsupp := toFinsupp }\n⊢ Eq toFinsupp✝ toFinsupp","decl":"/-- The skew monoid algebra over a semiring `k` generated by the monoid `G`.\nIt is the type of finite formal `k`-linear combinations of terms of `G`,\nendowed with a skewed convolution product. -/\nstructure SkewMonoidAlgebra (k : Type*) (G : Type*) [Zero k] where\n  /-- The natural map from `G →₀ k` to `SkewMonoidAlgebra k G`. -/\n  ofFinsupp ::\n  /-- The natural map from `SkewMonoidAlgebra k G` to `G →₀ k`. -/\n  toFinsupp : G →₀ k\n\n"}
{"name":"SkewMonoidAlgebra.eta","module":"Mathlib.Algebra.SkewMonoidAlgebra.Basic","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝ : AddCommMonoid k\nf : SkewMonoidAlgebra k G\n⊢ Eq { toFinsupp := f.toFinsupp } f","decl":"@[simp]\ntheorem eta (f : SkewMonoidAlgebra k G) : ofFinsupp f.toFinsupp = f := rfl\n\n"}
{"name":"SkewMonoidAlgebra.ofFinsupp_zero","module":"Mathlib.Algebra.SkewMonoidAlgebra.Basic","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝ : AddCommMonoid k\n⊢ Eq { toFinsupp := 0 } 0","decl":"@[simp]\ntheorem ofFinsupp_zero : (⟨0⟩ : SkewMonoidAlgebra k G) = 0 := rfl\n\n"}
{"name":"SkewMonoidAlgebra.ofFinsupp_add","module":"Mathlib.Algebra.SkewMonoidAlgebra.Basic","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝ : AddCommMonoid k\na b : Finsupp G k\n⊢ Eq { toFinsupp := HAdd.hAdd a b } (HAdd.hAdd { toFinsupp := a } { toFinsupp := b })","decl":"@[simp]\ntheorem ofFinsupp_add {a b} : (⟨a + b⟩ : SkewMonoidAlgebra k G) = ⟨a⟩ + ⟨b⟩ :=\n  show _ = add _ _ by rw [add]\n\n"}
{"name":"SkewMonoidAlgebra.ofFinsupp_smul","module":"Mathlib.Algebra.SkewMonoidAlgebra.Basic","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝¹ : AddCommMonoid k\nS : Type u_3\ninst✝ : SMulZeroClass S k\na : S\nb : Finsupp G k\n⊢ Eq { toFinsupp := HSMul.hSMul a b } (HSMul.hSMul a { toFinsupp := b })","decl":"@[simp]\ntheorem ofFinsupp_smul {S : Type*} [SMulZeroClass S k] (a : S) (b : G →₀ k) :\n    (⟨a • b⟩ : SkewMonoidAlgebra k G) = (a • ⟨b⟩ : SkewMonoidAlgebra k G) :=\n  show _ = smul _ _ by rw [smul]\n\n"}
{"name":"SkewMonoidAlgebra.toFinsupp_zero","module":"Mathlib.Algebra.SkewMonoidAlgebra.Basic","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝ : AddCommMonoid k\n⊢ Eq (SkewMonoidAlgebra.toFinsupp 0) 0","decl":"@[simp]\ntheorem toFinsupp_zero : (0 : SkewMonoidAlgebra k G).toFinsupp = 0 := rfl\n\n"}
{"name":"SkewMonoidAlgebra.toFinsupp_add","module":"Mathlib.Algebra.SkewMonoidAlgebra.Basic","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝ : AddCommMonoid k\na b : SkewMonoidAlgebra k G\n⊢ Eq (HAdd.hAdd a b).toFinsupp (HAdd.hAdd a.toFinsupp b.toFinsupp)","decl":"@[simp]\ntheorem toFinsupp_add (a b : SkewMonoidAlgebra k G) :\n    (a + b).toFinsupp = a.toFinsupp + b.toFinsupp := by\n  cases a\n  cases b\n  rw [← ofFinsupp_add]\n\n"}
{"name":"SkewMonoidAlgebra.toFinsupp_smul","module":"Mathlib.Algebra.SkewMonoidAlgebra.Basic","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝¹ : AddCommMonoid k\nS : Type u_3\ninst✝ : SMulZeroClass S k\na : S\nb : SkewMonoidAlgebra k G\n⊢ Eq (HSMul.hSMul a b).toFinsupp (HSMul.hSMul a b.toFinsupp)","decl":"@[simp]\ntheorem toFinsupp_smul {S : Type*} [SMulZeroClass S k] (a : S) (b : SkewMonoidAlgebra k G) :\n    (a • b).toFinsupp = a • b.toFinsupp := by\n  cases b\n  rw [← ofFinsupp_smul]\n\n"}
{"name":"IsSMulRegular.skewMonoidAlgebra","module":"Mathlib.Algebra.SkewMonoidAlgebra.Basic","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝² : AddCommMonoid k\nS : Type u_3\ninst✝¹ : Monoid S\ninst✝ : DistribMulAction S k\na : S\nha : IsSMulRegular k a\n⊢ IsSMulRegular (SkewMonoidAlgebra k G) a","decl":"theorem _root_.IsSMulRegular.skewMonoidAlgebra {S : Type*} [Monoid S] [DistribMulAction S k] {a : S}\n    (ha : IsSMulRegular k a) : IsSMulRegular (SkewMonoidAlgebra k G) a\n  | ⟨_⟩, ⟨_⟩, h => by\n    simp only [← ofFinsupp_smul] at h\n    exact congr_arg _ <| ha.finsupp (ofFinsupp.inj h)\n\n"}
{"name":"SkewMonoidAlgebra.toFinsupp_injective","module":"Mathlib.Algebra.SkewMonoidAlgebra.Basic","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝ : AddCommMonoid k\n⊢ Function.Injective SkewMonoidAlgebra.toFinsupp","decl":"theorem toFinsupp_injective :\n    Function.Injective (toFinsupp : SkewMonoidAlgebra k G → Finsupp _ _) :=\n  fun ⟨_⟩ _ => congr_arg _\n\n"}
{"name":"SkewMonoidAlgebra.toFinsupp_inj","module":"Mathlib.Algebra.SkewMonoidAlgebra.Basic","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝ : AddCommMonoid k\na b : SkewMonoidAlgebra k G\n⊢ Iff (Eq a.toFinsupp b.toFinsupp) (Eq a b)","decl":"@[simp]\ntheorem toFinsupp_inj {a b : SkewMonoidAlgebra k G} : a.toFinsupp = b.toFinsupp ↔ a = b :=\n  toFinsupp_injective.eq_iff\n\n"}
{"name":"SkewMonoidAlgebra.ofFinsupp_injective","module":"Mathlib.Algebra.SkewMonoidAlgebra.Basic","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝ : AddCommMonoid k\n⊢ Function.Injective SkewMonoidAlgebra.ofFinsupp","decl":"theorem ofFinsupp_injective :\n    Function.Injective (ofFinsupp : Finsupp _ _ → SkewMonoidAlgebra k G) :=\n  fun _ _ => congr_arg toFinsupp\n\n"}
{"name":"SkewMonoidAlgebra.ofFinsupp_inj","module":"Mathlib.Algebra.SkewMonoidAlgebra.Basic","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝ : AddCommMonoid k\na b : Finsupp G k\n⊢ Iff (Eq { toFinsupp := a } { toFinsupp := b }) (Eq a b)","decl":"/-- A more convenient spelling of `SkewMonoidAlgebra.ofFinsupp.injEq` in terms of `Iff`. -/\ntheorem ofFinsupp_inj {a b} : (⟨a⟩ : SkewMonoidAlgebra k G) = ⟨b⟩ ↔ a = b :=\n  ofFinsupp_injective.eq_iff\n\n"}
{"name":"SkewMonoidAlgebra.toFinsupp_eq_zero","module":"Mathlib.Algebra.SkewMonoidAlgebra.Basic","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝ : AddCommMonoid k\na : SkewMonoidAlgebra k G\n⊢ Iff (Eq a.toFinsupp 0) (Eq a 0)","decl":"@[simp]\ntheorem toFinsupp_eq_zero {a : SkewMonoidAlgebra k G} : a.toFinsupp = 0 ↔ a = 0 := by\n  rw [← toFinsupp_zero, toFinsupp_inj]\n\n"}
{"name":"SkewMonoidAlgebra.ofFinsupp_eq_zero","module":"Mathlib.Algebra.SkewMonoidAlgebra.Basic","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝ : AddCommMonoid k\na : Finsupp G k\n⊢ Iff (Eq { toFinsupp := a } 0) (Eq a 0)","decl":"@[simp]\ntheorem ofFinsupp_eq_zero {a} : (⟨a⟩ : SkewMonoidAlgebra k G) = 0 ↔ a = 0 := by\n  rw [← ofFinsupp_zero, ofFinsupp_inj]\n\n"}
{"name":"SkewMonoidAlgebra.instNontrivial","module":"Mathlib.Algebra.SkewMonoidAlgebra.Basic","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝² : AddCommMonoid k\ninst✝¹ : Nontrivial k\ninst✝ : Nonempty G\n⊢ Nontrivial (SkewMonoidAlgebra k G)","decl":"instance instNontrivial [Nontrivial k] [Nonempty G] :\n    Nontrivial (SkewMonoidAlgebra k G) := Function.Injective.nontrivial ofFinsupp_injective\n\n"}
{"name":"SkewMonoidAlgebra.support_ofFinsupp","module":"Mathlib.Algebra.SkewMonoidAlgebra.Basic","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝ : AddCommMonoid k\np : Finsupp G k\n⊢ Eq { toFinsupp := p }.support p.support","decl":"@[simp]\ntheorem support_ofFinsupp (p) : support (⟨p⟩ : SkewMonoidAlgebra k G) = p.support := by\n  rw [support]\n\n"}
{"name":"SkewMonoidAlgebra.support_toFinsupp","module":"Mathlib.Algebra.SkewMonoidAlgebra.Basic","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝ : AddCommMonoid k\np : SkewMonoidAlgebra k G\n⊢ Eq p.toFinsupp.support p.support","decl":"theorem support_toFinsupp (p : SkewMonoidAlgebra k G) : p.toFinsupp.support = p.support := by\n  rw [support]\n\n"}
{"name":"SkewMonoidAlgebra.support_zero","module":"Mathlib.Algebra.SkewMonoidAlgebra.Basic","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝ : AddCommMonoid k\n⊢ Eq (SkewMonoidAlgebra.support 0) EmptyCollection.emptyCollection","decl":"@[simp]\ntheorem support_zero : (0 : SkewMonoidAlgebra k G).support = ∅ := rfl\n\n"}
{"name":"SkewMonoidAlgebra.support_eq_empty","module":"Mathlib.Algebra.SkewMonoidAlgebra.Basic","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝ : AddCommMonoid k\np : SkewMonoidAlgebra k G\n⊢ Iff (Eq p.support EmptyCollection.emptyCollection) (Eq p 0)","decl":"@[simp]\ntheorem support_eq_empty {p} : p.support = ∅ ↔ (p : SkewMonoidAlgebra k G) = 0 := by\n  rcases p with ⟨⟩\n  simp only [support, Finsupp.support_eq_empty, ofFinsupp_eq_zero]\n\n"}
