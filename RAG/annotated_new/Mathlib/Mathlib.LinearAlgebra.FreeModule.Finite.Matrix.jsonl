{"name":"Module.Free.linearMap","module":"Mathlib.LinearAlgebra.FreeModule.Finite.Matrix","initialProofState":"R : Type u\nS : Type u'\nM : Type v\nN : Type w\ninst✝¹⁰ : Ring R\ninst✝⁹ : Ring S\ninst✝⁸ : AddCommGroup M\ninst✝⁷ : Module R M\ninst✝⁶ : Module.Free R M\ninst✝⁵ : Module.Finite R M\ninst✝⁴ : AddCommGroup N\ninst✝³ : Module R N\ninst✝² : Module S N\ninst✝¹ : SMulCommClass R S N\ninst✝ : Module.Free S N\n⊢ Module.Free S (LinearMap (RingHom.id R) M N)","decl":"instance Module.Free.linearMap [Module.Free S N] : Module.Free S (M →ₗ[R] N) :=\n  Module.Free.of_equiv (linearMapEquivFun R S M N).symm\n\n"}
{"name":"Module.Finite.linearMap","module":"Mathlib.LinearAlgebra.FreeModule.Finite.Matrix","initialProofState":"R : Type u\nS : Type u'\nM : Type v\nN : Type w\ninst✝¹⁰ : Ring R\ninst✝⁹ : Ring S\ninst✝⁸ : AddCommGroup M\ninst✝⁷ : Module R M\ninst✝⁶ : Module.Free R M\ninst✝⁵ : Module.Finite R M\ninst✝⁴ : AddCommGroup N\ninst✝³ : Module R N\ninst✝² : Module S N\ninst✝¹ : SMulCommClass R S N\ninst✝ : Module.Finite S N\n⊢ Module.Finite S (LinearMap (RingHom.id R) M N)","decl":"instance Module.Finite.linearMap [Module.Finite S N] : Module.Finite S (M →ₗ[R] N) :=\n  Module.Finite.equiv (linearMapEquivFun R S M N).symm\n\n"}
{"name":"Module.rank_linearMap","module":"Mathlib.LinearAlgebra.FreeModule.Finite.Matrix","initialProofState":"R : Type u\nS : Type u'\nM : Type v\nN : Type w\ninst✝¹² : Ring R\ninst✝¹¹ : Ring S\ninst✝¹⁰ : AddCommGroup M\ninst✝⁹ : Module R M\ninst✝⁸ : Module.Free R M\ninst✝⁷ : Module.Finite R M\ninst✝⁶ : AddCommGroup N\ninst✝⁵ : Module R N\ninst✝⁴ : Module S N\ninst✝³ : SMulCommClass R S N\ninst✝² : StrongRankCondition R\ninst✝¹ : StrongRankCondition S\ninst✝ : Module.Free S N\n⊢ Eq (Module.rank S (LinearMap (RingHom.id R) M N)) (HMul.hMul (Cardinal.lift.{w, v} (Module.rank R M)) (Cardinal.lift.{v, w} (Module.rank S N)))","decl":"theorem Module.rank_linearMap :\n    Module.rank S (M →ₗ[R] N) = lift.{w} (Module.rank R M) * lift.{v} (Module.rank S N) := by\n  rw [(linearMapEquivFun R S M N).rank_eq, rank_fun_eq_lift_mul,\n    ← finrank_eq_card_chooseBasisIndex, ← finrank_eq_rank R, lift_natCast]\n\n"}
{"name":"Module.finrank_linearMap","module":"Mathlib.LinearAlgebra.FreeModule.Finite.Matrix","initialProofState":"R : Type u\nS : Type u'\nM : Type v\nN : Type w\ninst✝¹² : Ring R\ninst✝¹¹ : Ring S\ninst✝¹⁰ : AddCommGroup M\ninst✝⁹ : Module R M\ninst✝⁸ : Module.Free R M\ninst✝⁷ : Module.Finite R M\ninst✝⁶ : AddCommGroup N\ninst✝⁵ : Module R N\ninst✝⁴ : Module S N\ninst✝³ : SMulCommClass R S N\ninst✝² : StrongRankCondition R\ninst✝¹ : StrongRankCondition S\ninst✝ : Module.Free S N\n⊢ Eq (Module.finrank S (LinearMap (RingHom.id R) M N)) (HMul.hMul (Module.finrank R M) (Module.finrank S N))","decl":"/-- The finrank of `M →ₗ[R] N` as an `S`-module is `(finrank R M) * (finrank S N)`. -/\ntheorem Module.finrank_linearMap :\n    finrank S (M →ₗ[R] N) = finrank R M * finrank S N := by\n  simp_rw [finrank, rank_linearMap, toNat_mul, toNat_lift]\n\n"}
{"name":"Module.rank_linearMap_self","module":"Mathlib.LinearAlgebra.FreeModule.Finite.Matrix","initialProofState":"R : Type u\nS : Type u'\nM : Type v\ninst✝⁹ : Ring R\ninst✝⁸ : Ring S\ninst✝⁷ : AddCommGroup M\ninst✝⁶ : Module R M\ninst✝⁵ : Module.Free R M\ninst✝⁴ : Module.Finite R M\ninst✝³ : StrongRankCondition R\ninst✝² : StrongRankCondition S\ninst✝¹ : Module R S\ninst✝ : SMulCommClass R S S\n⊢ Eq (Module.rank S (LinearMap (RingHom.id R) M S)) (Cardinal.lift.{u', v} (Module.rank R M))","decl":"theorem Module.rank_linearMap_self :\n    Module.rank S (M →ₗ[R] S) = lift.{u'} (Module.rank R M) := by\n  rw [rank_linearMap, rank_self, lift_one, mul_one]\n\n"}
{"name":"Module.finrank_linearMap_self","module":"Mathlib.LinearAlgebra.FreeModule.Finite.Matrix","initialProofState":"R : Type u\nS : Type u'\nM : Type v\ninst✝⁹ : Ring R\ninst✝⁸ : Ring S\ninst✝⁷ : AddCommGroup M\ninst✝⁶ : Module R M\ninst✝⁵ : Module.Free R M\ninst✝⁴ : Module.Finite R M\ninst✝³ : StrongRankCondition R\ninst✝² : StrongRankCondition S\ninst✝¹ : Module R S\ninst✝ : SMulCommClass R S S\n⊢ Eq (Module.finrank S (LinearMap (RingHom.id R) M S)) (Module.finrank R M)","decl":"theorem Module.finrank_linearMap_self : finrank S (M →ₗ[R] S) = finrank R M := by\n  rw [finrank_linearMap, finrank_self, mul_one]\n\n"}
{"name":"Finite.algHom","module":"Mathlib.LinearAlgebra.FreeModule.Finite.Matrix","initialProofState":"K : Type u_1\nM : Type u_2\nL : Type v\ninst✝⁷ : CommRing K\ninst✝⁶ : Ring M\ninst✝⁵ : Algebra K M\ninst✝⁴ : Module.Free K M\ninst✝³ : Module.Finite K M\ninst✝² : CommRing L\ninst✝¹ : IsDomain L\ninst✝ : Algebra K L\n⊢ Finite (AlgHom K M L)","decl":"instance Finite.algHom : Finite (M →ₐ[K] L) :=\n  (linearIndependent_algHom_toLinearMap K M L).finite\n\n"}
{"name":"cardinalMk_algHom_le_rank","module":"Mathlib.LinearAlgebra.FreeModule.Finite.Matrix","initialProofState":"K : Type u_1\nM : Type u_2\nL : Type v\ninst✝⁷ : CommRing K\ninst✝⁶ : Ring M\ninst✝⁵ : Algebra K M\ninst✝⁴ : Module.Free K M\ninst✝³ : Module.Finite K M\ninst✝² : CommRing L\ninst✝¹ : IsDomain L\ninst✝ : Algebra K L\n⊢ LE.le (Cardinal.mk (AlgHom K M L)) (Cardinal.lift.{v, u_2} (Module.rank K M))","decl":"theorem cardinalMk_algHom_le_rank : #(M →ₐ[K] L) ≤ lift.{v} (Module.rank K M) := by\n  convert (linearIndependent_algHom_toLinearMap K M L).cardinal_lift_le_rank\n  · rw [lift_id]\n  · have := Module.nontrivial K L\n    rw [lift_id, Module.rank_linearMap_self]\n\n"}
{"name":"cardinal_mk_algHom_le_rank","module":"Mathlib.LinearAlgebra.FreeModule.Finite.Matrix","initialProofState":"K : Type u_1\nM : Type u_2\nL : Type v\ninst✝⁷ : CommRing K\ninst✝⁶ : Ring M\ninst✝⁵ : Algebra K M\ninst✝⁴ : Module.Free K M\ninst✝³ : Module.Finite K M\ninst✝² : CommRing L\ninst✝¹ : IsDomain L\ninst✝ : Algebra K L\n⊢ LE.le (Cardinal.mk (AlgHom K M L)) (Cardinal.lift.{v, u_2} (Module.rank K M))","decl":"@[deprecated (since := \"2024-11-10\")] alias cardinal_mk_algHom_le_rank := cardinalMk_algHom_le_rank\n\n"}
{"name":"card_algHom_le_finrank","module":"Mathlib.LinearAlgebra.FreeModule.Finite.Matrix","initialProofState":"K : Type u_1\nM : Type u_2\nL : Type v\ninst✝⁷ : CommRing K\ninst✝⁶ : Ring M\ninst✝⁵ : Algebra K M\ninst✝⁴ : Module.Free K M\ninst✝³ : Module.Finite K M\ninst✝² : CommRing L\ninst✝¹ : IsDomain L\ninst✝ : Algebra K L\n⊢ LE.le (Nat.card (AlgHom K M L)) (Module.finrank K M)","decl":"@[stacks 09HS]\ntheorem card_algHom_le_finrank : Nat.card (M →ₐ[K] L) ≤ finrank K M := by\n  convert toNat_le_toNat (cardinalMk_algHom_le_rank K M L) ?_\n  · rw [toNat_lift, finrank]\n  · rw [lift_lt_aleph0]; have := Module.nontrivial K L; apply Module.rank_lt_aleph0\n\n"}
{"name":"Module.Finite.addMonoidHom","module":"Mathlib.LinearAlgebra.FreeModule.Finite.Matrix","initialProofState":"M : Type v\nN : Type w\ninst✝⁴ : AddCommGroup M\ninst✝³ : Module.Finite Int M\ninst✝² : Module.Free Int M\ninst✝¹ : AddCommGroup N\ninst✝ : Module.Finite Int N\n⊢ Module.Finite Int (AddMonoidHom M N)","decl":"instance Module.Finite.addMonoidHom [Module.Finite ℤ N] : Module.Finite ℤ (M →+ N) :=\n  Module.Finite.equiv (addMonoidHomLequivInt ℤ).symm\n\n"}
{"name":"Module.Free.addMonoidHom","module":"Mathlib.LinearAlgebra.FreeModule.Finite.Matrix","initialProofState":"M : Type v\nN : Type w\ninst✝⁴ : AddCommGroup M\ninst✝³ : Module.Finite Int M\ninst✝² : Module.Free Int M\ninst✝¹ : AddCommGroup N\ninst✝ : Module.Free Int N\n⊢ Module.Free Int (AddMonoidHom M N)","decl":"instance Module.Free.addMonoidHom [Module.Free ℤ N] : Module.Free ℤ (M →+ N) :=\n  letI : Module.Free ℤ (M →ₗ[ℤ] N) := Module.Free.linearMap _ _ _ _\n  Module.Free.of_equiv (addMonoidHomLequivInt ℤ).symm\n\n"}
{"name":"Matrix.rank_vecMulVec","module":"Mathlib.LinearAlgebra.FreeModule.Finite.Matrix","initialProofState":"K m n : Type u\ninst✝² : CommRing K\ninst✝¹ : Fintype n\ninst✝ : DecidableEq n\nw : m → K\nv : n → K\n⊢ LE.le (Matrix.toLin' (Matrix.vecMulVec w v)).rank 1","decl":"theorem Matrix.rank_vecMulVec {K m n : Type u} [CommRing K] [Fintype n]\n    [DecidableEq n] (w : m → K) (v : n → K) : (Matrix.vecMulVec w v).toLin'.rank ≤ 1 := by\n  nontriviality K\n  rw [Matrix.vecMulVec_eq (Fin 1), Matrix.toLin'_mul]\n  refine le_trans (LinearMap.rank_comp_le_left _ _) ?_\n  refine (LinearMap.rank_le_domain _).trans_eq ?_\n  rw [rank_fun', Fintype.card_ofSubsingleton, Nat.cast_one]\n"}
