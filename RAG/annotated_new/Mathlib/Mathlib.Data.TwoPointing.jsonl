{"name":"TwoPointing.fst_ne_snd","module":"Mathlib.Data.TwoPointing","initialProofState":"α : Type u_3\nself : TwoPointing α\n⊢ Ne self.fst self.snd","decl":"/-- Two-pointing of a type. This is a Type-valued termed `Nontrivial`. -/\n@[ext]\nstructure TwoPointing (α : Type*) extends α × α where\n  /-- `fst` and `snd` are distinct terms -/\n  fst_ne_snd : fst ≠ snd\n  deriving DecidableEq\n\n"}
{"name":"TwoPointing.mk.inj","module":"Mathlib.Data.TwoPointing","initialProofState":"α : Type u_3\ntoProd✝ : Prod α α\nfst_ne_snd✝ : Ne toProd✝.fst toProd✝.snd\ntoProd : Prod α α\nfst_ne_snd : Ne toProd.fst toProd.snd\nx✝ : Eq { toProd := toProd✝, fst_ne_snd := fst_ne_snd✝ } { toProd := toProd, fst_ne_snd := fst_ne_snd }\n⊢ Eq toProd✝ toProd","decl":"/-- Two-pointing of a type. This is a Type-valued termed `Nontrivial`. -/\n@[ext]\nstructure TwoPointing (α : Type*) extends α × α where\n  /-- `fst` and `snd` are distinct terms -/\n  fst_ne_snd : fst ≠ snd\n  deriving DecidableEq\n\n"}
{"name":"TwoPointing.ext","module":"Mathlib.Data.TwoPointing","initialProofState":"α : Type u_3\nx y : TwoPointing α\nfst : Eq x.fst y.fst\nsnd : Eq x.snd y.snd\n⊢ Eq x y","decl":"/-- Two-pointing of a type. This is a Type-valued termed `Nontrivial`. -/\n@[ext]\nstructure TwoPointing (α : Type*) extends α × α where\n  /-- `fst` and `snd` are distinct terms -/\n  fst_ne_snd : fst ≠ snd\n  deriving DecidableEq\n\n"}
{"name":"TwoPointing.ext_iff","module":"Mathlib.Data.TwoPointing","initialProofState":"α : Type u_3\nx y : TwoPointing α\n⊢ Iff (Eq x y) (And (Eq x.fst y.fst) (Eq x.snd y.snd))","decl":"/-- Two-pointing of a type. This is a Type-valued termed `Nontrivial`. -/\n@[ext]\nstructure TwoPointing (α : Type*) extends α × α where\n  /-- `fst` and `snd` are distinct terms -/\n  fst_ne_snd : fst ≠ snd\n  deriving DecidableEq\n\n"}
{"name":"TwoPointing.mk.sizeOf_spec","module":"Mathlib.Data.TwoPointing","initialProofState":"α : Type u_3\ninst✝ : SizeOf α\ntoProd : Prod α α\nfst_ne_snd : Ne toProd.fst toProd.snd\n⊢ Eq (SizeOf.sizeOf { toProd := toProd, fst_ne_snd := fst_ne_snd }) (HAdd.hAdd 1 (SizeOf.sizeOf toProd))","decl":"/-- Two-pointing of a type. This is a Type-valued termed `Nontrivial`. -/\n@[ext]\nstructure TwoPointing (α : Type*) extends α × α where\n  /-- `fst` and `snd` are distinct terms -/\n  fst_ne_snd : fst ≠ snd\n  deriving DecidableEq\n\n"}
{"name":"TwoPointing.mk.injEq","module":"Mathlib.Data.TwoPointing","initialProofState":"α : Type u_3\ntoProd✝ : Prod α α\nfst_ne_snd✝ : Ne toProd✝.fst toProd✝.snd\ntoProd : Prod α α\nfst_ne_snd : Ne toProd.fst toProd.snd\n⊢ Eq (Eq { toProd := toProd✝, fst_ne_snd := fst_ne_snd✝ } { toProd := toProd, fst_ne_snd := fst_ne_snd }) (Eq toProd✝ toProd)","decl":"/-- Two-pointing of a type. This is a Type-valued termed `Nontrivial`. -/\n@[ext]\nstructure TwoPointing (α : Type*) extends α × α where\n  /-- `fst` and `snd` are distinct terms -/\n  fst_ne_snd : fst ≠ snd\n  deriving DecidableEq\n\n"}
{"name":"TwoPointing.snd_ne_fst","module":"Mathlib.Data.TwoPointing","initialProofState":"α : Type u_1\np : TwoPointing α\n⊢ Ne p.snd p.fst","decl":"theorem snd_ne_fst : p.snd ≠ p.fst :=\n  p.fst_ne_snd.symm\n\n"}
{"name":"TwoPointing.swap_toProd","module":"Mathlib.Data.TwoPointing","initialProofState":"α : Type u_1\np : TwoPointing α\n⊢ Eq p.swap.toProd { fst := p.snd, snd := p.fst }","decl":"/-- Swaps the two pointed elements. -/\n@[simps]\ndef swap : TwoPointing α :=\n  ⟨(p.snd, p.fst), p.snd_ne_fst⟩\n\n"}
{"name":"TwoPointing.swap_fst","module":"Mathlib.Data.TwoPointing","initialProofState":"α : Type u_1\np : TwoPointing α\n⊢ Eq p.swap.fst p.snd","decl":"theorem swap_fst : p.swap.fst = p.snd := rfl\n\n"}
{"name":"TwoPointing.swap_snd","module":"Mathlib.Data.TwoPointing","initialProofState":"α : Type u_1\np : TwoPointing α\n⊢ Eq p.swap.snd p.fst","decl":"theorem swap_snd : p.swap.snd = p.fst := rfl\n\n"}
{"name":"TwoPointing.swap_swap","module":"Mathlib.Data.TwoPointing","initialProofState":"α : Type u_1\np : TwoPointing α\n⊢ Eq p.swap.swap p","decl":"@[simp]\ntheorem swap_swap : p.swap.swap = p := rfl\n\n"}
{"name":"TwoPointing.to_nontrivial","module":"Mathlib.Data.TwoPointing","initialProofState":"α : Type u_1\np : TwoPointing α\n⊢ Nontrivial α","decl":"include p in\ntheorem to_nontrivial : Nontrivial α :=\n  ⟨⟨p.fst, p.snd, p.fst_ne_snd⟩⟩\n\n"}
{"name":"TwoPointing.instNonemptyOfNontrivial","module":"Mathlib.Data.TwoPointing","initialProofState":"α : Type u_1\ninst✝ : Nontrivial α\n⊢ Nonempty (TwoPointing α)","decl":"instance [Nontrivial α] : Nonempty (TwoPointing α) :=\n  let ⟨a, b, h⟩ := exists_pair_ne α\n  ⟨⟨(a, b), h⟩⟩\n\n"}
{"name":"TwoPointing.nonempty_two_pointing_iff","module":"Mathlib.Data.TwoPointing","initialProofState":"α : Type u_1\n⊢ Iff (Nonempty (TwoPointing α)) (Nontrivial α)","decl":"@[simp]\ntheorem nonempty_two_pointing_iff : Nonempty (TwoPointing α) ↔ Nontrivial α :=\n  ⟨fun ⟨p⟩ ↦ p.to_nontrivial, fun _ => inferInstance⟩\n\n"}
{"name":"TwoPointing.pi_fst","module":"Mathlib.Data.TwoPointing","initialProofState":"α : Type u_1\nβ : Type u_2\nq : TwoPointing β\ninst✝ : Nonempty α\n⊢ Eq (TwoPointing.pi α q).fst (Function.const α q.fst)","decl":"@[simp]\ntheorem pi_fst : (q.pi α).fst = const α q.fst :=\n  rfl\n\n"}
{"name":"TwoPointing.pi_snd","module":"Mathlib.Data.TwoPointing","initialProofState":"α : Type u_1\nβ : Type u_2\nq : TwoPointing β\ninst✝ : Nonempty α\n⊢ Eq (TwoPointing.pi α q).snd (Function.const α q.snd)","decl":"@[simp]\ntheorem pi_snd : (q.pi α).snd = const α q.snd :=\n  rfl\n\n"}
{"name":"TwoPointing.prod_fst","module":"Mathlib.Data.TwoPointing","initialProofState":"α : Type u_1\nβ : Type u_2\np : TwoPointing α\nq : TwoPointing β\n⊢ Eq (p.prod q).fst { fst := p.fst, snd := q.fst }","decl":"@[simp]\ntheorem prod_fst : (p.prod q).fst = (p.fst, q.fst) :=\n  rfl\n\n"}
{"name":"TwoPointing.prod_snd","module":"Mathlib.Data.TwoPointing","initialProofState":"α : Type u_1\nβ : Type u_2\np : TwoPointing α\nq : TwoPointing β\n⊢ Eq (p.prod q).snd { fst := p.snd, snd := q.snd }","decl":"@[simp]\ntheorem prod_snd : (p.prod q).snd = (p.snd, q.snd) :=\n  rfl\n\n"}
{"name":"TwoPointing.sum_fst","module":"Mathlib.Data.TwoPointing","initialProofState":"α : Type u_1\nβ : Type u_2\np : TwoPointing α\nq : TwoPointing β\n⊢ Eq (p.sum q).fst (Sum.inl p.fst)","decl":"@[simp]\ntheorem sum_fst : (p.sum q).fst = Sum.inl p.fst :=\n  rfl\n\n"}
{"name":"TwoPointing.sum_snd","module":"Mathlib.Data.TwoPointing","initialProofState":"α : Type u_1\nβ : Type u_2\np : TwoPointing α\nq : TwoPointing β\n⊢ Eq (p.sum q).snd (Sum.inr q.snd)","decl":"@[simp]\ntheorem sum_snd : (p.sum q).snd = Sum.inr q.snd :=\n  rfl\n\n"}
{"name":"TwoPointing.bool_fst","module":"Mathlib.Data.TwoPointing","initialProofState":"⊢ Eq TwoPointing.bool.fst Bool.false","decl":"@[simp]\ntheorem bool_fst : TwoPointing.bool.fst = false := rfl\n\n"}
{"name":"TwoPointing.bool_snd","module":"Mathlib.Data.TwoPointing","initialProofState":"⊢ Eq TwoPointing.bool.snd Bool.true","decl":"@[simp]\ntheorem bool_snd : TwoPointing.bool.snd = true := rfl\n\n"}
{"name":"TwoPointing.prop_fst","module":"Mathlib.Data.TwoPointing","initialProofState":"⊢ Eq TwoPointing.prop.fst False","decl":"@[simp]\ntheorem prop_fst : TwoPointing.prop.fst = False :=\n  rfl\n\n"}
{"name":"TwoPointing.prop_snd","module":"Mathlib.Data.TwoPointing","initialProofState":"⊢ Eq TwoPointing.prop.snd True","decl":"@[simp]\ntheorem prop_snd : TwoPointing.prop.snd = True :=\n  rfl\n\n"}
