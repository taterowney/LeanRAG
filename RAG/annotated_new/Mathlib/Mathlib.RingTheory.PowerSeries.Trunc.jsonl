{"name":"PowerSeries.coeff_trunc","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nm n : Nat\nφ : PowerSeries R\n⊢ Eq ((PowerSeries.trunc n φ).coeff m) (ite (LT.lt m n) ((PowerSeries.coeff R m) φ) 0)","decl":"theorem coeff_trunc (m) (n) (φ : R⟦X⟧) :\n    (trunc n φ).coeff m = if m < n then coeff R m φ else 0 := by\n  simp [trunc, Polynomial.coeff_sum, Polynomial.coeff_monomial, Nat.lt_succ_iff]\n\n"}
{"name":"PowerSeries.trunc_zero","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nn : Nat\n⊢ Eq (PowerSeries.trunc n 0) 0","decl":"@[simp]\ntheorem trunc_zero (n) : trunc n (0 : R⟦X⟧) = 0 :=\n  Polynomial.ext fun m => by\n    rw [coeff_trunc, LinearMap.map_zero, Polynomial.coeff_zero]\n    split_ifs <;> rfl\n\n"}
{"name":"PowerSeries.trunc_one","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nn : Nat\n⊢ Eq (PowerSeries.trunc (HAdd.hAdd n 1) 1) 1","decl":"@[simp]\ntheorem trunc_one (n) : trunc (n + 1) (1 : R⟦X⟧) = 1 :=\n  Polynomial.ext fun m => by\n    rw [coeff_trunc, coeff_one, Polynomial.coeff_one]\n    split_ifs with h _ h'\n    · rfl\n    · rfl\n    · subst h'; simp at h\n    · rfl\n\n"}
{"name":"PowerSeries.trunc_C","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nn : Nat\na : R\n⊢ Eq (PowerSeries.trunc (HAdd.hAdd n 1) ((PowerSeries.C R) a)) (Polynomial.C a)","decl":"@[simp]\ntheorem trunc_C (n) (a : R) : trunc (n + 1) (C R a) = Polynomial.C a :=\n  Polynomial.ext fun m => by\n    rw [coeff_trunc, coeff_C, Polynomial.coeff_C]\n    split_ifs with H <;> first |rfl|try simp_all\n\n"}
{"name":"PowerSeries.trunc_add","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nn : Nat\nφ ψ : PowerSeries R\n⊢ Eq (PowerSeries.trunc n (HAdd.hAdd φ ψ)) (HAdd.hAdd (PowerSeries.trunc n φ) (PowerSeries.trunc n ψ))","decl":"@[simp]\ntheorem trunc_add (n) (φ ψ : R⟦X⟧) : trunc n (φ + ψ) = trunc n φ + trunc n ψ :=\n  Polynomial.ext fun m => by\n    simp only [coeff_trunc, AddMonoidHom.map_add, Polynomial.coeff_add]\n    split_ifs with H\n    · rfl\n    · rw [zero_add]\n\n"}
{"name":"PowerSeries.trunc_succ","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nf : PowerSeries R\nn : Nat\n⊢ Eq (PowerSeries.trunc n.succ f) (HAdd.hAdd (PowerSeries.trunc n f) ((Polynomial.monomial n) ((PowerSeries.coeff R n) f)))","decl":"theorem trunc_succ (f : R⟦X⟧) (n : ℕ) :\n    trunc n.succ f = trunc n f + Polynomial.monomial n (coeff R n f) := by\n  rw [trunc, Ico_zero_eq_range, sum_range_succ, trunc, Ico_zero_eq_range]\n\n"}
{"name":"PowerSeries.natDegree_trunc_lt","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nf : PowerSeries R\nn : Nat\n⊢ LT.lt (PowerSeries.trunc (HAdd.hAdd n 1) f).natDegree (HAdd.hAdd n 1)","decl":"theorem natDegree_trunc_lt (f : R⟦X⟧) (n) : (trunc (n + 1) f).natDegree < n + 1 := by\n  rw [Nat.lt_succ_iff, natDegree_le_iff_coeff_eq_zero]\n  intros\n  rw [coeff_trunc]\n  split_ifs with h\n  · rw [lt_succ, ← not_lt] at h\n    contradiction\n  · rfl\n\n"}
{"name":"PowerSeries.trunc_zero'","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nf : PowerSeries R\n⊢ Eq (PowerSeries.trunc 0 f) 0","decl":"@[simp] lemma trunc_zero' {f : R⟦X⟧} : trunc 0 f = 0 := rfl\n\n"}
{"name":"PowerSeries.degree_trunc_lt","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nf : PowerSeries R\nn : Nat\n⊢ LT.lt (PowerSeries.trunc n f).degree ↑n","decl":"theorem degree_trunc_lt (f : R⟦X⟧) (n) : (trunc n f).degree < n := by\n  rw [degree_lt_iff_coeff_zero]\n  intros\n  rw [coeff_trunc]\n  split_ifs with h\n  · rw [← not_le] at h\n    contradiction\n  · rfl\n\n"}
{"name":"PowerSeries.eval₂_trunc_eq_sum_range","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_1\ninst✝¹ : Semiring R\nS : Type u_2\ninst✝ : Semiring S\ns : S\nG : RingHom R S\nn : Nat\nf : PowerSeries R\n⊢ Eq (Polynomial.eval₂ G s (PowerSeries.trunc n f)) ((Finset.range n).sum fun i => HMul.hMul (G ((PowerSeries.coeff R i) f)) (HPow.hPow s i))","decl":"theorem eval₂_trunc_eq_sum_range {S : Type*} [Semiring S] (s : S) (G : R →+* S) (n) (f : R⟦X⟧) :\n    (trunc n f).eval₂ G s = ∑ i ∈ range n, G (coeff R i f) * s ^ i := by\n  cases n with\n  | zero =>\n    rw [trunc_zero', range_zero, sum_empty, eval₂_zero]\n  | succ n =>\n    have := natDegree_trunc_lt f n\n    rw [eval₂_eq_sum_range' (hn := this)]\n    apply sum_congr rfl\n    intro _ h\n    rw [mem_range] at h\n    congr\n    rw [coeff_trunc, if_pos h]\n\n"}
{"name":"PowerSeries.trunc_X","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nn : Nat\n⊢ Eq (PowerSeries.trunc (HAdd.hAdd n 2) PowerSeries.X) Polynomial.X","decl":"@[simp] theorem trunc_X (n) : trunc (n + 2) X = (Polynomial.X : R[X]) := by\n  ext d\n  rw [coeff_trunc, coeff_X]\n  split_ifs with h₁ h₂\n  · rw [h₂, coeff_X_one]\n  · rw [coeff_X_of_ne_one h₂]\n  · rw [coeff_X_of_ne_one]\n    intro hd\n    apply h₁\n    rw [hd]\n    exact n.one_lt_succ_succ\n\n"}
{"name":"PowerSeries.trunc_X_of","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nn : Nat\nhn : LE.le 2 n\n⊢ Eq (PowerSeries.trunc n PowerSeries.X) Polynomial.X","decl":"lemma trunc_X_of {n : ℕ} (hn : 2 ≤ n) : trunc n X = (Polynomial.X : R[X]) := by\n  cases n with\n  | zero => contradiction\n  | succ n =>\n    cases n with\n    | zero => contradiction\n    | succ n => exact trunc_X n\n\n"}
{"name":"PowerSeries.trunc_one_left","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_1\ninst✝ : Semiring R\np : PowerSeries R\n⊢ Eq (PowerSeries.trunc 1 p) (Polynomial.C ((PowerSeries.coeff R 0) p))","decl":"@[simp]\nlemma trunc_one_left (p : R⟦X⟧) : trunc (R := R) 1 p = .C (coeff R 0 p) := by\n  ext i; simp +contextual [coeff_trunc, Polynomial.coeff_C]\n\n"}
{"name":"PowerSeries.trunc_one_X","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_1\ninst✝ : Semiring R\n⊢ Eq (PowerSeries.trunc 1 PowerSeries.X) 0","decl":"lemma trunc_one_X : trunc (R := R) 1 X = 0 := by simp\n\n"}
{"name":"PowerSeries.trunc_C_mul","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nn : Nat\nr : R\nf : PowerSeries R\n⊢ Eq (PowerSeries.trunc n (HMul.hMul ((PowerSeries.C R) r) f)) (HMul.hMul (Polynomial.C r) (PowerSeries.trunc n f))","decl":"@[simp]\nlemma trunc_C_mul (n : ℕ) (r : R) (f : R⟦X⟧) : trunc n (C R r * f) = .C r * trunc n f := by\n  ext i; simp [coeff_trunc]\n\n"}
{"name":"PowerSeries.trunc_mul_C","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nn : Nat\nf : PowerSeries R\nr : R\n⊢ Eq (PowerSeries.trunc n (HMul.hMul f ((PowerSeries.C R) r))) (HMul.hMul (PowerSeries.trunc n f) (Polynomial.C r))","decl":"@[simp]\nlemma trunc_mul_C (n : ℕ) (f : R⟦X⟧) (r : R) : trunc n (f * C R r) = trunc n f * .C r := by\n  ext i; simp [coeff_trunc]\n\n"}
{"name":"PowerSeries.trunc_trunc_of_le","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_2\ninst✝ : CommSemiring R\nn m : Nat\nf : PowerSeries R\nhnm : autoParam (LE.le n m) _auto✝\n⊢ Eq (PowerSeries.trunc n ↑(PowerSeries.trunc m f)) (PowerSeries.trunc n f)","decl":"theorem trunc_trunc_of_le {n m} (f : R⟦X⟧) (hnm : n ≤ m := by rfl) :\n    trunc n ↑(trunc m f) = trunc n f := by\n  ext d\n  rw [coeff_trunc, coeff_trunc, coeff_coe]\n  split_ifs with h\n  · rw [coeff_trunc, if_pos <| lt_of_lt_of_le h hnm]\n  · rfl\n\n"}
{"name":"PowerSeries.trunc_trunc","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_2\ninst✝ : CommSemiring R\nn : Nat\nf : PowerSeries R\n⊢ Eq (PowerSeries.trunc n ↑(PowerSeries.trunc n f)) (PowerSeries.trunc n f)","decl":"@[simp] theorem trunc_trunc {n} (f : R⟦X⟧) : trunc n ↑(trunc n f) = trunc n f :=\n  trunc_trunc_of_le f\n\n"}
{"name":"PowerSeries.trunc_trunc_mul","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_2\ninst✝ : CommSemiring R\nn : Nat\nf g : PowerSeries R\n⊢ Eq (PowerSeries.trunc n (HMul.hMul (↑(PowerSeries.trunc n f)) g)) (PowerSeries.trunc n (HMul.hMul f g))","decl":"@[simp] theorem trunc_trunc_mul {n} (f g : R ⟦X⟧) :\n    trunc n ((trunc n f) * g : R⟦X⟧) = trunc n (f * g) := by\n  ext m\n  rw [coeff_trunc, coeff_trunc]\n  split_ifs with h\n  · rw [coeff_mul, coeff_mul, sum_congr rfl]\n    intro _ hab\n    have ha := lt_of_le_of_lt (antidiagonal.fst_le hab) h\n    rw [coeff_coe, coeff_trunc, if_pos ha]\n  · rfl\n\n"}
{"name":"PowerSeries.trunc_mul_trunc","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_2\ninst✝ : CommSemiring R\nn : Nat\nf g : PowerSeries R\n⊢ Eq (PowerSeries.trunc n (HMul.hMul f ↑(PowerSeries.trunc n g))) (PowerSeries.trunc n (HMul.hMul f g))","decl":"@[simp] theorem trunc_mul_trunc {n} (f g : R ⟦X⟧) :\n    trunc n (f * (trunc n g) : R⟦X⟧) = trunc n (f * g) := by\n  rw [mul_comm, trunc_trunc_mul, mul_comm]\n\n"}
{"name":"PowerSeries.trunc_trunc_mul_trunc","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_2\ninst✝ : CommSemiring R\nn : Nat\nf g : PowerSeries R\n⊢ Eq (PowerSeries.trunc n (HMul.hMul ↑(PowerSeries.trunc n f) ↑(PowerSeries.trunc n g))) (PowerSeries.trunc n (HMul.hMul f g))","decl":"theorem trunc_trunc_mul_trunc {n} (f g : R⟦X⟧) :\n    trunc n (trunc n f * trunc n g : R⟦X⟧) = trunc n (f * g) := by\n  rw [trunc_trunc_mul, trunc_mul_trunc]\n\n"}
{"name":"PowerSeries.trunc_trunc_pow","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_2\ninst✝ : CommSemiring R\nf : PowerSeries R\nn a : Nat\n⊢ Eq (PowerSeries.trunc n (HPow.hPow (↑(PowerSeries.trunc n f)) a)) (PowerSeries.trunc n (HPow.hPow f a))","decl":"@[simp] theorem trunc_trunc_pow (f : R⟦X⟧) (n a : ℕ) :\n    trunc n ((trunc n f : R⟦X⟧) ^ a) = trunc n (f ^ a) := by\n  induction a with\n  | zero =>\n    rw [pow_zero, pow_zero]\n  | succ a ih =>\n    rw [_root_.pow_succ', _root_.pow_succ', trunc_trunc_mul,\n      ← trunc_trunc_mul_trunc, ih, trunc_trunc_mul_trunc]\n\n"}
{"name":"PowerSeries.trunc_coe_eq_self","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_2\ninst✝ : CommSemiring R\nn : Nat\nf : Polynomial R\nhn : LT.lt f.natDegree n\n⊢ Eq (PowerSeries.trunc n ↑f) f","decl":"theorem trunc_coe_eq_self {n} {f : R[X]} (hn : natDegree f < n) : trunc n (f : R⟦X⟧) = f := by\n  rw [← Polynomial.coe_inj]\n  ext m\n  rw [coeff_coe, coeff_trunc]\n  split\n  case isTrue h => rfl\n  case isFalse h =>\n    rw [not_lt] at h\n    rw [coeff_coe]; symm\n    exact coeff_eq_zero_of_natDegree_lt <| lt_of_lt_of_le hn h\n\n"}
{"name":"PowerSeries.coeff_coe_trunc_of_lt","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_2\ninst✝ : CommSemiring R\nn m : Nat\nf : PowerSeries R\nh : LT.lt n m\n⊢ Eq ((PowerSeries.coeff R n) ↑(PowerSeries.trunc m f)) ((PowerSeries.coeff R n) f)","decl":"/-- The function `coeff n : R⟦X⟧ → R` is continuous. I.e. `coeff n f` depends only on a sufficiently\nlong truncation of the power series `f`. -/\ntheorem coeff_coe_trunc_of_lt {n m} {f : R⟦X⟧} (h : n < m) :\n    coeff R n (trunc m f) = coeff R n f := by\n  rwa [coeff_coe, coeff_trunc, if_pos]\n\n"}
{"name":"PowerSeries.coeff_mul_eq_coeff_trunc_mul_trunc₂","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_2\ninst✝ : CommSemiring R\nn a b : Nat\nf g : PowerSeries R\nha : LT.lt n a\nhb : LT.lt n b\n⊢ Eq ((PowerSeries.coeff R n) (HMul.hMul f g)) ((PowerSeries.coeff R n) (HMul.hMul ↑(PowerSeries.trunc a f) ↑(PowerSeries.trunc b g)))","decl":"/-- The `n`-th coefficient of `f*g` may be calculated\nfrom the truncations of `f` and `g`. -/\ntheorem coeff_mul_eq_coeff_trunc_mul_trunc₂ {n a b} (f g) (ha : n < a) (hb : n < b) :\n    coeff R n (f * g) = coeff R n (trunc a f * trunc b g) := by\n  symm\n  rw [← coeff_coe_trunc_of_lt n.lt_succ_self, ← trunc_trunc_mul_trunc, trunc_trunc_of_le f ha,\n    trunc_trunc_of_le g hb, trunc_trunc_mul_trunc, coeff_coe_trunc_of_lt n.lt_succ_self]\n\n"}
{"name":"PowerSeries.coeff_mul_eq_coeff_trunc_mul_trunc","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_2\ninst✝ : CommSemiring R\nd n : Nat\nf g : PowerSeries R\nh : LT.lt d n\n⊢ Eq ((PowerSeries.coeff R d) (HMul.hMul f g)) ((PowerSeries.coeff R d) (HMul.hMul ↑(PowerSeries.trunc n f) ↑(PowerSeries.trunc n g)))","decl":"theorem coeff_mul_eq_coeff_trunc_mul_trunc {d n} (f g) (h : d < n) :\n    coeff R d (f * g) = coeff R d (trunc n f * trunc n g) :=\n  coeff_mul_eq_coeff_trunc_mul_trunc₂ f g h h\n\n"}
{"name":"PowerSeries.trunc_map","module":"Mathlib.RingTheory.PowerSeries.Trunc","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝¹ : Semiring R\ninst✝ : Semiring S\nf : RingHom R S\np : PowerSeries R\nn : Nat\n⊢ Eq (PowerSeries.trunc n ((PowerSeries.map f) p)) (Polynomial.map f (PowerSeries.trunc n p))","decl":"lemma trunc_map (p : R⟦X⟧) (n : ℕ) : (p.map f).trunc n = (p.trunc n).map f := by\n  ext m; simp [coeff_trunc, apply_ite f]\n\n"}
