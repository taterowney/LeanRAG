{"name":"MeasureTheory.tendsto_measure_symmDiff_preimage_nhds_zero","module":"Mathlib.MeasureTheory.Measure.ContinuousPreimage","initialProofState":"α : Type u_1\nX : Type u_2\nY : Type u_3\ninst✝⁹ : TopologicalSpace X\ninst✝⁸ : MeasurableSpace X\ninst✝⁷ : BorelSpace X\ninst✝⁶ : R1Space X\ninst✝⁵ : TopologicalSpace Y\ninst✝⁴ : MeasurableSpace Y\ninst✝³ : BorelSpace Y\ninst✝² : R1Space Y\nμ : MeasureTheory.Measure X\nν : MeasureTheory.Measure Y\ninst✝¹ : μ.InnerRegularCompactLTTop\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure ν\nl : Filter α\nf : α → ContinuousMap X Y\ng : ContinuousMap X Y\ns : Set Y\nhfg : Filter.Tendsto f l (nhds g)\nhf : Filter.Eventually (fun a => MeasureTheory.MeasurePreserving (⇑(f a)) μ ν) l\nhg : MeasureTheory.MeasurePreserving (⇑g) μ ν\nhs : MeasureTheory.NullMeasurableSet s ν\nhνs : Ne (ν s) Top.top\n⊢ Filter.Tendsto (fun a => μ (symmDiff (Set.preimage (⇑(f a)) s) (Set.preimage (⇑g) s))) l (nhds 0)","decl":"/-- Let `X` and `Y` be R₁ topological spaces\nwith Borel σ-algebras and measures `μ` and `ν`, respectively.\nSuppose that `μ` is inner regular for finite measure sets with respect to compact sets\nand `ν` is a locally finite measure.\nLet `f : α → C(X, Y)` be a family of continuous maps\nthat converges to a continuous map `g : C(X, Y)` in the compact-open topology along a filter `l`.\nSuppose that `g` is a measure preserving map\nand `f a` is a measure preserving map eventually along `l`.\nThen for any finite measure measurable set `s`,\nthe preimages `f a ⁻¹' s` tend to the preimage `g ⁻¹' s` in measure.\nMore precisely, the measure of the symmetric difference of these two sets tends to zero. -/\ntheorem tendsto_measure_symmDiff_preimage_nhds_zero\n    {l : Filter α} {f : α → C(X, Y)} {g : C(X, Y)} {s : Set Y} (hfg : Tendsto f l (𝓝 g))\n    (hf : ∀ᶠ a in l, MeasurePreserving (f a) μ ν) (hg : MeasurePreserving g μ ν)\n    (hs : NullMeasurableSet s ν) (hνs : ν s ≠ ∞) :\n    Tendsto (fun a ↦ μ ((f a ⁻¹' s) ∆ (g ⁻¹' s))) l (𝓝 0) := by\n  have : ν.InnerRegularCompactLTTop := by\n    rw [← hg.map_eq]\n    exact .map_of_continuous (map_continuous _)\n  rw [ENNReal.tendsto_nhds_zero]\n  intro ε hε\n  -- Without loss of generality, `s` is an open set.\n  wlog hso : IsOpen s generalizing s ε\n  · have H : 0 < ε / 3 := ENNReal.div_pos hε.ne' ENNReal.coe_ne_top\n    -- Indeed, we can choose an open set `U` such that `ν (U ∆ s) < ε / 3`,\n    -- apply the lemma to `U`, then use the triangle inequality for `μ (_ ∆ _)`.\n    rcases hs.exists_isOpen_symmDiff_lt hνs H.ne' with ⟨U, hUo, hU, hUs⟩\n    have hmU : NullMeasurableSet U ν := hUo.measurableSet.nullMeasurableSet\n    replace hUs := hUs.le\n    filter_upwards [hf, this hmU hU.ne _ H hUo] with a hfa ha\n    calc\n      μ ((f a ⁻¹' s) ∆ (g ⁻¹' s))\n        ≤ μ ((f a ⁻¹' s) ∆ (f a ⁻¹' U)) + μ ((f a ⁻¹' U) ∆ (g ⁻¹' U))\n          + μ ((g ⁻¹' U) ∆ (g ⁻¹' s)) := by\n        refine (measure_symmDiff_le _ (g ⁻¹' U) _).trans ?_\n        gcongr\n        apply measure_symmDiff_le\n      _ ≤ ε / 3 + ε / 3 + ε / 3 := by\n        gcongr\n        · rwa [← preimage_symmDiff, hfa.measure_preimage (hs.symmDiff hmU), symmDiff_comm]\n        · rwa [← preimage_symmDiff, hg.measure_preimage (hmU.symmDiff hs)]\n      _ = ε := by simp\n  -- Take a compact closed subset `K ⊆ g ⁻¹' s` of almost full measure,\n  -- `μ (g ⁻¹' s \\ K) < ε / 2`.\n  have hνs' : μ (g ⁻¹' s) ≠ ∞ := by rwa [hg.measure_preimage hs]\n  obtain ⟨K, hKg, hKco, hKcl, hKμ⟩ :\n      ∃ K, MapsTo g K s ∧ IsCompact K ∧ IsClosed K ∧ μ (g ⁻¹' s \\ K) < ε / 2 :=\n    (hg.measurable hso.measurableSet).exists_isCompact_isClosed_diff_lt hνs' <| by simp [hε.ne']\n  have hKm : NullMeasurableSet K μ := hKcl.nullMeasurableSet\n  -- Take `a` such that `f a` is measure preserving and maps `K` to `s`.\n  -- This is possible, because `K` is a compact set and `s` is an open set.\n  filter_upwards [hf, ContinuousMap.tendsto_nhds_compactOpen.mp hfg K hKco s hso hKg] with a hfa ha\n  -- Then each of the sets `g ⁻¹' s ∆ K = g ⁻¹' s \\ K` and `f a ⁻¹' s ∆ K = f a ⁻¹' s \\ K`\n  -- have measure at most `ε / 2`, thus `f a ⁻¹' s ∆ g ⁻¹' s` has measure at most `ε`.\n  rw [← ENNReal.add_halves ε]\n  refine (measure_symmDiff_le _ K _).trans ?_\n  rw [symmDiff_of_ge ha.subset_preimage, symmDiff_of_le hKg.subset_preimage]\n  gcongr\n  have hK' : μ K ≠ ∞ := ne_top_of_le_ne_top hνs' <| measure_mono hKg.subset_preimage\n  rw [measure_diff_le_iff_le_add hKm ha.subset_preimage hK', hfa.measure_preimage hs,\n    ← hg.measure_preimage hs, ← measure_diff_le_iff_le_add hKm hKg.subset_preimage hK']\n  exact hKμ.le\n\n"}
{"name":"MeasureTheory.isClosed_setOf_preimage_ae_eq","module":"Mathlib.MeasureTheory.Measure.ContinuousPreimage","initialProofState":"X : Type u_2\nY : Type u_3\nZ : Type u_4\ninst✝¹⁰ : TopologicalSpace X\ninst✝⁹ : MeasurableSpace X\ninst✝⁸ : BorelSpace X\ninst✝⁷ : R1Space X\ninst✝⁶ : TopologicalSpace Y\ninst✝⁵ : MeasurableSpace Y\ninst✝⁴ : BorelSpace Y\ninst✝³ : R1Space Y\ninst✝² : TopologicalSpace Z\nμ : MeasureTheory.Measure X\nν : MeasureTheory.Measure Y\ninst✝¹ : μ.InnerRegularCompactLTTop\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure ν\nf : Z → ContinuousMap X Y\nhf : Continuous f\nhfm : ∀ (z : Z), MeasureTheory.MeasurePreserving (⇑(f z)) μ ν\ns : Set X\nt : Set Y\nhtm : MeasureTheory.NullMeasurableSet t ν\nht : Ne (ν t) Top.top\n⊢ IsClosed (setOf fun z => (MeasureTheory.ae μ).EventuallyEq (Set.preimage (⇑(f z)) t) s)","decl":"/-- Let `f : Z → C(X, Y)` be a continuous (in the compact open topology) family\nof continuous measure preserving maps.\nLet `t : Set Y` be a null measurable set of finite measure.\nThen for any `s`, the set of parameters `z`\nsuch that the preimage of `t` under `f_z` is a.e. equal to `s`\nis a closed set.\n\nIn particular, if `X = Y` and `s = t`,\nthen we see that the a.e. stabilizer of a set is a closed set. -/\ntheorem isClosed_setOf_preimage_ae_eq {f : Z → C(X, Y)} (hf : Continuous f)\n    (hfm : ∀ z, MeasurePreserving (f z) μ ν) (s : Set X)\n    {t : Set Y} (htm : NullMeasurableSet t ν) (ht : ν t ≠ ∞) :\n    IsClosed {z | f z ⁻¹' t =ᵐ[μ] s} := by\n  rw [← isOpen_compl_iff, isOpen_iff_mem_nhds]\n  intro z hz\n  replace hz : ∀ᶠ ε : ℝ≥0∞ in 𝓝 0, ε < μ ((f z ⁻¹' t) ∆ s) := by\n    apply gt_mem_nhds\n    rwa [pos_iff_ne_zero, ne_eq, measure_symmDiff_eq_zero_iff]\n  filter_upwards [(tendsto_measure_symmDiff_preimage_nhds_zero (hf.tendsto z)\n    (.of_forall hfm) (hfm z) htm ht).eventually hz] with w hw\n  intro (hw' : f w ⁻¹' t =ᵐ[μ] s)\n  rw [measure_congr (hw'.symmDiff (ae_eq_refl _)), symmDiff_comm] at hw\n  exact hw.false\n\n"}
