{"name":"Polynomial.hermite_succ","module":"Mathlib.RingTheory.Polynomial.Hermite.Basic","initialProofState":"n : Nat\n⊢ Eq (Polynomial.hermite (HAdd.hAdd n 1)) (HSub.hSub (HMul.hMul Polynomial.X (Polynomial.hermite n)) (Polynomial.derivative (Polynomial.hermite n)))","decl":"/-- The recursion `hermite (n+1) = (x - d/dx) (hermite n)` -/\n@[simp]\ntheorem hermite_succ (n : ℕ) : hermite (n + 1) = X * hermite n - derivative (hermite n) := by\n  rw [hermite]\n\n"}
{"name":"Polynomial.hermite_eq_iterate","module":"Mathlib.RingTheory.Polynomial.Hermite.Basic","initialProofState":"n : Nat\n⊢ Eq (Polynomial.hermite n) (Nat.iterate (fun p => HSub.hSub (HMul.hMul Polynomial.X p) (Polynomial.derivative p)) n 1)","decl":"theorem hermite_eq_iterate (n : ℕ) : hermite n = (fun p => X * p - derivative p)^[n] 1 := by\n  induction n with\n  | zero => rfl\n  | succ n ih => rw [Function.iterate_succ_apply', ← ih, hermite_succ]\n\n"}
{"name":"Polynomial.hermite_zero","module":"Mathlib.RingTheory.Polynomial.Hermite.Basic","initialProofState":"⊢ Eq (Polynomial.hermite 0) (Polynomial.C 1)","decl":"@[simp]\ntheorem hermite_zero : hermite 0 = C 1 :=\n  rfl\n\n"}
{"name":"Polynomial.hermite_one","module":"Mathlib.RingTheory.Polynomial.Hermite.Basic","initialProofState":"⊢ Eq (Polynomial.hermite 1) Polynomial.X","decl":"theorem hermite_one : hermite 1 = X := by\n  rw [hermite_succ, hermite_zero]\n  simp only [map_one, mul_one, derivative_one, sub_zero]\n\n"}
{"name":"Polynomial.coeff_hermite_succ_zero","module":"Mathlib.RingTheory.Polynomial.Hermite.Basic","initialProofState":"n : Nat\n⊢ Eq ((Polynomial.hermite (HAdd.hAdd n 1)).coeff 0) (Neg.neg ((Polynomial.hermite n).coeff 1))","decl":"theorem coeff_hermite_succ_zero (n : ℕ) : coeff (hermite (n + 1)) 0 = -coeff (hermite n) 1 := by\n  simp [coeff_derivative]\n\n"}
{"name":"Polynomial.coeff_hermite_succ_succ","module":"Mathlib.RingTheory.Polynomial.Hermite.Basic","initialProofState":"n k : Nat\n⊢ Eq ((Polynomial.hermite (HAdd.hAdd n 1)).coeff (HAdd.hAdd k 1)) (HSub.hSub ((Polynomial.hermite n).coeff k) (HMul.hMul (HAdd.hAdd (↑k) 2) ((Polynomial.hermite n).coeff (HAdd.hAdd k 2))))","decl":"theorem coeff_hermite_succ_succ (n k : ℕ) : coeff (hermite (n + 1)) (k + 1) =\n    coeff (hermite n) k - (k + 2) * coeff (hermite n) (k + 2) := by\n  rw [hermite_succ, coeff_sub, coeff_X_mul, coeff_derivative, mul_comm]\n  norm_cast\n\n"}
{"name":"Polynomial.coeff_hermite_of_lt","module":"Mathlib.RingTheory.Polynomial.Hermite.Basic","initialProofState":"n k : Nat\nhnk : LT.lt n k\n⊢ Eq ((Polynomial.hermite n).coeff k) 0","decl":"theorem coeff_hermite_of_lt {n k : ℕ} (hnk : n < k) : coeff (hermite n) k = 0 := by\n  obtain ⟨k, rfl⟩ := Nat.exists_eq_add_of_lt hnk\n  clear hnk\n  induction n generalizing k with\n  | zero => exact coeff_C\n  | succ n ih =>\n    have : n + k + 1 + 2 = n + (k + 2) + 1 := by ring\n    rw [coeff_hermite_succ_succ, add_right_comm, this, ih k, ih (k + 2), mul_zero, sub_zero]\n\n"}
{"name":"Polynomial.coeff_hermite_self","module":"Mathlib.RingTheory.Polynomial.Hermite.Basic","initialProofState":"n : Nat\n⊢ Eq ((Polynomial.hermite n).coeff n) 1","decl":"@[simp]\ntheorem coeff_hermite_self (n : ℕ) : coeff (hermite n) n = 1 := by\n  induction n with\n  | zero => exact coeff_C\n  | succ n ih =>\n    rw [coeff_hermite_succ_succ, ih, coeff_hermite_of_lt, mul_zero, sub_zero]\n    simp\n\n"}
{"name":"Polynomial.degree_hermite","module":"Mathlib.RingTheory.Polynomial.Hermite.Basic","initialProofState":"n : Nat\n⊢ Eq (Polynomial.hermite n).degree ↑n","decl":"@[simp]\ntheorem degree_hermite (n : ℕ) : (hermite n).degree = n := by\n  rw [degree_eq_of_le_of_coeff_ne_zero]\n  · simp_rw [degree_le_iff_coeff_zero, Nat.cast_lt]\n    rintro m hnm\n    exact coeff_hermite_of_lt hnm\n  · simp [coeff_hermite_self n]\n\n"}
{"name":"Polynomial.natDegree_hermite","module":"Mathlib.RingTheory.Polynomial.Hermite.Basic","initialProofState":"n : Nat\n⊢ Eq (Polynomial.hermite n).natDegree n","decl":"@[simp]\ntheorem natDegree_hermite {n : ℕ} : (hermite n).natDegree = n :=\n  natDegree_eq_of_degree_eq_some (degree_hermite n)\n\n"}
{"name":"Polynomial.leadingCoeff_hermite","module":"Mathlib.RingTheory.Polynomial.Hermite.Basic","initialProofState":"n : Nat\n⊢ Eq (Polynomial.hermite n).leadingCoeff 1","decl":"@[simp]\ntheorem leadingCoeff_hermite (n : ℕ) : (hermite n).leadingCoeff = 1 := by\n  rw [← coeff_natDegree, natDegree_hermite, coeff_hermite_self]\n\n"}
{"name":"Polynomial.hermite_monic","module":"Mathlib.RingTheory.Polynomial.Hermite.Basic","initialProofState":"n : Nat\n⊢ (Polynomial.hermite n).Monic","decl":"theorem hermite_monic (n : ℕ) : (hermite n).Monic :=\n  leadingCoeff_hermite n\n\n"}
{"name":"Polynomial.coeff_hermite_of_odd_add","module":"Mathlib.RingTheory.Polynomial.Hermite.Basic","initialProofState":"n k : Nat\nhnk : Odd (HAdd.hAdd n k)\n⊢ Eq ((Polynomial.hermite n).coeff k) 0","decl":"theorem coeff_hermite_of_odd_add {n k : ℕ} (hnk : Odd (n + k)) : coeff (hermite n) k = 0 := by\n  induction n generalizing k with\n  | zero =>\n    rw [zero_add k] at hnk\n    exact coeff_hermite_of_lt hnk.pos\n  | succ n ih =>\n    cases k with\n    | zero =>\n      rw [Nat.succ_add_eq_add_succ] at hnk\n      rw [coeff_hermite_succ_zero, ih hnk, neg_zero]\n    | succ k =>\n      rw [coeff_hermite_succ_succ, ih, ih, mul_zero, sub_zero]\n      · rwa [Nat.succ_add_eq_add_succ] at hnk\n      · rw [(by rw [Nat.succ_add, Nat.add_succ] : n.succ + k.succ = n + k + 2)] at hnk\n        exact (Nat.odd_add.mp hnk).mpr even_two\n\n"}
{"name":"Polynomial.coeff_hermite_explicit","module":"Mathlib.RingTheory.Polynomial.Hermite.Basic","initialProofState":"n k : Nat\n⊢ Eq ((Polynomial.hermite (HAdd.hAdd (HMul.hMul 2 n) k)).coeff k) (HMul.hMul (HMul.hMul (HPow.hPow (-1) n) ↑(HSub.hSub (HMul.hMul 2 n) 1).doubleFactorial) ↑((HAdd.hAdd (HMul.hMul 2 n) k).choose k))","decl":"/-- Because of `coeff_hermite_of_odd_add`, every nonzero coefficient is described as follows. -/\ntheorem coeff_hermite_explicit :\n    ∀ n k : ℕ, coeff (hermite (2 * n + k)) k = (-1) ^ n * (2 * n - 1)‼ * Nat.choose (2 * n + k) k\n  | 0, _ => by simp\n  | n + 1, 0 => by\n    convert coeff_hermite_succ_zero (2 * n + 1) using 1\n    -- Porting note: ring_nf did not solve the goal on line 165\n    rw [coeff_hermite_explicit n 1, (by rw [Nat.left_distrib, mul_one, Nat.add_one_sub_one] :\n      2 * (n + 1) - 1 = 2 * n + 1), Nat.doubleFactorial_add_one, Nat.choose_zero_right,\n      Nat.choose_one_right, pow_succ]\n    push_cast\n    ring\n  | n + 1, k + 1 => by\n    let hermite_explicit : ℕ → ℕ → ℤ := fun n k =>\n      (-1) ^ n * (2 * n - 1)‼ * Nat.choose (2 * n + k) k\n    have hermite_explicit_recur :\n      ∀ n k : ℕ,\n        hermite_explicit (n + 1) (k + 1) =\n          hermite_explicit (n + 1) k - (k + 2) * hermite_explicit n (k + 2) := by\n      intro n k\n      simp only [hermite_explicit]\n      -- Factor out (-1)'s.\n      rw [mul_comm (↑k + _ : ℤ), sub_eq_add_neg]\n      nth_rw 3 [neg_eq_neg_one_mul]\n      simp only [mul_assoc, ← mul_add, pow_succ']\n      congr 2\n      -- Factor out double factorials.\n      norm_cast\n      -- Porting note: ring_nf did not solve the goal on line 186\n      rw [(by rw [Nat.left_distrib, mul_one, Nat.add_one_sub_one] : 2 * (n + 1) - 1 = 2 * n + 1),\n        Nat.doubleFactorial_add_one, mul_comm (2 * n + 1)]\n      simp only [mul_assoc, ← mul_add]\n      congr 1\n      -- Match up binomial coefficients using `Nat.choose_succ_right_eq`.\n      rw [(by ring : 2 * (n + 1) + (k + 1) = 2 * n + 1 + (k + 1) + 1),\n        (by ring : 2 * (n + 1) + k = 2 * n + 1 + (k + 1)),\n        (by ring : 2 * n + (k + 2) = 2 * n + 1 + (k + 1))]\n      rw [Nat.choose, Nat.choose_succ_right_eq (2 * n + 1 + (k + 1)) (k + 1), Nat.add_sub_cancel]\n      ring\n    change _ = hermite_explicit _ _\n    rw [← add_assoc, coeff_hermite_succ_succ, hermite_explicit_recur]\n    congr\n    · rw [coeff_hermite_explicit (n + 1) k]\n    · rw [(by ring : 2 * (n + 1) + k = 2 * n + (k + 2)), coeff_hermite_explicit n (k + 2)]\n\n"}
{"name":"Polynomial.coeff_hermite_of_even_add","module":"Mathlib.RingTheory.Polynomial.Hermite.Basic","initialProofState":"n k : Nat\nhnk : Even (HAdd.hAdd n k)\n⊢ Eq ((Polynomial.hermite n).coeff k) (HMul.hMul (HMul.hMul (HPow.hPow (-1) (HDiv.hDiv (HSub.hSub n k) 2)) ↑(HSub.hSub (HSub.hSub n k) 1).doubleFactorial) ↑(n.choose k))","decl":"theorem coeff_hermite_of_even_add {n k : ℕ} (hnk : Even (n + k)) :\n    coeff (hermite n) k = (-1) ^ ((n - k) / 2) * (n - k - 1)‼ * Nat.choose n k := by\n  rcases le_or_lt k n with h_le | h_lt\n  · rw [Nat.even_add, ← Nat.even_sub h_le] at hnk\n    obtain ⟨m, hm⟩ := hnk\n    -- Porting note: linarith failed to find a contradiction by itself\n    rw [(by omega : n = 2 * m + k),\n      Nat.add_sub_cancel, Nat.mul_div_cancel_left _ (Nat.succ_pos 1), coeff_hermite_explicit]\n  · simp [Nat.choose_eq_zero_of_lt h_lt, coeff_hermite_of_lt h_lt]\n\n"}
{"name":"Polynomial.coeff_hermite","module":"Mathlib.RingTheory.Polynomial.Hermite.Basic","initialProofState":"n k : Nat\n⊢ Eq ((Polynomial.hermite n).coeff k) (ite (Even (HAdd.hAdd n k)) (HMul.hMul (HMul.hMul (HPow.hPow (-1) (HDiv.hDiv (HSub.hSub n k) 2)) ↑(HSub.hSub (HSub.hSub n k) 1).doubleFactorial) ↑(n.choose k)) 0)","decl":"theorem coeff_hermite (n k : ℕ) :\n    coeff (hermite n) k =\n      if Even (n + k) then (-1 : ℤ) ^ ((n - k) / 2) * (n - k - 1)‼ * Nat.choose n k else 0 := by\n  split_ifs with h\n  · exact coeff_hermite_of_even_add h\n  · exact coeff_hermite_of_odd_add (Nat.not_even_iff_odd.1 h)\n\n"}
