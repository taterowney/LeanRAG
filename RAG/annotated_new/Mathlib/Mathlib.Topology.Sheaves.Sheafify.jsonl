{"name":"TopCat.Presheaf.stalkToFiber_surjective","module":"Mathlib.Topology.Sheaves.Sheafify","initialProofState":"X : TopCat\nF : TopCat.Presheaf (Type v) X\nx : ↑X\n⊢ Function.Surjective (F.stalkToFiber x)","decl":"theorem stalkToFiber_surjective (x : X) : Function.Surjective (F.stalkToFiber x) := by\n  apply TopCat.stalkToFiber_surjective\n  intro t\n  obtain ⟨U, m, s, rfl⟩ := F.germ_exist _ t\n  use ⟨U, m⟩\n  fconstructor\n  · exact fun y => F.germ _ _ y.2 s\n  · exact ⟨PrelocalPredicate.sheafifyOf ⟨s, fun _ => rfl⟩, rfl⟩\n\n"}
{"name":"TopCat.Presheaf.stalkToFiber_injective","module":"Mathlib.Topology.Sheaves.Sheafify","initialProofState":"X : TopCat\nF : TopCat.Presheaf (Type v) X\nx : ↑X\n⊢ Function.Injective (F.stalkToFiber x)","decl":"theorem stalkToFiber_injective (x : X) : Function.Injective (F.stalkToFiber x) := by\n  apply TopCat.stalkToFiber_injective\n  intro U V fU hU fV hV e\n  rcases hU ⟨x, U.2⟩ with ⟨U', mU, iU, gU, wU⟩\n  rcases hV ⟨x, V.2⟩ with ⟨V', mV, iV, gV, wV⟩\n  have wUx := wU ⟨x, mU⟩\n  dsimp at wUx; rw [wUx] at e; clear wUx\n  have wVx := wV ⟨x, mV⟩\n  dsimp at wVx; rw [wVx] at e; clear wVx\n  rcases F.germ_eq x mU mV gU gV e with ⟨W, mW, iU', iV', (e' : F.map iU'.op gU = F.map iV'.op gV)⟩\n  use ⟨W ⊓ (U' ⊓ V'), ⟨mW, mU, mV⟩⟩\n  refine ⟨?_, ?_, ?_⟩\n  · change W ⊓ (U' ⊓ V') ⟶ U.obj\n    exact Opens.infLERight _ _ ≫ Opens.infLELeft _ _ ≫ iU\n  · change W ⊓ (U' ⊓ V') ⟶ V.obj\n    exact Opens.infLERight _ _ ≫ Opens.infLERight _ _ ≫ iV\n  · intro w\n    specialize wU ⟨w.1, w.2.2.1⟩\n    specialize wV ⟨w.1, w.2.2.2⟩\n    dsimp at wU wV ⊢\n    rw [wU, ← F.germ_res iU' w w.2.1, wV, ← F.germ_res iV' w w.2.1,\n      CategoryTheory.types_comp_apply, CategoryTheory.types_comp_apply, e']\n\n"}
