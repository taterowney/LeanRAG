{"name":"LieAlgebra.IsKilling.killingCompl_top_eq_bot","module":"Mathlib.Algebra.Lie.Killing","initialProofState":"R : Type u_1\nL : Type u_3\ninst✝² : CommRing R\ninst✝¹ : LieRing L\ninst✝ : LieAlgebra R L\nself : LieAlgebra.IsKilling R L\n⊢ Eq (LieIdeal.killingCompl R L Top.top) Bot.bot","decl":"/-- We say a Lie algebra is Killing if its Killing form is non-singular.\n\nNB: This is not standard terminology (the literature does not seem to name Lie algebras with this\nproperty). -/\nclass IsKilling : Prop where\n  /-- We say a Lie algebra is Killing if its Killing form is non-singular. -/\n  killingCompl_top_eq_bot : LieIdeal.killingCompl R L ⊤ = ⊥\n\n"}
{"name":"LieAlgebra.IsKilling.ker_killingForm_eq_bot","module":"Mathlib.Algebra.Lie.Killing","initialProofState":"R : Type u_1\nL : Type u_3\ninst✝³ : CommRing R\ninst✝² : LieRing L\ninst✝¹ : LieAlgebra R L\ninst✝ : LieAlgebra.IsKilling R L\n⊢ Eq (LinearMap.ker (killingForm R L)) Bot.bot","decl":"@[simp] lemma ker_killingForm_eq_bot :\n    LinearMap.ker (killingForm R L) = ⊥ := by\n  simp [← LieIdeal.coe_killingCompl_top, killingCompl_top_eq_bot]\n\n"}
{"name":"LieAlgebra.IsKilling.killingForm_nondegenerate","module":"Mathlib.Algebra.Lie.Killing","initialProofState":"R : Type u_1\nL : Type u_3\ninst✝³ : CommRing R\ninst✝² : LieRing L\ninst✝¹ : LieAlgebra R L\ninst✝ : LieAlgebra.IsKilling R L\n⊢ (killingForm R L).Nondegenerate","decl":"lemma killingForm_nondegenerate :\n    (killingForm R L).Nondegenerate := by\n  simp [LinearMap.BilinForm.nondegenerate_iff_ker_eq_bot]\n\n"}
{"name":"LieAlgebra.IsKilling.ideal_eq_bot_of_isLieAbelian","module":"Mathlib.Algebra.Lie.Killing","initialProofState":"R : Type u_1\nL : Type u_3\ninst✝⁸ : CommRing R\ninst✝⁷ : LieRing L\ninst✝⁶ : LieAlgebra R L\ninst✝⁵ : LieAlgebra.IsKilling R L\ninst✝⁴ : Module.Free R L\ninst✝³ : Module.Finite R L\ninst✝² : IsDomain R\ninst✝¹ : IsPrincipalIdealRing R\nI : LieIdeal R L\ninst✝ : IsLieAbelian (Subtype fun x => Membership.mem I x)\n⊢ Eq I Bot.bot","decl":"variable {R L} in\nlemma ideal_eq_bot_of_isLieAbelian\n    [Module.Free R L] [Module.Finite R L] [IsDomain R] [IsPrincipalIdealRing R]\n    (I : LieIdeal R L) [IsLieAbelian I] : I = ⊥ := by\n  rw [eq_bot_iff, ← killingCompl_top_eq_bot]\n  exact I.le_killingCompl_top_of_isLieAbelian\n\n"}
{"name":"LieAlgebra.IsKilling.instSemisimple","module":"Mathlib.Algebra.Lie.Killing","initialProofState":"K : Type u_2\nL : Type u_3\ninst✝⁴ : Field K\ninst✝³ : LieRing L\ninst✝² : LieAlgebra K L\ninst✝¹ : LieAlgebra.IsKilling K L\ninst✝ : Module.Finite K L\n⊢ LieAlgebra.IsSemisimple K L","decl":"instance instSemisimple [IsKilling K L] [Module.Finite K L] : IsSemisimple K L := by\n  apply InvariantForm.isSemisimple_of_nondegenerate (Φ := killingForm K L)\n  · exact IsKilling.killingForm_nondegenerate _ _\n  · exact LieModule.traceForm_lieInvariant _ _ _\n  · exact (LieModule.traceForm_isSymm K L L).isRefl\n  · intro I h₁ h₂\n    exact h₁.1 <| IsKilling.ideal_eq_bot_of_isLieAbelian I\n\n"}
{"name":"LieAlgebra.IsKilling.instHasTrivialRadical","module":"Mathlib.Algebra.Lie.Killing","initialProofState":"R : Type u_1\nL : Type u_3\ninst✝⁷ : CommRing R\ninst✝⁶ : LieRing L\ninst✝⁵ : LieAlgebra R L\ninst✝⁴ : LieAlgebra.IsKilling R L\ninst✝³ : Module.Free R L\ninst✝² : Module.Finite R L\ninst✝¹ : IsDomain R\ninst✝ : IsPrincipalIdealRing R\n⊢ LieAlgebra.HasTrivialRadical R L","decl":"/-- The converse of this is true over a field of characteristic zero. There are counterexamples\nover fields with positive characteristic.\n\nNote that when the coefficients are a field this instance is redundant since we have\n`LieAlgebra.IsKilling.instSemisimple` and `LieAlgebra.IsSemisimple.instHasTrivialRadical`. -/\ninstance instHasTrivialRadical\n    [Module.Free R L] [Module.Finite R L] [IsDomain R] [IsPrincipalIdealRing R] :\n    HasTrivialRadical R L :=\n  (hasTrivialRadical_iff_no_abelian_ideals R L).mpr IsKilling.ideal_eq_bot_of_isLieAbelian\n\n"}
{"name":"LieAlgebra.killingForm_of_equiv_apply","module":"Mathlib.Algebra.Lie.Killing","initialProofState":"R : Type u_1\nL : Type u_3\ninst✝⁴ : CommRing R\ninst✝³ : LieRing L\ninst✝² : LieAlgebra R L\nL' : Type u_4\ninst✝¹ : LieRing L'\ninst✝ : LieAlgebra R L'\ne : LieEquiv R L L'\nx y : L\n⊢ Eq (((killingForm R L') (e x)) (e y)) (((killingForm R L) x) y)","decl":"/-- Given an equivalence `e` of Lie algebras from `L` to `L'`, and elements `x y : L`, the\nrespective Killing forms of `L` and `L'` satisfy `κ'(e x, e y) = κ(x, y)`. -/\n@[simp] lemma killingForm_of_equiv_apply (e : L ≃ₗ⁅R⁆ L') (x y : L) :\n    killingForm R L' (e x) (e y) = killingForm R L x y := by\n  simp_rw [killingForm_apply_apply, ← LieAlgebra.conj_ad_apply, ← LinearEquiv.conj_comp,\n    LinearMap.trace_conj']\n\n"}
{"name":"LieAlgebra.isKilling_of_equiv","module":"Mathlib.Algebra.Lie.Killing","initialProofState":"R : Type u_1\nL : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : LieRing L\ninst✝³ : LieAlgebra R L\nL' : Type u_4\ninst✝² : LieRing L'\ninst✝¹ : LieAlgebra R L'\ninst✝ : LieAlgebra.IsKilling R L\ne : LieEquiv R L L'\n⊢ LieAlgebra.IsKilling R L'","decl":"/-- Given a Killing Lie algebra `L`, if `L'` is isomorphic to `L`, then `L'` is Killing too. -/\nlemma isKilling_of_equiv [IsKilling R L] (e : L ≃ₗ⁅R⁆ L') : IsKilling R L' := by\n  constructor\n  ext x'\n  simp_rw [LieIdeal.mem_killingCompl, LieModule.traceForm_comm]\n  refine ⟨fun hx' ↦ ?_, fun hx y _ ↦ hx ▸ LinearMap.map_zero₂ (killingForm R L') y⟩\n  suffices e.symm x' ∈ LinearMap.ker (killingForm R L) by\n    rw [IsKilling.ker_killingForm_eq_bot] at this\n    simpa [map_zero] using (e : L ≃ₗ[R] L').congr_arg this\n  ext y\n  replace hx' : ∀ y', killingForm R L' x' y' = 0 := by simpa using hx'\n  specialize hx' (e y)\n  rwa [← e.apply_symm_apply x', killingForm_of_equiv_apply] at hx'\n\n"}
{"name":"LieEquiv.isKilling","module":"Mathlib.Algebra.Lie.Killing","initialProofState":"R : Type u_1\nL : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : LieRing L\ninst✝³ : LieAlgebra R L\nL' : Type u_4\ninst✝² : LieRing L'\ninst✝¹ : LieAlgebra R L'\ninst✝ : LieAlgebra.IsKilling R L\ne : LieEquiv R L L'\n⊢ LieAlgebra.IsKilling R L'","decl":"alias _root_.LieEquiv.isKilling := LieAlgebra.isKilling_of_equiv\n\n"}
