{"name":"ULift.up_nnratCast","module":"Mathlib.Algebra.Field.ULift","initialProofState":"α : Type u\ninst✝ : NNRatCast α\nq : NNRat\n⊢ Eq { down := ↑q } ↑q","decl":"@[simp, norm_cast] lemma up_nnratCast [NNRatCast α] (q : ℚ≥0) : up (q : α) = q := rfl\n"}
{"name":"ULift.down_nnratCast","module":"Mathlib.Algebra.Field.ULift","initialProofState":"α : Type u\ninst✝ : NNRatCast α\nq : NNRat\n⊢ Eq (↑q).down ↑q","decl":"@[simp, norm_cast] lemma down_nnratCast [NNRatCast α] (q : ℚ≥0) : down (q : ULift α) = q := rfl\n"}
{"name":"ULift.up_ratCast","module":"Mathlib.Algebra.Field.ULift","initialProofState":"α : Type u\ninst✝ : RatCast α\nq : Rat\n⊢ Eq { down := ↑q } ↑q","decl":"@[simp, norm_cast] lemma up_ratCast [RatCast α] (q : ℚ) : up (q : α) = q := rfl\n"}
{"name":"ULift.down_ratCast","module":"Mathlib.Algebra.Field.ULift","initialProofState":"α : Type u\ninst✝ : RatCast α\nq : Rat\n⊢ Eq (↑q).down ↑q","decl":"@[simp, norm_cast] lemma down_ratCast [RatCast α] (q : ℚ) : down (q : ULift α) = q := rfl\n\n"}
