{"name":"AddGroupWithOne.sub_eq_add_neg","module":"Mathlib.Data.Int.Cast.Defs","initialProofState":"R : Type u\nself : AddGroupWithOne R\na b : R\n⊢ Eq (HSub.hSub a b) (HAdd.hAdd a (Neg.neg b))","decl":"/-- An `AddGroupWithOne` is an `AddGroup` with a 1. It also contains data for the unique\nhomomorphisms `ℕ → R` and `ℤ → R`. -/\nclass AddGroupWithOne (R : Type u) extends IntCast R, AddMonoidWithOne R, AddGroup R where\n  /-- The canonical homomorphism `ℤ → R`. -/\n  intCast := Int.castDef\n  /-- The canonical homomorphism `ℤ → R` agrees with the one from `ℕ → R` on `ℕ`. -/\n  intCast_ofNat : ∀ n : ℕ, intCast (n : ℕ) = Nat.cast n := by intros; rfl\n  /-- The canonical homomorphism `ℤ → R` for negative values is just the negation of the values\n  of the canonical homomorphism `ℕ → R`. -/\n  intCast_negSucc : ∀ n : ℕ, intCast (Int.negSucc n) = - Nat.cast (n + 1) := by intros; rfl\n\n"}
{"name":"AddGroupWithOne.intCast_negSucc","module":"Mathlib.Data.Int.Cast.Defs","initialProofState":"R : Type u\nself : AddGroupWithOne R\nn : Nat\n⊢ Eq (IntCast.intCast (Int.negSucc n)) (Neg.neg ↑(HAdd.hAdd n 1))","decl":"/-- An `AddGroupWithOne` is an `AddGroup` with a 1. It also contains data for the unique\nhomomorphisms `ℕ → R` and `ℤ → R`. -/\nclass AddGroupWithOne (R : Type u) extends IntCast R, AddMonoidWithOne R, AddGroup R where\n  /-- The canonical homomorphism `ℤ → R`. -/\n  intCast := Int.castDef\n  /-- The canonical homomorphism `ℤ → R` agrees with the one from `ℕ → R` on `ℕ`. -/\n  intCast_ofNat : ∀ n : ℕ, intCast (n : ℕ) = Nat.cast n := by intros; rfl\n  /-- The canonical homomorphism `ℤ → R` for negative values is just the negation of the values\n  of the canonical homomorphism `ℕ → R`. -/\n  intCast_negSucc : ∀ n : ℕ, intCast (Int.negSucc n) = - Nat.cast (n + 1) := by intros; rfl\n\n"}
{"name":"AddGroupWithOne.intCast_ofNat","module":"Mathlib.Data.Int.Cast.Defs","initialProofState":"R : Type u\nself : AddGroupWithOne R\nn : Nat\n⊢ Eq (IntCast.intCast ↑n) ↑n","decl":"/-- An `AddGroupWithOne` is an `AddGroup` with a 1. It also contains data for the unique\nhomomorphisms `ℕ → R` and `ℤ → R`. -/\nclass AddGroupWithOne (R : Type u) extends IntCast R, AddMonoidWithOne R, AddGroup R where\n  /-- The canonical homomorphism `ℤ → R`. -/\n  intCast := Int.castDef\n  /-- The canonical homomorphism `ℤ → R` agrees with the one from `ℕ → R` on `ℕ`. -/\n  intCast_ofNat : ∀ n : ℕ, intCast (n : ℕ) = Nat.cast n := by intros; rfl\n  /-- The canonical homomorphism `ℤ → R` for negative values is just the negation of the values\n  of the canonical homomorphism `ℕ → R`. -/\n  intCast_negSucc : ∀ n : ℕ, intCast (Int.negSucc n) = - Nat.cast (n + 1) := by intros; rfl\n\n"}
{"name":"AddGroupWithOne.zsmul_neg'","module":"Mathlib.Data.Int.Cast.Defs","initialProofState":"R : Type u\nself : AddGroupWithOne R\nn : Nat\na : R\n⊢ Eq (AddGroupWithOne.zsmul (Int.negSucc n) a) (Neg.neg (AddGroupWithOne.zsmul (↑n.succ) a))","decl":"/-- An `AddGroupWithOne` is an `AddGroup` with a 1. It also contains data for the unique\nhomomorphisms `ℕ → R` and `ℤ → R`. -/\nclass AddGroupWithOne (R : Type u) extends IntCast R, AddMonoidWithOne R, AddGroup R where\n  /-- The canonical homomorphism `ℤ → R`. -/\n  intCast := Int.castDef\n  /-- The canonical homomorphism `ℤ → R` agrees with the one from `ℕ → R` on `ℕ`. -/\n  intCast_ofNat : ∀ n : ℕ, intCast (n : ℕ) = Nat.cast n := by intros; rfl\n  /-- The canonical homomorphism `ℤ → R` for negative values is just the negation of the values\n  of the canonical homomorphism `ℕ → R`. -/\n  intCast_negSucc : ∀ n : ℕ, intCast (Int.negSucc n) = - Nat.cast (n + 1) := by intros; rfl\n\n"}
{"name":"AddGroupWithOne.zsmul_zero'","module":"Mathlib.Data.Int.Cast.Defs","initialProofState":"R : Type u\nself : AddGroupWithOne R\na : R\n⊢ Eq (AddGroupWithOne.zsmul 0 a) 0","decl":"/-- An `AddGroupWithOne` is an `AddGroup` with a 1. It also contains data for the unique\nhomomorphisms `ℕ → R` and `ℤ → R`. -/\nclass AddGroupWithOne (R : Type u) extends IntCast R, AddMonoidWithOne R, AddGroup R where\n  /-- The canonical homomorphism `ℤ → R`. -/\n  intCast := Int.castDef\n  /-- The canonical homomorphism `ℤ → R` agrees with the one from `ℕ → R` on `ℕ`. -/\n  intCast_ofNat : ∀ n : ℕ, intCast (n : ℕ) = Nat.cast n := by intros; rfl\n  /-- The canonical homomorphism `ℤ → R` for negative values is just the negation of the values\n  of the canonical homomorphism `ℕ → R`. -/\n  intCast_negSucc : ∀ n : ℕ, intCast (Int.negSucc n) = - Nat.cast (n + 1) := by intros; rfl\n\n"}
{"name":"AddGroupWithOne.neg_add_cancel","module":"Mathlib.Data.Int.Cast.Defs","initialProofState":"R : Type u\nself : AddGroupWithOne R\na : R\n⊢ Eq (HAdd.hAdd (Neg.neg a) a) 0","decl":"/-- An `AddGroupWithOne` is an `AddGroup` with a 1. It also contains data for the unique\nhomomorphisms `ℕ → R` and `ℤ → R`. -/\nclass AddGroupWithOne (R : Type u) extends IntCast R, AddMonoidWithOne R, AddGroup R where\n  /-- The canonical homomorphism `ℤ → R`. -/\n  intCast := Int.castDef\n  /-- The canonical homomorphism `ℤ → R` agrees with the one from `ℕ → R` on `ℕ`. -/\n  intCast_ofNat : ∀ n : ℕ, intCast (n : ℕ) = Nat.cast n := by intros; rfl\n  /-- The canonical homomorphism `ℤ → R` for negative values is just the negation of the values\n  of the canonical homomorphism `ℕ → R`. -/\n  intCast_negSucc : ∀ n : ℕ, intCast (Int.negSucc n) = - Nat.cast (n + 1) := by intros; rfl\n\n"}
{"name":"AddGroupWithOne.zsmul_succ'","module":"Mathlib.Data.Int.Cast.Defs","initialProofState":"R : Type u\nself : AddGroupWithOne R\nn : Nat\na : R\n⊢ Eq (AddGroupWithOne.zsmul (↑n.succ) a) (HAdd.hAdd (AddGroupWithOne.zsmul (↑n) a) a)","decl":"/-- An `AddGroupWithOne` is an `AddGroup` with a 1. It also contains data for the unique\nhomomorphisms `ℕ → R` and `ℤ → R`. -/\nclass AddGroupWithOne (R : Type u) extends IntCast R, AddMonoidWithOne R, AddGroup R where\n  /-- The canonical homomorphism `ℤ → R`. -/\n  intCast := Int.castDef\n  /-- The canonical homomorphism `ℤ → R` agrees with the one from `ℕ → R` on `ℕ`. -/\n  intCast_ofNat : ∀ n : ℕ, intCast (n : ℕ) = Nat.cast n := by intros; rfl\n  /-- The canonical homomorphism `ℤ → R` for negative values is just the negation of the values\n  of the canonical homomorphism `ℕ → R`. -/\n  intCast_negSucc : ∀ n : ℕ, intCast (Int.negSucc n) = - Nat.cast (n + 1) := by intros; rfl\n\n"}
{"name":"AddCommGroupWithOne.natCast_zero","module":"Mathlib.Data.Int.Cast.Defs","initialProofState":"R : Type u\nself : AddCommGroupWithOne R\n⊢ Eq (NatCast.natCast 0) 0","decl":"/-- An `AddCommGroupWithOne` is an `AddGroupWithOne` satisfying `a + b = b + a`. -/\nclass AddCommGroupWithOne (R : Type u)\n  extends AddCommGroup R, AddGroupWithOne R, AddCommMonoidWithOne R\n"}
{"name":"AddCommGroupWithOne.intCast_negSucc","module":"Mathlib.Data.Int.Cast.Defs","initialProofState":"R : Type u\nself : AddCommGroupWithOne R\nn : Nat\n⊢ Eq (IntCast.intCast (Int.negSucc n)) (Neg.neg ↑(HAdd.hAdd n 1))","decl":"/-- An `AddCommGroupWithOne` is an `AddGroupWithOne` satisfying `a + b = b + a`. -/\nclass AddCommGroupWithOne (R : Type u)\n  extends AddCommGroup R, AddGroupWithOne R, AddCommMonoidWithOne R\n"}
{"name":"AddCommGroupWithOne.intCast_ofNat","module":"Mathlib.Data.Int.Cast.Defs","initialProofState":"R : Type u\nself : AddCommGroupWithOne R\nn : Nat\n⊢ Eq (IntCast.intCast ↑n) ↑n","decl":"/-- An `AddCommGroupWithOne` is an `AddGroupWithOne` satisfying `a + b = b + a`. -/\nclass AddCommGroupWithOne (R : Type u)\n  extends AddCommGroup R, AddGroupWithOne R, AddCommMonoidWithOne R\n"}
{"name":"AddCommGroupWithOne.natCast_succ","module":"Mathlib.Data.Int.Cast.Defs","initialProofState":"R : Type u\nself : AddCommGroupWithOne R\nn : Nat\n⊢ Eq (NatCast.natCast (HAdd.hAdd n 1)) (HAdd.hAdd (NatCast.natCast n) 1)","decl":"/-- An `AddCommGroupWithOne` is an `AddGroupWithOne` satisfying `a + b = b + a`. -/\nclass AddCommGroupWithOne (R : Type u)\n  extends AddCommGroup R, AddGroupWithOne R, AddCommMonoidWithOne R\n"}
