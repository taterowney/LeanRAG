{"name":"Rat.inv_nonneg","module":"Mathlib.Algebra.Field.Rat","initialProofState":"a : Rat\nha : LE.le 0 a\n⊢ LE.le 0 (Inv.inv a)","decl":"protected lemma inv_nonneg {a : ℚ} (ha : 0 ≤ a) : 0 ≤ a⁻¹ := by\n  rw [inv_def']\n  exact divInt_nonneg (Int.ofNat_nonneg a.den) (num_nonneg.mpr ha)\n\n"}
{"name":"Rat.div_nonneg","module":"Mathlib.Algebra.Field.Rat","initialProofState":"a b : Rat\nha : LE.le 0 a\nhb : LE.le 0 b\n⊢ LE.le 0 (HDiv.hDiv a b)","decl":"protected lemma div_nonneg {a b : ℚ} (ha : 0 ≤ a) (hb : 0 ≤ b) : 0 ≤ a / b :=\n  mul_nonneg ha (Rat.inv_nonneg hb)\n\n"}
{"name":"Rat.zpow_nonneg","module":"Mathlib.Algebra.Field.Rat","initialProofState":"a : Rat\nha : LE.le 0 a\nn : Int\n⊢ LE.le 0 (HPow.hPow a n)","decl":"protected lemma zpow_nonneg {a : ℚ} (ha : 0 ≤ a) : ∀ n : ℤ, 0 ≤ a ^ n\n  | Int.ofNat n => by simp [ha]\n  | Int.negSucc n => by simpa using Rat.inv_nonneg (pow_nonneg ha (n + 1))\n\n"}
{"name":"NNRat.coe_inv","module":"Mathlib.Algebra.Field.Rat","initialProofState":"q : NNRat\n⊢ Eq (↑(Inv.inv q)) (Inv.inv ↑q)","decl":"@[simp, norm_cast] lemma coe_inv (q : ℚ≥0) : ((q⁻¹ : ℚ≥0) : ℚ) = (q : ℚ)⁻¹ := rfl\n"}
{"name":"NNRat.coe_div","module":"Mathlib.Algebra.Field.Rat","initialProofState":"p q : NNRat\n⊢ Eq (↑(HDiv.hDiv p q)) (HDiv.hDiv ↑p ↑q)","decl":"@[simp, norm_cast] lemma coe_div (p q : ℚ≥0) : ((p / q : ℚ≥0) : ℚ) = p / q := rfl\n"}
{"name":"NNRat.coe_zpow","module":"Mathlib.Algebra.Field.Rat","initialProofState":"p : NNRat\nn : Int\n⊢ Eq (↑(HPow.hPow p n)) (HPow.hPow (↑p) n)","decl":"@[simp, norm_cast] lemma coe_zpow (p : ℚ≥0) (n : ℤ) : ((p ^ n : ℚ≥0) : ℚ) = p ^ n := rfl\n\n"}
{"name":"NNRat.inv_def","module":"Mathlib.Algebra.Field.Rat","initialProofState":"q : NNRat\n⊢ Eq (Inv.inv q) (NNRat.divNat q.den q.num)","decl":"lemma inv_def (q : ℚ≥0) : q⁻¹ = divNat q.den q.num := by ext; simp [Rat.inv_def', num_coe, den_coe]\n"}
{"name":"NNRat.div_def","module":"Mathlib.Algebra.Field.Rat","initialProofState":"p q : NNRat\n⊢ Eq (HDiv.hDiv p q) (NNRat.divNat (HMul.hMul p.num q.den) (HMul.hMul p.den q.num))","decl":"lemma div_def (p q : ℚ≥0) : p / q = divNat (p.num * q.den) (p.den * q.num) := by\n  ext; simp [Rat.div_def', num_coe, den_coe]\n\n"}
{"name":"NNRat.num_inv_of_ne_zero","module":"Mathlib.Algebra.Field.Rat","initialProofState":"q : NNRat\nhq : Ne q 0\n⊢ Eq (Inv.inv q).num q.den","decl":"lemma num_inv_of_ne_zero {q : ℚ≥0} (hq : q ≠ 0) : q⁻¹.num = q.den := by\n  rw [inv_def, divNat, num, coe_mk, Rat.divInt_ofNat, ← Rat.mk_eq_mkRat _ _ (num_ne_zero.mpr hq),\n    Int.natAbs_ofNat]\n  simpa using q.coprime_num_den.symm\n\n"}
{"name":"NNRat.den_inv_of_ne_zero","module":"Mathlib.Algebra.Field.Rat","initialProofState":"q : NNRat\nhq : Ne q 0\n⊢ Eq (Inv.inv q).den q.num","decl":"lemma den_inv_of_ne_zero {q : ℚ≥0} (hq : q ≠ 0) : q⁻¹.den = q.num := by\n  rw [inv_def, divNat, den, coe_mk, Rat.divInt_ofNat, ← Rat.mk_eq_mkRat _ _ (num_ne_zero.mpr hq)]\n  simpa using q.coprime_num_den.symm\n\n"}
{"name":"NNRat.num_div_den","module":"Mathlib.Algebra.Field.Rat","initialProofState":"q : NNRat\n⊢ Eq (HDiv.hDiv ↑q.num ↑q.den) q","decl":"@[simp]\nlemma num_div_den (q : ℚ≥0) : (q.num : ℚ≥0) / q.den = q := by\n  ext1\n  rw [coe_div, coe_natCast, coe_natCast, num, ← Int.cast_natCast]\n  exact (cast_def _).symm\n\n"}
