{"name":"IsCyclotomicExtension.Rat.discr_prime_pow_ne_two'","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝² : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p (HAdd.hAdd k 1))) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p (HAdd.hAdd k 1))\nhk : Ne (HPow.hPow p (HAdd.hAdd k 1)) 2\n⊢ Eq (Algebra.discr Rat ⇑(IsPrimitiveRoot.subOnePowerBasis Rat hζ).basis) (HMul.hMul (HPow.hPow (-1) (HDiv.hDiv (HPow.hPow (↑p) (HAdd.hAdd k 1)).totient 2)) (HPow.hPow (↑↑p) (HMul.hMul (HPow.hPow (↑p) k) (HSub.hSub (HMul.hMul (HSub.hSub (↑p) 1) (HAdd.hAdd k 1)) 1))))","decl":"/-- The discriminant of the power basis given by `ζ - 1`. -/\ntheorem discr_prime_pow_ne_two' [IsCyclotomicExtension {p ^ (k + 1)} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑(p ^ (k + 1))) (hk : p ^ (k + 1) ≠ 2) :\n    discr ℚ (hζ.subOnePowerBasis ℚ).basis =\n      (-1) ^ ((p ^ (k + 1) : ℕ).totient / 2) * p ^ ((p : ℕ) ^ k * ((p - 1) * (k + 1) - 1)) := by\n  rw [← discr_prime_pow_ne_two hζ (cyclotomic.irreducible_rat (p ^ (k + 1)).pos) hk]\n  exact hζ.discr_zeta_eq_discr_zeta_sub_one.symm\n\n"}
{"name":"IsCyclotomicExtension.Rat.discr_odd_prime'","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nK : Type u\ninst✝² : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton p) Rat K\nhζ : IsPrimitiveRoot ζ ↑p\nhodd : Ne p 2\n⊢ Eq (Algebra.discr Rat ⇑(IsPrimitiveRoot.subOnePowerBasis Rat hζ).basis) (HMul.hMul (HPow.hPow (-1) (HDiv.hDiv (HSub.hSub (↑p) 1) 2)) (HPow.hPow (↑↑p) (HSub.hSub (↑p) 2)))","decl":"theorem discr_odd_prime' [IsCyclotomicExtension {p} ℚ K] (hζ : IsPrimitiveRoot ζ p) (hodd : p ≠ 2) :\n    discr ℚ (hζ.subOnePowerBasis ℚ).basis = (-1) ^ (((p : ℕ) - 1) / 2) * p ^ ((p : ℕ) - 2) := by\n  rw [← discr_odd_prime hζ (cyclotomic.irreducible_rat hp.out.pos) hodd]\n  exact hζ.discr_zeta_eq_discr_zeta_sub_one.symm\n\n"}
{"name":"IsCyclotomicExtension.Rat.discr_prime_pow'","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝² : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p k)) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p k)\n⊢ Eq (Algebra.discr Rat ⇑(IsPrimitiveRoot.subOnePowerBasis Rat hζ).basis) (HMul.hMul (HPow.hPow (-1) (HDiv.hDiv (HPow.hPow (↑p) k).totient 2)) (HPow.hPow (↑↑p) (HMul.hMul (HPow.hPow (↑p) (HSub.hSub k 1)) (HSub.hSub (HMul.hMul (HSub.hSub (↑p) 1) k) 1))))","decl":"/-- The discriminant of the power basis given by `ζ - 1`. Beware that in the cases `p ^ k = 1` and\n`p ^ k = 2` the formula uses `1 / 2 = 0` and `0 - 1 = 0`. It is useful only to have a uniform\nresult. See also `IsCyclotomicExtension.Rat.discr_prime_pow_eq_unit_mul_pow'`. -/\ntheorem discr_prime_pow' [IsCyclotomicExtension {p ^ k} ℚ K] (hζ : IsPrimitiveRoot ζ ↑(p ^ k)) :\n    discr ℚ (hζ.subOnePowerBasis ℚ).basis =\n      (-1) ^ ((p ^ k : ℕ).totient / 2) * p ^ ((p : ℕ) ^ (k - 1) * ((p - 1) * k - 1)) := by\n  rw [← discr_prime_pow hζ (cyclotomic.irreducible_rat (p ^ k).pos)]\n  exact hζ.discr_zeta_eq_discr_zeta_sub_one.symm\n\n"}
{"name":"IsCyclotomicExtension.Rat.discr_prime_pow_eq_unit_mul_pow'","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝² : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p k)) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p k)\n⊢ Exists fun u => Exists fun n => Eq (Algebra.discr Rat ⇑(IsPrimitiveRoot.subOnePowerBasis Rat hζ).basis) (HMul.hMul (↑↑u) (HPow.hPow (↑↑p) n))","decl":"/-- If `p` is a prime and `IsCyclotomicExtension {p ^ k} K L`, then there are `u : ℤˣ` and\n`n : ℕ` such that the discriminant of the power basis given by `ζ - 1` is `u * p ^ n`. Often this is\nenough and less cumbersome to use than `IsCyclotomicExtension.Rat.discr_prime_pow'`. -/\ntheorem discr_prime_pow_eq_unit_mul_pow' [IsCyclotomicExtension {p ^ k} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑(p ^ k)) :\n    ∃ (u : ℤˣ) (n : ℕ), discr ℚ (hζ.subOnePowerBasis ℚ).basis = u * p ^ n := by\n  rw [hζ.discr_zeta_eq_discr_zeta_sub_one.symm]\n  exact discr_prime_pow_eq_unit_mul_pow hζ (cyclotomic.irreducible_rat (p ^ k).pos)\n\n"}
{"name":"IsCyclotomicExtension.Rat.isIntegralClosure_adjoin_singleton_of_prime_pow","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝¹ : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝ : CharZero K\nhcycl : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p k)) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p k)\n⊢ IsIntegralClosure (Subtype fun x => Membership.mem (Algebra.adjoin Int (Singleton.singleton ζ)) x) Int K","decl":"/-- If `K` is a `p ^ k`-th cyclotomic extension of `ℚ`, then `(adjoin ℤ {ζ})` is the\nintegral closure of `ℤ` in `K`. -/\ntheorem isIntegralClosure_adjoin_singleton_of_prime_pow [hcycl : IsCyclotomicExtension {p ^ k} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑(p ^ k)) : IsIntegralClosure (adjoin ℤ ({ζ} : Set K)) ℤ K := by\n  refine ⟨Subtype.val_injective, @fun x => ⟨fun h => ⟨⟨x, ?_⟩, rfl⟩, ?_⟩⟩\n  swap\n  · rintro ⟨y, rfl⟩\n    exact\n      IsIntegral.algebraMap\n        ((le_integralClosure_iff_isIntegral.1\n          (adjoin_le_integralClosure (hζ.isIntegral (p ^ k).pos))).isIntegral _)\n  let B := hζ.subOnePowerBasis ℚ\n  have hint : IsIntegral ℤ B.gen := (hζ.isIntegral (p ^ k).pos).sub isIntegral_one\n-- Porting note: the following `haveI` was not needed because the locale `cyclotomic` set it\n-- as instances.\n  letI := IsCyclotomicExtension.finiteDimensional {p ^ k} ℚ K\n  have H := discr_mul_isIntegral_mem_adjoin ℚ hint h\n  obtain ⟨u, n, hun⟩ := discr_prime_pow_eq_unit_mul_pow' hζ\n  rw [hun] at H\n  replace H := Subalgebra.smul_mem _ H u.inv\n-- Porting note: the proof is slightly different because of coercions.\n  rw [← smul_assoc, ← smul_mul_assoc, Units.inv_eq_val_inv, zsmul_eq_mul, ← Int.cast_mul,\n    Units.inv_mul, Int.cast_one, one_mul, smul_def, map_pow] at H\n  cases k\n  · haveI : IsCyclotomicExtension {1} ℚ K := by simpa using hcycl\n    have : x ∈ (⊥ : Subalgebra ℚ K) := by\n      rw [singleton_one ℚ K]\n      exact mem_top\n    obtain ⟨y, rfl⟩ := mem_bot.1 this\n    replace h := (isIntegral_algebraMap_iff (algebraMap ℚ K).injective).1 h\n    obtain ⟨z, hz⟩ := IsIntegrallyClosed.isIntegral_iff.1 h\n    rw [← hz, ← IsScalarTower.algebraMap_apply]\n    exact Subalgebra.algebraMap_mem _ _\n  · have hmin : (minpoly ℤ B.gen).IsEisensteinAt (Submodule.span ℤ {((p : ℕ) : ℤ)}) := by\n      have h₁ := minpoly.isIntegrallyClosed_eq_field_fractions' ℚ hint\n      have h₂ := hζ.minpoly_sub_one_eq_cyclotomic_comp (cyclotomic.irreducible_rat (p ^ _).pos)\n      rw [IsPrimitiveRoot.subOnePowerBasis_gen] at h₁\n      rw [h₁, ← map_cyclotomic_int, show Int.castRingHom ℚ = algebraMap ℤ ℚ by rfl,\n        show X + 1 = map (algebraMap ℤ ℚ) (X + 1) by simp, ← map_comp] at h₂\n      rw [IsPrimitiveRoot.subOnePowerBasis_gen,\n        map_injective (algebraMap ℤ ℚ) (algebraMap ℤ ℚ).injective_int h₂]\n      exact cyclotomic_prime_pow_comp_X_add_one_isEisensteinAt p _\n    refine\n      adjoin_le ?_\n        (mem_adjoin_of_smul_prime_pow_smul_of_minpoly_isEisensteinAt (n := n)\n          (Nat.prime_iff_prime_int.1 hp.out) hint h (by simpa using H) hmin)\n    simp only [Set.singleton_subset_iff, SetLike.mem_coe]\n    exact Subalgebra.sub_mem _ (self_mem_adjoin_singleton ℤ _) (Subalgebra.one_mem _)\n\n"}
{"name":"IsCyclotomicExtension.Rat.isIntegralClosure_adjoin_singleton_of_prime","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nK : Type u\ninst✝¹ : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝ : CharZero K\nhcycl : IsCyclotomicExtension (Singleton.singleton p) Rat K\nhζ : IsPrimitiveRoot ζ ↑p\n⊢ IsIntegralClosure (Subtype fun x => Membership.mem (Algebra.adjoin Int (Singleton.singleton ζ)) x) Int K","decl":"theorem isIntegralClosure_adjoin_singleton_of_prime [hcycl : IsCyclotomicExtension {p} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑p) : IsIntegralClosure (adjoin ℤ ({ζ} : Set K)) ℤ K := by\n  rw [← pow_one p] at hζ hcycl\n  exact isIntegralClosure_adjoin_singleton_of_prime_pow hζ\n\n"}
{"name":"IsCyclotomicExtension.Rat.cyclotomicRing_isIntegralClosure_of_prime_pow","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nhp : Fact (Nat.Prime ↑p)\n⊢ IsIntegralClosure (CyclotomicRing (HPow.hPow p k) Int Rat) Int (CyclotomicField (HPow.hPow p k) Rat)","decl":"/-- The integral closure of `ℤ` inside `CyclotomicField (p ^ k) ℚ` is\n`CyclotomicRing (p ^ k) ℤ ℚ`. -/\ntheorem cyclotomicRing_isIntegralClosure_of_prime_pow :\n    IsIntegralClosure (CyclotomicRing (p ^ k) ℤ ℚ) ℤ (CyclotomicField (p ^ k) ℚ) := by\n  have hζ := zeta_spec (p ^ k) ℚ (CyclotomicField (p ^ k) ℚ)\n  refine ⟨IsFractionRing.injective _ _, @fun x => ⟨fun h => ⟨⟨x, ?_⟩, rfl⟩, ?_⟩⟩\n-- Porting note: having `.isIntegral_iff` inside the definition of `this` causes an error.\n  · have := isIntegralClosure_adjoin_singleton_of_prime_pow hζ\n    obtain ⟨y, rfl⟩ := this.isIntegral_iff.1 h\n    refine adjoin_mono ?_ y.2\n    simp only [PNat.pow_coe, Set.singleton_subset_iff, Set.mem_setOf_eq]\n    exact hζ.pow_eq_one\n  · rintro ⟨y, rfl⟩\n    exact IsIntegral.algebraMap ((IsCyclotomicExtension.integral {p ^ k} ℤ _).isIntegral _)\n\n"}
{"name":"IsCyclotomicExtension.Rat.cyclotomicRing_isIntegralClosure_of_prime","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nhp : Fact (Nat.Prime ↑p)\n⊢ IsIntegralClosure (CyclotomicRing p Int Rat) Int (CyclotomicField p Rat)","decl":"theorem cyclotomicRing_isIntegralClosure_of_prime :\n    IsIntegralClosure (CyclotomicRing p ℤ ℚ) ℤ (CyclotomicField p ℚ) := by\n  rw [← pow_one p]\n  exact cyclotomicRing_isIntegralClosure_of_prime_pow\n\n"}
{"name":"IsPrimitiveRoot.adjoinEquivRingOfIntegers_symm_apply","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝² : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p k)) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p k)\na : NumberField.RingOfIntegers K\n⊢ Eq (hζ.adjoinEquivRingOfIntegers.symm a) ((IsIntegralClosure.lift Int (Subtype fun x => Membership.mem (Algebra.adjoin Int (Singleton.singleton ζ)) x) K) a)","decl":"/-- The algebra isomorphism `adjoin ℤ {ζ} ≃ₐ[ℤ] (𝓞 K)`, where `ζ` is a primitive `p ^ k`-th root of\nunity and `K` is a `p ^ k`-th cyclotomic extension of `ℚ`. -/\n@[simps!]\nnoncomputable def _root_.IsPrimitiveRoot.adjoinEquivRingOfIntegers\n    [IsCyclotomicExtension {p ^ k} ℚ K] (hζ : IsPrimitiveRoot ζ ↑(p ^ k)) :\n    adjoin ℤ ({ζ} : Set K) ≃ₐ[ℤ] 𝓞 K :=\n  let _ := isIntegralClosure_adjoin_singleton_of_prime_pow hζ\n  IsIntegralClosure.equiv ℤ (adjoin ℤ ({ζ} : Set K)) K (𝓞 K)\n\n"}
{"name":"IsPrimitiveRoot.adjoinEquivRingOfIntegers_apply","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝² : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p k)) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p k)\na : Subtype fun x => Membership.mem (Algebra.adjoin Int (Singleton.singleton ζ)) x\n⊢ Eq (hζ.adjoinEquivRingOfIntegers a) ((IsIntegralClosure.lift Int (NumberField.RingOfIntegers K) K) a)","decl":"/-- The algebra isomorphism `adjoin ℤ {ζ} ≃ₐ[ℤ] (𝓞 K)`, where `ζ` is a primitive `p ^ k`-th root of\nunity and `K` is a `p ^ k`-th cyclotomic extension of `ℚ`. -/\n@[simps!]\nnoncomputable def _root_.IsPrimitiveRoot.adjoinEquivRingOfIntegers\n    [IsCyclotomicExtension {p ^ k} ℚ K] (hζ : IsPrimitiveRoot ζ ↑(p ^ k)) :\n    adjoin ℤ ({ζ} : Set K) ≃ₐ[ℤ] 𝓞 K :=\n  let _ := isIntegralClosure_adjoin_singleton_of_prime_pow hζ\n  IsIntegralClosure.equiv ℤ (adjoin ℤ ({ζ} : Set K)) K (𝓞 K)\n\n"}
{"name":"IsPrimitiveRoot.IsCyclotomicExtension.ringOfIntegers","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝² : Field K\nhp : Fact (Nat.Prime ↑p)\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p k)) Rat K\n⊢ IsCyclotomicExtension (Singleton.singleton (HPow.hPow p k)) Int (NumberField.RingOfIntegers K)","decl":"/-- The ring of integers of a `p ^ k`-th cyclotomic extension of `ℚ` is a cyclotomic extension. -/\ninstance IsCyclotomicExtension.ringOfIntegers [IsCyclotomicExtension {p ^ k} ℚ K] :\n    IsCyclotomicExtension {p ^ k} ℤ (𝓞 K) :=\n  let _ := (zeta_spec (p ^ k) ℚ K).adjoin_isCyclotomicExtension ℤ\n  IsCyclotomicExtension.equiv _ ℤ _ (zeta_spec (p ^ k) ℚ K).adjoinEquivRingOfIntegers\n\n"}
{"name":"IsPrimitiveRoot.coe_toInteger","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"K : Type u\ninst✝ : Field K\nζ : K\nk : PNat\nhζ : IsPrimitiveRoot ζ ↑k\n⊢ Eq (↑hζ.toInteger) ζ","decl":"lemma coe_toInteger {k : ℕ+} (hζ : IsPrimitiveRoot ζ k) : hζ.toInteger.1 = ζ := rfl\n\n"}
{"name":"IsPrimitiveRoot.finite_quotient_toInteger_sub_one","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"K : Type u\ninst✝¹ : Field K\nζ : K\ninst✝ : NumberField K\nk : PNat\nhk : LT.lt 1 k\nhζ : IsPrimitiveRoot ζ ↑k\n⊢ Finite (HasQuotient.Quotient (NumberField.RingOfIntegers K) (Ideal.span (Singleton.singleton (HSub.hSub hζ.toInteger 1))))","decl":"/-- `𝓞 K ⧸ Ideal.span {ζ - 1}` is finite. -/\nlemma finite_quotient_toInteger_sub_one [NumberField K] {k : ℕ+} (hk : 1 < k)\n    (hζ : IsPrimitiveRoot ζ k) : Finite (𝓞 K ⧸ Ideal.span {hζ.toInteger - 1}) := by\n  refine (finite_iff_nonempty_fintype _).2 ⟨?_⟩\n  refine Ideal.fintypeQuotientOfFreeOfNeBot _ (fun h ↦ ?_)\n  simp only [Ideal.span_singleton_eq_bot, sub_eq_zero, ← Subtype.coe_inj] at h\n  exact hζ.ne_one hk (RingOfIntegers.ext_iff.1 h)\n\n"}
{"name":"IsPrimitiveRoot.card_quotient_toInteger_sub_one","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"K : Type u\ninst✝¹ : Field K\nζ : K\ninst✝ : NumberField K\nk : PNat\nhk : LT.lt 1 k\nhζ : IsPrimitiveRoot ζ ↑k\n⊢ Eq (Nat.card (HasQuotient.Quotient (NumberField.RingOfIntegers K) (Ideal.span (Singleton.singleton (HSub.hSub hζ.toInteger 1))))) ((Algebra.norm Int) (HSub.hSub hζ.toInteger 1)).natAbs","decl":"/-- We have that `𝓞 K ⧸ Ideal.span {ζ - 1}` has cardinality equal to the norm of `ζ - 1`.\n\nSee the results below to compute this norm in various cases. -/\nlemma card_quotient_toInteger_sub_one [NumberField K] {k : ℕ+} (hk : 1 < k)\n    (hζ : IsPrimitiveRoot ζ k) :\n    Nat.card (𝓞 K ⧸ Ideal.span {hζ.toInteger - 1}) =\n      (Algebra.norm ℤ (hζ.toInteger - 1)).natAbs := by\n  have := hζ.finite_quotient_toInteger_sub_one hk\n  let _ := Fintype.ofFinite (𝓞 K ⧸ Ideal.span {hζ.toInteger - 1})\n  rw [← Submodule.cardQuot_apply, ← Ideal.absNorm_apply, Ideal.absNorm_span_singleton]\n\n"}
{"name":"IsPrimitiveRoot.toInteger_isPrimitiveRoot","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"K : Type u\ninst✝ : Field K\nζ : K\nk : PNat\nhζ : IsPrimitiveRoot ζ ↑k\n⊢ IsPrimitiveRoot hζ.toInteger ↑k","decl":"lemma toInteger_isPrimitiveRoot {k : ℕ+} (hζ : IsPrimitiveRoot ζ k) :\n    IsPrimitiveRoot hζ.toInteger k :=\n  IsPrimitiveRoot.of_map_of_injective (by exact hζ) RingOfIntegers.coe_injective\n\n"}
{"name":"IsPrimitiveRoot.integralPowerBasis_gen","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝¹ : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝ : CharZero K\nhcycl : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p k)) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p k)\n⊢ Eq hζ.integralPowerBasis.gen hζ.toInteger","decl":"@[simp]\ntheorem integralPowerBasis_gen [hcycl : IsCyclotomicExtension {p ^ k} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑(p ^ k)) :\n    hζ.integralPowerBasis.gen = hζ.toInteger :=\n  Subtype.ext <| show algebraMap _ K hζ.integralPowerBasis.gen = _ by\n    rw [integralPowerBasis, PowerBasis.map_gen, adjoin.powerBasis'_gen]\n    simp only [adjoinEquivRingOfIntegers_apply, IsIntegralClosure.algebraMap_lift]\n    rfl\n\n"}
{"name":"IsPrimitiveRoot.integralPowerBasis_dim","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝¹ : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝ : CharZero K\nhcycl : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p k)) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p k)\n⊢ Eq hζ.integralPowerBasis.dim (HPow.hPow (↑p) k).totient","decl":"set_option linter.unusedVariables false in\n@[simp]\ntheorem integralPowerBasis_dim [hcycl : IsCyclotomicExtension {p ^ k} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑(p ^ k)) : hζ.integralPowerBasis.dim = φ (p ^ k) := by\n  simp [integralPowerBasis, ← cyclotomic_eq_minpoly hζ, natDegree_cyclotomic]\n\n"}
{"name":"IsPrimitiveRoot.adjoinEquivRingOfIntegers'_apply","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nK : Type u\ninst✝¹ : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝ : CharZero K\nhcycl : IsCyclotomicExtension (Singleton.singleton p) Rat K\nhζ : IsPrimitiveRoot ζ ↑p\na : Subtype fun x => Membership.mem (Algebra.adjoin Int (Singleton.singleton ζ)) x\n⊢ Eq (hζ.adjoinEquivRingOfIntegers' a) ((IsIntegralClosure.lift Int (NumberField.RingOfIntegers K) K) a)","decl":"/-- The algebra isomorphism `adjoin ℤ {ζ} ≃ₐ[ℤ] (𝓞 K)`, where `ζ` is a primitive `p`-th root of\nunity and `K` is a `p`-th cyclotomic extension of `ℚ`. -/\n@[simps!]\nnoncomputable def _root_.IsPrimitiveRoot.adjoinEquivRingOfIntegers'\n    [hcycl : IsCyclotomicExtension {p} ℚ K] (hζ : IsPrimitiveRoot ζ p) :\n    adjoin ℤ ({ζ} : Set K) ≃ₐ[ℤ] 𝓞 K :=\n  have : IsCyclotomicExtension {p ^ 1} ℚ K := by convert hcycl; rw [pow_one]\n  adjoinEquivRingOfIntegers (p := p) (k := 1) (ζ := ζ) (by rwa [pow_one])\n\n"}
{"name":"IsPrimitiveRoot.adjoinEquivRingOfIntegers'_symm_apply","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nK : Type u\ninst✝¹ : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝ : CharZero K\nhcycl : IsCyclotomicExtension (Singleton.singleton p) Rat K\nhζ : IsPrimitiveRoot ζ ↑p\na : NumberField.RingOfIntegers K\n⊢ Eq (hζ.adjoinEquivRingOfIntegers'.symm a) ((IsIntegralClosure.lift Int (Subtype fun x => Membership.mem (Algebra.adjoin Int (Singleton.singleton ζ)) x) K) a)","decl":"/-- The algebra isomorphism `adjoin ℤ {ζ} ≃ₐ[ℤ] (𝓞 K)`, where `ζ` is a primitive `p`-th root of\nunity and `K` is a `p`-th cyclotomic extension of `ℚ`. -/\n@[simps!]\nnoncomputable def _root_.IsPrimitiveRoot.adjoinEquivRingOfIntegers'\n    [hcycl : IsCyclotomicExtension {p} ℚ K] (hζ : IsPrimitiveRoot ζ p) :\n    adjoin ℤ ({ζ} : Set K) ≃ₐ[ℤ] 𝓞 K :=\n  have : IsCyclotomicExtension {p ^ 1} ℚ K := by convert hcycl; rw [pow_one]\n  adjoinEquivRingOfIntegers (p := p) (k := 1) (ζ := ζ) (by rwa [pow_one])\n\n"}
{"name":"IsCyclotomicExtension.ring_of_integers'","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nK : Type u\ninst✝² : Field K\nhp : Fact (Nat.Prime ↑p)\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton p) Rat K\n⊢ IsCyclotomicExtension (Singleton.singleton p) Int (NumberField.RingOfIntegers K)","decl":"/-- The ring of integers of a `p`-th cyclotomic extension of `ℚ` is a cyclotomic extension. -/\ninstance _root_.IsCyclotomicExtension.ring_of_integers' [IsCyclotomicExtension {p} ℚ K] :\n    IsCyclotomicExtension {p} ℤ (𝓞 K) :=\n  let _ := (zeta_spec p ℚ K).adjoin_isCyclotomicExtension ℤ\n  IsCyclotomicExtension.equiv _ ℤ _ (zeta_spec p ℚ K).adjoinEquivRingOfIntegers'\n\n"}
{"name":"IsPrimitiveRoot.integralPowerBasis'_gen","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nK : Type u\ninst✝¹ : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝ : CharZero K\nhcycl : IsCyclotomicExtension (Singleton.singleton p) Rat K\nhζ : IsPrimitiveRoot ζ ↑p\n⊢ Eq hζ.integralPowerBasis'.gen hζ.toInteger","decl":"@[simp]\ntheorem integralPowerBasis'_gen [hcycl : IsCyclotomicExtension {p} ℚ K] (hζ : IsPrimitiveRoot ζ p) :\n    hζ.integralPowerBasis'.gen = hζ.toInteger :=\n  integralPowerBasis_gen (hcycl := by rwa [pow_one]) (by rwa [pow_one])\n\n"}
{"name":"IsPrimitiveRoot.power_basis_int'_dim","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nK : Type u\ninst✝¹ : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝ : CharZero K\nhcycl : IsCyclotomicExtension (Singleton.singleton p) Rat K\nhζ : IsPrimitiveRoot ζ ↑p\n⊢ Eq hζ.integralPowerBasis'.dim (↑p).totient","decl":"@[simp]\ntheorem power_basis_int'_dim [hcycl : IsCyclotomicExtension {p} ℚ K] (hζ : IsPrimitiveRoot ζ p) :\n    hζ.integralPowerBasis'.dim = φ p := by\n  erw [integralPowerBasis_dim (hcycl := by rwa [pow_one]) (by rwa [pow_one]), pow_one]\n\n\n"}
{"name":"IsPrimitiveRoot.subOneIntegralPowerBasis_gen","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝² : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p k)) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p k)\n⊢ Eq hζ.subOneIntegralPowerBasis.gen ⟨HSub.hSub ζ 1, ⋯⟩","decl":"@[simp]\ntheorem subOneIntegralPowerBasis_gen [IsCyclotomicExtension {p ^ k} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑(p ^ k)) :\n    hζ.subOneIntegralPowerBasis.gen =\n      ⟨ζ - 1, Subalgebra.sub_mem _ (hζ.isIntegral (p ^ k).pos) (Subalgebra.one_mem _)⟩ := by\n  simp [subOneIntegralPowerBasis]\n\n"}
{"name":"IsPrimitiveRoot.subOneIntegralPowerBasis'_gen","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nK : Type u\ninst✝² : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton p) Rat K\nhζ : IsPrimitiveRoot ζ ↑p\n⊢ Eq hζ.subOneIntegralPowerBasis'.gen (HSub.hSub hζ.toInteger 1)","decl":"@[simp, nolint unusedHavesSuffices]\ntheorem subOneIntegralPowerBasis'_gen [IsCyclotomicExtension {p} ℚ K]\n    (hζ : IsPrimitiveRoot ζ p) :\n    hζ.subOneIntegralPowerBasis'.gen = hζ.toInteger - 1 :=\n  -- The `unusedHavesSuffices` linter incorrectly thinks this `have` is unnecessary.\n  have : IsCyclotomicExtension {p ^ 1} ℚ K := by rwa [pow_one]\n  subOneIntegralPowerBasis_gen (by rwa [pow_one])\n\n"}
{"name":"IsPrimitiveRoot.zeta_sub_one_prime_of_ne_two","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝² : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p (HAdd.hAdd k 1))) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p (HAdd.hAdd k 1))\nhodd : Ne p 2\n⊢ Prime (HSub.hSub hζ.toInteger 1)","decl":"/-- `ζ - 1` is prime if `p ≠ 2` and `ζ` is a primitive `p ^ (k + 1)`-th root of unity.\n  See `zeta_sub_one_prime` for a general statement. -/\ntheorem zeta_sub_one_prime_of_ne_two [IsCyclotomicExtension {p ^ (k + 1)} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑(p ^ (k + 1))) (hodd : p ≠ 2) :\n    Prime (hζ.toInteger - 1) := by\n  letI := IsCyclotomicExtension.numberField {p ^ (k + 1)} ℚ K\n  refine Ideal.prime_of_irreducible_absNorm_span (fun h ↦ ?_) ?_\n  · apply hζ.pow_ne_one_of_pos_of_lt zero_lt_one (one_lt_pow₀ hp.out.one_lt (by simp))\n    rw [sub_eq_zero] at h\n    simpa using congrArg (algebraMap _ K) h\n  rw [Nat.irreducible_iff_prime, Ideal.absNorm_span_singleton, ← Nat.prime_iff,\n    ← Int.prime_iff_natAbs_prime]\n  convert Nat.prime_iff_prime_int.1 hp.out\n  apply RingHom.injective_int (algebraMap ℤ ℚ)\n  rw [← Algebra.norm_localization (Sₘ := K) ℤ (nonZeroDivisors ℤ)]\n  simp only [PNat.pow_coe, id.map_eq_id, RingHomCompTriple.comp_eq, RingHom.coe_coe,\n    Subalgebra.coe_val, algebraMap_int_eq, map_natCast]\n  exact hζ.norm_sub_one_of_prime_ne_two (Polynomial.cyclotomic.irreducible_rat (PNat.pos _)) hodd\n\n"}
{"name":"IsPrimitiveRoot.zeta_sub_one_prime_of_two_pow","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"k : Nat\nK : Type u\ninst✝² : Field K\nζ : K\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow 2 (HAdd.hAdd k 1))) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow 2 (HAdd.hAdd k 1))\n⊢ Prime (HSub.hSub hζ.toInteger 1)","decl":"/-- `ζ - 1` is prime if `ζ` is a primitive `2 ^ (k + 1)`-th root of unity.\n  See `zeta_sub_one_prime` for a general statement. -/\ntheorem zeta_sub_one_prime_of_two_pow [IsCyclotomicExtension {(2 : ℕ+) ^ (k + 1)} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑((2 : ℕ+) ^ (k + 1))) :\n    Prime (hζ.toInteger - 1) := by\n  letI := IsCyclotomicExtension.numberField {(2 : ℕ+) ^ (k + 1)} ℚ K\n  refine Ideal.prime_of_irreducible_absNorm_span (fun h ↦ ?_) ?_\n  · apply hζ.pow_ne_one_of_pos_of_lt zero_lt_one (one_lt_pow₀ (by decide) (by simp))\n    rw [sub_eq_zero] at h\n    simpa using congrArg (algebraMap _ K) h\n  rw [Nat.irreducible_iff_prime, Ideal.absNorm_span_singleton, ← Nat.prime_iff,\n    ← Int.prime_iff_natAbs_prime]\n  cases k\n  · convert Prime.neg Int.prime_two\n    apply RingHom.injective_int (algebraMap ℤ ℚ)\n    rw [← Algebra.norm_localization (Sₘ := K) ℤ (nonZeroDivisors ℤ)]\n    simp only [PNat.pow_coe, id.map_eq_id, RingHomCompTriple.comp_eq, RingHom.coe_coe,\n      Subalgebra.coe_val, algebraMap_int_eq, map_neg, map_ofNat]\n    simpa only [zero_add, pow_one, AddSubgroupClass.coe_sub, OneMemClass.coe_one,\n        pow_zero]\n      using hζ.norm_pow_sub_one_two (cyclotomic.irreducible_rat\n        (by simp only [zero_add, pow_one, Nat.ofNat_pos]))\n  convert Int.prime_two\n  apply RingHom.injective_int (algebraMap ℤ ℚ)\n  rw [← Algebra.norm_localization (Sₘ := K) ℤ (nonZeroDivisors ℤ)]\n  simp only [PNat.pow_coe, id.map_eq_id, RingHomCompTriple.comp_eq, RingHom.coe_coe,\n    Subalgebra.coe_val, algebraMap_int_eq, map_natCast]\n  exact hζ.norm_sub_one_two Nat.AtLeastTwo.prop (cyclotomic.irreducible_rat (by simp))\n\n"}
{"name":"IsPrimitiveRoot.zeta_sub_one_prime","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝² : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p (HAdd.hAdd k 1))) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p (HAdd.hAdd k 1))\n⊢ Prime (HSub.hSub hζ.toInteger 1)","decl":"/-- `ζ - 1` is prime if `ζ` is a primitive `p ^ (k + 1)`-th root of unity. -/\ntheorem zeta_sub_one_prime [IsCyclotomicExtension {p ^ (k + 1)} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑(p ^ (k + 1))) : Prime (hζ.toInteger - 1) := by\n  by_cases htwo : p = 2\n  · subst htwo\n    apply hζ.zeta_sub_one_prime_of_two_pow\n  · apply hζ.zeta_sub_one_prime_of_ne_two htwo\n\n"}
{"name":"IsPrimitiveRoot.zeta_sub_one_prime'","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nK : Type u\ninst✝¹ : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝ : CharZero K\nh : IsCyclotomicExtension (Singleton.singleton p) Rat K\nhζ : IsPrimitiveRoot ζ ↑p\n⊢ Prime (HSub.hSub hζ.toInteger 1)","decl":"/-- `ζ - 1` is prime if `ζ` is a primitive `p`-th root of unity. -/\ntheorem zeta_sub_one_prime' [h : IsCyclotomicExtension {p} ℚ K] (hζ : IsPrimitiveRoot ζ p) :\n    Prime ((hζ.toInteger - 1)) := by\n  convert zeta_sub_one_prime (k := 0) (by simpa only [zero_add, pow_one])\n  simpa only [zero_add, pow_one]\n\n"}
{"name":"IsPrimitiveRoot.subOneIntegralPowerBasis_gen_prime","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝² : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p (HAdd.hAdd k 1))) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p (HAdd.hAdd k 1))\n⊢ Prime hζ.subOneIntegralPowerBasis.gen","decl":"theorem subOneIntegralPowerBasis_gen_prime [IsCyclotomicExtension {p ^ (k + 1)} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑(p ^ (k + 1))) :\n    Prime hζ.subOneIntegralPowerBasis.gen := by\n  simpa only [subOneIntegralPowerBasis_gen] using hζ.zeta_sub_one_prime\n\n"}
{"name":"IsPrimitiveRoot.subOneIntegralPowerBasis'_gen_prime","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nK : Type u\ninst✝² : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton p) Rat K\nhζ : IsPrimitiveRoot ζ ↑p\n⊢ Prime hζ.subOneIntegralPowerBasis'.gen","decl":"theorem subOneIntegralPowerBasis'_gen_prime [IsCyclotomicExtension {p} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑p) :\n    Prime hζ.subOneIntegralPowerBasis'.gen := by\n  simpa only [subOneIntegralPowerBasis'_gen] using hζ.zeta_sub_one_prime'\n\n"}
{"name":"IsPrimitiveRoot.norm_toInteger_pow_sub_one_of_prime_pow_ne_two","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝² : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p (HAdd.hAdd k 1))) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p (HAdd.hAdd k 1))\ns : Nat\nhs : LE.le s k\nhtwo : Ne (HPow.hPow p (HAdd.hAdd (HSub.hSub k s) 1)) 2\n⊢ Eq ((Algebra.norm Int) (HSub.hSub (HPow.hPow hζ.toInteger (HPow.hPow (↑p) s)) 1)) (HPow.hPow (↑↑p) (HPow.hPow (↑p) s))","decl":"/-- The norm, relative to `ℤ`, of `ζ ^ p ^ s - 1` in a `p ^ (k + 1)`-th cyclotomic extension of `ℚ`\nis p ^ p ^ s` if `s ≤ k` and `p ^ (k - s + 1) ≠ 2`. -/\nlemma norm_toInteger_pow_sub_one_of_prime_pow_ne_two [IsCyclotomicExtension {p ^ (k + 1)} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑(p ^ (k + 1))) {s : ℕ} (hs : s ≤ k) (htwo : p ^ (k - s + 1) ≠ 2) :\n    Algebra.norm ℤ (hζ.toInteger ^ (p : ℕ) ^ s - 1) = p ^ (p : ℕ) ^ s := by\n  have : NumberField K := IsCyclotomicExtension.numberField {p ^ (k + 1)} ℚ K\n  rw [Algebra.norm_eq_iff ℤ (Sₘ := K) (Rₘ := ℚ) rfl.le]\n  simp [hζ.norm_pow_sub_one_of_prime_pow_ne_two\n          (cyclotomic.irreducible_rat (by simp only [PNat.pow_coe, gt_iff_lt, PNat.pos, pow_pos]))\n          hs htwo]\n\n"}
{"name":"IsPrimitiveRoot.norm_toInteger_pow_sub_one_of_two","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"k : Nat\nK : Type u\ninst✝² : Field K\nζ : K\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow 2 (HAdd.hAdd k 1))) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow 2 (HAdd.hAdd k 1))\n⊢ Eq ((Algebra.norm Int) (HSub.hSub (HPow.hPow hζ.toInteger (HPow.hPow 2 k)) 1)) (HPow.hPow (-2) (HPow.hPow 2 k))","decl":"/-- The norm, relative to `ℤ`, of `ζ ^ 2 ^ k - 1` in a `2 ^ (k + 1)`-th cyclotomic extension of `ℚ`\nis `(-2) ^ 2 ^ k`. -/\nlemma norm_toInteger_pow_sub_one_of_two [IsCyclotomicExtension {2 ^ (k + 1)} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑((2 : ℕ+) ^ (k + 1))) :\n    Algebra.norm ℤ (hζ.toInteger ^ 2 ^ k - 1) = (-2) ^ (2 : ℕ) ^ k := by\n  have : NumberField K := IsCyclotomicExtension.numberField {2 ^ (k + 1)} ℚ K\n  rw [Algebra.norm_eq_iff ℤ (Sₘ := K) (Rₘ := ℚ) rfl.le]\n  simp [hζ.norm_pow_sub_one_two (cyclotomic.irreducible_rat (pow_pos (by decide) _))]\n\n"}
{"name":"IsPrimitiveRoot.norm_toInteger_pow_sub_one_of_prime_ne_two","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝² : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p (HAdd.hAdd k 1))) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p (HAdd.hAdd k 1))\ns : Nat\nhs : LE.le s k\nhodd : Ne p 2\n⊢ Eq ((Algebra.norm Int) (HSub.hSub (HPow.hPow hζ.toInteger (HPow.hPow (↑p) s)) 1)) (HPow.hPow (↑↑p) (HPow.hPow (↑p) s))","decl":"/-- The norm, relative to `ℤ`, of `ζ ^ p ^ s - 1` in a `p ^ (k + 1)`-th cyclotomic extension of `ℚ`\nis `p ^ p ^ s` if `s ≤ k` and `p ≠ 2`. -/\nlemma norm_toInteger_pow_sub_one_of_prime_ne_two [IsCyclotomicExtension {p ^ (k + 1)} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑(p ^ (k + 1))) {s : ℕ} (hs : s ≤ k) (hodd : p ≠ 2) :\n    Algebra.norm ℤ (hζ.toInteger ^ (p : ℕ) ^ s - 1) = p ^ (p : ℕ) ^ s := by\n  refine hζ.norm_toInteger_pow_sub_one_of_prime_pow_ne_two hs (fun h ↦ hodd ?_)\n  suffices h : (p : ℕ) = 2 from PNat.coe_injective h\n  apply eq_of_prime_pow_eq hp.out.prime Nat.prime_two.prime (k - s).succ_pos\n  rw [pow_one]\n  exact congr_arg Subtype.val h\n\n"}
{"name":"IsPrimitiveRoot.norm_toInteger_sub_one_of_prime_ne_two","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝² : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p (HAdd.hAdd k 1))) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p (HAdd.hAdd k 1))\nhodd : Ne p 2\n⊢ Eq ((Algebra.norm Int) (HSub.hSub hζ.toInteger 1)) ↑↑p","decl":"/-- The norm, relative to `ℤ`, of `ζ - 1` in a `p ^ (k + 1)`-th cyclotomic extension of `ℚ` is\n`p` if `p ≠ 2`. -/\nlemma norm_toInteger_sub_one_of_prime_ne_two [IsCyclotomicExtension {p ^ (k + 1)} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑(p ^ (k + 1))) (hodd : p ≠ 2) :\n    Algebra.norm ℤ (hζ.toInteger - 1) = p := by\n  simpa only [pow_zero, pow_one] using\n    hζ.norm_toInteger_pow_sub_one_of_prime_ne_two (Nat.zero_le _) hodd\n\n"}
{"name":"IsPrimitiveRoot.norm_toInteger_sub_one_of_prime_ne_two'","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nK : Type u\ninst✝¹ : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝ : CharZero K\nhcycl : IsCyclotomicExtension (Singleton.singleton p) Rat K\nhζ : IsPrimitiveRoot ζ ↑p\nh : Ne p 2\n⊢ Eq ((Algebra.norm Int) (HSub.hSub hζ.toInteger 1)) ↑↑p","decl":"/-- The norm, relative to `ℤ`, of `ζ - 1` in a `p`-th cyclotomic extension of `ℚ` is `p` if\n`p ≠ 2`. -/\nlemma norm_toInteger_sub_one_of_prime_ne_two' [hcycl : IsCyclotomicExtension {p} ℚ K]\n    (hζ : IsPrimitiveRoot ζ p) (h : p ≠ 2) : Algebra.norm ℤ (hζ.toInteger - 1) = p := by\n  have : IsCyclotomicExtension {p ^ (0 + 1)} ℚ K := by simpa using hcycl\n  replace hζ : IsPrimitiveRoot ζ (p ^ (0 + 1)) := by simpa using hζ\n  exact hζ.norm_toInteger_sub_one_of_prime_ne_two h\n\n"}
{"name":"IsPrimitiveRoot.prime_norm_toInteger_sub_one_of_prime_pow_ne_two","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝² : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p (HAdd.hAdd k 1))) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p (HAdd.hAdd k 1))\nhtwo : Ne (HPow.hPow p (HAdd.hAdd k 1)) 2\n⊢ Prime ((Algebra.norm Int) (HSub.hSub hζ.toInteger 1))","decl":"/-- The norm, relative to `ℤ`, of `ζ - 1` in a `p ^ (k + 1)`-th cyclotomic extension of `ℚ` is\na prime if `p ^ (k  + 1) ≠ 2`. -/\nlemma prime_norm_toInteger_sub_one_of_prime_pow_ne_two [IsCyclotomicExtension {p ^ (k + 1)} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑(p ^ (k + 1))) (htwo : p ^ (k + 1) ≠ 2) :\n    Prime (Algebra.norm ℤ (hζ.toInteger - 1)) := by\n  have := hζ.norm_toInteger_pow_sub_one_of_prime_pow_ne_two (zero_le _) htwo\n  simp only [pow_zero, pow_one] at this\n  rw [this]\n  exact Nat.prime_iff_prime_int.1 hp.out\n\n"}
{"name":"IsPrimitiveRoot.prime_norm_toInteger_sub_one_of_prime_ne_two","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝¹ : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝ : CharZero K\nhcycl : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p (HAdd.hAdd k 1))) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p (HAdd.hAdd k 1))\nhodd : Ne p 2\n⊢ Prime ((Algebra.norm Int) (HSub.hSub hζ.toInteger 1))","decl":"/-- The norm, relative to `ℤ`, of `ζ - 1` in a `p ^ (k + 1)`-th cyclotomic extension of `ℚ` is\na prime if `p ≠ 2`. -/\nlemma prime_norm_toInteger_sub_one_of_prime_ne_two [hcycl : IsCyclotomicExtension {p ^ (k + 1)} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑(p ^ (k + 1))) (hodd : p ≠ 2) :\n    Prime (Algebra.norm ℤ (hζ.toInteger - 1)) := by\n  have := hζ.norm_toInteger_sub_one_of_prime_ne_two hodd\n  simp only [pow_zero, pow_one] at this\n  rw [this]\n  exact Nat.prime_iff_prime_int.1 hp.out\n\n"}
{"name":"IsPrimitiveRoot.prime_norm_toInteger_sub_one_of_prime_ne_two'","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nK : Type u\ninst✝¹ : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝ : CharZero K\nhcycl : IsCyclotomicExtension (Singleton.singleton p) Rat K\nhζ : IsPrimitiveRoot ζ ↑p\nhodd : Ne p 2\n⊢ Prime ((Algebra.norm Int) (HSub.hSub hζ.toInteger 1))","decl":"/-- The norm, relative to `ℤ`, of `ζ - 1` in a `p`-th cyclotomic extension of `ℚ` is a prime if\n`p ≠ 2`. -/\nlemma prime_norm_toInteger_sub_one_of_prime_ne_two' [hcycl : IsCyclotomicExtension {p} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑p) (hodd : p ≠ 2) :\n    Prime (Algebra.norm ℤ (hζ.toInteger - 1)) := by\n  have : IsCyclotomicExtension {p ^ (0 + 1)} ℚ K := by simpa using hcycl\n  replace hζ : IsPrimitiveRoot ζ (p ^ (0 + 1)) := by simpa using hζ\n  exact hζ.prime_norm_toInteger_sub_one_of_prime_ne_two hodd\n\n"}
{"name":"IsPrimitiveRoot.not_exists_int_prime_dvd_sub_of_prime_pow_ne_two","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝¹ : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝ : CharZero K\nhcycl : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p (HAdd.hAdd k 1))) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p (HAdd.hAdd k 1))\nhtwo : Ne (HPow.hPow p (HAdd.hAdd k 1)) 2\n⊢ Not (Exists fun n => Dvd.dvd (↑↑p) (HSub.hSub hζ.toInteger ↑n))","decl":"/-- In a `p ^ (k + 1)`-th cyclotomic extension of `ℚ `, we have that `ζ` is not congruent to an\n  integer modulo `p` if `p ^ (k  + 1) ≠ 2`. -/\ntheorem not_exists_int_prime_dvd_sub_of_prime_pow_ne_two\n    [hcycl : IsCyclotomicExtension {p ^ (k + 1)} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑(p ^ (k + 1))) (htwo : p ^ (k + 1) ≠ 2) :\n    ¬(∃ n : ℤ, (p : 𝓞 K) ∣ (hζ.toInteger - n : 𝓞 K)) := by\n  intro ⟨n, x, h⟩\n  -- Let `pB` be the power basis of `𝓞 K` given by powers of `ζ`.\n  let pB := hζ.integralPowerBasis\n  have hdim : pB.dim = ↑p ^ k * (↑p - 1) := by\n    simp [integralPowerBasis_dim, pB, Nat.totient_prime_pow hp.1 (Nat.zero_lt_succ k)]\n  replace hdim : 1 < pB.dim := by\n    rw [Nat.one_lt_iff_ne_zero_and_ne_one, hdim]\n    refine ⟨by simp only [ne_eq, mul_eq_zero, pow_eq_zero_iff', PNat.ne_zero, false_and, false_or,\n      Nat.sub_eq_zero_iff_le, not_le, Nat.Prime.one_lt hp.out], ne_of_gt ?_⟩\n    by_cases hk : k = 0\n    · simp only [hk, zero_add, pow_one, pow_zero, one_mul, Nat.lt_sub_iff_add_lt,\n        Nat.reduceAdd] at htwo ⊢\n      exact htwo.symm.lt_of_le hp.1.two_le\n    · exact one_lt_mul_of_lt_of_le (one_lt_pow₀ hp.1.one_lt hk)\n        (have := Nat.Prime.two_le hp.out; by omega)\n  rw [sub_eq_iff_eq_add] at h\n  -- We are assuming that `ζ = n + p * x` for some integer `n` and `x : 𝓞 K`. Looking at the\n  -- coordinates in the base `pB`, we obtain that `1` is a multiple of `p`, contradiction.\n  replace h := pB.basis.ext_elem_iff.1 h ⟨1, hdim⟩\n  have := pB.basis_eq_pow ⟨1, hdim⟩\n  rw [hζ.integralPowerBasis_gen] at this\n  simp only [PowerBasis.coe_basis, pow_one] at this\n  rw [← this, show pB.gen = pB.gen ^ (⟨1, hdim⟩ : Fin pB.dim).1 by simp, ← pB.basis_eq_pow,\n    pB.basis.repr_self_apply] at h\n  simp only [↓reduceIte, map_add, Finsupp.coe_add, Pi.add_apply] at h\n  rw [show (p : 𝓞 K) * x = (p : ℤ) • x by simp, ← pB.basis.coord_apply,\n    LinearMap.map_smul, ← zsmul_one, ← pB.basis.coord_apply, LinearMap.map_smul,\n    show 1 = pB.gen ^ (⟨0, by omega⟩ : Fin pB.dim).1 by simp, ← pB.basis_eq_pow,\n    pB.basis.coord_apply, pB.basis.coord_apply, pB.basis.repr_self_apply] at h\n  simp only [smul_eq_mul, Fin.mk.injEq, zero_ne_one, ↓reduceIte, mul_zero, add_zero] at h\n  exact (Int.prime_iff_natAbs_prime.2 (by simp [hp.1])).not_dvd_one ⟨_, h⟩\n\n"}
{"name":"IsPrimitiveRoot.not_exists_int_prime_dvd_sub_of_prime_ne_two","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝¹ : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝ : CharZero K\nhcycl : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p (HAdd.hAdd k 1))) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p (HAdd.hAdd k 1))\nhodd : Ne p 2\n⊢ Not (Exists fun n => Dvd.dvd (↑↑p) (HSub.hSub hζ.toInteger ↑n))","decl":"/-- In a `p ^ (k + 1)`-th cyclotomic extension of `ℚ `, we have that `ζ` is not congruent to an\n  integer modulo `p` if `p ≠ 2`. -/\ntheorem not_exists_int_prime_dvd_sub_of_prime_ne_two\n    [hcycl : IsCyclotomicExtension {p ^ (k + 1)} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑(p ^ (k + 1))) (hodd : p ≠ 2) :\n    ¬(∃ n : ℤ, (p : 𝓞 K) ∣ (hζ.toInteger - n : 𝓞 K)) := by\n  refine not_exists_int_prime_dvd_sub_of_prime_pow_ne_two hζ (fun h ↦ ?_)\n  simp_all only [(@Nat.Prime.pow_eq_iff 2 p (k+1) Nat.prime_two).mp (by assumption_mod_cast),\n    pow_one, ne_eq]\n\n"}
{"name":"IsPrimitiveRoot.not_exists_int_prime_dvd_sub_of_prime_ne_two'","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nK : Type u\ninst✝¹ : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝ : CharZero K\nhcycl : IsCyclotomicExtension (Singleton.singleton p) Rat K\nhζ : IsPrimitiveRoot ζ ↑p\nhodd : Ne p 2\n⊢ Not (Exists fun n => Dvd.dvd (↑↑p) (HSub.hSub hζ.toInteger ↑n))","decl":"/-- In a `p`-th cyclotomic extension of `ℚ `, we have that `ζ` is not congruent to an\n  integer modulo `p` if `p ≠ 2`. -/\ntheorem not_exists_int_prime_dvd_sub_of_prime_ne_two'\n    [hcycl : IsCyclotomicExtension {p} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑p) (hodd : p ≠ 2) :\n    ¬(∃ n : ℤ, (p : 𝓞 K) ∣ (hζ.toInteger - n : 𝓞 K)) := by\n  have : IsCyclotomicExtension {p ^ (0 + 1)} ℚ K := by simpa using hcycl\n  replace hζ : IsPrimitiveRoot ζ (p ^ (0 + 1)) := by simpa using hζ\n  exact not_exists_int_prime_dvd_sub_of_prime_ne_two hζ hodd\n\n"}
{"name":"IsPrimitiveRoot.finite_quotient_span_sub_one","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝¹ : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝ : CharZero K\nhcycl : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p (HAdd.hAdd k 1))) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p (HAdd.hAdd k 1))\n⊢ Finite (HasQuotient.Quotient (NumberField.RingOfIntegers K) (Ideal.span (Singleton.singleton (HSub.hSub hζ.toInteger 1))))","decl":"theorem finite_quotient_span_sub_one [hcycl : IsCyclotomicExtension {p ^ (k + 1)} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑(p ^ (k + 1))) :\n    Finite (𝓞 K ⧸ Ideal.span {hζ.toInteger - 1}) := by\n  have : NumberField K := IsCyclotomicExtension.numberField {p ^ (k + 1)} ℚ K\n  refine Fintype.finite <| Ideal.fintypeQuotientOfFreeOfNeBot _ (fun h ↦ ?_)\n  simp only [Ideal.span_singleton_eq_bot, sub_eq_zero, ← Subtype.coe_inj] at h\n  exact hζ.ne_one (one_lt_pow₀ hp.1.one_lt (Nat.zero_ne_add_one k).symm)\n    (RingOfIntegers.ext_iff.1 h)\n\n"}
{"name":"IsPrimitiveRoot.finite_quotient_span_sub_one'","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nK : Type u\ninst✝¹ : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝ : CharZero K\nhcycl : IsCyclotomicExtension (Singleton.singleton p) Rat K\nhζ : IsPrimitiveRoot ζ ↑p\n⊢ Finite (HasQuotient.Quotient (NumberField.RingOfIntegers K) (Ideal.span (Singleton.singleton (HSub.hSub hζ.toInteger 1))))","decl":"theorem finite_quotient_span_sub_one' [hcycl : IsCyclotomicExtension {p} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑p) :\n    Finite (𝓞 K ⧸ Ideal.span {hζ.toInteger - 1}) := by\n  have : IsCyclotomicExtension {p ^ (0 + 1)} ℚ K := by simpa using hcycl\n  replace hζ : IsPrimitiveRoot ζ (p ^ (0 + 1)) := by simpa using hζ\n  exact hζ.finite_quotient_span_sub_one\n\n"}
{"name":"IsPrimitiveRoot.toInteger_sub_one_dvd_prime","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝¹ : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝ : CharZero K\nhcycl : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p (HAdd.hAdd k 1))) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p (HAdd.hAdd k 1))\n⊢ Dvd.dvd (HSub.hSub hζ.toInteger 1) ↑↑p","decl":"/-- In a `p ^ (k + 1)`-th cyclotomic extension of `ℚ`, we have that\n  `ζ - 1` divides `p` in `𝓞 K`. -/\nlemma toInteger_sub_one_dvd_prime [hcycl : IsCyclotomicExtension {p ^ (k + 1)} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑(p ^ (k + 1))) : ((hζ.toInteger - 1)) ∣ p := by\n  by_cases htwo : p ^ (k + 1) = 2\n  · replace htwo : (p : ℕ) ^ (k + 1) = 2 := by exact_mod_cast htwo\n    have ⟨hp2, hk⟩ := (Nat.Prime.pow_eq_iff Nat.prime_two).1 htwo\n    simp only [add_left_eq_self] at hk\n    have hζ' : ζ = -1 := by\n      refine IsPrimitiveRoot.eq_neg_one_of_two_right ?_\n      rwa [hk, zero_add, pow_one, hp2] at hζ\n    replace hζ' : hζ.toInteger = -1 := by\n      ext\n      exact hζ'\n    rw [hζ', hp2]\n    exact ⟨-1, by ring⟩\n  suffices (hζ.toInteger - 1) ∣ (p : ℤ) by simpa\n  have := IsCyclotomicExtension.numberField {p ^ (k + 1)} ℚ K\n  have H := hζ.norm_toInteger_pow_sub_one_of_prime_pow_ne_two (zero_le _) htwo\n  rw [pow_zero, pow_one] at H\n  rw [← Ideal.norm_dvd_iff, H]\n  · simp\n  · exact prime_norm_toInteger_sub_one_of_prime_pow_ne_two hζ htwo\n\n"}
{"name":"IsPrimitiveRoot.toInteger_sub_one_dvd_prime'","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nK : Type u\ninst✝¹ : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝ : CharZero K\nhcycl : IsCyclotomicExtension (Singleton.singleton p) Rat K\nhζ : IsPrimitiveRoot ζ ↑p\n⊢ Dvd.dvd (HSub.hSub hζ.toInteger 1) ↑↑p","decl":"/-- In a `p`-th cyclotomic extension of `ℚ`, we have that `ζ - 1` divides `p` in `𝓞 K`. -/\nlemma toInteger_sub_one_dvd_prime' [hcycl : IsCyclotomicExtension {p} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑p) : ((hζ.toInteger - 1)) ∣ p := by\n  have : IsCyclotomicExtension {p ^ (0 + 1)} ℚ K := by simpa using hcycl\n  replace hζ : IsPrimitiveRoot ζ (p ^ (0 + 1)) := by simpa using hζ\n  exact toInteger_sub_one_dvd_prime hζ\n\n"}
{"name":"IsPrimitiveRoot.toInteger_sub_one_not_dvd_two","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝² : Field K\nζ : K\nhp : Fact (Nat.Prime ↑p)\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p (HAdd.hAdd k 1))) Rat K\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p (HAdd.hAdd k 1))\nhodd : Ne p 2\n⊢ Not (Dvd.dvd (HSub.hSub hζ.toInteger 1) 2)","decl":"/-- We have that `hζ.toInteger - 1` does not divide `2`. -/\nlemma toInteger_sub_one_not_dvd_two [IsCyclotomicExtension {p ^ (k + 1)} ℚ K]\n    (hζ : IsPrimitiveRoot ζ ↑(p ^ (k + 1))) (hodd : p ≠ 2) : ¬ hζ.toInteger - 1 ∣ 2 := fun h ↦ by\n  have : NumberField K := IsCyclotomicExtension.numberField {p ^ (k + 1)} ℚ K\n  replace h : hζ.toInteger - 1 ∣ ↑(2 : ℤ) := by simp [h]\n  rw [← Ideal.norm_dvd_iff, hζ.norm_toInteger_sub_one_of_prime_ne_two hodd] at h\n  · refine hodd <| PNat.coe_inj.1 <| (prime_dvd_prime_iff_eq ?_ ?_).1 ?_\n    · exact Nat.prime_iff.1 hp.1\n    · exact Nat.prime_iff.1 Nat.prime_two\n    · exact Int.ofNat_dvd.mp h\n  · rw [hζ.norm_toInteger_sub_one_of_prime_ne_two hodd]\n    exact Nat.prime_iff_prime_int.1 hp.1\n\n"}
{"name":"IsCyclotomicExtension.Rat.absdiscr_prime_pow","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝² : Field K\nhp : Fact (Nat.Prime ↑p)\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p k)) Rat K\n⊢ Eq (NumberField.discr K) (HMul.hMul (HPow.hPow (-1) (HDiv.hDiv (HPow.hPow (↑p) k).totient 2)) (HPow.hPow (↑↑p) (HMul.hMul (HPow.hPow (↑p) (HSub.hSub k 1)) (HSub.hSub (HMul.hMul (HSub.hSub (↑p) 1) k) 1))))","decl":"/-- We compute the absolute discriminant of a `p ^ k`-th cyclotomic field.\n  Beware that in the cases `p ^ k = 1` and `p ^ k = 2` the formula uses `1 / 2 = 0` and `0 - 1 = 0`.\n  See also the results below. -/\ntheorem absdiscr_prime_pow [IsCyclotomicExtension {p ^ k} ℚ K] :\n    haveI : NumberField K := IsCyclotomicExtension.numberField {p ^ k} ℚ K\n    NumberField.discr K =\n    (-1) ^ ((p ^ k : ℕ).totient / 2) * p ^ ((p : ℕ) ^ (k - 1) * ((p - 1) * k - 1)) := by\n  have hζ := IsCyclotomicExtension.zeta_spec (p ^ k) ℚ K\n  have : NumberField K := IsCyclotomicExtension.numberField {p ^ k} ℚ K\n  let pB₁ := integralPowerBasis hζ\n  apply (algebraMap ℤ ℚ).injective_int\n  rw [← NumberField.discr_eq_discr _ pB₁.basis, ← Algebra.discr_localizationLocalization ℤ ℤ⁰ K]\n  convert IsCyclotomicExtension.discr_prime_pow hζ (cyclotomic.irreducible_rat (p ^ k).2) using 1\n  · have : pB₁.dim = (IsPrimitiveRoot.powerBasis ℚ hζ).dim := by\n      rw [← PowerBasis.finrank, ← PowerBasis.finrank]\n      exact RingOfIntegers.rank K\n    rw [← Algebra.discr_reindex _ _ (finCongr this)]\n    congr 1\n    ext i\n    simp_rw [Function.comp_apply, Basis.localizationLocalization_apply, powerBasis_dim,\n      PowerBasis.coe_basis, pB₁, integralPowerBasis_gen]\n    convert ← ((IsPrimitiveRoot.powerBasis ℚ hζ).basis_eq_pow i).symm using 1\n  · simp_rw [algebraMap_int_eq, map_mul, map_pow, map_neg, map_one, map_natCast]\n\n"}
{"name":"IsCyclotomicExtension.Rat.absdiscr_prime_pow_succ","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nk : Nat\nK : Type u\ninst✝² : Field K\nhp : Fact (Nat.Prime ↑p)\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p (HAdd.hAdd k 1))) Rat K\n⊢ Eq (NumberField.discr K) (HMul.hMul (HPow.hPow (-1) (HDiv.hDiv (HMul.hMul (HPow.hPow (↑p) k) (HSub.hSub (↑p) 1)) 2)) (HPow.hPow (↑↑p) (HMul.hMul (HPow.hPow (↑p) k) (HSub.hSub (HMul.hMul (HSub.hSub (↑p) 1) (HAdd.hAdd k 1)) 1))))","decl":"open Nat in\n/-- We compute the absolute discriminant of a `p ^ (k + 1)`-th cyclotomic field.\n  Beware that in the case `p ^ k = 2` the formula uses `1 / 2 = 0`. See also the results below. -/\ntheorem absdiscr_prime_pow_succ [IsCyclotomicExtension {p ^ (k + 1)} ℚ K] :\n    haveI : NumberField K := IsCyclotomicExtension.numberField {p ^ (k + 1)} ℚ K\n    NumberField.discr K =\n    (-1) ^ ((p : ℕ) ^ k * (p - 1) / 2) * p ^ ((p : ℕ) ^ k * ((p - 1) * (k + 1) - 1)) := by\n  simpa [totient_prime_pow hp.out (succ_pos k)] using absdiscr_prime_pow p (k + 1) K\n\n"}
{"name":"IsCyclotomicExtension.Rat.absdiscr_prime","module":"Mathlib.NumberTheory.Cyclotomic.Rat","initialProofState":"p : PNat\nK : Type u\ninst✝² : Field K\nhp : Fact (Nat.Prime ↑p)\ninst✝¹ : CharZero K\ninst✝ : IsCyclotomicExtension (Singleton.singleton p) Rat K\n⊢ Eq (NumberField.discr K) (HMul.hMul (HPow.hPow (-1) (HDiv.hDiv (HSub.hSub (↑p) 1) 2)) (HPow.hPow (↑↑p) (HSub.hSub (↑p) 2)))","decl":"/-- We compute the absolute discriminant of a `p`-th cyclotomic field where `p` is prime. -/\ntheorem absdiscr_prime [IsCyclotomicExtension {p} ℚ K] :\n    haveI : NumberField K := IsCyclotomicExtension.numberField {p} ℚ K\n    NumberField.discr K = (-1) ^ (((p : ℕ) - 1) / 2) * p ^ ((p : ℕ) - 2) := by\n  have : IsCyclotomicExtension {p ^ (0 + 1)} ℚ K := by\n    rw [zero_add, pow_one]\n    infer_instance\n  rw [absdiscr_prime_pow_succ p 0 K]\n  simp only [Int.reduceNeg, pow_zero, one_mul, zero_add, mul_one, mul_eq_mul_left_iff, gt_iff_lt,\n    Nat.cast_pos, PNat.pos, pow_eq_zero_iff', neg_eq_zero, one_ne_zero, ne_eq, false_and, or_false]\n  rfl\n\n"}
