{"name":"dvd_smul_of_dvd","module":"Mathlib.Algebra.Ring.Divisibility.Lemmas","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : SMul M R\ninst✝¹ : Semigroup R\ninst✝ : SMulCommClass M R R\nx y : R\nm : M\nh : Dvd.dvd x y\n⊢ Dvd.dvd x (HSMul.hSMul m y)","decl":"lemma dvd_smul_of_dvd {M : Type*} [SMul M R] [Semigroup R] [SMulCommClass M R R] {x y : R}\n    (m : M) (h : x ∣ y) : x ∣ m • y :=\n  let ⟨k, hk⟩ := h; ⟨m • k, by rw [mul_smul_comm, ← hk]⟩\n\n"}
{"name":"dvd_nsmul_of_dvd","module":"Mathlib.Algebra.Ring.Divisibility.Lemmas","initialProofState":"R : Type u_1\ninst✝ : NonUnitalSemiring R\nx y : R\nn : Nat\nh : Dvd.dvd x y\n⊢ Dvd.dvd x (HSMul.hSMul n y)","decl":"lemma dvd_nsmul_of_dvd [NonUnitalSemiring R] {x y : R} (n : ℕ) (h : x ∣ y) : x ∣ n • y :=\n  dvd_smul_of_dvd n h\n\n"}
{"name":"dvd_zsmul_of_dvd","module":"Mathlib.Algebra.Ring.Divisibility.Lemmas","initialProofState":"R : Type u_1\ninst✝ : NonUnitalRing R\nx y : R\nz : Int\nh : Dvd.dvd x y\n⊢ Dvd.dvd x (HSMul.hSMul z y)","decl":"lemma dvd_zsmul_of_dvd [NonUnitalRing R] {x y : R} (z : ℤ) (h : x ∣ y) : x ∣ z • y :=\n  dvd_smul_of_dvd z h\n\n"}
{"name":"Commute.pow_dvd_add_pow_of_pow_eq_zero_right","module":"Mathlib.Algebra.Ring.Divisibility.Lemmas","initialProofState":"R : Type u_1\nx y : R\nn m p : Nat\ninst✝ : Semiring R\nhp : LE.le (HAdd.hAdd n m) (HAdd.hAdd p 1)\nh_comm : Commute x y\nhy : Eq (HPow.hPow y n) 0\n⊢ Dvd.dvd (HPow.hPow x m) (HPow.hPow (HAdd.hAdd x y) p)","decl":"lemma pow_dvd_add_pow_of_pow_eq_zero_right (hp : n + m ≤ p + 1) (h_comm : Commute x y)\n    (hy : y ^ n = 0) : x ^ m ∣ (x + y) ^ p := by\n  rw [h_comm.add_pow']\n  refine Finset.dvd_sum fun ⟨i, j⟩ hij ↦ ?_\n  replace hij : i + j = p := by simpa using hij\n  apply dvd_nsmul_of_dvd\n  rcases le_or_lt m i with (hi : m ≤ i) | (hi : i + 1 ≤ m)\n  · exact dvd_mul_of_dvd_left (pow_dvd_pow x hi) _\n  · simp [pow_eq_zero_of_le (by omega : n ≤ j) hy]\n\n"}
{"name":"Commute.pow_dvd_add_pow_of_pow_eq_zero_left","module":"Mathlib.Algebra.Ring.Divisibility.Lemmas","initialProofState":"R : Type u_1\nx y : R\nn m p : Nat\ninst✝ : Semiring R\nhp : LE.le (HAdd.hAdd n m) (HAdd.hAdd p 1)\nh_comm : Commute x y\nhx : Eq (HPow.hPow x n) 0\n⊢ Dvd.dvd (HPow.hPow y m) (HPow.hPow (HAdd.hAdd x y) p)","decl":"lemma pow_dvd_add_pow_of_pow_eq_zero_left (hp : n + m ≤ p + 1) (h_comm : Commute x y)\n    (hx : x ^ n = 0) : y ^ m ∣ (x + y) ^ p :=\n  add_comm x y ▸ h_comm.symm.pow_dvd_add_pow_of_pow_eq_zero_right hp hx\n\n"}
{"name":"Commute.pow_dvd_pow_of_sub_pow_eq_zero","module":"Mathlib.Algebra.Ring.Divisibility.Lemmas","initialProofState":"R : Type u_1\nx y : R\nn m p : Nat\ninst✝ : Ring R\nhp : LE.le (HAdd.hAdd n m) (HAdd.hAdd p 1)\nh_comm : Commute x y\nh : Eq (HPow.hPow (HSub.hSub x y) n) 0\n⊢ Dvd.dvd (HPow.hPow x m) (HPow.hPow y p)","decl":"lemma pow_dvd_pow_of_sub_pow_eq_zero (hp : n + m ≤ p + 1) (h_comm : Commute x y)\n    (h : (x - y) ^ n = 0) : x ^ m ∣ y ^ p := by\n  rw [← sub_add_cancel y x]\n  apply (h_comm.symm.sub_left rfl).pow_dvd_add_pow_of_pow_eq_zero_left hp _\n  rw [← neg_sub x y, neg_pow, h, mul_zero]\n\n"}
{"name":"Commute.pow_dvd_pow_of_add_pow_eq_zero","module":"Mathlib.Algebra.Ring.Divisibility.Lemmas","initialProofState":"R : Type u_1\nx y : R\nn m p : Nat\ninst✝ : Ring R\nhp : LE.le (HAdd.hAdd n m) (HAdd.hAdd p 1)\nh_comm : Commute x y\nh : Eq (HPow.hPow (HAdd.hAdd x y) n) 0\n⊢ Dvd.dvd (HPow.hPow x m) (HPow.hPow y p)","decl":"lemma pow_dvd_pow_of_add_pow_eq_zero (hp : n + m ≤ p + 1) (h_comm : Commute x y)\n    (h : (x + y) ^ n = 0) : x ^ m ∣ y ^ p := by\n  rw [← neg_neg y, neg_pow']\n  apply dvd_mul_of_dvd_left\n  apply h_comm.neg_right.pow_dvd_pow_of_sub_pow_eq_zero hp\n  simpa\n\n"}
{"name":"Commute.pow_dvd_sub_pow_of_pow_eq_zero_right","module":"Mathlib.Algebra.Ring.Divisibility.Lemmas","initialProofState":"R : Type u_1\nx y : R\nn m p : Nat\ninst✝ : Ring R\nhp : LE.le (HAdd.hAdd n m) (HAdd.hAdd p 1)\nh_comm : Commute x y\nhy : Eq (HPow.hPow y n) 0\n⊢ Dvd.dvd (HPow.hPow x m) (HPow.hPow (HSub.hSub x y) p)","decl":"lemma pow_dvd_sub_pow_of_pow_eq_zero_right (hp : n + m ≤ p + 1) (h_comm : Commute x y)\n    (hy : y ^ n = 0) : x ^ m ∣ (x - y) ^ p :=\n  (sub_right rfl h_comm).pow_dvd_pow_of_sub_pow_eq_zero hp (by simpa)\n\n"}
{"name":"Commute.pow_dvd_sub_pow_of_pow_eq_zero_left","module":"Mathlib.Algebra.Ring.Divisibility.Lemmas","initialProofState":"R : Type u_1\nx y : R\nn m p : Nat\ninst✝ : Ring R\nhp : LE.le (HAdd.hAdd n m) (HAdd.hAdd p 1)\nh_comm : Commute x y\nhx : Eq (HPow.hPow x n) 0\n⊢ Dvd.dvd (HPow.hPow y m) (HPow.hPow (HSub.hSub x y) p)","decl":"lemma pow_dvd_sub_pow_of_pow_eq_zero_left (hp : n + m ≤ p + 1) (h_comm : Commute x y)\n    (hx : x ^ n = 0) : y ^ m ∣ (x - y) ^ p := by\n  rw [← neg_sub y x, neg_pow']\n  apply dvd_mul_of_dvd_left\n  exact h_comm.symm.pow_dvd_sub_pow_of_pow_eq_zero_right hp hx\n\n"}
{"name":"Commute.add_pow_dvd_pow_of_pow_eq_zero_right","module":"Mathlib.Algebra.Ring.Divisibility.Lemmas","initialProofState":"R : Type u_1\nx y : R\nn m p : Nat\ninst✝ : Ring R\nhp : LE.le (HAdd.hAdd n m) (HAdd.hAdd p 1)\nh_comm : Commute x y\nhx : Eq (HPow.hPow x n) 0\n⊢ Dvd.dvd (HPow.hPow (HAdd.hAdd x y) m) (HPow.hPow y p)","decl":"lemma add_pow_dvd_pow_of_pow_eq_zero_right (hp : n + m ≤ p + 1) (h_comm : Commute x y)\n    (hx : x ^ n = 0) : (x + y) ^ m ∣ y ^ p :=\n  (h_comm.add_left rfl).pow_dvd_pow_of_sub_pow_eq_zero hp (by simpa)\n\n"}
{"name":"Commute.add_pow_dvd_pow_of_pow_eq_zero_left","module":"Mathlib.Algebra.Ring.Divisibility.Lemmas","initialProofState":"R : Type u_1\nx y : R\nn m p : Nat\ninst✝ : Ring R\nhp : LE.le (HAdd.hAdd n m) (HAdd.hAdd p 1)\nh_comm : Commute x y\nhy : Eq (HPow.hPow y n) 0\n⊢ Dvd.dvd (HPow.hPow (HAdd.hAdd x y) m) (HPow.hPow x p)","decl":"lemma add_pow_dvd_pow_of_pow_eq_zero_left (hp : n + m ≤ p + 1) (h_comm : Commute x y)\n    (hy : y ^ n = 0) : (x + y) ^ m ∣ x ^ p :=\n  add_comm x y ▸ h_comm.symm.add_pow_dvd_pow_of_pow_eq_zero_right hp hy\n\n"}
{"name":"dvd_mul_sub_mul_mul_left_of_dvd","module":"Mathlib.Algebra.Ring.Divisibility.Lemmas","initialProofState":"R : Type u_1\ninst✝ : CommRing R\np a b c d x y : R\nh1 : Dvd.dvd p (HAdd.hAdd (HMul.hMul a x) (HMul.hMul b y))\nh2 : Dvd.dvd p (HAdd.hAdd (HMul.hMul c x) (HMul.hMul d y))\n⊢ Dvd.dvd p (HMul.hMul (HSub.hSub (HMul.hMul a d) (HMul.hMul b c)) x)","decl":"lemma dvd_mul_sub_mul_mul_left_of_dvd {p a b c d x y : R}\n    (h1 : p ∣ a * x + b * y) (h2 : p ∣ c * x + d * y) : p ∣ (a * d - b * c) * x := by\n  obtain ⟨k1, hk1⟩ := h1\n  obtain ⟨k2, hk2⟩ := h2\n  refine ⟨d * k1 - b * k2, ?_⟩\n  rw [show (a * d - b * c) * x = a * x * d - c * x * b by ring, eq_sub_of_add_eq hk1,\n    eq_sub_of_add_eq hk2]\n  ring\n\n"}
{"name":"dvd_mul_sub_mul_mul_right_of_dvd","module":"Mathlib.Algebra.Ring.Divisibility.Lemmas","initialProofState":"R : Type u_1\ninst✝ : CommRing R\np a b c d x y : R\nh1 : Dvd.dvd p (HAdd.hAdd (HMul.hMul a x) (HMul.hMul b y))\nh2 : Dvd.dvd p (HAdd.hAdd (HMul.hMul c x) (HMul.hMul d y))\n⊢ Dvd.dvd p (HMul.hMul (HSub.hSub (HMul.hMul a d) (HMul.hMul b c)) y)","decl":"lemma dvd_mul_sub_mul_mul_right_of_dvd {p a b c d x y : R}\n    (h1 : p ∣ a * x + b * y) (h2 : p ∣ c * x + d * y) : p ∣ (a * d - b * c) * y :=\n  (mul_comm a _ ▸ mul_comm c _ ▸ dvd_mul_sub_mul_mul_left_of_dvd\n    (add_comm (c * x) _ ▸ h2) (add_comm (a * x) _ ▸ h1))\n\n"}
{"name":"dvd_mul_sub_mul_mul_gcd_of_dvd","module":"Mathlib.Algebra.Ring.Divisibility.Lemmas","initialProofState":"R : Type u_1\ninst✝² : CommRing R\np a b c d x y : R\ninst✝¹ : IsDomain R\ninst✝ : GCDMonoid R\nh1 : Dvd.dvd p (HAdd.hAdd (HMul.hMul a x) (HMul.hMul b y))\nh2 : Dvd.dvd p (HAdd.hAdd (HMul.hMul c x) (HMul.hMul d y))\n⊢ Dvd.dvd p (HMul.hMul (HSub.hSub (HMul.hMul a d) (HMul.hMul b c)) (GCDMonoid.gcd x y))","decl":"lemma dvd_mul_sub_mul_mul_gcd_of_dvd {p a b c d x y : R} [IsDomain R] [GCDMonoid R]\n    (h1 : p ∣ a * x + b * y) (h2 : p ∣ c * x + d * y) : p ∣ (a * d - b * c) * gcd x y := by\n  rw [← (gcd_mul_left' (a*d - b*c) x y).dvd_iff_dvd_right]\n  exact (dvd_gcd_iff _ _ _).2 ⟨dvd_mul_sub_mul_mul_left_of_dvd h1 h2,\n    dvd_mul_sub_mul_mul_right_of_dvd h1 h2⟩\n\n"}
