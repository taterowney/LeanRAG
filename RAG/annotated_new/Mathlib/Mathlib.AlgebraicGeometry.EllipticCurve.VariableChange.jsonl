{"name":"WeierstrassCurve.VariableChange.ext_iff","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nx y : WeierstrassCurve.VariableChange R\n⊢ Iff (Eq x y) (And (Eq x.u y.u) (And (Eq x.r y.r) (And (Eq x.s y.s) (Eq x.t y.t))))","decl":"/-- An admissible linear change of variables of Weierstrass curves defined over a ring `R` given by\na tuple $(u, r, s, t)$ for some $u \\in R^\\times$ and some $r, s, t \\in R$. As a matrix, it is\n$\\begin{pmatrix} u^2 & 0 & r \\cr u^2s & u^3 & t \\cr 0 & 0 & 1 \\end{pmatrix}$.\nIn other words, this is the change of variables $(X, Y) \\mapsto (u^2X + r, u^3Y + u^2sX + t)$.\nWhen `R` is a field, any two isomorphic Weierstrass equations are related by this. -/\n@[ext]\nstructure VariableChange (R : Type u) [CommRing R] where\n  /-- The `u` coefficient of an admissible linear change of variables, which must be a unit. -/\n  u : Rˣ\n  /-- The `r` coefficient of an admissible linear change of variables. -/\n  r : R\n  /-- The `s` coefficient of an admissible linear change of variables. -/\n  s : R\n  /-- The `t` coefficient of an admissible linear change of variables. -/\n  t : R\n\n"}
{"name":"WeierstrassCurve.VariableChange.mk.sizeOf_spec","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝¹ : CommRing R\ninst✝ : SizeOf R\nu : Units R\nr s t : R\n⊢ Eq (SizeOf.sizeOf { u := u, r := r, s := s, t := t }) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf u)) (SizeOf.sizeOf r)) (SizeOf.sizeOf s)) (SizeOf.sizeOf t))","decl":"/-- An admissible linear change of variables of Weierstrass curves defined over a ring `R` given by\na tuple $(u, r, s, t)$ for some $u \\in R^\\times$ and some $r, s, t \\in R$. As a matrix, it is\n$\\begin{pmatrix} u^2 & 0 & r \\cr u^2s & u^3 & t \\cr 0 & 0 & 1 \\end{pmatrix}$.\nIn other words, this is the change of variables $(X, Y) \\mapsto (u^2X + r, u^3Y + u^2sX + t)$.\nWhen `R` is a field, any two isomorphic Weierstrass equations are related by this. -/\n@[ext]\nstructure VariableChange (R : Type u) [CommRing R] where\n  /-- The `u` coefficient of an admissible linear change of variables, which must be a unit. -/\n  u : Rˣ\n  /-- The `r` coefficient of an admissible linear change of variables. -/\n  r : R\n  /-- The `s` coefficient of an admissible linear change of variables. -/\n  s : R\n  /-- The `t` coefficient of an admissible linear change of variables. -/\n  t : R\n\n"}
{"name":"WeierstrassCurve.VariableChange.ext","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nx y : WeierstrassCurve.VariableChange R\nu : Eq x.u y.u\nr : Eq x.r y.r\ns : Eq x.s y.s\nt : Eq x.t y.t\n⊢ Eq x y","decl":"/-- An admissible linear change of variables of Weierstrass curves defined over a ring `R` given by\na tuple $(u, r, s, t)$ for some $u \\in R^\\times$ and some $r, s, t \\in R$. As a matrix, it is\n$\\begin{pmatrix} u^2 & 0 & r \\cr u^2s & u^3 & t \\cr 0 & 0 & 1 \\end{pmatrix}$.\nIn other words, this is the change of variables $(X, Y) \\mapsto (u^2X + r, u^3Y + u^2sX + t)$.\nWhen `R` is a field, any two isomorphic Weierstrass equations are related by this. -/\n@[ext]\nstructure VariableChange (R : Type u) [CommRing R] where\n  /-- The `u` coefficient of an admissible linear change of variables, which must be a unit. -/\n  u : Rˣ\n  /-- The `r` coefficient of an admissible linear change of variables. -/\n  r : R\n  /-- The `s` coefficient of an admissible linear change of variables. -/\n  s : R\n  /-- The `t` coefficient of an admissible linear change of variables. -/\n  t : R\n\n"}
{"name":"WeierstrassCurve.VariableChange.mk.inj","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nu✝ : Units R\nr✝ s✝ t✝ : R\nu : Units R\nr s t : R\nx✝ : Eq { u := u✝, r := r✝, s := s✝, t := t✝ } { u := u, r := r, s := s, t := t }\n⊢ And (Eq u✝ u) (And (Eq r✝ r) (And (Eq s✝ s) (Eq t✝ t)))","decl":"/-- An admissible linear change of variables of Weierstrass curves defined over a ring `R` given by\na tuple $(u, r, s, t)$ for some $u \\in R^\\times$ and some $r, s, t \\in R$. As a matrix, it is\n$\\begin{pmatrix} u^2 & 0 & r \\cr u^2s & u^3 & t \\cr 0 & 0 & 1 \\end{pmatrix}$.\nIn other words, this is the change of variables $(X, Y) \\mapsto (u^2X + r, u^3Y + u^2sX + t)$.\nWhen `R` is a field, any two isomorphic Weierstrass equations are related by this. -/\n@[ext]\nstructure VariableChange (R : Type u) [CommRing R] where\n  /-- The `u` coefficient of an admissible linear change of variables, which must be a unit. -/\n  u : Rˣ\n  /-- The `r` coefficient of an admissible linear change of variables. -/\n  r : R\n  /-- The `s` coefficient of an admissible linear change of variables. -/\n  s : R\n  /-- The `t` coefficient of an admissible linear change of variables. -/\n  t : R\n\n"}
{"name":"WeierstrassCurve.VariableChange.mk.injEq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nu✝ : Units R\nr✝ s✝ t✝ : R\nu : Units R\nr s t : R\n⊢ Eq (Eq { u := u✝, r := r✝, s := s✝, t := t✝ } { u := u, r := r, s := s, t := t }) (And (Eq u✝ u) (And (Eq r✝ r) (And (Eq s✝ s) (Eq t✝ t))))","decl":"/-- An admissible linear change of variables of Weierstrass curves defined over a ring `R` given by\na tuple $(u, r, s, t)$ for some $u \\in R^\\times$ and some $r, s, t \\in R$. As a matrix, it is\n$\\begin{pmatrix} u^2 & 0 & r \\cr u^2s & u^3 & t \\cr 0 & 0 & 1 \\end{pmatrix}$.\nIn other words, this is the change of variables $(X, Y) \\mapsto (u^2X + r, u^3Y + u^2sX + t)$.\nWhen `R` is a field, any two isomorphic Weierstrass equations are related by this. -/\n@[ext]\nstructure VariableChange (R : Type u) [CommRing R] where\n  /-- The `u` coefficient of an admissible linear change of variables, which must be a unit. -/\n  u : Rˣ\n  /-- The `r` coefficient of an admissible linear change of variables. -/\n  r : R\n  /-- The `s` coefficient of an admissible linear change of variables. -/\n  s : R\n  /-- The `t` coefficient of an admissible linear change of variables. -/\n  t : R\n\n"}
{"name":"WeierstrassCurve.VariableChange.id_comp","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nC : WeierstrassCurve.VariableChange R\n⊢ Eq (WeierstrassCurve.VariableChange.id.comp C) C","decl":"lemma id_comp (C : VariableChange R) : comp id C = C := by\n  simp only [comp, id, zero_add, zero_mul, mul_zero, one_mul]\n\n"}
{"name":"WeierstrassCurve.VariableChange.comp_id","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nC : WeierstrassCurve.VariableChange R\n⊢ Eq (C.comp WeierstrassCurve.VariableChange.id) C","decl":"lemma comp_id (C : VariableChange R) : comp C id = C := by\n  simp only [comp, id, add_zero, mul_zero, one_mul, mul_one, one_pow, Units.val_one]\n\n"}
{"name":"WeierstrassCurve.VariableChange.comp_left_inv","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nC : WeierstrassCurve.VariableChange R\n⊢ Eq (C.inv.comp C) WeierstrassCurve.VariableChange.id","decl":"lemma comp_left_inv (C : VariableChange R) : comp (inv C) C = id := by\n  rw [comp, id, inv]\n  ext <;> dsimp only\n  · exact C.u.inv_mul\n  · linear_combination -C.r * pow_mul_pow_eq_one 2 C.u.inv_mul\n  · linear_combination -C.s * C.u.inv_mul\n  · linear_combination (C.r * C.s - C.t) * pow_mul_pow_eq_one 3 C.u.inv_mul\n      + -C.r * C.s * pow_mul_pow_eq_one 2 C.u.inv_mul\n\n"}
{"name":"WeierstrassCurve.VariableChange.comp_assoc","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nC C' C'' : WeierstrassCurve.VariableChange R\n⊢ Eq ((C.comp C').comp C'') (C.comp (C'.comp C''))","decl":"lemma comp_assoc (C C' C'' : VariableChange R) : comp (comp C C') C'' = comp C (comp C' C'') := by\n  ext <;> simp only [comp, Units.val_mul] <;> ring1\n\n"}
{"name":"WeierstrassCurve.variableChange_a₄","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve R\nC : WeierstrassCurve.VariableChange R\n⊢ Eq (W.variableChange C).a₄ (HMul.hMul (HPow.hPow (↑(Inv.inv C.u)) 4) (HSub.hSub (HAdd.hAdd (HSub.hSub (HAdd.hAdd (HSub.hSub W.a₄ (HMul.hMul C.s W.a₃)) (HMul.hMul (HMul.hMul 2 C.r) W.a₂)) (HMul.hMul (HAdd.hAdd C.t (HMul.hMul C.r C.s)) W.a₁)) (HMul.hMul 3 (HPow.hPow C.r 2))) (HMul.hMul (HMul.hMul 2 C.s) C.t)))","decl":"/-- The Weierstrass curve over `R` induced by an admissible linear change of variables\n$(X, Y) \\mapsto (u^2X + r, u^3Y + u^2sX + t)$ for some $u \\in R^\\times$ and some $r, s, t \\in R$. -/\n@[simps]\ndef variableChange : WeierstrassCurve R where\n  a₁ := C.u⁻¹ * (W.a₁ + 2 * C.s)\n  a₂ := C.u⁻¹ ^ 2 * (W.a₂ - C.s * W.a₁ + 3 * C.r - C.s ^ 2)\n  a₃ := C.u⁻¹ ^ 3 * (W.a₃ + C.r * W.a₁ + 2 * C.t)\n  a₄ := C.u⁻¹ ^ 4 * (W.a₄ - C.s * W.a₃ + 2 * C.r * W.a₂ - (C.t + C.r * C.s) * W.a₁ + 3 * C.r ^ 2\n    - 2 * C.s * C.t)\n  a₆ := C.u⁻¹ ^ 6 * (W.a₆ + C.r * W.a₄ + C.r ^ 2 * W.a₂ + C.r ^ 3 - C.t * W.a₃ - C.t ^ 2\n    - C.r * C.t * W.a₁)\n\n"}
{"name":"WeierstrassCurve.variableChange_a₂","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve R\nC : WeierstrassCurve.VariableChange R\n⊢ Eq (W.variableChange C).a₂ (HMul.hMul (HPow.hPow (↑(Inv.inv C.u)) 2) (HSub.hSub (HAdd.hAdd (HSub.hSub W.a₂ (HMul.hMul C.s W.a₁)) (HMul.hMul 3 C.r)) (HPow.hPow C.s 2)))","decl":"/-- The Weierstrass curve over `R` induced by an admissible linear change of variables\n$(X, Y) \\mapsto (u^2X + r, u^3Y + u^2sX + t)$ for some $u \\in R^\\times$ and some $r, s, t \\in R$. -/\n@[simps]\ndef variableChange : WeierstrassCurve R where\n  a₁ := C.u⁻¹ * (W.a₁ + 2 * C.s)\n  a₂ := C.u⁻¹ ^ 2 * (W.a₂ - C.s * W.a₁ + 3 * C.r - C.s ^ 2)\n  a₃ := C.u⁻¹ ^ 3 * (W.a₃ + C.r * W.a₁ + 2 * C.t)\n  a₄ := C.u⁻¹ ^ 4 * (W.a₄ - C.s * W.a₃ + 2 * C.r * W.a₂ - (C.t + C.r * C.s) * W.a₁ + 3 * C.r ^ 2\n    - 2 * C.s * C.t)\n  a₆ := C.u⁻¹ ^ 6 * (W.a₆ + C.r * W.a₄ + C.r ^ 2 * W.a₂ + C.r ^ 3 - C.t * W.a₃ - C.t ^ 2\n    - C.r * C.t * W.a₁)\n\n"}
{"name":"WeierstrassCurve.variableChange_a₆","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve R\nC : WeierstrassCurve.VariableChange R\n⊢ Eq (W.variableChange C).a₆ (HMul.hMul (HPow.hPow (↑(Inv.inv C.u)) 6) (HSub.hSub (HSub.hSub (HSub.hSub (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd W.a₆ (HMul.hMul C.r W.a₄)) (HMul.hMul (HPow.hPow C.r 2) W.a₂)) (HPow.hPow C.r 3)) (HMul.hMul C.t W.a₃)) (HPow.hPow C.t 2)) (HMul.hMul (HMul.hMul C.r C.t) W.a₁)))","decl":"/-- The Weierstrass curve over `R` induced by an admissible linear change of variables\n$(X, Y) \\mapsto (u^2X + r, u^3Y + u^2sX + t)$ for some $u \\in R^\\times$ and some $r, s, t \\in R$. -/\n@[simps]\ndef variableChange : WeierstrassCurve R where\n  a₁ := C.u⁻¹ * (W.a₁ + 2 * C.s)\n  a₂ := C.u⁻¹ ^ 2 * (W.a₂ - C.s * W.a₁ + 3 * C.r - C.s ^ 2)\n  a₃ := C.u⁻¹ ^ 3 * (W.a₃ + C.r * W.a₁ + 2 * C.t)\n  a₄ := C.u⁻¹ ^ 4 * (W.a₄ - C.s * W.a₃ + 2 * C.r * W.a₂ - (C.t + C.r * C.s) * W.a₁ + 3 * C.r ^ 2\n    - 2 * C.s * C.t)\n  a₆ := C.u⁻¹ ^ 6 * (W.a₆ + C.r * W.a₄ + C.r ^ 2 * W.a₂ + C.r ^ 3 - C.t * W.a₃ - C.t ^ 2\n    - C.r * C.t * W.a₁)\n\n"}
{"name":"WeierstrassCurve.variableChange_a₃","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve R\nC : WeierstrassCurve.VariableChange R\n⊢ Eq (W.variableChange C).a₃ (HMul.hMul (HPow.hPow (↑(Inv.inv C.u)) 3) (HAdd.hAdd (HAdd.hAdd W.a₃ (HMul.hMul C.r W.a₁)) (HMul.hMul 2 C.t)))","decl":"/-- The Weierstrass curve over `R` induced by an admissible linear change of variables\n$(X, Y) \\mapsto (u^2X + r, u^3Y + u^2sX + t)$ for some $u \\in R^\\times$ and some $r, s, t \\in R$. -/\n@[simps]\ndef variableChange : WeierstrassCurve R where\n  a₁ := C.u⁻¹ * (W.a₁ + 2 * C.s)\n  a₂ := C.u⁻¹ ^ 2 * (W.a₂ - C.s * W.a₁ + 3 * C.r - C.s ^ 2)\n  a₃ := C.u⁻¹ ^ 3 * (W.a₃ + C.r * W.a₁ + 2 * C.t)\n  a₄ := C.u⁻¹ ^ 4 * (W.a₄ - C.s * W.a₃ + 2 * C.r * W.a₂ - (C.t + C.r * C.s) * W.a₁ + 3 * C.r ^ 2\n    - 2 * C.s * C.t)\n  a₆ := C.u⁻¹ ^ 6 * (W.a₆ + C.r * W.a₄ + C.r ^ 2 * W.a₂ + C.r ^ 3 - C.t * W.a₃ - C.t ^ 2\n    - C.r * C.t * W.a₁)\n\n"}
{"name":"WeierstrassCurve.variableChange_a₁","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve R\nC : WeierstrassCurve.VariableChange R\n⊢ Eq (W.variableChange C).a₁ (HMul.hMul (↑(Inv.inv C.u)) (HAdd.hAdd W.a₁ (HMul.hMul 2 C.s)))","decl":"/-- The Weierstrass curve over `R` induced by an admissible linear change of variables\n$(X, Y) \\mapsto (u^2X + r, u^3Y + u^2sX + t)$ for some $u \\in R^\\times$ and some $r, s, t \\in R$. -/\n@[simps]\ndef variableChange : WeierstrassCurve R where\n  a₁ := C.u⁻¹ * (W.a₁ + 2 * C.s)\n  a₂ := C.u⁻¹ ^ 2 * (W.a₂ - C.s * W.a₁ + 3 * C.r - C.s ^ 2)\n  a₃ := C.u⁻¹ ^ 3 * (W.a₃ + C.r * W.a₁ + 2 * C.t)\n  a₄ := C.u⁻¹ ^ 4 * (W.a₄ - C.s * W.a₃ + 2 * C.r * W.a₂ - (C.t + C.r * C.s) * W.a₁ + 3 * C.r ^ 2\n    - 2 * C.s * C.t)\n  a₆ := C.u⁻¹ ^ 6 * (W.a₆ + C.r * W.a₄ + C.r ^ 2 * W.a₂ + C.r ^ 3 - C.t * W.a₃ - C.t ^ 2\n    - C.r * C.t * W.a₁)\n\n"}
{"name":"WeierstrassCurve.variableChange_id","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.variableChange WeierstrassCurve.VariableChange.id) W","decl":"lemma variableChange_id : W.variableChange VariableChange.id = W := by\n  rw [VariableChange.id, variableChange, inv_one, Units.val_one]\n  ext <;> (dsimp only; ring1)\n\n"}
{"name":"WeierstrassCurve.variableChange_comp","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nC C' : WeierstrassCurve.VariableChange R\nW : WeierstrassCurve R\n⊢ Eq (W.variableChange (C.comp C')) ((W.variableChange C').variableChange C)","decl":"lemma variableChange_comp (C C' : VariableChange R) (W : WeierstrassCurve R) :\n    W.variableChange (C.comp C') = (W.variableChange C').variableChange C := by\n  simp only [VariableChange.comp, variableChange]\n  ext <;> simp only [mul_inv, Units.val_mul]\n  · linear_combination ↑C.u⁻¹ * C.s * 2 * C'.u.inv_mul\n  · linear_combination\n      C.s * (-C'.s * 2 - W.a₁) * C.u⁻¹ ^ 2 * ↑C'.u⁻¹ * C'.u.inv_mul\n        + (C.r * 3 - C.s ^ 2) * C.u⁻¹ ^ 2 * pow_mul_pow_eq_one 2 C'.u.inv_mul\n  · linear_combination\n      C.r * (C'.s * 2 + W.a₁) * C.u⁻¹ ^ 3 * ↑C'.u⁻¹ * pow_mul_pow_eq_one 2 C'.u.inv_mul\n        + C.t * 2 * C.u⁻¹ ^ 3 * pow_mul_pow_eq_one 3 C'.u.inv_mul\n  · linear_combination\n      C.s * (-W.a₃ - C'.r * W.a₁ - C'.t * 2) * C.u⁻¹ ^ 4 * C'.u⁻¹ ^ 3 * C'.u.inv_mul\n        + C.u⁻¹ ^ 4 * C'.u⁻¹ ^ 2 * (C.r * C'.r * 6 + C.r * W.a₂ * 2 - C'.s * C.r * W.a₁ * 2\n          - C'.s ^ 2 * C.r * 2) * pow_mul_pow_eq_one 2 C'.u.inv_mul\n        - C.u⁻¹ ^ 4 * ↑C'.u⁻¹ * (C.s * C'.s * C.r * 2 + C.s * C.r * W.a₁ + C'.s * C.t * 2\n          + C.t * W.a₁) * pow_mul_pow_eq_one 3 C'.u.inv_mul\n        + C.u⁻¹ ^ 4 * (C.r ^ 2 * 3 - C.s * C.t * 2) * pow_mul_pow_eq_one 4 C'.u.inv_mul\n  · linear_combination\n      C.r * C.u⁻¹ ^ 6 * C'.u⁻¹ ^ 4 * (C'.r * W.a₂ * 2 - C'.r * C'.s * W.a₁ + C'.r ^ 2 * 3 + W.a₄\n          - C'.s * C'.t * 2 - C'.s * W.a₃ - C'.t * W.a₁) * pow_mul_pow_eq_one 2 C'.u.inv_mul\n        - C.u⁻¹ ^ 6 * C'.u⁻¹ ^ 3 * C.t * (C'.r * W.a₁ + C'.t * 2 + W.a₃)\n          * pow_mul_pow_eq_one 3 C'.u.inv_mul\n        + C.r ^ 2 * C.u⁻¹ ^ 6 * C'.u⁻¹ ^ 2 * (C'.r * 3 + W.a₂ - C'.s * W.a₁ - C'.s ^ 2)\n          * pow_mul_pow_eq_one 4 C'.u.inv_mul\n        - C.r * C.t * C.u⁻¹ ^ 6 * ↑C'.u⁻¹ * (C'.s * 2 + W.a₁) * pow_mul_pow_eq_one 5 C'.u.inv_mul\n        + C.u⁻¹ ^ 6 * (C.r ^ 3 - C.t ^ 2) * pow_mul_pow_eq_one 6 C'.u.inv_mul\n\n"}
{"name":"WeierstrassCurve.variableChange_b₂","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve R\nC : WeierstrassCurve.VariableChange R\n⊢ Eq (W.variableChange C).b₂ (HMul.hMul (HPow.hPow (↑(Inv.inv C.u)) 2) (HAdd.hAdd W.b₂ (HMul.hMul 12 C.r)))","decl":"@[simp]\nlemma variableChange_b₂ : (W.variableChange C).b₂ = C.u⁻¹ ^ 2 * (W.b₂ + 12 * C.r) := by\n  simp only [b₂, variableChange_a₁, variableChange_a₂]\n  ring1\n\n"}
{"name":"WeierstrassCurve.variableChange_b₄","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve R\nC : WeierstrassCurve.VariableChange R\n⊢ Eq (W.variableChange C).b₄ (HMul.hMul (HPow.hPow (↑(Inv.inv C.u)) 4) (HAdd.hAdd (HAdd.hAdd W.b₄ (HMul.hMul C.r W.b₂)) (HMul.hMul 6 (HPow.hPow C.r 2))))","decl":"@[simp]\nlemma variableChange_b₄ :\n    (W.variableChange C).b₄ = C.u⁻¹ ^ 4 * (W.b₄ + C.r * W.b₂ + 6 * C.r ^ 2) := by\n  simp only [b₂, b₄, variableChange_a₁, variableChange_a₃, variableChange_a₄]\n  ring1\n\n"}
{"name":"WeierstrassCurve.variableChange_b₆","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve R\nC : WeierstrassCurve.VariableChange R\n⊢ Eq (W.variableChange C).b₆ (HMul.hMul (HPow.hPow (↑(Inv.inv C.u)) 6) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd W.b₆ (HMul.hMul (HMul.hMul 2 C.r) W.b₄)) (HMul.hMul (HPow.hPow C.r 2) W.b₂)) (HMul.hMul 4 (HPow.hPow C.r 3))))","decl":"@[simp]\nlemma variableChange_b₆ : (W.variableChange C).b₆ =\n    C.u⁻¹ ^ 6 * (W.b₆ + 2 * C.r * W.b₄ + C.r ^ 2 * W.b₂ + 4 * C.r ^ 3) := by\n  simp only [b₂, b₄, b₆, variableChange_a₃, variableChange_a₆]\n  ring1\n\n"}
{"name":"WeierstrassCurve.variableChange_b₈","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve R\nC : WeierstrassCurve.VariableChange R\n⊢ Eq (W.variableChange C).b₈ (HMul.hMul (HPow.hPow (↑(Inv.inv C.u)) 8) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd W.b₈ (HMul.hMul (HMul.hMul 3 C.r) W.b₆)) (HMul.hMul (HMul.hMul 3 (HPow.hPow C.r 2)) W.b₄)) (HMul.hMul (HPow.hPow C.r 3) W.b₂)) (HMul.hMul 3 (HPow.hPow C.r 4))))","decl":"@[simp]\nlemma variableChange_b₈ : (W.variableChange C).b₈ = C.u⁻¹ ^ 8 *\n    (W.b₈ + 3 * C.r * W.b₆ + 3 * C.r ^ 2 * W.b₄ + C.r ^ 3 * W.b₂ + 3 * C.r ^ 4) := by\n  simp only [b₂, b₄, b₆, b₈, variableChange_a₁, variableChange_a₂, variableChange_a₃,\n    variableChange_a₄, variableChange_a₆]\n  ring1\n\n"}
{"name":"WeierstrassCurve.variableChange_c₄","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve R\nC : WeierstrassCurve.VariableChange R\n⊢ Eq (W.variableChange C).c₄ (HMul.hMul (HPow.hPow (↑(Inv.inv C.u)) 4) W.c₄)","decl":"@[simp]\nlemma variableChange_c₄ : (W.variableChange C).c₄ = C.u⁻¹ ^ 4 * W.c₄ := by\n  simp only [c₄, variableChange_b₂, variableChange_b₄]\n  ring1\n\n"}
{"name":"WeierstrassCurve.variableChange_c₆","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve R\nC : WeierstrassCurve.VariableChange R\n⊢ Eq (W.variableChange C).c₆ (HMul.hMul (HPow.hPow (↑(Inv.inv C.u)) 6) W.c₆)","decl":"@[simp]\nlemma variableChange_c₆ : (W.variableChange C).c₆ = C.u⁻¹ ^ 6 * W.c₆ := by\n  simp only [c₆, variableChange_b₂, variableChange_b₄, variableChange_b₆]\n  ring1\n\n"}
{"name":"WeierstrassCurve.variableChange_Δ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve R\nC : WeierstrassCurve.VariableChange R\n⊢ Eq (W.variableChange C).Δ (HMul.hMul (HPow.hPow (↑(Inv.inv C.u)) 12) W.Δ)","decl":"@[simp]\nlemma variableChange_Δ : (W.variableChange C).Δ = C.u⁻¹ ^ 12 * W.Δ := by\n  simp only [b₂, b₄, b₆, b₈, Δ, variableChange_a₁, variableChange_a₂, variableChange_a₃,\n    variableChange_a₄, variableChange_a₆]\n  ring1\n\n"}
{"name":"WeierstrassCurve.instIsEllipticVariableChange","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve R\nC : WeierstrassCurve.VariableChange R\n⊢ (W.variableChange C).IsElliptic","decl":"instance : (W.variableChange C).IsElliptic := by\n  rw [isElliptic_iff, variableChange_Δ]\n  exact (C.u⁻¹.isUnit.pow 12).mul W.isUnit_Δ\n\n"}
{"name":"WeierstrassCurve.variableChange_Δ'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve R\nC : WeierstrassCurve.VariableChange R\ninst✝ : W.IsElliptic\n⊢ Eq (W.variableChange C).Δ' (HMul.hMul (HPow.hPow (Inv.inv C.u) 12) W.Δ')","decl":"set_option linter.docPrime false in\n@[simp]\nlemma variableChange_Δ' : (W.variableChange C).Δ' = C.u⁻¹ ^ 12 * W.Δ' := by\n  simp_rw [Units.ext_iff, Units.val_mul, coe_Δ', variableChange_Δ, Units.val_pow_eq_pow_val]\n\n"}
{"name":"WeierstrassCurve.coe_variableChange_Δ'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve R\nC : WeierstrassCurve.VariableChange R\ninst✝ : W.IsElliptic\n⊢ Eq (↑(W.variableChange C).Δ') (HMul.hMul (HPow.hPow (↑(Inv.inv C.u)) 12) ↑W.Δ')","decl":"set_option linter.docPrime false in\nlemma coe_variableChange_Δ' : ((W.variableChange C).Δ' : R) = C.u⁻¹ ^ 12 * W.Δ' := by\n  simp_rw [coe_Δ', variableChange_Δ]\n\n"}
{"name":"WeierstrassCurve.inv_variableChange_Δ'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve R\nC : WeierstrassCurve.VariableChange R\ninst✝ : W.IsElliptic\n⊢ Eq (Inv.inv (W.variableChange C).Δ') (HMul.hMul (HPow.hPow C.u 12) (Inv.inv W.Δ'))","decl":"set_option linter.docPrime false in\nlemma inv_variableChange_Δ' : (W.variableChange C).Δ'⁻¹ = C.u ^ 12 * W.Δ'⁻¹ := by\n  rw [variableChange_Δ', mul_inv, inv_pow, inv_inv]\n\n"}
{"name":"WeierstrassCurve.coe_inv_variableChange_Δ'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve R\nC : WeierstrassCurve.VariableChange R\ninst✝ : W.IsElliptic\n⊢ Eq (↑(Inv.inv (W.variableChange C).Δ')) (HMul.hMul (HPow.hPow (↑C.u) 12) ↑(Inv.inv W.Δ'))","decl":"set_option linter.docPrime false in\nlemma coe_inv_variableChange_Δ' : (↑(W.variableChange C).Δ'⁻¹ : R) = C.u ^ 12 * W.Δ'⁻¹ := by\n  rw [inv_variableChange_Δ', Units.val_mul, Units.val_pow_eq_pow_val]\n\n"}
{"name":"WeierstrassCurve.variableChange_j","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve R\nC : WeierstrassCurve.VariableChange R\ninst✝ : W.IsElliptic\n⊢ Eq (W.variableChange C).j W.j","decl":"@[simp]\nlemma variableChange_j : (W.variableChange C).j = W.j := by\n  rw [j, coe_inv_variableChange_Δ', variableChange_c₄, j, mul_pow, ← pow_mul, ← mul_assoc,\n    mul_right_comm (C.u.val ^ 12), ← mul_pow, C.u.mul_inv, one_pow, one_mul]\n\n"}
{"name":"WeierstrassCurve.VariableChange.map_r","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nA : Type v\ninst✝ : CommRing A\nφ : RingHom R A\nC : WeierstrassCurve.VariableChange R\n⊢ Eq (WeierstrassCurve.VariableChange.map φ C).r (φ C.r)","decl":"/-- The change of variables mapped over a ring homomorphism `φ : R →+* A`. -/\n@[simps]\ndef map : VariableChange A :=\n  ⟨Units.map φ C.u, φ C.r, φ C.s, φ C.t⟩\n\n"}
{"name":"WeierstrassCurve.VariableChange.map_t","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nA : Type v\ninst✝ : CommRing A\nφ : RingHom R A\nC : WeierstrassCurve.VariableChange R\n⊢ Eq (WeierstrassCurve.VariableChange.map φ C).t (φ C.t)","decl":"/-- The change of variables mapped over a ring homomorphism `φ : R →+* A`. -/\n@[simps]\ndef map : VariableChange A :=\n  ⟨Units.map φ C.u, φ C.r, φ C.s, φ C.t⟩\n\n"}
{"name":"WeierstrassCurve.VariableChange.map_s","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nA : Type v\ninst✝ : CommRing A\nφ : RingHom R A\nC : WeierstrassCurve.VariableChange R\n⊢ Eq (WeierstrassCurve.VariableChange.map φ C).s (φ C.s)","decl":"/-- The change of variables mapped over a ring homomorphism `φ : R →+* A`. -/\n@[simps]\ndef map : VariableChange A :=\n  ⟨Units.map φ C.u, φ C.r, φ C.s, φ C.t⟩\n\n"}
{"name":"WeierstrassCurve.VariableChange.map_u","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nA : Type v\ninst✝ : CommRing A\nφ : RingHom R A\nC : WeierstrassCurve.VariableChange R\n⊢ Eq (WeierstrassCurve.VariableChange.map φ C).u ((Units.map ↑φ) C.u)","decl":"/-- The change of variables mapped over a ring homomorphism `φ : R →+* A`. -/\n@[simps]\ndef map : VariableChange A :=\n  ⟨Units.map φ C.u, φ C.r, φ C.s, φ C.t⟩\n\n"}
{"name":"WeierstrassCurve.VariableChange.map_id","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝ : CommRing R\nC : WeierstrassCurve.VariableChange R\n⊢ Eq (WeierstrassCurve.VariableChange.map (RingHom.id R) C) C","decl":"@[simp]\nlemma map_id : C.map (RingHom.id R) = C :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.VariableChange.map_map","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝² : CommRing R\nC : WeierstrassCurve.VariableChange R\nA : Type v\ninst✝¹ : CommRing A\nφ : RingHom R A\nB : Type w\ninst✝ : CommRing B\nψ : RingHom A B\n⊢ Eq (WeierstrassCurve.VariableChange.map ψ (WeierstrassCurve.VariableChange.map φ C)) (WeierstrassCurve.VariableChange.map (ψ.comp φ) C)","decl":"lemma map_map {A : Type v} [CommRing A] (φ : R →+* A) {B : Type w} [CommRing B] (ψ : A →+* B) :\n    (C.map φ).map ψ = C.map (ψ.comp φ) :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.VariableChange.map_baseChange","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝¹⁰ : CommRing R\nC : WeierstrassCurve.VariableChange R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type v\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type w\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nψ : AlgHom S A B\n⊢ Eq (WeierstrassCurve.VariableChange.map (↑ψ) (WeierstrassCurve.VariableChange.baseChange A C)) (WeierstrassCurve.VariableChange.baseChange B C)","decl":"@[simp]\nlemma map_baseChange {S : Type s} [CommRing S] [Algebra R S] {A : Type v} [CommRing A] [Algebra R A]\n    [Algebra S A] [IsScalarTower R S A] {B : Type w} [CommRing B] [Algebra R B] [Algebra S B]\n    [IsScalarTower R S B] (ψ : A →ₐ[S] B) : (C.baseChange A).map ψ = C.baseChange B :=\n  congr_arg C.map <| ψ.comp_algebraMap_of_tower R\n\n"}
{"name":"WeierstrassCurve.VariableChange.map_injective","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nA : Type v\ninst✝ : CommRing A\nφ : RingHom R A\nhφ : Function.Injective ⇑φ\n⊢ Function.Injective (WeierstrassCurve.VariableChange.map φ)","decl":"lemma map_injective {φ : R →+* A} (hφ : Function.Injective φ) :\n    Function.Injective <| map (φ := φ) := fun _ _ h => by\n  rcases mk.inj h with ⟨h, _, _, _⟩\n  replace h := (Units.mk.inj h).left\n  ext <;> apply_fun _ using hφ <;> assumption\n\n"}
{"name":"WeierstrassCurve.map_variableChange","module":"Mathlib.AlgebraicGeometry.EllipticCurve.VariableChange","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve R\nA : Type v\ninst✝ : CommRing A\nφ : RingHom R A\nC : WeierstrassCurve.VariableChange R\n⊢ Eq ((W.map φ).variableChange (WeierstrassCurve.VariableChange.map φ C)) ((W.variableChange C).map φ)","decl":"lemma map_variableChange (C : VariableChange R) :\n    (W.map φ).variableChange (C.map φ) = (W.variableChange C).map φ := by\n  simp only [map, variableChange, VariableChange.map]\n  ext <;> map_simp <;> simp only [Units.coe_map, Units.coe_map_inv, MonoidHom.coe_coe]\n\n"}
