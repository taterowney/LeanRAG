{"name":"instIsManifoldOfNatWithTopENatOfMinSmoothness","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝⁷ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝⁶ : TopologicalSpace H\nE : Type u_3\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nn : Nat\ninst✝¹ : n.AtLeastTwo\ninst✝ : IsManifold I (minSmoothness 𝕜 (OfNat.ofNat n)) M\n⊢ IsManifold I (OfNat.ofNat n) M","decl":"instance {n : ℕ} [n.AtLeastTwo] [IsManifold I (minSmoothness 𝕜 (ofNat(n))) M] :\n    IsManifold I (ofNat(n)) M :=\n  IsManifold.of_le (n := minSmoothness 𝕜 n) le_minSmoothness\n\n"}
{"name":"instIsManifoldOfNatWithTopENatOfMinSmoothness_1","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝⁵ : TopologicalSpace H\nE : Type u_3\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I (minSmoothness 𝕜 1) M\n⊢ IsManifold I 1 M","decl":"instance [IsManifold I (minSmoothness 𝕜 1) M] :\n    IsManifold I 1 M :=\n  IsManifold.of_le (n := minSmoothness 𝕜 1) le_minSmoothness\n\n"}
{"name":"instIsManifoldMinSmoothnessOfNatWithTopENat","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝⁵ : TopologicalSpace H\nE : Type u_3\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I (minSmoothness 𝕜 3) M\n⊢ IsManifold I (minSmoothness 𝕜 2) M","decl":"instance [IsManifold I (minSmoothness 𝕜 3) M] :\n    IsManifold I (minSmoothness 𝕜 2) M :=\n  IsManifold.of_le (n := minSmoothness 𝕜 3) (minSmoothness_monotone (by norm_cast))\n\n"}
{"name":"instIsManifoldMinSmoothnessOfNatWithTopENat_1","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝⁵ : TopologicalSpace H\nE : Type u_3\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I (minSmoothness 𝕜 2) M\n⊢ IsManifold I (minSmoothness 𝕜 1) M","decl":"instance [IsManifold I (minSmoothness 𝕜 2) M] :\n    IsManifold I (minSmoothness 𝕜 1) M :=\n  IsManifold.of_le (n := minSmoothness 𝕜 2) (minSmoothness_monotone (by norm_cast))\n\n"}
{"name":"VectorField.mpullbackWithin_apply","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝⁹ : TopologicalSpace H\nE : Type u_3\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nH' : Type u_5\ninst✝⁴ : TopologicalSpace H'\nE' : Type u_6\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\nf : M → M'\ns : Set M\nx : M\nV : (x : M') → TangentSpace I' x\n⊢ Eq (VectorField.mpullbackWithin I I' f V s x) ((mfderivWithin I I' f s x).inverse (V (f x)))","decl":"lemma mpullbackWithin_apply :\n    mpullbackWithin I I' f V s x = (mfderivWithin I I' f s x).inverse (V (f x)) := rfl\n\n"}
{"name":"VectorField.mpullbackWithin_smul_apply","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝⁹ : TopologicalSpace H\nE : Type u_3\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nH' : Type u_5\ninst✝⁴ : TopologicalSpace H'\nE' : Type u_6\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\nf : M → M'\ns : Set M\nx : M\nV : (x : M') → TangentSpace I' x\nc : 𝕜\n⊢ Eq (VectorField.mpullbackWithin I I' f (HSMul.hSMul c V) s x) (HSMul.hSMul c (VectorField.mpullbackWithin I I' f V s x))","decl":"lemma mpullbackWithin_smul_apply :\n    mpullbackWithin I I' f (c • V) s x = c • mpullbackWithin I I' f V s x := by\n  simp [mpullbackWithin_apply]\n\n"}
{"name":"VectorField.mpullbackWithin_smul","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝⁹ : TopologicalSpace H\nE : Type u_3\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nH' : Type u_5\ninst✝⁴ : TopologicalSpace H'\nE' : Type u_6\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\nf : M → M'\ns : Set M\nV : (x : M') → TangentSpace I' x\nc : 𝕜\n⊢ Eq (VectorField.mpullbackWithin I I' f (HSMul.hSMul c V) s) (HSMul.hSMul c (VectorField.mpullbackWithin I I' f V s))","decl":"lemma mpullbackWithin_smul :\n    mpullbackWithin I I' f (c • V) s = c • mpullbackWithin I I' f V s := by\n  ext x\n  simp [mpullbackWithin_apply]\n\n"}
{"name":"VectorField.mpullbackWithin_add_apply","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝⁹ : TopologicalSpace H\nE : Type u_3\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nH' : Type u_5\ninst✝⁴ : TopologicalSpace H'\nE' : Type u_6\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\nf : M → M'\ns : Set M\nx : M\nV V₁ : (x : M') → TangentSpace I' x\n⊢ Eq (VectorField.mpullbackWithin I I' f (HAdd.hAdd V V₁) s x) (HAdd.hAdd (VectorField.mpullbackWithin I I' f V s x) (VectorField.mpullbackWithin I I' f V₁ s x))","decl":"lemma mpullbackWithin_add_apply :\n    mpullbackWithin I I' f (V + V₁) s x =\n      mpullbackWithin I I' f V s x + mpullbackWithin I I' f V₁ s x := by\n  simp [mpullbackWithin_apply]\n\n"}
{"name":"VectorField.mpullbackWithin_add","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝⁹ : TopologicalSpace H\nE : Type u_3\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nH' : Type u_5\ninst✝⁴ : TopologicalSpace H'\nE' : Type u_6\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\nf : M → M'\ns : Set M\nV V₁ : (x : M') → TangentSpace I' x\n⊢ Eq (VectorField.mpullbackWithin I I' f (HAdd.hAdd V V₁) s) (HAdd.hAdd (VectorField.mpullbackWithin I I' f V s) (VectorField.mpullbackWithin I I' f V₁ s))","decl":"lemma mpullbackWithin_add :\n    mpullbackWithin I I' f (V + V₁) s =\n      mpullbackWithin I I' f V s + mpullbackWithin I I' f V₁ s := by\n  ext x\n  simp [mpullbackWithin_apply]\n\n"}
{"name":"VectorField.mpullbackWithin_neg_apply","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝⁹ : TopologicalSpace H\nE : Type u_3\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nH' : Type u_5\ninst✝⁴ : TopologicalSpace H'\nE' : Type u_6\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\nf : M → M'\ns : Set M\nx : M\nV : (x : M') → TangentSpace I' x\n⊢ Eq (VectorField.mpullbackWithin I I' f (Neg.neg V) s x) (Neg.neg (VectorField.mpullbackWithin I I' f V s x))","decl":"lemma mpullbackWithin_neg_apply :\n    mpullbackWithin I I' f (-V) s x = - mpullbackWithin I I' f V s x := by\n  simp [mpullbackWithin_apply]\n\n"}
{"name":"VectorField.mpullbackWithin_neg","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝⁹ : TopologicalSpace H\nE : Type u_3\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nH' : Type u_5\ninst✝⁴ : TopologicalSpace H'\nE' : Type u_6\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\nf : M → M'\ns : Set M\nV : (x : M') → TangentSpace I' x\n⊢ Eq (VectorField.mpullbackWithin I I' f (Neg.neg V) s) (Neg.neg (VectorField.mpullbackWithin I I' f V s))","decl":"lemma mpullbackWithin_neg :\n    mpullbackWithin I I' f (-V) s = - mpullbackWithin I I' f V s := by\n  ext x\n  simp [mpullbackWithin_apply]\n\n"}
{"name":"VectorField.mpullbackWithin_id","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝⁵ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝⁴ : TopologicalSpace H\nE : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nx : M\nV : (x : M) → TangentSpace I x\nh : UniqueMDiffWithinAt I s x\n⊢ Eq (VectorField.mpullbackWithin I I id V s x) (V x)","decl":"lemma mpullbackWithin_id {V : Π (x : M), TangentSpace I x} (h : UniqueMDiffWithinAt I s x) :\n    mpullbackWithin I I id V s x = V x := by\n  simp [mpullbackWithin_apply, mfderivWithin_id h]\n\n"}
{"name":"VectorField.mpullback_apply","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝⁹ : TopologicalSpace H\nE : Type u_3\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nH' : Type u_5\ninst✝⁴ : TopologicalSpace H'\nE' : Type u_6\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\nf : M → M'\nx : M\nV : (x : M') → TangentSpace I' x\n⊢ Eq (VectorField.mpullback I I' f V x) ((mfderiv I I' f x).inverse (V (f x)))","decl":"lemma mpullback_apply :\n    mpullback I I' f V x = (mfderiv I I' f x).inverse (V (f x)) := rfl\n\n"}
{"name":"VectorField.mpullback_smul_apply","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝⁹ : TopologicalSpace H\nE : Type u_3\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nH' : Type u_5\ninst✝⁴ : TopologicalSpace H'\nE' : Type u_6\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\nf : M → M'\nx : M\nV : (x : M') → TangentSpace I' x\nc : 𝕜\n⊢ Eq (VectorField.mpullback I I' f (HSMul.hSMul c V) x) (HSMul.hSMul c (VectorField.mpullback I I' f V x))","decl":"lemma mpullback_smul_apply :\n    mpullback I I' f (c • V) x = c • mpullback I I' f V x := by\n  simp [mpullback]\n\n"}
{"name":"VectorField.mpullback_smul","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝⁹ : TopologicalSpace H\nE : Type u_3\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nH' : Type u_5\ninst✝⁴ : TopologicalSpace H'\nE' : Type u_6\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\nf : M → M'\nV : (x : M') → TangentSpace I' x\nc : 𝕜\n⊢ Eq (VectorField.mpullback I I' f (HSMul.hSMul c V)) (HSMul.hSMul c (VectorField.mpullback I I' f V))","decl":"lemma mpullback_smul :\n    mpullback I I' f (c • V) = c • mpullback I I' f V := by\n  ext x\n  simp [mpullback_apply]\n\n"}
{"name":"VectorField.mpullback_add_apply","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝⁹ : TopologicalSpace H\nE : Type u_3\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nH' : Type u_5\ninst✝⁴ : TopologicalSpace H'\nE' : Type u_6\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\nf : M → M'\nx : M\nV V₁ : (x : M') → TangentSpace I' x\n⊢ Eq (VectorField.mpullback I I' f (HAdd.hAdd V V₁) x) (HAdd.hAdd (VectorField.mpullback I I' f V x) (VectorField.mpullback I I' f V₁ x))","decl":"lemma mpullback_add_apply :\n    mpullback I I' f (V + V₁) x = mpullback I I' f V x + mpullback I I' f V₁ x := by\n  simp [mpullback_apply]\n\n"}
{"name":"VectorField.mpullback_add","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝⁹ : TopologicalSpace H\nE : Type u_3\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nH' : Type u_5\ninst✝⁴ : TopologicalSpace H'\nE' : Type u_6\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\nf : M → M'\nV V₁ : (x : M') → TangentSpace I' x\n⊢ Eq (VectorField.mpullback I I' f (HAdd.hAdd V V₁)) (HAdd.hAdd (VectorField.mpullback I I' f V) (VectorField.mpullback I I' f V₁))","decl":"lemma mpullback_add :\n    mpullback I I' f (V + V₁) = mpullback I I' f V + mpullback I I' f V₁ := by\n  ext x\n  simp [mpullback_apply]\n\n"}
{"name":"VectorField.mpullback_neg_apply","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝⁹ : TopologicalSpace H\nE : Type u_3\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nH' : Type u_5\ninst✝⁴ : TopologicalSpace H'\nE' : Type u_6\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\nf : M → M'\nx : M\nV : (x : M') → TangentSpace I' x\n⊢ Eq (VectorField.mpullback I I' f (Neg.neg V) x) (Neg.neg (VectorField.mpullback I I' f V x))","decl":"lemma mpullback_neg_apply :\n    mpullback I I' f (-V) x = - mpullback I I' f V x := by\n  simp [mpullback_apply]\n\n"}
{"name":"VectorField.mpullback_neg","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝⁹ : TopologicalSpace H\nE : Type u_3\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nH' : Type u_5\ninst✝⁴ : TopologicalSpace H'\nE' : Type u_6\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\nf : M → M'\nV : (x : M') → TangentSpace I' x\n⊢ Eq (VectorField.mpullback I I' f (Neg.neg V)) (Neg.neg (VectorField.mpullback I I' f V))","decl":"lemma mpullback_neg :\n    mpullback I I' f (-V) = - mpullback I I' f V := by\n  ext x\n  simp [mpullback_apply]\n\n"}
{"name":"VectorField.mpullbackWithin_univ","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝⁹ : TopologicalSpace H\nE : Type u_3\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nH' : Type u_5\ninst✝⁴ : TopologicalSpace H'\nE' : Type u_6\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\nf : M → M'\nV : (x : M') → TangentSpace I' x\n⊢ Eq (VectorField.mpullbackWithin I I' f V Set.univ) (VectorField.mpullback I I' f V)","decl":"@[simp] lemma mpullbackWithin_univ : mpullbackWithin I I' f V univ = mpullback I I' f V := by\n  ext x\n  simp [mpullback_apply, mpullbackWithin_apply]\n\n"}
{"name":"VectorField.mpullbackWithin_eq_pullbackWithin","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nE' : Type u_6\ninst✝¹ : NormedAddCommGroup E'\ninst✝ : NormedSpace 𝕜 E'\nf : E → E'\nV : E' → E'\ns : Set E\n⊢ Eq (VectorField.mpullbackWithin (modelWithCornersSelf 𝕜 E) (modelWithCornersSelf 𝕜 E') f V s) (VectorField.pullbackWithin 𝕜 f V s)","decl":"lemma mpullbackWithin_eq_pullbackWithin {f : E → E'} {V : E' → E'} {s : Set E} :\n    mpullbackWithin 𝓘(𝕜, E) 𝓘(𝕜, E') f V s = pullbackWithin 𝕜 f V s := by\n  ext x\n  simp only [mpullbackWithin, mfderivWithin_eq_fderivWithin, pullbackWithin]\n  rfl\n\n"}
{"name":"VectorField.mpullback_eq_pullback","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nE' : Type u_6\ninst✝¹ : NormedAddCommGroup E'\ninst✝ : NormedSpace 𝕜 E'\nf : E → E'\nV : E' → E'\n⊢ Eq (VectorField.mpullback (modelWithCornersSelf 𝕜 E) (modelWithCornersSelf 𝕜 E') f V) (VectorField.pullback 𝕜 f V)","decl":"lemma mpullback_eq_pullback {f : E → E'} {V : E' → E'} :\n    mpullback 𝓘(𝕜, E) 𝓘(𝕜, E') f V = pullback 𝕜 f V := by\n  simp only [← mpullbackWithin_univ, ← pullbackWithin_univ, mpullbackWithin_eq_pullbackWithin]\n\n"}
{"name":"VectorField.mpullback_id","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝⁵ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝⁴ : TopologicalSpace H\nE : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nV : (x : M) → TangentSpace I x\n⊢ Eq (VectorField.mpullback I I id V) V","decl":"@[simp] lemma mpullback_id {V : Π (x : M), TangentSpace I x} : mpullback I I id V = V := by\n  ext x\n  simp [mpullback]\n\n"}
{"name":"MDifferentiableWithinAt.mpullbackWithin_vectorField_inter","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹³ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝¹² : TopologicalSpace H\nE : Type u_3\ninst✝¹¹ : NormedAddCommGroup E\ninst✝¹⁰ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁹ : TopologicalSpace M\ninst✝⁸ : ChartedSpace H M\nH' : Type u_5\ninst✝⁷ : TopologicalSpace H'\nE' : Type u_6\ninst✝⁶ : NormedAddCommGroup E'\ninst✝⁵ : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝⁴ : TopologicalSpace M'\ninst✝³ : ChartedSpace H' M'\nf : M → M'\ns : Set M\nx₀ : M\nV : (x : M') → TangentSpace I' x\nn : WithTop ENat\nt : Set M'\ninst✝² : IsManifold I 2 M\ninst✝¹ : IsManifold I' 2 M'\ninst✝ : CompleteSpace E\nhV : MDifferentiableWithinAt I' I'.tangent (fun y => { proj := y, snd := V y }) t (f x₀)\nhf : ContMDiffWithinAt I I' n f s x₀\nhf' : (mfderivWithin I I' f s x₀).IsInvertible\nhx₀ : Membership.mem s x₀\nhs : UniqueMDiffOn I s\nhmn : LE.le 2 n\n⊢ MDifferentiableWithinAt I I.tangent (fun y => { proj := y, snd := VectorField.mpullbackWithin I I' f V s y }) (Inter.inter s (Set.preimage f t)) x₀","decl":"/-- The pullback of a differentiable vector field by a `C^n` function with `2 ≤ n` is\ndifferentiable. Version within a set at a point. -/\nprotected lemma _root_.MDifferentiableWithinAt.mpullbackWithin_vectorField_inter\n    (hV : MDifferentiableWithinAt I' I'.tangent\n      (fun (y : M') ↦ (V y : TangentBundle I' M')) t (f x₀))\n    (hf : ContMDiffWithinAt I I' n f s x₀) (hf' : (mfderivWithin I I' f s x₀).IsInvertible)\n    (hx₀ : x₀ ∈ s) (hs : UniqueMDiffOn I s) (hmn : 2 ≤ n) :\n    MDifferentiableWithinAt I I.tangent\n      (fun (y : M) ↦ (mpullbackWithin I I' f V s y : TangentBundle I M)) (s ∩ f ⁻¹' t) x₀ := by\n  /- We want to apply the theorem `MDifferentiableWithinAt.clm_apply_of_inCoordinates`,\n  stating that applying linear maps to vector fields gives a smooth result when the linear map and\n  the vector field are smooth. This theorem is general, we will apply it to\n  `b₁ = f`, `b₂ = id`, `v = V ∘ f`, `ϕ = fun x ↦ (mfderivWithin I I' f s x).inverse`-/\n  let b₁ := f\n  let b₂ : M → M := id\n  let v : Π (x : M), TangentSpace I' (f x) := V ∘ f\n  let ϕ : Π (x : M), TangentSpace I' (f x) →L[𝕜] TangentSpace I x :=\n    fun x ↦ (mfderivWithin I I' f s x).inverse\n  have hv : MDifferentiableWithinAt I I'.tangent\n      (fun x ↦ (v x : TangentBundle I' M')) (s ∩ f ⁻¹' t) x₀ := by\n    apply hV.comp x₀ ((hf.mdifferentiableWithinAt (one_le_two.trans hmn)).mono inter_subset_left)\n    exact MapsTo.mono_left (mapsTo_preimage _ _) inter_subset_right\n  /- The only nontrivial fact, from which the conclusion follows, is\n  that `ϕ` depends smoothly on `x`. -/\n  suffices hϕ : MDifferentiableWithinAt I 𝓘(𝕜, E' →L[𝕜] E)\n      (fun (x : M) ↦ ContinuousLinearMap.inCoordinates\n        E' (TangentSpace I' (M := M')) E (TangentSpace I (M := M))\n        (b₁ x₀) (b₁ x) (b₂ x₀) (b₂ x) (ϕ x)) s x₀ from\n    MDifferentiableWithinAt.clm_apply_of_inCoordinates (hϕ.mono inter_subset_left)\n      hv mdifferentiableWithinAt_id\n  /- To prove that `ϕ` depends smoothly on `x`, we use that the derivative depends smoothly on `x`\n  (this is `ContMDiffWithinAt.mfderivWithin_const`), and that taking the inverse is a smooth\n  operation at an invertible map. -/\n  -- the derivative in coordinates depends smoothly on the point\n  have : MDifferentiableWithinAt I 𝓘(𝕜, E →L[𝕜] E')\n      (fun (x : M) ↦ ContinuousLinearMap.inCoordinates\n        E (TangentSpace I (M := M)) E' (TangentSpace I' (M := M'))\n        x₀ x (f x₀) (f x) (mfderivWithin I I' f s x)) s x₀ :=\n    ((hf.of_le hmn).mfderivWithin_const le_rfl hx₀ hs).mdifferentiableWithinAt le_rfl\n  -- therefore, its inverse in coordinates also depends smoothly on the point\n  have : MDifferentiableWithinAt I 𝓘(𝕜, E' →L[𝕜] E)\n      (ContinuousLinearMap.inverse ∘ (fun (x : M) ↦ ContinuousLinearMap.inCoordinates\n        E (TangentSpace I (M := M)) E' (TangentSpace I' (M := M'))\n        x₀ x (f x₀) (f x) (mfderivWithin I I' f s x))) s x₀ := by\n    apply MDifferentiableAt.comp_mdifferentiableWithinAt _ _ this\n    apply ContMDiffAt.mdifferentiableAt _ le_rfl\n    apply ContDiffAt.contMDiffAt\n    apply IsInvertible.contDiffAt_map_inverse\n    rw [inCoordinates_eq (FiberBundle.mem_baseSet_trivializationAt' x₀)\n      (FiberBundle.mem_baseSet_trivializationAt' (f x₀))]\n    exact isInvertible_equiv.comp (hf'.comp isInvertible_equiv)\n  -- the inverse in coordinates coincides with the in-coordinate version of the inverse,\n  -- therefore the previous point gives the conclusion\n  apply this.congr_of_eventuallyEq_of_mem _ hx₀\n  have A : (trivializationAt E (TangentSpace I) x₀).baseSet ∈ 𝓝[s] x₀ := by\n    apply nhdsWithin_le_nhds\n    apply (trivializationAt _ _ _).open_baseSet.mem_nhds\n    exact FiberBundle.mem_baseSet_trivializationAt' _\n  have B : f ⁻¹' (trivializationAt E' (TangentSpace I') (f x₀)).baseSet ∈ 𝓝[s] x₀ := by\n    apply hf.continuousWithinAt.preimage_mem_nhdsWithin\n    apply (trivializationAt _ _ _).open_baseSet.mem_nhds\n    exact FiberBundle.mem_baseSet_trivializationAt' _\n  filter_upwards [A, B] with x hx h'x\n  simp only [Function.comp_apply]\n  rw [inCoordinates_eq hx h'x, inCoordinates_eq h'x (by exact hx)]\n  simp only [inverse_equiv_comp, inverse_comp_equiv, ContinuousLinearEquiv.symm_symm, ϕ]\n  rfl\n\n"}
{"name":"MDifferentiableWithinAt.mpullbackWithin_vectorField_inter_of_eq","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹³ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝¹² : TopologicalSpace H\nE : Type u_3\ninst✝¹¹ : NormedAddCommGroup E\ninst✝¹⁰ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁹ : TopologicalSpace M\ninst✝⁸ : ChartedSpace H M\nH' : Type u_5\ninst✝⁷ : TopologicalSpace H'\nE' : Type u_6\ninst✝⁶ : NormedAddCommGroup E'\ninst✝⁵ : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝⁴ : TopologicalSpace M'\ninst✝³ : ChartedSpace H' M'\nf : M → M'\ns : Set M\nx₀ : M\nV : (x : M') → TangentSpace I' x\nn : WithTop ENat\nt : Set M'\ny₀ : M'\ninst✝² : IsManifold I 2 M\ninst✝¹ : IsManifold I' 2 M'\ninst✝ : CompleteSpace E\nhV : MDifferentiableWithinAt I' I'.tangent (fun y => { proj := y, snd := V y }) t y₀\nhf : ContMDiffWithinAt I I' n f s x₀\nhf' : (mfderivWithin I I' f s x₀).IsInvertible\nhx₀ : Membership.mem s x₀\nhs : UniqueMDiffOn I s\nhmn : LE.le 2 n\nh : Eq y₀ (f x₀)\n⊢ MDifferentiableWithinAt I I.tangent (fun y => { proj := y, snd := VectorField.mpullbackWithin I I' f V s y }) (Inter.inter s (Set.preimage f t)) x₀","decl":"lemma _root_.MDifferentiableWithinAt.mpullbackWithin_vectorField_inter_of_eq\n    (hV : MDifferentiableWithinAt I' I'.tangent\n      (fun (y : M') ↦ (V y : TangentBundle I' M')) t y₀)\n    (hf : ContMDiffWithinAt I I' n f s x₀) (hf' : (mfderivWithin I I' f s x₀).IsInvertible)\n    (hx₀ : x₀ ∈ s) (hs : UniqueMDiffOn I s) (hmn : 2 ≤ n) (h : y₀ = f x₀) :\n    MDifferentiableWithinAt I I.tangent\n      (fun (y : M) ↦ (mpullbackWithin I I' f V s y : TangentBundle I M)) (s ∩ f⁻¹' t) x₀ := by\n  subst h\n  exact hV.mpullbackWithin_vectorField_inter hf hf' hx₀ hs hmn\n\n"}
{"name":"MDifferentiableOn.mpullbackWithin_vectorField_inter","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹³ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝¹² : TopologicalSpace H\nE : Type u_3\ninst✝¹¹ : NormedAddCommGroup E\ninst✝¹⁰ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁹ : TopologicalSpace M\ninst✝⁸ : ChartedSpace H M\nH' : Type u_5\ninst✝⁷ : TopologicalSpace H'\nE' : Type u_6\ninst✝⁶ : NormedAddCommGroup E'\ninst✝⁵ : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝⁴ : TopologicalSpace M'\ninst✝³ : ChartedSpace H' M'\nf : M → M'\ns : Set M\nV : (x : M') → TangentSpace I' x\nn : WithTop ENat\nt : Set M'\ninst✝² : IsManifold I 2 M\ninst✝¹ : IsManifold I' 2 M'\ninst✝ : CompleteSpace E\nhV : MDifferentiableOn I' I'.tangent (fun y => { proj := y, snd := V y }) t\nhf : ContMDiffOn I I' n f s\nhf' : ∀ (x : M), Membership.mem (Inter.inter s (Set.preimage f t)) x → (mfderivWithin I I' f s x).IsInvertible\nhs : UniqueMDiffOn I s\nhmn : LE.le 2 n\n⊢ MDifferentiableOn I I.tangent (fun y => { proj := y, snd := VectorField.mpullbackWithin I I' f V s y }) (Inter.inter s (Set.preimage f t))","decl":"/-- The pullback of a differentiable vector field by a `C^n` function with `2 ≤ n` is\ndifferentiable. Version on a set. -/\nprotected lemma _root_.MDifferentiableOn.mpullbackWithin_vectorField_inter\n    (hV : MDifferentiableOn I' I'.tangent (fun (y : M') ↦ (V y : TangentBundle I' M')) t)\n    (hf : ContMDiffOn I I' n f s) (hf' : ∀ x ∈ s ∩ f ⁻¹' t, (mfderivWithin I I' f s x).IsInvertible)\n    (hs : UniqueMDiffOn I s) (hmn : 2 ≤ n) :\n    MDifferentiableOn I I.tangent\n      (fun (y : M) ↦ (mpullbackWithin I I' f V s y : TangentBundle I M)) (s ∩ f ⁻¹' t) :=\n  fun _ hx₀ ↦ MDifferentiableWithinAt.mpullbackWithin_vectorField_inter\n    (hV _ hx₀.2) (hf _ hx₀.1) (hf' _ hx₀) hx₀.1 hs hmn\n\n"}
{"name":"MDifferentiableWithinAt.mpullback_vectorField_preimage","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹³ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝¹² : TopologicalSpace H\nE : Type u_3\ninst✝¹¹ : NormedAddCommGroup E\ninst✝¹⁰ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁹ : TopologicalSpace M\ninst✝⁸ : ChartedSpace H M\nH' : Type u_5\ninst✝⁷ : TopologicalSpace H'\nE' : Type u_6\ninst✝⁶ : NormedAddCommGroup E'\ninst✝⁵ : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝⁴ : TopologicalSpace M'\ninst✝³ : ChartedSpace H' M'\nf : M → M'\nx₀ : M\nV : (x : M') → TangentSpace I' x\nn : WithTop ENat\nt : Set M'\ninst✝² : IsManifold I 2 M\ninst✝¹ : IsManifold I' 2 M'\ninst✝ : CompleteSpace E\nhV : MDifferentiableWithinAt I' I'.tangent (fun y => { proj := y, snd := V y }) t (f x₀)\nhf : ContMDiffAt I I' n f x₀\nhf' : (mfderiv I I' f x₀).IsInvertible\nhmn : LE.le 2 n\n⊢ MDifferentiableWithinAt I I.tangent (fun y => { proj := y, snd := VectorField.mpullback I I' f V y }) (Set.preimage f t) x₀","decl":"/-- The pullback of a differentiable vector field by a `C^n` function with `2 ≤ n` is\ndifferentiable. Version within a set at a point, but with full pullback. -/\nprotected lemma _root_.MDifferentiableWithinAt.mpullback_vectorField_preimage\n    (hV : MDifferentiableWithinAt I' I'.tangent\n      (fun (y : M') ↦ (V y : TangentBundle I' M')) t (f x₀))\n    (hf : ContMDiffAt I I' n f x₀) (hf' : (mfderiv I I' f x₀).IsInvertible) (hmn : 2 ≤ n) :\n    MDifferentiableWithinAt I I.tangent\n      (fun (y : M) ↦ (mpullback I I' f V y : TangentBundle I M)) (f ⁻¹' t) x₀ := by\n  simp only [← contMDiffWithinAt_univ, ← mfderivWithin_univ, ← mpullbackWithin_univ] at hV hf hf' ⊢\n  simpa using hV.mpullbackWithin_vectorField_inter hf hf' (mem_univ _) uniqueMDiffOn_univ hmn\n\n"}
{"name":"MDifferentiableWithinAt.mpullback_vectorField_preimage_of_eq","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹³ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝¹² : TopologicalSpace H\nE : Type u_3\ninst✝¹¹ : NormedAddCommGroup E\ninst✝¹⁰ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁹ : TopologicalSpace M\ninst✝⁸ : ChartedSpace H M\nH' : Type u_5\ninst✝⁷ : TopologicalSpace H'\nE' : Type u_6\ninst✝⁶ : NormedAddCommGroup E'\ninst✝⁵ : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝⁴ : TopologicalSpace M'\ninst✝³ : ChartedSpace H' M'\nf : M → M'\nx₀ : M\nV : (x : M') → TangentSpace I' x\nn : WithTop ENat\nt : Set M'\ny₀ : M'\ninst✝² : IsManifold I 2 M\ninst✝¹ : IsManifold I' 2 M'\ninst✝ : CompleteSpace E\nhV : MDifferentiableWithinAt I' I'.tangent (fun y => { proj := y, snd := V y }) t y₀\nhf : ContMDiffAt I I' n f x₀\nhf' : (mfderiv I I' f x₀).IsInvertible\nhmn : LE.le 2 n\nhy₀ : Eq y₀ (f x₀)\n⊢ MDifferentiableWithinAt I I.tangent (fun y => { proj := y, snd := VectorField.mpullback I I' f V y }) (Set.preimage f t) x₀","decl":"/-- The pullback of a differentiable vector field by a `C^n` function with `2 ≤ n` is\ndifferentiable. Version within a set at a point, but with full pullback. -/\nprotected lemma _root_.MDifferentiableWithinAt.mpullback_vectorField_preimage_of_eq\n    (hV : MDifferentiableWithinAt I' I'.tangent (fun (y : M') ↦ (V y : TangentBundle I' M')) t y₀)\n    (hf : ContMDiffAt I I' n f x₀) (hf' : (mfderiv I I' f x₀).IsInvertible) (hmn : 2 ≤ n)\n    (hy₀ : y₀ = f x₀) :\n    MDifferentiableWithinAt I I.tangent\n      (fun (y : M) ↦ (mpullback I I' f V y : TangentBundle I M)) (f ⁻¹' t) x₀ := by\n  subst hy₀\n  exact hV.mpullback_vectorField_preimage hf hf' hmn\n\n"}
{"name":"MDifferentiableOn.mpullback_vectorField_preimage","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹³ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝¹² : TopologicalSpace H\nE : Type u_3\ninst✝¹¹ : NormedAddCommGroup E\ninst✝¹⁰ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁹ : TopologicalSpace M\ninst✝⁸ : ChartedSpace H M\nH' : Type u_5\ninst✝⁷ : TopologicalSpace H'\nE' : Type u_6\ninst✝⁶ : NormedAddCommGroup E'\ninst✝⁵ : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝⁴ : TopologicalSpace M'\ninst✝³ : ChartedSpace H' M'\nf : M → M'\nV : (x : M') → TangentSpace I' x\nn : WithTop ENat\nt : Set M'\ninst✝² : IsManifold I 2 M\ninst✝¹ : IsManifold I' 2 M'\ninst✝ : CompleteSpace E\nhV : MDifferentiableOn I' I'.tangent (fun y => { proj := y, snd := V y }) t\nhf : ContMDiff I I' n f\nhf' : ∀ (x : M), Membership.mem (Set.preimage f t) x → (mfderiv I I' f x).IsInvertible\nhmn : LE.le 2 n\n⊢ MDifferentiableOn I I.tangent (fun y => { proj := y, snd := VectorField.mpullback I I' f V y }) (Set.preimage f t)","decl":"/-- The pullback of a differentiable vector field by a `C^n` function with `2 ≤ n` is\ndifferentiable. Version on a set, but with full pullback -/\nprotected lemma _root_.MDifferentiableOn.mpullback_vectorField_preimage\n    (hV : MDifferentiableOn I' I'.tangent (fun (y : M') ↦ (V y : TangentBundle I' M')) t)\n    (hf : ContMDiff I I' n f) (hf' : ∀ x ∈ f ⁻¹' t, (mfderiv I I' f x).IsInvertible)\n    (hmn : 2 ≤ n) :\n    MDifferentiableOn I I.tangent\n      (fun (y : M) ↦ (mpullback I I' f V y : TangentBundle I M)) (f ⁻¹' t) :=\n  fun x₀ hx₀ ↦ MDifferentiableWithinAt.mpullback_vectorField_preimage\n    (hV _ hx₀) (hf x₀) (hf' _ hx₀) hmn\n\n"}
{"name":"MDifferentiableAt.mpullback_vectorField","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹³ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝¹² : TopologicalSpace H\nE : Type u_3\ninst✝¹¹ : NormedAddCommGroup E\ninst✝¹⁰ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁹ : TopologicalSpace M\ninst✝⁸ : ChartedSpace H M\nH' : Type u_5\ninst✝⁷ : TopologicalSpace H'\nE' : Type u_6\ninst✝⁶ : NormedAddCommGroup E'\ninst✝⁵ : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝⁴ : TopologicalSpace M'\ninst✝³ : ChartedSpace H' M'\nf : M → M'\nx₀ : M\nV : (x : M') → TangentSpace I' x\nn : WithTop ENat\ninst✝² : IsManifold I 2 M\ninst✝¹ : IsManifold I' 2 M'\ninst✝ : CompleteSpace E\nhV : MDifferentiableAt I' I'.tangent (fun y => { proj := y, snd := V y }) (f x₀)\nhf : ContMDiffAt I I' n f x₀\nhf' : (mfderiv I I' f x₀).IsInvertible\nhmn : LE.le 2 n\n⊢ MDifferentiableAt I I.tangent (fun y => { proj := y, snd := VectorField.mpullback I I' f V y }) x₀","decl":"/-- The pullback of a differentiable vector field by a `C^n` function with `2 ≤ n` is\ndifferentiable. Version at a point. -/\nprotected lemma _root_.MDifferentiableAt.mpullback_vectorField\n    (hV : MDifferentiableAt I' I'.tangent (fun (y : M') ↦ (V y : TangentBundle I' M')) (f x₀))\n    (hf : ContMDiffAt I I' n f x₀) (hf' : (mfderiv I I' f x₀).IsInvertible) (hmn : 2 ≤ n) :\n    MDifferentiableAt I I.tangent\n      (fun (y : M) ↦ (mpullback I I' f V y : TangentBundle I M)) x₀ := by\n  simpa using MDifferentiableWithinAt.mpullback_vectorField_preimage hV hf hf' hmn\n\n"}
{"name":"MDifferentiable.mpullback_vectorField","module":"Mathlib.Geometry.Manifold.VectorField","initialProofState":"𝕜 : Type u_1\ninst✝¹³ : NontriviallyNormedField 𝕜\nH : Type u_2\ninst✝¹² : TopologicalSpace H\nE : Type u_3\ninst✝¹¹ : NormedAddCommGroup E\ninst✝¹⁰ : NormedSpace 𝕜 E\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁹ : TopologicalSpace M\ninst✝⁸ : ChartedSpace H M\nH' : Type u_5\ninst✝⁷ : TopologicalSpace H'\nE' : Type u_6\ninst✝⁶ : NormedAddCommGroup E'\ninst✝⁵ : NormedSpace 𝕜 E'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝⁴ : TopologicalSpace M'\ninst✝³ : ChartedSpace H' M'\nf : M → M'\nV : (x : M') → TangentSpace I' x\nn : WithTop ENat\ninst✝² : IsManifold I 2 M\ninst✝¹ : IsManifold I' 2 M'\ninst✝ : CompleteSpace E\nhV : MDifferentiable I' I'.tangent fun y => { proj := y, snd := V y }\nhf : ContMDiff I I' n f\nhf' : ∀ (x : M), (mfderiv I I' f x).IsInvertible\nhmn : LE.le 2 n\n⊢ MDifferentiable I I.tangent fun y => { proj := y, snd := VectorField.mpullback I I' f V y }","decl":"/-- The pullback of a differentiable vector field by a `C^n` function with `2 ≤ n` is\ndifferentiable. -/\nprotected lemma _root_.MDifferentiable.mpullback_vectorField\n    (hV : MDifferentiable I' I'.tangent (fun (y : M') ↦ (V y : TangentBundle I' M')))\n    (hf : ContMDiff I I' n f) (hf' : ∀ x, (mfderiv I I' f x).IsInvertible) (hmn : 2 ≤ n) :\n    MDifferentiable I I.tangent (fun (y : M) ↦ (mpullback I I' f V y : TangentBundle I M)) :=\n  fun x ↦ MDifferentiableAt.mpullback_vectorField (hV (f x)) (hf x) (hf' x) hmn\n\n"}
