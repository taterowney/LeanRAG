{"name":"Cardinal.mk_subtype_le_of_countable_eventually_mem_aux","module":"Mathlib.SetTheory.Cardinal.CountableCover","initialProofState":"α ι : Type u\na : Cardinal.{u}\ninst✝¹ : Countable ι\nf : ι → Set α\nl : Filter ι\ninst✝ : l.NeBot\nt : Set α\nht : ∀ (x : α), Membership.mem t x → Filter.Eventually (fun i => Membership.mem (f i) x) l\nh'f : ∀ (i : ι), LE.le (Cardinal.mk ↑(f i)) a\n⊢ LE.le (Cardinal.mk ↑t) a","decl":"/-- If a set `t` is eventually covered by a countable family of sets, all with cardinality at\nmost `a`, then the cardinality of `t` is also bounded by `a`.\nSuperseded by `mk_le_of_countable_eventually_mem` which does not assume\nthat the indexing set lives in the same universe. -/\nlemma mk_subtype_le_of_countable_eventually_mem_aux {α ι : Type u} {a : Cardinal}\n    [Countable ι] {f : ι → Set α} {l : Filter ι} [NeBot l]\n    {t : Set α} (ht : ∀ x ∈ t, ∀ᶠ i in l, x ∈ f i)\n    (h'f : ∀ i, #(f i) ≤ a) : #t ≤ a := by\n  rcases lt_or_le a ℵ₀ with ha|ha\n  /- case `a` finite. In this case, it suffices to show that any finite subset `s` of `t` has\n  cardinality at most `a`. For this, we pick `i` such that `f i` contains all the points in `s`,\n  and apply the assumption that the cardinality of `f i` is at most `a`.   -/\n  · obtain ⟨n, rfl⟩ : ∃ (n : ℕ), a = n := lt_aleph0.1 ha\n    apply mk_le_iff_forall_finset_subset_card_le.2 (fun s hs ↦ ?_)\n    have A : ∀ x ∈ s, ∀ᶠ i in l, x ∈ f i := fun x hx ↦ ht x (hs hx)\n    have B : ∀ᶠ i in l, ∀ x ∈ s, x ∈ f i := (s.eventually_all).2 A\n    rcases B.exists with ⟨i, hi⟩\n    have : ∀ i, Fintype (f i) := fun i ↦ (lt_aleph0_iff_fintype.1 ((h'f i).trans_lt ha)).some\n    let u : Finset α := (f i).toFinset\n    have I1 : s.card ≤ u.card := by\n      have : s ⊆ u := fun x hx ↦ by simpa only [u, Set.mem_toFinset] using hi x hx\n      exact Finset.card_le_card this\n    have I2 : (u.card : Cardinal) ≤ n := by\n      convert h'f i; simp only [u, Set.toFinset_card, mk_fintype]\n    exact I1.trans (Nat.cast_le.1 I2)\n  -- case `a` infinite:\n  · have : t ⊆ ⋃ i, f i := by\n      intro x hx\n      obtain ⟨i, hi⟩ : ∃ i, x ∈ f i := (ht x hx).exists\n      exact mem_iUnion_of_mem i hi\n    calc #t ≤ #(⋃ i, f i) := mk_le_mk_of_subset this\n      _     ≤ sum (fun i ↦ #(f i)) := mk_iUnion_le_sum_mk\n      _     ≤ sum (fun _ ↦ a) := sum_le_sum _ _ h'f\n      _     = #ι * a := by simp\n      _     ≤ ℵ₀ * a := mul_le_mul_right' mk_le_aleph0 a\n      _     = a := aleph0_mul_eq ha\n\n"}
{"name":"Cardinal.mk_subtype_le_of_countable_eventually_mem","module":"Mathlib.SetTheory.Cardinal.CountableCover","initialProofState":"α : Type u\nι : Type v\na : Cardinal.{u}\ninst✝¹ : Countable ι\nf : ι → Set α\nl : Filter ι\ninst✝ : l.NeBot\nt : Set α\nht : ∀ (x : α), Membership.mem t x → Filter.Eventually (fun i => Membership.mem (f i) x) l\nh'f : ∀ (i : ι), LE.le (Cardinal.mk ↑(f i)) a\n⊢ LE.le (Cardinal.mk ↑t) a","decl":"/-- If a set `t` is eventually covered by a countable family of sets, all with cardinality at\nmost `a`, then the cardinality of `t` is also bounded by `a`. -/\nlemma mk_subtype_le_of_countable_eventually_mem {α : Type u} {ι : Type v} {a : Cardinal}\n    [Countable ι] {f : ι → Set α} {l : Filter ι} [NeBot l]\n    {t : Set α} (ht : ∀ x ∈ t, ∀ᶠ i in l, x ∈ f i)\n    (h'f : ∀ i, #(f i) ≤ a) : #t ≤ a := by\n  let g : ULift.{u, v} ι → Set (ULift.{v, u} α) := (ULift.down ⁻¹' ·) ∘ f ∘ ULift.down\n  suffices #(ULift.down.{v} ⁻¹' t) ≤ Cardinal.lift.{v, u} a by simpa\n  let l' : Filter (ULift.{u} ι) := Filter.map ULift.up l\n  have : NeBot l' := map_neBot\n  apply mk_subtype_le_of_countable_eventually_mem_aux (ι := ULift.{u} ι) (l := l') (f := g)\n  · intro x hx\n    simpa only [Function.comp_apply, mem_preimage, eventually_map] using ht _ hx\n  · intro i\n    simpa [g] using h'f i.down\n\n"}
{"name":"Cardinal.mk_le_of_countable_eventually_mem","module":"Mathlib.SetTheory.Cardinal.CountableCover","initialProofState":"α : Type u\nι : Type v\na : Cardinal.{u}\ninst✝¹ : Countable ι\nf : ι → Set α\nl : Filter ι\ninst✝ : l.NeBot\nht : ∀ (x : α), Filter.Eventually (fun i => Membership.mem (f i) x) l\nh'f : ∀ (i : ι), LE.le (Cardinal.mk ↑(f i)) a\n⊢ LE.le (Cardinal.mk α) a","decl":"/-- If a space is eventually covered by a countable family of sets, all with cardinality at\nmost `a`, then the cardinality of the space is also bounded by `a`. -/\nlemma mk_le_of_countable_eventually_mem {α : Type u} {ι : Type v} {a : Cardinal}\n    [Countable ι] {f : ι → Set α} {l : Filter ι} [NeBot l] (ht : ∀ x, ∀ᶠ i in l, x ∈ f i)\n    (h'f : ∀ i, #(f i) ≤ a) : #α ≤ a := by\n  rw [← mk_univ]\n  exact mk_subtype_le_of_countable_eventually_mem (l := l) (fun x _ ↦ ht x) h'f\n\n"}
{"name":"Cardinal.mk_of_countable_eventually_mem","module":"Mathlib.SetTheory.Cardinal.CountableCover","initialProofState":"α : Type u\nι : Type v\na : Cardinal.{u}\ninst✝¹ : Countable ι\nf : ι → Set α\nl : Filter ι\ninst✝ : l.NeBot\nht : ∀ (x : α), Filter.Eventually (fun i => Membership.mem (f i) x) l\nh'f : ∀ (i : ι), Eq (Cardinal.mk ↑(f i)) a\n⊢ Eq (Cardinal.mk α) a","decl":"/-- If a space is eventually covered by a countable family of sets, all with cardinality `a`,\nthen the cardinality of the space is also `a`. -/\nlemma mk_of_countable_eventually_mem {α : Type u} {ι : Type v} {a : Cardinal}\n    [Countable ι] {f : ι → Set α} {l : Filter ι} [NeBot l] (ht : ∀ x, ∀ᶠ i in l, x ∈ f i)\n    (h'f : ∀ i, #(f i) = a) : #α = a := by\n  apply le_antisymm\n  · apply mk_le_of_countable_eventually_mem ht (fun i ↦ (h'f i).le)\n  · obtain ⟨i⟩ : Nonempty ι := nonempty_of_neBot l\n    rw [← (h'f i)]\n    exact mk_set_le (f i)\n\n"}
