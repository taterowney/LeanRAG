{"name":"Pretrivialization.continuousOn_continuousLinearMapCoordChange","module":"Mathlib.Topology.VectorBundle.Hom","initialProofState":"𝕜₁ : Type u_1\ninst✝²³ : NontriviallyNormedField 𝕜₁\n𝕜₂ : Type u_2\ninst✝²² : NontriviallyNormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nB : Type u_3\nF₁ : Type u_4\ninst✝²¹ : NormedAddCommGroup F₁\ninst✝²⁰ : NormedSpace 𝕜₁ F₁\nE₁ : B → Type u_5\ninst✝¹⁹ : (x : B) → AddCommGroup (E₁ x)\ninst✝¹⁸ : (x : B) → Module 𝕜₁ (E₁ x)\ninst✝¹⁷ : TopologicalSpace (Bundle.TotalSpace F₁ E₁)\nF₂ : Type u_6\ninst✝¹⁶ : NormedAddCommGroup F₂\ninst✝¹⁵ : NormedSpace 𝕜₂ F₂\nE₂ : B → Type u_7\ninst✝¹⁴ : (x : B) → AddCommGroup (E₂ x)\ninst✝¹³ : (x : B) → Module 𝕜₂ (E₂ x)\ninst✝¹² : TopologicalSpace (Bundle.TotalSpace F₂ E₂)\ninst✝¹¹ : TopologicalSpace B\ne₁ e₁' : Trivialization F₁ Bundle.TotalSpace.proj\ne₂ e₂' : Trivialization F₂ Bundle.TotalSpace.proj\ninst✝¹⁰ : (x : B) → TopologicalSpace (E₁ x)\ninst✝⁹ : FiberBundle F₁ E₁\ninst✝⁸ : (x : B) → TopologicalSpace (E₂ x)\ninst✝⁷ : FiberBundle F₂ E₂\ninst✝⁶ : RingHomIsometric σ\ninst✝⁵ : VectorBundle 𝕜₁ F₁ E₁\ninst✝⁴ : VectorBundle 𝕜₂ F₂ E₂\ninst✝³ : MemTrivializationAtlas e₁\ninst✝² : MemTrivializationAtlas e₁'\ninst✝¹ : MemTrivializationAtlas e₂\ninst✝ : MemTrivializationAtlas e₂'\n⊢ ContinuousOn (Pretrivialization.continuousLinearMapCoordChange σ e₁ e₁' e₂ e₂') (Inter.inter (Inter.inter e₁.baseSet e₂.baseSet) (Inter.inter e₁'.baseSet e₂'.baseSet))","decl":"theorem continuousOn_continuousLinearMapCoordChange [RingHomIsometric σ]\n    [VectorBundle 𝕜₁ F₁ E₁] [VectorBundle 𝕜₂ F₂ E₂]\n    [MemTrivializationAtlas e₁] [MemTrivializationAtlas e₁'] [MemTrivializationAtlas e₂]\n    [MemTrivializationAtlas e₂'] :\n    ContinuousOn (continuousLinearMapCoordChange σ e₁ e₁' e₂ e₂')\n      (e₁.baseSet ∩ e₂.baseSet ∩ (e₁'.baseSet ∩ e₂'.baseSet)) := by\n  have h₁ := (compSL F₁ F₂ F₂ σ (RingHom.id 𝕜₂)).continuous\n  have h₂ := (ContinuousLinearMap.flip (compSL F₁ F₁ F₂ (RingHom.id 𝕜₁) σ)).continuous\n  have h₃ := continuousOn_coordChange 𝕜₁ e₁' e₁\n  have h₄ := continuousOn_coordChange 𝕜₂ e₂ e₂'\n  refine ((h₁.comp_continuousOn (h₄.mono ?_)).clm_comp (h₂.comp_continuousOn (h₃.mono ?_))).congr ?_\n  · mfld_set_tac\n  · mfld_set_tac\n  · intro b _\n    ext L v\n    dsimp [continuousLinearMapCoordChange]\n\n"}
{"name":"Pretrivialization.continuousLinearMap.isLinear","module":"Mathlib.Topology.VectorBundle.Hom","initialProofState":"𝕜₁ : Type u_1\ninst✝²⁰ : NontriviallyNormedField 𝕜₁\n𝕜₂ : Type u_2\ninst✝¹⁹ : NontriviallyNormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nB : Type u_3\nF₁ : Type u_4\ninst✝¹⁸ : NormedAddCommGroup F₁\ninst✝¹⁷ : NormedSpace 𝕜₁ F₁\nE₁ : B → Type u_5\ninst✝¹⁶ : (x : B) → AddCommGroup (E₁ x)\ninst✝¹⁵ : (x : B) → Module 𝕜₁ (E₁ x)\ninst✝¹⁴ : TopologicalSpace (Bundle.TotalSpace F₁ E₁)\nF₂ : Type u_6\ninst✝¹³ : NormedAddCommGroup F₂\ninst✝¹² : NormedSpace 𝕜₂ F₂\nE₂ : B → Type u_7\ninst✝¹¹ : (x : B) → AddCommGroup (E₂ x)\ninst✝¹⁰ : (x : B) → Module 𝕜₂ (E₂ x)\ninst✝⁹ : TopologicalSpace (Bundle.TotalSpace F₂ E₂)\ninst✝⁸ : TopologicalSpace B\ne₁ : Trivialization F₁ Bundle.TotalSpace.proj\ne₂ : Trivialization F₂ Bundle.TotalSpace.proj\ninst✝⁷ : (x : B) → TopologicalSpace (E₁ x)\ninst✝⁶ : FiberBundle F₁ E₁\ninst✝⁵ : (x : B) → TopologicalSpace (E₂ x)\ninst✝⁴ : FiberBundle F₂ E₂\ninst✝³ : Trivialization.IsLinear 𝕜₁ e₁\ninst✝² : Trivialization.IsLinear 𝕜₂ e₂\ninst✝¹ : ∀ (x : B), ContinuousAdd (E₂ x)\ninst✝ : ∀ (x : B), ContinuousSMul 𝕜₂ (E₂ x)\n⊢ Pretrivialization.IsLinear 𝕜₂ (Pretrivialization.continuousLinearMap σ e₁ e₂)","decl":"instance continuousLinearMap.isLinear [∀ x, ContinuousAdd (E₂ x)] [∀ x, ContinuousSMul 𝕜₂ (E₂ x)] :\n    (Pretrivialization.continuousLinearMap σ e₁ e₂).IsLinear 𝕜₂ where\n  linear x _ :=\n    { map_add := fun L L' =>\n        show (e₂.continuousLinearMapAt 𝕜₂ x).comp ((L + L').comp (e₁.symmL 𝕜₁ x)) = _ by\n          simp_rw [add_comp, comp_add]\n          rfl\n      map_smul := fun c L =>\n        show (e₂.continuousLinearMapAt 𝕜₂ x).comp ((c • L).comp (e₁.symmL 𝕜₁ x)) = _ by\n          simp_rw [smul_comp, comp_smulₛₗ, RingHom.id_apply]\n          rfl }\n\n"}
{"name":"Pretrivialization.continuousLinearMap_apply","module":"Mathlib.Topology.VectorBundle.Hom","initialProofState":"𝕜₁ : Type u_1\ninst✝¹⁸ : NontriviallyNormedField 𝕜₁\n𝕜₂ : Type u_2\ninst✝¹⁷ : NontriviallyNormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nB : Type u_3\nF₁ : Type u_4\ninst✝¹⁶ : NormedAddCommGroup F₁\ninst✝¹⁵ : NormedSpace 𝕜₁ F₁\nE₁ : B → Type u_5\ninst✝¹⁴ : (x : B) → AddCommGroup (E₁ x)\ninst✝¹³ : (x : B) → Module 𝕜₁ (E₁ x)\ninst✝¹² : TopologicalSpace (Bundle.TotalSpace F₁ E₁)\nF₂ : Type u_6\ninst✝¹¹ : NormedAddCommGroup F₂\ninst✝¹⁰ : NormedSpace 𝕜₂ F₂\nE₂ : B → Type u_7\ninst✝⁹ : (x : B) → AddCommGroup (E₂ x)\ninst✝⁸ : (x : B) → Module 𝕜₂ (E₂ x)\ninst✝⁷ : TopologicalSpace (Bundle.TotalSpace F₂ E₂)\ninst✝⁶ : TopologicalSpace B\ne₁ : Trivialization F₁ Bundle.TotalSpace.proj\ne₂ : Trivialization F₂ Bundle.TotalSpace.proj\ninst✝⁵ : (x : B) → TopologicalSpace (E₁ x)\ninst✝⁴ : FiberBundle F₁ E₁\ninst✝³ : (x : B) → TopologicalSpace (E₂ x)\ninst✝² : FiberBundle F₂ E₂\ninst✝¹ : Trivialization.IsLinear 𝕜₁ e₁\ninst✝ : Trivialization.IsLinear 𝕜₂ e₂\np : Bundle.TotalSpace (ContinuousLinearMap σ F₁ F₂) fun x => ContinuousLinearMap σ (E₁ x) (E₂ x)\n⊢ Eq (↑(Pretrivialization.continuousLinearMap σ e₁ e₂) p) { fst := p.proj, snd := (Trivialization.continuousLinearMapAt 𝕜₂ e₂ p.proj).comp (p.snd.comp (Trivialization.symmL 𝕜₁ e₁ p.proj)) }","decl":"theorem continuousLinearMap_apply (p : TotalSpace (F₁ →SL[σ] F₂) fun x => E₁ x →SL[σ] E₂ x) :\n    (continuousLinearMap σ e₁ e₂) p =\n      ⟨p.1, .comp (e₂.continuousLinearMapAt 𝕜₂ p.1) (p.2.comp (e₁.symmL 𝕜₁ p.1))⟩ :=\n  rfl\n\n"}
{"name":"Pretrivialization.continuousLinearMap_symm_apply","module":"Mathlib.Topology.VectorBundle.Hom","initialProofState":"𝕜₁ : Type u_1\ninst✝¹⁸ : NontriviallyNormedField 𝕜₁\n𝕜₂ : Type u_2\ninst✝¹⁷ : NontriviallyNormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nB : Type u_3\nF₁ : Type u_4\ninst✝¹⁶ : NormedAddCommGroup F₁\ninst✝¹⁵ : NormedSpace 𝕜₁ F₁\nE₁ : B → Type u_5\ninst✝¹⁴ : (x : B) → AddCommGroup (E₁ x)\ninst✝¹³ : (x : B) → Module 𝕜₁ (E₁ x)\ninst✝¹² : TopologicalSpace (Bundle.TotalSpace F₁ E₁)\nF₂ : Type u_6\ninst✝¹¹ : NormedAddCommGroup F₂\ninst✝¹⁰ : NormedSpace 𝕜₂ F₂\nE₂ : B → Type u_7\ninst✝⁹ : (x : B) → AddCommGroup (E₂ x)\ninst✝⁸ : (x : B) → Module 𝕜₂ (E₂ x)\ninst✝⁷ : TopologicalSpace (Bundle.TotalSpace F₂ E₂)\ninst✝⁶ : TopologicalSpace B\ne₁ : Trivialization F₁ Bundle.TotalSpace.proj\ne₂ : Trivialization F₂ Bundle.TotalSpace.proj\ninst✝⁵ : (x : B) → TopologicalSpace (E₁ x)\ninst✝⁴ : FiberBundle F₁ E₁\ninst✝³ : (x : B) → TopologicalSpace (E₂ x)\ninst✝² : FiberBundle F₂ E₂\ninst✝¹ : Trivialization.IsLinear 𝕜₁ e₁\ninst✝ : Trivialization.IsLinear 𝕜₂ e₂\np : Prod B (ContinuousLinearMap σ F₁ F₂)\n⊢ Eq (↑(Pretrivialization.continuousLinearMap σ e₁ e₂).symm p) { proj := p.1, snd := (Trivialization.symmL 𝕜₂ e₂ p.1).comp (p.2.comp (Trivialization.continuousLinearMapAt 𝕜₁ e₁ p.1)) }","decl":"theorem continuousLinearMap_symm_apply (p : B × (F₁ →SL[σ] F₂)) :\n    (continuousLinearMap σ e₁ e₂).toPartialEquiv.symm p =\n      ⟨p.1, .comp (e₂.symmL 𝕜₂ p.1) (p.2.comp (e₁.continuousLinearMapAt 𝕜₁ p.1))⟩ :=\n  rfl\n\n"}
{"name":"Pretrivialization.continuousLinearMap_symm_apply'","module":"Mathlib.Topology.VectorBundle.Hom","initialProofState":"𝕜₁ : Type u_1\ninst✝¹⁸ : NontriviallyNormedField 𝕜₁\n𝕜₂ : Type u_2\ninst✝¹⁷ : NontriviallyNormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nB : Type u_3\nF₁ : Type u_4\ninst✝¹⁶ : NormedAddCommGroup F₁\ninst✝¹⁵ : NormedSpace 𝕜₁ F₁\nE₁ : B → Type u_5\ninst✝¹⁴ : (x : B) → AddCommGroup (E₁ x)\ninst✝¹³ : (x : B) → Module 𝕜₁ (E₁ x)\ninst✝¹² : TopologicalSpace (Bundle.TotalSpace F₁ E₁)\nF₂ : Type u_6\ninst✝¹¹ : NormedAddCommGroup F₂\ninst✝¹⁰ : NormedSpace 𝕜₂ F₂\nE₂ : B → Type u_7\ninst✝⁹ : (x : B) → AddCommGroup (E₂ x)\ninst✝⁸ : (x : B) → Module 𝕜₂ (E₂ x)\ninst✝⁷ : TopologicalSpace (Bundle.TotalSpace F₂ E₂)\ninst✝⁶ : TopologicalSpace B\ne₁ : Trivialization F₁ Bundle.TotalSpace.proj\ne₂ : Trivialization F₂ Bundle.TotalSpace.proj\ninst✝⁵ : (x : B) → TopologicalSpace (E₁ x)\ninst✝⁴ : FiberBundle F₁ E₁\ninst✝³ : (x : B) → TopologicalSpace (E₂ x)\ninst✝² : FiberBundle F₂ E₂\ninst✝¹ : Trivialization.IsLinear 𝕜₁ e₁\ninst✝ : Trivialization.IsLinear 𝕜₂ e₂\nb : B\nhb : Membership.mem (Inter.inter e₁.baseSet e₂.baseSet) b\nL : ContinuousLinearMap σ F₁ F₂\n⊢ Eq ((Pretrivialization.continuousLinearMap σ e₁ e₂).symm b L) ((Trivialization.symmL 𝕜₂ e₂ b).comp (L.comp (Trivialization.continuousLinearMapAt 𝕜₁ e₁ b)))","decl":"theorem continuousLinearMap_symm_apply' {b : B} (hb : b ∈ e₁.baseSet ∩ e₂.baseSet)\n    (L : F₁ →SL[σ] F₂) :\n    (continuousLinearMap σ e₁ e₂).symm b L =\n      (e₂.symmL 𝕜₂ b).comp (L.comp <| e₁.continuousLinearMapAt 𝕜₁ b) := by\n  rw [symm_apply]\n  · rfl\n  · exact hb\n\n"}
{"name":"Pretrivialization.continuousLinearMapCoordChange_apply","module":"Mathlib.Topology.VectorBundle.Hom","initialProofState":"𝕜₁ : Type u_1\ninst✝²⁰ : NontriviallyNormedField 𝕜₁\n𝕜₂ : Type u_2\ninst✝¹⁹ : NontriviallyNormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nB : Type u_3\nF₁ : Type u_4\ninst✝¹⁸ : NormedAddCommGroup F₁\ninst✝¹⁷ : NormedSpace 𝕜₁ F₁\nE₁ : B → Type u_5\ninst✝¹⁶ : (x : B) → AddCommGroup (E₁ x)\ninst✝¹⁵ : (x : B) → Module 𝕜₁ (E₁ x)\ninst✝¹⁴ : TopologicalSpace (Bundle.TotalSpace F₁ E₁)\nF₂ : Type u_6\ninst✝¹³ : NormedAddCommGroup F₂\ninst✝¹² : NormedSpace 𝕜₂ F₂\nE₂ : B → Type u_7\ninst✝¹¹ : (x : B) → AddCommGroup (E₂ x)\ninst✝¹⁰ : (x : B) → Module 𝕜₂ (E₂ x)\ninst✝⁹ : TopologicalSpace (Bundle.TotalSpace F₂ E₂)\ninst✝⁸ : TopologicalSpace B\ne₁ e₁' : Trivialization F₁ Bundle.TotalSpace.proj\ne₂ e₂' : Trivialization F₂ Bundle.TotalSpace.proj\ninst✝⁷ : (x : B) → TopologicalSpace (E₁ x)\ninst✝⁶ : FiberBundle F₁ E₁\ninst✝⁵ : (x : B) → TopologicalSpace (E₂ x)\ninst✝⁴ : FiberBundle F₂ E₂\ninst✝³ : Trivialization.IsLinear 𝕜₁ e₁\ninst✝² : Trivialization.IsLinear 𝕜₁ e₁'\ninst✝¹ : Trivialization.IsLinear 𝕜₂ e₂\ninst✝ : Trivialization.IsLinear 𝕜₂ e₂'\nb : B\nhb : Membership.mem (Inter.inter (Inter.inter e₁.baseSet e₂.baseSet) (Inter.inter e₁'.baseSet e₂'.baseSet)) b\nL : ContinuousLinearMap σ F₁ F₂\n⊢ Eq ((Pretrivialization.continuousLinearMapCoordChange σ e₁ e₁' e₂ e₂' b) L) (↑(Pretrivialization.continuousLinearMap σ e₁' e₂') { proj := b, snd := (Pretrivialization.continuousLinearMap σ e₁ e₂).symm b L }).2","decl":"theorem continuousLinearMapCoordChange_apply (b : B)\n    (hb : b ∈ e₁.baseSet ∩ e₂.baseSet ∩ (e₁'.baseSet ∩ e₂'.baseSet)) (L : F₁ →SL[σ] F₂) :\n    continuousLinearMapCoordChange σ e₁ e₁' e₂ e₂' b L =\n      (continuousLinearMap σ e₁' e₂' ⟨b, (continuousLinearMap σ e₁ e₂).symm b L⟩).2 := by\n  ext v\n  simp_rw [continuousLinearMapCoordChange, ContinuousLinearEquiv.coe_coe,\n    ContinuousLinearEquiv.arrowCongrSL_apply, continuousLinearMap_apply,\n    continuousLinearMap_symm_apply' σ e₁ e₂ hb.1, comp_apply, ContinuousLinearEquiv.coe_coe,\n    ContinuousLinearEquiv.symm_symm, Trivialization.continuousLinearMapAt_apply,\n    Trivialization.symmL_apply]\n  rw [e₂.coordChangeL_apply e₂', e₁'.coordChangeL_apply e₁, e₁.coe_linearMapAt_of_mem hb.1.1,\n    e₂'.coe_linearMapAt_of_mem hb.2.2]\n  exacts [⟨hb.2.1, hb.1.1⟩, ⟨hb.1.2, hb.2.2⟩]\n\n"}
{"name":"Bundle.ContinuousLinearMap.vectorBundle","module":"Mathlib.Topology.VectorBundle.Hom","initialProofState":"𝕜₁ : Type u_1\ninst✝²¹ : NontriviallyNormedField 𝕜₁\n𝕜₂ : Type u_2\ninst✝²⁰ : NontriviallyNormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nB : Type u_3\nF₁ : Type u_4\ninst✝¹⁹ : NormedAddCommGroup F₁\ninst✝¹⁸ : NormedSpace 𝕜₁ F₁\nE₁ : B → Type u_5\ninst✝¹⁷ : (x : B) → AddCommGroup (E₁ x)\ninst✝¹⁶ : (x : B) → Module 𝕜₁ (E₁ x)\ninst✝¹⁵ : TopologicalSpace (Bundle.TotalSpace F₁ E₁)\nF₂ : Type u_6\ninst✝¹⁴ : NormedAddCommGroup F₂\ninst✝¹³ : NormedSpace 𝕜₂ F₂\nE₂ : B → Type u_7\ninst✝¹² : (x : B) → AddCommGroup (E₂ x)\ninst✝¹¹ : (x : B) → Module 𝕜₂ (E₂ x)\ninst✝¹⁰ : TopologicalSpace (Bundle.TotalSpace F₂ E₂)\ninst✝⁹ : TopologicalSpace B\ninst✝⁸ : (x : B) → TopologicalSpace (E₁ x)\ninst✝⁷ : FiberBundle F₁ E₁\ninst✝⁶ : VectorBundle 𝕜₁ F₁ E₁\ninst✝⁵ : (x : B) → TopologicalSpace (E₂ x)\ninst✝⁴ : FiberBundle F₂ E₂\ninst✝³ : VectorBundle 𝕜₂ F₂ E₂\ninst✝² : ∀ (x : B), TopologicalAddGroup (E₂ x)\ninst✝¹ : ∀ (x : B), ContinuousSMul 𝕜₂ (E₂ x)\ninst✝ : RingHomIsometric σ\n⊢ VectorBundle 𝕜₂ (ContinuousLinearMap σ F₁ F₂) (Bundle.ContinuousLinearMap σ E₁ E₂)","decl":"/-- The continuous `σ`-semilinear maps between two vector bundles form a vector bundle. -/\ninstance Bundle.ContinuousLinearMap.vectorBundle :\n    VectorBundle 𝕜₂ (F₁ →SL[σ] F₂) (Bundle.ContinuousLinearMap σ E₁ E₂) :=\n  (Bundle.ContinuousLinearMap.vectorPrebundle σ F₁ E₁ F₂ E₂).toVectorBundle\n\n"}
{"name":"Bundle.ContinuousLinearMap.memTrivializationAtlas","module":"Mathlib.Topology.VectorBundle.Hom","initialProofState":"𝕜₁ : Type u_1\ninst✝²¹ : NontriviallyNormedField 𝕜₁\n𝕜₂ : Type u_2\ninst✝²⁰ : NontriviallyNormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nB : Type u_3\nF₁ : Type u_4\ninst✝¹⁹ : NormedAddCommGroup F₁\ninst✝¹⁸ : NormedSpace 𝕜₁ F₁\nE₁ : B → Type u_5\ninst✝¹⁷ : (x : B) → AddCommGroup (E₁ x)\ninst✝¹⁶ : (x : B) → Module 𝕜₁ (E₁ x)\ninst✝¹⁵ : TopologicalSpace (Bundle.TotalSpace F₁ E₁)\nF₂ : Type u_6\ninst✝¹⁴ : NormedAddCommGroup F₂\ninst✝¹³ : NormedSpace 𝕜₂ F₂\nE₂ : B → Type u_7\ninst✝¹² : (x : B) → AddCommGroup (E₂ x)\ninst✝¹¹ : (x : B) → Module 𝕜₂ (E₂ x)\ninst✝¹⁰ : TopologicalSpace (Bundle.TotalSpace F₂ E₂)\ninst✝⁹ : TopologicalSpace B\ne₁ : Trivialization F₁ Bundle.TotalSpace.proj\ne₂ : Trivialization F₂ Bundle.TotalSpace.proj\ninst✝⁸ : (x : B) → TopologicalSpace (E₁ x)\ninst✝⁷ : FiberBundle F₁ E₁\ninst✝⁶ : VectorBundle 𝕜₁ F₁ E₁\ninst✝⁵ : (x : B) → TopologicalSpace (E₂ x)\ninst✝⁴ : FiberBundle F₂ E₂\ninst✝³ : VectorBundle 𝕜₂ F₂ E₂\ninst✝² : ∀ (x : B), TopologicalAddGroup (E₂ x)\ninst✝¹ : ∀ (x : B), ContinuousSMul 𝕜₂ (E₂ x)\ninst✝ : RingHomIsometric σ\nhe₁ : MemTrivializationAtlas e₁\nhe₂ : MemTrivializationAtlas e₂\n⊢ MemTrivializationAtlas (Trivialization.continuousLinearMap σ e₁ e₂)","decl":"instance Bundle.ContinuousLinearMap.memTrivializationAtlas :\n    MemTrivializationAtlas\n      (e₁.continuousLinearMap σ e₂ :\n        Trivialization (F₁ →SL[σ] F₂) (π (F₁ →SL[σ] F₂) (Bundle.ContinuousLinearMap σ E₁ E₂))) where\n  out := ⟨_, ⟨e₁, e₂, by infer_instance, by infer_instance, rfl⟩, rfl⟩\n\n"}
{"name":"Trivialization.baseSet_continuousLinearMap","module":"Mathlib.Topology.VectorBundle.Hom","initialProofState":"𝕜₁ : Type u_1\ninst✝²¹ : NontriviallyNormedField 𝕜₁\n𝕜₂ : Type u_2\ninst✝²⁰ : NontriviallyNormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nB : Type u_3\nF₁ : Type u_4\ninst✝¹⁹ : NormedAddCommGroup F₁\ninst✝¹⁸ : NormedSpace 𝕜₁ F₁\nE₁ : B → Type u_5\ninst✝¹⁷ : (x : B) → AddCommGroup (E₁ x)\ninst✝¹⁶ : (x : B) → Module 𝕜₁ (E₁ x)\ninst✝¹⁵ : TopologicalSpace (Bundle.TotalSpace F₁ E₁)\nF₂ : Type u_6\ninst✝¹⁴ : NormedAddCommGroup F₂\ninst✝¹³ : NormedSpace 𝕜₂ F₂\nE₂ : B → Type u_7\ninst✝¹² : (x : B) → AddCommGroup (E₂ x)\ninst✝¹¹ : (x : B) → Module 𝕜₂ (E₂ x)\ninst✝¹⁰ : TopologicalSpace (Bundle.TotalSpace F₂ E₂)\ninst✝⁹ : TopologicalSpace B\ne₁ : Trivialization F₁ Bundle.TotalSpace.proj\ne₂ : Trivialization F₂ Bundle.TotalSpace.proj\ninst✝⁸ : (x : B) → TopologicalSpace (E₁ x)\ninst✝⁷ : FiberBundle F₁ E₁\ninst✝⁶ : VectorBundle 𝕜₁ F₁ E₁\ninst✝⁵ : (x : B) → TopologicalSpace (E₂ x)\ninst✝⁴ : FiberBundle F₂ E₂\ninst✝³ : VectorBundle 𝕜₂ F₂ E₂\ninst✝² : ∀ (x : B), TopologicalAddGroup (E₂ x)\ninst✝¹ : ∀ (x : B), ContinuousSMul 𝕜₂ (E₂ x)\ninst✝ : RingHomIsometric σ\nhe₁ : MemTrivializationAtlas e₁\nhe₂ : MemTrivializationAtlas e₂\n⊢ Eq (Trivialization.continuousLinearMap σ e₁ e₂).baseSet (Inter.inter e₁.baseSet e₂.baseSet)","decl":"@[simp]\ntheorem Trivialization.baseSet_continuousLinearMap :\n    (e₁.continuousLinearMap σ e₂).baseSet = e₁.baseSet ∩ e₂.baseSet :=\n  rfl\n\n"}
{"name":"Trivialization.continuousLinearMap_apply","module":"Mathlib.Topology.VectorBundle.Hom","initialProofState":"𝕜₁ : Type u_1\ninst✝²¹ : NontriviallyNormedField 𝕜₁\n𝕜₂ : Type u_2\ninst✝²⁰ : NontriviallyNormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nB : Type u_3\nF₁ : Type u_4\ninst✝¹⁹ : NormedAddCommGroup F₁\ninst✝¹⁸ : NormedSpace 𝕜₁ F₁\nE₁ : B → Type u_5\ninst✝¹⁷ : (x : B) → AddCommGroup (E₁ x)\ninst✝¹⁶ : (x : B) → Module 𝕜₁ (E₁ x)\ninst✝¹⁵ : TopologicalSpace (Bundle.TotalSpace F₁ E₁)\nF₂ : Type u_6\ninst✝¹⁴ : NormedAddCommGroup F₂\ninst✝¹³ : NormedSpace 𝕜₂ F₂\nE₂ : B → Type u_7\ninst✝¹² : (x : B) → AddCommGroup (E₂ x)\ninst✝¹¹ : (x : B) → Module 𝕜₂ (E₂ x)\ninst✝¹⁰ : TopologicalSpace (Bundle.TotalSpace F₂ E₂)\ninst✝⁹ : TopologicalSpace B\ne₁ : Trivialization F₁ Bundle.TotalSpace.proj\ne₂ : Trivialization F₂ Bundle.TotalSpace.proj\ninst✝⁸ : (x : B) → TopologicalSpace (E₁ x)\ninst✝⁷ : FiberBundle F₁ E₁\ninst✝⁶ : VectorBundle 𝕜₁ F₁ E₁\ninst✝⁵ : (x : B) → TopologicalSpace (E₂ x)\ninst✝⁴ : FiberBundle F₂ E₂\ninst✝³ : VectorBundle 𝕜₂ F₂ E₂\ninst✝² : ∀ (x : B), TopologicalAddGroup (E₂ x)\ninst✝¹ : ∀ (x : B), ContinuousSMul 𝕜₂ (E₂ x)\ninst✝ : RingHomIsometric σ\nhe₁ : MemTrivializationAtlas e₁\nhe₂ : MemTrivializationAtlas e₂\np : Bundle.TotalSpace (ContinuousLinearMap σ F₁ F₂) (Bundle.ContinuousLinearMap σ E₁ E₂)\n⊢ Eq (↑(Trivialization.continuousLinearMap σ e₁ e₂) p) { fst := p.proj, snd := (Trivialization.continuousLinearMapAt 𝕜₂ e₂ p.proj).comp (ContinuousLinearMap.comp p.snd (Trivialization.symmL 𝕜₁ e₁ p.proj)) }","decl":"theorem Trivialization.continuousLinearMap_apply\n    (p : TotalSpace (F₁ →SL[σ] F₂) (Bundle.ContinuousLinearMap σ E₁ E₂)) :\n    e₁.continuousLinearMap σ e₂ p =\n      ⟨p.1, (e₂.continuousLinearMapAt 𝕜₂ p.1 : _ →L[𝕜₂] _).comp\n        (p.2.comp (e₁.symmL 𝕜₁ p.1 : F₁ →L[𝕜₁] E₁ p.1) : F₁ →SL[σ] E₂ p.1)⟩ :=\n  rfl\n\n"}
{"name":"hom_trivializationAt_apply","module":"Mathlib.Topology.VectorBundle.Hom","initialProofState":"𝕜₁ : Type u_1\ninst✝²¹ : NontriviallyNormedField 𝕜₁\n𝕜₂ : Type u_2\ninst✝²⁰ : NontriviallyNormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nB : Type u_3\nF₁ : Type u_4\ninst✝¹⁹ : NormedAddCommGroup F₁\ninst✝¹⁸ : NormedSpace 𝕜₁ F₁\nE₁ : B → Type u_5\ninst✝¹⁷ : (x : B) → AddCommGroup (E₁ x)\ninst✝¹⁶ : (x : B) → Module 𝕜₁ (E₁ x)\ninst✝¹⁵ : TopologicalSpace (Bundle.TotalSpace F₁ E₁)\nF₂ : Type u_6\ninst✝¹⁴ : NormedAddCommGroup F₂\ninst✝¹³ : NormedSpace 𝕜₂ F₂\nE₂ : B → Type u_7\ninst✝¹² : (x : B) → AddCommGroup (E₂ x)\ninst✝¹¹ : (x : B) → Module 𝕜₂ (E₂ x)\ninst✝¹⁰ : TopologicalSpace (Bundle.TotalSpace F₂ E₂)\ninst✝⁹ : TopologicalSpace B\ninst✝⁸ : (x : B) → TopologicalSpace (E₁ x)\ninst✝⁷ : FiberBundle F₁ E₁\ninst✝⁶ : VectorBundle 𝕜₁ F₁ E₁\ninst✝⁵ : (x : B) → TopologicalSpace (E₂ x)\ninst✝⁴ : FiberBundle F₂ E₂\ninst✝³ : VectorBundle 𝕜₂ F₂ E₂\ninst✝² : ∀ (x : B), TopologicalAddGroup (E₂ x)\ninst✝¹ : ∀ (x : B), ContinuousSMul 𝕜₂ (E₂ x)\ninst✝ : RingHomIsometric σ\nx₀ : B\nx : Bundle.TotalSpace (ContinuousLinearMap σ F₁ F₂) (Bundle.ContinuousLinearMap σ E₁ E₂)\n⊢ Eq (↑(FiberBundle.trivializationAt (ContinuousLinearMap σ F₁ F₂) (fun x => ContinuousLinearMap σ (E₁ x) (E₂ x)) x₀) x) { fst := x.proj, snd := ContinuousLinearMap.inCoordinates F₁ E₁ F₂ E₂ x₀ x.proj x₀ x.proj x.snd }","decl":"theorem hom_trivializationAt_apply (x₀ : B)\n    (x : TotalSpace (F₁ →SL[σ] F₂) (Bundle.ContinuousLinearMap σ E₁ E₂)) :\n    trivializationAt (F₁ →SL[σ] F₂) (fun x => E₁ x →SL[σ] E₂ x) x₀ x =\n      ⟨x.1, inCoordinates F₁ E₁ F₂ E₂ x₀ x.1 x₀ x.1 x.2⟩ :=\n  rfl\n\n"}
{"name":"hom_trivializationAt_source","module":"Mathlib.Topology.VectorBundle.Hom","initialProofState":"𝕜₁ : Type u_1\ninst✝²¹ : NontriviallyNormedField 𝕜₁\n𝕜₂ : Type u_2\ninst✝²⁰ : NontriviallyNormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nB : Type u_3\nF₁ : Type u_4\ninst✝¹⁹ : NormedAddCommGroup F₁\ninst✝¹⁸ : NormedSpace 𝕜₁ F₁\nE₁ : B → Type u_5\ninst✝¹⁷ : (x : B) → AddCommGroup (E₁ x)\ninst✝¹⁶ : (x : B) → Module 𝕜₁ (E₁ x)\ninst✝¹⁵ : TopologicalSpace (Bundle.TotalSpace F₁ E₁)\nF₂ : Type u_6\ninst✝¹⁴ : NormedAddCommGroup F₂\ninst✝¹³ : NormedSpace 𝕜₂ F₂\nE₂ : B → Type u_7\ninst✝¹² : (x : B) → AddCommGroup (E₂ x)\ninst✝¹¹ : (x : B) → Module 𝕜₂ (E₂ x)\ninst✝¹⁰ : TopologicalSpace (Bundle.TotalSpace F₂ E₂)\ninst✝⁹ : TopologicalSpace B\ninst✝⁸ : (x : B) → TopologicalSpace (E₁ x)\ninst✝⁷ : FiberBundle F₁ E₁\ninst✝⁶ : VectorBundle 𝕜₁ F₁ E₁\ninst✝⁵ : (x : B) → TopologicalSpace (E₂ x)\ninst✝⁴ : FiberBundle F₂ E₂\ninst✝³ : VectorBundle 𝕜₂ F₂ E₂\ninst✝² : ∀ (x : B), TopologicalAddGroup (E₂ x)\ninst✝¹ : ∀ (x : B), ContinuousSMul 𝕜₂ (E₂ x)\ninst✝ : RingHomIsometric σ\nx₀ : B\n⊢ Eq (FiberBundle.trivializationAt (ContinuousLinearMap σ F₁ F₂) (Bundle.ContinuousLinearMap σ E₁ E₂) x₀).source (Set.preimage Bundle.TotalSpace.proj (Inter.inter (FiberBundle.trivializationAt F₁ E₁ x₀).baseSet (FiberBundle.trivializationAt F₂ E₂ x₀).baseSet))","decl":"@[simp, mfld_simps]\ntheorem hom_trivializationAt_source (x₀ : B) :\n    (trivializationAt (F₁ →SL[σ] F₂) (Bundle.ContinuousLinearMap σ E₁ E₂) x₀).source =\n      π (F₁ →SL[σ] F₂) (Bundle.ContinuousLinearMap σ E₁ E₂) ⁻¹'\n        ((trivializationAt F₁ E₁ x₀).baseSet ∩ (trivializationAt F₂ E₂ x₀).baseSet) :=\n  rfl\n\n"}
{"name":"hom_trivializationAt_target","module":"Mathlib.Topology.VectorBundle.Hom","initialProofState":"𝕜₁ : Type u_1\ninst✝²¹ : NontriviallyNormedField 𝕜₁\n𝕜₂ : Type u_2\ninst✝²⁰ : NontriviallyNormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nB : Type u_3\nF₁ : Type u_4\ninst✝¹⁹ : NormedAddCommGroup F₁\ninst✝¹⁸ : NormedSpace 𝕜₁ F₁\nE₁ : B → Type u_5\ninst✝¹⁷ : (x : B) → AddCommGroup (E₁ x)\ninst✝¹⁶ : (x : B) → Module 𝕜₁ (E₁ x)\ninst✝¹⁵ : TopologicalSpace (Bundle.TotalSpace F₁ E₁)\nF₂ : Type u_6\ninst✝¹⁴ : NormedAddCommGroup F₂\ninst✝¹³ : NormedSpace 𝕜₂ F₂\nE₂ : B → Type u_7\ninst✝¹² : (x : B) → AddCommGroup (E₂ x)\ninst✝¹¹ : (x : B) → Module 𝕜₂ (E₂ x)\ninst✝¹⁰ : TopologicalSpace (Bundle.TotalSpace F₂ E₂)\ninst✝⁹ : TopologicalSpace B\ninst✝⁸ : (x : B) → TopologicalSpace (E₁ x)\ninst✝⁷ : FiberBundle F₁ E₁\ninst✝⁶ : VectorBundle 𝕜₁ F₁ E₁\ninst✝⁵ : (x : B) → TopologicalSpace (E₂ x)\ninst✝⁴ : FiberBundle F₂ E₂\ninst✝³ : VectorBundle 𝕜₂ F₂ E₂\ninst✝² : ∀ (x : B), TopologicalAddGroup (E₂ x)\ninst✝¹ : ∀ (x : B), ContinuousSMul 𝕜₂ (E₂ x)\ninst✝ : RingHomIsometric σ\nx₀ : B\n⊢ Eq (FiberBundle.trivializationAt (ContinuousLinearMap σ F₁ F₂) (fun x => ContinuousLinearMap σ (E₁ x) (E₂ x)) x₀).target (SProd.sprod (Inter.inter (FiberBundle.trivializationAt F₁ E₁ x₀).baseSet (FiberBundle.trivializationAt F₂ E₂ x₀).baseSet) Set.univ)","decl":"@[simp, mfld_simps]\ntheorem hom_trivializationAt_target (x₀ : B) :\n    (trivializationAt (F₁ →SL[σ] F₂) (fun x => E₁ x →SL[σ] E₂ x) x₀).target =\n      ((trivializationAt F₁ E₁ x₀).baseSet ∩ (trivializationAt F₂ E₂ x₀).baseSet) ×ˢ Set.univ :=\n  rfl\n"}
