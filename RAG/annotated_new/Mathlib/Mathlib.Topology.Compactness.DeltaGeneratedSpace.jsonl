{"name":"deltaGenerated_eq_coinduced","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"X : Type u_1\ntX : TopologicalSpace X\n⊢ Eq (TopologicalSpace.deltaGenerated X) (TopologicalSpace.coinduced (fun x => x.fst.snd x.snd) inferInstance)","decl":"/-- The delta-generated topology is also coinduced by a single map out of a sigma type. -/\nlemma deltaGenerated_eq_coinduced : deltaGenerated X = coinduced\n    (fun x : (f : (n : ℕ) × C(Fin n → ℝ, X)) × (Fin f.1 → ℝ) ↦ x.1.2 x.2) inferInstance := by\n  rw [deltaGenerated, instTopologicalSpaceSigma, coinduced_iSup]; rfl\n\n"}
{"name":"deltaGenerated_le","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"X : Type u_1\ntX : TopologicalSpace X\n⊢ LE.le (TopologicalSpace.deltaGenerated X) tX","decl":"/-- The delta-generated topology is at least as fine as the original one. -/\nlemma deltaGenerated_le : deltaGenerated X ≤ tX :=\n  iSup_le_iff.mpr fun f ↦ f.2.continuous.coinduced_le\n\n"}
{"name":"isOpen_deltaGenerated_iff","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"X : Type u_1\ntX : TopologicalSpace X\nu : Set X\n⊢ Iff (IsOpen u) (∀ (n : Nat) (p : ContinuousMap (Fin n → Real) X), IsOpen (Set.preimage (⇑p) u))","decl":"/-- A set is open in `deltaGenerated X` iff all its preimages under continuous functions ℝⁿ → X are\n  open. -/\nlemma isOpen_deltaGenerated_iff {u : Set X} :\n    IsOpen[deltaGenerated X] u ↔ ∀ n (p : C(Fin n → ℝ, X)), IsOpen (p ⁻¹' u) := by\n  simp_rw [deltaGenerated, isOpen_iSup_iff, isOpen_coinduced, Sigma.forall]\n\n"}
{"name":"deltaGenerated_deltaGenerated_eq","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"X : Type u_1\ntX : TopologicalSpace X\n⊢ Eq (TopologicalSpace.deltaGenerated X) (TopologicalSpace.deltaGenerated X)","decl":"/-- `deltaGenerated` is idempotent as a function `TopologicalSpace X → TopologicalSpace X`. -/\nlemma deltaGenerated_deltaGenerated_eq :\n    @deltaGenerated X (deltaGenerated X) = deltaGenerated X := by\n  ext u; simp_rw [isOpen_deltaGenerated_iff]; refine forall_congr' fun n ↦ ?_\n  -- somewhat awkward because `ContinuousMap` doesn't play well with multiple topologies.\n  refine ⟨fun h p ↦ h <| @ContinuousMap.mk _ _ _ (_) p ?_, fun h p ↦ h ⟨p, ?_⟩⟩\n  · exact continuous_euclidean_to_deltaGenerated.mpr p.2\n  · exact continuous_euclidean_to_deltaGenerated.mp <| @ContinuousMap.continuous_toFun _ _ _ (_) p\n\n"}
{"name":"DeltaGeneratedSpace.le_deltaGenerated","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"X : Type u_3\nt : TopologicalSpace X\nself : DeltaGeneratedSpace X\n⊢ LE.le t (TopologicalSpace.deltaGenerated X)","decl":"/-- A space is delta-generated if its topology is equal to the delta-generated topology, i.e.\n  coinduced by all continuous maps ℝⁿ → X. Since the delta-generated topology is always finer\n  than the original one, it suffices to show that it is also coarser. -/\nclass DeltaGeneratedSpace (X : Type*) [t : TopologicalSpace X] : Prop where\n  le_deltaGenerated : t ≤ deltaGenerated X\n\n"}
{"name":"eq_deltaGenerated","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"X : Type u_1\ntX : TopologicalSpace X\ninst✝ : DeltaGeneratedSpace X\n⊢ Eq tX (TopologicalSpace.deltaGenerated X)","decl":"lemma eq_deltaGenerated [DeltaGeneratedSpace X] : tX = deltaGenerated X :=\n  eq_of_le_of_le DeltaGeneratedSpace.le_deltaGenerated deltaGenerated_le\n\n"}
{"name":"DeltaGeneratedSpace.isOpen_iff","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"X : Type u_1\ntX : TopologicalSpace X\ninst✝ : DeltaGeneratedSpace X\nu : Set X\n⊢ Iff (IsOpen u) (∀ (n : Nat) (p : ContinuousMap (Fin n → Real) X), IsOpen (Set.preimage (⇑p) u))","decl":"/-- A subset of a delta-generated space is open iff its preimage is open for every\n  continuous map from ℝⁿ to X. -/\nlemma DeltaGeneratedSpace.isOpen_iff [DeltaGeneratedSpace X] {u : Set X} :\n    IsOpen u ↔ ∀ (n : ℕ) (p : ContinuousMap ((Fin n) → ℝ) X), IsOpen (p ⁻¹' u) := by\n  nth_rewrite 1 [eq_deltaGenerated (X := X)]; exact isOpen_deltaGenerated_iff\n\n"}
{"name":"DeltaGeneratedSpace.continuous_iff","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"X : Type u_1\nY : Type u_2\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\ninst✝ : DeltaGeneratedSpace X\nf : X → Y\n⊢ Iff (Continuous f) (∀ (n : Nat) (p : ContinuousMap (Fin n → Real) X), Continuous (Function.comp f ⇑p))","decl":"/-- A map out of a delta-generated space is continuous iff it preserves continuity of maps\n  from ℝⁿ into X. -/\nlemma DeltaGeneratedSpace.continuous_iff [DeltaGeneratedSpace X] {f : X → Y} :\n    Continuous f ↔ ∀ (n : ℕ) (p : C(((Fin n) → ℝ), X)), Continuous (f ∘ p) := by\n  simp_rw [continuous_iff_coinduced_le]\n  nth_rewrite 1 [eq_deltaGenerated (X := X), deltaGenerated]\n  simp [coinduced_compose]\n  constructor\n  · intro h n p; apply h ⟨n, p⟩\n  · rintro h ⟨n, p⟩; apply h n p\n\n"}
{"name":"continuous_to_deltaGenerated","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"X : Type u_1\nY : Type u_2\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\ninst✝ : DeltaGeneratedSpace X\nf : X → Y\n⊢ Iff (Continuous f) (Continuous f)","decl":"/-- A map out of a delta-generated space is continuous iff it is continuous with respect\n  to the delta-generated topology on the codomain. -/\nlemma continuous_to_deltaGenerated [DeltaGeneratedSpace X] {f : X → Y} :\n    Continuous[_, deltaGenerated Y] f ↔ Continuous f := by\n  simp_rw [DeltaGeneratedSpace.continuous_iff, continuous_euclidean_to_deltaGenerated]\n\n"}
{"name":"deltaGeneratedSpace_deltaGenerated","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"X : Type u_3\nt : TopologicalSpace X\n⊢ DeltaGeneratedSpace X","decl":"/-- The delta-generated topology on `X` does in fact turn `X` into a delta-generated space. -/\nlemma deltaGeneratedSpace_deltaGenerated {X : Type*} {t : TopologicalSpace X} :\n    @DeltaGeneratedSpace X (@deltaGenerated X t) := by\n  let _ := @deltaGenerated X t; constructor; rw [@deltaGenerated_deltaGenerated_eq X t]\n\n"}
{"name":"deltaGenerated_mono","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"X : Type u_3\nt₁ t₂ : TopologicalSpace X\nh : LE.le t₁ t₂\n⊢ LE.le (TopologicalSpace.deltaGenerated X) (TopologicalSpace.deltaGenerated X)","decl":"lemma deltaGenerated_mono {X : Type*} {t₁ t₂ : TopologicalSpace X} (h : t₁ ≤ t₂) :\n    @deltaGenerated X t₁ ≤ @deltaGenerated X t₂ := by\n  rw [← continuous_id_iff_le, @continuous_to_deltaGenerated _ _\n    (@deltaGenerated X t₁) t₂ deltaGeneratedSpace_deltaGenerated id]\n  exact continuous_id_iff_le.2 <| (@deltaGenerated_le X t₁).trans h\n\n"}
{"name":"DeltaGeneratedSpace.instOf","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"X : Type u_1\ntX : TopologicalSpace X\n⊢ DeltaGeneratedSpace (DeltaGeneratedSpace.of X)","decl":"instance : DeltaGeneratedSpace (of X) :=\n  deltaGeneratedSpace_deltaGenerated\n\n"}
{"name":"DeltaGeneratedSpace.continuous_counit","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"X : Type u_1\ntX : TopologicalSpace X\n⊢ Continuous DeltaGeneratedSpace.counit","decl":"lemma continuous_counit : Continuous (counit : _ → X) := by\n  rw [continuous_iff_coinduced_le]; exact deltaGenerated_le\n\n"}
{"name":"DeltaGeneratedSpace.instLocPathConnectedSpace","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"X : Type u_1\ntX : TopologicalSpace X\ninst✝ : DeltaGeneratedSpace X\n⊢ LocPathConnectedSpace X","decl":"/-- Delta-generated spaces are locally path-connected. -/\ninstance [DeltaGeneratedSpace X] : LocPathConnectedSpace X := by\n  rw [eq_deltaGenerated (X := X), deltaGenerated_eq_coinduced]\n  exact LocPathConnectedSpace.coinduced _\n\n"}
{"name":"DeltaGeneratedSpace.instSequentialSpace","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"X : Type u_1\ntX : TopologicalSpace X\ninst✝ : DeltaGeneratedSpace X\n⊢ SequentialSpace X","decl":"/-- Delta-generated spaces are sequential. -/\ninstance [DeltaGeneratedSpace X] : SequentialSpace X := by\n  rw [eq_deltaGenerated (X := X)]\n  exact SequentialSpace.iSup fun p ↦ SequentialSpace.coinduced p.2\n\n"}
{"name":"DeltaGeneratedSpace.coinduced","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"X : Type u_1\nY : Type u_2\ntX : TopologicalSpace X\ninst✝ : DeltaGeneratedSpace X\nf : X → Y\n⊢ DeltaGeneratedSpace Y","decl":"omit tY in\n/-- Any topology coinduced by a delta-generated topology is delta-generated. -/\nlemma DeltaGeneratedSpace.coinduced [DeltaGeneratedSpace X] (f : X → Y) :\n    @DeltaGeneratedSpace Y (tX.coinduced f) :=\n  let _ := tX.coinduced f\n  ⟨(continuous_to_deltaGenerated.2 continuous_coinduced_rng).coinduced_le⟩\n\n"}
{"name":"DeltaGeneratedSpace.iSup","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"X : Type u_3\nι : Sort u_4\nt : ι → TopologicalSpace X\nh : ∀ (i : ι), DeltaGeneratedSpace X\n⊢ DeltaGeneratedSpace X","decl":"/-- Suprema of delta-generated topologies are delta-generated. -/\nprotected lemma DeltaGeneratedSpace.iSup {X : Type*} {ι : Sort*} {t : ι → TopologicalSpace X}\n    (h : ∀ i, @DeltaGeneratedSpace X (t i)) : @DeltaGeneratedSpace X (⨆ i, t i) :=\n  let _ := ⨆ i, t i\n  ⟨iSup_le_iff.2 fun i ↦ (h i).le_deltaGenerated.trans <| deltaGenerated_mono <| le_iSup t i⟩\n\n"}
{"name":"DeltaGeneratedSpace.sup","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"X : Type u_3\nt₁ t₂ : TopologicalSpace X\nh₁ : DeltaGeneratedSpace X\nh₂ : DeltaGeneratedSpace X\n⊢ DeltaGeneratedSpace X","decl":"/-- Suprema of delta-generated topologies are delta-generated. -/\nprotected lemma DeltaGeneratedSpace.sup {X : Type*} {t₁ t₂ : TopologicalSpace X}\n    (h₁ : @DeltaGeneratedSpace X t₁) (h₂ : @DeltaGeneratedSpace X t₂) :\n    @DeltaGeneratedSpace X (t₁ ⊔ t₂) := by\n  rw [sup_eq_iSup]\n  exact .iSup <| Bool.forall_bool.2 ⟨h₂, h₁⟩\n\n"}
{"name":"Topology.IsQuotientMap.deltaGeneratedSpace","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"X : Type u_1\nY : Type u_2\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\ninst✝ : DeltaGeneratedSpace X\nf : X → Y\nh : Topology.IsQuotientMap f\n⊢ DeltaGeneratedSpace Y","decl":"/-- Quotients of delta-generated spaces are delta-generated. -/\nlemma Topology.IsQuotientMap.deltaGeneratedSpace [DeltaGeneratedSpace X]\n    {f : X → Y} (h : IsQuotientMap f) : DeltaGeneratedSpace Y :=\n  h.2 ▸ DeltaGeneratedSpace.coinduced f\n\n"}
{"name":"Quot.deltaGeneratedSpace","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"X : Type u_1\ntX : TopologicalSpace X\ninst✝ : DeltaGeneratedSpace X\nr : X → X → Prop\n⊢ DeltaGeneratedSpace (Quot r)","decl":"/-- Quotients of delta-generated spaces are delta-generated. -/\ninstance Quot.deltaGeneratedSpace [DeltaGeneratedSpace X] {r : X → X → Prop} :\n    DeltaGeneratedSpace (Quot r) :=\n  isQuotientMap_quot_mk.deltaGeneratedSpace\n\n"}
{"name":"Quotient.deltaGeneratedSpace","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"X : Type u_1\ntX : TopologicalSpace X\ninst✝ : DeltaGeneratedSpace X\ns : Setoid X\n⊢ DeltaGeneratedSpace (Quotient s)","decl":"/-- Quotients of delta-generated spaces are delta-generated. -/\ninstance Quotient.deltaGeneratedSpace [DeltaGeneratedSpace X] {s : Setoid X} :\n    DeltaGeneratedSpace (Quotient s) :=\n  isQuotientMap_quotient_mk'.deltaGeneratedSpace\n\n"}
{"name":"Sum.deltaGeneratedSpace","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"X : Type u_1\nY : Type u_2\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\ninst✝¹ : DeltaGeneratedSpace X\ninst✝ : DeltaGeneratedSpace Y\n⊢ DeltaGeneratedSpace (Sum X Y)","decl":"/-- Disjoint unions of delta-generated spaces are delta-generated. -/\ninstance Sum.deltaGeneratedSpace [DeltaGeneratedSpace X] [DeltaGeneratedSpace Y] :\n    DeltaGeneratedSpace (X ⊕ Y) :=\n  DeltaGeneratedSpace.sup (.coinduced Sum.inl) (.coinduced Sum.inr)\n\n"}
{"name":"Sigma.deltaGeneratedSpace","module":"Mathlib.Topology.Compactness.DeltaGeneratedSpace","initialProofState":"ι : Type u_3\nX : ι → Type u_4\ninst✝¹ : (i : ι) → TopologicalSpace (X i)\ninst✝ : ∀ (i : ι), DeltaGeneratedSpace (X i)\n⊢ DeltaGeneratedSpace (Sigma fun i => X i)","decl":"/-- Disjoint unions of delta-generated spaces are delta-generated. -/\ninstance Sigma.deltaGeneratedSpace {ι : Type*} {X : ι → Type*} [∀ i, TopologicalSpace (X i)]\n    [∀ i, DeltaGeneratedSpace (X i)] : DeltaGeneratedSpace (Σ i, X i) :=\n  .iSup fun _ ↦ .coinduced _\n"}
