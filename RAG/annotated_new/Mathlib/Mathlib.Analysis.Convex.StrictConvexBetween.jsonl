{"name":"Sbtw.dist_lt_max_dist","module":"Mathlib.Analysis.Convex.StrictConvexBetween","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝⁴ : NormedAddCommGroup V\ninst✝³ : NormedSpace Real V\ninst✝² : StrictConvexSpace Real V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\np p₁ p₂ p₃ : P\nh : Sbtw Real p₁ p₂ p₃\n⊢ LT.lt (Dist.dist p₂ p) (Max.max (Dist.dist p₁ p) (Dist.dist p₃ p))","decl":"theorem Sbtw.dist_lt_max_dist (p : P) {p₁ p₂ p₃ : P} (h : Sbtw ℝ p₁ p₂ p₃) :\n    dist p₂ p < max (dist p₁ p) (dist p₃ p) := by\n  have hp₁p₃ : p₁ -ᵥ p ≠ p₃ -ᵥ p := by simpa using h.left_ne_right\n  rw [Sbtw, ← wbtw_vsub_const_iff p, Wbtw, affineSegment_eq_segment, ← insert_endpoints_openSegment,\n    Set.mem_insert_iff, Set.mem_insert_iff] at h\n  rcases h with ⟨h | h | h, hp₂p₁, hp₂p₃⟩\n  · rw [vsub_left_cancel_iff] at h\n    exact False.elim (hp₂p₁ h)\n  · rw [vsub_left_cancel_iff] at h\n    exact False.elim (hp₂p₃ h)\n  · rw [openSegment_eq_image, Set.mem_image] at h\n    rcases h with ⟨r, ⟨hr0, hr1⟩, hr⟩\n    simp_rw [@dist_eq_norm_vsub V, ← hr]\n    exact\n      norm_combo_lt_of_ne (le_max_left _ _) (le_max_right _ _) hp₁p₃ (sub_pos.2 hr1) hr0 (by abel)\n\n"}
{"name":"Wbtw.dist_le_max_dist","module":"Mathlib.Analysis.Convex.StrictConvexBetween","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝⁴ : NormedAddCommGroup V\ninst✝³ : NormedSpace Real V\ninst✝² : StrictConvexSpace Real V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\np p₁ p₂ p₃ : P\nh : Wbtw Real p₁ p₂ p₃\n⊢ LE.le (Dist.dist p₂ p) (Max.max (Dist.dist p₁ p) (Dist.dist p₃ p))","decl":"theorem Wbtw.dist_le_max_dist (p : P) {p₁ p₂ p₃ : P} (h : Wbtw ℝ p₁ p₂ p₃) :\n    dist p₂ p ≤ max (dist p₁ p) (dist p₃ p) := by\n  by_cases hp₁ : p₂ = p₁; · simp [hp₁]\n  by_cases hp₃ : p₂ = p₃; · simp [hp₃]\n  have hs : Sbtw ℝ p₁ p₂ p₃ := ⟨h, hp₁, hp₃⟩\n  exact (hs.dist_lt_max_dist _).le\n\n"}
{"name":"Collinear.wbtw_of_dist_eq_of_dist_le","module":"Mathlib.Analysis.Convex.StrictConvexBetween","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝⁴ : NormedAddCommGroup V\ninst✝³ : NormedSpace Real V\ninst✝² : StrictConvexSpace Real V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\np p₁ p₂ p₃ : P\nr : Real\nh : Collinear Real (Insert.insert p₁ (Insert.insert p₂ (Singleton.singleton p₃)))\nhp₁ : Eq (Dist.dist p₁ p) r\nhp₂ : LE.le (Dist.dist p₂ p) r\nhp₃ : Eq (Dist.dist p₃ p) r\nhp₁p₃ : Ne p₁ p₃\n⊢ Wbtw Real p₁ p₂ p₃","decl":"/-- Given three collinear points, two (not equal) with distance `r` from `p` and one with\ndistance at most `r` from `p`, the third point is weakly between the other two points. -/\ntheorem Collinear.wbtw_of_dist_eq_of_dist_le {p p₁ p₂ p₃ : P} {r : ℝ}\n    (h : Collinear ℝ ({p₁, p₂, p₃} : Set P)) (hp₁ : dist p₁ p = r) (hp₂ : dist p₂ p ≤ r)\n    (hp₃ : dist p₃ p = r) (hp₁p₃ : p₁ ≠ p₃) : Wbtw ℝ p₁ p₂ p₃ := by\n  rcases h.wbtw_or_wbtw_or_wbtw with (hw | hw | hw)\n  · exact hw\n  · by_cases hp₃p₂ : p₃ = p₂\n    · simp [hp₃p₂]\n    have hs : Sbtw ℝ p₂ p₃ p₁ := ⟨hw, hp₃p₂, hp₁p₃.symm⟩\n    have hs' := hs.dist_lt_max_dist p\n    rw [hp₁, hp₃, lt_max_iff, lt_self_iff_false, or_false] at hs'\n    exact False.elim (hp₂.not_lt hs')\n  · by_cases hp₁p₂ : p₁ = p₂\n    · simp [hp₁p₂]\n    have hs : Sbtw ℝ p₃ p₁ p₂ := ⟨hw, hp₁p₃, hp₁p₂⟩\n    have hs' := hs.dist_lt_max_dist p\n    rw [hp₁, hp₃, lt_max_iff, lt_self_iff_false, false_or] at hs'\n    exact False.elim (hp₂.not_lt hs')\n\n"}
{"name":"Collinear.sbtw_of_dist_eq_of_dist_lt","module":"Mathlib.Analysis.Convex.StrictConvexBetween","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝⁴ : NormedAddCommGroup V\ninst✝³ : NormedSpace Real V\ninst✝² : StrictConvexSpace Real V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\np p₁ p₂ p₃ : P\nr : Real\nh : Collinear Real (Insert.insert p₁ (Insert.insert p₂ (Singleton.singleton p₃)))\nhp₁ : Eq (Dist.dist p₁ p) r\nhp₂ : LT.lt (Dist.dist p₂ p) r\nhp₃ : Eq (Dist.dist p₃ p) r\nhp₁p₃ : Ne p₁ p₃\n⊢ Sbtw Real p₁ p₂ p₃","decl":"/-- Given three collinear points, two (not equal) with distance `r` from `p` and one with\ndistance less than `r` from `p`, the third point is strictly between the other two points. -/\ntheorem Collinear.sbtw_of_dist_eq_of_dist_lt {p p₁ p₂ p₃ : P} {r : ℝ}\n    (h : Collinear ℝ ({p₁, p₂, p₃} : Set P)) (hp₁ : dist p₁ p = r) (hp₂ : dist p₂ p < r)\n    (hp₃ : dist p₃ p = r) (hp₁p₃ : p₁ ≠ p₃) : Sbtw ℝ p₁ p₂ p₃ := by\n  refine ⟨h.wbtw_of_dist_eq_of_dist_le hp₁ hp₂.le hp₃ hp₁p₃, ?_, ?_⟩\n  · rintro rfl\n    exact hp₂.ne hp₁\n  · rintro rfl\n    exact hp₂.ne hp₃\n\n"}
{"name":"dist_add_dist_eq_iff","module":"Mathlib.Analysis.Convex.StrictConvexBetween","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝⁴ : NormedAddCommGroup V\ninst✝³ : NormedSpace Real V\ninst✝² : StrictConvexSpace Real V\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\na b c : P\n⊢ Iff (Eq (HAdd.hAdd (Dist.dist a b) (Dist.dist b c)) (Dist.dist a c)) (Wbtw Real a b c)","decl":"/-- In a strictly convex space, the triangle inequality turns into an equality if and only if the\nmiddle point belongs to the segment joining two other points. -/\nlemma dist_add_dist_eq_iff : dist a b + dist b c = dist a c ↔ Wbtw ℝ a b c := by\n  have :\n      dist (a -ᵥ a) (b -ᵥ a) + dist (b -ᵥ a) (c -ᵥ a) = dist (a -ᵥ a) (c -ᵥ a) ↔\n        b -ᵥ a ∈ segment ℝ (a -ᵥ a) (c -ᵥ a) := by\n    simp only [mem_segment_iff_sameRay, sameRay_iff_norm_add, dist_eq_norm', sub_add_sub_cancel',\n      eq_comm]\n  simp_rw [dist_vsub_cancel_right, ← affineSegment_eq_segment, ← affineSegment_vsub_const_image]\n    at this\n  rwa [(vsub_left_injective _).mem_set_image] at this\n\n"}
{"name":"eq_lineMap_of_dist_eq_mul_of_dist_eq_mul","module":"Mathlib.Analysis.Convex.StrictConvexBetween","initialProofState":"E : Type u_3\nPE : Type u_5\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : StrictConvexSpace Real E\ninst✝¹ : MetricSpace PE\ninst✝ : NormedAddTorsor E PE\nr : Real\nx y z : PE\nhxy : Eq (Dist.dist x y) (HMul.hMul r (Dist.dist x z))\nhyz : Eq (Dist.dist y z) (HMul.hMul (HSub.hSub 1 r) (Dist.dist x z))\n⊢ Eq y ((AffineMap.lineMap x z) r)","decl":"lemma eq_lineMap_of_dist_eq_mul_of_dist_eq_mul (hxy : dist x y = r * dist x z)\n    (hyz : dist y z = (1 - r) * dist x z) : y = AffineMap.lineMap x z r := by\n  have : y -ᵥ x ∈ [(0 : E) -[ℝ] z -ᵥ x] := by\n    rw [mem_segment_iff_wbtw, ← dist_add_dist_eq_iff, dist_zero, dist_vsub_cancel_right,\n      ← dist_eq_norm_vsub', ← dist_eq_norm_vsub', hxy, hyz, ← add_mul, add_sub_cancel,\n      one_mul]\n  obtain rfl | hne := eq_or_ne x z\n  · obtain rfl : y = x := by simpa\n    simp\n  · rw [← dist_ne_zero] at hne\n    obtain ⟨a, b, _, hb, _, H⟩ := this\n    rw [smul_zero, zero_add] at H\n    have H' := congr_arg norm H\n    rw [norm_smul, Real.norm_of_nonneg hb, ← dist_eq_norm_vsub', ← dist_eq_norm_vsub', hxy,\n      mul_left_inj' hne] at H'\n    rw [AffineMap.lineMap_apply, ← H', H, vsub_vadd]\n\n"}
{"name":"eq_midpoint_of_dist_eq_half","module":"Mathlib.Analysis.Convex.StrictConvexBetween","initialProofState":"E : Type u_3\nPE : Type u_5\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : StrictConvexSpace Real E\ninst✝¹ : MetricSpace PE\ninst✝ : NormedAddTorsor E PE\nx y z : PE\nhx : Eq (Dist.dist x y) (HDiv.hDiv (Dist.dist x z) 2)\nhy : Eq (Dist.dist y z) (HDiv.hDiv (Dist.dist x z) 2)\n⊢ Eq y (midpoint Real x z)","decl":"lemma eq_midpoint_of_dist_eq_half (hx : dist x y = dist x z / 2) (hy : dist y z = dist x z / 2) :\n    y = midpoint ℝ x z := by\n  apply eq_lineMap_of_dist_eq_mul_of_dist_eq_mul\n  · rwa [invOf_eq_inv, ← div_eq_inv_mul]\n  · rwa [invOf_eq_inv, ← one_div, sub_half, one_div, ← div_eq_inv_mul]\n\n"}
{"name":"Isometry.coe_affineIsometryOfStrictConvexSpace","module":"Mathlib.Analysis.Convex.StrictConvexBetween","initialProofState":"E : Type u_3\nF : Type u_4\nPE : Type u_5\nPF : Type u_6\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace Real E\ninst✝⁵ : NormedSpace Real F\ninst✝⁴ : StrictConvexSpace Real E\ninst✝³ : MetricSpace PE\ninst✝² : MetricSpace PF\ninst✝¹ : NormedAddTorsor E PE\ninst✝ : NormedAddTorsor F PF\nf : PF → PE\nhi : Isometry f\n⊢ Eq (⇑hi.affineIsometryOfStrictConvexSpace) f","decl":"@[simp] lemma coe_affineIsometryOfStrictConvexSpace (hi : Isometry f) :\n    ⇑hi.affineIsometryOfStrictConvexSpace = f := rfl\n\n"}
{"name":"Isometry.affineIsometryOfStrictConvexSpace_apply","module":"Mathlib.Analysis.Convex.StrictConvexBetween","initialProofState":"E : Type u_3\nF : Type u_4\nPE : Type u_5\nPF : Type u_6\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace Real E\ninst✝⁵ : NormedSpace Real F\ninst✝⁴ : StrictConvexSpace Real E\ninst✝³ : MetricSpace PE\ninst✝² : MetricSpace PF\ninst✝¹ : NormedAddTorsor E PE\ninst✝ : NormedAddTorsor F PF\nf : PF → PE\nhi : Isometry f\np : PF\n⊢ Eq (hi.affineIsometryOfStrictConvexSpace p) (f p)","decl":"@[simp] lemma affineIsometryOfStrictConvexSpace_apply (hi : Isometry f) (p : PF) :\n    hi.affineIsometryOfStrictConvexSpace p = f p := rfl\n\n"}
