{"name":"equivShrink_symm_zero","module":"Mathlib.Algebra.Small.Group","initialProofState":"α : Type u_1\ninst✝¹ : Zero α\ninst✝ : Small.{u_2, u_1} α\n⊢ Eq ((equivShrink α).symm 0) 0","decl":"@[to_additive (attr := simp)]\nlemma equivShrink_symm_one [One α] [Small α] : (equivShrink α).symm 1 = 1 :=\n  (equivShrink α).symm_apply_apply 1\n\n-- TODO: noncomputable has to be specified explicitly. https://github.com/leanprover-community/mathlib4/issues/1074 (item 8)\n"}
{"name":"equivShrink_symm_one","module":"Mathlib.Algebra.Small.Group","initialProofState":"α : Type u_1\ninst✝¹ : One α\ninst✝ : Small.{u_2, u_1} α\n⊢ Eq ((equivShrink α).symm 1) 1","decl":"@[to_additive (attr := simp)]\nlemma equivShrink_symm_one [One α] [Small α] : (equivShrink α).symm 1 = 1 :=\n  (equivShrink α).symm_apply_apply 1\n\n-- TODO: noncomputable has to be specified explicitly. https://github.com/leanprover-community/mathlib4/issues/1074 (item 8)\n"}
{"name":"equivShrink_symm_add","module":"Mathlib.Algebra.Small.Group","initialProofState":"α : Type u_1\ninst✝¹ : Add α\ninst✝ : Small.{u_2, u_1} α\nx y : Shrink.{u_2, u_1} α\n⊢ Eq ((equivShrink α).symm (HAdd.hAdd x y)) (HAdd.hAdd ((equivShrink α).symm x) ((equivShrink α).symm y))","decl":"@[to_additive (attr := simp)]\nlemma equivShrink_symm_mul [Mul α] [Small α] (x y : Shrink α) :\n    (equivShrink α).symm (x * y) = (equivShrink α).symm x * (equivShrink α).symm y := by\n  rw [Equiv.mul_def]\n  simp\n\n"}
{"name":"equivShrink_symm_mul","module":"Mathlib.Algebra.Small.Group","initialProofState":"α : Type u_1\ninst✝¹ : Mul α\ninst✝ : Small.{u_2, u_1} α\nx y : Shrink.{u_2, u_1} α\n⊢ Eq ((equivShrink α).symm (HMul.hMul x y)) (HMul.hMul ((equivShrink α).symm x) ((equivShrink α).symm y))","decl":"@[to_additive (attr := simp)]\nlemma equivShrink_symm_mul [Mul α] [Small α] (x y : Shrink α) :\n    (equivShrink α).symm (x * y) = (equivShrink α).symm x * (equivShrink α).symm y := by\n  rw [Equiv.mul_def]\n  simp\n\n"}
{"name":"equivShrink_add","module":"Mathlib.Algebra.Small.Group","initialProofState":"α : Type u_1\ninst✝¹ : Add α\ninst✝ : Small.{u_2, u_1} α\nx y : α\n⊢ Eq ((equivShrink α) (HAdd.hAdd x y)) (HAdd.hAdd ((equivShrink α) x) ((equivShrink α) y))","decl":"@[to_additive (attr := simp)]\nlemma equivShrink_mul [Mul α] [Small α] (x y : α) :\n    equivShrink α (x * y) = equivShrink α x * equivShrink α y := by\n  rw [Equiv.mul_def]\n  simp\n\n"}
{"name":"equivShrink_mul","module":"Mathlib.Algebra.Small.Group","initialProofState":"α : Type u_1\ninst✝¹ : Mul α\ninst✝ : Small.{u_2, u_1} α\nx y : α\n⊢ Eq ((equivShrink α) (HMul.hMul x y)) (HMul.hMul ((equivShrink α) x) ((equivShrink α) y))","decl":"@[to_additive (attr := simp)]\nlemma equivShrink_mul [Mul α] [Small α] (x y : α) :\n    equivShrink α (x * y) = equivShrink α x * equivShrink α y := by\n  rw [Equiv.mul_def]\n  simp\n\n"}
{"name":"equivShrink_symm_smul","module":"Mathlib.Algebra.Small.Group","initialProofState":"α : Type u_1\nR : Type u_2\ninst✝¹ : SMul R α\ninst✝ : Small.{u_3, u_1} α\nr : R\nx : Shrink.{u_3, u_1} α\n⊢ Eq ((equivShrink α).symm (HSMul.hSMul r x)) (HSMul.hSMul r ((equivShrink α).symm x))","decl":"@[simp]\nlemma equivShrink_symm_smul {R : Type*} [SMul R α] [Small α] (r : R) (x : Shrink α) :\n    (equivShrink α).symm (r • x) = r • (equivShrink α).symm x := by\n  rw [Equiv.smul_def]\n  simp\n\n"}
{"name":"equivShrink_smul","module":"Mathlib.Algebra.Small.Group","initialProofState":"α : Type u_1\nR : Type u_2\ninst✝¹ : SMul R α\ninst✝ : Small.{u_3, u_1} α\nr : R\nx : α\n⊢ Eq ((equivShrink α) (HSMul.hSMul r x)) (HSMul.hSMul r ((equivShrink α) x))","decl":"@[simp]\nlemma equivShrink_smul {R : Type*} [SMul R α] [Small α] (r : R) (x : α) :\n    equivShrink α (r • x) = r • equivShrink α x := by\n  rw [Equiv.smul_def]\n  simp\n\n-- TODO: noncomputable has to be specified explicitly. https://github.com/leanprover-community/mathlib4/issues/1074 (item 8)\n"}
{"name":"equivShrink_symm_sub","module":"Mathlib.Algebra.Small.Group","initialProofState":"α : Type u_1\ninst✝¹ : Sub α\ninst✝ : Small.{u_2, u_1} α\nx y : Shrink.{u_2, u_1} α\n⊢ Eq ((equivShrink α).symm (HSub.hSub x y)) (HSub.hSub ((equivShrink α).symm x) ((equivShrink α).symm y))","decl":"@[to_additive (attr := simp)]\nlemma equivShrink_symm_div [Div α] [Small α] (x y : Shrink α) :\n    (equivShrink α).symm (x / y) = (equivShrink α).symm x / (equivShrink α).symm y := by\n  rw [Equiv.div_def]\n  simp\n\n"}
{"name":"equivShrink_symm_div","module":"Mathlib.Algebra.Small.Group","initialProofState":"α : Type u_1\ninst✝¹ : Div α\ninst✝ : Small.{u_2, u_1} α\nx y : Shrink.{u_2, u_1} α\n⊢ Eq ((equivShrink α).symm (HDiv.hDiv x y)) (HDiv.hDiv ((equivShrink α).symm x) ((equivShrink α).symm y))","decl":"@[to_additive (attr := simp)]\nlemma equivShrink_symm_div [Div α] [Small α] (x y : Shrink α) :\n    (equivShrink α).symm (x / y) = (equivShrink α).symm x / (equivShrink α).symm y := by\n  rw [Equiv.div_def]\n  simp\n\n"}
{"name":"equivShrink_sub","module":"Mathlib.Algebra.Small.Group","initialProofState":"α : Type u_1\ninst✝¹ : Sub α\ninst✝ : Small.{u_2, u_1} α\nx y : α\n⊢ Eq ((equivShrink α) (HSub.hSub x y)) (HSub.hSub ((equivShrink α) x) ((equivShrink α) y))","decl":"@[to_additive (attr := simp)]\nlemma equivShrink_div [Div α] [Small α] (x y : α) :\n    equivShrink α (x / y) = equivShrink α x / equivShrink α y := by\n  rw [Equiv.div_def]\n  simp\n\n-- TODO: noncomputable has to be specified explicitly. https://github.com/leanprover-community/mathlib4/issues/1074 (item 8)\n"}
{"name":"equivShrink_div","module":"Mathlib.Algebra.Small.Group","initialProofState":"α : Type u_1\ninst✝¹ : Div α\ninst✝ : Small.{u_2, u_1} α\nx y : α\n⊢ Eq ((equivShrink α) (HDiv.hDiv x y)) (HDiv.hDiv ((equivShrink α) x) ((equivShrink α) y))","decl":"@[to_additive (attr := simp)]\nlemma equivShrink_div [Div α] [Small α] (x y : α) :\n    equivShrink α (x / y) = equivShrink α x / equivShrink α y := by\n  rw [Equiv.div_def]\n  simp\n\n-- TODO: noncomputable has to be specified explicitly. https://github.com/leanprover-community/mathlib4/issues/1074 (item 8)\n"}
{"name":"equivShrink_symm_inv","module":"Mathlib.Algebra.Small.Group","initialProofState":"α : Type u_1\ninst✝¹ : Inv α\ninst✝ : Small.{u_2, u_1} α\nx : Shrink.{u_2, u_1} α\n⊢ Eq ((equivShrink α).symm (Inv.inv x)) (Inv.inv ((equivShrink α).symm x))","decl":"@[to_additive (attr := simp)]\nlemma equivShrink_symm_inv [Inv α] [Small α] (x : Shrink α) :\n    (equivShrink α).symm x⁻¹ = ((equivShrink α).symm x)⁻¹ := by\n  rw [Equiv.inv_def]\n  simp\n\n"}
{"name":"equivShrink_symm_neg","module":"Mathlib.Algebra.Small.Group","initialProofState":"α : Type u_1\ninst✝¹ : Neg α\ninst✝ : Small.{u_2, u_1} α\nx : Shrink.{u_2, u_1} α\n⊢ Eq ((equivShrink α).symm (Neg.neg x)) (Neg.neg ((equivShrink α).symm x))","decl":"@[to_additive (attr := simp)]\nlemma equivShrink_symm_inv [Inv α] [Small α] (x : Shrink α) :\n    (equivShrink α).symm x⁻¹ = ((equivShrink α).symm x)⁻¹ := by\n  rw [Equiv.inv_def]\n  simp\n\n"}
{"name":"equivShrink_inv","module":"Mathlib.Algebra.Small.Group","initialProofState":"α : Type u_1\ninst✝¹ : Inv α\ninst✝ : Small.{u_2, u_1} α\nx : α\n⊢ Eq ((equivShrink α) (Inv.inv x)) (Inv.inv ((equivShrink α) x))","decl":"@[to_additive (attr := simp)]\nlemma equivShrink_inv [Inv α] [Small α] (x : α) :\n    equivShrink α x⁻¹ = (equivShrink α x)⁻¹ := by\n  rw [Equiv.inv_def]\n  simp\n\n-- TODO: noncomputable has to be specified explicitly. https://github.com/leanprover-community/mathlib4/issues/1074 (item 8)\n"}
{"name":"equivShrink_neg","module":"Mathlib.Algebra.Small.Group","initialProofState":"α : Type u_1\ninst✝¹ : Neg α\ninst✝ : Small.{u_2, u_1} α\nx : α\n⊢ Eq ((equivShrink α) (Neg.neg x)) (Neg.neg ((equivShrink α) x))","decl":"@[to_additive (attr := simp)]\nlemma equivShrink_inv [Inv α] [Small α] (x : α) :\n    equivShrink α x⁻¹ = (equivShrink α x)⁻¹ := by\n  rw [Equiv.inv_def]\n  simp\n\n-- TODO: noncomputable has to be specified explicitly. https://github.com/leanprover-community/mathlib4/issues/1074 (item 8)\n"}
