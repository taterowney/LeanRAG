{"name":"LSeries.hasDerivAt_term","module":"Mathlib.NumberTheory.LSeries.Deriv","initialProofState":"f : Nat → Complex\nn : Nat\ns : Complex\n⊢ HasDerivAt (fun z => LSeries.term f z n) (Neg.neg (LSeries.term (LSeries.logMul f) s n)) s","decl":"/-- The derivative of the terms of an L-series. -/\nlemma LSeries.hasDerivAt_term (f : ℕ → ℂ) (n : ℕ) (s : ℂ) :\n    HasDerivAt (fun z ↦ term f z n) (-(term (logMul f) s n)) s := by\n  rcases eq_or_ne n 0 with rfl | hn\n  · simp [hasDerivAt_const]\n  simp_rw [term_of_ne_zero hn, ← neg_div, ← neg_mul, mul_comm, mul_div_assoc, div_eq_mul_inv,\n    ← cpow_neg]\n  exact HasDerivAt.const_mul (f n) (by simpa only [mul_comm, ← mul_neg_one (log n), ← mul_assoc]\n    using (hasDerivAt_neg' s).const_cpow (Or.inl <| Nat.cast_ne_zero.mpr hn))\n\n/- This lemma proves two things at once, since their proofs are intertwined; we give separate\nnon-private lemmas below that extract the two statements. -/\n"}
{"name":"LSeries_hasDerivAt","module":"Mathlib.NumberTheory.LSeries.Deriv","initialProofState":"f : Nat → Complex\ns : Complex\nh : LT.lt (LSeries.abscissaOfAbsConv f) ↑s.re\n⊢ HasDerivAt (LSeries f) (Neg.neg (LSeries (LSeries.logMul f) s)) s","decl":"/-- If `re s` is greater than the abscissa of absolute convergence of `f`, then the L-series\nof `f` is differentiable with derivative the negative of the L-series of the point-wise\nproduct of `log` with `f`. -/\nlemma LSeries_hasDerivAt {f : ℕ → ℂ} {s : ℂ} (h : abscissaOfAbsConv f < s.re) :\n    HasDerivAt (LSeries f) (- LSeries (logMul f) s) s :=\n  (LSeriesSummable_logMul_and_hasDerivAt h).2\n\n"}
{"name":"LSeries_deriv","module":"Mathlib.NumberTheory.LSeries.Deriv","initialProofState":"f : Nat → Complex\ns : Complex\nh : LT.lt (LSeries.abscissaOfAbsConv f) ↑s.re\n⊢ Eq (deriv (LSeries f) s) (Neg.neg (LSeries (LSeries.logMul f) s))","decl":"/-- If `re s` is greater than the abscissa of absolute convergence of `f`, then\nthe derivative of this L-series at `s` is the negative of the L-series of `log * f`. -/\nlemma LSeries_deriv {f : ℕ → ℂ} {s : ℂ} (h : abscissaOfAbsConv f < s.re) :\n    deriv (LSeries f) s = - LSeries (logMul f) s :=\n  (LSeries_hasDerivAt h).deriv\n\n"}
{"name":"LSeries_deriv_eqOn","module":"Mathlib.NumberTheory.LSeries.Deriv","initialProofState":"f : Nat → Complex\n⊢ Set.EqOn (deriv (LSeries f)) (Neg.neg (LSeries (LSeries.logMul f))) (setOf fun s => LT.lt (LSeries.abscissaOfAbsConv f) ↑s.re)","decl":"/-- The derivative of the L-series of `f` agrees with the negative of the L-series of\n`log * f` on the right half-plane of absolute convergence. -/\nlemma LSeries_deriv_eqOn {f : ℕ → ℂ} :\n    {s | abscissaOfAbsConv f < s.re}.EqOn (deriv (LSeries f)) (- LSeries (logMul f)) :=\n  deriv_eqOn (isOpen_re_gt_EReal _) fun _ hs ↦ (LSeries_hasDerivAt hs).hasDerivWithinAt\n\n"}
{"name":"LSeriesSummable_logMul_of_lt_re","module":"Mathlib.NumberTheory.LSeries.Deriv","initialProofState":"f : Nat → Complex\ns : Complex\nh : LT.lt (LSeries.abscissaOfAbsConv f) ↑s.re\n⊢ LSeriesSummable (LSeries.logMul f) s","decl":"/-- If the L-series of `f` is summable at `s` and `re s < re s'`, then the L-series of the\npoint-wise product of `log` with `f` is summable at `s'`. -/\nlemma LSeriesSummable_logMul_of_lt_re {f : ℕ → ℂ} {s : ℂ} (h : abscissaOfAbsConv f < s.re) :\n    LSeriesSummable (logMul f) s :=\n  (LSeriesSummable_logMul_and_hasDerivAt h).1\n\n"}
{"name":"LSeries.abscissaOfAbsConv_logMul","module":"Mathlib.NumberTheory.LSeries.Deriv","initialProofState":"f : Nat → Complex\n⊢ Eq (LSeries.abscissaOfAbsConv (LSeries.logMul f)) (LSeries.abscissaOfAbsConv f)","decl":"/-- The abscissa of absolute convergence of the point-wise product of `log` and `f`\nis the same as that of `f`. -/\n@[simp]\nlemma LSeries.abscissaOfAbsConv_logMul {f : ℕ → ℂ} :\n    abscissaOfAbsConv (logMul f) = abscissaOfAbsConv f := by\n  apply le_antisymm <;> refine abscissaOfAbsConv_le_of_forall_lt_LSeriesSummable' fun s hs ↦ ?_\n  · exact LSeriesSummable_logMul_of_lt_re <| by simp [hs]\n  · refine (LSeriesSummable_of_abscissaOfAbsConv_lt_re <| by simp [hs])\n      |>.norm.of_norm_bounded_eventually_nat (‖term (logMul f) s ·‖) ?_\n    filter_upwards [Filter.eventually_ge_atTop <| max 1 (Nat.ceil (Real.exp 1))] with n hn\n    simp only [term_of_ne_zero (show n ≠ 0 by omega), logMul, norm_mul, mul_div_assoc,\n      ← natCast_log, norm_real]\n    refine le_mul_of_one_le_left (norm_nonneg _) (.trans ?_ <| Real.le_norm_self _)\n    simpa using Real.log_le_log (Real.exp_pos 1) <| Nat.ceil_le.mp <| (le_max_right _ _).trans hn\n\n"}
{"name":"LSeries.absicssaOfAbsConv_logPowMul","module":"Mathlib.NumberTheory.LSeries.Deriv","initialProofState":"f : Nat → Complex\nm : Nat\n⊢ Eq (LSeries.abscissaOfAbsConv (Nat.iterate LSeries.logMul m f)) (LSeries.abscissaOfAbsConv f)","decl":"/-- The abscissa of absolute convergence of the point-wise product of a power of `log` and `f`\nis the same as that of `f`. -/\n@[simp]\nlemma LSeries.absicssaOfAbsConv_logPowMul {f : ℕ → ℂ} {m : ℕ} :\n    abscissaOfAbsConv (logMul^[m] f) = abscissaOfAbsConv f := by\n  induction m with\n  | zero => simp\n  | succ n ih => simp [ih, Function.iterate_succ', Function.comp_def,\n      -Function.comp_apply, -Function.iterate_succ]\n\n"}
{"name":"LSeries_iteratedDeriv","module":"Mathlib.NumberTheory.LSeries.Deriv","initialProofState":"f : Nat → Complex\nm : Nat\ns : Complex\nh : LT.lt (LSeries.abscissaOfAbsConv f) ↑s.re\n⊢ Eq (iteratedDeriv m (LSeries f) s) (HMul.hMul (HPow.hPow (-1) m) (LSeries (Nat.iterate LSeries.logMul m f) s))","decl":"/-- If `re s` is greater than the abscissa of absolute convergence of `f`, then\nthe `m`th derivative of this L-series is `(-1)^m` times the L-series of `log^m * f`. -/\nlemma LSeries_iteratedDeriv {f : ℕ → ℂ} (m : ℕ) {s : ℂ} (h : abscissaOfAbsConv f < s.re) :\n    iteratedDeriv m (LSeries f) s = (-1) ^ m * LSeries (logMul^[m] f) s := by\n  induction' m with m ih generalizing s\n  · simp\n  · have ih' : {s | abscissaOfAbsConv f < re s}.EqOn (iteratedDeriv m (LSeries f))\n        ((-1) ^ m * LSeries (logMul^[m] f)) := fun _ hs ↦ ih hs\n    have := derivWithin_congr ih' (ih h)\n    simp_rw [derivWithin_of_isOpen (isOpen_re_gt_EReal _) h] at this\n    rw [iteratedDeriv_succ, this]\n    simp [Pi.mul_def, pow_succ, mul_assoc, Function.iterate_succ', Function.comp_def,\n      LSeries_deriv <| absicssaOfAbsConv_logPowMul.symm ▸ h, -Function.iterate_succ]\n\n"}
{"name":"LSeries_differentiableOn","module":"Mathlib.NumberTheory.LSeries.Deriv","initialProofState":"f : Nat → Complex\n⊢ DifferentiableOn Complex (LSeries f) (setOf fun s => LT.lt (LSeries.abscissaOfAbsConv f) ↑s.re)","decl":"/-- The L-series of `f` is complex differentiable in its open half-plane of absolute\nconvergence. -/\nlemma LSeries_differentiableOn (f : ℕ → ℂ) :\n    DifferentiableOn ℂ (LSeries f) {s | abscissaOfAbsConv f < s.re} :=\n  fun _ hz ↦ (LSeries_hasDerivAt hz).differentiableAt.differentiableWithinAt\n\n"}
{"name":"LSeries_analyticOnNhd","module":"Mathlib.NumberTheory.LSeries.Deriv","initialProofState":"f : Nat → Complex\n⊢ AnalyticOnNhd Complex (LSeries f) (setOf fun s => LT.lt (LSeries.abscissaOfAbsConv f) ↑s.re)","decl":"/-- The L-series of `f` is holomorphic on its open half-plane of absolute convergence. -/\nlemma LSeries_analyticOnNhd (f : ℕ → ℂ) :\n    AnalyticOnNhd ℂ (LSeries f) {s | abscissaOfAbsConv f < s.re} :=\n  (LSeries_differentiableOn f).analyticOnNhd <| isOpen_re_gt_EReal _\n\n"}
{"name":"LSeries_analyticOn","module":"Mathlib.NumberTheory.LSeries.Deriv","initialProofState":"f : Nat → Complex\n⊢ AnalyticOn Complex (LSeries f) (setOf fun s => LT.lt (LSeries.abscissaOfAbsConv f) ↑s.re)","decl":"lemma LSeries_analyticOn (f : ℕ → ℂ) :\n    AnalyticOn ℂ (LSeries f) {s | abscissaOfAbsConv f < s.re} :=\n  (LSeries_analyticOnNhd f).analyticOn\n"}
