{"name":"CategoryTheory.Localization.essSurj_mapComposableArrows_of_hasRightCalculusOfFractions","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions.ComposableArrows","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝³ : CategoryTheory.Category.{u_3, u_1} C\ninst✝² : CategoryTheory.Category.{u_4, u_2} D\nL : CategoryTheory.Functor C D\nW : CategoryTheory.MorphismProperty C\ninst✝¹ : L.IsLocalization W\ninst✝ : W.HasRightCalculusOfFractions\nn : Nat\n⊢ (L.mapComposableArrows n).EssSurj","decl":"lemma essSurj_mapComposableArrows_of_hasRightCalculusOfFractions\n    [W.HasRightCalculusOfFractions] (n : ℕ) :\n    (L.mapComposableArrows n).EssSurj where\n  mem_essImage Y := by\n    have := essSurj L W\n    induction n with\n    | zero =>\n      obtain ⟨Y, rfl⟩ := mk₀_surjective Y\n      exact ⟨mk₀ _, ⟨isoMk₀ (L.objObjPreimageIso Y)⟩⟩\n    | succ n hn =>\n      obtain ⟨Y, Z, f, rfl⟩ := ComposableArrows.precomp_surjective Y\n      obtain ⟨Y', ⟨e⟩⟩ := hn Y\n      obtain ⟨f', hf'⟩ := exists_rightFraction L W\n        ((L.objObjPreimageIso Z).hom ≫ f ≫ (e.app 0).inv)\n      refine ⟨Y'.precomp f'.f,\n        ⟨isoMkSucc (isoOfHom L W _ f'.hs ≪≫ L.objObjPreimageIso Z) e ?_⟩⟩\n      dsimp at hf' ⊢\n      simp [← cancel_mono (e.inv.app 0), hf']\n\n"}
{"name":"CategoryTheory.Localization.essSurj_mapComposableArrows","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions.ComposableArrows","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝³ : CategoryTheory.Category.{u_3, u_1} C\ninst✝² : CategoryTheory.Category.{u_4, u_2} D\nL : CategoryTheory.Functor C D\nW : CategoryTheory.MorphismProperty C\ninst✝¹ : L.IsLocalization W\ninst✝ : W.HasLeftCalculusOfFractions\nn : Nat\n⊢ (L.mapComposableArrows n).EssSurj","decl":"lemma essSurj_mapComposableArrows [W.HasLeftCalculusOfFractions] (n : ℕ) :\n    (L.mapComposableArrows n).EssSurj := by\n  have := essSurj_mapComposableArrows_of_hasRightCalculusOfFractions L.op W.op n\n  have := Functor.essSurj_of_iso (L.mapComposableArrowsOpIso n).symm\n  exact Functor.essSurj_of_comp_fully_faithful _ (opEquivalence D n).functor.rightOp\n\n"}
