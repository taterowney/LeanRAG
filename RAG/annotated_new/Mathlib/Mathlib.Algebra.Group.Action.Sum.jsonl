{"name":"Sum.vadd_def","module":"Mathlib.Algebra.Group.Action.Sum","initialProofState":"M : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝¹ : VAdd M α\ninst✝ : VAdd M β\na : M\nx : Sum α β\n⊢ Eq (HVAdd.hVAdd a x) (Sum.map (fun x => HVAdd.hVAdd a x) (fun x => HVAdd.hVAdd a x) x)","decl":"@[to_additive]\ntheorem smul_def : a • x = x.map (a • ·) (a • ·) :=\n  rfl\n\n"}
{"name":"Sum.smul_def","module":"Mathlib.Algebra.Group.Action.Sum","initialProofState":"M : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝¹ : SMul M α\ninst✝ : SMul M β\na : M\nx : Sum α β\n⊢ Eq (HSMul.hSMul a x) (Sum.map (fun x => HSMul.hSMul a x) (fun x => HSMul.hSMul a x) x)","decl":"@[to_additive]\ntheorem smul_def : a • x = x.map (a • ·) (a • ·) :=\n  rfl\n\n"}
{"name":"Sum.vadd_inl","module":"Mathlib.Algebra.Group.Action.Sum","initialProofState":"M : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝¹ : VAdd M α\ninst✝ : VAdd M β\na : M\nb : α\n⊢ Eq (HVAdd.hVAdd a (Sum.inl b)) (Sum.inl (HVAdd.hVAdd a b))","decl":"@[to_additive (attr := simp)]\ntheorem smul_inl : a • (inl b : α ⊕ β) = inl (a • b) :=\n  rfl\n\n"}
{"name":"Sum.smul_inl","module":"Mathlib.Algebra.Group.Action.Sum","initialProofState":"M : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝¹ : SMul M α\ninst✝ : SMul M β\na : M\nb : α\n⊢ Eq (HSMul.hSMul a (Sum.inl b)) (Sum.inl (HSMul.hSMul a b))","decl":"@[to_additive (attr := simp)]\ntheorem smul_inl : a • (inl b : α ⊕ β) = inl (a • b) :=\n  rfl\n\n"}
{"name":"Sum.vadd_inr","module":"Mathlib.Algebra.Group.Action.Sum","initialProofState":"M : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝¹ : VAdd M α\ninst✝ : VAdd M β\na : M\nc : β\n⊢ Eq (HVAdd.hVAdd a (Sum.inr c)) (Sum.inr (HVAdd.hVAdd a c))","decl":"@[to_additive (attr := simp)]\ntheorem smul_inr : a • (inr c : α ⊕ β) = inr (a • c) :=\n  rfl\n\n"}
{"name":"Sum.smul_inr","module":"Mathlib.Algebra.Group.Action.Sum","initialProofState":"M : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝¹ : SMul M α\ninst✝ : SMul M β\na : M\nc : β\n⊢ Eq (HSMul.hSMul a (Sum.inr c)) (Sum.inr (HSMul.hSMul a c))","decl":"@[to_additive (attr := simp)]\ntheorem smul_inr : a • (inr c : α ⊕ β) = inr (a • c) :=\n  rfl\n\n"}
{"name":"Sum.vadd_swap","module":"Mathlib.Algebra.Group.Action.Sum","initialProofState":"M : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝¹ : VAdd M α\ninst✝ : VAdd M β\na : M\nx : Sum α β\n⊢ Eq (HVAdd.hVAdd a x).swap (HVAdd.hVAdd a x.swap)","decl":"@[to_additive (attr := simp)]\ntheorem smul_swap : (a • x).swap = a • x.swap := by cases x <;> rfl\n\n"}
{"name":"Sum.smul_swap","module":"Mathlib.Algebra.Group.Action.Sum","initialProofState":"M : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝¹ : SMul M α\ninst✝ : SMul M β\na : M\nx : Sum α β\n⊢ Eq (HSMul.hSMul a x).swap (HSMul.hSMul a x.swap)","decl":"@[to_additive (attr := simp)]\ntheorem smul_swap : (a • x).swap = a • x.swap := by cases x <;> rfl\n\n"}
{"name":"Sum.instIsScalarTower","module":"Mathlib.Algebra.Group.Action.Sum","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\nβ : Type u_4\ninst✝⁶ : SMul M α\ninst✝⁵ : SMul M β\ninst✝⁴ : SMul N α\ninst✝³ : SMul N β\ninst✝² : SMul M N\ninst✝¹ : IsScalarTower M N α\ninst✝ : IsScalarTower M N β\n⊢ IsScalarTower M N (Sum α β)","decl":"instance [SMul M N] [IsScalarTower M N α] [IsScalarTower M N β] : IsScalarTower M N (α ⊕ β) :=\n  ⟨fun a b x => by\n    cases x\n    exacts [congr_arg inl (smul_assoc _ _ _), congr_arg inr (smul_assoc _ _ _)]⟩\n\n"}
{"name":"Sum.instVAddCommClass","module":"Mathlib.Algebra.Group.Action.Sum","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\nβ : Type u_4\ninst✝⁵ : VAdd M α\ninst✝⁴ : VAdd M β\ninst✝³ : VAdd N α\ninst✝² : VAdd N β\ninst✝¹ : VAddCommClass M N α\ninst✝ : VAddCommClass M N β\n⊢ VAddCommClass M N (Sum α β)","decl":"@[to_additive]\ninstance [SMulCommClass M N α] [SMulCommClass M N β] : SMulCommClass M N (α ⊕ β) :=\n  ⟨fun a b x => by\n    cases x\n    exacts [congr_arg inl (smul_comm _ _ _), congr_arg inr (smul_comm _ _ _)]⟩\n\n"}
{"name":"Sum.instSMulCommClass","module":"Mathlib.Algebra.Group.Action.Sum","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\nβ : Type u_4\ninst✝⁵ : SMul M α\ninst✝⁴ : SMul M β\ninst✝³ : SMul N α\ninst✝² : SMul N β\ninst✝¹ : SMulCommClass M N α\ninst✝ : SMulCommClass M N β\n⊢ SMulCommClass M N (Sum α β)","decl":"@[to_additive]\ninstance [SMulCommClass M N α] [SMulCommClass M N β] : SMulCommClass M N (α ⊕ β) :=\n  ⟨fun a b x => by\n    cases x\n    exacts [congr_arg inl (smul_comm _ _ _), congr_arg inr (smul_comm _ _ _)]⟩\n\n"}
{"name":"Sum.instIsCentralScalar","module":"Mathlib.Algebra.Group.Action.Sum","initialProofState":"M : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝⁵ : SMul M α\ninst✝⁴ : SMul M β\ninst✝³ : SMul (MulOpposite M) α\ninst✝² : SMul (MulOpposite M) β\ninst✝¹ : IsCentralScalar M α\ninst✝ : IsCentralScalar M β\n⊢ IsCentralScalar M (Sum α β)","decl":"@[to_additive]\ninstance [SMul Mᵐᵒᵖ α] [SMul Mᵐᵒᵖ β] [IsCentralScalar M α] [IsCentralScalar M β] :\n    IsCentralScalar M (α ⊕ β) :=\n  ⟨fun a x => by\n    cases x\n    exacts [congr_arg inl (op_smul_eq_smul _ _), congr_arg inr (op_smul_eq_smul _ _)]⟩\n\n"}
{"name":"Sum.instIsCentralVAdd","module":"Mathlib.Algebra.Group.Action.Sum","initialProofState":"M : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝⁵ : VAdd M α\ninst✝⁴ : VAdd M β\ninst✝³ : VAdd (AddOpposite M) α\ninst✝² : VAdd (AddOpposite M) β\ninst✝¹ : IsCentralVAdd M α\ninst✝ : IsCentralVAdd M β\n⊢ IsCentralVAdd M (Sum α β)","decl":"@[to_additive]\ninstance [SMul Mᵐᵒᵖ α] [SMul Mᵐᵒᵖ β] [IsCentralScalar M α] [IsCentralScalar M β] :\n    IsCentralScalar M (α ⊕ β) :=\n  ⟨fun a x => by\n    cases x\n    exacts [congr_arg inl (op_smul_eq_smul _ _), congr_arg inr (op_smul_eq_smul _ _)]⟩\n\n"}
{"name":"Sum.FaithfulVAddLeft","module":"Mathlib.Algebra.Group.Action.Sum","initialProofState":"M : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝² : VAdd M α\ninst✝¹ : VAdd M β\ninst✝ : FaithfulVAdd M α\n⊢ FaithfulVAdd M (Sum α β)","decl":"@[to_additive]\ninstance FaithfulSMulLeft [FaithfulSMul M α] : FaithfulSMul M (α ⊕ β) :=\n  ⟨fun h => eq_of_smul_eq_smul fun a : α => by injection h (inl a)⟩\n\n"}
{"name":"Sum.FaithfulSMulLeft","module":"Mathlib.Algebra.Group.Action.Sum","initialProofState":"M : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝² : SMul M α\ninst✝¹ : SMul M β\ninst✝ : FaithfulSMul M α\n⊢ FaithfulSMul M (Sum α β)","decl":"@[to_additive]\ninstance FaithfulSMulLeft [FaithfulSMul M α] : FaithfulSMul M (α ⊕ β) :=\n  ⟨fun h => eq_of_smul_eq_smul fun a : α => by injection h (inl a)⟩\n\n"}
{"name":"Sum.FaithfulVAddRight","module":"Mathlib.Algebra.Group.Action.Sum","initialProofState":"M : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝² : VAdd M α\ninst✝¹ : VAdd M β\ninst✝ : FaithfulVAdd M β\n⊢ FaithfulVAdd M (Sum α β)","decl":"@[to_additive]\ninstance FaithfulSMulRight [FaithfulSMul M β] : FaithfulSMul M (α ⊕ β) :=\n  ⟨fun h => eq_of_smul_eq_smul fun b : β => by injection h (inr b)⟩\n\n"}
{"name":"Sum.FaithfulSMulRight","module":"Mathlib.Algebra.Group.Action.Sum","initialProofState":"M : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝² : SMul M α\ninst✝¹ : SMul M β\ninst✝ : FaithfulSMul M β\n⊢ FaithfulSMul M (Sum α β)","decl":"@[to_additive]\ninstance FaithfulSMulRight [FaithfulSMul M β] : FaithfulSMul M (α ⊕ β) :=\n  ⟨fun h => eq_of_smul_eq_smul fun b : β => by injection h (inr b)⟩\n\n"}
