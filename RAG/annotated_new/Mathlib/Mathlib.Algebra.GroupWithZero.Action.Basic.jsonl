{"name":"MulAction.bijective₀","module":"Mathlib.Algebra.GroupWithZero.Action.Basic","initialProofState":"G₀ : Type u_2\nα : Type u_8\ninst✝¹ : GroupWithZero G₀\ninst✝ : MulAction G₀ α\na : G₀\nha : Ne a 0\n⊢ Function.Bijective fun x => HSMul.hSMul a x","decl":"protected lemma MulAction.bijective₀ (ha : a ≠ 0) : Bijective (a • · : α → α) :=\n  MulAction.bijective <| Units.mk0 a ha\n\n"}
{"name":"MulAction.injective₀","module":"Mathlib.Algebra.GroupWithZero.Action.Basic","initialProofState":"G₀ : Type u_2\nα : Type u_8\ninst✝¹ : GroupWithZero G₀\ninst✝ : MulAction G₀ α\na : G₀\nha : Ne a 0\n⊢ Function.Injective fun x => HSMul.hSMul a x","decl":"protected lemma MulAction.injective₀ (ha : a ≠ 0) : Injective (a • · : α → α) :=\n  (MulAction.bijective₀ ha).injective\n\n"}
{"name":"MulAction.surjective₀","module":"Mathlib.Algebra.GroupWithZero.Action.Basic","initialProofState":"G₀ : Type u_2\nα : Type u_8\ninst✝¹ : GroupWithZero G₀\ninst✝ : MulAction G₀ α\na : G₀\nha : Ne a 0\n⊢ Function.Surjective fun x => HSMul.hSMul a x","decl":"protected lemma MulAction.surjective₀ (ha : a ≠ 0) : Surjective (a • · : α → α) :=\n  (MulAction.bijective₀ ha).surjective\n\n"}
{"name":"DistribMulAction.toAddEquiv_symm_apply","module":"Mathlib.Algebra.GroupWithZero.Action.Basic","initialProofState":"G : Type u_1\nA : Type u_3\ninst✝² : Group G\ninst✝¹ : AddMonoid A\ninst✝ : DistribMulAction G A\nx : G\na✝ : A\n⊢ Eq ((DistribMulAction.toAddEquiv A x).symm a✝) (HSMul.hSMul (Inv.inv x) a✝)","decl":"/-- Each element of the group defines an additive monoid isomorphism.\n\nThis is a stronger version of `MulAction.toPerm`. -/\n@[simps (config := { simpRhs := true })]\ndef DistribMulAction.toAddEquiv [DistribMulAction G A] (x : G) : A ≃+ A where\n  __ := toAddMonoidHom A x\n  __ := MulAction.toPermHom G A x\n\n"}
{"name":"DistribMulAction.toAddEquiv_apply","module":"Mathlib.Algebra.GroupWithZero.Action.Basic","initialProofState":"G : Type u_1\nA : Type u_3\ninst✝² : Group G\ninst✝¹ : AddMonoid A\ninst✝ : DistribMulAction G A\nx : G\na✝ : A\n⊢ Eq ((DistribMulAction.toAddEquiv A x) a✝) (HSMul.hSMul x a✝)","decl":"/-- Each element of the group defines an additive monoid isomorphism.\n\nThis is a stronger version of `MulAction.toPerm`. -/\n@[simps (config := { simpRhs := true })]\ndef DistribMulAction.toAddEquiv [DistribMulAction G A] (x : G) : A ≃+ A where\n  __ := toAddMonoidHom A x\n  __ := MulAction.toPermHom G A x\n\n"}
{"name":"DistribMulAction.toAddAut_apply","module":"Mathlib.Algebra.GroupWithZero.Action.Basic","initialProofState":"G : Type u_1\nA : Type u_3\ninst✝² : Group G\ninst✝¹ : AddMonoid A\ninst✝ : DistribMulAction G A\nx : G\n⊢ Eq ((DistribMulAction.toAddAut G A) x) (DistribMulAction.toAddEquiv A x)","decl":"/-- Each element of the group defines an additive monoid isomorphism.\n\nThis is a stronger version of `MulAction.toPermHom`. -/\n@[simps]\ndef DistribMulAction.toAddAut [DistribMulAction G A] : G →* AddAut A where\n  toFun := toAddEquiv _\n  map_one' := AddEquiv.ext (one_smul _)\n  map_mul' _ _ := AddEquiv.ext (mul_smul _ _)\n\n"}
{"name":"smulMonoidWithZeroHom_apply","module":"Mathlib.Algebra.GroupWithZero.Action.Basic","initialProofState":"M₀ : Type u_5\nN₀ : Type u_6\ninst✝⁴ : MonoidWithZero M₀\ninst✝³ : MulZeroOneClass N₀\ninst✝² : MulActionWithZero M₀ N₀\ninst✝¹ : IsScalarTower M₀ N₀ N₀\ninst✝ : SMulCommClass M₀ N₀ N₀\na✝ : Prod M₀ N₀\n⊢ Eq (smulMonoidWithZeroHom a✝) ((↑smulMonoidHom).toFun a✝)","decl":"/-- Scalar multiplication as a monoid homomorphism with zero. -/\n@[simps]\ndef smulMonoidWithZeroHom [MonoidWithZero M₀] [MulZeroOneClass N₀] [MulActionWithZero M₀ N₀]\n    [IsScalarTower M₀ N₀ N₀] [SMulCommClass M₀ N₀ N₀] : M₀ × N₀ →*₀ N₀ :=\n  { smulMonoidHom with map_zero' := smul_zero _ }\n\n"}
{"name":"MulDistribMulAction.toMulEquiv_apply","module":"Mathlib.Algebra.GroupWithZero.Action.Basic","initialProofState":"G : Type u_1\nM : Type u_4\ninst✝² : Group G\ninst✝¹ : Monoid M\ninst✝ : MulDistribMulAction G M\nx : G\na✝ : M\n⊢ Eq ((MulDistribMulAction.toMulEquiv M x) a✝) (HSMul.hSMul x a✝)","decl":"/-- Each element of the group defines a multiplicative monoid isomorphism.\n\nThis is a stronger version of `MulAction.toPerm`. -/\n@[simps (config := { simpRhs := true })]\ndef MulDistribMulAction.toMulEquiv (x : G) : M ≃* M :=\n  { MulDistribMulAction.toMonoidHom M x, MulAction.toPermHom G M x with }\n\n"}
{"name":"MulDistribMulAction.toMulEquiv_symm_apply","module":"Mathlib.Algebra.GroupWithZero.Action.Basic","initialProofState":"G : Type u_1\nM : Type u_4\ninst✝² : Group G\ninst✝¹ : Monoid M\ninst✝ : MulDistribMulAction G M\nx : G\na✝ : M\n⊢ Eq ((MulDistribMulAction.toMulEquiv M x).symm a✝) (HSMul.hSMul (Inv.inv x) a✝)","decl":"/-- Each element of the group defines a multiplicative monoid isomorphism.\n\nThis is a stronger version of `MulAction.toPerm`. -/\n@[simps (config := { simpRhs := true })]\ndef MulDistribMulAction.toMulEquiv (x : G) : M ≃* M :=\n  { MulDistribMulAction.toMonoidHom M x, MulAction.toPermHom G M x with }\n\n"}
{"name":"MulDistribMulAction.toMulAut_apply","module":"Mathlib.Algebra.GroupWithZero.Action.Basic","initialProofState":"G : Type u_1\nM : Type u_4\ninst✝² : Group G\ninst✝¹ : Monoid M\ninst✝ : MulDistribMulAction G M\nx : G\n⊢ Eq ((MulDistribMulAction.toMulAut G M) x) (MulDistribMulAction.toMulEquiv M x)","decl":"/-- Each element of the group defines a multiplicative monoid isomorphism.\n\nThis is a stronger version of `MulAction.toPermHom`. -/\n@[simps]\ndef MulDistribMulAction.toMulAut : G →* MulAut M where\n  toFun := MulDistribMulAction.toMulEquiv M\n  map_one' := MulEquiv.ext (one_smul _)\n  map_mul' _ _ := MulEquiv.ext (mul_smul _ _)\n\n"}
{"name":"mulAutArrow_apply_apply","module":"Mathlib.Algebra.GroupWithZero.Action.Basic","initialProofState":"G : Type u_1\nA : Type u_3\nM : Type u_4\ninst✝² : Group G\ninst✝¹ : MulAction G A\ninst✝ : Monoid M\nx : G\na✝¹ : A → M\na✝ : A\n⊢ Eq ((mulAutArrow x) a✝¹ a✝) (HSMul.hSMul x a✝¹ a✝)","decl":"/-- Given groups `G H` with `G` acting on `A`, `G` acts by\nmultiplicative automorphisms on `A → H`. -/\n@[simps!] def mulAutArrow : G →* MulAut (A → M) := MulDistribMulAction.toMulAut _ _\n\n"}
{"name":"mulAutArrow_apply_symm_apply","module":"Mathlib.Algebra.GroupWithZero.Action.Basic","initialProofState":"G : Type u_1\nA : Type u_3\nM : Type u_4\ninst✝² : Group G\ninst✝¹ : MulAction G A\ninst✝ : Monoid M\nx : G\na✝¹ : A → M\na✝ : A\n⊢ Eq ((MulEquiv.symm (mulAutArrow x)) a✝¹ a✝) (HSMul.hSMul (Inv.inv x) a✝¹ a✝)","decl":"/-- Given groups `G H` with `G` acting on `A`, `G` acts by\nmultiplicative automorphisms on `A → H`. -/\n@[simps!] def mulAutArrow : G →* MulAut (A → M) := MulDistribMulAction.toMulAut _ _\n\n"}
{"name":"IsUnit.smul_sub_iff_sub_inv_smul","module":"Mathlib.Algebra.GroupWithZero.Action.Basic","initialProofState":"G : Type u_1\nR : Type u_7\ninst✝⁵ : Group G\ninst✝⁴ : Monoid R\ninst✝³ : AddGroup R\ninst✝² : DistribMulAction G R\ninst✝¹ : IsScalarTower G R R\ninst✝ : SMulCommClass G R R\nr : G\na : R\n⊢ Iff (IsUnit (HSub.hSub (HSMul.hSMul r 1) a)) (IsUnit (HSub.hSub 1 (HSMul.hSMul (Inv.inv r) a)))","decl":"lemma IsUnit.smul_sub_iff_sub_inv_smul [Group G] [Monoid R] [AddGroup R] [DistribMulAction G R]\n    [IsScalarTower G R R] [SMulCommClass G R R] (r : G) (a : R) :\n    IsUnit (r • (1 : R) - a) ↔ IsUnit (1 - r⁻¹ • a) := by\n  rw [← isUnit_smul_iff r (1 - r⁻¹ • a), smul_sub, smul_inv_smul]\n"}
