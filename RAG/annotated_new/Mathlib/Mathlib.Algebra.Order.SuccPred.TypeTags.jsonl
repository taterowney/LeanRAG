{"name":"instIsSuccArchimedeanMultiplicative","module":"Mathlib.Algebra.Order.SuccPred.TypeTags","initialProofState":"X : Type u_1\ninst✝¹ : Preorder X\ninst✝ : SuccOrder X\nh : IsSuccArchimedean X\n⊢ IsSuccArchimedean (Multiplicative X)","decl":"instance [Preorder X] [SuccOrder X] [h : IsSuccArchimedean X] :\n  IsSuccArchimedean (Multiplicative X) := h\n"}
{"name":"instIsSuccArchimedeanAdditive","module":"Mathlib.Algebra.Order.SuccPred.TypeTags","initialProofState":"X : Type u_1\ninst✝¹ : Preorder X\ninst✝ : SuccOrder X\nh : IsSuccArchimedean X\n⊢ IsSuccArchimedean (Additive X)","decl":"instance [Preorder X] [SuccOrder X] [h : IsSuccArchimedean X] :\n  IsSuccArchimedean (Additive X) := h\n\n"}
{"name":"instIsPredArchimedeanMultiplicative","module":"Mathlib.Algebra.Order.SuccPred.TypeTags","initialProofState":"X : Type u_1\ninst✝¹ : Preorder X\ninst✝ : PredOrder X\nh : IsPredArchimedean X\n⊢ IsPredArchimedean (Multiplicative X)","decl":"instance [Preorder X] [PredOrder X] [h : IsPredArchimedean X] :\n  IsPredArchimedean (Multiplicative X) := h\n"}
{"name":"instIsPredArchimedeanAdditive","module":"Mathlib.Algebra.Order.SuccPred.TypeTags","initialProofState":"X : Type u_1\ninst✝¹ : Preorder X\ninst✝ : PredOrder X\nh : IsPredArchimedean X\n⊢ IsPredArchimedean (Additive X)","decl":"instance [Preorder X] [PredOrder X] [h : IsPredArchimedean X] :\n  IsPredArchimedean (Additive X) := h\n\n"}
{"name":"Order.succ_ofMul","module":"Mathlib.Algebra.Order.SuccPred.TypeTags","initialProofState":"X : Type u_1\ninst✝¹ : Preorder X\ninst✝ : SuccOrder X\nx : X\n⊢ Eq (Order.succ (Additive.ofMul x)) (Additive.ofMul (Order.succ x))","decl":"@[simp] lemma succ_ofMul [Preorder X] [SuccOrder X] (x : X) : succ (ofMul x) = ofMul (succ x) := rfl\n"}
{"name":"Order.succ_toMul","module":"Mathlib.Algebra.Order.SuccPred.TypeTags","initialProofState":"X : Type u_1\ninst✝¹ : Preorder X\ninst✝ : SuccOrder X\nx : Additive X\n⊢ Eq (Order.succ (Additive.toMul x)) (Additive.toMul (Order.succ x))","decl":"@[simp] lemma succ_toMul [Preorder X] [SuccOrder X] (x : Additive X) :\n  succ x.toMul = (succ x).toMul := rfl\n\n"}
{"name":"Order.succ_ofAdd","module":"Mathlib.Algebra.Order.SuccPred.TypeTags","initialProofState":"X : Type u_1\ninst✝¹ : Preorder X\ninst✝ : SuccOrder X\nx : X\n⊢ Eq (Order.succ (Multiplicative.ofAdd x)) (Multiplicative.ofAdd (Order.succ x))","decl":"@[simp] lemma succ_ofAdd [Preorder X] [SuccOrder X] (x : X) : succ (ofAdd x) = ofAdd (succ x) := rfl\n"}
{"name":"Order.succ_toAdd","module":"Mathlib.Algebra.Order.SuccPred.TypeTags","initialProofState":"X : Type u_1\ninst✝¹ : Preorder X\ninst✝ : SuccOrder X\nx : Multiplicative X\n⊢ Eq (Order.succ (Multiplicative.toAdd x)) (Multiplicative.toAdd (Order.succ x))","decl":"@[simp] lemma succ_toAdd [Preorder X] [SuccOrder X] (x : Multiplicative X) :\n  succ x.toAdd = (succ x).toAdd := rfl\n\n"}
{"name":"Order.pred_ofMul","module":"Mathlib.Algebra.Order.SuccPred.TypeTags","initialProofState":"X : Type u_1\ninst✝¹ : Preorder X\ninst✝ : PredOrder X\nx : X\n⊢ Eq (Order.pred (Additive.ofMul x)) (Additive.ofMul (Order.pred x))","decl":"@[simp] lemma pred_ofMul [Preorder X] [PredOrder X] (x : X) : pred (ofMul x) = ofMul (pred x) := rfl\n"}
{"name":"Order.pred_toMul","module":"Mathlib.Algebra.Order.SuccPred.TypeTags","initialProofState":"X : Type u_1\ninst✝¹ : Preorder X\ninst✝ : PredOrder X\nx : Additive X\n⊢ Eq (Order.pred (Additive.toMul x)) (Additive.toMul (Order.pred x))","decl":"@[simp] lemma pred_toMul [Preorder X] [PredOrder X] (x : Additive X) :\n  pred x.toMul = (pred x).toMul := rfl\n\n"}
{"name":"Order.pred_ofAdd","module":"Mathlib.Algebra.Order.SuccPred.TypeTags","initialProofState":"X : Type u_1\ninst✝¹ : Preorder X\ninst✝ : PredOrder X\nx : X\n⊢ Eq (Order.pred (Multiplicative.ofAdd x)) (Multiplicative.ofAdd (Order.pred x))","decl":"@[simp] lemma pred_ofAdd [Preorder X] [PredOrder X] (x : X) : pred (ofAdd x) = ofAdd (pred x) := rfl\n"}
{"name":"Order.pred_toAdd","module":"Mathlib.Algebra.Order.SuccPred.TypeTags","initialProofState":"X : Type u_1\ninst✝¹ : Preorder X\ninst✝ : PredOrder X\nx : Multiplicative X\n⊢ Eq (Order.pred (Multiplicative.toAdd x)) (Multiplicative.toAdd (Order.pred x))","decl":"@[simp] lemma pred_toAdd [Preorder X] [PredOrder X] (x : Multiplicative X) :\n  pred x.toAdd = (pred x).toAdd := rfl\n\n"}
