{"name":"IsUpperSet.vadd_subset","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommMonoid α\ns : Set α\nx : α\nhs : IsUpperSet s\nhx : LE.le 0 x\n⊢ HasSubset.Subset (HVAdd.hVAdd x s) s","decl":"@[to_additive]\ntheorem IsUpperSet.smul_subset (hs : IsUpperSet s) (hx : 1 ≤ x) : x • s ⊆ s :=\n  smul_set_subset_iff.2 fun _ ↦ hs <| le_mul_of_one_le_left' hx\n\n"}
{"name":"IsUpperSet.smul_subset","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommMonoid α\ns : Set α\nx : α\nhs : IsUpperSet s\nhx : LE.le 1 x\n⊢ HasSubset.Subset (HSMul.hSMul x s) s","decl":"@[to_additive]\ntheorem IsUpperSet.smul_subset (hs : IsUpperSet s) (hx : 1 ≤ x) : x • s ⊆ s :=\n  smul_set_subset_iff.2 fun _ ↦ hs <| le_mul_of_one_le_left' hx\n\n"}
{"name":"IsLowerSet.smul_subset","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommMonoid α\ns : Set α\nx : α\nhs : IsLowerSet s\nhx : LE.le x 1\n⊢ HasSubset.Subset (HSMul.hSMul x s) s","decl":"@[to_additive]\ntheorem IsLowerSet.smul_subset (hs : IsLowerSet s) (hx : x ≤ 1) : x • s ⊆ s :=\n  smul_set_subset_iff.2 fun _ ↦ hs <| mul_le_of_le_one_left' hx\n\n"}
{"name":"IsLowerSet.vadd_subset","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommMonoid α\ns : Set α\nx : α\nhs : IsLowerSet s\nhx : LE.le x 0\n⊢ HasSubset.Subset (HVAdd.hVAdd x s) s","decl":"@[to_additive]\ntheorem IsLowerSet.smul_subset (hs : IsLowerSet s) (hx : x ≤ 1) : x • s ⊆ s :=\n  smul_set_subset_iff.2 fun _ ↦ hs <| mul_le_of_le_one_left' hx\n\n"}
{"name":"IsUpperSet.vadd","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns : Set α\na : α\nhs : IsUpperSet s\n⊢ IsUpperSet (HVAdd.hVAdd a s)","decl":"@[to_additive]\ntheorem IsUpperSet.smul (hs : IsUpperSet s) : IsUpperSet (a • s) := hs.image <| OrderIso.mulLeft _\n\n"}
{"name":"IsUpperSet.smul","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns : Set α\na : α\nhs : IsUpperSet s\n⊢ IsUpperSet (HSMul.hSMul a s)","decl":"@[to_additive]\ntheorem IsUpperSet.smul (hs : IsUpperSet s) : IsUpperSet (a • s) := hs.image <| OrderIso.mulLeft _\n\n"}
{"name":"IsLowerSet.vadd","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns : Set α\na : α\nhs : IsLowerSet s\n⊢ IsLowerSet (HVAdd.hVAdd a s)","decl":"@[to_additive]\ntheorem IsLowerSet.smul (hs : IsLowerSet s) : IsLowerSet (a • s) := hs.image <| OrderIso.mulLeft _\n\n"}
{"name":"IsLowerSet.smul","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns : Set α\na : α\nhs : IsLowerSet s\n⊢ IsLowerSet (HSMul.hSMul a s)","decl":"@[to_additive]\ntheorem IsLowerSet.smul (hs : IsLowerSet s) : IsLowerSet (a • s) := hs.image <| OrderIso.mulLeft _\n\n"}
{"name":"Set.OrdConnected.vadd","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns : Set α\na : α\nhs : s.OrdConnected\n⊢ (HVAdd.hVAdd a s).OrdConnected","decl":"@[to_additive]\ntheorem Set.OrdConnected.smul (hs : s.OrdConnected) : (a • s).OrdConnected := by\n  rw [← hs.upperClosure_inter_lowerClosure, smul_set_inter]\n  exact (upperClosure _).upper.smul.ordConnected.inter (lowerClosure _).lower.smul.ordConnected\n\n"}
{"name":"Set.OrdConnected.smul","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns : Set α\na : α\nhs : s.OrdConnected\n⊢ (HSMul.hSMul a s).OrdConnected","decl":"@[to_additive]\ntheorem Set.OrdConnected.smul (hs : s.OrdConnected) : (a • s).OrdConnected := by\n  rw [← hs.upperClosure_inter_lowerClosure, smul_set_inter]\n  exact (upperClosure _).upper.smul.ordConnected.inter (lowerClosure _).lower.smul.ordConnected\n\n"}
{"name":"IsUpperSet.add_left","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns t : Set α\nht : IsUpperSet t\n⊢ IsUpperSet (HAdd.hAdd s t)","decl":"@[to_additive]\ntheorem IsUpperSet.mul_left (ht : IsUpperSet t) : IsUpperSet (s * t) := by\n  rw [← smul_eq_mul, ← Set.iUnion_smul_set]\n  exact isUpperSet_iUnion₂ fun x _ ↦ ht.smul\n\n"}
{"name":"IsUpperSet.mul_left","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns t : Set α\nht : IsUpperSet t\n⊢ IsUpperSet (HMul.hMul s t)","decl":"@[to_additive]\ntheorem IsUpperSet.mul_left (ht : IsUpperSet t) : IsUpperSet (s * t) := by\n  rw [← smul_eq_mul, ← Set.iUnion_smul_set]\n  exact isUpperSet_iUnion₂ fun x _ ↦ ht.smul\n\n"}
{"name":"IsUpperSet.add_right","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns t : Set α\nhs : IsUpperSet s\n⊢ IsUpperSet (HAdd.hAdd s t)","decl":"@[to_additive]\ntheorem IsUpperSet.mul_right (hs : IsUpperSet s) : IsUpperSet (s * t) := by\n  rw [mul_comm]\n  exact hs.mul_left\n\n"}
{"name":"IsUpperSet.mul_right","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns t : Set α\nhs : IsUpperSet s\n⊢ IsUpperSet (HMul.hMul s t)","decl":"@[to_additive]\ntheorem IsUpperSet.mul_right (hs : IsUpperSet s) : IsUpperSet (s * t) := by\n  rw [mul_comm]\n  exact hs.mul_left\n\n"}
{"name":"IsLowerSet.mul_left","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns t : Set α\nht : IsLowerSet t\n⊢ IsLowerSet (HMul.hMul s t)","decl":"@[to_additive]\ntheorem IsLowerSet.mul_left (ht : IsLowerSet t) : IsLowerSet (s * t) := ht.toDual.mul_left\n\n"}
{"name":"IsLowerSet.add_left","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns t : Set α\nht : IsLowerSet t\n⊢ IsLowerSet (HAdd.hAdd s t)","decl":"@[to_additive]\ntheorem IsLowerSet.mul_left (ht : IsLowerSet t) : IsLowerSet (s * t) := ht.toDual.mul_left\n\n"}
{"name":"IsLowerSet.mul_right","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns t : Set α\nhs : IsLowerSet s\n⊢ IsLowerSet (HMul.hMul s t)","decl":"@[to_additive]\ntheorem IsLowerSet.mul_right (hs : IsLowerSet s) : IsLowerSet (s * t) := hs.toDual.mul_right\n\n"}
{"name":"IsLowerSet.add_right","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns t : Set α\nhs : IsLowerSet s\n⊢ IsLowerSet (HAdd.hAdd s t)","decl":"@[to_additive]\ntheorem IsLowerSet.mul_right (hs : IsLowerSet s) : IsLowerSet (s * t) := hs.toDual.mul_right\n\n"}
{"name":"IsUpperSet.inv","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns : Set α\nhs : IsUpperSet s\n⊢ IsLowerSet (Inv.inv s)","decl":"@[to_additive]\ntheorem IsUpperSet.inv (hs : IsUpperSet s) : IsLowerSet s⁻¹ := fun _ _ h ↦ hs <| inv_le_inv' h\n\n"}
{"name":"IsUpperSet.neg","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns : Set α\nhs : IsUpperSet s\n⊢ IsLowerSet (Neg.neg s)","decl":"@[to_additive]\ntheorem IsUpperSet.inv (hs : IsUpperSet s) : IsLowerSet s⁻¹ := fun _ _ h ↦ hs <| inv_le_inv' h\n\n"}
{"name":"IsLowerSet.neg","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns : Set α\nhs : IsLowerSet s\n⊢ IsUpperSet (Neg.neg s)","decl":"@[to_additive]\ntheorem IsLowerSet.inv (hs : IsLowerSet s) : IsUpperSet s⁻¹ := fun _ _ h ↦ hs <| inv_le_inv' h\n\n"}
{"name":"IsLowerSet.inv","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns : Set α\nhs : IsLowerSet s\n⊢ IsUpperSet (Inv.inv s)","decl":"@[to_additive]\ntheorem IsLowerSet.inv (hs : IsLowerSet s) : IsUpperSet s⁻¹ := fun _ _ h ↦ hs <| inv_le_inv' h\n\n"}
{"name":"IsUpperSet.div_left","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns t : Set α\nht : IsUpperSet t\n⊢ IsLowerSet (HDiv.hDiv s t)","decl":"@[to_additive]\ntheorem IsUpperSet.div_left (ht : IsUpperSet t) : IsLowerSet (s / t) := by\n  rw [div_eq_mul_inv]\n  exact ht.inv.mul_left\n\n"}
{"name":"IsUpperSet.sub_left","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns t : Set α\nht : IsUpperSet t\n⊢ IsLowerSet (HSub.hSub s t)","decl":"@[to_additive]\ntheorem IsUpperSet.div_left (ht : IsUpperSet t) : IsLowerSet (s / t) := by\n  rw [div_eq_mul_inv]\n  exact ht.inv.mul_left\n\n"}
{"name":"IsUpperSet.div_right","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns t : Set α\nhs : IsUpperSet s\n⊢ IsUpperSet (HDiv.hDiv s t)","decl":"@[to_additive]\ntheorem IsUpperSet.div_right (hs : IsUpperSet s) : IsUpperSet (s / t) := by\n  rw [div_eq_mul_inv]\n  exact hs.mul_right\n\n"}
{"name":"IsUpperSet.sub_right","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns t : Set α\nhs : IsUpperSet s\n⊢ IsUpperSet (HSub.hSub s t)","decl":"@[to_additive]\ntheorem IsUpperSet.div_right (hs : IsUpperSet s) : IsUpperSet (s / t) := by\n  rw [div_eq_mul_inv]\n  exact hs.mul_right\n\n"}
{"name":"IsLowerSet.sub_left","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns t : Set α\nht : IsLowerSet t\n⊢ IsUpperSet (HSub.hSub s t)","decl":"@[to_additive]\ntheorem IsLowerSet.div_left (ht : IsLowerSet t) : IsUpperSet (s / t) := ht.toDual.div_left\n\n"}
{"name":"IsLowerSet.div_left","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns t : Set α\nht : IsLowerSet t\n⊢ IsUpperSet (HDiv.hDiv s t)","decl":"@[to_additive]\ntheorem IsLowerSet.div_left (ht : IsLowerSet t) : IsUpperSet (s / t) := ht.toDual.div_left\n\n"}
{"name":"IsLowerSet.sub_right","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns t : Set α\nhs : IsLowerSet s\n⊢ IsLowerSet (HSub.hSub s t)","decl":"@[to_additive]\ntheorem IsLowerSet.div_right (hs : IsLowerSet s) : IsLowerSet (s / t) := hs.toDual.div_right\n\n"}
{"name":"IsLowerSet.div_right","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns t : Set α\nhs : IsLowerSet s\n⊢ IsLowerSet (HDiv.hDiv s t)","decl":"@[to_additive]\ntheorem IsLowerSet.div_right (hs : IsLowerSet s) : IsLowerSet (s / t) := hs.toDual.div_right\n\n"}
{"name":"UpperSet.coe_one","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\n⊢ Eq (↑1) (Set.Ici 1)","decl":"@[to_additive (attr := simp,norm_cast)]\ntheorem coe_one : ((1 : UpperSet α) : Set α) = Set.Ici 1 :=\n  rfl\n\n"}
{"name":"UpperSet.coe_zero","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\n⊢ Eq (↑0) (Set.Ici 0)","decl":"@[to_additive (attr := simp,norm_cast)]\ntheorem coe_one : ((1 : UpperSet α) : Set α) = Set.Ici 1 :=\n  rfl\n\n"}
{"name":"UpperSet.coe_add","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns t : UpperSet α\n⊢ Eq (↑(HAdd.hAdd s t)) (HAdd.hAdd ↑s ↑t)","decl":"@[to_additive (attr := simp,norm_cast)]\ntheorem coe_mul (s t : UpperSet α) : (↑(s * t) : Set α) = s * t :=\n  rfl\n\n"}
{"name":"UpperSet.coe_mul","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns t : UpperSet α\n⊢ Eq (↑(HMul.hMul s t)) (HMul.hMul ↑s ↑t)","decl":"@[to_additive (attr := simp,norm_cast)]\ntheorem coe_mul (s t : UpperSet α) : (↑(s * t) : Set α) = s * t :=\n  rfl\n\n"}
{"name":"UpperSet.coe_div","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns t : UpperSet α\n⊢ Eq (↑(HDiv.hDiv s t)) (HDiv.hDiv ↑s ↑t)","decl":"@[to_additive (attr := simp,norm_cast)]\ntheorem coe_div (s t : UpperSet α) : (↑(s / t) : Set α) = s / t :=\n  rfl\n\n"}
{"name":"UpperSet.coe_sub","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns t : UpperSet α\n⊢ Eq (↑(HSub.hSub s t)) (HSub.hSub ↑s ↑t)","decl":"@[to_additive (attr := simp,norm_cast)]\ntheorem coe_div (s t : UpperSet α) : (↑(s / t) : Set α) = s / t :=\n  rfl\n\n"}
{"name":"UpperSet.Ici_zero","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\n⊢ Eq (UpperSet.Ici 0) 0","decl":"@[to_additive (attr := simp)]\ntheorem Ici_one : Ici (1 : α) = 1 :=\n  rfl\n\n"}
{"name":"UpperSet.Ici_one","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\n⊢ Eq (UpperSet.Ici 1) 1","decl":"@[to_additive (attr := simp)]\ntheorem Ici_one : Ici (1 : α) = 1 :=\n  rfl\n\n"}
{"name":"LowerSet.coe_add","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns t : LowerSet α\n⊢ Eq (↑(HAdd.hAdd s t)) (HAdd.hAdd ↑s ↑t)","decl":"@[to_additive (attr := simp,norm_cast)]\ntheorem coe_mul (s t : LowerSet α) : (↑(s * t) : Set α) = s * t :=\n  rfl\n\n"}
{"name":"LowerSet.coe_mul","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns t : LowerSet α\n⊢ Eq (↑(HMul.hMul s t)) (HMul.hMul ↑s ↑t)","decl":"@[to_additive (attr := simp,norm_cast)]\ntheorem coe_mul (s t : LowerSet α) : (↑(s * t) : Set α) = s * t :=\n  rfl\n\n"}
{"name":"LowerSet.coe_sub","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns t : LowerSet α\n⊢ Eq (↑(HSub.hSub s t)) (HSub.hSub ↑s ↑t)","decl":"@[to_additive (attr := simp,norm_cast)]\ntheorem coe_div (s t : LowerSet α) : (↑(s / t) : Set α) = s / t :=\n  rfl\n\n"}
{"name":"LowerSet.coe_div","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns t : LowerSet α\n⊢ Eq (↑(HDiv.hDiv s t)) (HDiv.hDiv ↑s ↑t)","decl":"@[to_additive (attr := simp,norm_cast)]\ntheorem coe_div (s t : LowerSet α) : (↑(s / t) : Set α) = s / t :=\n  rfl\n\n"}
{"name":"LowerSet.Iic_zero","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\n⊢ Eq (LowerSet.Iic 0) 0","decl":"@[to_additive (attr := simp)]\ntheorem Iic_one : Iic (1 : α) = 1 :=\n  rfl\n\n"}
{"name":"LowerSet.Iic_one","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\n⊢ Eq (LowerSet.Iic 1) 1","decl":"@[to_additive (attr := simp)]\ntheorem Iic_one : Iic (1 : α) = 1 :=\n  rfl\n\n"}
{"name":"upperClosure_one","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\n⊢ Eq (upperClosure 1) 1","decl":"@[to_additive (attr := simp)]\ntheorem upperClosure_one : upperClosure (1 : Set α) = 1 :=\n  upperClosure_singleton _\n\n"}
{"name":"upperClosure_zero","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\n⊢ Eq (upperClosure 0) 0","decl":"@[to_additive (attr := simp)]\ntheorem upperClosure_one : upperClosure (1 : Set α) = 1 :=\n  upperClosure_singleton _\n\n"}
{"name":"lowerClosure_zero","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\n⊢ Eq (lowerClosure 0) 0","decl":"@[to_additive (attr := simp)]\ntheorem lowerClosure_one : lowerClosure (1 : Set α) = 1 :=\n  lowerClosure_singleton _\n\n"}
{"name":"lowerClosure_one","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\n⊢ Eq (lowerClosure 1) 1","decl":"@[to_additive (attr := simp)]\ntheorem lowerClosure_one : lowerClosure (1 : Set α) = 1 :=\n  lowerClosure_singleton _\n\n"}
{"name":"upperClosure_vadd","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns : Set α\na : α\n⊢ Eq (upperClosure (HVAdd.hVAdd a s)) (HVAdd.hVAdd a (upperClosure s))","decl":"@[to_additive (attr := simp)]\ntheorem upperClosure_smul : upperClosure (a • s) = a • upperClosure s :=\n  upperClosure_image <| OrderIso.mulLeft a\n\n"}
{"name":"upperClosure_smul","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns : Set α\na : α\n⊢ Eq (upperClosure (HSMul.hSMul a s)) (HSMul.hSMul a (upperClosure s))","decl":"@[to_additive (attr := simp)]\ntheorem upperClosure_smul : upperClosure (a • s) = a • upperClosure s :=\n  upperClosure_image <| OrderIso.mulLeft a\n\n"}
{"name":"lowerClosure_smul","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns : Set α\na : α\n⊢ Eq (lowerClosure (HSMul.hSMul a s)) (HSMul.hSMul a (lowerClosure s))","decl":"@[to_additive (attr := simp)]\ntheorem lowerClosure_smul : lowerClosure (a • s) = a • lowerClosure s :=\n  lowerClosure_image <| OrderIso.mulLeft a\n\n"}
{"name":"lowerClosure_vadd","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns : Set α\na : α\n⊢ Eq (lowerClosure (HVAdd.hVAdd a s)) (HVAdd.hVAdd a (lowerClosure s))","decl":"@[to_additive (attr := simp)]\ntheorem lowerClosure_smul : lowerClosure (a • s) = a • lowerClosure s :=\n  lowerClosure_image <| OrderIso.mulLeft a\n\n"}
{"name":"add_upperClosure","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns t : Set α\n⊢ Eq (HAdd.hAdd s ↑(upperClosure t)) ↑(upperClosure (HAdd.hAdd s t))","decl":"@[to_additive]\ntheorem mul_upperClosure : s * upperClosure t = upperClosure (s * t) := by\n  simp_rw [← smul_eq_mul, ← Set.iUnion_smul_set, upperClosure_iUnion, upperClosure_smul,\n    UpperSet.coe_iInf₂]\n  rfl\n\n"}
{"name":"mul_upperClosure","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns t : Set α\n⊢ Eq (HMul.hMul s ↑(upperClosure t)) ↑(upperClosure (HMul.hMul s t))","decl":"@[to_additive]\ntheorem mul_upperClosure : s * upperClosure t = upperClosure (s * t) := by\n  simp_rw [← smul_eq_mul, ← Set.iUnion_smul_set, upperClosure_iUnion, upperClosure_smul,\n    UpperSet.coe_iInf₂]\n  rfl\n\n"}
{"name":"mul_lowerClosure","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns t : Set α\n⊢ Eq (HMul.hMul s ↑(lowerClosure t)) ↑(lowerClosure (HMul.hMul s t))","decl":"@[to_additive]\ntheorem mul_lowerClosure : s * lowerClosure t = lowerClosure (s * t) := by\n  simp_rw [← smul_eq_mul, ← Set.iUnion_smul_set, lowerClosure_iUnion, lowerClosure_smul,\n    LowerSet.coe_iSup₂]\n  rfl\n\n"}
{"name":"add_lowerClosure","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns t : Set α\n⊢ Eq (HAdd.hAdd s ↑(lowerClosure t)) ↑(lowerClosure (HAdd.hAdd s t))","decl":"@[to_additive]\ntheorem mul_lowerClosure : s * lowerClosure t = lowerClosure (s * t) := by\n  simp_rw [← smul_eq_mul, ← Set.iUnion_smul_set, lowerClosure_iUnion, lowerClosure_smul,\n    LowerSet.coe_iSup₂]\n  rfl\n\n"}
{"name":"upperClosure_add","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns t : Set α\n⊢ Eq (HAdd.hAdd (↑(upperClosure s)) t) ↑(upperClosure (HAdd.hAdd s t))","decl":"@[to_additive]\ntheorem upperClosure_mul : ↑(upperClosure s) * t = upperClosure (s * t) := by\n  simp_rw [mul_comm _ t]\n  exact mul_upperClosure _ _\n\n"}
{"name":"upperClosure_mul","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns t : Set α\n⊢ Eq (HMul.hMul (↑(upperClosure s)) t) ↑(upperClosure (HMul.hMul s t))","decl":"@[to_additive]\ntheorem upperClosure_mul : ↑(upperClosure s) * t = upperClosure (s * t) := by\n  simp_rw [mul_comm _ t]\n  exact mul_upperClosure _ _\n\n"}
{"name":"lowerClosure_add","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns t : Set α\n⊢ Eq (HAdd.hAdd (↑(lowerClosure s)) t) ↑(lowerClosure (HAdd.hAdd s t))","decl":"@[to_additive]\ntheorem lowerClosure_mul : ↑(lowerClosure s) * t = lowerClosure (s * t) := by\n  simp_rw [mul_comm _ t]\n  exact mul_lowerClosure _ _\n\n"}
{"name":"lowerClosure_mul","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns t : Set α\n⊢ Eq (HMul.hMul (↑(lowerClosure s)) t) ↑(lowerClosure (HMul.hMul s t))","decl":"@[to_additive]\ntheorem lowerClosure_mul : ↑(lowerClosure s) * t = lowerClosure (s * t) := by\n  simp_rw [mul_comm _ t]\n  exact mul_lowerClosure _ _\n\n"}
{"name":"upperClosure_mul_distrib","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns t : Set α\n⊢ Eq (upperClosure (HMul.hMul s t)) (HMul.hMul (upperClosure s) (upperClosure t))","decl":"@[to_additive (attr := simp)]\ntheorem upperClosure_mul_distrib : upperClosure (s * t) = upperClosure s * upperClosure t :=\n  SetLike.coe_injective <| by\n    rw [UpperSet.coe_mul, mul_upperClosure, upperClosure_mul, UpperSet.upperClosure]\n\n"}
{"name":"upperClosure_add_distrib","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns t : Set α\n⊢ Eq (upperClosure (HAdd.hAdd s t)) (HAdd.hAdd (upperClosure s) (upperClosure t))","decl":"@[to_additive (attr := simp)]\ntheorem upperClosure_mul_distrib : upperClosure (s * t) = upperClosure s * upperClosure t :=\n  SetLike.coe_injective <| by\n    rw [UpperSet.coe_mul, mul_upperClosure, upperClosure_mul, UpperSet.upperClosure]\n\n"}
{"name":"lowerClosure_add_distrib","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\ns t : Set α\n⊢ Eq (lowerClosure (HAdd.hAdd s t)) (HAdd.hAdd (lowerClosure s) (lowerClosure t))","decl":"@[to_additive (attr := simp)]\ntheorem lowerClosure_mul_distrib : lowerClosure (s * t) = lowerClosure s * lowerClosure t :=\n  SetLike.coe_injective <| by\n    rw [LowerSet.coe_mul, mul_lowerClosure, lowerClosure_mul, LowerSet.lowerClosure]\n\n"}
{"name":"lowerClosure_mul_distrib","module":"Mathlib.Algebra.Order.UpperLower","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\ns t : Set α\n⊢ Eq (lowerClosure (HMul.hMul s t)) (HMul.hMul (lowerClosure s) (lowerClosure t))","decl":"@[to_additive (attr := simp)]\ntheorem lowerClosure_mul_distrib : lowerClosure (s * t) = lowerClosure s * lowerClosure t :=\n  SetLike.coe_injective <| by\n    rw [LowerSet.coe_mul, mul_lowerClosure, lowerClosure_mul, LowerSet.lowerClosure]\n\n"}
