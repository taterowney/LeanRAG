{"name":"MeasureTheory.Measure.compProd_eq_parallelComp_comp_copy_comp","module":"Mathlib.Probability.Kernel.Composition.Lemmas","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nκ : ProbabilityTheory.Kernel α β\ninst✝¹ : MeasureTheory.SFinite μ\ninst✝ : ProbabilityTheory.IsSFiniteKernel κ\n⊢ Eq (μ.compProd κ) ((μ.bind ⇑(ProbabilityTheory.Kernel.copy α)).bind ⇑(ProbabilityTheory.Kernel.id.parallelComp κ))","decl":"lemma compProd_eq_parallelComp_comp_copy_comp [SFinite μ] [IsSFiniteKernel κ] :\n    μ ⊗ₘ κ = (Kernel.id ∥ₖ κ) ∘ₘ Kernel.copy α ∘ₘ μ := by\n  rw [compProd_eq_comp_prod, ← Kernel.parallelComp_comp_copy, Measure.comp_assoc]\n\n"}
{"name":"MeasureTheory.Measure.prod_comp_right","module":"Mathlib.Probability.Kernel.Composition.Lemmas","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝¹ : MeasureTheory.SFinite ν\nκ : ProbabilityTheory.Kernel β γ\ninst✝ : ProbabilityTheory.IsSFiniteKernel κ\n⊢ Eq (μ.prod (ν.bind ⇑κ)) ((μ.prod ν).bind ⇑(ProbabilityTheory.Kernel.id.parallelComp κ))","decl":"lemma prod_comp_right [SFinite ν] {κ : Kernel β γ} [IsSFiniteKernel κ] :\n    μ.prod (κ ∘ₘ ν) = (Kernel.id ∥ₖ κ) ∘ₘ (μ.prod ν) := by\n  ext s hs\n  rw [Measure.prod_apply hs, Measure.bind_apply hs (Kernel.measurable _)]\n  simp_rw [Measure.bind_apply (measurable_prod_mk_left hs) (Kernel.measurable _)]\n  rw [MeasureTheory.lintegral_prod]\n  swap; · exact (Kernel.measurable_coe _ hs).aemeasurable\n  congr with a\n  congr with b\n  rw [Kernel.parallelComp_apply, Kernel.id_apply, Measure.prod_apply hs, lintegral_dirac']\n  exact measurable_measure_prod_mk_left hs\n\n"}
{"name":"MeasureTheory.Measure.prod_comp_left","module":"Mathlib.Probability.Kernel.Composition.Lemmas","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\ninst✝² : MeasureTheory.SFinite μ\ninst✝¹ : MeasureTheory.SFinite ν\nκ : ProbabilityTheory.Kernel α γ\ninst✝ : ProbabilityTheory.IsSFiniteKernel κ\n⊢ Eq ((μ.bind ⇑κ).prod ν) ((μ.prod ν).bind ⇑(κ.parallelComp ProbabilityTheory.Kernel.id))","decl":"lemma prod_comp_left [SFinite μ] [SFinite ν] {κ : Kernel α γ} [IsSFiniteKernel κ] :\n    (κ ∘ₘ μ).prod ν = (κ ∥ₖ Kernel.id) ∘ₘ (μ.prod ν) := by\n  have h1 : (κ ∘ₘ μ).prod ν = (ν.prod (κ ∘ₘ μ)).map Prod.swap := by rw [Measure.prod_swap]\n  have h2 : (κ ∥ₖ Kernel.id) ∘ₘ (μ.prod ν) = ((Kernel.id ∥ₖ κ) ∘ₘ (ν.prod μ)).map Prod.swap := by\n    calc (κ ∥ₖ Kernel.id) ∘ₘ (μ.prod ν)\n    _ = (κ ∥ₖ Kernel.id) ∘ₘ ((ν.prod μ).map Prod.swap) := by rw [Measure.prod_swap]\n    _ = (κ ∥ₖ Kernel.id) ∘ₘ ((Kernel.swap _ _) ∘ₘ (ν.prod μ)) := by\n      rw [Kernel.swap, Measure.deterministic_comp_eq_map]\n    _ = (Kernel.swap _ _) ∘ₘ ((Kernel.id ∥ₖ κ) ∘ₘ (ν.prod μ)) := by\n      rw [Measure.comp_assoc, Measure.comp_assoc, Kernel.swap_parallelComp]\n    _ = ((Kernel.id ∥ₖ κ) ∘ₘ (ν.prod μ)).map Prod.swap := by\n      rw [Kernel.swap, Measure.deterministic_comp_eq_map]\n  rw [← Measure.prod_comp_right, ← h1] at h2\n  exact h2.symm\n\n"}
{"name":"ProbabilityTheory.Kernel.parallelComp_id_left_comp_parallelComp","module":"Mathlib.Probability.Kernel.Composition.Lemmas","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nmδ : MeasurableSpace δ\nκ : ProbabilityTheory.Kernel α β\nα' : Type u_5\nmα' : MeasurableSpace α'\ninst✝² : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel α' γ\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel η\nξ : ProbabilityTheory.Kernel γ δ\ninst✝ : ProbabilityTheory.IsSFiniteKernel ξ\n⊢ Eq ((ProbabilityTheory.Kernel.id.parallelComp ξ).comp (κ.parallelComp η)) (κ.parallelComp (ξ.comp η))","decl":"lemma parallelComp_id_left_comp_parallelComp\n    {η : Kernel α' γ} [IsSFiniteKernel η] {ξ : Kernel γ δ} [IsSFiniteKernel ξ] :\n    (Kernel.id ∥ₖ ξ) ∘ₖ (κ ∥ₖ η) = κ ∥ₖ (ξ ∘ₖ η) := by\n  ext a\n  rw [parallelComp_apply, comp_apply, comp_apply, parallelComp_apply, Measure.prod_comp_right]\n\n"}
{"name":"ProbabilityTheory.Kernel.parallelComp_id_right_comp_parallelComp","module":"Mathlib.Probability.Kernel.Composition.Lemmas","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nmδ : MeasurableSpace δ\nκ : ProbabilityTheory.Kernel α β\nα' : Type u_5\nmα' : MeasurableSpace α'\ninst✝² : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel α' γ\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel η\nξ : ProbabilityTheory.Kernel γ δ\ninst✝ : ProbabilityTheory.IsSFiniteKernel ξ\n⊢ Eq ((ξ.parallelComp ProbabilityTheory.Kernel.id).comp (η.parallelComp κ)) ((ξ.comp η).parallelComp κ)","decl":"lemma parallelComp_id_right_comp_parallelComp {η : Kernel α' γ} [IsSFiniteKernel η]\n    {ξ : Kernel γ δ} [IsSFiniteKernel ξ] :\n    (ξ ∥ₖ Kernel.id) ∘ₖ (η ∥ₖ κ) = (ξ ∘ₖ η) ∥ₖ κ := by\n  ext a\n  rw [parallelComp_apply, comp_apply, comp_apply, parallelComp_apply, Measure.prod_comp_left]\n\n"}
{"name":"ProbabilityTheory.Kernel.parallelComp_comp_parallelComp","module":"Mathlib.Probability.Kernel.Composition.Lemmas","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nκ : ProbabilityTheory.Kernel α β\nα' : Type u_5\nβ' : Type u_6\nγ' : Type u_7\nmα' : MeasurableSpace α'\nmβ' : MeasurableSpace β'\nmγ' : MeasurableSpace γ'\ninst✝³ : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel β γ\ninst✝² : ProbabilityTheory.IsSFiniteKernel η\nκ' : ProbabilityTheory.Kernel α' β'\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel κ'\nη' : ProbabilityTheory.Kernel β' γ'\ninst✝ : ProbabilityTheory.IsSFiniteKernel η'\n⊢ Eq ((η.parallelComp η').comp (κ.parallelComp κ')) ((η.comp κ).parallelComp (η'.comp κ'))","decl":"lemma parallelComp_comp_parallelComp {η : Kernel β γ} [IsSFiniteKernel η]\n    {κ' : Kernel α' β'} [IsSFiniteKernel κ'] {η' : Kernel β' γ'} [IsSFiniteKernel η'] :\n    (η ∥ₖ η') ∘ₖ (κ ∥ₖ κ') = (η ∘ₖ κ) ∥ₖ (η' ∘ₖ κ') := by\n  rw [← parallelComp_id_left_comp_parallelComp, ← parallelComp_id_right_comp_parallelComp,\n    ← comp_assoc, parallelComp_id_left_comp_parallelComp, comp_id]\n\n"}
{"name":"ProbabilityTheory.Kernel.parallelComp_comp_prod","module":"Mathlib.Probability.Kernel.Composition.Lemmas","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nκ : ProbabilityTheory.Kernel α β\nβ' : Type u_6\nγ' : Type u_7\nmβ' : MeasurableSpace β'\nmγ' : MeasurableSpace γ'\ninst✝³ : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel β γ\ninst✝² : ProbabilityTheory.IsSFiniteKernel η\nκ' : ProbabilityTheory.Kernel α β'\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel κ'\nη' : ProbabilityTheory.Kernel β' γ'\ninst✝ : ProbabilityTheory.IsSFiniteKernel η'\n⊢ Eq ((η.parallelComp η').comp (κ.prod κ')) ((η.comp κ).prod (η'.comp κ'))","decl":"lemma parallelComp_comp_prod {η : Kernel β γ} [IsSFiniteKernel η]\n    {κ' : Kernel α β'} [IsSFiniteKernel κ'] {η' : Kernel β' γ'} [IsSFiniteKernel η'] :\n    (η ∥ₖ η') ∘ₖ (κ ×ₖ κ') = (η ∘ₖ κ) ×ₖ (η' ∘ₖ κ') := by\n  rw [← parallelComp_comp_copy, ← comp_assoc, parallelComp_comp_parallelComp,\n    ← parallelComp_comp_copy]\n\n"}
{"name":"ProbabilityTheory.Kernel.parallelComp_comm","module":"Mathlib.Probability.Kernel.Composition.Lemmas","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nmδ : MeasurableSpace δ\nκ : ProbabilityTheory.Kernel α β\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel γ δ\ninst✝ : ProbabilityTheory.IsSFiniteKernel η\n⊢ Eq ((ProbabilityTheory.Kernel.id.parallelComp κ).comp (η.parallelComp ProbabilityTheory.Kernel.id)) ((η.parallelComp ProbabilityTheory.Kernel.id).comp (ProbabilityTheory.Kernel.id.parallelComp κ))","decl":"lemma parallelComp_comm {η : Kernel γ δ} [IsSFiniteKernel η] :\n    (Kernel.id ∥ₖ κ) ∘ₖ (η ∥ₖ Kernel.id) = (η ∥ₖ Kernel.id) ∘ₖ (Kernel.id ∥ₖ κ) := by\n  rw [parallelComp_id_left_comp_parallelComp, parallelComp_id_right_comp_parallelComp,\n    comp_id, comp_id]\n\n"}
{"name":"MeasureTheory.Measure.parallelComp_comp_compProd","module":"Mathlib.Probability.Kernel.Composition.Lemmas","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nκ : ProbabilityTheory.Kernel α β\ninst✝² : MeasureTheory.SFinite μ\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel β γ\ninst✝ : ProbabilityTheory.IsSFiniteKernel η\n⊢ Eq ((μ.compProd κ).bind ⇑(ProbabilityTheory.Kernel.id.parallelComp η)) (μ.compProd (η.comp κ))","decl":"lemma MeasureTheory.Measure.parallelComp_comp_compProd [SFinite μ]\n    [IsSFiniteKernel κ] {η : Kernel β γ} [IsSFiniteKernel η] :\n    (Kernel.id ∥ₖ η) ∘ₘ (μ ⊗ₘ κ) = μ ⊗ₘ (η ∘ₖ κ) := by\n  rw [Measure.compProd_eq_comp_prod, Measure.compProd_eq_comp_prod, Measure.comp_assoc,\n    Kernel.parallelComp_comp_prod, Kernel.id_comp]\n"}
