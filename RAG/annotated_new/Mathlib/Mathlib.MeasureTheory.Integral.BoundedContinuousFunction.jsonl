{"name":"BoundedContinuousFunction.apply_le_nndist_zero","module":"Mathlib.MeasureTheory.Integral.BoundedContinuousFunction","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nf : BoundedContinuousFunction X NNReal\nx : X\n⊢ LE.le (f x) (NNDist.nndist 0 f)","decl":"lemma apply_le_nndist_zero {X : Type*} [TopologicalSpace X] (f : X →ᵇ ℝ≥0) (x : X) :\n    f x ≤ nndist 0 f := by\n  convert nndist_coe_le_nndist x\n  simp only [coe_zero, Pi.zero_apply, NNReal.nndist_zero_eq_val]\n\n"}
{"name":"BoundedContinuousFunction.lintegral_le_edist_mul","module":"Mathlib.MeasureTheory.Integral.BoundedContinuousFunction","initialProofState":"X : Type u_1\ninst✝¹ : MeasurableSpace X\ninst✝ : TopologicalSpace X\nf : BoundedContinuousFunction X NNReal\nμ : MeasureTheory.Measure X\n⊢ LE.le (MeasureTheory.lintegral μ fun x => ↑(f x)) (HMul.hMul (EDist.edist 0 f) (μ Set.univ))","decl":"lemma lintegral_le_edist_mul (f : X →ᵇ ℝ≥0) (μ : Measure X) :\n    (∫⁻ x, f x ∂μ) ≤ edist 0 f * (μ Set.univ) :=\n  le_trans (lintegral_mono (fun x ↦ ENNReal.coe_le_coe.mpr (f.apply_le_nndist_zero x))) (by simp)\n\n"}
{"name":"BoundedContinuousFunction.measurable_coe_ennreal_comp","module":"Mathlib.MeasureTheory.Integral.BoundedContinuousFunction","initialProofState":"X : Type u_1\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : OpensMeasurableSpace X\nf : BoundedContinuousFunction X NNReal\n⊢ Measurable fun x => ↑(f x)","decl":"theorem measurable_coe_ennreal_comp [OpensMeasurableSpace X] (f : X →ᵇ ℝ≥0) :\n    Measurable fun x ↦ (f x : ℝ≥0∞) :=\n  measurable_coe_nnreal_ennreal.comp f.continuous.measurable\n\n"}
{"name":"BoundedContinuousFunction.lintegral_lt_top_of_nnreal","module":"Mathlib.MeasureTheory.Integral.BoundedContinuousFunction","initialProofState":"X : Type u_1\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\nμ : MeasureTheory.Measure X\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : BoundedContinuousFunction X NNReal\n⊢ LT.lt (MeasureTheory.lintegral μ fun x => ↑(f x)) Top.top","decl":"theorem lintegral_lt_top_of_nnreal (f : X →ᵇ ℝ≥0) : ∫⁻ x, f x ∂μ < ∞ := by\n  apply IsFiniteMeasure.lintegral_lt_top_of_bounded_to_ennreal\n  refine ⟨nndist f 0, fun x ↦ ?_⟩\n  have key := BoundedContinuousFunction.NNReal.upper_bound f x\n  rwa [ENNReal.coe_le_coe]\n\n"}
{"name":"BoundedContinuousFunction.integrable_of_nnreal","module":"Mathlib.MeasureTheory.Integral.BoundedContinuousFunction","initialProofState":"X : Type u_1\ninst✝³ : MeasurableSpace X\ninst✝² : TopologicalSpace X\nμ : MeasureTheory.Measure X\ninst✝¹ : MeasureTheory.IsFiniteMeasure μ\ninst✝ : OpensMeasurableSpace X\nf : BoundedContinuousFunction X NNReal\n⊢ MeasureTheory.Integrable (Function.comp NNReal.toReal ⇑f) μ","decl":"theorem integrable_of_nnreal [OpensMeasurableSpace X] (f : X →ᵇ ℝ≥0) :\n    Integrable (((↑) : ℝ≥0 → ℝ) ∘ ⇑f) μ := by\n  refine ⟨(NNReal.continuous_coe.comp f.continuous).measurable.aestronglyMeasurable, ?_⟩\n  simp only [hasFiniteIntegral_iff_enorm, Function.comp_apply, NNReal.enorm_eq]\n  exact lintegral_lt_top_of_nnreal _ f\n\n"}
{"name":"BoundedContinuousFunction.integral_eq_integral_nnrealPart_sub","module":"Mathlib.MeasureTheory.Integral.BoundedContinuousFunction","initialProofState":"X : Type u_1\ninst✝³ : MeasurableSpace X\ninst✝² : TopologicalSpace X\nμ : MeasureTheory.Measure X\ninst✝¹ : MeasureTheory.IsFiniteMeasure μ\ninst✝ : OpensMeasurableSpace X\nf : BoundedContinuousFunction X Real\n⊢ Eq (MeasureTheory.integral μ fun x => f x) (HSub.hSub (MeasureTheory.integral μ fun x => ↑(f.nnrealPart x)) (MeasureTheory.integral μ fun x => ↑((Neg.neg f).nnrealPart x)))","decl":"theorem integral_eq_integral_nnrealPart_sub [OpensMeasurableSpace X] (f : X →ᵇ ℝ) :\n    ∫ x, f x ∂μ = (∫ x, (f.nnrealPart x : ℝ) ∂μ) - ∫ x, ((-f).nnrealPart x : ℝ) ∂μ := by\n  simp only [f.self_eq_nnrealPart_sub_nnrealPart_neg, Pi.sub_apply, integral_sub,\n             integrable_of_nnreal]\n  simp only [Function.comp_apply]\n\n"}
{"name":"BoundedContinuousFunction.lintegral_of_real_lt_top","module":"Mathlib.MeasureTheory.Integral.BoundedContinuousFunction","initialProofState":"X : Type u_1\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\nμ : MeasureTheory.Measure X\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : BoundedContinuousFunction X Real\n⊢ LT.lt (MeasureTheory.lintegral μ fun x => ENNReal.ofReal (f x)) Top.top","decl":"theorem lintegral_of_real_lt_top (f : X →ᵇ ℝ) :\n    ∫⁻ x, ENNReal.ofReal (f x) ∂μ < ∞ := lintegral_lt_top_of_nnreal _ f.nnrealPart\n\n"}
{"name":"BoundedContinuousFunction.toReal_lintegral_coe_eq_integral","module":"Mathlib.MeasureTheory.Integral.BoundedContinuousFunction","initialProofState":"X : Type u_1\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : OpensMeasurableSpace X\nf : BoundedContinuousFunction X NNReal\nμ : MeasureTheory.Measure X\n⊢ Eq (MeasureTheory.lintegral μ fun x => ↑(f x)).toReal (MeasureTheory.integral μ fun x => ↑(f x))","decl":"theorem toReal_lintegral_coe_eq_integral [OpensMeasurableSpace X] (f : X →ᵇ ℝ≥0) (μ : Measure X) :\n    (∫⁻ x, (f x : ℝ≥0∞) ∂μ).toReal = ∫ x, (f x : ℝ) ∂μ := by\n  rw [integral_eq_lintegral_of_nonneg_ae _ (by simpa [Function.comp_apply] using\n        (NNReal.continuous_coe.comp f.continuous).measurable.aestronglyMeasurable)]\n  · simp only [ENNReal.ofReal_coe_nnreal]\n  · exact Eventually.of_forall (by simp only [Pi.zero_apply, NNReal.zero_le_coe, imp_true_iff])\n\n"}
{"name":"BoundedContinuousFunction.lintegral_nnnorm_le","module":"Mathlib.MeasureTheory.Integral.BoundedContinuousFunction","initialProofState":"X : Type u_1\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\nμ : MeasureTheory.Measure X\nE : Type u_2\ninst✝ : NormedAddCommGroup E\nf : BoundedContinuousFunction X E\n⊢ LE.le (MeasureTheory.lintegral μ fun x => ↑(NNNorm.nnnorm (f x))) (HMul.hMul (↑(NNNorm.nnnorm f)) (μ Set.univ))","decl":"lemma lintegral_nnnorm_le (f : X →ᵇ E) :\n    ∫⁻ x, ‖f x‖₊ ∂μ ≤ ‖f‖₊ * (μ Set.univ) := by\n  calc  ∫⁻ x, ‖f x‖₊ ∂μ\n    _ ≤ ∫⁻ _, ‖f‖₊ ∂μ         := by gcongr; apply nnnorm_coe_le_nnnorm\n    _ = ‖f‖₊ * (μ Set.univ)   := by rw [lintegral_const]\n\n"}
{"name":"BoundedContinuousFunction.integrable","module":"Mathlib.MeasureTheory.Integral.BoundedContinuousFunction","initialProofState":"X : Type u_1\ninst✝⁷ : MeasurableSpace X\ninst✝⁶ : TopologicalSpace X\nμ : MeasureTheory.Measure X\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : OpensMeasurableSpace X\ninst✝³ : SecondCountableTopology E\ninst✝² : MeasurableSpace E\ninst✝¹ : BorelSpace E\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : BoundedContinuousFunction X E\n⊢ MeasureTheory.Integrable (⇑f) μ","decl":"lemma integrable [IsFiniteMeasure μ] (f : X →ᵇ E) :\n    Integrable f μ := by\n  refine ⟨f.continuous.measurable.aestronglyMeasurable, (hasFiniteIntegral_def _ _).mp ?_⟩\n  calc  ∫⁻ x, ‖f x‖₊ ∂μ\n    _ ≤ ‖f‖₊ * (μ Set.univ)   := f.lintegral_nnnorm_le μ\n    _ < ∞                     := ENNReal.mul_lt_top ENNReal.coe_lt_top (measure_lt_top μ Set.univ)\n\n"}
{"name":"BoundedContinuousFunction.norm_integral_le_mul_norm","module":"Mathlib.MeasureTheory.Integral.BoundedContinuousFunction","initialProofState":"X : Type u_1\ninst✝⁸ : MeasurableSpace X\ninst✝⁷ : TopologicalSpace X\nμ : MeasureTheory.Measure X\nE : Type u_2\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : OpensMeasurableSpace X\ninst✝⁴ : SecondCountableTopology E\ninst✝³ : MeasurableSpace E\ninst✝² : BorelSpace E\ninst✝¹ : NormedSpace Real E\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : BoundedContinuousFunction X E\n⊢ LE.le (Norm.norm (MeasureTheory.integral μ fun x => f x)) (HMul.hMul (μ Set.univ).toReal (Norm.norm f))","decl":"lemma norm_integral_le_mul_norm [IsFiniteMeasure μ] (f : X →ᵇ E) :\n    ‖∫ x, f x ∂μ‖ ≤ ENNReal.toReal (μ Set.univ) * ‖f‖ := by\n  calc  ‖∫ x, f x ∂μ‖\n    _ ≤ ∫ x, ‖f x‖ ∂μ                       := by exact norm_integral_le_integral_norm _\n    _ ≤ ∫ _, ‖f‖ ∂μ                         := ?_\n    _ = ENNReal.toReal (μ Set.univ) • ‖f‖   := by rw [integral_const]\n  apply integral_mono _ (integrable_const ‖f‖) (fun x ↦ f.norm_coe_le_norm x) -- NOTE: `gcongr`?\n  exact (integrable_norm_iff f.continuous.measurable.aestronglyMeasurable).mpr (f.integrable μ)\n\n"}
{"name":"BoundedContinuousFunction.norm_integral_le_norm","module":"Mathlib.MeasureTheory.Integral.BoundedContinuousFunction","initialProofState":"X : Type u_1\ninst✝⁸ : MeasurableSpace X\ninst✝⁷ : TopologicalSpace X\nμ : MeasureTheory.Measure X\nE : Type u_2\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : OpensMeasurableSpace X\ninst✝⁴ : SecondCountableTopology E\ninst✝³ : MeasurableSpace E\ninst✝² : BorelSpace E\ninst✝¹ : NormedSpace Real E\ninst✝ : MeasureTheory.IsProbabilityMeasure μ\nf : BoundedContinuousFunction X E\n⊢ LE.le (Norm.norm (MeasureTheory.integral μ fun x => f x)) (Norm.norm f)","decl":"lemma norm_integral_le_norm [IsProbabilityMeasure μ] (f : X →ᵇ E) :\n    ‖∫ x, f x ∂μ‖ ≤ ‖f‖ := by\n  convert f.norm_integral_le_mul_norm μ\n  simp only [measure_univ, ENNReal.one_toReal, one_mul]\n\n"}
{"name":"BoundedContinuousFunction.isBounded_range_integral","module":"Mathlib.MeasureTheory.Integral.BoundedContinuousFunction","initialProofState":"X : Type u_1\ninst✝⁸ : MeasurableSpace X\ninst✝⁷ : TopologicalSpace X\nE : Type u_2\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : OpensMeasurableSpace X\ninst✝⁴ : SecondCountableTopology E\ninst✝³ : MeasurableSpace E\ninst✝² : BorelSpace E\ninst✝¹ : NormedSpace Real E\nι : Type u_3\nμs : ι → MeasureTheory.Measure X\ninst✝ : ∀ (i : ι), MeasureTheory.IsProbabilityMeasure (μs i)\nf : BoundedContinuousFunction X E\n⊢ Bornology.IsBounded (Set.range fun i => MeasureTheory.integral (μs i) fun x => f x)","decl":"lemma isBounded_range_integral\n    {ι : Type*} (μs : ι → Measure X) [∀ i, IsProbabilityMeasure (μs i)] (f : X →ᵇ E) :\n    Bornology.IsBounded (Set.range (fun i ↦ ∫ x, f x ∂ (μs i))) := by\n  apply isBounded_iff_forall_norm_le.mpr ⟨‖f‖, fun v hv ↦ ?_⟩\n  obtain ⟨i, hi⟩ := hv\n  rw [← hi]\n  apply f.norm_integral_le_norm (μs i)\n\n"}
{"name":"BoundedContinuousFunction.integral_add_const","module":"Mathlib.MeasureTheory.Integral.BoundedContinuousFunction","initialProofState":"X : Type u_1\ninst✝³ : TopologicalSpace X\ninst✝² : MeasurableSpace X\ninst✝¹ : OpensMeasurableSpace X\nμ : MeasureTheory.Measure X\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : BoundedContinuousFunction X Real\nc : Real\n⊢ Eq (MeasureTheory.integral μ fun x => (HAdd.hAdd f (BoundedContinuousFunction.const X c)) x) (HAdd.hAdd (MeasureTheory.integral μ fun x => f x) (HSMul.hSMul (μ Set.univ).toReal c))","decl":"lemma integral_add_const (f : X →ᵇ ℝ) (c : ℝ) :\n    ∫ x, (f + const X c) x ∂μ = ∫ x, f x ∂μ + ENNReal.toReal (μ (Set.univ)) • c := by\n  simp [integral_add (f.integrable _) (integrable_const c)]\n\n"}
{"name":"BoundedContinuousFunction.integral_const_sub","module":"Mathlib.MeasureTheory.Integral.BoundedContinuousFunction","initialProofState":"X : Type u_1\ninst✝³ : TopologicalSpace X\ninst✝² : MeasurableSpace X\ninst✝¹ : OpensMeasurableSpace X\nμ : MeasureTheory.Measure X\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : BoundedContinuousFunction X Real\nc : Real\n⊢ Eq (MeasureTheory.integral μ fun x => (HSub.hSub (BoundedContinuousFunction.const X c) f) x) (HSub.hSub (HSMul.hSMul (μ Set.univ).toReal c) (MeasureTheory.integral μ fun x => f x))","decl":"lemma integral_const_sub (f : X →ᵇ ℝ) (c : ℝ) :\n    ∫ x, (const X c - f) x ∂μ = ENNReal.toReal (μ (Set.univ)) • c - ∫ x, f x ∂μ := by\n  simp [integral_sub (integrable_const c) (f.integrable _)]\n\n"}
{"name":"BoundedContinuousFunction.tendsto_integral_of_forall_limsup_integral_le_integral","module":"Mathlib.MeasureTheory.Integral.BoundedContinuousFunction","initialProofState":"X : Type u_1\ninst✝⁴ : TopologicalSpace X\ninst✝³ : MeasurableSpace X\ninst✝² : OpensMeasurableSpace X\nι : Type u_2\nL : Filter ι\nμ : MeasureTheory.Measure X\ninst✝¹ : MeasureTheory.IsProbabilityMeasure μ\nμs : ι → MeasureTheory.Measure X\ninst✝ : ∀ (i : ι), MeasureTheory.IsProbabilityMeasure (μs i)\nh : ∀ (f : BoundedContinuousFunction X Real), LE.le 0 f → LE.le (Filter.limsup (fun i => MeasureTheory.integral (μs i) fun x => f x) L) (MeasureTheory.integral μ fun x => f x)\nf : BoundedContinuousFunction X Real\n⊢ Filter.Tendsto (fun i => MeasureTheory.integral (μs i) fun x => f x) L (nhds (MeasureTheory.integral μ fun x => f x))","decl":"lemma tendsto_integral_of_forall_limsup_integral_le_integral {ι : Type*} {L : Filter ι}\n    {μ : Measure X} [IsProbabilityMeasure μ] {μs : ι → Measure X} [∀ i, IsProbabilityMeasure (μs i)]\n    (h : ∀ f : X →ᵇ ℝ, 0 ≤ f → L.limsup (fun i ↦ ∫ x, f x ∂ (μs i)) ≤ ∫ x, f x ∂μ)\n    (f : X →ᵇ ℝ) :\n    Tendsto (fun i ↦ ∫ x, f x ∂ (μs i)) L (𝓝 (∫ x, f x ∂μ)) := by\n  rcases eq_or_neBot L with rfl|hL\n  · simp only [tendsto_bot]\n  have obs := BoundedContinuousFunction.isBounded_range_integral μs f\n  have bdd_above := BddAbove.isBoundedUnder L.univ_mem (by simpa using obs.bddAbove)\n  have bdd_below := BddBelow.isBoundedUnder L.univ_mem (by simpa using obs.bddBelow)\n  apply tendsto_of_le_liminf_of_limsup_le _ _ bdd_above bdd_below\n  · have key := h _ (f.norm_sub_nonneg)\n    simp_rw [f.integral_const_sub ‖f‖] at key\n    simp only [measure_univ, ENNReal.one_toReal, smul_eq_mul, one_mul] at key\n    have := limsup_const_sub L (fun i ↦ ∫ x, f x ∂ (μs i)) ‖f‖ bdd_above.isCobounded_ge bdd_below\n    rwa [this, _root_.sub_le_sub_iff_left ‖f‖] at key\n  · have key := h _ (f.add_norm_nonneg)\n    simp_rw [f.integral_add_const ‖f‖] at key\n    simp only [measure_univ, ENNReal.one_toReal, smul_eq_mul, one_mul] at key\n    have := limsup_add_const L (fun i ↦ ∫ x, f x ∂ (μs i)) ‖f‖ bdd_above bdd_below.isCobounded_le\n    rwa [this, add_le_add_iff_right] at key\n\n"}
{"name":"BoundedContinuousFunction.tendsto_integral_of_forall_integral_le_liminf_integral","module":"Mathlib.MeasureTheory.Integral.BoundedContinuousFunction","initialProofState":"X : Type u_1\ninst✝⁴ : TopologicalSpace X\ninst✝³ : MeasurableSpace X\ninst✝² : OpensMeasurableSpace X\nι : Type u_2\nL : Filter ι\nμ : MeasureTheory.Measure X\ninst✝¹ : MeasureTheory.IsProbabilityMeasure μ\nμs : ι → MeasureTheory.Measure X\ninst✝ : ∀ (i : ι), MeasureTheory.IsProbabilityMeasure (μs i)\nh : ∀ (f : BoundedContinuousFunction X Real), LE.le 0 f → LE.le (MeasureTheory.integral μ fun x => f x) (Filter.liminf (fun i => MeasureTheory.integral (μs i) fun x => f x) L)\nf : BoundedContinuousFunction X Real\n⊢ Filter.Tendsto (fun i => MeasureTheory.integral (μs i) fun x => f x) L (nhds (MeasureTheory.integral μ fun x => f x))","decl":"lemma tendsto_integral_of_forall_integral_le_liminf_integral {ι : Type*} {L : Filter ι}\n    {μ : Measure X} [IsProbabilityMeasure μ] {μs : ι → Measure X} [∀ i, IsProbabilityMeasure (μs i)]\n    (h : ∀ f : X →ᵇ ℝ, 0 ≤ f → ∫ x, f x ∂μ ≤ L.liminf (fun i ↦ ∫ x, f x ∂ (μs i)))\n    (f : X →ᵇ ℝ) :\n    Tendsto (fun i ↦ ∫ x, f x ∂ (μs i)) L (𝓝 (∫ x, f x ∂μ)) := by\n  rcases eq_or_neBot L with rfl|hL\n  · simp only [tendsto_bot]\n  have obs := BoundedContinuousFunction.isBounded_range_integral μs f\n  have bdd_above := BddAbove.isBoundedUnder L.univ_mem (by simpa using obs.bddAbove)\n  have bdd_below := BddBelow.isBoundedUnder L.univ_mem (by simpa using obs.bddBelow)\n  apply @tendsto_of_le_liminf_of_limsup_le ℝ ι _ _ _ L (fun i ↦ ∫ x, f x ∂ (μs i)) (∫ x, f x ∂μ)\n  · have key := h _ (f.add_norm_nonneg)\n    simp_rw [f.integral_add_const ‖f‖] at key\n    simp only [measure_univ, ENNReal.one_toReal, smul_eq_mul, one_mul] at key\n    have := liminf_add_const L (fun i ↦ ∫ x, f x ∂ (μs i)) ‖f‖ bdd_above.isCobounded_ge bdd_below\n    rwa [this, add_le_add_iff_right] at key\n  · have key := h _ (f.norm_sub_nonneg)\n    simp_rw [f.integral_const_sub ‖f‖] at key\n    simp only [measure_univ, ENNReal.one_toReal, smul_eq_mul, one_mul] at key\n    have := liminf_const_sub L (fun i ↦ ∫ x, f x ∂ (μs i)) ‖f‖ bdd_above bdd_below.isCobounded_le\n    rwa [this, sub_le_sub_iff_left] at key\n  · exact bdd_above\n  · exact bdd_below\n\n"}
