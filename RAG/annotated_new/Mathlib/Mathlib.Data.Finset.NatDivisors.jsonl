{"name":"Nat.divisors_mul","module":"Mathlib.Data.Finset.NatDivisors","initialProofState":"m n : Nat\n⊢ Eq (HMul.hMul m n).divisors (HMul.hMul m.divisors n.divisors)","decl":"/-- The divisors of a product of natural numbers are the pointwise product of the divisors of the\nfactors. -/\nlemma Nat.divisors_mul (m n : ℕ) : divisors (m * n) = divisors m * divisors n := by\n  ext k\n  simp_rw [mem_mul, mem_divisors, dvd_mul, mul_ne_zero_iff, ← exists_and_left, ← exists_and_right]\n  simp only [and_assoc, and_comm, and_left_comm]\n\n"}
{"name":"Nat.divisorsHom_apply","module":"Mathlib.Data.Finset.NatDivisors","initialProofState":"n : Nat\n⊢ Eq (Nat.divisorsHom n) n.divisors","decl":"/-- `Nat.divisors` as a `MonoidHom`. -/\n@[simps]\ndef Nat.divisorsHom : ℕ →* Finset ℕ where\n  toFun := Nat.divisors\n  map_mul' := divisors_mul\n  map_one' := divisors_one\n\n"}
{"name":"Nat.Prime.divisors_sq","module":"Mathlib.Data.Finset.NatDivisors","initialProofState":"p : Nat\nhp : Nat.Prime p\n⊢ Eq (HPow.hPow p 2).divisors (Insert.insert (HPow.hPow p 2) (Insert.insert p (Singleton.singleton 1)))","decl":"lemma Nat.Prime.divisors_sq {p : ℕ} (hp : p.Prime) : (p ^ 2).divisors = {p ^ 2, p, 1} := by\n  simp [divisors_prime_pow hp, range_succ]\n\n"}
{"name":"List.nat_divisors_prod","module":"Mathlib.Data.Finset.NatDivisors","initialProofState":"l : List Nat\n⊢ Eq l.prod.divisors (List.map Nat.divisors l).prod","decl":"lemma List.nat_divisors_prod (l : List ℕ) : divisors l.prod = (l.map divisors).prod :=\n  map_list_prod Nat.divisorsHom l\n\n"}
{"name":"Multiset.nat_divisors_prod","module":"Mathlib.Data.Finset.NatDivisors","initialProofState":"s : Multiset Nat\n⊢ Eq s.prod.divisors (Multiset.map Nat.divisors s).prod","decl":"lemma Multiset.nat_divisors_prod (s : Multiset ℕ) : divisors s.prod = (s.map divisors).prod :=\n  map_multiset_prod Nat.divisorsHom s\n\n"}
{"name":"Finset.nat_divisors_prod","module":"Mathlib.Data.Finset.NatDivisors","initialProofState":"ι : Type u_1\ns : Finset ι\nf : ι → Nat\n⊢ Eq (s.prod fun i => f i).divisors (s.prod fun i => (f i).divisors)","decl":"lemma Finset.nat_divisors_prod {ι : Type*} (s : Finset ι) (f : ι → ℕ) :\n    divisors (∏ i ∈ s, f i) = ∏ i ∈ s, divisors (f i) :=\n  map_prod Nat.divisorsHom f s\n"}
