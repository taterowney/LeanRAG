{"name":"Nat.maxPowDiv.go_succ","module":"Mathlib.Data.Nat.MaxPowDiv","initialProofState":"k p n : Nat\n⊢ Eq (Nat.maxPowDiv.go (HAdd.hAdd k 1) p n) (HAdd.hAdd (Nat.maxPowDiv.go k p n) 1)","decl":"theorem go_succ {k p n : ℕ} : go (k+1) p n = go k p n + 1 := by\n  induction k, p, n using go.induct\n  case case1 h ih =>\n    unfold go\n    simp only [if_pos h]\n    exact ih\n  case case2 h =>\n    unfold go\n    simp only [if_neg h]\n\n"}
{"name":"Nat.maxPowDiv.zero_base","module":"Mathlib.Data.Nat.MaxPowDiv","initialProofState":"n : Nat\n⊢ Eq (Nat.maxPowDiv 0 n) 0","decl":"@[simp]\ntheorem zero_base {n : ℕ} : maxPowDiv 0 n = 0 := by\n  dsimp [maxPowDiv]\n  rw [maxPowDiv.go]\n  simp\n\n"}
{"name":"Nat.maxPowDiv.zero","module":"Mathlib.Data.Nat.MaxPowDiv","initialProofState":"p : Nat\n⊢ Eq (p.maxPowDiv 0) 0","decl":"@[simp]\ntheorem zero {p : ℕ} : maxPowDiv p 0 = 0 := by\n  dsimp [maxPowDiv]\n  rw [maxPowDiv.go]\n  simp\n\n"}
{"name":"Nat.maxPowDiv.base_mul_eq_succ","module":"Mathlib.Data.Nat.MaxPowDiv","initialProofState":"p n : Nat\nhp : LT.lt 1 p\nhn : LT.lt 0 n\n⊢ Eq (p.maxPowDiv (HMul.hMul p n)) (HAdd.hAdd (p.maxPowDiv n) 1)","decl":"theorem base_mul_eq_succ {p n : ℕ} (hp : 1 < p) (hn : 0 < n) :\n    p.maxPowDiv (p*n) = p.maxPowDiv n + 1 := by\n  have : 0 < p := lt_trans (b := 1) (by simp) hp\n  dsimp [maxPowDiv]\n  rw [maxPowDiv.go, if_pos, mul_div_right _ this]\n  · apply go_succ\n  · refine ⟨hp, ?_, by simp⟩\n    apply Nat.mul_pos this hn\n\n"}
{"name":"Nat.maxPowDiv.base_pow_mul","module":"Mathlib.Data.Nat.MaxPowDiv","initialProofState":"p n exp : Nat\nhp : LT.lt 1 p\nhn : LT.lt 0 n\n⊢ Eq (p.maxPowDiv (HMul.hMul (HPow.hPow p exp) n)) (HAdd.hAdd (p.maxPowDiv n) exp)","decl":"theorem base_pow_mul {p n exp : ℕ} (hp : 1 < p) (hn : 0 < n) :\n    p.maxPowDiv (p ^ exp * n) = p.maxPowDiv n + exp := by\n  match exp with\n  | 0 => simp\n  | e + 1 =>\n    rw [Nat.pow_succ, mul_assoc, mul_comm, mul_assoc, base_mul_eq_succ hp, mul_comm,\n      base_pow_mul hp hn]\n    · ac_rfl\n    · apply Nat.mul_pos hn <| pow_pos (pos_of_gt hp) e\n\n"}
{"name":"Nat.maxPowDiv.pow_dvd","module":"Mathlib.Data.Nat.MaxPowDiv","initialProofState":"p n : Nat\n⊢ Dvd.dvd (HPow.hPow p (p.maxPowDiv n)) n","decl":"theorem pow_dvd (p n : ℕ) : p ^ (p.maxPowDiv n) ∣ n := by\n  dsimp [maxPowDiv]\n  rw [go]\n  by_cases h : (1 < p ∧ 0 < n ∧ n % p = 0)\n  · have : n / p < n := by apply Nat.div_lt_self <;> aesop\n    rw [if_pos h]\n    have ⟨c,hc⟩ := pow_dvd p (n / p)\n    rw [go_succ, pow_succ]\n    nth_rw 2 [← mod_add_div' n p]\n    rw [h.right.right, zero_add]\n    exact ⟨c,by nth_rw 1 [hc]; ac_rfl⟩\n  · rw [if_neg h]\n    simp\n\n"}
{"name":"Nat.maxPowDiv.le_of_dvd","module":"Mathlib.Data.Nat.MaxPowDiv","initialProofState":"p n pow : Nat\nhp : LT.lt 1 p\nhn : LT.lt 0 n\nh : Dvd.dvd (HPow.hPow p pow) n\n⊢ LE.le pow (p.maxPowDiv n)","decl":"theorem le_of_dvd {p n pow : ℕ} (hp : 1 < p) (hn : 0 < n) (h : p ^ pow ∣ n) :\n    pow ≤ p.maxPowDiv n := by\n  have ⟨c, hc⟩ := h\n  have : 0 < c := by\n    apply Nat.pos_of_ne_zero\n    intro h'\n    rw [h',mul_zero] at hc\n    exact not_eq_zero_of_lt hn hc\n  simp [hc, base_pow_mul hp this]\n\n"}
