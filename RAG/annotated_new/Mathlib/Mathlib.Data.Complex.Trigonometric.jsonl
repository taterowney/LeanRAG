{"name":"Complex.two_sinh","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (HMul.hMul 2 (Complex.sinh x)) (HSub.hSub (Complex.exp x) (Complex.exp (Neg.neg x)))","decl":"theorem two_sinh : 2 * sinh x = exp x - exp (-x) :=\n  mul_div_cancel₀ _ two_ne_zero\n\n"}
{"name":"Complex.two_cosh","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (HMul.hMul 2 (Complex.cosh x)) (HAdd.hAdd (Complex.exp x) (Complex.exp (Neg.neg x)))","decl":"theorem two_cosh : 2 * cosh x = exp x + exp (-x) :=\n  mul_div_cancel₀ _ two_ne_zero\n\n"}
{"name":"Complex.sinh_zero","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"⊢ Eq (Complex.sinh 0) 0","decl":"@[simp]\ntheorem sinh_zero : sinh 0 = 0 := by simp [sinh]\n\n"}
{"name":"Complex.sinh_neg","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.sinh (Neg.neg x)) (Neg.neg (Complex.sinh x))","decl":"@[simp]\ntheorem sinh_neg : sinh (-x) = -sinh x := by simp [sinh, exp_neg, (neg_div _ _).symm, add_mul]\n\n"}
{"name":"Complex.sinh_add","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Complex\n⊢ Eq (Complex.sinh (HAdd.hAdd x y)) (HAdd.hAdd (HMul.hMul (Complex.sinh x) (Complex.cosh y)) (HMul.hMul (Complex.cosh x) (Complex.sinh y)))","decl":"theorem sinh_add : sinh (x + y) = sinh x * cosh y + cosh x * sinh y := by\n  rw [← mul_right_inj' (two_ne_zero' ℂ), two_sinh, exp_add, neg_add, exp_add, eq_comm, mul_add, ←\n    mul_assoc, two_sinh, mul_left_comm, two_sinh, ← mul_right_inj' (two_ne_zero' ℂ), mul_add,\n    mul_left_comm, two_cosh, ← mul_assoc, two_cosh]\n  exact sinh_add_aux\n\n"}
{"name":"Complex.cosh_zero","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"⊢ Eq (Complex.cosh 0) 1","decl":"@[simp]\ntheorem cosh_zero : cosh 0 = 1 := by simp [cosh]\n\n"}
{"name":"Complex.cosh_neg","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.cosh (Neg.neg x)) (Complex.cosh x)","decl":"@[simp]\ntheorem cosh_neg : cosh (-x) = cosh x := by simp [add_comm, cosh, exp_neg]\n\n"}
{"name":"Complex.cosh_add","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Complex\n⊢ Eq (Complex.cosh (HAdd.hAdd x y)) (HAdd.hAdd (HMul.hMul (Complex.cosh x) (Complex.cosh y)) (HMul.hMul (Complex.sinh x) (Complex.sinh y)))","decl":"theorem cosh_add : cosh (x + y) = cosh x * cosh y + sinh x * sinh y := by\n  rw [← mul_right_inj' (two_ne_zero' ℂ), two_cosh, exp_add, neg_add, exp_add, eq_comm, mul_add, ←\n    mul_assoc, two_cosh, ← mul_assoc, two_sinh, ← mul_right_inj' (two_ne_zero' ℂ), mul_add,\n    mul_left_comm, two_cosh, mul_left_comm, two_sinh]\n  exact cosh_add_aux\n\n"}
{"name":"Complex.sinh_sub","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Complex\n⊢ Eq (Complex.sinh (HSub.hSub x y)) (HSub.hSub (HMul.hMul (Complex.sinh x) (Complex.cosh y)) (HMul.hMul (Complex.cosh x) (Complex.sinh y)))","decl":"theorem sinh_sub : sinh (x - y) = sinh x * cosh y - cosh x * sinh y := by\n  simp [sub_eq_add_neg, sinh_add, sinh_neg, cosh_neg]\n\n"}
{"name":"Complex.cosh_sub","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Complex\n⊢ Eq (Complex.cosh (HSub.hSub x y)) (HSub.hSub (HMul.hMul (Complex.cosh x) (Complex.cosh y)) (HMul.hMul (Complex.sinh x) (Complex.sinh y)))","decl":"theorem cosh_sub : cosh (x - y) = cosh x * cosh y - sinh x * sinh y := by\n  simp [sub_eq_add_neg, cosh_add, sinh_neg, cosh_neg]\n\n"}
{"name":"Complex.sinh_conj","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.sinh ((starRingEnd Complex) x)) ((starRingEnd Complex) (Complex.sinh x))","decl":"theorem sinh_conj : sinh (conj x) = conj (sinh x) := by\n  rw [sinh, ← RingHom.map_neg, exp_conj, exp_conj, ← RingHom.map_sub, sinh, map_div₀]\n  -- Porting note: not nice\n  simp [← one_add_one_eq_two]\n\n"}
{"name":"Complex.ofReal_sinh_ofReal_re","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (↑(Complex.sinh ↑x).re) (Complex.sinh ↑x)","decl":"@[simp]\ntheorem ofReal_sinh_ofReal_re (x : ℝ) : ((sinh x).re : ℂ) = sinh x :=\n  conj_eq_iff_re.1 <| by rw [← sinh_conj, conj_ofReal]\n\n"}
{"name":"Complex.ofReal_sinh","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (↑(Real.sinh x)) (Complex.sinh ↑x)","decl":"@[simp, norm_cast]\ntheorem ofReal_sinh (x : ℝ) : (Real.sinh x : ℂ) = sinh x :=\n  ofReal_sinh_ofReal_re _\n\n"}
{"name":"Complex.sinh_ofReal_im","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Complex.sinh ↑x).im 0","decl":"@[simp]\ntheorem sinh_ofReal_im (x : ℝ) : (sinh x).im = 0 := by rw [← ofReal_sinh_ofReal_re, ofReal_im]\n\n"}
{"name":"Complex.sinh_ofReal_re","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Complex.sinh ↑x).re (Real.sinh x)","decl":"theorem sinh_ofReal_re (x : ℝ) : (sinh x).re = Real.sinh x :=\n  rfl\n\n"}
{"name":"Complex.cosh_conj","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.cosh ((starRingEnd Complex) x)) ((starRingEnd Complex) (Complex.cosh x))","decl":"theorem cosh_conj : cosh (conj x) = conj (cosh x) := by\n  rw [cosh, ← RingHom.map_neg, exp_conj, exp_conj, ← RingHom.map_add, cosh, map_div₀]\n  -- Porting note: not nice\n  simp [← one_add_one_eq_two]\n\n"}
{"name":"Complex.ofReal_cosh_ofReal_re","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (↑(Complex.cosh ↑x).re) (Complex.cosh ↑x)","decl":"theorem ofReal_cosh_ofReal_re (x : ℝ) : ((cosh x).re : ℂ) = cosh x :=\n  conj_eq_iff_re.1 <| by rw [← cosh_conj, conj_ofReal]\n\n"}
{"name":"Complex.ofReal_cosh","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (↑(Real.cosh x)) (Complex.cosh ↑x)","decl":"@[simp, norm_cast]\ntheorem ofReal_cosh (x : ℝ) : (Real.cosh x : ℂ) = cosh x :=\n  ofReal_cosh_ofReal_re _\n\n"}
{"name":"Complex.cosh_ofReal_im","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Complex.cosh ↑x).im 0","decl":"@[simp]\ntheorem cosh_ofReal_im (x : ℝ) : (cosh x).im = 0 := by rw [← ofReal_cosh_ofReal_re, ofReal_im]\n\n"}
{"name":"Complex.cosh_ofReal_re","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Complex.cosh ↑x).re (Real.cosh x)","decl":"@[simp]\ntheorem cosh_ofReal_re (x : ℝ) : (cosh x).re = Real.cosh x :=\n  rfl\n\n"}
{"name":"Complex.tanh_eq_sinh_div_cosh","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.tanh x) (HDiv.hDiv (Complex.sinh x) (Complex.cosh x))","decl":"theorem tanh_eq_sinh_div_cosh : tanh x = sinh x / cosh x :=\n  rfl\n\n"}
{"name":"Complex.tanh_zero","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"⊢ Eq (Complex.tanh 0) 0","decl":"@[simp]\ntheorem tanh_zero : tanh 0 = 0 := by simp [tanh]\n\n"}
{"name":"Complex.tanh_neg","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.tanh (Neg.neg x)) (Neg.neg (Complex.tanh x))","decl":"@[simp]\ntheorem tanh_neg : tanh (-x) = -tanh x := by simp [tanh, neg_div]\n\n"}
{"name":"Complex.tanh_conj","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.tanh ((starRingEnd Complex) x)) ((starRingEnd Complex) (Complex.tanh x))","decl":"theorem tanh_conj : tanh (conj x) = conj (tanh x) := by\n  rw [tanh, sinh_conj, cosh_conj, ← map_div₀, tanh]\n\n"}
{"name":"Complex.ofReal_tanh_ofReal_re","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (↑(Complex.tanh ↑x).re) (Complex.tanh ↑x)","decl":"@[simp]\ntheorem ofReal_tanh_ofReal_re (x : ℝ) : ((tanh x).re : ℂ) = tanh x :=\n  conj_eq_iff_re.1 <| by rw [← tanh_conj, conj_ofReal]\n\n"}
{"name":"Complex.ofReal_tanh","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (↑(Real.tanh x)) (Complex.tanh ↑x)","decl":"@[simp, norm_cast]\ntheorem ofReal_tanh (x : ℝ) : (Real.tanh x : ℂ) = tanh x :=\n  ofReal_tanh_ofReal_re _\n\n"}
{"name":"Complex.tanh_ofReal_im","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Complex.tanh ↑x).im 0","decl":"@[simp]\ntheorem tanh_ofReal_im (x : ℝ) : (tanh x).im = 0 := by rw [← ofReal_tanh_ofReal_re, ofReal_im]\n\n"}
{"name":"Complex.tanh_ofReal_re","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Complex.tanh ↑x).re (Real.tanh x)","decl":"theorem tanh_ofReal_re (x : ℝ) : (tanh x).re = Real.tanh x :=\n  rfl\n\n"}
{"name":"Complex.cosh_add_sinh","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (HAdd.hAdd (Complex.cosh x) (Complex.sinh x)) (Complex.exp x)","decl":"@[simp]\ntheorem cosh_add_sinh : cosh x + sinh x = exp x := by\n  rw [← mul_right_inj' (two_ne_zero' ℂ), mul_add, two_cosh, two_sinh, add_add_sub_cancel, two_mul]\n\n"}
{"name":"Complex.sinh_add_cosh","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (HAdd.hAdd (Complex.sinh x) (Complex.cosh x)) (Complex.exp x)","decl":"@[simp]\ntheorem sinh_add_cosh : sinh x + cosh x = exp x := by rw [add_comm, cosh_add_sinh]\n\n"}
{"name":"Complex.exp_sub_cosh","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (HSub.hSub (Complex.exp x) (Complex.cosh x)) (Complex.sinh x)","decl":"@[simp]\ntheorem exp_sub_cosh : exp x - cosh x = sinh x :=\n  sub_eq_iff_eq_add.2 (sinh_add_cosh x).symm\n\n"}
{"name":"Complex.exp_sub_sinh","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (HSub.hSub (Complex.exp x) (Complex.sinh x)) (Complex.cosh x)","decl":"@[simp]\ntheorem exp_sub_sinh : exp x - sinh x = cosh x :=\n  sub_eq_iff_eq_add.2 (cosh_add_sinh x).symm\n\n"}
{"name":"Complex.cosh_sub_sinh","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (HSub.hSub (Complex.cosh x) (Complex.sinh x)) (Complex.exp (Neg.neg x))","decl":"@[simp]\ntheorem cosh_sub_sinh : cosh x - sinh x = exp (-x) := by\n  rw [← mul_right_inj' (two_ne_zero' ℂ), mul_sub, two_cosh, two_sinh, add_sub_sub_cancel, two_mul]\n\n"}
{"name":"Complex.sinh_sub_cosh","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (HSub.hSub (Complex.sinh x) (Complex.cosh x)) (Neg.neg (Complex.exp (Neg.neg x)))","decl":"@[simp]\ntheorem sinh_sub_cosh : sinh x - cosh x = -exp (-x) := by rw [← neg_sub, cosh_sub_sinh]\n\n"}
{"name":"Complex.cosh_sq_sub_sinh_sq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (HSub.hSub (HPow.hPow (Complex.cosh x) 2) (HPow.hPow (Complex.sinh x) 2)) 1","decl":"@[simp]\ntheorem cosh_sq_sub_sinh_sq : cosh x ^ 2 - sinh x ^ 2 = 1 := by\n  rw [sq_sub_sq, cosh_add_sinh, cosh_sub_sinh, ← exp_add, add_neg_cancel, exp_zero]\n\n"}
{"name":"Complex.cosh_sq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (HPow.hPow (Complex.cosh x) 2) (HAdd.hAdd (HPow.hPow (Complex.sinh x) 2) 1)","decl":"theorem cosh_sq : cosh x ^ 2 = sinh x ^ 2 + 1 := by\n  rw [← cosh_sq_sub_sinh_sq x]\n  ring\n\n"}
{"name":"Complex.sinh_sq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (HPow.hPow (Complex.sinh x) 2) (HSub.hSub (HPow.hPow (Complex.cosh x) 2) 1)","decl":"theorem sinh_sq : sinh x ^ 2 = cosh x ^ 2 - 1 := by\n  rw [← cosh_sq_sub_sinh_sq x]\n  ring\n\n"}
{"name":"Complex.cosh_two_mul","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.cosh (HMul.hMul 2 x)) (HAdd.hAdd (HPow.hPow (Complex.cosh x) 2) (HPow.hPow (Complex.sinh x) 2))","decl":"theorem cosh_two_mul : cosh (2 * x) = cosh x ^ 2 + sinh x ^ 2 := by rw [two_mul, cosh_add, sq, sq]\n\n"}
{"name":"Complex.sinh_two_mul","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.sinh (HMul.hMul 2 x)) (HMul.hMul (HMul.hMul 2 (Complex.sinh x)) (Complex.cosh x))","decl":"theorem sinh_two_mul : sinh (2 * x) = 2 * sinh x * cosh x := by\n  rw [two_mul, sinh_add]\n  ring\n\n"}
{"name":"Complex.cosh_three_mul","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.cosh (HMul.hMul 3 x)) (HSub.hSub (HMul.hMul 4 (HPow.hPow (Complex.cosh x) 3)) (HMul.hMul 3 (Complex.cosh x)))","decl":"theorem cosh_three_mul : cosh (3 * x) = 4 * cosh x ^ 3 - 3 * cosh x := by\n  have h1 : x + 2 * x = 3 * x := by ring\n  rw [← h1, cosh_add x (2 * x)]\n  simp only [cosh_two_mul, sinh_two_mul]\n  have h2 : sinh x * (2 * sinh x * cosh x) = 2 * cosh x * sinh x ^ 2 := by ring\n  rw [h2, sinh_sq]\n  ring\n\n"}
{"name":"Complex.sinh_three_mul","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.sinh (HMul.hMul 3 x)) (HAdd.hAdd (HMul.hMul 4 (HPow.hPow (Complex.sinh x) 3)) (HMul.hMul 3 (Complex.sinh x)))","decl":"theorem sinh_three_mul : sinh (3 * x) = 4 * sinh x ^ 3 + 3 * sinh x := by\n  have h1 : x + 2 * x = 3 * x := by ring\n  rw [← h1, sinh_add x (2 * x)]\n  simp only [cosh_two_mul, sinh_two_mul]\n  have h2 : cosh x * (2 * sinh x * cosh x) = 2 * sinh x * cosh x ^ 2 := by ring\n  rw [h2, cosh_sq]\n  ring\n\n"}
{"name":"Complex.sin_zero","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"⊢ Eq (Complex.sin 0) 0","decl":"@[simp]\ntheorem sin_zero : sin 0 = 0 := by simp [sin]\n\n"}
{"name":"Complex.sin_neg","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.sin (Neg.neg x)) (Neg.neg (Complex.sin x))","decl":"@[simp]\ntheorem sin_neg : sin (-x) = -sin x := by\n  simp [sin, sub_eq_add_neg, exp_neg, (neg_div _ _).symm, add_mul]\n\n"}
{"name":"Complex.two_sin","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (HMul.hMul 2 (Complex.sin x)) (HMul.hMul (HSub.hSub (Complex.exp (HMul.hMul (Neg.neg x) Complex.I)) (Complex.exp (HMul.hMul x Complex.I))) Complex.I)","decl":"theorem two_sin : 2 * sin x = (exp (-x * I) - exp (x * I)) * I :=\n  mul_div_cancel₀ _ two_ne_zero\n\n"}
{"name":"Complex.two_cos","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (HMul.hMul 2 (Complex.cos x)) (HAdd.hAdd (Complex.exp (HMul.hMul x Complex.I)) (Complex.exp (HMul.hMul (Neg.neg x) Complex.I)))","decl":"theorem two_cos : 2 * cos x = exp (x * I) + exp (-x * I) :=\n  mul_div_cancel₀ _ two_ne_zero\n\n"}
{"name":"Complex.sinh_mul_I","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.sinh (HMul.hMul x Complex.I)) (HMul.hMul (Complex.sin x) Complex.I)","decl":"theorem sinh_mul_I : sinh (x * I) = sin x * I := by\n  rw [← mul_right_inj' (two_ne_zero' ℂ), two_sinh, ← mul_assoc, two_sin, mul_assoc, I_mul_I,\n    mul_neg_one, neg_sub, neg_mul_eq_neg_mul]\n\n"}
{"name":"Complex.cosh_mul_I","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.cosh (HMul.hMul x Complex.I)) (Complex.cos x)","decl":"theorem cosh_mul_I : cosh (x * I) = cos x := by\n  rw [← mul_right_inj' (two_ne_zero' ℂ), two_cosh, two_cos, neg_mul_eq_neg_mul]\n\n"}
{"name":"Complex.tanh_mul_I","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.tanh (HMul.hMul x Complex.I)) (HMul.hMul (Complex.tan x) Complex.I)","decl":"theorem tanh_mul_I : tanh (x * I) = tan x * I := by\n  rw [tanh_eq_sinh_div_cosh, cosh_mul_I, sinh_mul_I, mul_div_right_comm, tan]\n\n"}
{"name":"Complex.cos_mul_I","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.cos (HMul.hMul x Complex.I)) (Complex.cosh x)","decl":"theorem cos_mul_I : cos (x * I) = cosh x := by rw [← cosh_mul_I]; ring_nf; simp\n\n"}
{"name":"Complex.sin_mul_I","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.sin (HMul.hMul x Complex.I)) (HMul.hMul (Complex.sinh x) Complex.I)","decl":"theorem sin_mul_I : sin (x * I) = sinh x * I := by\n  have h : I * sin (x * I) = -sinh x := by\n    rw [mul_comm, ← sinh_mul_I]\n    ring_nf\n    simp\n  rw [← neg_neg (sinh x), ← h]\n  apply Complex.ext <;> simp\n\n"}
{"name":"Complex.tan_mul_I","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.tan (HMul.hMul x Complex.I)) (HMul.hMul (Complex.tanh x) Complex.I)","decl":"theorem tan_mul_I : tan (x * I) = tanh x * I := by\n  rw [tan, sin_mul_I, cos_mul_I, mul_div_right_comm, tanh_eq_sinh_div_cosh]\n\n"}
{"name":"Complex.sin_add","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Complex\n⊢ Eq (Complex.sin (HAdd.hAdd x y)) (HAdd.hAdd (HMul.hMul (Complex.sin x) (Complex.cos y)) (HMul.hMul (Complex.cos x) (Complex.sin y)))","decl":"theorem sin_add : sin (x + y) = sin x * cos y + cos x * sin y := by\n  rw [← mul_left_inj' I_ne_zero, ← sinh_mul_I, add_mul, add_mul, mul_right_comm, ← sinh_mul_I,\n    mul_assoc, ← sinh_mul_I, ← cosh_mul_I, ← cosh_mul_I, sinh_add]\n\n"}
{"name":"Complex.cos_zero","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"⊢ Eq (Complex.cos 0) 1","decl":"@[simp]\ntheorem cos_zero : cos 0 = 1 := by simp [cos]\n\n"}
{"name":"Complex.cos_neg","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.cos (Neg.neg x)) (Complex.cos x)","decl":"@[simp]\ntheorem cos_neg : cos (-x) = cos x := by simp [cos, sub_eq_add_neg, exp_neg, add_comm]\n\n"}
{"name":"Complex.cos_add","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Complex\n⊢ Eq (Complex.cos (HAdd.hAdd x y)) (HSub.hSub (HMul.hMul (Complex.cos x) (Complex.cos y)) (HMul.hMul (Complex.sin x) (Complex.sin y)))","decl":"theorem cos_add : cos (x + y) = cos x * cos y - sin x * sin y := by\n  rw [← cosh_mul_I, add_mul, cosh_add, cosh_mul_I, cosh_mul_I, sinh_mul_I, sinh_mul_I,\n    mul_mul_mul_comm, I_mul_I, mul_neg_one, sub_eq_add_neg]\n\n"}
{"name":"Complex.sin_sub","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Complex\n⊢ Eq (Complex.sin (HSub.hSub x y)) (HSub.hSub (HMul.hMul (Complex.sin x) (Complex.cos y)) (HMul.hMul (Complex.cos x) (Complex.sin y)))","decl":"theorem sin_sub : sin (x - y) = sin x * cos y - cos x * sin y := by\n  simp [sub_eq_add_neg, sin_add, sin_neg, cos_neg]\n\n"}
{"name":"Complex.cos_sub","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Complex\n⊢ Eq (Complex.cos (HSub.hSub x y)) (HAdd.hAdd (HMul.hMul (Complex.cos x) (Complex.cos y)) (HMul.hMul (Complex.sin x) (Complex.sin y)))","decl":"theorem cos_sub : cos (x - y) = cos x * cos y + sin x * sin y := by\n  simp [sub_eq_add_neg, cos_add, sin_neg, cos_neg]\n\n"}
{"name":"Complex.sin_add_mul_I","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Complex\n⊢ Eq (Complex.sin (HAdd.hAdd x (HMul.hMul y Complex.I))) (HAdd.hAdd (HMul.hMul (Complex.sin x) (Complex.cosh y)) (HMul.hMul (HMul.hMul (Complex.cos x) (Complex.sinh y)) Complex.I))","decl":"theorem sin_add_mul_I (x y : ℂ) : sin (x + y * I) = sin x * cosh y + cos x * sinh y * I := by\n  rw [sin_add, cos_mul_I, sin_mul_I, mul_assoc]\n\n"}
{"name":"Complex.sin_eq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"z : Complex\n⊢ Eq (Complex.sin z) (HAdd.hAdd (HMul.hMul (Complex.sin ↑z.re) (Complex.cosh ↑z.im)) (HMul.hMul (HMul.hMul (Complex.cos ↑z.re) (Complex.sinh ↑z.im)) Complex.I))","decl":"theorem sin_eq (z : ℂ) : sin z = sin z.re * cosh z.im + cos z.re * sinh z.im * I := by\n  convert sin_add_mul_I z.re z.im; exact (re_add_im z).symm\n\n"}
{"name":"Complex.cos_add_mul_I","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Complex\n⊢ Eq (Complex.cos (HAdd.hAdd x (HMul.hMul y Complex.I))) (HSub.hSub (HMul.hMul (Complex.cos x) (Complex.cosh y)) (HMul.hMul (HMul.hMul (Complex.sin x) (Complex.sinh y)) Complex.I))","decl":"theorem cos_add_mul_I (x y : ℂ) : cos (x + y * I) = cos x * cosh y - sin x * sinh y * I := by\n  rw [cos_add, cos_mul_I, sin_mul_I, mul_assoc]\n\n"}
{"name":"Complex.cos_eq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"z : Complex\n⊢ Eq (Complex.cos z) (HSub.hSub (HMul.hMul (Complex.cos ↑z.re) (Complex.cosh ↑z.im)) (HMul.hMul (HMul.hMul (Complex.sin ↑z.re) (Complex.sinh ↑z.im)) Complex.I))","decl":"theorem cos_eq (z : ℂ) : cos z = cos z.re * cosh z.im - sin z.re * sinh z.im * I := by\n  convert cos_add_mul_I z.re z.im; exact (re_add_im z).symm\n\n"}
{"name":"Complex.sin_sub_sin","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Complex\n⊢ Eq (HSub.hSub (Complex.sin x) (Complex.sin y)) (HMul.hMul (HMul.hMul 2 (Complex.sin (HDiv.hDiv (HSub.hSub x y) 2))) (Complex.cos (HDiv.hDiv (HAdd.hAdd x y) 2)))","decl":"theorem sin_sub_sin : sin x - sin y = 2 * sin ((x - y) / 2) * cos ((x + y) / 2) := by\n  have s1 := sin_add ((x + y) / 2) ((x - y) / 2)\n  have s2 := sin_sub ((x + y) / 2) ((x - y) / 2)\n  rw [div_add_div_same, add_sub, add_right_comm, add_sub_cancel_right, add_self_div_two] at s1\n  rw [div_sub_div_same, ← sub_add, add_sub_cancel_left, add_self_div_two] at s2\n  rw [s1, s2]\n  ring\n\n"}
{"name":"Complex.cos_sub_cos","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Complex\n⊢ Eq (HSub.hSub (Complex.cos x) (Complex.cos y)) (HMul.hMul (HMul.hMul (-2) (Complex.sin (HDiv.hDiv (HAdd.hAdd x y) 2))) (Complex.sin (HDiv.hDiv (HSub.hSub x y) 2)))","decl":"theorem cos_sub_cos : cos x - cos y = -2 * sin ((x + y) / 2) * sin ((x - y) / 2) := by\n  have s1 := cos_add ((x + y) / 2) ((x - y) / 2)\n  have s2 := cos_sub ((x + y) / 2) ((x - y) / 2)\n  rw [div_add_div_same, add_sub, add_right_comm, add_sub_cancel_right, add_self_div_two] at s1\n  rw [div_sub_div_same, ← sub_add, add_sub_cancel_left, add_self_div_two] at s2\n  rw [s1, s2]\n  ring\n\n"}
{"name":"Complex.sin_add_sin","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Complex\n⊢ Eq (HAdd.hAdd (Complex.sin x) (Complex.sin y)) (HMul.hMul (HMul.hMul 2 (Complex.sin (HDiv.hDiv (HAdd.hAdd x y) 2))) (Complex.cos (HDiv.hDiv (HSub.hSub x y) 2)))","decl":"theorem sin_add_sin : sin x + sin y = 2 * sin ((x + y) / 2) * cos ((x - y) / 2) := by\n  simpa using sin_sub_sin x (-y)\n\n"}
{"name":"Complex.cos_add_cos","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Complex\n⊢ Eq (HAdd.hAdd (Complex.cos x) (Complex.cos y)) (HMul.hMul (HMul.hMul 2 (Complex.cos (HDiv.hDiv (HAdd.hAdd x y) 2))) (Complex.cos (HDiv.hDiv (HSub.hSub x y) 2)))","decl":"theorem cos_add_cos : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  calc\n    cos x + cos y = cos ((x + y) / 2 + (x - y) / 2) + cos ((x + y) / 2 - (x - y) / 2) := ?_\n    _ =\n        cos ((x + y) / 2) * cos ((x - y) / 2) - sin ((x + y) / 2) * sin ((x - y) / 2) +\n          (cos ((x + y) / 2) * cos ((x - y) / 2) + sin ((x + y) / 2) * sin ((x - y) / 2)) :=\n      ?_\n    _ = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := ?_\n\n  · congr <;> field_simp\n  · rw [cos_add, cos_sub]\n  ring\n\n"}
{"name":"Complex.sin_conj","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.sin ((starRingEnd Complex) x)) ((starRingEnd Complex) (Complex.sin x))","decl":"theorem sin_conj : sin (conj x) = conj (sin x) := by\n  rw [← mul_left_inj' I_ne_zero, ← sinh_mul_I, ← conj_neg_I, ← RingHom.map_mul, ← RingHom.map_mul,\n    sinh_conj, mul_neg, sinh_neg, sinh_mul_I, mul_neg]\n\n"}
{"name":"Complex.ofReal_sin_ofReal_re","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (↑(Complex.sin ↑x).re) (Complex.sin ↑x)","decl":"@[simp]\ntheorem ofReal_sin_ofReal_re (x : ℝ) : ((sin x).re : ℂ) = sin x :=\n  conj_eq_iff_re.1 <| by rw [← sin_conj, conj_ofReal]\n\n"}
{"name":"Complex.ofReal_sin","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (↑(Real.sin x)) (Complex.sin ↑x)","decl":"@[simp, norm_cast]\ntheorem ofReal_sin (x : ℝ) : (Real.sin x : ℂ) = sin x :=\n  ofReal_sin_ofReal_re _\n\n"}
{"name":"Complex.sin_ofReal_im","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Complex.sin ↑x).im 0","decl":"@[simp]\ntheorem sin_ofReal_im (x : ℝ) : (sin x).im = 0 := by rw [← ofReal_sin_ofReal_re, ofReal_im]\n\n"}
{"name":"Complex.sin_ofReal_re","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Complex.sin ↑x).re (Real.sin x)","decl":"theorem sin_ofReal_re (x : ℝ) : (sin x).re = Real.sin x :=\n  rfl\n\n"}
{"name":"Complex.cos_conj","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.cos ((starRingEnd Complex) x)) ((starRingEnd Complex) (Complex.cos x))","decl":"theorem cos_conj : cos (conj x) = conj (cos x) := by\n  rw [← cosh_mul_I, ← conj_neg_I, ← RingHom.map_mul, ← cosh_mul_I, cosh_conj, mul_neg, cosh_neg]\n\n"}
{"name":"Complex.ofReal_cos_ofReal_re","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (↑(Complex.cos ↑x).re) (Complex.cos ↑x)","decl":"@[simp]\ntheorem ofReal_cos_ofReal_re (x : ℝ) : ((cos x).re : ℂ) = cos x :=\n  conj_eq_iff_re.1 <| by rw [← cos_conj, conj_ofReal]\n\n"}
{"name":"Complex.ofReal_cos","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (↑(Real.cos x)) (Complex.cos ↑x)","decl":"@[simp, norm_cast]\ntheorem ofReal_cos (x : ℝ) : (Real.cos x : ℂ) = cos x :=\n  ofReal_cos_ofReal_re _\n\n"}
{"name":"Complex.cos_ofReal_im","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Complex.cos ↑x).im 0","decl":"@[simp]\ntheorem cos_ofReal_im (x : ℝ) : (cos x).im = 0 := by rw [← ofReal_cos_ofReal_re, ofReal_im]\n\n"}
{"name":"Complex.cos_ofReal_re","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Complex.cos ↑x).re (Real.cos x)","decl":"theorem cos_ofReal_re (x : ℝ) : (cos x).re = Real.cos x :=\n  rfl\n\n"}
{"name":"Complex.tan_zero","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"⊢ Eq (Complex.tan 0) 0","decl":"@[simp]\ntheorem tan_zero : tan 0 = 0 := by simp [tan]\n\n"}
{"name":"Complex.tan_eq_sin_div_cos","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.tan x) (HDiv.hDiv (Complex.sin x) (Complex.cos x))","decl":"theorem tan_eq_sin_div_cos : tan x = sin x / cos x :=\n  rfl\n\n"}
{"name":"Complex.cot_eq_cos_div_sin","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq x.cot (HDiv.hDiv (Complex.cos x) (Complex.sin x))","decl":"theorem cot_eq_cos_div_sin : cot x = cos x / sin x :=\n  rfl\n\n"}
{"name":"Complex.tan_mul_cos","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\nhx : Ne (Complex.cos x) 0\n⊢ Eq (HMul.hMul (Complex.tan x) (Complex.cos x)) (Complex.sin x)","decl":"theorem tan_mul_cos {x : ℂ} (hx : cos x ≠ 0) : tan x * cos x = sin x := by\n  rw [tan_eq_sin_div_cos, div_mul_cancel₀ _ hx]\n\n"}
{"name":"Complex.tan_neg","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.tan (Neg.neg x)) (Neg.neg (Complex.tan x))","decl":"@[simp]\ntheorem tan_neg : tan (-x) = -tan x := by simp [tan, neg_div]\n\n"}
{"name":"Complex.tan_conj","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.tan ((starRingEnd Complex) x)) ((starRingEnd Complex) (Complex.tan x))","decl":"theorem tan_conj : tan (conj x) = conj (tan x) := by rw [tan, sin_conj, cos_conj, ← map_div₀, tan]\n\n"}
{"name":"Complex.cot_conj","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq ((starRingEnd Complex) x).cot ((starRingEnd Complex) x.cot)","decl":"theorem cot_conj : cot (conj x) = conj (cot x) := by rw [cot, sin_conj, cos_conj, ← map_div₀, cot]\n\n"}
{"name":"Complex.ofReal_tan_ofReal_re","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (↑(Complex.tan ↑x).re) (Complex.tan ↑x)","decl":"@[simp]\ntheorem ofReal_tan_ofReal_re (x : ℝ) : ((tan x).re : ℂ) = tan x :=\n  conj_eq_iff_re.1 <| by rw [← tan_conj, conj_ofReal]\n\n"}
{"name":"Complex.ofReal_cot_ofReal_re","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (↑(↑x).cot.re) (↑x).cot","decl":"@[simp]\ntheorem ofReal_cot_ofReal_re (x : ℝ) : ((cot x).re : ℂ) = cot x :=\n  conj_eq_iff_re.1 <| by rw [← cot_conj, conj_ofReal]\n\n"}
{"name":"Complex.ofReal_tan","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (↑(Real.tan x)) (Complex.tan ↑x)","decl":"@[simp, norm_cast]\ntheorem ofReal_tan (x : ℝ) : (Real.tan x : ℂ) = tan x :=\n  ofReal_tan_ofReal_re _\n\n"}
{"name":"Complex.ofReal_cot","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (↑x.cot) (↑x).cot","decl":"@[simp, norm_cast]\ntheorem ofReal_cot (x : ℝ) : (Real.cot x : ℂ) = cot x :=\n  ofReal_cot_ofReal_re _\n\n"}
{"name":"Complex.tan_ofReal_im","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Complex.tan ↑x).im 0","decl":"@[simp]\ntheorem tan_ofReal_im (x : ℝ) : (tan x).im = 0 := by rw [← ofReal_tan_ofReal_re, ofReal_im]\n\n"}
{"name":"Complex.tan_ofReal_re","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Complex.tan ↑x).re (Real.tan x)","decl":"theorem tan_ofReal_re (x : ℝ) : (tan x).re = Real.tan x :=\n  rfl\n\n"}
{"name":"Complex.cos_add_sin_I","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (HAdd.hAdd (Complex.cos x) (HMul.hMul (Complex.sin x) Complex.I)) (Complex.exp (HMul.hMul x Complex.I))","decl":"theorem cos_add_sin_I : cos x + sin x * I = exp (x * I) := by\n  rw [← cosh_add_sinh, sinh_mul_I, cosh_mul_I]\n\n"}
{"name":"Complex.cos_sub_sin_I","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (HSub.hSub (Complex.cos x) (HMul.hMul (Complex.sin x) Complex.I)) (Complex.exp (HMul.hMul (Neg.neg x) Complex.I))","decl":"theorem cos_sub_sin_I : cos x - sin x * I = exp (-x * I) := by\n  rw [neg_mul, ← cosh_sub_sinh, sinh_mul_I, cosh_mul_I]\n\n"}
{"name":"Complex.sin_sq_add_cos_sq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (HAdd.hAdd (HPow.hPow (Complex.sin x) 2) (HPow.hPow (Complex.cos x) 2)) 1","decl":"@[simp]\ntheorem sin_sq_add_cos_sq : sin x ^ 2 + cos x ^ 2 = 1 :=\n  Eq.trans (by rw [cosh_mul_I, sinh_mul_I, mul_pow, I_sq, mul_neg_one, sub_neg_eq_add, add_comm])\n    (cosh_sq_sub_sinh_sq (x * I))\n\n"}
{"name":"Complex.cos_sq_add_sin_sq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (HAdd.hAdd (HPow.hPow (Complex.cos x) 2) (HPow.hPow (Complex.sin x) 2)) 1","decl":"@[simp]\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by rw [add_comm, sin_sq_add_cos_sq]\n\n"}
{"name":"Complex.cos_two_mul'","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.cos (HMul.hMul 2 x)) (HSub.hSub (HPow.hPow (Complex.cos x) 2) (HPow.hPow (Complex.sin x) 2))","decl":"theorem cos_two_mul' : cos (2 * x) = cos x ^ 2 - sin x ^ 2 := by rw [two_mul, cos_add, ← sq, ← sq]\n\n"}
{"name":"Complex.cos_two_mul","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.cos (HMul.hMul 2 x)) (HSub.hSub (HMul.hMul 2 (HPow.hPow (Complex.cos x) 2)) 1)","decl":"theorem cos_two_mul : cos (2 * x) = 2 * cos x ^ 2 - 1 := by\n  rw [cos_two_mul', eq_sub_iff_add_eq.2 (sin_sq_add_cos_sq x), ← sub_add, sub_add_eq_add_sub,\n    two_mul]\n\n"}
{"name":"Complex.sin_two_mul","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.sin (HMul.hMul 2 x)) (HMul.hMul (HMul.hMul 2 (Complex.sin x)) (Complex.cos x))","decl":"theorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul, add_mul, mul_comm]\n\n"}
{"name":"Complex.cos_sq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (HPow.hPow (Complex.cos x) 2) (HAdd.hAdd (1 / 2) (HDiv.hDiv (Complex.cos (HMul.hMul 2 x)) 2))","decl":"theorem cos_sq : cos x ^ 2 = 1 / 2 + cos (2 * x) / 2 := by\n  simp [cos_two_mul, div_add_div_same, mul_div_cancel_left₀, two_ne_zero, -one_div]\n\n"}
{"name":"Complex.cos_sq'","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (HPow.hPow (Complex.cos x) 2) (HSub.hSub 1 (HPow.hPow (Complex.sin x) 2))","decl":"theorem cos_sq' : cos x ^ 2 = 1 - sin x ^ 2 := by rw [← sin_sq_add_cos_sq x, add_sub_cancel_left]\n\n"}
{"name":"Complex.sin_sq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (HPow.hPow (Complex.sin x) 2) (HSub.hSub 1 (HPow.hPow (Complex.cos x) 2))","decl":"theorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by rw [← sin_sq_add_cos_sq x, add_sub_cancel_right]\n\n"}
{"name":"Complex.inv_one_add_tan_sq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\nhx : Ne (Complex.cos x) 0\n⊢ Eq (Inv.inv (HAdd.hAdd 1 (HPow.hPow (Complex.tan x) 2))) (HPow.hPow (Complex.cos x) 2)","decl":"theorem inv_one_add_tan_sq {x : ℂ} (hx : cos x ≠ 0) : (1 + tan x ^ 2)⁻¹ = cos x ^ 2 := by\n  rw [tan_eq_sin_div_cos, div_pow]\n  field_simp\n\n"}
{"name":"Complex.tan_sq_div_one_add_tan_sq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\nhx : Ne (Complex.cos x) 0\n⊢ Eq (HDiv.hDiv (HPow.hPow (Complex.tan x) 2) (HAdd.hAdd 1 (HPow.hPow (Complex.tan x) 2))) (HPow.hPow (Complex.sin x) 2)","decl":"theorem tan_sq_div_one_add_tan_sq {x : ℂ} (hx : cos x ≠ 0) :\n    tan x ^ 2 / (1 + tan x ^ 2) = sin x ^ 2 := by\n  simp only [← tan_mul_cos hx, mul_pow, ← inv_one_add_tan_sq hx, div_eq_mul_inv, one_mul]\n\n"}
{"name":"Complex.cos_three_mul","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.cos (HMul.hMul 3 x)) (HSub.hSub (HMul.hMul 4 (HPow.hPow (Complex.cos x) 3)) (HMul.hMul 3 (Complex.cos x)))","decl":"theorem cos_three_mul : cos (3 * x) = 4 * cos x ^ 3 - 3 * cos x := by\n  have h1 : x + 2 * x = 3 * x := by ring\n  rw [← h1, cos_add x (2 * x)]\n  simp only [cos_two_mul, sin_two_mul, mul_add, mul_sub, mul_one, sq]\n  have h2 : 4 * cos x ^ 3 = 2 * cos x * cos x * cos x + 2 * cos x * cos x ^ 2 := by ring\n  rw [h2, cos_sq']\n  ring\n\n"}
{"name":"Complex.sin_three_mul","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.sin (HMul.hMul 3 x)) (HSub.hSub (HMul.hMul 3 (Complex.sin x)) (HMul.hMul 4 (HPow.hPow (Complex.sin x) 3)))","decl":"theorem sin_three_mul : sin (3 * x) = 3 * sin x - 4 * sin x ^ 3 := by\n  have h1 : x + 2 * x = 3 * x := by ring\n  rw [← h1, sin_add x (2 * x)]\n  simp only [cos_two_mul, sin_two_mul, cos_sq']\n  have h2 : cos x * (2 * sin x * cos x) = 2 * sin x * cos x ^ 2 := by ring\n  rw [h2, cos_sq']\n  ring\n\n"}
{"name":"Complex.exp_mul_I","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.exp (HMul.hMul x Complex.I)) (HAdd.hAdd (Complex.cos x) (HMul.hMul (Complex.sin x) Complex.I))","decl":"theorem exp_mul_I : exp (x * I) = cos x + sin x * I :=\n  (cos_add_sin_I _).symm\n\n"}
{"name":"Complex.exp_add_mul_I","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Complex\n⊢ Eq (Complex.exp (HAdd.hAdd x (HMul.hMul y Complex.I))) (HMul.hMul (Complex.exp x) (HAdd.hAdd (Complex.cos y) (HMul.hMul (Complex.sin y) Complex.I)))","decl":"theorem exp_add_mul_I : exp (x + y * I) = exp x * (cos y + sin y * I) := by rw [exp_add, exp_mul_I]\n\n"}
{"name":"Complex.exp_eq_exp_re_mul_sin_add_cos","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.exp x) (HMul.hMul (Complex.exp ↑x.re) (HAdd.hAdd (Complex.cos ↑x.im) (HMul.hMul (Complex.sin ↑x.im) Complex.I)))","decl":"theorem exp_eq_exp_re_mul_sin_add_cos : exp x = exp x.re * (cos x.im + sin x.im * I) := by\n  rw [← exp_add_mul_I, re_add_im]\n\n"}
{"name":"Complex.exp_re","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.exp x).re (HMul.hMul (Real.exp x.re) (Real.cos x.im))","decl":"theorem exp_re : (exp x).re = Real.exp x.re * Real.cos x.im := by\n  rw [exp_eq_exp_re_mul_sin_add_cos]\n  simp [exp_ofReal_re, cos_ofReal_re]\n\n"}
{"name":"Complex.exp_im","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Complex\n⊢ Eq (Complex.exp x).im (HMul.hMul (Real.exp x.re) (Real.sin x.im))","decl":"theorem exp_im : (exp x).im = Real.exp x.re * Real.sin x.im := by\n  rw [exp_eq_exp_re_mul_sin_add_cos]\n  simp [exp_ofReal_re, sin_ofReal_re]\n\n"}
{"name":"Complex.exp_ofReal_mul_I_re","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Complex.exp (HMul.hMul (↑x) Complex.I)).re (Real.cos x)","decl":"@[simp]\ntheorem exp_ofReal_mul_I_re (x : ℝ) : (exp (x * I)).re = Real.cos x := by\n  simp [exp_mul_I, cos_ofReal_re]\n\n"}
{"name":"Complex.exp_ofReal_mul_I_im","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Complex.exp (HMul.hMul (↑x) Complex.I)).im (Real.sin x)","decl":"@[simp]\ntheorem exp_ofReal_mul_I_im (x : ℝ) : (exp (x * I)).im = Real.sin x := by\n  simp [exp_mul_I, sin_ofReal_re]\n\n"}
{"name":"Complex.cos_add_sin_mul_I_pow","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"n : Nat\nz : Complex\n⊢ Eq (HPow.hPow (HAdd.hAdd (Complex.cos z) (HMul.hMul (Complex.sin z) Complex.I)) n) (HAdd.hAdd (Complex.cos (HMul.hMul (↑n) z)) (HMul.hMul (Complex.sin (HMul.hMul (↑n) z)) Complex.I))","decl":"/-- **De Moivre's formula** -/\ntheorem cos_add_sin_mul_I_pow (n : ℕ) (z : ℂ) :\n    (cos z + sin z * I) ^ n = cos (↑n * z) + sin (↑n * z) * I := by\n  rw [← exp_mul_I, ← exp_mul_I, ← exp_nat_mul, mul_assoc]\n\n"}
{"name":"Real.sin_zero","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"⊢ Eq (Real.sin 0) 0","decl":"@[simp]\ntheorem sin_zero : sin 0 = 0 := by simp [sin]\n\n"}
{"name":"Real.sin_neg","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Real.sin (Neg.neg x)) (Neg.neg (Real.sin x))","decl":"@[simp]\ntheorem sin_neg : sin (-x) = -sin x := by simp [sin, exp_neg, (neg_div _ _).symm, add_mul]\n\n"}
{"name":"Real.sin_add","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Real\n⊢ Eq (Real.sin (HAdd.hAdd x y)) (HAdd.hAdd (HMul.hMul (Real.sin x) (Real.cos y)) (HMul.hMul (Real.cos x) (Real.sin y)))","decl":"nonrec theorem sin_add : sin (x + y) = sin x * cos y + cos x * sin y :=\n  ofReal_injective <| by simp [sin_add]\n\n"}
{"name":"Real.cos_zero","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"⊢ Eq (Real.cos 0) 1","decl":"@[simp]\ntheorem cos_zero : cos 0 = 1 := by simp [cos]\n\n"}
{"name":"Real.cos_neg","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Real.cos (Neg.neg x)) (Real.cos x)","decl":"@[simp]\ntheorem cos_neg : cos (-x) = cos x := by simp [cos, exp_neg]\n\n"}
{"name":"Real.cos_abs","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Real.cos (abs x)) (Real.cos x)","decl":"@[simp]\ntheorem cos_abs : cos |x| = cos x := by\n  cases le_total x 0 <;> simp only [*, _root_.abs_of_nonneg, abs_of_nonpos, cos_neg]\n\n"}
{"name":"Real.cos_add","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Real\n⊢ Eq (Real.cos (HAdd.hAdd x y)) (HSub.hSub (HMul.hMul (Real.cos x) (Real.cos y)) (HMul.hMul (Real.sin x) (Real.sin y)))","decl":"nonrec theorem cos_add : cos (x + y) = cos x * cos y - sin x * sin y :=\n  ofReal_injective <| by simp [cos_add]\n\n"}
{"name":"Real.sin_sub","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Real\n⊢ Eq (Real.sin (HSub.hSub x y)) (HSub.hSub (HMul.hMul (Real.sin x) (Real.cos y)) (HMul.hMul (Real.cos x) (Real.sin y)))","decl":"theorem sin_sub : sin (x - y) = sin x * cos y - cos x * sin y := by\n  simp [sub_eq_add_neg, sin_add, sin_neg, cos_neg]\n\n"}
{"name":"Real.cos_sub","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Real\n⊢ Eq (Real.cos (HSub.hSub x y)) (HAdd.hAdd (HMul.hMul (Real.cos x) (Real.cos y)) (HMul.hMul (Real.sin x) (Real.sin y)))","decl":"theorem cos_sub : cos (x - y) = cos x * cos y + sin x * sin y := by\n  simp [sub_eq_add_neg, cos_add, sin_neg, cos_neg]\n\n"}
{"name":"Real.sin_sub_sin","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Real\n⊢ Eq (HSub.hSub (Real.sin x) (Real.sin y)) (HMul.hMul (HMul.hMul 2 (Real.sin (HDiv.hDiv (HSub.hSub x y) 2))) (Real.cos (HDiv.hDiv (HAdd.hAdd x y) 2)))","decl":"nonrec theorem sin_sub_sin : sin x - sin y = 2 * sin ((x - y) / 2) * cos ((x + y) / 2) :=\n  ofReal_injective <| by simp [sin_sub_sin]\n\n"}
{"name":"Real.cos_sub_cos","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Real\n⊢ Eq (HSub.hSub (Real.cos x) (Real.cos y)) (HMul.hMul (HMul.hMul (-2) (Real.sin (HDiv.hDiv (HAdd.hAdd x y) 2))) (Real.sin (HDiv.hDiv (HSub.hSub x y) 2)))","decl":"nonrec theorem cos_sub_cos : cos x - cos y = -2 * sin ((x + y) / 2) * sin ((x - y) / 2) :=\n  ofReal_injective <| by simp [cos_sub_cos]\n\n"}
{"name":"Real.cos_add_cos","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Real\n⊢ Eq (HAdd.hAdd (Real.cos x) (Real.cos y)) (HMul.hMul (HMul.hMul 2 (Real.cos (HDiv.hDiv (HAdd.hAdd x y) 2))) (Real.cos (HDiv.hDiv (HSub.hSub x y) 2)))","decl":"nonrec theorem cos_add_cos : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) :=\n  ofReal_injective <| by simp [cos_add_cos]\n\n"}
{"name":"Real.two_mul_sin_mul_sin","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Real\n⊢ Eq (HMul.hMul (HMul.hMul 2 (Real.sin x)) (Real.sin y)) (HSub.hSub (Real.cos (HSub.hSub x y)) (Real.cos (HAdd.hAdd x y)))","decl":"theorem two_mul_sin_mul_sin (x y : ℝ) : 2 * sin x * sin y = cos (x - y) - cos (x + y) := by\n  simp [cos_add, cos_sub]\n  ring\n\n"}
{"name":"Real.two_mul_cos_mul_cos","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Real\n⊢ Eq (HMul.hMul (HMul.hMul 2 (Real.cos x)) (Real.cos y)) (HAdd.hAdd (Real.cos (HSub.hSub x y)) (Real.cos (HAdd.hAdd x y)))","decl":"theorem two_mul_cos_mul_cos (x y : ℝ) : 2 * cos x * cos y = cos (x - y) + cos (x + y) := by\n  simp [cos_add, cos_sub]\n  ring\n\n"}
{"name":"Real.two_mul_sin_mul_cos","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Real\n⊢ Eq (HMul.hMul (HMul.hMul 2 (Real.sin x)) (Real.cos y)) (HAdd.hAdd (Real.sin (HSub.hSub x y)) (Real.sin (HAdd.hAdd x y)))","decl":"theorem two_mul_sin_mul_cos (x y : ℝ) : 2 * sin x * cos y = sin (x - y) + sin (x + y) := by\n  simp [sin_add, sin_sub]\n  ring\n\n"}
{"name":"Real.tan_eq_sin_div_cos","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Real.tan x) (HDiv.hDiv (Real.sin x) (Real.cos x))","decl":"nonrec theorem tan_eq_sin_div_cos : tan x = sin x / cos x :=\n  ofReal_injective <| by simp only [ofReal_tan, tan_eq_sin_div_cos, ofReal_div, ofReal_sin,\n    ofReal_cos]\n\n"}
{"name":"Real.cot_eq_cos_div_sin","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq x.cot (HDiv.hDiv (Real.cos x) (Real.sin x))","decl":"nonrec theorem cot_eq_cos_div_sin : cot x = cos x / sin x :=\n  ofReal_injective <| by simp [cot_eq_cos_div_sin]\n\n"}
{"name":"Real.tan_mul_cos","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\nhx : Ne (Real.cos x) 0\n⊢ Eq (HMul.hMul (Real.tan x) (Real.cos x)) (Real.sin x)","decl":"theorem tan_mul_cos {x : ℝ} (hx : cos x ≠ 0) : tan x * cos x = sin x := by\n  rw [tan_eq_sin_div_cos, div_mul_cancel₀ _ hx]\n\n"}
{"name":"Real.tan_zero","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"⊢ Eq (Real.tan 0) 0","decl":"@[simp]\ntheorem tan_zero : tan 0 = 0 := by simp [tan]\n\n"}
{"name":"Real.tan_neg","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Real.tan (Neg.neg x)) (Neg.neg (Real.tan x))","decl":"@[simp]\ntheorem tan_neg : tan (-x) = -tan x := by simp [tan, neg_div]\n\n"}
{"name":"Real.sin_sq_add_cos_sq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (HAdd.hAdd (HPow.hPow (Real.sin x) 2) (HPow.hPow (Real.cos x) 2)) 1","decl":"@[simp]\nnonrec theorem sin_sq_add_cos_sq : sin x ^ 2 + cos x ^ 2 = 1 :=\n  ofReal_injective (by simp [sin_sq_add_cos_sq])\n\n"}
{"name":"Real.cos_sq_add_sin_sq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (HAdd.hAdd (HPow.hPow (Real.cos x) 2) (HPow.hPow (Real.sin x) 2)) 1","decl":"@[simp]\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by rw [add_comm, sin_sq_add_cos_sq]\n\n"}
{"name":"Real.sin_sq_le_one","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ LE.le (HPow.hPow (Real.sin x) 2) 1","decl":"theorem sin_sq_le_one : sin x ^ 2 ≤ 1 := by\n  rw [← sin_sq_add_cos_sq x]; exact le_add_of_nonneg_right (sq_nonneg _)\n\n"}
{"name":"Real.cos_sq_le_one","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ LE.le (HPow.hPow (Real.cos x) 2) 1","decl":"theorem cos_sq_le_one : cos x ^ 2 ≤ 1 := by\n  rw [← sin_sq_add_cos_sq x]; exact le_add_of_nonneg_left (sq_nonneg _)\n\n"}
{"name":"Real.abs_sin_le_one","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ LE.le (abs (Real.sin x)) 1","decl":"theorem abs_sin_le_one : |sin x| ≤ 1 :=\n  abs_le_one_iff_mul_self_le_one.2 <| by simp only [← sq, sin_sq_le_one]\n\n"}
{"name":"Real.abs_cos_le_one","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ LE.le (abs (Real.cos x)) 1","decl":"theorem abs_cos_le_one : |cos x| ≤ 1 :=\n  abs_le_one_iff_mul_self_le_one.2 <| by simp only [← sq, cos_sq_le_one]\n\n"}
{"name":"Real.sin_le_one","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ LE.le (Real.sin x) 1","decl":"theorem sin_le_one : sin x ≤ 1 :=\n  (abs_le.1 (abs_sin_le_one _)).2\n\n"}
{"name":"Real.cos_le_one","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ LE.le (Real.cos x) 1","decl":"theorem cos_le_one : cos x ≤ 1 :=\n  (abs_le.1 (abs_cos_le_one _)).2\n\n"}
{"name":"Real.neg_one_le_sin","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ LE.le (-1) (Real.sin x)","decl":"theorem neg_one_le_sin : -1 ≤ sin x :=\n  (abs_le.1 (abs_sin_le_one _)).1\n\n"}
{"name":"Real.neg_one_le_cos","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ LE.le (-1) (Real.cos x)","decl":"theorem neg_one_le_cos : -1 ≤ cos x :=\n  (abs_le.1 (abs_cos_le_one _)).1\n\n"}
{"name":"Real.cos_two_mul","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Real.cos (HMul.hMul 2 x)) (HSub.hSub (HMul.hMul 2 (HPow.hPow (Real.cos x) 2)) 1)","decl":"nonrec theorem cos_two_mul : cos (2 * x) = 2 * cos x ^ 2 - 1 :=\n  ofReal_injective <| by simp [cos_two_mul]\n\n"}
{"name":"Real.cos_two_mul'","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Real.cos (HMul.hMul 2 x)) (HSub.hSub (HPow.hPow (Real.cos x) 2) (HPow.hPow (Real.sin x) 2))","decl":"nonrec theorem cos_two_mul' : cos (2 * x) = cos x ^ 2 - sin x ^ 2 :=\n  ofReal_injective <| by simp [cos_two_mul']\n\n"}
{"name":"Real.sin_two_mul","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Real.sin (HMul.hMul 2 x)) (HMul.hMul (HMul.hMul 2 (Real.sin x)) (Real.cos x))","decl":"nonrec theorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x :=\n  ofReal_injective <| by simp [sin_two_mul]\n\n"}
{"name":"Real.cos_sq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (HPow.hPow (Real.cos x) 2) (HAdd.hAdd (1 / 2) (HDiv.hDiv (Real.cos (HMul.hMul 2 x)) 2))","decl":"nonrec theorem cos_sq : cos x ^ 2 = 1 / 2 + cos (2 * x) / 2 :=\n  ofReal_injective <| by simp [cos_sq]\n\n"}
{"name":"Real.cos_sq'","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (HPow.hPow (Real.cos x) 2) (HSub.hSub 1 (HPow.hPow (Real.sin x) 2))","decl":"theorem cos_sq' : cos x ^ 2 = 1 - sin x ^ 2 := by rw [← sin_sq_add_cos_sq x, add_sub_cancel_left]\n\n"}
{"name":"Real.sin_sq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (HPow.hPow (Real.sin x) 2) (HSub.hSub 1 (HPow.hPow (Real.cos x) 2))","decl":"theorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 :=\n  eq_sub_iff_add_eq.2 <| sin_sq_add_cos_sq _\n\n"}
{"name":"Real.sin_sq_eq_half_sub","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (HPow.hPow (Real.sin x) 2) (HSub.hSub (1 / 2) (HDiv.hDiv (Real.cos (HMul.hMul 2 x)) 2))","decl":"lemma sin_sq_eq_half_sub : sin x ^ 2 = 1 / 2 - cos (2 * x) / 2 := by\n  rw [sin_sq, cos_sq, ← sub_sub, sub_half]\n\n"}
{"name":"Real.abs_sin_eq_sqrt_one_sub_cos_sq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (abs (Real.sin x)) (HSub.hSub 1 (HPow.hPow (Real.cos x) 2)).sqrt","decl":"theorem abs_sin_eq_sqrt_one_sub_cos_sq (x : ℝ) : |sin x| = √(1 - cos x ^ 2) := by\n  rw [← sin_sq, sqrt_sq_eq_abs]\n\n"}
{"name":"Real.abs_cos_eq_sqrt_one_sub_sin_sq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (abs (Real.cos x)) (HSub.hSub 1 (HPow.hPow (Real.sin x) 2)).sqrt","decl":"theorem abs_cos_eq_sqrt_one_sub_sin_sq (x : ℝ) : |cos x| = √(1 - sin x ^ 2) := by\n  rw [← cos_sq', sqrt_sq_eq_abs]\n\n"}
{"name":"Real.inv_one_add_tan_sq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\nhx : Ne (Real.cos x) 0\n⊢ Eq (Inv.inv (HAdd.hAdd 1 (HPow.hPow (Real.tan x) 2))) (HPow.hPow (Real.cos x) 2)","decl":"theorem inv_one_add_tan_sq {x : ℝ} (hx : cos x ≠ 0) : (1 + tan x ^ 2)⁻¹ = cos x ^ 2 :=\n  have : Complex.cos x ≠ 0 := mt (congr_arg re) hx\n  ofReal_inj.1 <| by simpa using Complex.inv_one_add_tan_sq this\n\n"}
{"name":"Real.tan_sq_div_one_add_tan_sq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\nhx : Ne (Real.cos x) 0\n⊢ Eq (HDiv.hDiv (HPow.hPow (Real.tan x) 2) (HAdd.hAdd 1 (HPow.hPow (Real.tan x) 2))) (HPow.hPow (Real.sin x) 2)","decl":"theorem tan_sq_div_one_add_tan_sq {x : ℝ} (hx : cos x ≠ 0) :\n    tan x ^ 2 / (1 + tan x ^ 2) = sin x ^ 2 := by\n  simp only [← tan_mul_cos hx, mul_pow, ← inv_one_add_tan_sq hx, div_eq_mul_inv, one_mul]\n\n"}
{"name":"Real.inv_sqrt_one_add_tan_sq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\nhx : LT.lt 0 (Real.cos x)\n⊢ Eq (Inv.inv (HAdd.hAdd 1 (HPow.hPow (Real.tan x) 2)).sqrt) (Real.cos x)","decl":"theorem inv_sqrt_one_add_tan_sq {x : ℝ} (hx : 0 < cos x) : (√(1 + tan x ^ 2))⁻¹ = cos x := by\n  rw [← sqrt_sq hx.le, ← sqrt_inv, inv_one_add_tan_sq hx.ne']\n\n"}
{"name":"Real.tan_div_sqrt_one_add_tan_sq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\nhx : LT.lt 0 (Real.cos x)\n⊢ Eq (HDiv.hDiv (Real.tan x) (HAdd.hAdd 1 (HPow.hPow (Real.tan x) 2)).sqrt) (Real.sin x)","decl":"theorem tan_div_sqrt_one_add_tan_sq {x : ℝ} (hx : 0 < cos x) :\n    tan x / √(1 + tan x ^ 2) = sin x := by\n  rw [← tan_mul_cos hx.ne', ← inv_sqrt_one_add_tan_sq hx, div_eq_mul_inv]\n\n"}
{"name":"Real.cos_three_mul","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Real.cos (HMul.hMul 3 x)) (HSub.hSub (HMul.hMul 4 (HPow.hPow (Real.cos x) 3)) (HMul.hMul 3 (Real.cos x)))","decl":"nonrec theorem cos_three_mul : cos (3 * x) = 4 * cos x ^ 3 - 3 * cos x := by\n  rw [← ofReal_inj]; simp [cos_three_mul]\n\n"}
{"name":"Real.sin_three_mul","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Real.sin (HMul.hMul 3 x)) (HSub.hSub (HMul.hMul 3 (Real.sin x)) (HMul.hMul 4 (HPow.hPow (Real.sin x) 3)))","decl":"nonrec theorem sin_three_mul : sin (3 * x) = 3 * sin x - 4 * sin x ^ 3 := by\n  rw [← ofReal_inj]; simp [sin_three_mul]\n\n"}
{"name":"Real.sinh_eq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Real.sinh x) (HDiv.hDiv (HSub.hSub (Real.exp x) (Real.exp (Neg.neg x))) 2)","decl":"/-- The definition of `sinh` in terms of `exp`. -/\nnonrec theorem sinh_eq (x : ℝ) : sinh x = (exp x - exp (-x)) / 2 :=\n  ofReal_injective <| by simp [Complex.sinh]\n\n"}
{"name":"Real.sinh_zero","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"⊢ Eq (Real.sinh 0) 0","decl":"@[simp]\ntheorem sinh_zero : sinh 0 = 0 := by simp [sinh]\n\n"}
{"name":"Real.sinh_neg","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Real.sinh (Neg.neg x)) (Neg.neg (Real.sinh x))","decl":"@[simp]\ntheorem sinh_neg : sinh (-x) = -sinh x := by simp [sinh, exp_neg, (neg_div _ _).symm, add_mul]\n\n"}
{"name":"Real.sinh_add","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Real\n⊢ Eq (Real.sinh (HAdd.hAdd x y)) (HAdd.hAdd (HMul.hMul (Real.sinh x) (Real.cosh y)) (HMul.hMul (Real.cosh x) (Real.sinh y)))","decl":"nonrec theorem sinh_add : sinh (x + y) = sinh x * cosh y + cosh x * sinh y := by\n  rw [← ofReal_inj]; simp [sinh_add]\n\n"}
{"name":"Real.cosh_eq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Real.cosh x) (HDiv.hDiv (HAdd.hAdd (Real.exp x) (Real.exp (Neg.neg x))) 2)","decl":"/-- The definition of `cosh` in terms of `exp`. -/\ntheorem cosh_eq (x : ℝ) : cosh x = (exp x + exp (-x)) / 2 :=\n  eq_div_of_mul_eq two_ne_zero <| by\n    rw [cosh, exp, exp, Complex.ofReal_neg, Complex.cosh, mul_two, ← Complex.add_re, ← mul_two,\n      div_mul_cancel₀ _ (two_ne_zero' ℂ), Complex.add_re]\n\n"}
{"name":"Real.cosh_zero","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"⊢ Eq (Real.cosh 0) 1","decl":"@[simp]\ntheorem cosh_zero : cosh 0 = 1 := by simp [cosh]\n\n"}
{"name":"Real.cosh_neg","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Real.cosh (Neg.neg x)) (Real.cosh x)","decl":"@[simp]\ntheorem cosh_neg : cosh (-x) = cosh x :=\n  ofReal_inj.1 <| by simp\n\n"}
{"name":"Real.cosh_abs","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Real.cosh (abs x)) (Real.cosh x)","decl":"@[simp]\ntheorem cosh_abs : cosh |x| = cosh x := by\n  cases le_total x 0 <;> simp [*, _root_.abs_of_nonneg, abs_of_nonpos]\n\n"}
{"name":"Real.cosh_add","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Real\n⊢ Eq (Real.cosh (HAdd.hAdd x y)) (HAdd.hAdd (HMul.hMul (Real.cosh x) (Real.cosh y)) (HMul.hMul (Real.sinh x) (Real.sinh y)))","decl":"nonrec theorem cosh_add : cosh (x + y) = cosh x * cosh y + sinh x * sinh y := by\n  rw [← ofReal_inj]; simp [cosh_add]\n\n"}
{"name":"Real.sinh_sub","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Real\n⊢ Eq (Real.sinh (HSub.hSub x y)) (HSub.hSub (HMul.hMul (Real.sinh x) (Real.cosh y)) (HMul.hMul (Real.cosh x) (Real.sinh y)))","decl":"theorem sinh_sub : sinh (x - y) = sinh x * cosh y - cosh x * sinh y := by\n  simp [sub_eq_add_neg, sinh_add, sinh_neg, cosh_neg]\n\n"}
{"name":"Real.cosh_sub","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Real\n⊢ Eq (Real.cosh (HSub.hSub x y)) (HSub.hSub (HMul.hMul (Real.cosh x) (Real.cosh y)) (HMul.hMul (Real.sinh x) (Real.sinh y)))","decl":"theorem cosh_sub : cosh (x - y) = cosh x * cosh y - sinh x * sinh y := by\n  simp [sub_eq_add_neg, cosh_add, sinh_neg, cosh_neg]\n\n"}
{"name":"Real.tanh_eq_sinh_div_cosh","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Real.tanh x) (HDiv.hDiv (Real.sinh x) (Real.cosh x))","decl":"nonrec theorem tanh_eq_sinh_div_cosh : tanh x = sinh x / cosh x :=\n  ofReal_inj.1 <| by simp [tanh_eq_sinh_div_cosh]\n\n"}
{"name":"Real.tanh_zero","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"⊢ Eq (Real.tanh 0) 0","decl":"@[simp]\ntheorem tanh_zero : tanh 0 = 0 := by simp [tanh]\n\n"}
{"name":"Real.tanh_neg","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Real.tanh (Neg.neg x)) (Neg.neg (Real.tanh x))","decl":"@[simp]\ntheorem tanh_neg : tanh (-x) = -tanh x := by simp [tanh, neg_div]\n\n"}
{"name":"Real.cosh_add_sinh","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (HAdd.hAdd (Real.cosh x) (Real.sinh x)) (Real.exp x)","decl":"@[simp]\ntheorem cosh_add_sinh : cosh x + sinh x = exp x := by rw [← ofReal_inj]; simp\n\n"}
{"name":"Real.sinh_add_cosh","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (HAdd.hAdd (Real.sinh x) (Real.cosh x)) (Real.exp x)","decl":"@[simp]\ntheorem sinh_add_cosh : sinh x + cosh x = exp x := by rw [add_comm, cosh_add_sinh]\n\n"}
{"name":"Real.exp_sub_cosh","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (HSub.hSub (Real.exp x) (Real.cosh x)) (Real.sinh x)","decl":"@[simp]\ntheorem exp_sub_cosh : exp x - cosh x = sinh x :=\n  sub_eq_iff_eq_add.2 (sinh_add_cosh x).symm\n\n"}
{"name":"Real.exp_sub_sinh","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (HSub.hSub (Real.exp x) (Real.sinh x)) (Real.cosh x)","decl":"@[simp]\ntheorem exp_sub_sinh : exp x - sinh x = cosh x :=\n  sub_eq_iff_eq_add.2 (cosh_add_sinh x).symm\n\n"}
{"name":"Real.cosh_sub_sinh","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (HSub.hSub (Real.cosh x) (Real.sinh x)) (Real.exp (Neg.neg x))","decl":"@[simp]\ntheorem cosh_sub_sinh : cosh x - sinh x = exp (-x) := by\n  rw [← ofReal_inj]\n  simp\n\n"}
{"name":"Real.sinh_sub_cosh","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (HSub.hSub (Real.sinh x) (Real.cosh x)) (Neg.neg (Real.exp (Neg.neg x)))","decl":"@[simp]\ntheorem sinh_sub_cosh : sinh x - cosh x = -exp (-x) := by rw [← neg_sub, cosh_sub_sinh]\n\n"}
{"name":"Real.cosh_sq_sub_sinh_sq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (HSub.hSub (HPow.hPow (Real.cosh x) 2) (HPow.hPow (Real.sinh x) 2)) 1","decl":"@[simp]\ntheorem cosh_sq_sub_sinh_sq (x : ℝ) : cosh x ^ 2 - sinh x ^ 2 = 1 := by rw [← ofReal_inj]; simp\n\n"}
{"name":"Real.cosh_sq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (HPow.hPow (Real.cosh x) 2) (HAdd.hAdd (HPow.hPow (Real.sinh x) 2) 1)","decl":"nonrec theorem cosh_sq : cosh x ^ 2 = sinh x ^ 2 + 1 := by rw [← ofReal_inj]; simp [cosh_sq]\n\n"}
{"name":"Real.cosh_sq'","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (HPow.hPow (Real.cosh x) 2) (HAdd.hAdd 1 (HPow.hPow (Real.sinh x) 2))","decl":"theorem cosh_sq' : cosh x ^ 2 = 1 + sinh x ^ 2 :=\n  (cosh_sq x).trans (add_comm _ _)\n\n"}
{"name":"Real.sinh_sq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (HPow.hPow (Real.sinh x) 2) (HSub.hSub (HPow.hPow (Real.cosh x) 2) 1)","decl":"nonrec theorem sinh_sq : sinh x ^ 2 = cosh x ^ 2 - 1 := by rw [← ofReal_inj]; simp [sinh_sq]\n\n"}
{"name":"Real.cosh_two_mul","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Real.cosh (HMul.hMul 2 x)) (HAdd.hAdd (HPow.hPow (Real.cosh x) 2) (HPow.hPow (Real.sinh x) 2))","decl":"nonrec theorem cosh_two_mul : cosh (2 * x) = cosh x ^ 2 + sinh x ^ 2 := by\n  rw [← ofReal_inj]; simp [cosh_two_mul]\n\n"}
{"name":"Real.sinh_two_mul","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Real.sinh (HMul.hMul 2 x)) (HMul.hMul (HMul.hMul 2 (Real.sinh x)) (Real.cosh x))","decl":"nonrec theorem sinh_two_mul : sinh (2 * x) = 2 * sinh x * cosh x := by\n  rw [← ofReal_inj]; simp [sinh_two_mul]\n\n"}
{"name":"Real.cosh_three_mul","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Real.cosh (HMul.hMul 3 x)) (HSub.hSub (HMul.hMul 4 (HPow.hPow (Real.cosh x) 3)) (HMul.hMul 3 (Real.cosh x)))","decl":"nonrec theorem cosh_three_mul : cosh (3 * x) = 4 * cosh x ^ 3 - 3 * cosh x := by\n  rw [← ofReal_inj]; simp [cosh_three_mul]\n\n"}
{"name":"Real.sinh_three_mul","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Real.sinh (HMul.hMul 3 x)) (HAdd.hAdd (HMul.hMul 4 (HPow.hPow (Real.sinh x) 3)) (HMul.hMul 3 (Real.sinh x)))","decl":"nonrec theorem sinh_three_mul : sinh (3 * x) = 4 * sinh x ^ 3 + 3 * sinh x := by\n  rw [← ofReal_inj]; simp [sinh_three_mul]\n\n"}
{"name":"Real.cosh_pos","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ LT.lt 0 (Real.cosh x)","decl":"/-- `Real.cosh` is always positive -/\ntheorem cosh_pos (x : ℝ) : 0 < Real.cosh x :=\n  (cosh_eq x).symm ▸ half_pos (add_pos (exp_pos x) (exp_pos (-x)))\n\n"}
{"name":"Real.sinh_lt_cosh","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ LT.lt (Real.sinh x) (Real.cosh x)","decl":"theorem sinh_lt_cosh : sinh x < cosh x :=\n  lt_of_pow_lt_pow_left₀ 2 (cosh_pos _).le <| (cosh_sq x).symm ▸ lt_add_one _\n\n"}
{"name":"Real.cos_bound","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\nhx : LE.le (abs x) 1\n⊢ LE.le (abs (HSub.hSub (Real.cos x) (HSub.hSub 1 (HDiv.hDiv (HPow.hPow x 2) 2)))) (HMul.hMul (HPow.hPow (abs x) 4) (5 / 96))","decl":"theorem cos_bound {x : ℝ} (hx : |x| ≤ 1) : |cos x - (1 - x ^ 2 / 2)| ≤ |x| ^ 4 * (5 / 96) :=\n  calc\n    |cos x - (1 - x ^ 2 / 2)| = Complex.abs (Complex.cos x - (1 - (x : ℂ) ^ 2 / 2)) := by\n      rw [← abs_ofReal]; simp\n    _ = Complex.abs ((Complex.exp (x * I) + Complex.exp (-x * I) - (2 - (x : ℂ) ^ 2)) / 2) := by\n      simp [Complex.cos, sub_div, add_div, neg_div, div_self (two_ne_zero' ℂ)]\n    _ = abs\n          (((Complex.exp (x * I) - ∑ m ∈ range 4, (x * I) ^ m / m.factorial) +\n              (Complex.exp (-x * I) - ∑ m ∈ range 4, (-x * I) ^ m / m.factorial)) / 2) :=\n      (congr_arg Complex.abs\n        (congr_arg (fun x : ℂ => x / 2)\n          (by\n            simp only [sum_range_succ, neg_mul, pow_succ, pow_zero, mul_one, range_zero, sum_empty,\n              Nat.factorial, Nat.cast_one, ne_eq, one_ne_zero, not_false_eq_true, div_self,\n              zero_add, div_one, Nat.mul_one, Nat.cast_succ, Nat.cast_mul, Nat.cast_ofNat, mul_neg,\n              neg_neg]\n            apply Complex.ext <;> simp [div_eq_mul_inv, normSq] <;> ring_nf\n            )))\n    _ ≤ abs ((Complex.exp (x * I) - ∑ m ∈ range 4, (x * I) ^ m / m.factorial) / 2) +\n          abs ((Complex.exp (-x * I) - ∑ m ∈ range 4, (-x * I) ^ m / m.factorial) / 2) := by\n      rw [add_div]; exact Complex.abs.add_le _ _\n    _ = abs (Complex.exp (x * I) - ∑ m ∈ range 4, (x * I) ^ m / m.factorial) / 2 +\n          abs (Complex.exp (-x * I) - ∑ m ∈ range 4, (-x * I) ^ m / m.factorial) / 2 := by\n      simp [map_div₀]\n    _ ≤ Complex.abs (x * I) ^ 4 * (Nat.succ 4 * ((Nat.factorial 4) * (4 : ℕ) : ℝ)⁻¹) / 2 +\n          Complex.abs (-x * I) ^ 4 * (Nat.succ 4 * ((Nat.factorial 4) * (4 : ℕ) : ℝ)⁻¹) / 2 := by\n      gcongr\n      · exact Complex.exp_bound (by simpa) (by decide)\n      · exact Complex.exp_bound (by simpa) (by decide)\n    _ ≤ |x| ^ 4 * (5 / 96) := by norm_num [Nat.factorial]\n\n"}
{"name":"Real.sin_bound","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\nhx : LE.le (abs x) 1\n⊢ LE.le (abs (HSub.hSub (Real.sin x) (HSub.hSub x (HDiv.hDiv (HPow.hPow x 3) 6)))) (HMul.hMul (HPow.hPow (abs x) 4) (5 / 96))","decl":"theorem sin_bound {x : ℝ} (hx : |x| ≤ 1) : |sin x - (x - x ^ 3 / 6)| ≤ |x| ^ 4 * (5 / 96) :=\n  calc\n    |sin x - (x - x ^ 3 / 6)| = Complex.abs (Complex.sin x - (x - x ^ 3 / 6 : ℝ)) := by\n      rw [← abs_ofReal]; simp\n    _ = Complex.abs (((Complex.exp (-x * I) - Complex.exp (x * I)) * I -\n          (2 * x - x ^ 3 / 3 : ℝ)) / 2) := by\n      simp [Complex.sin, sub_div, add_div, neg_div, mul_div_cancel_left₀ _ (two_ne_zero' ℂ),\n        div_div, show (3 : ℂ) * 2 = 6 by norm_num]\n    _ = Complex.abs (((Complex.exp (-x * I) - ∑ m ∈ range 4, (-x * I) ^ m / m.factorial) -\n                (Complex.exp (x * I) - ∑ m ∈ range 4, (x * I) ^ m / m.factorial)) * I / 2) :=\n      (congr_arg Complex.abs\n        (congr_arg (fun x : ℂ => x / 2)\n          (by\n            simp only [sum_range_succ, neg_mul, pow_succ, pow_zero, mul_one, ofReal_sub, ofReal_mul,\n              ofReal_ofNat, ofReal_div, range_zero, sum_empty, Nat.factorial, Nat.cast_one, ne_eq,\n              one_ne_zero, not_false_eq_true, div_self, zero_add, div_one, mul_neg, neg_neg,\n              Nat.mul_one, Nat.cast_succ, Nat.cast_mul, Nat.cast_ofNat]\n            apply Complex.ext <;> simp [div_eq_mul_inv, normSq]; ring)))\n    _ ≤ abs ((Complex.exp (-x * I) - ∑ m ∈ range 4, (-x * I) ^ m / m.factorial) * I / 2) +\n          abs (-((Complex.exp (x * I) - ∑ m ∈ range 4, (x * I) ^ m / m.factorial) * I) / 2) := by\n      rw [sub_mul, sub_eq_add_neg, add_div]; exact Complex.abs.add_le _ _\n    _ = abs (Complex.exp (x * I) - ∑ m ∈ range 4, (x * I) ^ m / m.factorial) / 2 +\n          abs (Complex.exp (-x * I) - ∑ m ∈ range 4, (-x * I) ^ m / m.factorial) / 2 := by\n      simp [add_comm, map_div₀]\n    _ ≤ Complex.abs (x * I) ^ 4 * (Nat.succ 4 * (Nat.factorial 4 * (4 : ℕ) : ℝ)⁻¹) / 2 +\n          Complex.abs (-x * I) ^ 4 * (Nat.succ 4 * (Nat.factorial 4 * (4 : ℕ) : ℝ)⁻¹) / 2 := by\n      gcongr\n      · exact Complex.exp_bound (by simpa) (by decide)\n      · exact Complex.exp_bound (by simpa) (by decide)\n    _ ≤ |x| ^ 4 * (5 / 96) := by norm_num [Nat.factorial]\n\n"}
{"name":"Real.cos_pos_of_le_one","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\nhx : LE.le (abs x) 1\n⊢ LT.lt 0 (Real.cos x)","decl":"theorem cos_pos_of_le_one {x : ℝ} (hx : |x| ≤ 1) : 0 < cos x :=\n  calc 0 < 1 - x ^ 2 / 2 - |x| ^ 4 * (5 / 96) :=\n      sub_pos.2 <|\n        lt_sub_iff_add_lt.2\n          (calc\n            |x| ^ 4 * (5 / 96) + x ^ 2 / 2 ≤ 1 * (5 / 96) + 1 / 2 := by\n                  gcongr\n                  · exact pow_le_one₀ (abs_nonneg _) hx\n                  · rw [sq, ← abs_mul_self, abs_mul]\n                    exact mul_le_one₀ hx (abs_nonneg _) hx\n            _ < 1 := by norm_num)\n    _ ≤ cos x := sub_le_comm.1 (abs_sub_le_iff.1 (cos_bound hx)).2\n\n"}
{"name":"Real.sin_pos_of_pos_of_le_one","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\nhx0 : LT.lt 0 x\nhx : LE.le x 1\n⊢ LT.lt 0 (Real.sin x)","decl":"theorem sin_pos_of_pos_of_le_one {x : ℝ} (hx0 : 0 < x) (hx : x ≤ 1) : 0 < sin x :=\n  calc 0 < x - x ^ 3 / 6 - |x| ^ 4 * (5 / 96) :=\n      sub_pos.2 <| lt_sub_iff_add_lt.2\n          (calc\n            |x| ^ 4 * (5 / 96) + x ^ 3 / 6 ≤ x * (5 / 96) + x / 6 := by\n                gcongr\n                · calc\n                    |x| ^ 4 ≤ |x| ^ 1 :=\n                      pow_le_pow_of_le_one (abs_nonneg _)\n                        (by rwa [_root_.abs_of_nonneg (le_of_lt hx0)]) (by decide)\n                    _ = x := by simp [_root_.abs_of_nonneg (le_of_lt hx0)]\n                · calc\n                    x ^ 3 ≤ x ^ 1 := pow_le_pow_of_le_one (le_of_lt hx0) hx (by decide)\n                    _ = x := pow_one _\n            _ < x := by linarith)\n    _ ≤ sin x :=\n      sub_le_comm.1 (abs_sub_le_iff.1 (sin_bound (by rwa [_root_.abs_of_nonneg (le_of_lt hx0)]))).2\n\n"}
{"name":"Real.sin_pos_of_pos_of_le_two","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\nhx0 : LT.lt 0 x\nhx : LE.le x 2\n⊢ LT.lt 0 (Real.sin x)","decl":"theorem sin_pos_of_pos_of_le_two {x : ℝ} (hx0 : 0 < x) (hx : x ≤ 2) : 0 < sin x :=\n  have : x / 2 ≤ 1 := (div_le_iff₀ (by norm_num)).mpr (by simpa)\n  calc\n    0 < 2 * sin (x / 2) * cos (x / 2) :=\n      mul_pos (mul_pos (by norm_num) (sin_pos_of_pos_of_le_one (half_pos hx0) this))\n        (cos_pos_of_le_one (by rwa [_root_.abs_of_nonneg (le_of_lt (half_pos hx0))]))\n    _ = sin x := by rw [← sin_two_mul, two_mul, add_halves]\n\n"}
{"name":"Real.cos_one_le","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"⊢ LE.le (Real.cos 1) (2 / 3)","decl":"theorem cos_one_le : cos 1 ≤ 2 / 3 :=\n  calc\n    cos 1 ≤ |(1 : ℝ)| ^ 4 * (5 / 96) + (1 - 1 ^ 2 / 2) :=\n      sub_le_iff_le_add.1 (abs_sub_le_iff.1 (cos_bound (by simp))).1\n    _ ≤ 2 / 3 := by norm_num\n\n"}
{"name":"Real.cos_one_pos","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"⊢ LT.lt 0 (Real.cos 1)","decl":"theorem cos_one_pos : 0 < cos 1 :=\n  cos_pos_of_le_one (le_of_eq abs_one)\n\n"}
{"name":"Real.cos_two_neg","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"⊢ LT.lt (Real.cos 2) 0","decl":"theorem cos_two_neg : cos 2 < 0 :=\n  calc cos 2 = cos (2 * 1) := congr_arg cos (mul_one _).symm\n    _ = _ := Real.cos_two_mul 1\n    _ ≤ 2 * (2 / 3) ^ 2 - 1 := by\n      gcongr\n      · exact cos_one_pos.le\n      · apply cos_one_le\n    _ < 0 := by norm_num\n\n"}
{"name":"Complex.abs_cos_add_sin_mul_I","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Complex.abs (HAdd.hAdd (Complex.cos ↑x) (HMul.hMul (Complex.sin ↑x) Complex.I))) 1","decl":"@[simp]\ntheorem abs_cos_add_sin_mul_I (x : ℝ) : abs (cos x + sin x * I) = 1 := by\n  have := Real.sin_sq_add_cos_sq x\n  simp_all [add_comm, abs, normSq, sq, sin_ofReal_re, cos_ofReal_re, mul_re]\n\n"}
{"name":"Complex.abs_exp_ofReal_mul_I","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x : Real\n⊢ Eq (Complex.abs (Complex.exp (HMul.hMul (↑x) Complex.I))) 1","decl":"@[simp]\ntheorem abs_exp_ofReal_mul_I (x : ℝ) : abs (exp (x * I)) = 1 := by\n  rw [exp_mul_I, abs_cos_add_sin_mul_I]\n\n"}
{"name":"Complex.abs_exp","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"z : Complex\n⊢ Eq (Complex.abs (Complex.exp z)) (Real.exp z.re)","decl":"theorem abs_exp (z : ℂ) : abs (exp z) = Real.exp z.re := by\n  rw [exp_eq_exp_re_mul_sin_add_cos, map_mul, abs_exp_ofReal, abs_cos_add_sin_mul_I, mul_one]\n\n"}
{"name":"Complex.abs_exp_eq_iff_re_eq","module":"Mathlib.Data.Complex.Trigonometric","initialProofState":"x y : Complex\n⊢ Iff (Eq (Complex.abs (Complex.exp x)) (Complex.abs (Complex.exp y))) (Eq x.re y.re)","decl":"theorem abs_exp_eq_iff_re_eq {x y : ℂ} : abs (exp x) = abs (exp y) ↔ x.re = y.re := by\n  rw [abs_exp, abs_exp, Real.exp_eq_exp]\n\n"}
