{"name":"AddSubgroup.coe_op","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nH : AddSubgroup G\n⊢ Eq (↑H.op) (Set.preimage AddOpposite.unop ↑H)","decl":"/-- Pull a subgroup back to an opposite subgroup along `MulOpposite.unop`-/\n@[to_additive (attr := simps)\n\"Pull an additive subgroup back to an opposite additive subgroup along `AddOpposite.unop`\"]\nprotected def op (H : Subgroup G) : Subgroup Gᵐᵒᵖ where\n  carrier := MulOpposite.unop ⁻¹' (H : Set G)\n  one_mem' := H.one_mem\n  mul_mem' ha hb := H.mul_mem hb ha\n  inv_mem' := H.inv_mem\n\n"}
{"name":"Subgroup.coe_op","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : Group G\nH : Subgroup G\n⊢ Eq (↑H.op) (Set.preimage MulOpposite.unop ↑H)","decl":"/-- Pull a subgroup back to an opposite subgroup along `MulOpposite.unop`-/\n@[to_additive (attr := simps)\n\"Pull an additive subgroup back to an opposite additive subgroup along `AddOpposite.unop`\"]\nprotected def op (H : Subgroup G) : Subgroup Gᵐᵒᵖ where\n  carrier := MulOpposite.unop ⁻¹' (H : Set G)\n  one_mem' := H.one_mem\n  mul_mem' ha hb := H.mul_mem hb ha\n  inv_mem' := H.inv_mem\n\n"}
{"name":"AddSubgroup.mem_op","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nx : AddOpposite G\nS : AddSubgroup G\n⊢ Iff (Membership.mem S.op x) (Membership.mem S (AddOpposite.unop x))","decl":"@[to_additive (attr := simp)]\ntheorem mem_op {x : Gᵐᵒᵖ} {S : Subgroup G} : x ∈ S.op ↔ x.unop ∈ S := Iff.rfl\n\n"}
{"name":"Subgroup.mem_op","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : Group G\nx : MulOpposite G\nS : Subgroup G\n⊢ Iff (Membership.mem S.op x) (Membership.mem S (MulOpposite.unop x))","decl":"@[to_additive (attr := simp)]\ntheorem mem_op {x : Gᵐᵒᵖ} {S : Subgroup G} : x ∈ S.op ↔ x.unop ∈ S := Iff.rfl\n\n"}
{"name":"AddSubgroup.op_toAddSubmonoid","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nH : AddSubgroup G\n⊢ Eq H.op.toAddSubmonoid H.op","decl":"@[to_additive (attr := simp)] lemma op_toSubmonoid (H : Subgroup G) :\n    H.op.toSubmonoid = H.toSubmonoid.op :=\n  rfl\n\n"}
{"name":"Subgroup.op_toSubmonoid","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : Group G\nH : Subgroup G\n⊢ Eq H.op.toSubmonoid H.op","decl":"@[to_additive (attr := simp)] lemma op_toSubmonoid (H : Subgroup G) :\n    H.op.toSubmonoid = H.toSubmonoid.op :=\n  rfl\n\n"}
{"name":"Subgroup.coe_unop","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : Group G\nH : Subgroup (MulOpposite G)\n⊢ Eq (↑H.unop) (Set.preimage MulOpposite.op ↑H)","decl":"/-- Pull an opposite subgroup back to a subgroup along `MulOpposite.op`-/\n@[to_additive (attr := simps)\n\"Pull an opposite additive subgroup back to an additive subgroup along `AddOpposite.op`\"]\nprotected def unop (H : Subgroup Gᵐᵒᵖ) : Subgroup G where\n  carrier := MulOpposite.op ⁻¹' (H : Set Gᵐᵒᵖ)\n  one_mem' := H.one_mem\n  mul_mem' := fun ha hb => H.mul_mem hb ha\n  inv_mem' := H.inv_mem\n\n"}
{"name":"AddSubgroup.coe_unop","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nH : AddSubgroup (AddOpposite G)\n⊢ Eq (↑H.unop) (Set.preimage AddOpposite.op ↑H)","decl":"/-- Pull an opposite subgroup back to a subgroup along `MulOpposite.op`-/\n@[to_additive (attr := simps)\n\"Pull an opposite additive subgroup back to an additive subgroup along `AddOpposite.op`\"]\nprotected def unop (H : Subgroup Gᵐᵒᵖ) : Subgroup G where\n  carrier := MulOpposite.op ⁻¹' (H : Set Gᵐᵒᵖ)\n  one_mem' := H.one_mem\n  mul_mem' := fun ha hb => H.mul_mem hb ha\n  inv_mem' := H.inv_mem\n\n"}
{"name":"Subgroup.mem_unop","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : Group G\nx : G\nS : Subgroup (MulOpposite G)\n⊢ Iff (Membership.mem S.unop x) (Membership.mem S (MulOpposite.op x))","decl":"@[to_additive (attr := simp)]\ntheorem mem_unop {x : G} {S : Subgroup Gᵐᵒᵖ} : x ∈ S.unop ↔ MulOpposite.op x ∈ S := Iff.rfl\n\n"}
{"name":"AddSubgroup.mem_unop","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nx : G\nS : AddSubgroup (AddOpposite G)\n⊢ Iff (Membership.mem S.unop x) (Membership.mem S (AddOpposite.op x))","decl":"@[to_additive (attr := simp)]\ntheorem mem_unop {x : G} {S : Subgroup Gᵐᵒᵖ} : x ∈ S.unop ↔ MulOpposite.op x ∈ S := Iff.rfl\n\n"}
{"name":"Subgroup.unop_toSubmonoid","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : Group G\nH : Subgroup (MulOpposite G)\n⊢ Eq H.unop.toSubmonoid H.unop","decl":"@[to_additive (attr := simp)] lemma unop_toSubmonoid (H : Subgroup Gᵐᵒᵖ) :\n    H.unop.toSubmonoid = H.toSubmonoid.unop :=\n  rfl\n\n"}
{"name":"AddSubgroup.unop_toAddSubmonoid","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nH : AddSubgroup (AddOpposite G)\n⊢ Eq H.unop.toAddSubmonoid H.unop","decl":"@[to_additive (attr := simp)] lemma unop_toSubmonoid (H : Subgroup Gᵐᵒᵖ) :\n    H.unop.toSubmonoid = H.toSubmonoid.unop :=\n  rfl\n\n"}
{"name":"AddSubgroup.unop_op","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nS : AddSubgroup G\n⊢ Eq S.op.unop S","decl":"@[to_additive (attr := simp)]\ntheorem unop_op (S : Subgroup G) : S.op.unop = S := rfl\n\n"}
{"name":"Subgroup.unop_op","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : Group G\nS : Subgroup G\n⊢ Eq S.op.unop S","decl":"@[to_additive (attr := simp)]\ntheorem unop_op (S : Subgroup G) : S.op.unop = S := rfl\n\n"}
{"name":"Subgroup.op_unop","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : Group G\nS : Subgroup (MulOpposite G)\n⊢ Eq S.unop.op S","decl":"@[to_additive (attr := simp)]\ntheorem op_unop (S : Subgroup Gᵐᵒᵖ) : S.unop.op = S := rfl\n\n"}
{"name":"AddSubgroup.op_unop","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nS : AddSubgroup (AddOpposite G)\n⊢ Eq S.unop.op S","decl":"@[to_additive (attr := simp)]\ntheorem op_unop (S : Subgroup Gᵐᵒᵖ) : S.unop.op = S := rfl\n\n"}
{"name":"AddSubgroup.op_le_iff","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nS₁ : AddSubgroup G\nS₂ : AddSubgroup (AddOpposite G)\n⊢ Iff (LE.le S₁.op S₂) (LE.le S₁ S₂.unop)","decl":"@[to_additive]\ntheorem op_le_iff {S₁ : Subgroup G} {S₂ : Subgroup Gᵐᵒᵖ} : S₁.op ≤ S₂ ↔ S₁ ≤ S₂.unop :=\n  MulOpposite.op_surjective.forall\n\n"}
{"name":"Subgroup.op_le_iff","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : Group G\nS₁ : Subgroup G\nS₂ : Subgroup (MulOpposite G)\n⊢ Iff (LE.le S₁.op S₂) (LE.le S₁ S₂.unop)","decl":"@[to_additive]\ntheorem op_le_iff {S₁ : Subgroup G} {S₂ : Subgroup Gᵐᵒᵖ} : S₁.op ≤ S₂ ↔ S₁ ≤ S₂.unop :=\n  MulOpposite.op_surjective.forall\n\n"}
{"name":"AddSubgroup.le_op_iff","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nS₁ : AddSubgroup (AddOpposite G)\nS₂ : AddSubgroup G\n⊢ Iff (LE.le S₁ S₂.op) (LE.le S₁.unop S₂)","decl":"@[to_additive]\ntheorem le_op_iff {S₁ : Subgroup Gᵐᵒᵖ} {S₂ : Subgroup G} : S₁ ≤ S₂.op ↔ S₁.unop ≤ S₂ :=\n  MulOpposite.op_surjective.forall\n\n"}
{"name":"Subgroup.le_op_iff","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : Group G\nS₁ : Subgroup (MulOpposite G)\nS₂ : Subgroup G\n⊢ Iff (LE.le S₁ S₂.op) (LE.le S₁.unop S₂)","decl":"@[to_additive]\ntheorem le_op_iff {S₁ : Subgroup Gᵐᵒᵖ} {S₂ : Subgroup G} : S₁ ≤ S₂.op ↔ S₁.unop ≤ S₂ :=\n  MulOpposite.op_surjective.forall\n\n"}
{"name":"AddSubgroup.op_le_op_iff","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nS₁ S₂ : AddSubgroup G\n⊢ Iff (LE.le S₁.op S₂.op) (LE.le S₁ S₂)","decl":"@[to_additive (attr := simp)]\ntheorem op_le_op_iff {S₁ S₂ : Subgroup G} : S₁.op ≤ S₂.op ↔ S₁ ≤ S₂ :=\n  MulOpposite.op_surjective.forall\n\n"}
{"name":"Subgroup.op_le_op_iff","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : Group G\nS₁ S₂ : Subgroup G\n⊢ Iff (LE.le S₁.op S₂.op) (LE.le S₁ S₂)","decl":"@[to_additive (attr := simp)]\ntheorem op_le_op_iff {S₁ S₂ : Subgroup G} : S₁.op ≤ S₂.op ↔ S₁ ≤ S₂ :=\n  MulOpposite.op_surjective.forall\n\n"}
{"name":"AddSubgroup.unop_le_unop_iff","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nS₁ S₂ : AddSubgroup (AddOpposite G)\n⊢ Iff (LE.le S₁.unop S₂.unop) (LE.le S₁ S₂)","decl":"@[to_additive (attr := simp)]\ntheorem unop_le_unop_iff {S₁ S₂ : Subgroup Gᵐᵒᵖ} : S₁.unop ≤ S₂.unop ↔ S₁ ≤ S₂ :=\n  MulOpposite.unop_surjective.forall\n\n"}
{"name":"Subgroup.unop_le_unop_iff","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : Group G\nS₁ S₂ : Subgroup (MulOpposite G)\n⊢ Iff (LE.le S₁.unop S₂.unop) (LE.le S₁ S₂)","decl":"@[to_additive (attr := simp)]\ntheorem unop_le_unop_iff {S₁ S₂ : Subgroup Gᵐᵒᵖ} : S₁.unop ≤ S₂.unop ↔ S₁ ≤ S₂ :=\n  MulOpposite.unop_surjective.forall\n\n"}
{"name":"Subgroup.opEquiv_apply","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : Group G\nH : Subgroup G\n⊢ Eq (Subgroup.opEquiv H) H.op","decl":"/-- A subgroup `H` of `G` determines a subgroup `H.op` of the opposite group `Gᵐᵒᵖ`. -/\n@[to_additive (attr := simps) \"An additive subgroup `H` of `G` determines an additive subgroup\n`H.op` of the opposite additive group `Gᵃᵒᵖ`.\"]\ndef opEquiv : Subgroup G ≃o Subgroup Gᵐᵒᵖ where\n  toFun := Subgroup.op\n  invFun := Subgroup.unop\n  left_inv := unop_op\n  right_inv := op_unop\n  map_rel_iff' := op_le_op_iff\n\n"}
{"name":"AddSubgroup.opEquiv_symm_apply","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nH : AddSubgroup (AddOpposite G)\n⊢ Eq ((RelIso.symm AddSubgroup.opEquiv) H) H.unop","decl":"/-- A subgroup `H` of `G` determines a subgroup `H.op` of the opposite group `Gᵐᵒᵖ`. -/\n@[to_additive (attr := simps) \"An additive subgroup `H` of `G` determines an additive subgroup\n`H.op` of the opposite additive group `Gᵃᵒᵖ`.\"]\ndef opEquiv : Subgroup G ≃o Subgroup Gᵐᵒᵖ where\n  toFun := Subgroup.op\n  invFun := Subgroup.unop\n  left_inv := unop_op\n  right_inv := op_unop\n  map_rel_iff' := op_le_op_iff\n\n"}
{"name":"Subgroup.opEquiv_symm_apply","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : Group G\nH : Subgroup (MulOpposite G)\n⊢ Eq ((RelIso.symm Subgroup.opEquiv) H) H.unop","decl":"/-- A subgroup `H` of `G` determines a subgroup `H.op` of the opposite group `Gᵐᵒᵖ`. -/\n@[to_additive (attr := simps) \"An additive subgroup `H` of `G` determines an additive subgroup\n`H.op` of the opposite additive group `Gᵃᵒᵖ`.\"]\ndef opEquiv : Subgroup G ≃o Subgroup Gᵐᵒᵖ where\n  toFun := Subgroup.op\n  invFun := Subgroup.unop\n  left_inv := unop_op\n  right_inv := op_unop\n  map_rel_iff' := op_le_op_iff\n\n"}
{"name":"AddSubgroup.opEquiv_apply","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nH : AddSubgroup G\n⊢ Eq (AddSubgroup.opEquiv H) H.op","decl":"/-- A subgroup `H` of `G` determines a subgroup `H.op` of the opposite group `Gᵐᵒᵖ`. -/\n@[to_additive (attr := simps) \"An additive subgroup `H` of `G` determines an additive subgroup\n`H.op` of the opposite additive group `Gᵃᵒᵖ`.\"]\ndef opEquiv : Subgroup G ≃o Subgroup Gᵐᵒᵖ where\n  toFun := Subgroup.op\n  invFun := Subgroup.unop\n  left_inv := unop_op\n  right_inv := op_unop\n  map_rel_iff' := op_le_op_iff\n\n"}
{"name":"Subgroup.op_injective","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : Group G\n⊢ Function.Injective Subgroup.op","decl":"@[to_additive]\ntheorem op_injective : (@Subgroup.op G _).Injective := opEquiv.injective\n\n"}
{"name":"AddSubgroup.op_injective","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\n⊢ Function.Injective AddSubgroup.op","decl":"@[to_additive]\ntheorem op_injective : (@Subgroup.op G _).Injective := opEquiv.injective\n\n"}
{"name":"Subgroup.unop_injective","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : Group G\n⊢ Function.Injective Subgroup.unop","decl":"@[to_additive]\ntheorem unop_injective : (@Subgroup.unop G _).Injective := opEquiv.symm.injective\n\n"}
{"name":"AddSubgroup.unop_injective","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\n⊢ Function.Injective AddSubgroup.unop","decl":"@[to_additive]\ntheorem unop_injective : (@Subgroup.unop G _).Injective := opEquiv.symm.injective\n\n"}
{"name":"Subgroup.op_inj","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : Group G\nS T : Subgroup G\n⊢ Iff (Eq S.op T.op) (Eq S T)","decl":"@[to_additive (attr := simp)]\ntheorem op_inj {S T : Subgroup G} : S.op = T.op ↔ S = T := opEquiv.eq_iff_eq\n\n"}
{"name":"AddSubgroup.op_inj","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nS T : AddSubgroup G\n⊢ Iff (Eq S.op T.op) (Eq S T)","decl":"@[to_additive (attr := simp)]\ntheorem op_inj {S T : Subgroup G} : S.op = T.op ↔ S = T := opEquiv.eq_iff_eq\n\n"}
{"name":"Subgroup.unop_inj","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : Group G\nS T : Subgroup (MulOpposite G)\n⊢ Iff (Eq S.unop T.unop) (Eq S T)","decl":"@[to_additive (attr := simp)]\ntheorem unop_inj {S T : Subgroup Gᵐᵒᵖ} : S.unop = T.unop ↔ S = T := opEquiv.symm.eq_iff_eq\n\n"}
{"name":"AddSubgroup.unop_inj","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nS T : AddSubgroup (AddOpposite G)\n⊢ Iff (Eq S.unop T.unop) (Eq S T)","decl":"@[to_additive (attr := simp)]\ntheorem unop_inj {S T : Subgroup Gᵐᵒᵖ} : S.unop = T.unop ↔ S = T := opEquiv.symm.eq_iff_eq\n\n"}
{"name":"AddSubgroup.equivOp_symm_apply_coe","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nH : AddSubgroup G\nb : Subtype fun b => Membership.mem H.op b\n⊢ Eq (↑(H.equivOp.symm b)) (AddOpposite.unop ↑b)","decl":"/-- Bijection between a subgroup `H` and its opposite. -/\n@[to_additive (attr := simps!) \"Bijection between an additive subgroup `H` and its opposite.\"]\ndef equivOp (H : Subgroup G) : H ≃ H.op :=\n  MulOpposite.opEquiv.subtypeEquiv fun _ => Iff.rfl\n\n"}
{"name":"AddSubgroup.equivOp_apply_coe","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nH : AddSubgroup G\na : Subtype fun a => Membership.mem H a\n⊢ Eq (↑(H.equivOp a)) (AddOpposite.op ↑a)","decl":"/-- Bijection between a subgroup `H` and its opposite. -/\n@[to_additive (attr := simps!) \"Bijection between an additive subgroup `H` and its opposite.\"]\ndef equivOp (H : Subgroup G) : H ≃ H.op :=\n  MulOpposite.opEquiv.subtypeEquiv fun _ => Iff.rfl\n\n"}
{"name":"Subgroup.equivOp_apply_coe","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : Group G\nH : Subgroup G\na : Subtype fun a => Membership.mem H a\n⊢ Eq (↑(H.equivOp a)) (MulOpposite.op ↑a)","decl":"/-- Bijection between a subgroup `H` and its opposite. -/\n@[to_additive (attr := simps!) \"Bijection between an additive subgroup `H` and its opposite.\"]\ndef equivOp (H : Subgroup G) : H ≃ H.op :=\n  MulOpposite.opEquiv.subtypeEquiv fun _ => Iff.rfl\n\n"}
{"name":"Subgroup.equivOp_symm_apply_coe","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : Group G\nH : Subgroup G\nb : Subtype fun b => Membership.mem H.op b\n⊢ Eq (↑(H.equivOp.symm b)) (MulOpposite.unop ↑b)","decl":"/-- Bijection between a subgroup `H` and its opposite. -/\n@[to_additive (attr := simps!) \"Bijection between an additive subgroup `H` and its opposite.\"]\ndef equivOp (H : Subgroup G) : H ≃ H.op :=\n  MulOpposite.opEquiv.subtypeEquiv fun _ => Iff.rfl\n\n"}
{"name":"AddSubgroup.op_normalizer","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nH : AddSubgroup G\n⊢ Eq H.normalizer.op H.op.normalizer","decl":"@[to_additive]\ntheorem op_normalizer (H : Subgroup G) : H.normalizer.op = H.op.normalizer := by\n  ext x\n  simp [mem_normalizer_iff', MulOpposite.op_surjective.forall, iff_comm]\n\n"}
{"name":"Subgroup.op_normalizer","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : Group G\nH : Subgroup G\n⊢ Eq H.normalizer.op H.op.normalizer","decl":"@[to_additive]\ntheorem op_normalizer (H : Subgroup G) : H.normalizer.op = H.op.normalizer := by\n  ext x\n  simp [mem_normalizer_iff', MulOpposite.op_surjective.forall, iff_comm]\n\n"}
{"name":"Subgroup.unop_normalizer","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : Group G\nH : Subgroup (MulOpposite G)\n⊢ Eq H.normalizer.unop H.unop.normalizer","decl":"@[to_additive]\ntheorem unop_normalizer (H : Subgroup Gᵐᵒᵖ) : H.normalizer.unop = H.unop.normalizer := by\n  rw [← op_inj, op_unop, op_normalizer, op_unop]\n\n"}
{"name":"AddSubgroup.unop_normalizer","module":"Mathlib.Algebra.Group.Subgroup.MulOpposite","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nH : AddSubgroup (AddOpposite G)\n⊢ Eq H.normalizer.unop H.unop.normalizer","decl":"@[to_additive]\ntheorem unop_normalizer (H : Subgroup Gᵐᵒᵖ) : H.normalizer.unop = H.unop.normalizer := by\n  rw [← op_inj, op_unop, op_normalizer, op_unop]\n\n"}
