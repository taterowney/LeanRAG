{"name":"BialgebraCat.mk.injEq","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\ncarrier‚úù : Type v\ninstRing‚úù : Ring carrier‚úù\ninstBialgebra‚úù : Bialgebra R carrier‚úù\ncarrier : Type v\ninstRing : Ring carrier\ninstBialgebra : Bialgebra R carrier\n‚ä¢ Eq (Eq (BialgebraCat.mk carrier‚úù) (BialgebraCat.mk carrier)) (And (Eq carrier‚úù carrier) (And (HEq instRing‚úù instRing) (HEq instBialgebra‚úù instBialgebra)))","decl":"/-- The category of `R`-bialgebras. -/\nstructure BialgebraCat where\n  /-- The underlying type. -/\n  carrier : Type v\n  [instRing : Ring carrier]\n  [instBialgebra : Bialgebra R carrier]\n\n"}
{"name":"BialgebraCat.mk.inj","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\ncarrier‚úù : Type v\ninstRing‚úù : Ring carrier‚úù\ninstBialgebra‚úù : Bialgebra R carrier‚úù\ncarrier : Type v\ninstRing : Ring carrier\ninstBialgebra : Bialgebra R carrier\nx‚úù : Eq (BialgebraCat.mk carrier‚úù) (BialgebraCat.mk carrier)\n‚ä¢ And (Eq carrier‚úù carrier) (And (HEq instRing‚úù instRing) (HEq instBialgebra‚úù instBialgebra))","decl":"/-- The category of `R`-bialgebras. -/\nstructure BialgebraCat where\n  /-- The underlying type. -/\n  carrier : Type v\n  [instRing : Ring carrier]\n  [instBialgebra : Bialgebra R carrier]\n\n"}
{"name":"BialgebraCat.mk.sizeOf_spec","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù¬π : CommRing R\ninst‚úù : SizeOf R\ncarrier : Type v\ninstRing : Ring carrier\ninstBialgebra : Bialgebra R carrier\n‚ä¢ Eq (SizeOf.sizeOf (BialgebraCat.mk carrier)) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf carrier)) (SizeOf.sizeOf instRing)) (SizeOf.sizeOf instBialgebra))","decl":"/-- The category of `R`-bialgebras. -/\nstructure BialgebraCat where\n  /-- The underlying type. -/\n  carrier : Type v\n  [instRing : Ring carrier]\n  [instBialgebra : Bialgebra R carrier]\n\n"}
{"name":"BialgebraCat.of_instRing","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù¬≤ : CommRing R\nX : Type v\ninst‚úù¬π : Ring X\ninst‚úù : Bialgebra R X\n‚ä¢ Eq (BialgebraCat.of R X).instRing inst‚úù¬π","decl":"/-- The object in the category of `R`-bialgebras associated to an `R`-bialgebra. -/\n@[simps]\ndef of (X : Type v) [Ring X] [Bialgebra R X] :\n    BialgebraCat R where\n  carrier := X\n\n"}
{"name":"BialgebraCat.of_instBialgebra","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù¬≤ : CommRing R\nX : Type v\ninst‚úù¬π : Ring X\ninst‚úù : Bialgebra R X\n‚ä¢ Eq (BialgebraCat.of R X).instBialgebra inst‚úù","decl":"/-- The object in the category of `R`-bialgebras associated to an `R`-bialgebra. -/\n@[simps]\ndef of (X : Type v) [Ring X] [Bialgebra R X] :\n    BialgebraCat R where\n  carrier := X\n\n"}
{"name":"BialgebraCat.of_carrier","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù¬≤ : CommRing R\nX : Type v\ninst‚úù¬π : Ring X\ninst‚úù : Bialgebra R X\n‚ä¢ Eq (BialgebraCat.of R X).carrier X","decl":"/-- The object in the category of `R`-bialgebras associated to an `R`-bialgebra. -/\n@[simps]\ndef of (X : Type v) [Ring X] [Bialgebra R X] :\n    BialgebraCat R where\n  carrier := X\n\n"}
{"name":"BialgebraCat.of_comul","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù¬≤ : CommRing R\nX : Type v\ninst‚úù¬π : Ring X\ninst‚úù : Bialgebra R X\n‚ä¢ Eq CoalgebraStruct.comul CoalgebraStruct.comul","decl":"@[simp]\nlemma of_comul {X : Type v} [Ring X] [Bialgebra R X] :\n    Coalgebra.comul (A := of R X) = Coalgebra.comul (R := R) (A := X) := rfl\n\n"}
{"name":"BialgebraCat.of_counit","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù¬≤ : CommRing R\nX : Type v\ninst‚úù¬π : Ring X\ninst‚úù : Bialgebra R X\n‚ä¢ Eq CoalgebraStruct.counit CoalgebraStruct.counit","decl":"@[simp]\nlemma of_counit {X : Type v} [Ring X] [Bialgebra R X] :\n    Coalgebra.counit (A := of R X) = Coalgebra.counit (R := R) (A := X) := rfl\n\n"}
{"name":"BialgebraCat.Hom.mk.injEq","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nV W : BialgebraCat R\ntoBialgHom‚úù toBialgHom : BialgHom R V.carrier W.carrier\n‚ä¢ Eq (Eq { toBialgHom := toBialgHom‚úù } { toBialgHom := toBialgHom }) (Eq toBialgHom‚úù toBialgHom)","decl":"/-- A type alias for `BialgHom` to avoid confusion between the categorical and\nalgebraic spellings of composition. -/\n@[ext]\nstructure Hom (V W : BialgebraCat.{v} R) where\n  /-- The underlying `BialgHom` -/\n  toBialgHom : V ‚Üí‚Çêc[R] W\n\n"}
{"name":"BialgebraCat.Hom.mk.inj","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nV W : BialgebraCat R\ntoBialgHom‚úù toBialgHom : BialgHom R V.carrier W.carrier\nx‚úù : Eq { toBialgHom := toBialgHom‚úù } { toBialgHom := toBialgHom }\n‚ä¢ Eq toBialgHom‚úù toBialgHom","decl":"/-- A type alias for `BialgHom` to avoid confusion between the categorical and\nalgebraic spellings of composition. -/\n@[ext]\nstructure Hom (V W : BialgebraCat.{v} R) where\n  /-- The underlying `BialgHom` -/\n  toBialgHom : V ‚Üí‚Çêc[R] W\n\n"}
{"name":"BialgebraCat.Hom.ext_iff","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nV W : BialgebraCat R\nx y : V.Hom W\n‚ä¢ Iff (Eq x y) (Eq x.toBialgHom y.toBialgHom)","decl":"/-- A type alias for `BialgHom` to avoid confusion between the categorical and\nalgebraic spellings of composition. -/\n@[ext]\nstructure Hom (V W : BialgebraCat.{v} R) where\n  /-- The underlying `BialgHom` -/\n  toBialgHom : V ‚Üí‚Çêc[R] W\n\n"}
{"name":"BialgebraCat.Hom.ext","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nV W : BialgebraCat R\nx y : V.Hom W\ntoBialgHom : Eq x.toBialgHom y.toBialgHom\n‚ä¢ Eq x y","decl":"/-- A type alias for `BialgHom` to avoid confusion between the categorical and\nalgebraic spellings of composition. -/\n@[ext]\nstructure Hom (V W : BialgebraCat.{v} R) where\n  /-- The underlying `BialgHom` -/\n  toBialgHom : V ‚Üí‚Çêc[R] W\n\n"}
{"name":"BialgebraCat.Hom.mk.sizeOf_spec","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù¬π : CommRing R\nV W : BialgebraCat R\ninst‚úù : SizeOf R\ntoBialgHom : BialgHom R V.carrier W.carrier\n‚ä¢ Eq (SizeOf.sizeOf { toBialgHom := toBialgHom }) (HAdd.hAdd 1 (SizeOf.sizeOf toBialgHom))","decl":"/-- A type alias for `BialgHom` to avoid confusion between the categorical and\nalgebraic spellings of composition. -/\n@[ext]\nstructure Hom (V W : BialgebraCat.{v} R) where\n  /-- The underlying `BialgHom` -/\n  toBialgHom : V ‚Üí‚Çêc[R] W\n\n"}
{"name":"BialgebraCat.Hom.toBialgHom_injective","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nV W : BialgebraCat R\n‚ä¢ Function.Injective BialgebraCat.Hom.toBialgHom","decl":"lemma Hom.toBialgHom_injective (V W : BialgebraCat.{v} R) :\n    Function.Injective (Hom.toBialgHom : Hom V W ‚Üí _) :=\n  fun ‚ü®f‚ü© ‚ü®g‚ü© _ => by congr\n\n"}
{"name":"BialgebraCat.hom_ext_iff","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX Y : BialgebraCat R\nf g : Quiver.Hom X Y\n‚ä¢ Iff (Eq f g) (Eq f.toBialgHom g.toBialgHom)","decl":"@[ext]\nlemma hom_ext {X Y : BialgebraCat.{v} R} (f g : X ‚ü∂ Y) (h : f.toBialgHom = g.toBialgHom) :\n    f = g :=\n  Hom.ext h\n\n"}
{"name":"BialgebraCat.hom_ext","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX Y : BialgebraCat R\nf g : Quiver.Hom X Y\nh : Eq f.toBialgHom g.toBialgHom\n‚ä¢ Eq f g","decl":"@[ext]\nlemma hom_ext {X Y : BialgebraCat.{v} R} (f g : X ‚ü∂ Y) (h : f.toBialgHom = g.toBialgHom) :\n    f = g :=\n  Hom.ext h\n\n"}
{"name":"BialgebraCat.toBialgHom_comp","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX Y Z : BialgebraCat R\nf : Quiver.Hom X Y\ng : Quiver.Hom Y Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp f g).toBialgHom (g.toBialgHom.comp f.toBialgHom)","decl":"@[simp] theorem toBialgHom_comp {X Y Z : BialgebraCat.{v} R} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :\n    (f ‚â´ g).toBialgHom = g.toBialgHom.comp f.toBialgHom :=\n  rfl\n\n"}
{"name":"BialgebraCat.toBialgHom_id","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM : BialgebraCat R\n‚ä¢ Eq (CategoryTheory.CategoryStruct.id M).toBialgHom (BialgHom.id R M.carrier)","decl":"@[simp] theorem toBialgHom_id {M : BialgebraCat.{v} R} :\n    Hom.toBialgHom (ùüô M) = BialgHom.id _ _ :=\n  rfl\n\n"}
{"name":"BialgebraCat.forget‚ÇÇ_algebra_obj","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX : BialgebraCat R\n‚ä¢ Eq ((CategoryTheory.forget‚ÇÇ (BialgebraCat R) (AlgebraCat R)).obj X) (AlgebraCat.of R X.carrier)","decl":"@[simp]\ntheorem forget‚ÇÇ_algebra_obj (X : BialgebraCat R) :\n    (forget‚ÇÇ (BialgebraCat R) (AlgebraCat R)).obj X = AlgebraCat.of R X :=\n  rfl\n\n"}
{"name":"BialgebraCat.forget‚ÇÇ_algebra_map","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX Y : BialgebraCat R\nf : Quiver.Hom X Y\n‚ä¢ Eq ((CategoryTheory.forget‚ÇÇ (BialgebraCat R) (AlgebraCat R)).map f) (AlgebraCat.ofHom ‚Üëf.toBialgHom)","decl":"@[simp]\ntheorem forget‚ÇÇ_algebra_map (X Y : BialgebraCat R) (f : X ‚ü∂ Y) :\n    (forget‚ÇÇ (BialgebraCat R) (AlgebraCat R)).map f = AlgebraCat.ofHom f.toBialgHom :=\n  rfl\n\n"}
{"name":"BialgebraCat.forget‚ÇÇ_coalgebra_obj","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX : BialgebraCat R\n‚ä¢ Eq ((CategoryTheory.forget‚ÇÇ (BialgebraCat R) (CoalgebraCat R)).obj X) (CoalgebraCat.of R X.carrier)","decl":"@[simp]\ntheorem forget‚ÇÇ_coalgebra_obj (X : BialgebraCat R) :\n    (forget‚ÇÇ (BialgebraCat R) (CoalgebraCat R)).obj X = CoalgebraCat.of R X :=\n  rfl\n\n"}
{"name":"BialgebraCat.forget‚ÇÇ_coalgebra_map","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX Y : BialgebraCat R\nf : Quiver.Hom X Y\n‚ä¢ Eq ((CategoryTheory.forget‚ÇÇ (BialgebraCat R) (CoalgebraCat R)).map f) (CoalgebraCat.ofHom ‚Üëf.toBialgHom)","decl":"@[simp]\ntheorem forget‚ÇÇ_coalgebra_map (X Y : BialgebraCat R) (f : X ‚ü∂ Y) :\n    (forget‚ÇÇ (BialgebraCat R) (CoalgebraCat R)).map f = CoalgebraCat.ofHom f.toBialgHom :=\n  rfl\n\n"}
{"name":"BialgEquiv.toBialgebraCatIso_hom_toBialgHom","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù‚Å¥ : CommRing R\nX Y : Type v\ninst‚úù¬≥ : Ring X\ninst‚úù¬≤ : Ring Y\ninst‚úù¬π : Bialgebra R X\ninst‚úù : Bialgebra R Y\ne : BialgEquiv R X Y\n‚ä¢ Eq e.toBialgebraCatIso.hom.toBialgHom ‚Üëe","decl":"/-- Build an isomorphism in the category `BialgebraCat R` from a\n`BialgEquiv`. -/\n@[simps]\ndef toBialgebraCatIso (e : X ‚âÉ‚Çêc[R] Y) : BialgebraCat.of R X ‚âÖ BialgebraCat.of R Y where\n  hom := BialgebraCat.ofHom e\n  inv := BialgebraCat.ofHom e.symm\n  hom_inv_id := Hom.ext <| DFunLike.ext _ _ e.left_inv\n  inv_hom_id := Hom.ext <| DFunLike.ext _ _ e.right_inv\n\n"}
{"name":"BialgEquiv.toBialgebraCatIso_inv_toBialgHom","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù‚Å¥ : CommRing R\nX Y : Type v\ninst‚úù¬≥ : Ring X\ninst‚úù¬≤ : Ring Y\ninst‚úù¬π : Bialgebra R X\ninst‚úù : Bialgebra R Y\ne : BialgEquiv R X Y\n‚ä¢ Eq e.toBialgebraCatIso.inv.toBialgHom ‚Üëe.symm","decl":"/-- Build an isomorphism in the category `BialgebraCat R` from a\n`BialgEquiv`. -/\n@[simps]\ndef toBialgebraCatIso (e : X ‚âÉ‚Çêc[R] Y) : BialgebraCat.of R X ‚âÖ BialgebraCat.of R Y where\n  hom := BialgebraCat.ofHom e\n  inv := BialgebraCat.ofHom e.symm\n  hom_inv_id := Hom.ext <| DFunLike.ext _ _ e.left_inv\n  inv_hom_id := Hom.ext <| DFunLike.ext _ _ e.right_inv\n\n"}
{"name":"BialgEquiv.toBialgebraCatIso_refl","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù¬≤ : CommRing R\nX : Type v\ninst‚úù¬π : Ring X\ninst‚úù : Bialgebra R X\n‚ä¢ Eq (BialgEquiv.refl R X).toBialgebraCatIso (CategoryTheory.Iso.refl (BialgebraCat.of R X))","decl":"@[simp] theorem toBialgebraCatIso_refl : toBialgebraCatIso (BialgEquiv.refl R X) = .refl _ :=\n  rfl\n\n"}
{"name":"BialgEquiv.toBialgebraCatIso_symm","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù‚Å¥ : CommRing R\nX Y : Type v\ninst‚úù¬≥ : Ring X\ninst‚úù¬≤ : Ring Y\ninst‚úù¬π : Bialgebra R X\ninst‚úù : Bialgebra R Y\ne : BialgEquiv R X Y\n‚ä¢ Eq e.symm.toBialgebraCatIso e.toBialgebraCatIso.symm","decl":"@[simp] theorem toBialgebraCatIso_symm (e : X ‚âÉ‚Çêc[R] Y) :\n    toBialgebraCatIso e.symm = (toBialgebraCatIso e).symm :=\n  rfl\n\n"}
{"name":"BialgEquiv.toBialgebraCatIso_trans","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù‚Å∂ : CommRing R\nX Y Z : Type v\ninst‚úù‚Åµ : Ring X\ninst‚úù‚Å¥ : Ring Y\ninst‚úù¬≥ : Ring Z\ninst‚úù¬≤ : Bialgebra R X\ninst‚úù¬π : Bialgebra R Y\ninst‚úù : Bialgebra R Z\ne : BialgEquiv R X Y\nf : BialgEquiv R Y Z\n‚ä¢ Eq (e.trans f).toBialgebraCatIso (e.toBialgebraCatIso.trans f.toBialgebraCatIso)","decl":"@[simp] theorem toBialgebraCatIso_trans (e : X ‚âÉ‚Çêc[R] Y) (f : Y ‚âÉ‚Çêc[R] Z) :\n    toBialgebraCatIso (e.trans f) = toBialgebraCatIso e ‚â™‚â´ toBialgebraCatIso f :=\n  rfl\n\n"}
{"name":"CategoryTheory.Iso.toBialgEquiv_toBialgHom","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX Y : BialgebraCat R\ni : CategoryTheory.Iso X Y\n‚ä¢ Eq (‚Üëi.toBialgEquiv) i.hom.toBialgHom","decl":"@[simp] theorem toBialgEquiv_toBialgHom (i : X ‚âÖ Y) :\n    (i.toBialgEquiv : X ‚Üí‚Çêc[R] Y) = i.hom.1 := rfl\n\n"}
{"name":"CategoryTheory.Iso.toBialgEquiv_refl","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX : BialgebraCat R\n‚ä¢ Eq (CategoryTheory.Iso.refl X).toBialgEquiv (BialgEquiv.refl R X.carrier)","decl":"@[simp] theorem toBialgEquiv_refl : toBialgEquiv (.refl X) = .refl _ _ :=\n  rfl\n\n"}
{"name":"CategoryTheory.Iso.toBialgEquiv_symm","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX Y : BialgebraCat R\ne : CategoryTheory.Iso X Y\n‚ä¢ Eq e.symm.toBialgEquiv e.toBialgEquiv.symm","decl":"@[simp] theorem toBialgEquiv_symm (e : X ‚âÖ Y) :\n    toBialgEquiv e.symm = (toBialgEquiv e).symm :=\n  rfl\n\n"}
{"name":"CategoryTheory.Iso.toBialgEquiv_trans","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX Y Z : BialgebraCat R\ne : CategoryTheory.Iso X Y\nf : CategoryTheory.Iso Y Z\n‚ä¢ Eq (e.trans f).toBialgEquiv (e.toBialgEquiv.trans f.toBialgEquiv)","decl":"@[simp] theorem toBialgEquiv_trans (e : X ‚âÖ Y) (f : Y ‚âÖ Z) :\n    toBialgEquiv (e ‚â™‚â´ f) = e.toBialgEquiv.trans f.toBialgEquiv :=\n  rfl\n\n"}
{"name":"BialgebraCat.forget_reflects_isos","module":"Mathlib.Algebra.Category.BialgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\n‚ä¢ (CategoryTheory.forget (BialgebraCat R)).ReflectsIsomorphisms","decl":"instance BialgebraCat.forget_reflects_isos :\n    (forget (BialgebraCat.{v} R)).ReflectsIsomorphisms where\n  reflects {X Y} f _ := by\n    let i := asIso ((forget (BialgebraCat.{v} R)).map f)\n    let e : X ‚âÉ‚Çêc[R] Y := { f.toBialgHom, i.toEquiv with }\n    exact ‚ü®e.toBialgebraCatIso.isIso_hom.1‚ü©\n"}
