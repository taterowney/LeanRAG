{"name":"NormedOrderedAddGroup.dist_eq","module":"Mathlib.Analysis.Normed.Order.Basic","initialProofState":"α : Type u_2\nself : NormedOrderedAddGroup α\nx y : α\n⊢ Eq (Dist.dist x y) (Norm.norm (HSub.hSub x y))","decl":"/-- A `NormedOrderedAddGroup` is an additive group that is both a `NormedAddCommGroup` and an\n`OrderedAddCommGroup`. This class is necessary to avoid diamonds caused by both classes\ncarrying their own group structure. -/\nclass NormedOrderedAddGroup (α : Type*) extends OrderedAddCommGroup α, Norm α, MetricSpace α where\n  /-- The distance function is induced by the norm. -/\n  dist_eq : ∀ x y, dist x y = ‖x - y‖ := by aesop\n\n"}
{"name":"NormedOrderedGroup.dist_eq","module":"Mathlib.Analysis.Normed.Order.Basic","initialProofState":"α : Type u_2\nself : NormedOrderedGroup α\nx y : α\n⊢ Eq (Dist.dist x y) (Norm.norm (HDiv.hDiv x y))","decl":"/-- A `NormedOrderedGroup` is a group that is both a `NormedCommGroup` and an\n`OrderedCommGroup`. This class is necessary to avoid diamonds caused by both classes\ncarrying their own group structure. -/\n@[to_additive]\nclass NormedOrderedGroup (α : Type*) extends OrderedCommGroup α, Norm α, MetricSpace α where\n  /-- The distance function is induced by the norm. -/\n  dist_eq : ∀ x y, dist x y = ‖x / y‖ := by aesop\n\n"}
{"name":"NormedLinearOrderedAddGroup.dist_eq","module":"Mathlib.Analysis.Normed.Order.Basic","initialProofState":"α : Type u_2\nself : NormedLinearOrderedAddGroup α\nx y : α\n⊢ Eq (Dist.dist x y) (Norm.norm (HSub.hSub x y))","decl":"/-- A `NormedLinearOrderedAddGroup` is an additive group that is both a `NormedAddCommGroup`\nand a `LinearOrderedAddCommGroup`. This class is necessary to avoid diamonds caused by both\nclasses carrying their own group structure. -/\nclass NormedLinearOrderedAddGroup (α : Type*) extends LinearOrderedAddCommGroup α, Norm α,\n  MetricSpace α where\n  /-- The distance function is induced by the norm. -/\n  dist_eq : ∀ x y, dist x y = ‖x - y‖ := by aesop\n\n"}
{"name":"NormedLinearOrderedGroup.dist_eq","module":"Mathlib.Analysis.Normed.Order.Basic","initialProofState":"α : Type u_2\nself : NormedLinearOrderedGroup α\nx y : α\n⊢ Eq (Dist.dist x y) (Norm.norm (HDiv.hDiv x y))","decl":"/-- A `NormedLinearOrderedGroup` is a group that is both a `NormedCommGroup` and a\n`LinearOrderedCommGroup`. This class is necessary to avoid diamonds caused by both classes\ncarrying their own group structure. -/\n@[to_additive]\nclass NormedLinearOrderedGroup (α : Type*) extends LinearOrderedCommGroup α, Norm α,\n  MetricSpace α where\n  /-- The distance function is induced by the norm. -/\n  dist_eq : ∀ x y, dist x y = ‖x / y‖ := by aesop\n\n"}
{"name":"NormedLinearOrderedField.dist_eq","module":"Mathlib.Analysis.Normed.Order.Basic","initialProofState":"α : Type u_2\nself : NormedLinearOrderedField α\nx y : α\n⊢ Eq (Dist.dist x y) (Norm.norm (HSub.hSub x y))","decl":"/-- A `NormedLinearOrderedField` is a field that is both a `NormedField` and a\n    `LinearOrderedField`. This class is necessary to avoid diamonds. -/\nclass NormedLinearOrderedField (α : Type*) extends LinearOrderedField α, Norm α,\n  MetricSpace α where\n  /-- The distance function is induced by the norm. -/\n  dist_eq : ∀ x y, dist x y = ‖x - y‖ := by aesop\n  /-- The norm is multiplicative. -/\n  norm_mul' : ∀ x y : α, ‖x * y‖ = ‖x‖ * ‖y‖\n\n"}
{"name":"NormedLinearOrderedField.norm_mul'","module":"Mathlib.Analysis.Normed.Order.Basic","initialProofState":"α : Type u_2\nself : NormedLinearOrderedField α\nx y : α\n⊢ Eq (Norm.norm (HMul.hMul x y)) (HMul.hMul (Norm.norm x) (Norm.norm y))","decl":"/-- A `NormedLinearOrderedField` is a field that is both a `NormedField` and a\n    `LinearOrderedField`. This class is necessary to avoid diamonds. -/\nclass NormedLinearOrderedField (α : Type*) extends LinearOrderedField α, Norm α,\n  MetricSpace α where\n  /-- The distance function is induced by the norm. -/\n  dist_eq : ∀ x y, dist x y = ‖x - y‖ := by aesop\n  /-- The norm is multiplicative. -/\n  norm_mul' : ∀ x y : α, ‖x * y‖ = ‖x‖ * ‖y‖\n\n"}
