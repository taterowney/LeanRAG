{"name":"String.congr_append","module":"Mathlib.Data.String.Lemmas","initialProofState":"a b : String\n⊢ Eq (HAppend.hAppend a b) { data := HAppend.hAppend a.data b.data }","decl":"lemma congr_append : ∀ (a b : String), a ++ b = String.mk (a.data ++ b.data)\n  | ⟨_⟩, ⟨_⟩ => rfl\n\n"}
{"name":"String.length_replicate","module":"Mathlib.Data.String.Lemmas","initialProofState":"n : Nat\nc : Char\n⊢ Eq (String.replicate n c).length n","decl":"@[simp] lemma length_replicate (n : ℕ) (c : Char) : (replicate n c).length = n := by\n  simp only [String.length, String.replicate, List.length_replicate]\n\n"}
{"name":"String.length_eq_list_length","module":"Mathlib.Data.String.Lemmas","initialProofState":"l : List Char\n⊢ Eq { data := l }.length l.length","decl":"lemma length_eq_list_length (l : List Char) : (String.mk l).length = l.length := by\n  simp only [String.length]\n\n"}
{"name":"String.leftpad_length","module":"Mathlib.Data.String.Lemmas","initialProofState":"n : Nat\nc : Char\ns : String\n⊢ Eq (String.leftpad n c s).length (Max.max n s.length)","decl":"/-- The length of the String returned by `String.leftpad n a c` is equal\n  to the larger of `n` and `s.length` -/\n@[simp] lemma leftpad_length (n : ℕ) (c : Char) :\n    ∀ (s : String), (leftpad n c s).length = max n s.length\n  | ⟨s⟩ => by simp only [leftpad, String.length, List.leftpad_length]\n\n"}
{"name":"String.leftpad_prefix","module":"Mathlib.Data.String.Lemmas","initialProofState":"n : Nat\nc : Char\ns : String\n⊢ (String.replicate (HSub.hSub n s.length) c).IsPrefix (String.leftpad n c s)","decl":"lemma leftpad_prefix (n : ℕ) (c : Char) : ∀ s, IsPrefix (replicate (n - length s) c) (leftpad n c s)\n  | ⟨l⟩ => by simp only [IsPrefix, replicate, leftpad, String.length, List.leftpad_prefix]\n\n"}
{"name":"String.leftpad_suffix","module":"Mathlib.Data.String.Lemmas","initialProofState":"n : Nat\nc : Char\ns : String\n⊢ s.IsSuffix (String.leftpad n c s)","decl":"lemma leftpad_suffix (n : ℕ) (c : Char) : ∀ s, IsSuffix s (leftpad n c s)\n  | ⟨l⟩ => by simp only [IsSuffix, replicate, leftpad, String.length, List.leftpad_suffix]\n\n"}
