{"name":"AddMonoidHom.toRatLinearMap_injective","module":"Mathlib.Algebra.Module.LinearMap.Rat","initialProofState":"M : Type u_1\nM₂ : Type u_2\ninst✝³ : AddCommGroup M\ninst✝² : Module Rat M\ninst✝¹ : AddCommGroup M₂\ninst✝ : Module Rat M₂\n⊢ Function.Injective AddMonoidHom.toRatLinearMap","decl":"theorem AddMonoidHom.toRatLinearMap_injective [AddCommGroup M] [Module ℚ M] [AddCommGroup M₂]\n    [Module ℚ M₂] : Function.Injective (@AddMonoidHom.toRatLinearMap M M₂ _ _ _ _) := by\n  intro f g h\n  ext x\n  exact LinearMap.congr_fun h x\n\n"}
{"name":"AddMonoidHom.coe_toRatLinearMap","module":"Mathlib.Algebra.Module.LinearMap.Rat","initialProofState":"M : Type u_1\nM₂ : Type u_2\ninst✝³ : AddCommGroup M\ninst✝² : Module Rat M\ninst✝¹ : AddCommGroup M₂\ninst✝ : Module Rat M₂\nf : AddMonoidHom M M₂\n⊢ Eq ⇑f.toRatLinearMap ⇑f","decl":"@[simp]\ntheorem AddMonoidHom.coe_toRatLinearMap [AddCommGroup M] [Module ℚ M] [AddCommGroup M₂]\n    [Module ℚ M₂] (f : M →+ M₂) : ⇑f.toRatLinearMap = f :=\n  rfl\n"}
