{"name":"MvPolynomial.funext","module":"Mathlib.Algebra.MvPolynomial.Funext","initialProofState":"R : Type u_1\ninst✝² : CommRing R\ninst✝¹ : IsDomain R\ninst✝ : Infinite R\nσ : Type u_2\np q : MvPolynomial σ R\nh : ∀ (x : σ → R), Eq ((MvPolynomial.eval x) p) ((MvPolynomial.eval x) q)\n⊢ Eq p q","decl":"/-- Two multivariate polynomials over an infinite integral domain are equal\nif they are equal upon evaluating them on an arbitrary assignment of the variables. -/\ntheorem funext {σ : Type*} {p q : MvPolynomial σ R} (h : ∀ x : σ → R, eval x p = eval x q) :\n    p = q := by\n  suffices ∀ p, (∀ x : σ → R, eval x p = 0) → p = 0 by\n    rw [← sub_eq_zero, this (p - q)]\n    simp only [h, RingHom.map_sub, forall_const, sub_self]\n  clear h p q\n  intro p h\n  obtain ⟨n, f, hf, p, rfl⟩ := exists_fin_rename p\n  suffices p = 0 by rw [this, map_zero]\n  apply funext_fin\n  intro x\n  classical\n    convert h (Function.extend f x 0)\n    simp only [eval, eval₂Hom_rename, Function.extend_comp hf]\n\n"}
{"name":"MvPolynomial.funext_iff","module":"Mathlib.Algebra.MvPolynomial.Funext","initialProofState":"R : Type u_1\ninst✝² : CommRing R\ninst✝¹ : IsDomain R\ninst✝ : Infinite R\nσ : Type u_2\np q : MvPolynomial σ R\n⊢ Iff (Eq p q) (∀ (x : σ → R), Eq ((MvPolynomial.eval x) p) ((MvPolynomial.eval x) q))","decl":"theorem funext_iff {σ : Type*} {p q : MvPolynomial σ R} :\n    p = q ↔ ∀ x : σ → R, eval x p = eval x q :=\n  ⟨by rintro rfl; simp only [forall_const, eq_self_iff_true], funext⟩\n\n"}
