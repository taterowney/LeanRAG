{"name":"Fin.succ_eq","module":"Mathlib.Data.Fin.SuccPred","initialProofState":"n : Nat\n⊢ Eq SuccOrder.succ fun a => ite (LT.lt a (Fin.last n)) (HAdd.hAdd a 1) a","decl":"@[simp]\ntheorem succ_eq {n : ℕ} : SuccOrder.succ = fun a => if a < Fin.last n then a + 1 else a :=\n  rfl\n\n"}
{"name":"Fin.succ_apply","module":"Mathlib.Data.Fin.SuccPred","initialProofState":"n : Nat\na : Fin (HAdd.hAdd n 1)\n⊢ Eq (SuccOrder.succ a) (ite (LT.lt a (Fin.last n)) (HAdd.hAdd a 1) a)","decl":"@[simp]\ntheorem succ_apply {n : ℕ} (a) : SuccOrder.succ a = if a < Fin.last n then a + 1 else a :=\n  rfl\n\n"}
{"name":"Fin.pred_eq","module":"Mathlib.Data.Fin.SuccPred","initialProofState":"n : Nat\n⊢ Eq PredOrder.pred fun a => ite (Eq a 0) 0 (HSub.hSub a 1)","decl":"@[simp]\ntheorem pred_eq {n} : PredOrder.pred = fun a : Fin (n + 1) => if a = 0 then 0 else a - 1 :=\n  rfl\n\n"}
{"name":"Fin.pred_apply","module":"Mathlib.Data.Fin.SuccPred","initialProofState":"n : Nat\na : Fin (HAdd.hAdd n 1)\n⊢ Eq (PredOrder.pred a) (ite (Eq a 0) 0 (HSub.hSub a 1))","decl":"@[simp]\ntheorem pred_apply {n : ℕ} (a : Fin (n + 1)) : PredOrder.pred a = if a = 0 then 0 else a - 1 :=\n  rfl\n\n"}
