{"name":"SlashInvariantFormClass.periodic_comp_ofComplex","module":"Mathlib.NumberTheory.ModularForms.QExpansion","initialProofState":"k : Int\nF : Type u_1\ninst‚úù¬π : FunLike F UpperHalfPlane Complex\nn : Nat\nf : F\ninst‚úù : SlashInvariantFormClass F (CongruenceSubgroup.Gamma n) k\n‚ä¢ Function.Periodic (Function.comp ‚áëf ‚ÜëUpperHalfPlane.ofComplex) ‚Üën","decl":"theorem periodic_comp_ofComplex [SlashInvariantFormClass F Œì(n) k] :\n    Periodic (f ‚àò ofComplex) n := by\n  intro w\n  by_cases hw : 0 < im w\n  ¬∑ have : 0 < im (w + n) := by simp only [add_im, natCast_im, add_zero, hw]\n    simp only [comp_apply, ofComplex_apply_of_im_pos this, ofComplex_apply_of_im_pos hw]\n    convert SlashInvariantForm.vAdd_width_periodic n k 1 f ‚ü®w, hw‚ü© using 2\n    simp only [Int.cast_one, mul_one, UpperHalfPlane.ext_iff, coe_mk_subtype, coe_vadd,\n      ofReal_natCast, add_comm]\n  ¬∑ have : im (w + n) ‚â§ 0 := by simpa only [add_im, natCast_im, add_zero, not_lt] using hw\n    simp only [comp_apply, ofComplex_apply_of_im_nonpos this,\n      ofComplex_apply_of_im_nonpos (not_lt.mp hw)]\n\n"}
{"name":"SlashInvariantFormClass.eq_cuspFunction","module":"Mathlib.NumberTheory.ModularForms.QExpansion","initialProofState":"k : Int\nF : Type u_1\ninst‚úù¬≤ : FunLike F UpperHalfPlane Complex\nn : Nat\nf : F\ninst‚úù¬π : NeZero n\ninst‚úù : SlashInvariantFormClass F (CongruenceSubgroup.Gamma n) k\nœÑ : UpperHalfPlane\n‚ä¢ Eq (SlashInvariantFormClass.cuspFunction n f (Function.Periodic.qParam ‚Üën ‚ÜëœÑ)) (f œÑ)","decl":"theorem eq_cuspFunction [NeZero n] [SlashInvariantFormClass F Œì(n) k] (œÑ : ‚Ñç) :\n    cuspFunction n f (ùï¢ n œÑ) = f œÑ := by\n  simpa only [comp_apply, ofComplex_apply]\n    using (periodic_comp_ofComplex n f).eq_cuspFunction (NeZero.ne _) œÑ\n\n"}
{"name":"ModularFormClass.differentiableAt_comp_ofComplex","module":"Mathlib.NumberTheory.ModularForms.QExpansion","initialProofState":"k : Int\nF : Type u_1\ninst‚úù¬π : FunLike F UpperHalfPlane Complex\nŒì : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nf : F\ninst‚úù : ModularFormClass F Œì k\nz : Complex\nhz : LT.lt 0 z.im\n‚ä¢ DifferentiableAt Complex (Function.comp ‚áëf ‚ÜëUpperHalfPlane.ofComplex) z","decl":"theorem differentiableAt_comp_ofComplex [ModularFormClass F Œì k] {z : ‚ÑÇ} (hz : 0 < im z) :\n    DifferentiableAt ‚ÑÇ (f ‚àò ofComplex) z :=\n  mdifferentiableAt_iff_differentiableAt.mp ((holo f _).comp z (mdifferentiableAt_ofComplex hz))\n\n"}
{"name":"ModularFormClass.bounded_at_infty_comp_ofComplex","module":"Mathlib.NumberTheory.ModularForms.QExpansion","initialProofState":"k : Int\nF : Type u_1\ninst‚úù¬π : FunLike F UpperHalfPlane Complex\nŒì : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nf : F\ninst‚úù : ModularFormClass F Œì k\n‚ä¢ (Filter.comap Complex.im Filter.atTop).BoundedAtFilter (Function.comp ‚áëf ‚ÜëUpperHalfPlane.ofComplex)","decl":"theorem bounded_at_infty_comp_ofComplex [ModularFormClass F Œì k] :\n    BoundedAtFilter I‚àû (f ‚àò ofComplex) := by\n  simpa only [SlashAction.slash_one, ModularForm.toSlashInvariantForm_coe]\n    using (ModularFormClass.bdd_at_infty f 1).comp_tendsto tendsto_comap_im_ofComplex\n\n"}
{"name":"ModularFormClass.differentiableAt_cuspFunction","module":"Mathlib.NumberTheory.ModularForms.QExpansion","initialProofState":"k : Int\nF : Type u_1\ninst‚úù¬≤ : FunLike F UpperHalfPlane Complex\nn : Nat\nf : F\ninst‚úù¬π : NeZero n\ninst‚úù : ModularFormClass F (CongruenceSubgroup.Gamma n) k\nq : Complex\nhq : LT.lt (Complex.abs q) 1\n‚ä¢ DifferentiableAt Complex (SlashInvariantFormClass.cuspFunction n f) q","decl":"theorem differentiableAt_cuspFunction [NeZero n] [ModularFormClass F Œì(n) k]\n    {q : ‚ÑÇ} (hq : q.abs < 1) :\n    DifferentiableAt ‚ÑÇ (cuspFunction n f) q := by\n  have npos : 0 < (n : ‚Ñù) := mod_cast (Nat.pos_iff_ne_zero.mpr (NeZero.ne _))\n  rcases eq_or_ne q 0 with rfl | hq'\n  ¬∑ exact (periodic_comp_ofComplex n f).differentiableAt_cuspFunction_zero npos\n      (eventually_of_mem (preimage_mem_comap (Ioi_mem_atTop 0))\n        (fun _ ‚Ü¶ differentiableAt_comp_ofComplex f))\n      (bounded_at_infty_comp_ofComplex f)\n  ¬∑ exact Periodic.qParam_right_inv npos.ne' hq' ‚ñ∏\n      (periodic_comp_ofComplex n f).differentiableAt_cuspFunction npos.ne'\n        <| differentiableAt_comp_ofComplex _ <| Periodic.im_invQParam_pos_of_abs_lt_one npos hq hq'\n\n"}
{"name":"ModularFormClass.analyticAt_cuspFunction_zero","module":"Mathlib.NumberTheory.ModularForms.QExpansion","initialProofState":"k : Int\nF : Type u_1\ninst‚úù¬≤ : FunLike F UpperHalfPlane Complex\nn : Nat\nf : F\ninst‚úù¬π : NeZero n\ninst‚úù : ModularFormClass F (CongruenceSubgroup.Gamma n) k\n‚ä¢ AnalyticAt Complex (SlashInvariantFormClass.cuspFunction n f) 0","decl":"lemma analyticAt_cuspFunction_zero [NeZero n] [ModularFormClass F Œì(n) k] :\n    AnalyticAt ‚ÑÇ (cuspFunction n f) 0 :=\n  DifferentiableOn.analyticAt\n    (fun q hq ‚Ü¶ (differentiableAt_cuspFunction _ _ hq).differentiableWithinAt)\n    (by simpa only [ball_zero_eq] using Metric.ball_mem_nhds (0 : ‚ÑÇ) zero_lt_one)\n\n"}
{"name":"ModularFormClass.qExpansion_coeff","module":"Mathlib.NumberTheory.ModularForms.QExpansion","initialProofState":"F : Type u_1\ninst‚úù : FunLike F UpperHalfPlane Complex\nn : Nat\nf : F\nm : Nat\n‚ä¢ Eq ((PowerSeries.coeff Complex m) (ModularFormClass.qExpansion n f)) (HMul.hMul (Inv.inv ‚Üëm.factorial) (iteratedDeriv m (SlashInvariantFormClass.cuspFunction n f) 0))","decl":"lemma qExpansion_coeff (m : ‚Ñï) :\n    (qExpansion n f).coeff ‚ÑÇ m = (‚Üëm.factorial)‚Åª¬π * iteratedDeriv m (cuspFunction n f) 0 := by\n  simp [qExpansion]\n\n"}
{"name":"ModularFormClass.hasSum_qExpansion_of_abs_lt","module":"Mathlib.NumberTheory.ModularForms.QExpansion","initialProofState":"k : Int\nF : Type u_1\ninst‚úù¬≤ : FunLike F UpperHalfPlane Complex\nn : Nat\nf : F\ninst‚úù¬π : NeZero n\ninst‚úù : ModularFormClass F (CongruenceSubgroup.Gamma n) k\nq : Complex\nhq : LT.lt (Complex.abs q) 1\n‚ä¢ HasSum (fun m => HSMul.hSMul ((PowerSeries.coeff Complex m) (ModularFormClass.qExpansion n f)) (HPow.hPow q m)) (SlashInvariantFormClass.cuspFunction n f q)","decl":"lemma hasSum_qExpansion_of_abs_lt [NeZero n] [ModularFormClass F Œì(n) k]\n    {q : ‚ÑÇ} (hq : q.abs < 1) :\n    HasSum (fun m : ‚Ñï ‚Ü¶ (qExpansion n f).coeff ‚ÑÇ m ‚Ä¢ q ^ m) (cuspFunction n f q) := by\n  simp only [qExpansion_coeff, ‚Üê eq_cuspFunction n f]\n  have hdiff : DifferentiableOn ‚ÑÇ (cuspFunction n f) (Metric.ball 0 1) := by\n    refine fun z hz ‚Ü¶ (differentiableAt_cuspFunction n f ?_).differentiableWithinAt\n    simpa using hz\n  have qmem : q ‚àà Metric.ball 0 1 := by simpa using hq\n  convert hasSum_taylorSeries_on_ball hdiff qmem using 2 with m\n  rw [sub_zero, smul_eq_mul, smul_eq_mul, mul_right_comm, smul_eq_mul, mul_assoc]\n\n"}
{"name":"ModularFormClass.hasSum_qExpansion","module":"Mathlib.NumberTheory.ModularForms.QExpansion","initialProofState":"k : Int\nF : Type u_1\ninst‚úù¬≤ : FunLike F UpperHalfPlane Complex\nn : Nat\nf : F\ninst‚úù¬π : NeZero n\ninst‚úù : ModularFormClass F (CongruenceSubgroup.Gamma n) k\nœÑ : UpperHalfPlane\n‚ä¢ HasSum (fun m => HSMul.hSMul ((PowerSeries.coeff Complex m) (ModularFormClass.qExpansion n f)) (HPow.hPow (Function.Periodic.qParam ‚Üën ‚ÜëœÑ) m)) (f œÑ)","decl":"lemma hasSum_qExpansion [NeZero n] [ModularFormClass F Œì(n) k] (œÑ : ‚Ñç) :\n    HasSum (fun m : ‚Ñï ‚Ü¶ (qExpansion n f).coeff ‚ÑÇ m ‚Ä¢ ùï¢ n œÑ ^ m) (f œÑ) := by\n  simpa only [eq_cuspFunction n f] using\n    hasSum_qExpansion_of_abs_lt n f (œÑ.abs_qParam_lt_one n)\n\n"}
{"name":"ModularFormClass.qExpansionFormalMultilinearSeries_apply_norm","module":"Mathlib.NumberTheory.ModularForms.QExpansion","initialProofState":"F : Type u_1\ninst‚úù : FunLike F UpperHalfPlane Complex\nn : Nat\nf : F\nm : Nat\n‚ä¢ Eq (Norm.norm (ModularFormClass.qExpansionFormalMultilinearSeries n f m)) (Norm.norm ((PowerSeries.coeff Complex m) (ModularFormClass.qExpansion n f)))","decl":"lemma qExpansionFormalMultilinearSeries_apply_norm (m : ‚Ñï) :\n    ‚ÄñqExpansionFormalMultilinearSeries n f m‚Äñ = ‚Äñ(qExpansion n f).coeff ‚ÑÇ m‚Äñ := by\n  rw [qExpansionFormalMultilinearSeries,\n    ‚Üê (ContinuousMultilinearMap.piFieldEquiv ‚ÑÇ (Fin m) ‚ÑÇ).symm.norm_map]\n  simp\n\n"}
{"name":"ModularFormClass.qExpansionFormalMultilinearSeries_radius","module":"Mathlib.NumberTheory.ModularForms.QExpansion","initialProofState":"k : Int\nF : Type u_1\ninst‚úù¬≤ : FunLike F UpperHalfPlane Complex\nn : Nat\nf : F\ninst‚úù¬π : NeZero n\ninst‚úù : ModularFormClass F (CongruenceSubgroup.Gamma n) k\n‚ä¢ LE.le 1 (ModularFormClass.qExpansionFormalMultilinearSeries n f).radius","decl":"lemma qExpansionFormalMultilinearSeries_radius [NeZero n] [ModularFormClass F Œì(n) k] :\n    1 ‚â§ (qExpansionFormalMultilinearSeries n f).radius := by\n  refine le_of_forall_lt_imp_le_of_dense fun r hr ‚Ü¶ ?_\n  lift r to NNReal using hr.ne_top\n  apply FormalMultilinearSeries.le_radius_of_summable\n  simp only [qExpansionFormalMultilinearSeries_apply_norm]\n  rw [‚Üê r.abs_eq]\n  simp_rw [pow_abs, ‚Üê Complex.abs_ofReal, ofReal_pow, ‚Üê Complex.norm_eq_abs, ‚Üê norm_mul]\n  exact (hasSum_qExpansion_of_abs_lt n f (q := r) (by simpa using hr)).summable.norm\n\n"}
{"name":"ModularFormClass.hasFPowerSeries_cuspFunction","module":"Mathlib.NumberTheory.ModularForms.QExpansion","initialProofState":"k : Int\nF : Type u_1\ninst‚úù¬≤ : FunLike F UpperHalfPlane Complex\nn : Nat\nf : F\ninst‚úù¬π : NeZero n\ninst‚úù : ModularFormClass F (CongruenceSubgroup.Gamma n) k\n‚ä¢ HasFPowerSeriesOnBall (SlashInvariantFormClass.cuspFunction n f) (ModularFormClass.qExpansionFormalMultilinearSeries n f) 0 1","decl":"/-- The `q`-expansion of `f` is an `FPowerSeries` representing `cuspFunction n f`. -/\nlemma hasFPowerSeries_cuspFunction [NeZero n] [ModularFormClass F Œì(n) k] :\n    HasFPowerSeriesOnBall (cuspFunction n f) (qExpansionFormalMultilinearSeries n f) 0 1 := by\n  refine ‚ü®qExpansionFormalMultilinearSeries_radius n f, zero_lt_one, fun hy ‚Ü¶ ?_‚ü©\n  rw [EMetric.mem_ball, edist_zero_right, enorm_eq_nnnorm, ENNReal.coe_lt_one_iff,\n    ‚Üê NNReal.coe_lt_one, coe_nnnorm, norm_eq_abs] at hy\n  simpa [qExpansionFormalMultilinearSeries] using hasSum_qExpansion_of_abs_lt n f hy\n\n"}
{"name":"CuspFormClass.zero_at_infty_comp_ofComplex","module":"Mathlib.NumberTheory.ModularForms.QExpansion","initialProofState":"k : Int\nF : Type u_1\ninst‚úù¬π : FunLike F UpperHalfPlane Complex\nŒì : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nf : F\ninst‚úù : CuspFormClass F Œì k\n‚ä¢ (Filter.comap Complex.im Filter.atTop).ZeroAtFilter (Function.comp ‚áëf ‚ÜëUpperHalfPlane.ofComplex)","decl":"theorem zero_at_infty_comp_ofComplex [CuspFormClass F Œì k] : ZeroAtFilter I‚àû (f ‚àò ofComplex) := by\n  simpa only [SlashAction.slash_one, toSlashInvariantForm_coe]\n    using (zero_at_infty f 1).comp tendsto_comap_im_ofComplex\n\n"}
{"name":"CuspFormClass.cuspFunction_apply_zero","module":"Mathlib.NumberTheory.ModularForms.QExpansion","initialProofState":"k : Int\nF : Type u_1\ninst‚úù¬≤ : FunLike F UpperHalfPlane Complex\nn : Nat\nf : F\ninst‚úù¬π : NeZero n\ninst‚úù : CuspFormClass F (CongruenceSubgroup.Gamma n) k\n‚ä¢ Eq (SlashInvariantFormClass.cuspFunction n f 0) 0","decl":"theorem cuspFunction_apply_zero [NeZero n] [CuspFormClass F Œì(n) k] :\n    cuspFunction n f 0 = 0 :=\n  Periodic.cuspFunction_zero_of_zero_at_inf (mod_cast (Nat.pos_iff_ne_zero.mpr (NeZero.ne _)))\n    (zero_at_infty_comp_ofComplex f)\n\n"}
{"name":"CuspFormClass.exp_decay_atImInfty","module":"Mathlib.NumberTheory.ModularForms.QExpansion","initialProofState":"k : Int\nF : Type u_1\ninst‚úù¬≤ : FunLike F UpperHalfPlane Complex\nn : Nat\nf : F\ninst‚úù¬π : NeZero n\ninst‚úù : CuspFormClass F (CongruenceSubgroup.Gamma n) k\n‚ä¢ Asymptotics.IsBigO UpperHalfPlane.atImInfty ‚áëf fun œÑ => Real.exp (HDiv.hDiv (HMul.hMul (HMul.hMul (-2) Real.pi) œÑ.im) ‚Üën)","decl":"theorem exp_decay_atImInfty [NeZero n] [CuspFormClass F Œì(n) k] :\n    f =O[atImInfty] fun œÑ ‚Ü¶ Real.exp (-2 * œÄ * œÑ.im / n) := by\n  simpa only [neg_mul, comp_def, ofComplex_apply, coe_im] using\n    ((periodic_comp_ofComplex n f).exp_decay_of_zero_at_inf\n      (mod_cast (Nat.pos_iff_ne_zero.mpr (NeZero.ne _)))\n      (eventually_of_mem (preimage_mem_comap (Ioi_mem_atTop 0))\n        fun _ ‚Ü¶ differentiableAt_comp_ofComplex f)\n      (zero_at_infty_comp_ofComplex f)).comp_tendsto tendsto_coe_atImInfty\n\n"}
