{"name":"ProfiniteGrp.mk.sizeOf_spec","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"toProfinite : Profinite\ngroup : Group ↑toProfinite.toTop\ntopologicalGroup : TopologicalGroup ↑toProfinite.toTop\n⊢ Eq (SizeOf.sizeOf (ProfiniteGrp.mk toProfinite)) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toProfinite)) (SizeOf.sizeOf group)) (SizeOf.sizeOf topologicalGroup))","decl":"/--\nThe category of profinite groups. A term of this type consists of a profinite\nset with a topological group structure.\n-/\n@[pp_with_univ]\nstructure ProfiniteGrp where\n  /-- The underlying profinite topological space. -/\n  toProfinite : Profinite\n  /-- The group structure. -/\n  [group : Group toProfinite]\n  /-- The above data together form a topological group. -/\n  [topologicalGroup : TopologicalGroup toProfinite]\n\n"}
{"name":"ProfiniteGrp.topologicalGroup","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"self : ProfiniteGrp.{u_1}\n⊢ TopologicalGroup ↑self.toProfinite.toTop","decl":"/--\nThe category of profinite groups. A term of this type consists of a profinite\nset with a topological group structure.\n-/\n@[pp_with_univ]\nstructure ProfiniteGrp where\n  /-- The underlying profinite topological space. -/\n  toProfinite : Profinite\n  /-- The group structure. -/\n  [group : Group toProfinite]\n  /-- The above data together form a topological group. -/\n  [topologicalGroup : TopologicalGroup toProfinite]\n\n"}
{"name":"ProfiniteGrp.mk.injEq","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"toProfinite✝ : Profinite\ngroup✝ : Group ↑toProfinite✝.toTop\ntopologicalGroup✝ : TopologicalGroup ↑toProfinite✝.toTop\ntoProfinite : Profinite\ngroup : Group ↑toProfinite.toTop\ntopologicalGroup : TopologicalGroup ↑toProfinite.toTop\n⊢ Eq (Eq (ProfiniteGrp.mk toProfinite✝) (ProfiniteGrp.mk toProfinite)) (And (Eq toProfinite✝ toProfinite) (HEq group✝ group))","decl":"/--\nThe category of profinite groups. A term of this type consists of a profinite\nset with a topological group structure.\n-/\n@[pp_with_univ]\nstructure ProfiniteGrp where\n  /-- The underlying profinite topological space. -/\n  toProfinite : Profinite\n  /-- The group structure. -/\n  [group : Group toProfinite]\n  /-- The above data together form a topological group. -/\n  [topologicalGroup : TopologicalGroup toProfinite]\n\n"}
{"name":"ProfiniteGrp.mk.inj","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"toProfinite✝ : Profinite\ngroup✝ : Group ↑toProfinite✝.toTop\ntopologicalGroup✝ : TopologicalGroup ↑toProfinite✝.toTop\ntoProfinite : Profinite\ngroup : Group ↑toProfinite.toTop\ntopologicalGroup : TopologicalGroup ↑toProfinite.toTop\nx✝ : Eq (ProfiniteGrp.mk toProfinite✝) (ProfiniteGrp.mk toProfinite)\n⊢ And (Eq toProfinite✝ toProfinite) (HEq group✝ group)","decl":"/--\nThe category of profinite groups. A term of this type consists of a profinite\nset with a topological group structure.\n-/\n@[pp_with_univ]\nstructure ProfiniteGrp where\n  /-- The underlying profinite topological space. -/\n  toProfinite : Profinite\n  /-- The group structure. -/\n  [group : Group toProfinite]\n  /-- The above data together form a topological group. -/\n  [topologicalGroup : TopologicalGroup toProfinite]\n\n"}
{"name":"ProfiniteAddGrp.topologicalAddGroup","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"self : ProfiniteAddGrp.{u_1}\n⊢ TopologicalAddGroup ↑self.toProfinite.toTop","decl":"/--\nThe category of profinite additive groups. A term of this type consists of a profinite\nset with a topological additive group structure.\n-/\n@[pp_with_univ]\nstructure ProfiniteAddGrp where\n  /-- The underlying profinite topological space. -/\n  toProfinite : Profinite\n  /-- The additive group structure. -/\n  [addGroup : AddGroup toProfinite]\n  /-- The above data together form a topological additive group. -/\n  [topologicalAddGroup : TopologicalAddGroup toProfinite]\n\n"}
{"name":"ProfiniteAddGrp.mk.injEq","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"toProfinite✝ : Profinite\naddGroup✝ : AddGroup ↑toProfinite✝.toTop\ntopologicalAddGroup✝ : TopologicalAddGroup ↑toProfinite✝.toTop\ntoProfinite : Profinite\naddGroup : AddGroup ↑toProfinite.toTop\ntopologicalAddGroup : TopologicalAddGroup ↑toProfinite.toTop\n⊢ Eq (Eq (ProfiniteAddGrp.mk toProfinite✝) (ProfiniteAddGrp.mk toProfinite)) (And (Eq toProfinite✝ toProfinite) (HEq addGroup✝ addGroup))","decl":"/--\nThe category of profinite additive groups. A term of this type consists of a profinite\nset with a topological additive group structure.\n-/\n@[pp_with_univ]\nstructure ProfiniteAddGrp where\n  /-- The underlying profinite topological space. -/\n  toProfinite : Profinite\n  /-- The additive group structure. -/\n  [addGroup : AddGroup toProfinite]\n  /-- The above data together form a topological additive group. -/\n  [topologicalAddGroup : TopologicalAddGroup toProfinite]\n\n"}
{"name":"ProfiniteAddGrp.mk.inj","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"toProfinite✝ : Profinite\naddGroup✝ : AddGroup ↑toProfinite✝.toTop\ntopologicalAddGroup✝ : TopologicalAddGroup ↑toProfinite✝.toTop\ntoProfinite : Profinite\naddGroup : AddGroup ↑toProfinite.toTop\ntopologicalAddGroup : TopologicalAddGroup ↑toProfinite.toTop\nx✝ : Eq (ProfiniteAddGrp.mk toProfinite✝) (ProfiniteAddGrp.mk toProfinite)\n⊢ And (Eq toProfinite✝ toProfinite) (HEq addGroup✝ addGroup)","decl":"/--\nThe category of profinite additive groups. A term of this type consists of a profinite\nset with a topological additive group structure.\n-/\n@[pp_with_univ]\nstructure ProfiniteAddGrp where\n  /-- The underlying profinite topological space. -/\n  toProfinite : Profinite\n  /-- The additive group structure. -/\n  [addGroup : AddGroup toProfinite]\n  /-- The above data together form a topological additive group. -/\n  [topologicalAddGroup : TopologicalAddGroup toProfinite]\n\n"}
{"name":"ProfiniteAddGrp.mk.sizeOf_spec","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"toProfinite : Profinite\naddGroup : AddGroup ↑toProfinite.toTop\ntopologicalAddGroup : TopologicalAddGroup ↑toProfinite.toTop\n⊢ Eq (SizeOf.sizeOf (ProfiniteAddGrp.mk toProfinite)) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toProfinite)) (SizeOf.sizeOf addGroup)) (SizeOf.sizeOf topologicalAddGroup))","decl":"/--\nThe category of profinite additive groups. A term of this type consists of a profinite\nset with a topological additive group structure.\n-/\n@[pp_with_univ]\nstructure ProfiniteAddGrp where\n  /-- The underlying profinite topological space. -/\n  toProfinite : Profinite\n  /-- The additive group structure. -/\n  [addGroup : AddGroup toProfinite]\n  /-- The above data together form a topological additive group. -/\n  [topologicalAddGroup : TopologicalAddGroup toProfinite]\n\n"}
{"name":"ProfiniteAddGrp.coe_of","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"G : Type u\ninst✝⁴ : AddGroup G\ninst✝³ : TopologicalSpace G\ninst✝² : TopologicalAddGroup G\ninst✝¹ : CompactSpace G\ninst✝ : TotallyDisconnectedSpace G\n⊢ Eq (↑(ProfiniteAddGrp.of G).toProfinite.toTop) G","decl":"@[to_additive (attr := simp)]\nlemma ProfiniteGrp.coe_of (G : Type u) [Group G] [TopologicalSpace G] [TopologicalGroup G]\n    [CompactSpace G] [TotallyDisconnectedSpace G] : (ProfiniteGrp.of G : Type u) = G :=\n  rfl\n\n"}
{"name":"ProfiniteGrp.coe_of","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"G : Type u\ninst✝⁴ : Group G\ninst✝³ : TopologicalSpace G\ninst✝² : TopologicalGroup G\ninst✝¹ : CompactSpace G\ninst✝ : TotallyDisconnectedSpace G\n⊢ Eq (↑(ProfiniteGrp.of G).toProfinite.toTop) G","decl":"@[to_additive (attr := simp)]\nlemma ProfiniteGrp.coe_of (G : Type u) [Group G] [TopologicalSpace G] [TopologicalGroup G]\n    [CompactSpace G] [TotallyDisconnectedSpace G] : (ProfiniteGrp.of G : Type u) = G :=\n  rfl\n\n"}
{"name":"ProfiniteAddGrp.Hom.ext_iff","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"A B : ProfiniteAddGrp.{u}\nx y : A.Hom B\n⊢ Iff (Eq x y) (Eq x.hom y.hom)","decl":"/-- The type of morphisms in `ProfiniteAddGrp`. -/\n@[ext]\nstructure ProfiniteAddGrp.Hom (A B : ProfiniteAddGrp.{u}) where\n  private mk ::\n  /-- The underlying `ContinuousAddMonoidHom`. -/\n  hom : ContinuousAddMonoidHom A B\n\n"}
{"name":"ProfiniteAddGrp.Hom.ext","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"A B : ProfiniteAddGrp.{u}\nx y : A.Hom B\nhom : Eq x.hom y.hom\n⊢ Eq x y","decl":"/-- The type of morphisms in `ProfiniteAddGrp`. -/\n@[ext]\nstructure ProfiniteAddGrp.Hom (A B : ProfiniteAddGrp.{u}) where\n  private mk ::\n  /-- The underlying `ContinuousAddMonoidHom`. -/\n  hom : ContinuousAddMonoidHom A B\n\n"}
{"name":"ProfiniteGrp.Hom.ext_iff","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"A B : ProfiniteGrp.{u}\nx y : A.Hom B\n⊢ Iff (Eq x y) (Eq x.hom y.hom)","decl":"/-- The type of morphisms in `ProfiniteGrp`. -/\n@[to_additive (attr := ext) existing]\nstructure ProfiniteGrp.Hom (A B : ProfiniteGrp.{u}) where\n  private mk ::\n  /-- The underlying `ContinuousMonoidHom`. -/\n  hom : ContinuousMonoidHom A B\n\n"}
{"name":"ProfiniteGrp.Hom.ext","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"A B : ProfiniteGrp.{u}\nx y : A.Hom B\nhom : Eq x.hom y.hom\n⊢ Eq x y","decl":"/-- The type of morphisms in `ProfiniteGrp`. -/\n@[to_additive (attr := ext) existing]\nstructure ProfiniteGrp.Hom (A B : ProfiniteGrp.{u}) where\n  private mk ::\n  /-- The underlying `ContinuousMonoidHom`. -/\n  hom : ContinuousMonoidHom A B\n\n"}
{"name":"ProfiniteGrp.hom_id","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"A : ProfiniteGrp.{u}\n⊢ Eq (CategoryTheory.CategoryStruct.id A).hom (ContinuousMonoidHom.id ↑A.toProfinite.toTop)","decl":"@[to_additive (attr := simp)]\nlemma hom_id {A : ProfiniteGrp.{u}} : (𝟙 A : A ⟶ A).hom = ContinuousMonoidHom.id A := rfl\n\n/- Provided for rewriting. -/\n"}
{"name":"ProfiniteAddGrp.hom_id","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"A : ProfiniteAddGrp.{u}\n⊢ Eq (CategoryTheory.CategoryStruct.id A).hom (ContinuousAddMonoidHom.id ↑A.toProfinite.toTop)","decl":"@[to_additive (attr := simp)]\nlemma hom_id {A : ProfiniteGrp.{u}} : (𝟙 A : A ⟶ A).hom = ContinuousMonoidHom.id A := rfl\n\n/- Provided for rewriting. -/\n"}
{"name":"ProfiniteAddGrp.id_apply","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"A : ProfiniteAddGrp.{u}\na : ↑A.toProfinite.toTop\n⊢ Eq ((CategoryTheory.CategoryStruct.id A).hom a) a","decl":"@[to_additive]\nlemma id_apply (A : ProfiniteGrp.{u}) (a : A) :\n    (𝟙 A : A ⟶ A) a = a := by simp\n\n"}
{"name":"ProfiniteGrp.id_apply","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"A : ProfiniteGrp.{u}\na : ↑A.toProfinite.toTop\n⊢ Eq ((CategoryTheory.CategoryStruct.id A).hom a) a","decl":"@[to_additive]\nlemma id_apply (A : ProfiniteGrp.{u}) (a : A) :\n    (𝟙 A : A ⟶ A) a = a := by simp\n\n"}
{"name":"ProfiniteGrp.hom_comp","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"A B C : ProfiniteGrp.{u}\nf : Quiver.Hom A B\ng : Quiver.Hom B C\n⊢ Eq (CategoryTheory.CategoryStruct.comp f g).hom (g.hom.comp f.hom)","decl":"@[to_additive (attr := simp)]\nlemma hom_comp {A B C : ProfiniteGrp.{u}} (f : A ⟶ B) (g : B ⟶ C) :\n    (f ≫ g).hom = g.hom.comp f.hom := rfl\n\n/- Provided for rewriting. -/\n"}
{"name":"ProfiniteAddGrp.hom_comp","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"A B C : ProfiniteAddGrp.{u}\nf : Quiver.Hom A B\ng : Quiver.Hom B C\n⊢ Eq (CategoryTheory.CategoryStruct.comp f g).hom (g.hom.comp f.hom)","decl":"@[to_additive (attr := simp)]\nlemma hom_comp {A B C : ProfiniteGrp.{u}} (f : A ⟶ B) (g : B ⟶ C) :\n    (f ≫ g).hom = g.hom.comp f.hom := rfl\n\n/- Provided for rewriting. -/\n"}
{"name":"ProfiniteGrp.comp_apply","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"A B C : ProfiniteGrp.{u}\nf : Quiver.Hom A B\ng : Quiver.Hom B C\na : ↑A.toProfinite.toTop\n⊢ Eq ((CategoryTheory.CategoryStruct.comp f g).hom a) (g.hom (f.hom a))","decl":"@[to_additive]\nlemma comp_apply {A B C : ProfiniteGrp.{u}} (f : A ⟶ B) (g : B ⟶ C) (a : A) :\n    (f ≫ g) a = g (f a) := by\n  simp only [hom_comp, ContinuousMonoidHom.comp_toFun]\n\n"}
{"name":"ProfiniteAddGrp.comp_apply","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"A B C : ProfiniteAddGrp.{u}\nf : Quiver.Hom A B\ng : Quiver.Hom B C\na : ↑A.toProfinite.toTop\n⊢ Eq ((CategoryTheory.CategoryStruct.comp f g).hom a) (g.hom (f.hom a))","decl":"@[to_additive]\nlemma comp_apply {A B C : ProfiniteGrp.{u}} (f : A ⟶ B) (g : B ⟶ C) (a : A) :\n    (f ≫ g) a = g (f a) := by\n  simp only [hom_comp, ContinuousMonoidHom.comp_toFun]\n\n"}
{"name":"ProfiniteGrp.hom_ext_iff","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"A B : ProfiniteGrp.{u}\nf g : Quiver.Hom A B\n⊢ Iff (Eq f g) (Eq f.hom g.hom)","decl":"@[to_additive (attr := ext)]\nlemma hom_ext {A B : ProfiniteGrp.{u}} {f g : A ⟶ B} (hf : f.hom = g.hom) : f = g :=\n  Hom.ext hf\n\n"}
{"name":"ProfiniteAddGrp.hom_ext_iff","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"A B : ProfiniteAddGrp.{u}\nf g : Quiver.Hom A B\n⊢ Iff (Eq f g) (Eq f.hom g.hom)","decl":"@[to_additive (attr := ext)]\nlemma hom_ext {A B : ProfiniteGrp.{u}} {f g : A ⟶ B} (hf : f.hom = g.hom) : f = g :=\n  Hom.ext hf\n\n"}
{"name":"ProfiniteGrp.hom_ext","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"A B : ProfiniteGrp.{u}\nf g : Quiver.Hom A B\nhf : Eq f.hom g.hom\n⊢ Eq f g","decl":"@[to_additive (attr := ext)]\nlemma hom_ext {A B : ProfiniteGrp.{u}} {f g : A ⟶ B} (hf : f.hom = g.hom) : f = g :=\n  Hom.ext hf\n\n"}
{"name":"ProfiniteAddGrp.hom_ext","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"A B : ProfiniteAddGrp.{u}\nf g : Quiver.Hom A B\nhf : Eq f.hom g.hom\n⊢ Eq f g","decl":"@[to_additive (attr := ext)]\nlemma hom_ext {A B : ProfiniteGrp.{u}} {f g : A ⟶ B} (hf : f.hom = g.hom) : f = g :=\n  Hom.ext hf\n\n"}
{"name":"ProfiniteGrp.hom_ofHom","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"X Y : Type u\ninst✝⁹ : Group X\ninst✝⁸ : TopologicalSpace X\ninst✝⁷ : TopologicalGroup X\ninst✝⁶ : CompactSpace X\ninst✝⁵ : TotallyDisconnectedSpace X\ninst✝⁴ : Group Y\ninst✝³ : TopologicalSpace Y\ninst✝² : TopologicalGroup Y\ninst✝¹ : CompactSpace Y\ninst✝ : TotallyDisconnectedSpace Y\nf : ContinuousMonoidHom X Y\n⊢ Eq (ProfiniteGrp.ofHom f).hom f","decl":"@[to_additive]\nlemma hom_ofHom (f : ContinuousMonoidHom X Y) : (ofHom f).hom = f := rfl\n\n"}
{"name":"ProfiniteAddGrp.hom_ofHom","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"X Y : Type u\ninst✝⁹ : AddGroup X\ninst✝⁸ : TopologicalSpace X\ninst✝⁷ : TopologicalAddGroup X\ninst✝⁶ : CompactSpace X\ninst✝⁵ : TotallyDisconnectedSpace X\ninst✝⁴ : AddGroup Y\ninst✝³ : TopologicalSpace Y\ninst✝² : TopologicalAddGroup Y\ninst✝¹ : CompactSpace Y\ninst✝ : TotallyDisconnectedSpace Y\nf : ContinuousAddMonoidHom X Y\n⊢ Eq (ProfiniteAddGrp.ofHom f).hom f","decl":"@[to_additive]\nlemma hom_ofHom (f : ContinuousMonoidHom X Y) : (ofHom f).hom = f := rfl\n\n"}
{"name":"ProfiniteGrp.ofHom_hom","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"A B : ProfiniteGrp.{u}\nf : Quiver.Hom A B\n⊢ Eq (ProfiniteGrp.ofHom f.hom) f","decl":"@[to_additive (attr := simp)]\nlemma ofHom_hom {A B : ProfiniteGrp.{u}} (f : A ⟶ B) :\n    ofHom (Hom.hom f) = f := rfl\n\n"}
{"name":"ProfiniteAddGrp.ofHom_hom","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"A B : ProfiniteAddGrp.{u}\nf : Quiver.Hom A B\n⊢ Eq (ProfiniteAddGrp.ofHom f.hom) f","decl":"@[to_additive (attr := simp)]\nlemma ofHom_hom {A B : ProfiniteGrp.{u}} (f : A ⟶ B) :\n    ofHom (Hom.hom f) = f := rfl\n\n"}
{"name":"ProfiniteGrp.ofHom_id","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"X : Type u\ninst✝⁴ : Group X\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalGroup X\ninst✝¹ : CompactSpace X\ninst✝ : TotallyDisconnectedSpace X\n⊢ Eq (ProfiniteGrp.ofHom (ContinuousMonoidHom.id X)) (CategoryTheory.CategoryStruct.id (ProfiniteGrp.of X))","decl":"@[to_additive (attr := simp)]\nlemma ofHom_id : ofHom (ContinuousMonoidHom.id X) = 𝟙 (of X) := rfl\n\n"}
{"name":"ProfiniteAddGrp.ofHom_id","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"X : Type u\ninst✝⁴ : AddGroup X\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalAddGroup X\ninst✝¹ : CompactSpace X\ninst✝ : TotallyDisconnectedSpace X\n⊢ Eq (ProfiniteAddGrp.ofHom (ContinuousAddMonoidHom.id X)) (CategoryTheory.CategoryStruct.id (ProfiniteAddGrp.of X))","decl":"@[to_additive (attr := simp)]\nlemma ofHom_id : ofHom (ContinuousMonoidHom.id X) = 𝟙 (of X) := rfl\n\n"}
{"name":"ProfiniteGrp.ofHom_comp","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"X Y Z : Type u\ninst✝¹⁴ : Group X\ninst✝¹³ : TopologicalSpace X\ninst✝¹² : TopologicalGroup X\ninst✝¹¹ : CompactSpace X\ninst✝¹⁰ : TotallyDisconnectedSpace X\ninst✝⁹ : Group Y\ninst✝⁸ : TopologicalSpace Y\ninst✝⁷ : TopologicalGroup Y\ninst✝⁶ : CompactSpace Y\ninst✝⁵ : TotallyDisconnectedSpace Y\ninst✝⁴ : Group Z\ninst✝³ : TopologicalSpace Z\ninst✝² : TopologicalGroup Z\ninst✝¹ : CompactSpace Z\ninst✝ : TotallyDisconnectedSpace Z\nf : ContinuousMonoidHom X Y\ng : ContinuousMonoidHom Y Z\n⊢ Eq (ProfiniteGrp.ofHom (g.comp f)) (CategoryTheory.CategoryStruct.comp (ProfiniteGrp.ofHom f) (ProfiniteGrp.ofHom g))","decl":"@[to_additive (attr := simp)]\nlemma ofHom_comp (f : ContinuousMonoidHom X Y) (g : ContinuousMonoidHom Y Z) :\n    ofHom (g.comp f) = ofHom f ≫ ofHom g :=\n  rfl\n\n"}
{"name":"ProfiniteAddGrp.ofHom_comp","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"X Y Z : Type u\ninst✝¹⁴ : AddGroup X\ninst✝¹³ : TopologicalSpace X\ninst✝¹² : TopologicalAddGroup X\ninst✝¹¹ : CompactSpace X\ninst✝¹⁰ : TotallyDisconnectedSpace X\ninst✝⁹ : AddGroup Y\ninst✝⁸ : TopologicalSpace Y\ninst✝⁷ : TopologicalAddGroup Y\ninst✝⁶ : CompactSpace Y\ninst✝⁵ : TotallyDisconnectedSpace Y\ninst✝⁴ : AddGroup Z\ninst✝³ : TopologicalSpace Z\ninst✝² : TopologicalAddGroup Z\ninst✝¹ : CompactSpace Z\ninst✝ : TotallyDisconnectedSpace Z\nf : ContinuousAddMonoidHom X Y\ng : ContinuousAddMonoidHom Y Z\n⊢ Eq (ProfiniteAddGrp.ofHom (g.comp f)) (CategoryTheory.CategoryStruct.comp (ProfiniteAddGrp.ofHom f) (ProfiniteAddGrp.ofHom g))","decl":"@[to_additive (attr := simp)]\nlemma ofHom_comp (f : ContinuousMonoidHom X Y) (g : ContinuousMonoidHom Y Z) :\n    ofHom (g.comp f) = ofHom f ≫ ofHom g :=\n  rfl\n\n"}
{"name":"ProfiniteGrp.ofHom_apply","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"X Y : Type u\ninst✝⁹ : Group X\ninst✝⁸ : TopologicalSpace X\ninst✝⁷ : TopologicalGroup X\ninst✝⁶ : CompactSpace X\ninst✝⁵ : TotallyDisconnectedSpace X\ninst✝⁴ : Group Y\ninst✝³ : TopologicalSpace Y\ninst✝² : TopologicalGroup Y\ninst✝¹ : CompactSpace Y\ninst✝ : TotallyDisconnectedSpace Y\nf : ContinuousMonoidHom X Y\nx : X\n⊢ Eq ((ProfiniteGrp.ofHom f).hom x) (f x)","decl":"@[to_additive]\nlemma ofHom_apply (f : ContinuousMonoidHom X Y) (x : X) : ofHom f x = f x := rfl\n\n"}
{"name":"ProfiniteAddGrp.ofHom_apply","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"X Y : Type u\ninst✝⁹ : AddGroup X\ninst✝⁸ : TopologicalSpace X\ninst✝⁷ : TopologicalAddGroup X\ninst✝⁶ : CompactSpace X\ninst✝⁵ : TotallyDisconnectedSpace X\ninst✝⁴ : AddGroup Y\ninst✝³ : TopologicalSpace Y\ninst✝² : TopologicalAddGroup Y\ninst✝¹ : CompactSpace Y\ninst✝ : TotallyDisconnectedSpace Y\nf : ContinuousAddMonoidHom X Y\nx : X\n⊢ Eq ((ProfiniteAddGrp.ofHom f).hom x) (f x)","decl":"@[to_additive]\nlemma ofHom_apply (f : ContinuousMonoidHom X Y) (x : X) : ofHom f x = f x := rfl\n\n"}
{"name":"ProfiniteGrp.inv_hom_apply","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"A B : ProfiniteGrp.{u}\ne : CategoryTheory.Iso A B\nx : ↑A.toProfinite.toTop\n⊢ Eq (e.inv.hom (e.hom.hom x)) x","decl":"@[to_additive (attr := simp)]\nlemma inv_hom_apply {A B : ProfiniteGrp.{u}} (e : A ≅ B) (x : A) : e.inv (e.hom x) = x := by\n  rw [← comp_apply]\n  simp\n\n"}
{"name":"ProfiniteAddGrp.neg_hom_apply","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"A B : ProfiniteAddGrp.{u}\ne : CategoryTheory.Iso A B\nx : ↑A.toProfinite.toTop\n⊢ Eq (e.inv.hom (e.hom.hom x)) x","decl":"@[to_additive (attr := simp)]\nlemma inv_hom_apply {A B : ProfiniteGrp.{u}} (e : A ≅ B) (x : A) : e.inv (e.hom x) = x := by\n  rw [← comp_apply]\n  simp\n\n"}
{"name":"ProfiniteAddGrp.hom_neg_apply","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"A B : ProfiniteAddGrp.{u}\ne : CategoryTheory.Iso A B\nx : ↑B.toProfinite.toTop\n⊢ Eq (e.hom.hom (e.inv.hom x)) x","decl":"@[to_additive (attr := simp)]\nlemma hom_inv_apply {A B : ProfiniteGrp.{u}} (e : A ≅ B) (x : B) : e.hom (e.inv x) = x := by\n  rw [← comp_apply]\n  simp\n\n"}
{"name":"ProfiniteGrp.hom_inv_apply","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"A B : ProfiniteGrp.{u}\ne : CategoryTheory.Iso A B\nx : ↑B.toProfinite.toTop\n⊢ Eq (e.hom.hom (e.inv.hom x)) x","decl":"@[to_additive (attr := simp)]\nlemma hom_inv_apply {A B : ProfiniteGrp.{u}} (e : A ≅ B) (x : B) : e.hom (e.inv x) = x := by\n  rw [← comp_apply]\n  simp\n\n"}
{"name":"ProfiniteGrp.coe_id","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"X : ProfiniteGrp.{u_1}\n⊢ Eq (CategoryTheory.CategoryStruct.id ((CategoryTheory.forget ProfiniteGrp.{u_1}).obj X)) id","decl":"@[to_additive (attr := simp)]\ntheorem coe_id (X : ProfiniteGrp) : (𝟙 ((forget ProfiniteGrp).obj X)) = id :=\n  rfl\n\n"}
{"name":"ProfiniteAddGrp.coe_id","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"X : ProfiniteAddGrp.{u_1}\n⊢ Eq (CategoryTheory.CategoryStruct.id ((CategoryTheory.forget ProfiniteAddGrp.{u_1}).obj X)) id","decl":"@[to_additive (attr := simp)]\ntheorem coe_id (X : ProfiniteGrp) : (𝟙 ((forget ProfiniteGrp).obj X)) = id :=\n  rfl\n\n"}
{"name":"ProfiniteAddGrp.coe_comp","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"X Y Z : ProfiniteAddGrp.{u_1}\nf : Quiver.Hom X Y\ng : Quiver.Hom Y Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp ((CategoryTheory.forget ProfiniteAddGrp.{u_1}).map f) ((CategoryTheory.forget ProfiniteAddGrp.{u_1}).map g)) (Function.comp ⇑g.hom ⇑f.hom)","decl":"@[to_additive (attr := simp)]\ntheorem coe_comp {X Y Z : ProfiniteGrp} (f : X ⟶ Y) (g : Y ⟶ Z) :\n    ((forget ProfiniteGrp).map f ≫ (forget ProfiniteGrp).map g) = g ∘ f :=\n  rfl\n\n"}
{"name":"ProfiniteGrp.coe_comp","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"X Y Z : ProfiniteGrp.{u_1}\nf : Quiver.Hom X Y\ng : Quiver.Hom Y Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp ((CategoryTheory.forget ProfiniteGrp.{u_1}).map f) ((CategoryTheory.forget ProfiniteGrp.{u_1}).map g)) (Function.comp ⇑g.hom ⇑f.hom)","decl":"@[to_additive (attr := simp)]\ntheorem coe_comp {X Y Z : ProfiniteGrp} (f : X ⟶ Y) (g : Y ⟶ Z) :\n    ((forget ProfiniteGrp).map f ≫ (forget ProfiniteGrp).map g) = g ∘ f :=\n  rfl\n\n"}
{"name":"ProfiniteGrp.instFaithfulProfiniteForget₂","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"⊢ (CategoryTheory.forget₂ ProfiniteGrp.{u_1} Profinite).Faithful","decl":"@[to_additive]\ninstance : (forget₂ ProfiniteGrp Profinite).Faithful := {\n  map_injective := fun {_ _} _ _ h =>\n    ConcreteCategory.hom_ext_iff.mpr (congrFun (congrArg ContinuousMap.toFun h)) }\n\n"}
{"name":"ProfiniteAddGrp.instFaithfulProfiniteForget₂","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"⊢ (CategoryTheory.forget₂ ProfiniteAddGrp.{u_1} Profinite).Faithful","decl":"@[to_additive]\ninstance : (forget₂ ProfiniteGrp Profinite).Faithful := {\n  map_injective := fun {_ _} _ _ h =>\n    ConcreteCategory.hom_ext_iff.mpr (congrFun (congrArg ContinuousMap.toFun h)) }\n\n"}
{"name":"ProfiniteGrp.instReflectsIsomorphismsProfiniteForget₂","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"⊢ (CategoryTheory.forget₂ ProfiniteGrp.{u_1} Profinite).ReflectsIsomorphisms","decl":"instance : (forget₂ ProfiniteGrp Profinite).ReflectsIsomorphisms where\n  reflects {X Y} f _ := by\n    let i := asIso ((forget₂ ProfiniteGrp Profinite).map f)\n    let e : X ≃ₜ* Y :=\n      { CompHausLike.homeoOfIso i with\n          map_mul' := map_mul f.hom }\n    exact (ContinuousMulEquiv.toProfiniteGrpIso e).isIso_hom\n\n"}
{"name":"ProfiniteGrp.instReflectsIsomorphismsForget","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"⊢ (CategoryTheory.forget ProfiniteGrp.{u}).ReflectsIsomorphisms","decl":"instance : (forget ProfiniteGrp.{u}).ReflectsIsomorphisms :=\n  CategoryTheory.reflectsIsomorphisms_comp (forget₂ ProfiniteGrp Profinite) (forget Profinite)\n\n"}
{"name":"ProfiniteGrp.instTopologicalGroupαTopologicalSpaceToTopTotallyDisconnectedSpacePtProfiniteLimitConeCompForget₂","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"J : Type v\ninst✝ : CategoryTheory.SmallCategory J\nF : CategoryTheory.Functor J ProfiniteGrp.{max v u}\n⊢ TopologicalGroup ↑(Profinite.limitCone (F.comp (CategoryTheory.forget₂ ProfiniteGrp.{max u v} Profinite))).pt.toTop","decl":"instance : TopologicalGroup (Profinite.limitCone (F ⋙ (forget₂ ProfiniteGrp Profinite))).pt :=\n  inferInstanceAs (TopologicalGroup (limitConePtAux F))\n\n"}
{"name":"ProfiniteGrp.instHasLimit","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"J : Type v\ninst✝ : CategoryTheory.SmallCategory J\nF : CategoryTheory.Functor J ProfiniteGrp.{max v u}\n⊢ CategoryTheory.Limits.HasLimit F","decl":"instance : Limits.HasLimit F where\n  exists_limit := Nonempty.intro\n    { cone := limitCone F\n      isLimit := limitConeIsLimit F }\n\n"}
{"name":"ProfiniteGrp.instPreservesLimitsProfiniteForget₂","module":"Mathlib.Topology.Algebra.Category.ProfiniteGrp.Basic","initialProofState":"⊢ CategoryTheory.Limits.PreservesLimits (CategoryTheory.forget₂ ProfiniteGrp.{u_1} Profinite)","decl":"instance : Limits.PreservesLimits (forget₂ ProfiniteGrp Profinite) where\n  preservesLimitsOfShape := {\n    preservesLimit := fun {F} ↦ CategoryTheory.Limits.preservesLimit_of_preserves_limit_cone\n      (limitConeIsLimit F) (Profinite.limitConeIsLimit (F ⋙ (forget₂ ProfiniteGrp Profinite))) }\n\n"}
