{"name":"MulOpposite.op_nnratCast","module":"Mathlib.Algebra.Field.Opposite","initialProofState":"α : Type u_1\ninst✝ : NNRatCast α\nq : NNRat\n⊢ Eq (MulOpposite.op ↑q) ↑q","decl":"@[to_additive (attr := simp, norm_cast)]\nlemma op_nnratCast [NNRatCast α] (q : ℚ≥0) : op (q : α) = q := rfl\n\n"}
{"name":"AddOpposite.op_nnratCast","module":"Mathlib.Algebra.Field.Opposite","initialProofState":"α : Type u_1\ninst✝ : NNRatCast α\nq : NNRat\n⊢ Eq (AddOpposite.op ↑q) ↑q","decl":"@[to_additive (attr := simp, norm_cast)]\nlemma op_nnratCast [NNRatCast α] (q : ℚ≥0) : op (q : α) = q := rfl\n\n"}
{"name":"AddOpposite.unop_nnratCast","module":"Mathlib.Algebra.Field.Opposite","initialProofState":"α : Type u_1\ninst✝ : NNRatCast α\nq : NNRat\n⊢ Eq (AddOpposite.unop ↑q) ↑q","decl":"@[to_additive (attr := simp, norm_cast)]\nlemma unop_nnratCast [NNRatCast α] (q : ℚ≥0) : unop (q : αᵐᵒᵖ) = q := rfl\n\n"}
{"name":"MulOpposite.unop_nnratCast","module":"Mathlib.Algebra.Field.Opposite","initialProofState":"α : Type u_1\ninst✝ : NNRatCast α\nq : NNRat\n⊢ Eq (MulOpposite.unop ↑q) ↑q","decl":"@[to_additive (attr := simp, norm_cast)]\nlemma unop_nnratCast [NNRatCast α] (q : ℚ≥0) : unop (q : αᵐᵒᵖ) = q := rfl\n\n"}
{"name":"AddOpposite.op_ratCast","module":"Mathlib.Algebra.Field.Opposite","initialProofState":"α : Type u_1\ninst✝ : RatCast α\nq : Rat\n⊢ Eq (AddOpposite.op ↑q) ↑q","decl":"@[to_additive (attr := simp, norm_cast)]\nlemma op_ratCast [RatCast α] (q : ℚ) : op (q : α) = q := rfl\n\n"}
{"name":"MulOpposite.op_ratCast","module":"Mathlib.Algebra.Field.Opposite","initialProofState":"α : Type u_1\ninst✝ : RatCast α\nq : Rat\n⊢ Eq (MulOpposite.op ↑q) ↑q","decl":"@[to_additive (attr := simp, norm_cast)]\nlemma op_ratCast [RatCast α] (q : ℚ) : op (q : α) = q := rfl\n\n"}
{"name":"MulOpposite.unop_ratCast","module":"Mathlib.Algebra.Field.Opposite","initialProofState":"α : Type u_1\ninst✝ : RatCast α\nq : Rat\n⊢ Eq (MulOpposite.unop ↑q) ↑q","decl":"@[to_additive (attr := simp, norm_cast)]\nlemma unop_ratCast [RatCast α] (q : ℚ) : unop (q : αᵐᵒᵖ) = q := rfl\n\n"}
{"name":"AddOpposite.unop_ratCast","module":"Mathlib.Algebra.Field.Opposite","initialProofState":"α : Type u_1\ninst✝ : RatCast α\nq : Rat\n⊢ Eq (AddOpposite.unop ↑q) ↑q","decl":"@[to_additive (attr := simp, norm_cast)]\nlemma unop_ratCast [RatCast α] (q : ℚ) : unop (q : αᵐᵒᵖ) = q := rfl\n\n"}
