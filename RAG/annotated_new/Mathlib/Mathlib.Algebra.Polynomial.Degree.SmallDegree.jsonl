{"name":"Polynomial.eq_X_add_C_of_degree_le_one","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nh : LE.le p.degree 1\n⊢ Eq p (HAdd.hAdd (HMul.hMul (Polynomial.C (p.coeff 1)) Polynomial.X) (Polynomial.C (p.coeff 0)))","decl":"theorem eq_X_add_C_of_degree_le_one (h : degree p ≤ 1) : p = C (p.coeff 1) * X + C (p.coeff 0) :=\n  ext fun n =>\n    Nat.casesOn n (by simp) fun n =>\n      Nat.casesOn n (by simp [coeff_C]) fun m => by\n        -- Porting note: `by decide` → `Iff.mpr ..`\n        have : degree p < m.succ.succ := lt_of_le_of_lt h\n          (Iff.mpr WithBot.coe_lt_coe <| Nat.succ_lt_succ <| Nat.zero_lt_succ m)\n        simp [coeff_eq_zero_of_degree_lt this, coeff_C, Nat.succ_ne_zero, coeff_X, Nat.succ_inj',\n          @eq_comm ℕ 0]\n\n"}
{"name":"Polynomial.eq_X_add_C_of_degree_eq_one","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nh : Eq p.degree 1\n⊢ Eq p (HAdd.hAdd (HMul.hMul (Polynomial.C p.leadingCoeff) Polynomial.X) (Polynomial.C (p.coeff 0)))","decl":"theorem eq_X_add_C_of_degree_eq_one (h : degree p = 1) :\n    p = C p.leadingCoeff * X + C (p.coeff 0) :=\n  (eq_X_add_C_of_degree_le_one h.le).trans\n    (by rw [← Nat.cast_one] at h; rw [leadingCoeff, natDegree_eq_of_degree_eq_some h])\n\n"}
{"name":"Polynomial.eq_X_add_C_of_natDegree_le_one","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nh : LE.le p.natDegree 1\n⊢ Eq p (HAdd.hAdd (HMul.hMul (Polynomial.C (p.coeff 1)) Polynomial.X) (Polynomial.C (p.coeff 0)))","decl":"theorem eq_X_add_C_of_natDegree_le_one (h : natDegree p ≤ 1) :\n    p = C (p.coeff 1) * X + C (p.coeff 0) :=\n  eq_X_add_C_of_degree_le_one <| degree_le_of_natDegree_le h\n\n"}
{"name":"Polynomial.Monic.eq_X_add_C","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nhm : p.Monic\nhnd : Eq p.natDegree 1\n⊢ Eq p (HAdd.hAdd Polynomial.X (Polynomial.C (p.coeff 0)))","decl":"theorem Monic.eq_X_add_C (hm : p.Monic) (hnd : p.natDegree = 1) : p = X + C (p.coeff 0) := by\n  rw [← one_mul X, ← C_1, ← hm.coeff_natDegree, hnd, ← eq_X_add_C_of_natDegree_le_one hnd.le]\n\n"}
{"name":"Polynomial.exists_eq_X_add_C_of_natDegree_le_one","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nh : LE.le p.natDegree 1\n⊢ Exists fun a => Exists fun b => Eq p (HAdd.hAdd (HMul.hMul (Polynomial.C a) Polynomial.X) (Polynomial.C b))","decl":"theorem exists_eq_X_add_C_of_natDegree_le_one (h : natDegree p ≤ 1) : ∃ a b, p = C a * X + C b :=\n  ⟨p.coeff 1, p.coeff 0, eq_X_add_C_of_natDegree_le_one h⟩\n\n"}
{"name":"Polynomial.zero_le_degree_iff","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\n⊢ Iff (LE.le 0 p.degree) (Ne p 0)","decl":"theorem zero_le_degree_iff : 0 ≤ degree p ↔ p ≠ 0 := by\n  rw [← not_lt, Nat.WithBot.lt_zero_iff, degree_eq_bot]\n\n"}
{"name":"Polynomial.ne_zero_of_coe_le_degree","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\nn : Nat\ninst✝ : Semiring R\np : Polynomial R\nhdeg : LE.le (↑n) p.degree\n⊢ Ne p 0","decl":"theorem ne_zero_of_coe_le_degree (hdeg : ↑n ≤ p.degree) : p ≠ 0 :=\n  zero_le_degree_iff.mp <| (WithBot.coe_le_coe.mpr n.zero_le).trans hdeg\n\n"}
{"name":"Polynomial.le_natDegree_of_coe_le_degree","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\nn : Nat\ninst✝ : Semiring R\np : Polynomial R\nhdeg : LE.le (↑n) p.degree\n⊢ LE.le n p.natDegree","decl":"theorem le_natDegree_of_coe_le_degree (hdeg : ↑n ≤ p.degree) : n ≤ p.natDegree :=\n  -- Porting note: `.. ▸ ..` → `rwa [..] at ..`\n  WithBot.coe_le_coe.mp <| by\n    rwa [degree_eq_natDegree <| ne_zero_of_coe_le_degree hdeg] at hdeg\n\n"}
{"name":"Polynomial.degree_linear_le","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\na b : R\ninst✝ : Semiring R\n⊢ LE.le (HAdd.hAdd (HMul.hMul (Polynomial.C a) Polynomial.X) (Polynomial.C b)).degree 1","decl":"theorem degree_linear_le : degree (C a * X + C b) ≤ 1 :=\n  degree_add_le_of_degree_le (degree_C_mul_X_le _) <| le_trans degree_C_le Nat.WithBot.coe_nonneg\n\n"}
{"name":"Polynomial.degree_linear_lt","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\na b : R\ninst✝ : Semiring R\n⊢ LT.lt (HAdd.hAdd (HMul.hMul (Polynomial.C a) Polynomial.X) (Polynomial.C b)).degree 2","decl":"theorem degree_linear_lt : degree (C a * X + C b) < 2 :=\n  degree_linear_le.trans_lt <| WithBot.coe_lt_coe.mpr one_lt_two\n\n"}
{"name":"Polynomial.degree_linear","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\na b : R\ninst✝ : Semiring R\nha : Ne a 0\n⊢ Eq (HAdd.hAdd (HMul.hMul (Polynomial.C a) Polynomial.X) (Polynomial.C b)).degree 1","decl":"@[simp]\ntheorem degree_linear (ha : a ≠ 0) : degree (C a * X + C b) = 1 := by\n  rw [degree_add_eq_left_of_degree_lt <| degree_C_lt_degree_C_mul_X ha, degree_C_mul_X ha]\n\n"}
{"name":"Polynomial.natDegree_linear_le","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\na b : R\ninst✝ : Semiring R\n⊢ LE.le (HAdd.hAdd (HMul.hMul (Polynomial.C a) Polynomial.X) (Polynomial.C b)).natDegree 1","decl":"theorem natDegree_linear_le : natDegree (C a * X + C b) ≤ 1 :=\n  natDegree_le_of_degree_le degree_linear_le\n\n"}
{"name":"Polynomial.natDegree_linear","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\na b : R\ninst✝ : Semiring R\nha : Ne a 0\n⊢ Eq (HAdd.hAdd (HMul.hMul (Polynomial.C a) Polynomial.X) (Polynomial.C b)).natDegree 1","decl":"theorem natDegree_linear (ha : a ≠ 0) : natDegree (C a * X + C b) = 1 := by\n  rw [natDegree_add_C, natDegree_C_mul_X a ha]\n\n"}
{"name":"Polynomial.leadingCoeff_linear","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\na b : R\ninst✝ : Semiring R\nha : Ne a 0\n⊢ Eq (HAdd.hAdd (HMul.hMul (Polynomial.C a) Polynomial.X) (Polynomial.C b)).leadingCoeff a","decl":"@[simp]\ntheorem leadingCoeff_linear (ha : a ≠ 0) : leadingCoeff (C a * X + C b) = a := by\n  rw [add_comm, leadingCoeff_add_of_degree_lt (degree_C_lt_degree_C_mul_X ha),\n    leadingCoeff_C_mul_X]\n\n"}
{"name":"Polynomial.degree_quadratic_le","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\na b c : R\ninst✝ : Semiring R\n⊢ LE.le (HAdd.hAdd (HAdd.hAdd (HMul.hMul (Polynomial.C a) (HPow.hPow Polynomial.X 2)) (HMul.hMul (Polynomial.C b) Polynomial.X)) (Polynomial.C c)).degree 2","decl":"theorem degree_quadratic_le : degree (C a * X ^ 2 + C b * X + C c) ≤ 2 := by\n  simpa only [add_assoc] using\n    degree_add_le_of_degree_le (degree_C_mul_X_pow_le 2 a)\n      (le_trans degree_linear_le <| WithBot.coe_le_coe.mpr one_le_two)\n\n"}
{"name":"Polynomial.degree_quadratic_lt","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\na b c : R\ninst✝ : Semiring R\n⊢ LT.lt (HAdd.hAdd (HAdd.hAdd (HMul.hMul (Polynomial.C a) (HPow.hPow Polynomial.X 2)) (HMul.hMul (Polynomial.C b) Polynomial.X)) (Polynomial.C c)).degree 3","decl":"theorem degree_quadratic_lt : degree (C a * X ^ 2 + C b * X + C c) < 3 :=\n  degree_quadratic_le.trans_lt <| WithBot.coe_lt_coe.mpr <| lt_add_one 2\n\n"}
{"name":"Polynomial.degree_linear_lt_degree_C_mul_X_sq","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\na b c : R\ninst✝ : Semiring R\nha : Ne a 0\n⊢ LT.lt (HAdd.hAdd (HMul.hMul (Polynomial.C b) Polynomial.X) (Polynomial.C c)).degree (HMul.hMul (Polynomial.C a) (HPow.hPow Polynomial.X 2)).degree","decl":"theorem degree_linear_lt_degree_C_mul_X_sq (ha : a ≠ 0) :\n    degree (C b * X + C c) < degree (C a * X ^ 2) := by\n  simpa only [degree_C_mul_X_pow 2 ha] using degree_linear_lt\n\n"}
{"name":"Polynomial.degree_quadratic","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\na b c : R\ninst✝ : Semiring R\nha : Ne a 0\n⊢ Eq (HAdd.hAdd (HAdd.hAdd (HMul.hMul (Polynomial.C a) (HPow.hPow Polynomial.X 2)) (HMul.hMul (Polynomial.C b) Polynomial.X)) (Polynomial.C c)).degree 2","decl":"@[simp]\ntheorem degree_quadratic (ha : a ≠ 0) : degree (C a * X ^ 2 + C b * X + C c) = 2 := by\n  rw [add_assoc, degree_add_eq_left_of_degree_lt <| degree_linear_lt_degree_C_mul_X_sq ha,\n    degree_C_mul_X_pow 2 ha]\n  rfl\n\n"}
{"name":"Polynomial.natDegree_quadratic_le","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\na b c : R\ninst✝ : Semiring R\n⊢ LE.le (HAdd.hAdd (HAdd.hAdd (HMul.hMul (Polynomial.C a) (HPow.hPow Polynomial.X 2)) (HMul.hMul (Polynomial.C b) Polynomial.X)) (Polynomial.C c)).natDegree 2","decl":"theorem natDegree_quadratic_le : natDegree (C a * X ^ 2 + C b * X + C c) ≤ 2 :=\n  natDegree_le_of_degree_le degree_quadratic_le\n\n"}
{"name":"Polynomial.natDegree_quadratic","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\na b c : R\ninst✝ : Semiring R\nha : Ne a 0\n⊢ Eq (HAdd.hAdd (HAdd.hAdd (HMul.hMul (Polynomial.C a) (HPow.hPow Polynomial.X 2)) (HMul.hMul (Polynomial.C b) Polynomial.X)) (Polynomial.C c)).natDegree 2","decl":"theorem natDegree_quadratic (ha : a ≠ 0) : natDegree (C a * X ^ 2 + C b * X + C c) = 2 :=\n  natDegree_eq_of_degree_eq_some <| degree_quadratic ha\n\n"}
{"name":"Polynomial.leadingCoeff_quadratic","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\na b c : R\ninst✝ : Semiring R\nha : Ne a 0\n⊢ Eq (HAdd.hAdd (HAdd.hAdd (HMul.hMul (Polynomial.C a) (HPow.hPow Polynomial.X 2)) (HMul.hMul (Polynomial.C b) Polynomial.X)) (Polynomial.C c)).leadingCoeff a","decl":"@[simp]\ntheorem leadingCoeff_quadratic (ha : a ≠ 0) : leadingCoeff (C a * X ^ 2 + C b * X + C c) = a := by\n  rw [add_assoc, add_comm, leadingCoeff_add_of_degree_lt <| degree_linear_lt_degree_C_mul_X_sq ha,\n    leadingCoeff_C_mul_X_pow]\n\n"}
{"name":"Polynomial.degree_cubic_le","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\na b c d : R\ninst✝ : Semiring R\n⊢ LE.le (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HMul.hMul (Polynomial.C a) (HPow.hPow Polynomial.X 3)) (HMul.hMul (Polynomial.C b) (HPow.hPow Polynomial.X 2))) (HMul.hMul (Polynomial.C c) Polynomial.X)) (Polynomial.C d)).degree 3","decl":"theorem degree_cubic_le : degree (C a * X ^ 3 + C b * X ^ 2 + C c * X + C d) ≤ 3 := by\n  simpa only [add_assoc] using\n    degree_add_le_of_degree_le (degree_C_mul_X_pow_le 3 a)\n      (le_trans degree_quadratic_le <| WithBot.coe_le_coe.mpr <| Nat.le_succ 2)\n\n"}
{"name":"Polynomial.degree_cubic_lt","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\na b c d : R\ninst✝ : Semiring R\n⊢ LT.lt (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HMul.hMul (Polynomial.C a) (HPow.hPow Polynomial.X 3)) (HMul.hMul (Polynomial.C b) (HPow.hPow Polynomial.X 2))) (HMul.hMul (Polynomial.C c) Polynomial.X)) (Polynomial.C d)).degree 4","decl":"theorem degree_cubic_lt : degree (C a * X ^ 3 + C b * X ^ 2 + C c * X + C d) < 4 :=\n  degree_cubic_le.trans_lt <| WithBot.coe_lt_coe.mpr <| lt_add_one 3\n\n"}
{"name":"Polynomial.degree_quadratic_lt_degree_C_mul_X_cb","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\na b c d : R\ninst✝ : Semiring R\nha : Ne a 0\n⊢ LT.lt (HAdd.hAdd (HAdd.hAdd (HMul.hMul (Polynomial.C b) (HPow.hPow Polynomial.X 2)) (HMul.hMul (Polynomial.C c) Polynomial.X)) (Polynomial.C d)).degree (HMul.hMul (Polynomial.C a) (HPow.hPow Polynomial.X 3)).degree","decl":"theorem degree_quadratic_lt_degree_C_mul_X_cb (ha : a ≠ 0) :\n    degree (C b * X ^ 2 + C c * X + C d) < degree (C a * X ^ 3) := by\n  simpa only [degree_C_mul_X_pow 3 ha] using degree_quadratic_lt\n\n"}
{"name":"Polynomial.degree_cubic","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\na b c d : R\ninst✝ : Semiring R\nha : Ne a 0\n⊢ Eq (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HMul.hMul (Polynomial.C a) (HPow.hPow Polynomial.X 3)) (HMul.hMul (Polynomial.C b) (HPow.hPow Polynomial.X 2))) (HMul.hMul (Polynomial.C c) Polynomial.X)) (Polynomial.C d)).degree 3","decl":"@[simp]\ntheorem degree_cubic (ha : a ≠ 0) : degree (C a * X ^ 3 + C b * X ^ 2 + C c * X + C d) = 3 := by\n  rw [add_assoc, add_assoc, ← add_assoc (C b * X ^ 2),\n    degree_add_eq_left_of_degree_lt <| degree_quadratic_lt_degree_C_mul_X_cb ha,\n    degree_C_mul_X_pow 3 ha]\n  rfl\n\n"}
{"name":"Polynomial.natDegree_cubic_le","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\na b c d : R\ninst✝ : Semiring R\n⊢ LE.le (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HMul.hMul (Polynomial.C a) (HPow.hPow Polynomial.X 3)) (HMul.hMul (Polynomial.C b) (HPow.hPow Polynomial.X 2))) (HMul.hMul (Polynomial.C c) Polynomial.X)) (Polynomial.C d)).natDegree 3","decl":"theorem natDegree_cubic_le : natDegree (C a * X ^ 3 + C b * X ^ 2 + C c * X + C d) ≤ 3 :=\n  natDegree_le_of_degree_le degree_cubic_le\n\n"}
{"name":"Polynomial.natDegree_cubic","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\na b c d : R\ninst✝ : Semiring R\nha : Ne a 0\n⊢ Eq (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HMul.hMul (Polynomial.C a) (HPow.hPow Polynomial.X 3)) (HMul.hMul (Polynomial.C b) (HPow.hPow Polynomial.X 2))) (HMul.hMul (Polynomial.C c) Polynomial.X)) (Polynomial.C d)).natDegree 3","decl":"theorem natDegree_cubic (ha : a ≠ 0) : natDegree (C a * X ^ 3 + C b * X ^ 2 + C c * X + C d) = 3 :=\n  natDegree_eq_of_degree_eq_some <| degree_cubic ha\n\n"}
{"name":"Polynomial.leadingCoeff_cubic","module":"Mathlib.Algebra.Polynomial.Degree.SmallDegree","initialProofState":"R : Type u\na b c d : R\ninst✝ : Semiring R\nha : Ne a 0\n⊢ Eq (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HMul.hMul (Polynomial.C a) (HPow.hPow Polynomial.X 3)) (HMul.hMul (Polynomial.C b) (HPow.hPow Polynomial.X 2))) (HMul.hMul (Polynomial.C c) Polynomial.X)) (Polynomial.C d)).leadingCoeff a","decl":"@[simp]\ntheorem leadingCoeff_cubic (ha : a ≠ 0) :\n    leadingCoeff (C a * X ^ 3 + C b * X ^ 2 + C c * X + C d) = a := by\n  rw [add_assoc, add_assoc, ← add_assoc (C b * X ^ 2), add_comm,\n    leadingCoeff_add_of_degree_lt <| degree_quadratic_lt_degree_C_mul_X_cb ha,\n    leadingCoeff_C_mul_X_pow]\n\n"}
