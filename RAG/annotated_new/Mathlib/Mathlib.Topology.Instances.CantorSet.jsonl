{"name":"preCantorSet_zero","module":"Mathlib.Topology.Instances.CantorSet","initialProofState":"⊢ Eq (preCantorSet 0) (Set.Icc 0 1)","decl":"@[simp] lemma preCantorSet_zero : preCantorSet 0 = Set.Icc 0 1 := rfl\n"}
{"name":"preCantorSet_succ","module":"Mathlib.Topology.Instances.CantorSet","initialProofState":"n : Nat\n⊢ Eq (preCantorSet (HAdd.hAdd n 1)) (Union.union (Set.image (fun x => HDiv.hDiv x 3) (preCantorSet n)) (Set.image (fun x => HDiv.hDiv (HAdd.hAdd 2 x) 3) (preCantorSet n)))","decl":"@[simp] lemma preCantorSet_succ (n : ℕ) :\n    preCantorSet (n + 1) = (· / 3) '' preCantorSet n ∪ (fun x ↦ (2 + x) / 3) '' preCantorSet n :=\n  rfl\n\n"}
{"name":"quarters_mem_preCantorSet","module":"Mathlib.Topology.Instances.CantorSet","initialProofState":"n : Nat\n⊢ And (Membership.mem (preCantorSet n) (1 / 4)) (Membership.mem (preCantorSet n) (3 / 4))","decl":"lemma quarters_mem_preCantorSet (n : ℕ) : 1/4 ∈ preCantorSet n ∧ 3/4 ∈ preCantorSet n := by\n  induction n with\n  | zero =>\n    simp only [preCantorSet_zero, inv_nonneg]\n    refine ⟨⟨ ?_, ?_⟩, ?_, ?_⟩ <;> norm_num\n  | succ n ih =>\n    apply And.intro\n    · -- goal: 1 / 4 ∈ preCantorSet (n + 1)\n      -- follows by the inductive hyphothesis, since 3 / 4 ∈ preCantorSet n\n      exact Or.inl ⟨3 / 4, ih.2, by norm_num⟩\n    · -- goal: 3 / 4 ∈ preCantorSet (n + 1)\n      -- follows by the inductive hyphothesis, since 1 / 4 ∈ preCantorSet n\n      exact Or.inr ⟨1 / 4, ih.1, by norm_num⟩\n\n"}
{"name":"quarter_mem_preCantorSet","module":"Mathlib.Topology.Instances.CantorSet","initialProofState":"n : Nat\n⊢ Membership.mem (preCantorSet n) (1 / 4)","decl":"lemma quarter_mem_preCantorSet (n : ℕ) : 1/4 ∈ preCantorSet n := (quarters_mem_preCantorSet n).1\n\n"}
{"name":"quarter_mem_cantorSet","module":"Mathlib.Topology.Instances.CantorSet","initialProofState":"⊢ Membership.mem cantorSet (1 / 4)","decl":"theorem quarter_mem_cantorSet : 1/4 ∈ cantorSet :=\n  Set.mem_iInter.mpr quarter_mem_preCantorSet\n\n"}
{"name":"zero_mem_preCantorSet","module":"Mathlib.Topology.Instances.CantorSet","initialProofState":"n : Nat\n⊢ Membership.mem (preCantorSet n) 0","decl":"lemma zero_mem_preCantorSet (n : ℕ) : 0 ∈ preCantorSet n := by\n  induction n with\n  | zero =>\n    simp [preCantorSet]\n  | succ n ih =>\n    exact Or.inl ⟨0, ih, by simp only [zero_div]⟩\n\n"}
{"name":"zero_mem_cantorSet","module":"Mathlib.Topology.Instances.CantorSet","initialProofState":"⊢ Membership.mem cantorSet 0","decl":"theorem zero_mem_cantorSet : 0 ∈ cantorSet := by simp [cantorSet, zero_mem_preCantorSet]\n\n"}
{"name":"cantorSet_subset_unitInterval","module":"Mathlib.Topology.Instances.CantorSet","initialProofState":"⊢ HasSubset.Subset cantorSet (Set.Icc 0 1)","decl":"/-- The ternary Cantor set is a subset of [0,1]. -/\nlemma cantorSet_subset_unitInterval : cantorSet ⊆ Set.Icc 0 1 :=\n  Set.iInter_subset _ 0\n\n"}
{"name":"isClosed_preCantorSet","module":"Mathlib.Topology.Instances.CantorSet","initialProofState":"n : Nat\n⊢ IsClosed (preCantorSet n)","decl":"/-- The preCantor sets are closed. -/\nlemma isClosed_preCantorSet (n : ℕ) : IsClosed (preCantorSet n) := by\n  let f := Homeomorph.mulLeft₀ (1 / 3 : ℝ) (by norm_num)\n  let g := (Homeomorph.addLeft (2 : ℝ)).trans f\n  induction n with\n  | zero => exact isClosed_Icc\n  | succ n ih =>\n    refine IsClosed.union ?_ ?_\n    · simpa [f, div_eq_inv_mul] using f.isClosedEmbedding.isClosed_iff_image_isClosed.mp ih\n    · simpa [g, f, div_eq_inv_mul] using g.isClosedEmbedding.isClosed_iff_image_isClosed.mp ih\n\n"}
{"name":"isClosed_cantorSet","module":"Mathlib.Topology.Instances.CantorSet","initialProofState":"⊢ IsClosed cantorSet","decl":"/-- The ternary Cantor set is closed. -/\nlemma isClosed_cantorSet : IsClosed cantorSet :=\n  isClosed_iInter isClosed_preCantorSet\n\n"}
{"name":"isCompact_cantorSet","module":"Mathlib.Topology.Instances.CantorSet","initialProofState":"⊢ IsCompact cantorSet","decl":"/-- The ternary Cantor set is compact. -/\nlemma isCompact_cantorSet : IsCompact cantorSet :=\n  isCompact_Icc.of_isClosed_subset isClosed_cantorSet cantorSet_subset_unitInterval\n"}
