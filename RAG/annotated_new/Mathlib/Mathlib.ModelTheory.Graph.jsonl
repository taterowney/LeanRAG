{"name":"FirstOrder.Language.graphRel.adj.sizeOf_spec","module":"Mathlib.ModelTheory.Graph","initialProofState":"⊢ Eq (SizeOf.sizeOf FirstOrder.Language.graphRel.adj) 1","decl":"/-- The type of relations for the language of graphs, consisting of a single binary relation `adj`.\n-/\ninductive graphRel : ℕ → Type\n  | adj : graphRel 2\n  deriving DecidableEq\n\n"}
{"name":"FirstOrder.Language.graph.instSubsingleton","module":"Mathlib.ModelTheory.Graph","initialProofState":"n : Nat\n⊢ Subsingleton (FirstOrder.Language.graph.Relations n)","decl":"instance instSubsingleton : Subsingleton (Language.graph.Relations n) :=\n  ⟨by rintro ⟨⟩ ⟨⟩; rfl⟩\n\n"}
{"name":"FirstOrder.Language.Theory.simpleGraph_model_iff","module":"Mathlib.ModelTheory.Graph","initialProofState":"V : Type u\ninst✝ : FirstOrder.Language.graph.Structure V\n⊢ Iff (FirstOrder.Language.Theory.Model V FirstOrder.Language.Theory.simpleGraph) (And (Irreflexive fun x y => FirstOrder.Language.Structure.RelMap FirstOrder.Language.adj (Matrix.vecCons x (Matrix.vecCons y Matrix.vecEmpty))) (Symmetric fun x y => FirstOrder.Language.Structure.RelMap FirstOrder.Language.adj (Matrix.vecCons x (Matrix.vecCons y Matrix.vecEmpty))))","decl":"@[simp]\ntheorem Theory.simpleGraph_model_iff [Language.graph.Structure V] :\n    V ⊨ Theory.simpleGraph ↔\n      (Irreflexive fun x y : V => RelMap adj ![x, y]) ∧\n        Symmetric fun x y : V => RelMap adj ![x, y] := by\n  simp [Theory.simpleGraph]\n\n"}
{"name":"FirstOrder.Language.simpleGraph_model","module":"Mathlib.ModelTheory.Graph","initialProofState":"V : Type u\nG : SimpleGraph V\n⊢ FirstOrder.Language.Theory.Model V FirstOrder.Language.Theory.simpleGraph","decl":"instance simpleGraph_model (G : SimpleGraph V) :\n    @Theory.Model _ V G.structure Theory.simpleGraph := by\n  letI := G.structure\n  rw [Theory.simpleGraph_model_iff]\n  exact ⟨G.loopless, G.symm⟩\n\n"}
{"name":"FirstOrder.Language.simpleGraphOfStructure_adj","module":"Mathlib.ModelTheory.Graph","initialProofState":"V : Type u\ninst✝¹ : FirstOrder.Language.graph.Structure V\ninst✝ : FirstOrder.Language.Theory.Model V FirstOrder.Language.Theory.simpleGraph\nx y : V\n⊢ Eq ((FirstOrder.Language.simpleGraphOfStructure V).Adj x y) (FirstOrder.Language.Structure.RelMap FirstOrder.Language.adj (Matrix.vecCons x (Matrix.vecCons y Matrix.vecEmpty)))","decl":"/-- Any model of the theory of simple graphs represents a simple graph. -/\n@[simps]\ndef simpleGraphOfStructure [Language.graph.Structure V] [V ⊨ Theory.simpleGraph] :\n    SimpleGraph V where\n  Adj x y := RelMap adj ![x, y]\n  symm :=\n    Relations.realize_symmetric.1\n      (Theory.realize_sentence_of_mem Theory.simpleGraph\n        (Set.mem_insert_of_mem _ (Set.mem_singleton _)))\n  loopless :=\n    Relations.realize_irreflexive.1\n      (Theory.realize_sentence_of_mem Theory.simpleGraph (Set.mem_insert _ _))\n\n"}
{"name":"SimpleGraph.simpleGraphOfStructure","module":"Mathlib.ModelTheory.Graph","initialProofState":"V : Type u\nG : SimpleGraph V\n⊢ Eq (FirstOrder.Language.simpleGraphOfStructure V) G","decl":"@[simp]\ntheorem _root_.SimpleGraph.simpleGraphOfStructure (G : SimpleGraph V) :\n    @simpleGraphOfStructure V G.structure _ = G := by\n  ext\n  rfl\n\n"}
{"name":"FirstOrder.Language.structure_simpleGraphOfStructure","module":"Mathlib.ModelTheory.Graph","initialProofState":"V : Type u\nS : FirstOrder.Language.graph.Structure V\ninst✝ : FirstOrder.Language.Theory.Model V FirstOrder.Language.Theory.simpleGraph\n⊢ Eq (FirstOrder.Language.simpleGraphOfStructure V).structure S","decl":"@[simp]\ntheorem structure_simpleGraphOfStructure [S : Language.graph.Structure V] [V ⊨ Theory.simpleGraph] :\n    (simpleGraphOfStructure V).structure = S := by\n  ext\n  case funMap n f xs =>\n    exact isEmptyElim f\n  case RelMap n r xs =>\n    match n, r with\n    | 2, .adj =>\n      rw [iff_eq_eq]\n      change RelMap adj ![xs 0, xs 1] = _\n      refine congr rfl (funext ?_)\n      simp [Fin.forall_fin_two]\n\n"}
{"name":"FirstOrder.Language.Theory.simpleGraph_isSatisfiable","module":"Mathlib.ModelTheory.Graph","initialProofState":"⊢ FirstOrder.Language.Theory.simpleGraph.IsSatisfiable","decl":"theorem Theory.simpleGraph_isSatisfiable : Theory.IsSatisfiable Theory.simpleGraph :=\n  ⟨@Theory.ModelType.of _ _ Unit (SimpleGraph.structure ⊥) _ _⟩\n\n"}
