{"name":"IntermediateField.algebra_adjoin_le_adjoin","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : Set E\n⊢ LE.le (Algebra.adjoin F S) (IntermediateField.adjoin F S).toSubalgebra","decl":"theorem algebra_adjoin_le_adjoin : Algebra.adjoin F S ≤ (adjoin F S).toSubalgebra :=\n  Algebra.adjoin_le (subset_adjoin _ _)\n\n"}
{"name":"IntermediateField.adjoin_eq_algebra_adjoin","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : Set E\ninv_mem : ∀ (x : E), Membership.mem (Algebra.adjoin F S) x → Membership.mem (Algebra.adjoin F S) (Inv.inv x)\n⊢ Eq (IntermediateField.adjoin F S).toSubalgebra (Algebra.adjoin F S)","decl":"theorem adjoin_eq_algebra_adjoin (inv_mem : ∀ x ∈ Algebra.adjoin F S, x⁻¹ ∈ Algebra.adjoin F S) :\n    (adjoin F S).toSubalgebra = Algebra.adjoin F S :=\n  le_antisymm\n    (show adjoin F S ≤\n        { Algebra.adjoin F S with\n          inv_mem' := inv_mem }\n      from adjoin_le_iff.mpr Algebra.subset_adjoin)\n    (algebra_adjoin_le_adjoin _ _)\n\n"}
{"name":"IntermediateField.eq_adjoin_of_eq_algebra_adjoin","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : Set E\nK : IntermediateField F E\nh : Eq K.toSubalgebra (Algebra.adjoin F S)\n⊢ Eq K (IntermediateField.adjoin F S)","decl":"theorem eq_adjoin_of_eq_algebra_adjoin (K : IntermediateField F E)\n    (h : K.toSubalgebra = Algebra.adjoin F S) : K = adjoin F S := by\n  apply toSubalgebra_injective\n  rw [h]\n  refine (adjoin_eq_algebra_adjoin F _ fun x ↦ ?_).symm\n  rw [← h]\n  exact K.inv_mem\n\n"}
{"name":"IntermediateField.adjoin_eq_top_of_algebra","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : Set E\nhS : Eq (Algebra.adjoin F S) Top.top\n⊢ Eq (IntermediateField.adjoin F S) Top.top","decl":"theorem adjoin_eq_top_of_algebra (hS : Algebra.adjoin F S = ⊤) : adjoin F S = ⊤ :=\n  top_le_iff.mp (hS.symm.trans_le <| algebra_adjoin_le_adjoin F S)\n\n"}
{"name":"IntermediateField.AdjoinSimple.isIntegral_gen","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nα : E\n⊢ Iff (IsIntegral F (IntermediateField.AdjoinSimple.gen F α)) (IsIntegral F α)","decl":"@[simp]\ntheorem AdjoinSimple.isIntegral_gen : IsIntegral F (AdjoinSimple.gen F α) ↔ IsIntegral F α := by\n  conv_rhs => rw [← AdjoinSimple.algebraMap_gen F α]\n  rw [isIntegral_algebraMap_iff (algebraMap F⟮α⟯ E).injective]\n\n"}
{"name":"IntermediateField.adjoin_algebraic_toSubalgebra","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : Set E\nhS : ∀ (x : E), Membership.mem S x → IsAlgebraic F x\n⊢ Eq (IntermediateField.adjoin F S).toSubalgebra (Algebra.adjoin F S)","decl":"theorem adjoin_algebraic_toSubalgebra {S : Set E} (hS : ∀ x ∈ S, IsAlgebraic F x) :\n    (IntermediateField.adjoin F S).toSubalgebra = Algebra.adjoin F S :=\n  adjoin_eq_algebra_adjoin _ _ fun _ ↦\n    (Algebra.IsIntegral.adjoin fun x hx ↦ (hS x hx).isIntegral).inv_mem\n\n"}
{"name":"IntermediateField.adjoin_simple_toSubalgebra_of_integral","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nα : E\nhα : IsIntegral F α\n⊢ Eq (IntermediateField.adjoin F (Singleton.singleton α)).toSubalgebra (Algebra.adjoin F (Singleton.singleton α))","decl":"theorem adjoin_simple_toSubalgebra_of_integral (hα : IsIntegral F α) :\n    F⟮α⟯.toSubalgebra = Algebra.adjoin F {α} := by\n  apply adjoin_algebraic_toSubalgebra\n  rintro x (rfl : x = α)\n  rwa [isAlgebraic_iff_isIntegral]\n\n"}
{"name":"IntermediateField.le_sup_toSubalgebra","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"K : Type u_3\nL : Type u_4\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\nE1 E2 : IntermediateField K L\n⊢ LE.le (Max.max E1.toSubalgebra E2.toSubalgebra) (Max.max E1 E2).toSubalgebra","decl":"theorem le_sup_toSubalgebra : E1.toSubalgebra ⊔ E2.toSubalgebra ≤ (E1 ⊔ E2).toSubalgebra :=\n  sup_le (show E1 ≤ E1 ⊔ E2 from le_sup_left) (show E2 ≤ E1 ⊔ E2 from le_sup_right)\n\n"}
{"name":"IntermediateField.sup_toSubalgebra_of_isAlgebraic_right","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"K : Type u_3\nL : Type u_4\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\nE1 E2 : IntermediateField K L\ninst✝ : Algebra.IsAlgebraic K (Subtype fun x => Membership.mem E2 x)\n⊢ Eq (Max.max E1 E2).toSubalgebra (Max.max E1.toSubalgebra E2.toSubalgebra)","decl":"theorem sup_toSubalgebra_of_isAlgebraic_right [Algebra.IsAlgebraic K E2] :\n    (E1 ⊔ E2).toSubalgebra = E1.toSubalgebra ⊔ E2.toSubalgebra := by\n  have : (adjoin E1 (E2 : Set L)).toSubalgebra = _ := adjoin_algebraic_toSubalgebra fun x h ↦\n    IsAlgebraic.tower_top E1 (isAlgebraic_iff.1\n      (Algebra.IsAlgebraic.isAlgebraic (⟨x, h⟩ : E2)))\n  apply_fun Subalgebra.restrictScalars K at this\n  erw [← restrictScalars_toSubalgebra, restrictScalars_adjoin,\n    Algebra.restrictScalars_adjoin] at this\n  exact this\n\n"}
{"name":"IntermediateField.sup_toSubalgebra_of_isAlgebraic_left","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"K : Type u_3\nL : Type u_4\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\nE1 E2 : IntermediateField K L\ninst✝ : Algebra.IsAlgebraic K (Subtype fun x => Membership.mem E1 x)\n⊢ Eq (Max.max E1 E2).toSubalgebra (Max.max E1.toSubalgebra E2.toSubalgebra)","decl":"theorem sup_toSubalgebra_of_isAlgebraic_left [Algebra.IsAlgebraic K E1] :\n    (E1 ⊔ E2).toSubalgebra = E1.toSubalgebra ⊔ E2.toSubalgebra := by\n  have := sup_toSubalgebra_of_isAlgebraic_right E2 E1\n  rwa [sup_comm (a := E1), sup_comm (a := E1.toSubalgebra)]\n\n"}
{"name":"IntermediateField.sup_toSubalgebra_of_isAlgebraic","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"K : Type u_3\nL : Type u_4\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\nE1 E2 : IntermediateField K L\nhalg : Or (Algebra.IsAlgebraic K (Subtype fun x => Membership.mem E1 x)) (Algebra.IsAlgebraic K (Subtype fun x => Membership.mem E2 x))\n⊢ Eq (Max.max E1 E2).toSubalgebra (Max.max E1.toSubalgebra E2.toSubalgebra)","decl":"/-- The compositum of two intermediate fields is equal to the compositum of them\nas subalgebras, if one of them is algebraic over the base field. -/\ntheorem sup_toSubalgebra_of_isAlgebraic\n    (halg : Algebra.IsAlgebraic K E1 ∨ Algebra.IsAlgebraic K E2) :\n    (E1 ⊔ E2).toSubalgebra = E1.toSubalgebra ⊔ E2.toSubalgebra :=\n  halg.elim (fun _ ↦ sup_toSubalgebra_of_isAlgebraic_left E1 E2)\n    (fun _ ↦ sup_toSubalgebra_of_isAlgebraic_right E1 E2)\n\n"}
{"name":"IntermediateField.sup_toSubalgebra_of_left","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"K : Type u_3\nL : Type u_4\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\nE1 E2 : IntermediateField K L\ninst✝ : FiniteDimensional K (Subtype fun x => Membership.mem E1 x)\n⊢ Eq (Max.max E1 E2).toSubalgebra (Max.max E1.toSubalgebra E2.toSubalgebra)","decl":"theorem sup_toSubalgebra_of_left [FiniteDimensional K E1] :\n    (E1 ⊔ E2).toSubalgebra = E1.toSubalgebra ⊔ E2.toSubalgebra :=\n  sup_toSubalgebra_of_isAlgebraic_left E1 E2\n\n"}
{"name":"IntermediateField.sup_toSubalgebra_of_right","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"K : Type u_3\nL : Type u_4\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\nE1 E2 : IntermediateField K L\ninst✝ : FiniteDimensional K (Subtype fun x => Membership.mem E2 x)\n⊢ Eq (Max.max E1 E2).toSubalgebra (Max.max E1.toSubalgebra E2.toSubalgebra)","decl":"theorem sup_toSubalgebra_of_right [FiniteDimensional K E2] :\n    (E1 ⊔ E2).toSubalgebra = E1.toSubalgebra ⊔ E2.toSubalgebra :=\n  sup_toSubalgebra_of_isAlgebraic_right E1 E2\n\n"}
{"name":"IntermediateField.adjoin_toSubalgebra_of_isAlgebraic","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"F : Type u_1\ninst✝⁶ : Field F\nE : Type u_2\ninst✝⁵ : Field E\ninst✝⁴ : Algebra F E\nK : Type u_3\ninst✝³ : Field K\ninst✝² : Algebra F K\ninst✝¹ : Algebra E K\ninst✝ : IsScalarTower F E K\nL : IntermediateField F K\nhalg : Or (Algebra.IsAlgebraic F E) (Algebra.IsAlgebraic F (Subtype fun x => Membership.mem L x))\n⊢ Eq (IntermediateField.adjoin E ↑L).toSubalgebra (Algebra.adjoin E ↑L)","decl":"/-- If `K / E / F` is a field extension tower, `L` is an intermediate field of `K / F`, such that\neither `E / F` or `L / F` is algebraic, then `E(L) = E[L]`. -/\ntheorem adjoin_toSubalgebra_of_isAlgebraic (L : IntermediateField F K)\n    (halg : Algebra.IsAlgebraic F E ∨ Algebra.IsAlgebraic F L) :\n    (adjoin E (L : Set K)).toSubalgebra = Algebra.adjoin E (L : Set K) := by\n  let i := IsScalarTower.toAlgHom F E K\n  let E' := i.fieldRange\n  let i' : E ≃ₐ[F] E' := AlgEquiv.ofInjectiveField i\n  have hi : algebraMap E K = (algebraMap E' K) ∘ i' := by ext x; rfl\n  apply_fun _ using Subalgebra.restrictScalars_injective F\n  erw [← restrictScalars_toSubalgebra, restrictScalars_adjoin_of_algEquiv i' hi,\n    Algebra.restrictScalars_adjoin_of_algEquiv i' hi, restrictScalars_adjoin,\n    Algebra.restrictScalars_adjoin]\n  exact E'.sup_toSubalgebra_of_isAlgebraic L (halg.imp\n    (fun (_ : Algebra.IsAlgebraic F E) ↦ i'.isAlgebraic) id)\n\n"}
{"name":"IntermediateField.adjoin_toSubalgebra_of_isAlgebraic_left","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"F : Type u_1\ninst✝⁶ : Field F\nE : Type u_2\ninst✝⁵ : Field E\ninst✝⁴ : Algebra F E\nK : Type u_3\ninst✝³ : Field K\ninst✝² : Algebra F K\ninst✝¹ : Algebra E K\ninst✝ : IsScalarTower F E K\nL : IntermediateField F K\nhalg : Algebra.IsAlgebraic F E\n⊢ Eq (IntermediateField.adjoin E ↑L).toSubalgebra (Algebra.adjoin E ↑L)","decl":"theorem adjoin_toSubalgebra_of_isAlgebraic_left (L : IntermediateField F K)\n    [halg : Algebra.IsAlgebraic F E] :\n    (adjoin E (L : Set K)).toSubalgebra = Algebra.adjoin E (L : Set K) :=\n  adjoin_toSubalgebra_of_isAlgebraic E L (Or.inl halg)\n\n"}
{"name":"IntermediateField.adjoin_toSubalgebra_of_isAlgebraic_right","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"F : Type u_1\ninst✝⁶ : Field F\nE : Type u_2\ninst✝⁵ : Field E\ninst✝⁴ : Algebra F E\nK : Type u_3\ninst✝³ : Field K\ninst✝² : Algebra F K\ninst✝¹ : Algebra E K\ninst✝ : IsScalarTower F E K\nL : IntermediateField F K\nhalg : Algebra.IsAlgebraic F (Subtype fun x => Membership.mem L x)\n⊢ Eq (IntermediateField.adjoin E ↑L).toSubalgebra (Algebra.adjoin E ↑L)","decl":"theorem adjoin_toSubalgebra_of_isAlgebraic_right (L : IntermediateField F K)\n    [halg : Algebra.IsAlgebraic F L] :\n    (adjoin E (L : Set K)).toSubalgebra = Algebra.adjoin E (L : Set K) :=\n  adjoin_toSubalgebra_of_isAlgebraic E L (Or.inr halg)\n\n"}
{"name":"IntermediateField.fg_of_fg_toSubalgebra","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : IntermediateField F E\nh : S.FG\n⊢ S.FG","decl":"theorem fg_of_fg_toSubalgebra (S : IntermediateField F E) (h : S.toSubalgebra.FG) : S.FG := by\n  cases' h with t ht\n  exact ⟨t, (eq_adjoin_of_eq_algebra_adjoin _ _ _ ht.symm).symm⟩\n\n"}
{"name":"IntermediateField.fG_of_fG_toSubalgebra","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : IntermediateField F E\nh : S.FG\n⊢ S.FG","decl":"@[deprecated (since := \"2024-10-28\")] alias fG_of_fG_toSubalgebra := fg_of_fg_toSubalgebra\n\n"}
{"name":"IntermediateField.fg_of_noetherian","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"F : Type u_1\ninst✝³ : Field F\nE : Type u_2\ninst✝² : Field E\ninst✝¹ : Algebra F E\nS : IntermediateField F E\ninst✝ : IsNoetherian F E\n⊢ S.FG","decl":"theorem fg_of_noetherian (S : IntermediateField F E) [IsNoetherian F E] : S.FG :=\n  S.fg_of_fg_toSubalgebra S.toSubalgebra.fg_of_noetherian\n\n"}
{"name":"IntermediateField.induction_on_adjoin","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"F : Type u_1\ninst✝³ : Field F\nE : Type u_2\ninst✝² : Field E\ninst✝¹ : Algebra F E\ninst✝ : FiniteDimensional F E\nP : IntermediateField F E → Prop\nbase : P Bot.bot\nih : ∀ (K : IntermediateField F E) (x : E), P K → P (IntermediateField.restrictScalars F (IntermediateField.adjoin (Subtype fun x => Membership.mem K x) (Singleton.singleton x)))\nK : IntermediateField F E\n⊢ P K","decl":"theorem induction_on_adjoin [FiniteDimensional F E] (P : IntermediateField F E → Prop)\n    (base : P ⊥) (ih : ∀ (K : IntermediateField F E) (x : E), P K → P (K⟮x⟯.restrictScalars F))\n    (K : IntermediateField F E) : P K :=\n  letI : IsNoetherian F E := IsNoetherian.iff_fg.2 inferInstance\n  induction_on_adjoin_fg P base ih K K.fg_of_noetherian\n\n"}
{"name":"IsFractionRing.algHom_fieldRange_eq_of_comp_eq","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"F : Type u_1\nA : Type u_2\nK : Type u_3\nL : Type u_4\ninst✝⁸ : Field F\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra F A\ninst✝⁵ : Field K\ninst✝⁴ : Algebra F K\ninst✝³ : Algebra A K\ninst✝² : IsFractionRing A K\ninst✝¹ : Field L\ninst✝ : Algebra F L\ng : AlgHom F A L\nf : AlgHom F K L\nh : Eq ((↑f).comp (algebraMap A K)) ↑g\n⊢ Eq f.fieldRange (IntermediateField.adjoin F ↑g.range)","decl":"/-- If `F` is a field, `A` is an `F`-algebra with fraction field `K`, `L` is a field,\n`g : A →ₐ[F] L` lifts to `f : K →ₐ[F] L`,\nthen the image of `f` is the field generated by the image of `g`.\nNote: this does not require `IsScalarTower F A K`. -/\ntheorem algHom_fieldRange_eq_of_comp_eq (h : RingHom.comp f (algebraMap A K) = (g : A →+* L)) :\n    f.fieldRange = IntermediateField.adjoin F g.range := by\n  apply IntermediateField.toSubfield_injective\n  simp_rw [AlgHom.fieldRange_toSubfield, IntermediateField.adjoin_toSubfield]\n  convert ringHom_fieldRange_eq_of_comp_eq h using 2\n  exact Set.union_eq_self_of_subset_left fun _ ⟨x, hx⟩ ↦ ⟨algebraMap F A x, by simp [← hx]⟩\n\n"}
{"name":"IsFractionRing.algHom_fieldRange_eq_of_comp_eq_of_range_eq","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"F : Type u_1\nA : Type u_2\nK : Type u_3\nL : Type u_4\ninst✝⁸ : Field F\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra F A\ninst✝⁵ : Field K\ninst✝⁴ : Algebra F K\ninst✝³ : Algebra A K\ninst✝² : IsFractionRing A K\ninst✝¹ : Field L\ninst✝ : Algebra F L\ng : AlgHom F A L\nf : AlgHom F K L\nh : Eq ((↑f).comp (algebraMap A K)) ↑g\ns : Set L\nhs : Eq g.range (Algebra.adjoin F s)\n⊢ Eq f.fieldRange (IntermediateField.adjoin F s)","decl":"/-- If `F` is a field, `A` is an `F`-algebra with fraction field `K`, `L` is a field,\n`g : A →ₐ[F] L` lifts to `f : K →ₐ[F] L`,\n`s` is a set such that the image of `g` is the subalgebra generated by `s`,\nthen the image of `f` is the intermediate field generated by `s`.\nNote: this does not require `IsScalarTower F A K`. -/\ntheorem algHom_fieldRange_eq_of_comp_eq_of_range_eq\n    (h : RingHom.comp f (algebraMap A K) = (g : A →+* L))\n    {s : Set L} (hs : g.range = Algebra.adjoin F s) :\n    f.fieldRange = IntermediateField.adjoin F s := by\n  apply IntermediateField.toSubfield_injective\n  simp_rw [AlgHom.fieldRange_toSubfield, IntermediateField.adjoin_toSubfield]\n  refine ringHom_fieldRange_eq_of_comp_eq_of_range_eq h ?_\n  rw [← Algebra.adjoin_eq_ring_closure, ← hs]; rfl\n\n"}
{"name":"IsFractionRing.liftAlgHom_fieldRange","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"F : Type u_1\nA : Type u_2\nK : Type u_3\nL : Type u_4\ninst✝⁹ : Field F\ninst✝⁸ : CommRing A\ninst✝⁷ : Algebra F A\ninst✝⁶ : Field K\ninst✝⁵ : Algebra F K\ninst✝⁴ : Algebra A K\ninst✝³ : IsFractionRing A K\ninst✝² : Field L\ninst✝¹ : Algebra F L\ng : AlgHom F A L\ninst✝ : IsScalarTower F A K\nhg : Function.Injective ⇑g\n⊢ Eq (IsFractionRing.liftAlgHom hg).fieldRange (IntermediateField.adjoin F ↑g.range)","decl":"/-- The image of `IsFractionRing.liftAlgHom` is the intermediate field generated by the image\nof the algebra hom. -/\ntheorem liftAlgHom_fieldRange (hg : Function.Injective g) :\n    (liftAlgHom hg : K →ₐ[F] L).fieldRange = IntermediateField.adjoin F g.range :=\n  algHom_fieldRange_eq_of_comp_eq (by ext; simp)\n\n"}
{"name":"IsFractionRing.liftAlgHom_fieldRange_eq_of_range_eq","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Algebra","initialProofState":"F : Type u_1\nA : Type u_2\nK : Type u_3\nL : Type u_4\ninst✝⁹ : Field F\ninst✝⁸ : CommRing A\ninst✝⁷ : Algebra F A\ninst✝⁶ : Field K\ninst✝⁵ : Algebra F K\ninst✝⁴ : Algebra A K\ninst✝³ : IsFractionRing A K\ninst✝² : Field L\ninst✝¹ : Algebra F L\ng : AlgHom F A L\ninst✝ : IsScalarTower F A K\nhg : Function.Injective ⇑g\ns : Set L\nhs : Eq g.range (Algebra.adjoin F s)\n⊢ Eq (IsFractionRing.liftAlgHom hg).fieldRange (IntermediateField.adjoin F s)","decl":"/-- The image of `IsFractionRing.liftAlgHom` is the intermediate field generated by `s`,\nif the image of the algebra hom is the subalgebra generated by `s`. -/\ntheorem liftAlgHom_fieldRange_eq_of_range_eq (hg : Function.Injective g)\n    {s : Set L} (hs : g.range = Algebra.adjoin F s) :\n    (liftAlgHom hg : K →ₐ[F] L).fieldRange = IntermediateField.adjoin F s :=\n  algHom_fieldRange_eq_of_comp_eq_of_range_eq (by ext; simp) hs\n\n"}
