{"name":"UniformSpace.Completion.uniformContinuous_dist","module":"Mathlib.Topology.MetricSpace.Completion","initialProofState":"Œ± : Type u\ninst‚úù : PseudoMetricSpace Œ±\n‚ä¢ UniformContinuous fun p => Dist.dist p.1 p.2","decl":"/-- The new distance is uniformly continuous. -/\nprotected theorem uniformContinuous_dist :\n    UniformContinuous fun p : Completion Œ± √ó Completion Œ± ‚Ü¶ dist p.1 p.2 :=\n  uniformContinuous_extension‚ÇÇ dist\n\n"}
{"name":"UniformSpace.Completion.continuous_dist","module":"Mathlib.Topology.MetricSpace.Completion","initialProofState":"Œ± : Type u\nŒ≤ : Type v\ninst‚úù¬π : PseudoMetricSpace Œ±\ninst‚úù : TopologicalSpace Œ≤\nf g : Œ≤ ‚Üí UniformSpace.Completion Œ±\nhf : Continuous f\nhg : Continuous g\n‚ä¢ Continuous fun x => Dist.dist (f x) (g x)","decl":"/-- The new distance is continuous. -/\nprotected theorem continuous_dist [TopologicalSpace Œ≤] {f g : Œ≤ ‚Üí Completion Œ±} (hf : Continuous f)\n    (hg : Continuous g) : Continuous fun x ‚Ü¶ dist (f x) (g x) :=\n  Completion.uniformContinuous_dist.continuous.comp (hf.prod_mk hg :)\n\n"}
{"name":"UniformSpace.Completion.dist_eq","module":"Mathlib.Topology.MetricSpace.Completion","initialProofState":"Œ± : Type u\ninst‚úù : PseudoMetricSpace Œ±\nx y : Œ±\n‚ä¢ Eq (Dist.dist ‚Üëx ‚Üëy) (Dist.dist x y)","decl":"/-- The new distance is an extension of the original distance. -/\n@[simp]\nprotected theorem dist_eq (x y : Œ±) : dist (x : Completion Œ±) y = dist x y :=\n  Completion.extension‚ÇÇ_coe_coe uniformContinuous_dist _ _\n\n/- Let us check that the new distance satisfies the axioms of a distance, by starting from the\nproperties on Œ± and extending them to `Completion Œ±` by continuity. -/\n"}
{"name":"UniformSpace.Completion.dist_self","module":"Mathlib.Topology.MetricSpace.Completion","initialProofState":"Œ± : Type u\ninst‚úù : PseudoMetricSpace Œ±\nx : UniformSpace.Completion Œ±\n‚ä¢ Eq (Dist.dist x x) 0","decl":"protected theorem dist_self (x : Completion Œ±) : dist x x = 0 := by\n  refine induction_on x ?_ ?_\n  ¬∑ refine isClosed_eq ?_ continuous_const\n    exact Completion.continuous_dist continuous_id continuous_id\n  ¬∑ intro a\n    rw [Completion.dist_eq, dist_self]\n\n"}
{"name":"UniformSpace.Completion.dist_comm","module":"Mathlib.Topology.MetricSpace.Completion","initialProofState":"Œ± : Type u\ninst‚úù : PseudoMetricSpace Œ±\nx y : UniformSpace.Completion Œ±\n‚ä¢ Eq (Dist.dist x y) (Dist.dist y x)","decl":"protected theorem dist_comm (x y : Completion Œ±) : dist x y = dist y x := by\n  refine induction_on‚ÇÇ x y ?_ ?_\n  ¬∑ exact isClosed_eq (Completion.continuous_dist continuous_fst continuous_snd)\n        (Completion.continuous_dist continuous_snd continuous_fst)\n  ¬∑ intro a b\n    rw [Completion.dist_eq, Completion.dist_eq, dist_comm]\n\n"}
{"name":"UniformSpace.Completion.dist_triangle","module":"Mathlib.Topology.MetricSpace.Completion","initialProofState":"Œ± : Type u\ninst‚úù : PseudoMetricSpace Œ±\nx y z : UniformSpace.Completion Œ±\n‚ä¢ LE.le (Dist.dist x z) (HAdd.hAdd (Dist.dist x y) (Dist.dist y z))","decl":"protected theorem dist_triangle (x y z : Completion Œ±) : dist x z ‚â§ dist x y + dist y z := by\n  refine induction_on‚ÇÉ x y z ?_ ?_\n  ¬∑ refine isClosed_le ?_ (Continuous.add ?_ ?_) <;>\n      apply_rules [Completion.continuous_dist, Continuous.fst, Continuous.snd, continuous_id]\n  ¬∑ intro a b c\n    rw [Completion.dist_eq, Completion.dist_eq, Completion.dist_eq]\n    exact dist_triangle a b c\n\n"}
{"name":"UniformSpace.Completion.mem_uniformity_dist","module":"Mathlib.Topology.MetricSpace.Completion","initialProofState":"Œ± : Type u\ninst‚úù : PseudoMetricSpace Œ±\ns : Set (Prod (UniformSpace.Completion Œ±) (UniformSpace.Completion Œ±))\n‚ä¢ Iff (Membership.mem (uniformity (UniformSpace.Completion Œ±)) s) (Exists fun Œµ => And (GT.gt Œµ 0) (‚àÄ {a b : UniformSpace.Completion Œ±}, LT.lt (Dist.dist a b) Œµ ‚Üí Membership.mem s { fst := a, snd := b }))","decl":"/-- Elements of the uniformity (defined generally for completions) can be characterized in terms\nof the distance. -/\nprotected theorem mem_uniformity_dist (s : Set (Completion Œ± √ó Completion Œ±)) :\n    s ‚àà ùì§ (Completion Œ±) ‚Üî ‚àÉ Œµ > 0, ‚àÄ {a b}, dist a b < Œµ ‚Üí (a, b) ‚àà s := by\n  constructor\n  ¬∑ /- Start from an entourage `s`. It contains a closed entourage `t`. Its pullback in `Œ±` is an\n      entourage, so it contains an `Œµ`-neighborhood of the diagonal by definition of the entourages\n      in metric spaces. Then `t` contains an `Œµ`-neighborhood of the diagonal in `Completion Œ±`, as\n      closed properties pass to the completion. -/\n    intro hs\n    rcases mem_uniformity_isClosed hs with ‚ü®t, ht, ‚ü®tclosed, ts‚ü©‚ü©\n    have A : { x : Œ± √ó Œ± | (‚Üëx.1, ‚Üëx.2) ‚àà t } ‚àà uniformity Œ± :=\n      uniformContinuous_def.1 (uniformContinuous_coe Œ±) t ht\n    rcases mem_uniformity_dist.1 A with ‚ü®Œµ, Œµpos, hŒµ‚ü©\n    refine ‚ü®Œµ, Œµpos, @fun x y hxy ‚Ü¶ ?_‚ü©\n    have : Œµ ‚â§ dist x y ‚à® (x, y) ‚àà t := by\n      refine induction_on‚ÇÇ x y ?_ ?_\n      ¬∑ have : { x : Completion Œ± √ó Completion Œ± | Œµ ‚â§ dist x.fst x.snd ‚à® (x.fst, x.snd) ‚àà t } =\n               { p : Completion Œ± √ó Completion Œ± | Œµ ‚â§ dist p.1 p.2 } ‚à™ t := by ext; simp\n        rw [this]\n        apply IsClosed.union _ tclosed\n        exact isClosed_le continuous_const Completion.uniformContinuous_dist.continuous\n      ¬∑ intro x y\n        rw [Completion.dist_eq]\n        by_cases h : Œµ ‚â§ dist x y\n        ¬∑ exact Or.inl h\n        ¬∑ have Z := hŒµ (not_le.1 h)\n          simp only [Set.mem_setOf_eq] at Z\n          exact Or.inr Z\n    simp only [not_le.mpr hxy, false_or, not_le] at this\n    exact ts this\n  ¬∑ /- Start from a set `s` containing an Œµ-neighborhood of the diagonal in `Completion Œ±`. To show\n        that it is an entourage, we use the fact that `dist` is uniformly continuous on\n        `Completion Œ± √ó Completion Œ±` (this is a general property of the extension of uniformly\n        continuous functions). Therefore, the preimage of the Œµ-neighborhood of the diagonal in ‚Ñù\n        is an entourage in `Completion Œ± √ó Completion Œ±`. Massaging this property, it follows that\n        the Œµ-neighborhood of the diagonal is an entourage in `Completion Œ±`, and therefore this is\n        also the case of `s`. -/\n    rintro ‚ü®Œµ, Œµpos, hŒµ‚ü©\n    let r : Set (‚Ñù √ó ‚Ñù) := { p | dist p.1 p.2 < Œµ }\n    have : r ‚àà uniformity ‚Ñù := Metric.dist_mem_uniformity Œµpos\n    have T := uniformContinuous_def.1 (@Completion.uniformContinuous_dist Œ± _) r this\n    simp only [uniformity_prod_eq_prod, mem_prod_iff, exists_prop, Filter.mem_map,\n      Set.mem_setOf_eq] at T\n    rcases T with ‚ü®t1, ht1, t2, ht2, ht‚ü©\n    refine mem_of_superset ht1 ?_\n    have A : ‚àÄ a b : Completion Œ±, (a, b) ‚àà t1 ‚Üí dist a b < Œµ := by\n      intro a b hab\n      have : ((a, b), (a, a)) ‚àà t1 √óÀ¢ t2 := ‚ü®hab, refl_mem_uniformity ht2‚ü©\n      have I := ht this\n      simp? [r, Completion.dist_self, Real.dist_eq, Completion.dist_comm] at I says\n        simp only [Real.dist_eq, mem_setOf_eq, preimage_setOf_eq, Completion.dist_self,\n          Completion.dist_comm, zero_sub, abs_neg, r] at I\n      exact lt_of_le_of_lt (le_abs_self _) I\n    show t1 ‚äÜ s\n    rintro ‚ü®a, b‚ü© hp\n    have : dist a b < Œµ := A a b hp\n    exact hŒµ this\n\n"}
{"name":"UniformSpace.Completion.uniformity_dist'","module":"Mathlib.Topology.MetricSpace.Completion","initialProofState":"Œ± : Type u\ninst‚úù : PseudoMetricSpace Œ±\n‚ä¢ Eq (uniformity (UniformSpace.Completion Œ±)) (iInf fun Œµ => Filter.principal (setOf fun p => LT.lt (Dist.dist p.1 p.2) ‚ÜëŒµ))","decl":"/-- Reformulate `Completion.mem_uniformity_dist` in terms that are suitable for the definition\nof the metric space structure. -/\nprotected theorem uniformity_dist' :\n    ùì§ (Completion Œ±) = ‚®Ö Œµ : { Œµ : ‚Ñù // 0 < Œµ }, ùìü { p | dist p.1 p.2 < Œµ.val } := by\n  ext s; rw [mem_iInf_of_directed]\n  ¬∑ simp [Completion.mem_uniformity_dist, subset_def]\n  ¬∑ rintro ‚ü®r, hr‚ü© ‚ü®p, hp‚ü©\n    use ‚ü®min r p, lt_min hr hp‚ü©\n    simp +contextual [lt_min_iff]\n\n"}
{"name":"UniformSpace.Completion.uniformity_dist","module":"Mathlib.Topology.MetricSpace.Completion","initialProofState":"Œ± : Type u\ninst‚úù : PseudoMetricSpace Œ±\n‚ä¢ Eq (uniformity (UniformSpace.Completion Œ±)) (iInf fun Œµ => iInf fun h => Filter.principal (setOf fun p => LT.lt (Dist.dist p.1 p.2) Œµ))","decl":"protected theorem uniformity_dist : ùì§ (Completion Œ±) = ‚®Ö Œµ > 0, ùìü { p | dist p.1 p.2 < Œµ } := by\n  simpa [iInf_subtype] using @Completion.uniformity_dist' Œ± _\n\n"}
{"name":"UniformSpace.Completion.coe_isometry","module":"Mathlib.Topology.MetricSpace.Completion","initialProofState":"Œ± : Type u\ninst‚úù : PseudoMetricSpace Œ±\n‚ä¢ Isometry UniformSpace.Completion.coe'","decl":"/-- The embedding of a metric space in its completion is an isometry. -/\ntheorem coe_isometry : Isometry ((‚Üë) : Œ± ‚Üí Completion Œ±) :=\n  Isometry.of_dist_eq Completion.dist_eq\n\n"}
{"name":"UniformSpace.Completion.edist_eq","module":"Mathlib.Topology.MetricSpace.Completion","initialProofState":"Œ± : Type u\ninst‚úù : PseudoMetricSpace Œ±\nx y : Œ±\n‚ä¢ Eq (EDist.edist ‚Üëx ‚Üëy) (EDist.edist x y)","decl":"@[simp]\nprotected theorem edist_eq (x y : Œ±) : edist (x : Completion Œ±) y = edist x y :=\n  coe_isometry x y\n\n"}
{"name":"UniformSpace.Completion.instBoundedSMul","module":"Mathlib.Topology.MetricSpace.Completion","initialProofState":"Œ± : Type u\ninst‚úù‚Åµ : PseudoMetricSpace Œ±\nM : Type u_1\ninst‚úù‚Å¥ : Zero M\ninst‚úù¬≥ : Zero Œ±\ninst‚úù¬≤ : SMul M Œ±\ninst‚úù¬π : PseudoMetricSpace M\ninst‚úù : BoundedSMul M Œ±\n‚ä¢ BoundedSMul M (UniformSpace.Completion Œ±)","decl":"instance {M} [Zero M] [Zero Œ±] [SMul M Œ±] [PseudoMetricSpace M] [BoundedSMul M Œ±] :\n    BoundedSMul M (Completion Œ±) where\n  dist_smul_pair' c x‚ÇÅ x‚ÇÇ := by\n    induction x‚ÇÅ, x‚ÇÇ using induction_on‚ÇÇ with\n    | hp =>\n      exact isClosed_le\n        ((continuous_fst.const_smul _).dist (continuous_snd.const_smul _))\n        (continuous_const.mul (continuous_fst.dist continuous_snd))\n    | ih x‚ÇÅ x‚ÇÇ =>\n      rw [‚Üê coe_smul, ‚Üê coe_smul, Completion.dist_eq,  Completion.dist_eq]\n      exact dist_smul_pair c x‚ÇÅ x‚ÇÇ\n  dist_pair_smul' c‚ÇÅ c‚ÇÇ x := by\n    induction x using induction_on with\n    | hp =>\n      exact isClosed_le\n        ((continuous_const_smul _).dist (continuous_const_smul _))\n        (continuous_const.mul (continuous_id.dist continuous_const))\n    | ih x =>\n      rw [‚Üê coe_smul, ‚Üê coe_smul, Completion.dist_eq, ‚Üê coe_zero, Completion.dist_eq]\n      exact dist_pair_smul c‚ÇÅ c‚ÇÇ x\n\n"}
{"name":"LipschitzWith.completion_extension","module":"Mathlib.Topology.MetricSpace.Completion","initialProofState":"Œ± : Type u\nŒ≤ : Type v\ninst‚úù¬≤ : PseudoMetricSpace Œ±\ninst‚úù¬π : MetricSpace Œ≤\ninst‚úù : CompleteSpace Œ≤\nf : Œ± ‚Üí Œ≤\nK : NNReal\nh : LipschitzWith K f\n‚ä¢ LipschitzWith K (UniformSpace.Completion.extension f)","decl":"theorem LipschitzWith.completion_extension [MetricSpace Œ≤] [CompleteSpace Œ≤] {f : Œ± ‚Üí Œ≤}\n    {K : ‚Ñù‚â•0} (h : LipschitzWith K f) : LipschitzWith K (Completion.extension f) :=\n  LipschitzWith.of_dist_le_mul fun x y => induction_on‚ÇÇ x y\n    (isClosed_le (by fun_prop) (by fun_prop)) <| by\n      simpa only [extension_coe h.uniformContinuous, Completion.dist_eq] using h.dist_le_mul\n\n"}
{"name":"LipschitzWith.completion_map","module":"Mathlib.Topology.MetricSpace.Completion","initialProofState":"Œ± : Type u\nŒ≤ : Type v\ninst‚úù¬π : PseudoMetricSpace Œ±\ninst‚úù : PseudoMetricSpace Œ≤\nf : Œ± ‚Üí Œ≤\nK : NNReal\nh : LipschitzWith K f\n‚ä¢ LipschitzWith K (UniformSpace.Completion.map f)","decl":"theorem LipschitzWith.completion_map [PseudoMetricSpace Œ≤] {f : Œ± ‚Üí Œ≤} {K : ‚Ñù‚â•0}\n    (h : LipschitzWith K f) : LipschitzWith K (Completion.map f) :=\n  one_mul K ‚ñ∏ (coe_isometry.lipschitz.comp h).completion_extension\n\n"}
{"name":"Isometry.completion_extension","module":"Mathlib.Topology.MetricSpace.Completion","initialProofState":"Œ± : Type u\nŒ≤ : Type v\ninst‚úù¬≤ : PseudoMetricSpace Œ±\ninst‚úù¬π : MetricSpace Œ≤\ninst‚úù : CompleteSpace Œ≤\nf : Œ± ‚Üí Œ≤\nh : Isometry f\n‚ä¢ Isometry (UniformSpace.Completion.extension f)","decl":"theorem Isometry.completion_extension [MetricSpace Œ≤] [CompleteSpace Œ≤] {f : Œ± ‚Üí Œ≤}\n    (h : Isometry f) : Isometry (Completion.extension f) :=\n  Isometry.of_dist_eq fun x y => induction_on‚ÇÇ x y\n    (isClosed_eq (by fun_prop) (by fun_prop)) fun _ _ ‚Ü¶ by\n      simp only [extension_coe h.uniformContinuous, Completion.dist_eq, h.dist_eq]\n\n"}
{"name":"Isometry.completion_map","module":"Mathlib.Topology.MetricSpace.Completion","initialProofState":"Œ± : Type u\nŒ≤ : Type v\ninst‚úù¬π : PseudoMetricSpace Œ±\ninst‚úù : PseudoMetricSpace Œ≤\nf : Œ± ‚Üí Œ≤\nh : Isometry f\n‚ä¢ Isometry (UniformSpace.Completion.map f)","decl":"theorem Isometry.completion_map [PseudoMetricSpace Œ≤] {f : Œ± ‚Üí Œ≤}\n    (h : Isometry f) : Isometry (Completion.map f) :=\n  (coe_isometry.comp h).completion_extension\n"}
