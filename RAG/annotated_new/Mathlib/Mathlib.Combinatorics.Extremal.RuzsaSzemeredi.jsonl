{"name":"ruzsaSzemerediNumber_le","module":"Mathlib.Combinatorics.Extremal.RuzsaSzemeredi","initialProofState":"α : Type u_1\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\n⊢ LE.le (ruzsaSzemerediNumber α) ((Fintype.card α).choose 3)","decl":"open scoped Classical in\nlemma ruzsaSzemerediNumber_le : ruzsaSzemerediNumber α ≤ (card α).choose 3 := Nat.findGreatest_le _\n\n"}
{"name":"ruzsaSzemerediNumber_spec","module":"Mathlib.Combinatorics.Extremal.RuzsaSzemeredi","initialProofState":"α : Type u_1\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\n⊢ Exists fun G => Exists fun x => And (Eq (G.cliqueFinset 3).card (ruzsaSzemerediNumber α)) G.LocallyLinear","decl":"lemma ruzsaSzemerediNumber_spec :\n    ∃ (G : SimpleGraph α) (_ : DecidableRel G.Adj),\n      #(G.cliqueFinset 3) = ruzsaSzemerediNumber α ∧ G.LocallyLinear := by\n  classical\n  exact @Nat.findGreatest_spec _\n    (fun m ↦ ∃ (G : SimpleGraph α) (_ : DecidableRel G.Adj),\n      #(G.cliqueFinset 3) = m ∧ G.LocallyLinear) _ _ (Nat.zero_le _)\n    ⟨⊥, inferInstance, by simp, locallyLinear_bot⟩\n\n"}
{"name":"SimpleGraph.LocallyLinear.le_ruzsaSzemerediNumber","module":"Mathlib.Combinatorics.Extremal.RuzsaSzemeredi","initialProofState":"α : Type u_1\ninst✝² : DecidableEq α\ninst✝¹ : Fintype α\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\nhG : G.LocallyLinear\n⊢ LE.le (G.cliqueFinset 3).card (ruzsaSzemerediNumber α)","decl":"lemma SimpleGraph.LocallyLinear.le_ruzsaSzemerediNumber [DecidableRel G.Adj]\n    (hG : G.LocallyLinear) : #(G.cliqueFinset 3) ≤ ruzsaSzemerediNumber α := by\n  classical\n  exact le_findGreatest card_cliqueFinset_le ⟨G, inferInstance, by congr, hG⟩\n\n"}
{"name":"ruzsaSzemerediNumber_mono","module":"Mathlib.Combinatorics.Extremal.RuzsaSzemeredi","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : DecidableEq α\ninst✝² : DecidableEq β\ninst✝¹ : Fintype α\ninst✝ : Fintype β\nf : Function.Embedding α β\n⊢ LE.le (ruzsaSzemerediNumber α) (ruzsaSzemerediNumber β)","decl":"lemma ruzsaSzemerediNumber_mono (f : α ↪ β) : ruzsaSzemerediNumber α ≤ ruzsaSzemerediNumber β := by\n  classical\n  refine findGreatest_mono ?_ (choose_mono _ <| Fintype.card_le_of_embedding f)\n  rintro n ⟨G, _, rfl, hG⟩\n  refine ⟨G.map f, inferInstance, ?_, hG.map _⟩\n  rw [← card_map ⟨map f, Finset.map_injective _⟩, ← cliqueFinset_map G f]\n  decide\n\n"}
{"name":"ruzsaSzemerediNumber_congr","module":"Mathlib.Combinatorics.Extremal.RuzsaSzemeredi","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : DecidableEq α\ninst✝² : DecidableEq β\ninst✝¹ : Fintype α\ninst✝ : Fintype β\ne : Equiv α β\n⊢ Eq (ruzsaSzemerediNumber α) (ruzsaSzemerediNumber β)","decl":"lemma ruzsaSzemerediNumber_congr (e : α ≃ β) : ruzsaSzemerediNumber α = ruzsaSzemerediNumber β :=\n  (ruzsaSzemerediNumber_mono (e : α ↪ β)).antisymm <| ruzsaSzemerediNumber_mono e.symm\n\n"}
{"name":"ruzsaSzemerediNumberNat_card","module":"Mathlib.Combinatorics.Extremal.RuzsaSzemeredi","initialProofState":"α : Type u_1\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\n⊢ Eq (ruzsaSzemerediNumberNat (Fintype.card α)) (ruzsaSzemerediNumber α)","decl":"@[simp]\nlemma ruzsaSzemerediNumberNat_card : ruzsaSzemerediNumberNat (card α) = ruzsaSzemerediNumber α :=\n  ruzsaSzemerediNumber_congr (Fintype.equivFin _).symm\n\n"}
{"name":"ruzsaSzemerediNumberNat_mono","module":"Mathlib.Combinatorics.Extremal.RuzsaSzemeredi","initialProofState":"⊢ Monotone ruzsaSzemerediNumberNat","decl":"lemma ruzsaSzemerediNumberNat_mono : Monotone ruzsaSzemerediNumberNat := fun _m _n h =>\n  ruzsaSzemerediNumber_mono (Fin.castLEEmb h)\n\n"}
{"name":"ruzsaSzemerediNumberNat_le","module":"Mathlib.Combinatorics.Extremal.RuzsaSzemeredi","initialProofState":"n : Nat\n⊢ LE.le (ruzsaSzemerediNumberNat n) (n.choose 3)","decl":"lemma ruzsaSzemerediNumberNat_le : ruzsaSzemerediNumberNat n ≤ n.choose 3 :=\n  ruzsaSzemerediNumber_le.trans_eq <| by rw [Fintype.card_fin]\n\n"}
{"name":"ruzsaSzemerediNumberNat_zero","module":"Mathlib.Combinatorics.Extremal.RuzsaSzemeredi","initialProofState":"⊢ Eq (ruzsaSzemerediNumberNat 0) 0","decl":"@[simp] lemma ruzsaSzemerediNumberNat_zero : ruzsaSzemerediNumberNat 0 = 0 :=\n  le_zero_iff.1 ruzsaSzemerediNumberNat_le\n\n"}
{"name":"ruzsaSzemerediNumberNat_one","module":"Mathlib.Combinatorics.Extremal.RuzsaSzemeredi","initialProofState":"⊢ Eq (ruzsaSzemerediNumberNat 1) 0","decl":"@[simp] lemma ruzsaSzemerediNumberNat_one : ruzsaSzemerediNumberNat 1 = 0 :=\n  le_zero_iff.1 ruzsaSzemerediNumberNat_le\n\n"}
{"name":"ruzsaSzemerediNumberNat_two","module":"Mathlib.Combinatorics.Extremal.RuzsaSzemeredi","initialProofState":"⊢ Eq (ruzsaSzemerediNumberNat 2) 0","decl":"@[simp] lemma ruzsaSzemerediNumberNat_two : ruzsaSzemerediNumberNat 2 = 0 :=\n  le_zero_iff.1 ruzsaSzemerediNumberNat_le\n\n"}
{"name":"addRothNumber_le_ruzsaSzemerediNumber","module":"Mathlib.Combinatorics.Extremal.RuzsaSzemeredi","initialProofState":"α : Type u_1\ninst✝³ : Fintype α\ninst✝² : DecidableEq α\ninst✝¹ : CommRing α\ninst✝ : Fact (IsUnit 2)\n⊢ LE.le (HMul.hMul (Fintype.card α) (addRothNumber Finset.univ)) (ruzsaSzemerediNumber (Sum α (Sum α α)))","decl":"lemma addRothNumber_le_ruzsaSzemerediNumber :\n    card α * addRothNumber (univ : Finset α) ≤ ruzsaSzemerediNumber (Sum α (Sum α α)) := by\n  obtain ⟨s, -, hscard, hs⟩ := addRothNumber_spec (univ : Finset α)\n  haveI := noAccidental hs\n  rw [← hscard, ← card_triangleIndices, ← card_triangles]\n  exact (locallyLinear hs).le_ruzsaSzemerediNumber\n\n"}
{"name":"rothNumberNat_le_ruzsaSzemerediNumberNat","module":"Mathlib.Combinatorics.Extremal.RuzsaSzemeredi","initialProofState":"n : Nat\n⊢ LE.le (HMul.hMul (HAdd.hAdd (HMul.hMul 2 n) 1) (rothNumberNat n)) (ruzsaSzemerediNumberNat (HAdd.hAdd (HMul.hMul 6 n) 3))","decl":"lemma rothNumberNat_le_ruzsaSzemerediNumberNat (n : ℕ) :\n    (2 * n + 1) * rothNumberNat n ≤ ruzsaSzemerediNumberNat (6 * n + 3) := by\n  let α := Fin (2 * n + 1)\n  have : Nat.Coprime 2 (2 * n + 1) := by simp\n  haveI : Fact (IsUnit (2 : Fin (2 * n + 1))) := ⟨by simpa using (ZMod.unitOfCoprime 2 this).isUnit⟩\n  calc\n    (2 * n + 1) * rothNumberNat n\n    _ = Fintype.card α * addRothNumber (Iio (n : α)) := by\n      rw [Fin.addRothNumber_eq_rothNumberNat le_rfl, Fintype.card_fin]\n    _ ≤ Fintype.card α * addRothNumber (univ : Finset α) := by\n      gcongr; exact subset_univ _\n    _ ≤ ruzsaSzemerediNumber (Sum α (Sum α α)) := addRothNumber_le_ruzsaSzemerediNumber _\n    _ = ruzsaSzemerediNumberNat (6 * n + 3) := by\n      simp_rw [← ruzsaSzemerediNumberNat_card, Fintype.card_sum, α, Fintype.card_fin]\n      ring_nf\n\n"}
{"name":"rothNumberNat_le_ruzsaSzemerediNumberNat'","module":"Mathlib.Combinatorics.Extremal.RuzsaSzemeredi","initialProofState":"n : Nat\n⊢ LE.le (HMul.hMul (HSub.hSub (HDiv.hDiv (↑n) 3) 2) ↑(rothNumberNat (HDiv.hDiv (HSub.hSub n 3) 6))) ↑(ruzsaSzemerediNumberNat n)","decl":"/-- Lower bound on the **Ruzsa-Szemerédi problem** in terms of 3AP-free sets.\n\nIf there exists a 3AP-free subset of `[1, ..., (n - 3) / 6]` of size `m`, then there exists a graph\nwith `n` vertices and `(n / 3 - 2) * m` edges such that each edge belongs to exactly one triangle.\n-/\ntheorem rothNumberNat_le_ruzsaSzemerediNumberNat' :\n    ∀ n : ℕ, (n / 3 - 2 : ℝ) * rothNumberNat ((n - 3) / 6) ≤ ruzsaSzemerediNumberNat n\n  | 0 => by simp\n  | 1 => by simp\n  | 2 => by simp\n  | n + 3 => by\n    calc\n      _ ≤ (↑(2 * (n / 6) + 1) : ℝ) * rothNumberNat (n / 6) :=\n        mul_le_mul_of_nonneg_right ?_ (Nat.cast_nonneg _)\n      _ ≤ (ruzsaSzemerediNumberNat (6 * (n / 6) + 3) : ℝ) := ?_\n      _ ≤ _ :=\n        Nat.cast_le.2 (ruzsaSzemerediNumberNat_mono <| add_le_add_right (Nat.mul_div_le _ _) _)\n    · norm_num\n      rw [← div_add_one (three_ne_zero' ℝ), ← le_sub_iff_add_le, div_le_iff₀ (zero_lt_three' ℝ),\n        add_assoc, add_sub_assoc, add_mul, mul_right_comm]\n      norm_num\n      norm_cast\n      rw [← mul_add_one]\n      exact (Nat.lt_mul_div_succ _ <| by norm_num).le\n    · norm_cast\n      exact rothNumberNat_le_ruzsaSzemerediNumberNat _\n\n"}
{"name":"ruzsaSzemerediNumberNat_lower_bound","module":"Mathlib.Combinatorics.Extremal.RuzsaSzemeredi","initialProofState":"n : Nat\n⊢ LE.le (HMul.hMul (HMul.hMul (HSub.hSub (HDiv.hDiv (↑n) 3) 2) ↑(HDiv.hDiv (HSub.hSub n 3) 6)) (Real.exp (HMul.hMul (-4) (Real.log ↑(HDiv.hDiv (HSub.hSub n 3) 6)).sqrt))) ↑(ruzsaSzemerediNumberNat n)","decl":"/-- Explicit lower bound on the **Ruzsa-Szemerédi problem**.\n\nThere exists a graph with `n` vertices and\n`(n / 3 - 2) * (n - 3) / 6 * exp (-4 * sqrt (log ((n - 3) / 6)))` edges such that each edge belongs\nto exactly one triangle. -/\ntheorem ruzsaSzemerediNumberNat_lower_bound (n : ℕ) :\n    (n / 3 - 2 : ℝ) * ↑((n - 3) / 6) * exp (-4 * sqrt (log ↑((n - 3) / 6))) ≤\n      ruzsaSzemerediNumberNat n := by\n  rw [mul_assoc]\n  obtain hn | hn := le_total (n / 3 - 2 : ℝ) 0\n  · exact (mul_nonpos_of_nonpos_of_nonneg hn <| by positivity).trans (Nat.cast_nonneg _)\n  exact\n    (mul_le_mul_of_nonneg_left Behrend.roth_lower_bound hn).trans\n      (rothNumberNat_le_ruzsaSzemerediNumberNat' _)\n\n"}
{"name":"ruzsaSzemerediNumberNat_asymptotic_lower_bound","module":"Mathlib.Combinatorics.Extremal.RuzsaSzemeredi","initialProofState":"⊢ Asymptotics.IsBigO Filter.atTop (fun n => HMul.hMul (HPow.hPow (↑n) 2) (Real.exp (HMul.hMul (-4) (Real.log ↑n).sqrt))) fun n => ↑(ruzsaSzemerediNumberNat n)","decl":"/-- Asymptotic lower bound on the **Ruzsa-Szemerédi problem**.\n\nThere exists a graph with `n` vertices and `Ω((n ^ 2 * exp (-4 * sqrt (log n))))` edges such that\neach edge belongs to exactly one triangle. -/\ntheorem ruzsaSzemerediNumberNat_asymptotic_lower_bound :\n   (fun n ↦ n ^ 2 * exp (-4 * sqrt (log n)) : ℕ → ℝ) =O[atTop]\n     fun n ↦ (ruzsaSzemerediNumberNat n : ℝ) := by\n  trans fun n ↦ (n / 3 - 2) * ↑((n - 3) / 6) * exp (-4 * sqrt (log ↑((n - 3) / 6)))\n  · simp_rw [sq]\n    refine (IsBigO.mul ?_ ?_).mul ?_\n    · trans fun n ↦ n / 3\n      · simp_rw [div_eq_inv_mul]\n        exact (isBigO_refl ..).const_mul_right (by norm_num)\n      refine IsLittleO.right_isBigO_sub ?_\n      simpa [div_eq_inv_mul, Function.comp_def] using\n        .atTop_of_const_mul zero_lt_three (by simp [tendsto_natCast_atTop_atTop])\n    · rw [IsBigO_def]\n      refine ⟨12, ?_⟩\n      simp only [IsBigOWith, norm_natCast, eventually_atTop]\n      exact ⟨15, fun x hx ↦ by norm_cast; omega⟩\n    · rw [isBigO_exp_comp_exp_comp]\n      refine ⟨0, ?_⟩\n      simp only [neg_mul, eventually_map, Pi.sub_apply, sub_neg_eq_add, neg_add_le_iff_le_add,\n        add_zero, ofNat_pos, _root_.mul_le_mul_left, eventually_atTop]\n      refine ⟨9, fun x hx ↦ ?_⟩\n      gcongr\n      · simp\n        omega\n      · omega\n  · refine .of_norm_eventuallyLE ?_\n    filter_upwards [eventually_ge_atTop 6] with n hn\n    have : (0 : ℝ) ≤ n / 3 - 2 := by rify at hn; linarith\n    simpa [neg_mul, abs_mul, abs_of_nonneg this] using ruzsaSzemerediNumberNat_lower_bound n\n"}
