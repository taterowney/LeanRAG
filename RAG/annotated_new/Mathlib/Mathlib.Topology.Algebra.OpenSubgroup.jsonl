{"name":"OpenAddSubgroup.mk.inj","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\ntoAddSubgroup✝ : AddSubgroup G\nisOpen'✝ : IsOpen toAddSubgroup✝.carrier\ntoAddSubgroup : AddSubgroup G\nisOpen' : IsOpen toAddSubgroup.carrier\nx✝ : Eq { toAddSubgroup := toAddSubgroup✝, isOpen' := isOpen'✝ } { toAddSubgroup := toAddSubgroup, isOpen' := isOpen' }\n⊢ Eq toAddSubgroup✝ toAddSubgroup","decl":"/-- The type of open subgroups of a topological additive group. -/\nstructure OpenAddSubgroup (G : Type*) [AddGroup G] [TopologicalSpace G] extends AddSubgroup G where\n  isOpen' : IsOpen carrier\n\n"}
{"name":"OpenAddSubgroup.mk.sizeOf_spec","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : SizeOf G\ntoAddSubgroup : AddSubgroup G\nisOpen' : IsOpen toAddSubgroup.carrier\n⊢ Eq (SizeOf.sizeOf { toAddSubgroup := toAddSubgroup, isOpen' := isOpen' }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toAddSubgroup)) (SizeOf.sizeOf isOpen'))","decl":"/-- The type of open subgroups of a topological additive group. -/\nstructure OpenAddSubgroup (G : Type*) [AddGroup G] [TopologicalSpace G] extends AddSubgroup G where\n  isOpen' : IsOpen carrier\n\n"}
{"name":"OpenAddSubgroup.mk.injEq","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\ntoAddSubgroup✝ : AddSubgroup G\nisOpen'✝ : IsOpen toAddSubgroup✝.carrier\ntoAddSubgroup : AddSubgroup G\nisOpen' : IsOpen toAddSubgroup.carrier\n⊢ Eq (Eq { toAddSubgroup := toAddSubgroup✝, isOpen' := isOpen'✝ } { toAddSubgroup := toAddSubgroup, isOpen' := isOpen' }) (Eq toAddSubgroup✝ toAddSubgroup)","decl":"/-- The type of open subgroups of a topological additive group. -/\nstructure OpenAddSubgroup (G : Type*) [AddGroup G] [TopologicalSpace G] extends AddSubgroup G where\n  isOpen' : IsOpen carrier\n\n"}
{"name":"OpenAddSubgroup.isOpen'","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nself : OpenAddSubgroup G\n⊢ IsOpen self.carrier","decl":"/-- The type of open subgroups of a topological additive group. -/\nstructure OpenAddSubgroup (G : Type*) [AddGroup G] [TopologicalSpace G] extends AddSubgroup G where\n  isOpen' : IsOpen carrier\n\n"}
{"name":"OpenSubgroup.mk.inj","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\ntoSubgroup✝ : Subgroup G\nisOpen'✝ : IsOpen toSubgroup✝.carrier\ntoSubgroup : Subgroup G\nisOpen' : IsOpen toSubgroup.carrier\nx✝ : Eq { toSubgroup := toSubgroup✝, isOpen' := isOpen'✝ } { toSubgroup := toSubgroup, isOpen' := isOpen' }\n⊢ Eq toSubgroup✝ toSubgroup","decl":"/-- The type of open subgroups of a topological group. -/\n@[to_additive]\nstructure OpenSubgroup (G : Type*) [Group G] [TopologicalSpace G] extends Subgroup G where\n  isOpen' : IsOpen carrier\n\n"}
{"name":"OpenSubgroup.mk.injEq","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\ntoSubgroup✝ : Subgroup G\nisOpen'✝ : IsOpen toSubgroup✝.carrier\ntoSubgroup : Subgroup G\nisOpen' : IsOpen toSubgroup.carrier\n⊢ Eq (Eq { toSubgroup := toSubgroup✝, isOpen' := isOpen'✝ } { toSubgroup := toSubgroup, isOpen' := isOpen' }) (Eq toSubgroup✝ toSubgroup)","decl":"/-- The type of open subgroups of a topological group. -/\n@[to_additive]\nstructure OpenSubgroup (G : Type*) [Group G] [TopologicalSpace G] extends Subgroup G where\n  isOpen' : IsOpen carrier\n\n"}
{"name":"OpenSubgroup.mk.sizeOf_spec","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : SizeOf G\ntoSubgroup : Subgroup G\nisOpen' : IsOpen toSubgroup.carrier\n⊢ Eq (SizeOf.sizeOf { toSubgroup := toSubgroup, isOpen' := isOpen' }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toSubgroup)) (SizeOf.sizeOf isOpen'))","decl":"/-- The type of open subgroups of a topological group. -/\n@[to_additive]\nstructure OpenSubgroup (G : Type*) [Group G] [TopologicalSpace G] extends Subgroup G where\n  isOpen' : IsOpen carrier\n\n"}
{"name":"OpenSubgroup.isOpen'","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nself : OpenSubgroup G\n⊢ IsOpen self.carrier","decl":"/-- The type of open subgroups of a topological group. -/\n@[to_additive]\nstructure OpenSubgroup (G : Type*) [Group G] [TopologicalSpace G] extends Subgroup G where\n  isOpen' : IsOpen carrier\n\n"}
{"name":"OpenSubgroup.toSubgroup_injective","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\n⊢ Function.Injective OpenSubgroup.toSubgroup","decl":"@[to_additive]\ntheorem toSubgroup_injective : Injective ((↑) : OpenSubgroup G → Subgroup G)\n  | ⟨_, _⟩, ⟨_, _⟩, rfl => rfl\n\n"}
{"name":"OpenAddSubgroup.toAddSubgroup_injective","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\n⊢ Function.Injective OpenAddSubgroup.toAddSubgroup","decl":"@[to_additive]\ntheorem toSubgroup_injective : Injective ((↑) : OpenSubgroup G → Subgroup G)\n  | ⟨_, _⟩, ⟨_, _⟩, rfl => rfl\n\n"}
{"name":"OpenSubgroup.instSubgroupClass","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\n⊢ SubgroupClass (OpenSubgroup G) G","decl":"@[to_additive]\ninstance : SubgroupClass (OpenSubgroup G) G where\n  mul_mem := Subsemigroup.mul_mem' _\n  one_mem U := U.one_mem'\n  inv_mem := Subgroup.inv_mem' _\n\n"}
{"name":"OpenAddSubgroup.instAddSubgroupClass","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\n⊢ AddSubgroupClass (OpenAddSubgroup G) G","decl":"@[to_additive]\ninstance : SubgroupClass (OpenSubgroup G) G where\n  mul_mem := Subsemigroup.mul_mem' _\n  one_mem U := U.one_mem'\n  inv_mem := Subgroup.inv_mem' _\n\n"}
{"name":"OpenSubgroup.coe_toOpens","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nU : OpenSubgroup G\n⊢ Eq ↑↑U ↑U","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem coe_toOpens : ((U : Opens G) : Set G) = U :=\n  rfl\n\n"}
{"name":"OpenAddSubgroup.coe_toOpens","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nU : OpenAddSubgroup G\n⊢ Eq ↑↑U ↑U","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem coe_toOpens : ((U : Opens G) : Set G) = U :=\n  rfl\n\n"}
{"name":"OpenSubgroup.coe_toSubgroup","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nU : OpenSubgroup G\n⊢ Eq ↑↑U ↑U","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem coe_toSubgroup : ((U : Subgroup G) : Set G) = U := rfl\n\n"}
{"name":"OpenAddSubgroup.coe_toAddSubgroup","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nU : OpenAddSubgroup G\n⊢ Eq ↑↑U ↑U","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem coe_toSubgroup : ((U : Subgroup G) : Set G) = U := rfl\n\n"}
{"name":"OpenAddSubgroup.mem_toOpens","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nU : OpenAddSubgroup G\ng : G\n⊢ Iff (Membership.mem (↑U) g) (Membership.mem U g)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem mem_toOpens : g ∈ (U : Opens G) ↔ g ∈ U := Iff.rfl\n\n"}
{"name":"OpenSubgroup.mem_toOpens","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nU : OpenSubgroup G\ng : G\n⊢ Iff (Membership.mem (↑U) g) (Membership.mem U g)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem mem_toOpens : g ∈ (U : Opens G) ↔ g ∈ U := Iff.rfl\n\n"}
{"name":"OpenAddSubgroup.mem_toAddSubgroup","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nU : OpenAddSubgroup G\ng : G\n⊢ Iff (Membership.mem (↑U) g) (Membership.mem U g)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem mem_toSubgroup : g ∈ (U : Subgroup G) ↔ g ∈ U := Iff.rfl\n\n"}
{"name":"OpenSubgroup.mem_toSubgroup","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nU : OpenSubgroup G\ng : G\n⊢ Iff (Membership.mem (↑U) g) (Membership.mem U g)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem mem_toSubgroup : g ∈ (U : Subgroup G) ↔ g ∈ U := Iff.rfl\n\n"}
{"name":"OpenAddSubgroup.ext_iff","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nU V : OpenAddSubgroup G\n⊢ Iff (Eq U V) (∀ (x : G), Iff (Membership.mem U x) (Membership.mem V x))","decl":"@[to_additive (attr := ext)]\ntheorem ext (h : ∀ x, x ∈ U ↔ x ∈ V) : U = V :=\n  SetLike.ext h\n\n"}
{"name":"OpenSubgroup.ext","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nU V : OpenSubgroup G\nh : ∀ (x : G), Iff (Membership.mem U x) (Membership.mem V x)\n⊢ Eq U V","decl":"@[to_additive (attr := ext)]\ntheorem ext (h : ∀ x, x ∈ U ↔ x ∈ V) : U = V :=\n  SetLike.ext h\n\n"}
{"name":"OpenAddSubgroup.ext","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nU V : OpenAddSubgroup G\nh : ∀ (x : G), Iff (Membership.mem U x) (Membership.mem V x)\n⊢ Eq U V","decl":"@[to_additive (attr := ext)]\ntheorem ext (h : ∀ x, x ∈ U ↔ x ∈ V) : U = V :=\n  SetLike.ext h\n\n"}
{"name":"OpenSubgroup.ext_iff","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nU V : OpenSubgroup G\n⊢ Iff (Eq U V) (∀ (x : G), Iff (Membership.mem U x) (Membership.mem V x))","decl":"@[to_additive (attr := ext)]\ntheorem ext (h : ∀ x, x ∈ U ↔ x ∈ V) : U = V :=\n  SetLike.ext h\n\n"}
{"name":"OpenAddSubgroup.isOpen","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nU : OpenAddSubgroup G\n⊢ IsOpen ↑U","decl":"@[to_additive]\nprotected theorem isOpen : IsOpen (U : Set G) :=\n  U.isOpen'\n\n"}
{"name":"OpenSubgroup.isOpen","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nU : OpenSubgroup G\n⊢ IsOpen ↑U","decl":"@[to_additive]\nprotected theorem isOpen : IsOpen (U : Set G) :=\n  U.isOpen'\n\n"}
{"name":"OpenAddSubgroup.mem_nhds_zero","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nU : OpenAddSubgroup G\n⊢ Membership.mem (nhds 0) ↑U","decl":"@[to_additive]\ntheorem mem_nhds_one : (U : Set G) ∈ 𝓝 (1 : G) :=\n  U.isOpen.mem_nhds U.one_mem\n\n"}
{"name":"OpenSubgroup.mem_nhds_one","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nU : OpenSubgroup G\n⊢ Membership.mem (nhds 1) ↑U","decl":"@[to_additive]\ntheorem mem_nhds_one : (U : Set G) ∈ 𝓝 (1 : G) :=\n  U.isOpen.mem_nhds U.one_mem\n\n"}
{"name":"OpenAddSubgroup.mem_top","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nx : G\n⊢ Membership.mem Top.top x","decl":"@[to_additive (attr := simp)]\ntheorem mem_top (x : G) : x ∈ (⊤ : OpenSubgroup G) :=\n  trivial\n\n"}
{"name":"OpenSubgroup.mem_top","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nx : G\n⊢ Membership.mem Top.top x","decl":"@[to_additive (attr := simp)]\ntheorem mem_top (x : G) : x ∈ (⊤ : OpenSubgroup G) :=\n  trivial\n\n"}
{"name":"OpenAddSubgroup.coe_top","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\n⊢ Eq (↑Top.top) Set.univ","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem coe_top : ((⊤ : OpenSubgroup G) : Set G) = Set.univ :=\n  rfl\n\n"}
{"name":"OpenSubgroup.coe_top","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\n⊢ Eq (↑Top.top) Set.univ","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem coe_top : ((⊤ : OpenSubgroup G) : Set G) = Set.univ :=\n  rfl\n\n"}
{"name":"OpenSubgroup.toSubgroup_top","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\n⊢ Eq (↑Top.top) Top.top","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem toSubgroup_top : ((⊤ : OpenSubgroup G) : Subgroup G) = ⊤ :=\n  rfl\n\n"}
{"name":"OpenAddSubgroup.toAddSubgroup_top","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\n⊢ Eq (↑Top.top) Top.top","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem toSubgroup_top : ((⊤ : OpenSubgroup G) : Subgroup G) = ⊤ :=\n  rfl\n\n"}
{"name":"OpenAddSubgroup.toOpens_top","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\n⊢ Eq (↑Top.top) Top.top","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem toOpens_top : ((⊤ : OpenSubgroup G) : Opens G) = ⊤ :=\n  rfl\n\n"}
{"name":"OpenSubgroup.toOpens_top","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\n⊢ Eq (↑Top.top) Top.top","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem toOpens_top : ((⊤ : OpenSubgroup G) : Opens G) = ⊤ :=\n  rfl\n\n"}
{"name":"OpenSubgroup.isClosed","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousMul G\nU : OpenSubgroup G\n⊢ IsClosed ↑U","decl":"@[to_additive]\ntheorem isClosed [ContinuousMul G] (U : OpenSubgroup G) : IsClosed (U : Set G) := by\n  apply isOpen_compl_iff.1\n  refine isOpen_iff_forall_mem_open.2 fun x hx ↦ ⟨(fun y ↦ y * x⁻¹) ⁻¹' U, ?_, ?_, ?_⟩\n  · refine fun u hux hu ↦ hx ?_\n    simp only [Set.mem_preimage, SetLike.mem_coe] at hux hu ⊢\n    convert U.mul_mem (U.inv_mem hux) hu\n    simp\n  · exact U.isOpen.preimage (continuous_mul_right _)\n  · simp [one_mem]\n\n"}
{"name":"OpenAddSubgroup.isClosed","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousAdd G\nU : OpenAddSubgroup G\n⊢ IsClosed ↑U","decl":"@[to_additive]\ntheorem isClosed [ContinuousMul G] (U : OpenSubgroup G) : IsClosed (U : Set G) := by\n  apply isOpen_compl_iff.1\n  refine isOpen_iff_forall_mem_open.2 fun x hx ↦ ⟨(fun y ↦ y * x⁻¹) ⁻¹' U, ?_, ?_, ?_⟩\n  · refine fun u hux hu ↦ hx ?_\n    simp only [Set.mem_preimage, SetLike.mem_coe] at hux hu ⊢\n    convert U.mul_mem (U.inv_mem hux) hu\n    simp\n  · exact U.isOpen.preimage (continuous_mul_right _)\n  · simp [one_mem]\n\n"}
{"name":"OpenAddSubgroup.isClopen","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousAdd G\nU : OpenAddSubgroup G\n⊢ IsClopen ↑U","decl":"@[to_additive]\ntheorem isClopen [ContinuousMul G] (U : OpenSubgroup G) : IsClopen (U : Set G) :=\n  ⟨U.isClosed, U.isOpen⟩\n\n"}
{"name":"OpenSubgroup.isClopen","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousMul G\nU : OpenSubgroup G\n⊢ IsClopen ↑U","decl":"@[to_additive]\ntheorem isClopen [ContinuousMul G] (U : OpenSubgroup G) : IsClopen (U : Set G) :=\n  ⟨U.isClosed, U.isOpen⟩\n\n"}
{"name":"OpenSubgroup.coe_prod","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝³ : Group G\ninst✝² : TopologicalSpace G\nH : Type u_2\ninst✝¹ : Group H\ninst✝ : TopologicalSpace H\nU : OpenSubgroup G\nV : OpenSubgroup H\n⊢ Eq (↑(U.prod V)) (SProd.sprod ↑U ↑V)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem coe_prod (U : OpenSubgroup G) (V : OpenSubgroup H) :\n    (U.prod V : Set (G × H)) = (U : Set G) ×ˢ (V : Set H) :=\n  rfl\n\n"}
{"name":"OpenAddSubgroup.coe_sum","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝³ : AddGroup G\ninst✝² : TopologicalSpace G\nH : Type u_2\ninst✝¹ : AddGroup H\ninst✝ : TopologicalSpace H\nU : OpenAddSubgroup G\nV : OpenAddSubgroup H\n⊢ Eq (↑(U.sum V)) (SProd.sprod ↑U ↑V)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem coe_prod (U : OpenSubgroup G) (V : OpenSubgroup H) :\n    (U.prod V : Set (G × H)) = (U : Set G) ×ˢ (V : Set H) :=\n  rfl\n\n"}
{"name":"OpenAddSubgroup.toAddSubgroup_sum","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝³ : AddGroup G\ninst✝² : TopologicalSpace G\nH : Type u_2\ninst✝¹ : AddGroup H\ninst✝ : TopologicalSpace H\nU : OpenAddSubgroup G\nV : OpenAddSubgroup H\n⊢ Eq (↑(U.sum V)) ((↑U).prod ↑V)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem toSubgroup_prod (U : OpenSubgroup G) (V : OpenSubgroup H) :\n    (U.prod V : Subgroup (G × H)) = (U : Subgroup G).prod V :=\n  rfl\n\n"}
{"name":"OpenSubgroup.toSubgroup_prod","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝³ : Group G\ninst✝² : TopologicalSpace G\nH : Type u_2\ninst✝¹ : Group H\ninst✝ : TopologicalSpace H\nU : OpenSubgroup G\nV : OpenSubgroup H\n⊢ Eq (↑(U.prod V)) ((↑U).prod ↑V)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem toSubgroup_prod (U : OpenSubgroup G) (V : OpenSubgroup H) :\n    (U.prod V : Subgroup (G × H)) = (U : Subgroup G).prod V :=\n  rfl\n\n"}
{"name":"OpenSubgroup.coe_inf","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nU V : OpenSubgroup G\n⊢ Eq (↑(Min.min U V)) (Inter.inter ↑U ↑V)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem coe_inf : (↑(U ⊓ V) : Set G) = (U : Set G) ∩ V :=\n  rfl\n\n"}
{"name":"OpenAddSubgroup.coe_inf","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nU V : OpenAddSubgroup G\n⊢ Eq (↑(Min.min U V)) (Inter.inter ↑U ↑V)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem coe_inf : (↑(U ⊓ V) : Set G) = (U : Set G) ∩ V :=\n  rfl\n\n"}
{"name":"OpenSubgroup.toSubgroup_inf","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nU V : OpenSubgroup G\n⊢ Eq (↑(Min.min U V)) (Min.min ↑U ↑V)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem toSubgroup_inf : (↑(U ⊓ V) : Subgroup G) = ↑U ⊓ ↑V :=\n  rfl\n\n"}
{"name":"OpenAddSubgroup.toAddSubgroup_inf","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nU V : OpenAddSubgroup G\n⊢ Eq (↑(Min.min U V)) (Min.min ↑U ↑V)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem toSubgroup_inf : (↑(U ⊓ V) : Subgroup G) = ↑U ⊓ ↑V :=\n  rfl\n\n"}
{"name":"OpenAddSubgroup.toOpens_inf","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nU V : OpenAddSubgroup G\n⊢ Eq (↑(Min.min U V)) (Min.min ↑U ↑V)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem toOpens_inf : (↑(U ⊓ V) : Opens G) = ↑U ⊓ ↑V :=\n  rfl\n\n"}
{"name":"OpenSubgroup.toOpens_inf","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nU V : OpenSubgroup G\n⊢ Eq (↑(Min.min U V)) (Min.min ↑U ↑V)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem toOpens_inf : (↑(U ⊓ V) : Opens G) = ↑U ⊓ ↑V :=\n  rfl\n\n"}
{"name":"OpenAddSubgroup.mem_inf","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nU V : OpenAddSubgroup G\nx : G\n⊢ Iff (Membership.mem (Min.min U V) x) (And (Membership.mem U x) (Membership.mem V x))","decl":"@[to_additive (attr := simp)]\ntheorem mem_inf {x} : x ∈ U ⊓ V ↔ x ∈ U ∧ x ∈ V :=\n  Iff.rfl\n\n"}
{"name":"OpenSubgroup.mem_inf","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nU V : OpenSubgroup G\nx : G\n⊢ Iff (Membership.mem (Min.min U V) x) (And (Membership.mem U x) (Membership.mem V x))","decl":"@[to_additive (attr := simp)]\ntheorem mem_inf {x} : x ∈ U ⊓ V ↔ x ∈ U ∧ x ∈ V :=\n  Iff.rfl\n\n"}
{"name":"OpenAddSubgroup.toAddSubgroup_le","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nU V : OpenAddSubgroup G\n⊢ Iff (LE.le ↑U ↑V) (LE.le U V)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem toSubgroup_le : (U : Subgroup G) ≤ (V : Subgroup G) ↔ U ≤ V :=\n  Iff.rfl\n\n"}
{"name":"OpenSubgroup.toSubgroup_le","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nU V : OpenSubgroup G\n⊢ Iff (LE.le ↑U ↑V) (LE.le U V)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem toSubgroup_le : (U : Subgroup G) ≤ (V : Subgroup G) ↔ U ≤ V :=\n  Iff.rfl\n\n"}
{"name":"OpenAddSubgroup.coe_comap","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝³ : AddGroup G\ninst✝² : TopologicalSpace G\nN : Type u_2\ninst✝¹ : AddGroup N\ninst✝ : TopologicalSpace N\nH : OpenAddSubgroup N\nf : AddMonoidHom G N\nhf : Continuous ⇑f\n⊢ Eq (↑(OpenAddSubgroup.comap f hf H)) (Set.preimage ⇑f ↑H)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem coe_comap (H : OpenSubgroup N) (f : G →* N) (hf : Continuous f) :\n    (H.comap f hf : Set G) = f ⁻¹' H :=\n  rfl\n\n"}
{"name":"OpenSubgroup.coe_comap","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝³ : Group G\ninst✝² : TopologicalSpace G\nN : Type u_2\ninst✝¹ : Group N\ninst✝ : TopologicalSpace N\nH : OpenSubgroup N\nf : MonoidHom G N\nhf : Continuous ⇑f\n⊢ Eq (↑(OpenSubgroup.comap f hf H)) (Set.preimage ⇑f ↑H)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem coe_comap (H : OpenSubgroup N) (f : G →* N) (hf : Continuous f) :\n    (H.comap f hf : Set G) = f ⁻¹' H :=\n  rfl\n\n"}
{"name":"OpenSubgroup.toSubgroup_comap","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝³ : Group G\ninst✝² : TopologicalSpace G\nN : Type u_2\ninst✝¹ : Group N\ninst✝ : TopologicalSpace N\nH : OpenSubgroup N\nf : MonoidHom G N\nhf : Continuous ⇑f\n⊢ Eq (↑(OpenSubgroup.comap f hf H)) (Subgroup.comap f ↑H)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem toSubgroup_comap (H : OpenSubgroup N) (f : G →* N) (hf : Continuous f) :\n    (H.comap f hf : Subgroup G) = (H : Subgroup N).comap f :=\n  rfl\n\n"}
{"name":"OpenAddSubgroup.toAddSubgroup_comap","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝³ : AddGroup G\ninst✝² : TopologicalSpace G\nN : Type u_2\ninst✝¹ : AddGroup N\ninst✝ : TopologicalSpace N\nH : OpenAddSubgroup N\nf : AddMonoidHom G N\nhf : Continuous ⇑f\n⊢ Eq (↑(OpenAddSubgroup.comap f hf H)) (AddSubgroup.comap f ↑H)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem toSubgroup_comap (H : OpenSubgroup N) (f : G →* N) (hf : Continuous f) :\n    (H.comap f hf : Subgroup G) = (H : Subgroup N).comap f :=\n  rfl\n\n"}
{"name":"OpenAddSubgroup.mem_comap","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝³ : AddGroup G\ninst✝² : TopologicalSpace G\nN : Type u_2\ninst✝¹ : AddGroup N\ninst✝ : TopologicalSpace N\nH : OpenAddSubgroup N\nf : AddMonoidHom G N\nhf : Continuous ⇑f\nx : G\n⊢ Iff (Membership.mem (OpenAddSubgroup.comap f hf H) x) (Membership.mem H (f x))","decl":"@[to_additive (attr := simp)]\ntheorem mem_comap {H : OpenSubgroup N} {f : G →* N} {hf : Continuous f} {x : G} :\n    x ∈ H.comap f hf ↔ f x ∈ H :=\n  Iff.rfl\n\n"}
{"name":"OpenSubgroup.mem_comap","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝³ : Group G\ninst✝² : TopologicalSpace G\nN : Type u_2\ninst✝¹ : Group N\ninst✝ : TopologicalSpace N\nH : OpenSubgroup N\nf : MonoidHom G N\nhf : Continuous ⇑f\nx : G\n⊢ Iff (Membership.mem (OpenSubgroup.comap f hf H) x) (Membership.mem H (f x))","decl":"@[to_additive (attr := simp)]\ntheorem mem_comap {H : OpenSubgroup N} {f : G →* N} {hf : Continuous f} {x : G} :\n    x ∈ H.comap f hf ↔ f x ∈ H :=\n  Iff.rfl\n\n"}
{"name":"OpenAddSubgroup.comap_comap","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝⁵ : AddGroup G\ninst✝⁴ : TopologicalSpace G\nN : Type u_2\ninst✝³ : AddGroup N\ninst✝² : TopologicalSpace N\nP : Type u_3\ninst✝¹ : AddGroup P\ninst✝ : TopologicalSpace P\nK : OpenAddSubgroup P\nf₂ : AddMonoidHom N P\nhf₂ : Continuous ⇑f₂\nf₁ : AddMonoidHom G N\nhf₁ : Continuous ⇑f₁\n⊢ Eq (OpenAddSubgroup.comap f₁ hf₁ (OpenAddSubgroup.comap f₂ hf₂ K)) (OpenAddSubgroup.comap (f₂.comp f₁) ⋯ K)","decl":"@[to_additive]\ntheorem comap_comap {P : Type*} [Group P] [TopologicalSpace P] (K : OpenSubgroup P) (f₂ : N →* P)\n    (hf₂ : Continuous f₂) (f₁ : G →* N) (hf₁ : Continuous f₁) :\n    (K.comap f₂ hf₂).comap f₁ hf₁ = K.comap (f₂.comp f₁) (hf₂.comp hf₁) :=\n  rfl\n\n"}
{"name":"OpenSubgroup.comap_comap","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝⁵ : Group G\ninst✝⁴ : TopologicalSpace G\nN : Type u_2\ninst✝³ : Group N\ninst✝² : TopologicalSpace N\nP : Type u_3\ninst✝¹ : Group P\ninst✝ : TopologicalSpace P\nK : OpenSubgroup P\nf₂ : MonoidHom N P\nhf₂ : Continuous ⇑f₂\nf₁ : MonoidHom G N\nhf₁ : Continuous ⇑f₁\n⊢ Eq (OpenSubgroup.comap f₁ hf₁ (OpenSubgroup.comap f₂ hf₂ K)) (OpenSubgroup.comap (f₂.comp f₁) ⋯ K)","decl":"@[to_additive]\ntheorem comap_comap {P : Type*} [Group P] [TopologicalSpace P] (K : OpenSubgroup P) (f₂ : N →* P)\n    (hf₂ : Continuous f₂) (f₁ : G →* N) (hf₁ : Continuous f₁) :\n    (K.comap f₂ hf₂).comap f₁ hf₁ = K.comap (f₂.comp f₁) (hf₂.comp hf₁) :=\n  rfl\n\n"}
{"name":"Subgroup.isOpen_of_mem_nhds","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousMul G\nH : Subgroup G\ng : G\nhg : Membership.mem (nhds g) ↑H\n⊢ IsOpen ↑H","decl":"@[to_additive]\ntheorem isOpen_of_mem_nhds [ContinuousMul G] (H : Subgroup G) {g : G} (hg : (H : Set G) ∈ 𝓝 g) :\n    IsOpen (H : Set G) := by\n  refine isOpen_iff_mem_nhds.2 fun x hx ↦ ?_\n  have hg' : g ∈ H := SetLike.mem_coe.1 (mem_of_mem_nhds hg)\n  have : Filter.Tendsto (fun y ↦ y * (x⁻¹ * g)) (𝓝 x) (𝓝 g) :=\n    (continuous_id.mul continuous_const).tendsto' _ _ (mul_inv_cancel_left _ _)\n  simpa only [SetLike.mem_coe, Filter.mem_map',\n    H.mul_mem_cancel_right (H.mul_mem (H.inv_mem hx) hg')] using this hg\n\n"}
{"name":"AddSubgroup.isOpen_of_mem_nhds","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousAdd G\nH : AddSubgroup G\ng : G\nhg : Membership.mem (nhds g) ↑H\n⊢ IsOpen ↑H","decl":"@[to_additive]\ntheorem isOpen_of_mem_nhds [ContinuousMul G] (H : Subgroup G) {g : G} (hg : (H : Set G) ∈ 𝓝 g) :\n    IsOpen (H : Set G) := by\n  refine isOpen_iff_mem_nhds.2 fun x hx ↦ ?_\n  have hg' : g ∈ H := SetLike.mem_coe.1 (mem_of_mem_nhds hg)\n  have : Filter.Tendsto (fun y ↦ y * (x⁻¹ * g)) (𝓝 x) (𝓝 g) :=\n    (continuous_id.mul continuous_const).tendsto' _ _ (mul_inv_cancel_left _ _)\n  simpa only [SetLike.mem_coe, Filter.mem_map',\n    H.mul_mem_cancel_right (H.mul_mem (H.inv_mem hx) hg')] using this hg\n\n"}
{"name":"Subgroup.isOpen_mono","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousMul G\nH₁ H₂ : Subgroup G\nh : LE.le H₁ H₂\nh₁ : IsOpen ↑H₁\n⊢ IsOpen ↑H₂","decl":"@[to_additive]\ntheorem isOpen_mono [ContinuousMul G] {H₁ H₂ : Subgroup G} (h : H₁ ≤ H₂)\n    (h₁ : IsOpen (H₁ : Set G)) : IsOpen (H₂ : Set G) :=\n  isOpen_of_mem_nhds _ <| Filter.mem_of_superset (h₁.mem_nhds <| one_mem H₁) h\n\n"}
{"name":"AddSubgroup.isOpen_mono","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousAdd G\nH₁ H₂ : AddSubgroup G\nh : LE.le H₁ H₂\nh₁ : IsOpen ↑H₁\n⊢ IsOpen ↑H₂","decl":"@[to_additive]\ntheorem isOpen_mono [ContinuousMul G] {H₁ H₂ : Subgroup G} (h : H₁ ≤ H₂)\n    (h₁ : IsOpen (H₁ : Set G)) : IsOpen (H₂ : Set G) :=\n  isOpen_of_mem_nhds _ <| Filter.mem_of_superset (h₁.mem_nhds <| one_mem H₁) h\n\n"}
{"name":"AddSubgroup.isOpen_of_openAddSubgroup","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousAdd G\nH : AddSubgroup G\nU : OpenAddSubgroup G\nh : LE.le (↑U) H\n⊢ IsOpen ↑H","decl":"@[to_additive]\ntheorem isOpen_of_openSubgroup [ContinuousMul G] (H: Subgroup G) {U : OpenSubgroup G} (h : ↑U ≤ H) :\n    IsOpen (H : Set G) :=\n  isOpen_mono h U.isOpen\n\n"}
{"name":"Subgroup.isOpen_of_openSubgroup","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousMul G\nH : Subgroup G\nU : OpenSubgroup G\nh : LE.le (↑U) H\n⊢ IsOpen ↑H","decl":"@[to_additive]\ntheorem isOpen_of_openSubgroup [ContinuousMul G] (H: Subgroup G) {U : OpenSubgroup G} (h : ↑U ≤ H) :\n    IsOpen (H : Set G) :=\n  isOpen_mono h U.isOpen\n\n"}
{"name":"Subgroup.isOpen_of_one_mem_interior","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousMul G\nH : Subgroup G\nh_1_int : Membership.mem (interior ↑H) 1\n⊢ IsOpen ↑H","decl":"/-- If a subgroup of a topological group has `1` in its interior, then it is open. -/\n@[to_additive \"If a subgroup of an additive topological group has `0` in its interior, then it is\nopen.\"]\ntheorem isOpen_of_one_mem_interior [ContinuousMul G] (H: Subgroup G)\n    (h_1_int : (1 : G) ∈ interior (H : Set G)) : IsOpen (H : Set G) :=\n  isOpen_of_mem_nhds H <| mem_interior_iff_mem_nhds.1 h_1_int\n\n"}
{"name":"AddSubgroup.isOpen_of_zero_mem_interior","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousAdd G\nH : AddSubgroup G\nh_1_int : Membership.mem (interior ↑H) 0\n⊢ IsOpen ↑H","decl":"/-- If a subgroup of a topological group has `1` in its interior, then it is open. -/\n@[to_additive \"If a subgroup of an additive topological group has `0` in its interior, then it is\nopen.\"]\ntheorem isOpen_of_one_mem_interior [ContinuousMul G] (H: Subgroup G)\n    (h_1_int : (1 : G) ∈ interior (H : Set G)) : IsOpen (H : Set G) :=\n  isOpen_of_mem_nhds H <| mem_interior_iff_mem_nhds.1 h_1_int\n\n"}
{"name":"AddSubgroup.isClosed_of_isOpen","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousAdd G\nU : AddSubgroup G\nh : IsOpen ↑U\n⊢ IsClosed ↑U","decl":"@[to_additive]\nlemma isClosed_of_isOpen [ContinuousMul G] (U : Subgroup G) (h : IsOpen (U : Set G)) :\n    IsClosed (U : Set G) :=\n  OpenSubgroup.isClosed ⟨U, h⟩\n\n"}
{"name":"Subgroup.isClosed_of_isOpen","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousMul G\nU : Subgroup G\nh : IsOpen ↑U\n⊢ IsClosed ↑U","decl":"@[to_additive]\nlemma isClosed_of_isOpen [ContinuousMul G] (U : Subgroup G) (h : IsOpen (U : Set G)) :\n    IsClosed (U : Set G) :=\n  OpenSubgroup.isClosed ⟨U, h⟩\n\n"}
{"name":"Subgroup.subgroupOf_isOpen","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nU K : Subgroup G\nh : IsOpen ↑K\n⊢ IsOpen ↑(K.subgroupOf U)","decl":"@[to_additive]\nlemma subgroupOf_isOpen (U K : Subgroup G) (h : IsOpen (K : Set G)) :\n    IsOpen (K.subgroupOf U : Set U) :=\n  Continuous.isOpen_preimage (continuous_iff_le_induced.mpr fun _ ↦ id) _ h\n\n"}
{"name":"AddSubgroup.addSubgroupOf_isOpen","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nU K : AddSubgroup G\nh : IsOpen ↑K\n⊢ IsOpen ↑(K.addSubgroupOf U)","decl":"@[to_additive]\nlemma subgroupOf_isOpen (U K : Subgroup G) (h : IsOpen (K : Set G)) :\n    IsOpen (K.subgroupOf U : Set U) :=\n  Continuous.isOpen_preimage (continuous_iff_le_induced.mpr fun _ ↦ id) _ h\n\n"}
{"name":"AddSubgroup.discreteTopology","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousAdd G\nU : AddSubgroup G\nh : IsOpen ↑U\n⊢ DiscreteTopology (HasQuotient.Quotient G U)","decl":"@[to_additive]\nlemma discreteTopology [ContinuousMul G] (U : Subgroup G) (h : IsOpen (U : Set G)) :\n    DiscreteTopology (G ⧸ U) := by\n  refine singletons_open_iff_discrete.mp (fun g ↦ ?_)\n  induction' g using Quotient.inductionOn with g\n  show IsOpen (QuotientGroup.mk ⁻¹' {QuotientGroup.mk g})\n  convert_to IsOpen ((g * ·) '' U)\n  · ext g'\n    simp only [Set.mem_preimage, Set.mem_singleton_iff, QuotientGroup.eq, Set.image_mul_left]\n    rw [← U.inv_mem_iff]\n    simp\n  · exact Homeomorph.mulLeft g |>.isOpen_image |>.mpr h\n\n"}
{"name":"Subgroup.discreteTopology","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousMul G\nU : Subgroup G\nh : IsOpen ↑U\n⊢ DiscreteTopology (HasQuotient.Quotient G U)","decl":"@[to_additive]\nlemma discreteTopology [ContinuousMul G] (U : Subgroup G) (h : IsOpen (U : Set G)) :\n    DiscreteTopology (G ⧸ U) := by\n  refine singletons_open_iff_discrete.mp (fun g ↦ ?_)\n  induction' g using Quotient.inductionOn with g\n  show IsOpen (QuotientGroup.mk ⁻¹' {QuotientGroup.mk g})\n  convert_to IsOpen ((g * ·) '' U)\n  · ext g'\n    simp only [Set.mem_preimage, Set.mem_singleton_iff, QuotientGroup.eq, Set.image_mul_left]\n    rw [← U.inv_mem_iff]\n    simp\n  · exact Homeomorph.mulLeft g |>.isOpen_image |>.mpr h\n\n"}
{"name":"Subgroup.instDiscreteTopologyQuotientOfContinuousMul","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousMul G\nU : OpenSubgroup G\n⊢ DiscreteTopology (HasQuotient.Quotient G ↑U)","decl":"@[to_additive]\ninstance [ContinuousMul G] (U : OpenSubgroup G) : DiscreteTopology (G ⧸ U.toSubgroup) :=\n  discreteTopology U.toSubgroup U.isOpen\n\n"}
{"name":"AddSubgroup.instDiscreteTopologyQuotientOfContinuousAdd","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousAdd G\nU : OpenAddSubgroup G\n⊢ DiscreteTopology (HasQuotient.Quotient G ↑U)","decl":"@[to_additive]\ninstance [ContinuousMul G] (U : OpenSubgroup G) : DiscreteTopology (G ⧸ U.toSubgroup) :=\n  discreteTopology U.toSubgroup U.isOpen\n\n"}
{"name":"Subgroup.quotient_finite_of_isOpen","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝³ : Group G\ninst✝² : TopologicalSpace G\ninst✝¹ : ContinuousMul G\ninst✝ : CompactSpace G\nU : Subgroup G\nh : IsOpen ↑U\n⊢ Finite (HasQuotient.Quotient G U)","decl":"@[to_additive]\nlemma quotient_finite_of_isOpen [ContinuousMul G] [CompactSpace G] (U : Subgroup G)\n    (h : IsOpen (U : Set G)) : Finite (G ⧸ U) :=\n  have : DiscreteTopology (G ⧸ U) := U.discreteTopology h\n  finite_of_compact_of_discrete\n\n"}
{"name":"AddSubgroup.quotient_finite_of_isOpen","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝³ : AddGroup G\ninst✝² : TopologicalSpace G\ninst✝¹ : ContinuousAdd G\ninst✝ : CompactSpace G\nU : AddSubgroup G\nh : IsOpen ↑U\n⊢ Finite (HasQuotient.Quotient G U)","decl":"@[to_additive]\nlemma quotient_finite_of_isOpen [ContinuousMul G] [CompactSpace G] (U : Subgroup G)\n    (h : IsOpen (U : Set G)) : Finite (G ⧸ U) :=\n  have : DiscreteTopology (G ⧸ U) := U.discreteTopology h\n  finite_of_compact_of_discrete\n\n"}
{"name":"Subgroup.instFiniteQuotientOfContinuousMulOfCompactSpace","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝³ : Group G\ninst✝² : TopologicalSpace G\ninst✝¹ : ContinuousMul G\ninst✝ : CompactSpace G\nU : OpenSubgroup G\n⊢ Finite (HasQuotient.Quotient G ↑U)","decl":"@[to_additive]\ninstance [ContinuousMul G] [CompactSpace G] (U : OpenSubgroup G) : Finite (G ⧸ U.toSubgroup) :=\n  quotient_finite_of_isOpen U.toSubgroup U.isOpen\n\n"}
{"name":"AddSubgroup.instFiniteQuotientOfContinuousAddOfCompactSpace","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝³ : AddGroup G\ninst✝² : TopologicalSpace G\ninst✝¹ : ContinuousAdd G\ninst✝ : CompactSpace G\nU : OpenAddSubgroup G\n⊢ Finite (HasQuotient.Quotient G ↑U)","decl":"@[to_additive]\ninstance [ContinuousMul G] [CompactSpace G] (U : OpenSubgroup G) : Finite (G ⧸ U.toSubgroup) :=\n  quotient_finite_of_isOpen U.toSubgroup U.isOpen\n\n"}
{"name":"Subgroup.quotient_finite_of_isOpen'","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝³ : Group G\ninst✝² : TopologicalSpace G\ninst✝¹ : TopologicalGroup G\ninst✝ : CompactSpace G\nU : Subgroup G\nK : Subgroup (Subtype fun x => Membership.mem U x)\nhUopen : IsOpen ↑U\nhKopen : IsOpen ↑K\n⊢ Finite (HasQuotient.Quotient (Subtype fun x => Membership.mem U x) K)","decl":"@[to_additive]\nlemma quotient_finite_of_isOpen' [TopologicalGroup G] [CompactSpace G] (U : Subgroup G)\n    (K : Subgroup U) (hUopen : IsOpen (U : Set G)) (hKopen : IsOpen (K : Set U)) :\n    Finite (U ⧸ K) :=\n  have : CompactSpace U := isCompact_iff_compactSpace.mp <| IsClosed.isCompact <|\n    U.isClosed_of_isOpen hUopen\n  K.quotient_finite_of_isOpen hKopen\n\n"}
{"name":"AddSubgroup.quotient_finite_of_isOpen'","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝³ : AddGroup G\ninst✝² : TopologicalSpace G\ninst✝¹ : TopologicalAddGroup G\ninst✝ : CompactSpace G\nU : AddSubgroup G\nK : AddSubgroup (Subtype fun x => Membership.mem U x)\nhUopen : IsOpen ↑U\nhKopen : IsOpen ↑K\n⊢ Finite (HasQuotient.Quotient (Subtype fun x => Membership.mem U x) K)","decl":"@[to_additive]\nlemma quotient_finite_of_isOpen' [TopologicalGroup G] [CompactSpace G] (U : Subgroup G)\n    (K : Subgroup U) (hUopen : IsOpen (U : Set G)) (hKopen : IsOpen (K : Set U)) :\n    Finite (U ⧸ K) :=\n  have : CompactSpace U := isCompact_iff_compactSpace.mp <| IsClosed.isCompact <|\n    U.isClosed_of_isOpen hUopen\n  K.quotient_finite_of_isOpen hKopen\n\n"}
{"name":"Subgroup.instFiniteQuotientSubtypeMemOpenSubgroupOfTopologicalGroupOfCompactSpace","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝³ : Group G\ninst✝² : TopologicalSpace G\ninst✝¹ : TopologicalGroup G\ninst✝ : CompactSpace G\nU : OpenSubgroup G\nK : OpenSubgroup (Subtype fun x => Membership.mem U x)\n⊢ Finite (HasQuotient.Quotient (Subtype fun x => Membership.mem U x) ↑K)","decl":"@[to_additive]\ninstance [TopologicalGroup G] [CompactSpace G] (U : OpenSubgroup G) (K : OpenSubgroup U) :\n    Finite (U ⧸ K.toSubgroup) :=\n  quotient_finite_of_isOpen' U.toSubgroup K.toSubgroup U.isOpen K.isOpen\n\n"}
{"name":"AddSubgroup.instFiniteQuotientSubtypeMemOpenAddSubgroupOfTopologicalAddGroupOfCompactSpace","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝³ : AddGroup G\ninst✝² : TopologicalSpace G\ninst✝¹ : TopologicalAddGroup G\ninst✝ : CompactSpace G\nU : OpenAddSubgroup G\nK : OpenAddSubgroup (Subtype fun x => Membership.mem U x)\n⊢ Finite (HasQuotient.Quotient (Subtype fun x => Membership.mem U x) ↑K)","decl":"@[to_additive]\ninstance [TopologicalGroup G] [CompactSpace G] (U : OpenSubgroup G) (K : OpenSubgroup U) :\n    Finite (U ⧸ K.toSubgroup) :=\n  quotient_finite_of_isOpen' U.toSubgroup K.toSubgroup U.isOpen K.isOpen\n\n"}
{"name":"OpenSubgroup.toSubgroup_sup","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousMul G\nU V : OpenSubgroup G\n⊢ Eq (↑(Max.max U V)) (Max.max ↑U ↑V)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem toSubgroup_sup (U V : OpenSubgroup G) : (↑(U ⊔ V) : Subgroup G) = ↑U ⊔ ↑V := rfl\n\n-- Porting note: we override `toPartialorder` to get better `le`\n"}
{"name":"OpenAddSubgroup.toAddSubgroup_sup","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousAdd G\nU V : OpenAddSubgroup G\n⊢ Eq (↑(Max.max U V)) (Max.max ↑U ↑V)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem toSubgroup_sup (U V : OpenSubgroup G) : (↑(U ⊔ V) : Subgroup G) = ↑U ⊔ ↑V := rfl\n\n-- Porting note: we override `toPartialorder` to get better `le`\n"}
{"name":"Submodule.isOpen_mono","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁴ : CommRing R\ninst✝³ : AddCommGroup M\ninst✝² : TopologicalSpace M\ninst✝¹ : TopologicalAddGroup M\ninst✝ : Module R M\nU P : Submodule R M\nh : LE.le U P\nhU : IsOpen ↑U\n⊢ IsOpen ↑P","decl":"theorem isOpen_mono {U P : Submodule R M} (h : U ≤ P) (hU : IsOpen (U : Set M)) :\n    IsOpen (P : Set M) :=\n  @AddSubgroup.isOpen_mono M _ _ _ U.toAddSubgroup P.toAddSubgroup h hU\n\n"}
{"name":"Ideal.isOpen_of_isOpen_subideal","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"R : Type u_1\ninst✝² : CommRing R\ninst✝¹ : TopologicalSpace R\ninst✝ : TopologicalRing R\nU I : Ideal R\nh : LE.le U I\nhU : IsOpen ↑U\n⊢ IsOpen ↑I","decl":"theorem isOpen_of_isOpen_subideal {U I : Ideal R} (h : U ≤ I) (hU : IsOpen (U : Set R)) :\n    IsOpen (I : Set R) :=\n  @Submodule.isOpen_mono R R _ _ _ _ Semiring.toModule _ _ h hU\n\n"}
{"name":"OpenNormalSubgroup.mk.injEq","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\ntoOpenSubgroup✝ : OpenSubgroup G\nisNormal'✝ : autoParam (↑toOpenSubgroup✝).Normal _auto✝\ntoOpenSubgroup : OpenSubgroup G\nisNormal' : autoParam (↑toOpenSubgroup).Normal _auto✝\n⊢ Eq (Eq { toOpenSubgroup := toOpenSubgroup✝, isNormal' := isNormal'✝ } { toOpenSubgroup := toOpenSubgroup, isNormal' := isNormal' }) (Eq toOpenSubgroup✝ toOpenSubgroup)","decl":"/-- The type of open normal subgroups of a topological group. -/\n@[ext]\nstructure OpenNormalSubgroup (G : Type u) [Group G] [TopologicalSpace G]\n  extends OpenSubgroup G where\n  isNormal' : toSubgroup.Normal := by infer_instance\n\n"}
{"name":"OpenNormalSubgroup.mk.inj","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\ntoOpenSubgroup✝ : OpenSubgroup G\nisNormal'✝ : autoParam (↑toOpenSubgroup✝).Normal _auto✝\ntoOpenSubgroup : OpenSubgroup G\nisNormal' : autoParam (↑toOpenSubgroup).Normal _auto✝\nx✝ : Eq { toOpenSubgroup := toOpenSubgroup✝, isNormal' := isNormal'✝ } { toOpenSubgroup := toOpenSubgroup, isNormal' := isNormal' }\n⊢ Eq toOpenSubgroup✝ toOpenSubgroup","decl":"/-- The type of open normal subgroups of a topological group. -/\n@[ext]\nstructure OpenNormalSubgroup (G : Type u) [Group G] [TopologicalSpace G]\n  extends OpenSubgroup G where\n  isNormal' : toSubgroup.Normal := by infer_instance\n\n"}
{"name":"OpenNormalSubgroup.ext","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nx y : OpenNormalSubgroup G\ncarrier : Eq (↑x.toOpenSubgroup).carrier (↑y.toOpenSubgroup).carrier\n⊢ Eq x y","decl":"/-- The type of open normal subgroups of a topological group. -/\n@[ext]\nstructure OpenNormalSubgroup (G : Type u) [Group G] [TopologicalSpace G]\n  extends OpenSubgroup G where\n  isNormal' : toSubgroup.Normal := by infer_instance\n\n"}
{"name":"OpenNormalSubgroup.mk.sizeOf_spec","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : SizeOf G\ntoOpenSubgroup : OpenSubgroup G\nisNormal' : autoParam (↑toOpenSubgroup).Normal _auto✝\n⊢ Eq (SizeOf.sizeOf { toOpenSubgroup := toOpenSubgroup, isNormal' := isNormal' }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toOpenSubgroup)) (SizeOf.sizeOf isNormal'))","decl":"/-- The type of open normal subgroups of a topological group. -/\n@[ext]\nstructure OpenNormalSubgroup (G : Type u) [Group G] [TopologicalSpace G]\n  extends OpenSubgroup G where\n  isNormal' : toSubgroup.Normal := by infer_instance\n\n"}
{"name":"OpenNormalSubgroup.isNormal'","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nself : OpenNormalSubgroup G\n⊢ (↑self.toOpenSubgroup).Normal","decl":"/-- The type of open normal subgroups of a topological group. -/\n@[ext]\nstructure OpenNormalSubgroup (G : Type u) [Group G] [TopologicalSpace G]\n  extends OpenSubgroup G where\n  isNormal' : toSubgroup.Normal := by infer_instance\n\n"}
{"name":"OpenNormalSubgroup.ext_iff","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nx y : OpenNormalSubgroup G\n⊢ Iff (Eq x y) (Eq (↑x.toOpenSubgroup).carrier (↑y.toOpenSubgroup).carrier)","decl":"/-- The type of open normal subgroups of a topological group. -/\n@[ext]\nstructure OpenNormalSubgroup (G : Type u) [Group G] [TopologicalSpace G]\n  extends OpenSubgroup G where\n  isNormal' : toSubgroup.Normal := by infer_instance\n\n"}
{"name":"OpenNormalAddSubgroup.mk.injEq","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\ntoOpenAddSubgroup✝ : OpenAddSubgroup G\nisNormal'✝ : autoParam (↑toOpenAddSubgroup✝).Normal _auto✝\ntoOpenAddSubgroup : OpenAddSubgroup G\nisNormal' : autoParam (↑toOpenAddSubgroup).Normal _auto✝\n⊢ Eq (Eq { toOpenAddSubgroup := toOpenAddSubgroup✝, isNormal' := isNormal'✝ } { toOpenAddSubgroup := toOpenAddSubgroup, isNormal' := isNormal' }) (Eq toOpenAddSubgroup✝ toOpenAddSubgroup)","decl":"/-- The type of open normal subgroups of a topological additive group. -/\n@[ext]\nstructure OpenNormalAddSubgroup (G : Type u) [AddGroup G] [TopologicalSpace G]\n  extends OpenAddSubgroup G where\n  isNormal' : toAddSubgroup.Normal := by infer_instance\n\n"}
{"name":"OpenNormalAddSubgroup.mk.sizeOf_spec","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : SizeOf G\ntoOpenAddSubgroup : OpenAddSubgroup G\nisNormal' : autoParam (↑toOpenAddSubgroup).Normal _auto✝\n⊢ Eq (SizeOf.sizeOf { toOpenAddSubgroup := toOpenAddSubgroup, isNormal' := isNormal' }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toOpenAddSubgroup)) (SizeOf.sizeOf isNormal'))","decl":"/-- The type of open normal subgroups of a topological additive group. -/\n@[ext]\nstructure OpenNormalAddSubgroup (G : Type u) [AddGroup G] [TopologicalSpace G]\n  extends OpenAddSubgroup G where\n  isNormal' : toAddSubgroup.Normal := by infer_instance\n\n"}
{"name":"OpenNormalAddSubgroup.mk.inj","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\ntoOpenAddSubgroup✝ : OpenAddSubgroup G\nisNormal'✝ : autoParam (↑toOpenAddSubgroup✝).Normal _auto✝\ntoOpenAddSubgroup : OpenAddSubgroup G\nisNormal' : autoParam (↑toOpenAddSubgroup).Normal _auto✝\nx✝ : Eq { toOpenAddSubgroup := toOpenAddSubgroup✝, isNormal' := isNormal'✝ } { toOpenAddSubgroup := toOpenAddSubgroup, isNormal' := isNormal' }\n⊢ Eq toOpenAddSubgroup✝ toOpenAddSubgroup","decl":"/-- The type of open normal subgroups of a topological additive group. -/\n@[ext]\nstructure OpenNormalAddSubgroup (G : Type u) [AddGroup G] [TopologicalSpace G]\n  extends OpenAddSubgroup G where\n  isNormal' : toAddSubgroup.Normal := by infer_instance\n\n"}
{"name":"OpenNormalAddSubgroup.ext","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nx y : OpenNormalAddSubgroup G\ncarrier : Eq (↑x.toOpenAddSubgroup).carrier (↑y.toOpenAddSubgroup).carrier\n⊢ Eq x y","decl":"/-- The type of open normal subgroups of a topological additive group. -/\n@[ext]\nstructure OpenNormalAddSubgroup (G : Type u) [AddGroup G] [TopologicalSpace G]\n  extends OpenAddSubgroup G where\n  isNormal' : toAddSubgroup.Normal := by infer_instance\n\n"}
{"name":"OpenNormalAddSubgroup.ext_iff","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nx y : OpenNormalAddSubgroup G\n⊢ Iff (Eq x y) (Eq (↑x.toOpenAddSubgroup).carrier (↑y.toOpenAddSubgroup).carrier)","decl":"/-- The type of open normal subgroups of a topological additive group. -/\n@[ext]\nstructure OpenNormalAddSubgroup (G : Type u) [AddGroup G] [TopologicalSpace G]\n  extends OpenAddSubgroup G where\n  isNormal' : toAddSubgroup.Normal := by infer_instance\n\n"}
{"name":"OpenNormalAddSubgroup.isNormal'","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nself : OpenNormalAddSubgroup G\n⊢ (↑self.toOpenAddSubgroup).Normal","decl":"/-- The type of open normal subgroups of a topological additive group. -/\n@[ext]\nstructure OpenNormalAddSubgroup (G : Type u) [AddGroup G] [TopologicalSpace G]\n  extends OpenAddSubgroup G where\n  isNormal' : toAddSubgroup.Normal := by infer_instance\n\n"}
{"name":"OpenNormalAddSubgroup.instNormal","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nH : OpenNormalAddSubgroup G\n⊢ (↑H.toOpenAddSubgroup).Normal","decl":"@[to_additive]\ninstance (H : OpenNormalSubgroup G) : H.toSubgroup.Normal := H.isNormal'\n\n"}
{"name":"OpenNormalSubgroup.instNormal","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nH : OpenNormalSubgroup G\n⊢ (↑H.toOpenSubgroup).Normal","decl":"@[to_additive]\ninstance (H : OpenNormalSubgroup G) : H.toSubgroup.Normal := H.isNormal'\n\n"}
{"name":"OpenNormalSubgroup.toSubgroup_injective","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\n⊢ Function.Injective fun H => ↑H.toOpenSubgroup","decl":"@[to_additive]\ntheorem toSubgroup_injective : Function.Injective\n    (fun H ↦ H.toOpenSubgroup.toSubgroup : OpenNormalSubgroup G → Subgroup G) :=\n  fun A B h ↦ by\n  ext\n  dsimp at h\n  rw [h]\n\n"}
{"name":"OpenNormalAddSubgroup.toAddSubgroup_injective","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\n⊢ Function.Injective fun H => ↑H.toOpenAddSubgroup","decl":"@[to_additive]\ntheorem toSubgroup_injective : Function.Injective\n    (fun H ↦ H.toOpenSubgroup.toSubgroup : OpenNormalSubgroup G → Subgroup G) :=\n  fun A B h ↦ by\n  ext\n  dsimp at h\n  rw [h]\n\n"}
{"name":"OpenNormalAddSubgroup.instAddSubgroupClass","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\n⊢ AddSubgroupClass (OpenNormalAddSubgroup G) G","decl":"@[to_additive]\ninstance : SubgroupClass (OpenNormalSubgroup G) G where\n  mul_mem := Subsemigroup.mul_mem' _\n  one_mem U := U.one_mem'\n  inv_mem := Subgroup.inv_mem' _\n\n"}
{"name":"OpenNormalSubgroup.instSubgroupClass","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\n⊢ SubgroupClass (OpenNormalSubgroup G) G","decl":"@[to_additive]\ninstance : SubgroupClass (OpenNormalSubgroup G) G where\n  mul_mem := Subsemigroup.mul_mem' _\n  one_mem U := U.one_mem'\n  inv_mem := Subgroup.inv_mem' _\n\n"}
{"name":"TopologicalAddGroup.addNegClosureNhd.isOpen","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : TopologicalSpace G\nT W : Set G\ninst✝ : AddGroup G\nself : TopologicalAddGroup.addNegClosureNhd T W\n⊢ IsOpen T","decl":"structure TopologicalAddGroup.addNegClosureNhd (T W : Set G) [AddGroup G] : Prop where\n  nhd : T ∈ 𝓝 0\n  neg : -T = T\n  isOpen : IsOpen T\n  add : W + T ⊆ W\n\n"}
{"name":"TopologicalAddGroup.addNegClosureNhd.neg","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : TopologicalSpace G\nT W : Set G\ninst✝ : AddGroup G\nself : TopologicalAddGroup.addNegClosureNhd T W\n⊢ Eq (Neg.neg T) T","decl":"structure TopologicalAddGroup.addNegClosureNhd (T W : Set G) [AddGroup G] : Prop where\n  nhd : T ∈ 𝓝 0\n  neg : -T = T\n  isOpen : IsOpen T\n  add : W + T ⊆ W\n\n"}
{"name":"TopologicalAddGroup.addNegClosureNhd.nhd","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : TopologicalSpace G\nT W : Set G\ninst✝ : AddGroup G\nself : TopologicalAddGroup.addNegClosureNhd T W\n⊢ Membership.mem (nhds 0) T","decl":"structure TopologicalAddGroup.addNegClosureNhd (T W : Set G) [AddGroup G] : Prop where\n  nhd : T ∈ 𝓝 0\n  neg : -T = T\n  isOpen : IsOpen T\n  add : W + T ⊆ W\n\n"}
{"name":"TopologicalAddGroup.addNegClosureNhd.add","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : TopologicalSpace G\nT W : Set G\ninst✝ : AddGroup G\nself : TopologicalAddGroup.addNegClosureNhd T W\n⊢ HasSubset.Subset (HAdd.hAdd W T) W","decl":"structure TopologicalAddGroup.addNegClosureNhd (T W : Set G) [AddGroup G] : Prop where\n  nhd : T ∈ 𝓝 0\n  neg : -T = T\n  isOpen : IsOpen T\n  add : W + T ⊆ W\n\n"}
{"name":"TopologicalGroup.mulInvClosureNhd.isOpen","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : TopologicalSpace G\nT W : Set G\ninst✝ : Group G\nself : TopologicalGroup.mulInvClosureNhd T W\n⊢ IsOpen T","decl":"/-- For a set `W`, `T` is a neighborhood of `1` which is open, statble under inverse and satisfies\n`T * W ⊆ W`. -/\n@[to_additive\n\"For a set `W`, `T` is a neighborhood of `0` which is open, stable under negation and satisfies\n`T + W ⊆ W`. \"]\nstructure TopologicalGroup.mulInvClosureNhd (T W : Set G) [Group G] : Prop where\n  nhd : T ∈ 𝓝 1\n  inv : T⁻¹ = T\n  isOpen : IsOpen T\n  mul : W * T ⊆ W\n\n"}
{"name":"TopologicalGroup.mulInvClosureNhd.inv","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : TopologicalSpace G\nT W : Set G\ninst✝ : Group G\nself : TopologicalGroup.mulInvClosureNhd T W\n⊢ Eq (Inv.inv T) T","decl":"/-- For a set `W`, `T` is a neighborhood of `1` which is open, statble under inverse and satisfies\n`T * W ⊆ W`. -/\n@[to_additive\n\"For a set `W`, `T` is a neighborhood of `0` which is open, stable under negation and satisfies\n`T + W ⊆ W`. \"]\nstructure TopologicalGroup.mulInvClosureNhd (T W : Set G) [Group G] : Prop where\n  nhd : T ∈ 𝓝 1\n  inv : T⁻¹ = T\n  isOpen : IsOpen T\n  mul : W * T ⊆ W\n\n"}
{"name":"TopologicalGroup.mulInvClosureNhd.mul","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : TopologicalSpace G\nT W : Set G\ninst✝ : Group G\nself : TopologicalGroup.mulInvClosureNhd T W\n⊢ HasSubset.Subset (HMul.hMul W T) W","decl":"/-- For a set `W`, `T` is a neighborhood of `1` which is open, statble under inverse and satisfies\n`T * W ⊆ W`. -/\n@[to_additive\n\"For a set `W`, `T` is a neighborhood of `0` which is open, stable under negation and satisfies\n`T + W ⊆ W`. \"]\nstructure TopologicalGroup.mulInvClosureNhd (T W : Set G) [Group G] : Prop where\n  nhd : T ∈ 𝓝 1\n  inv : T⁻¹ = T\n  isOpen : IsOpen T\n  mul : W * T ⊆ W\n\n"}
{"name":"TopologicalGroup.mulInvClosureNhd.nhd","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝¹ : TopologicalSpace G\nT W : Set G\ninst✝ : Group G\nself : TopologicalGroup.mulInvClosureNhd T W\n⊢ Membership.mem (nhds 1) T","decl":"/-- For a set `W`, `T` is a neighborhood of `1` which is open, statble under inverse and satisfies\n`T * W ⊆ W`. -/\n@[to_additive\n\"For a set `W`, `T` is a neighborhood of `0` which is open, stable under negation and satisfies\n`T + W ⊆ W`. \"]\nstructure TopologicalGroup.mulInvClosureNhd (T W : Set G) [Group G] : Prop where\n  nhd : T ∈ 𝓝 1\n  inv : T⁻¹ = T\n  isOpen : IsOpen T\n  mul : W * T ⊆ W\n\n"}
{"name":"TopologicalAddGroup.exist_add_closure_nhd","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝³ : TopologicalSpace G\ninst✝² : AddGroup G\ninst✝¹ : TopologicalAddGroup G\ninst✝ : CompactSpace G\nW : Set G\nWClopen : IsClopen W\n⊢ Exists fun T => And (Membership.mem (nhds 0) T) (HasSubset.Subset (HAdd.hAdd W T) W)","decl":"@[to_additive]\nlemma exist_mul_closure_nhd {W : Set G} (WClopen : IsClopen W) : ∃ T ∈ 𝓝 (1 : G), W * T ⊆ W := by\n  apply WClopen.isClosed.isCompact.induction_on (p := fun S ↦ ∃ T ∈ 𝓝 (1 : G), S * T ⊆ W)\n    ⟨Set.univ ,by simp only [univ_mem, empty_mul, empty_subset, and_self]⟩\n    (fun _ _ huv ⟨T, hT, mem⟩ ↦ ⟨T, hT, (mul_subset_mul_right huv).trans mem⟩)\n    fun U V ⟨T₁, hT₁, mem1⟩ ⟨T₂, hT₂, mem2⟩ ↦ ⟨T₁ ∩ T₂, inter_mem hT₁ hT₂, by\n      rw [union_mul]\n      exact union_subset (mul_subset_mul_left inter_subset_left |>.trans mem1)\n        (mul_subset_mul_left inter_subset_right |>.trans mem2) ⟩\n  intro x memW\n  have : (x, 1) ∈ (fun p ↦ p.1 * p.2) ⁻¹' W := by simp [memW]\n  rcases isOpen_prod_iff.mp (continuous_mul.isOpen_preimage W <| WClopen.2) x 1 this with\n    ⟨U, V, Uopen, Vopen, xmemU, onememV, prodsub⟩\n  have h6 : U * V ⊆ W := mul_subset_iff.mpr (fun _ hx _ hy ↦ prodsub (mk_mem_prod hx hy))\n  exact ⟨U ∩ W, ⟨U, Uopen.mem_nhds xmemU, W, fun _ a ↦ a, rfl⟩,\n    V, IsOpen.mem_nhds Vopen onememV, fun _ a ↦ h6 ((mul_subset_mul_right inter_subset_left) a)⟩\n\n"}
{"name":"TopologicalGroup.exist_mul_closure_nhd","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝³ : TopologicalSpace G\ninst✝² : Group G\ninst✝¹ : TopologicalGroup G\ninst✝ : CompactSpace G\nW : Set G\nWClopen : IsClopen W\n⊢ Exists fun T => And (Membership.mem (nhds 1) T) (HasSubset.Subset (HMul.hMul W T) W)","decl":"@[to_additive]\nlemma exist_mul_closure_nhd {W : Set G} (WClopen : IsClopen W) : ∃ T ∈ 𝓝 (1 : G), W * T ⊆ W := by\n  apply WClopen.isClosed.isCompact.induction_on (p := fun S ↦ ∃ T ∈ 𝓝 (1 : G), S * T ⊆ W)\n    ⟨Set.univ ,by simp only [univ_mem, empty_mul, empty_subset, and_self]⟩\n    (fun _ _ huv ⟨T, hT, mem⟩ ↦ ⟨T, hT, (mul_subset_mul_right huv).trans mem⟩)\n    fun U V ⟨T₁, hT₁, mem1⟩ ⟨T₂, hT₂, mem2⟩ ↦ ⟨T₁ ∩ T₂, inter_mem hT₁ hT₂, by\n      rw [union_mul]\n      exact union_subset (mul_subset_mul_left inter_subset_left |>.trans mem1)\n        (mul_subset_mul_left inter_subset_right |>.trans mem2) ⟩\n  intro x memW\n  have : (x, 1) ∈ (fun p ↦ p.1 * p.2) ⁻¹' W := by simp [memW]\n  rcases isOpen_prod_iff.mp (continuous_mul.isOpen_preimage W <| WClopen.2) x 1 this with\n    ⟨U, V, Uopen, Vopen, xmemU, onememV, prodsub⟩\n  have h6 : U * V ⊆ W := mul_subset_iff.mpr (fun _ hx _ hy ↦ prodsub (mk_mem_prod hx hy))\n  exact ⟨U ∩ W, ⟨U, Uopen.mem_nhds xmemU, W, fun _ a ↦ a, rfl⟩,\n    V, IsOpen.mem_nhds Vopen onememV, fun _ a ↦ h6 ((mul_subset_mul_right inter_subset_left) a)⟩\n\n"}
{"name":"TopologicalGroup.exists_mulInvClosureNhd","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝³ : TopologicalSpace G\ninst✝² : Group G\ninst✝¹ : TopologicalGroup G\ninst✝ : CompactSpace G\nW : Set G\nWClopen : IsClopen W\n⊢ Exists fun T => TopologicalGroup.mulInvClosureNhd T W","decl":"@[to_additive]\nlemma exists_mulInvClosureNhd {W : Set G} (WClopen : IsClopen W) :\n    ∃ T, mulInvClosureNhd T W := by\n  rcases exist_mul_closure_nhd WClopen with ⟨S, Smemnhds, mulclose⟩\n  rcases mem_nhds_iff.mp Smemnhds with ⟨U, UsubS, Uopen, onememU⟩\n  use U ∩ U⁻¹\n  constructor\n  · simp [Uopen.mem_nhds onememU, inv_mem_nhds_one]\n  · simp [inter_comm]\n  · exact Uopen.inter Uopen.inv\n  · exact fun a ha ↦ mulclose (mul_subset_mul_left UsubS (mul_subset_mul_left inter_subset_left ha))\n\n"}
{"name":"TopologicalAddGroup.exists_addNegClosureNhd","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_1\ninst✝³ : TopologicalSpace G\ninst✝² : AddGroup G\ninst✝¹ : TopologicalAddGroup G\ninst✝ : CompactSpace G\nW : Set G\nWClopen : IsClopen W\n⊢ Exists fun T => TopologicalAddGroup.addNegClosureNhd T W","decl":"@[to_additive]\nlemma exists_mulInvClosureNhd {W : Set G} (WClopen : IsClopen W) :\n    ∃ T, mulInvClosureNhd T W := by\n  rcases exist_mul_closure_nhd WClopen with ⟨S, Smemnhds, mulclose⟩\n  rcases mem_nhds_iff.mp Smemnhds with ⟨U, UsubS, Uopen, onememU⟩\n  use U ∩ U⁻¹\n  constructor\n  · simp [Uopen.mem_nhds onememU, inv_mem_nhds_one]\n  · simp [inter_comm]\n  · exact Uopen.inter Uopen.inv\n  · exact fun a ha ↦ mulclose (mul_subset_mul_left UsubS (mul_subset_mul_left inter_subset_left ha))\n\n"}
{"name":"TopologicalAddGroup.exist_openAddSubgroup_sub_clopen_nhd_of_zero","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_2\ninst✝³ : AddGroup G\ninst✝² : TopologicalSpace G\ninst✝¹ : TopologicalAddGroup G\ninst✝ : CompactSpace G\nW : Set G\nWClopen : IsClopen W\neinW : Membership.mem W 0\n⊢ Exists fun H => HasSubset.Subset (↑H) W","decl":"@[to_additive]\ntheorem exist_openSubgroup_sub_clopen_nhd_of_one {G : Type*} [Group G] [TopologicalSpace G]\n    [TopologicalGroup G] [CompactSpace G] {W : Set G} (WClopen : IsClopen W) (einW : 1 ∈ W) :\n    ∃ H : OpenSubgroup G, (H : Set G) ⊆ W := by\n  rcases exists_mulInvClosureNhd WClopen with ⟨V, hV⟩\n  let S : Subgroup G := {\n    carrier := ⋃ n , V ^ (n + 1)\n    mul_mem' := fun ha hb ↦ by\n      rcases mem_iUnion.mp ha with ⟨k, hk⟩\n      rcases mem_iUnion.mp hb with ⟨l, hl⟩\n      apply mem_iUnion.mpr\n      use k + 1 + l\n      rw [add_assoc, pow_add]\n      exact Set.mul_mem_mul hk hl\n    one_mem' := by\n      apply mem_iUnion.mpr\n      use 0\n      simp [mem_of_mem_nhds hV.nhd]\n    inv_mem' := fun ha ↦ by\n      rcases mem_iUnion.mp ha with ⟨k, hk⟩\n      apply mem_iUnion.mpr\n      use k\n      rw [← hV.inv]\n      simpa only [inv_pow, Set.mem_inv, inv_inv] using hk }\n  have : IsOpen (⋃ n , V ^ (n + 1)) := by\n    refine isOpen_iUnion (fun n ↦ ?_)\n    rw [pow_succ]\n    exact hV.isOpen.mul_left\n  use ⟨S, this⟩\n  have mulVpow (n : ℕ) : W * V ^ (n + 1) ⊆ W := by\n    induction' n with n ih\n    · simp [hV.mul]\n    · rw [pow_succ, ← mul_assoc]\n      exact (Set.mul_subset_mul_right ih).trans hV.mul\n  have (n : ℕ) : V ^ (n + 1) ⊆ W * V ^ (n + 1) := by\n    intro x xin\n    rw [Set.mem_mul]\n    use 1, einW, x, xin\n    rw [one_mul]\n  apply iUnion_subset fun i _ a ↦ mulVpow i (this i a)\n\n"}
{"name":"TopologicalGroup.exist_openSubgroup_sub_clopen_nhd_of_one","module":"Mathlib.Topology.Algebra.OpenSubgroup","initialProofState":"G : Type u_2\ninst✝³ : Group G\ninst✝² : TopologicalSpace G\ninst✝¹ : TopologicalGroup G\ninst✝ : CompactSpace G\nW : Set G\nWClopen : IsClopen W\neinW : Membership.mem W 1\n⊢ Exists fun H => HasSubset.Subset (↑H) W","decl":"@[to_additive]\ntheorem exist_openSubgroup_sub_clopen_nhd_of_one {G : Type*} [Group G] [TopologicalSpace G]\n    [TopologicalGroup G] [CompactSpace G] {W : Set G} (WClopen : IsClopen W) (einW : 1 ∈ W) :\n    ∃ H : OpenSubgroup G, (H : Set G) ⊆ W := by\n  rcases exists_mulInvClosureNhd WClopen with ⟨V, hV⟩\n  let S : Subgroup G := {\n    carrier := ⋃ n , V ^ (n + 1)\n    mul_mem' := fun ha hb ↦ by\n      rcases mem_iUnion.mp ha with ⟨k, hk⟩\n      rcases mem_iUnion.mp hb with ⟨l, hl⟩\n      apply mem_iUnion.mpr\n      use k + 1 + l\n      rw [add_assoc, pow_add]\n      exact Set.mul_mem_mul hk hl\n    one_mem' := by\n      apply mem_iUnion.mpr\n      use 0\n      simp [mem_of_mem_nhds hV.nhd]\n    inv_mem' := fun ha ↦ by\n      rcases mem_iUnion.mp ha with ⟨k, hk⟩\n      apply mem_iUnion.mpr\n      use k\n      rw [← hV.inv]\n      simpa only [inv_pow, Set.mem_inv, inv_inv] using hk }\n  have : IsOpen (⋃ n , V ^ (n + 1)) := by\n    refine isOpen_iUnion (fun n ↦ ?_)\n    rw [pow_succ]\n    exact hV.isOpen.mul_left\n  use ⟨S, this⟩\n  have mulVpow (n : ℕ) : W * V ^ (n + 1) ⊆ W := by\n    induction' n with n ih\n    · simp [hV.mul]\n    · rw [pow_succ, ← mul_assoc]\n      exact (Set.mul_subset_mul_right ih).trans hV.mul\n  have (n : ℕ) : V ^ (n + 1) ⊆ W * V ^ (n + 1) := by\n    intro x xin\n    rw [Set.mem_mul]\n    use 1, einW, x, xin\n    rw [one_mul]\n  apply iUnion_subset fun i _ a ↦ mulVpow i (this i a)\n\n"}
