{"name":"AffineSubspace.mem_perpBisector_iff_inner_eq_zero'","module":"Mathlib.Geometry.Euclidean.PerpBisector","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝³ : NormedAddCommGroup V\ninst✝² : InnerProductSpace Real V\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\nc p₁ p₂ : P\n⊢ Iff (Membership.mem (AffineSubspace.perpBisector p₁ p₂) c) (Eq (Inner.inner (VSub.vsub p₂ p₁) (VSub.vsub c (midpoint Real p₁ p₂))) 0)","decl":"/-- A point `c` belongs the perpendicular bisector of `[p₁, p₂] iff `p₂ -ᵥ p₁` is orthogonal to\n`c -ᵥ midpoint ℝ p₁ p₂`. -/\ntheorem mem_perpBisector_iff_inner_eq_zero' :\n    c ∈ perpBisector p₁ p₂ ↔ ⟪p₂ -ᵥ p₁, c -ᵥ midpoint ℝ p₁ p₂⟫ = 0 :=\n  Iff.rfl\n\n"}
{"name":"AffineSubspace.mem_perpBisector_iff_inner_eq_zero","module":"Mathlib.Geometry.Euclidean.PerpBisector","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝³ : NormedAddCommGroup V\ninst✝² : InnerProductSpace Real V\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\nc p₁ p₂ : P\n⊢ Iff (Membership.mem (AffineSubspace.perpBisector p₁ p₂) c) (Eq (Inner.inner (VSub.vsub c (midpoint Real p₁ p₂)) (VSub.vsub p₂ p₁)) 0)","decl":"/-- A point `c` belongs the perpendicular bisector of `[p₁, p₂] iff `c -ᵥ midpoint ℝ p₁ p₂` is\northogonal to `p₂ -ᵥ p₁`. -/\ntheorem mem_perpBisector_iff_inner_eq_zero :\n    c ∈ perpBisector p₁ p₂ ↔ ⟪c -ᵥ midpoint ℝ p₁ p₂, p₂ -ᵥ p₁⟫ = 0 :=\n  inner_eq_zero_symm\n\n"}
{"name":"AffineSubspace.mem_perpBisector_iff_inner_pointReflection_vsub_eq_zero","module":"Mathlib.Geometry.Euclidean.PerpBisector","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝³ : NormedAddCommGroup V\ninst✝² : InnerProductSpace Real V\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\nc p₁ p₂ : P\n⊢ Iff (Membership.mem (AffineSubspace.perpBisector p₁ p₂) c) (Eq (Inner.inner (VSub.vsub ((Equiv.pointReflection c) p₁) p₂) (VSub.vsub p₂ p₁)) 0)","decl":"theorem mem_perpBisector_iff_inner_pointReflection_vsub_eq_zero :\n    c ∈ perpBisector p₁ p₂ ↔ ⟪Equiv.pointReflection c p₁ -ᵥ p₂, p₂ -ᵥ p₁⟫ = 0 := by\n  rw [mem_perpBisector_iff_inner_eq_zero, Equiv.pointReflection_apply,\n    vsub_midpoint, invOf_eq_inv, ← smul_add, real_inner_smul_left, vadd_vsub_assoc]\n  simp\n\n"}
{"name":"AffineSubspace.mem_perpBisector_pointReflection_iff_inner_eq_zero","module":"Mathlib.Geometry.Euclidean.PerpBisector","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝³ : NormedAddCommGroup V\ninst✝² : InnerProductSpace Real V\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\nc p₁ p₂ : P\n⊢ Iff (Membership.mem (AffineSubspace.perpBisector p₁ ((Equiv.pointReflection p₂) p₁)) c) (Eq (Inner.inner (VSub.vsub c p₂) (VSub.vsub p₁ p₂)) 0)","decl":"theorem mem_perpBisector_pointReflection_iff_inner_eq_zero :\n    c ∈ perpBisector p₁ (Equiv.pointReflection p₂ p₁) ↔ ⟪c -ᵥ p₂, p₁ -ᵥ p₂⟫ = 0 := by\n  rw [mem_perpBisector_iff_inner_eq_zero, midpoint_pointReflection_right,\n    Equiv.pointReflection_apply, vadd_vsub_assoc, inner_add_right, add_self_eq_zero,\n    ← neg_eq_zero, ← inner_neg_right, neg_vsub_eq_vsub_rev]\n\n"}
{"name":"AffineSubspace.midpoint_mem_perpBisector","module":"Mathlib.Geometry.Euclidean.PerpBisector","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝³ : NormedAddCommGroup V\ninst✝² : InnerProductSpace Real V\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\np₁ p₂ : P\n⊢ Membership.mem (AffineSubspace.perpBisector p₁ p₂) (midpoint Real p₁ p₂)","decl":"theorem midpoint_mem_perpBisector (p₁ p₂ : P) :\n    midpoint ℝ p₁ p₂ ∈ perpBisector p₁ p₂ := by\n  simp [mem_perpBisector_iff_inner_eq_zero]\n\n"}
{"name":"AffineSubspace.perpBisector_nonempty","module":"Mathlib.Geometry.Euclidean.PerpBisector","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝³ : NormedAddCommGroup V\ninst✝² : InnerProductSpace Real V\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\np₁ p₂ : P\n⊢ (↑(AffineSubspace.perpBisector p₁ p₂)).Nonempty","decl":"theorem perpBisector_nonempty : (perpBisector p₁ p₂ : Set P).Nonempty :=\n  ⟨_, midpoint_mem_perpBisector _ _⟩\n\n"}
{"name":"AffineSubspace.direction_perpBisector","module":"Mathlib.Geometry.Euclidean.PerpBisector","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝³ : NormedAddCommGroup V\ninst✝² : InnerProductSpace Real V\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\np₁ p₂ : P\n⊢ Eq (AffineSubspace.perpBisector p₁ p₂).direction (Submodule.span Real (Singleton.singleton (VSub.vsub p₂ p₁))).orthogonal","decl":"@[simp]\ntheorem direction_perpBisector (p₁ p₂ : P) :\n    (perpBisector p₁ p₂).direction = (ℝ ∙ (p₂ -ᵥ p₁))ᗮ := by\n  erw [perpBisector, comap_symm, map_direction, Submodule.map_id,\n    Submodule.toAffineSubspace_direction]\n  ext x\n  exact Submodule.mem_orthogonal_singleton_iff_inner_right.symm\n\n"}
{"name":"AffineSubspace.mem_perpBisector_iff_inner_eq_inner","module":"Mathlib.Geometry.Euclidean.PerpBisector","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝³ : NormedAddCommGroup V\ninst✝² : InnerProductSpace Real V\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\nc p₁ p₂ : P\n⊢ Iff (Membership.mem (AffineSubspace.perpBisector p₁ p₂) c) (Eq (Inner.inner (VSub.vsub c p₁) (VSub.vsub p₂ p₁)) (Inner.inner (VSub.vsub c p₂) (VSub.vsub p₁ p₂)))","decl":"theorem mem_perpBisector_iff_inner_eq_inner :\n    c ∈ perpBisector p₁ p₂ ↔ ⟪c -ᵥ p₁, p₂ -ᵥ p₁⟫ = ⟪c -ᵥ p₂, p₁ -ᵥ p₂⟫ := by\n  rw [Iff.comm, mem_perpBisector_iff_inner_eq_zero, ← add_neg_eq_zero, ← inner_neg_right,\n    neg_vsub_eq_vsub_rev, ← inner_add_left, vsub_midpoint, invOf_eq_inv, ← smul_add,\n    real_inner_smul_left]; simp\n\n"}
{"name":"AffineSubspace.mem_perpBisector_iff_inner_eq","module":"Mathlib.Geometry.Euclidean.PerpBisector","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝³ : NormedAddCommGroup V\ninst✝² : InnerProductSpace Real V\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\nc p₁ p₂ : P\n⊢ Iff (Membership.mem (AffineSubspace.perpBisector p₁ p₂) c) (Eq (Inner.inner (VSub.vsub c p₁) (VSub.vsub p₂ p₁)) (HDiv.hDiv (HPow.hPow (Dist.dist p₁ p₂) 2) 2))","decl":"theorem mem_perpBisector_iff_inner_eq :\n    c ∈ perpBisector p₁ p₂ ↔ ⟪c -ᵥ p₁, p₂ -ᵥ p₁⟫ = (dist p₁ p₂) ^ 2 / 2 := by\n  rw [mem_perpBisector_iff_inner_eq_zero, ← vsub_sub_vsub_cancel_right _ _ p₁, inner_sub_left,\n    sub_eq_zero, midpoint_vsub_left, invOf_eq_inv, real_inner_smul_left, real_inner_self_eq_norm_sq,\n    dist_eq_norm_vsub' V, div_eq_inv_mul]\n\n"}
{"name":"AffineSubspace.mem_perpBisector_iff_dist_eq","module":"Mathlib.Geometry.Euclidean.PerpBisector","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝³ : NormedAddCommGroup V\ninst✝² : InnerProductSpace Real V\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\nc p₁ p₂ : P\n⊢ Iff (Membership.mem (AffineSubspace.perpBisector p₁ p₂) c) (Eq (Dist.dist c p₁) (Dist.dist c p₂))","decl":"theorem mem_perpBisector_iff_dist_eq : c ∈ perpBisector p₁ p₂ ↔ dist c p₁ = dist c p₂ := by\n  rw [dist_eq_norm_vsub V, dist_eq_norm_vsub V, ← real_inner_add_sub_eq_zero_iff,\n    vsub_sub_vsub_cancel_left, inner_add_left, add_eq_zero_iff_eq_neg, ← inner_neg_right,\n    neg_vsub_eq_vsub_rev, mem_perpBisector_iff_inner_eq_inner]\n\n"}
{"name":"AffineSubspace.mem_perpBisector_iff_dist_eq'","module":"Mathlib.Geometry.Euclidean.PerpBisector","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝³ : NormedAddCommGroup V\ninst✝² : InnerProductSpace Real V\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\nc p₁ p₂ : P\n⊢ Iff (Membership.mem (AffineSubspace.perpBisector p₁ p₂) c) (Eq (Dist.dist p₁ c) (Dist.dist p₂ c))","decl":"theorem mem_perpBisector_iff_dist_eq' : c ∈ perpBisector p₁ p₂ ↔ dist p₁ c = dist p₂ c := by\n  simp only [mem_perpBisector_iff_dist_eq, dist_comm]\n\n"}
{"name":"AffineSubspace.perpBisector_comm","module":"Mathlib.Geometry.Euclidean.PerpBisector","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝³ : NormedAddCommGroup V\ninst✝² : InnerProductSpace Real V\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\np₁ p₂ : P\n⊢ Eq (AffineSubspace.perpBisector p₁ p₂) (AffineSubspace.perpBisector p₂ p₁)","decl":"theorem perpBisector_comm (p₁ p₂ : P) : perpBisector p₁ p₂ = perpBisector p₂ p₁ := by\n  ext c; simp only [mem_perpBisector_iff_dist_eq, eq_comm]\n\n"}
{"name":"AffineSubspace.right_mem_perpBisector","module":"Mathlib.Geometry.Euclidean.PerpBisector","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝³ : NormedAddCommGroup V\ninst✝² : InnerProductSpace Real V\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\np₁ p₂ : P\n⊢ Iff (Membership.mem (AffineSubspace.perpBisector p₁ p₂) p₂) (Eq p₁ p₂)","decl":"@[simp] theorem right_mem_perpBisector : p₂ ∈ perpBisector p₁ p₂ ↔ p₁ = p₂ := by\n  simpa [mem_perpBisector_iff_inner_eq_inner] using eq_comm\n\n"}
{"name":"AffineSubspace.left_mem_perpBisector","module":"Mathlib.Geometry.Euclidean.PerpBisector","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝³ : NormedAddCommGroup V\ninst✝² : InnerProductSpace Real V\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\np₁ p₂ : P\n⊢ Iff (Membership.mem (AffineSubspace.perpBisector p₁ p₂) p₁) (Eq p₁ p₂)","decl":"@[simp] theorem left_mem_perpBisector : p₁ ∈ perpBisector p₁ p₂ ↔ p₁ = p₂ := by\n  rw [perpBisector_comm, right_mem_perpBisector, eq_comm]\n\n"}
{"name":"AffineSubspace.perpBisector_self","module":"Mathlib.Geometry.Euclidean.PerpBisector","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝³ : NormedAddCommGroup V\ninst✝² : InnerProductSpace Real V\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\np : P\n⊢ Eq (AffineSubspace.perpBisector p p) Top.top","decl":"@[simp] theorem perpBisector_self (p : P) : perpBisector p p = ⊤ :=\n  top_unique fun _ ↦ by simp [mem_perpBisector_iff_inner_eq_inner]\n\n"}
{"name":"AffineSubspace.perpBisector_eq_top","module":"Mathlib.Geometry.Euclidean.PerpBisector","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝³ : NormedAddCommGroup V\ninst✝² : InnerProductSpace Real V\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\np₁ p₂ : P\n⊢ Iff (Eq (AffineSubspace.perpBisector p₁ p₂) Top.top) (Eq p₁ p₂)","decl":"@[simp] theorem perpBisector_eq_top : perpBisector p₁ p₂ = ⊤ ↔ p₁ = p₂ := by\n  refine ⟨fun h ↦ ?_, fun h ↦ h ▸ perpBisector_self _⟩\n  rw [← left_mem_perpBisector, h]\n  trivial\n\n"}
{"name":"AffineSubspace.perpBisector_ne_bot","module":"Mathlib.Geometry.Euclidean.PerpBisector","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝³ : NormedAddCommGroup V\ninst✝² : InnerProductSpace Real V\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\np₁ p₂ : P\n⊢ Ne (AffineSubspace.perpBisector p₁ p₂) Bot.bot","decl":"@[simp] theorem perpBisector_ne_bot : perpBisector p₁ p₂ ≠ ⊥ := by\n  rw [← nonempty_iff_ne_bot]; exact perpBisector_nonempty\n\n"}
{"name":"EuclideanGeometry.inner_vsub_vsub_of_dist_eq_of_dist_eq","module":"Mathlib.Geometry.Euclidean.PerpBisector","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝³ : NormedAddCommGroup V\ninst✝² : InnerProductSpace Real V\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\nc₁ c₂ p₁ p₂ : P\nhc₁ : Eq (Dist.dist p₁ c₁) (Dist.dist p₂ c₁)\nhc₂ : Eq (Dist.dist p₁ c₂) (Dist.dist p₂ c₂)\n⊢ Eq (Inner.inner (VSub.vsub c₂ c₁) (VSub.vsub p₂ p₁)) 0","decl":"/-- Suppose that `c₁` is equidistant from `p₁` and `p₂`, and the same applies to `c₂`. Then the\nvector between `c₁` and `c₂` is orthogonal to that between `p₁` and `p₂`. (In two dimensions, this\nsays that the diagonals of a kite are orthogonal.) -/\ntheorem inner_vsub_vsub_of_dist_eq_of_dist_eq {c₁ c₂ p₁ p₂ : P} (hc₁ : dist p₁ c₁ = dist p₂ c₁)\n    (hc₂ : dist p₁ c₂ = dist p₂ c₂) : ⟪c₂ -ᵥ c₁, p₂ -ᵥ p₁⟫ = 0 := by\n  rw [← Submodule.mem_orthogonal_singleton_iff_inner_left, ← direction_perpBisector]\n  apply vsub_mem_direction <;> rwa [mem_perpBisector_iff_dist_eq']\n\n"}
{"name":"Isometry.preimage_perpBisector","module":"Mathlib.Geometry.Euclidean.PerpBisector","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝⁷ : NormedAddCommGroup V\ninst✝⁶ : InnerProductSpace Real V\ninst✝⁵ : MetricSpace P\ninst✝⁴ : NormedAddTorsor V P\nV' : Type u_3\nP' : Type u_4\ninst✝³ : NormedAddCommGroup V'\ninst✝² : InnerProductSpace Real V'\ninst✝¹ : MetricSpace P'\ninst✝ : NormedAddTorsor V' P'\nf : P → P'\nh : Isometry f\np₁ p₂ : P\n⊢ Eq (Set.preimage f ↑(AffineSubspace.perpBisector (f p₁) (f p₂))) ↑(AffineSubspace.perpBisector p₁ p₂)","decl":"theorem Isometry.preimage_perpBisector {f : P → P'} (h : Isometry f) (p₁ p₂ : P) :\n    f ⁻¹' (perpBisector (f p₁) (f p₂)) = perpBisector p₁ p₂ := by\n  ext x; simp [mem_perpBisector_iff_dist_eq, h.dist_eq]\n\n"}
{"name":"Isometry.mapsTo_perpBisector","module":"Mathlib.Geometry.Euclidean.PerpBisector","initialProofState":"V : Type u_1\nP : Type u_2\ninst✝⁷ : NormedAddCommGroup V\ninst✝⁶ : InnerProductSpace Real V\ninst✝⁵ : MetricSpace P\ninst✝⁴ : NormedAddTorsor V P\nV' : Type u_3\nP' : Type u_4\ninst✝³ : NormedAddCommGroup V'\ninst✝² : InnerProductSpace Real V'\ninst✝¹ : MetricSpace P'\ninst✝ : NormedAddTorsor V' P'\nf : P → P'\nh : Isometry f\np₁ p₂ : P\n⊢ Set.MapsTo f ↑(AffineSubspace.perpBisector p₁ p₂) ↑(AffineSubspace.perpBisector (f p₁) (f p₂))","decl":"theorem Isometry.mapsTo_perpBisector {f : P → P'} (h : Isometry f) (p₁ p₂ : P) :\n    MapsTo f (perpBisector p₁ p₂) (perpBisector (f p₁) (f p₂)) :=\n  (h.preimage_perpBisector p₁ p₂).ge\n"}
