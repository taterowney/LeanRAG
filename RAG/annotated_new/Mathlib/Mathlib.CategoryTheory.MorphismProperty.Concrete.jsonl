{"name":"CategoryTheory.MorphismProperty.bijective_eq_sup","module":"Mathlib.CategoryTheory.MorphismProperty.Concrete","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.HasForget C\n⊢ Eq (CategoryTheory.MorphismProperty.bijective C) (Min.min (CategoryTheory.MorphismProperty.injective C) (CategoryTheory.MorphismProperty.surjective C))","decl":"theorem bijective_eq_sup :\n    MorphismProperty.bijective C = MorphismProperty.injective C ⊓ MorphismProperty.surjective C :=\n  rfl\n\n"}
{"name":"CategoryTheory.MorphismProperty.instIsMultiplicativeInjective","module":"Mathlib.CategoryTheory.MorphismProperty.Concrete","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.HasForget C\n⊢ (CategoryTheory.MorphismProperty.injective C).IsMultiplicative","decl":"instance : (MorphismProperty.injective C).IsMultiplicative where\n  id_mem X := by\n    delta MorphismProperty.injective\n    convert injective_id\n    aesop\n  comp_mem f g hf hg := by\n    delta MorphismProperty.injective\n    rw [coe_comp]\n    exact hg.comp hf\n\n"}
{"name":"CategoryTheory.MorphismProperty.instIsMultiplicativeSurjective","module":"Mathlib.CategoryTheory.MorphismProperty.Concrete","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.HasForget C\n⊢ (CategoryTheory.MorphismProperty.surjective C).IsMultiplicative","decl":"instance : (MorphismProperty.surjective C).IsMultiplicative where\n  id_mem X := by\n    delta MorphismProperty.surjective\n    convert surjective_id\n    aesop\n  comp_mem f g hf hg := by\n    delta MorphismProperty.surjective\n    rw [coe_comp]\n    exact hg.comp hf\n\n"}
{"name":"CategoryTheory.MorphismProperty.instIsMultiplicativeBijective","module":"Mathlib.CategoryTheory.MorphismProperty.Concrete","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.HasForget C\n⊢ (CategoryTheory.MorphismProperty.bijective C).IsMultiplicative","decl":"instance : (MorphismProperty.bijective C).IsMultiplicative where\n  id_mem X := by\n    delta MorphismProperty.bijective\n    convert bijective_id\n    aesop\n  comp_mem f g hf hg := by\n    delta MorphismProperty.bijective\n    rw [coe_comp]\n    exact hg.comp hf\n\n"}
{"name":"CategoryTheory.MorphismProperty.injective_respectsIso","module":"Mathlib.CategoryTheory.MorphismProperty.Concrete","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.HasForget C\n⊢ (CategoryTheory.MorphismProperty.injective C).RespectsIso","decl":"instance injective_respectsIso : (MorphismProperty.injective C).RespectsIso :=\n  respectsIso_of_isStableUnderComposition\n    (fun _ _ f (_ : IsIso f) => ((forget C).mapIso (asIso f)).toEquiv.injective)\n\n"}
{"name":"CategoryTheory.MorphismProperty.surjective_respectsIso","module":"Mathlib.CategoryTheory.MorphismProperty.Concrete","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.HasForget C\n⊢ (CategoryTheory.MorphismProperty.surjective C).RespectsIso","decl":"instance surjective_respectsIso : (MorphismProperty.surjective C).RespectsIso :=\n  respectsIso_of_isStableUnderComposition\n    (fun _ _ f (_ : IsIso f) => ((forget C).mapIso (asIso f)).toEquiv.surjective)\n\n"}
{"name":"CategoryTheory.MorphismProperty.bijective_respectsIso","module":"Mathlib.CategoryTheory.MorphismProperty.Concrete","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.HasForget C\n⊢ (CategoryTheory.MorphismProperty.bijective C).RespectsIso","decl":"instance bijective_respectsIso : (MorphismProperty.bijective C).RespectsIso :=\n  respectsIso_of_isStableUnderComposition\n    (fun _ _ f (_ : IsIso f) => ((forget C).mapIso (asIso f)).toEquiv.bijective)\n\n"}
{"name":"CategoryTheory.instHasFunctorialSurjectiveInjectiveFactorizationType","module":"Mathlib.CategoryTheory.MorphismProperty.Concrete","initialProofState":"⊢ CategoryTheory.ConcreteCategory.HasFunctorialSurjectiveInjectiveFactorization (Type u)","decl":"instance : HasFunctorialSurjectiveInjectiveFactorization (Type u) where\n  nonempty_functorialFactorizationData :=\n    ⟨functorialSurjectiveInjectiveFactorizationData⟩\n\n"}
