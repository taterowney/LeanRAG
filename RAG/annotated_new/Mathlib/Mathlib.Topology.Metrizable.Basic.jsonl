{"name":"TopologicalSpace.PseudoMetrizableSpace.exists_pseudo_metric","module":"Mathlib.Topology.Metrizable.Basic","initialProofState":"X : Type u_5\nt : TopologicalSpace X\nself : TopologicalSpace.PseudoMetrizableSpace X\n⊢ Exists fun m => Eq UniformSpace.toTopologicalSpace t","decl":"/-- A topological space is *pseudo metrizable* if there exists a pseudo metric space structure\ncompatible with the topology. To endow such a space with a compatible distance, use\n`letI : PseudoMetricSpace X := TopologicalSpace.pseudoMetrizableSpacePseudoMetric X`. -/\nclass PseudoMetrizableSpace (X : Type*) [t : TopologicalSpace X] : Prop where\n  exists_pseudo_metric : ∃ m : PseudoMetricSpace X, m.toUniformSpace.toTopologicalSpace = t\n\n"}
{"name":"PseudoMetricSpace.toPseudoMetrizableSpace","module":"Mathlib.Topology.Metrizable.Basic","initialProofState":"X : Type u_5\nm : PseudoMetricSpace X\n⊢ TopologicalSpace.PseudoMetrizableSpace X","decl":"instance (priority := 100) _root_.PseudoMetricSpace.toPseudoMetrizableSpace {X : Type*}\n    [m : PseudoMetricSpace X] : PseudoMetrizableSpace X :=\n  ⟨⟨m, rfl⟩⟩\n\n"}
{"name":"TopologicalSpace.pseudoMetrizableSpace_prod","module":"Mathlib.Topology.Metrizable.Basic","initialProofState":"X : Type u_2\nY : Type u_3\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : TopologicalSpace.PseudoMetrizableSpace X\ninst✝ : TopologicalSpace.PseudoMetrizableSpace Y\n⊢ TopologicalSpace.PseudoMetrizableSpace (Prod X Y)","decl":"instance pseudoMetrizableSpace_prod [PseudoMetrizableSpace X] [PseudoMetrizableSpace Y] :\n    PseudoMetrizableSpace (X × Y) :=\n  letI : PseudoMetricSpace X := pseudoMetrizableSpacePseudoMetric X\n  letI : PseudoMetricSpace Y := pseudoMetrizableSpacePseudoMetric Y\n  inferInstance\n\n"}
{"name":"Topology.IsInducing.pseudoMetrizableSpace","module":"Mathlib.Topology.Metrizable.Basic","initialProofState":"X : Type u_2\nY : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace.PseudoMetrizableSpace Y\nf : X → Y\nhf : Topology.IsInducing f\n⊢ TopologicalSpace.PseudoMetrizableSpace X","decl":"/-- Given an inducing map of a topological space into a pseudo metrizable space, the source space\nis also pseudo metrizable. -/\ntheorem _root_.Topology.IsInducing.pseudoMetrizableSpace [PseudoMetrizableSpace Y] {f : X → Y}\n    (hf : IsInducing f) : PseudoMetrizableSpace X :=\n  letI : PseudoMetricSpace Y := pseudoMetrizableSpacePseudoMetric Y\n  ⟨⟨hf.comapPseudoMetricSpace, rfl⟩⟩\n\n"}
{"name":"Inducing.pseudoMetrizableSpace","module":"Mathlib.Topology.Metrizable.Basic","initialProofState":"X : Type u_2\nY : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace.PseudoMetrizableSpace Y\nf : X → Y\nhf : Topology.IsInducing f\n⊢ TopologicalSpace.PseudoMetrizableSpace X","decl":"@[deprecated (since := \"2024-10-28\")]\nalias _root_.Inducing.pseudoMetrizableSpace := IsInducing.pseudoMetrizableSpace\n\n"}
{"name":"TopologicalSpace.PseudoMetrizableSpace.firstCountableTopology","module":"Mathlib.Topology.Metrizable.Basic","initialProofState":"X : Type u_2\ninst✝ : TopologicalSpace X\nh : TopologicalSpace.PseudoMetrizableSpace X\n⊢ FirstCountableTopology X","decl":"/-- Every pseudo-metrizable space is first countable. -/\ninstance (priority := 100) PseudoMetrizableSpace.firstCountableTopology\n    [h : PseudoMetrizableSpace X] : FirstCountableTopology X := by\n  rcases h with ⟨_, hm⟩\n  rw [← hm]\n  exact @UniformSpace.firstCountableTopology X PseudoMetricSpace.toUniformSpace\n    EMetric.instIsCountablyGeneratedUniformity\n\n"}
{"name":"TopologicalSpace.PseudoMetrizableSpace.subtype","module":"Mathlib.Topology.Metrizable.Basic","initialProofState":"X : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace.PseudoMetrizableSpace X\ns : Set X\n⊢ TopologicalSpace.PseudoMetrizableSpace ↑s","decl":"instance PseudoMetrizableSpace.subtype [PseudoMetrizableSpace X] (s : Set X) :\n    PseudoMetrizableSpace s :=\n  IsInducing.subtypeVal.pseudoMetrizableSpace\n\n"}
{"name":"TopologicalSpace.pseudoMetrizableSpace_pi","module":"Mathlib.Topology.Metrizable.Basic","initialProofState":"ι : Type u_1\nπ : ι → Type u_4\ninst✝¹ : (i : ι) → TopologicalSpace (π i)\ninst✝ : ∀ (i : ι), TopologicalSpace.PseudoMetrizableSpace (π i)\n⊢ TopologicalSpace.PseudoMetrizableSpace ((i : ι) → π i)","decl":"instance pseudoMetrizableSpace_pi [∀ i, PseudoMetrizableSpace (π i)] :\n    PseudoMetrizableSpace (∀ i, π i) := by\n  cases nonempty_fintype ι\n  letI := fun i => pseudoMetrizableSpacePseudoMetric (π i)\n  infer_instance\n\n"}
{"name":"TopologicalSpace.MetrizableSpace.exists_metric","module":"Mathlib.Topology.Metrizable.Basic","initialProofState":"X : Type u_5\nt : TopologicalSpace X\nself : TopologicalSpace.MetrizableSpace X\n⊢ Exists fun m => Eq UniformSpace.toTopologicalSpace t","decl":"/-- A topological space is metrizable if there exists a metric space structure compatible with the\ntopology. To endow such a space with a compatible distance, use\n`letI : MetricSpace X := TopologicalSpace.metrizableSpaceMetric X`. -/\nclass MetrizableSpace (X : Type*) [t : TopologicalSpace X] : Prop where\n  exists_metric : ∃ m : MetricSpace X, m.toUniformSpace.toTopologicalSpace = t\n\n"}
{"name":"MetricSpace.toMetrizableSpace","module":"Mathlib.Topology.Metrizable.Basic","initialProofState":"X : Type u_5\nm : MetricSpace X\n⊢ TopologicalSpace.MetrizableSpace X","decl":"instance (priority := 100) _root_.MetricSpace.toMetrizableSpace {X : Type*} [m : MetricSpace X] :\n    MetrizableSpace X :=\n  ⟨⟨m, rfl⟩⟩\n\n"}
{"name":"TopologicalSpace.MetrizableSpace.toPseudoMetrizableSpace","module":"Mathlib.Topology.Metrizable.Basic","initialProofState":"X : Type u_2\ninst✝ : TopologicalSpace X\nh : TopologicalSpace.MetrizableSpace X\n⊢ TopologicalSpace.PseudoMetrizableSpace X","decl":"instance (priority := 100) MetrizableSpace.toPseudoMetrizableSpace [h : MetrizableSpace X] :\n    PseudoMetrizableSpace X :=\n  let ⟨m, hm⟩ := h.1\n  ⟨⟨m.toPseudoMetricSpace, hm⟩⟩\n\n"}
{"name":"TopologicalSpace.t2Space_of_metrizableSpace","module":"Mathlib.Topology.Metrizable.Basic","initialProofState":"X : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace.MetrizableSpace X\n⊢ T2Space X","decl":"instance (priority := 100) t2Space_of_metrizableSpace [MetrizableSpace X] : T2Space X :=\n  letI : MetricSpace X := metrizableSpaceMetric X\n  inferInstance\n\n"}
{"name":"TopologicalSpace.metrizableSpace_prod","module":"Mathlib.Topology.Metrizable.Basic","initialProofState":"X : Type u_2\nY : Type u_3\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : TopologicalSpace.MetrizableSpace X\ninst✝ : TopologicalSpace.MetrizableSpace Y\n⊢ TopologicalSpace.MetrizableSpace (Prod X Y)","decl":"instance metrizableSpace_prod [MetrizableSpace X] [MetrizableSpace Y] : MetrizableSpace (X × Y) :=\n  letI : MetricSpace X := metrizableSpaceMetric X\n  letI : MetricSpace Y := metrizableSpaceMetric Y\n  inferInstance\n\n"}
{"name":"Topology.IsEmbedding.metrizableSpace","module":"Mathlib.Topology.Metrizable.Basic","initialProofState":"X : Type u_2\nY : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace.MetrizableSpace Y\nf : X → Y\nhf : Topology.IsEmbedding f\n⊢ TopologicalSpace.MetrizableSpace X","decl":"/-- Given an embedding of a topological space into a metrizable space, the source space is also\nmetrizable. -/\ntheorem _root_.Topology.IsEmbedding.metrizableSpace [MetrizableSpace Y] {f : X → Y}\n    (hf : IsEmbedding f) : MetrizableSpace X :=\n  letI : MetricSpace Y := metrizableSpaceMetric Y\n  ⟨⟨hf.comapMetricSpace f, rfl⟩⟩\n\n"}
{"name":"Embedding.metrizableSpace","module":"Mathlib.Topology.Metrizable.Basic","initialProofState":"X : Type u_2\nY : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace.MetrizableSpace Y\nf : X → Y\nhf : Topology.IsEmbedding f\n⊢ TopologicalSpace.MetrizableSpace X","decl":"@[deprecated (since := \"2024-10-26\")]\nalias _root_.Embedding.metrizableSpace := IsEmbedding.metrizableSpace\n\n"}
{"name":"TopologicalSpace.MetrizableSpace.subtype","module":"Mathlib.Topology.Metrizable.Basic","initialProofState":"X : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace.MetrizableSpace X\ns : Set X\n⊢ TopologicalSpace.MetrizableSpace ↑s","decl":"instance MetrizableSpace.subtype [MetrizableSpace X] (s : Set X) : MetrizableSpace s :=\n  IsEmbedding.subtypeVal.metrizableSpace\n\n"}
{"name":"TopologicalSpace.metrizableSpace_pi","module":"Mathlib.Topology.Metrizable.Basic","initialProofState":"ι : Type u_1\nπ : ι → Type u_4\ninst✝¹ : (i : ι) → TopologicalSpace (π i)\ninst✝ : ∀ (i : ι), TopologicalSpace.MetrizableSpace (π i)\n⊢ TopologicalSpace.MetrizableSpace ((i : ι) → π i)","decl":"instance metrizableSpace_pi [∀ i, MetrizableSpace (π i)] : MetrizableSpace (∀ i, π i) := by\n  cases nonempty_fintype ι\n  letI := fun i => metrizableSpaceMetric (π i)\n  infer_instance\n\n"}
{"name":"TopologicalSpace.IsSeparable.secondCountableTopology","module":"Mathlib.Topology.Metrizable.Basic","initialProofState":"X : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace.PseudoMetrizableSpace X\ns : Set X\nhs : TopologicalSpace.IsSeparable s\n⊢ SecondCountableTopology ↑s","decl":"theorem IsSeparable.secondCountableTopology [PseudoMetrizableSpace X] {s : Set X}\n    (hs : IsSeparable s) : SecondCountableTopology s := by\n  letI := pseudoMetrizableSpacePseudoMetric X\n  have := hs.separableSpace\n  exact UniformSpace.secondCountable_of_separable s\n\n"}
{"name":"TopologicalSpace.instSecondCountableTopologyOfCompactSpaceOfMetrizableSpace","module":"Mathlib.Topology.Metrizable.Basic","initialProofState":"X : Type u_5\ninst✝¹ : TopologicalSpace X\nc : CompactSpace X\ninst✝ : TopologicalSpace.MetrizableSpace X\n⊢ SecondCountableTopology X","decl":"instance (X : Type*) [TopologicalSpace X] [c : CompactSpace X] [MetrizableSpace X] :\n    SecondCountableTopology X := by\n  obtain ⟨_, h⟩ := MetrizableSpace.exists_metric (X := X)\n  rw [← h] at c ⊢\n  infer_instance\n\n"}
