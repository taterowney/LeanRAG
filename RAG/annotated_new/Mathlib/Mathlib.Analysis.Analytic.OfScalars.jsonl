{"name":"FormalMultilinearSeries.ofScalars_eq_zero","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁵ : Field 𝕜\ninst✝⁴ : Ring E\ninst✝³ : Algebra 𝕜 E\ninst✝² : TopologicalSpace E\ninst✝¹ : TopologicalRing E\nc : Nat → 𝕜\ninst✝ : Nontrivial E\nn : Nat\n⊢ Iff (Eq (FormalMultilinearSeries.ofScalars E c n) 0) (Eq (c n) 0)","decl":"@[simp]\ntheorem ofScalars_eq_zero [Nontrivial E] (n : ℕ) : ofScalars E c n = 0 ↔ c n = 0 := by\n  rw [ofScalars, smul_eq_zero (c := c n) (x := ContinuousMultilinearMap.mkPiAlgebraFin 𝕜 n E)]\n  refine or_iff_left (ContinuousMultilinearMap.ext_iff.1.mt <| not_forall_of_exists_not ?_)\n  use fun _ ↦ 1\n  simp\n\n"}
{"name":"FormalMultilinearSeries.ofScalars_eq_zero_of_scalar_zero","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁴ : Field 𝕜\ninst✝³ : Ring E\ninst✝² : Algebra 𝕜 E\ninst✝¹ : TopologicalSpace E\ninst✝ : TopologicalRing E\nc : Nat → 𝕜\nn : Nat\nhc : Eq (c n) 0\n⊢ Eq (FormalMultilinearSeries.ofScalars E c n) 0","decl":"@[simp]\ntheorem ofScalars_eq_zero_of_scalar_zero {n : ℕ} (hc : c n = 0) : ofScalars E c n = 0 := by\n  rw [ofScalars, hc, zero_smul 𝕜 (ContinuousMultilinearMap.mkPiAlgebraFin 𝕜 n E)]\n\n"}
{"name":"FormalMultilinearSeries.ofScalars_series_eq_zero","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁵ : Field 𝕜\ninst✝⁴ : Ring E\ninst✝³ : Algebra 𝕜 E\ninst✝² : TopologicalSpace E\ninst✝¹ : TopologicalRing E\nc : Nat → 𝕜\ninst✝ : Nontrivial E\n⊢ Iff (Eq (FormalMultilinearSeries.ofScalars E c) 0) (Eq c 0)","decl":"@[simp]\ntheorem ofScalars_series_eq_zero [Nontrivial E] : ofScalars E c = 0 ↔ c = 0 := by\n  simp [FormalMultilinearSeries.ext_iff, funext_iff]\n\n"}
{"name":"FormalMultilinearSeries.ofScalars_series_eq_zero_of_scalar_zero","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁴ : Field 𝕜\ninst✝³ : Ring E\ninst✝² : Algebra 𝕜 E\ninst✝¹ : TopologicalSpace E\ninst✝ : TopologicalRing E\n⊢ Eq (FormalMultilinearSeries.ofScalars E 0) 0","decl":"variable (𝕜) in\n@[simp]\ntheorem ofScalars_series_eq_zero_of_scalar_zero : ofScalars E (0 : ℕ → 𝕜) = 0 := by\n  simp [FormalMultilinearSeries.ext_iff]\n\n"}
{"name":"FormalMultilinearSeries.ofScalars_series_of_subsingleton","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁵ : Field 𝕜\ninst✝⁴ : Ring E\ninst✝³ : Algebra 𝕜 E\ninst✝² : TopologicalSpace E\ninst✝¹ : TopologicalRing E\nc : Nat → 𝕜\ninst✝ : Subsingleton E\n⊢ Eq (FormalMultilinearSeries.ofScalars E c) 0","decl":"@[simp]\ntheorem ofScalars_series_of_subsingleton [Subsingleton E] : ofScalars E c = 0 := by\n  simp_rw [FormalMultilinearSeries.ext_iff, ofScalars, ContinuousMultilinearMap.ext_iff]\n  exact fun _ _ ↦ Subsingleton.allEq _ _\n\n"}
{"name":"FormalMultilinearSeries.ofScalars_series_injective","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁵ : Field 𝕜\ninst✝⁴ : Ring E\ninst✝³ : Algebra 𝕜 E\ninst✝² : TopologicalSpace E\ninst✝¹ : TopologicalRing E\ninst✝ : Nontrivial E\n⊢ Function.Injective (FormalMultilinearSeries.ofScalars E)","decl":"variable (𝕜) in\ntheorem ofScalars_series_injective [Nontrivial E] : Function.Injective (ofScalars E (𝕜 := 𝕜)) := by\n  intro _ _\n  refine Function.mtr fun h ↦ ?_\n  simp_rw [FormalMultilinearSeries.ext_iff, ofScalars, ContinuousMultilinearMap.ext_iff,\n    ContinuousMultilinearMap.smul_apply]\n  push_neg\n  obtain ⟨n, hn⟩ := Function.ne_iff.1 h\n  refine ⟨n, fun _ ↦ 1, ?_⟩\n  simp only [mkPiAlgebraFin_apply, List.ofFn_const, List.prod_replicate, one_pow, ne_eq]\n  exact (smul_left_injective 𝕜 one_ne_zero).ne hn\n\n"}
{"name":"FormalMultilinearSeries.ofScalars_series_eq_iff","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁵ : Field 𝕜\ninst✝⁴ : Ring E\ninst✝³ : Algebra 𝕜 E\ninst✝² : TopologicalSpace E\ninst✝¹ : TopologicalRing E\nc : Nat → 𝕜\ninst✝ : Nontrivial E\nc' : Nat → 𝕜\n⊢ Iff (Eq (FormalMultilinearSeries.ofScalars E c) (FormalMultilinearSeries.ofScalars E c')) (Eq c c')","decl":"@[simp]\ntheorem ofScalars_series_eq_iff [Nontrivial E] (c' : ℕ → 𝕜) :\n    ofScalars E c = ofScalars E c' ↔ c = c' :=\n  ⟨fun e => ofScalars_series_injective 𝕜 E e, _root_.congrArg _⟩\n\n"}
{"name":"FormalMultilinearSeries.ofScalars_apply_zero","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁴ : Field 𝕜\ninst✝³ : Ring E\ninst✝² : Algebra 𝕜 E\ninst✝¹ : TopologicalSpace E\ninst✝ : TopologicalRing E\nc : Nat → 𝕜\nn : Nat\n⊢ Eq ((FormalMultilinearSeries.ofScalars E c n) fun x => 0) (Pi.single 0 (HSMul.hSMul (c 0) 1) n)","decl":"theorem ofScalars_apply_zero (n : ℕ) :\n    (ofScalars E c n fun _ => 0) = Pi.single (f := fun _ => E) 0 (c 0 • 1) n := by\n  rw [ofScalars]\n  cases n <;> simp\n\n"}
{"name":"FormalMultilinearSeries.coeff_ofScalars","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_3\ninst✝ : NontriviallyNormedField 𝕜\np : Nat → 𝕜\nn : Nat\n⊢ Eq ((FormalMultilinearSeries.ofScalars 𝕜 p).coeff n) (p n)","decl":"@[simp]\nlemma coeff_ofScalars {𝕜 : Type*} [NontriviallyNormedField 𝕜] {p : ℕ → 𝕜} {n : ℕ} :\n    (FormalMultilinearSeries.ofScalars 𝕜 p).coeff n = p n := by\n  simp [FormalMultilinearSeries.coeff, FormalMultilinearSeries.ofScalars, List.prod_ofFn]\n\n"}
{"name":"FormalMultilinearSeries.ofScalars_add","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁴ : Field 𝕜\ninst✝³ : Ring E\ninst✝² : Algebra 𝕜 E\ninst✝¹ : TopologicalSpace E\ninst✝ : TopologicalRing E\nc c' : Nat → 𝕜\n⊢ Eq (FormalMultilinearSeries.ofScalars E (HAdd.hAdd c c')) (HAdd.hAdd (FormalMultilinearSeries.ofScalars E c) (FormalMultilinearSeries.ofScalars E c'))","decl":"theorem ofScalars_add (c' : ℕ → 𝕜) : ofScalars E (c + c') = ofScalars E c + ofScalars E c' := by\n  unfold ofScalars\n  simp_rw [Pi.add_apply, Pi.add_def _ _]\n  exact funext fun n ↦ Module.add_smul (c n) (c' n) (ContinuousMultilinearMap.mkPiAlgebraFin 𝕜 n E)\n\n"}
{"name":"FormalMultilinearSeries.ofScalars_smul","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁴ : Field 𝕜\ninst✝³ : Ring E\ninst✝² : Algebra 𝕜 E\ninst✝¹ : TopologicalSpace E\ninst✝ : TopologicalRing E\nc : Nat → 𝕜\nx : 𝕜\n⊢ Eq (FormalMultilinearSeries.ofScalars E (HSMul.hSMul x c)) (HSMul.hSMul x (FormalMultilinearSeries.ofScalars E c))","decl":"theorem ofScalars_smul (x : 𝕜) : ofScalars E (x • c) = x • ofScalars E c := by\n  unfold ofScalars\n  simp [Pi.smul_def x _, smul_smul]\n\n"}
{"name":"FormalMultilinearSeries.ofScalars_apply_eq","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁴ : Field 𝕜\ninst✝³ : Ring E\ninst✝² : Algebra 𝕜 E\ninst✝¹ : TopologicalSpace E\ninst✝ : TopologicalRing E\nc : Nat → 𝕜\nx : E\nn : Nat\n⊢ Eq ((FormalMultilinearSeries.ofScalars E c n) fun x_1 => x) (HSMul.hSMul (c n) (HPow.hPow x n))","decl":"theorem ofScalars_apply_eq (x : E) (n : ℕ) :\n    ofScalars E c n (fun _ ↦ x) = c n • x ^ n := by\n  simp [ofScalars]\n\n"}
{"name":"FormalMultilinearSeries.ofScalars_apply_eq'","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁴ : Field 𝕜\ninst✝³ : Ring E\ninst✝² : Algebra 𝕜 E\ninst✝¹ : TopologicalSpace E\ninst✝ : TopologicalRing E\nc : Nat → 𝕜\nx : E\n⊢ Eq (fun n => (FormalMultilinearSeries.ofScalars E c n) fun x_1 => x) fun n => HSMul.hSMul (c n) (HPow.hPow x n)","decl":"/-- This naming follows the convention of `NormedSpace.expSeries_apply_eq'`. -/\ntheorem ofScalars_apply_eq' (x : E) :\n    (fun n ↦ ofScalars E c n (fun _ ↦ x)) = fun n ↦ c n • x ^ n := by\n  simp [ofScalars]\n\n"}
{"name":"FormalMultilinearSeries.ofScalars_sum_eq","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁴ : Field 𝕜\ninst✝³ : Ring E\ninst✝² : Algebra 𝕜 E\ninst✝¹ : TopologicalSpace E\ninst✝ : TopologicalRing E\nc : Nat → 𝕜\nx : E\n⊢ Eq (FormalMultilinearSeries.ofScalarsSum c x) (tsum fun n => HSMul.hSMul (c n) (HPow.hPow x n))","decl":"theorem ofScalars_sum_eq (x : E) : ofScalarsSum c x =\n    ∑' n, c n • x ^ n := tsum_congr fun n => ofScalars_apply_eq c x n\n\n"}
{"name":"FormalMultilinearSeries.ofScalarsSum_eq_tsum","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁴ : Field 𝕜\ninst✝³ : Ring E\ninst✝² : Algebra 𝕜 E\ninst✝¹ : TopologicalSpace E\ninst✝ : TopologicalRing E\nc : Nat → 𝕜\n⊢ Eq (FormalMultilinearSeries.ofScalarsSum c) fun x => tsum fun n => HSMul.hSMul (c n) (HPow.hPow x n)","decl":"theorem ofScalarsSum_eq_tsum : ofScalarsSum c =\n    fun (x : E) => ∑' n : ℕ, c n • x ^ n := funext (ofScalars_sum_eq c)\n\n"}
{"name":"FormalMultilinearSeries.ofScalarsSum_zero","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁴ : Field 𝕜\ninst✝³ : Ring E\ninst✝² : Algebra 𝕜 E\ninst✝¹ : TopologicalSpace E\ninst✝ : TopologicalRing E\nc : Nat → 𝕜\n⊢ Eq (FormalMultilinearSeries.ofScalarsSum c 0) (HSMul.hSMul (c 0) 1)","decl":"@[simp]\ntheorem ofScalarsSum_zero : ofScalarsSum c (0 : E) = c 0 • 1 := by\n  simp [ofScalarsSum_eq_tsum, ← ofScalars_apply_eq, ofScalars_apply_zero]\n\n"}
{"name":"FormalMultilinearSeries.ofScalarsSum_of_subsingleton","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁵ : Field 𝕜\ninst✝⁴ : Ring E\ninst✝³ : Algebra 𝕜 E\ninst✝² : TopologicalSpace E\ninst✝¹ : TopologicalRing E\nc : Nat → 𝕜\ninst✝ : Subsingleton E\nx : E\n⊢ Eq (FormalMultilinearSeries.ofScalarsSum c x) 0","decl":"@[simp]\ntheorem ofScalarsSum_of_subsingleton [Subsingleton E] {x : E} : ofScalarsSum c x = 0 := by\n  simp [Subsingleton.eq_zero x, Subsingleton.eq_zero (1 : E)]\n\n"}
{"name":"FormalMultilinearSeries.ofScalarsSum_op","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁵ : Field 𝕜\ninst✝⁴ : Ring E\ninst✝³ : Algebra 𝕜 E\ninst✝² : TopologicalSpace E\ninst✝¹ : TopologicalRing E\nc : Nat → 𝕜\ninst✝ : T2Space E\nx : E\n⊢ Eq (FormalMultilinearSeries.ofScalarsSum c (MulOpposite.op x)) (MulOpposite.op (FormalMultilinearSeries.ofScalarsSum c x))","decl":"@[simp]\ntheorem ofScalarsSum_op [T2Space E] (x : E) :\n    ofScalarsSum c (MulOpposite.op x) = MulOpposite.op (ofScalarsSum c x) := by\n  simp [ofScalars, ofScalars_sum_eq, ← MulOpposite.op_pow, ← MulOpposite.op_smul, tsum_op]\n\n"}
{"name":"FormalMultilinearSeries.ofScalarsSum_unop","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁵ : Field 𝕜\ninst✝⁴ : Ring E\ninst✝³ : Algebra 𝕜 E\ninst✝² : TopologicalSpace E\ninst✝¹ : TopologicalRing E\nc : Nat → 𝕜\ninst✝ : T2Space E\nx : MulOpposite E\n⊢ Eq (FormalMultilinearSeries.ofScalarsSum c (MulOpposite.unop x)) (MulOpposite.unop (FormalMultilinearSeries.ofScalarsSum c x))","decl":"@[simp]\ntheorem ofScalarsSum_unop [T2Space E] (x : Eᵐᵒᵖ) :\n    ofScalarsSum c (MulOpposite.unop x) = MulOpposite.unop (ofScalarsSum c x) := by\n  simp [ofScalars, ofScalars_sum_eq, ← MulOpposite.unop_pow, ← MulOpposite.unop_smul, tsum_unop]\n\n"}
{"name":"FormalMultilinearSeries.ofScalars_norm_eq_mul","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : SeminormedRing E\ninst✝ : NormedAlgebra 𝕜 E\nc : Nat → 𝕜\nn : Nat\n⊢ Eq (Norm.norm (FormalMultilinearSeries.ofScalars E c n)) (HMul.hMul (Norm.norm (c n)) (Norm.norm (ContinuousMultilinearMap.mkPiAlgebraFin 𝕜 n E)))","decl":"set_option maxSynthPendingDepth 2 in\ntheorem ofScalars_norm_eq_mul :\n    ‖ofScalars E c n‖ = ‖c n‖ * ‖ContinuousMultilinearMap.mkPiAlgebraFin 𝕜 n E‖ := by\n  set_option maxSynthPendingDepth 2 in\n  rw [ofScalars, norm_smul]\n\n"}
{"name":"FormalMultilinearSeries.ofScalars_norm_le","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : SeminormedRing E\ninst✝ : NormedAlgebra 𝕜 E\nc : Nat → 𝕜\nn : Nat\nhn : GT.gt n 0\n⊢ LE.le (Norm.norm (FormalMultilinearSeries.ofScalars E c n)) (Norm.norm (c n))","decl":"theorem ofScalars_norm_le (hn : n > 0) : ‖ofScalars E c n‖ ≤ ‖c n‖ := by\n  simp only [ofScalars_norm_eq_mul]\n  exact (mul_le_of_le_one_right (norm_nonneg _)\n    (ContinuousMultilinearMap.norm_mkPiAlgebraFin_le_of_pos hn))\n\n"}
{"name":"FormalMultilinearSeries.ofScalars_norm","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : NontriviallyNormedField 𝕜\ninst✝² : SeminormedRing E\ninst✝¹ : NormedAlgebra 𝕜 E\nc : Nat → 𝕜\nn : Nat\ninst✝ : NormOneClass E\n⊢ Eq (Norm.norm (FormalMultilinearSeries.ofScalars E c n)) (Norm.norm (c n))","decl":"@[simp]\ntheorem ofScalars_norm [NormOneClass E] : ‖ofScalars E c n‖ = ‖c n‖ := by\n  simp [ofScalars_norm_eq_mul]\n\n"}
{"name":"FormalMultilinearSeries.ofScalars_radius_ge_inv_of_tendsto","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedRing E\ninst✝ : NormedAlgebra 𝕜 E\nc : Nat → 𝕜\nr : NNReal\nhr : Ne r 0\nhc : Filter.Tendsto (fun n => HDiv.hDiv (Norm.norm (c n.succ)) (Norm.norm (c n))) Filter.atTop (nhds ↑r)\n⊢ GE.ge (FormalMultilinearSeries.ofScalars E c).radius ↑(Inv.inv r)","decl":"theorem ofScalars_radius_ge_inv_of_tendsto {r : ℝ≥0} (hr : r ≠ 0)\n    (hc : Tendsto (fun n ↦ ‖c n.succ‖ / ‖c n‖) atTop (𝓝 r)) :\n      (ofScalars E c).radius ≥ ofNNReal r⁻¹ := by\n  refine le_of_forall_nnreal_lt (fun r' hr' ↦ ?_)\n  rw [coe_lt_coe, NNReal.lt_inv_iff_mul_lt hr] at hr'\n  by_cases hrz : r' = 0\n  · simp [hrz]\n  apply FormalMultilinearSeries.le_radius_of_summable_norm\n  refine Summable.of_norm_bounded_eventually (fun n ↦ ‖‖c n‖ * r' ^ n‖) ?_ ?_\n  · refine summable_of_ratio_test_tendsto_lt_one hr' ?_ ?_\n    · refine (hc.eventually_ne (NNReal.coe_ne_zero.mpr hr)).mp (Eventually.of_forall ?_)\n      aesop\n    · simp_rw [norm_norm]\n      exact tendsto_succ_norm_div_norm c hrz hc\n  · filter_upwards [eventually_cofinite_ne 0] with n hn\n    simp only [norm_mul, norm_norm, norm_pow, NNReal.norm_eq]\n    gcongr\n    exact ofScalars_norm_le E c n (Nat.pos_iff_ne_zero.mpr hn)\n\n"}
{"name":"FormalMultilinearSeries.ofScalars_radius_eq_inv_of_tendsto","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : NontriviallyNormedField 𝕜\ninst✝² : NormedRing E\ninst✝¹ : NormedAlgebra 𝕜 E\nc : Nat → 𝕜\ninst✝ : NormOneClass E\nr : NNReal\nhr : Ne r 0\nhc : Filter.Tendsto (fun n => HDiv.hDiv (Norm.norm (c n.succ)) (Norm.norm (c n))) Filter.atTop (nhds ↑r)\n⊢ Eq (FormalMultilinearSeries.ofScalars E c).radius ↑(Inv.inv r)","decl":"/-- The radius of convergence of a scalar series is the inverse of the non-zero limit\n`fun n ↦ ‖c n.succ‖ / ‖c n‖`. -/\ntheorem ofScalars_radius_eq_inv_of_tendsto [NormOneClass E] {r : ℝ≥0} (hr : r ≠ 0)\n    (hc : Tendsto (fun n ↦ ‖c n.succ‖ / ‖c n‖) atTop (𝓝 r)) :\n      (ofScalars E c).radius = ofNNReal r⁻¹ := by\n  refine le_antisymm ?_ (ofScalars_radius_ge_inv_of_tendsto E c hr hc)\n  refine le_of_forall_nnreal_lt (fun r' hr' ↦ ?_)\n  rw [coe_le_coe, NNReal.le_inv_iff_mul_le hr]\n  have := FormalMultilinearSeries.summable_norm_mul_pow _ hr'\n  contrapose! this\n  apply not_summable_of_ratio_test_tendsto_gt_one this\n  simp_rw [ofScalars_norm]\n  exact tendsto_succ_norm_div_norm c (by aesop) hc\n\n"}
{"name":"FormalMultilinearSeries.ofScalars_radius_eq_of_tendsto","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : NontriviallyNormedField 𝕜\ninst✝² : NormedRing E\ninst✝¹ : NormedAlgebra 𝕜 E\nc : Nat → 𝕜\ninst✝ : NormOneClass E\nr : NNReal\nhr : Ne r 0\nhc : Filter.Tendsto (fun n => HDiv.hDiv (Norm.norm (c n)) (Norm.norm (c n.succ))) Filter.atTop (nhds ↑r)\n⊢ Eq (FormalMultilinearSeries.ofScalars E c).radius ↑r","decl":"/-- A convenience lemma restating the result of `ofScalars_radius_eq_inv_of_tendsto` under\nthe inverse ratio. -/\ntheorem ofScalars_radius_eq_of_tendsto [NormOneClass E] {r : NNReal} (hr : r ≠ 0)\n    (hc : Tendsto (fun n ↦ ‖c n‖ / ‖c n.succ‖) atTop (𝓝 r)) :\n      (ofScalars E c).radius = ofNNReal r := by\n  suffices Tendsto (fun n ↦ ‖c n.succ‖ / ‖c n‖) atTop (𝓝 r⁻¹) by\n    convert ofScalars_radius_eq_inv_of_tendsto E c (inv_ne_zero hr) this\n    simp\n  convert hc.inv₀ (NNReal.coe_ne_zero.mpr hr) using 1\n  simp\n\n"}
{"name":"FormalMultilinearSeries.ofScalars_radius_eq_top_of_tendsto","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedRing E\ninst✝ : NormedAlgebra 𝕜 E\nc : Nat → 𝕜\nhc : Filter.Eventually (fun n => Ne (c n) 0) Filter.atTop\nhc' : Filter.Tendsto (fun n => HDiv.hDiv (Norm.norm (c n.succ)) (Norm.norm (c n))) Filter.atTop (nhds 0)\n⊢ Eq (FormalMultilinearSeries.ofScalars E c).radius Top.top","decl":"/-- The ratio test stating that if `‖c n.succ‖ / ‖c n‖` tends to zero, the radius is unbounded.\nThis requires that the coefficients are eventually non-zero as\n`‖c n.succ‖ / 0 = 0` by convention. -/\ntheorem ofScalars_radius_eq_top_of_tendsto (hc : ∀ᶠ n in atTop, c n ≠ 0)\n    (hc' : Tendsto (fun n ↦ ‖c n.succ‖ / ‖c n‖) atTop (𝓝 0)) : (ofScalars E c).radius = ⊤ := by\n  refine radius_eq_top_of_summable_norm _ fun r' ↦ ?_\n  by_cases hrz : r' = 0\n  · apply Summable.comp_nat_add (k := 1)\n    simp [hrz]\n    exact (summable_const_iff 0).mpr rfl\n  · refine Summable.of_norm_bounded_eventually (fun n ↦ ‖‖c n‖ * r' ^ n‖) ?_ ?_\n    · apply summable_of_ratio_test_tendsto_lt_one zero_lt_one (hc.mp (Eventually.of_forall ?_))\n      · simp only [norm_norm]\n        exact mul_zero (_ : ℝ) ▸ tendsto_succ_norm_div_norm _ hrz (NNReal.coe_zero ▸ hc')\n      · aesop\n    · filter_upwards [eventually_cofinite_ne 0] with n hn\n      simp only [norm_mul, norm_norm, norm_pow, NNReal.norm_eq]\n      gcongr\n      exact ofScalars_norm_le E c n (Nat.pos_iff_ne_zero.mpr hn)\n\n"}
{"name":"FormalMultilinearSeries.ofScalars_radius_eq_zero_of_tendsto","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : NontriviallyNormedField 𝕜\ninst✝² : NormedRing E\ninst✝¹ : NormedAlgebra 𝕜 E\nc : Nat → 𝕜\ninst✝ : NormOneClass E\nhc : Filter.Tendsto (fun n => HDiv.hDiv (Norm.norm (c n.succ)) (Norm.norm (c n))) Filter.atTop Filter.atTop\n⊢ Eq (FormalMultilinearSeries.ofScalars E c).radius 0","decl":"/-- If `‖c n.succ‖ / ‖c n‖` is unbounded, then the radius of convergence is zero. -/\ntheorem ofScalars_radius_eq_zero_of_tendsto [NormOneClass E]\n    (hc : Tendsto (fun n ↦ ‖c n.succ‖ / ‖c n‖) atTop atTop) : (ofScalars E c).radius = 0 := by\n  suffices (ofScalars E c).radius ≤ 0 by aesop\n  refine le_of_forall_nnreal_lt (fun r hr ↦ ?_)\n  rw [← coe_zero, coe_le_coe]\n  have := FormalMultilinearSeries.summable_norm_mul_pow _ hr\n  contrapose! this\n  apply not_summable_of_ratio_norm_eventually_ge one_lt_two\n  · contrapose! hc\n    apply not_tendsto_atTop_of_tendsto_nhds (a:=0)\n    rw [not_frequently] at hc\n    apply Tendsto.congr' ?_ tendsto_const_nhds\n    filter_upwards [hc] with n hc'\n    rw [ofScalars_norm, norm_mul, norm_norm, not_ne_iff, mul_eq_zero] at hc'\n    cases hc' <;> aesop\n  · filter_upwards [hc.eventually_ge_atTop (2*r⁻¹), eventually_ne_atTop 0] with n hc hn\n    simp only [ofScalars_norm, norm_mul, norm_norm, norm_pow, NNReal.norm_eq]\n    rw [mul_comm ‖c n‖, ← mul_assoc, ← div_le_div_iff₀, mul_div_assoc]\n    · convert hc\n      rw [pow_succ, div_mul_cancel_left₀, NNReal.coe_inv]\n      aesop\n    · aesop\n    · refine Ne.lt_of_le (fun hr' ↦ Not.elim ?_ hc) (norm_nonneg _)\n      rw [← hr']\n      simp [this]\n\n"}
{"name":"FormalMultilinearSeries.ofScalars_radius_eq_inv_of_tendsto_ENNReal","module":"Mathlib.Analysis.Analytic.OfScalars","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : NontriviallyNormedField 𝕜\ninst✝² : NormedRing E\ninst✝¹ : NormedAlgebra 𝕜 E\nc : Nat → 𝕜\ninst✝ : NormOneClass E\nr : ENNReal\nhc' : Filter.Tendsto (fun n => HDiv.hDiv (ENNReal.ofReal (Norm.norm (c n.succ))) (ENNReal.ofReal (Norm.norm (c n)))) Filter.atTop (nhds r)\n⊢ Eq (FormalMultilinearSeries.ofScalars E c).radius (Inv.inv r)","decl":"/-- This theorem combines the results of the special cases above, using `ENNReal` division to remove\nthe requirement that the ratio is eventually non-zero. -/\ntheorem ofScalars_radius_eq_inv_of_tendsto_ENNReal [NormOneClass E] {r : ℝ≥0∞}\n    (hc' : Tendsto (fun n ↦ ENNReal.ofReal ‖c n.succ‖ / ENNReal.ofReal ‖c n‖) atTop (𝓝 r)) :\n      (ofScalars E c).radius = r⁻¹ := by\n  rcases ENNReal.trichotomy r with (hr | hr | hr)\n  · simp_rw [hr, inv_zero] at hc' ⊢\n    by_cases h : (∀ᶠ (n : ℕ) in atTop, c n ≠ 0)\n    · apply ofScalars_radius_eq_top_of_tendsto E c h ?_\n      refine Tendsto.congr' ?_ <| (tendsto_toReal zero_ne_top).comp hc'\n      filter_upwards [h]\n      simp\n    · apply (ofScalars E c).radius_eq_top_of_eventually_eq_zero\n      simp only [eventually_atTop, not_exists, not_forall, Classical.not_imp, not_not] at h ⊢\n      obtain ⟨ti, hti⟩ := eventually_atTop.mp (hc'.eventually_ne zero_ne_top)\n      obtain ⟨zi, hzi, z⟩ := h ti\n      refine ⟨zi, Nat.le_induction (ofScalars_eq_zero_of_scalar_zero E z) fun n hmn a ↦ ?_⟩\n      nontriviality E\n      simp only [ofScalars_eq_zero] at a ⊢\n      contrapose! hti\n      exact ⟨n, hzi.trans hmn, ENNReal.div_eq_top.mpr (by simp [a, hti])⟩\n  · simp_rw [hr, inv_top] at hc' ⊢\n    apply ofScalars_radius_eq_zero_of_tendsto E c ((tendsto_add_atTop_iff_nat 1).mp ?_)\n    refine tendsto_ofReal_nhds_top.mp (Tendsto.congr' ?_ ((tendsto_add_atTop_iff_nat 1).mpr hc'))\n    filter_upwards [hc'.eventually_ne top_ne_zero] with n hn\n    apply (ofReal_div_of_pos (Ne.lt_of_le (Ne.symm ?_) (norm_nonneg _))).symm\n    aesop\n  · have hr' := toReal_ne_zero.mp hr.ne.symm\n    have hr'' := toNNReal_ne_zero.mpr hr' -- this result could go in ENNReal\n    convert ofScalars_radius_eq_inv_of_tendsto E c hr'' ?_\n    · simp [ENNReal.coe_inv hr'', ENNReal.coe_toNNReal (toReal_ne_zero.mp hr.ne.symm).2]\n    · simp_rw [ENNReal.coe_toNNReal_eq_toReal]\n      refine Tendsto.congr' ?_ <| (tendsto_toReal hr'.2).comp hc'\n      filter_upwards [hc'.eventually_ne hr'.1, hc'.eventually_ne hr'.2]\n      simp\n\n"}
