{"name":"Prod.orderedSub","module":"Mathlib.Algebra.Order.Sub.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁷ : Preorder α\ninst✝⁶ : Add α\ninst✝⁵ : Sub α\ninst✝⁴ : OrderedSub α\ninst✝³ : Sub β\ninst✝² : Preorder β\ninst✝¹ : Add β\ninst✝ : OrderedSub β\n⊢ OrderedSub (Prod α β)","decl":"instance Prod.orderedSub\n    [Preorder α] [Add α] [Sub α] [OrderedSub α] [Sub β] [Preorder β] [Add β] [OrderedSub β] :\n    OrderedSub (α × β) where\n  tsub_le_iff_right _ _ _ :=\n  ⟨fun w ↦ ⟨tsub_le_iff_right.mp w.1, tsub_le_iff_right.mp w.2⟩,\n   fun w ↦ ⟨tsub_le_iff_right.mpr w.1, tsub_le_iff_right.mpr w.2⟩⟩\n\n"}
{"name":"Pi.orderedSub","module":"Mathlib.Algebra.Order.Sub.Prod","initialProofState":"ι : Type u_3\nα : ι → Type u_4\ninst✝³ : (i : ι) → Preorder (α i)\ninst✝² : (i : ι) → Add (α i)\ninst✝¹ : (i : ι) → Sub (α i)\ninst✝ : ∀ (i : ι), OrderedSub (α i)\n⊢ OrderedSub ((i : ι) → α i)","decl":"instance Pi.orderedSub {ι : Type*} {α : ι → Type*}\n    [∀ i, Preorder (α i)] [∀ i, Add (α i)] [∀ i, Sub (α i)] [∀ i, OrderedSub (α i)] :\n    OrderedSub ((i : ι) → α i) where\n  tsub_le_iff_right _ _ _ :=\n  ⟨fun w i ↦ tsub_le_iff_right.mp (w i), fun w i ↦ tsub_le_iff_right.mpr (w i)⟩\n"}
