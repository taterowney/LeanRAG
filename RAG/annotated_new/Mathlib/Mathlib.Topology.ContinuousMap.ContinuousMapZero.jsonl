{"name":"ContinuousMapZero.map_zero'","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝³ : Zero X\ninst✝² : Zero R\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace R\nself : ContinuousMapZero X R\n⊢ Eq (self.toContinuousMap 0) 0","decl":"/-- The type of continuous maps which map zero to zero.\n\nNote that one should never use the structure projection `ContinuousMapZero.toContinuousMap` and\ninstead favor the coercion `(↑) : C(X, R)₀ → C(X, R)` available from the instance of\n`ContinuousMapClass`. All the instances on `C(X, R)₀` from `C(X, R)` passes through this coercion,\nnot the structure projection. Of course, the two are definitionally equal, but not reducibly so. -/\nstructure ContinuousMapZero (X R : Type*) [Zero X] [Zero R] [TopologicalSpace X]\n    [TopologicalSpace R] extends C(X, R) where\n  map_zero' : toContinuousMap 0 = 0\n\n"}
{"name":"ContinuousMapZero.mk.sizeOf_spec","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝⁵ : Zero X\ninst✝⁴ : Zero R\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace R\ninst✝¹ : SizeOf X\ninst✝ : SizeOf R\ntoContinuousMap : ContinuousMap X R\nmap_zero' : Eq (toContinuousMap 0) 0\n⊢ Eq (SizeOf.sizeOf { toContinuousMap := toContinuousMap, map_zero' := map_zero' }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toContinuousMap)) (SizeOf.sizeOf map_zero'))","decl":"/-- The type of continuous maps which map zero to zero.\n\nNote that one should never use the structure projection `ContinuousMapZero.toContinuousMap` and\ninstead favor the coercion `(↑) : C(X, R)₀ → C(X, R)` available from the instance of\n`ContinuousMapClass`. All the instances on `C(X, R)₀` from `C(X, R)` passes through this coercion,\nnot the structure projection. Of course, the two are definitionally equal, but not reducibly so. -/\nstructure ContinuousMapZero (X R : Type*) [Zero X] [Zero R] [TopologicalSpace X]\n    [TopologicalSpace R] extends C(X, R) where\n  map_zero' : toContinuousMap 0 = 0\n\n"}
{"name":"ContinuousMapZero.mk.inj","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝³ : Zero X\ninst✝² : Zero R\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace R\ntoContinuousMap✝ : ContinuousMap X R\nmap_zero'✝ : Eq (toContinuousMap✝ 0) 0\ntoContinuousMap : ContinuousMap X R\nmap_zero' : Eq (toContinuousMap 0) 0\nx✝ : Eq { toContinuousMap := toContinuousMap✝, map_zero' := map_zero'✝ } { toContinuousMap := toContinuousMap, map_zero' := map_zero' }\n⊢ Eq toContinuousMap✝ toContinuousMap","decl":"/-- The type of continuous maps which map zero to zero.\n\nNote that one should never use the structure projection `ContinuousMapZero.toContinuousMap` and\ninstead favor the coercion `(↑) : C(X, R)₀ → C(X, R)` available from the instance of\n`ContinuousMapClass`. All the instances on `C(X, R)₀` from `C(X, R)` passes through this coercion,\nnot the structure projection. Of course, the two are definitionally equal, but not reducibly so. -/\nstructure ContinuousMapZero (X R : Type*) [Zero X] [Zero R] [TopologicalSpace X]\n    [TopologicalSpace R] extends C(X, R) where\n  map_zero' : toContinuousMap 0 = 0\n\n"}
{"name":"ContinuousMapZero.mk.injEq","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝³ : Zero X\ninst✝² : Zero R\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace R\ntoContinuousMap✝ : ContinuousMap X R\nmap_zero'✝ : Eq (toContinuousMap✝ 0) 0\ntoContinuousMap : ContinuousMap X R\nmap_zero' : Eq (toContinuousMap 0) 0\n⊢ Eq (Eq { toContinuousMap := toContinuousMap✝, map_zero' := map_zero'✝ } { toContinuousMap := toContinuousMap, map_zero' := map_zero' }) (Eq toContinuousMap✝ toContinuousMap)","decl":"/-- The type of continuous maps which map zero to zero.\n\nNote that one should never use the structure projection `ContinuousMapZero.toContinuousMap` and\ninstead favor the coercion `(↑) : C(X, R)₀ → C(X, R)` available from the instance of\n`ContinuousMapClass`. All the instances on `C(X, R)₀` from `C(X, R)` passes through this coercion,\nnot the structure projection. Of course, the two are definitionally equal, but not reducibly so. -/\nstructure ContinuousMapZero (X R : Type*) [Zero X] [Zero R] [TopologicalSpace X]\n    [TopologicalSpace R] extends C(X, R) where\n  map_zero' : toContinuousMap 0 = 0\n\n"}
{"name":"ContinuousMapZero.instContinuousMapClass","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_3\ninst✝³ : Zero X\ninst✝² : Zero R\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace R\n⊢ ContinuousMapClass (ContinuousMapZero X R) X R","decl":"instance instContinuousMapClass : ContinuousMapClass C(X, R)₀ X R where\n  map_continuous f := f.continuous\n\n"}
{"name":"ContinuousMapZero.instZeroHomClass","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_3\ninst✝³ : Zero X\ninst✝² : Zero R\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace R\n⊢ ZeroHomClass (ContinuousMapZero X R) X R","decl":"instance instZeroHomClass : ZeroHomClass C(X, R)₀ X R where\n  map_zero f := f.map_zero'\n\n"}
{"name":"ContinuousMapZero.ext","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_3\ninst✝³ : Zero X\ninst✝² : Zero R\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace R\nf g : ContinuousMapZero X R\nh : ∀ (x : X), Eq (f x) (g x)\n⊢ Eq f g","decl":"@[ext]\nlemma ext {f g : C(X, R)₀} (h : ∀ x, f x = g x) : f = g := DFunLike.ext f g h\n\n"}
{"name":"ContinuousMapZero.ext_iff","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_3\ninst✝³ : Zero X\ninst✝² : Zero R\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace R\nf g : ContinuousMapZero X R\n⊢ Iff (Eq f g) (∀ (x : X), Eq (f x) (g x))","decl":"@[ext]\nlemma ext {f g : C(X, R)₀} (h : ∀ x, f x = g x) : f = g := DFunLike.ext f g h\n\n"}
{"name":"ContinuousMapZero.coe_mk","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_3\ninst✝³ : Zero X\ninst✝² : Zero R\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace R\nf : ContinuousMap X R\nh0 : Eq (f 0) 0\n⊢ Eq ⇑{ toContinuousMap := f, map_zero' := h0 } ⇑f","decl":"@[simp]\nlemma coe_mk {f : C(X, R)} {h0 : f 0 = 0} : ⇑(mk f h0) = f := rfl\n\n"}
{"name":"ContinuousMapZero.toContinuousMap_injective","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_3\ninst✝³ : Zero X\ninst✝² : Zero R\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace R\n⊢ Function.Injective toContinuousMap","decl":"lemma toContinuousMap_injective : Injective ((↑) : C(X, R)₀ → C(X, R)) :=\n  fun _ _ h ↦ congr(.mk $(h) _)\n\n"}
{"name":"ContinuousMapZero.range_toContinuousMap","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_3\ninst✝³ : Zero X\ninst✝² : Zero R\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace R\n⊢ Eq (Set.range toContinuousMap) (setOf fun f => Eq (f 0) 0)","decl":"lemma range_toContinuousMap : range ((↑) : C(X, R)₀ → C(X, R)) = {f : C(X, R) | f 0 = 0} :=\n  Set.ext fun f ↦ ⟨fun ⟨f', hf'⟩ ↦ hf' ▸ map_zero f', fun hf ↦ ⟨⟨f, hf⟩, rfl⟩⟩\n\n"}
{"name":"ContinuousMapZero.comp_apply","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nY : Type u_2\nR : Type u_3\ninst✝⁵ : Zero X\ninst✝⁴ : Zero Y\ninst✝³ : Zero R\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace R\ng : ContinuousMapZero Y R\nf : ContinuousMapZero X Y\nx : X\n⊢ Eq ((g.comp f) x) (g (f x))","decl":"@[simp]\nlemma comp_apply (g : C(Y, R)₀) (f : C(X, Y)₀) (x : X) : g.comp f x = g (f x) := rfl\n\n"}
{"name":"ContinuousMapZero.le_def","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_3\ninst✝⁴ : Zero X\ninst✝³ : Zero R\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace R\ninst✝ : PartialOrder R\nf g : ContinuousMapZero X R\n⊢ Iff (LE.le f g) (∀ (x : X), LE.le (f x) (g x))","decl":"lemma le_def [PartialOrder R] (f g : C(X, R)₀) : f ≤ g ↔ ∀ x, f x ≤ g x := Iff.rfl\n\n"}
{"name":"ContinuousMapZero.isEmbedding_toContinuousMap","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_3\ninst✝³ : Zero X\ninst✝² : Zero R\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace R\n⊢ Topology.IsEmbedding toContinuousMap","decl":"lemma isEmbedding_toContinuousMap : IsEmbedding ((↑) : C(X, R)₀ → C(X, R)) where\n  eq_induced := rfl\n  injective _ _ h := ext fun x ↦ congr($(h) x)\n\n"}
{"name":"ContinuousMapZero.embedding_toContinuousMap","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_3\ninst✝³ : Zero X\ninst✝² : Zero R\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace R\n⊢ Topology.IsEmbedding toContinuousMap","decl":"@[deprecated (since := \"2024-10-26\")]\nalias embedding_toContinuousMap := isEmbedding_toContinuousMap\n\n"}
{"name":"ContinuousMapZero.instT0Space","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_3\ninst✝⁴ : Zero X\ninst✝³ : Zero R\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace R\ninst✝ : T0Space R\n⊢ T0Space (ContinuousMapZero X R)","decl":"instance [T0Space R] : T0Space C(X, R)₀ := isEmbedding_toContinuousMap.t0Space\n"}
{"name":"ContinuousMapZero.instR0Space","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_3\ninst✝⁴ : Zero X\ninst✝³ : Zero R\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace R\ninst✝ : R0Space R\n⊢ R0Space (ContinuousMapZero X R)","decl":"instance [R0Space R] : R0Space C(X, R)₀ := isEmbedding_toContinuousMap.r0Space\n"}
{"name":"ContinuousMapZero.instT1Space","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_3\ninst✝⁴ : Zero X\ninst✝³ : Zero R\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace R\ninst✝ : T1Space R\n⊢ T1Space (ContinuousMapZero X R)","decl":"instance [T1Space R] : T1Space C(X, R)₀ := isEmbedding_toContinuousMap.t1Space\n"}
{"name":"ContinuousMapZero.instR1Space","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_3\ninst✝⁴ : Zero X\ninst✝³ : Zero R\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace R\ninst✝ : R1Space R\n⊢ R1Space (ContinuousMapZero X R)","decl":"instance [R1Space R] : R1Space C(X, R)₀ := isEmbedding_toContinuousMap.r1Space\n"}
{"name":"ContinuousMapZero.instT2Space","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_3\ninst✝⁴ : Zero X\ninst✝³ : Zero R\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace R\ninst✝ : T2Space R\n⊢ T2Space (ContinuousMapZero X R)","decl":"instance [T2Space R] : T2Space C(X, R)₀ := isEmbedding_toContinuousMap.t2Space\n"}
{"name":"ContinuousMapZero.instRegularSpace","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_3\ninst✝⁴ : Zero X\ninst✝³ : Zero R\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace R\ninst✝ : RegularSpace R\n⊢ RegularSpace (ContinuousMapZero X R)","decl":"instance [RegularSpace R] : RegularSpace C(X, R)₀ := isEmbedding_toContinuousMap.regularSpace\n"}
{"name":"ContinuousMapZero.instT3Space","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_3\ninst✝⁴ : Zero X\ninst✝³ : Zero R\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace R\ninst✝ : T3Space R\n⊢ T3Space (ContinuousMapZero X R)","decl":"instance [T3Space R] : T3Space C(X, R)₀ := isEmbedding_toContinuousMap.t3Space\n\n"}
{"name":"ContinuousMapZero.instContinuousEvalConst","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_3\ninst✝³ : Zero X\ninst✝² : Zero R\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace R\n⊢ ContinuousEvalConst (ContinuousMapZero X R) X R","decl":"instance instContinuousEvalConst : ContinuousEvalConst C(X, R)₀ X R :=\n  .of_continuous_forget isEmbedding_toContinuousMap.continuous\n\n"}
{"name":"ContinuousMapZero.instContinuousEval","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_3\ninst✝⁴ : Zero X\ninst✝³ : Zero R\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace R\ninst✝ : LocallyCompactPair X R\n⊢ ContinuousEval (ContinuousMapZero X R) X R","decl":"instance instContinuousEval [LocallyCompactPair X R] : ContinuousEval C(X, R)₀ X R :=\n  .of_continuous_forget isEmbedding_toContinuousMap.continuous\n\n"}
{"name":"ContinuousMapZero.isClosedEmbedding_toContinuousMap","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_3\ninst✝⁴ : Zero X\ninst✝³ : Zero R\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace R\ninst✝ : T1Space R\n⊢ Topology.IsClosedEmbedding toContinuousMap","decl":"lemma isClosedEmbedding_toContinuousMap [T1Space R] :\n    IsClosedEmbedding ((↑) : C(X, R)₀ → C(X, R)) where\n  toIsEmbedding := isEmbedding_toContinuousMap\n  isClosed_range := by\n    rw [range_toContinuousMap]\n    exact isClosed_singleton.preimage <| continuous_eval_const 0\n\n"}
{"name":"ContinuousMapZero.closedEmbedding_toContinuousMap","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_3\ninst✝⁴ : Zero X\ninst✝³ : Zero R\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace R\ninst✝ : T1Space R\n⊢ Topology.IsClosedEmbedding toContinuousMap","decl":"@[deprecated (since := \"2024-10-20\")]\nalias closedEmbedding_toContinuousMap := isClosedEmbedding_toContinuousMap\n\n"}
{"name":"ContinuousMapZero.continuous_comp_left","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_4\nY : Type u_5\nZ : Type u_6\ninst✝⁵ : TopologicalSpace X\ninst✝⁴ : TopologicalSpace Y\ninst✝³ : TopologicalSpace Z\ninst✝² : Zero X\ninst✝¹ : Zero Y\ninst✝ : Zero Z\nf : ContinuousMapZero X Y\n⊢ Continuous fun g => g.comp f","decl":"@[fun_prop]\nlemma continuous_comp_left {X Y Z : Type*} [TopologicalSpace X]\n    [TopologicalSpace Y] [TopologicalSpace Z] [Zero X] [Zero Y] [Zero Z] (f : C(X, Y)₀) :\n    Continuous fun g : C(Y, Z)₀ ↦ g.comp f := by\n  rw [continuous_induced_rng]\n  show Continuous fun g : C(Y, Z)₀ ↦ (g : C(Y, Z)).comp (f : C(X, Y))\n  fun_prop\n\n"}
{"name":"ContinuousMapZero.id_toFun","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"R : Type u_3\ninst✝² : Zero R\ninst✝¹ : TopologicalSpace R\ns : Set R\ninst✝ : Zero ↑s\nh0 : Eq (↑0) 0\na✝ : ↑s\n⊢ Eq ((ContinuousMapZero.id h0) a✝) ↑a✝","decl":"/-- The identity function as an element of `C(s, R)₀` when `0 ∈ (s : Set R)`. -/\n@[simps!]\nprotected def id {s : Set R} [Zero s] (h0 : ((0 : s) : R) = 0) : C(s, R)₀ :=\n  ⟨.restrict s (.id R), h0⟩\n\n"}
{"name":"ContinuousMapZero.toContinuousMap_id","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"R : Type u_3\ninst✝² : Zero R\ninst✝¹ : TopologicalSpace R\ns : Set R\ninst✝ : Zero ↑s\nh0 : Eq (↑0) 0\n⊢ Eq (↑(ContinuousMapZero.id h0)) (ContinuousMap.restrict s (ContinuousMap.id R))","decl":"@[simp]\nlemma toContinuousMap_id {s : Set R} [Zero s] (h0 : ((0 : s) : R) = 0) :\n    (ContinuousMapZero.id h0 : C(s, R)) = .restrict s (.id R) :=\n  rfl\n\n"}
{"name":"ContinuousMapZero.coe_zero","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝³ : Zero X\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace R\ninst✝ : Zero R\n⊢ Eq (⇑0) 0","decl":"@[simp] lemma coe_zero [Zero R] : ⇑(0 : C(X, R)₀) = 0 := rfl\n\n"}
{"name":"ContinuousMapZero.coe_add","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝⁴ : Zero X\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace R\ninst✝¹ : AddZeroClass R\ninst✝ : ContinuousAdd R\nf g : ContinuousMapZero X R\n⊢ Eq (⇑(HAdd.hAdd f g)) (HAdd.hAdd ⇑f ⇑g)","decl":"@[simp] lemma coe_add [AddZeroClass R] [ContinuousAdd R] (f g : C(X, R)₀) : ⇑(f + g) = f + g := rfl\n\n"}
{"name":"ContinuousMapZero.coe_mul","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝⁴ : Zero X\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace R\ninst✝¹ : MulZeroClass R\ninst✝ : ContinuousMul R\nf g : ContinuousMapZero X R\n⊢ Eq (⇑(HMul.hMul f g)) (HMul.hMul ⇑f ⇑g)","decl":"@[simp] lemma coe_mul [MulZeroClass R] [ContinuousMul R] (f g : C(X, R)₀) : ⇑(f * g) = f * g := rfl\n\n"}
{"name":"ContinuousMapZero.coe_smul","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝⁵ : Zero X\ninst✝⁴ : TopologicalSpace X\ninst✝³ : TopologicalSpace R\nM : Type u_3\ninst✝² : Zero R\ninst✝¹ : SMulZeroClass M R\ninst✝ : ContinuousConstSMul M R\nm : M\nf : ContinuousMapZero X R\n⊢ Eq (⇑(HSMul.hSMul m f)) (HSMul.hSMul m ⇑f)","decl":"@[simp] lemma coe_smul {M : Type*} [Zero R] [SMulZeroClass M R] [ContinuousConstSMul M R]\n    (m : M) (f : C(X, R)₀) : ⇑(m • f) = m • f := rfl\n\n"}
{"name":"ContinuousMapZero.instSMulCommClass","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝⁸ : Zero X\ninst✝⁷ : TopologicalSpace X\ninst✝⁶ : TopologicalSpace R\ninst✝⁵ : CommSemiring R\nM : Type u_3\nN : Type u_4\ninst✝⁴ : SMulZeroClass M R\ninst✝³ : ContinuousConstSMul M R\ninst✝² : SMulZeroClass N R\ninst✝¹ : ContinuousConstSMul N R\ninst✝ : SMulCommClass M N R\n⊢ SMulCommClass M N (ContinuousMapZero X R)","decl":"instance instSMulCommClass {M N : Type*} [SMulZeroClass M R] [ContinuousConstSMul M R]\n    [SMulZeroClass N R] [ContinuousConstSMul N R] [SMulCommClass M N R] :\n    SMulCommClass M N C(X, R)₀ where\n  smul_comm _ _ _ := ext fun _ ↦ smul_comm ..\n\n"}
{"name":"ContinuousMapZero.instSMulCommClass'","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝⁷ : Zero X\ninst✝⁶ : TopologicalSpace X\ninst✝⁵ : TopologicalSpace R\ninst✝⁴ : CommSemiring R\ninst✝³ : TopologicalSemiring R\nM : Type u_3\ninst✝² : SMulZeroClass M R\ninst✝¹ : SMulCommClass M R R\ninst✝ : ContinuousConstSMul M R\n⊢ SMulCommClass M (ContinuousMapZero X R) (ContinuousMapZero X R)","decl":"instance instSMulCommClass' {M : Type*} [SMulZeroClass M R] [SMulCommClass M R R]\n    [ContinuousConstSMul M R] : SMulCommClass M C(X, R)₀ C(X, R)₀ where\n  smul_comm m f g := ext fun x ↦ smul_comm m (f x) (g x)\n\n"}
{"name":"ContinuousMapZero.instIsScalarTower","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝⁹ : Zero X\ninst✝⁸ : TopologicalSpace X\ninst✝⁷ : TopologicalSpace R\ninst✝⁶ : CommSemiring R\nM : Type u_3\nN : Type u_4\ninst✝⁵ : SMulZeroClass M R\ninst✝⁴ : ContinuousConstSMul M R\ninst✝³ : SMulZeroClass N R\ninst✝² : ContinuousConstSMul N R\ninst✝¹ : SMul M N\ninst✝ : IsScalarTower M N R\n⊢ IsScalarTower M N (ContinuousMapZero X R)","decl":"instance instIsScalarTower {M N : Type*} [SMulZeroClass M R] [ContinuousConstSMul M R]\n    [SMulZeroClass N R] [ContinuousConstSMul N R] [SMul M N] [IsScalarTower M N R] :\n    IsScalarTower M N C(X, R)₀ where\n  smul_assoc _ _ _ := ext fun _ ↦ smul_assoc ..\n\n"}
{"name":"ContinuousMapZero.instIsScalarTower'","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝⁷ : Zero X\ninst✝⁶ : TopologicalSpace X\ninst✝⁵ : TopologicalSpace R\ninst✝⁴ : CommSemiring R\ninst✝³ : TopologicalSemiring R\nM : Type u_3\ninst✝² : SMulZeroClass M R\ninst✝¹ : IsScalarTower M R R\ninst✝ : ContinuousConstSMul M R\n⊢ IsScalarTower M (ContinuousMapZero X R) (ContinuousMapZero X R)","decl":"instance instIsScalarTower' {M : Type*} [SMulZeroClass M R] [IsScalarTower M R R]\n    [ContinuousConstSMul M R] : IsScalarTower M C(X, R)₀ C(X, R)₀ where\n  smul_assoc m f g := ext fun x ↦ smul_assoc m (f x) (g x)\n\n"}
{"name":"ContinuousMapZero.instStarModule","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝¹⁰ : Zero X\ninst✝⁹ : TopologicalSpace X\ninst✝⁸ : TopologicalSpace R\ninst✝⁷ : CommSemiring R\ninst✝⁶ : TopologicalSemiring R\ninst✝⁵ : StarRing R\nM : Type u_3\ninst✝⁴ : SMulZeroClass M R\ninst✝³ : ContinuousConstSMul M R\ninst✝² : Star M\ninst✝¹ : StarModule M R\ninst✝ : ContinuousStar R\n⊢ StarModule M (ContinuousMapZero X R)","decl":"instance instStarModule [StarRing R] {M : Type*} [SMulZeroClass M R] [ContinuousConstSMul M R]\n    [Star M] [StarModule M R] [ContinuousStar R] : StarModule M C(X, R)₀ where\n  star_smul r f := ext fun x ↦ star_smul r (f x)\n\n"}
{"name":"ContinuousMapZero.coe_star","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝⁶ : Zero X\ninst✝⁵ : TopologicalSpace X\ninst✝⁴ : TopologicalSpace R\ninst✝³ : CommSemiring R\ninst✝² : TopologicalSemiring R\ninst✝¹ : StarRing R\ninst✝ : ContinuousStar R\nf : ContinuousMapZero X R\n⊢ Eq (⇑(Star.star f)) (Star.star ⇑f)","decl":"@[simp] lemma coe_star [StarRing R] [ContinuousStar R] (f : C(X, R)₀) : ⇑(star f) = star ⇑f := rfl\n\n"}
{"name":"ContinuousMapZero.instTrivialStar","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝⁷ : Zero X\ninst✝⁶ : TopologicalSpace X\ninst✝⁵ : TopologicalSpace R\ninst✝⁴ : CommSemiring R\ninst✝³ : TopologicalSemiring R\ninst✝² : StarRing R\ninst✝¹ : ContinuousStar R\ninst✝ : TrivialStar R\n⊢ TrivialStar (ContinuousMapZero X R)","decl":"instance [StarRing R] [ContinuousStar R] [TrivialStar R] : TrivialStar C(X, R)₀ where\n  star_trivial _ := DFunLike.ext _ _ fun _ ↦ star_trivial _\n\n"}
{"name":"ContinuousMapZero.instCanLift","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝³ : Zero X\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace R\ninst✝ : CommSemiring R\n⊢ CanLift (ContinuousMap X R) (ContinuousMapZero X R) toContinuousMap fun f => Eq (f 0) 0","decl":"instance instCanLift : CanLift C(X, R) C(X, R)₀ (↑) (fun f ↦ f 0 = 0) where\n  prf f hf := ⟨⟨f, hf⟩, rfl⟩\n\n"}
{"name":"ContinuousMapZero.toContinuousMapHom_apply","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝⁶ : Zero X\ninst✝⁵ : TopologicalSpace X\ninst✝⁴ : TopologicalSpace R\ninst✝³ : CommSemiring R\ninst✝² : TopologicalSemiring R\ninst✝¹ : StarRing R\ninst✝ : ContinuousStar R\nf : ContinuousMapZero X R\n⊢ Eq (ContinuousMapZero.toContinuousMapHom f) ↑f","decl":"/-- The coercion `C(X, R)₀ → C(X, R)` bundled as a non-unital star algebra homomorphism. -/\n@[simps]\ndef toContinuousMapHom [StarRing R] [ContinuousStar R] : C(X, R)₀ →⋆ₙₐ[R] C(X, R) where\n  toFun f := f\n  map_smul' _ _ := rfl\n  map_zero' := rfl\n  map_add' _ _ := rfl\n  map_mul' _ _ := rfl\n  map_star' _ := rfl\n\n"}
{"name":"ContinuousMapZero.coe_toContinuousMapHom","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝⁶ : Zero X\ninst✝⁵ : TopologicalSpace X\ninst✝⁴ : TopologicalSpace R\ninst✝³ : CommSemiring R\ninst✝² : TopologicalSemiring R\ninst✝¹ : StarRing R\ninst✝ : ContinuousStar R\n⊢ Eq (⇑ContinuousMapZero.toContinuousMapHom) toContinuousMap","decl":"lemma coe_toContinuousMapHom [StarRing R] [ContinuousStar R] :\n    ⇑(toContinuousMapHom (X := X) (R := R)) = (↑) :=\n  rfl\n\n"}
{"name":"ContinuousMapZero.toContinuousMapCLM_apply","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝⁷ : Zero X\ninst✝⁶ : TopologicalSpace X\ninst✝⁵ : TopologicalSpace R\ninst✝⁴ : CommSemiring R\ninst✝³ : TopologicalSemiring R\nM : Type u_3\ninst✝² : Semiring M\ninst✝¹ : Module M R\ninst✝ : ContinuousConstSMul M R\nf : ContinuousMapZero X R\n⊢ Eq ((ContinuousMapZero.toContinuousMapCLM M) f) ↑f","decl":"/-- The coercion `C(X, R)₀ → C(X, R)` bundled as a continuous linear map. -/\n@[simps]\ndef toContinuousMapCLM (M : Type*) [Semiring M] [Module M R] [ContinuousConstSMul M R] :\n    C(X, R)₀ →L[M] C(X, R) where\n  toFun f := f\n  map_add' _ _ := rfl\n  map_smul' _ _ := rfl\n\n"}
{"name":"ContinuousMapZero.evalCLM_apply","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝⁷ : Zero X\ninst✝⁶ : TopologicalSpace X\ninst✝⁵ : TopologicalSpace R\ninst✝⁴ : CommSemiring R\ninst✝³ : TopologicalSemiring R\n𝕜 : Type u_3\ninst✝² : Semiring 𝕜\ninst✝¹ : Module 𝕜 R\ninst✝ : ContinuousConstSMul 𝕜 R\nx : X\nf : ContinuousMapZero X R\n⊢ Eq ((ContinuousMapZero.evalCLM 𝕜 x) f) (f x)","decl":"@[simp]\nlemma evalCLM_apply {𝕜 : Type*} [Semiring 𝕜] [Module 𝕜 R] [ContinuousConstSMul 𝕜 R]\n    (x : X) (f : C(X, R)₀) : evalCLM 𝕜 x f = f x := rfl\n\n"}
{"name":"ContinuousMapZero.coe_sum","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝⁴ : Zero X\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace R\ninst✝¹ : CommSemiring R\ninst✝ : TopologicalSemiring R\nι : Type u_3\ns : Finset ι\nf : ι → ContinuousMapZero X R\n⊢ Eq (⇑(s.sum f)) (s.sum fun i => ⇑(f i))","decl":"@[simp] lemma coe_sum {ι : Type*} (s : Finset ι)\n    (f : ι → C(X, R)₀) : ⇑(s.sum f) = s.sum (fun i => ⇑(f i)) :=\n  map_sum coeFnAddMonoidHom f s\n\n"}
{"name":"ContinuousMapZero.coe_neg","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_3\nR : Type u_4\ninst✝⁴ : Zero X\ninst✝³ : TopologicalSpace X\ninst✝² : CommRing R\ninst✝¹ : TopologicalSpace R\ninst✝ : TopologicalRing R\nf : ContinuousMapZero X R\n⊢ Eq (⇑(Neg.neg f)) (Neg.neg ⇑f)","decl":"@[simp]\nlemma coe_neg (f : C(X, R)₀) : ⇑(-f) = -⇑f := rfl\n\n"}
{"name":"ContinuousMapZero.instContinuousNeg","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_3\nR : Type u_4\ninst✝⁴ : Zero X\ninst✝³ : TopologicalSpace X\ninst✝² : CommRing R\ninst✝¹ : TopologicalSpace R\ninst✝ : TopologicalRing R\n⊢ ContinuousNeg (ContinuousMapZero X R)","decl":"instance : ContinuousNeg C(X, R)₀ where\n  continuous_neg := by\n    rw [continuous_induced_rng]\n    exact continuous_neg.comp continuous_induced_dom\n\n"}
{"name":"ContinuousMapZero.isUniformEmbedding_toContinuousMap","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝³ : Zero X\ninst✝² : TopologicalSpace X\ninst✝¹ : Zero R\ninst✝ : UniformSpace R\n⊢ IsUniformEmbedding toContinuousMap","decl":"lemma isUniformEmbedding_toContinuousMap :\n    IsUniformEmbedding ((↑) : C(X, R)₀ → C(X, R)) where\n  comap_uniformity := rfl\n  injective _ _ h := ext fun x ↦ congr($(h) x)\n\n"}
{"name":"ContinuousMapZero.uniformEmbedding_toContinuousMap","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝³ : Zero X\ninst✝² : TopologicalSpace X\ninst✝¹ : Zero R\ninst✝ : UniformSpace R\n⊢ IsUniformEmbedding toContinuousMap","decl":"@[deprecated (since := \"2024-10-01\")]\nalias uniformEmbedding_toContinuousMap := isUniformEmbedding_toContinuousMap\n\n"}
{"name":"ContinuousMapZero.instCompleteSpaceOfT1SpaceOfContinuousMap","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝⁵ : Zero X\ninst✝⁴ : TopologicalSpace X\ninst✝³ : Zero R\ninst✝² : UniformSpace R\ninst✝¹ : T1Space R\ninst✝ : CompleteSpace (ContinuousMap X R)\n⊢ CompleteSpace (ContinuousMapZero X R)","decl":"instance [T1Space R] [CompleteSpace C(X, R)] : CompleteSpace C(X, R)₀ :=\n  completeSpace_iff_isComplete_range isUniformEmbedding_toContinuousMap.isUniformInducing\n    |>.mpr isClosedEmbedding_toContinuousMap.isClosed_range.isComplete\n\n"}
{"name":"ContinuousMapZero.isUniformEmbedding_comp","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝⁵ : Zero X\ninst✝⁴ : TopologicalSpace X\ninst✝³ : Zero R\ninst✝² : UniformSpace R\nY : Type u_3\ninst✝¹ : UniformSpace Y\ninst✝ : Zero Y\ng : ContinuousMapZero Y R\nhg : IsUniformEmbedding ⇑g\n⊢ IsUniformEmbedding fun x => g.comp x","decl":"lemma isUniformEmbedding_comp {Y : Type*} [UniformSpace Y] [Zero Y] (g : C(Y, R)₀)\n    (hg : IsUniformEmbedding g) : IsUniformEmbedding (g.comp · : C(X, Y)₀ → C(X, R)₀) :=\n  isUniformEmbedding_toContinuousMap.of_comp_iff.mp <|\n    ContinuousMap.isUniformEmbedding_comp g.toContinuousMap hg |>.comp\n      isUniformEmbedding_toContinuousMap\n\n"}
{"name":"ContinuousMapZero.uniformEmbedding_comp","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nR : Type u_2\ninst✝⁵ : Zero X\ninst✝⁴ : TopologicalSpace X\ninst✝³ : Zero R\ninst✝² : UniformSpace R\nY : Type u_3\ninst✝¹ : UniformSpace Y\ninst✝ : Zero Y\ng : ContinuousMapZero Y R\nhg : IsUniformEmbedding ⇑g\n⊢ IsUniformEmbedding fun x => g.comp x","decl":"@[deprecated (since := \"2024-10-01\")]\nalias uniformEmbedding_comp := isUniformEmbedding_comp\n\n"}
{"name":"ContinuousMapZero.nonUnitalStarAlgHom_precomp_apply","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nY : Type u_2\nR : Type u_4\ninst✝⁸ : Zero X\ninst✝⁷ : Zero Y\ninst✝⁶ : TopologicalSpace X\ninst✝⁵ : TopologicalSpace Y\ninst✝⁴ : TopologicalSpace R\ninst✝³ : CommSemiring R\ninst✝² : StarRing R\ninst✝¹ : TopologicalSemiring R\ninst✝ : ContinuousStar R\nf : ContinuousMapZero X Y\ng : ContinuousMapZero Y R\n⊢ Eq ((ContinuousMapZero.nonUnitalStarAlgHom_precomp R f) g) (g.comp f)","decl":"variable (R) in\n/-- The functor `C(·, R)₀` from topological spaces with zero (and `ContinuousMapZero` maps) to\nnon-unital star algebras. -/\n@[simps]\ndef nonUnitalStarAlgHom_precomp (f : C(X, Y)₀) : C(Y, R)₀ →⋆ₙₐ[R] C(X, R)₀ where\n  toFun g := g.comp f\n  map_zero' := rfl\n  map_add' _ _ := rfl\n  map_mul' _ _ := rfl\n  map_star' _ := rfl\n  map_smul' _ _ := rfl\n\n"}
{"name":"ContinuousMapZero.nonUnitalStarAlgHom_postcomp_apply","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"X : Type u_1\nM : Type u_3\nR : Type u_4\nS : Type u_5\ninst✝¹⁶ : Zero X\ninst✝¹⁵ : CommSemiring M\ninst✝¹⁴ : TopologicalSpace X\ninst✝¹³ : TopologicalSpace R\ninst✝¹² : TopologicalSpace S\ninst✝¹¹ : CommSemiring R\ninst✝¹⁰ : StarRing R\ninst✝⁹ : TopologicalSemiring R\ninst✝⁸ : ContinuousStar R\ninst✝⁷ : CommSemiring S\ninst✝⁶ : StarRing S\ninst✝⁵ : TopologicalSemiring S\ninst✝⁴ : ContinuousStar S\ninst✝³ : Module M R\ninst✝² : Module M S\ninst✝¹ : ContinuousConstSMul M R\ninst✝ : ContinuousConstSMul M S\nφ : NonUnitalStarAlgHom M R S\nhφ : Continuous ⇑φ\nf : ContinuousMapZero X R\n⊢ Eq ((ContinuousMapZero.nonUnitalStarAlgHom_postcomp X φ hφ) f) ({ toFun := ⇑φ, continuous_toFun := hφ, map_zero' := ⋯ }.comp f)","decl":"variable (X) in\n/-- The functor `C(X, ·)₀` from non-unital topological star algebras (with non-unital continuous\nstar homomorphisms) to non-unital star algebras. -/\n@[simps apply]\ndef nonUnitalStarAlgHom_postcomp (φ : R →⋆ₙₐ[M] S) (hφ : Continuous φ) :\n    C(X, R)₀ →⋆ₙₐ[M] C(X, S)₀ where\n  toFun := .comp ⟨⟨φ, hφ⟩, by simp⟩\n  map_zero' := ext <| by simp\n  map_add' _ _ := ext <| by simp\n  map_mul' _ _ := ext <| by simp\n  map_star' _ := ext <| by simp [map_star]\n  map_smul' r f := ext <| by simp\n\n"}
{"name":"ContinuousMapZero.norm_def","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"α : Type u_1\nR : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : CompactSpace α\ninst✝¹ : Zero α\ninst✝ : NormedAddCommGroup R\nf : ContinuousMapZero α R\n⊢ Eq (Norm.norm f) (Norm.norm ↑f)","decl":"lemma norm_def [NormedAddCommGroup R] (f : C(α, R)₀) : ‖f‖ = ‖(f : C(α, R))‖ :=\n  rfl\n\n"}
{"name":"ContinuousMapZero.instCStarRing","module":"Mathlib.Topology.ContinuousMap.ContinuousMapZero","initialProofState":"α : Type u_1\nR : Type u_3\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : CompactSpace α\ninst✝³ : Zero α\ninst✝² : NormedCommRing R\ninst✝¹ : StarRing R\ninst✝ : CStarRing R\n⊢ CStarRing (ContinuousMapZero α R)","decl":"instance [NormedCommRing R] [StarRing R] [CStarRing R] : CStarRing C(α, R)₀ where\n  norm_mul_self_le f := CStarRing.norm_mul_self_le (f : C(α, R))\n\n"}
