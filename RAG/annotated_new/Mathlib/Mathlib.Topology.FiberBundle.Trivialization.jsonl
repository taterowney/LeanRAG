{"name":"Pretrivialization.proj_toFun","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\nself : Pretrivialization F proj\np : Z\na✝ : Membership.mem self.source p\n⊢ Eq (↑self.toPartialEquiv p).1 (proj p)","decl":"/-- This structure contains the information left for a local trivialization (which is implemented\nbelow as `Trivialization F proj`) if the total space has not been given a topology, but we\nhave a topology on both the fiber and the base space. Through the construction\n`topological_fiber_prebundle F proj` it will be possible to promote a\n`Pretrivialization F proj` to a `Trivialization F proj`. -/\nstructure Pretrivialization (proj : Z → B) extends PartialEquiv Z (B × F) where\n  open_target : IsOpen target\n  baseSet : Set B\n  open_baseSet : IsOpen baseSet\n  source_eq : source = proj ⁻¹' baseSet\n  target_eq : target = baseSet ×ˢ univ\n  proj_toFun : ∀ p ∈ source, (toFun p).1 = proj p\n\n"}
{"name":"Pretrivialization.open_baseSet","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\nself : Pretrivialization F proj\n⊢ IsOpen self.baseSet","decl":"/-- This structure contains the information left for a local trivialization (which is implemented\nbelow as `Trivialization F proj`) if the total space has not been given a topology, but we\nhave a topology on both the fiber and the base space. Through the construction\n`topological_fiber_prebundle F proj` it will be possible to promote a\n`Pretrivialization F proj` to a `Trivialization F proj`. -/\nstructure Pretrivialization (proj : Z → B) extends PartialEquiv Z (B × F) where\n  open_target : IsOpen target\n  baseSet : Set B\n  open_baseSet : IsOpen baseSet\n  source_eq : source = proj ⁻¹' baseSet\n  target_eq : target = baseSet ×ˢ univ\n  proj_toFun : ∀ p ∈ source, (toFun p).1 = proj p\n\n"}
{"name":"Pretrivialization.mk.injEq","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ntoPartialEquiv✝ : PartialEquiv Z (Prod B F)\nopen_target✝ : IsOpen toPartialEquiv✝.target\nbaseSet✝ : Set B\nopen_baseSet✝ : IsOpen baseSet✝\nsource_eq✝ : Eq toPartialEquiv✝.source (Set.preimage proj baseSet✝)\ntarget_eq✝ : Eq toPartialEquiv✝.target (SProd.sprod baseSet✝ Set.univ)\nproj_toFun✝ : ∀ (p : Z), Membership.mem toPartialEquiv✝.source p → Eq (↑toPartialEquiv✝ p).1 (proj p)\ntoPartialEquiv : PartialEquiv Z (Prod B F)\nopen_target : IsOpen toPartialEquiv.target\nbaseSet : Set B\nopen_baseSet : IsOpen baseSet\nsource_eq : Eq toPartialEquiv.source (Set.preimage proj baseSet)\ntarget_eq : Eq toPartialEquiv.target (SProd.sprod baseSet Set.univ)\nproj_toFun : ∀ (p : Z), Membership.mem toPartialEquiv.source p → Eq (↑toPartialEquiv p).1 (proj p)\n⊢ Eq (Eq { toPartialEquiv := toPartialEquiv✝, open_target := open_target✝, baseSet := baseSet✝, open_baseSet := open_baseSet✝, source_eq := source_eq✝, target_eq := target_eq✝, proj_toFun := proj_toFun✝ } { toPartialEquiv := toPartialEquiv, open_target := open_target, baseSet := baseSet, open_baseSet := open_baseSet, source_eq := source_eq, target_eq := target_eq, proj_toFun := proj_toFun }) (And (Eq toPartialEquiv✝ toPartialEquiv) (Eq baseSet✝ baseSet))","decl":"/-- This structure contains the information left for a local trivialization (which is implemented\nbelow as `Trivialization F proj`) if the total space has not been given a topology, but we\nhave a topology on both the fiber and the base space. Through the construction\n`topological_fiber_prebundle F proj` it will be possible to promote a\n`Pretrivialization F proj` to a `Trivialization F proj`. -/\nstructure Pretrivialization (proj : Z → B) extends PartialEquiv Z (B × F) where\n  open_target : IsOpen target\n  baseSet : Set B\n  open_baseSet : IsOpen baseSet\n  source_eq : source = proj ⁻¹' baseSet\n  target_eq : target = baseSet ×ˢ univ\n  proj_toFun : ∀ p ∈ source, (toFun p).1 = proj p\n\n"}
{"name":"Pretrivialization.source_eq","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\nself : Pretrivialization F proj\n⊢ Eq self.source (Set.preimage proj self.baseSet)","decl":"/-- This structure contains the information left for a local trivialization (which is implemented\nbelow as `Trivialization F proj`) if the total space has not been given a topology, but we\nhave a topology on both the fiber and the base space. Through the construction\n`topological_fiber_prebundle F proj` it will be possible to promote a\n`Pretrivialization F proj` to a `Trivialization F proj`. -/\nstructure Pretrivialization (proj : Z → B) extends PartialEquiv Z (B × F) where\n  open_target : IsOpen target\n  baseSet : Set B\n  open_baseSet : IsOpen baseSet\n  source_eq : source = proj ⁻¹' baseSet\n  target_eq : target = baseSet ×ˢ univ\n  proj_toFun : ∀ p ∈ source, (toFun p).1 = proj p\n\n"}
{"name":"Pretrivialization.target_eq","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\nself : Pretrivialization F proj\n⊢ Eq self.target (SProd.sprod self.baseSet Set.univ)","decl":"/-- This structure contains the information left for a local trivialization (which is implemented\nbelow as `Trivialization F proj`) if the total space has not been given a topology, but we\nhave a topology on both the fiber and the base space. Through the construction\n`topological_fiber_prebundle F proj` it will be possible to promote a\n`Pretrivialization F proj` to a `Trivialization F proj`. -/\nstructure Pretrivialization (proj : Z → B) extends PartialEquiv Z (B × F) where\n  open_target : IsOpen target\n  baseSet : Set B\n  open_baseSet : IsOpen baseSet\n  source_eq : source = proj ⁻¹' baseSet\n  target_eq : target = baseSet ×ˢ univ\n  proj_toFun : ∀ p ∈ source, (toFun p).1 = proj p\n\n"}
{"name":"Pretrivialization.mk.inj","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ntoPartialEquiv✝ : PartialEquiv Z (Prod B F)\nopen_target✝ : IsOpen toPartialEquiv✝.target\nbaseSet✝ : Set B\nopen_baseSet✝ : IsOpen baseSet✝\nsource_eq✝ : Eq toPartialEquiv✝.source (Set.preimage proj baseSet✝)\ntarget_eq✝ : Eq toPartialEquiv✝.target (SProd.sprod baseSet✝ Set.univ)\nproj_toFun✝ : ∀ (p : Z), Membership.mem toPartialEquiv✝.source p → Eq (↑toPartialEquiv✝ p).1 (proj p)\ntoPartialEquiv : PartialEquiv Z (Prod B F)\nopen_target : IsOpen toPartialEquiv.target\nbaseSet : Set B\nopen_baseSet : IsOpen baseSet\nsource_eq : Eq toPartialEquiv.source (Set.preimage proj baseSet)\ntarget_eq : Eq toPartialEquiv.target (SProd.sprod baseSet Set.univ)\nproj_toFun : ∀ (p : Z), Membership.mem toPartialEquiv.source p → Eq (↑toPartialEquiv p).1 (proj p)\nx✝ : Eq { toPartialEquiv := toPartialEquiv✝, open_target := open_target✝, baseSet := baseSet✝, open_baseSet := open_baseSet✝, source_eq := source_eq✝, target_eq := target_eq✝, proj_toFun := proj_toFun✝ } { toPartialEquiv := toPartialEquiv, open_target := open_target, baseSet := baseSet, open_baseSet := open_baseSet, source_eq := source_eq, target_eq := target_eq, proj_toFun := proj_toFun }\n⊢ And (Eq toPartialEquiv✝ toPartialEquiv) (Eq baseSet✝ baseSet)","decl":"/-- This structure contains the information left for a local trivialization (which is implemented\nbelow as `Trivialization F proj`) if the total space has not been given a topology, but we\nhave a topology on both the fiber and the base space. Through the construction\n`topological_fiber_prebundle F proj` it will be possible to promote a\n`Pretrivialization F proj` to a `Trivialization F proj`. -/\nstructure Pretrivialization (proj : Z → B) extends PartialEquiv Z (B × F) where\n  open_target : IsOpen target\n  baseSet : Set B\n  open_baseSet : IsOpen baseSet\n  source_eq : source = proj ⁻¹' baseSet\n  target_eq : target = baseSet ×ˢ univ\n  proj_toFun : ∀ p ∈ source, (toFun p).1 = proj p\n\n"}
{"name":"Pretrivialization.mk.sizeOf_spec","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝⁴ : TopologicalSpace B\ninst✝³ : TopologicalSpace F\nproj : Z → B\ninst✝² : SizeOf B\ninst✝¹ : SizeOf F\ninst✝ : SizeOf Z\ntoPartialEquiv : PartialEquiv Z (Prod B F)\nopen_target : IsOpen toPartialEquiv.target\nbaseSet : Set B\nopen_baseSet : IsOpen baseSet\nsource_eq : Eq toPartialEquiv.source (Set.preimage proj baseSet)\ntarget_eq : Eq toPartialEquiv.target (SProd.sprod baseSet Set.univ)\nproj_toFun : ∀ (p : Z), Membership.mem toPartialEquiv.source p → Eq (↑toPartialEquiv p).1 (proj p)\n⊢ Eq (SizeOf.sizeOf { toPartialEquiv := toPartialEquiv, open_target := open_target, baseSet := baseSet, open_baseSet := open_baseSet, source_eq := source_eq, target_eq := target_eq, proj_toFun := proj_toFun }) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toPartialEquiv)) (SizeOf.sizeOf open_target)) (SizeOf.sizeOf open_baseSet)) (SizeOf.sizeOf source_eq)) (SizeOf.sizeOf target_eq))","decl":"/-- This structure contains the information left for a local trivialization (which is implemented\nbelow as `Trivialization F proj`) if the total space has not been given a topology, but we\nhave a topology on both the fiber and the base space. Through the construction\n`topological_fiber_prebundle F proj` it will be possible to promote a\n`Pretrivialization F proj` to a `Trivialization F proj`. -/\nstructure Pretrivialization (proj : Z → B) extends PartialEquiv Z (B × F) where\n  open_target : IsOpen target\n  baseSet : Set B\n  open_baseSet : IsOpen baseSet\n  source_eq : source = proj ⁻¹' baseSet\n  target_eq : target = baseSet ×ˢ univ\n  proj_toFun : ∀ p ∈ source, (toFun p).1 = proj p\n\n"}
{"name":"Pretrivialization.open_target","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\nself : Pretrivialization F proj\n⊢ IsOpen self.target","decl":"/-- This structure contains the information left for a local trivialization (which is implemented\nbelow as `Trivialization F proj`) if the total space has not been given a topology, but we\nhave a topology on both the fiber and the base space. Through the construction\n`topological_fiber_prebundle F proj` it will be possible to promote a\n`Pretrivialization F proj` to a `Trivialization F proj`. -/\nstructure Pretrivialization (proj : Z → B) extends PartialEquiv Z (B × F) where\n  open_target : IsOpen target\n  baseSet : Set B\n  open_baseSet : IsOpen baseSet\n  source_eq : source = proj ⁻¹' baseSet\n  target_eq : target = baseSet ×ˢ univ\n  proj_toFun : ∀ p ∈ source, (toFun p).1 = proj p\n\n"}
{"name":"Pretrivialization.ext'","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne e' : Pretrivialization F proj\nh₁ : Eq e.toPartialEquiv e'.toPartialEquiv\nh₂ : Eq e.baseSet e'.baseSet\n⊢ Eq e e'","decl":"@[ext]\nlemma ext' (e e' : Pretrivialization F proj) (h₁ : e.toPartialEquiv = e'.toPartialEquiv)\n    (h₂ : e.baseSet = e'.baseSet) : e = e' := by\n  cases e; cases e'; congr\n\n-- Porting note (https://github.com/leanprover-community/mathlib4/issues/11215): TODO: move `ext` here?\n"}
{"name":"Pretrivialization.ext'_iff","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne e' : Pretrivialization F proj\n⊢ Iff (Eq e e') (And (Eq e.toPartialEquiv e'.toPartialEquiv) (Eq e.baseSet e'.baseSet))","decl":"@[ext]\nlemma ext' (e e' : Pretrivialization F proj) (h₁ : e.toPartialEquiv = e'.toPartialEquiv)\n    (h₂ : e.baseSet = e'.baseSet) : e = e' := by\n  cases e; cases e'; congr\n\n-- Porting note (https://github.com/leanprover-community/mathlib4/issues/11215): TODO: move `ext` here?\n"}
{"name":"Pretrivialization.ext","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne e' : Pretrivialization F proj\nh₁ : ∀ (x : Z), Eq (↑e x) (↑e' x)\nh₂ : ∀ (x : Prod B F), Eq (↑e.symm x) (↑e'.symm x)\nh₃ : Eq e.baseSet e'.baseSet\n⊢ Eq e e'","decl":"lemma ext {e e' : Pretrivialization F proj} (h₁ : ∀ x, e x = e' x)\n    (h₂ : ∀ x, e.toPartialEquiv.symm x = e'.toPartialEquiv.symm x) (h₃ : e.baseSet = e'.baseSet) :\n    e = e' := by\n  ext1 <;> [ext1; exact h₃]\n  · apply h₁\n  · apply h₂\n  · rw [e.source_eq, e'.source_eq, h₃]\n\n"}
{"name":"Pretrivialization.toPartialEquiv_injective","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : Nonempty F\n⊢ Function.Injective Pretrivialization.toPartialEquiv","decl":"/-- If the fiber is nonempty, then the projection also is. -/\nlemma toPartialEquiv_injective [Nonempty F] :\n    Injective (toPartialEquiv : Pretrivialization F proj → PartialEquiv Z (B × F)) := by\n  refine fun e e' h ↦ ext' _ _ h ?_\n  simpa only [fst_image_prod, univ_nonempty, target_eq]\n    using congr_arg (Prod.fst '' PartialEquiv.target ·) h\n\n"}
{"name":"Pretrivialization.coe_coe","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne : Pretrivialization F proj\n⊢ Eq ↑e.toPartialEquiv ↑e","decl":"@[simp, mfld_simps]\ntheorem coe_coe : ⇑e.toPartialEquiv = e :=\n  rfl\n\n"}
{"name":"Pretrivialization.coe_fst","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne : Pretrivialization F proj\nx : Z\nex : Membership.mem e.source x\n⊢ Eq (↑e x).1 (proj x)","decl":"@[simp, mfld_simps]\ntheorem coe_fst (ex : x ∈ e.source) : (e x).1 = proj x :=\n  e.proj_toFun x ex\n\n"}
{"name":"Pretrivialization.mem_source","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne : Pretrivialization F proj\nx : Z\n⊢ Iff (Membership.mem e.source x) (Membership.mem e.baseSet (proj x))","decl":"theorem mem_source : x ∈ e.source ↔ proj x ∈ e.baseSet := by rw [e.source_eq, mem_preimage]\n\n"}
{"name":"Pretrivialization.coe_fst'","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne : Pretrivialization F proj\nx : Z\nex : Membership.mem e.baseSet (proj x)\n⊢ Eq (↑e x).1 (proj x)","decl":"theorem coe_fst' (ex : proj x ∈ e.baseSet) : (e x).1 = proj x :=\n  e.coe_fst (e.mem_source.2 ex)\n\n"}
{"name":"Pretrivialization.eqOn","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne : Pretrivialization F proj\n⊢ Set.EqOn (Function.comp Prod.fst ↑e) proj e.source","decl":"protected theorem eqOn : EqOn (Prod.fst ∘ e) proj e.source := fun _ hx => e.coe_fst hx\n\n"}
{"name":"Pretrivialization.mk_proj_snd","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne : Pretrivialization F proj\nx : Z\nex : Membership.mem e.source x\n⊢ Eq { fst := proj x, snd := (↑e x).2 } (↑e x)","decl":"theorem mk_proj_snd (ex : x ∈ e.source) : (proj x, (e x).2) = e x :=\n  Prod.ext (e.coe_fst ex).symm rfl\n\n"}
{"name":"Pretrivialization.mk_proj_snd'","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne : Pretrivialization F proj\nx : Z\nex : Membership.mem e.baseSet (proj x)\n⊢ Eq { fst := proj x, snd := (↑e x).2 } (↑e x)","decl":"theorem mk_proj_snd' (ex : proj x ∈ e.baseSet) : (proj x, (e x).2) = e x :=\n  Prod.ext (e.coe_fst' ex).symm rfl\n\n"}
{"name":"Pretrivialization.mem_target","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne : Pretrivialization F proj\nx : Prod B F\n⊢ Iff (Membership.mem e.target x) (Membership.mem e.baseSet x.1)","decl":"theorem mem_target {x : B × F} : x ∈ e.target ↔ x.1 ∈ e.baseSet := by\n  rw [e.target_eq, prod_univ, mem_preimage]\n\n"}
{"name":"Pretrivialization.proj_symm_apply","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne : Pretrivialization F proj\nx : Prod B F\nhx : Membership.mem e.target x\n⊢ Eq (proj (↑e.symm x)) x.1","decl":"theorem proj_symm_apply {x : B × F} (hx : x ∈ e.target) : proj (e.toPartialEquiv.symm x) = x.1 := by\n  have := (e.coe_fst (e.map_target hx)).symm\n  rwa [← e.coe_coe, e.right_inv hx] at this\n\n"}
{"name":"Pretrivialization.proj_symm_apply'","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne : Pretrivialization F proj\nb : B\nx : F\nhx : Membership.mem e.baseSet b\n⊢ Eq (proj (↑e.symm { fst := b, snd := x })) b","decl":"theorem proj_symm_apply' {b : B} {x : F} (hx : b ∈ e.baseSet) :\n    proj (e.toPartialEquiv.symm (b, x)) = b :=\n  e.proj_symm_apply (e.mem_target.2 hx)\n\n"}
{"name":"Pretrivialization.proj_surjOn_baseSet","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ne : Pretrivialization F proj\ninst✝ : Nonempty F\n⊢ Set.SurjOn proj e.source e.baseSet","decl":"theorem proj_surjOn_baseSet [Nonempty F] : Set.SurjOn proj e.source e.baseSet := fun b hb =>\n  let ⟨y⟩ := ‹Nonempty F›\n  ⟨e.toPartialEquiv.symm (b, y), e.toPartialEquiv.map_target <| e.mem_target.2 hb,\n    e.proj_symm_apply' hb⟩\n\n"}
{"name":"Pretrivialization.apply_symm_apply","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne : Pretrivialization F proj\nx : Prod B F\nhx : Membership.mem e.target x\n⊢ Eq (↑e (↑e.symm x)) x","decl":"theorem apply_symm_apply {x : B × F} (hx : x ∈ e.target) : e (e.toPartialEquiv.symm x) = x :=\n  e.toPartialEquiv.right_inv hx\n\n"}
{"name":"Pretrivialization.apply_symm_apply'","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne : Pretrivialization F proj\nb : B\nx : F\nhx : Membership.mem e.baseSet b\n⊢ Eq (↑e (↑e.symm { fst := b, snd := x })) { fst := b, snd := x }","decl":"theorem apply_symm_apply' {b : B} {x : F} (hx : b ∈ e.baseSet) :\n    e (e.toPartialEquiv.symm (b, x)) = (b, x) :=\n  e.apply_symm_apply (e.mem_target.2 hx)\n\n"}
{"name":"Pretrivialization.symm_apply_apply","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne : Pretrivialization F proj\nx : Z\nhx : Membership.mem e.source x\n⊢ Eq (↑e.symm (↑e x)) x","decl":"theorem symm_apply_apply {x : Z} (hx : x ∈ e.source) : e.toPartialEquiv.symm (e x) = x :=\n  e.toPartialEquiv.left_inv hx\n\n"}
{"name":"Pretrivialization.symm_apply_mk_proj","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne : Pretrivialization F proj\nx : Z\nex : Membership.mem e.source x\n⊢ Eq (↑e.symm { fst := proj x, snd := (↑e x).2 }) x","decl":"@[simp, mfld_simps]\ntheorem symm_apply_mk_proj {x : Z} (ex : x ∈ e.source) :\n    e.toPartialEquiv.symm (proj x, (e x).2) = x := by\n  rw [← e.coe_fst ex, ← e.coe_coe, e.left_inv ex]\n\n"}
{"name":"Pretrivialization.preimage_symm_proj_baseSet","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne : Pretrivialization F proj\n⊢ Eq (Inter.inter (Set.preimage (↑e.symm) (Set.preimage proj e.baseSet)) e.target) e.target","decl":"@[simp, mfld_simps]\ntheorem preimage_symm_proj_baseSet :\n    e.toPartialEquiv.symm ⁻¹' (proj ⁻¹' e.baseSet) ∩ e.target = e.target := by\n  refine inter_eq_right.mpr fun x hx => ?_\n  simp only [mem_preimage, PartialEquiv.invFun_as_coe, e.proj_symm_apply hx]\n  exact e.mem_target.mp hx\n\n"}
{"name":"Pretrivialization.preimage_symm_proj_inter","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne : Pretrivialization F proj\ns : Set B\n⊢ Eq (Inter.inter (Set.preimage (↑e.symm) (Set.preimage proj s)) (SProd.sprod e.baseSet Set.univ)) (SProd.sprod (Inter.inter s e.baseSet) Set.univ)","decl":"@[simp, mfld_simps]\ntheorem preimage_symm_proj_inter (s : Set B) :\n    e.toPartialEquiv.symm ⁻¹' (proj ⁻¹' s) ∩ e.baseSet ×ˢ univ = (s ∩ e.baseSet) ×ˢ univ := by\n  ext ⟨x, y⟩\n  suffices x ∈ e.baseSet → (proj (e.toPartialEquiv.symm (x, y)) ∈ s ↔ x ∈ s) by\n    simpa only [prod_mk_mem_set_prod_eq, mem_inter_iff, and_true, mem_univ, and_congr_left_iff]\n  intro h\n  rw [e.proj_symm_apply' h]\n\n"}
{"name":"Pretrivialization.target_inter_preimage_symm_source_eq","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne f : Pretrivialization F proj\n⊢ Eq (Inter.inter f.target (Set.preimage (↑f.symm) e.source)) (SProd.sprod (Inter.inter e.baseSet f.baseSet) Set.univ)","decl":"theorem target_inter_preimage_symm_source_eq (e f : Pretrivialization F proj) :\n    f.target ∩ f.toPartialEquiv.symm ⁻¹' e.source = (e.baseSet ∩ f.baseSet) ×ˢ univ := by\n  rw [inter_comm, f.target_eq, e.source_eq, f.preimage_symm_proj_inter]\n\n"}
{"name":"Pretrivialization.trans_source","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne f : Pretrivialization F proj\n⊢ Eq (f.symm.trans e.toPartialEquiv).source (SProd.sprod (Inter.inter e.baseSet f.baseSet) Set.univ)","decl":"theorem trans_source (e f : Pretrivialization F proj) :\n    (f.toPartialEquiv.symm.trans e.toPartialEquiv).source = (e.baseSet ∩ f.baseSet) ×ˢ univ := by\n  rw [PartialEquiv.trans_source, PartialEquiv.symm_source, e.target_inter_preimage_symm_source_eq]\n\n"}
{"name":"Pretrivialization.symm_trans_symm","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne e' : Pretrivialization F proj\n⊢ Eq (e.symm.trans e'.toPartialEquiv).symm (e'.symm.trans e.toPartialEquiv)","decl":"theorem symm_trans_symm (e e' : Pretrivialization F proj) :\n    (e.toPartialEquiv.symm.trans e'.toPartialEquiv).symm\n      = e'.toPartialEquiv.symm.trans e.toPartialEquiv := by\n  rw [PartialEquiv.trans_symm_eq_symm_trans_symm, PartialEquiv.symm_symm]\n\n"}
{"name":"Pretrivialization.symm_trans_source_eq","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne e' : Pretrivialization F proj\n⊢ Eq (e.symm.trans e'.toPartialEquiv).source (SProd.sprod (Inter.inter e.baseSet e'.baseSet) Set.univ)","decl":"theorem symm_trans_source_eq (e e' : Pretrivialization F proj) :\n    (e.toPartialEquiv.symm.trans e'.toPartialEquiv).source = (e.baseSet ∩ e'.baseSet) ×ˢ univ := by\n  rw [PartialEquiv.trans_source, e'.source_eq, PartialEquiv.symm_source, e.target_eq, inter_comm,\n    e.preimage_symm_proj_inter, inter_comm]\n\n"}
{"name":"Pretrivialization.symm_trans_target_eq","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nproj : Z → B\ne e' : Pretrivialization F proj\n⊢ Eq (e.symm.trans e'.toPartialEquiv).target (SProd.sprod (Inter.inter e.baseSet e'.baseSet) Set.univ)","decl":"theorem symm_trans_target_eq (e e' : Pretrivialization F proj) :\n    (e.toPartialEquiv.symm.trans e'.toPartialEquiv).target = (e.baseSet ∩ e'.baseSet) ×ˢ univ := by\n  rw [← PartialEquiv.symm_source, symm_trans_symm, symm_trans_source_eq, inter_comm]\n\n"}
{"name":"Pretrivialization.coe_mem_source","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\ne' : Pretrivialization F Bundle.TotalSpace.proj\nb : B\ny : E b\n⊢ Iff (Membership.mem e'.source { proj := b, snd := y }) (Membership.mem e'.baseSet b)","decl":"@[simp]\ntheorem coe_mem_source : ↑y ∈ e'.source ↔ b ∈ e'.baseSet :=\n  e'.mem_source\n\n"}
{"name":"Pretrivialization.coe_coe_fst","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\ne' : Pretrivialization F Bundle.TotalSpace.proj\nb : B\ny : E b\nhb : Membership.mem e'.baseSet b\n⊢ Eq (↑e' { proj := b, snd := y }).1 b","decl":"@[simp, mfld_simps]\ntheorem coe_coe_fst (hb : b ∈ e'.baseSet) : (e' y).1 = b :=\n  e'.coe_fst (e'.mem_source.2 hb)\n\n"}
{"name":"Pretrivialization.mk_mem_target","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\ne' : Pretrivialization F Bundle.TotalSpace.proj\nx : B\ny : F\n⊢ Iff (Membership.mem e'.target { fst := x, snd := y }) (Membership.mem e'.baseSet x)","decl":"theorem mk_mem_target {x : B} {y : F} : (x, y) ∈ e'.target ↔ x ∈ e'.baseSet :=\n  e'.mem_target\n\n"}
{"name":"Pretrivialization.symm_coe_proj","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\nx : B\ny : F\ne' : Pretrivialization F Bundle.TotalSpace.proj\nh : Membership.mem e'.baseSet x\n⊢ Eq (↑e'.symm { fst := x, snd := y }).proj x","decl":"theorem symm_coe_proj {x : B} {y : F} (e' : Pretrivialization F (π F E)) (h : x ∈ e'.baseSet) :\n    (e'.toPartialEquiv.symm (x, y)).1 = x :=\n  e'.proj_symm_apply' h\n\n"}
{"name":"Pretrivialization.symm_apply","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\ninst✝ : (x : B) → Zero (E x)\ne : Pretrivialization F Bundle.TotalSpace.proj\nb : B\nhb : Membership.mem e.baseSet b\ny : F\n⊢ Eq (e.symm b y) (cast ⋯ (↑e.symm { fst := b, snd := y }).snd)","decl":"theorem symm_apply (e : Pretrivialization F (π F E)) {b : B} (hb : b ∈ e.baseSet) (y : F) :\n    e.symm b y = cast (congr_arg E (e.symm_coe_proj hb)) (e.toPartialEquiv.symm (b, y)).2 :=\n  dif_pos hb\n\n"}
{"name":"Pretrivialization.symm_apply_of_not_mem","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\ninst✝ : (x : B) → Zero (E x)\ne : Pretrivialization F Bundle.TotalSpace.proj\nb : B\nhb : Not (Membership.mem e.baseSet b)\ny : F\n⊢ Eq (e.symm b y) 0","decl":"theorem symm_apply_of_not_mem (e : Pretrivialization F (π F E)) {b : B} (hb : b ∉ e.baseSet)\n    (y : F) : e.symm b y = 0 :=\n  dif_neg hb\n\n"}
{"name":"Pretrivialization.coe_symm_of_not_mem","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\ninst✝ : (x : B) → Zero (E x)\ne : Pretrivialization F Bundle.TotalSpace.proj\nb : B\nhb : Not (Membership.mem e.baseSet b)\n⊢ Eq (e.symm b) 0","decl":"theorem coe_symm_of_not_mem (e : Pretrivialization F (π F E)) {b : B} (hb : b ∉ e.baseSet) :\n    (e.symm b : F → E b) = 0 :=\n  funext fun _ => dif_neg hb\n\n"}
{"name":"Pretrivialization.mk_symm","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\ninst✝ : (x : B) → Zero (E x)\ne : Pretrivialization F Bundle.TotalSpace.proj\nb : B\nhb : Membership.mem e.baseSet b\ny : F\n⊢ Eq { proj := b, snd := e.symm b y } (↑e.symm { fst := b, snd := y })","decl":"theorem mk_symm (e : Pretrivialization F (π F E)) {b : B} (hb : b ∈ e.baseSet) (y : F) :\n    TotalSpace.mk b (e.symm b y) = e.toPartialEquiv.symm (b, y) := by\n  simp only [e.symm_apply hb, TotalSpace.mk_cast (e.proj_symm_apply' hb), TotalSpace.eta]\n\n"}
{"name":"Pretrivialization.symm_proj_apply","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\ninst✝ : (x : B) → Zero (E x)\ne : Pretrivialization F Bundle.TotalSpace.proj\nz : Bundle.TotalSpace F E\nhz : Membership.mem e.baseSet z.proj\n⊢ Eq (e.symm z.proj (↑e z).2) z.snd","decl":"theorem symm_proj_apply (e : Pretrivialization F (π F E)) (z : TotalSpace F E)\n    (hz : z.proj ∈ e.baseSet) : e.symm z.proj (e z).2 = z.2 := by\n  rw [e.symm_apply hz, cast_eq_iff_heq, e.mk_proj_snd' hz, e.symm_apply_apply (e.mem_source.mpr hz)]\n\n"}
{"name":"Pretrivialization.symm_apply_apply_mk","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\ninst✝ : (x : B) → Zero (E x)\ne : Pretrivialization F Bundle.TotalSpace.proj\nb : B\nhb : Membership.mem e.baseSet b\ny : E b\n⊢ Eq (e.symm b (↑e { proj := b, snd := y }).2) y","decl":"theorem symm_apply_apply_mk (e : Pretrivialization F (π F E)) {b : B} (hb : b ∈ e.baseSet)\n    (y : E b) : e.symm b (e ⟨b, y⟩).2 = y :=\n  e.symm_proj_apply ⟨b, y⟩ hb\n\n"}
{"name":"Pretrivialization.apply_mk_symm","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\ninst✝ : (x : B) → Zero (E x)\ne : Pretrivialization F Bundle.TotalSpace.proj\nb : B\nhb : Membership.mem e.baseSet b\ny : F\n⊢ Eq (↑e { proj := b, snd := e.symm b y }) { fst := b, snd := y }","decl":"theorem apply_mk_symm (e : Pretrivialization F (π F E)) {b : B} (hb : b ∈ e.baseSet) (y : F) :\n    e ⟨b, e.symm b y⟩ = (b, y) := by\n  rw [e.mk_symm hb, e.apply_symm_apply (e.mk_mem_target.mpr hb)]\n\n"}
{"name":"Trivialization.mk.inj","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalSpace Z\nproj : Z → B\ntoPartialHomeomorph✝ : PartialHomeomorph Z (Prod B F)\nbaseSet✝ : Set B\nopen_baseSet✝ : IsOpen baseSet✝\nsource_eq✝ : Eq toPartialHomeomorph✝.source (Set.preimage proj baseSet✝)\ntarget_eq✝ : Eq toPartialHomeomorph✝.target (SProd.sprod baseSet✝ Set.univ)\nproj_toFun✝ : ∀ (p : Z), Membership.mem toPartialHomeomorph✝.source p → Eq (↑toPartialHomeomorph✝ p).1 (proj p)\ntoPartialHomeomorph : PartialHomeomorph Z (Prod B F)\nbaseSet : Set B\nopen_baseSet : IsOpen baseSet\nsource_eq : Eq toPartialHomeomorph.source (Set.preimage proj baseSet)\ntarget_eq : Eq toPartialHomeomorph.target (SProd.sprod baseSet Set.univ)\nproj_toFun : ∀ (p : Z), Membership.mem toPartialHomeomorph.source p → Eq (↑toPartialHomeomorph p).1 (proj p)\nx✝ : Eq { toPartialHomeomorph := toPartialHomeomorph✝, baseSet := baseSet✝, open_baseSet := open_baseSet✝, source_eq := source_eq✝, target_eq := target_eq✝, proj_toFun := proj_toFun✝ } { toPartialHomeomorph := toPartialHomeomorph, baseSet := baseSet, open_baseSet := open_baseSet, source_eq := source_eq, target_eq := target_eq, proj_toFun := proj_toFun }\n⊢ And (Eq toPartialHomeomorph✝ toPartialHomeomorph) (Eq baseSet✝ baseSet)","decl":"/-- A structure extending partial homeomorphisms, defining a local trivialization of a projection\n`proj : Z → B` with fiber `F`, as a partial homeomorphism between `Z` and `B × F` defined between\ntwo sets of the form `proj ⁻¹' baseSet` and `baseSet × F`, acting trivially on the first coordinate.\n-/\nstructure Trivialization (proj : Z → B) extends PartialHomeomorph Z (B × F) where\n  baseSet : Set B\n  open_baseSet : IsOpen baseSet\n  source_eq : source = proj ⁻¹' baseSet\n  target_eq : target = baseSet ×ˢ univ\n  proj_toFun : ∀ p ∈ source, (toPartialHomeomorph p).1 = proj p\n\n"}
{"name":"Trivialization.mk.sizeOf_spec","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝⁵ : TopologicalSpace B\ninst✝⁴ : TopologicalSpace F\ninst✝³ : TopologicalSpace Z\nproj : Z → B\ninst✝² : SizeOf B\ninst✝¹ : SizeOf F\ninst✝ : SizeOf Z\ntoPartialHomeomorph : PartialHomeomorph Z (Prod B F)\nbaseSet : Set B\nopen_baseSet : IsOpen baseSet\nsource_eq : Eq toPartialHomeomorph.source (Set.preimage proj baseSet)\ntarget_eq : Eq toPartialHomeomorph.target (SProd.sprod baseSet Set.univ)\nproj_toFun : ∀ (p : Z), Membership.mem toPartialHomeomorph.source p → Eq (↑toPartialHomeomorph p).1 (proj p)\n⊢ Eq (SizeOf.sizeOf { toPartialHomeomorph := toPartialHomeomorph, baseSet := baseSet, open_baseSet := open_baseSet, source_eq := source_eq, target_eq := target_eq, proj_toFun := proj_toFun }) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toPartialHomeomorph)) (SizeOf.sizeOf open_baseSet)) (SizeOf.sizeOf source_eq)) (SizeOf.sizeOf target_eq))","decl":"/-- A structure extending partial homeomorphisms, defining a local trivialization of a projection\n`proj : Z → B` with fiber `F`, as a partial homeomorphism between `Z` and `B × F` defined between\ntwo sets of the form `proj ⁻¹' baseSet` and `baseSet × F`, acting trivially on the first coordinate.\n-/\nstructure Trivialization (proj : Z → B) extends PartialHomeomorph Z (B × F) where\n  baseSet : Set B\n  open_baseSet : IsOpen baseSet\n  source_eq : source = proj ⁻¹' baseSet\n  target_eq : target = baseSet ×ˢ univ\n  proj_toFun : ∀ p ∈ source, (toPartialHomeomorph p).1 = proj p\n\n"}
{"name":"Trivialization.mk.injEq","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalSpace Z\nproj : Z → B\ntoPartialHomeomorph✝ : PartialHomeomorph Z (Prod B F)\nbaseSet✝ : Set B\nopen_baseSet✝ : IsOpen baseSet✝\nsource_eq✝ : Eq toPartialHomeomorph✝.source (Set.preimage proj baseSet✝)\ntarget_eq✝ : Eq toPartialHomeomorph✝.target (SProd.sprod baseSet✝ Set.univ)\nproj_toFun✝ : ∀ (p : Z), Membership.mem toPartialHomeomorph✝.source p → Eq (↑toPartialHomeomorph✝ p).1 (proj p)\ntoPartialHomeomorph : PartialHomeomorph Z (Prod B F)\nbaseSet : Set B\nopen_baseSet : IsOpen baseSet\nsource_eq : Eq toPartialHomeomorph.source (Set.preimage proj baseSet)\ntarget_eq : Eq toPartialHomeomorph.target (SProd.sprod baseSet Set.univ)\nproj_toFun : ∀ (p : Z), Membership.mem toPartialHomeomorph.source p → Eq (↑toPartialHomeomorph p).1 (proj p)\n⊢ Eq (Eq { toPartialHomeomorph := toPartialHomeomorph✝, baseSet := baseSet✝, open_baseSet := open_baseSet✝, source_eq := source_eq✝, target_eq := target_eq✝, proj_toFun := proj_toFun✝ } { toPartialHomeomorph := toPartialHomeomorph, baseSet := baseSet, open_baseSet := open_baseSet, source_eq := source_eq, target_eq := target_eq, proj_toFun := proj_toFun }) (And (Eq toPartialHomeomorph✝ toPartialHomeomorph) (Eq baseSet✝ baseSet))","decl":"/-- A structure extending partial homeomorphisms, defining a local trivialization of a projection\n`proj : Z → B` with fiber `F`, as a partial homeomorphism between `Z` and `B × F` defined between\ntwo sets of the form `proj ⁻¹' baseSet` and `baseSet × F`, acting trivially on the first coordinate.\n-/\nstructure Trivialization (proj : Z → B) extends PartialHomeomorph Z (B × F) where\n  baseSet : Set B\n  open_baseSet : IsOpen baseSet\n  source_eq : source = proj ⁻¹' baseSet\n  target_eq : target = baseSet ×ˢ univ\n  proj_toFun : ∀ p ∈ source, (toPartialHomeomorph p).1 = proj p\n\n"}
{"name":"Trivialization.proj_toFun","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalSpace Z\nproj : Z → B\nself : Trivialization F proj\np : Z\na✝ : Membership.mem self.source p\n⊢ Eq (↑self.toPartialHomeomorph p).1 (proj p)","decl":"/-- A structure extending partial homeomorphisms, defining a local trivialization of a projection\n`proj : Z → B` with fiber `F`, as a partial homeomorphism between `Z` and `B × F` defined between\ntwo sets of the form `proj ⁻¹' baseSet` and `baseSet × F`, acting trivially on the first coordinate.\n-/\nstructure Trivialization (proj : Z → B) extends PartialHomeomorph Z (B × F) where\n  baseSet : Set B\n  open_baseSet : IsOpen baseSet\n  source_eq : source = proj ⁻¹' baseSet\n  target_eq : target = baseSet ×ˢ univ\n  proj_toFun : ∀ p ∈ source, (toPartialHomeomorph p).1 = proj p\n\n"}
{"name":"Trivialization.target_eq","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalSpace Z\nproj : Z → B\nself : Trivialization F proj\n⊢ Eq self.target (SProd.sprod self.baseSet Set.univ)","decl":"/-- A structure extending partial homeomorphisms, defining a local trivialization of a projection\n`proj : Z → B` with fiber `F`, as a partial homeomorphism between `Z` and `B × F` defined between\ntwo sets of the form `proj ⁻¹' baseSet` and `baseSet × F`, acting trivially on the first coordinate.\n-/\nstructure Trivialization (proj : Z → B) extends PartialHomeomorph Z (B × F) where\n  baseSet : Set B\n  open_baseSet : IsOpen baseSet\n  source_eq : source = proj ⁻¹' baseSet\n  target_eq : target = baseSet ×ˢ univ\n  proj_toFun : ∀ p ∈ source, (toPartialHomeomorph p).1 = proj p\n\n"}
{"name":"Trivialization.source_eq","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalSpace Z\nproj : Z → B\nself : Trivialization F proj\n⊢ Eq self.source (Set.preimage proj self.baseSet)","decl":"/-- A structure extending partial homeomorphisms, defining a local trivialization of a projection\n`proj : Z → B` with fiber `F`, as a partial homeomorphism between `Z` and `B × F` defined between\ntwo sets of the form `proj ⁻¹' baseSet` and `baseSet × F`, acting trivially on the first coordinate.\n-/\nstructure Trivialization (proj : Z → B) extends PartialHomeomorph Z (B × F) where\n  baseSet : Set B\n  open_baseSet : IsOpen baseSet\n  source_eq : source = proj ⁻¹' baseSet\n  target_eq : target = baseSet ×ˢ univ\n  proj_toFun : ∀ p ∈ source, (toPartialHomeomorph p).1 = proj p\n\n"}
{"name":"Trivialization.open_baseSet","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalSpace Z\nproj : Z → B\nself : Trivialization F proj\n⊢ IsOpen self.baseSet","decl":"/-- A structure extending partial homeomorphisms, defining a local trivialization of a projection\n`proj : Z → B` with fiber `F`, as a partial homeomorphism between `Z` and `B × F` defined between\ntwo sets of the form `proj ⁻¹' baseSet` and `baseSet × F`, acting trivially on the first coordinate.\n-/\nstructure Trivialization (proj : Z → B) extends PartialHomeomorph Z (B × F) where\n  baseSet : Set B\n  open_baseSet : IsOpen baseSet\n  source_eq : source = proj ⁻¹' baseSet\n  target_eq : target = baseSet ×ˢ univ\n  proj_toFun : ∀ p ∈ source, (toPartialHomeomorph p).1 = proj p\n\n"}
{"name":"Trivialization.ext'_iff","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne e' : Trivialization F proj\n⊢ Iff (Eq e e') (And (Eq e.toPartialHomeomorph e'.toPartialHomeomorph) (Eq e.baseSet e'.baseSet))","decl":"@[ext]\nlemma ext' (e e' : Trivialization F proj) (h₁ : e.toPartialHomeomorph = e'.toPartialHomeomorph)\n    (h₂ : e.baseSet = e'.baseSet) : e = e' := by\n  cases e; cases e'; congr\n\n"}
{"name":"Trivialization.ext'","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne e' : Trivialization F proj\nh₁ : Eq e.toPartialHomeomorph e'.toPartialHomeomorph\nh₂ : Eq e.baseSet e'.baseSet\n⊢ Eq e e'","decl":"@[ext]\nlemma ext' (e e' : Trivialization F proj) (h₁ : e.toPartialHomeomorph = e'.toPartialHomeomorph)\n    (h₂ : e.baseSet = e'.baseSet) : e = e' := by\n  cases e; cases e'; congr\n\n"}
{"name":"Trivialization.toPretrivialization_injective","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\n⊢ Function.Injective fun e => e.toPretrivialization","decl":"theorem toPretrivialization_injective :\n    Function.Injective fun e : Trivialization F proj => e.toPretrivialization := fun e e' h => by\n  ext1\n  exacts [PartialHomeomorph.toPartialEquiv_injective (congr_arg Pretrivialization.toPartialEquiv h),\n    congr_arg Pretrivialization.baseSet h]\n\n"}
{"name":"Trivialization.coe_coe","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\n⊢ Eq ↑e.toPartialHomeomorph ↑e","decl":"@[simp, mfld_simps]\ntheorem coe_coe : ⇑e.toPartialHomeomorph = e :=\n  rfl\n\n"}
{"name":"Trivialization.coe_fst","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\nx : Z\nex : Membership.mem e.source x\n⊢ Eq (↑e x).1 (proj x)","decl":"@[simp, mfld_simps]\ntheorem coe_fst (ex : x ∈ e.source) : (e x).1 = proj x :=\n  e.proj_toFun x ex\n\n"}
{"name":"Trivialization.eqOn","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\n⊢ Set.EqOn (Function.comp Prod.fst ↑e) proj e.source","decl":"protected theorem eqOn : EqOn (Prod.fst ∘ e) proj e.source := fun _x hx => e.coe_fst hx\n\n"}
{"name":"Trivialization.mem_source","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\nx : Z\n⊢ Iff (Membership.mem e.source x) (Membership.mem e.baseSet (proj x))","decl":"theorem mem_source : x ∈ e.source ↔ proj x ∈ e.baseSet := by rw [e.source_eq, mem_preimage]\n\n"}
{"name":"Trivialization.coe_fst'","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\nx : Z\nex : Membership.mem e.baseSet (proj x)\n⊢ Eq (↑e x).1 (proj x)","decl":"theorem coe_fst' (ex : proj x ∈ e.baseSet) : (e x).1 = proj x :=\n  e.coe_fst (e.mem_source.2 ex)\n\n"}
{"name":"Trivialization.mk_proj_snd","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\nx : Z\nex : Membership.mem e.source x\n⊢ Eq { fst := proj x, snd := (↑e x).2 } (↑e x)","decl":"theorem mk_proj_snd (ex : x ∈ e.source) : (proj x, (e x).2) = e x :=\n  Prod.ext (e.coe_fst ex).symm rfl\n\n"}
{"name":"Trivialization.mk_proj_snd'","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\nx : Z\nex : Membership.mem e.baseSet (proj x)\n⊢ Eq { fst := proj x, snd := (↑e x).2 } (↑e x)","decl":"theorem mk_proj_snd' (ex : proj x ∈ e.baseSet) : (proj x, (e x).2) = e x :=\n  Prod.ext (e.coe_fst' ex).symm rfl\n\n"}
{"name":"Trivialization.source_inter_preimage_target_inter","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\ns : Set (Prod B F)\n⊢ Eq (Inter.inter e.source (Set.preimage (↑e) (Inter.inter e.target s))) (Inter.inter e.source (Set.preimage (↑e) s))","decl":"theorem source_inter_preimage_target_inter (s : Set (B × F)) :\n    e.source ∩ e ⁻¹' (e.target ∩ s) = e.source ∩ e ⁻¹' s :=\n  e.toPartialHomeomorph.source_inter_preimage_target_inter s\n\n"}
{"name":"Trivialization.coe_mk","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph Z (Prod B F)\ni : Set B\nj : IsOpen i\nk : Eq e.source (Set.preimage proj i)\nl : Eq e.target (SProd.sprod i Set.univ)\nm : ∀ (p : Z), Membership.mem e.source p → Eq (↑e p).1 (proj p)\nx : Z\n⊢ Eq (↑{ toPartialHomeomorph := e, baseSet := i, open_baseSet := j, source_eq := k, target_eq := l, proj_toFun := m } x) (↑e x)","decl":"@[simp, mfld_simps]\ntheorem coe_mk (e : PartialHomeomorph Z (B × F)) (i j k l m) (x : Z) :\n    (Trivialization.mk e i j k l m : Trivialization F proj) x = e x :=\n  rfl\n\n"}
{"name":"Trivialization.mem_target","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\nx : Prod B F\n⊢ Iff (Membership.mem e.target x) (Membership.mem e.baseSet x.1)","decl":"theorem mem_target {x : B × F} : x ∈ e.target ↔ x.1 ∈ e.baseSet :=\n  e.toPretrivialization.mem_target\n\n"}
{"name":"Trivialization.map_target","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\nx : Prod B F\nhx : Membership.mem e.target x\n⊢ Membership.mem e.source (↑e.symm x)","decl":"theorem map_target {x : B × F} (hx : x ∈ e.target) : e.toPartialHomeomorph.symm x ∈ e.source :=\n  e.toPartialHomeomorph.map_target hx\n\n"}
{"name":"Trivialization.proj_symm_apply","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\nx : Prod B F\nhx : Membership.mem e.target x\n⊢ Eq (proj (↑e.symm x)) x.1","decl":"theorem proj_symm_apply {x : B × F} (hx : x ∈ e.target) :\n    proj (e.toPartialHomeomorph.symm x) = x.1 :=\n  e.toPretrivialization.proj_symm_apply hx\n\n"}
{"name":"Trivialization.proj_symm_apply'","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\nb : B\nx : F\nhx : Membership.mem e.baseSet b\n⊢ Eq (proj (↑e.symm { fst := b, snd := x })) b","decl":"theorem proj_symm_apply' {b : B} {x : F} (hx : b ∈ e.baseSet) :\n    proj (e.toPartialHomeomorph.symm (b, x)) = b :=\n  e.toPretrivialization.proj_symm_apply' hx\n\n"}
{"name":"Trivialization.proj_surjOn_baseSet","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝³ : TopologicalSpace B\ninst✝² : TopologicalSpace F\nproj : Z → B\ninst✝¹ : TopologicalSpace Z\ne : Trivialization F proj\ninst✝ : Nonempty F\n⊢ Set.SurjOn proj e.source e.baseSet","decl":"theorem proj_surjOn_baseSet [Nonempty F] : Set.SurjOn proj e.source e.baseSet :=\n  e.toPretrivialization.proj_surjOn_baseSet\n\n"}
{"name":"Trivialization.apply_symm_apply","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\nx : Prod B F\nhx : Membership.mem e.target x\n⊢ Eq (↑e (↑e.symm x)) x","decl":"theorem apply_symm_apply {x : B × F} (hx : x ∈ e.target) : e (e.toPartialHomeomorph.symm x) = x :=\n  e.toPartialHomeomorph.right_inv hx\n\n"}
{"name":"Trivialization.apply_symm_apply'","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\nb : B\nx : F\nhx : Membership.mem e.baseSet b\n⊢ Eq (↑e (↑e.symm { fst := b, snd := x })) { fst := b, snd := x }","decl":"theorem apply_symm_apply' {b : B} {x : F} (hx : b ∈ e.baseSet) :\n    e (e.toPartialHomeomorph.symm (b, x)) = (b, x) :=\n  e.toPretrivialization.apply_symm_apply' hx\n\n"}
{"name":"Trivialization.symm_apply_mk_proj","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\nx : Z\nex : Membership.mem e.source x\n⊢ Eq (↑e.symm { fst := proj x, snd := (↑e x).2 }) x","decl":"@[simp, mfld_simps]\ntheorem symm_apply_mk_proj (ex : x ∈ e.source) : e.toPartialHomeomorph.symm (proj x, (e x).2) = x :=\n  e.toPretrivialization.symm_apply_mk_proj ex\n\n"}
{"name":"Trivialization.symm_trans_source_eq","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne e' : Trivialization F proj\n⊢ Eq (e.symm.trans e'.toPartialEquiv).source (SProd.sprod (Inter.inter e.baseSet e'.baseSet) Set.univ)","decl":"theorem symm_trans_source_eq (e e' : Trivialization F proj) :\n    (e.toPartialEquiv.symm.trans e'.toPartialEquiv).source = (e.baseSet ∩ e'.baseSet) ×ˢ univ :=\n  Pretrivialization.symm_trans_source_eq e.toPretrivialization e'\n\n"}
{"name":"Trivialization.symm_trans_target_eq","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne e' : Trivialization F proj\n⊢ Eq (e.symm.trans e'.toPartialEquiv).target (SProd.sprod (Inter.inter e.baseSet e'.baseSet) Set.univ)","decl":"theorem symm_trans_target_eq (e e' : Trivialization F proj) :\n    (e.toPartialEquiv.symm.trans e'.toPartialEquiv).target = (e.baseSet ∩ e'.baseSet) ×ˢ univ :=\n  Pretrivialization.symm_trans_target_eq e.toPretrivialization e'\n\n"}
{"name":"Trivialization.coe_fst_eventuallyEq_proj","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\nx : Z\nex : Membership.mem e.source x\n⊢ (nhds x).EventuallyEq (Function.comp Prod.fst ↑e) proj","decl":"theorem coe_fst_eventuallyEq_proj (ex : x ∈ e.source) : Prod.fst ∘ e =ᶠ[𝓝 x] proj :=\n  mem_nhds_iff.2 ⟨e.source, fun _y hy => e.coe_fst hy, e.open_source, ex⟩\n\n"}
{"name":"Trivialization.coe_fst_eventuallyEq_proj'","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\nx : Z\nex : Membership.mem e.baseSet (proj x)\n⊢ (nhds x).EventuallyEq (Function.comp Prod.fst ↑e) proj","decl":"theorem coe_fst_eventuallyEq_proj' (ex : proj x ∈ e.baseSet) : Prod.fst ∘ e =ᶠ[𝓝 x] proj :=\n  e.coe_fst_eventuallyEq_proj (e.mem_source.2 ex)\n\n"}
{"name":"Trivialization.map_proj_nhds","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\nx : Z\nex : Membership.mem e.source x\n⊢ Eq (Filter.map proj (nhds x)) (nhds (proj x))","decl":"theorem map_proj_nhds (ex : x ∈ e.source) : map proj (𝓝 x) = 𝓝 (proj x) := by\n  rw [← e.coe_fst ex, ← map_congr (e.coe_fst_eventuallyEq_proj ex), ← map_map, ← e.coe_coe,\n    e.map_nhds_eq ex, map_fst_nhds]\n\n"}
{"name":"Trivialization.preimage_subset_source","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\ns : Set B\nhb : HasSubset.Subset s e.baseSet\n⊢ HasSubset.Subset (Set.preimage proj s) e.source","decl":"theorem preimage_subset_source {s : Set B} (hb : s ⊆ e.baseSet) : proj ⁻¹' s ⊆ e.source :=\n  fun _p hp => e.mem_source.mpr (hb hp)\n\n"}
{"name":"Trivialization.image_preimage_eq_prod_univ","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\ns : Set B\nhb : HasSubset.Subset s e.baseSet\n⊢ Eq (Set.image (↑e) (Set.preimage proj s)) (SProd.sprod s Set.univ)","decl":"theorem image_preimage_eq_prod_univ {s : Set B} (hb : s ⊆ e.baseSet) :\n    e '' (proj ⁻¹' s) = s ×ˢ univ :=\n  Subset.antisymm\n    (image_subset_iff.mpr fun p hp =>\n      ⟨(e.proj_toFun p (e.preimage_subset_source hb hp)).symm ▸ hp, trivial⟩)\n    fun p hp =>\n    let hp' : p ∈ e.target := e.mem_target.mpr (hb hp.1)\n    ⟨e.invFun p, mem_preimage.mpr ((e.proj_symm_apply hp').symm ▸ hp.1), e.apply_symm_apply hp'⟩\n\n"}
{"name":"Trivialization.tendsto_nhds_iff","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\nα : Type u_5\nl : Filter α\nf : α → Z\nz : Z\nhz : Membership.mem e.source z\n⊢ Iff (Filter.Tendsto f l (nhds z)) (And (Filter.Tendsto (Function.comp proj f) l (nhds (proj z))) (Filter.Tendsto (fun x => (↑e (f x)).2) l (nhds (↑e z).2)))","decl":"theorem tendsto_nhds_iff {α : Type*} {l : Filter α} {f : α → Z} {z : Z} (hz : z ∈ e.source) :\n    Tendsto f l (𝓝 z) ↔\n      Tendsto (proj ∘ f) l (𝓝 (proj z)) ∧ Tendsto (fun x ↦ (e (f x)).2) l (𝓝 (e z).2) := by\n  rw [e.nhds_eq_comap_inf_principal hz, tendsto_inf, tendsto_comap_iff, Prod.tendsto_iff, coe_coe,\n    tendsto_principal, coe_fst _ hz]\n  by_cases hl : ∀ᶠ x in l, f x ∈ e.source\n  · simp only [hl, and_true]\n    refine (tendsto_congr' ?_).and Iff.rfl\n    exact hl.mono fun x ↦ e.coe_fst\n  · simp only [hl, and_false, false_iff, not_and]\n    rw [e.source_eq] at hl hz\n    exact fun h _ ↦ hl <| h <| e.open_baseSet.mem_nhds hz\n\n"}
{"name":"Trivialization.nhds_eq_inf_comap","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\nz : Z\nhz : Membership.mem e.source z\n⊢ Eq (nhds z) (Min.min (Filter.comap proj (nhds (proj z))) (Filter.comap (Function.comp Prod.snd ↑e) (nhds (↑e z).2)))","decl":"theorem nhds_eq_inf_comap {z : Z} (hz : z ∈ e.source) :\n    𝓝 z = comap proj (𝓝 (proj z)) ⊓ comap (Prod.snd ∘ e) (𝓝 (e z).2) := by\n  refine eq_of_forall_le_iff fun l ↦ ?_\n  rw [le_inf_iff, ← tendsto_iff_comap, ← tendsto_iff_comap]\n  exact e.tendsto_nhds_iff hz\n\n"}
{"name":"Trivialization.preimageHomeomorph_apply","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\ns : Set B\nhb : HasSubset.Subset s e.baseSet\np : ↑(Set.preimage proj s)\n⊢ Eq ((e.preimageHomeomorph hb) p) { fst := ⟨proj ↑p, ⋯⟩, snd := (↑e ↑p).2 }","decl":"@[simp]\ntheorem preimageHomeomorph_apply {s : Set B} (hb : s ⊆ e.baseSet) (p : proj ⁻¹' s) :\n    e.preimageHomeomorph hb p = (⟨proj p, p.2⟩, (e p).2) :=\n  Prod.ext (Subtype.ext (e.proj_toFun p (e.mem_source.mpr (hb p.2)))) rfl\n\n"}
{"name":"Trivialization.preimageHomeomorph_symm_apply","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\ns : Set B\nhb : HasSubset.Subset s e.baseSet\np : Prod (↑s) F\n⊢ Eq ((e.preimageHomeomorph hb).symm p) ⟨↑e.symm { fst := ↑p.1, snd := p.2 }, ⋯⟩","decl":"@[simp]\ntheorem preimageHomeomorph_symm_apply {s : Set B} (hb : s ⊆ e.baseSet) (p : s × F) :\n    (e.preimageHomeomorph hb).symm p =\n      ⟨e.symm (p.1, p.2), ((preimageHomeomorph_symm_apply.aux e hb) p).2⟩ :=\n  rfl\n\n"}
{"name":"Trivialization.sourceHomeomorphBaseSetProd_apply","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\np : ↑e.source\n⊢ Eq (e.sourceHomeomorphBaseSetProd p) { fst := ⟨proj ↑p, ⋯⟩, snd := (↑e ↑p).2 }","decl":"@[simp]\ntheorem sourceHomeomorphBaseSetProd_apply (p : e.source) :\n    e.sourceHomeomorphBaseSetProd p = (⟨proj p, e.mem_source.mp p.2⟩, (e p).2) :=\n  e.preimageHomeomorph_apply subset_rfl ⟨p, e.mem_source.mp p.2⟩\n\n"}
{"name":"Trivialization.sourceHomeomorphBaseSetProd_symm_apply","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\np : Prod (↑e.baseSet) F\n⊢ Eq (e.sourceHomeomorphBaseSetProd.symm p) ⟨↑e.symm { fst := ↑p.1, snd := p.2 }, ⋯⟩","decl":"@[simp]\ntheorem sourceHomeomorphBaseSetProd_symm_apply (p : e.baseSet × F) :\n    e.sourceHomeomorphBaseSetProd.symm p =\n      ⟨e.symm (p.1, p.2), (sourceHomeomorphBaseSetProd_symm_apply.aux e p).2⟩ :=\n  rfl\n\n"}
{"name":"Trivialization.preimageSingletonHomeomorph_apply","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\nb : B\nhb : Membership.mem e.baseSet b\np : ↑(Set.preimage proj (Singleton.singleton b))\n⊢ Eq ((e.preimageSingletonHomeomorph hb) p) (↑e ↑p).2","decl":"@[simp]\ntheorem preimageSingletonHomeomorph_apply {b : B} (hb : b ∈ e.baseSet) (p : proj ⁻¹' {b}) :\n    e.preimageSingletonHomeomorph hb p = (e p).2 :=\n  rfl\n\n"}
{"name":"Trivialization.preimageSingletonHomeomorph_symm_apply","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\nb : B\nhb : Membership.mem e.baseSet b\np : F\n⊢ Eq ((e.preimageSingletonHomeomorph hb).symm p) ⟨↑e.symm { fst := b, snd := p }, ⋯⟩","decl":"@[simp]\ntheorem preimageSingletonHomeomorph_symm_apply {b : B} (hb : b ∈ e.baseSet) (p : F) :\n    (e.preimageSingletonHomeomorph hb).symm p =\n      ⟨e.symm (b, p), by rw [mem_preimage, e.proj_symm_apply' hb, mem_singleton_iff]⟩ :=\n  rfl\n\n"}
{"name":"Trivialization.continuousAt_proj","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\nx : Z\nex : Membership.mem e.source x\n⊢ ContinuousAt proj x","decl":"/-- In the domain of a bundle trivialization, the projection is continuous -/\ntheorem continuousAt_proj (ex : x ∈ e.source) : ContinuousAt proj x :=\n  (e.map_proj_nhds ex).le\n\n"}
{"name":"Trivialization.continuousAt_of_comp_right","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝³ : TopologicalSpace B\ninst✝² : TopologicalSpace F\nproj : Z → B\ninst✝¹ : TopologicalSpace Z\nX : Type u_5\ninst✝ : TopologicalSpace X\nf : Z → X\nz : Z\ne : Trivialization F proj\nhe : Membership.mem e.baseSet (proj z)\nhf : ContinuousAt (Function.comp f ↑e.symm) (↑e z)\n⊢ ContinuousAt f z","decl":"/-- Read off the continuity of a function `f : Z → X` at `z : Z` by transferring via a\ntrivialization of `Z` containing `z`. -/\ntheorem continuousAt_of_comp_right {X : Type*} [TopologicalSpace X] {f : Z → X} {z : Z}\n    (e : Trivialization F proj) (he : proj z ∈ e.baseSet)\n    (hf : ContinuousAt (f ∘ e.toPartialEquiv.symm) (e z)) : ContinuousAt f z := by\n  have hez : z ∈ e.toPartialEquiv.symm.target := by\n    rw [PartialEquiv.symm_target, e.mem_source]\n    exact he\n  rwa [e.toPartialHomeomorph.symm.continuousAt_iff_continuousAt_comp_right hez,\n    PartialHomeomorph.symm_symm]\n\n"}
{"name":"Trivialization.continuousAt_of_comp_left","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝³ : TopologicalSpace B\ninst✝² : TopologicalSpace F\nproj : Z → B\ninst✝¹ : TopologicalSpace Z\nX : Type u_5\ninst✝ : TopologicalSpace X\nf : X → Z\nx : X\ne : Trivialization F proj\nhf_proj : ContinuousAt (Function.comp proj f) x\nhe : Membership.mem e.baseSet (proj (f x))\nhf : ContinuousAt (Function.comp (↑e) f) x\n⊢ ContinuousAt f x","decl":"/-- Read off the continuity of a function `f : X → Z` at `x : X` by transferring via a\ntrivialization of `Z` containing `f x`. -/\ntheorem continuousAt_of_comp_left {X : Type*} [TopologicalSpace X] {f : X → Z} {x : X}\n    (e : Trivialization F proj) (hf_proj : ContinuousAt (proj ∘ f) x) (he : proj (f x) ∈ e.baseSet)\n    (hf : ContinuousAt (e ∘ f) x) : ContinuousAt f x := by\n  rw [e.continuousAt_iff_continuousAt_comp_left]\n  · exact hf\n  rw [e.source_eq, ← preimage_comp]\n  exact hf_proj.preimage_mem_nhds (e.open_baseSet.mem_nhds he)\n\n"}
{"name":"Trivialization.continuousOn","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalSpace (Bundle.TotalSpace F E)\ne' : Trivialization F Bundle.TotalSpace.proj\n⊢ ContinuousOn (↑e') e'.source","decl":"protected theorem continuousOn : ContinuousOn e' e'.source :=\n  e'.continuousOn_toFun\n\n"}
{"name":"Trivialization.coe_mem_source","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalSpace (Bundle.TotalSpace F E)\ne' : Trivialization F Bundle.TotalSpace.proj\nb : B\ny : E b\n⊢ Iff (Membership.mem e'.source { proj := b, snd := y }) (Membership.mem e'.baseSet b)","decl":"theorem coe_mem_source : ↑y ∈ e'.source ↔ b ∈ e'.baseSet :=\n  e'.mem_source\n\n"}
{"name":"Trivialization.coe_coe_fst","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalSpace (Bundle.TotalSpace F E)\ne' : Trivialization F Bundle.TotalSpace.proj\nb : B\ny : E b\nhb : Membership.mem e'.baseSet b\n⊢ Eq (↑e' { proj := b, snd := y }).1 b","decl":"@[simp, mfld_simps]\ntheorem coe_coe_fst (hb : b ∈ e'.baseSet) : (e' y).1 = b :=\n  e'.coe_fst (e'.mem_source.2 hb)\n\n"}
{"name":"Trivialization.mk_mem_target","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalSpace (Bundle.TotalSpace F E)\ne' : Trivialization F Bundle.TotalSpace.proj\nb : B\ny : F\n⊢ Iff (Membership.mem e'.target { fst := b, snd := y }) (Membership.mem e'.baseSet b)","decl":"theorem mk_mem_target {y : F} : (b, y) ∈ e'.target ↔ b ∈ e'.baseSet :=\n  e'.toPretrivialization.mem_target\n\n"}
{"name":"Trivialization.symm_apply_apply","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalSpace (Bundle.TotalSpace F E)\ne' : Trivialization F Bundle.TotalSpace.proj\nx : Bundle.TotalSpace F E\nhx : Membership.mem e'.source x\n⊢ Eq (↑e'.symm (↑e' x)) x","decl":"theorem symm_apply_apply {x : TotalSpace F E} (hx : x ∈ e'.source) :\n    e'.toPartialHomeomorph.symm (e' x) = x :=\n  e'.toPartialEquiv.left_inv hx\n\n"}
{"name":"Trivialization.symm_coe_proj","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalSpace (Bundle.TotalSpace F E)\nx : B\ny : F\ne : Trivialization F Bundle.TotalSpace.proj\nh : Membership.mem e.baseSet x\n⊢ Eq (↑e.symm { fst := x, snd := y }).proj x","decl":"@[simp, mfld_simps]\ntheorem symm_coe_proj {x : B} {y : F} (e : Trivialization F (π F E)) (h : x ∈ e.baseSet) :\n    (e.toPartialHomeomorph.symm (x, y)).1 = x :=\n  e.proj_symm_apply' h\n\n"}
{"name":"Trivialization.symm_apply","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝³ : TopologicalSpace B\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalSpace (Bundle.TotalSpace F E)\ninst✝ : (x : B) → Zero (E x)\ne : Trivialization F Bundle.TotalSpace.proj\nb : B\nhb : Membership.mem e.baseSet b\ny : F\n⊢ Eq (e.symm b y) (cast ⋯ (↑e.symm { fst := b, snd := y }).snd)","decl":"theorem symm_apply (e : Trivialization F (π F E)) {b : B} (hb : b ∈ e.baseSet) (y : F) :\n    e.symm b y = cast (congr_arg E (e.symm_coe_proj hb)) (e.toPartialHomeomorph.symm (b, y)).2 :=\n  dif_pos hb\n\n"}
{"name":"Trivialization.symm_apply_of_not_mem","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝³ : TopologicalSpace B\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalSpace (Bundle.TotalSpace F E)\ninst✝ : (x : B) → Zero (E x)\ne : Trivialization F Bundle.TotalSpace.proj\nb : B\nhb : Not (Membership.mem e.baseSet b)\ny : F\n⊢ Eq (e.symm b y) 0","decl":"theorem symm_apply_of_not_mem (e : Trivialization F (π F E)) {b : B} (hb : b ∉ e.baseSet) (y : F) :\n    e.symm b y = 0 :=\n  dif_neg hb\n\n"}
{"name":"Trivialization.mk_symm","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝³ : TopologicalSpace B\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalSpace (Bundle.TotalSpace F E)\ninst✝ : (x : B) → Zero (E x)\ne : Trivialization F Bundle.TotalSpace.proj\nb : B\nhb : Membership.mem e.baseSet b\ny : F\n⊢ Eq { proj := b, snd := e.symm b y } (↑e.symm { fst := b, snd := y })","decl":"theorem mk_symm (e : Trivialization F (π F E)) {b : B} (hb : b ∈ e.baseSet) (y : F) :\n    TotalSpace.mk b (e.symm b y) = e.toPartialHomeomorph.symm (b, y) :=\n  e.toPretrivialization.mk_symm hb y\n\n"}
{"name":"Trivialization.symm_proj_apply","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝³ : TopologicalSpace B\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalSpace (Bundle.TotalSpace F E)\ninst✝ : (x : B) → Zero (E x)\ne : Trivialization F Bundle.TotalSpace.proj\nz : Bundle.TotalSpace F E\nhz : Membership.mem e.baseSet z.proj\n⊢ Eq (e.symm z.proj (↑e z).2) z.snd","decl":"theorem symm_proj_apply (e : Trivialization F (π F E)) (z : TotalSpace F E)\n    (hz : z.proj ∈ e.baseSet) : e.symm z.proj (e z).2 = z.2 :=\n  e.toPretrivialization.symm_proj_apply z hz\n\n"}
{"name":"Trivialization.symm_apply_apply_mk","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝³ : TopologicalSpace B\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalSpace (Bundle.TotalSpace F E)\ninst✝ : (x : B) → Zero (E x)\ne : Trivialization F Bundle.TotalSpace.proj\nb : B\nhb : Membership.mem e.baseSet b\ny : E b\n⊢ Eq (e.symm b (↑e { proj := b, snd := y }).2) y","decl":"theorem symm_apply_apply_mk (e : Trivialization F (π F E)) {b : B} (hb : b ∈ e.baseSet) (y : E b) :\n    e.symm b (e ⟨b, y⟩).2 = y :=\n  e.symm_proj_apply ⟨b, y⟩ hb\n\n"}
{"name":"Trivialization.apply_mk_symm","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝³ : TopologicalSpace B\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalSpace (Bundle.TotalSpace F E)\ninst✝ : (x : B) → Zero (E x)\ne : Trivialization F Bundle.TotalSpace.proj\nb : B\nhb : Membership.mem e.baseSet b\ny : F\n⊢ Eq (↑e { proj := b, snd := e.symm b y }) { fst := b, snd := y }","decl":"theorem apply_mk_symm (e : Trivialization F (π F E)) {b : B} (hb : b ∈ e.baseSet) (y : F) :\n    e ⟨b, e.symm b y⟩ = (b, y) :=\n  e.toPretrivialization.apply_mk_symm hb y\n\n"}
{"name":"Trivialization.continuousOn_symm","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\ninst✝³ : TopologicalSpace B\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalSpace (Bundle.TotalSpace F E)\ninst✝ : (x : B) → Zero (E x)\ne : Trivialization F Bundle.TotalSpace.proj\n⊢ ContinuousOn (fun z => Bundle.TotalSpace.mk' F z.1 (e.symm z.1 z.2)) (SProd.sprod e.baseSet Set.univ)","decl":"theorem continuousOn_symm (e : Trivialization F (π F E)) :\n    ContinuousOn (fun z : B × F => TotalSpace.mk' F z.1 (e.symm z.1 z.2)) (e.baseSet ×ˢ univ) := by\n  have : ∀ z ∈ e.baseSet ×ˢ (univ : Set F),\n      TotalSpace.mk z.1 (e.symm z.1 z.2) = e.toPartialHomeomorph.symm z := by\n    rintro x ⟨hx : x.1 ∈ e.baseSet, _⟩\n    rw [e.mk_symm hx]\n  refine ContinuousOn.congr ?_ this\n  rw [← e.target_eq]\n  exact e.toPartialHomeomorph.continuousOn_symm\n\n"}
{"name":"Trivialization.transFiberHomeomorph_apply","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝³ : TopologicalSpace B\ninst✝² : TopologicalSpace F\nproj : Z → B\ninst✝¹ : TopologicalSpace Z\nF' : Type u_5\ninst✝ : TopologicalSpace F'\ne : Trivialization F proj\nh : Homeomorph F F'\nx : Z\n⊢ Eq (↑(e.transFiberHomeomorph h) x) { fst := (↑e x).1, snd := h (↑e x).2 }","decl":"@[simp]\ntheorem transFiberHomeomorph_apply {F' : Type*} [TopologicalSpace F'] (e : Trivialization F proj)\n    (h : F ≃ₜ F') (x : Z) : e.transFiberHomeomorph h x = ((e x).1, h (e x).2) :=\n  rfl\n\n"}
{"name":"Trivialization.mk_coordChange","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne₁ e₂ : Trivialization F proj\nb : B\nh₁ : Membership.mem e₁.baseSet b\nh₂ : Membership.mem e₂.baseSet b\nx : F\n⊢ Eq { fst := b, snd := e₁.coordChange e₂ b x } (↑e₂ (↑e₁.symm { fst := b, snd := x }))","decl":"theorem mk_coordChange (e₁ e₂ : Trivialization F proj) {b : B} (h₁ : b ∈ e₁.baseSet)\n    (h₂ : b ∈ e₂.baseSet) (x : F) :\n    (b, e₁.coordChange e₂ b x) = e₂ (e₁.toPartialHomeomorph.symm (b, x)) := by\n  refine Prod.ext ?_ rfl\n  rw [e₂.coe_fst', ← e₁.coe_fst', e₁.apply_symm_apply' h₁]\n  · rwa [e₁.proj_symm_apply' h₁]\n  · rwa [e₁.proj_symm_apply' h₁]\n\n"}
{"name":"Trivialization.coordChange_apply_snd","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne₁ e₂ : Trivialization F proj\np : Z\nh : Membership.mem e₁.baseSet (proj p)\n⊢ Eq (e₁.coordChange e₂ (proj p) (↑e₁ p).2) (↑e₂ p).2","decl":"theorem coordChange_apply_snd (e₁ e₂ : Trivialization F proj) {p : Z} (h : proj p ∈ e₁.baseSet) :\n    e₁.coordChange e₂ (proj p) (e₁ p).snd = (e₂ p).snd := by\n  rw [coordChange, e₁.symm_apply_mk_proj (e₁.mem_source.2 h)]\n\n"}
{"name":"Trivialization.coordChange_same_apply","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\nb : B\nh : Membership.mem e.baseSet b\nx : F\n⊢ Eq (e.coordChange e b x) x","decl":"theorem coordChange_same_apply (e : Trivialization F proj) {b : B} (h : b ∈ e.baseSet) (x : F) :\n    e.coordChange e b x = x := by rw [coordChange, e.apply_symm_apply' h]\n\n"}
{"name":"Trivialization.coordChange_same","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\nb : B\nh : Membership.mem e.baseSet b\n⊢ Eq (e.coordChange e b) id","decl":"theorem coordChange_same (e : Trivialization F proj) {b : B} (h : b ∈ e.baseSet) :\n    e.coordChange e b = id :=\n  funext <| e.coordChange_same_apply h\n\n"}
{"name":"Trivialization.coordChange_coordChange","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne₁ e₂ e₃ : Trivialization F proj\nb : B\nh₁ : Membership.mem e₁.baseSet b\nh₂ : Membership.mem e₂.baseSet b\nx : F\n⊢ Eq (e₂.coordChange e₃ b (e₁.coordChange e₂ b x)) (e₁.coordChange e₃ b x)","decl":"theorem coordChange_coordChange (e₁ e₂ e₃ : Trivialization F proj) {b : B} (h₁ : b ∈ e₁.baseSet)\n    (h₂ : b ∈ e₂.baseSet) (x : F) :\n    e₂.coordChange e₃ b (e₁.coordChange e₂ b x) = e₁.coordChange e₃ b x := by\n  rw [coordChange, e₁.mk_coordChange _ h₁ h₂, ← e₂.coe_coe, e₂.left_inv, coordChange]\n  rwa [e₂.mem_source, e₁.proj_symm_apply' h₁]\n\n"}
{"name":"Trivialization.continuous_coordChange","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne₁ e₂ : Trivialization F proj\nb : B\nh₁ : Membership.mem e₁.baseSet b\nh₂ : Membership.mem e₂.baseSet b\n⊢ Continuous (e₁.coordChange e₂ b)","decl":"theorem continuous_coordChange (e₁ e₂ : Trivialization F proj) {b : B} (h₁ : b ∈ e₁.baseSet)\n    (h₂ : b ∈ e₂.baseSet) : Continuous (e₁.coordChange e₂ b) := by\n  refine continuous_snd.comp (e₂.toPartialHomeomorph.continuousOn.comp_continuous\n    (e₁.toPartialHomeomorph.continuousOn_symm.comp_continuous ?_ ?_) ?_)\n  · exact continuous_const.prod_mk continuous_id\n  · exact fun x => e₁.mem_target.2 h₁\n  · intro x\n    rwa [e₂.mem_source, e₁.proj_symm_apply' h₁]\n\n"}
{"name":"Trivialization.coordChangeHomeomorph_coe","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne₁ e₂ : Trivialization F proj\nb : B\nh₁ : Membership.mem e₁.baseSet b\nh₂ : Membership.mem e₂.baseSet b\n⊢ Eq (⇑(e₁.coordChangeHomeomorph e₂ h₁ h₂)) (e₁.coordChange e₂ b)","decl":"@[simp]\ntheorem coordChangeHomeomorph_coe (e₁ e₂ : Trivialization F proj) {b : B} (h₁ : b ∈ e₁.baseSet)\n    (h₂ : b ∈ e₂.baseSet) : ⇑(e₁.coordChangeHomeomorph e₂ h₁ h₂) = e₁.coordChange e₂ b :=\n  rfl\n\n"}
{"name":"Trivialization.isImage_preimage_prod","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\ns : Set B\n⊢ e.IsImage (Set.preimage proj s) (SProd.sprod s Set.univ)","decl":"theorem isImage_preimage_prod (e : Trivialization F proj) (s : Set B) :\n    e.toPartialHomeomorph.IsImage (proj ⁻¹' s) (s ×ˢ univ) := fun x hx => by simp [e.coe_fst', hx]\n\n"}
{"name":"Trivialization.frontier_preimage","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\ne : Trivialization F proj\ns : Set B\n⊢ Eq (Inter.inter e.source (frontier (Set.preimage proj s))) (Set.preimage proj (Inter.inter e.baseSet (frontier s)))","decl":"theorem frontier_preimage (e : Trivialization F proj) (s : Set B) :\n    e.source ∩ frontier (proj ⁻¹' s) = proj ⁻¹' (e.baseSet ∩ frontier s) := by\n  rw [← (e.isImage_preimage_prod s).frontier.preimage_eq, frontier_prod_univ_eq,\n    (e.isImage_preimage_prod _).preimage_eq, e.source_eq, preimage_inter]\n\n"}
{"name":"Trivialization.lift_self","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\nT : Trivialization F proj\nz : Z\nhe : Membership.mem T.baseSet (proj z)\n⊢ Eq (T.lift z (proj z)) z","decl":"@[simp]\ntheorem lift_self (he : proj z ∈ T.baseSet) : T.lift z (proj z) = z :=\n  symm_apply_mk_proj _ <| T.mem_source.2 he\n\n"}
{"name":"Trivialization.proj_lift","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝² : TopologicalSpace B\ninst✝¹ : TopologicalSpace F\nproj : Z → B\ninst✝ : TopologicalSpace Z\nT : Trivialization F proj\nz : Z\nb : B\nhx : Membership.mem T.baseSet b\n⊢ Eq (proj (T.lift z b)) b","decl":"theorem proj_lift (hx : b ∈ T.baseSet) : proj (T.lift z b) = b :=\n  T.proj_symm_apply <| T.mem_target.2 hx\n\n"}
{"name":"Trivialization.clift_self","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝⁴ : TopologicalSpace B\ninst✝³ : TopologicalSpace F\nproj : Z → B\ninst✝² : TopologicalSpace Z\nT : Trivialization F proj\nι : Type u_5\ninst✝¹ : TopologicalSpace ι\ninst✝ : LocallyCompactPair ι ↑T.baseSet\nγ : ContinuousMap ι ↑T.baseSet\ni : ι\ne : ↑T.source\nh : Eq (proj ↑e) ↑(γ i)\n⊢ Eq ((T.clift { fst := e, snd := γ }) i) e","decl":"@[simp]\ntheorem clift_self (h : proj e.1 = γ i) :\n    T.clift (e, γ) i = e := by\n  have : proj e ∈ T.baseSet := by simp [h]\n  simp [clift, liftCM, ← h, lift_self, this]\n\n"}
{"name":"Trivialization.proj_clift","module":"Mathlib.Topology.FiberBundle.Trivialization","initialProofState":"B : Type u_1\nF : Type u_2\nZ : Type u_4\ninst✝⁴ : TopologicalSpace B\ninst✝³ : TopologicalSpace F\nproj : Z → B\ninst✝² : TopologicalSpace Z\nT : Trivialization F proj\nι : Type u_5\ninst✝¹ : TopologicalSpace ι\ninst✝ : LocallyCompactPair ι ↑T.baseSet\nγ : ContinuousMap ι ↑T.baseSet\ni : ι\ne : ↑T.source\n⊢ Eq (proj ↑((T.clift { fst := e, snd := γ }) i)) ↑(γ i)","decl":"theorem proj_clift : proj (T.clift (e, γ) i) = γ i := by\n  simp [clift, liftCM, proj_lift]\n\n"}
