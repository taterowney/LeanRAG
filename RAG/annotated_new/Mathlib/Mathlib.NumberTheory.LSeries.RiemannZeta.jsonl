{"name":"HurwitzZeta.completedHurwitzZetaEven_zero","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"s : Complex\n⊢ Eq (HurwitzZeta.completedHurwitzZetaEven 0 s) (completedRiemannZeta s)","decl":"lemma HurwitzZeta.completedHurwitzZetaEven_zero (s : ℂ) :\n    completedHurwitzZetaEven 0 s = completedRiemannZeta s := rfl\n\n"}
{"name":"HurwitzZeta.completedHurwitzZetaEven₀_zero","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"s : Complex\n⊢ Eq (HurwitzZeta.completedHurwitzZetaEven₀ 0 s) (completedRiemannZeta₀ s)","decl":"lemma HurwitzZeta.completedHurwitzZetaEven₀_zero (s : ℂ) :\n    completedHurwitzZetaEven₀ 0 s = completedRiemannZeta₀ s := rfl\n\n"}
{"name":"HurwitzZeta.completedCosZeta_zero","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"s : Complex\n⊢ Eq (HurwitzZeta.completedCosZeta 0 s) (completedRiemannZeta s)","decl":"lemma HurwitzZeta.completedCosZeta_zero (s : ℂ) :\n    completedCosZeta 0 s = completedRiemannZeta s := by\n  rw [completedRiemannZeta, completedHurwitzZetaEven, completedCosZeta, hurwitzEvenFEPair_zero_symm]\n\n"}
{"name":"HurwitzZeta.completedCosZeta₀_zero","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"s : Complex\n⊢ Eq (HurwitzZeta.completedCosZeta₀ 0 s) (completedRiemannZeta₀ s)","decl":"lemma HurwitzZeta.completedCosZeta₀_zero (s : ℂ) :\n    completedCosZeta₀ 0 s = completedRiemannZeta₀ s := by\n  rw [completedRiemannZeta₀, completedHurwitzZetaEven₀, completedCosZeta₀,\n    hurwitzEvenFEPair_zero_symm]\n\n"}
{"name":"completedRiemannZeta_eq","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"s : Complex\n⊢ Eq (completedRiemannZeta s) (HSub.hSub (HSub.hSub (completedRiemannZeta₀ s) (HDiv.hDiv 1 s)) (HDiv.hDiv 1 (HSub.hSub 1 s)))","decl":"lemma completedRiemannZeta_eq (s : ℂ) :\n    completedRiemannZeta s = completedRiemannZeta₀ s - 1 / s - 1 / (1 - s) := by\n  simp_rw [completedRiemannZeta, completedRiemannZeta₀, completedHurwitzZetaEven_eq, if_true]\n\n"}
{"name":"differentiable_completedZeta₀","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"⊢ Differentiable Complex completedRiemannZeta₀","decl":"/-- The modified completed Riemann zeta function `Λ(s) + 1 / s + 1 / (1 - s)` is entire. -/\ntheorem differentiable_completedZeta₀ : Differentiable ℂ completedRiemannZeta₀ :=\n  differentiable_completedHurwitzZetaEven₀ 0\n\n"}
{"name":"differentiableAt_completedZeta","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"s : Complex\nhs : Ne s 0\nhs' : Ne s 1\n⊢ DifferentiableAt Complex completedRiemannZeta s","decl":"/-- The completed Riemann zeta function `Λ(s)` is differentiable away from `s = 0` and `s = 1`. -/\ntheorem differentiableAt_completedZeta {s : ℂ} (hs : s ≠ 0) (hs' : s ≠ 1) :\n    DifferentiableAt ℂ completedRiemannZeta s :=\n  differentiableAt_completedHurwitzZetaEven 0 (Or.inl hs) hs'\n\n"}
{"name":"completedRiemannZeta₀_one_sub","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"s : Complex\n⊢ Eq (completedRiemannZeta₀ (HSub.hSub 1 s)) (completedRiemannZeta₀ s)","decl":"/-- Riemann zeta functional equation, formulated for `Λ₀`: for any complex `s` we have\n`Λ₀(1 - s) = Λ₀ s`. -/\ntheorem completedRiemannZeta₀_one_sub (s : ℂ) :\n    completedRiemannZeta₀ (1 - s) = completedRiemannZeta₀ s := by\n  rw [← completedHurwitzZetaEven₀_zero, ← completedCosZeta₀_zero, completedHurwitzZetaEven₀_one_sub]\n\n"}
{"name":"completedRiemannZeta_one_sub","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"s : Complex\n⊢ Eq (completedRiemannZeta (HSub.hSub 1 s)) (completedRiemannZeta s)","decl":"/-- Riemann zeta functional equation, formulated for `Λ`: for any complex `s` we have\n`Λ (1 - s) = Λ s`. -/\ntheorem completedRiemannZeta_one_sub (s : ℂ) :\n    completedRiemannZeta (1 - s) = completedRiemannZeta s := by\n  rw [← completedHurwitzZetaEven_zero, ← completedCosZeta_zero, completedHurwitzZetaEven_one_sub]\n\n"}
{"name":"completedRiemannZeta_residue_one","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"⊢ Filter.Tendsto (fun s => HMul.hMul (HSub.hSub s 1) (completedRiemannZeta s)) (nhdsWithin 1 (HasCompl.compl (Singleton.singleton 1))) (nhds 1)","decl":"/-- The residue of `Λ(s)` at `s = 1` is equal to `1`. -/\nlemma completedRiemannZeta_residue_one :\n    Tendsto (fun s ↦ (s - 1) * completedRiemannZeta s) (𝓝[≠] 1) (𝓝 1) :=\n  completedHurwitzZetaEven_residue_one 0\n\n"}
{"name":"HurwitzZeta.hurwitzZetaEven_zero","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"⊢ Eq (HurwitzZeta.hurwitzZetaEven 0) riemannZeta","decl":"lemma HurwitzZeta.hurwitzZetaEven_zero : hurwitzZetaEven 0 = riemannZeta := rfl\n\n"}
{"name":"HurwitzZeta.cosZeta_zero","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"⊢ Eq (HurwitzZeta.cosZeta 0) riemannZeta","decl":"lemma HurwitzZeta.cosZeta_zero : cosZeta 0 = riemannZeta := by\n  simp_rw [cosZeta, riemannZeta, hurwitzZetaEven, if_true, completedHurwitzZetaEven_zero,\n    completedCosZeta_zero]\n\n"}
{"name":"HurwitzZeta.hurwitzZeta_zero","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"⊢ Eq (HurwitzZeta.hurwitzZeta 0) riemannZeta","decl":"lemma HurwitzZeta.hurwitzZeta_zero : hurwitzZeta 0 = riemannZeta := by\n  ext1 s\n  simpa [hurwitzZeta, hurwitzZetaEven_zero] using hurwitzZetaOdd_neg 0 s\n\n"}
{"name":"HurwitzZeta.expZeta_zero","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"⊢ Eq (HurwitzZeta.expZeta 0) riemannZeta","decl":"lemma HurwitzZeta.expZeta_zero : expZeta 0 = riemannZeta := by\n  ext1 s\n  rw [expZeta, cosZeta_zero, add_right_eq_self, mul_eq_zero, eq_false_intro I_ne_zero, false_or,\n    ← eq_neg_self_iff, ← sinZeta_neg, neg_zero]\n\n"}
{"name":"differentiableAt_riemannZeta","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"s : Complex\nhs' : Ne s 1\n⊢ DifferentiableAt Complex riemannZeta s","decl":"/-- The Riemann zeta function is differentiable away from `s = 1`. -/\ntheorem differentiableAt_riemannZeta {s : ℂ} (hs' : s ≠ 1) : DifferentiableAt ℂ riemannZeta s :=\n  differentiableAt_hurwitzZetaEven _ hs'\n\n"}
{"name":"riemannZeta_zero","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"⊢ Eq (riemannZeta 0) (-1 / 2)","decl":"/-- We have `ζ(0) = -1 / 2`. -/\ntheorem riemannZeta_zero : riemannZeta 0 = -1 / 2 := by\n  simp_rw [riemannZeta, hurwitzZetaEven, Function.update_self, if_true]\n\n"}
{"name":"riemannZeta_def_of_ne_zero","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"s : Complex\nhs : Ne s 0\n⊢ Eq (riemannZeta s) (HDiv.hDiv (completedRiemannZeta s) s.Gammaℝ)","decl":"lemma riemannZeta_def_of_ne_zero {s : ℂ} (hs : s ≠ 0) :\n    riemannZeta s = completedRiemannZeta s / Gammaℝ s := by\n  rw [riemannZeta, hurwitzZetaEven, Function.update_of_ne hs, completedHurwitzZetaEven_zero]\n\n"}
{"name":"riemannZeta_neg_two_mul_nat_add_one","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"n : Nat\n⊢ Eq (riemannZeta (HMul.hMul (-2) (HAdd.hAdd (↑n) 1))) 0","decl":"/-- The trivial zeroes of the zeta function. -/\ntheorem riemannZeta_neg_two_mul_nat_add_one (n : ℕ) : riemannZeta (-2 * (n + 1)) = 0 :=\n  hurwitzZetaEven_neg_two_mul_nat_add_one 0 n\n\n"}
{"name":"riemannZeta_one_sub","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"s : Complex\nhs : ∀ (n : Nat), Ne s (Neg.neg ↑n)\nhs' : Ne s 1\n⊢ Eq (riemannZeta (HSub.hSub 1 s)) (HMul.hMul (HMul.hMul (HMul.hMul (HMul.hMul 2 (HPow.hPow (HMul.hMul 2 ↑Real.pi) (Neg.neg s))) (Complex.Gamma s)) (Complex.cos (HDiv.hDiv (HMul.hMul (↑Real.pi) s) 2))) (riemannZeta s))","decl":"/-- Riemann zeta functional equation, formulated for `ζ`: if `1 - s ∉ ℕ`, then we have\n`ζ (1 - s) = 2 ^ (1 - s) * π ^ (-s) * Γ s * sin (π * (1 - s) / 2) * ζ s`. -/\ntheorem riemannZeta_one_sub {s : ℂ} (hs : ∀ n : ℕ, s ≠ -n) (hs' : s ≠ 1) :\n    riemannZeta (1 - s) = 2 * (2 * π) ^ (-s) * Gamma s * cos (π * s / 2) * riemannZeta s := by\n  rw [riemannZeta, hurwitzZetaEven_one_sub 0 hs (Or.inr hs'), cosZeta_zero, hurwitzZetaEven_zero]\n\n"}
{"name":"completedZeta_eq_tsum_of_one_lt_re","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"s : Complex\nhs : LT.lt 1 s.re\n⊢ Eq (completedRiemannZeta s) (HMul.hMul (HMul.hMul (HPow.hPow (↑Real.pi) (HDiv.hDiv (Neg.neg s) 2)) (Complex.Gamma (HDiv.hDiv s 2))) (tsum fun n => HDiv.hDiv 1 (HPow.hPow (↑n) s)))","decl":"theorem completedZeta_eq_tsum_of_one_lt_re {s : ℂ} (hs : 1 < re s) :\n    completedRiemannZeta s =\n      (π : ℂ) ^ (-s / 2) * Gamma (s / 2) * ∑' n : ℕ, 1 / (n : ℂ) ^ s := by\n  have := (hasSum_nat_completedCosZeta 0 hs).tsum_eq.symm\n  simp only [QuotientAddGroup.mk_zero, completedCosZeta_zero] at this\n  simp only [this, Gammaℝ_def, mul_zero, zero_mul, Real.cos_zero, ofReal_one, mul_one, mul_one_div,\n    ← tsum_mul_left]\n  congr 1 with n\n  split_ifs with h\n  · simp only [h, Nat.cast_zero, zero_cpow (Complex.ne_zero_of_one_lt_re hs), div_zero]\n  · rfl\n\n"}
{"name":"zeta_eq_tsum_one_div_nat_cpow","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"s : Complex\nhs : LT.lt 1 s.re\n⊢ Eq (riemannZeta s) (tsum fun n => HDiv.hDiv 1 (HPow.hPow (↑n) s))","decl":"/-- The Riemann zeta function agrees with the naive Dirichlet-series definition when the latter\nconverges. (Note that this is false without the assumption: when `re s ≤ 1` the sum is divergent,\nand we use a different definition to obtain the analytic continuation to all `s`.) -/\ntheorem zeta_eq_tsum_one_div_nat_cpow {s : ℂ} (hs : 1 < re s) :\n    riemannZeta s = ∑' n : ℕ, 1 / (n : ℂ) ^ s := by\n  simpa only [QuotientAddGroup.mk_zero, cosZeta_zero, mul_zero, zero_mul, Real.cos_zero,\n    ofReal_one] using (hasSum_nat_cosZeta 0 hs).tsum_eq.symm\n\n"}
{"name":"zeta_eq_tsum_one_div_nat_add_one_cpow","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"s : Complex\nhs : LT.lt 1 s.re\n⊢ Eq (riemannZeta s) (tsum fun n => HDiv.hDiv 1 (HPow.hPow (HAdd.hAdd (↑n) 1) s))","decl":"/-- Alternate formulation of `zeta_eq_tsum_one_div_nat_cpow` with a `+ 1` (to avoid relying\non mathlib's conventions for `0 ^ s`). -/\ntheorem zeta_eq_tsum_one_div_nat_add_one_cpow {s : ℂ} (hs : 1 < re s) :\n    riemannZeta s = ∑' n : ℕ, 1 / (n + 1 : ℂ) ^ s := by\n  have := zeta_eq_tsum_one_div_nat_cpow hs\n  rw [tsum_eq_zero_add] at this\n  · simpa [zero_cpow (Complex.ne_zero_of_one_lt_re hs)]\n  · rwa [Complex.summable_one_div_nat_cpow]\n\n"}
{"name":"zeta_nat_eq_tsum_of_gt_one","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"k : Nat\nhk : LT.lt 1 k\n⊢ Eq (riemannZeta ↑k) (tsum fun n => HDiv.hDiv 1 (HPow.hPow (↑n) k))","decl":"/-- Special case of `zeta_eq_tsum_one_div_nat_cpow` when the argument is in `ℕ`, so the power\nfunction can be expressed using naïve `pow` rather than `cpow`. -/\ntheorem zeta_nat_eq_tsum_of_gt_one {k : ℕ} (hk : 1 < k) :\n    riemannZeta k = ∑' n : ℕ, 1 / (n : ℂ) ^ k := by\n  simp only [zeta_eq_tsum_one_div_nat_cpow\n      (by rwa [← ofReal_natCast, ofReal_re, ← Nat.cast_one, Nat.cast_lt] : 1 < re k),\n    cpow_natCast]\n\n"}
{"name":"riemannZeta_residue_one","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"⊢ Filter.Tendsto (fun s => HMul.hMul (HSub.hSub s 1) (riemannZeta s)) (nhdsWithin 1 (HasCompl.compl (Singleton.singleton 1))) (nhds 1)","decl":"/-- The residue of `ζ(s)` at `s = 1` is equal to 1. -/\nlemma riemannZeta_residue_one : Tendsto (fun s ↦ (s - 1) * riemannZeta s) (𝓝[≠] 1) (𝓝 1) := by\n  exact hurwitzZetaEven_residue_one 0\n\n"}
{"name":"tendsto_sub_mul_tsum_nat_cpow","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"⊢ Filter.Tendsto (fun s => HMul.hMul (HSub.hSub s 1) (tsum fun n => HDiv.hDiv 1 (HPow.hPow (↑n) s))) (nhdsWithin 1 (setOf fun s => LT.lt 1 s.re)) (nhds 1)","decl":"/-- The residue of `ζ(s)` at `s = 1` is equal to 1, expressed using `tsum`. -/\ntheorem tendsto_sub_mul_tsum_nat_cpow :\n    Tendsto (fun s : ℂ ↦ (s - 1) * ∑' (n : ℕ), 1 / (n : ℂ) ^ s) (𝓝[{s | 1 < re s}] 1) (𝓝 1) := by\n  refine (tendsto_nhdsWithin_mono_left ?_ riemannZeta_residue_one).congr' ?_\n  · simp only [subset_compl_singleton_iff, mem_setOf_eq, one_re, not_lt, le_refl]\n  · filter_upwards [eventually_mem_nhdsWithin] with s hs using\n      congr_arg _ <| zeta_eq_tsum_one_div_nat_cpow hs\n\n"}
{"name":"tendsto_sub_mul_tsum_nat_rpow","module":"Mathlib.NumberTheory.LSeries.RiemannZeta","initialProofState":"⊢ Filter.Tendsto (fun s => HMul.hMul (HSub.hSub s 1) (tsum fun n => HDiv.hDiv 1 (HPow.hPow (↑n) s))) (nhdsWithin 1 (Set.Ioi 1)) (nhds 1)","decl":"/-- The residue of `ζ(s)` at `s = 1` is equal to 1 expressed using `tsum` and for a\nreal variable. -/\ntheorem tendsto_sub_mul_tsum_nat_rpow :\n    Tendsto (fun s : ℝ ↦ (s - 1) * ∑' (n : ℕ), 1 / (n : ℝ) ^ s) (𝓝[>] 1) (𝓝 1) := by\n  rw [← tendsto_ofReal_iff, ofReal_one]\n  have : Tendsto (fun s : ℝ ↦ (s : ℂ)) (𝓝[>] 1) (𝓝[{s | 1 < re s}] 1) :=\n    continuous_ofReal.continuousWithinAt.tendsto_nhdsWithin (fun _ _ ↦ by aesop)\n  apply (tendsto_sub_mul_tsum_nat_cpow.comp this).congr fun s ↦ ?_\n  simp only [one_div, Function.comp_apply, ofReal_mul, ofReal_sub, ofReal_one, ofReal_tsum,\n    ofReal_inv, ofReal_cpow (Nat.cast_nonneg _), ofReal_natCast]\n\n/- naming scheme was changed from `riemannCompletedZeta` to `completedRiemannZeta`; add\naliases for the old names -/\n"}
