{"name":"hasGradientWithinAt_iff_hasFDerivWithinAt","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\ns : Set F\n⊢ Iff (HasGradientWithinAt f f' s x) (HasFDerivWithinAt f ((InnerProductSpace.toDual 𝕜 F) f') s x)","decl":"theorem hasGradientWithinAt_iff_hasFDerivWithinAt {s : Set F} :\n    HasGradientWithinAt f f' s x ↔ HasFDerivWithinAt f (toDual 𝕜 F f') s x :=\n  Iff.rfl\n\n"}
{"name":"hasFDerivWithinAt_iff_hasGradientWithinAt","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nx : F\nfrechet : ContinuousLinearMap (RingHom.id 𝕜) F 𝕜\ns : Set F\n⊢ Iff (HasFDerivWithinAt f frechet s x) (HasGradientWithinAt f ((InnerProductSpace.toDual 𝕜 F).symm frechet) s x)","decl":"theorem hasFDerivWithinAt_iff_hasGradientWithinAt {frechet : F →L[𝕜] 𝕜} {s : Set F} :\n    HasFDerivWithinAt f frechet s x ↔ HasGradientWithinAt f ((toDual 𝕜 F).symm frechet) s x := by\n  rw [hasGradientWithinAt_iff_hasFDerivWithinAt, (toDual 𝕜 F).apply_symm_apply frechet]\n\n"}
{"name":"hasGradientAt_iff_hasFDerivAt","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\n⊢ Iff (HasGradientAt f f' x) (HasFDerivAt f ((InnerProductSpace.toDual 𝕜 F) f') x)","decl":"theorem hasGradientAt_iff_hasFDerivAt :\n    HasGradientAt f f' x ↔ HasFDerivAt f (toDual 𝕜 F f') x :=\n  Iff.rfl\n\n"}
{"name":"hasFDerivAt_iff_hasGradientAt","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nx : F\nfrechet : ContinuousLinearMap (RingHom.id 𝕜) F 𝕜\n⊢ Iff (HasFDerivAt f frechet x) (HasGradientAt f ((InnerProductSpace.toDual 𝕜 F).symm frechet) x)","decl":"theorem hasFDerivAt_iff_hasGradientAt {frechet : F →L[𝕜] 𝕜} :\n    HasFDerivAt f frechet x ↔ HasGradientAt f ((toDual 𝕜 F).symm frechet) x := by\n  rw [hasGradientAt_iff_hasFDerivAt, (toDual 𝕜 F).apply_symm_apply frechet]\n\n"}
{"name":"HasGradientWithinAt.hasFDerivWithinAt","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\ns : Set F\na✝ : HasGradientWithinAt f f' s x\n⊢ HasFDerivWithinAt f ((InnerProductSpace.toDual 𝕜 F) f') s x","decl":"alias ⟨HasGradientWithinAt.hasFDerivWithinAt, _⟩ := hasGradientWithinAt_iff_hasFDerivWithinAt\n\n"}
{"name":"HasFDerivWithinAt.hasGradientWithinAt","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nx : F\nfrechet : ContinuousLinearMap (RingHom.id 𝕜) F 𝕜\ns : Set F\na✝ : HasFDerivWithinAt f frechet s x\n⊢ HasGradientWithinAt f ((InnerProductSpace.toDual 𝕜 F).symm frechet) s x","decl":"alias ⟨HasFDerivWithinAt.hasGradientWithinAt, _⟩ := hasFDerivWithinAt_iff_hasGradientWithinAt\n\n"}
{"name":"HasGradientAt.hasFDerivAt","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\na✝ : HasGradientAt f f' x\n⊢ HasFDerivAt f ((InnerProductSpace.toDual 𝕜 F) f') x","decl":"alias ⟨HasGradientAt.hasFDerivAt, _⟩ := hasGradientAt_iff_hasFDerivAt\n\n"}
{"name":"HasFDerivAt.hasGradientAt","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nx : F\nfrechet : ContinuousLinearMap (RingHom.id 𝕜) F 𝕜\na✝ : HasFDerivAt f frechet x\n⊢ HasGradientAt f ((InnerProductSpace.toDual 𝕜 F).symm frechet) x","decl":"alias ⟨HasFDerivAt.hasGradientAt, _⟩ := hasFDerivAt_iff_hasGradientAt\n\n"}
{"name":"gradient_eq_zero_of_not_differentiableAt","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nx : F\nh : Not (DifferentiableAt 𝕜 f x)\n⊢ Eq (gradient f x) 0","decl":"theorem gradient_eq_zero_of_not_differentiableAt (h : ¬DifferentiableAt 𝕜 f x) : ∇ f x = 0 := by\n  rw [gradient, fderiv_zero_of_not_differentiableAt h, map_zero]\n\n"}
{"name":"HasGradientAt.unique","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nx gradf gradg : F\nhf : HasGradientAt f gradf x\nhg : HasGradientAt f gradg x\n⊢ Eq gradf gradg","decl":"theorem HasGradientAt.unique {gradf gradg : F}\n    (hf : HasGradientAt f gradf x) (hg : HasGradientAt f gradg x) :\n    gradf = gradg :=\n  (toDual 𝕜 F).injective (hf.hasFDerivAt.unique hg.hasFDerivAt)\n\n"}
{"name":"DifferentiableAt.hasGradientAt","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nx : F\nh : DifferentiableAt 𝕜 f x\n⊢ HasGradientAt f (gradient f x) x","decl":"theorem DifferentiableAt.hasGradientAt (h : DifferentiableAt 𝕜 f x) :\n    HasGradientAt f (∇ f x) x := by\n  rw [hasGradientAt_iff_hasFDerivAt, gradient, (toDual 𝕜 F).apply_symm_apply (fderiv 𝕜 f x)]\n  exact h.hasFDerivAt\n\n"}
{"name":"HasGradientAt.differentiableAt","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\nh : HasGradientAt f f' x\n⊢ DifferentiableAt 𝕜 f x","decl":"theorem HasGradientAt.differentiableAt (h : HasGradientAt f f' x) :\n    DifferentiableAt 𝕜 f x :=\n  h.hasFDerivAt.differentiableAt\n\n"}
{"name":"DifferentiableWithinAt.hasGradientWithinAt","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nx : F\ns : Set F\nh : DifferentiableWithinAt 𝕜 f s x\n⊢ HasGradientWithinAt f (gradientWithin f s x) s x","decl":"theorem DifferentiableWithinAt.hasGradientWithinAt (h : DifferentiableWithinAt 𝕜 f s x) :\n    HasGradientWithinAt f (gradientWithin f s x) s x := by\n  rw [hasGradientWithinAt_iff_hasFDerivWithinAt, gradientWithin,\n    (toDual 𝕜 F).apply_symm_apply (fderivWithin 𝕜 f s x)]\n  exact h.hasFDerivWithinAt\n\n"}
{"name":"HasGradientWithinAt.differentiableWithinAt","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\ns : Set F\nh : HasGradientWithinAt f f' s x\n⊢ DifferentiableWithinAt 𝕜 f s x","decl":"theorem HasGradientWithinAt.differentiableWithinAt (h : HasGradientWithinAt f f' s x) :\n    DifferentiableWithinAt 𝕜 f s x :=\n  h.hasFDerivWithinAt.differentiableWithinAt\n\n"}
{"name":"hasGradientWithinAt_univ","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\n⊢ Iff (HasGradientWithinAt f f' Set.univ x) (HasGradientAt f f' x)","decl":"@[simp]\ntheorem hasGradientWithinAt_univ : HasGradientWithinAt f f' univ x ↔ HasGradientAt f f' x := by\n  rw [hasGradientWithinAt_iff_hasFDerivWithinAt, hasGradientAt_iff_hasFDerivAt]\n  exact hasFDerivWithinAt_univ\n\n"}
{"name":"DifferentiableOn.hasGradientAt","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nx : F\ns : Set F\nh : DifferentiableOn 𝕜 f s\nhs : Membership.mem (nhds x) s\n⊢ HasGradientAt f (gradient f x) x","decl":"theorem DifferentiableOn.hasGradientAt (h : DifferentiableOn 𝕜 f s) (hs : s ∈ 𝓝 x) :\n    HasGradientAt f (∇ f x) x :=\n  (h.hasFDerivAt hs).hasGradientAt\n\n"}
{"name":"HasGradientAt.gradient","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\nh : HasGradientAt f f' x\n⊢ Eq (gradient f x) f'","decl":"theorem HasGradientAt.gradient (h : HasGradientAt f f' x) : ∇ f x = f' :=\n  h.differentiableAt.hasGradientAt.unique h\n\n"}
{"name":"gradient_eq","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' : F → F\nh : ∀ (x : F), HasGradientAt f (f' x) x\n⊢ Eq (gradient f) f'","decl":"theorem gradient_eq {f' : F → F} (h : ∀ x, HasGradientAt f (f' x) x) : ∇ f = f' :=\n  funext fun x => (h x).gradient\n\n"}
{"name":"HasGradientAtFilter.hasDerivAtFilter","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\ninst✝ : RCLike 𝕜\ng : 𝕜 → 𝕜\ng' u : 𝕜\nL' : Filter 𝕜\nh : HasGradientAtFilter g g' u L'\n⊢ HasDerivAtFilter g ((starRingEnd 𝕜) g') u L'","decl":"theorem HasGradientAtFilter.hasDerivAtFilter (h : HasGradientAtFilter g g' u L') :\n    HasDerivAtFilter g (starRingEnd 𝕜 g') u L' := by\n  have : ContinuousLinearMap.smulRight (1 : 𝕜 →L[𝕜] 𝕜) (starRingEnd 𝕜 g') = (toDual 𝕜 𝕜) g' := by\n    ext; simp\n  rwa [HasDerivAtFilter, this]\n\n"}
{"name":"HasDerivAtFilter.hasGradientAtFilter","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\ninst✝ : RCLike 𝕜\ng : 𝕜 → 𝕜\ng' u : 𝕜\nL' : Filter 𝕜\nh : HasDerivAtFilter g g' u L'\n⊢ HasGradientAtFilter g ((starRingEnd 𝕜) g') u L'","decl":"theorem HasDerivAtFilter.hasGradientAtFilter (h : HasDerivAtFilter g g' u L') :\n    HasGradientAtFilter g (starRingEnd 𝕜 g') u L' := by\n  have : ContinuousLinearMap.smulRight (1 : 𝕜 →L[𝕜] 𝕜) g' = (toDual 𝕜 𝕜) (starRingEnd 𝕜 g') := by\n    ext; simp\n  rwa [HasGradientAtFilter, ← this]\n\n"}
{"name":"HasGradientAt.hasDerivAt","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\ninst✝ : RCLike 𝕜\ng : 𝕜 → 𝕜\ng' u : 𝕜\nh : HasGradientAt g g' u\n⊢ HasDerivAt g ((starRingEnd 𝕜) g') u","decl":"theorem HasGradientAt.hasDerivAt (h : HasGradientAt g g' u) :\n    HasDerivAt g (starRingEnd 𝕜 g') u := by\n  rw [hasGradientAt_iff_hasFDerivAt, hasFDerivAt_iff_hasDerivAt] at h\n  simpa using h\n\n"}
{"name":"HasDerivAt.hasGradientAt","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\ninst✝ : RCLike 𝕜\ng : 𝕜 → 𝕜\ng' u : 𝕜\nh : HasDerivAt g g' u\n⊢ HasGradientAt g ((starRingEnd 𝕜) g') u","decl":"theorem HasDerivAt.hasGradientAt (h : HasDerivAt g g' u) :\n    HasGradientAt g (starRingEnd 𝕜 g') u := by\n  rw [hasGradientAt_iff_hasFDerivAt, hasFDerivAt_iff_hasDerivAt]\n  simpa\n\n"}
{"name":"gradient_eq_deriv","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\ninst✝ : RCLike 𝕜\ng : 𝕜 → 𝕜\nu : 𝕜\n⊢ Eq (gradient g u) ((starRingEnd 𝕜) (deriv g u))","decl":"theorem gradient_eq_deriv : ∇ g u = starRingEnd 𝕜 (deriv g u) := by\n  by_cases h : DifferentiableAt 𝕜 g u\n  · rw [h.hasGradientAt.hasDerivAt.deriv, RCLike.conj_conj]\n  · rw [gradient_eq_zero_of_not_differentiableAt h, deriv_zero_of_not_differentiableAt h, map_zero]\n\n"}
{"name":"HasGradientAtFilter.hasDerivAtFilter'","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"g : Real → Real\ng' u : Real\nL' : Filter Real\nh : HasGradientAtFilter g g' u L'\n⊢ HasDerivAtFilter g g' u L'","decl":"theorem HasGradientAtFilter.hasDerivAtFilter' (h : HasGradientAtFilter g g' u L') :\n    HasDerivAtFilter g g' u L' := h.hasDerivAtFilter\n\n"}
{"name":"HasDerivAtFilter.hasGradientAtFilter'","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"g : Real → Real\ng' u : Real\nL' : Filter Real\nh : HasDerivAtFilter g g' u L'\n⊢ HasGradientAtFilter g g' u L'","decl":"theorem HasDerivAtFilter.hasGradientAtFilter' (h : HasDerivAtFilter g g' u L') :\n    HasGradientAtFilter g g' u L' := h.hasGradientAtFilter\n\n"}
{"name":"HasGradientAt.hasDerivAt'","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"g : Real → Real\ng' u : Real\nh : HasGradientAt g g' u\n⊢ HasDerivAt g g' u","decl":"theorem HasGradientAt.hasDerivAt' (h : HasGradientAt g g' u) :\n    HasDerivAt g g' u := h.hasDerivAt\n\n"}
{"name":"HasDerivAt.hasGradientAt'","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"g : Real → Real\ng' u : Real\nh : HasDerivAt g g' u\n⊢ HasGradientAt g g' u","decl":"theorem HasDerivAt.hasGradientAt' (h : HasDerivAt g g' u) :\n    HasGradientAt g g' u := h.hasGradientAt\n\n"}
{"name":"gradient_eq_deriv'","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"g : Real → Real\nu : Real\n⊢ Eq (gradient g u) (deriv g u)","decl":"theorem gradient_eq_deriv' : ∇ g u = deriv g u := gradient_eq_deriv\n\n"}
{"name":"hasGradientAtFilter_iff_isLittleO","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\nL : Filter F\n⊢ Iff (HasGradientAtFilter f f' x L) (Asymptotics.IsLittleO L (fun x' => HSub.hSub (HSub.hSub (f x') (f x)) (Inner.inner f' (HSub.hSub x' x))) fun x' => HSub.hSub x' x)","decl":"theorem hasGradientAtFilter_iff_isLittleO :\n    HasGradientAtFilter f f' x L ↔\n    (fun x' : F => f x' - f x - ⟪f', x' - x⟫) =o[L] fun x' => x' - x :=\n  hasFDerivAtFilter_iff_isLittleO ..\n\n"}
{"name":"hasGradientWithinAt_iff_isLittleO","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\ns : Set F\n⊢ Iff (HasGradientWithinAt f f' s x) (Asymptotics.IsLittleO (nhdsWithin x s) (fun x' => HSub.hSub (HSub.hSub (f x') (f x)) (Inner.inner f' (HSub.hSub x' x))) fun x' => HSub.hSub x' x)","decl":"theorem hasGradientWithinAt_iff_isLittleO :\n    HasGradientWithinAt f f' s x ↔\n    (fun x' : F => f x' - f x - ⟪f', x' - x⟫) =o[𝓝[s] x] fun x' => x' - x :=\n  hasGradientAtFilter_iff_isLittleO\n\n"}
{"name":"hasGradientWithinAt_iff_tendsto","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\ns : Set F\n⊢ Iff (HasGradientWithinAt f f' s x) (Filter.Tendsto (fun x' => HMul.hMul (Inv.inv (Norm.norm (HSub.hSub x' x))) (Norm.norm (HSub.hSub (HSub.hSub (f x') (f x)) (Inner.inner f' (HSub.hSub x' x))))) (nhdsWithin x s) (nhds 0))","decl":"theorem hasGradientWithinAt_iff_tendsto :\n    HasGradientWithinAt f f' s x ↔\n    Tendsto (fun x' => ‖x' - x‖⁻¹ * ‖f x' - f x - ⟪f', x' - x⟫‖) (𝓝[s] x) (𝓝 0) :=\n  hasFDerivAtFilter_iff_tendsto\n\n"}
{"name":"hasGradientAt_iff_isLittleO","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\n⊢ Iff (HasGradientAt f f' x) (Asymptotics.IsLittleO (nhds x) (fun x' => HSub.hSub (HSub.hSub (f x') (f x)) (Inner.inner f' (HSub.hSub x' x))) fun x' => HSub.hSub x' x)","decl":"theorem hasGradientAt_iff_isLittleO : HasGradientAt f f' x ↔\n    (fun x' : F => f x' - f x - ⟪f', x' - x⟫) =o[𝓝 x] fun x' => x' - x :=\n  hasGradientAtFilter_iff_isLittleO\n\n"}
{"name":"hasGradientAt_iff_tendsto","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\n⊢ Iff (HasGradientAt f f' x) (Filter.Tendsto (fun x' => HMul.hMul (Inv.inv (Norm.norm (HSub.hSub x' x))) (Norm.norm (HSub.hSub (HSub.hSub (f x') (f x)) (Inner.inner f' (HSub.hSub x' x))))) (nhds x) (nhds 0))","decl":"theorem hasGradientAt_iff_tendsto :\n    HasGradientAt f f' x ↔\n    Tendsto (fun x' => ‖x' - x‖⁻¹ * ‖f x' - f x - ⟪f', x' - x⟫‖) (𝓝 x) (𝓝 0) :=\n  hasFDerivAtFilter_iff_tendsto\n\n"}
{"name":"HasGradientAtFilter.isBigO_sub","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\nL : Filter F\nh : HasGradientAtFilter f f' x L\n⊢ Asymptotics.IsBigO L (fun x' => HSub.hSub (f x') (f x)) fun x' => HSub.hSub x' x","decl":"theorem HasGradientAtFilter.isBigO_sub (h : HasGradientAtFilter f f' x L) :\n    (fun x' => f x' - f x) =O[L] fun x' => x' - x :=\n  HasFDerivAtFilter.isBigO_sub h\n\n"}
{"name":"hasGradientWithinAt_congr_set'","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\ns t : Set F\ny : F\nh : (nhdsWithin x (HasCompl.compl (Singleton.singleton y))).EventuallyEq s t\n⊢ Iff (HasGradientWithinAt f f' s x) (HasGradientWithinAt f f' t x)","decl":"theorem hasGradientWithinAt_congr_set' {s t : Set F} (y : F) (h : s =ᶠ[𝓝[{y}ᶜ] x] t) :\n    HasGradientWithinAt f f' s x ↔ HasGradientWithinAt f f' t x :=\n  hasFDerivWithinAt_congr_set' y h\n\n"}
{"name":"hasGradientWithinAt_congr_set","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\ns t : Set F\nh : (nhds x).EventuallyEq s t\n⊢ Iff (HasGradientWithinAt f f' s x) (HasGradientWithinAt f f' t x)","decl":"theorem hasGradientWithinAt_congr_set {s t : Set F} (h : s =ᶠ[𝓝 x] t) :\n    HasGradientWithinAt f f' s x ↔ HasGradientWithinAt f f' t x :=\n  hasFDerivWithinAt_congr_set h\n\n"}
{"name":"hasGradientAt_iff_isLittleO_nhds_zero","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\n⊢ Iff (HasGradientAt f f' x) (Asymptotics.IsLittleO (nhds 0) (fun h => HSub.hSub (HSub.hSub (f (HAdd.hAdd x h)) (f x)) (Inner.inner f' h)) fun h => h)","decl":"theorem hasGradientAt_iff_isLittleO_nhds_zero : HasGradientAt f f' x ↔\n    (fun h => f (x + h) - f x - ⟪f', h⟫) =o[𝓝 0] fun h => h :=\n  hasFDerivAt_iff_isLittleO_nhds_zero\n\n"}
{"name":"Filter.EventuallyEq.hasGradientAtFilter_iff","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nx : F\nL : Filter F\nf₀ f₁ : F → 𝕜\nf₀' f₁' : F\nh₀ : L.EventuallyEq f₀ f₁\nhx : Eq (f₀ x) (f₁ x)\nh₁ : Eq f₀' f₁'\n⊢ Iff (HasGradientAtFilter f₀ f₀' x L) (HasGradientAtFilter f₁ f₁' x L)","decl":"theorem Filter.EventuallyEq.hasGradientAtFilter_iff (h₀ : f₀ =ᶠ[L] f₁) (hx : f₀ x = f₁ x)\n    (h₁ : f₀' = f₁') : HasGradientAtFilter f₀ f₀' x L ↔ HasGradientAtFilter f₁ f₁' x L :=\n  h₀.hasFDerivAtFilter_iff hx (by simp [h₁])\n\n"}
{"name":"HasGradientAtFilter.congr_of_eventuallyEq","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\nL : Filter F\nf₁ : F → 𝕜\nh : HasGradientAtFilter f f' x L\nhL : L.EventuallyEq f₁ f\nhx : Eq (f₁ x) (f x)\n⊢ HasGradientAtFilter f₁ f' x L","decl":"theorem HasGradientAtFilter.congr_of_eventuallyEq (h : HasGradientAtFilter f f' x L)\n    (hL : f₁ =ᶠ[L] f) (hx : f₁ x = f x) : HasGradientAtFilter f₁ f' x L := by\n  rwa [hL.hasGradientAtFilter_iff hx rfl]\n\n"}
{"name":"HasGradientWithinAt.congr_mono","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\ns : Set F\nf₁ : F → 𝕜\nt : Set F\nh : HasGradientWithinAt f f' s x\nht : ∀ (x : F), Membership.mem t x → Eq (f₁ x) (f x)\nhx : Eq (f₁ x) (f x)\nh₁ : HasSubset.Subset t s\n⊢ HasGradientWithinAt f₁ f' t x","decl":"theorem HasGradientWithinAt.congr_mono (h : HasGradientWithinAt f f' s x) (ht : ∀ x ∈ t, f₁ x = f x)\n    (hx : f₁ x = f x) (h₁ : t ⊆ s) : HasGradientWithinAt f₁ f' t x :=\n  HasFDerivWithinAt.congr_mono h ht hx h₁\n\n"}
{"name":"HasGradientWithinAt.congr","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\ns : Set F\nf₁ : F → 𝕜\nh : HasGradientWithinAt f f' s x\nhs : ∀ (x : F), Membership.mem s x → Eq (f₁ x) (f x)\nhx : Eq (f₁ x) (f x)\n⊢ HasGradientWithinAt f₁ f' s x","decl":"theorem HasGradientWithinAt.congr (h : HasGradientWithinAt f f' s x) (hs : ∀ x ∈ s, f₁ x = f x)\n    (hx : f₁ x = f x) : HasGradientWithinAt f₁ f' s x :=\n  h.congr_mono hs hx (by tauto)\n\n"}
{"name":"HasGradientWithinAt.congr_of_mem","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\ns : Set F\nf₁ : F → 𝕜\nh : HasGradientWithinAt f f' s x\nhs : ∀ (x : F), Membership.mem s x → Eq (f₁ x) (f x)\nhx : Membership.mem s x\n⊢ HasGradientWithinAt f₁ f' s x","decl":"theorem HasGradientWithinAt.congr_of_mem (h : HasGradientWithinAt f f' s x)\n    (hs : ∀ x ∈ s, f₁ x = f x) (hx : x ∈ s) : HasGradientWithinAt f₁ f' s x :=\n  h.congr hs (hs _ hx)\n\n"}
{"name":"HasGradientWithinAt.congr_of_eventuallyEq","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\ns : Set F\nf₁ : F → 𝕜\nh : HasGradientWithinAt f f' s x\nh₁ : (nhdsWithin x s).EventuallyEq f₁ f\nhx : Eq (f₁ x) (f x)\n⊢ HasGradientWithinAt f₁ f' s x","decl":"theorem HasGradientWithinAt.congr_of_eventuallyEq (h : HasGradientWithinAt f f' s x)\n    (h₁ : f₁ =ᶠ[𝓝[s] x] f) (hx : f₁ x = f x) : HasGradientWithinAt f₁ f' s x :=\n  HasGradientAtFilter.congr_of_eventuallyEq h h₁ hx\n\n"}
{"name":"HasGradientWithinAt.congr_of_eventuallyEq_of_mem","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\ns : Set F\nf₁ : F → 𝕜\nh : HasGradientWithinAt f f' s x\nh₁ : (nhdsWithin x s).EventuallyEq f₁ f\nhx : Membership.mem s x\n⊢ HasGradientWithinAt f₁ f' s x","decl":"theorem HasGradientWithinAt.congr_of_eventuallyEq_of_mem (h : HasGradientWithinAt f f' s x)\n    (h₁ : f₁ =ᶠ[𝓝[s] x] f) (hx : x ∈ s) : HasGradientWithinAt f₁ f' s x :=\n  h.congr_of_eventuallyEq h₁ (h₁.eq_of_nhdsWithin hx)\n\n"}
{"name":"HasGradientAt.congr_of_eventuallyEq","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\nf₁ : F → 𝕜\nh : HasGradientAt f f' x\nh₁ : (nhds x).EventuallyEq f₁ f\n⊢ HasGradientAt f₁ f' x","decl":"theorem HasGradientAt.congr_of_eventuallyEq (h : HasGradientAt f f' x) (h₁ : f₁ =ᶠ[𝓝 x] f) :\n    HasGradientAt f₁ f' x :=\n  HasGradientAtFilter.congr_of_eventuallyEq h h₁ (mem_of_mem_nhds h₁ :)\n\n"}
{"name":"Filter.EventuallyEq.gradient_eq","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nx : F\nf₁ : F → 𝕜\nhL : (nhds x).EventuallyEq f₁ f\n⊢ Eq (gradient f₁ x) (gradient f x)","decl":"theorem Filter.EventuallyEq.gradient_eq (hL : f₁ =ᶠ[𝓝 x] f) : ∇ f₁ x = ∇ f x := by\n  unfold gradient\n  rwa [Filter.EventuallyEq.fderiv_eq]\n\n"}
{"name":"Filter.EventuallyEq.gradient","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nx : F\nf₁ : F → 𝕜\nh : (nhds x).EventuallyEq f₁ f\n⊢ (nhds x).EventuallyEq (gradient f₁) (gradient f)","decl":"protected theorem Filter.EventuallyEq.gradient (h : f₁ =ᶠ[𝓝 x] f) : ∇ f₁ =ᶠ[𝓝 x] ∇ f :=\n  h.eventuallyEq_nhds.mono fun _ h => h.gradient_eq\n\n"}
{"name":"hasGradientAtFilter_const","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nx : F\nL : Filter F\nc : 𝕜\n⊢ HasGradientAtFilter (fun x => c) 0 x L","decl":"theorem hasGradientAtFilter_const : HasGradientAtFilter (fun _ => c) 0 x L := by\n  rw [HasGradientAtFilter, map_zero]; apply hasFDerivAtFilter_const c x L\n\n"}
{"name":"hasGradientWithinAt_const","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nx : F\ns : Set F\nc : 𝕜\n⊢ HasGradientWithinAt (fun x => c) 0 s x","decl":"theorem hasGradientWithinAt_const : HasGradientWithinAt (fun _ => c) 0 s x :=\n  hasGradientAtFilter_const _ _ _\n\n"}
{"name":"hasGradientAt_const","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nx : F\nc : 𝕜\n⊢ HasGradientAt (fun x => c) 0 x","decl":"theorem hasGradientAt_const : HasGradientAt (fun _ => c) 0 x :=\n  hasGradientAtFilter_const _ _ _\n\n"}
{"name":"gradient_const","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nx : F\nc : 𝕜\n⊢ Eq (gradient (fun x => c) x) 0","decl":"theorem gradient_const : ∇ (fun _ => c) x = 0 := by\n  rw [gradient, fderiv_const, Pi.zero_apply, map_zero]\n\n"}
{"name":"gradient_const'","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\ninst✝ : RCLike 𝕜\nc : 𝕜\n⊢ Eq (gradient fun x => c) fun x => 0","decl":"@[simp]\ntheorem gradient_const' : (∇ fun _ : 𝕜 => c) = fun _ => 0 :=\n  funext fun x => gradient_const x c\n\n"}
{"name":"HasGradientAtFilter.tendsto_nhds","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\nL : Filter F\nhL : LE.le L (nhds x)\nh : HasGradientAtFilter f f' x L\n⊢ Filter.Tendsto f L (nhds (f x))","decl":"nonrec theorem HasGradientAtFilter.tendsto_nhds (hL : L ≤ 𝓝 x) (h : HasGradientAtFilter f f' x L) :\n    Tendsto f L (𝓝 (f x)) :=\n  h.tendsto_nhds hL\n\n"}
{"name":"HasGradientWithinAt.continuousWithinAt","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\ns : Set F\nh : HasGradientWithinAt f f' s x\n⊢ ContinuousWithinAt f s x","decl":"theorem HasGradientWithinAt.continuousWithinAt (h : HasGradientWithinAt f f' s x) :\n    ContinuousWithinAt f s x :=\n  HasGradientAtFilter.tendsto_nhds inf_le_left h\n\n"}
{"name":"HasGradientAt.continuousAt","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\nf' x : F\nh : HasGradientAt f f' x\n⊢ ContinuousAt f x","decl":"theorem HasGradientAt.continuousAt (h : HasGradientAt f f' x) : ContinuousAt f x :=\n  HasGradientAtFilter.tendsto_nhds le_rfl h\n\n"}
{"name":"HasGradientAt.continuousOn","module":"Mathlib.Analysis.Calculus.Gradient.Basic","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nf : F → 𝕜\ns : Set F\nf' : F → F\nh : ∀ (x : F), Membership.mem s x → HasGradientAt f (f' x) x\n⊢ ContinuousOn f s","decl":"protected theorem HasGradientAt.continuousOn {f' : F → F} (h : ∀ x ∈ s, HasGradientAt f (f' x) x) :\n    ContinuousOn f s :=\n  fun x hx => (h x hx).continuousAt.continuousWithinAt\n\n"}
