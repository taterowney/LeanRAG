{"name":"padicValNat_def'","module":"Mathlib.NumberTheory.Padics.PadicVal.Defs","initialProofState":"p n : Nat\nhp : Ne p 1\nhn : LT.lt 0 n\n⊢ Eq (padicValNat p n) (multiplicity p n)","decl":"theorem padicValNat_def' {n : ℕ} (hp : p ≠ 1) (hn : 0 < n) :\n    padicValNat p n = multiplicity p n := by\n  simp [padicValNat, hp, hn, multiplicity, emultiplicity, finiteMultiplicity_iff.2 ⟨hp, hn⟩]\n  convert (WithTop.untop'_coe ..).symm\n\n"}
{"name":"padicValNat_def","module":"Mathlib.NumberTheory.Padics.PadicVal.Defs","initialProofState":"p : Nat\nhp : Fact (Nat.Prime p)\nn : Nat\nhn : LT.lt 0 n\n⊢ Eq (padicValNat p n) (multiplicity p n)","decl":"/-- A simplification of `padicValNat` when one input is prime, by analogy with\n`padicValRat_def`. -/\ntheorem padicValNat_def [hp : Fact p.Prime] {n : ℕ} (hn : 0 < n) :\n    padicValNat p n = multiplicity p n :=\n  padicValNat_def' hp.out.ne_one hn\n\n"}
{"name":"padicValNat_eq_emultiplicity","module":"Mathlib.NumberTheory.Padics.PadicVal.Defs","initialProofState":"p : Nat\nhp : Fact (Nat.Prime p)\nn : Nat\nhn : LT.lt 0 n\n⊢ Eq (↑(padicValNat p n)) (emultiplicity p n)","decl":"/-- A simplification of `padicValNat` when one input is prime, by analogy with\n`padicValRat_def`. -/\ntheorem padicValNat_eq_emultiplicity [hp : Fact p.Prime] {n : ℕ} (hn : 0 < n) :\n    padicValNat p n = emultiplicity p n := by\n  rw [(finiteMultiplicity_iff.2 ⟨hp.out.ne_one, hn⟩).emultiplicity_eq_multiplicity]\n  exact_mod_cast padicValNat_def hn\n\n"}
{"name":"padicValNat.zero","module":"Mathlib.NumberTheory.Padics.PadicVal.Defs","initialProofState":"p : Nat\n⊢ Eq (padicValNat p 0) 0","decl":"/-- `padicValNat p 0` is `0` for any `p`. -/\n@[simp]\nprotected theorem zero : padicValNat p 0 = 0 := by simp [padicValNat]\n\n"}
{"name":"padicValNat.one","module":"Mathlib.NumberTheory.Padics.PadicVal.Defs","initialProofState":"p : Nat\n⊢ Eq (padicValNat p 1) 0","decl":"/-- `padicValNat p 1` is `0` for any `p`. -/\n@[simp]\nprotected theorem one : padicValNat p 1 = 0 := by simp [padicValNat]\n\n"}
{"name":"padicValNat.eq_zero_iff","module":"Mathlib.NumberTheory.Padics.PadicVal.Defs","initialProofState":"p n : Nat\n⊢ Iff (Eq (padicValNat p n) 0) (Or (Eq p 1) (Or (Eq n 0) (Not (Dvd.dvd p n))))","decl":"@[simp]\ntheorem eq_zero_iff {n : ℕ} : padicValNat p n = 0 ↔ p = 1 ∨ n = 0 ∨ ¬p ∣ n := by\n  simp only [padicValNat, ne_eq, pos_iff_ne_zero, dite_eq_right_iff, find_eq_zero, zero_add,\n    pow_one, and_imp, ← or_iff_not_imp_left]\n\n"}
{"name":"le_emultiplicity_iff_replicate_subperm_primeFactorsList","module":"Mathlib.NumberTheory.Padics.PadicVal.Defs","initialProofState":"a b n : Nat\nha : Nat.Prime a\nhb : Ne b 0\n⊢ Iff (LE.le (↑n) (emultiplicity a b)) ((List.replicate n a).Subperm b.primeFactorsList)","decl":"theorem le_emultiplicity_iff_replicate_subperm_primeFactorsList {a b : ℕ} {n : ℕ} (ha : a.Prime)\n    (hb : b ≠ 0) :\n    ↑n ≤ emultiplicity a b ↔ replicate n a <+~ b.primeFactorsList :=\n  (replicate_subperm_primeFactorsList_iff ha hb).trans\n    pow_dvd_iff_le_emultiplicity |>.symm\n\n"}
{"name":"le_padicValNat_iff_replicate_subperm_primeFactorsList","module":"Mathlib.NumberTheory.Padics.PadicVal.Defs","initialProofState":"a b n : Nat\nha : Nat.Prime a\nhb : Ne b 0\n⊢ Iff (LE.le n (padicValNat a b)) ((List.replicate n a).Subperm b.primeFactorsList)","decl":"theorem le_padicValNat_iff_replicate_subperm_primeFactorsList {a b : ℕ} {n : ℕ} (ha : a.Prime)\n    (hb : b ≠ 0) :\n    n ≤ padicValNat a b ↔ replicate n a <+~ b.primeFactorsList := by\n  rw [← le_emultiplicity_iff_replicate_subperm_primeFactorsList ha hb,\n    Nat.finiteMultiplicity_iff.2 ⟨ha.ne_one, Nat.pos_of_ne_zero hb⟩\n      |>.emultiplicity_eq_multiplicity,     ← padicValNat_def' ha.ne_one (Nat.pos_of_ne_zero hb),\n    Nat.cast_le]\n"}
