{"name":"MeasureTheory.meas_le_of_le_of_forall_le_meas_thickening_add","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝¹ : MeasurableSpace Ω\ninst✝ : PseudoEMetricSpace Ω\nε₁ ε₂ : ENNReal\nμ ν : MeasureTheory.Measure Ω\nh_le : LE.le ε₁ ε₂\nB : Set Ω\nhε₁ : LE.le (μ B) (HAdd.hAdd (ν (Metric.thickening ε₁.toReal B)) ε₁)\n⊢ LE.le (μ B) (HAdd.hAdd (ν (Metric.thickening ε₂.toReal B)) ε₂)","decl":"lemma meas_le_of_le_of_forall_le_meas_thickening_add {ε₁ ε₂ : ℝ≥0∞} (μ ν : Measure Ω)\n    (h_le : ε₁ ≤ ε₂) {B : Set Ω} (hε₁ : μ B ≤ ν (thickening ε₁.toReal B) + ε₁) :\n    μ B ≤ ν (thickening ε₂.toReal B) + ε₂ := by\n  by_cases ε_top : ε₂ = ∞\n  · simp only [ne_eq, FiniteMeasure.ennreal_coeFn_eq_coeFn_toMeasure, ε_top, top_toReal,\n                add_top, le_top]\n  apply hε₁.trans (add_le_add ?_ h_le)\n  exact measure_mono (μ := ν) (thickening_mono (toReal_mono ε_top h_le) B)\n\n"}
{"name":"MeasureTheory.left_measure_le_of_levyProkhorovEDist_lt","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝¹ : MeasurableSpace Ω\ninst✝ : PseudoEMetricSpace Ω\nμ ν : MeasureTheory.Measure Ω\nc : ENNReal\nh : LT.lt (MeasureTheory.levyProkhorovEDist μ ν) c\nB : Set Ω\nB_mble : MeasurableSet B\n⊢ LE.le (μ B) (HAdd.hAdd (ν (Metric.thickening c.toReal B)) c)","decl":"lemma left_measure_le_of_levyProkhorovEDist_lt {μ ν : Measure Ω} {c : ℝ≥0∞}\n    (h : levyProkhorovEDist μ ν < c) {B : Set Ω} (B_mble : MeasurableSet B) :\n    μ B ≤ ν (thickening c.toReal B) + c := by\n  obtain ⟨c', ⟨hc', lt_c⟩⟩ := sInf_lt_iff.mp h\n  exact meas_le_of_le_of_forall_le_meas_thickening_add μ ν lt_c.le (hc' B B_mble).1\n\n"}
{"name":"MeasureTheory.right_measure_le_of_levyProkhorovEDist_lt","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝¹ : MeasurableSpace Ω\ninst✝ : PseudoEMetricSpace Ω\nμ ν : MeasureTheory.Measure Ω\nc : ENNReal\nh : LT.lt (MeasureTheory.levyProkhorovEDist μ ν) c\nB : Set Ω\nB_mble : MeasurableSet B\n⊢ LE.le (ν B) (HAdd.hAdd (μ (Metric.thickening c.toReal B)) c)","decl":"lemma right_measure_le_of_levyProkhorovEDist_lt {μ ν : Measure Ω} {c : ℝ≥0∞}\n    (h : levyProkhorovEDist μ ν < c) {B : Set Ω} (B_mble : MeasurableSet B) :\n    ν B ≤ μ (thickening c.toReal B) + c := by\n  obtain ⟨c', ⟨hc', lt_c⟩⟩ := sInf_lt_iff.mp h\n  exact meas_le_of_le_of_forall_le_meas_thickening_add ν μ lt_c.le (hc' B B_mble).2\n\n"}
{"name":"MeasureTheory.levyProkhorovEDist_le_of_forall_add_pos_le","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝¹ : MeasurableSpace Ω\ninst✝ : PseudoEMetricSpace Ω\nμ ν : MeasureTheory.Measure Ω\nδ : ENNReal\nh : ∀ (ε : ENNReal) (B : Set Ω), LT.lt 0 ε → LT.lt ε Top.top → MeasurableSet B → And (LE.le (μ B) (HAdd.hAdd (HAdd.hAdd (ν (Metric.thickening (HAdd.hAdd δ ε).toReal B)) δ) ε)) (LE.le (ν B) (HAdd.hAdd (HAdd.hAdd (μ (Metric.thickening (HAdd.hAdd δ ε).toReal B)) δ) ε))\n⊢ LE.le (MeasureTheory.levyProkhorovEDist μ ν) δ","decl":"/-- A general sufficient condition for bounding `levyProkhorovEDist` from above. -/\nlemma levyProkhorovEDist_le_of_forall_add_pos_le (μ ν : Measure Ω) (δ : ℝ≥0∞)\n    (h : ∀ ε B, 0 < ε → ε < ∞ → MeasurableSet B →\n      μ B ≤ ν (thickening (δ + ε).toReal B) + δ + ε ∧\n      ν B ≤ μ (thickening (δ + ε).toReal B) + δ + ε) :\n    levyProkhorovEDist μ ν ≤ δ := by\n  apply ENNReal.le_of_forall_pos_le_add\n  intro ε hε _\n  by_cases ε_top : ε = ∞\n  · simp only [ε_top, add_top, le_top]\n  apply sInf_le\n  intro B B_mble\n  simpa only [add_assoc] using h ε B (coe_pos.mpr hε) coe_lt_top B_mble\n\n"}
{"name":"MeasureTheory.levyProkhorovEDist_le_of_forall","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝¹ : MeasurableSpace Ω\ninst✝ : PseudoEMetricSpace Ω\nμ ν : MeasureTheory.Measure Ω\nδ : ENNReal\nh : ∀ (ε : ENNReal) (B : Set Ω), LT.lt δ ε → LT.lt ε Top.top → MeasurableSet B → And (LE.le (μ B) (HAdd.hAdd (ν (Metric.thickening ε.toReal B)) ε)) (LE.le (ν B) (HAdd.hAdd (μ (Metric.thickening ε.toReal B)) ε))\n⊢ LE.le (MeasureTheory.levyProkhorovEDist μ ν) δ","decl":"/-- A simple general sufficient condition for bounding `levyProkhorovEDist` from above. -/\nlemma levyProkhorovEDist_le_of_forall (μ ν : Measure Ω) (δ : ℝ≥0∞)\n    (h : ∀ ε B, δ < ε → ε < ∞ → MeasurableSet B →\n        μ B ≤ ν (thickening ε.toReal B) + ε ∧ ν B ≤ μ (thickening ε.toReal B) + ε) :\n    levyProkhorovEDist μ ν ≤ δ := by\n  by_cases δ_top : δ = ∞\n  · simp only [δ_top, add_top, le_top]\n  apply levyProkhorovEDist_le_of_forall_add_pos_le\n  intro x B x_pos x_lt_top B_mble\n  simpa only [← add_assoc] using h (δ + x) B (ENNReal.lt_add_right δ_top x_pos.ne.symm)\n    (by simp only [add_lt_top, Ne.lt_top δ_top, x_lt_top, and_self]) B_mble\n\n"}
{"name":"MeasureTheory.levyProkhorovEDist_le_max_measure_univ","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝¹ : MeasurableSpace Ω\ninst✝ : PseudoEMetricSpace Ω\nμ ν : MeasureTheory.Measure Ω\n⊢ LE.le (MeasureTheory.levyProkhorovEDist μ ν) (Max.max (μ Set.univ) (ν Set.univ))","decl":"lemma levyProkhorovEDist_le_max_measure_univ (μ ν : Measure Ω) :\n    levyProkhorovEDist μ ν ≤ max (μ univ) (ν univ) := by\n  refine sInf_le fun B _ ↦ ⟨?_, ?_⟩ <;> apply le_add_left <;> simp [measure_mono]\n\n"}
{"name":"MeasureTheory.levyProkhorovEDist_lt_top","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝³ : MeasurableSpace Ω\ninst✝² : PseudoEMetricSpace Ω\nμ ν : MeasureTheory.Measure Ω\ninst✝¹ : MeasureTheory.IsFiniteMeasure μ\ninst✝ : MeasureTheory.IsFiniteMeasure ν\n⊢ LT.lt (MeasureTheory.levyProkhorovEDist μ ν) Top.top","decl":"lemma levyProkhorovEDist_lt_top (μ ν : Measure Ω) [IsFiniteMeasure μ] [IsFiniteMeasure ν] :\n    levyProkhorovEDist μ ν < ∞ :=\n  (levyProkhorovEDist_le_max_measure_univ μ ν).trans_lt <| by simp [measure_lt_top]\n\n"}
{"name":"MeasureTheory.levyProkhorovEDist_ne_top","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝³ : MeasurableSpace Ω\ninst✝² : PseudoEMetricSpace Ω\nμ ν : MeasureTheory.Measure Ω\ninst✝¹ : MeasureTheory.IsFiniteMeasure μ\ninst✝ : MeasureTheory.IsFiniteMeasure ν\n⊢ Ne (MeasureTheory.levyProkhorovEDist μ ν) Top.top","decl":"lemma levyProkhorovEDist_ne_top (μ ν : Measure Ω) [IsFiniteMeasure μ] [IsFiniteMeasure ν] :\n    levyProkhorovEDist μ ν ≠ ∞ := (levyProkhorovEDist_lt_top μ ν).ne\n\n"}
{"name":"MeasureTheory.levyProkhorovEDist_self","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝¹ : MeasurableSpace Ω\ninst✝ : PseudoEMetricSpace Ω\nμ : MeasureTheory.Measure Ω\n⊢ Eq (MeasureTheory.levyProkhorovEDist μ μ) 0","decl":"lemma levyProkhorovEDist_self (μ : Measure Ω) :\n    levyProkhorovEDist μ μ = 0 := by\n  rw [← nonpos_iff_eq_zero, ← csInf_Ioo zero_lt_top]\n  refine sInf_le_sInf fun ε ⟨hε₀, hε_top⟩ B _ ↦ and_self_iff.2 ?_\n  refine le_add_right <| measure_mono <| self_subset_thickening ?_ _\n  exact ENNReal.toReal_pos hε₀.ne' hε_top.ne\n\n"}
{"name":"MeasureTheory.levyProkhorovEDist_comm","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝¹ : MeasurableSpace Ω\ninst✝ : PseudoEMetricSpace Ω\nμ ν : MeasureTheory.Measure Ω\n⊢ Eq (MeasureTheory.levyProkhorovEDist μ ν) (MeasureTheory.levyProkhorovEDist ν μ)","decl":"lemma levyProkhorovEDist_comm (μ ν : Measure Ω) :\n    levyProkhorovEDist μ ν = levyProkhorovEDist ν μ := by\n  simp only [levyProkhorovEDist, and_comm]\n\n"}
{"name":"MeasureTheory.levyProkhorovEDist_triangle","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝² : MeasurableSpace Ω\ninst✝¹ : PseudoEMetricSpace Ω\ninst✝ : OpensMeasurableSpace Ω\nμ ν κ : MeasureTheory.Measure Ω\n⊢ LE.le (MeasureTheory.levyProkhorovEDist μ κ) (HAdd.hAdd (MeasureTheory.levyProkhorovEDist μ ν) (MeasureTheory.levyProkhorovEDist ν κ))","decl":"lemma levyProkhorovEDist_triangle [OpensMeasurableSpace Ω] (μ ν κ : Measure Ω) :\n    levyProkhorovEDist μ κ ≤ levyProkhorovEDist μ ν + levyProkhorovEDist ν κ := by\n  by_cases LPμν_finite : levyProkhorovEDist μ ν = ∞\n  · simp [LPμν_finite]\n  by_cases LPνκ_finite : levyProkhorovEDist ν κ = ∞\n  · simp [LPνκ_finite]\n  apply levyProkhorovEDist_le_of_forall_add_pos_le\n  intro ε B ε_pos ε_lt_top B_mble\n  have half_ε_pos : 0 < ε / 2 := ENNReal.div_pos ε_pos.ne' ofNat_ne_top\n  have half_ε_lt_top : ε / 2 < ∞ := ENNReal.div_lt_top ε_lt_top.ne two_ne_zero\n  let r := levyProkhorovEDist μ ν + ε / 2\n  let s := levyProkhorovEDist ν κ + ε / 2\n  have lt_r : levyProkhorovEDist μ ν < r := lt_add_right LPμν_finite half_ε_pos.ne'\n  have lt_s : levyProkhorovEDist ν κ < s := lt_add_right LPνκ_finite half_ε_pos.ne'\n  have hs_add_r : s + r = levyProkhorovEDist μ ν + levyProkhorovEDist ν κ + ε := by\n    simp_rw [s, r, add_assoc, add_comm (ε / 2), add_assoc, ENNReal.add_halves, ← add_assoc,\n      add_comm (levyProkhorovEDist μ ν)]\n  have hs_add_r' : s.toReal + r.toReal\n      = (levyProkhorovEDist μ ν + levyProkhorovEDist ν κ + ε).toReal := by\n    rw [← hs_add_r, ← ENNReal.toReal_add]\n    · exact ENNReal.add_ne_top.mpr ⟨LPνκ_finite, half_ε_lt_top.ne⟩\n    · exact ENNReal.add_ne_top.mpr ⟨LPμν_finite, half_ε_lt_top.ne⟩\n  rw [← hs_add_r', add_assoc, ← hs_add_r, add_assoc _ _ ε, ← hs_add_r]\n  refine ⟨?_, ?_⟩\n  · calc μ B ≤ ν (thickening r.toReal B) + r :=\n      left_measure_le_of_levyProkhorovEDist_lt lt_r B_mble\n    _ ≤ κ (thickening s.toReal (thickening r.toReal B)) + s + r :=\n      add_le_add_right\n        (left_measure_le_of_levyProkhorovEDist_lt lt_s isOpen_thickening.measurableSet) _\n    _ = κ (thickening s.toReal (thickening r.toReal B)) + (s + r) := add_assoc _ _ _\n    _ ≤ κ (thickening (s.toReal + r.toReal) B) + (s + r) :=\n      add_le_add_right (measure_mono (thickening_thickening_subset _ _ _)) _\n  · calc κ B ≤ ν (thickening s.toReal B) + s :=\n      right_measure_le_of_levyProkhorovEDist_lt lt_s B_mble\n    _ ≤ μ (thickening r.toReal (thickening s.toReal B)) + r + s :=\n      add_le_add_right\n        (right_measure_le_of_levyProkhorovEDist_lt lt_r isOpen_thickening.measurableSet) s\n    _ = μ (thickening r.toReal (thickening s.toReal B)) + (s + r) := by rw [add_assoc, add_comm r]\n    _ ≤ μ (thickening (r.toReal + s.toReal) B) + (s + r) :=\n      add_le_add_right (measure_mono (thickening_thickening_subset _ _ _)) _\n    _ = μ (thickening (s.toReal + r.toReal) B) + (s + r) := by rw [add_comm r.toReal]\n\n"}
{"name":"MeasureTheory.levyProkhorovDist_self","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝¹ : MeasurableSpace Ω\ninst✝ : PseudoEMetricSpace Ω\nμ : MeasureTheory.Measure Ω\n⊢ Eq (MeasureTheory.levyProkhorovDist μ μ) 0","decl":"lemma levyProkhorovDist_self (μ : Measure Ω) :\n    levyProkhorovDist μ μ = 0 := by\n  simp only [levyProkhorovDist, levyProkhorovEDist_self, zero_toReal]\n\n"}
{"name":"MeasureTheory.levyProkhorovDist_comm","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝¹ : MeasurableSpace Ω\ninst✝ : PseudoEMetricSpace Ω\nμ ν : MeasureTheory.Measure Ω\n⊢ Eq (MeasureTheory.levyProkhorovDist μ ν) (MeasureTheory.levyProkhorovDist ν μ)","decl":"lemma levyProkhorovDist_comm (μ ν : Measure Ω) :\n    levyProkhorovDist μ ν = levyProkhorovDist ν μ := by\n  simp only [levyProkhorovDist, levyProkhorovEDist_comm]\n\n"}
{"name":"MeasureTheory.levyProkhorovDist_triangle","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝⁵ : MeasurableSpace Ω\ninst✝⁴ : PseudoEMetricSpace Ω\ninst✝³ : OpensMeasurableSpace Ω\nμ ν κ : MeasureTheory.Measure Ω\ninst✝² : MeasureTheory.IsFiniteMeasure μ\ninst✝¹ : MeasureTheory.IsFiniteMeasure ν\ninst✝ : MeasureTheory.IsFiniteMeasure κ\n⊢ LE.le (MeasureTheory.levyProkhorovDist μ κ) (HAdd.hAdd (MeasureTheory.levyProkhorovDist μ ν) (MeasureTheory.levyProkhorovDist ν κ))","decl":"lemma levyProkhorovDist_triangle [OpensMeasurableSpace Ω] (μ ν κ : Measure Ω)\n    [IsFiniteMeasure μ] [IsFiniteMeasure ν] [IsFiniteMeasure κ] :\n    levyProkhorovDist μ κ ≤ levyProkhorovDist μ ν + levyProkhorovDist ν κ := by\n  have dμν_finite := (levyProkhorovEDist_lt_top μ ν).ne\n  have dνκ_finite := (levyProkhorovEDist_lt_top ν κ).ne\n  convert ENNReal.toReal_mono ?_ <| levyProkhorovEDist_triangle μ ν κ\n  · simp only [levyProkhorovDist, ENNReal.toReal_add dμν_finite dνκ_finite]\n  · exact ENNReal.add_ne_top.mpr ⟨dμν_finite, dνκ_finite⟩\n\n"}
{"name":"MeasureTheory.measure_le_measure_closure_of_levyProkhorovEDist_eq_zero","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝² : MeasurableSpace Ω\ninst✝¹ : PseudoEMetricSpace Ω\ninst✝ : OpensMeasurableSpace Ω\nμ ν : MeasureTheory.Measure Ω\nhLP : Eq (MeasureTheory.levyProkhorovEDist μ ν) 0\ns : Set Ω\ns_mble : MeasurableSet s\nh_finite : Exists fun δ => And (GT.gt δ 0) (Ne (ν (Metric.thickening δ s)) Top.top)\n⊢ LE.le (μ s) (ν (closure s))","decl":"lemma measure_le_measure_closure_of_levyProkhorovEDist_eq_zero {μ ν : Measure Ω}\n    (hLP : levyProkhorovEDist μ ν = 0) {s : Set Ω} (s_mble : MeasurableSet s)\n    (h_finite : ∃ δ > 0, ν (thickening δ s) ≠ ∞) :\n    μ s ≤ ν (closure s) := by\n  have key : Tendsto (fun ε ↦ ν (thickening ε.toReal s)) (𝓝[>] (0 : ℝ≥0∞)) (𝓝 (ν (closure s))) := by\n    have aux : Tendsto ENNReal.toReal (𝓝[>] 0) (𝓝[>] 0) := by\n      apply tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within (s := Ioi 0) ENNReal.toReal\n      · exact tendsto_nhdsWithin_of_tendsto_nhds (continuousAt_toReal zero_ne_top).tendsto\n      · filter_upwards [Ioo_mem_nhdsGT zero_lt_one] with x hx\n        exact toReal_pos hx.1.ne.symm <| ne_top_of_lt hx.2\n    exact (tendsto_measure_thickening h_finite).comp aux\n  have obs := Tendsto.add key (tendsto_nhdsWithin_of_tendsto_nhds tendsto_id)\n  simp only [id_eq, add_zero] at obs\n  apply ge_of_tendsto (b := μ s) obs\n  filter_upwards [self_mem_nhdsWithin] with ε ε_pos\n  exact left_measure_le_of_levyProkhorovEDist_lt (B_mble := s_mble) (hLP ▸ ε_pos)\n\n"}
{"name":"MeasureTheory.measure_eq_measure_of_levyProkhorovEDist_eq_zero_of_isClosed","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝² : MeasurableSpace Ω\ninst✝¹ : PseudoEMetricSpace Ω\ninst✝ : OpensMeasurableSpace Ω\nμ ν : MeasureTheory.Measure Ω\nhLP : Eq (MeasureTheory.levyProkhorovEDist μ ν) 0\ns : Set Ω\ns_closed : IsClosed s\nhμs : Exists fun δ => And (GT.gt δ 0) (Ne (μ (Metric.thickening δ s)) Top.top)\nhνs : Exists fun δ => And (GT.gt δ 0) (Ne (ν (Metric.thickening δ s)) Top.top)\n⊢ Eq (μ s) (ν s)","decl":"/-- Two measures at vanishing Lévy-Prokhorov distance from each other assign the same values to all\nclosed sets. -/\nlemma measure_eq_measure_of_levyProkhorovEDist_eq_zero_of_isClosed {μ ν : Measure Ω}\n    (hLP : levyProkhorovEDist μ ν = 0) {s : Set Ω} (s_closed : IsClosed s)\n    (hμs : ∃ δ > 0, μ (thickening δ s) ≠ ∞) (hνs : ∃ δ > 0, ν (thickening δ s) ≠ ∞) :\n    μ s = ν s := by\n  apply le_antisymm\n  · exact measure_le_measure_closure_of_levyProkhorovEDist_eq_zero\n      hLP s_closed.measurableSet hνs |>.trans <|\n      le_of_eq (congr_arg _ s_closed.closure_eq)\n  · exact measure_le_measure_closure_of_levyProkhorovEDist_eq_zero\n      (levyProkhorovEDist_comm μ ν ▸ hLP) s_closed.measurableSet hμs |>.trans <|\n      le_of_eq (congr_arg _ s_closed.closure_eq)\n\n"}
{"name":"MeasureTheory.LevyProkhorov.dist_def","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝² : MeasurableSpace Ω\ninst✝¹ : PseudoEMetricSpace Ω\ninst✝ : OpensMeasurableSpace Ω\nμ ν : MeasureTheory.LevyProkhorov (MeasureTheory.ProbabilityMeasure Ω)\n⊢ Eq (Dist.dist μ ν) (MeasureTheory.levyProkhorovDist ↑μ ↑ν)","decl":"lemma LevyProkhorov.dist_def (μ ν : LevyProkhorov (ProbabilityMeasure Ω)) :\n    dist μ ν = levyProkhorovDist μ.toMeasure ν.toMeasure := rfl\n\n"}
{"name":"MeasureTheory.levyProkhorovEDist_le_of_forall_le","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝⁴ : MeasurableSpace Ω\ninst✝³ : PseudoEMetricSpace Ω\ninst✝² : OpensMeasurableSpace Ω\nμ ν : MeasureTheory.Measure Ω\ninst✝¹ : MeasureTheory.IsProbabilityMeasure μ\ninst✝ : MeasureTheory.IsProbabilityMeasure ν\nδ : ENNReal\nh : ∀ (ε : ENNReal) (B : Set Ω), LT.lt δ ε → LT.lt ε Top.top → MeasurableSet B → LE.le (μ B) (HAdd.hAdd (ν (Metric.thickening ε.toReal B)) ε)\n⊢ LE.le (MeasureTheory.levyProkhorovEDist μ ν) δ","decl":"/-- A simple sufficient condition for bounding `levyProkhorovEDist` between probability measures\nfrom above. The condition involves only one of two natural bounds, the other bound is for free. -/\nlemma levyProkhorovEDist_le_of_forall_le\n    (μ ν : Measure Ω) [IsProbabilityMeasure μ] [IsProbabilityMeasure ν] (δ : ℝ≥0∞)\n    (h : ∀ ε B, δ < ε → ε < ∞ → MeasurableSet B → μ B ≤ ν (thickening ε.toReal B) + ε) :\n    levyProkhorovEDist μ ν ≤ δ := by\n  apply levyProkhorovEDist_le_of_forall μ ν δ\n  intro ε B ε_gt ε_lt_top B_mble\n  refine ⟨h ε B ε_gt ε_lt_top B_mble, ?_⟩\n  have B_subset := subset_compl_thickening_compl_thickening_self ε.toReal B\n  apply (measure_mono (μ := ν) B_subset).trans\n  rw [prob_compl_eq_one_sub isOpen_thickening.measurableSet]\n  have Tc_mble := (isOpen_thickening (δ := ε.toReal) (E := B)).isClosed_compl.measurableSet\n  specialize h ε (thickening ε.toReal B)ᶜ ε_gt ε_lt_top Tc_mble\n  rw [prob_compl_eq_one_sub isOpen_thickening.measurableSet] at h\n  have almost := add_le_add (c := μ (thickening ε.toReal B)) h rfl.le\n  rw [tsub_add_cancel_of_le prob_le_one, add_assoc] at almost\n  apply (tsub_le_tsub_right almost _).trans\n  rw [ENNReal.add_sub_cancel_left (measure_ne_top ν _), add_comm ε]\n\n"}
{"name":"MeasureTheory.levyProkhorovDist_le_of_forall_le","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝⁴ : MeasurableSpace Ω\ninst✝³ : PseudoEMetricSpace Ω\ninst✝² : OpensMeasurableSpace Ω\nμ ν : MeasureTheory.Measure Ω\ninst✝¹ : MeasureTheory.IsProbabilityMeasure μ\ninst✝ : MeasureTheory.IsProbabilityMeasure ν\nδ : Real\nδ_nn : LE.le 0 δ\nh : ∀ (ε : Real) (B : Set Ω), LT.lt δ ε → MeasurableSet B → LE.le (μ B) (HAdd.hAdd (ν (Metric.thickening ε B)) (ENNReal.ofReal ε))\n⊢ LE.le (MeasureTheory.levyProkhorovDist μ ν) δ","decl":"/-- A simple sufficient condition for bounding `levyProkhorovDist` between probability measures\nfrom above. The condition involves only one of two natural bounds, the other bound is for free. -/\nlemma levyProkhorovDist_le_of_forall_le\n    (μ ν : Measure Ω) [IsProbabilityMeasure μ] [IsProbabilityMeasure ν] {δ : ℝ} (δ_nn : 0 ≤ δ)\n    (h : ∀ ε B, δ < ε → MeasurableSet B → μ B ≤ ν (thickening ε B) + ENNReal.ofReal ε) :\n    levyProkhorovDist μ ν ≤ δ := by\n  apply toReal_le_of_le_ofReal δ_nn\n  apply levyProkhorovEDist_le_of_forall_le\n  intro ε B ε_gt ε_lt_top B_mble\n  have ε_gt' : δ < ε.toReal := by\n    refine (ofReal_lt_ofReal_iff ?_).mp ?_\n    · exact ENNReal.toReal_pos (ne_zero_of_lt ε_gt) ε_lt_top.ne\n    · simpa [ofReal_toReal_eq_iff.mpr ε_lt_top.ne] using ε_gt\n  convert h ε.toReal B ε_gt' B_mble\n  exact (ENNReal.ofReal_toReal ε_lt_top.ne).symm\n\n"}
{"name":"MeasureTheory.BoundedContinuousFunction.integral_eq_integral_meas_le_of_hasFiniteIntegral","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"α : Type u_2\ninst✝² : MeasurableSpace α\ninst✝¹ : TopologicalSpace α\ninst✝ : OpensMeasurableSpace α\nf : BoundedContinuousFunction α Real\nμ : MeasureTheory.Measure α\nf_nn : (MeasureTheory.ae μ).EventuallyLE 0 ⇑f\nhf : MeasureTheory.HasFiniteIntegral (⇑f) μ\n⊢ Eq (MeasureTheory.integral μ fun ω => f ω) (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.Ioc 0 (Norm.norm f))) fun t => (μ (setOf fun a => LE.le t (f a))).toReal)","decl":"/-- A version of the layer cake formula for bounded continuous functions which have finite integral:\n∫ f dμ = ∫ t in (0, ‖f‖], μ {x | f(x) ≥ t} dt. -/\nlemma BoundedContinuousFunction.integral_eq_integral_meas_le_of_hasFiniteIntegral\n    {α : Type*} [MeasurableSpace α] [TopologicalSpace α] [OpensMeasurableSpace α]\n    (f : α →ᵇ ℝ) (μ : Measure α) (f_nn : 0 ≤ᵐ[μ] f) (hf : HasFiniteIntegral f μ) :\n    ∫ ω, f ω ∂μ = ∫ t in Ioc 0 ‖f‖, ENNReal.toReal (μ {a : α | t ≤ f a}) := by\n  rw [Integrable.integral_eq_integral_Ioc_meas_le (M := ‖f‖) ?_ f_nn ?_]\n  · refine ⟨f.continuous.measurable.aestronglyMeasurable, hf⟩\n  · exact Eventually.of_forall (fun x ↦ BoundedContinuousFunction.apply_le_norm f x)\n\n"}
{"name":"MeasureTheory.BoundedContinuousFunction.integral_eq_integral_meas_le","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"α : Type u_2\ninst✝³ : MeasurableSpace α\ninst✝² : TopologicalSpace α\ninst✝¹ : OpensMeasurableSpace α\nf : BoundedContinuousFunction α Real\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf_nn : (MeasureTheory.ae μ).EventuallyLE 0 ⇑f\n⊢ Eq (MeasureTheory.integral μ fun ω => f ω) (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.Ioc 0 (Norm.norm f))) fun t => (μ (setOf fun a => LE.le t (f a))).toReal)","decl":"/-- A version of the layer cake formula for bounded continuous functions and finite measures:\n∫ f dμ = ∫ t in (0, ‖f‖], μ {x | f(x) ≥ t} dt. -/\nlemma BoundedContinuousFunction.integral_eq_integral_meas_le\n    {α : Type*} [MeasurableSpace α] [TopologicalSpace α] [OpensMeasurableSpace α]\n    (f : α →ᵇ ℝ) (μ : Measure α) [IsFiniteMeasure μ] (f_nn : 0 ≤ᵐ[μ] f) :\n    ∫ ω, f ω ∂μ = ∫ t in Ioc 0 ‖f‖, ENNReal.toReal (μ {a : α | t ≤ f a}) :=\n  integral_eq_integral_meas_le_of_hasFiniteIntegral _ _ f_nn (f.integrable μ).2\n\n"}
{"name":"MeasureTheory.BoundedContinuousFunction.integral_le_of_levyProkhorovEDist_lt","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝⁴ : MeasurableSpace Ω\ninst✝³ : PseudoMetricSpace Ω\ninst✝² : OpensMeasurableSpace Ω\nμ ν : MeasureTheory.Measure Ω\ninst✝¹ : MeasureTheory.IsFiniteMeasure μ\ninst✝ : MeasureTheory.IsFiniteMeasure ν\nε : Real\nε_pos : LT.lt 0 ε\nhμν : LT.lt (MeasureTheory.levyProkhorovEDist μ ν) (ENNReal.ofReal ε)\nf : BoundedContinuousFunction Ω Real\nf_nn : (MeasureTheory.ae μ).EventuallyLE 0 ⇑f\n⊢ LE.le (MeasureTheory.integral μ fun ω => f ω) (HAdd.hAdd (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.Ioc 0 (Norm.norm f))) fun t => (ν (Metric.thickening ε (setOf fun a => LE.le t (f a)))).toReal) (HMul.hMul ε (Norm.norm f)))","decl":"/-- Assuming `levyProkhorovEDist μ ν < ε`, we can bound `∫ f ∂μ` in terms of\n`∫ t in (0, ‖f‖], ν (thickening ε {x | f(x) ≥ t}) dt` and `‖f‖`. -/\nlemma BoundedContinuousFunction.integral_le_of_levyProkhorovEDist_lt (μ ν : Measure Ω)\n    [IsFiniteMeasure μ] [IsFiniteMeasure ν] {ε : ℝ} (ε_pos : 0 < ε)\n    (hμν : levyProkhorovEDist μ ν < ENNReal.ofReal ε) (f : Ω →ᵇ ℝ) (f_nn : 0 ≤ᵐ[μ] f) :\n    ∫ ω, f ω ∂μ\n      ≤ (∫ t in Ioc 0 ‖f‖, ENNReal.toReal (ν (thickening ε {a | t ≤ f a}))) + ε * ‖f‖ := by\n  rw [BoundedContinuousFunction.integral_eq_integral_meas_le f μ f_nn]\n  have key : (fun (t : ℝ) ↦ ENNReal.toReal (μ {a | t ≤ f a}))\n              ≤ (fun (t : ℝ) ↦ ENNReal.toReal (ν (thickening ε {a | t ≤ f a})) + ε) := by\n    intro t\n    convert ENNReal.toReal_mono ?_ <| left_measure_le_of_levyProkhorovEDist_lt hμν\n      (B := {a | t ≤ f a}) (f.continuous.measurable measurableSet_Ici)\n    · rw [ENNReal.toReal_add (measure_ne_top ν _) ofReal_ne_top, ENNReal.toReal_ofReal ε_pos.le]\n    · exact ENNReal.add_ne_top.mpr ⟨measure_ne_top ν _, ofReal_ne_top⟩\n  have intble₁ : IntegrableOn (fun t ↦ ENNReal.toReal (μ {a | t ≤ f a})) (Ioc 0 ‖f‖) := by\n    apply Measure.integrableOn_of_bounded (M := ENNReal.toReal (μ univ)) measure_Ioc_lt_top.ne\n    · apply (Measurable.ennreal_toReal (Antitone.measurable ?_)).aestronglyMeasurable\n      exact fun _ _ hst ↦ measure_mono (fun _ h ↦ hst.trans h)\n    · apply Eventually.of_forall <| fun t ↦ ?_\n      simp only [Real.norm_eq_abs, abs_toReal]\n      exact ENNReal.toReal_mono (measure_ne_top _ _) <| measure_mono (subset_univ _)\n  have intble₂ : IntegrableOn\n                  (fun t ↦ ENNReal.toReal (ν (thickening ε {a | t ≤ f a}))) (Ioc 0 ‖f‖) := by\n    apply Measure.integrableOn_of_bounded (M := ENNReal.toReal (ν univ)) measure_Ioc_lt_top.ne\n    · apply (Measurable.ennreal_toReal (Antitone.measurable ?_)).aestronglyMeasurable\n      exact fun _ _ hst ↦ measure_mono <| thickening_subset_of_subset ε (fun _ h ↦ hst.trans h)\n    · apply Eventually.of_forall <| fun t ↦ ?_\n      simp only [Real.norm_eq_abs, abs_toReal]\n      exact ENNReal.toReal_mono (measure_ne_top _ _) <| measure_mono (subset_univ _)\n  apply le_trans (setIntegral_mono (s := Ioc 0 ‖f‖) ?_ ?_ key)\n  · rw [integral_add]\n    · apply add_le_add_left\n      simp only [integral_const, MeasurableSet.univ, Measure.restrict_apply, univ_inter,\n                  Real.volume_Ioc, sub_zero, norm_nonneg, toReal_ofReal, smul_eq_mul,\n                  (mul_comm _ ε).le]\n    · exact intble₂\n    · exact integrable_const ε\n  · exact intble₁\n  · exact intble₂.add <| integrable_const ε\n\n"}
{"name":"MeasureTheory.tendsto_integral_meas_thickening_le","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝² : MeasurableSpace Ω\ninst✝¹ : PseudoMetricSpace Ω\ninst✝ : OpensMeasurableSpace Ω\nf : BoundedContinuousFunction Ω Real\nA : Set Real\nA_finmeas : Ne (MeasureTheory.MeasureSpace.volume A) Top.top\nμ : MeasureTheory.ProbabilityMeasure Ω\n⊢ Filter.Tendsto (fun ε => MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict A) fun t => (↑(μ (Metric.thickening ε (setOf fun a => LE.le t (f a))))).toReal) (nhdsWithin 0 (Set.Ioi 0)) (nhds (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict A) fun t => (↑(μ (setOf fun a => LE.le t (f a)))).toReal))","decl":"/-- A monotone decreasing convergence lemma for integrals of measures of thickenings:\n`∫ t in (0, ‖f‖], μ (thickening ε {x | f(x) ≥ t}) dt` tends to\n`∫ t in (0, ‖f‖], μ {x | f(x) ≥ t} dt` as `ε → 0`. -/\nlemma tendsto_integral_meas_thickening_le (f : Ω →ᵇ ℝ)\n    {A : Set ℝ} (A_finmeas : volume A ≠ ∞) (μ : ProbabilityMeasure Ω) :\n    Tendsto (fun ε ↦ ∫ t in A, ENNReal.toReal (μ (thickening ε {a | t ≤ f a}))) (𝓝[>] (0 : ℝ))\n      (𝓝 (∫ t in A, ENNReal.toReal (μ {a | t ≤ f a}))) := by\n  apply tendsto_integral_filter_of_dominated_convergence (G := ℝ) (μ := volume.restrict A)\n        (F := fun ε t ↦ (μ (thickening ε {a | t ≤ f a}))) (f := fun t ↦ (μ {a | t ≤ f a})) 1\n  · apply Eventually.of_forall fun n ↦ Measurable.aestronglyMeasurable ?_\n    simp only [measurable_coe_nnreal_real_iff]\n    apply measurable_toNNReal.comp <| Antitone.measurable (fun s t hst ↦ ?_)\n    exact measure_mono <| thickening_subset_of_subset _ <| fun ω h ↦ hst.trans h\n  · apply Eventually.of_forall (fun i ↦ ?_)\n    apply Eventually.of_forall (fun t ↦ ?_)\n    simp only [Real.norm_eq_abs, NNReal.abs_eq, Pi.one_apply]\n    exact ENNReal.toReal_mono one_ne_top prob_le_one\n  · have aux : IsFiniteMeasure (volume.restrict A) := ⟨by simp [lt_top_iff_ne_top, A_finmeas]⟩\n    apply integrable_const\n  · apply Eventually.of_forall (fun t ↦ ?_)\n    simp only [NNReal.tendsto_coe]\n    apply (ENNReal.tendsto_toNNReal _).comp\n    · apply tendsto_measure_thickening_of_isClosed ?_ ?_\n      · exact ⟨1, ⟨Real.zero_lt_one, measure_ne_top _ _⟩⟩\n      · exact isClosed_le continuous_const f.continuous\n    · exact measure_ne_top _ _\n\n"}
{"name":"MeasureTheory.LevyProkhorov.continuous_equiv_probabilityMeasure","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝² : MeasurableSpace Ω\ninst✝¹ : PseudoMetricSpace Ω\ninst✝ : OpensMeasurableSpace Ω\n⊢ Continuous ⇑(MeasureTheory.LevyProkhorov.equiv (MeasureTheory.ProbabilityMeasure Ω))","decl":"/-- The identity map `LevyProkhorov (ProbabilityMeasure Ω) → ProbabilityMeasure Ω` is continuous. -/\nlemma LevyProkhorov.continuous_equiv_probabilityMeasure :\n    Continuous (LevyProkhorov.equiv (α := ProbabilityMeasure Ω)) := by\n  refine SeqContinuous.continuous ?_\n  intro μs ν hμs\n  set P := LevyProkhorov.equiv _ ν -- more palatable notation\n  set Ps := fun n ↦ LevyProkhorov.equiv _ (μs n) -- more palatable notation\n  rw [ProbabilityMeasure.tendsto_iff_forall_integral_tendsto]\n  refine fun f ↦ tendsto_integral_of_forall_limsup_integral_le_integral ?_ f\n  intro f f_nn\n  by_cases f_zero : ‖f‖ = 0\n  · simp only [norm_eq_zero] at f_zero\n    simp [f_zero, limsup_const]\n  have norm_f_pos : 0 < ‖f‖ := lt_of_le_of_ne (norm_nonneg _) (fun a => f_zero a.symm)\n  apply _root_.le_of_forall_pos_le_add\n  intro δ δ_pos\n  apply limsup_le_of_le ?_\n  · obtain ⟨εs, ⟨_, ⟨εs_pos, εs_lim⟩⟩⟩ := exists_seq_strictAnti_tendsto (0 : ℝ)\n    have ε_of_room := Tendsto.add (tendsto_iff_dist_tendsto_zero.mp hμs) εs_lim\n    have ε_of_room' : Tendsto (fun n ↦ dist (μs n) ν + εs n) atTop (𝓝[>] 0) := by\n      rw [tendsto_nhdsWithin_iff]\n      refine ⟨by simpa using ε_of_room, Eventually.of_forall fun n ↦ ?_⟩\n      · rw [mem_Ioi]\n        linarith [εs_pos n, dist_nonneg (x := μs n) (y := ν)]\n    rw [add_zero] at ε_of_room\n    have key := (tendsto_integral_meas_thickening_le f (A := Ioc 0 ‖f‖) (by simp) P).comp ε_of_room'\n    have aux : ∀ (z : ℝ), Iio (z + δ/2) ∈ 𝓝 z := fun z ↦ Iio_mem_nhds (by linarith)\n    filter_upwards [key (aux _), ε_of_room <| Iio_mem_nhds <| half_pos <|\n                      mul_pos (inv_pos.mpr norm_f_pos) δ_pos]\n      with n hn hn'\n    simp only [mem_preimage, mem_Iio] at *\n    specialize εs_pos n\n    have bound := BoundedContinuousFunction.integral_le_of_levyProkhorovEDist_lt\n                    (Ps n) P (ε := dist (μs n) ν + εs n) ?_ ?_ f ?_\n    · refine bound.trans ?_\n      apply (add_le_add_right hn.le _).trans\n      rw [BoundedContinuousFunction.integral_eq_integral_meas_le]\n      · simp only [ProbabilityMeasure.ennreal_coeFn_eq_coeFn_toMeasure]\n        rw [add_assoc, mul_comm]\n        gcongr\n        calc\n          δ / 2 + ‖f‖ * (dist (μs n) ν + εs n)\n          _ ≤ δ / 2 + ‖f‖ * (‖f‖⁻¹ * δ / 2) := by gcongr\n          _ = δ := by field_simp; ring\n      · exact Eventually.of_forall f_nn\n    · positivity\n    · rw [ENNReal.ofReal_add (by positivity) (by positivity), ← add_zero (levyProkhorovEDist _ _)]\n      apply ENNReal.add_lt_add_of_le_of_lt (levyProkhorovEDist_ne_top _ _)\n            (le_of_eq ?_) (ofReal_pos.mpr εs_pos)\n      rw [LevyProkhorov.dist_def, levyProkhorovDist, ofReal_toReal (levyProkhorovEDist_ne_top _ _)]\n      rfl\n    · exact Eventually.of_forall f_nn\n  · simp only [IsCoboundedUnder, IsCobounded, eventually_map, eventually_atTop,\n               forall_exists_index]\n    refine ⟨0, fun a i hia ↦ le_trans (integral_nonneg f_nn) (hia i le_rfl)⟩\n\n"}
{"name":"MeasureTheory.levyProkhorov_le_convergenceInDistribution","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝² : MeasurableSpace Ω\ninst✝¹ : PseudoMetricSpace Ω\ninst✝ : OpensMeasurableSpace Ω\n⊢ LE.le (TopologicalSpace.coinduced (⇑(MeasureTheory.LevyProkhorov.equiv (MeasureTheory.ProbabilityMeasure Ω))) inferInstance) inferInstance","decl":"/-- The topology of the Lévy-Prokhorov metric is at least as fine as the topology of convergence in\ndistribution. -/\ntheorem levyProkhorov_le_convergenceInDistribution :\n    TopologicalSpace.coinduced (LevyProkhorov.equiv (α := ProbabilityMeasure Ω)) inferInstance\n      ≤ (inferInstance : TopologicalSpace (ProbabilityMeasure Ω)) :=\n  (LevyProkhorov.continuous_equiv_probabilityMeasure).coinduced_le\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.toMeasure_add_pos_gt_mem_nhds","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝² : PseudoMetricSpace Ω\ninst✝¹ : MeasurableSpace Ω\ninst✝ : OpensMeasurableSpace Ω\nP : MeasureTheory.ProbabilityMeasure Ω\nG : Set Ω\nG_open : IsOpen G\nε : ENNReal\nε_pos : LT.lt 0 ε\n⊢ Membership.mem (nhds P) (setOf fun Q => LT.lt (↑P G) (HAdd.hAdd (↑Q G) ε))","decl":"lemma ProbabilityMeasure.toMeasure_add_pos_gt_mem_nhds (P : ProbabilityMeasure Ω)\n    {G : Set Ω} (G_open : IsOpen G) {ε : ℝ≥0∞} (ε_pos : 0 < ε) :\n    {Q | P.toMeasure G < Q.toMeasure G + ε} ∈ 𝓝 P := by\n  by_cases easy : P.toMeasure G < ε\n  · exact Eventually.of_forall (fun _ ↦ lt_of_lt_of_le easy le_add_self)\n  by_cases ε_top : ε = ∞\n  · simp [ε_top, measure_lt_top]\n  simp only [not_lt] at easy\n  have aux : P.toMeasure G - ε < liminf (fun Q ↦ Q.toMeasure G) (𝓝 P) := by\n    apply lt_of_lt_of_le (ENNReal.sub_lt_self (measure_lt_top _ _).ne _ _)\n        <| ProbabilityMeasure.le_liminf_measure_open_of_tendsto tendsto_id G_open\n    · exact (lt_of_lt_of_le ε_pos easy).ne.symm\n    · exact ε_pos.ne.symm\n  filter_upwards [gt_mem_sets_of_limsInf_gt (α := ℝ≥0∞) isBounded_ge_of_bot\n      (show P.toMeasure G - ε < limsInf ((𝓝 P).map (fun Q ↦ Q.toMeasure G)) from aux)] with Q hQ\n  simp only [preimage_setOf_eq, mem_setOf_eq] at hQ\n  convert ENNReal.add_lt_add_right ε_top hQ\n  exact (tsub_add_cancel_of_le easy).symm\n\n"}
{"name":"MeasureTheory.SeparableSpace.exists_measurable_partition_diam_le","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝³ : PseudoMetricSpace Ω\ninst✝² : MeasurableSpace Ω\ninst✝¹ : OpensMeasurableSpace Ω\ninst✝ : TopologicalSpace.SeparableSpace Ω\nε : Real\nε_pos : LT.lt 0 ε\n⊢ Exists fun As => And (∀ (n : Nat), MeasurableSet (As n)) (And (∀ (n : Nat), Bornology.IsBounded (As n)) (And (∀ (n : Nat), LE.le (Metric.diam (As n)) ε) (And (Eq (Set.iUnion fun n => As n) Set.univ) (Pairwise fun n m => Disjoint (As n) (As m)))))","decl":"variable (Ω) in\n/-- In a separable pseudometric space, for any ε > 0 there exists a countable collection of\ndisjoint Borel measurable subsets of diameter at most ε that cover the whole space. -/\nlemma SeparableSpace.exists_measurable_partition_diam_le {ε : ℝ} (ε_pos : 0 < ε) :\n    ∃ (As : ℕ → Set Ω), (∀ n, MeasurableSet (As n)) ∧ (∀ n, Bornology.IsBounded (As n)) ∧\n        (∀ n, diam (As n) ≤ ε) ∧ (⋃ n, As n = univ) ∧\n        (Pairwise (fun (n m : ℕ) ↦ Disjoint (As n) (As m))) := by\n  by_cases X_emp : IsEmpty Ω\n  · refine ⟨fun _ ↦ ∅, fun _ ↦ MeasurableSet.empty, fun _ ↦ Bornology.isBounded_empty, ?_, ?_,\n            fun _ _ _ ↦ disjoint_of_subsingleton⟩\n    · intro n\n      simpa only [diam_empty] using LT.lt.le ε_pos\n    · simp only [iUnion_empty]\n      apply Eq.symm\n      simp only [univ_eq_empty_iff, X_emp]\n  rw [not_isEmpty_iff] at X_emp\n  obtain ⟨xs, xs_dense⟩ := exists_dense_seq Ω\n  have half_ε_pos : 0 < ε / 2 := half_pos ε_pos\n  set Bs := fun n ↦ Metric.ball (xs n) (ε/2)\n  set As := disjointed Bs\n  refine ⟨As, ?_, ?_, ?_, ?_, ?_⟩\n  · exact MeasurableSet.disjointed (fun n ↦ measurableSet_ball)\n  · exact fun n ↦ Bornology.IsBounded.subset isBounded_ball <| disjointed_subset Bs n\n  · intro n\n    apply (diam_mono (disjointed_subset Bs n) isBounded_ball).trans\n    convert diam_ball half_ε_pos.le\n    ring\n  · have aux : ⋃ n, Bs n = univ := by\n      convert DenseRange.iUnion_uniformity_ball xs_dense <| Metric.dist_mem_uniformity half_ε_pos\n      exact (ball_eq_ball' _ _).symm\n    simpa only [← aux] using iUnion_disjointed\n  · exact disjoint_disjointed Bs\n\n"}
{"name":"MeasureTheory.LevyProkhorov.continuous_equiv_symm_probabilityMeasure","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝³ : PseudoMetricSpace Ω\ninst✝² : MeasurableSpace Ω\ninst✝¹ : OpensMeasurableSpace Ω\ninst✝ : TopologicalSpace.SeparableSpace Ω\n⊢ Continuous ⇑(MeasureTheory.LevyProkhorov.equiv (MeasureTheory.ProbabilityMeasure Ω)).symm","decl":"lemma LevyProkhorov.continuous_equiv_symm_probabilityMeasure :\n    Continuous (LevyProkhorov.equiv (α := ProbabilityMeasure Ω)).symm := by\n  -- We check continuity of `id : ProbabilityMeasure Ω → LevyProkhorov (ProbabilityMeasure Ω)` at\n  -- each point `P : ProbabilityMeasure Ω`.\n  rw [continuous_iff_continuousAt]\n  intro P\n  -- To check continuity, fix `ε > 0`. To leave some wiggle room, be ready to use `ε/3 > 0` instead.\n  rw [continuousAt_iff']\n  intro ε ε_pos\n  have third_ε_pos : 0 < ε / 3 := by linarith\n  have third_ε_pos' : 0 < ENNReal.ofReal (ε / 3) := ofReal_pos.mpr third_ε_pos\n  -- First use separability to choose a countable partition of `Ω` into measurable\n  -- subsets `Es n ⊆ Ω` of small diameter, `diam (Es n) < ε/3`.\n  obtain ⟨Es, Es_mble, Es_bdd, Es_diam, Es_cover, Es_disjoint⟩ :=\n    SeparableSpace.exists_measurable_partition_diam_le Ω third_ε_pos\n  -- Instead of the whole space `Ω = ⋃ n ∈ ℕ, Es n`, focus on a large but finite\n  -- union `⋃ n < N, Es n`, chosen in such a way that the complement has small `P`-mass,\n  -- `P (⋃ n < N, Es n)ᶜ < ε/3`.\n  obtain ⟨N, hN⟩ : ∃ N, P.toMeasure (⋃ j ∈ Iio N, Es j)ᶜ < ENNReal.ofReal (ε/3) := by\n    have exhaust := @tendsto_measure_biUnion_Ici_zero_of_pairwise_disjoint Ω _ P.toMeasure _\n                    Es (fun n ↦ (Es_mble n).nullMeasurableSet) Es_disjoint\n    simp only [tendsto_atTop_nhds, Function.comp_apply] at exhaust\n    obtain ⟨N, hN⟩ := exhaust (Iio (ENNReal.ofReal (ε / 3))) third_ε_pos' isOpen_Iio\n    refine ⟨N, ?_⟩\n    have rewr : ⋃ i, ⋃ (_ : N ≤ i), Es i = (⋃ i, ⋃ (_ : i < N), Es i)ᶜ := by\n      simpa only [mem_Iio, compl_Iio, mem_Ici] using\n        (biUnion_compl_eq_of_pairwise_disjoint_of_iUnion_eq_univ Es_cover Es_disjoint (Iio N)).symm\n    simpa only [mem_Iio, ← rewr, gt_iff_lt] using hN N le_rfl\n  -- With the finite `N` fixed above, consider the finite collection of open sets of the form\n  -- `Gs J = thickening (ε/3) (⋃ j ∈ J, Es j)`, where `J ⊆ {0, 1, ..., N-1}`.\n  have Js_finite : Set.Finite {J | J ⊆ Iio N} := Finite.finite_subsets <| finite_Iio N\n  set Gs := (fun (J : Set ℕ) ↦ thickening (ε/3) (⋃ j ∈ J, Es j)) '' {J | J ⊆ Iio N}\n  have Gs_open : ∀ (J : Set ℕ), IsOpen (thickening (ε/3) (⋃ j ∈ J, Es j)) :=\n    fun J ↦ isOpen_thickening\n  -- Any open set `G ⊆ Ω` determines a neighborhood of `P` consisting of those `Q` that\n  -- satisfy `P G < Q G + ε/3`.\n  have mem_nhds_P (G : Set Ω) (G_open : IsOpen G) :\n      {Q | P.toMeasure G < Q.toMeasure G + ENNReal.ofReal (ε/3)} ∈ 𝓝 P :=\n    P.toMeasure_add_pos_gt_mem_nhds G_open third_ε_pos'\n  -- Assume that `Q` is in the neighborhood of `P` such that for each `J ⊆ {0, 1, ..., N-1}`\n  -- we have `P (Gs J) < Q (Gs J) + ε/3`.\n  filter_upwards [(Finset.iInter_mem_sets Js_finite.toFinset).mpr <|\n                    fun J _ ↦ mem_nhds_P _ (Gs_open J)] with Q hQ\n  simp only [Finite.mem_toFinset, mem_setOf_eq, thickening_iUnion, mem_iInter] at hQ\n  -- Note that in order to show that the Lévy-Prokhorov distance `LPdist P Q` is small (`≤ 2*ε/3`),\n  -- it suffices to show that for arbitrary subsets `B ⊆ Ω`, the measure `P B` is bounded above up\n  -- to a small error by the `Q`-measure of a small thickening of `B`.\n  apply lt_of_le_of_lt ?_ (show 2*(ε/3) < ε by linarith)\n  rw [dist_comm]\n  -- Fix an arbitrary set `B ⊆ Ω`, and an arbitrary `δ > 2*ε/3` to gain some room for error\n  -- and for thickening.\n  apply levyProkhorovDist_le_of_forall_le _ _ (by linarith) (fun δ B δ_gt _ ↦ ?_)\n  -- Let `JB ⊆ {0, 1, ..., N-1}` consist of those indices `j` such that `B` intersects `Es j`.\n  -- Then the open set `Gs JB` approximates `B` rather well:\n  -- except for what happens in the small complement `(⋃ n < N, Es n)ᶜ`, the set `B` is\n  -- contained in `Gs JB`, and conversely `Gs JB` only contains points within `δ` from `B`.\n  set JB := {i | B ∩ Es i ≠ ∅ ∧ i ∈ Iio N}\n  have B_subset : B ⊆ (⋃ i ∈ JB, thickening (ε/3) (Es i)) ∪ (⋃ j ∈ Iio N, Es j)ᶜ := by\n    suffices B ⊆ (⋃ i ∈ JB, thickening (ε/3) (Es i)) ∪ (⋃ j ∈ Ici N, Es j) by\n      refine this.trans <| union_subset_union le_rfl ?_\n      intro ω hω\n      simp only [mem_Ici, mem_iUnion, exists_prop] at hω\n      obtain ⟨i, i_large, ω_in_Esi⟩ := hω\n      by_contra con\n      simp only [mem_Iio, compl_iUnion, mem_iInter, mem_compl_iff, not_forall, not_not,\n                  exists_prop] at con\n      obtain ⟨j, j_small, ω_in_Esj⟩ := con\n      exact disjoint_left.mp (Es_disjoint (show j ≠ i by omega)) ω_in_Esj ω_in_Esi\n    intro ω ω_in_B\n    obtain ⟨i, hi⟩ := show ∃ n, ω ∈ Es n by simp only [← mem_iUnion, Es_cover, mem_univ]\n    simp only [mem_Ici, mem_union, mem_iUnion, exists_prop]\n    by_cases i_small : i ∈ Iio N\n    · refine Or.inl ⟨i, ?_, self_subset_thickening third_ε_pos _ hi⟩\n      simp only [mem_Iio, mem_setOf_eq, JB]\n      refine ⟨nonempty_iff_ne_empty.mp <| Set.nonempty_of_mem <| mem_inter ω_in_B hi, i_small⟩\n    · exact Or.inr ⟨i, by simpa only [mem_Iio, not_lt] using i_small, hi⟩\n  have subset_thickB : ⋃ i ∈ JB, thickening (ε / 3) (Es i) ⊆ thickening δ B := by\n    intro ω ω_in_U\n    simp only [mem_setOf_eq, mem_iUnion, exists_prop] at ω_in_U\n    obtain ⟨k, ⟨B_intersects, _⟩, ω_in_thEk⟩ := ω_in_U\n    rw [mem_thickening_iff] at ω_in_thEk ⊢\n    obtain ⟨w, w_in_Ek, w_near⟩ := ω_in_thEk\n    obtain ⟨z, ⟨z_in_B, z_in_Ek⟩⟩ := nonempty_iff_ne_empty.mpr B_intersects\n    refine ⟨z, z_in_B, lt_of_le_of_lt (dist_triangle ω w z) ?_⟩\n    apply lt_of_le_of_lt (add_le_add w_near.le <|\n            (dist_le_diam_of_mem (Es_bdd k) w_in_Ek z_in_Ek).trans <| Es_diam k)\n    linarith\n  -- We use the resulting upper bound `P B ≤ P (Gs JB) + P (small complement)`.\n  apply (measure_mono B_subset).trans ((measure_union_le _ _).trans ?_)\n  -- From the choice of `Q` in a suitable neighborhood, we have `P (Gs JB) < Q (Gs JB) + ε/3`.\n  specialize hQ _ (show JB ⊆ Iio N from fun _ h ↦ h.2)\n  -- Now it remains to add the pieces and use the above estimates.\n  apply (add_le_add hQ.le hN.le).trans\n  rw [add_assoc, ← ENNReal.ofReal_add third_ε_pos.le third_ε_pos.le, ← two_mul]\n  apply add_le_add (measure_mono subset_thickB) (ofReal_le_ofReal _)\n  exact δ_gt.le\n\n"}
{"name":"MeasureTheory.levyProkhorov_eq_convergenceInDistribution","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"Ω : Type u_1\ninst✝³ : PseudoMetricSpace Ω\ninst✝² : MeasurableSpace Ω\ninst✝¹ : OpensMeasurableSpace Ω\ninst✝ : TopologicalSpace.SeparableSpace Ω\n⊢ Eq inferInstance (TopologicalSpace.coinduced (⇑(MeasureTheory.LevyProkhorov.equiv (MeasureTheory.ProbabilityMeasure Ω))) inferInstance)","decl":"/-- The topology of the Lévy-Prokhorov metric on probability measures on a separable space\ncoincides with the topology of convergence in distribution. -/\ntheorem levyProkhorov_eq_convergenceInDistribution :\n    (inferInstance : TopologicalSpace (ProbabilityMeasure Ω))\n      = TopologicalSpace.coinduced (LevyProkhorov.equiv _) inferInstance :=\n  le_antisymm (LevyProkhorov.continuous_equiv_symm_probabilityMeasure (Ω := Ω)).coinduced_le\n              levyProkhorov_le_convergenceInDistribution\n\n"}
{"name":"MeasureTheory.instPseudoMetrizableSpaceProbabilityMeasureOfSeparableSpace","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"X : Type u_2\ninst✝⁴ : TopologicalSpace X\ninst✝³ : TopologicalSpace.PseudoMetrizableSpace X\ninst✝² : TopologicalSpace.SeparableSpace X\ninst✝¹ : MeasurableSpace X\ninst✝ : OpensMeasurableSpace X\n⊢ TopologicalSpace.PseudoMetrizableSpace (MeasureTheory.ProbabilityMeasure X)","decl":"/-- The topology of convergence in distribution on a separable space is pseudo-metrizable. -/\ninstance (X : Type*) [TopologicalSpace X] [PseudoMetrizableSpace X] [SeparableSpace X]\n    [MeasurableSpace X] [OpensMeasurableSpace X] :\n    PseudoMetrizableSpace (ProbabilityMeasure X) :=\n  letI : PseudoMetricSpace X := TopologicalSpace.pseudoMetrizableSpacePseudoMetric X\n  (homeomorph_probabilityMeasure_levyProkhorov (Ω := X)).isInducing.pseudoMetrizableSpace\n\n"}
{"name":"MeasureTheory.instMetrizableSpaceProbabilityMeasure","module":"Mathlib.MeasureTheory.Measure.LevyProkhorovMetric","initialProofState":"X : Type u_2\ninst✝⁴ : TopologicalSpace X\ninst✝³ : TopologicalSpace.PseudoMetrizableSpace X\ninst✝² : TopologicalSpace.SeparableSpace X\ninst✝¹ : MeasurableSpace X\ninst✝ : BorelSpace X\n⊢ TopologicalSpace.MetrizableSpace (MeasureTheory.ProbabilityMeasure X)","decl":"/-- The topology of convergence in distribution on a separable Borel space is metrizable. -/\ninstance instMetrizableSpaceProbabilityMeasure (X : Type*) [TopologicalSpace X]\n    [PseudoMetrizableSpace X] [SeparableSpace X] [MeasurableSpace X] [BorelSpace X] :\n    MetrizableSpace (ProbabilityMeasure X) := by\n  letI : PseudoMetricSpace X := TopologicalSpace.pseudoMetrizableSpacePseudoMetric X\n  exact homeomorph_probabilityMeasure_levyProkhorov.isEmbedding.metrizableSpace\n\n"}
