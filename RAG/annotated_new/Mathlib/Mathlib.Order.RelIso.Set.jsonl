{"name":"RelHomClass.map_inf","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nβ : Type u_2\nF : Type u_3\ninst✝³ : SemilatticeInf α\ninst✝² : LinearOrder β\ninst✝¹ : FunLike F β α\ninst✝ : RelHomClass F (fun x1 x2 => LT.lt x1 x2) fun x1 x2 => LT.lt x1 x2\na : F\nm n : β\n⊢ Eq (a (Min.min m n)) (Min.min (a m) (a n))","decl":"theorem map_inf [SemilatticeInf α] [LinearOrder β] [FunLike F β α]\n    [RelHomClass F (· < ·) (· < ·)] (a : F) (m n : β) :\n    a (m ⊓ n) = a m ⊓ a n :=\n  (StrictMono.monotone fun _ _ => map_rel a).map_inf m n\n\n"}
{"name":"RelHomClass.map_sup","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nβ : Type u_2\nF : Type u_3\ninst✝³ : SemilatticeSup α\ninst✝² : LinearOrder β\ninst✝¹ : FunLike F β α\ninst✝ : RelHomClass F (fun x1 x2 => GT.gt x1 x2) fun x1 x2 => GT.gt x1 x2\na : F\nm n : β\n⊢ Eq (a (Max.max m n)) (Max.max (a m) (a n))","decl":"theorem map_sup [SemilatticeSup α] [LinearOrder β] [FunLike F β α]\n    [RelHomClass F (· > ·) (· > ·)] (a : F) (m n : β) :\n    a (m ⊔ n) = a m ⊔ a n :=\n  map_inf (α := αᵒᵈ) (β := βᵒᵈ) _ _ _\n\n"}
{"name":"RelHomClass.directed","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nβ : Type u_2\nr : α → α → Prop\ns : β → β → Prop\nF : Type u_3\ninst✝¹ : FunLike F α β\ninst✝ : RelHomClass F r s\nι : Sort u_4\na : ι → α\nf : F\nha : Directed r a\n⊢ Directed s (Function.comp (⇑f) a)","decl":"theorem directed [FunLike F α β] [RelHomClass F r s] {ι : Sort*} {a : ι → α} {f : F}\n    (ha : Directed r a) : Directed s (f ∘ a) :=\n  ha.mono_comp _ fun _ _ h ↦ map_rel f h\n\n"}
{"name":"RelHomClass.directedOn","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nβ : Type u_2\nr : α → α → Prop\ns : β → β → Prop\nF : Type u_3\ninst✝¹ : FunLike F α β\ninst✝ : RelHomClass F r s\nf : F\nt : Set α\nhs : DirectedOn r t\n⊢ DirectedOn s (Set.image (⇑f) t)","decl":"theorem directedOn [FunLike F α β] [RelHomClass F r s] {f : F}\n    {t : Set α} (hs : DirectedOn r t) : DirectedOn s (f '' t) :=\n  hs.mono_comp fun _ _ h ↦ map_rel f h\n\n"}
{"name":"RelIso.range_eq","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nβ : Type u_2\nr : α → α → Prop\ns : β → β → Prop\ne : RelIso r s\n⊢ Eq (Set.range ⇑e) Set.univ","decl":"@[simp]\ntheorem range_eq (e : r ≃r s) : Set.range e = Set.univ :=\n  e.surjective.range_eq\n\n"}
{"name":"subrel_val","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nr : α → α → Prop\np : α → Prop\na b : Subtype p\n⊢ Iff (Subrel r p a b) (r ↑a ↑b)","decl":"@[simp]\ntheorem subrel_val (r : α → α → Prop) (p : α → Prop) {a b} : Subrel r p a b ↔ r a.1 b.1 :=\n  Iff.rfl\n\n"}
{"name":"Subrel.relEmbedding_apply","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nr : α → α → Prop\np : α → Prop\na : Subtype p\n⊢ Eq ((Subrel.relEmbedding r p) a) ↑a","decl":"@[simp]\ntheorem relEmbedding_apply (r : α → α → Prop) (p a) : Subrel.relEmbedding r p a = a.1 :=\n  rfl\n\n"}
{"name":"Subrel.coe_inclusionEmbedding","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nr : α → α → Prop\ns t : Set α\nh : HasSubset.Subset s t\n⊢ Eq (⇑(Subrel.inclusionEmbedding r h)) (Set.inclusion h)","decl":"@[simp]\ntheorem coe_inclusionEmbedding (r : α → α → Prop) {s t : Set α} (h : s ⊆ t) :\n    (Subrel.inclusionEmbedding r h : s → t) = Set.inclusion h :=\n  rfl\n\n"}
{"name":"Subrel.instIsReflSubtype","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nr : α → α → Prop\ninst✝ : IsRefl α r\np : α → Prop\n⊢ IsRefl (Subtype p) (Subrel r p)","decl":"instance (r : α → α → Prop) [IsRefl α r] (p : α → Prop) : IsRefl _ (Subrel r p) :=\n  ⟨fun x => @IsRefl.refl α r _ x⟩\n\n"}
{"name":"Subrel.instIsSymmSubtype","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nr : α → α → Prop\ninst✝ : IsSymm α r\np : α → Prop\n⊢ IsSymm (Subtype p) (Subrel r p)","decl":"instance (r : α → α → Prop) [IsSymm α r] (p : α → Prop) : IsSymm _ (Subrel r p) :=\n  ⟨fun x y => @IsSymm.symm α r _ x y⟩\n\n"}
{"name":"Subrel.instIsAsymmSubtype","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nr : α → α → Prop\ninst✝ : IsAsymm α r\np : α → Prop\n⊢ IsAsymm (Subtype p) (Subrel r p)","decl":"instance (r : α → α → Prop) [IsAsymm α r] (p : α → Prop) : IsAsymm _ (Subrel r p) :=\n  ⟨fun x y => @IsAsymm.asymm α r _ x y⟩\n\n"}
{"name":"Subrel.instIsTransSubtype","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nr : α → α → Prop\ninst✝ : IsTrans α r\np : α → Prop\n⊢ IsTrans (Subtype p) (Subrel r p)","decl":"instance (r : α → α → Prop) [IsTrans α r] (p : α → Prop) : IsTrans _ (Subrel r p) :=\n  ⟨fun x y z => @IsTrans.trans α r _ x y z⟩\n\n"}
{"name":"Subrel.instIsIrreflSubtype","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nr : α → α → Prop\ninst✝ : IsIrrefl α r\np : α → Prop\n⊢ IsIrrefl (Subtype p) (Subrel r p)","decl":"instance (r : α → α → Prop) [IsIrrefl α r] (p : α → Prop) : IsIrrefl _ (Subrel r p) :=\n  ⟨fun x => @IsIrrefl.irrefl α r _ x⟩\n\n"}
{"name":"Subrel.instIsTrichotomousSubtype","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nr : α → α → Prop\ninst✝ : IsTrichotomous α r\np : α → Prop\n⊢ IsTrichotomous (Subtype p) (Subrel r p)","decl":"instance (r : α → α → Prop) [IsTrichotomous α r] (p : α → Prop) : IsTrichotomous _ (Subrel r p) :=\n  ⟨fun x y => by rw [Subtype.eq_iff]; exact @IsTrichotomous.trichotomous α r _ x y⟩\n\n"}
{"name":"Subrel.instIsWellFoundedSubtype","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nr : α → α → Prop\ninst✝ : IsWellFounded α r\np : α → Prop\n⊢ IsWellFounded (Subtype p) (Subrel r p)","decl":"instance (r : α → α → Prop) [IsWellFounded α r] (p : α → Prop) : IsWellFounded _ (Subrel r p) :=\n  (Subrel.relEmbedding r p).isWellFounded\n\n"}
{"name":"Subrel.instIsPreorderSubtype","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nr : α → α → Prop\ninst✝ : IsPreorder α r\np : α → Prop\n⊢ IsPreorder (Subtype p) (Subrel r p)","decl":"instance (r : α → α → Prop) [IsPreorder α r] (p : α → Prop) : IsPreorder _ (Subrel r p) where\n"}
{"name":"Subrel.instIsStrictOrderSubtype","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nr : α → α → Prop\ninst✝ : IsStrictOrder α r\np : α → Prop\n⊢ IsStrictOrder (Subtype p) (Subrel r p)","decl":"instance (r : α → α → Prop) [IsStrictOrder α r] (p : α → Prop) : IsStrictOrder _ (Subrel r p) where\n"}
{"name":"Subrel.instIsWellOrderSubtype","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nr : α → α → Prop\ninst✝ : IsWellOrder α r\np : α → Prop\n⊢ IsWellOrder (Subtype p) (Subrel r p)","decl":"instance (r : α → α → Prop) [IsWellOrder α r] (p : α → Prop) : IsWellOrder _ (Subrel r p) where\n\n"}
{"name":"RelEmbedding.codRestrict_apply","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nβ : Type u_2\nr : α → α → Prop\ns : β → β → Prop\np : Set β\nf : RelEmbedding r s\nH : ∀ (a : α), Membership.mem p (f a)\na : α\n⊢ Eq ((RelEmbedding.codRestrict p f H) a) ⟨f a, ⋯⟩","decl":"@[simp]\ntheorem RelEmbedding.codRestrict_apply (p) (f : r ↪r s) (H a) :\n    RelEmbedding.codRestrict p f H a = ⟨f a, H a⟩ :=\n  rfl\n\n"}
{"name":"RelIso.image_eq_preimage_symm","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nβ : Type u_2\nr : α → α → Prop\ns : β → β → Prop\ne : RelIso r s\nt : Set α\n⊢ Eq (Set.image (⇑e) t) (Set.preimage (⇑e.symm) t)","decl":"theorem RelIso.image_eq_preimage_symm (e : r ≃r s) (t : Set α) : e '' t = e.symm ⁻¹' t :=\n  e.toEquiv.image_eq_preimage t\n\n"}
{"name":"RelIso.preimage_eq_image_symm","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nβ : Type u_2\nr : α → α → Prop\ns : β → β → Prop\ne : RelIso r s\nt : Set β\n⊢ Eq (Set.preimage (⇑e) t) (Set.image (⇑e.symm) t)","decl":"theorem RelIso.preimage_eq_image_symm (e : r ≃r s) (t : Set β) : e ⁻¹' t = e.symm '' t := by\n  rw [e.symm.image_eq_preimage_symm]; rfl\n\n"}
{"name":"Acc.of_subrel","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nr : α → α → Prop\ninst✝ : IsTrans α r\nb : α\na : Subtype fun a => r a b\nh : Acc (Subrel r fun x => r x b) a\n⊢ Acc r ↑a","decl":"theorem Acc.of_subrel {r : α → α → Prop} [IsTrans α r] {b : α} (a : { a // r a b })\n    (h : Acc (Subrel r (r · b)) a) : Acc r a.1 :=\n  h.recOn fun a _ IH ↦ ⟨_, fun _ hb ↦ IH ⟨_, _root_.trans hb a.2⟩ hb⟩\n\n"}
{"name":"wellFounded_iff_wellFounded_subrel","module":"Mathlib.Order.RelIso.Set","initialProofState":"α : Type u_1\nr : α → α → Prop\ninst✝ : IsTrans α r\n⊢ Iff (WellFounded r) (∀ (b : α), WellFounded (Subrel r fun x => r x b))","decl":"/-- A relation `r` is well-founded iff every downward-interval `{ a | r a b }` of it is\nwell-founded. -/\ntheorem wellFounded_iff_wellFounded_subrel {r : α → α → Prop} [IsTrans α r] :\n    WellFounded r ↔ ∀ b, WellFounded (Subrel r (r · b)) where\n  mp h _ := InvImage.wf Subtype.val h\n  mpr h := ⟨fun a ↦ ⟨_, fun b hr ↦ ((h a).apply _).of_subrel ⟨b, hr⟩⟩⟩\n"}
