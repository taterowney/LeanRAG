{"name":"MvPolynomial.transcendental_supported_polynomial_aeval_X","module":"Mathlib.RingTheory.Algebraic.MvPolynomial","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommRing R\ni : σ\ns : Set σ\nh : Not (Membership.mem s i)\nf : Polynomial R\nhf : Transcendental R f\n⊢ Transcendental (Subtype fun x => Membership.mem (MvPolynomial.supported R s) x) ((Polynomial.aeval (MvPolynomial.X i)) f)","decl":"theorem transcendental_supported_polynomial_aeval_X {i : σ} {s : Set σ} (h : i ∉ s)\n    {f : R[X]} (hf : Transcendental R f) :\n    Transcendental (supported R s) (Polynomial.aeval (X i : MvPolynomial σ R) f) := by\n  classical\n  rw [transcendental_iff_injective] at hf ⊢\n  let g := MvPolynomial.mapAlgHom (R := R) (σ := s) (Polynomial.aeval (R := R) f)\n  replace hf : Function.Injective g := MvPolynomial.map_injective _ hf\n  let u := (Subalgebra.val _).comp\n    ((optionEquivRight R s).symm |>.trans\n      (renameEquiv R (Set.subtypeInsertEquivOption h).symm) |>.trans\n      (supportedEquivMvPolynomial _).symm).toAlgHom |>.comp\n    g |>.comp\n    ((optionEquivLeft R s).symm.trans (optionEquivRight R s)).toAlgHom\n  let v := ((Polynomial.aeval (R := supported R s)\n    (Polynomial.aeval (X i : MvPolynomial σ R) f)).restrictScalars R).comp\n      (Polynomial.mapAlgEquiv (supportedEquivMvPolynomial s).symm).toAlgHom\n  replace hf : Function.Injective u := by\n    simp only [AlgEquiv.toAlgHom_eq_coe, AlgHom.coe_comp, Subalgebra.coe_val,\n      AlgHom.coe_coe, AlgEquiv.coe_trans, Function.comp_assoc, u]\n    apply Subtype.val_injective.comp\n    simp only [EquivLike.comp_injective]\n    apply hf.comp\n    simp only [EquivLike.comp_injective, EquivLike.injective]\n  have h1 : Polynomial.aeval (X i : MvPolynomial σ R) = ((Subalgebra.val _).comp\n      (supportedEquivMvPolynomial _).symm.toAlgHom |>.comp\n      (Polynomial.aeval (X ⟨i, s.mem_insert i⟩ : MvPolynomial ↑(insert i s) R))) := by\n    ext1; simp\n  have h2 : u = v := by\n    simp only [u, v, g]\n    ext1\n    · ext1\n      simp [Set.subtypeInsertEquivOption, Subalgebra.algebraMap_eq]\n    · simp [Set.subtypeInsertEquivOption, h1]\n  simpa only [h2, v, AlgEquiv.toAlgHom_eq_coe, AlgHom.coe_comp, AlgHom.coe_coe,\n    EquivLike.injective_comp, AlgHom.coe_restrictScalars'] using hf\n\n"}
{"name":"MvPolynomial.transcendental_polynomial_aeval_X","module":"Mathlib.RingTheory.Algebraic.MvPolynomial","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommRing R\ni : σ\nf : Polynomial R\nhf : Transcendental R f\n⊢ Transcendental R ((Polynomial.aeval (MvPolynomial.X i)) f)","decl":"theorem transcendental_polynomial_aeval_X (i : σ) {f : R[X]} (hf : Transcendental R f) :\n    Transcendental R (Polynomial.aeval (X i : MvPolynomial σ R) f) := by\n  have := transcendental_supported_polynomial_aeval_X R (Set.not_mem_empty i) hf\n  let g := (Algebra.botEquivOfInjective (MvPolynomial.C_injective σ R)).symm.trans\n    (Subalgebra.equivOfEq _ _ supported_empty).symm\n  rwa [Transcendental, ← isAlgebraic_ringHom_iff_of_comp_eq g (RingHom.id (MvPolynomial σ R))\n    Function.injective_id (by ext1; rfl), RingHom.id_apply, ← Transcendental]\n\n"}
{"name":"MvPolynomial.transcendental_polynomial_aeval_X_iff","module":"Mathlib.RingTheory.Algebraic.MvPolynomial","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommRing R\ni : σ\nf : Polynomial R\n⊢ Iff (Transcendental R ((Polynomial.aeval (MvPolynomial.X i)) f)) (Transcendental R f)","decl":"theorem transcendental_polynomial_aeval_X_iff (i : σ) {f : R[X]} :\n    Transcendental R (Polynomial.aeval (X i : MvPolynomial σ R) f) ↔ Transcendental R f := by\n  refine ⟨?_, transcendental_polynomial_aeval_X R i⟩\n  simp_rw [Transcendental, not_imp_not]\n  exact fun h ↦ h.algHom _\n\n"}
{"name":"MvPolynomial.transcendental_supported_polynomial_aeval_X_iff","module":"Mathlib.RingTheory.Algebraic.MvPolynomial","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝¹ : CommRing R\ninst✝ : Nontrivial R\ni : σ\ns : Set σ\nf : Polynomial R\n⊢ Iff (Transcendental (Subtype fun x => Membership.mem (MvPolynomial.supported R s) x) ((Polynomial.aeval (MvPolynomial.X i)) f)) (And (Not (Membership.mem s i)) (Transcendental R f))","decl":"theorem transcendental_supported_polynomial_aeval_X_iff\n    [Nontrivial R] {i : σ} {s : Set σ} {f : R[X]} :\n    Transcendental (supported R s) (Polynomial.aeval (X i : MvPolynomial σ R) f) ↔\n    i ∉ s ∧ Transcendental R f := by\n  refine ⟨fun h ↦ ⟨?_, ?_⟩, fun ⟨h, hf⟩ ↦ transcendental_supported_polynomial_aeval_X R h hf⟩\n  · rw [Transcendental] at h\n    contrapose! h\n    refine isAlgebraic_algebraMap (⟨Polynomial.aeval (X i) f, ?_⟩ : supported R s)\n    exact Algebra.adjoin_mono (Set.singleton_subset_iff.2 (Set.mem_image_of_mem _ h))\n      (Polynomial.aeval_mem_adjoin_singleton _ _)\n  · rw [← transcendental_polynomial_aeval_X_iff R i]\n    refine h.restrictScalars fun _ _ heq ↦ MvPolynomial.C_injective σ R ?_\n    simp_rw [← MvPolynomial.algebraMap_eq]\n    exact congr($(heq).1)\n\n"}
{"name":"MvPolynomial.transcendental_supported_X","module":"Mathlib.RingTheory.Algebraic.MvPolynomial","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommRing R\ni : σ\ns : Set σ\nh : Not (Membership.mem s i)\n⊢ Transcendental (Subtype fun x => Membership.mem (MvPolynomial.supported R s) x) (MvPolynomial.X i)","decl":"theorem transcendental_supported_X {i : σ} {s : Set σ} (h : i ∉ s) :\n    Transcendental (supported R s) (X i : MvPolynomial σ R) := by\n  simpa using transcendental_supported_polynomial_aeval_X R h (Polynomial.transcendental_X R)\n\n"}
{"name":"MvPolynomial.transcendental_X","module":"Mathlib.RingTheory.Algebraic.MvPolynomial","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommRing R\ni : σ\n⊢ Transcendental R (MvPolynomial.X i)","decl":"theorem transcendental_X (i : σ) : Transcendental R (X i : MvPolynomial σ R) := by\n  simpa using transcendental_polynomial_aeval_X R i (Polynomial.transcendental_X R)\n\n"}
{"name":"MvPolynomial.transcendental_supported_X_iff","module":"Mathlib.RingTheory.Algebraic.MvPolynomial","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝¹ : CommRing R\ninst✝ : Nontrivial R\ni : σ\ns : Set σ\n⊢ Iff (Transcendental (Subtype fun x => Membership.mem (MvPolynomial.supported R s) x) (MvPolynomial.X i)) (Not (Membership.mem s i))","decl":"theorem transcendental_supported_X_iff [Nontrivial R] {i : σ} {s : Set σ} :\n    Transcendental (supported R s) (X i : MvPolynomial σ R) ↔ i ∉ s := by\n  simpa [Polynomial.transcendental_X] using\n    transcendental_supported_polynomial_aeval_X_iff R (i := i) (s := s) (f := Polynomial.X)\n\n"}
