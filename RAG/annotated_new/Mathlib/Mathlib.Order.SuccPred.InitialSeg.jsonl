{"name":"InitialSeg.apply_covBy_apply_iff","module":"Mathlib.Order.SuccPred.InitialSeg","initialProofState":"α : Type u_1\nβ : Type u_2\na b : α\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nf : InitialSeg (fun x1 x2 => LT.lt x1 x2) fun x1 x2 => LT.lt x1 x2\n⊢ Iff (CovBy (f a) (f b)) (CovBy a b)","decl":"@[simp]\ntheorem apply_covBy_apply_iff (f : α ≤i β) : f a ⋖ f b ↔ a ⋖ b :=\n  (isLowerSet_range f).ordConnected.apply_covBy_apply_iff f.toOrderEmbedding\n\n"}
{"name":"InitialSeg.apply_wCovBy_apply_iff","module":"Mathlib.Order.SuccPred.InitialSeg","initialProofState":"α : Type u_1\nβ : Type u_2\na b : α\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nf : InitialSeg (fun x1 x2 => LT.lt x1 x2) fun x1 x2 => LT.lt x1 x2\n⊢ Iff (WCovBy (f a) (f b)) (WCovBy a b)","decl":"@[simp]\ntheorem apply_wCovBy_apply_iff (f : α ≤i β) : f a ⩿ f b ↔ a ⩿ b := by\n  simp [wcovBy_iff_eq_or_covBy]\n\n"}
{"name":"InitialSeg.map_succ","module":"Mathlib.Order.SuccPred.InitialSeg","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : PartialOrder α\ninst✝³ : PartialOrder β\ninst✝² : SuccOrder α\ninst✝¹ : NoMaxOrder α\ninst✝ : SuccOrder β\nf : InitialSeg (fun x1 x2 => LT.lt x1 x2) fun x1 x2 => LT.lt x1 x2\na : α\n⊢ Eq (f (Order.succ a)) (Order.succ (f a))","decl":"theorem map_succ [SuccOrder α] [NoMaxOrder α] [SuccOrder β] (f : α ≤i β) (a : α) :\n    f (succ a) = succ (f a) :=\n  (f.apply_covBy_apply_iff.2 (covBy_succ a)).succ_eq.symm\n\n"}
{"name":"InitialSeg.map_pred","module":"Mathlib.Order.SuccPred.InitialSeg","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : PartialOrder α\ninst✝³ : PartialOrder β\ninst✝² : PredOrder α\ninst✝¹ : NoMinOrder α\ninst✝ : PredOrder β\nf : InitialSeg (fun x1 x2 => LT.lt x1 x2) fun x1 x2 => LT.lt x1 x2\na : α\n⊢ Eq (f (Order.pred a)) (Order.pred (f a))","decl":"theorem map_pred [PredOrder α] [NoMinOrder α] [PredOrder β] (f : α ≤i β) (a : α) :\n    f (pred a) = pred (f a) :=\n  (f.apply_covBy_apply_iff.2 (pred_covBy a)).pred_eq.symm\n\n"}
{"name":"InitialSeg.isSuccPrelimit_apply_iff","module":"Mathlib.Order.SuccPred.InitialSeg","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nf : InitialSeg (fun x1 x2 => LT.lt x1 x2) fun x1 x2 => LT.lt x1 x2\n⊢ Iff (Order.IsSuccPrelimit (f a)) (Order.IsSuccPrelimit a)","decl":"@[simp]\ntheorem isSuccPrelimit_apply_iff (f : α ≤i β) : IsSuccPrelimit (f a) ↔ IsSuccPrelimit a := by\n  constructor <;> intro h b hb\n  · rw [← f.apply_covBy_apply_iff] at hb\n    exact h _ hb\n  · obtain ⟨c, rfl⟩ := f.mem_range_of_rel hb.lt\n    rw [f.apply_covBy_apply_iff] at hb\n    exact h _ hb\n\n"}
{"name":"InitialSeg.isSuccLimit_apply_iff","module":"Mathlib.Order.SuccPred.InitialSeg","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nf : InitialSeg (fun x1 x2 => LT.lt x1 x2) fun x1 x2 => LT.lt x1 x2\n⊢ Iff (Order.IsSuccLimit (f a)) (Order.IsSuccLimit a)","decl":"@[simp]\ntheorem isSuccLimit_apply_iff (f : α ≤i β) : IsSuccLimit (f a) ↔ IsSuccLimit a := by\n  simp [IsSuccLimit]\n\n"}
{"name":"PrincipalSeg.apply_covBy_apply_iff","module":"Mathlib.Order.SuccPred.InitialSeg","initialProofState":"α : Type u_1\nβ : Type u_2\na b : α\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nf : PrincipalSeg (fun x1 x2 => LT.lt x1 x2) fun x1 x2 => LT.lt x1 x2\n⊢ Iff (CovBy (f.toRelEmbedding a) (f.toRelEmbedding b)) (CovBy a b)","decl":"@[simp]\ntheorem apply_covBy_apply_iff (f : α <i β) : f a ⋖ f b ↔ a ⋖ b :=\n  (f : α ≤i β).apply_covBy_apply_iff\n\n"}
{"name":"PrincipalSeg.apply_wCovBy_apply_iff","module":"Mathlib.Order.SuccPred.InitialSeg","initialProofState":"α : Type u_1\nβ : Type u_2\na b : α\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nf : PrincipalSeg (fun x1 x2 => LT.lt x1 x2) fun x1 x2 => LT.lt x1 x2\n⊢ Iff (WCovBy (f.toRelEmbedding a) (f.toRelEmbedding b)) (WCovBy a b)","decl":"@[simp]\ntheorem apply_wCovBy_apply_iff (f : α <i β) : f a ⩿ f b ↔ a ⩿ b :=\n  (f : α ≤i β).apply_wCovBy_apply_iff\n\n"}
{"name":"PrincipalSeg.map_succ","module":"Mathlib.Order.SuccPred.InitialSeg","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : PartialOrder α\ninst✝³ : PartialOrder β\ninst✝² : SuccOrder α\ninst✝¹ : NoMaxOrder α\ninst✝ : SuccOrder β\nf : PrincipalSeg (fun x1 x2 => LT.lt x1 x2) fun x1 x2 => LT.lt x1 x2\na : α\n⊢ Eq (f.toRelEmbedding (Order.succ a)) (Order.succ (f.toRelEmbedding a))","decl":"theorem map_succ [SuccOrder α] [NoMaxOrder α] [SuccOrder β] (f : α <i β) (a : α) :\n    f (succ a) = succ (f a) :=\n  (f : α ≤i β).map_succ a\n\n"}
{"name":"PrincipalSeg.map_pred","module":"Mathlib.Order.SuccPred.InitialSeg","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : PartialOrder α\ninst✝³ : PartialOrder β\ninst✝² : PredOrder α\ninst✝¹ : NoMinOrder α\ninst✝ : PredOrder β\nf : InitialSeg (fun x1 x2 => LT.lt x1 x2) fun x1 x2 => LT.lt x1 x2\na : α\n⊢ Eq (f (Order.pred a)) (Order.pred (f a))","decl":"theorem map_pred [PredOrder α] [NoMinOrder α] [PredOrder β] (f : α ≤i β) (a : α) :\n    f (pred a) = pred (f a) :=\n  (f : α ≤i β).map_pred a\n\n"}
{"name":"PrincipalSeg.isSuccPrelimit_apply_iff","module":"Mathlib.Order.SuccPred.InitialSeg","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nf : PrincipalSeg (fun x1 x2 => LT.lt x1 x2) fun x1 x2 => LT.lt x1 x2\n⊢ Iff (Order.IsSuccPrelimit (f.toRelEmbedding a)) (Order.IsSuccPrelimit a)","decl":"@[simp]\ntheorem isSuccPrelimit_apply_iff (f : α <i β) : IsSuccPrelimit (f a) ↔ IsSuccPrelimit a :=\n  (f : α ≤i β).isSuccPrelimit_apply_iff\n\n"}
{"name":"PrincipalSeg.isSuccLimit_apply_iff","module":"Mathlib.Order.SuccPred.InitialSeg","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nf : PrincipalSeg (fun x1 x2 => LT.lt x1 x2) fun x1 x2 => LT.lt x1 x2\n⊢ Iff (Order.IsSuccLimit (f.toRelEmbedding a)) (Order.IsSuccLimit a)","decl":"@[simp]\ntheorem isSuccLimit_apply_iff (f : α <i β) : IsSuccLimit (f a) ↔ IsSuccLimit a :=\n  (f : α ≤i β).isSuccLimit_apply_iff\n\n"}
