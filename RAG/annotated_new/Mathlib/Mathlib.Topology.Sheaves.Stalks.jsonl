{"name":"TopCat.Presheaf.stalkFunctor_obj","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nℱ : TopCat.Presheaf C X\nx : ↑X\n⊢ Eq ((TopCat.Presheaf.stalkFunctor C x).obj ℱ) (ℱ.stalk x)","decl":"@[simp]\ntheorem stalkFunctor_obj (ℱ : X.Presheaf C) (x : X) : (stalkFunctor C x).obj ℱ = ℱ.stalk x :=\n  rfl\n\n"}
{"name":"TopCat.Presheaf.germ_res_assoc","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF : TopCat.Presheaf C X\nU V : TopologicalSpace.Opens ↑X\ni : Quiver.Hom U V\nx : ↑X\nhx : Membership.mem U x\nZ : C\nh : Quiver.Hom (F.stalk x) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (F.map i.op) (CategoryTheory.CategoryStruct.comp (F.germ U x hx) h)) (CategoryTheory.CategoryStruct.comp (F.germ V x ⋯) h)","decl":"@[reassoc]\ntheorem germ_res (F : X.Presheaf C) {U V : Opens X} (i : U ⟶ V) (x : X) (hx : x ∈ U) :\n    F.map i.op ≫ F.germ U x hx = F.germ V x (i.le hx) :=\n  let i' : (⟨U, hx⟩ : OpenNhds x) ⟶ ⟨V, i.le hx⟩ := i\n  colimit.w ((OpenNhds.inclusion x).op ⋙ F) i'.op\n\n"}
{"name":"TopCat.Presheaf.germ_res","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF : TopCat.Presheaf C X\nU V : TopologicalSpace.Opens ↑X\ni : Quiver.Hom U V\nx : ↑X\nhx : Membership.mem U x\n⊢ Eq (CategoryTheory.CategoryStruct.comp (F.map i.op) (F.germ U x hx)) (F.germ V x ⋯)","decl":"@[reassoc]\ntheorem germ_res (F : X.Presheaf C) {U V : Opens X} (i : U ⟶ V) (x : X) (hx : x ∈ U) :\n    F.map i.op ≫ F.germ U x hx = F.germ V x (i.le hx) :=\n  let i' : (⟨U, hx⟩ : OpenNhds x) ⟶ ⟨V, i.le hx⟩ := i\n  colimit.w ((OpenNhds.inclusion x).op ⋙ F) i'.op\n\n"}
{"name":"TopCat.Presheaf.germ_res'_assoc","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF : TopCat.Presheaf C X\nU V : TopologicalSpace.Opens ↑X\ni : Quiver.Hom { unop := V } { unop := U }\nx : ↑X\nhx : Membership.mem U x\nZ : C\nh : Quiver.Hom (F.stalk x) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (F.map i) (CategoryTheory.CategoryStruct.comp (F.germ U x hx) h)) (CategoryTheory.CategoryStruct.comp (F.germ V x ⋯) h)","decl":"/-- A variant of `germ_res` with `op V ⟶ op U`\nso that the LHS is more general and simp fires more easier. -/\n@[reassoc (attr := simp)]\ntheorem germ_res' (F : X.Presheaf C) {U V : Opens X} (i : op V ⟶ op U) (x : X) (hx : x ∈ U) :\n    F.map i ≫ F.germ U x hx = F.germ V x (i.unop.le hx) :=\n  let i' : (⟨U, hx⟩ : OpenNhds x) ⟶ ⟨V, i.unop.le hx⟩ := i.unop\n  colimit.w ((OpenNhds.inclusion x).op ⋙ F) i'.op\n\n"}
{"name":"TopCat.Presheaf.germ_res'","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF : TopCat.Presheaf C X\nU V : TopologicalSpace.Opens ↑X\ni : Quiver.Hom { unop := V } { unop := U }\nx : ↑X\nhx : Membership.mem U x\n⊢ Eq (CategoryTheory.CategoryStruct.comp (F.map i) (F.germ U x hx)) (F.germ V x ⋯)","decl":"/-- A variant of `germ_res` with `op V ⟶ op U`\nso that the LHS is more general and simp fires more easier. -/\n@[reassoc (attr := simp)]\ntheorem germ_res' (F : X.Presheaf C) {U V : Opens X} (i : op V ⟶ op U) (x : X) (hx : x ∈ U) :\n    F.map i ≫ F.germ U x hx = F.germ V x (i.unop.le hx) :=\n  let i' : (⟨U, hx⟩ : OpenNhds x) ⟶ ⟨V, i.unop.le hx⟩ := i.unop\n  colimit.w ((OpenNhds.inclusion x).op ⋙ F) i'.op\n\n"}
{"name":"TopCat.Presheaf.map_germ_eq_Γgerm","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF : TopCat.Presheaf C X\nU : TopologicalSpace.Opens ↑X\ni : Quiver.Hom U Top.top\nx : ↑X\nhx : Membership.mem U x\n⊢ Eq (CategoryTheory.CategoryStruct.comp (F.map i.op) (F.germ U x hx)) (F.Γgerm x)","decl":"@[reassoc]\nlemma map_germ_eq_Γgerm (F : X.Presheaf C) {U : Opens X} {i : U ⟶ ⊤} (x : X) (hx : x ∈ U) :\n    F.map i.op ≫ F.germ U x hx = F.Γgerm x :=\n  germ_res F i x hx\n\n"}
{"name":"TopCat.Presheaf.map_germ_eq_Γgerm_assoc","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF : TopCat.Presheaf C X\nU : TopologicalSpace.Opens ↑X\ni : Quiver.Hom U Top.top\nx : ↑X\nhx : Membership.mem U x\nZ : C\nh : Quiver.Hom (F.stalk x) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (F.map i.op) (CategoryTheory.CategoryStruct.comp (F.germ U x hx) h)) (CategoryTheory.CategoryStruct.comp (F.Γgerm x) h)","decl":"@[reassoc]\nlemma map_germ_eq_Γgerm (F : X.Presheaf C) {U : Opens X} {i : U ⟶ ⊤} (x : X) (hx : x ∈ U) :\n    F.map i.op ≫ F.germ U x hx = F.Γgerm x :=\n  germ_res F i x hx\n\n"}
{"name":"TopCat.Presheaf.germ_res_apply","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝² : CategoryTheory.Category.{v, u} C\ninst✝¹ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF : TopCat.Presheaf C X\nU V : TopologicalSpace.Opens ↑X\ni : Quiver.Hom U V\nx : ↑X\nhx : Membership.mem U x\ninst✝ : CategoryTheory.HasForget C\ns : (CategoryTheory.forget C).obj (F.obj { unop := V })\n⊢ Eq ((F.germ U x hx) ((F.map i.op) s)) ((F.germ V x ⋯) s)","decl":"attribute [local instance] HasForget.instFunLike in\ntheorem germ_res_apply (F : X.Presheaf C)\n    {U V : Opens X} (i : U ⟶ V) (x : X) (hx : x ∈ U) [HasForget C] (s) :\n    F.germ U x hx (F.map i.op s) = F.germ V x (i.le hx) s := by\n  rw [← CategoryTheory.comp_apply, germ_res]\n\n"}
{"name":"TopCat.Presheaf.germ_res_apply'","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝² : CategoryTheory.Category.{v, u} C\ninst✝¹ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF : TopCat.Presheaf C X\nU V : TopologicalSpace.Opens ↑X\ni : Quiver.Hom { unop := V } { unop := U }\nx : ↑X\nhx : Membership.mem U x\ninst✝ : CategoryTheory.HasForget C\ns : (CategoryTheory.forget C).obj (F.obj { unop := V })\n⊢ Eq ((F.germ U x hx) ((F.map i) s)) ((F.germ V x ⋯) s)","decl":"attribute [local instance] HasForget.instFunLike in\ntheorem germ_res_apply' (F : X.Presheaf C)\n    {U V : Opens X} (i : op V ⟶ op U) (x : X) (hx : x ∈ U) [HasForget C] (s) :\n    F.germ U x hx (F.map i s) = F.germ V x (i.unop.le hx) s := by\n  rw [← CategoryTheory.comp_apply, germ_res']\n\n"}
{"name":"TopCat.Presheaf.Γgerm_res_apply","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝² : CategoryTheory.Category.{v, u} C\ninst✝¹ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF : TopCat.Presheaf C X\nU : TopologicalSpace.Opens ↑X\ni : Quiver.Hom U Top.top\nx : ↑X\nhx : Membership.mem U x\ninst✝ : CategoryTheory.HasForget C\ns : (CategoryTheory.forget C).obj (F.obj { unop := Top.top })\n⊢ Eq ((F.germ U x hx) ((F.map i.op) s)) ((F.Γgerm x) s)","decl":"attribute [local instance] HasForget.instFunLike in\nlemma Γgerm_res_apply (F : X.Presheaf C)\n    {U : Opens X} {i : U ⟶ ⊤} (x : X) (hx : x ∈ U) [HasForget C] (s) :\n  F.germ U x hx (F.map i.op s) = F.Γgerm x s := F.germ_res_apply i x hx s\n\n"}
{"name":"TopCat.Presheaf.stalk_hom_ext_iff","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF : TopCat.Presheaf C X\nx : ↑X\nY : C\nf₁ f₂ : Quiver.Hom (F.stalk x) Y\n⊢ Iff (Eq f₁ f₂) (∀ (U : TopologicalSpace.Opens ↑X) (hxU : Membership.mem U x), Eq (CategoryTheory.CategoryStruct.comp (F.germ U x hxU) f₁) (CategoryTheory.CategoryStruct.comp (F.germ U x hxU) f₂))","decl":"/-- A morphism from the stalk of `F` at `x` to some object `Y` is completely determined by its\ncomposition with the `germ` morphisms.\n-/\n@[ext]\ntheorem stalk_hom_ext (F : X.Presheaf C) {x} {Y : C} {f₁ f₂ : F.stalk x ⟶ Y}\n    (ih : ∀ (U : Opens X) (hxU : x ∈ U), F.germ U x hxU ≫ f₁ = F.germ U x hxU ≫ f₂) : f₁ = f₂ :=\n  colimit.hom_ext fun U => by\n    induction' U using Opposite.rec with U; cases' U with U hxU; exact ih U hxU\n\n"}
{"name":"TopCat.Presheaf.stalk_hom_ext","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF : TopCat.Presheaf C X\nx : ↑X\nY : C\nf₁ f₂ : Quiver.Hom (F.stalk x) Y\nih : ∀ (U : TopologicalSpace.Opens ↑X) (hxU : Membership.mem U x), Eq (CategoryTheory.CategoryStruct.comp (F.germ U x hxU) f₁) (CategoryTheory.CategoryStruct.comp (F.germ U x hxU) f₂)\n⊢ Eq f₁ f₂","decl":"/-- A morphism from the stalk of `F` at `x` to some object `Y` is completely determined by its\ncomposition with the `germ` morphisms.\n-/\n@[ext]\ntheorem stalk_hom_ext (F : X.Presheaf C) {x} {Y : C} {f₁ f₂ : F.stalk x ⟶ Y}\n    (ih : ∀ (U : Opens X) (hxU : x ∈ U), F.germ U x hxU ≫ f₁ = F.germ U x hxU ≫ f₂) : f₁ = f₂ :=\n  colimit.hom_ext fun U => by\n    induction' U using Opposite.rec with U; cases' U with U hxU; exact ih U hxU\n\n"}
{"name":"TopCat.Presheaf.stalkFunctor_map_germ_assoc","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF G : TopCat.Presheaf C X\nU : TopologicalSpace.Opens ↑X\nx : ↑X\nhx : Membership.mem U x\nf : Quiver.Hom F G\nZ : C\nh : Quiver.Hom ((TopCat.Presheaf.stalkFunctor C x).obj G) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (F.germ U x hx) (CategoryTheory.CategoryStruct.comp ((TopCat.Presheaf.stalkFunctor C x).map f) h)) (CategoryTheory.CategoryStruct.comp (f.app { unop := U }) (CategoryTheory.CategoryStruct.comp (G.germ U x hx) h))","decl":"@[reassoc (attr := simp)]\ntheorem stalkFunctor_map_germ {F G : X.Presheaf C} (U : Opens X) (x : X) (hx : x ∈ U) (f : F ⟶ G) :\n    F.germ U x hx ≫ (stalkFunctor C x).map f = f.app (op U) ≫ G.germ U x hx :=\n  colimit.ι_map (whiskerLeft (OpenNhds.inclusion x).op f) (op ⟨U, hx⟩)\n\n"}
{"name":"TopCat.Presheaf.stalkFunctor_map_germ","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF G : TopCat.Presheaf C X\nU : TopologicalSpace.Opens ↑X\nx : ↑X\nhx : Membership.mem U x\nf : Quiver.Hom F G\n⊢ Eq (CategoryTheory.CategoryStruct.comp (F.germ U x hx) ((TopCat.Presheaf.stalkFunctor C x).map f)) (CategoryTheory.CategoryStruct.comp (f.app { unop := U }) (G.germ U x hx))","decl":"@[reassoc (attr := simp)]\ntheorem stalkFunctor_map_germ {F G : X.Presheaf C} (U : Opens X) (x : X) (hx : x ∈ U) (f : F ⟶ G) :\n    F.germ U x hx ≫ (stalkFunctor C x).map f = f.app (op U) ≫ G.germ U x hx :=\n  colimit.ι_map (whiskerLeft (OpenNhds.inclusion x).op f) (op ⟨U, hx⟩)\n\n"}
{"name":"TopCat.Presheaf.stalkFunctor_map_germ_apply","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝² : CategoryTheory.Category.{v, u} C\ninst✝¹ : CategoryTheory.Limits.HasColimits C\nX : TopCat\ninst✝ : CategoryTheory.HasForget C\nF G : TopCat.Presheaf C X\nU : TopologicalSpace.Opens ↑X\nx : ↑X\nhx : Membership.mem U x\nf : Quiver.Hom F G\ns : (CategoryTheory.forget C).obj (F.obj { unop := U })\n⊢ Eq (((TopCat.Presheaf.stalkFunctor C x).map f) ((F.germ U x hx) s)) ((G.germ U x hx) ((f.app { unop := U }) s))","decl":"attribute [local instance] HasForget.instFunLike in\ntheorem stalkFunctor_map_germ_apply [HasForget C]\n    {F G : X.Presheaf C} (U : Opens X) (x : X) (hx : x ∈ U) (f : F ⟶ G) (s) :\n    (stalkFunctor C x).map f (F.germ U x hx s) = G.germ U x hx (f.app (op U) s) := by\n  rw [← CategoryTheory.comp_apply, ← stalkFunctor_map_germ]\n  exact (CategoryTheory.comp_apply _ _ _).symm\n\n-- a variant of `stalkFunctor_map_germ_apply` that makes simpNF happy.\n"}
{"name":"TopCat.Presheaf.stalkFunctor_map_germ_apply'","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝² : CategoryTheory.Category.{v, u} C\ninst✝¹ : CategoryTheory.Limits.HasColimits C\nX : TopCat\ninst✝ : CategoryTheory.HasForget C\nF G : TopCat.Presheaf C X\nU : TopologicalSpace.Opens ↑X\nx : ↑X\nhx : Membership.mem U x\nf : Quiver.Hom F G\ns : (CategoryTheory.forget C).obj (F.obj { unop := U })\n⊢ Eq (((TopCat.Presheaf.stalkFunctor C x).map f) ((F.germ U x hx) s)) ((G.germ U x hx) ((f.app { unop := U }) s))","decl":"attribute [local instance] HasForget.instFunLike in\n@[simp]\ntheorem stalkFunctor_map_germ_apply' [HasForget C]\n    {F G : X.Presheaf C} (U : Opens X) (x : X) (hx : x ∈ U) (f : F ⟶ G) (s) :\n    DFunLike.coe (F := F.stalk x ⟶ G.stalk x) ((stalkFunctor C x).map f) (F.germ U x hx s) =\n      G.germ U x hx (f.app (op U) s) :=\n  stalkFunctor_map_germ_apply U x hx f s\n\n"}
{"name":"TopCat.Presheaf.stalkPushforward_germ","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX Y : TopCat\nf : Quiver.Hom X Y\nF : TopCat.Presheaf C X\nU : TopologicalSpace.Opens ↑Y\nx : ↑X\nhx : Membership.mem U (f x)\n⊢ Eq (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pushforward C f).obj F).germ U (f x) hx) (TopCat.Presheaf.stalkPushforward C f F x)) (F.germ ((TopologicalSpace.Opens.map f).obj U) x hx)","decl":"@[reassoc (attr := simp), elementwise (attr := simp)]\ntheorem stalkPushforward_germ (f : X ⟶ Y) (F : X.Presheaf C) (U : Opens Y)\n    (x : X) (hx : f x ∈ U) :\n      (f _* F).germ U (f x) hx ≫ F.stalkPushforward C f x = F.germ ((Opens.map f).obj U) x hx := by\n  simp [germ, stalkPushforward]\n\n-- Here are two other potential solutions, suggested by @fpvandoorn at\n-- <https://github.com/leanprover-community/mathlib/pull/1018#discussion_r283978240>\n-- However, I can't get the subsequent two proofs to work with either one.\n-- def stalkPushforward'' (f : X ⟶ Y) (ℱ : X.Presheaf C) (x : X) :\n--   (f _* ℱ).stalk (f x) ⟶ ℱ.stalk x :=\n-- colim.map ((Functor.associator _ _ _).inv ≫\n--   whiskerRight (NatTrans.op (OpenNhds.inclusionMapIso f x).inv) ℱ) ≫\n-- colimit.pre ((OpenNhds.inclusion x).op ⋙ ℱ) (OpenNhds.map f x).op\n-- def stalkPushforward''' (f : X ⟶ Y) (ℱ : X.Presheaf C) (x : X) :\n--   (f _* ℱ).stalk (f x) ⟶ ℱ.stalk x :=\n-- (colim.map (whiskerRight (NatTrans.op (OpenNhds.inclusionMapIso f x).inv) ℱ) :\n--   colim.obj ((OpenNhds.inclusion (f x) ⋙ Opens.map f).op ⋙ ℱ) ⟶ _) ≫\n-- colimit.pre ((OpenNhds.inclusion x).op ⋙ ℱ) (OpenNhds.map f x).op\n\n"}
{"name":"TopCat.Presheaf.stalkPushforward_germ_apply","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX Y : TopCat\nf : Quiver.Hom X Y\nF : TopCat.Presheaf C X\nU : TopologicalSpace.Opens ↑Y\nx✝ : ↑X\nhx : Membership.mem U (f x✝)\ninst : CategoryTheory.HasForget C\nx : (CategoryTheory.forget C).obj (((TopCat.Presheaf.pushforward C f).obj F).obj { unop := U })\n⊢ Eq ((TopCat.Presheaf.stalkPushforward C f F x✝) ((((TopCat.Presheaf.pushforward C f).obj F).germ U (f x✝) hx) x)) ((F.germ ((TopologicalSpace.Opens.map f).obj U) x✝ hx) x)","decl":"@[reassoc (attr := simp), elementwise (attr := simp)]\ntheorem stalkPushforward_germ (f : X ⟶ Y) (F : X.Presheaf C) (U : Opens Y)\n    (x : X) (hx : f x ∈ U) :\n      (f _* F).germ U (f x) hx ≫ F.stalkPushforward C f x = F.germ ((Opens.map f).obj U) x hx := by\n  simp [germ, stalkPushforward]\n\n-- Here are two other potential solutions, suggested by @fpvandoorn at\n-- <https://github.com/leanprover-community/mathlib/pull/1018#discussion_r283978240>\n-- However, I can't get the subsequent two proofs to work with either one.\n-- def stalkPushforward'' (f : X ⟶ Y) (ℱ : X.Presheaf C) (x : X) :\n--   (f _* ℱ).stalk (f x) ⟶ ℱ.stalk x :=\n-- colim.map ((Functor.associator _ _ _).inv ≫\n--   whiskerRight (NatTrans.op (OpenNhds.inclusionMapIso f x).inv) ℱ) ≫\n-- colimit.pre ((OpenNhds.inclusion x).op ⋙ ℱ) (OpenNhds.map f x).op\n-- def stalkPushforward''' (f : X ⟶ Y) (ℱ : X.Presheaf C) (x : X) :\n--   (f _* ℱ).stalk (f x) ⟶ ℱ.stalk x :=\n-- (colim.map (whiskerRight (NatTrans.op (OpenNhds.inclusionMapIso f x).inv) ℱ) :\n--   colim.obj ((OpenNhds.inclusion (f x) ⋙ Opens.map f).op ⋙ ℱ) ⟶ _) ≫\n-- colimit.pre ((OpenNhds.inclusion x).op ⋙ ℱ) (OpenNhds.map f x).op\n\n"}
{"name":"TopCat.Presheaf.stalkPushforward_germ_assoc","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX Y : TopCat\nf : Quiver.Hom X Y\nF : TopCat.Presheaf C X\nU : TopologicalSpace.Opens ↑Y\nx : ↑X\nhx : Membership.mem U (f x)\nZ : C\nh : Quiver.Hom (F.stalk x) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pushforward C f).obj F).germ U (f x) hx) (CategoryTheory.CategoryStruct.comp (TopCat.Presheaf.stalkPushforward C f F x) h)) (CategoryTheory.CategoryStruct.comp (F.germ ((TopologicalSpace.Opens.map f).obj U) x hx) h)","decl":"@[reassoc (attr := simp), elementwise (attr := simp)]\ntheorem stalkPushforward_germ (f : X ⟶ Y) (F : X.Presheaf C) (U : Opens Y)\n    (x : X) (hx : f x ∈ U) :\n      (f _* F).germ U (f x) hx ≫ F.stalkPushforward C f x = F.germ ((Opens.map f).obj U) x hx := by\n  simp [germ, stalkPushforward]\n\n-- Here are two other potential solutions, suggested by @fpvandoorn at\n-- <https://github.com/leanprover-community/mathlib/pull/1018#discussion_r283978240>\n-- However, I can't get the subsequent two proofs to work with either one.\n-- def stalkPushforward'' (f : X ⟶ Y) (ℱ : X.Presheaf C) (x : X) :\n--   (f _* ℱ).stalk (f x) ⟶ ℱ.stalk x :=\n-- colim.map ((Functor.associator _ _ _).inv ≫\n--   whiskerRight (NatTrans.op (OpenNhds.inclusionMapIso f x).inv) ℱ) ≫\n-- colimit.pre ((OpenNhds.inclusion x).op ⋙ ℱ) (OpenNhds.map f x).op\n-- def stalkPushforward''' (f : X ⟶ Y) (ℱ : X.Presheaf C) (x : X) :\n--   (f _* ℱ).stalk (f x) ⟶ ℱ.stalk x :=\n-- (colim.map (whiskerRight (NatTrans.op (OpenNhds.inclusionMapIso f x).inv) ℱ) :\n--   colim.obj ((OpenNhds.inclusion (f x) ⋙ Opens.map f).op ⋙ ℱ) ⟶ _) ≫\n-- colimit.pre ((OpenNhds.inclusion x).op ⋙ ℱ) (OpenNhds.map f x).op\n\n"}
{"name":"TopCat.Presheaf.stalkPushforward.id","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nℱ : TopCat.Presheaf C X\nx : ↑X\n⊢ Eq (TopCat.Presheaf.stalkPushforward C (CategoryTheory.CategoryStruct.id X) ℱ x) ((TopCat.Presheaf.stalkFunctor C x).map (TopCat.Presheaf.Pushforward.id ℱ).hom)","decl":"@[simp]\ntheorem id (ℱ : X.Presheaf C) (x : X) :\n    ℱ.stalkPushforward C (𝟙 X) x = (stalkFunctor C x).map (Pushforward.id ℱ).hom := by\n  ext\n  simp only [stalkPushforward, germ, colim_map, ι_colimMap_assoc, whiskerRight_app]\n  erw [CategoryTheory.Functor.map_id]\n  simp [stalkFunctor]\n\n"}
{"name":"TopCat.Presheaf.stalkPushforward.comp","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX Y Z : TopCat\nℱ : TopCat.Presheaf C X\nf : Quiver.Hom X Y\ng : Quiver.Hom Y Z\nx : ↑X\n⊢ Eq (TopCat.Presheaf.stalkPushforward C (CategoryTheory.CategoryStruct.comp f g) ℱ x) (CategoryTheory.CategoryStruct.comp (TopCat.Presheaf.stalkPushforward C g ((TopCat.Presheaf.pushforward C f).obj ℱ) (f x)) (TopCat.Presheaf.stalkPushforward C f ℱ x))","decl":"@[simp]\ntheorem comp (ℱ : X.Presheaf C) (f : X ⟶ Y) (g : Y ⟶ Z) (x : X) :\n    ℱ.stalkPushforward C (f ≫ g) x =\n      (f _* ℱ).stalkPushforward C g (f x) ≫ ℱ.stalkPushforward C f x := by\n  ext\n  simp [germ, stalkPushforward]\n\n"}
{"name":"TopCat.Presheaf.stalkPushforward.stalkPushforward_iso_of_isInducing","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX Y : TopCat\nf : Quiver.Hom X Y\nhf : Topology.IsInducing ⇑f\nF : TopCat.Presheaf C X\nx : ↑X\n⊢ CategoryTheory.IsIso (TopCat.Presheaf.stalkPushforward C f F x)","decl":"theorem stalkPushforward_iso_of_isInducing {f : X ⟶ Y} (hf : IsInducing f)\n    (F : X.Presheaf C) (x : X) : IsIso (F.stalkPushforward _ f x) := by\n  haveI := Functor.initial_of_adjunction (hf.adjunctionNhds x)\n  convert (Functor.Final.colimitIso (OpenNhds.map f x).op ((OpenNhds.inclusion x).op ⋙ F)).isIso_hom\n  refine stalk_hom_ext _ fun U hU ↦ (stalkPushforward_germ _ f F _ x hU).trans ?_\n  symm\n  exact colimit.ι_pre ((OpenNhds.inclusion x).op ⋙ F) (OpenNhds.map f x).op _\n\n"}
{"name":"TopCat.Presheaf.stalkPushforward.stalkPushforward_iso_of_isOpenEmbedding","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX Y : TopCat\nf : Quiver.Hom X Y\nhf : Topology.IsInducing ⇑f\nF : TopCat.Presheaf C X\nx : ↑X\n⊢ CategoryTheory.IsIso (TopCat.Presheaf.stalkPushforward C f F x)","decl":"@[deprecated (since := \"2024-10-27\")]\nalias stalkPushforward_iso_of_isOpenEmbedding := stalkPushforward_iso_of_isInducing\n"}
{"name":"TopCat.Presheaf.stalkPushforward.stalkPushforward_iso_of_openEmbedding","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX Y : TopCat\nf : Quiver.Hom X Y\nhf : Topology.IsInducing ⇑f\nF : TopCat.Presheaf C X\nx : ↑X\n⊢ CategoryTheory.IsIso (TopCat.Presheaf.stalkPushforward C f F x)","decl":"@[deprecated (since := \"2024-10-18\")]\nalias stalkPushforward_iso_of_openEmbedding := stalkPushforward_iso_of_isInducing\n\n"}
{"name":"TopCat.Presheaf.germ_stalkPullbackHom_assoc","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX Y : TopCat\nf : Quiver.Hom X Y\nF : TopCat.Presheaf C Y\nx : ↑X\nU : TopologicalSpace.Opens ↑Y\nhU : Membership.mem U (f x)\nZ : C\nh : Quiver.Hom (((TopCat.Presheaf.pullback C f).obj F).stalk x) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (F.germ U (f x) hU) (CategoryTheory.CategoryStruct.comp (TopCat.Presheaf.stalkPullbackHom C f F x) h)) (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pushforwardPullbackAdjunction C f).unit.app F).app { unop := U }) (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pullback C f).obj F).germ ((TopologicalSpace.Opens.map f).obj U) x hU) h))","decl":"@[reassoc (attr := simp)]\nlemma germ_stalkPullbackHom\n    (f : X ⟶ Y) (F : Y.Presheaf C) (x : X) (U : Opens Y) (hU : f x ∈ U) :\n    F.germ U (f x) hU ≫ stalkPullbackHom C f F x =\n      ((pushforwardPullbackAdjunction C f).unit.app F).app _ ≫\n        ((pullback C f).obj F).germ ((Opens.map f).obj U) x hU := by\n  simp [stalkPullbackHom, germ, stalkFunctor, stalkPushforward]\n\n"}
{"name":"TopCat.Presheaf.germ_stalkPullbackHom","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX Y : TopCat\nf : Quiver.Hom X Y\nF : TopCat.Presheaf C Y\nx : ↑X\nU : TopologicalSpace.Opens ↑Y\nhU : Membership.mem U (f x)\n⊢ Eq (CategoryTheory.CategoryStruct.comp (F.germ U (f x) hU) (TopCat.Presheaf.stalkPullbackHom C f F x)) (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pushforwardPullbackAdjunction C f).unit.app F).app { unop := U }) (((TopCat.Presheaf.pullback C f).obj F).germ ((TopologicalSpace.Opens.map f).obj U) x hU))","decl":"@[reassoc (attr := simp)]\nlemma germ_stalkPullbackHom\n    (f : X ⟶ Y) (F : Y.Presheaf C) (x : X) (U : Opens Y) (hU : f x ∈ U) :\n    F.germ U (f x) hU ≫ stalkPullbackHom C f F x =\n      ((pushforwardPullbackAdjunction C f).unit.app F).app _ ≫\n        ((pullback C f).obj F).germ ((Opens.map f).obj U) x hU := by\n  simp [stalkPullbackHom, germ, stalkFunctor, stalkPushforward]\n\n"}
{"name":"TopCat.Presheaf.pullback_obj_obj_ext","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX Y : TopCat\nZ : C\nf : Quiver.Hom X Y\nF : TopCat.Presheaf C Y\nU : Opposite (TopologicalSpace.Opens ↑X)\nφ ψ : Quiver.Hom (((TopCat.Presheaf.pullback C f).obj F).obj U) Z\nh : ∀ (V : TopologicalSpace.Opens ↑Y) (hV : LE.le (Opposite.unop U) ((TopologicalSpace.Opens.map f).obj V)), Eq (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pushforwardPullbackAdjunction C f).unit.app F).app { unop := V }) (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pullback C f).obj F).map (CategoryTheory.homOfLE hV).op) φ)) (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pushforwardPullbackAdjunction C f).unit.app F).app { unop := V }) (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pullback C f).obj F).map (CategoryTheory.homOfLE hV).op) ψ))\n⊢ Eq φ ψ","decl":"variable {C} in\n@[ext]\nlemma pullback_obj_obj_ext {Z : C} {f : X ⟶ Y} {F : Y.Presheaf C} (U : (Opens X)ᵒᵖ)\n    {φ ψ : ((pullback C f).obj F).obj U ⟶ Z}\n    (h : ∀ (V : Opens Y) (hV : U.unop ≤ (Opens.map f).obj V),\n      ((pushforwardPullbackAdjunction C f).unit.app F).app (op V) ≫\n        ((pullback C f).obj F).map (homOfLE hV).op ≫ φ =\n      ((pushforwardPullbackAdjunction C f).unit.app F).app (op V) ≫\n        ((pullback C f).obj F).map (homOfLE hV).op ≫ ψ) : φ = ψ := by\n  obtain ⟨U⟩ := U\n  apply ((Opens.map f).op.isPointwiseLeftKanExtensionLeftKanExtensionUnit F _).hom_ext\n  rintro ⟨⟨V⟩, ⟨⟩, ⟨b⟩⟩\n  simpa [pushforwardPullbackAdjunction, Functor.lanAdjunction_unit]\n    using h V (leOfHom b)\n\n"}
{"name":"TopCat.Presheaf.pullback_obj_obj_ext_iff","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX Y : TopCat\nZ : C\nf : Quiver.Hom X Y\nF : TopCat.Presheaf C Y\nU : Opposite (TopologicalSpace.Opens ↑X)\nφ ψ : Quiver.Hom (((TopCat.Presheaf.pullback C f).obj F).obj U) Z\n⊢ Iff (Eq φ ψ) (∀ (V : TopologicalSpace.Opens ↑Y) (hV : LE.le (Opposite.unop U) ((TopologicalSpace.Opens.map f).obj V)), Eq (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pushforwardPullbackAdjunction C f).unit.app F).app { unop := V }) (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pullback C f).obj F).map (CategoryTheory.homOfLE hV).op) φ)) (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pushforwardPullbackAdjunction C f).unit.app F).app { unop := V }) (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pullback C f).obj F).map (CategoryTheory.homOfLE hV).op) ψ)))","decl":"variable {C} in\n@[ext]\nlemma pullback_obj_obj_ext {Z : C} {f : X ⟶ Y} {F : Y.Presheaf C} (U : (Opens X)ᵒᵖ)\n    {φ ψ : ((pullback C f).obj F).obj U ⟶ Z}\n    (h : ∀ (V : Opens Y) (hV : U.unop ≤ (Opens.map f).obj V),\n      ((pushforwardPullbackAdjunction C f).unit.app F).app (op V) ≫\n        ((pullback C f).obj F).map (homOfLE hV).op ≫ φ =\n      ((pushforwardPullbackAdjunction C f).unit.app F).app (op V) ≫\n        ((pullback C f).obj F).map (homOfLE hV).op ≫ ψ) : φ = ψ := by\n  obtain ⟨U⟩ := U\n  apply ((Opens.map f).op.isPointwiseLeftKanExtensionLeftKanExtensionUnit F _).hom_ext\n  rintro ⟨⟨V⟩, ⟨⟩, ⟨b⟩⟩\n  simpa [pushforwardPullbackAdjunction, Functor.lanAdjunction_unit]\n    using h V (leOfHom b)\n\n"}
{"name":"TopCat.Presheaf.pushforwardPullbackAdjunction_unit_pullback_map_germToPullbackStalk_assoc","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX Y : TopCat\nf : Quiver.Hom X Y\nF : TopCat.Presheaf C Y\nU : TopologicalSpace.Opens ↑X\nx : ↑X\nhx : Membership.mem U x\nV : TopologicalSpace.Opens ↑Y\nhV : LE.le U ((TopologicalSpace.Opens.map f).obj V)\nZ : C\nh : Quiver.Hom (F.stalk (f x)) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pushforwardPullbackAdjunction C f).unit.app F).app { unop := V }) (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pullback C f).obj F).map (CategoryTheory.homOfLE hV).op) (CategoryTheory.CategoryStruct.comp (TopCat.Presheaf.germToPullbackStalk C f F U x hx) h))) (CategoryTheory.CategoryStruct.comp (F.germ V (f x) ⋯) h)","decl":"@[reassoc (attr := simp)]\nlemma pushforwardPullbackAdjunction_unit_pullback_map_germToPullbackStalk\n    (f : X ⟶ Y) (F : Y.Presheaf C) (U : Opens X) (x : X) (hx : x ∈ U) (V : Opens Y)\n    (hV : U ≤ (Opens.map f).obj V) :\n    ((pushforwardPullbackAdjunction C f).unit.app F).app (op V) ≫\n      ((pullback C f).obj F).map (homOfLE hV).op ≫ germToPullbackStalk C f F U x hx  =\n        F.germ _ (f x) (hV hx) := by\n  simpa [pushforwardPullbackAdjunction] using\n    ((Opens.map f).op.isPointwiseLeftKanExtensionLeftKanExtensionUnit F (op U)).fac _\n      (CostructuredArrow.mk (homOfLE hV).op)\n\n"}
{"name":"TopCat.Presheaf.pushforwardPullbackAdjunction_unit_pullback_map_germToPullbackStalk","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX Y : TopCat\nf : Quiver.Hom X Y\nF : TopCat.Presheaf C Y\nU : TopologicalSpace.Opens ↑X\nx : ↑X\nhx : Membership.mem U x\nV : TopologicalSpace.Opens ↑Y\nhV : LE.le U ((TopologicalSpace.Opens.map f).obj V)\n⊢ Eq (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pushforwardPullbackAdjunction C f).unit.app F).app { unop := V }) (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pullback C f).obj F).map (CategoryTheory.homOfLE hV).op) (TopCat.Presheaf.germToPullbackStalk C f F U x hx))) (F.germ V (f x) ⋯)","decl":"@[reassoc (attr := simp)]\nlemma pushforwardPullbackAdjunction_unit_pullback_map_germToPullbackStalk\n    (f : X ⟶ Y) (F : Y.Presheaf C) (U : Opens X) (x : X) (hx : x ∈ U) (V : Opens Y)\n    (hV : U ≤ (Opens.map f).obj V) :\n    ((pushforwardPullbackAdjunction C f).unit.app F).app (op V) ≫\n      ((pullback C f).obj F).map (homOfLE hV).op ≫ germToPullbackStalk C f F U x hx  =\n        F.germ _ (f x) (hV hx) := by\n  simpa [pushforwardPullbackAdjunction] using\n    ((Opens.map f).op.isPointwiseLeftKanExtensionLeftKanExtensionUnit F (op U)).fac _\n      (CostructuredArrow.mk (homOfLE hV).op)\n\n"}
{"name":"TopCat.Presheaf.germToPullbackStalk_stalkPullbackHom_assoc","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX Y : TopCat\nf : Quiver.Hom X Y\nF : TopCat.Presheaf C Y\nU : TopologicalSpace.Opens ↑X\nx : ↑X\nhx : Membership.mem U x\nZ : C\nh : Quiver.Hom (((TopCat.Presheaf.pullback C f).obj F).stalk x) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (TopCat.Presheaf.germToPullbackStalk C f F U x hx) (CategoryTheory.CategoryStruct.comp (TopCat.Presheaf.stalkPullbackHom C f F x) h)) (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pullback C f).obj F).germ U x hx) h)","decl":"@[reassoc (attr := simp)]\nlemma germToPullbackStalk_stalkPullbackHom\n    (f : X ⟶ Y) (F : Y.Presheaf C) (U : Opens X) (x : X) (hx : x ∈ U) :\n    germToPullbackStalk C f F U x hx ≫ stalkPullbackHom C f F x =\n      ((pullback C f).obj F).germ _ x hx := by\n  ext V hV\n  dsimp\n  simp only [pushforwardPullbackAdjunction_unit_pullback_map_germToPullbackStalk_assoc,\n    germ_stalkPullbackHom, germ_res]\n\n"}
{"name":"TopCat.Presheaf.germToPullbackStalk_stalkPullbackHom","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX Y : TopCat\nf : Quiver.Hom X Y\nF : TopCat.Presheaf C Y\nU : TopologicalSpace.Opens ↑X\nx : ↑X\nhx : Membership.mem U x\n⊢ Eq (CategoryTheory.CategoryStruct.comp (TopCat.Presheaf.germToPullbackStalk C f F U x hx) (TopCat.Presheaf.stalkPullbackHom C f F x)) (((TopCat.Presheaf.pullback C f).obj F).germ U x hx)","decl":"@[reassoc (attr := simp)]\nlemma germToPullbackStalk_stalkPullbackHom\n    (f : X ⟶ Y) (F : Y.Presheaf C) (U : Opens X) (x : X) (hx : x ∈ U) :\n    germToPullbackStalk C f F U x hx ≫ stalkPullbackHom C f F x =\n      ((pullback C f).obj F).germ _ x hx := by\n  ext V hV\n  dsimp\n  simp only [pushforwardPullbackAdjunction_unit_pullback_map_germToPullbackStalk_assoc,\n    germ_stalkPullbackHom, germ_res]\n\n"}
{"name":"TopCat.Presheaf.pushforwardPullbackAdjunction_unit_app_app_germToPullbackStalk_assoc","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX Y : TopCat\nf : Quiver.Hom X Y\nF : TopCat.Presheaf C Y\nV : Opposite (TopologicalSpace.Opens ↑Y)\nx : ↑X\nhx : Membership.mem (Opposite.unop V) (f x)\nZ : C\nh : Quiver.Hom (F.stalk (f x)) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pushforwardPullbackAdjunction C f).unit.app F).app V) (CategoryTheory.CategoryStruct.comp (TopCat.Presheaf.germToPullbackStalk C f F ((TopologicalSpace.Opens.map f).obj (Opposite.unop V)) x hx) h)) (CategoryTheory.CategoryStruct.comp (F.germ (Opposite.unop V) (f x) hx) h)","decl":"@[reassoc (attr := simp)]\nlemma pushforwardPullbackAdjunction_unit_app_app_germToPullbackStalk\n    (f : X ⟶ Y) (F : Y.Presheaf C) (V : (Opens Y)ᵒᵖ) (x : X) (hx : f x ∈ V.unop) :\n    ((pushforwardPullbackAdjunction C f).unit.app F).app V ≫ germToPullbackStalk C f F _ x hx =\n      F.germ _ (f x) hx := by\n  simpa using pushforwardPullbackAdjunction_unit_pullback_map_germToPullbackStalk\n    C f F ((Opens.map f).obj V.unop) x hx V.unop (by rfl)\n\n"}
{"name":"TopCat.Presheaf.pushforwardPullbackAdjunction_unit_app_app_germToPullbackStalk","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX Y : TopCat\nf : Quiver.Hom X Y\nF : TopCat.Presheaf C Y\nV : Opposite (TopologicalSpace.Opens ↑Y)\nx : ↑X\nhx : Membership.mem (Opposite.unop V) (f x)\n⊢ Eq (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pushforwardPullbackAdjunction C f).unit.app F).app V) (TopCat.Presheaf.germToPullbackStalk C f F ((TopologicalSpace.Opens.map f).obj (Opposite.unop V)) x hx)) (F.germ (Opposite.unop V) (f x) hx)","decl":"@[reassoc (attr := simp)]\nlemma pushforwardPullbackAdjunction_unit_app_app_germToPullbackStalk\n    (f : X ⟶ Y) (F : Y.Presheaf C) (V : (Opens Y)ᵒᵖ) (x : X) (hx : f x ∈ V.unop) :\n    ((pushforwardPullbackAdjunction C f).unit.app F).app V ≫ germToPullbackStalk C f F _ x hx =\n      F.germ _ (f x) hx := by\n  simpa using pushforwardPullbackAdjunction_unit_pullback_map_germToPullbackStalk\n    C f F ((Opens.map f).obj V.unop) x hx V.unop (by rfl)\n\n"}
{"name":"TopCat.Presheaf.germ_stalkPullbackInv","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX Y : TopCat\nf : Quiver.Hom X Y\nF : TopCat.Presheaf C Y\nx : ↑X\nV : TopologicalSpace.Opens ↑X\nhV : Membership.mem V x\n⊢ Eq (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pullback C f).obj F).germ V x hV) (TopCat.Presheaf.stalkPullbackInv C f F x)) (TopCat.Presheaf.germToPullbackStalk C f F V x hV)","decl":"@[reassoc (attr := simp)]\nlemma germ_stalkPullbackInv (f : X ⟶ Y) (F : Y.Presheaf C) (x : X) (V : Opens X) (hV : x ∈ V) :\n    ((pullback C f).obj F).germ _ x hV ≫ stalkPullbackInv C f F x =\n    F.germToPullbackStalk _ f V x hV := by\n  apply colimit.ι_desc\n\n"}
{"name":"TopCat.Presheaf.germ_stalkPullbackInv_assoc","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX Y : TopCat\nf : Quiver.Hom X Y\nF : TopCat.Presheaf C Y\nx : ↑X\nV : TopologicalSpace.Opens ↑X\nhV : Membership.mem V x\nZ : C\nh : Quiver.Hom (F.stalk (f x)) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pullback C f).obj F).germ V x hV) (CategoryTheory.CategoryStruct.comp (TopCat.Presheaf.stalkPullbackInv C f F x) h)) (CategoryTheory.CategoryStruct.comp (TopCat.Presheaf.germToPullbackStalk C f F V x hV) h)","decl":"@[reassoc (attr := simp)]\nlemma germ_stalkPullbackInv (f : X ⟶ Y) (F : Y.Presheaf C) (x : X) (V : Opens X) (hV : x ∈ V) :\n    ((pullback C f).obj F).germ _ x hV ≫ stalkPullbackInv C f F x =\n    F.germToPullbackStalk _ f V x hV := by\n  apply colimit.ι_desc\n\n"}
{"name":"TopCat.Presheaf.germ_stalkSpecializes_assoc","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF : TopCat.Presheaf C X\nU : TopologicalSpace.Opens ↑X\ny : ↑X\nhy : Membership.mem U y\nx : ↑X\nh✝ : Specializes x y\nZ : C\nh : Quiver.Hom (F.stalk x) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (F.germ U y hy) (CategoryTheory.CategoryStruct.comp (F.stalkSpecializes h✝) h)) (CategoryTheory.CategoryStruct.comp (F.germ U x ⋯) h)","decl":"@[reassoc (attr := simp), elementwise nosimp]\ntheorem germ_stalkSpecializes (F : X.Presheaf C)\n    {U : Opens X} {y : X} (hy : y ∈ U) {x : X} (h : x ⤳ y) :\n    F.germ U y hy ≫ F.stalkSpecializes h = F.germ U x (h.mem_open U.isOpen hy) :=\n  colimit.ι_desc _ _\n\n"}
{"name":"TopCat.Presheaf.germ_stalkSpecializes","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF : TopCat.Presheaf C X\nU : TopologicalSpace.Opens ↑X\ny : ↑X\nhy : Membership.mem U y\nx : ↑X\nh : Specializes x y\n⊢ Eq (CategoryTheory.CategoryStruct.comp (F.germ U y hy) (F.stalkSpecializes h)) (F.germ U x ⋯)","decl":"@[reassoc (attr := simp), elementwise nosimp]\ntheorem germ_stalkSpecializes (F : X.Presheaf C)\n    {U : Opens X} {y : X} (hy : y ∈ U) {x : X} (h : x ⤳ y) :\n    F.germ U y hy ≫ F.stalkSpecializes h = F.germ U x (h.mem_open U.isOpen hy) :=\n  colimit.ι_desc _ _\n\n"}
{"name":"TopCat.Presheaf.germ_stalkSpecializes_apply","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF : TopCat.Presheaf C X\nU : TopologicalSpace.Opens ↑X\ny : ↑X\nhy : Membership.mem U y\nx✝ : ↑X\nh : Specializes x✝ y\ninst : CategoryTheory.HasForget C\nx : (CategoryTheory.forget C).obj (F.obj { unop := U })\n⊢ Eq ((F.stalkSpecializes h) ((F.germ U y hy) x)) ((F.germ U x✝ ⋯) x)","decl":"@[reassoc (attr := simp), elementwise nosimp]\ntheorem germ_stalkSpecializes (F : X.Presheaf C)\n    {U : Opens X} {y : X} (hy : y ∈ U) {x : X} (h : x ⤳ y) :\n    F.germ U y hy ≫ F.stalkSpecializes h = F.germ U x (h.mem_open U.isOpen hy) :=\n  colimit.ι_desc _ _\n\n"}
{"name":"TopCat.Presheaf.stalkSpecializes_refl","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_2, u_1} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF : TopCat.Presheaf C X\nx : ↑X\n⊢ Eq (F.stalkSpecializes ⋯) (CategoryTheory.CategoryStruct.id (F.stalk x))","decl":"@[simp]\ntheorem stalkSpecializes_refl {C : Type*} [Category C] [Limits.HasColimits C] {X : TopCat}\n    (F : X.Presheaf C) (x : X) : F.stalkSpecializes (specializes_refl x) = 𝟙 _ := by\n  ext\n  simp\n\n"}
{"name":"TopCat.Presheaf.stalkSpecializes_comp_assoc","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_2, u_1} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF : TopCat.Presheaf C X\nx y z : ↑X\nh✝ : Specializes x y\nh' : Specializes y z\nZ : C\nh : Quiver.Hom (F.stalk x) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (F.stalkSpecializes h') (CategoryTheory.CategoryStruct.comp (F.stalkSpecializes h✝) h)) (CategoryTheory.CategoryStruct.comp (F.stalkSpecializes ⋯) h)","decl":"@[reassoc (attr := simp), elementwise (attr := simp)]\ntheorem stalkSpecializes_comp {C : Type*} [Category C] [Limits.HasColimits C] {X : TopCat}\n    (F : X.Presheaf C) {x y z : X} (h : x ⤳ y) (h' : y ⤳ z) :\n    F.stalkSpecializes h' ≫ F.stalkSpecializes h = F.stalkSpecializes (h.trans h') := by\n  ext\n  simp\n\n"}
{"name":"TopCat.Presheaf.stalkSpecializes_comp_apply","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_2, u_1} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF : TopCat.Presheaf C X\nx✝ y z : ↑X\nh : Specializes x✝ y\nh' : Specializes y z\ninst : CategoryTheory.HasForget C\nx : (CategoryTheory.forget C).obj (F.stalk z)\n⊢ Eq ((F.stalkSpecializes h) ((F.stalkSpecializes h') x)) ((F.stalkSpecializes ⋯) x)","decl":"@[reassoc (attr := simp), elementwise (attr := simp)]\ntheorem stalkSpecializes_comp {C : Type*} [Category C] [Limits.HasColimits C] {X : TopCat}\n    (F : X.Presheaf C) {x y z : X} (h : x ⤳ y) (h' : y ⤳ z) :\n    F.stalkSpecializes h' ≫ F.stalkSpecializes h = F.stalkSpecializes (h.trans h') := by\n  ext\n  simp\n\n"}
{"name":"TopCat.Presheaf.stalkSpecializes_comp","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_2, u_1} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF : TopCat.Presheaf C X\nx y z : ↑X\nh : Specializes x y\nh' : Specializes y z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (F.stalkSpecializes h') (F.stalkSpecializes h)) (F.stalkSpecializes ⋯)","decl":"@[reassoc (attr := simp), elementwise (attr := simp)]\ntheorem stalkSpecializes_comp {C : Type*} [Category C] [Limits.HasColimits C] {X : TopCat}\n    (F : X.Presheaf C) {x y z : X} (h : x ⤳ y) (h' : y ⤳ z) :\n    F.stalkSpecializes h' ≫ F.stalkSpecializes h = F.stalkSpecializes (h.trans h') := by\n  ext\n  simp\n\n"}
{"name":"TopCat.Presheaf.stalkSpecializes_stalkFunctor_map_assoc","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF G : TopCat.Presheaf C X\nf : Quiver.Hom F G\nx y : ↑X\nh✝ : Specializes x y\nZ : C\nh : Quiver.Hom ((TopCat.Presheaf.stalkFunctor C x).obj G) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (F.stalkSpecializes h✝) (CategoryTheory.CategoryStruct.comp ((TopCat.Presheaf.stalkFunctor C x).map f) h)) (CategoryTheory.CategoryStruct.comp ((TopCat.Presheaf.stalkFunctor C y).map f) (CategoryTheory.CategoryStruct.comp (G.stalkSpecializes h✝) h))","decl":"@[reassoc (attr := simp), elementwise (attr := simp)]\ntheorem stalkSpecializes_stalkFunctor_map {F G : X.Presheaf C} (f : F ⟶ G) {x y : X} (h : x ⤳ y) :\n    F.stalkSpecializes h ≫ (stalkFunctor C x).map f =\n      (stalkFunctor C y).map f ≫ G.stalkSpecializes h := by\n  change (_ : colimit _ ⟶ _) = (_ : colimit _ ⟶ _)\n  ext; delta stalkFunctor; simpa [stalkSpecializes] using by rfl\n\n-- See https://github.com/leanprover-community/batteries/issues/365 for the simpNF issue.\n"}
{"name":"TopCat.Presheaf.stalkSpecializes_stalkFunctor_map","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF G : TopCat.Presheaf C X\nf : Quiver.Hom F G\nx y : ↑X\nh : Specializes x y\n⊢ Eq (CategoryTheory.CategoryStruct.comp (F.stalkSpecializes h) ((TopCat.Presheaf.stalkFunctor C x).map f)) (CategoryTheory.CategoryStruct.comp ((TopCat.Presheaf.stalkFunctor C y).map f) (G.stalkSpecializes h))","decl":"@[reassoc (attr := simp), elementwise (attr := simp)]\ntheorem stalkSpecializes_stalkFunctor_map {F G : X.Presheaf C} (f : F ⟶ G) {x y : X} (h : x ⤳ y) :\n    F.stalkSpecializes h ≫ (stalkFunctor C x).map f =\n      (stalkFunctor C y).map f ≫ G.stalkSpecializes h := by\n  change (_ : colimit _ ⟶ _) = (_ : colimit _ ⟶ _)\n  ext; delta stalkFunctor; simpa [stalkSpecializes] using by rfl\n\n-- See https://github.com/leanprover-community/batteries/issues/365 for the simpNF issue.\n"}
{"name":"TopCat.Presheaf.stalkSpecializes_stalkFunctor_map_apply","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX : TopCat\nF G : TopCat.Presheaf C X\nf : Quiver.Hom F G\nx✝ y : ↑X\nh : Specializes x✝ y\ninst : CategoryTheory.HasForget C\nx : (CategoryTheory.forget C).obj (F.stalk y)\n⊢ Eq (((TopCat.Presheaf.stalkFunctor C x✝).map f) ((F.stalkSpecializes h) x)) ((G.stalkSpecializes h) (((TopCat.Presheaf.stalkFunctor C y).map f) x))","decl":"@[reassoc (attr := simp), elementwise (attr := simp)]\ntheorem stalkSpecializes_stalkFunctor_map {F G : X.Presheaf C} (f : F ⟶ G) {x y : X} (h : x ⤳ y) :\n    F.stalkSpecializes h ≫ (stalkFunctor C x).map f =\n      (stalkFunctor C y).map f ≫ G.stalkSpecializes h := by\n  change (_ : colimit _ ⟶ _) = (_ : colimit _ ⟶ _)\n  ext; delta stalkFunctor; simpa [stalkSpecializes] using by rfl\n\n-- See https://github.com/leanprover-community/batteries/issues/365 for the simpNF issue.\n"}
{"name":"TopCat.Presheaf.stalkSpecializes_stalkPushforward","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX Y : TopCat\nf : Quiver.Hom X Y\nF : TopCat.Presheaf C X\nx y : ↑X\nh : Specializes x y\n⊢ Eq (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pushforward C f).obj F).stalkSpecializes ⋯) (TopCat.Presheaf.stalkPushforward C f F x)) (CategoryTheory.CategoryStruct.comp (TopCat.Presheaf.stalkPushforward C f F y) (F.stalkSpecializes h))","decl":"@[reassoc, elementwise, simp, nolint simpNF]\ntheorem stalkSpecializes_stalkPushforward (f : X ⟶ Y) (F : X.Presheaf C) {x y : X} (h : x ⤳ y) :\n    (f _* F).stalkSpecializes (f.map_specializes h) ≫ F.stalkPushforward _ f x =\n      F.stalkPushforward _ f y ≫ F.stalkSpecializes h := by\n  change (_ : colimit _ ⟶ _) = (_ : colimit _ ⟶ _)\n  ext; delta stalkPushforward\n  simp only [stalkSpecializes, colimit.ι_desc_assoc, colimit.ι_map_assoc, colimit.ι_pre,\n    Category.assoc, colimit.pre_desc, colimit.ι_desc]\n  rfl\n\n"}
{"name":"TopCat.Presheaf.stalkSpecializes_stalkPushforward_assoc","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX Y : TopCat\nf : Quiver.Hom X Y\nF : TopCat.Presheaf C X\nx y : ↑X\nh✝ : Specializes x y\nZ : C\nh : Quiver.Hom (F.stalk x) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (((TopCat.Presheaf.pushforward C f).obj F).stalkSpecializes ⋯) (CategoryTheory.CategoryStruct.comp (TopCat.Presheaf.stalkPushforward C f F x) h)) (CategoryTheory.CategoryStruct.comp (TopCat.Presheaf.stalkPushforward C f F y) (CategoryTheory.CategoryStruct.comp (F.stalkSpecializes h✝) h))","decl":"@[reassoc, elementwise, simp, nolint simpNF]\ntheorem stalkSpecializes_stalkPushforward (f : X ⟶ Y) (F : X.Presheaf C) {x y : X} (h : x ⤳ y) :\n    (f _* F).stalkSpecializes (f.map_specializes h) ≫ F.stalkPushforward _ f x =\n      F.stalkPushforward _ f y ≫ F.stalkSpecializes h := by\n  change (_ : colimit _ ⟶ _) = (_ : colimit _ ⟶ _)\n  ext; delta stalkPushforward\n  simp only [stalkSpecializes, colimit.ι_desc_assoc, colimit.ι_map_assoc, colimit.ι_pre,\n    Category.assoc, colimit.pre_desc, colimit.ι_desc]\n  rfl\n\n"}
{"name":"TopCat.Presheaf.stalkSpecializes_stalkPushforward_apply","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nX Y : TopCat\nf : Quiver.Hom X Y\nF : TopCat.Presheaf C X\nx✝ y : ↑X\nh : Specializes x✝ y\ninst : CategoryTheory.HasForget C\nx : (CategoryTheory.forget C).obj (((TopCat.Presheaf.pushforward C f).obj F).stalk (f y))\n⊢ Eq ((TopCat.Presheaf.stalkPushforward C f F x✝) ((((TopCat.Presheaf.pushforward C f).obj F).stalkSpecializes ⋯) x)) ((F.stalkSpecializes h) ((TopCat.Presheaf.stalkPushforward C f F y) x))","decl":"@[reassoc, elementwise, simp, nolint simpNF]\ntheorem stalkSpecializes_stalkPushforward (f : X ⟶ Y) (F : X.Presheaf C) {x y : X} (h : x ⤳ y) :\n    (f _* F).stalkSpecializes (f.map_specializes h) ≫ F.stalkPushforward _ f x =\n      F.stalkPushforward _ f y ≫ F.stalkSpecializes h := by\n  change (_ : colimit _ ⟶ _) = (_ : colimit _ ⟶ _)\n  ext; delta stalkPushforward\n  simp only [stalkSpecializes, colimit.ι_desc_assoc, colimit.ι_map_assoc, colimit.ι_pre,\n    Category.assoc, colimit.pre_desc, colimit.ι_desc]\n  rfl\n\n"}
{"name":"TopCat.Presheaf.stalkCongr_inv","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"X : TopCat\nC : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_2, u_1} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nF : TopCat.Presheaf C X\nx y : ↑X\ne : Inseparable x y\n⊢ Eq (F.stalkCongr e).inv (F.stalkSpecializes ⋯)","decl":"/-- The stalks are isomorphic on inseparable points -/\n@[simps]\ndef stalkCongr {X : TopCat} {C : Type*} [Category C] [HasColimits C] (F : X.Presheaf C) {x y : X}\n    (e : Inseparable x y) : F.stalk x ≅ F.stalk y :=\n  ⟨F.stalkSpecializes e.ge, F.stalkSpecializes e.le, by simp, by simp⟩\n\n"}
{"name":"TopCat.Presheaf.stalkCongr_hom","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"X : TopCat\nC : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_2, u_1} C\ninst✝ : CategoryTheory.Limits.HasColimits C\nF : TopCat.Presheaf C X\nx y : ↑X\ne : Inseparable x y\n⊢ Eq (F.stalkCongr e).hom (F.stalkSpecializes ⋯)","decl":"/-- The stalks are isomorphic on inseparable points -/\n@[simps]\ndef stalkCongr {X : TopCat} {C : Type*} [Category C] [HasColimits C] (F : X.Presheaf C) {x y : X}\n    (e : Inseparable x y) : F.stalk x ≅ F.stalk y :=\n  ⟨F.stalkSpecializes e.ge, F.stalkSpecializes e.le, by simp, by simp⟩\n\n"}
{"name":"TopCat.Presheaf.germ_ext","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝² : CategoryTheory.Category.{v, u} C\ninst✝¹ : CategoryTheory.Limits.HasColimits C\nX : TopCat\ninst✝ : CategoryTheory.HasForget C\nF : TopCat.Presheaf C X\nU V : TopologicalSpace.Opens ↑X\nx : ↑X\nhxU : Membership.mem U x\nhxV : Membership.mem V x\nW : TopologicalSpace.Opens ↑X\nhxW : Membership.mem W x\niWU : Quiver.Hom W U\niWV : Quiver.Hom W V\nsU : (CategoryTheory.forget C).obj (F.obj { unop := U })\nsV : (CategoryTheory.forget C).obj (F.obj { unop := V })\nih : Eq ((F.map iWU.op) sU) ((F.map iWV.op) sV)\n⊢ Eq ((F.germ U x hxU) sU) ((F.germ V x hxV) sV)","decl":"theorem germ_ext (F : X.Presheaf C) {U V : Opens X} {x : X} {hxU : x ∈ U} {hxV : x ∈ V}\n    (W : Opens X) (hxW : x ∈ W) (iWU : W ⟶ U) (iWV : W ⟶ V) {sU : F.obj (op U)} {sV : F.obj (op V)}\n    (ih : F.map iWU.op sU = F.map iWV.op sV) :\n      F.germ _ x hxU sU = F.germ _ x hxV sV := by\n  rw [← F.germ_res iWU x hxW, ← F.germ_res iWV x hxW, CategoryTheory.comp_apply,\n    CategoryTheory.comp_apply, ih]\n\n"}
{"name":"TopCat.Presheaf.germ_exist","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝³ : CategoryTheory.Category.{v, u} C\ninst✝² : CategoryTheory.Limits.HasColimits C\nX : TopCat\ninst✝¹ : CategoryTheory.HasForget C\ninst✝ : CategoryTheory.Limits.PreservesFilteredColimits (CategoryTheory.forget C)\nF : TopCat.Presheaf C X\nx : ↑X\nt : (CategoryTheory.forget C).obj (F.stalk x)\n⊢ Exists fun U => Exists fun m => Exists fun s => Eq ((F.germ U x m) s) t","decl":"/--\nFor presheaves valued in a concrete category whose forgetful functor preserves filtered colimits,\nevery element of the stalk is the germ of a section.\n-/\ntheorem germ_exist (F : X.Presheaf C) (x : X) (t : (stalk.{v, u} F x : Type v)) :\n    ∃ (U : Opens X) (m : x ∈ U) (s : F.obj (op U)), F.germ _ x m s = t := by\n  obtain ⟨U, s, e⟩ :=\n    Types.jointly_surjective.{v, v} _ (isColimitOfPreserves (forget C) (colimit.isColimit _)) t\n  revert s e\n  induction U with | h U => ?_\n  cases' U with V m\n  intro s e\n  exact ⟨V, m, s, e⟩\n\n"}
{"name":"TopCat.Presheaf.germ_eq","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝³ : CategoryTheory.Category.{v, u} C\ninst✝² : CategoryTheory.Limits.HasColimits C\nX : TopCat\ninst✝¹ : CategoryTheory.HasForget C\ninst✝ : CategoryTheory.Limits.PreservesFilteredColimits (CategoryTheory.forget C)\nF : TopCat.Presheaf C X\nU V : TopologicalSpace.Opens ↑X\nx : ↑X\nmU : Membership.mem U x\nmV : Membership.mem V x\ns : (CategoryTheory.forget C).obj (F.obj { unop := U })\nt : (CategoryTheory.forget C).obj (F.obj { unop := V })\nh : Eq ((F.germ U x mU) s) ((F.germ V x mV) t)\n⊢ Exists fun W => Exists fun _m => Exists fun iU => Exists fun iV => Eq ((F.map iU.op) s) ((F.map iV.op) t)","decl":"theorem germ_eq (F : X.Presheaf C) {U V : Opens X} (x : X) (mU : x ∈ U) (mV : x ∈ V)\n    (s : F.obj (op U)) (t : F.obj (op V)) (h : F.germ U x mU s = F.germ V x mV t) :\n    ∃ (W : Opens X) (_m : x ∈ W) (iU : W ⟶ U) (iV : W ⟶ V), F.map iU.op s = F.map iV.op t := by\n  obtain ⟨W, iU, iV, e⟩ :=\n    (Types.FilteredColimit.isColimit_eq_iff.{v, v} _\n          (isColimitOfPreserves _ (colimit.isColimit ((OpenNhds.inclusion x).op ⋙ F)))).mp h\n  exact ⟨(unop W).1, (unop W).2, iU.unop, iV.unop, e⟩\n\n"}
{"name":"TopCat.Presheaf.stalkFunctor_map_injective_of_app_injective","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝³ : CategoryTheory.Category.{v, u} C\ninst✝² : CategoryTheory.Limits.HasColimits C\nX : TopCat\ninst✝¹ : CategoryTheory.HasForget C\ninst✝ : CategoryTheory.Limits.PreservesFilteredColimits (CategoryTheory.forget C)\nF G : TopCat.Presheaf C X\nf : Quiver.Hom F G\nh : ∀ (U : TopologicalSpace.Opens ↑X), Function.Injective ⇑(f.app { unop := U })\nx : ↑X\n⊢ Function.Injective ⇑((TopCat.Presheaf.stalkFunctor C x).map f)","decl":"theorem stalkFunctor_map_injective_of_app_injective {F G : Presheaf C X} (f : F ⟶ G)\n    (h : ∀ U : Opens X, Function.Injective (f.app (op U))) (x : X) :\n    Function.Injective ((stalkFunctor C x).map f) := fun s t hst => by\n  rcases germ_exist F x s with ⟨U₁, hxU₁, s, rfl⟩\n  rcases germ_exist F x t with ⟨U₂, hxU₂, t, rfl⟩\n  rw [stalkFunctor_map_germ_apply, stalkFunctor_map_germ_apply] at hst\n  obtain ⟨W, hxW, iWU₁, iWU₂, heq⟩ := G.germ_eq x hxU₁ hxU₂ _ _ hst\n  rw [← CategoryTheory.comp_apply, ← CategoryTheory.comp_apply, ← f.naturality, ← f.naturality,\n    CategoryTheory.comp_apply, CategoryTheory.comp_apply] at heq\n  replace heq := h W heq\n  convert congr_arg (F.germ _ x hxW) heq using 1\n  exacts [(F.germ_res_apply iWU₁ x hxW s).symm, (F.germ_res_apply iWU₂ x hxW t).symm]\n\n"}
{"name":"TopCat.Presheaf.section_ext","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝⁶ : CategoryTheory.Category.{v, u} C\ninst✝⁵ : CategoryTheory.Limits.HasColimits C\nX : TopCat\ninst✝⁴ : CategoryTheory.HasForget C\ninst✝³ : CategoryTheory.Limits.PreservesFilteredColimits (CategoryTheory.forget C)\ninst✝² : CategoryTheory.Limits.HasLimits C\ninst✝¹ : CategoryTheory.Limits.PreservesLimits (CategoryTheory.forget C)\ninst✝ : (CategoryTheory.forget C).ReflectsIsomorphisms\nF : TopCat.Sheaf C X\nU : TopologicalSpace.Opens ↑X\ns t : (CategoryTheory.forget C).obj (F.val.obj { unop := U })\nh : ∀ (x : ↑X) (hx : Membership.mem U x), Eq ((F.presheaf.germ U x hx) s) ((F.presheaf.germ U x hx) t)\n⊢ Eq s t","decl":"/-- Let `F` be a sheaf valued in a concrete category, whose forgetful functor reflects isomorphisms,\npreserves limits and filtered colimits. Then two sections who agree on every stalk must be equal.\n-/\ntheorem section_ext (F : Sheaf C X) (U : Opens X) (s t : F.1.obj (op U))\n    (h : ∀ (x : X) (hx : x ∈ U), F.presheaf.germ U x hx s = F.presheaf.germ U x hx t) : s = t := by\n  -- We use `germ_eq` and the axiom of choice, to pick for every point `x` a neighbourhood\n  -- `V x`, such that the restrictions of `s` and `t` to `V x` coincide.\n  choose V m i₁ i₂ heq using fun x : U => F.presheaf.germ_eq x.1 x.2 x.2 s t (h x.1 x.2)\n  -- Since `F` is a sheaf, we can prove the equality locally, if we can show that these\n  -- neighborhoods form a cover of `U`.\n  apply F.eq_of_locally_eq' V U i₁\n  · intro x hxU\n    simp only [Opens.coe_iSup, Set.mem_iUnion, SetLike.mem_coe]\n    exact ⟨⟨x, hxU⟩, m ⟨x, hxU⟩⟩\n  · intro x\n    rw [heq, Subsingleton.elim (i₁ x) (i₂ x)]\n\n/-\nNote that the analogous statement for surjectivity is false: Surjectivity on stalks does not\nimply surjectivity of the components of a sheaf morphism. However it does imply that the morphism\nis an epi, but this fact is not yet formalized.\n-/\n"}
{"name":"TopCat.Presheaf.app_injective_of_stalkFunctor_map_injective","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝⁶ : CategoryTheory.Category.{v, u} C\ninst✝⁵ : CategoryTheory.Limits.HasColimits C\nX : TopCat\ninst✝⁴ : CategoryTheory.HasForget C\ninst✝³ : CategoryTheory.Limits.PreservesFilteredColimits (CategoryTheory.forget C)\ninst✝² : CategoryTheory.Limits.HasLimits C\ninst✝¹ : CategoryTheory.Limits.PreservesLimits (CategoryTheory.forget C)\ninst✝ : (CategoryTheory.forget C).ReflectsIsomorphisms\nF : TopCat.Sheaf C X\nG : TopCat.Presheaf C X\nf : Quiver.Hom F.val G\nU : TopologicalSpace.Opens ↑X\nh : ∀ (x : ↑X), Membership.mem U x → Function.Injective ⇑((TopCat.Presheaf.stalkFunctor C x).map f)\n⊢ Function.Injective ⇑(f.app { unop := U })","decl":"theorem app_injective_of_stalkFunctor_map_injective {F : Sheaf C X} {G : Presheaf C X} (f : F.1 ⟶ G)\n    (U : Opens X) (h : ∀ x ∈ U, Function.Injective ((stalkFunctor C x).map f)) :\n    Function.Injective (f.app (op U)) := fun s t hst =>\n  section_ext F _ _ _ fun x hx =>\n    h x hx <| by rw [stalkFunctor_map_germ_apply, stalkFunctor_map_germ_apply, hst]\n\n"}
{"name":"TopCat.Presheaf.app_injective_iff_stalkFunctor_map_injective","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝⁶ : CategoryTheory.Category.{v, u} C\ninst✝⁵ : CategoryTheory.Limits.HasColimits C\nX : TopCat\ninst✝⁴ : CategoryTheory.HasForget C\ninst✝³ : CategoryTheory.Limits.PreservesFilteredColimits (CategoryTheory.forget C)\ninst✝² : CategoryTheory.Limits.HasLimits C\ninst✝¹ : CategoryTheory.Limits.PreservesLimits (CategoryTheory.forget C)\ninst✝ : (CategoryTheory.forget C).ReflectsIsomorphisms\nF : TopCat.Sheaf C X\nG : TopCat.Presheaf C X\nf : Quiver.Hom F.val G\n⊢ Iff (∀ (x : ↑X), Function.Injective ⇑((TopCat.Presheaf.stalkFunctor C x).map f)) (∀ (U : TopologicalSpace.Opens ↑X), Function.Injective ⇑(f.app { unop := U }))","decl":"theorem app_injective_iff_stalkFunctor_map_injective {F : Sheaf C X} {G : Presheaf C X}\n    (f : F.1 ⟶ G) :\n    (∀ x : X, Function.Injective ((stalkFunctor C x).map f)) ↔\n      ∀ U : Opens X, Function.Injective (f.app (op U)) :=\n  ⟨fun h U => app_injective_of_stalkFunctor_map_injective f U fun x _ => h x,\n    stalkFunctor_map_injective_of_app_injective f⟩\n\n"}
{"name":"TopCat.Presheaf.stalkFunctor_preserves_mono","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝⁶ : CategoryTheory.Category.{v, u} C\ninst✝⁵ : CategoryTheory.Limits.HasColimits C\nX : TopCat\ninst✝⁴ : CategoryTheory.HasForget C\ninst✝³ : CategoryTheory.Limits.PreservesFilteredColimits (CategoryTheory.forget C)\ninst✝² : CategoryTheory.Limits.HasLimits C\ninst✝¹ : CategoryTheory.Limits.PreservesLimits (CategoryTheory.forget C)\ninst✝ : (CategoryTheory.forget C).ReflectsIsomorphisms\nx : ↑X\n⊢ ((TopCat.Sheaf.forget C X).comp (TopCat.Presheaf.stalkFunctor C x)).PreservesMonomorphisms","decl":"instance stalkFunctor_preserves_mono (x : X) :\n    Functor.PreservesMonomorphisms (Sheaf.forget C X ⋙ stalkFunctor C x) :=\n  ⟨@fun _𝓐 _𝓑 f _ =>\n    ConcreteCategory.mono_of_injective _ <|\n      (app_injective_iff_stalkFunctor_map_injective f.1).mpr\n        (fun c =>\n          (ConcreteCategory.mono_iff_injective_of_preservesPullback (f.1.app (op c))).mp\n            ((NatTrans.mono_iff_mono_app f.1).mp\n                (CategoryTheory.presheaf_mono_of_mono ..) <|\n              op c))\n        x⟩\n\n"}
{"name":"TopCat.Presheaf.stalk_mono_of_mono","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝⁷ : CategoryTheory.Category.{v, u} C\ninst✝⁶ : CategoryTheory.Limits.HasColimits C\nX : TopCat\ninst✝⁵ : CategoryTheory.HasForget C\ninst✝⁴ : CategoryTheory.Limits.PreservesFilteredColimits (CategoryTheory.forget C)\ninst✝³ : CategoryTheory.Limits.HasLimits C\ninst✝² : CategoryTheory.Limits.PreservesLimits (CategoryTheory.forget C)\ninst✝¹ : (CategoryTheory.forget C).ReflectsIsomorphisms\nF G : TopCat.Sheaf C X\nf : Quiver.Hom F G\ninst✝ : CategoryTheory.Mono f\nx : ↑X\n⊢ CategoryTheory.Mono ((TopCat.Presheaf.stalkFunctor C x).map f.val)","decl":"theorem stalk_mono_of_mono {F G : Sheaf C X} (f : F ⟶ G) [Mono f] :\n    ∀ x, Mono <| (stalkFunctor C x).map f.1 :=\n  fun x => Functor.map_mono (Sheaf.forget.{v} C X ⋙ stalkFunctor C x) f\n\n"}
{"name":"TopCat.Presheaf.mono_of_stalk_mono","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝⁷ : CategoryTheory.Category.{v, u} C\ninst✝⁶ : CategoryTheory.Limits.HasColimits C\nX : TopCat\ninst✝⁵ : CategoryTheory.HasForget C\ninst✝⁴ : CategoryTheory.Limits.PreservesFilteredColimits (CategoryTheory.forget C)\ninst✝³ : CategoryTheory.Limits.HasLimits C\ninst✝² : CategoryTheory.Limits.PreservesLimits (CategoryTheory.forget C)\ninst✝¹ : (CategoryTheory.forget C).ReflectsIsomorphisms\nF G : TopCat.Sheaf C X\nf : Quiver.Hom F G\ninst✝ : ∀ (x : ↑X), CategoryTheory.Mono ((TopCat.Presheaf.stalkFunctor C x).map f.val)\n⊢ CategoryTheory.Mono f","decl":"theorem mono_of_stalk_mono {F G : Sheaf C X} (f : F ⟶ G) [∀ x, Mono <| (stalkFunctor C x).map f.1] :\n    Mono f :=\n  (Sheaf.Hom.mono_iff_presheaf_mono _ _ _).mpr <|\n    (NatTrans.mono_iff_mono_app _).mpr fun U =>\n      (ConcreteCategory.mono_iff_injective_of_preservesPullback _).mpr <|\n        app_injective_of_stalkFunctor_map_injective f.1 U.unop fun _x _hx =>\n          (ConcreteCategory.mono_iff_injective_of_preservesPullback _).mp <| inferInstance\n\n"}
{"name":"TopCat.Presheaf.mono_iff_stalk_mono","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝⁶ : CategoryTheory.Category.{v, u} C\ninst✝⁵ : CategoryTheory.Limits.HasColimits C\nX : TopCat\ninst✝⁴ : CategoryTheory.HasForget C\ninst✝³ : CategoryTheory.Limits.PreservesFilteredColimits (CategoryTheory.forget C)\ninst✝² : CategoryTheory.Limits.HasLimits C\ninst✝¹ : CategoryTheory.Limits.PreservesLimits (CategoryTheory.forget C)\ninst✝ : (CategoryTheory.forget C).ReflectsIsomorphisms\nF G : TopCat.Sheaf C X\nf : Quiver.Hom F G\n⊢ Iff (CategoryTheory.Mono f) (∀ (x : ↑X), CategoryTheory.Mono ((TopCat.Presheaf.stalkFunctor C x).map f.val))","decl":"theorem mono_iff_stalk_mono {F G : Sheaf C X} (f : F ⟶ G) :\n    Mono f ↔ ∀ x, Mono ((stalkFunctor C x).map f.1) :=\n  ⟨fun _ => stalk_mono_of_mono _, fun _ => mono_of_stalk_mono _⟩\n\n"}
{"name":"TopCat.Presheaf.app_surjective_of_injective_of_locally_surjective","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝⁶ : CategoryTheory.Category.{v, u} C\ninst✝⁵ : CategoryTheory.Limits.HasColimits C\nX : TopCat\ninst✝⁴ : CategoryTheory.HasForget C\ninst✝³ : CategoryTheory.Limits.PreservesFilteredColimits (CategoryTheory.forget C)\ninst✝² : CategoryTheory.Limits.HasLimits C\ninst✝¹ : CategoryTheory.Limits.PreservesLimits (CategoryTheory.forget C)\ninst✝ : (CategoryTheory.forget C).ReflectsIsomorphisms\nF G : TopCat.Sheaf C X\nf : Quiver.Hom F G\nU : TopologicalSpace.Opens ↑X\nhinj : ∀ (x : ↑X), Membership.mem U x → Function.Injective ⇑((TopCat.Presheaf.stalkFunctor C x).map f.val)\nhsurj : ∀ (t : (CategoryTheory.forget C).obj (G.val.obj { unop := U })) (x : ↑X), Membership.mem U x → Exists fun V => Exists fun x => Exists fun iVU => Exists fun s => Eq ((f.val.app { unop := V }) s) ((G.val.map iVU.op) t)\n⊢ Function.Surjective ⇑(f.val.app { unop := U })","decl":"/-- For surjectivity, we are given an arbitrary section `t` and need to find a preimage for it.\nWe claim that it suffices to find preimages *locally*. That is, for each `x : U` we construct\na neighborhood `V ≤ U` and a section `s : F.obj (op V))` such that `f.app (op V) s` and `t`\nagree on `V`. -/\ntheorem app_surjective_of_injective_of_locally_surjective {F G : Sheaf C X} (f : F ⟶ G)\n    (U : Opens X) (hinj : ∀ x ∈ U, Function.Injective ((stalkFunctor C x).map f.1))\n    (hsurj : ∀ (t x) (_ : x ∈ U), ∃ (V : Opens X) (_ : x ∈ V) (iVU : V ⟶ U) (s : F.1.obj (op V)),\n          f.1.app (op V) s = G.1.map iVU.op t) :\n    Function.Surjective (f.1.app (op U)) := by\n  conv at hsurj =>\n    enter [t]\n    rw [Subtype.forall' (p := (· ∈ U))]\n  intro t\n  -- We use the axiom of choice to pick around each point `x` an open neighborhood `V` and a\n  -- preimage under `f` on `V`.\n  choose V mV iVU sf heq using hsurj t\n  -- These neighborhoods clearly cover all of `U`.\n  have V_cover : U ≤ iSup V := by\n    intro x hxU\n    simp only [Opens.coe_iSup, Set.mem_iUnion, SetLike.mem_coe]\n    exact ⟨⟨x, hxU⟩, mV ⟨x, hxU⟩⟩\n  suffices IsCompatible F.val V sf by\n    -- Since `F` is a sheaf, we can glue all the local preimages together to get a global preimage.\n    obtain ⟨s, s_spec, -⟩ := F.existsUnique_gluing' V U iVU V_cover sf this\n    · use s\n      apply G.eq_of_locally_eq' V U iVU V_cover\n      intro x\n      rw [← CategoryTheory.comp_apply, ← f.1.naturality, CategoryTheory.comp_apply, s_spec, heq]\n  intro x y\n  -- What's left to show here is that the sections `sf` are compatible, i.e. they agree on\n  -- the intersections `V x ⊓ V y`. We prove this by showing that all germs are equal.\n  apply section_ext\n  intro z hz\n  -- Here, we need to use injectivity of the stalk maps.\n  apply hinj z ((iVU x).le ((inf_le_left : V x ⊓ V y ≤ V x) hz))\n  dsimp only\n  rw [stalkFunctor_map_germ_apply, stalkFunctor_map_germ_apply]\n  simp_rw [← CategoryTheory.comp_apply, f.1.naturality, CategoryTheory.comp_apply, heq,\n    ← CategoryTheory.comp_apply, ← G.1.map_comp]\n  rfl\n\n"}
{"name":"TopCat.Presheaf.app_surjective_of_stalkFunctor_map_bijective","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝⁶ : CategoryTheory.Category.{v, u} C\ninst✝⁵ : CategoryTheory.Limits.HasColimits C\nX : TopCat\ninst✝⁴ : CategoryTheory.HasForget C\ninst✝³ : CategoryTheory.Limits.PreservesFilteredColimits (CategoryTheory.forget C)\ninst✝² : CategoryTheory.Limits.HasLimits C\ninst✝¹ : CategoryTheory.Limits.PreservesLimits (CategoryTheory.forget C)\ninst✝ : (CategoryTheory.forget C).ReflectsIsomorphisms\nF G : TopCat.Sheaf C X\nf : Quiver.Hom F G\nU : TopologicalSpace.Opens ↑X\nh : ∀ (x : ↑X), Membership.mem U x → Function.Bijective ⇑((TopCat.Presheaf.stalkFunctor C x).map f.val)\n⊢ Function.Surjective ⇑(f.val.app { unop := U })","decl":"theorem app_surjective_of_stalkFunctor_map_bijective {F G : Sheaf C X} (f : F ⟶ G) (U : Opens X)\n    (h : ∀ x ∈ U, Function.Bijective ((stalkFunctor C x).map f.1)) :\n    Function.Surjective (f.1.app (op U)) := by\n  refine app_surjective_of_injective_of_locally_surjective f U (And.left <| h · ·) fun t x hx => ?_\n  -- Now we need to prove our initial claim: That we can find preimages of `t` locally.\n  -- Since `f` is surjective on stalks, we can find a preimage `s₀` of the germ of `t` at `x`\n  obtain ⟨s₀, hs₀⟩ := (h x hx).2 (G.presheaf.germ U x hx t)\n  -- ... and this preimage must come from some section `s₁` defined on some open neighborhood `V₁`\n  obtain ⟨V₁, hxV₁, s₁, hs₁⟩ := F.presheaf.germ_exist x s₀\n  subst hs₁; rename' hs₀ => hs₁\n  rw [stalkFunctor_map_germ_apply V₁ x hxV₁ f.1 s₁] at hs₁\n  -- Now, the germ of `f.app (op V₁) s₁` equals the germ of `t`, hence they must coincide on\n  -- some open neighborhood `V₂`.\n  obtain ⟨V₂, hxV₂, iV₂V₁, iV₂U, heq⟩ := G.presheaf.germ_eq x hxV₁ hx _ _ hs₁\n  -- The restriction of `s₁` to that neighborhood is our desired local preimage.\n  use V₂, hxV₂, iV₂U, F.1.map iV₂V₁.op s₁\n  rw [← CategoryTheory.comp_apply, f.1.naturality, CategoryTheory.comp_apply, heq]\n\n"}
{"name":"TopCat.Presheaf.app_bijective_of_stalkFunctor_map_bijective","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝⁶ : CategoryTheory.Category.{v, u} C\ninst✝⁵ : CategoryTheory.Limits.HasColimits C\nX : TopCat\ninst✝⁴ : CategoryTheory.HasForget C\ninst✝³ : CategoryTheory.Limits.PreservesFilteredColimits (CategoryTheory.forget C)\ninst✝² : CategoryTheory.Limits.HasLimits C\ninst✝¹ : CategoryTheory.Limits.PreservesLimits (CategoryTheory.forget C)\ninst✝ : (CategoryTheory.forget C).ReflectsIsomorphisms\nF G : TopCat.Sheaf C X\nf : Quiver.Hom F G\nU : TopologicalSpace.Opens ↑X\nh : ∀ (x : ↑X), Membership.mem U x → Function.Bijective ⇑((TopCat.Presheaf.stalkFunctor C x).map f.val)\n⊢ Function.Bijective ⇑(f.val.app { unop := U })","decl":"theorem app_bijective_of_stalkFunctor_map_bijective {F G : Sheaf C X} (f : F ⟶ G) (U : Opens X)\n    (h : ∀ x ∈ U, Function.Bijective ((stalkFunctor C x).map f.1)) :\n    Function.Bijective (f.1.app (op U)) :=\n  ⟨app_injective_of_stalkFunctor_map_injective f.1 U fun x hx => (h x hx).1,\n    app_surjective_of_stalkFunctor_map_bijective f U h⟩\n\n"}
{"name":"TopCat.Presheaf.app_isIso_of_stalkFunctor_map_iso","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝⁷ : CategoryTheory.Category.{v, u} C\ninst✝⁶ : CategoryTheory.Limits.HasColimits C\nX : TopCat\ninst✝⁵ : CategoryTheory.HasForget C\ninst✝⁴ : CategoryTheory.Limits.PreservesFilteredColimits (CategoryTheory.forget C)\ninst✝³ : CategoryTheory.Limits.HasLimits C\ninst✝² : CategoryTheory.Limits.PreservesLimits (CategoryTheory.forget C)\ninst✝¹ : (CategoryTheory.forget C).ReflectsIsomorphisms\nF G : TopCat.Sheaf C X\nf : Quiver.Hom F G\nU : TopologicalSpace.Opens ↑X\ninst✝ : ∀ (x : Subtype fun x => Membership.mem U x), CategoryTheory.IsIso ((TopCat.Presheaf.stalkFunctor C ↑x).map f.val)\n⊢ CategoryTheory.IsIso (f.val.app { unop := U })","decl":"theorem app_isIso_of_stalkFunctor_map_iso {F G : Sheaf C X} (f : F ⟶ G) (U : Opens X)\n    [∀ x : U, IsIso ((stalkFunctor C x.val).map f.1)] : IsIso (f.1.app (op U)) := by\n  -- Since the forgetful functor of `C` reflects isomorphisms, it suffices to see that the\n  -- underlying map between types is an isomorphism, i.e. bijective.\n  suffices IsIso ((forget C).map (f.1.app (op U))) by\n    exact isIso_of_reflects_iso (f.1.app (op U)) (forget C)\n  rw [isIso_iff_bijective]\n  apply app_bijective_of_stalkFunctor_map_bijective\n  intro x hx\n  apply (isIso_iff_bijective _).mp\n  exact Functor.map_isIso (forget C) ((stalkFunctor C (⟨x, hx⟩ : U).1).map f.1)\n\n-- Making this an instance would cause a loop in typeclass resolution with `Functor.map_isIso`\n"}
{"name":"TopCat.Presheaf.isIso_of_stalkFunctor_map_iso","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝⁷ : CategoryTheory.Category.{v, u} C\ninst✝⁶ : CategoryTheory.Limits.HasColimits C\nX : TopCat\ninst✝⁵ : CategoryTheory.HasForget C\ninst✝⁴ : CategoryTheory.Limits.PreservesFilteredColimits (CategoryTheory.forget C)\ninst✝³ : CategoryTheory.Limits.HasLimits C\ninst✝² : CategoryTheory.Limits.PreservesLimits (CategoryTheory.forget C)\ninst✝¹ : (CategoryTheory.forget C).ReflectsIsomorphisms\nF G : TopCat.Sheaf C X\nf : Quiver.Hom F G\ninst✝ : ∀ (x : ↑X), CategoryTheory.IsIso ((TopCat.Presheaf.stalkFunctor C x).map f.val)\n⊢ CategoryTheory.IsIso f","decl":"/-- Let `F` and `G` be sheaves valued in a concrete category, whose forgetful functor reflects\nisomorphisms, preserves limits and filtered colimits. Then if the stalk maps of a morphism\n`f : F ⟶ G` are all isomorphisms, `f` must be an isomorphism.\n-/\ntheorem isIso_of_stalkFunctor_map_iso {F G : Sheaf C X} (f : F ⟶ G)\n    [∀ x : X, IsIso ((stalkFunctor C x).map f.1)] : IsIso f := by\n  -- Since the inclusion functor from sheaves to presheaves is fully faithful, it suffices to\n  -- show that `f`, as a morphism between _presheaves_, is an isomorphism.\n  suffices IsIso ((Sheaf.forget C X).map f) by exact isIso_of_fully_faithful (Sheaf.forget C X) f\n  -- We show that all components of `f` are isomorphisms.\n  suffices ∀ U : (Opens X)ᵒᵖ, IsIso (f.1.app U) by\n    exact @NatIso.isIso_of_isIso_app _ _ _ _ F.1 G.1 f.1 this\n  intro U; induction U\n  apply app_isIso_of_stalkFunctor_map_iso\n\n"}
{"name":"TopCat.Presheaf.isIso_iff_stalkFunctor_map_iso","module":"Mathlib.Topology.Sheaves.Stalks","initialProofState":"C : Type u\ninst✝⁶ : CategoryTheory.Category.{v, u} C\ninst✝⁵ : CategoryTheory.Limits.HasColimits C\nX : TopCat\ninst✝⁴ : CategoryTheory.HasForget C\ninst✝³ : CategoryTheory.Limits.PreservesFilteredColimits (CategoryTheory.forget C)\ninst✝² : CategoryTheory.Limits.HasLimits C\ninst✝¹ : CategoryTheory.Limits.PreservesLimits (CategoryTheory.forget C)\ninst✝ : (CategoryTheory.forget C).ReflectsIsomorphisms\nF G : TopCat.Sheaf C X\nf : Quiver.Hom F G\n⊢ Iff (CategoryTheory.IsIso f) (∀ (x : ↑X), CategoryTheory.IsIso ((TopCat.Presheaf.stalkFunctor C x).map f.val))","decl":"/-- Let `F` and `G` be sheaves valued in a concrete category, whose forgetful functor reflects\nisomorphisms, preserves limits and filtered colimits. Then a morphism `f : F ⟶ G` is an\nisomorphism if and only if all of its stalk maps are isomorphisms.\n-/\ntheorem isIso_iff_stalkFunctor_map_iso {F G : Sheaf C X} (f : F ⟶ G) :\n    IsIso f ↔ ∀ x : X, IsIso ((stalkFunctor C x).map f.1) :=\n  ⟨fun _ x =>\n    @Functor.map_isIso _ _ _ _ _ _ (stalkFunctor C x) f.1 ((Sheaf.forget C X).map_isIso f),\n   fun _ => isIso_of_stalkFunctor_map_iso f⟩\n\n"}
