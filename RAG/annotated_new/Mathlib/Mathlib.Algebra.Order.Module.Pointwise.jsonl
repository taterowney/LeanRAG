{"name":"smul_lowerBounds_subset_lowerBounds_smul_of_nonneg","module":"Mathlib.Algebra.Order.Module.Pointwise","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : Zero α\ninst✝ : PosSMulMono α β\na : α\ns : Set β\nha : LE.le 0 a\n⊢ HasSubset.Subset (HSMul.hSMul a (lowerBounds s)) (lowerBounds (HSMul.hSMul a s))","decl":"lemma smul_lowerBounds_subset_lowerBounds_smul_of_nonneg (ha : 0 ≤ a) :\n    a • lowerBounds s ⊆ lowerBounds (a • s) :=\n  (monotone_smul_left_of_nonneg ha).image_lowerBounds_subset_lowerBounds_image\n\n"}
{"name":"smul_upperBounds_subset_upperBounds_smul_of_nonneg","module":"Mathlib.Algebra.Order.Module.Pointwise","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : Zero α\ninst✝ : PosSMulMono α β\na : α\ns : Set β\nha : LE.le 0 a\n⊢ HasSubset.Subset (HSMul.hSMul a (upperBounds s)) (upperBounds (HSMul.hSMul a s))","decl":"lemma smul_upperBounds_subset_upperBounds_smul_of_nonneg (ha : 0 ≤ a) :\n    a • upperBounds s ⊆ upperBounds (a • s) :=\n  (monotone_smul_left_of_nonneg ha).image_upperBounds_subset_upperBounds_image\n\n"}
{"name":"BddBelow.smul_of_nonneg","module":"Mathlib.Algebra.Order.Module.Pointwise","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : Zero α\ninst✝ : PosSMulMono α β\na : α\ns : Set β\nhs : BddBelow s\nha : LE.le 0 a\n⊢ BddBelow (HSMul.hSMul a s)","decl":"lemma BddBelow.smul_of_nonneg (hs : BddBelow s) (ha : 0 ≤ a) : BddBelow (a • s) :=\n  (monotone_smul_left_of_nonneg ha).map_bddBelow hs\n\n"}
{"name":"BddAbove.smul_of_nonneg","module":"Mathlib.Algebra.Order.Module.Pointwise","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : Zero α\ninst✝ : PosSMulMono α β\na : α\ns : Set β\nhs : BddAbove s\nha : LE.le 0 a\n⊢ BddAbove (HSMul.hSMul a s)","decl":"lemma BddAbove.smul_of_nonneg (hs : BddAbove s) (ha : 0 ≤ a) : BddAbove (a • s) :=\n  (monotone_smul_left_of_nonneg ha).map_bddAbove hs\n\n"}
{"name":"lowerBounds_smul_of_pos","module":"Mathlib.Algebra.Order.Module.Pointwise","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁶ : Preorder α\ninst✝⁵ : Preorder β\ninst✝⁴ : GroupWithZero α\ninst✝³ : Zero β\ninst✝² : MulActionWithZero α β\ninst✝¹ : PosSMulMono α β\ninst✝ : PosSMulReflectLE α β\ns : Set β\na : α\nha : LT.lt 0 a\n⊢ Eq (lowerBounds (HSMul.hSMul a s)) (HSMul.hSMul a (lowerBounds s))","decl":"@[simp] lemma lowerBounds_smul_of_pos (ha : 0 < a) : lowerBounds (a • s) = a • lowerBounds s :=\n  (OrderIso.smulRight ha).lowerBounds_image\n\n"}
{"name":"upperBounds_smul_of_pos","module":"Mathlib.Algebra.Order.Module.Pointwise","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁶ : Preorder α\ninst✝⁵ : Preorder β\ninst✝⁴ : GroupWithZero α\ninst✝³ : Zero β\ninst✝² : MulActionWithZero α β\ninst✝¹ : PosSMulMono α β\ninst✝ : PosSMulReflectLE α β\ns : Set β\na : α\nha : LT.lt 0 a\n⊢ Eq (upperBounds (HSMul.hSMul a s)) (HSMul.hSMul a (upperBounds s))","decl":"@[simp] lemma upperBounds_smul_of_pos (ha : 0 < a) : upperBounds (a • s) = a • upperBounds s :=\n  (OrderIso.smulRight ha).upperBounds_image\n\n"}
{"name":"bddBelow_smul_iff_of_pos","module":"Mathlib.Algebra.Order.Module.Pointwise","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁶ : Preorder α\ninst✝⁵ : Preorder β\ninst✝⁴ : GroupWithZero α\ninst✝³ : Zero β\ninst✝² : MulActionWithZero α β\ninst✝¹ : PosSMulMono α β\ninst✝ : PosSMulReflectLE α β\ns : Set β\na : α\nha : LT.lt 0 a\n⊢ Iff (BddBelow (HSMul.hSMul a s)) (BddBelow s)","decl":"@[simp] lemma bddBelow_smul_iff_of_pos (ha : 0 < a) : BddBelow (a • s) ↔ BddBelow s :=\n  (OrderIso.smulRight ha).bddBelow_image\n\n"}
{"name":"bddAbove_smul_iff_of_pos","module":"Mathlib.Algebra.Order.Module.Pointwise","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁶ : Preorder α\ninst✝⁵ : Preorder β\ninst✝⁴ : GroupWithZero α\ninst✝³ : Zero β\ninst✝² : MulActionWithZero α β\ninst✝¹ : PosSMulMono α β\ninst✝ : PosSMulReflectLE α β\ns : Set β\na : α\nha : LT.lt 0 a\n⊢ Iff (BddAbove (HSMul.hSMul a s)) (BddAbove s)","decl":"@[simp] lemma bddAbove_smul_iff_of_pos (ha : 0 < a) : BddAbove (a • s) ↔ BddAbove s :=\n  (OrderIso.smulRight ha).bddAbove_image\n\n"}
{"name":"smul_lowerBounds_subset_upperBounds_smul","module":"Mathlib.Algebra.Order.Module.Pointwise","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : OrderedRing α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulMono α β\ns : Set β\na : α\nha : LE.le a 0\n⊢ HasSubset.Subset (HSMul.hSMul a (lowerBounds s)) (upperBounds (HSMul.hSMul a s))","decl":"lemma smul_lowerBounds_subset_upperBounds_smul (ha : a ≤ 0) :\n    a • lowerBounds s ⊆ upperBounds (a • s) :=\n  (antitone_smul_left ha).image_lowerBounds_subset_upperBounds_image\n\n"}
{"name":"smul_upperBounds_subset_lowerBounds_smul","module":"Mathlib.Algebra.Order.Module.Pointwise","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : OrderedRing α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulMono α β\ns : Set β\na : α\nha : LE.le a 0\n⊢ HasSubset.Subset (HSMul.hSMul a (upperBounds s)) (lowerBounds (HSMul.hSMul a s))","decl":"lemma smul_upperBounds_subset_lowerBounds_smul (ha : a ≤ 0) :\n    a • upperBounds s ⊆ lowerBounds (a • s) :=\n  (antitone_smul_left ha).image_upperBounds_subset_lowerBounds_image\n\n"}
{"name":"BddBelow.smul_of_nonpos","module":"Mathlib.Algebra.Order.Module.Pointwise","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : OrderedRing α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulMono α β\ns : Set β\na : α\nha : LE.le a 0\nhs : BddBelow s\n⊢ BddAbove (HSMul.hSMul a s)","decl":"lemma BddBelow.smul_of_nonpos (ha : a ≤ 0) (hs : BddBelow s) : BddAbove (a • s) :=\n  (antitone_smul_left ha).map_bddBelow hs\n\n"}
{"name":"BddAbove.smul_of_nonpos","module":"Mathlib.Algebra.Order.Module.Pointwise","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : OrderedRing α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulMono α β\ns : Set β\na : α\nha : LE.le a 0\nhs : BddAbove s\n⊢ BddBelow (HSMul.hSMul a s)","decl":"lemma BddAbove.smul_of_nonpos (ha : a ≤ 0) (hs : BddAbove s) : BddBelow (a • s) :=\n  (antitone_smul_left ha).map_bddAbove hs\n\n"}
{"name":"lowerBounds_smul_of_neg","module":"Mathlib.Algebra.Order.Module.Pointwise","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrderedField α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulMono α β\ns : Set β\na : α\nha : LT.lt a 0\n⊢ Eq (lowerBounds (HSMul.hSMul a s)) (HSMul.hSMul a (upperBounds s))","decl":"@[simp] lemma lowerBounds_smul_of_neg (ha : a < 0) : lowerBounds (a • s) = a • upperBounds s :=\n  (OrderIso.smulRightDual β ha).upperBounds_image\n\n"}
{"name":"upperBounds_smul_of_neg","module":"Mathlib.Algebra.Order.Module.Pointwise","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrderedField α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulMono α β\ns : Set β\na : α\nha : LT.lt a 0\n⊢ Eq (upperBounds (HSMul.hSMul a s)) (HSMul.hSMul a (lowerBounds s))","decl":"@[simp] lemma upperBounds_smul_of_neg (ha : a < 0) : upperBounds (a • s) = a • lowerBounds s :=\n  (OrderIso.smulRightDual β ha).lowerBounds_image\n\n"}
{"name":"bddBelow_smul_iff_of_neg","module":"Mathlib.Algebra.Order.Module.Pointwise","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrderedField α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulMono α β\ns : Set β\na : α\nha : LT.lt a 0\n⊢ Iff (BddBelow (HSMul.hSMul a s)) (BddAbove s)","decl":"@[simp] lemma bddBelow_smul_iff_of_neg (ha : a < 0) : BddBelow (a • s) ↔ BddAbove s :=\n  (OrderIso.smulRightDual β ha).bddAbove_image\n\n"}
{"name":"bddAbove_smul_iff_of_neg","module":"Mathlib.Algebra.Order.Module.Pointwise","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrderedField α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulMono α β\ns : Set β\na : α\nha : LT.lt a 0\n⊢ Iff (BddAbove (HSMul.hSMul a s)) (BddBelow s)","decl":"@[simp] lemma bddAbove_smul_iff_of_neg (ha : a < 0) : BddAbove (a • s) ↔ BddBelow s :=\n  (OrderIso.smulRightDual β ha).bddBelow_image\n\n"}
