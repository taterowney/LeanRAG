{"name":"NonarchimedeanAddGroup.toTopologicalAddGroup","module":"Mathlib.Topology.Algebra.Nonarchimedean.Basic","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nself : NonarchimedeanAddGroup G\n⊢ TopologicalAddGroup G","decl":"/-- A topological additive group is nonarchimedean if every neighborhood of 0\n  contains an open subgroup. -/\nclass NonarchimedeanAddGroup (G : Type*) [AddGroup G] [TopologicalSpace G] extends\n  TopologicalAddGroup G : Prop where\n  is_nonarchimedean : ∀ U ∈ 𝓝 (0 : G), ∃ V : OpenAddSubgroup G, (V : Set G) ⊆ U\n\n"}
{"name":"NonarchimedeanAddGroup.is_nonarchimedean","module":"Mathlib.Topology.Algebra.Nonarchimedean.Basic","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nself : NonarchimedeanAddGroup G\nU : Set G\na✝ : Membership.mem (nhds 0) U\n⊢ Exists fun V => HasSubset.Subset (↑V) U","decl":"/-- A topological additive group is nonarchimedean if every neighborhood of 0\n  contains an open subgroup. -/\nclass NonarchimedeanAddGroup (G : Type*) [AddGroup G] [TopologicalSpace G] extends\n  TopologicalAddGroup G : Prop where\n  is_nonarchimedean : ∀ U ∈ 𝓝 (0 : G), ∃ V : OpenAddSubgroup G, (V : Set G) ⊆ U\n\n"}
{"name":"NonarchimedeanGroup.toTopologicalGroup","module":"Mathlib.Topology.Algebra.Nonarchimedean.Basic","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nself : NonarchimedeanGroup G\n⊢ TopologicalGroup G","decl":"/-- A topological group is nonarchimedean if every neighborhood of 1 contains an open subgroup. -/\n@[to_additive]\nclass NonarchimedeanGroup (G : Type*) [Group G] [TopologicalSpace G] extends TopologicalGroup G :\n  Prop where\n  is_nonarchimedean : ∀ U ∈ 𝓝 (1 : G), ∃ V : OpenSubgroup G, (V : Set G) ⊆ U\n\n"}
{"name":"NonarchimedeanGroup.is_nonarchimedean","module":"Mathlib.Topology.Algebra.Nonarchimedean.Basic","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nself : NonarchimedeanGroup G\nU : Set G\na✝ : Membership.mem (nhds 1) U\n⊢ Exists fun V => HasSubset.Subset (↑V) U","decl":"/-- A topological group is nonarchimedean if every neighborhood of 1 contains an open subgroup. -/\n@[to_additive]\nclass NonarchimedeanGroup (G : Type*) [Group G] [TopologicalSpace G] extends TopologicalGroup G :\n  Prop where\n  is_nonarchimedean : ∀ U ∈ 𝓝 (1 : G), ∃ V : OpenSubgroup G, (V : Set G) ⊆ U\n\n"}
{"name":"NonarchimedeanRing.is_nonarchimedean","module":"Mathlib.Topology.Algebra.Nonarchimedean.Basic","initialProofState":"R : Type u_1\ninst✝¹ : Ring R\ninst✝ : TopologicalSpace R\nself : NonarchimedeanRing R\nU : Set R\na✝ : Membership.mem (nhds 0) U\n⊢ Exists fun V => HasSubset.Subset (↑V) U","decl":"/-- A topological ring is nonarchimedean if its underlying topological additive\n  group is nonarchimedean. -/\nclass NonarchimedeanRing (R : Type*) [Ring R] [TopologicalSpace R] extends TopologicalRing R :\n  Prop where\n  is_nonarchimedean : ∀ U ∈ 𝓝 (0 : R), ∃ V : OpenAddSubgroup R, (V : Set R) ⊆ U\n\n-- see Note [lower instance priority]\n"}
{"name":"NonarchimedeanRing.toTopologicalRing","module":"Mathlib.Topology.Algebra.Nonarchimedean.Basic","initialProofState":"R : Type u_1\ninst✝¹ : Ring R\ninst✝ : TopologicalSpace R\nself : NonarchimedeanRing R\n⊢ TopologicalRing R","decl":"/-- A topological ring is nonarchimedean if its underlying topological additive\n  group is nonarchimedean. -/\nclass NonarchimedeanRing (R : Type*) [Ring R] [TopologicalSpace R] extends TopologicalRing R :\n  Prop where\n  is_nonarchimedean : ∀ U ∈ 𝓝 (0 : R), ∃ V : OpenAddSubgroup R, (V : Set R) ⊆ U\n\n-- see Note [lower instance priority]\n"}
{"name":"NonarchimedeanRing.to_nonarchimedeanAddGroup","module":"Mathlib.Topology.Algebra.Nonarchimedean.Basic","initialProofState":"R : Type u_1\ninst✝¹ : Ring R\ninst✝ : TopologicalSpace R\nt : NonarchimedeanRing R\n⊢ NonarchimedeanAddGroup R","decl":"/-- Every nonarchimedean ring is naturally a nonarchimedean additive group. -/\ninstance (priority := 100) NonarchimedeanRing.to_nonarchimedeanAddGroup (R : Type*) [Ring R]\n    [TopologicalSpace R] [t : NonarchimedeanRing R] : NonarchimedeanAddGroup R :=\n  { t with }\n\n"}
{"name":"NonarchimedeanAddGroup.nonarchimedean_of_emb","module":"Mathlib.Topology.Algebra.Nonarchimedean.Basic","initialProofState":"G : Type u_1\ninst✝⁵ : AddGroup G\ninst✝⁴ : TopologicalSpace G\ninst✝³ : NonarchimedeanAddGroup G\nH : Type u_2\ninst✝² : AddGroup H\ninst✝¹ : TopologicalSpace H\ninst✝ : TopologicalAddGroup H\nf : AddMonoidHom G H\nemb : Topology.IsOpenEmbedding ⇑f\n⊢ NonarchimedeanAddGroup H","decl":"/-- If a topological group embeds into a nonarchimedean group, then it is nonarchimedean. -/\n@[to_additive]\ntheorem nonarchimedean_of_emb (f : G →* H) (emb : IsOpenEmbedding f) : NonarchimedeanGroup H :=\n  { is_nonarchimedean := fun U hU =>\n      have h₁ : f ⁻¹' U ∈ 𝓝 (1 : G) := by\n        apply emb.continuous.tendsto\n        rwa [f.map_one]\n      let ⟨V, hV⟩ := is_nonarchimedean (f ⁻¹' U) h₁\n      ⟨{ Subgroup.map f V with isOpen' := emb.isOpenMap _ V.isOpen }, Set.image_subset_iff.2 hV⟩ }\n\n"}
{"name":"NonarchimedeanGroup.nonarchimedean_of_emb","module":"Mathlib.Topology.Algebra.Nonarchimedean.Basic","initialProofState":"G : Type u_1\ninst✝⁵ : Group G\ninst✝⁴ : TopologicalSpace G\ninst✝³ : NonarchimedeanGroup G\nH : Type u_2\ninst✝² : Group H\ninst✝¹ : TopologicalSpace H\ninst✝ : TopologicalGroup H\nf : MonoidHom G H\nemb : Topology.IsOpenEmbedding ⇑f\n⊢ NonarchimedeanGroup H","decl":"/-- If a topological group embeds into a nonarchimedean group, then it is nonarchimedean. -/\n@[to_additive]\ntheorem nonarchimedean_of_emb (f : G →* H) (emb : IsOpenEmbedding f) : NonarchimedeanGroup H :=\n  { is_nonarchimedean := fun U hU =>\n      have h₁ : f ⁻¹' U ∈ 𝓝 (1 : G) := by\n        apply emb.continuous.tendsto\n        rwa [f.map_one]\n      let ⟨V, hV⟩ := is_nonarchimedean (f ⁻¹' U) h₁\n      ⟨{ Subgroup.map f V with isOpen' := emb.isOpenMap _ V.isOpen }, Set.image_subset_iff.2 hV⟩ }\n\n"}
{"name":"NonarchimedeanAddGroup.prod_subset","module":"Mathlib.Topology.Algebra.Nonarchimedean.Basic","initialProofState":"G : Type u_1\ninst✝⁵ : AddGroup G\ninst✝⁴ : TopologicalSpace G\ninst✝³ : NonarchimedeanAddGroup G\nK : Type u_3\ninst✝² : AddGroup K\ninst✝¹ : TopologicalSpace K\ninst✝ : NonarchimedeanAddGroup K\nU : Set (Prod G K)\nhU : Membership.mem (nhds 0) U\n⊢ Exists fun V => Exists fun W => HasSubset.Subset (SProd.sprod ↑V ↑W) U","decl":"/-- An open neighborhood of the identity in the cartesian product of two nonarchimedean groups\ncontains the cartesian product of an open neighborhood in each group. -/\n@[to_additive NonarchimedeanAddGroup.prod_subset \"An open neighborhood of the identity in\nthe cartesian product of two nonarchimedean groups contains the cartesian product of\nan open neighborhood in each group.\"]\ntheorem prod_subset {U} (hU : U ∈ 𝓝 (1 : G × K)) :\n    ∃ (V : OpenSubgroup G) (W : OpenSubgroup K), (V : Set G) ×ˢ (W : Set K) ⊆ U := by\n  rw [nhds_prod_eq, Filter.mem_prod_iff] at hU\n  rcases hU with ⟨U₁, hU₁, U₂, hU₂, h⟩\n  cases' is_nonarchimedean _ hU₁ with V hV\n  cases' is_nonarchimedean _ hU₂ with W hW\n  use V; use W\n  rw [Set.prod_subset_iff]\n  intro x hX y hY\n  exact Set.Subset.trans (Set.prod_mono hV hW) h (Set.mem_sep hX hY)\n\n"}
{"name":"NonarchimedeanGroup.prod_subset","module":"Mathlib.Topology.Algebra.Nonarchimedean.Basic","initialProofState":"G : Type u_1\ninst✝⁵ : Group G\ninst✝⁴ : TopologicalSpace G\ninst✝³ : NonarchimedeanGroup G\nK : Type u_3\ninst✝² : Group K\ninst✝¹ : TopologicalSpace K\ninst✝ : NonarchimedeanGroup K\nU : Set (Prod G K)\nhU : Membership.mem (nhds 1) U\n⊢ Exists fun V => Exists fun W => HasSubset.Subset (SProd.sprod ↑V ↑W) U","decl":"/-- An open neighborhood of the identity in the cartesian product of two nonarchimedean groups\ncontains the cartesian product of an open neighborhood in each group. -/\n@[to_additive NonarchimedeanAddGroup.prod_subset \"An open neighborhood of the identity in\nthe cartesian product of two nonarchimedean groups contains the cartesian product of\nan open neighborhood in each group.\"]\ntheorem prod_subset {U} (hU : U ∈ 𝓝 (1 : G × K)) :\n    ∃ (V : OpenSubgroup G) (W : OpenSubgroup K), (V : Set G) ×ˢ (W : Set K) ⊆ U := by\n  rw [nhds_prod_eq, Filter.mem_prod_iff] at hU\n  rcases hU with ⟨U₁, hU₁, U₂, hU₂, h⟩\n  cases' is_nonarchimedean _ hU₁ with V hV\n  cases' is_nonarchimedean _ hU₂ with W hW\n  use V; use W\n  rw [Set.prod_subset_iff]\n  intro x hX y hY\n  exact Set.Subset.trans (Set.prod_mono hV hW) h (Set.mem_sep hX hY)\n\n"}
{"name":"NonarchimedeanAddGroup.prod_self_subset","module":"Mathlib.Topology.Algebra.Nonarchimedean.Basic","initialProofState":"G : Type u_1\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : NonarchimedeanAddGroup G\nU : Set (Prod G G)\nhU : Membership.mem (nhds 0) U\n⊢ Exists fun V => HasSubset.Subset (SProd.sprod ↑V ↑V) U","decl":"/-- An open neighborhood of the identity in the cartesian square of a nonarchimedean group\ncontains the cartesian square of an open neighborhood in the group. -/\n@[to_additive NonarchimedeanAddGroup.prod_self_subset \"An open neighborhood of the identity in\nthe cartesian square of a nonarchimedean group contains the cartesian square of\nan open neighborhood in the group.\"]\ntheorem prod_self_subset {U} (hU : U ∈ 𝓝 (1 : G × G)) :\n    ∃ V : OpenSubgroup G, (V : Set G) ×ˢ (V : Set G) ⊆ U :=\n  let ⟨V, W, h⟩ := prod_subset hU\n  ⟨V ⊓ W, by refine Set.Subset.trans (Set.prod_mono ?_ ?_) ‹_› <;> simp⟩\n\n"}
{"name":"NonarchimedeanGroup.prod_self_subset","module":"Mathlib.Topology.Algebra.Nonarchimedean.Basic","initialProofState":"G : Type u_1\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : NonarchimedeanGroup G\nU : Set (Prod G G)\nhU : Membership.mem (nhds 1) U\n⊢ Exists fun V => HasSubset.Subset (SProd.sprod ↑V ↑V) U","decl":"/-- An open neighborhood of the identity in the cartesian square of a nonarchimedean group\ncontains the cartesian square of an open neighborhood in the group. -/\n@[to_additive NonarchimedeanAddGroup.prod_self_subset \"An open neighborhood of the identity in\nthe cartesian square of a nonarchimedean group contains the cartesian square of\nan open neighborhood in the group.\"]\ntheorem prod_self_subset {U} (hU : U ∈ 𝓝 (1 : G × G)) :\n    ∃ V : OpenSubgroup G, (V : Set G) ×ˢ (V : Set G) ⊆ U :=\n  let ⟨V, W, h⟩ := prod_subset hU\n  ⟨V ⊓ W, by refine Set.Subset.trans (Set.prod_mono ?_ ?_) ‹_› <;> simp⟩\n\n"}
{"name":"NonarchimedeanGroup.instProd","module":"Mathlib.Topology.Algebra.Nonarchimedean.Basic","initialProofState":"G : Type u_1\ninst✝⁵ : Group G\ninst✝⁴ : TopologicalSpace G\ninst✝³ : NonarchimedeanGroup G\nK : Type u_3\ninst✝² : Group K\ninst✝¹ : TopologicalSpace K\ninst✝ : NonarchimedeanGroup K\n⊢ NonarchimedeanGroup (Prod G K)","decl":"/-- The cartesian product of two nonarchimedean groups is nonarchimedean. -/\n@[to_additive \"The cartesian product of two nonarchimedean groups is nonarchimedean.\"]\ninstance : NonarchimedeanGroup (G × K) where\n  is_nonarchimedean _ hU :=\n    let ⟨V, W, h⟩ := prod_subset hU\n    ⟨V.prod W, ‹_›⟩\n\n"}
{"name":"NonarchimedeanAddGroup.instSum","module":"Mathlib.Topology.Algebra.Nonarchimedean.Basic","initialProofState":"G : Type u_1\ninst✝⁵ : AddGroup G\ninst✝⁴ : TopologicalSpace G\ninst✝³ : NonarchimedeanAddGroup G\nK : Type u_3\ninst✝² : AddGroup K\ninst✝¹ : TopologicalSpace K\ninst✝ : NonarchimedeanAddGroup K\n⊢ NonarchimedeanAddGroup (Prod G K)","decl":"/-- The cartesian product of two nonarchimedean groups is nonarchimedean. -/\n@[to_additive \"The cartesian product of two nonarchimedean groups is nonarchimedean.\"]\ninstance : NonarchimedeanGroup (G × K) where\n  is_nonarchimedean _ hU :=\n    let ⟨V, W, h⟩ := prod_subset hU\n    ⟨V.prod W, ‹_›⟩\n\n"}
{"name":"NonarchimedeanRing.instProd","module":"Mathlib.Topology.Algebra.Nonarchimedean.Basic","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝⁵ : Ring R\ninst✝⁴ : TopologicalSpace R\ninst✝³ : NonarchimedeanRing R\ninst✝² : Ring S\ninst✝¹ : TopologicalSpace S\ninst✝ : NonarchimedeanRing S\n⊢ NonarchimedeanRing (Prod R S)","decl":"/-- The cartesian product of two nonarchimedean rings is nonarchimedean. -/\ninstance : NonarchimedeanRing (R × S) where\n  is_nonarchimedean := NonarchimedeanAddGroup.is_nonarchimedean\n\n"}
{"name":"NonarchimedeanRing.left_mul_subset","module":"Mathlib.Topology.Algebra.Nonarchimedean.Basic","initialProofState":"R : Type u_1\ninst✝² : Ring R\ninst✝¹ : TopologicalSpace R\ninst✝ : NonarchimedeanRing R\nU : OpenAddSubgroup R\nr : R\n⊢ Exists fun V => HasSubset.Subset (HSMul.hSMul r ↑V) ↑U","decl":"/-- Given an open subgroup `U` and an element `r` of a nonarchimedean ring, there is an open\n  subgroup `V` such that `r • V` is contained in `U`. -/\ntheorem left_mul_subset (U : OpenAddSubgroup R) (r : R) :\n    ∃ V : OpenAddSubgroup R, r • (V : Set R) ⊆ U :=\n  ⟨U.comap (AddMonoidHom.mulLeft r) (continuous_mul_left r), (U : Set R).image_preimage_subset _⟩\n\n"}
{"name":"NonarchimedeanRing.mul_subset","module":"Mathlib.Topology.Algebra.Nonarchimedean.Basic","initialProofState":"R : Type u_1\ninst✝² : Ring R\ninst✝¹ : TopologicalSpace R\ninst✝ : NonarchimedeanRing R\nU : OpenAddSubgroup R\n⊢ Exists fun V => HasSubset.Subset (HMul.hMul ↑V ↑V) ↑U","decl":"/-- An open subgroup of a nonarchimedean ring contains the square of another one. -/\ntheorem mul_subset (U : OpenAddSubgroup R) : ∃ V : OpenAddSubgroup R, (V : Set R) * V ⊆ U := by\n  let ⟨V, H⟩ := prod_self_subset <| (U.isOpen.preimage continuous_mul).mem_nhds <| by\n    simpa only [Set.mem_preimage, Prod.snd_zero, mul_zero] using U.zero_mem\n  use V\n  rintro v ⟨a, ha, b, hb, hv⟩\n  have hy := H (Set.mk_mem_prod ha hb)\n  simp only [Set.mem_preimage, SetLike.mem_coe, hv] at hy\n  rw [SetLike.mem_coe]\n  exact hy\n\n"}
