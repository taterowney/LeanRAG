{"name":"hasFDerivWithinAt_closure_of_tendsto_fderiv","module":"Mathlib.Analysis.Calculus.FDeriv.Extend","initialProofState":"E : Type u_1\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\nF : Type u_2\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace Real F\nf : E → F\ns : Set E\nx : E\nf' : ContinuousLinearMap (RingHom.id Real) E F\nf_diff : DifferentiableOn Real f s\ns_conv : Convex Real s\ns_open : IsOpen s\nf_cont : ∀ (y : E), Membership.mem (closure s) y → ContinuousWithinAt f s y\nh : Filter.Tendsto (fun y => fderiv Real f y) (nhdsWithin x s) (nhds f')\n⊢ HasFDerivWithinAt f f' (closure s) x","decl":"/-- If a function `f` is differentiable in a convex open set and continuous on its closure, and its\nderivative converges to a limit `f'` at a point on the boundary, then `f` is differentiable there\nwith derivative `f'`. -/\ntheorem hasFDerivWithinAt_closure_of_tendsto_fderiv {f : E → F} {s : Set E} {x : E} {f' : E →L[ℝ] F}\n    (f_diff : DifferentiableOn ℝ f s) (s_conv : Convex ℝ s) (s_open : IsOpen s)\n    (f_cont : ∀ y ∈ closure s, ContinuousWithinAt f s y)\n    (h : Tendsto (fun y => fderiv ℝ f y) (𝓝[s] x) (𝓝 f')) :\n    HasFDerivWithinAt f f' (closure s) x := by\n  classical\n    -- one can assume without loss of generality that `x` belongs to the closure of `s`, as the\n    -- statement is empty otherwise\n    by_cases hx : x ∉ closure s\n    · rw [← closure_closure] at hx; exact hasFDerivWithinAt_of_nmem_closure hx\n    push_neg at hx\n    rw [HasFDerivWithinAt, hasFDerivAtFilter_iff_isLittleO, Asymptotics.isLittleO_iff]\n    /- One needs to show that `‖f y - f x - f' (y - x)‖ ≤ ε ‖y - x‖` for `y` close to `x` in\n      `closure s`, where `ε` is an arbitrary positive constant. By continuity of the functions, it\n      suffices to prove this for nearby points inside `s`. In a neighborhood of `x`, the derivative\n      of `f` is arbitrarily close to `f'` by assumption. The mean value inequality completes the\n      proof. -/\n    intro ε ε_pos\n    obtain ⟨δ, δ_pos, hδ⟩ : ∃ δ > 0, ∀ y ∈ s, dist y x < δ → ‖fderiv ℝ f y - f'‖ < ε := by\n      simpa [dist_zero_right] using tendsto_nhdsWithin_nhds.1 h ε ε_pos\n    set B := ball x δ\n    suffices ∀ y ∈ B ∩ closure s, ‖f y - f x - (f' y - f' x)‖ ≤ ε * ‖y - x‖ from\n      mem_nhdsWithin_iff.2 ⟨δ, δ_pos, fun y hy => by simpa using this y hy⟩\n    suffices\n      ∀ p : E × E,\n        p ∈ closure ((B ∩ s) ×ˢ (B ∩ s)) → ‖f p.2 - f p.1 - (f' p.2 - f' p.1)‖ ≤ ε * ‖p.2 - p.1‖ by\n      rw [closure_prod_eq] at this\n      intro y y_in\n      apply this ⟨x, y⟩\n      have : B ∩ closure s ⊆ closure (B ∩ s) := isOpen_ball.inter_closure\n      exact ⟨this ⟨mem_ball_self δ_pos, hx⟩, this y_in⟩\n    have key : ∀ p : E × E, p ∈ (B ∩ s) ×ˢ (B ∩ s) →\n          ‖f p.2 - f p.1 - (f' p.2 - f' p.1)‖ ≤ ε * ‖p.2 - p.1‖ := by\n      rintro ⟨u, v⟩ ⟨u_in, v_in⟩\n      have conv : Convex ℝ (B ∩ s) := (convex_ball _ _).inter s_conv\n      have diff : DifferentiableOn ℝ f (B ∩ s) := f_diff.mono inter_subset_right\n      have bound : ∀ z ∈ B ∩ s, ‖fderivWithin ℝ f (B ∩ s) z - f'‖ ≤ ε := by\n        intro z z_in\n        have h := hδ z\n        have : fderivWithin ℝ f (B ∩ s) z = fderiv ℝ f z := by\n          have op : IsOpen (B ∩ s) := isOpen_ball.inter s_open\n          rw [DifferentiableAt.fderivWithin _ (op.uniqueDiffOn z z_in)]\n          exact (diff z z_in).differentiableAt (IsOpen.mem_nhds op z_in)\n        rw [← this] at h\n        exact le_of_lt (h z_in.2 z_in.1)\n      simpa using conv.norm_image_sub_le_of_norm_fderivWithin_le' diff bound u_in v_in\n    rintro ⟨u, v⟩ uv_in\n    have f_cont' : ∀ y ∈ closure s, ContinuousWithinAt (f -  ⇑f') s y := by\n      intro y y_in\n      exact Tendsto.sub (f_cont y y_in) f'.cont.continuousWithinAt\n    refine ContinuousWithinAt.closure_le uv_in ?_ ?_ key\n    all_goals\n      -- common start for both continuity proofs\n      have : (B ∩ s) ×ˢ (B ∩ s) ⊆ s ×ˢ s := by gcongr <;> exact inter_subset_right\n      obtain ⟨u_in, v_in⟩ : u ∈ closure s ∧ v ∈ closure s := by\n        simpa [closure_prod_eq] using closure_mono this uv_in\n      apply ContinuousWithinAt.mono _ this\n      simp only [ContinuousWithinAt]\n    · rw [nhdsWithin_prod_eq]\n      have : ∀ u v, f v - f u - (f' v - f' u) = f v - f' v - (f u - f' u) := by intros; abel\n      simp only [this]\n      exact\n        Tendsto.comp continuous_norm.continuousAt\n          ((Tendsto.comp (f_cont' v v_in) tendsto_snd).sub <|\n            Tendsto.comp (f_cont' u u_in) tendsto_fst)\n    · apply tendsto_nhdsWithin_of_tendsto_nhds\n      rw [nhds_prod_eq]\n      exact\n        tendsto_const_nhds.mul\n          (Tendsto.comp continuous_norm.continuousAt <| tendsto_snd.sub tendsto_fst)\n\n"}
{"name":"hasDerivWithinAt_Ici_of_tendsto_deriv","module":"Mathlib.Analysis.Calculus.FDeriv.Extend","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\ns : Set Real\ne : E\na : Real\nf : Real → E\nf_diff : DifferentiableOn Real f s\nf_lim : ContinuousWithinAt f s a\nhs : Membership.mem (nhdsWithin a (Set.Ioi a)) s\nf_lim' : Filter.Tendsto (fun x => deriv f x) (nhdsWithin a (Set.Ioi a)) (nhds e)\n⊢ HasDerivWithinAt f e (Set.Ici a) a","decl":"/-- If a function is differentiable on the right of a point `a : ℝ`, continuous at `a`, and\nits derivative also converges at `a`, then `f` is differentiable on the right at `a`. -/\ntheorem hasDerivWithinAt_Ici_of_tendsto_deriv {s : Set ℝ} {e : E} {a : ℝ} {f : ℝ → E}\n    (f_diff : DifferentiableOn ℝ f s) (f_lim : ContinuousWithinAt f s a) (hs : s ∈ 𝓝[>] a)\n    (f_lim' : Tendsto (fun x => deriv f x) (𝓝[>] a) (𝓝 e)) : HasDerivWithinAt f e (Ici a) a := by\n  /- This is a specialization of `hasFDerivWithinAt_closure_of_tendsto_fderiv`. To be in the\n    setting of this theorem, we need to work on an open interval with closure contained in\n    `s ∪ {a}`, that we call `t = (a, b)`. Then, we check all the assumptions of this theorem and\n    we apply it. -/\n  obtain ⟨b, ab : a < b, sab : Ioc a b ⊆ s⟩ := mem_nhdsGT_iff_exists_Ioc_subset.1 hs\n  let t := Ioo a b\n  have ts : t ⊆ s := Subset.trans Ioo_subset_Ioc_self sab\n  have t_diff : DifferentiableOn ℝ f t := f_diff.mono ts\n  have t_conv : Convex ℝ t := convex_Ioo a b\n  have t_open : IsOpen t := isOpen_Ioo\n  have t_closure : closure t = Icc a b := closure_Ioo ab.ne\n  have t_cont : ∀ y ∈ closure t, ContinuousWithinAt f t y := by\n    rw [t_closure]\n    intro y hy\n    by_cases h : y = a\n    · rw [h]; exact f_lim.mono ts\n    · have : y ∈ s := sab ⟨lt_of_le_of_ne hy.1 (Ne.symm h), hy.2⟩\n      exact (f_diff.continuousOn y this).mono ts\n  have t_diff' : Tendsto (fun x => fderiv ℝ f x) (𝓝[t] a) (𝓝 (smulRight (1 : ℝ →L[ℝ] ℝ) e)) := by\n    simp only [deriv_fderiv.symm]\n    exact Tendsto.comp\n      (isBoundedBilinearMap_smulRight : IsBoundedBilinearMap ℝ _).continuous_right.continuousAt\n      (tendsto_nhdsWithin_mono_left Ioo_subset_Ioi_self f_lim')\n  -- now we can apply `hasFDerivWithinAt_closure_of_tendsto_fderiv`\n  have : HasDerivWithinAt f e (Icc a b) a := by\n    rw [hasDerivWithinAt_iff_hasFDerivWithinAt, ← t_closure]\n    exact hasFDerivWithinAt_closure_of_tendsto_fderiv t_diff t_conv t_open t_cont t_diff'\n  exact this.mono_of_mem_nhdsWithin (Icc_mem_nhdsGE ab)\n\n"}
{"name":"hasDerivWithinAt_Iic_of_tendsto_deriv","module":"Mathlib.Analysis.Calculus.FDeriv.Extend","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\ns : Set Real\ne : E\na : Real\nf : Real → E\nf_diff : DifferentiableOn Real f s\nf_lim : ContinuousWithinAt f s a\nhs : Membership.mem (nhdsWithin a (Set.Iio a)) s\nf_lim' : Filter.Tendsto (fun x => deriv f x) (nhdsWithin a (Set.Iio a)) (nhds e)\n⊢ HasDerivWithinAt f e (Set.Iic a) a","decl":"/-- If a function is differentiable on the left of a point `a : ℝ`, continuous at `a`, and\nits derivative also converges at `a`, then `f` is differentiable on the left at `a`. -/\ntheorem hasDerivWithinAt_Iic_of_tendsto_deriv {s : Set ℝ} {e : E} {a : ℝ}\n    {f : ℝ → E} (f_diff : DifferentiableOn ℝ f s) (f_lim : ContinuousWithinAt f s a)\n    (hs : s ∈ 𝓝[<] a) (f_lim' : Tendsto (fun x => deriv f x) (𝓝[<] a) (𝓝 e)) :\n    HasDerivWithinAt f e (Iic a) a := by\n  /- This is a specialization of `hasFDerivWithinAt_closure_of_tendsto_fderiv`. To be in the\n    setting of this theorem, we need to work on an open interval with closure contained in\n    `s ∪ {a}`, that we call `t = (b, a)`. Then, we check all the assumptions of this theorem and we\n    apply it. -/\n  obtain ⟨b, ba, sab⟩ : ∃ b ∈ Iio a, Ico b a ⊆ s := mem_nhdsLT_iff_exists_Ico_subset.1 hs\n  let t := Ioo b a\n  have ts : t ⊆ s := Subset.trans Ioo_subset_Ico_self sab\n  have t_diff : DifferentiableOn ℝ f t := f_diff.mono ts\n  have t_conv : Convex ℝ t := convex_Ioo b a\n  have t_open : IsOpen t := isOpen_Ioo\n  have t_closure : closure t = Icc b a := closure_Ioo (ne_of_lt ba)\n  have t_cont : ∀ y ∈ closure t, ContinuousWithinAt f t y := by\n    rw [t_closure]\n    intro y hy\n    by_cases h : y = a\n    · rw [h]; exact f_lim.mono ts\n    · have : y ∈ s := sab ⟨hy.1, lt_of_le_of_ne hy.2 h⟩\n      exact (f_diff.continuousOn y this).mono ts\n  have t_diff' : Tendsto (fun x => fderiv ℝ f x) (𝓝[t] a) (𝓝 (smulRight (1 : ℝ →L[ℝ] ℝ) e)) := by\n    simp only [deriv_fderiv.symm]\n    exact Tendsto.comp\n      (isBoundedBilinearMap_smulRight : IsBoundedBilinearMap ℝ _).continuous_right.continuousAt\n      (tendsto_nhdsWithin_mono_left Ioo_subset_Iio_self f_lim')\n  -- now we can apply `hasFDerivWithinAt_closure_of_tendsto_fderiv`\n  have : HasDerivWithinAt f e (Icc b a) a := by\n    rw [hasDerivWithinAt_iff_hasFDerivWithinAt, ← t_closure]\n    exact hasFDerivWithinAt_closure_of_tendsto_fderiv t_diff t_conv t_open t_cont t_diff'\n  exact this.mono_of_mem_nhdsWithin (Icc_mem_nhdsLE ba)\n\n"}
{"name":"hasDerivAt_of_hasDerivAt_of_ne","module":"Mathlib.Analysis.Calculus.FDeriv.Extend","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf g : Real → E\nx : Real\nf_diff : ∀ (y : Real), Ne y x → HasDerivAt f (g y) y\nhf : ContinuousAt f x\nhg : ContinuousAt g x\n⊢ HasDerivAt f (g x) x","decl":"/-- If a real function `f` has a derivative `g` everywhere but at a point, and `f` and `g` are\ncontinuous at this point, then `g` is also the derivative of `f` at this point. -/\ntheorem hasDerivAt_of_hasDerivAt_of_ne {f g : ℝ → E} {x : ℝ}\n    (f_diff : ∀ y ≠ x, HasDerivAt f (g y) y) (hf : ContinuousAt f x)\n    (hg : ContinuousAt g x) : HasDerivAt f (g x) x := by\n  have A : HasDerivWithinAt f (g x) (Ici x) x := by\n    have diff : DifferentiableOn ℝ f (Ioi x) := fun y hy =>\n      (f_diff y (ne_of_gt hy)).differentiableAt.differentiableWithinAt\n    -- next line is the nontrivial bit of this proof, appealing to differentiability\n    -- extension results.\n    apply\n      hasDerivWithinAt_Ici_of_tendsto_deriv diff hf.continuousWithinAt\n        self_mem_nhdsWithin\n    have : Tendsto g (𝓝[>] x) (𝓝 (g x)) := tendsto_inf_left hg\n    apply this.congr' _\n    apply mem_of_superset self_mem_nhdsWithin fun y hy => _\n    intros y hy\n    exact (f_diff y (ne_of_gt hy)).deriv.symm\n  have B : HasDerivWithinAt f (g x) (Iic x) x := by\n    have diff : DifferentiableOn ℝ f (Iio x) := fun y hy =>\n      (f_diff y (ne_of_lt hy)).differentiableAt.differentiableWithinAt\n    -- next line is the nontrivial bit of this proof, appealing to differentiability\n    -- extension results.\n    apply\n      hasDerivWithinAt_Iic_of_tendsto_deriv diff hf.continuousWithinAt\n        self_mem_nhdsWithin\n    have : Tendsto g (𝓝[<] x) (𝓝 (g x)) := tendsto_inf_left hg\n    apply this.congr' _\n    apply mem_of_superset self_mem_nhdsWithin fun y hy => _\n    intros y hy\n    exact (f_diff y (ne_of_lt hy)).deriv.symm\n  simpa using B.union A\n\n"}
{"name":"hasDerivAt_of_hasDerivAt_of_ne'","module":"Mathlib.Analysis.Calculus.FDeriv.Extend","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf g : Real → E\nx : Real\nf_diff : ∀ (y : Real), Ne y x → HasDerivAt f (g y) y\nhf : ContinuousAt f x\nhg : ContinuousAt g x\ny : Real\n⊢ HasDerivAt f (g y) y","decl":"/-- If a real function `f` has a derivative `g` everywhere but at a point, and `f` and `g` are\ncontinuous at this point, then `g` is the derivative of `f` everywhere. -/\ntheorem hasDerivAt_of_hasDerivAt_of_ne' {f g : ℝ → E} {x : ℝ}\n    (f_diff : ∀ y ≠ x, HasDerivAt f (g y) y) (hf : ContinuousAt f x)\n    (hg : ContinuousAt g x) (y : ℝ) : HasDerivAt f (g y) y := by\n  rcases eq_or_ne y x with (rfl | hne)\n  · exact hasDerivAt_of_hasDerivAt_of_ne f_diff hf hg\n  · exact f_diff y hne\n"}
