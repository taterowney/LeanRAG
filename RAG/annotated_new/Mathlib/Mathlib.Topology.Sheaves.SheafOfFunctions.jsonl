{"name":"TopCat.Presheaf.toTypes_isSheaf","module":"Mathlib.Topology.Sheaves.SheafOfFunctions","initialProofState":"X : TopCat\nT : ↑X → Type u\n⊢ (X.presheafToTypes T).IsSheaf","decl":"/-- We show that the presheaf of functions to a type `T`\n(no continuity assumptions, just plain functions)\nform a sheaf.\n\nIn fact, the proof is identical when we do this for dependent functions to a type family `T`,\nso we do the more general case.\n-/\ntheorem toTypes_isSheaf (T : X → Type u) : (presheafToTypes X T).IsSheaf :=\n  isSheaf_of_isSheafUniqueGluing_types.{u} _ fun ι U sf hsf => by\n  -- We use the sheaf condition in terms of unique gluing\n  -- U is a family of open sets, indexed by `ι` and `sf` is a compatible family of sections.\n  -- In the informal comments below, I'll just write `U` to represent the union.\n    -- Our first goal is to define a function \"lifted\" to all of `U`.\n    -- We do this one point at a time. Using the axiom of choice, we can pick for each\n    -- `x : ↑(iSup U)` an index `i : ι` such that `x` lies in `U i`\n    choose index index_spec using fun x : ↑(iSup U) => Opens.mem_iSup.mp x.2\n    -- Using this data, we can glue our functions together to a single section\n    let s : ∀ x : ↑(iSup U), T x := fun x => sf (index x) ⟨x.1, index_spec x⟩\n    refine ⟨s, ?_, ?_⟩\n    · intro i\n      funext x\n      -- Now we need to verify that this lifted function restricts correctly to each set `U i`.\n      -- Of course, the difficulty is that at any given point `x ∈ U i`,\n      -- we may have used the axiom of choice to pick a different `j` with `x ∈ U j`\n      -- when defining the function.\n      -- Thus we'll need to use the fact that the restrictions are compatible.\n      exact congr_fun (hsf (index ⟨x, _⟩) i) ⟨x, ⟨index_spec ⟨x.1, _⟩, x.2⟩⟩\n    · -- Now we just need to check that the lift we picked was the only possible one.\n      -- So we suppose we had some other gluing `t` of our sections\n      intro t ht\n      -- and observe that we need to check that it agrees with our choice\n      -- for each `x ∈ ↑(iSup U)`.\n      funext x\n      exact congr_fun (ht (index x)) ⟨x.1, index_spec x⟩\n\n-- We verify that the non-dependent version is an immediate consequence:\n"}
{"name":"TopCat.Presheaf.toType_isSheaf","module":"Mathlib.Topology.Sheaves.SheafOfFunctions","initialProofState":"X : TopCat\nT : Type u\n⊢ (X.presheafToType T).IsSheaf","decl":"/-- The presheaf of not-necessarily-continuous functions to\na target type `T` satisfies the sheaf condition.\n-/\ntheorem toType_isSheaf (T : Type u) : (presheafToType X T).IsSheaf :=\n  toTypes_isSheaf X fun _ => T\n\n"}
