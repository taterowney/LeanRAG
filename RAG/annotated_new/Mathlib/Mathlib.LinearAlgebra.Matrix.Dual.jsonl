{"name":"LinearMap.toMatrix_transpose","module":"Mathlib.LinearAlgebra.Matrix.Dual","initialProofState":"K : Type u_1\nV₁ : Type u_2\nV₂ : Type u_3\nι₁ : Type u_4\nι₂ : Type u_5\ninst✝⁸ : Field K\ninst✝⁷ : AddCommGroup V₁\ninst✝⁶ : Module K V₁\ninst✝⁵ : AddCommGroup V₂\ninst✝⁴ : Module K V₂\ninst✝³ : Fintype ι₁\ninst✝² : Fintype ι₂\ninst✝¹ : DecidableEq ι₁\ninst✝ : DecidableEq ι₂\nB₁ : Basis ι₁ K V₁\nB₂ : Basis ι₂ K V₂\nu : LinearMap (RingHom.id K) V₁ V₂\n⊢ Eq ((LinearMap.toMatrix B₂.dualBasis B₁.dualBasis) (Module.Dual.transpose u)) ((LinearMap.toMatrix B₁ B₂) u).transpose","decl":"@[simp]\ntheorem LinearMap.toMatrix_transpose (u : V₁ →ₗ[K] V₂) :\n    LinearMap.toMatrix B₂.dualBasis B₁.dualBasis (Module.Dual.transpose (R := K) u) =\n      (LinearMap.toMatrix B₁ B₂ u)ᵀ := by\n  ext i j\n  simp only [LinearMap.toMatrix_apply, Module.Dual.transpose_apply, B₁.dualBasis_repr,\n    B₂.dualBasis_apply, Matrix.transpose_apply, LinearMap.comp_apply]\n\n"}
{"name":"Matrix.toLin_transpose","module":"Mathlib.LinearAlgebra.Matrix.Dual","initialProofState":"K : Type u_1\nV₁ : Type u_2\nV₂ : Type u_3\nι₁ : Type u_4\nι₂ : Type u_5\ninst✝⁸ : Field K\ninst✝⁷ : AddCommGroup V₁\ninst✝⁶ : Module K V₁\ninst✝⁵ : AddCommGroup V₂\ninst✝⁴ : Module K V₂\ninst✝³ : Fintype ι₁\ninst✝² : Fintype ι₂\ninst✝¹ : DecidableEq ι₁\ninst✝ : DecidableEq ι₂\nB₁ : Basis ι₁ K V₁\nB₂ : Basis ι₂ K V₂\nM : Matrix ι₁ ι₂ K\n⊢ Eq ((Matrix.toLin B₁.dualBasis B₂.dualBasis) M.transpose) (Module.Dual.transpose ((Matrix.toLin B₂ B₁) M))","decl":"@[simp]\ntheorem Matrix.toLin_transpose (M : Matrix ι₁ ι₂ K) : Matrix.toLin B₁.dualBasis B₂.dualBasis Mᵀ =\n    Module.Dual.transpose (R := K) (Matrix.toLin B₂ B₁ M) := by\n  apply (LinearMap.toMatrix B₁.dualBasis B₂.dualBasis).injective\n  rw [LinearMap.toMatrix_toLin, LinearMap.toMatrix_transpose, LinearMap.toMatrix_toLin]\n\n"}
