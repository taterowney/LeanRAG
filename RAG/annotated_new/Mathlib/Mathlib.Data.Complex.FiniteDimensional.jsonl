{"name":"Complex.instFiniteDimensionalReal","module":"Mathlib.Data.Complex.FiniteDimensional","initialProofState":"⊢ FiniteDimensional Real Complex","decl":"instance : FiniteDimensional ℝ ℂ := .of_fintype_basis basisOneI\n\n"}
{"name":"Complex.finrank_real_complex","module":"Mathlib.Data.Complex.FiniteDimensional","initialProofState":"⊢ Eq (Module.finrank Real Complex) 2","decl":"/-- `ℂ` is a finite extension of `ℝ` of degree 2, i.e `[ℂ : ℝ] = 2` -/\n@[simp, stacks 09G4]\ntheorem finrank_real_complex : finrank ℝ ℂ = 2 := by\n  rw [finrank_eq_card_basis basisOneI, Fintype.card_fin]\n\n"}
{"name":"Complex.rank_real_complex","module":"Mathlib.Data.Complex.FiniteDimensional","initialProofState":"⊢ Eq (Module.rank Real Complex) 2","decl":"@[simp]\ntheorem rank_real_complex : Module.rank ℝ ℂ = 2 := by simp [← finrank_eq_rank, finrank_real_complex]\n\n"}
{"name":"Complex.rank_real_complex'","module":"Mathlib.Data.Complex.FiniteDimensional","initialProofState":"⊢ Eq (Cardinal.lift.{u, 0} (Module.rank Real Complex)) 2","decl":"theorem rank_real_complex'.{u} : Cardinal.lift.{u} (Module.rank ℝ ℂ) = 2 := by\n  rw [← finrank_eq_rank, finrank_real_complex, Cardinal.lift_natCast, Nat.cast_ofNat]\n\n"}
{"name":"Complex.finrank_real_complex_fact","module":"Mathlib.Data.Complex.FiniteDimensional","initialProofState":"⊢ Fact (Eq (Module.finrank Real Complex) 2)","decl":"/-- `Fact` version of the dimension of `ℂ` over `ℝ`, locally useful in the definition of the\ncircle. -/\ntheorem finrank_real_complex_fact : Fact (finrank ℝ ℂ = 2) :=\n  ⟨finrank_real_complex⟩\n\n"}
{"name":"FiniteDimensional.complexToReal","module":"Mathlib.Data.Complex.FiniteDimensional","initialProofState":"E : Type u_1\ninst✝² : AddCommGroup E\ninst✝¹ : Module Complex E\ninst✝ : FiniteDimensional Complex E\n⊢ FiniteDimensional Real E","decl":"instance (priority := 100) FiniteDimensional.complexToReal (E : Type*) [AddCommGroup E]\n    [Module ℂ E] [FiniteDimensional ℂ E] : FiniteDimensional ℝ E :=\n  FiniteDimensional.trans ℝ ℂ E\n\n"}
{"name":"rank_real_of_complex","module":"Mathlib.Data.Complex.FiniteDimensional","initialProofState":"E : Type u_1\ninst✝¹ : AddCommGroup E\ninst✝ : Module Complex E\n⊢ Eq (Module.rank Real E) (HMul.hMul 2 (Module.rank Complex E))","decl":"theorem rank_real_of_complex (E : Type*) [AddCommGroup E] [Module ℂ E] :\n    Module.rank ℝ E = 2 * Module.rank ℂ E :=\n  Cardinal.lift_inj.{_,0}.1 <| by\n    rw [← lift_rank_mul_lift_rank ℝ ℂ E, Complex.rank_real_complex']\n    simp only [Cardinal.lift_id']\n\n"}
{"name":"finrank_real_of_complex","module":"Mathlib.Data.Complex.FiniteDimensional","initialProofState":"E : Type u_1\ninst✝¹ : AddCommGroup E\ninst✝ : Module Complex E\n⊢ Eq (Module.finrank Real E) (HMul.hMul 2 (Module.finrank Complex E))","decl":"theorem finrank_real_of_complex (E : Type*) [AddCommGroup E] [Module ℂ E] :\n    Module.finrank ℝ E = 2 * Module.finrank ℂ E := by\n  rw [← Module.finrank_mul_finrank ℝ ℂ E, Complex.finrank_real_complex]\n\n"}
{"name":"Real.rank_rat_real","module":"Mathlib.Data.Complex.FiniteDimensional","initialProofState":"⊢ Eq (Module.rank Rat Real) Cardinal.continuum","decl":"@[simp]\nlemma Real.rank_rat_real : Module.rank ℚ ℝ = continuum := by\n  refine (Free.rank_eq_mk_of_infinite_lt ℚ ℝ ?_).trans mk_real\n  simpa [mk_real] using aleph0_lt_continuum\n\n"}
{"name":"Complex.rank_rat_complex","module":"Mathlib.Data.Complex.FiniteDimensional","initialProofState":"⊢ Eq (Module.rank Rat Complex) Cardinal.continuum","decl":"/-- `C` has an uncountable basis over `ℚ`. -/\n@[simp, stacks 09G0]\nlemma Complex.rank_rat_complex : Module.rank ℚ ℂ = continuum := by\n  refine (Free.rank_eq_mk_of_infinite_lt ℚ ℂ ?_).trans mk_complex\n  simpa using aleph0_lt_continuum\n\n"}
{"name":"Complex.nonempty_linearEquiv_real","module":"Mathlib.Data.Complex.FiniteDimensional","initialProofState":"⊢ Nonempty (LinearEquiv (RingHom.id Rat) Complex Real)","decl":"/-- `ℂ` and `ℝ` are isomorphic as vector spaces over `ℚ`, or equivalently,\nas additive groups. -/\ntheorem Complex.nonempty_linearEquiv_real : Nonempty (ℂ ≃ₗ[ℚ] ℝ) :=\n  LinearEquiv.nonempty_equiv_iff_rank_eq.mpr <| by simp\n\n"}
