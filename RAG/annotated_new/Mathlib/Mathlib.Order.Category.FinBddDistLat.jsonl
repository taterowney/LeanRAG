{"name":"FinBddDistLat.mk.inj","module":"Mathlib.Order.Category.FinBddDistLat","initialProofState":"toBddDistLat✝ : BddDistLat\nisFintype✝ : Fintype ↑toBddDistLat✝.toDistLat\ntoBddDistLat : BddDistLat\nisFintype : Fintype ↑toBddDistLat.toDistLat\nx✝ : Eq (FinBddDistLat.mk toBddDistLat✝) (FinBddDistLat.mk toBddDistLat)\n⊢ And (Eq toBddDistLat✝ toBddDistLat) (HEq isFintype✝ isFintype)","decl":"/-- The category of finite distributive lattices with bounded lattice morphisms. -/\nstructure FinBddDistLat where\n  toBddDistLat : BddDistLat\n  [isFintype : Fintype toBddDistLat]\n\n"}
{"name":"FinBddDistLat.mk.sizeOf_spec","module":"Mathlib.Order.Category.FinBddDistLat","initialProofState":"toBddDistLat : BddDistLat\nisFintype : Fintype ↑toBddDistLat.toDistLat\n⊢ Eq (SizeOf.sizeOf (FinBddDistLat.mk toBddDistLat)) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toBddDistLat)) (SizeOf.sizeOf isFintype))","decl":"/-- The category of finite distributive lattices with bounded lattice morphisms. -/\nstructure FinBddDistLat where\n  toBddDistLat : BddDistLat\n  [isFintype : Fintype toBddDistLat]\n\n"}
{"name":"FinBddDistLat.mk.injEq","module":"Mathlib.Order.Category.FinBddDistLat","initialProofState":"toBddDistLat✝ : BddDistLat\nisFintype✝ : Fintype ↑toBddDistLat✝.toDistLat\ntoBddDistLat : BddDistLat\nisFintype : Fintype ↑toBddDistLat.toDistLat\n⊢ Eq (Eq (FinBddDistLat.mk toBddDistLat✝) (FinBddDistLat.mk toBddDistLat)) (And (Eq toBddDistLat✝ toBddDistLat) (HEq isFintype✝ isFintype))","decl":"/-- The category of finite distributive lattices with bounded lattice morphisms. -/\nstructure FinBddDistLat where\n  toBddDistLat : BddDistLat\n  [isFintype : Fintype toBddDistLat]\n\n"}
{"name":"FinBddDistLat.Iso.mk_inv_toLatticeHom_toSupHom_toFun","module":"Mathlib.Order.Category.FinBddDistLat","initialProofState":"α β : FinBddDistLat\ne : OrderIso ↑α.toBddDistLat.toDistLat ↑β.toBddDistLat.toDistLat\na : ↑β.toBddDistLat.toDistLat\n⊢ Eq ((FinBddDistLat.Iso.mk e).inv.toSupHom a) (e.symm a)","decl":"/-- Constructs an equivalence between finite distributive lattices from an order isomorphism\nbetween them. -/\n@[simps]\ndef Iso.mk {α β : FinBddDistLat.{u}} (e : α ≃o β) : α ≅ β where\n  hom := (e : BoundedLatticeHom α β)\n  inv := (e.symm : BoundedLatticeHom β α)\n  hom_inv_id := by ext; exact e.symm_apply_apply _\n  inv_hom_id := by ext; exact e.apply_symm_apply _\n\n"}
{"name":"FinBddDistLat.Iso.mk_hom_toLatticeHom_toSupHom_toFun","module":"Mathlib.Order.Category.FinBddDistLat","initialProofState":"α β : FinBddDistLat\ne : OrderIso ↑α.toBddDistLat.toDistLat ↑β.toBddDistLat.toDistLat\na : ↑α.toBddDistLat.toDistLat\n⊢ Eq ((FinBddDistLat.Iso.mk e).hom.toSupHom a) (e a)","decl":"/-- Constructs an equivalence between finite distributive lattices from an order isomorphism\nbetween them. -/\n@[simps]\ndef Iso.mk {α β : FinBddDistLat.{u}} (e : α ≃o β) : α ≅ β where\n  hom := (e : BoundedLatticeHom α β)\n  inv := (e.symm : BoundedLatticeHom β α)\n  hom_inv_id := by ext; exact e.symm_apply_apply _\n  inv_hom_id := by ext; exact e.apply_symm_apply _\n\n"}
{"name":"FinBddDistLat.dual_obj","module":"Mathlib.Order.Category.FinBddDistLat","initialProofState":"X : FinBddDistLat\n⊢ Eq (FinBddDistLat.dual.obj X) (FinBddDistLat.of (OrderDual ↑X.toBddDistLat.toDistLat))","decl":"/-- `OrderDual` as a functor. -/\n@[simps]\ndef dual : FinBddDistLat ⥤ FinBddDistLat where\n  obj X := of Xᵒᵈ\n  map {_ _} := BoundedLatticeHom.dual\n\n"}
{"name":"FinBddDistLat.dual_map","module":"Mathlib.Order.Category.FinBddDistLat","initialProofState":"x✝¹ x✝ : FinBddDistLat\na : BoundedLatticeHom ↑x✝¹.toBddDistLat.toBddLat.toLat ↑x✝.toBddDistLat.toBddLat.toLat\n⊢ Eq (FinBddDistLat.dual.map a) (BoundedLatticeHom.dual a)","decl":"/-- `OrderDual` as a functor. -/\n@[simps]\ndef dual : FinBddDistLat ⥤ FinBddDistLat where\n  obj X := of Xᵒᵈ\n  map {_ _} := BoundedLatticeHom.dual\n\n"}
{"name":"FinBddDistLat.dualEquiv_functor","module":"Mathlib.Order.Category.FinBddDistLat","initialProofState":"⊢ Eq FinBddDistLat.dualEquiv.functor FinBddDistLat.dual","decl":"/-- The equivalence between `FinBddDistLat` and itself induced by `OrderDual` both ways. -/\n@[simps functor inverse]\ndef dualEquiv : FinBddDistLat ≌ FinBddDistLat where\n  functor := dual\n  inverse := dual\n  unitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X\n  counitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X\n\n"}
{"name":"FinBddDistLat.dualEquiv_inverse","module":"Mathlib.Order.Category.FinBddDistLat","initialProofState":"⊢ Eq FinBddDistLat.dualEquiv.inverse FinBddDistLat.dual","decl":"/-- The equivalence between `FinBddDistLat` and itself induced by `OrderDual` both ways. -/\n@[simps functor inverse]\ndef dualEquiv : FinBddDistLat ≌ FinBddDistLat where\n  functor := dual\n  inverse := dual\n  unitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X\n  counitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X\n\n"}
{"name":"finBddDistLat_dual_comp_forget_to_bddDistLat","module":"Mathlib.Order.Category.FinBddDistLat","initialProofState":"⊢ Eq (FinBddDistLat.dual.comp (CategoryTheory.forget₂ FinBddDistLat BddDistLat)) ((CategoryTheory.forget₂ FinBddDistLat BddDistLat).comp BddDistLat.dual)","decl":"theorem finBddDistLat_dual_comp_forget_to_bddDistLat :\n    FinBddDistLat.dual ⋙ forget₂ FinBddDistLat BddDistLat =\n      forget₂ FinBddDistLat BddDistLat ⋙ BddDistLat.dual :=\n  rfl\n"}
