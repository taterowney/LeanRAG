{"name":"exists_subset_iUnion_ball_radius_lt","module":"Mathlib.Topology.MetricSpace.ShrinkingLemma","initialProofState":"Œ± : Type u\nŒπ : Type v\ninst‚úù¬π : MetricSpace Œ±\ninst‚úù : ProperSpace Œ±\nc : Œπ ‚Üí Œ±\ns : Set Œ±\nr : Œπ ‚Üí Real\nhs : IsClosed s\nuf : ‚àÄ (x : Œ±), Membership.mem s x ‚Üí (setOf fun i => Membership.mem (Metric.ball (c i) (r i)) x).Finite\nus : HasSubset.Subset s (Set.iUnion fun i => Metric.ball (c i) (r i))\n‚ä¢ Exists fun r' => And (HasSubset.Subset s (Set.iUnion fun i => Metric.ball (c i) (r' i))) (‚àÄ (i : Œπ), LT.lt (r' i) (r i))","decl":"/-- **Shrinking lemma** for coverings by open balls in a proper metric space. A point-finite open\ncover of a closed subset of a proper metric space by open balls can be shrunk to a new cover by\nopen balls so that each of the new balls has strictly smaller radius than the old one. This version\nassumes that `fun x ‚Ü¶ ball (c i) (r i)` is a locally finite covering and provides a covering\nindexed by the same type. -/\ntheorem exists_subset_iUnion_ball_radius_lt {r : Œπ ‚Üí ‚Ñù} (hs : IsClosed s)\n    (uf : ‚àÄ x ‚àà s, { i | x ‚àà ball (c i) (r i) }.Finite) (us : s ‚äÜ ‚ãÉ i, ball (c i) (r i)) :\n    ‚àÉ r' : Œπ ‚Üí ‚Ñù, (s ‚äÜ ‚ãÉ i, ball (c i) (r' i)) ‚àß ‚àÄ i, r' i < r i := by\n  rcases exists_subset_iUnion_closed_subset hs (fun i => @isOpen_ball _ _ (c i) (r i)) uf us with\n    ‚ü®v, hsv, hvc, hcv‚ü©\n  have := fun i => exists_lt_subset_ball (hvc i) (hcv i)\n  choose r' hlt hsub using this\n  exact ‚ü®r', hsv.trans <| iUnion_mono <| hsub, hlt‚ü©\n\n"}
{"name":"exists_iUnion_ball_eq_radius_lt","module":"Mathlib.Topology.MetricSpace.ShrinkingLemma","initialProofState":"Œ± : Type u\nŒπ : Type v\ninst‚úù¬π : MetricSpace Œ±\ninst‚úù : ProperSpace Œ±\nc : Œπ ‚Üí Œ±\nr : Œπ ‚Üí Real\nuf : ‚àÄ (x : Œ±), (setOf fun i => Membership.mem (Metric.ball (c i) (r i)) x).Finite\nuU : Eq (Set.iUnion fun i => Metric.ball (c i) (r i)) Set.univ\n‚ä¢ Exists fun r' => And (Eq (Set.iUnion fun i => Metric.ball (c i) (r' i)) Set.univ) (‚àÄ (i : Œπ), LT.lt (r' i) (r i))","decl":"/-- Shrinking lemma for coverings by open balls in a proper metric space. A point-finite open cover\nof a proper metric space by open balls can be shrunk to a new cover by open balls so that each of\nthe new balls has strictly smaller radius than the old one. -/\ntheorem exists_iUnion_ball_eq_radius_lt {r : Œπ ‚Üí ‚Ñù} (uf : ‚àÄ x, { i | x ‚àà ball (c i) (r i) }.Finite)\n    (uU : ‚ãÉ i, ball (c i) (r i) = univ) :\n    ‚àÉ r' : Œπ ‚Üí ‚Ñù, ‚ãÉ i, ball (c i) (r' i) = univ ‚àß ‚àÄ i, r' i < r i :=\n  let ‚ü®r', hU, hv‚ü© := exists_subset_iUnion_ball_radius_lt isClosed_univ (fun x _ => uf x) uU.ge\n  ‚ü®r', univ_subset_iff.1 hU, hv‚ü©\n\n"}
{"name":"exists_subset_iUnion_ball_radius_pos_lt","module":"Mathlib.Topology.MetricSpace.ShrinkingLemma","initialProofState":"Œ± : Type u\nŒπ : Type v\ninst‚úù¬π : MetricSpace Œ±\ninst‚úù : ProperSpace Œ±\nc : Œπ ‚Üí Œ±\ns : Set Œ±\nr : Œπ ‚Üí Real\nhr : ‚àÄ (i : Œπ), LT.lt 0 (r i)\nhs : IsClosed s\nuf : ‚àÄ (x : Œ±), Membership.mem s x ‚Üí (setOf fun i => Membership.mem (Metric.ball (c i) (r i)) x).Finite\nus : HasSubset.Subset s (Set.iUnion fun i => Metric.ball (c i) (r i))\n‚ä¢ Exists fun r' => And (HasSubset.Subset s (Set.iUnion fun i => Metric.ball (c i) (r' i))) (‚àÄ (i : Œπ), Membership.mem (Set.Ioo 0 (r i)) (r' i))","decl":"/-- Shrinking lemma for coverings by open balls in a proper metric space. A point-finite open cover\nof a closed subset of a proper metric space by nonempty open balls can be shrunk to a new cover by\nnonempty open balls so that each of the new balls has strictly smaller radius than the old one. -/\ntheorem exists_subset_iUnion_ball_radius_pos_lt {r : Œπ ‚Üí ‚Ñù} (hr : ‚àÄ i, 0 < r i) (hs : IsClosed s)\n    (uf : ‚àÄ x ‚àà s, { i | x ‚àà ball (c i) (r i) }.Finite) (us : s ‚äÜ ‚ãÉ i, ball (c i) (r i)) :\n    ‚àÉ r' : Œπ ‚Üí ‚Ñù, (s ‚äÜ ‚ãÉ i, ball (c i) (r' i)) ‚àß ‚àÄ i, r' i ‚àà Ioo 0 (r i) := by\n  rcases exists_subset_iUnion_closed_subset hs (fun i => @isOpen_ball _ _ (c i) (r i)) uf us with\n    ‚ü®v, hsv, hvc, hcv‚ü©\n  have := fun i => exists_pos_lt_subset_ball (hr i) (hvc i) (hcv i)\n  choose r' hlt hsub using this\n  exact ‚ü®r', hsv.trans <| iUnion_mono hsub, hlt‚ü©\n\n"}
{"name":"exists_iUnion_ball_eq_radius_pos_lt","module":"Mathlib.Topology.MetricSpace.ShrinkingLemma","initialProofState":"Œ± : Type u\nŒπ : Type v\ninst‚úù¬π : MetricSpace Œ±\ninst‚úù : ProperSpace Œ±\nc : Œπ ‚Üí Œ±\nr : Œπ ‚Üí Real\nhr : ‚àÄ (i : Œπ), LT.lt 0 (r i)\nuf : ‚àÄ (x : Œ±), (setOf fun i => Membership.mem (Metric.ball (c i) (r i)) x).Finite\nuU : Eq (Set.iUnion fun i => Metric.ball (c i) (r i)) Set.univ\n‚ä¢ Exists fun r' => And (Eq (Set.iUnion fun i => Metric.ball (c i) (r' i)) Set.univ) (‚àÄ (i : Œπ), Membership.mem (Set.Ioo 0 (r i)) (r' i))","decl":"/-- Shrinking lemma for coverings by open balls in a proper metric space. A point-finite open cover\nof a proper metric space by nonempty open balls can be shrunk to a new cover by nonempty open balls\nso that each of the new balls has strictly smaller radius than the old one. -/\ntheorem exists_iUnion_ball_eq_radius_pos_lt {r : Œπ ‚Üí ‚Ñù} (hr : ‚àÄ i, 0 < r i)\n    (uf : ‚àÄ x, { i | x ‚àà ball (c i) (r i) }.Finite) (uU : ‚ãÉ i, ball (c i) (r i) = univ) :\n    ‚àÉ r' : Œπ ‚Üí ‚Ñù, ‚ãÉ i, ball (c i) (r' i) = univ ‚àß ‚àÄ i, r' i ‚àà Ioo 0 (r i) :=\n  let ‚ü®r', hU, hv‚ü© :=\n    exists_subset_iUnion_ball_radius_pos_lt hr isClosed_univ (fun x _ => uf x) uU.ge\n  ‚ü®r', univ_subset_iff.1 hU, hv‚ü©\n\n"}
{"name":"exists_locallyFinite_subset_iUnion_ball_radius_lt","module":"Mathlib.Topology.MetricSpace.ShrinkingLemma","initialProofState":"Œ± : Type u\ninst‚úù¬π : MetricSpace Œ±\ninst‚úù : ProperSpace Œ±\ns : Set Œ±\nhs : IsClosed s\nR : Œ± ‚Üí Real\nhR : ‚àÄ (x : Œ±), Membership.mem s x ‚Üí LT.lt 0 (R x)\n‚ä¢ Exists fun Œπ => Exists fun c => Exists fun r => Exists fun r' => And (‚àÄ (i : Œπ), And (Membership.mem s (c i)) (And (LT.lt 0 (r i)) (And (LT.lt (r i) (r' i)) (LT.lt (r' i) (R (c i)))))) (And (LocallyFinite fun i => Metric.ball (c i) (r' i)) (HasSubset.Subset s (Set.iUnion fun i => Metric.ball (c i) (r i))))","decl":"/-- Let `R : Œ± ‚Üí ‚Ñù` be a (possibly discontinuous) function on a proper metric space.\nLet `s` be a closed set in `Œ±` such that `R` is positive on `s`. Then there exists a collection of\npairs of balls `Metric.ball (c i) (r i)`, `Metric.ball (c i) (r' i)` such that\n\n* all centers belong to `s`;\n* for all `i` we have `0 < r i < r' i < R (c i)`;\n* the family of balls `Metric.ball (c i) (r' i)` is locally finite;\n* the balls `Metric.ball (c i) (r i)` cover `s`.\n\nThis is a simple corollary of `refinement_of_locallyCompact_sigmaCompact_of_nhds_basis_set`\nand `exists_subset_iUnion_ball_radius_pos_lt`. -/\ntheorem exists_locallyFinite_subset_iUnion_ball_radius_lt (hs : IsClosed s) {R : Œ± ‚Üí ‚Ñù}\n    (hR : ‚àÄ x ‚àà s, 0 < R x) :\n    ‚àÉ (Œπ : Type u) (c : Œπ ‚Üí Œ±) (r r' : Œπ ‚Üí ‚Ñù),\n      (‚àÄ i, c i ‚àà s ‚àß 0 < r i ‚àß r i < r' i ‚àß r' i < R (c i)) ‚àß\n        (LocallyFinite fun i => ball (c i) (r' i)) ‚àß s ‚äÜ ‚ãÉ i, ball (c i) (r i) := by\n  have : ‚àÄ x ‚àà s, (ùìù x).HasBasis (fun r : ‚Ñù => 0 < r ‚àß r < R x) fun r => ball x r := fun x hx =>\n    nhds_basis_uniformity (uniformity_basis_dist_lt (hR x hx))\n  rcases refinement_of_locallyCompact_sigmaCompact_of_nhds_basis_set hs this with\n    ‚ü®Œπ, c, r', hr', hsub', hfin‚ü©\n  rcases exists_subset_iUnion_ball_radius_pos_lt (fun i => (hr' i).2.1) hs\n      (fun x _ => hfin.point_finite x) hsub' with\n    ‚ü®r, hsub, hlt‚ü©\n  exact ‚ü®Œπ, c, r, r', fun i => ‚ü®(hr' i).1, (hlt i).1, (hlt i).2, (hr' i).2.2‚ü©, hfin, hsub‚ü©\n\n"}
{"name":"exists_locallyFinite_iUnion_eq_ball_radius_lt","module":"Mathlib.Topology.MetricSpace.ShrinkingLemma","initialProofState":"Œ± : Type u\ninst‚úù¬π : MetricSpace Œ±\ninst‚úù : ProperSpace Œ±\nR : Œ± ‚Üí Real\nhR : ‚àÄ (x : Œ±), LT.lt 0 (R x)\n‚ä¢ Exists fun Œπ => Exists fun c => Exists fun r => Exists fun r' => And (‚àÄ (i : Œπ), And (LT.lt 0 (r i)) (And (LT.lt (r i) (r' i)) (LT.lt (r' i) (R (c i))))) (And (LocallyFinite fun i => Metric.ball (c i) (r' i)) (Eq (Set.iUnion fun i => Metric.ball (c i) (r i)) Set.univ))","decl":"/-- Let `R : Œ± ‚Üí ‚Ñù` be a (possibly discontinuous) positive function on a proper metric space. Then\nthere exists a collection of pairs of balls `Metric.ball (c i) (r i)`, `Metric.ball (c i) (r' i)`\nsuch that\n\n* for all `i` we have `0 < r i < r' i < R (c i)`;\n* the family of balls `Metric.ball (c i) (r' i)` is locally finite;\n* the balls `Metric.ball (c i) (r i)` cover the whole space.\n\nThis is a simple corollary of `refinement_of_locallyCompact_sigmaCompact_of_nhds_basis`\nand `exists_iUnion_ball_eq_radius_pos_lt` or `exists_locallyFinite_subset_iUnion_ball_radius_lt`. -/\ntheorem exists_locallyFinite_iUnion_eq_ball_radius_lt {R : Œ± ‚Üí ‚Ñù} (hR : ‚àÄ x, 0 < R x) :\n    ‚àÉ (Œπ : Type u) (c : Œπ ‚Üí Œ±) (r r' : Œπ ‚Üí ‚Ñù),\n      (‚àÄ i, 0 < r i ‚àß r i < r' i ‚àß r' i < R (c i)) ‚àß\n        (LocallyFinite fun i => ball (c i) (r' i)) ‚àß ‚ãÉ i, ball (c i) (r i) = univ :=\n  let ‚ü®Œπ, c, r, r', hlt, hfin, hsub‚ü© :=\n    exists_locallyFinite_subset_iUnion_ball_radius_lt isClosed_univ fun x _ => hR x\n  ‚ü®Œπ, c, r, r', fun i => (hlt i).2, hfin, univ_subset_iff.1 hsub‚ü©\n"}
