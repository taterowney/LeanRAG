{"name":"AlgebraicGeometry.Ideal.span_eq_top_of_span_image_evalRingHom","module":"Mathlib.AlgebraicGeometry.PointsPi","initialProofState":"ι : Type u_2\nR : ι → Type u_1\ninst✝ : (i : ι) → CommRing (R i)\ns : Set ((i : ι) → R i)\nhs : s.Finite\nhs' : ∀ (i : ι), Eq (Ideal.span (Set.image (⇑(Pi.evalRingHom (fun x => R x) i)) s)) Top.top\n⊢ Eq (Ideal.span s) Top.top","decl":"lemma Ideal.span_eq_top_of_span_image_evalRingHom\n    {ι} {R : ι → Type*} [∀ i, CommRing (R i)] (s : Set (Π i, R i))\n    (hs : s.Finite) (hs' : ∀ i, Ideal.span (Pi.evalRingHom (R ·) i '' s) = ⊤) :\n    Ideal.span s = ⊤ := by\n  simp only [Ideal.eq_top_iff_one, ← Subtype.range_val (s := s), ← Set.range_comp,\n    Finsupp.mem_ideal_span_range_iff_exists_finsupp] at hs' ⊢\n  choose f hf using hs'\n  have : Fintype s := hs.fintype\n  refine ⟨Finsupp.equivFunOnFinite.symm fun i x ↦ f x i, ?_⟩\n  ext i\n  simpa [Finsupp.sum_fintype] using hf i\n\n"}
{"name":"AlgebraicGeometry.eq_top_of_sigmaSpec_subset_of_isCompact","module":"Mathlib.AlgebraicGeometry.PointsPi","initialProofState":"ι : Type u\nR : ι → CommRingCat\nU : (AlgebraicGeometry.Spec (CommRingCat.of ((i : ι) → ↑(R i)))).Opens\nV : Set ↑↑(AlgebraicGeometry.Spec (CommRingCat.of ((i : ι) → ↑(R i)))).toPresheafedSpace\nhV : HasSubset.Subset (↑(AlgebraicGeometry.Scheme.Hom.opensRange (AlgebraicGeometry.sigmaSpec R))) V\nhV' : IsCompact V\nhVU : HasSubset.Subset V ↑U\n⊢ Eq U Top.top","decl":"lemma eq_top_of_sigmaSpec_subset_of_isCompact\n    (U : (Spec (.of (Π i, R i))).Opens) (V : Set (Spec (.of (Π i, R i))))\n    (hV : ↑(sigmaSpec R).opensRange ⊆ V)\n    (hV' : IsCompact (X := Spec (.of (Π i, R i))) V)\n    (hVU : V ⊆ U) : U = ⊤ := by\n  obtain ⟨s, hs⟩ := (PrimeSpectrum.isOpen_iff _).mp U.2\n  obtain ⟨t, hts, ht, ht'⟩ : ∃ t ⊆ s, t.Finite ∧ V ⊆ ⋃ i ∈ t, (basicOpen i).1 := by\n    obtain ⟨t, ht⟩ := hV'.elim_finite_subcover\n      (fun i : s ↦ (basicOpen i.1).1) (fun _ ↦ (basicOpen _).2)\n      (by simpa [← Set.compl_iInter, ← zeroLocus_iUnion₂ (κ := (· ∈ s)), ← hs])\n    exact ⟨t.map (Function.Embedding.subtype _), by simp, Finset.finite_toSet _, by simpa using ht⟩\n  replace ht' : V ⊆ (zeroLocus t)ᶜ := by\n    simpa [← Set.compl_iInter, ← zeroLocus_iUnion₂ (κ := (· ∈ t))] using ht'\n  have (i) : Ideal.span (Pi.evalRingHom (R ·) i '' t) = ⊤ := by\n    rw [← zeroLocus_empty_iff_eq_top, zeroLocus_span, ← preimage_comap_zeroLocus,\n      ← Set.compl_univ_iff, ← Set.preimage_compl, Set.preimage_eq_univ_iff]\n    trans (Sigma.ι _ i ≫ sigmaSpec R).opensRange.1\n    · simp; rfl\n    · rw [Scheme.Hom.opensRange_comp]\n      exact (Set.image_subset_range _ _).trans (hV.trans ht')\n  have : Ideal.span s = ⊤ := top_le_iff.mp\n    ((Ideal.span_eq_top_of_span_image_evalRingHom _ ht this).ge.trans (Ideal.span_mono hts))\n  simpa [← zeroLocus_span s, zeroLocus_empty_iff_eq_top.mpr this] using hs\n\n"}
{"name":"AlgebraicGeometry.eq_bot_of_comp_quotientMk_eq_sigmaSpec","module":"Mathlib.AlgebraicGeometry.PointsPi","initialProofState":"ι : Type u\nR : ι → CommRingCat\nI : Ideal ((i : ι) → ↑(R i))\nf : Quiver.Hom (CategoryTheory.Limits.sigmaObj fun i => AlgebraicGeometry.Spec (R i)) (AlgebraicGeometry.Spec (CommRingCat.of (HasQuotient.Quotient ((i : ι) → ↑(R i)) I)))\nhf : Eq (CategoryTheory.CategoryStruct.comp f (AlgebraicGeometry.Spec.map (CommRingCat.ofHom (Ideal.Quotient.mk I)))) (AlgebraicGeometry.sigmaSpec R)\n⊢ Eq I Bot.bot","decl":"lemma eq_bot_of_comp_quotientMk_eq_sigmaSpec (I : Ideal (Π i, R i))\n    (f : (∐ fun i ↦ Spec (R i)) ⟶ Spec (.of ((Π i, R i) ⧸ I)))\n    (hf : f ≫ Spec.map (CommRingCat.ofHom (Ideal.Quotient.mk I)) = sigmaSpec R) :\n    I = ⊥ := by\n  refine le_bot_iff.mp fun x hx ↦ ?_\n  ext i\n  simpa [← Category.assoc, Ideal.Quotient.eq_zero_iff_mem.mpr hx] using\n    congr((Spec.preimage (Sigma.ι (Spec <| R ·) i ≫ $hf)).hom x).symm\n\n"}
{"name":"AlgebraicGeometry.isIso_of_comp_eq_sigmaSpec","module":"Mathlib.AlgebraicGeometry.PointsPi","initialProofState":"ι : Type u\nR : ι → CommRingCat\nV : AlgebraicGeometry.Scheme\nf : Quiver.Hom (CategoryTheory.Limits.sigmaObj fun i => AlgebraicGeometry.Spec (R i)) V\ng : Quiver.Hom V (AlgebraicGeometry.Spec (CommRingCat.of ((i : ι) → ↑(R i))))\ninst✝¹ : AlgebraicGeometry.IsImmersion g\ninst✝ : CompactSpace ↑↑V.toPresheafedSpace\nhU' : Eq (CategoryTheory.CategoryStruct.comp f g) (AlgebraicGeometry.sigmaSpec R)\n⊢ CategoryTheory.IsIso g","decl":"/-- If `V` is a locally closed subscheme of `Spec (Π Rᵢ)` containing `∐ Spec Rᵢ`, then\n`V = Spec (Π Rᵢ)`. -/\nlemma isIso_of_comp_eq_sigmaSpec {V : Scheme}\n    (f : (∐ fun i ↦ Spec (R i)) ⟶ V) (g : V ⟶ Spec (.of (Π i, R i)))\n    [IsImmersion g] [CompactSpace V]\n    (hU' : f ≫ g = sigmaSpec R) : IsIso g := by\n  have : g.coborderRange = ⊤ := by\n    apply eq_top_of_sigmaSpec_subset_of_isCompact (hVU := subset_coborder)\n    · simpa only [← hU'] using Set.range_comp_subset_range f.base g.base\n    · exact isCompact_range g.base.2\n  have : IsClosedImmersion g := by\n    have : IsIso g.coborderRange.ι := by rw [this, ← Scheme.topIso_hom]; infer_instance\n    rw [← g.liftCoborder_ι]\n    infer_instance\n  obtain ⟨I, e, rfl⟩ := IsClosedImmersion.Spec_iff.mp this\n  obtain rfl := eq_bot_of_comp_quotientMk_eq_sigmaSpec R I (f ≫ e.hom) (by rwa [Category.assoc])\n  show IsIso (e.hom ≫ Spec.map (RingEquiv.quotientBot _).toCommRingCatIso.inv)\n  infer_instance\n\n"}
{"name":"AlgebraicGeometry.pointsPi_injective","module":"Mathlib.AlgebraicGeometry.PointsPi","initialProofState":"ι : Type u\nR : ι → CommRingCat\nX : AlgebraicGeometry.Scheme\ninst✝ : QuasiSeparatedSpace ↑↑X.toPresheafedSpace\n⊢ Function.Injective (AlgebraicGeometry.pointsPi R X)","decl":"lemma pointsPi_injective [QuasiSeparatedSpace X] : Function.Injective (pointsPi R X) := by\n  rintro f g e\n  have := isIso_of_comp_eq_sigmaSpec R (V := equalizer f g)\n    (equalizer.lift (sigmaSpec R) (by ext1 i; simpa using congr_fun e i))\n    (equalizer.ι f g) (by simp)\n  rw [← cancel_epi (equalizer.ι f g), equalizer.condition]\n\n"}
{"name":"AlgebraicGeometry.pointsPi_surjective_of_isAffine","module":"Mathlib.AlgebraicGeometry.PointsPi","initialProofState":"ι : Type u\nR : ι → CommRingCat\nX : AlgebraicGeometry.Scheme\ninst✝ : AlgebraicGeometry.IsAffine X\n⊢ Function.Surjective (AlgebraicGeometry.pointsPi R X)","decl":"lemma pointsPi_surjective_of_isAffine [IsAffine X] : Function.Surjective (pointsPi R X) := by\n  rintro f\n  refine ⟨Spec.map (CommRingCat.ofHom\n    (Pi.ringHom fun i ↦ (Spec.preimage (f i ≫ X.isoSpec.hom)).1)) ≫ X.isoSpec.inv, ?_⟩\n  ext i : 1\n  simp only [pointsPi, ← Spec.map_comp_assoc, Iso.comp_inv_eq]\n  exact Spec.map_preimage _\n\n"}
{"name":"AlgebraicGeometry.pointsPi_surjective","module":"Mathlib.AlgebraicGeometry.PointsPi","initialProofState":"ι : Type u\nR : ι → CommRingCat\nX : AlgebraicGeometry.Scheme\ninst✝¹ : CompactSpace ↑↑X.toPresheafedSpace\ninst✝ : ∀ (i : ι), IsLocalRing ↑(R i)\n⊢ Function.Surjective (AlgebraicGeometry.pointsPi R X)","decl":"lemma pointsPi_surjective [CompactSpace X] [∀ i, IsLocalRing (R i)] :\n    Function.Surjective (pointsPi R X) := by\n  intro f\n  let 𝒰 : X.OpenCover := X.affineCover.finiteSubcover\n  have (i) : IsAffine (𝒰.obj i) := isAffine_Spec _\n  have (i) : ∃ j, Set.range (f i).base ⊆ (𝒰.map j).opensRange := by\n    refine ⟨𝒰.f ((f i).base (IsLocalRing.closedPoint (R i))), ?_⟩\n    rintro _ ⟨x, rfl⟩\n    exact ((IsLocalRing.specializes_closedPoint x).map (f i).base.2).mem_open\n      (𝒰.map _).opensRange.2 (𝒰.covers _)\n  choose j hj using this\n  have (j₀) := pointsPi_surjective_of_isAffine (ι := { i // j i = j₀ }) (R ·) (𝒰.obj j₀)\n    (fun i ↦ IsOpenImmersion.lift (𝒰.map j₀) (f i.1) (by rcases i with ⟨i, rfl⟩; exact hj i))\n  choose g hg using this\n  simp_rw [funext_iff, pointsPi] at hg\n  let R' (j₀) := CommRingCat.of (Π i : { i // j i = j₀ }, R i)\n  let e : (Π i, R i) ≃+* Π j₀, R' j₀ :=\n  { toFun f _ i := f i\n    invFun f i := f _ ⟨i, rfl⟩\n    left_inv _ := rfl\n    right_inv _ := funext₂ fun j₀ i ↦ by rcases i with ⟨i, rfl⟩; rfl\n    map_mul' _ _ := rfl\n    map_add' _ _ := rfl }\n  refine ⟨Spec.map (CommRingCat.ofHom e.symm.toRingHom) ≫ inv (sigmaSpec R') ≫\n    Sigma.desc fun j₀ ↦ g j₀ ≫ 𝒰.map j₀, ?_⟩\n  ext i : 1\n  have : (Pi.evalRingHom (R ·) i).comp e.symm.toRingHom =\n    (Pi.evalRingHom _ ⟨i, rfl⟩).comp (Pi.evalRingHom (R' ·) (j i)) := rfl\n  rw [pointsPi, ← Spec.map_comp_assoc, ← CommRingCat.ofHom_comp, this, CommRingCat.ofHom_comp,\n    Spec.map_comp_assoc, ← ι_sigmaSpec R', Category.assoc, IsIso.hom_inv_id_assoc,\n    Sigma.ι_desc, ← Category.assoc, hg, IsOpenImmersion.lift_fac]\n\n"}
