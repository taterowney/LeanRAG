{"name":"AbstractCompletion.complete","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u\ninst✝ : UniformSpace α\nself : AbstractCompletion α\n⊢ CompleteSpace self.space","decl":"/-- A completion of `α` is the data of a complete separated uniform space (from the same universe)\nand a map from `α` with dense range and inducing the original uniform structure on `α`. -/\nstructure AbstractCompletion (α : Type u) [UniformSpace α] where\n  /-- The underlying space of the completion. -/\n  space : Type u\n  /-- A map from a space to its completion. -/\n  coe : α → space\n  /-- The completion carries a uniform structure. -/\n  uniformStruct : UniformSpace space\n  /-- The completion is complete. -/\n  complete : CompleteSpace space\n  /-- The completion is a T₀ space. -/\n  separation : T0Space space\n  /-- The map into the completion is uniform-inducing. -/\n  isUniformInducing : IsUniformInducing coe\n  /-- The map into the completion has dense range. -/\n  dense : DenseRange coe\n\n"}
{"name":"AbstractCompletion.separation","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u\ninst✝ : UniformSpace α\nself : AbstractCompletion α\n⊢ T0Space self.space","decl":"/-- A completion of `α` is the data of a complete separated uniform space (from the same universe)\nand a map from `α` with dense range and inducing the original uniform structure on `α`. -/\nstructure AbstractCompletion (α : Type u) [UniformSpace α] where\n  /-- The underlying space of the completion. -/\n  space : Type u\n  /-- A map from a space to its completion. -/\n  coe : α → space\n  /-- The completion carries a uniform structure. -/\n  uniformStruct : UniformSpace space\n  /-- The completion is complete. -/\n  complete : CompleteSpace space\n  /-- The completion is a T₀ space. -/\n  separation : T0Space space\n  /-- The map into the completion is uniform-inducing. -/\n  isUniformInducing : IsUniformInducing coe\n  /-- The map into the completion has dense range. -/\n  dense : DenseRange coe\n\n"}
{"name":"AbstractCompletion.isUniformInducing","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u\ninst✝ : UniformSpace α\nself : AbstractCompletion α\n⊢ IsUniformInducing self.coe","decl":"/-- A completion of `α` is the data of a complete separated uniform space (from the same universe)\nand a map from `α` with dense range and inducing the original uniform structure on `α`. -/\nstructure AbstractCompletion (α : Type u) [UniformSpace α] where\n  /-- The underlying space of the completion. -/\n  space : Type u\n  /-- A map from a space to its completion. -/\n  coe : α → space\n  /-- The completion carries a uniform structure. -/\n  uniformStruct : UniformSpace space\n  /-- The completion is complete. -/\n  complete : CompleteSpace space\n  /-- The completion is a T₀ space. -/\n  separation : T0Space space\n  /-- The map into the completion is uniform-inducing. -/\n  isUniformInducing : IsUniformInducing coe\n  /-- The map into the completion has dense range. -/\n  dense : DenseRange coe\n\n"}
{"name":"AbstractCompletion.mk.injEq","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u\ninst✝ : UniformSpace α\nspace✝ : Type u\ncoe✝ : α → space✝\nuniformStruct✝ : UniformSpace space✝\ncomplete✝ : CompleteSpace space✝\nseparation✝ : T0Space space✝\nisUniformInducing✝ : IsUniformInducing coe✝\ndense✝ : DenseRange coe✝\nspace : Type u\ncoe : α → space\nuniformStruct : UniformSpace space\ncomplete : CompleteSpace space\nseparation : T0Space space\nisUniformInducing : IsUniformInducing coe\ndense : DenseRange coe\n⊢ Eq (Eq { space := space✝, coe := coe✝, uniformStruct := uniformStruct✝, complete := complete✝, separation := separation✝, isUniformInducing := isUniformInducing✝, dense := dense✝ } { space := space, coe := coe, uniformStruct := uniformStruct, complete := complete, separation := separation, isUniformInducing := isUniformInducing, dense := dense }) (And (Eq space✝ space) (And (HEq coe✝ coe) (HEq uniformStruct✝ uniformStruct)))","decl":"/-- A completion of `α` is the data of a complete separated uniform space (from the same universe)\nand a map from `α` with dense range and inducing the original uniform structure on `α`. -/\nstructure AbstractCompletion (α : Type u) [UniformSpace α] where\n  /-- The underlying space of the completion. -/\n  space : Type u\n  /-- A map from a space to its completion. -/\n  coe : α → space\n  /-- The completion carries a uniform structure. -/\n  uniformStruct : UniformSpace space\n  /-- The completion is complete. -/\n  complete : CompleteSpace space\n  /-- The completion is a T₀ space. -/\n  separation : T0Space space\n  /-- The map into the completion is uniform-inducing. -/\n  isUniformInducing : IsUniformInducing coe\n  /-- The map into the completion has dense range. -/\n  dense : DenseRange coe\n\n"}
{"name":"AbstractCompletion.dense","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u\ninst✝ : UniformSpace α\nself : AbstractCompletion α\n⊢ DenseRange self.coe","decl":"/-- A completion of `α` is the data of a complete separated uniform space (from the same universe)\nand a map from `α` with dense range and inducing the original uniform structure on `α`. -/\nstructure AbstractCompletion (α : Type u) [UniformSpace α] where\n  /-- The underlying space of the completion. -/\n  space : Type u\n  /-- A map from a space to its completion. -/\n  coe : α → space\n  /-- The completion carries a uniform structure. -/\n  uniformStruct : UniformSpace space\n  /-- The completion is complete. -/\n  complete : CompleteSpace space\n  /-- The completion is a T₀ space. -/\n  separation : T0Space space\n  /-- The map into the completion is uniform-inducing. -/\n  isUniformInducing : IsUniformInducing coe\n  /-- The map into the completion has dense range. -/\n  dense : DenseRange coe\n\n"}
{"name":"AbstractCompletion.mk.inj","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u\ninst✝ : UniformSpace α\nspace✝ : Type u\ncoe✝ : α → space✝\nuniformStruct✝ : UniformSpace space✝\ncomplete✝ : CompleteSpace space✝\nseparation✝ : T0Space space✝\nisUniformInducing✝ : IsUniformInducing coe✝\ndense✝ : DenseRange coe✝\nspace : Type u\ncoe : α → space\nuniformStruct : UniformSpace space\ncomplete : CompleteSpace space\nseparation : T0Space space\nisUniformInducing : IsUniformInducing coe\ndense : DenseRange coe\nx✝ : Eq { space := space✝, coe := coe✝, uniformStruct := uniformStruct✝, complete := complete✝, separation := separation✝, isUniformInducing := isUniformInducing✝, dense := dense✝ } { space := space, coe := coe, uniformStruct := uniformStruct, complete := complete, separation := separation, isUniformInducing := isUniformInducing, dense := dense }\n⊢ And (Eq space✝ space) (And (HEq coe✝ coe) (HEq uniformStruct✝ uniformStruct))","decl":"/-- A completion of `α` is the data of a complete separated uniform space (from the same universe)\nand a map from `α` with dense range and inducing the original uniform structure on `α`. -/\nstructure AbstractCompletion (α : Type u) [UniformSpace α] where\n  /-- The underlying space of the completion. -/\n  space : Type u\n  /-- A map from a space to its completion. -/\n  coe : α → space\n  /-- The completion carries a uniform structure. -/\n  uniformStruct : UniformSpace space\n  /-- The completion is complete. -/\n  complete : CompleteSpace space\n  /-- The completion is a T₀ space. -/\n  separation : T0Space space\n  /-- The map into the completion is uniform-inducing. -/\n  isUniformInducing : IsUniformInducing coe\n  /-- The map into the completion has dense range. -/\n  dense : DenseRange coe\n\n"}
{"name":"AbstractCompletion.mk.sizeOf_spec","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u\ninst✝¹ : UniformSpace α\ninst✝ : SizeOf α\nspace : Type u\ncoe : α → space\nuniformStruct : UniformSpace space\ncomplete : CompleteSpace space\nseparation : T0Space space\nisUniformInducing : IsUniformInducing coe\ndense : DenseRange coe\n⊢ Eq (SizeOf.sizeOf { space := space, coe := coe, uniformStruct := uniformStruct, complete := complete, separation := separation, isUniformInducing := isUniformInducing, dense := dense }) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf space)) (SizeOf.sizeOf uniformStruct)) (SizeOf.sizeOf complete)) (SizeOf.sizeOf separation)) (SizeOf.sizeOf isUniformInducing))","decl":"/-- A completion of `α` is the data of a complete separated uniform space (from the same universe)\nand a map from `α` with dense range and inducing the original uniform structure on `α`. -/\nstructure AbstractCompletion (α : Type u) [UniformSpace α] where\n  /-- The underlying space of the completion. -/\n  space : Type u\n  /-- A map from a space to its completion. -/\n  coe : α → space\n  /-- The completion carries a uniform structure. -/\n  uniformStruct : UniformSpace space\n  /-- The completion is complete. -/\n  complete : CompleteSpace space\n  /-- The completion is a T₀ space. -/\n  separation : T0Space space\n  /-- The map into the completion is uniform-inducing. -/\n  isUniformInducing : IsUniformInducing coe\n  /-- The map into the completion has dense range. -/\n  dense : DenseRange coe\n\n"}
{"name":"AbstractCompletion.uniformInducing","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u\ninst✝ : UniformSpace α\nself : AbstractCompletion α\n⊢ IsUniformInducing self.coe","decl":"@[deprecated (since := \"2024-10-08\")] alias uniformInducing := isUniformInducing\n\n"}
{"name":"AbstractCompletion.closure_range","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝ : UniformSpace α\npkg : AbstractCompletion α\n⊢ Eq (closure (Set.range pkg.coe)) Set.univ","decl":"theorem closure_range : closure (range ι) = univ :=\n  pkg.dense.closure_range\n\n"}
{"name":"AbstractCompletion.isDenseInducing","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝ : UniformSpace α\npkg : AbstractCompletion α\n⊢ IsDenseInducing pkg.coe","decl":"theorem isDenseInducing : IsDenseInducing ι :=\n  ⟨pkg.isUniformInducing.isInducing, pkg.dense⟩\n\n"}
{"name":"AbstractCompletion.uniformContinuous_coe","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝ : UniformSpace α\npkg : AbstractCompletion α\n⊢ UniformContinuous pkg.coe","decl":"theorem uniformContinuous_coe : UniformContinuous ι :=\n  IsUniformInducing.uniformContinuous pkg.isUniformInducing\n\n"}
{"name":"AbstractCompletion.continuous_coe","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝ : UniformSpace α\npkg : AbstractCompletion α\n⊢ Continuous pkg.coe","decl":"theorem continuous_coe : Continuous ι :=\n  pkg.uniformContinuous_coe.continuous\n\n"}
{"name":"AbstractCompletion.induction_on","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝ : UniformSpace α\npkg : AbstractCompletion α\np : pkg.space → Prop\na : pkg.space\nhp : IsClosed (setOf fun a => p a)\nih : ∀ (a : α), p (pkg.coe a)\n⊢ p a","decl":"@[elab_as_elim]\ntheorem induction_on {p : hatα → Prop} (a : hatα) (hp : IsClosed { a | p a }) (ih : ∀ a, p (ι a)) :\n    p a :=\n  isClosed_property pkg.dense hp ih a\n\n"}
{"name":"AbstractCompletion.funext","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\npkg : AbstractCompletion α\nβ : Type u_2\ninst✝¹ : TopologicalSpace β\ninst✝ : T2Space β\nf g : pkg.space → β\nhf : Continuous f\nhg : Continuous g\nh : ∀ (a : α), Eq (f (pkg.coe a)) (g (pkg.coe a))\n⊢ Eq f g","decl":"protected theorem funext [TopologicalSpace β] [T2Space β] {f g : hatα → β} (hf : Continuous f)\n    (hg : Continuous g) (h : ∀ a, f (ι a) = g (ι a)) : f = g :=\n  funext fun a => pkg.induction_on a (isClosed_eq hf hg) h\n\n"}
{"name":"AbstractCompletion.extend_def","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝¹ : UniformSpace α\npkg : AbstractCompletion α\nβ : Type u_2\ninst✝ : UniformSpace β\nf : α → β\nhf : UniformContinuous f\n⊢ Eq (pkg.extend f) (⋯.extend f)","decl":"theorem extend_def (hf : UniformContinuous f) : pkg.extend f = pkg.isDenseInducing.extend f :=\n  if_pos hf\n\n"}
{"name":"AbstractCompletion.extend_coe","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\npkg : AbstractCompletion α\nβ : Type u_2\ninst✝¹ : UniformSpace β\nf : α → β\ninst✝ : T2Space β\nhf : UniformContinuous f\na : α\n⊢ Eq (pkg.extend f (pkg.coe a)) (f a)","decl":"theorem extend_coe [T2Space β] (hf : UniformContinuous f) (a : α) : (pkg.extend f) (ι a) = f a := by\n  rw [pkg.extend_def hf]\n  exact pkg.isDenseInducing.extend_eq hf.continuous a\n\n"}
{"name":"AbstractCompletion.uniformContinuous_extend","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\npkg : AbstractCompletion α\nβ : Type u_2\ninst✝¹ : UniformSpace β\nf : α → β\ninst✝ : CompleteSpace β\n⊢ UniformContinuous (pkg.extend f)","decl":"theorem uniformContinuous_extend : UniformContinuous (pkg.extend f) := by\n  by_cases hf : UniformContinuous f\n  · rw [pkg.extend_def hf]\n    exact uniformContinuous_uniformly_extend pkg.isUniformInducing pkg.dense hf\n  · change UniformContinuous (ite _ _ _)\n    rw [if_neg hf]\n    exact uniformContinuous_of_const fun a b => by congr 1\n\n"}
{"name":"AbstractCompletion.continuous_extend","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\npkg : AbstractCompletion α\nβ : Type u_2\ninst✝¹ : UniformSpace β\nf : α → β\ninst✝ : CompleteSpace β\n⊢ Continuous (pkg.extend f)","decl":"theorem continuous_extend : Continuous (pkg.extend f) :=\n  pkg.uniformContinuous_extend.continuous\n\n"}
{"name":"AbstractCompletion.extend_unique","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝³ : UniformSpace α\npkg : AbstractCompletion α\nβ : Type u_2\ninst✝² : UniformSpace β\nf : α → β\ninst✝¹ : CompleteSpace β\ninst✝ : T0Space β\nhf : UniformContinuous f\ng : pkg.space → β\nhg : UniformContinuous g\nh : ∀ (a : α), Eq (f a) (g (pkg.coe a))\n⊢ Eq (pkg.extend f) g","decl":"theorem extend_unique (hf : UniformContinuous f) {g : hatα → β} (hg : UniformContinuous g)\n    (h : ∀ a : α, f a = g (ι a)) : pkg.extend f = g := by\n  apply pkg.funext pkg.continuous_extend hg.continuous\n  simpa only [pkg.extend_coe hf] using h\n\n"}
{"name":"AbstractCompletion.extend_comp_coe","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝³ : UniformSpace α\npkg : AbstractCompletion α\nβ : Type u_2\ninst✝² : UniformSpace β\ninst✝¹ : CompleteSpace β\ninst✝ : T0Space β\nf : pkg.space → β\nhf : UniformContinuous f\n⊢ Eq (pkg.extend (Function.comp f pkg.coe)) f","decl":"@[simp]\ntheorem extend_comp_coe {f : hatα → β} (hf : UniformContinuous f) : pkg.extend (f ∘ ι) = f :=\n  funext fun x =>\n    pkg.induction_on x (isClosed_eq pkg.continuous_extend hf.continuous) fun y =>\n      pkg.extend_coe (hf.comp <| pkg.uniformContinuous_coe) y\n\n"}
{"name":"AbstractCompletion.uniformContinuous_map","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝¹ : UniformSpace α\npkg : AbstractCompletion α\nβ : Type u_2\ninst✝ : UniformSpace β\npkg' : AbstractCompletion β\nf : α → β\n⊢ UniformContinuous (pkg.map pkg' f)","decl":"theorem uniformContinuous_map : UniformContinuous (map f) :=\n  pkg.uniformContinuous_extend\n\n"}
{"name":"AbstractCompletion.continuous_map","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝¹ : UniformSpace α\npkg : AbstractCompletion α\nβ : Type u_2\ninst✝ : UniformSpace β\npkg' : AbstractCompletion β\nf : α → β\n⊢ Continuous (pkg.map pkg' f)","decl":"@[continuity]\ntheorem continuous_map : Continuous (map f) :=\n  pkg.continuous_extend\n\n"}
{"name":"AbstractCompletion.map_coe","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝¹ : UniformSpace α\npkg : AbstractCompletion α\nβ : Type u_2\ninst✝ : UniformSpace β\npkg' : AbstractCompletion β\nf : α → β\nhf : UniformContinuous f\na : α\n⊢ Eq (pkg.map pkg' f (pkg.coe a)) (pkg'.coe (f a))","decl":"@[simp]\ntheorem map_coe (hf : UniformContinuous f) (a : α) : map f (ι a) = ι' (f a) :=\n  pkg.extend_coe (pkg'.uniformContinuous_coe.comp hf) a\n\n"}
{"name":"AbstractCompletion.map_unique","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝¹ : UniformSpace α\npkg : AbstractCompletion α\nβ : Type u_2\ninst✝ : UniformSpace β\npkg' : AbstractCompletion β\nf : α → β\ng : pkg.space → pkg'.space\nhg : UniformContinuous g\nh : ∀ (a : α), Eq (pkg'.coe (f a)) (g (pkg.coe a))\n⊢ Eq (pkg.map pkg' f) g","decl":"theorem map_unique {f : α → β} {g : hatα → hatβ} (hg : UniformContinuous g)\n    (h : ∀ a, ι' (f a) = g (ι a)) : map f = g :=\n  pkg.funext (pkg.continuous_map _ _) hg.continuous <| by\n    intro a\n    change pkg.extend (ι' ∘ f) _ = _\n    simp_rw [Function.comp_def, h, ← comp_apply (f := g)]\n    rw [pkg.extend_coe (hg.comp pkg.uniformContinuous_coe)]\n\n"}
{"name":"AbstractCompletion.map_id","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝ : UniformSpace α\npkg : AbstractCompletion α\n⊢ Eq (pkg.map pkg id) id","decl":"@[simp]\ntheorem map_id : pkg.map pkg id = id :=\n  pkg.map_unique pkg uniformContinuous_id fun _ => rfl\n\n"}
{"name":"AbstractCompletion.extend_map","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝⁴ : UniformSpace α\npkg : AbstractCompletion α\nβ : Type u_2\ninst✝³ : UniformSpace β\npkg' : AbstractCompletion β\nγ : Type u_3\ninst✝² : UniformSpace γ\ninst✝¹ : CompleteSpace γ\ninst✝ : T0Space γ\nf : β → γ\ng : α → β\nhf : UniformContinuous f\nhg : UniformContinuous g\n⊢ Eq (Function.comp (pkg'.extend f) (pkg.map pkg' g)) (pkg.extend (Function.comp f g))","decl":"theorem extend_map [CompleteSpace γ] [T0Space γ] {f : β → γ} {g : α → β}\n    (hf : UniformContinuous f) (hg : UniformContinuous g) :\n    pkg'.extend f ∘ map g = pkg.extend (f ∘ g) :=\n  pkg.funext (pkg'.continuous_extend.comp (pkg.continuous_map pkg' _)) pkg.continuous_extend\n    fun a => by\n    rw [pkg.extend_coe (hf.comp hg), comp_apply, pkg.map_coe pkg' hg, pkg'.extend_coe hf]\n    rfl\n\n"}
{"name":"AbstractCompletion.map_comp","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\npkg : AbstractCompletion α\nβ : Type u_2\ninst✝¹ : UniformSpace β\npkg' : AbstractCompletion β\nγ : Type u_3\ninst✝ : UniformSpace γ\npkg'' : AbstractCompletion γ\ng : β → γ\nf : α → β\nhg : UniformContinuous g\nhf : UniformContinuous f\n⊢ Eq (Function.comp (pkg'.map pkg'' g) (pkg.map pkg' f)) (pkg.map pkg'' (Function.comp g f))","decl":"theorem map_comp {g : β → γ} {f : α → β} (hg : UniformContinuous g) (hf : UniformContinuous f) :\n    pkg'.map pkg'' g ∘ pkg.map pkg' f = pkg.map pkg'' (g ∘ f) :=\n  pkg.extend_map pkg' (pkg''.uniformContinuous_coe.comp hg) hf\n\n"}
{"name":"AbstractCompletion.uniformContinuous_compare","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝ : UniformSpace α\npkg pkg' : AbstractCompletion α\n⊢ UniformContinuous (pkg.compare pkg')","decl":"theorem uniformContinuous_compare : UniformContinuous (pkg.compare pkg') :=\n  pkg.uniformContinuous_extend\n\n"}
{"name":"AbstractCompletion.compare_coe","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝ : UniformSpace α\npkg pkg' : AbstractCompletion α\na : α\n⊢ Eq (pkg.compare pkg' (pkg.coe a)) (pkg'.coe a)","decl":"theorem compare_coe (a : α) : pkg.compare pkg' (pkg.coe a) = pkg'.coe a :=\n  pkg.extend_coe pkg'.uniformContinuous_coe a\n\n"}
{"name":"AbstractCompletion.inverse_compare","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝ : UniformSpace α\npkg pkg' : AbstractCompletion α\n⊢ Eq (Function.comp (pkg.compare pkg') (pkg'.compare pkg)) id","decl":"theorem inverse_compare : pkg.compare pkg' ∘ pkg'.compare pkg = id := by\n  have uc := pkg.uniformContinuous_compare pkg'\n  have uc' := pkg'.uniformContinuous_compare pkg\n  apply pkg'.funext (uc.comp uc').continuous continuous_id\n  intro a\n  rw [comp_apply, pkg'.compare_coe pkg, pkg.compare_coe pkg']\n  rfl\n\n"}
{"name":"AbstractCompletion.uniformContinuous_compareEquiv","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝ : UniformSpace α\npkg pkg' : AbstractCompletion α\n⊢ UniformContinuous ⇑(pkg.compareEquiv pkg')","decl":"theorem uniformContinuous_compareEquiv : UniformContinuous (pkg.compareEquiv pkg') :=\n  pkg.uniformContinuous_compare pkg'\n\n"}
{"name":"AbstractCompletion.uniformContinuous_compareEquiv_symm","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝ : UniformSpace α\npkg pkg' : AbstractCompletion α\n⊢ UniformContinuous ⇑(pkg.compareEquiv pkg').symm","decl":"theorem uniformContinuous_compareEquiv_symm : UniformContinuous (pkg.compareEquiv pkg').symm :=\n  pkg'.uniformContinuous_compare pkg\n\n\n"}
{"name":"AbstractCompletion.compare_comp_eq_compare","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\npkg pkg' : AbstractCompletion α\nγ : Type u_3\ninst✝¹ : TopologicalSpace γ\ninst✝ : T3Space γ\nf : α → γ\ncont_f : Continuous f\na✝ : ∀ (a : pkg.space), Filter.Tendsto f (Filter.comap pkg.coe (nhds a)) (nhds (⋯.extend f a))\n⊢ Eq (Function.comp (⋯.extend f) (pkg'.compare pkg)) (⋯.extend f)","decl":"theorem compare_comp_eq_compare (γ : Type*) [TopologicalSpace γ]\n    [T3Space γ] {f : α → γ} (cont_f : Continuous f) :\n    letI := pkg.uniformStruct.toTopologicalSpace\n    letI := pkg'.uniformStruct.toTopologicalSpace\n    (∀ a : pkg.space,\n      Filter.Tendsto f (Filter.comap pkg.coe (𝓝 a)) (𝓝 ((pkg.isDenseInducing.extend f) a))) →\n      pkg.isDenseInducing.extend f ∘ pkg'.compare pkg = pkg'.isDenseInducing.extend f := by\n  let _ := pkg'.uniformStruct\n  let _ := pkg.uniformStruct\n  intro h\n  have (x : α) : (pkg.isDenseInducing.extend f ∘ pkg'.compare pkg) (pkg'.coe x) = f x := by\n    simp only [Function.comp_apply, compare_coe, IsDenseInducing.extend_eq _ cont_f, implies_true]\n  apply (IsDenseInducing.extend_unique (AbstractCompletion.isDenseInducing _) this\n    (Continuous.comp _ (uniformContinuous_compare pkg' pkg).continuous )).symm\n  apply IsDenseInducing.continuous_extend\n  exact fun a ↦ ⟨(pkg.isDenseInducing.extend f) a, h a⟩\n\n"}
{"name":"AbstractCompletion.extension₂_coe_coe","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝³ : UniformSpace α\npkg : AbstractCompletion α\nβ : Type u_2\ninst✝² : UniformSpace β\npkg' : AbstractCompletion β\nγ : Type u_3\ninst✝¹ : UniformSpace γ\ninst✝ : T0Space γ\nf : α → β → γ\nhf : UniformContinuous (Function.uncurry f)\na : α\nb : β\n⊢ Eq (pkg.extend₂ pkg' f (pkg.coe a) (pkg'.coe b)) (f a b)","decl":"theorem extension₂_coe_coe (hf : UniformContinuous <| uncurry f) (a : α) (b : β) :\n    pkg.extend₂ pkg' f (ι a) (ι' b) = f a b :=\n  show (pkg.prod pkg').extend (uncurry f) ((pkg.prod pkg').coe (a, b)) = uncurry f (a, b) from\n    (pkg.prod pkg').extend_coe hf _\n\n"}
{"name":"AbstractCompletion.uniformContinuous_extension₂","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝³ : UniformSpace α\npkg : AbstractCompletion α\nβ : Type u_2\ninst✝² : UniformSpace β\npkg' : AbstractCompletion β\nγ : Type u_3\ninst✝¹ : UniformSpace γ\nf : α → β → γ\ninst✝ : CompleteSpace γ\n⊢ UniformContinuous₂ (pkg.extend₂ pkg' f)","decl":"theorem uniformContinuous_extension₂ : UniformContinuous₂ (pkg.extend₂ pkg' f) := by\n  rw [uniformContinuous₂_def, AbstractCompletion.extend₂, uncurry_curry]\n  apply uniformContinuous_extend\n\n"}
{"name":"AbstractCompletion.uniformContinuous_map₂","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\npkg : AbstractCompletion α\nβ : Type u_2\ninst✝¹ : UniformSpace β\npkg' : AbstractCompletion β\nγ : Type u_3\ninst✝ : UniformSpace γ\npkg'' : AbstractCompletion γ\nf : α → β → γ\n⊢ UniformContinuous₂ (pkg.map₂ pkg' pkg'' f)","decl":"theorem uniformContinuous_map₂ (f : α → β → γ) : UniformContinuous₂ (pkg.map₂ pkg' pkg'' f) :=\n  AbstractCompletion.uniformContinuous_extension₂ pkg pkg' _\n\n"}
{"name":"AbstractCompletion.continuous_map₂","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝³ : UniformSpace α\npkg : AbstractCompletion α\nβ : Type u_2\ninst✝² : UniformSpace β\npkg' : AbstractCompletion β\nγ : Type u_3\ninst✝¹ : UniformSpace γ\npkg'' : AbstractCompletion γ\nδ : Type u_4\ninst✝ : TopologicalSpace δ\nf : α → β → γ\na : δ → pkg.space\nb : δ → pkg'.space\nha : Continuous a\nhb : Continuous b\n⊢ Continuous fun d => pkg.map₂ pkg' pkg'' f (a d) (b d)","decl":"theorem continuous_map₂ {δ} [TopologicalSpace δ] {f : α → β → γ} {a : δ → hatα} {b : δ → hatβ}\n    (ha : Continuous a) (hb : Continuous b) :\n    Continuous fun d : δ => pkg.map₂ pkg' pkg'' f (a d) (b d) :=\n  ((pkg.uniformContinuous_map₂ pkg' pkg'' f).continuous.comp (Continuous.prod_mk ha hb) :)\n\n"}
{"name":"AbstractCompletion.map₂_coe_coe","module":"Mathlib.Topology.UniformSpace.AbstractCompletion","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\npkg : AbstractCompletion α\nβ : Type u_2\ninst✝¹ : UniformSpace β\npkg' : AbstractCompletion β\nγ : Type u_3\ninst✝ : UniformSpace γ\npkg'' : AbstractCompletion γ\na : α\nb : β\nf : α → β → γ\nhf : UniformContinuous₂ f\n⊢ Eq (pkg.map₂ pkg' pkg'' f (pkg.coe a) (pkg'.coe b)) (pkg''.coe (f a b))","decl":"theorem map₂_coe_coe (a : α) (b : β) (f : α → β → γ) (hf : UniformContinuous₂ f) :\n    pkg.map₂ pkg' pkg'' f (ι a) (ι' b) = ι'' (f a b) :=\n  pkg.extension₂_coe_coe (f := pkg''.coe ∘₂ f) pkg' (pkg''.uniformContinuous_coe.comp hf) a b\n\n"}
