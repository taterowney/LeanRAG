{"name":"dimH_def","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝² : EMetricSpace X\ninst✝¹ : MeasurableSpace X\ninst✝ : BorelSpace X\ns : Set X\n⊢ Eq (dimH s) (iSup fun d => iSup fun x => ↑d)","decl":"/-- Unfold the definition of `dimH` using `[MeasurableSpace X] [BorelSpace X]` from the\nenvironment. -/\ntheorem dimH_def (s : Set X) : dimH s = ⨆ (d : ℝ≥0) (_ : μH[d] s = ∞), (d : ℝ≥0∞) := by\n  borelize X; rw [dimH]\n\n"}
{"name":"hausdorffMeasure_of_lt_dimH","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝² : EMetricSpace X\ninst✝¹ : MeasurableSpace X\ninst✝ : BorelSpace X\ns : Set X\nd : NNReal\nh : LT.lt (↑d) (dimH s)\n⊢ Eq ((MeasureTheory.Measure.hausdorffMeasure ↑d) s) Top.top","decl":"theorem hausdorffMeasure_of_lt_dimH {s : Set X} {d : ℝ≥0} (h : ↑d < dimH s) : μH[d] s = ∞ := by\n  simp only [dimH_def, lt_iSup_iff] at h\n  rcases h with ⟨d', hsd', hdd'⟩\n  rw [ENNReal.coe_lt_coe, ← NNReal.coe_lt_coe] at hdd'\n  exact top_unique (hsd' ▸ hausdorffMeasure_mono hdd'.le _)\n\n"}
{"name":"dimH_le","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝² : EMetricSpace X\ninst✝¹ : MeasurableSpace X\ninst✝ : BorelSpace X\ns : Set X\nd : ENNReal\nH : ∀ (d' : NNReal), Eq ((MeasureTheory.Measure.hausdorffMeasure ↑d') s) Top.top → LE.le (↑d') d\n⊢ LE.le (dimH s) d","decl":"theorem dimH_le {s : Set X} {d : ℝ≥0∞} (H : ∀ d' : ℝ≥0, μH[d'] s = ∞ → ↑d' ≤ d) : dimH s ≤ d :=\n  (dimH_def s).trans_le <| iSup₂_le H\n\n"}
{"name":"dimH_le_of_hausdorffMeasure_ne_top","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝² : EMetricSpace X\ninst✝¹ : MeasurableSpace X\ninst✝ : BorelSpace X\ns : Set X\nd : NNReal\nh : Ne ((MeasureTheory.Measure.hausdorffMeasure ↑d) s) Top.top\n⊢ LE.le (dimH s) ↑d","decl":"theorem dimH_le_of_hausdorffMeasure_ne_top {s : Set X} {d : ℝ≥0} (h : μH[d] s ≠ ∞) : dimH s ≤ d :=\n  le_of_not_lt <| mt hausdorffMeasure_of_lt_dimH h\n\n"}
{"name":"le_dimH_of_hausdorffMeasure_eq_top","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝² : EMetricSpace X\ninst✝¹ : MeasurableSpace X\ninst✝ : BorelSpace X\ns : Set X\nd : NNReal\nh : Eq ((MeasureTheory.Measure.hausdorffMeasure ↑d) s) Top.top\n⊢ LE.le (↑d) (dimH s)","decl":"theorem le_dimH_of_hausdorffMeasure_eq_top {s : Set X} {d : ℝ≥0} (h : μH[d] s = ∞) :\n    ↑d ≤ dimH s := by\n  rw [dimH_def]; exact le_iSup₂ (α := ℝ≥0∞) d h\n\n"}
{"name":"hausdorffMeasure_of_dimH_lt","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝² : EMetricSpace X\ninst✝¹ : MeasurableSpace X\ninst✝ : BorelSpace X\ns : Set X\nd : NNReal\nh : LT.lt (dimH s) ↑d\n⊢ Eq ((MeasureTheory.Measure.hausdorffMeasure ↑d) s) 0","decl":"theorem hausdorffMeasure_of_dimH_lt {s : Set X} {d : ℝ≥0} (h : dimH s < d) : μH[d] s = 0 := by\n  rw [dimH_def] at h\n  rcases ENNReal.lt_iff_exists_nnreal_btwn.1 h with ⟨d', hsd', hd'd⟩\n  rw [ENNReal.coe_lt_coe, ← NNReal.coe_lt_coe] at hd'd\n  exact (hausdorffMeasure_zero_or_top hd'd s).resolve_right fun h₂ => hsd'.not_le <|\n    le_iSup₂ (α := ℝ≥0∞) d' h₂\n\n"}
{"name":"measure_zero_of_dimH_lt","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝² : EMetricSpace X\ninst✝¹ : MeasurableSpace X\ninst✝ : BorelSpace X\nμ : MeasureTheory.Measure X\nd : NNReal\nh : μ.AbsolutelyContinuous (MeasureTheory.Measure.hausdorffMeasure ↑d)\ns : Set X\nhd : LT.lt (dimH s) ↑d\n⊢ Eq (μ s) 0","decl":"theorem measure_zero_of_dimH_lt {μ : Measure X} {d : ℝ≥0} (h : μ ≪ μH[d]) {s : Set X}\n    (hd : dimH s < d) : μ s = 0 :=\n  h <| hausdorffMeasure_of_dimH_lt hd\n\n"}
{"name":"le_dimH_of_hausdorffMeasure_ne_zero","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝² : EMetricSpace X\ninst✝¹ : MeasurableSpace X\ninst✝ : BorelSpace X\ns : Set X\nd : NNReal\nh : Ne ((MeasureTheory.Measure.hausdorffMeasure ↑d) s) 0\n⊢ LE.le (↑d) (dimH s)","decl":"theorem le_dimH_of_hausdorffMeasure_ne_zero {s : Set X} {d : ℝ≥0} (h : μH[d] s ≠ 0) : ↑d ≤ dimH s :=\n  le_of_not_lt <| mt hausdorffMeasure_of_dimH_lt h\n\n"}
{"name":"dimH_of_hausdorffMeasure_ne_zero_ne_top","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝² : EMetricSpace X\ninst✝¹ : MeasurableSpace X\ninst✝ : BorelSpace X\nd : NNReal\ns : Set X\nh : Ne ((MeasureTheory.Measure.hausdorffMeasure ↑d) s) 0\nh' : Ne ((MeasureTheory.Measure.hausdorffMeasure ↑d) s) Top.top\n⊢ Eq (dimH s) ↑d","decl":"theorem dimH_of_hausdorffMeasure_ne_zero_ne_top {d : ℝ≥0} {s : Set X} (h : μH[d] s ≠ 0)\n    (h' : μH[d] s ≠ ∞) : dimH s = d :=\n  le_antisymm (dimH_le_of_hausdorffMeasure_ne_top h') (le_dimH_of_hausdorffMeasure_ne_zero h)\n\n"}
{"name":"dimH_mono","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝ : EMetricSpace X\ns t : Set X\nh : HasSubset.Subset s t\n⊢ LE.le (dimH s) (dimH t)","decl":"@[mono]\ntheorem dimH_mono {s t : Set X} (h : s ⊆ t) : dimH s ≤ dimH t := by\n  borelize X\n  exact dimH_le fun d hd => le_dimH_of_hausdorffMeasure_eq_top <| top_unique <| hd ▸ measure_mono h\n\n"}
{"name":"dimH_subsingleton","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝ : EMetricSpace X\ns : Set X\nh : s.Subsingleton\n⊢ Eq (dimH s) 0","decl":"theorem dimH_subsingleton {s : Set X} (h : s.Subsingleton) : dimH s = 0 := by\n  borelize X\n  apply le_antisymm _ (zero_le _)\n  refine dimH_le_of_hausdorffMeasure_ne_top ?_\n  exact ((hausdorffMeasure_le_one_of_subsingleton h le_rfl).trans_lt ENNReal.one_lt_top).ne\n\n"}
{"name":"Set.Subsingleton.dimH_zero","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝ : EMetricSpace X\ns : Set X\nh : s.Subsingleton\n⊢ Eq (dimH s) 0","decl":"alias Set.Subsingleton.dimH_zero := dimH_subsingleton\n\n"}
{"name":"dimH_empty","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝ : EMetricSpace X\n⊢ Eq (dimH EmptyCollection.emptyCollection) 0","decl":"@[simp]\ntheorem dimH_empty : dimH (∅ : Set X) = 0 :=\n  subsingleton_empty.dimH_zero\n\n"}
{"name":"dimH_singleton","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝ : EMetricSpace X\nx : X\n⊢ Eq (dimH (Singleton.singleton x)) 0","decl":"@[simp]\ntheorem dimH_singleton (x : X) : dimH ({x} : Set X) = 0 :=\n  subsingleton_singleton.dimH_zero\n\n"}
{"name":"dimH_iUnion","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝¹ : EMetricSpace X\nι : Sort u_4\ninst✝ : Countable ι\ns : ι → Set X\n⊢ Eq (dimH (Set.iUnion fun i => s i)) (iSup fun i => dimH (s i))","decl":"@[simp]\ntheorem dimH_iUnion {ι : Sort*} [Countable ι] (s : ι → Set X) :\n    dimH (⋃ i, s i) = ⨆ i, dimH (s i) := by\n  borelize X\n  refine le_antisymm (dimH_le fun d hd => ?_) (iSup_le fun i => dimH_mono <| subset_iUnion _ _)\n  contrapose! hd\n  have : ∀ i, μH[d] (s i) = 0 := fun i =>\n    hausdorffMeasure_of_dimH_lt ((le_iSup (fun i => dimH (s i)) i).trans_lt hd)\n  rw [measure_iUnion_null this]\n  exact ENNReal.zero_ne_top\n\n"}
{"name":"dimH_bUnion","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"ι : Type u_1\nX : Type u_2\ninst✝ : EMetricSpace X\ns : Set ι\nhs : s.Countable\nt : ι → Set X\n⊢ Eq (dimH (Set.iUnion fun i => Set.iUnion fun h => t i)) (iSup fun i => iSup fun h => dimH (t i))","decl":"@[simp]\ntheorem dimH_bUnion {s : Set ι} (hs : s.Countable) (t : ι → Set X) :\n    dimH (⋃ i ∈ s, t i) = ⨆ i ∈ s, dimH (t i) := by\n  haveI := hs.toEncodable\n  rw [biUnion_eq_iUnion, dimH_iUnion, ← iSup_subtype'']\n\n"}
{"name":"dimH_sUnion","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝ : EMetricSpace X\nS : Set (Set X)\nhS : S.Countable\n⊢ Eq (dimH S.sUnion) (iSup fun s => iSup fun h => dimH s)","decl":"@[simp]\ntheorem dimH_sUnion {S : Set (Set X)} (hS : S.Countable) : dimH (⋃₀ S) = ⨆ s ∈ S, dimH s := by\n  rw [sUnion_eq_biUnion, dimH_bUnion hS]\n\n"}
{"name":"dimH_union","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝ : EMetricSpace X\ns t : Set X\n⊢ Eq (dimH (Union.union s t)) (Max.max (dimH s) (dimH t))","decl":"@[simp]\ntheorem dimH_union (s t : Set X) : dimH (s ∪ t) = max (dimH s) (dimH t) := by\n  rw [union_eq_iUnion, dimH_iUnion, iSup_bool_eq, cond, cond]\n\n"}
{"name":"dimH_countable","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝ : EMetricSpace X\ns : Set X\nhs : s.Countable\n⊢ Eq (dimH s) 0","decl":"theorem dimH_countable {s : Set X} (hs : s.Countable) : dimH s = 0 :=\n  biUnion_of_singleton s ▸ by simp only [dimH_bUnion hs, dimH_singleton, ENNReal.iSup_zero]\n\n"}
{"name":"Set.Countable.dimH_zero","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝ : EMetricSpace X\ns : Set X\nhs : s.Countable\n⊢ Eq (dimH s) 0","decl":"alias Set.Countable.dimH_zero := dimH_countable\n\n"}
{"name":"dimH_finite","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝ : EMetricSpace X\ns : Set X\nhs : s.Finite\n⊢ Eq (dimH s) 0","decl":"theorem dimH_finite {s : Set X} (hs : s.Finite) : dimH s = 0 :=\n  hs.countable.dimH_zero\n\n"}
{"name":"Set.Finite.dimH_zero","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝ : EMetricSpace X\ns : Set X\nhs : s.Finite\n⊢ Eq (dimH s) 0","decl":"alias Set.Finite.dimH_zero := dimH_finite\n\n"}
{"name":"dimH_coe_finset","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝ : EMetricSpace X\ns : Finset X\n⊢ Eq (dimH ↑s) 0","decl":"@[simp]\ntheorem dimH_coe_finset (s : Finset X) : dimH (s : Set X) = 0 :=\n  s.finite_toSet.dimH_zero\n\n"}
{"name":"Finset.dimH_zero","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝ : EMetricSpace X\ns : Finset X\n⊢ Eq (dimH ↑s) 0","decl":"alias Finset.dimH_zero := dimH_coe_finset\n\n"}
{"name":"exists_mem_nhdsWithin_lt_dimH_of_lt_dimH","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝¹ : EMetricSpace X\ninst✝ : SecondCountableTopology X\ns : Set X\nr : ENNReal\nh : LT.lt r (dimH s)\n⊢ Exists fun x => And (Membership.mem s x) (∀ (t : Set X), Membership.mem (nhdsWithin x s) t → LT.lt r (dimH t))","decl":"/-- If `r` is less than the Hausdorff dimension of a set `s` in an (extended) metric space with\nsecond countable topology, then there exists a point `x ∈ s` such that every neighborhood\n`t` of `x` within `s` has Hausdorff dimension greater than `r`. -/\ntheorem exists_mem_nhdsWithin_lt_dimH_of_lt_dimH {s : Set X} {r : ℝ≥0∞} (h : r < dimH s) :\n    ∃ x ∈ s, ∀ t ∈ 𝓝[s] x, r < dimH t := by\n  contrapose! h; choose! t htx htr using h\n  rcases countable_cover_nhdsWithin htx with ⟨S, hSs, hSc, hSU⟩\n  calc\n    dimH s ≤ dimH (⋃ x ∈ S, t x) := dimH_mono hSU\n    _ = ⨆ x ∈ S, dimH (t x) := dimH_bUnion hSc _\n    _ ≤ r := iSup₂_le fun x hx => htr x <| hSs hx\n\n"}
{"name":"bsupr_limsup_dimH","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝¹ : EMetricSpace X\ninst✝ : SecondCountableTopology X\ns : Set X\n⊢ Eq (iSup fun x => iSup fun h => Filter.limsup dimH (nhdsWithin x s).smallSets) (dimH s)","decl":"/-- In an (extended) metric space with second countable topology, the Hausdorff dimension\nof a set `s` is the supremum over `x ∈ s` of the limit superiors of `dimH t` along\n`(𝓝[s] x).smallSets`. -/\ntheorem bsupr_limsup_dimH (s : Set X) : ⨆ x ∈ s, limsup dimH (𝓝[s] x).smallSets = dimH s := by\n  refine le_antisymm (iSup₂_le fun x _ => ?_) ?_\n  · refine limsup_le_of_le isCobounded_le_of_bot ?_\n    exact eventually_smallSets.2 ⟨s, self_mem_nhdsWithin, fun t => dimH_mono⟩\n  · refine le_of_forall_lt_imp_le_of_dense fun r hr => ?_\n    rcases exists_mem_nhdsWithin_lt_dimH_of_lt_dimH hr with ⟨x, hxs, hxr⟩\n    refine le_iSup₂_of_le x hxs ?_; rw [limsup_eq]; refine le_sInf fun b hb => ?_\n    rcases eventually_smallSets.1 hb with ⟨t, htx, ht⟩\n    exact (hxr t htx).le.trans (ht t Subset.rfl)\n\n"}
{"name":"iSup_limsup_dimH","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\ninst✝¹ : EMetricSpace X\ninst✝ : SecondCountableTopology X\ns : Set X\n⊢ Eq (iSup fun x => Filter.limsup dimH (nhdsWithin x s).smallSets) (dimH s)","decl":"/-- In an (extended) metric space with second countable topology, the Hausdorff dimension\nof a set `s` is the supremum over all `x` of the limit superiors of `dimH t` along\n`(𝓝[s] x).smallSets`. -/\ntheorem iSup_limsup_dimH (s : Set X) : ⨆ x, limsup dimH (𝓝[s] x).smallSets = dimH s := by\n  refine le_antisymm (iSup_le fun x => ?_) ?_\n  · refine limsup_le_of_le isCobounded_le_of_bot ?_\n    exact eventually_smallSets.2 ⟨s, self_mem_nhdsWithin, fun t => dimH_mono⟩\n  · rw [← bsupr_limsup_dimH]; exact iSup₂_le_iSup _ _\n\n"}
{"name":"HolderOnWith.dimH_image_le","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\nY : Type u_3\ninst✝¹ : EMetricSpace X\ninst✝ : EMetricSpace Y\nC r : NNReal\nf : X → Y\ns : Set X\nh : HolderOnWith C r f s\nhr : LT.lt 0 r\n⊢ LE.le (dimH (Set.image f s)) (HDiv.hDiv (dimH s) ↑r)","decl":"/-- If `f` is a Hölder continuous map with exponent `r > 0`, then `dimH (f '' s) ≤ dimH s / r`. -/\ntheorem HolderOnWith.dimH_image_le (h : HolderOnWith C r f s) (hr : 0 < r) :\n    dimH (f '' s) ≤ dimH s / r := by\n  borelize X Y\n  refine dimH_le fun d hd => ?_\n  have := h.hausdorffMeasure_image_le hr d.coe_nonneg\n  rw [hd, ← ENNReal.coe_rpow_of_nonneg _ d.coe_nonneg, top_le_iff] at this\n  have Hrd : μH[(r * d : ℝ≥0)] s = ⊤ := by\n    contrapose this\n    exact ENNReal.mul_ne_top ENNReal.coe_ne_top this\n  rw [ENNReal.le_div_iff_mul_le, mul_comm, ← ENNReal.coe_mul]\n  exacts [le_dimH_of_hausdorffMeasure_eq_top Hrd, Or.inl (mt ENNReal.coe_eq_zero.1 hr.ne'),\n    Or.inl ENNReal.coe_ne_top]\n\n"}
{"name":"HolderWith.dimH_image_le","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\nY : Type u_3\ninst✝¹ : EMetricSpace X\ninst✝ : EMetricSpace Y\nC r : NNReal\nf : X → Y\nh : HolderWith C r f\nhr : LT.lt 0 r\ns : Set X\n⊢ LE.le (dimH (Set.image f s)) (HDiv.hDiv (dimH s) ↑r)","decl":"/-- If `f : X → Y` is Hölder continuous with a positive exponent `r`, then the Hausdorff dimension\nof the image of a set `s` is at most `dimH s / r`. -/\ntheorem dimH_image_le (h : HolderWith C r f) (hr : 0 < r) (s : Set X) :\n    dimH (f '' s) ≤ dimH s / r :=\n  (h.holderOnWith s).dimH_image_le hr\n\n"}
{"name":"HolderWith.dimH_range_le","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\nY : Type u_3\ninst✝¹ : EMetricSpace X\ninst✝ : EMetricSpace Y\nC r : NNReal\nf : X → Y\nh : HolderWith C r f\nhr : LT.lt 0 r\n⊢ LE.le (dimH (Set.range f)) (HDiv.hDiv (dimH Set.univ) ↑r)","decl":"/-- If `f` is a Hölder continuous map with exponent `r > 0`, then the Hausdorff dimension of its\nrange is at most the Hausdorff dimension of its domain divided by `r`. -/\ntheorem dimH_range_le (h : HolderWith C r f) (hr : 0 < r) :\n    dimH (range f) ≤ dimH (univ : Set X) / r :=\n  @image_univ _ _ f ▸ h.dimH_image_le hr univ\n\n"}
{"name":"dimH_image_le_of_locally_holder_on","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\nY : Type u_3\ninst✝² : EMetricSpace X\ninst✝¹ : EMetricSpace Y\ninst✝ : SecondCountableTopology X\nr : NNReal\nf : X → Y\nhr : LT.lt 0 r\ns : Set X\nhf : ∀ (x : X), Membership.mem s x → Exists fun C => Exists fun t => And (Membership.mem (nhdsWithin x s) t) (HolderOnWith C r f t)\n⊢ LE.le (dimH (Set.image f s)) (HDiv.hDiv (dimH s) ↑r)","decl":"/-- If `s` is a set in a space `X` with second countable topology and `f : X → Y` is Hölder\ncontinuous in a neighborhood within `s` of every point `x ∈ s` with the same positive exponent `r`\nbut possibly different coefficients, then the Hausdorff dimension of the image `f '' s` is at most\nthe Hausdorff dimension of `s` divided by `r`. -/\ntheorem dimH_image_le_of_locally_holder_on [SecondCountableTopology X] {r : ℝ≥0} {f : X → Y}\n    (hr : 0 < r) {s : Set X} (hf : ∀ x ∈ s, ∃ C : ℝ≥0, ∃ t ∈ 𝓝[s] x, HolderOnWith C r f t) :\n    dimH (f '' s) ≤ dimH s / r := by\n  choose! C t htn hC using hf\n  rcases countable_cover_nhdsWithin htn with ⟨u, hus, huc, huU⟩\n  replace huU := inter_eq_self_of_subset_left huU; rw [inter_iUnion₂] at huU\n  rw [← huU, image_iUnion₂, dimH_bUnion huc, dimH_bUnion huc]; simp only [ENNReal.iSup_div]\n  exact iSup₂_mono fun x hx => ((hC x (hus hx)).mono inter_subset_right).dimH_image_le hr\n\n"}
{"name":"dimH_range_le_of_locally_holder_on","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\nY : Type u_3\ninst✝² : EMetricSpace X\ninst✝¹ : EMetricSpace Y\ninst✝ : SecondCountableTopology X\nr : NNReal\nf : X → Y\nhr : LT.lt 0 r\nhf : ∀ (x : X), Exists fun C => Exists fun s => And (Membership.mem (nhds x) s) (HolderOnWith C r f s)\n⊢ LE.le (dimH (Set.range f)) (HDiv.hDiv (dimH Set.univ) ↑r)","decl":"/-- If `f : X → Y` is Hölder continuous in a neighborhood of every point `x : X` with the same\npositive exponent `r` but possibly different coefficients, then the Hausdorff dimension of the range\nof `f` is at most the Hausdorff dimension of `X` divided by `r`. -/\ntheorem dimH_range_le_of_locally_holder_on [SecondCountableTopology X] {r : ℝ≥0} {f : X → Y}\n    (hr : 0 < r) (hf : ∀ x : X, ∃ C : ℝ≥0, ∃ s ∈ 𝓝 x, HolderOnWith C r f s) :\n    dimH (range f) ≤ dimH (univ : Set X) / r := by\n  rw [← image_univ]\n  refine dimH_image_le_of_locally_holder_on hr fun x _ => ?_\n  simpa only [exists_prop, nhdsWithin_univ] using hf x\n\n"}
{"name":"LipschitzOnWith.dimH_image_le","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\nY : Type u_3\ninst✝¹ : EMetricSpace X\ninst✝ : EMetricSpace Y\nK : NNReal\nf : X → Y\ns : Set X\nh : LipschitzOnWith K f s\n⊢ LE.le (dimH (Set.image f s)) (dimH s)","decl":"/-- If `f : X → Y` is Lipschitz continuous on `s`, then `dimH (f '' s) ≤ dimH s`. -/\ntheorem LipschitzOnWith.dimH_image_le (h : LipschitzOnWith K f s) : dimH (f '' s) ≤ dimH s := by\n  simpa using h.holderOnWith.dimH_image_le zero_lt_one\n\n"}
{"name":"LipschitzWith.dimH_image_le","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\nY : Type u_3\ninst✝¹ : EMetricSpace X\ninst✝ : EMetricSpace Y\nK : NNReal\nf : X → Y\nh : LipschitzWith K f\ns : Set X\n⊢ LE.le (dimH (Set.image f s)) (dimH s)","decl":"/-- If `f` is a Lipschitz continuous map, then `dimH (f '' s) ≤ dimH s`. -/\ntheorem dimH_image_le (h : LipschitzWith K f) (s : Set X) : dimH (f '' s) ≤ dimH s :=\n  h.lipschitzOnWith.dimH_image_le\n\n"}
{"name":"LipschitzWith.dimH_range_le","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\nY : Type u_3\ninst✝¹ : EMetricSpace X\ninst✝ : EMetricSpace Y\nK : NNReal\nf : X → Y\nh : LipschitzWith K f\n⊢ LE.le (dimH (Set.range f)) (dimH Set.univ)","decl":"/-- If `f` is a Lipschitz continuous map, then the Hausdorff dimension of its range is at most the\nHausdorff dimension of its domain. -/\ntheorem dimH_range_le (h : LipschitzWith K f) : dimH (range f) ≤ dimH (univ : Set X) :=\n  @image_univ _ _ f ▸ h.dimH_image_le univ\n\n"}
{"name":"dimH_image_le_of_locally_lipschitzOn","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\nY : Type u_3\ninst✝² : EMetricSpace X\ninst✝¹ : EMetricSpace Y\ninst✝ : SecondCountableTopology X\nf : X → Y\ns : Set X\nhf : ∀ (x : X), Membership.mem s x → Exists fun C => Exists fun t => And (Membership.mem (nhdsWithin x s) t) (LipschitzOnWith C f t)\n⊢ LE.le (dimH (Set.image f s)) (dimH s)","decl":"/-- If `s` is a set in an extended metric space `X` with second countable topology and `f : X → Y`\nis Lipschitz in a neighborhood within `s` of every point `x ∈ s`, then the Hausdorff dimension of\nthe image `f '' s` is at most the Hausdorff dimension of `s`. -/\ntheorem dimH_image_le_of_locally_lipschitzOn [SecondCountableTopology X] {f : X → Y} {s : Set X}\n    (hf : ∀ x ∈ s, ∃ C : ℝ≥0, ∃ t ∈ 𝓝[s] x, LipschitzOnWith C f t) : dimH (f '' s) ≤ dimH s := by\n  have : ∀ x ∈ s, ∃ C : ℝ≥0, ∃ t ∈ 𝓝[s] x, HolderOnWith C 1 f t := by\n    simpa only [holderOnWith_one] using hf\n  simpa only [ENNReal.coe_one, div_one] using dimH_image_le_of_locally_holder_on zero_lt_one this\n\n"}
{"name":"dimH_range_le_of_locally_lipschitzOn","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\nY : Type u_3\ninst✝² : EMetricSpace X\ninst✝¹ : EMetricSpace Y\ninst✝ : SecondCountableTopology X\nf : X → Y\nhf : ∀ (x : X), Exists fun C => Exists fun s => And (Membership.mem (nhds x) s) (LipschitzOnWith C f s)\n⊢ LE.le (dimH (Set.range f)) (dimH Set.univ)","decl":"/-- If `f : X → Y` is Lipschitz in a neighborhood of each point `x : X`, then the Hausdorff\ndimension of `range f` is at most the Hausdorff dimension of `X`. -/\ntheorem dimH_range_le_of_locally_lipschitzOn [SecondCountableTopology X] {f : X → Y}\n    (hf : ∀ x : X, ∃ C : ℝ≥0, ∃ s ∈ 𝓝 x, LipschitzOnWith C f s) :\n    dimH (range f) ≤ dimH (univ : Set X) := by\n  rw [← image_univ]\n  refine dimH_image_le_of_locally_lipschitzOn fun x _ => ?_\n  simpa only [exists_prop, nhdsWithin_univ] using hf x\n\n"}
{"name":"AntilipschitzWith.dimH_preimage_le","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\nY : Type u_3\ninst✝¹ : EMetricSpace X\ninst✝ : EMetricSpace Y\nK : NNReal\nf : X → Y\nhf : AntilipschitzWith K f\ns : Set Y\n⊢ LE.le (dimH (Set.preimage f s)) (dimH s)","decl":"theorem dimH_preimage_le (hf : AntilipschitzWith K f) (s : Set Y) : dimH (f ⁻¹' s) ≤ dimH s := by\n  borelize X Y\n  refine dimH_le fun d hd => le_dimH_of_hausdorffMeasure_eq_top ?_\n  have := hf.hausdorffMeasure_preimage_le d.coe_nonneg s\n  rw [hd, top_le_iff] at this\n  contrapose! this\n  exact ENNReal.mul_ne_top (by simp) this\n\n"}
{"name":"AntilipschitzWith.le_dimH_image","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\nY : Type u_3\ninst✝¹ : EMetricSpace X\ninst✝ : EMetricSpace Y\nK : NNReal\nf : X → Y\nhf : AntilipschitzWith K f\ns : Set X\n⊢ LE.le (dimH s) (dimH (Set.image f s))","decl":"theorem le_dimH_image (hf : AntilipschitzWith K f) (s : Set X) : dimH s ≤ dimH (f '' s) :=\n  calc\n    dimH s ≤ dimH (f ⁻¹' (f '' s)) := dimH_mono (subset_preimage_image _ _)\n    _ ≤ dimH (f '' s) := hf.dimH_preimage_le _\n\n"}
{"name":"Isometry.dimH_image","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\nY : Type u_3\ninst✝¹ : EMetricSpace X\ninst✝ : EMetricSpace Y\nf : X → Y\nhf : Isometry f\ns : Set X\n⊢ Eq (dimH (Set.image f s)) (dimH s)","decl":"theorem Isometry.dimH_image (hf : Isometry f) (s : Set X) : dimH (f '' s) = dimH s :=\n  le_antisymm (hf.lipschitz.dimH_image_le _) (hf.antilipschitz.le_dimH_image _)\n\n"}
{"name":"IsometryEquiv.dimH_image","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\nY : Type u_3\ninst✝¹ : EMetricSpace X\ninst✝ : EMetricSpace Y\ne : IsometryEquiv X Y\ns : Set X\n⊢ Eq (dimH (Set.image (⇑e) s)) (dimH s)","decl":"@[simp]\ntheorem dimH_image (e : X ≃ᵢ Y) (s : Set X) : dimH (e '' s) = dimH s :=\n  e.isometry.dimH_image s\n\n"}
{"name":"IsometryEquiv.dimH_preimage","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\nY : Type u_3\ninst✝¹ : EMetricSpace X\ninst✝ : EMetricSpace Y\ne : IsometryEquiv X Y\ns : Set Y\n⊢ Eq (dimH (Set.preimage (⇑e) s)) (dimH s)","decl":"@[simp]\ntheorem dimH_preimage (e : X ≃ᵢ Y) (s : Set Y) : dimH (e ⁻¹' s) = dimH s := by\n  rw [← e.image_symm, e.symm.dimH_image]\n\n"}
{"name":"IsometryEquiv.dimH_univ","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"X : Type u_2\nY : Type u_3\ninst✝¹ : EMetricSpace X\ninst✝ : EMetricSpace Y\ne : IsometryEquiv X Y\n⊢ Eq (dimH Set.univ) (dimH Set.univ)","decl":"theorem dimH_univ (e : X ≃ᵢ Y) : dimH (univ : Set X) = dimH (univ : Set Y) := by\n  rw [← e.dimH_preimage univ, preimage_univ]\n\n"}
{"name":"ContinuousLinearEquiv.dimH_image","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"𝕜 : Type u_4\nE : Type u_5\nF : Type u_6\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ne : ContinuousLinearEquiv (RingHom.id 𝕜) E F\ns : Set E\n⊢ Eq (dimH (Set.image (⇑e) s)) (dimH s)","decl":"@[simp]\ntheorem dimH_image (e : E ≃L[𝕜] F) (s : Set E) : dimH (e '' s) = dimH s :=\n  le_antisymm (e.lipschitz.dimH_image_le s) <| by\n    simpa only [e.symm_image_image] using e.symm.lipschitz.dimH_image_le (e '' s)\n\n"}
{"name":"ContinuousLinearEquiv.dimH_preimage","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"𝕜 : Type u_4\nE : Type u_5\nF : Type u_6\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ne : ContinuousLinearEquiv (RingHom.id 𝕜) E F\ns : Set F\n⊢ Eq (dimH (Set.preimage (⇑e) s)) (dimH s)","decl":"@[simp]\ntheorem dimH_preimage (e : E ≃L[𝕜] F) (s : Set F) : dimH (e ⁻¹' s) = dimH s := by\n  rw [← e.image_symm_eq_preimage, e.symm.dimH_image]\n\n"}
{"name":"ContinuousLinearEquiv.dimH_univ","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"𝕜 : Type u_4\nE : Type u_5\nF : Type u_6\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ne : ContinuousLinearEquiv (RingHom.id 𝕜) E F\n⊢ Eq (dimH Set.univ) (dimH Set.univ)","decl":"theorem dimH_univ (e : E ≃L[𝕜] F) : dimH (univ : Set E) = dimH (univ : Set F) := by\n  rw [← e.dimH_preimage, preimage_univ]\n\n"}
{"name":"Real.dimH_ball_pi","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"ι : Type u_1\ninst✝ : Fintype ι\nx : ι → Real\nr : Real\nhr : LT.lt 0 r\n⊢ Eq (dimH (Metric.ball x r)) ↑(Fintype.card ι)","decl":"theorem dimH_ball_pi (x : ι → ℝ) {r : ℝ} (hr : 0 < r) :\n    dimH (Metric.ball x r) = Fintype.card ι := by\n  cases isEmpty_or_nonempty ι\n  · rwa [dimH_subsingleton, eq_comm, Nat.cast_eq_zero, Fintype.card_eq_zero_iff]\n    exact fun x _ y _ => Subsingleton.elim x y\n  · rw [← ENNReal.coe_natCast]\n    have : μH[Fintype.card ι] (Metric.ball x r) = ENNReal.ofReal ((2 * r) ^ Fintype.card ι) := by\n      rw [hausdorffMeasure_pi_real, Real.volume_pi_ball _ hr]\n    refine dimH_of_hausdorffMeasure_ne_zero_ne_top ?_ ?_ <;> rw [NNReal.coe_natCast, this]\n    · simp [pow_pos (mul_pos (zero_lt_two' ℝ) hr)]\n    · exact ENNReal.ofReal_ne_top\n\n"}
{"name":"Real.dimH_ball_pi_fin","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"n : Nat\nx : Fin n → Real\nr : Real\nhr : LT.lt 0 r\n⊢ Eq (dimH (Metric.ball x r)) ↑n","decl":"theorem dimH_ball_pi_fin {n : ℕ} (x : Fin n → ℝ) {r : ℝ} (hr : 0 < r) :\n    dimH (Metric.ball x r) = n := by rw [dimH_ball_pi x hr, Fintype.card_fin]\n\n"}
{"name":"Real.dimH_univ_pi","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"ι : Type u_5\ninst✝ : Fintype ι\n⊢ Eq (dimH Set.univ) ↑(Fintype.card ι)","decl":"theorem dimH_univ_pi (ι : Type*) [Fintype ι] : dimH (univ : Set (ι → ℝ)) = Fintype.card ι := by\n  simp only [← Metric.iUnion_ball_nat_succ (0 : ι → ℝ), dimH_iUnion,\n    dimH_ball_pi _ (Nat.cast_add_one_pos _), iSup_const]\n\n"}
{"name":"Real.dimH_univ_pi_fin","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"n : Nat\n⊢ Eq (dimH Set.univ) ↑n","decl":"theorem dimH_univ_pi_fin (n : ℕ) : dimH (univ : Set (Fin n → ℝ)) = n := by\n  rw [dimH_univ_pi, Fintype.card_fin]\n\n"}
{"name":"Real.dimH_of_mem_nhds","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"E : Type u_4\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : FiniteDimensional Real E\nx : E\ns : Set E\nh : Membership.mem (nhds x) s\n⊢ Eq (dimH s) ↑(Module.finrank Real E)","decl":"theorem dimH_of_mem_nhds {x : E} {s : Set E} (h : s ∈ 𝓝 x) : dimH s = finrank ℝ E := by\n  have e : E ≃L[ℝ] Fin (finrank ℝ E) → ℝ :=\n    ContinuousLinearEquiv.ofFinrankEq (Module.finrank_fin_fun ℝ).symm\n  rw [← e.dimH_image]\n  refine le_antisymm ?_ ?_\n  · exact (dimH_mono (subset_univ _)).trans_eq (dimH_univ_pi_fin _)\n  · have : e '' s ∈ 𝓝 (e x) := by rw [← e.map_nhds_eq]; exact image_mem_map h\n    rcases Metric.nhds_basis_ball.mem_iff.1 this with ⟨r, hr0, hr⟩\n    simpa only [dimH_ball_pi_fin (e x) hr0] using dimH_mono hr\n\n"}
{"name":"Real.dimH_of_nonempty_interior","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"E : Type u_4\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : FiniteDimensional Real E\ns : Set E\nh : (interior s).Nonempty\n⊢ Eq (dimH s) ↑(Module.finrank Real E)","decl":"theorem dimH_of_nonempty_interior {s : Set E} (h : (interior s).Nonempty) : dimH s = finrank ℝ E :=\n  let ⟨_, hx⟩ := h\n  dimH_of_mem_nhds (mem_interior_iff_mem_nhds.1 hx)\n\n"}
{"name":"Real.dimH_univ_eq_finrank","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"E : Type u_4\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : FiniteDimensional Real E\n⊢ Eq (dimH Set.univ) ↑(Module.finrank Real E)","decl":"theorem dimH_univ_eq_finrank : dimH (univ : Set E) = finrank ℝ E :=\n  dimH_of_mem_nhds (@univ_mem _ (𝓝 0))\n\n"}
{"name":"Real.dimH_univ","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"⊢ Eq (dimH Set.univ) 1","decl":"theorem dimH_univ : dimH (univ : Set ℝ) = 1 := by\n  rw [dimH_univ_eq_finrank ℝ, Module.finrank_self, Nat.cast_one]\n\n"}
{"name":"Real.hausdorffMeasure_of_finrank_lt","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"E : Type u_4\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : FiniteDimensional Real E\ninst✝¹ : MeasurableSpace E\ninst✝ : BorelSpace E\nd : Real\nhd : LT.lt (↑(Module.finrank Real E)) d\n⊢ Eq (MeasureTheory.Measure.hausdorffMeasure d) 0","decl":"lemma hausdorffMeasure_of_finrank_lt [MeasurableSpace E] [BorelSpace E] {d : ℝ}\n    (hd : finrank ℝ E < d) : (μH[d] : Measure E) = 0 := by\n  lift d to ℝ≥0 using (Nat.cast_nonneg _).trans hd.le\n  rw [← measure_univ_eq_zero]\n  apply hausdorffMeasure_of_dimH_lt\n  rw [dimH_univ_eq_finrank]\n  exact mod_cast hd\n\n"}
{"name":"dense_compl_of_dimH_lt_finrank","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"E : Type u_4\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : FiniteDimensional Real E\ns : Set E\nhs : LT.lt (dimH s) ↑(Module.finrank Real E)\n⊢ Dense (HasCompl.compl s)","decl":"theorem dense_compl_of_dimH_lt_finrank {s : Set E} (hs : dimH s < finrank ℝ E) : Dense sᶜ := by\n  refine fun x => mem_closure_iff_nhds.2 fun t ht => nonempty_iff_ne_empty.2 fun he => hs.not_le ?_\n  rw [← diff_eq, diff_eq_empty] at he\n  rw [← Real.dimH_of_mem_nhds ht]\n  exact dimH_mono he\n\n"}
{"name":"ContDiffOn.dimH_image_le","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"E : Type u_4\nF : Type u_5\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : FiniteDimensional Real E\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace Real F\nf : E → F\ns t : Set E\nhf : ContDiffOn Real 1 f s\nhc : Convex Real s\nht : HasSubset.Subset t s\n⊢ LE.le (dimH (Set.image f t)) (dimH t)","decl":"/-- Let `f` be a function defined on a finite dimensional real normed space. If `f` is `C¹`-smooth\non a convex set `s`, then the Hausdorff dimension of `f '' s` is less than or equal to the Hausdorff\ndimension of `s`.\n\nTODO: do we actually need `Convex ℝ s`? -/\ntheorem ContDiffOn.dimH_image_le {f : E → F} {s t : Set E} (hf : ContDiffOn ℝ 1 f s)\n    (hc : Convex ℝ s) (ht : t ⊆ s) : dimH (f '' t) ≤ dimH t :=\n  dimH_image_le_of_locally_lipschitzOn fun x hx =>\n    let ⟨C, u, hu, hf⟩ := (hf x (ht hx)).exists_lipschitzOnWith hc\n    ⟨C, u, nhdsWithin_mono _ ht hu, hf⟩\n\n"}
{"name":"ContDiff.dimH_range_le","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"E : Type u_4\nF : Type u_5\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : FiniteDimensional Real E\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace Real F\nf : E → F\nh : ContDiff Real 1 f\n⊢ LE.le (dimH (Set.range f)) ↑(Module.finrank Real E)","decl":"/-- The Hausdorff dimension of the range of a `C¹`-smooth function defined on a finite dimensional\nreal normed space is at most the dimension of its domain as a vector space over `ℝ`. -/\ntheorem ContDiff.dimH_range_le {f : E → F} (h : ContDiff ℝ 1 f) : dimH (range f) ≤ finrank ℝ E :=\n  calc\n    dimH (range f) = dimH (f '' univ) := by rw [image_univ]\n    _ ≤ dimH (univ : Set E) := h.contDiffOn.dimH_image_le convex_univ Subset.rfl\n    _ = finrank ℝ E := Real.dimH_univ_eq_finrank E\n\n"}
{"name":"ContDiffOn.dense_compl_image_of_dimH_lt_finrank","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"E : Type u_4\nF : Type u_5\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\ninst✝³ : FiniteDimensional Real E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : NormedSpace Real F\ninst✝ : FiniteDimensional Real F\nf : E → F\ns t : Set E\nh : ContDiffOn Real 1 f s\nhc : Convex Real s\nht : HasSubset.Subset t s\nhtF : LT.lt (dimH t) ↑(Module.finrank Real F)\n⊢ Dense (HasCompl.compl (Set.image f t))","decl":"/-- A particular case of Sard's Theorem. Let `f : E → F` be a map between finite dimensional real\nvector spaces. Suppose that `f` is `C¹` smooth on a convex set `s` of Hausdorff dimension strictly\nless than the dimension of `F`. Then the complement of the image `f '' s` is dense in `F`. -/\ntheorem ContDiffOn.dense_compl_image_of_dimH_lt_finrank [FiniteDimensional ℝ F] {f : E → F}\n    {s t : Set E} (h : ContDiffOn ℝ 1 f s) (hc : Convex ℝ s) (ht : t ⊆ s)\n    (htF : dimH t < finrank ℝ F) : Dense (f '' t)ᶜ :=\n  dense_compl_of_dimH_lt_finrank <| (h.dimH_image_le hc ht).trans_lt htF\n\n"}
{"name":"ContDiff.dense_compl_range_of_finrank_lt_finrank","module":"Mathlib.Topology.MetricSpace.HausdorffDimension","initialProofState":"E : Type u_4\nF : Type u_5\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\ninst✝³ : FiniteDimensional Real E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : NormedSpace Real F\ninst✝ : FiniteDimensional Real F\nf : E → F\nh : ContDiff Real 1 f\nhEF : LT.lt (Module.finrank Real E) (Module.finrank Real F)\n⊢ Dense (HasCompl.compl (Set.range f))","decl":"/-- A particular case of Sard's Theorem. If `f` is a `C¹` smooth map from a real vector space to a\nreal vector space `F` of strictly larger dimension, then the complement of the range of `f` is dense\nin `F`. -/\ntheorem ContDiff.dense_compl_range_of_finrank_lt_finrank [FiniteDimensional ℝ F] {f : E → F}\n    (h : ContDiff ℝ 1 f) (hEF : finrank ℝ E < finrank ℝ F) : Dense (range f)ᶜ :=\n  dense_compl_of_dimH_lt_finrank <| h.dimH_range_le.trans_lt <| Nat.cast_lt.2 hEF\n"}
