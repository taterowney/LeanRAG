{"name":"tendsto_apply_add_mul_sq_div_sub","module":"Mathlib.Analysis.Calculus.Monotone","initialProofState":"f : Real → Real\nx a c d : Real\nl : Filter Real\nhl : LE.le l (nhdsWithin x (HasCompl.compl (Singleton.singleton x)))\nhf : Filter.Tendsto (fun y => HDiv.hDiv (HSub.hSub (f y) d) (HSub.hSub y x)) l (nhds a)\nh' : Filter.Tendsto (fun y => HAdd.hAdd y (HMul.hMul c (HPow.hPow (HSub.hSub y x) 2))) l l\n⊢ Filter.Tendsto (fun y => HDiv.hDiv (HSub.hSub (f (HAdd.hAdd y (HMul.hMul c (HPow.hPow (HSub.hSub y x) 2)))) d) (HSub.hSub y x)) l (nhds a)","decl":"/-- If `(f y - f x) / (y - x)` converges to a limit as `y` tends to `x`, then the same goes if\n`y` is shifted a little bit, i.e., `f (y + (y-x)^2) - f x) / (y - x)` converges to the same limit.\nThis lemma contains a slightly more general version of this statement (where one considers\nconvergence along some subfilter, typically `𝓝[<] x` or `𝓝[>] x`) tailored to the application\nto almost everywhere differentiability of monotone functions. -/\ntheorem tendsto_apply_add_mul_sq_div_sub {f : ℝ → ℝ} {x a c d : ℝ} {l : Filter ℝ} (hl : l ≤ 𝓝[≠] x)\n    (hf : Tendsto (fun y => (f y - d) / (y - x)) l (𝓝 a))\n    (h' : Tendsto (fun y => y + c * (y - x) ^ 2) l l) :\n    Tendsto (fun y => (f (y + c * (y - x) ^ 2) - d) / (y - x)) l (𝓝 a) := by\n  have L : Tendsto (fun y => (y + c * (y - x) ^ 2 - x) / (y - x)) l (𝓝 1) := by\n    have : Tendsto (fun y => 1 + c * (y - x)) l (𝓝 (1 + c * (x - x))) := by\n      apply Tendsto.mono_left _ (hl.trans nhdsWithin_le_nhds)\n      exact ((tendsto_id.sub_const x).const_mul c).const_add 1\n    simp only [_root_.sub_self, add_zero, mul_zero] at this\n    apply Tendsto.congr' (Eventually.filter_mono hl _) this\n    filter_upwards [self_mem_nhdsWithin] with y hy\n    field_simp [sub_ne_zero.2 hy]\n    ring\n  have Z := (hf.comp h').mul L\n  rw [mul_one] at Z\n  apply Tendsto.congr' _ Z\n  have : ∀ᶠ y in l, y + c * (y - x) ^ 2 ≠ x := by apply Tendsto.mono_right h' hl self_mem_nhdsWithin\n  filter_upwards [this] with y hy\n  field_simp [sub_ne_zero.2 hy]\n\n"}
{"name":"StieltjesFunction.ae_hasDerivAt","module":"Mathlib.Analysis.Calculus.Monotone","initialProofState":"f : StieltjesFunction\n⊢ Filter.Eventually (fun x => HasDerivAt (↑f) (f.measure.rnDeriv MeasureTheory.MeasureSpace.volume x).toReal x) (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)","decl":"/-- A Stieltjes function is almost everywhere differentiable, with derivative equal to the\nRadon-Nikodym derivative of the associated Stieltjes measure with respect to Lebesgue. -/\ntheorem StieltjesFunction.ae_hasDerivAt (f : StieltjesFunction) :\n    ∀ᵐ x, HasDerivAt f (rnDeriv f.measure volume x).toReal x := by\n  /- Denote by `μ` the Stieltjes measure associated to `f`.\n    The general theorem `VitaliFamily.ae_tendsto_rnDeriv` ensures that `μ [x, y] / (y - x)` tends\n    to the Radon-Nikodym derivative as `y` tends to `x` from the right. As `μ [x,y] = f y - f (x^-)`\n    and `f (x^-) = f x` almost everywhere, this gives differentiability on the right.\n    On the left, `μ [y, x] / (x - y)` again tends to the Radon-Nikodym derivative.\n    As `μ [y, x] = f x - f (y^-)`, this is not exactly the right result, so one uses a sandwiching\n    argument to deduce the convergence for `(f x - f y) / (x - y)`. -/\n  filter_upwards [VitaliFamily.ae_tendsto_rnDeriv (vitaliFamily (volume : Measure ℝ) 1) f.measure,\n    rnDeriv_lt_top f.measure volume, f.countable_leftLim_ne.ae_not_mem volume] with x hx h'x h''x\n  -- Limit on the right, following from differentiation of measures\n  have L1 :\n    Tendsto (fun y => (f y - f x) / (y - x)) (𝓝[>] x) (𝓝 (rnDeriv f.measure volume x).toReal) := by\n    apply Tendsto.congr' _\n      ((ENNReal.tendsto_toReal h'x.ne).comp (hx.comp (Real.tendsto_Icc_vitaliFamily_right x)))\n    filter_upwards [self_mem_nhdsWithin]\n    rintro y (hxy : x < y)\n    simp only [comp_apply, StieltjesFunction.measure_Icc, Real.volume_Icc, Classical.not_not.1 h''x]\n    rw [← ENNReal.ofReal_div_of_pos (sub_pos.2 hxy), ENNReal.toReal_ofReal]\n    exact div_nonneg (sub_nonneg.2 (f.mono hxy.le)) (sub_pos.2 hxy).le\n  -- Limit on the left, following from differentiation of measures. Its form is not exactly the one\n  -- we need, due to the appearance of a left limit.\n  have L2 : Tendsto (fun y => (leftLim f y - f x) / (y - x)) (𝓝[<] x)\n      (𝓝 (rnDeriv f.measure volume x).toReal) := by\n    apply Tendsto.congr' _\n      ((ENNReal.tendsto_toReal h'x.ne).comp (hx.comp (Real.tendsto_Icc_vitaliFamily_left x)))\n    filter_upwards [self_mem_nhdsWithin]\n    rintro y (hxy : y < x)\n    simp only [comp_apply, StieltjesFunction.measure_Icc, Real.volume_Icc]\n    rw [← ENNReal.ofReal_div_of_pos (sub_pos.2 hxy), ENNReal.toReal_ofReal, ← neg_neg (y - x),\n      div_neg, neg_div', neg_sub, neg_sub]\n    exact div_nonneg (sub_nonneg.2 (f.mono.leftLim_le hxy.le)) (sub_pos.2 hxy).le\n  -- Shifting a little bit the limit on the left, by `(y - x)^2`.\n  have L3 : Tendsto (fun y => (leftLim f (y + 1 * (y - x) ^ 2) - f x) / (y - x)) (𝓝[<] x)\n      (𝓝 (rnDeriv f.measure volume x).toReal) := by\n    apply tendsto_apply_add_mul_sq_div_sub (nhdsLT_le_nhdsNE x) L2\n    apply tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within\n    · apply Tendsto.mono_left _ nhdsWithin_le_nhds\n      have : Tendsto (fun y : ℝ => y + ↑1 * (y - x) ^ 2) (𝓝 x) (𝓝 (x + ↑1 * (x - x) ^ 2)) :=\n        tendsto_id.add (((tendsto_id.sub_const x).pow 2).const_mul ↑1)\n      simpa using this\n    · filter_upwards [Ioo_mem_nhdsLT <| show x - 1 < x by simp]\n      rintro y ⟨hy : x - 1 < y, h'y : y < x⟩\n      rw [mem_Iio]\n      nlinarith\n  -- Deduce the correct limit on the left, by sandwiching.\n  have L4 :\n    Tendsto (fun y => (f y - f x) / (y - x)) (𝓝[<] x) (𝓝 (rnDeriv f.measure volume x).toReal) := by\n    apply tendsto_of_tendsto_of_tendsto_of_le_of_le' L3 L2\n    · filter_upwards [self_mem_nhdsWithin]\n      rintro y (hy : y < x)\n      refine div_le_div_of_nonpos_of_le (by linarith) ((sub_le_sub_iff_right _).2 ?_)\n      apply f.mono.le_leftLim\n      have : ↑0 < (x - y) ^ 2 := sq_pos_of_pos (sub_pos.2 hy)\n      linarith\n    · filter_upwards [self_mem_nhdsWithin]\n      rintro y (hy : y < x)\n      refine div_le_div_of_nonpos_of_le (by linarith) ?_\n      simpa only [sub_le_sub_iff_right] using f.mono.leftLim_le (le_refl y)\n  -- prove the result by splitting into left and right limits.\n  rw [hasDerivAt_iff_tendsto_slope, slope_fun_def_field, ← nhdsLT_sup_nhdsGT, tendsto_sup]\n  exact ⟨L4, L1⟩\n\n"}
{"name":"Monotone.ae_hasDerivAt","module":"Mathlib.Analysis.Calculus.Monotone","initialProofState":"f : Real → Real\nhf : Monotone f\n⊢ Filter.Eventually (fun x => HasDerivAt f (hf.stieltjesFunction.measure.rnDeriv MeasureTheory.MeasureSpace.volume x).toReal x) (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)","decl":"/-- A monotone function is almost everywhere differentiable, with derivative equal to the\nRadon-Nikodym derivative of the associated Stieltjes measure with respect to Lebesgue. -/\ntheorem Monotone.ae_hasDerivAt {f : ℝ → ℝ} (hf : Monotone f) :\n    ∀ᵐ x, HasDerivAt f (rnDeriv hf.stieltjesFunction.measure volume x).toReal x := by\n  /- We already know that the Stieltjes function associated to `f` (i.e., `g : x ↦ f (x^+)`) is\n    differentiable almost everywhere. We reduce to this statement by sandwiching values of `f` with\n    values of `g`, by shifting with `(y - x)^2` (which has no influence on the relevant\n    scale `y - x`.)-/\n  filter_upwards [hf.stieltjesFunction.ae_hasDerivAt,\n    hf.countable_not_continuousAt.ae_not_mem volume] with x hx h'x\n  have A : hf.stieltjesFunction x = f x := by\n    rw [Classical.not_not, hf.continuousAt_iff_leftLim_eq_rightLim] at h'x\n    apply le_antisymm _ (hf.le_rightLim (le_refl _))\n    rw [← h'x]\n    exact hf.leftLim_le (le_refl _)\n  rw [hasDerivAt_iff_tendsto_slope, (nhdsLT_sup_nhdsGT x).symm, tendsto_sup,\n    slope_fun_def_field, A] at hx\n  -- prove differentiability on the right, by sandwiching with values of `g`\n  have L1 : Tendsto (fun y => (f y - f x) / (y - x)) (𝓝[>] x)\n      (𝓝 (rnDeriv hf.stieltjesFunction.measure volume x).toReal) := by\n    -- limit of a helper function, with a small shift compared to `g`\n    have : Tendsto (fun y => (hf.stieltjesFunction (y + -1 * (y - x) ^ 2) - f x) / (y - x)) (𝓝[>] x)\n        (𝓝 (rnDeriv hf.stieltjesFunction.measure volume x).toReal) := by\n      apply tendsto_apply_add_mul_sq_div_sub (nhdsGT_le_nhdsNE x) hx.2\n      apply tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within\n      · apply Tendsto.mono_left _ nhdsWithin_le_nhds\n        have : Tendsto (fun y : ℝ => y + -↑1 * (y - x) ^ 2) (𝓝 x) (𝓝 (x + -↑1 * (x - x) ^ 2)) :=\n          tendsto_id.add (((tendsto_id.sub_const x).pow 2).const_mul (-1))\n        simpa using this\n      · filter_upwards [Ioo_mem_nhdsGT <| show x < x + 1 by simp]\n        rintro y ⟨hy : x < y, h'y : y < x + 1⟩\n        rw [mem_Ioi]\n        nlinarith\n    -- apply the sandwiching argument, with the helper function and `g`\n    apply tendsto_of_tendsto_of_tendsto_of_le_of_le' this hx.2\n    · filter_upwards [self_mem_nhdsWithin] with y hy\n      rw [mem_Ioi, ← sub_pos] at hy\n      gcongr\n      exact hf.rightLim_le (by nlinarith)\n    · filter_upwards [self_mem_nhdsWithin] with y hy\n      rw [mem_Ioi, ← sub_pos] at hy\n      gcongr\n      exact hf.le_rightLim le_rfl\n  -- prove differentiability on the left, by sandwiching with values of `g`\n  have L2 : Tendsto (fun y => (f y - f x) / (y - x)) (𝓝[<] x)\n      (𝓝 (rnDeriv hf.stieltjesFunction.measure volume x).toReal) := by\n    -- limit of a helper function, with a small shift compared to `g`\n    have : Tendsto (fun y => (hf.stieltjesFunction (y + -1 * (y - x) ^ 2) - f x) / (y - x)) (𝓝[<] x)\n        (𝓝 (rnDeriv hf.stieltjesFunction.measure volume x).toReal) := by\n      apply tendsto_apply_add_mul_sq_div_sub (nhdsLT_le_nhdsNE x) hx.1\n      apply tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within\n      · apply Tendsto.mono_left _ nhdsWithin_le_nhds\n        have : Tendsto (fun y : ℝ => y + -↑1 * (y - x) ^ 2) (𝓝 x) (𝓝 (x + -↑1 * (x - x) ^ 2)) :=\n          tendsto_id.add (((tendsto_id.sub_const x).pow 2).const_mul (-1))\n        simpa using this\n      · filter_upwards [Ioo_mem_nhdsLT <| show x - 1 < x by simp]\n        rintro y hy\n        rw [mem_Ioo] at hy\n        rw [mem_Iio]\n        nlinarith\n    -- apply the sandwiching argument, with `g` and the helper function\n    apply tendsto_of_tendsto_of_tendsto_of_le_of_le' hx.1 this\n    · filter_upwards [self_mem_nhdsWithin]\n      rintro y hy\n      rw [mem_Iio, ← sub_neg] at hy\n      apply div_le_div_of_nonpos_of_le hy.le\n      exact (sub_le_sub_iff_right _).2 (hf.le_rightLim (le_refl _))\n    · filter_upwards [self_mem_nhdsWithin]\n      rintro y hy\n      rw [mem_Iio, ← sub_neg] at hy\n      have : 0 < (y - x) ^ 2 := sq_pos_of_neg hy\n      apply div_le_div_of_nonpos_of_le hy.le\n      exact (sub_le_sub_iff_right _).2 (hf.rightLim_le (by linarith))\n  -- conclude global differentiability\n  rw [hasDerivAt_iff_tendsto_slope, slope_fun_def_field, ← nhdsLT_sup_nhdsGT, tendsto_sup]\n  exact ⟨L2, L1⟩\n\n"}
{"name":"Monotone.ae_differentiableAt","module":"Mathlib.Analysis.Calculus.Monotone","initialProofState":"f : Real → Real\nhf : Monotone f\n⊢ Filter.Eventually (fun x => DifferentiableAt Real f x) (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)","decl":"/-- A monotone real function is differentiable Lebesgue-almost everywhere. -/\ntheorem Monotone.ae_differentiableAt {f : ℝ → ℝ} (hf : Monotone f) :\n    ∀ᵐ x, DifferentiableAt ℝ f x := by\n  filter_upwards [hf.ae_hasDerivAt] with x hx using hx.differentiableAt\n\n"}
{"name":"MonotoneOn.ae_differentiableWithinAt_of_mem","module":"Mathlib.Analysis.Calculus.Monotone","initialProofState":"f : Real → Real\ns : Set Real\nhf : MonotoneOn f s\n⊢ Filter.Eventually (fun x => Membership.mem s x → DifferentiableWithinAt Real f s x) (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)","decl":"/-- A real function which is monotone on a set is differentiable Lebesgue-almost everywhere on\nthis set. This version does not assume that `s` is measurable. For a formulation with\n`volume.restrict s` assuming that `s` is measurable, see `MonotoneOn.ae_differentiableWithinAt`.\n-/\ntheorem MonotoneOn.ae_differentiableWithinAt_of_mem {f : ℝ → ℝ} {s : Set ℝ} (hf : MonotoneOn f s) :\n    ∀ᵐ x, x ∈ s → DifferentiableWithinAt ℝ f s x := by\n  /- We use a global monotone extension of `f`, and argue that this extension is differentiable\n    almost everywhere. Such an extension need not exist (think of `1/x` on `(0, +∞)`), but it exists\n    if one restricts first the function to a compact interval `[a, b]`. -/\n  apply ae_of_mem_of_ae_of_mem_inter_Ioo\n  intro a b as bs _\n  obtain ⟨g, hg, gf⟩ : ∃ g : ℝ → ℝ, Monotone g ∧ EqOn f g (s ∩ Icc a b) :=\n    (hf.mono inter_subset_left).exists_monotone_extension\n      (hf.map_bddBelow inter_subset_left ⟨a, fun x hx => hx.2.1, as⟩)\n      (hf.map_bddAbove inter_subset_left ⟨b, fun x hx => hx.2.2, bs⟩)\n  filter_upwards [hg.ae_differentiableAt] with x hx\n  intro h'x\n  apply hx.differentiableWithinAt.congr_of_eventuallyEq _ (gf ⟨h'x.1, h'x.2.1.le, h'x.2.2.le⟩)\n  have : Ioo a b ∈ 𝓝[s] x := nhdsWithin_le_nhds (Ioo_mem_nhds h'x.2.1 h'x.2.2)\n  filter_upwards [self_mem_nhdsWithin, this] with y hy h'y\n  exact gf ⟨hy, h'y.1.le, h'y.2.le⟩\n\n"}
{"name":"MonotoneOn.ae_differentiableWithinAt","module":"Mathlib.Analysis.Calculus.Monotone","initialProofState":"f : Real → Real\ns : Set Real\nhf : MonotoneOn f s\nhs : MeasurableSet s\n⊢ Filter.Eventually (fun x => DifferentiableWithinAt Real f s x) (MeasureTheory.ae (MeasureTheory.MeasureSpace.volume.restrict s))","decl":"/-- A real function which is monotone on a set is differentiable Lebesgue-almost everywhere on\nthis set. This version assumes that `s` is measurable and uses `volume.restrict s`.\nFor a formulation without measurability assumption,\nsee `MonotoneOn.ae_differentiableWithinAt_of_mem`. -/\ntheorem MonotoneOn.ae_differentiableWithinAt {f : ℝ → ℝ} {s : Set ℝ} (hf : MonotoneOn f s)\n    (hs : MeasurableSet s) : ∀ᵐ x ∂volume.restrict s, DifferentiableWithinAt ℝ f s x := by\n  rw [ae_restrict_iff' hs]\n  exact hf.ae_differentiableWithinAt_of_mem\n"}
