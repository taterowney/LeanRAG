{"name":"Nat.Prime.dvd_factorial","module":"Mathlib.Data.Nat.Prime.Factorial","initialProofState":"n p : Nat\nx✝ : Nat.Prime p\n⊢ Iff (Dvd.dvd p n.factorial) (LE.le p n)","decl":"theorem Prime.dvd_factorial : ∀ {n p : ℕ} (_ : Prime p), p ∣ n ! ↔ p ≤ n\n  | 0, _, hp => iff_of_false hp.not_dvd_one (not_le_of_lt hp.pos)\n  | n + 1, p, hp => by\n    rw [factorial_succ, hp.dvd_mul, Prime.dvd_factorial hp]\n    exact\n      ⟨fun h => h.elim (le_of_dvd (succ_pos _)) le_succ_of_le, fun h =>\n        (_root_.lt_or_eq_of_le h).elim (Or.inr ∘ le_of_lt_succ) fun h => Or.inl <| by rw [h]⟩\n\n"}
{"name":"Nat.coprime_factorial_iff","module":"Mathlib.Data.Nat.Prime.Factorial","initialProofState":"m n : Nat\nhm : Ne m 1\n⊢ Iff (m.Coprime n.factorial) (LT.lt n m.minFac)","decl":"theorem coprime_factorial_iff {m n : ℕ} (hm : m ≠ 1) :\n    m.Coprime n ! ↔ n < m.minFac := by\n  rw [← not_le, iff_not_comm, Nat.Prime.not_coprime_iff_dvd]\n  constructor\n  · intro h\n    exact ⟨m.minFac, minFac_prime hm, minFac_dvd m, Nat.dvd_factorial (minFac_pos m) h⟩\n  · rintro ⟨p, hp, hdvd, hdvd'⟩\n    exact le_trans (minFac_le_of_dvd hp.two_le hdvd) (hp.dvd_factorial.mp hdvd')\n\n"}
