{"name":"CategoryTheory.IsCardinalFiltered.nonempty_cocone","module":"Mathlib.CategoryTheory.Presentable.IsCardinalFiltered","initialProofState":"J : Type u\ninst✝² : CategoryTheory.Category.{v, u} J\nκ : Cardinal.{w}\ninst✝¹ : Fact κ.IsRegular\nself : CategoryTheory.IsCardinalFiltered J κ\nA : Type w\ninst✝ : CategoryTheory.SmallCategory A\nF : CategoryTheory.Functor A J\nhA : HasCardinalLT (CategoryTheory.Arrow A) κ\n⊢ Nonempty (CategoryTheory.Limits.Cocone F)","decl":"/-- A category `J` is `κ`-filtered (for a regular cardinal `κ`) if\nany functor `F : A ⥤ J` from a category `A` such that `HasCardinalLT (Arrow A) κ`\nadmits a cocone. -/\nclass IsCardinalFiltered (J : Type u) [Category.{v} J]\n    (κ : Cardinal.{w}) [Fact κ.IsRegular] : Prop where\n  nonempty_cocone {A : Type w} [SmallCategory A] (F : A ⥤ J)\n    (hA : HasCardinalLT (Arrow A) κ) : Nonempty (Cocone F)\n\n"}
{"name":"CategoryTheory.hasCardinalLT_arrow_walkingParallelFamily","module":"Mathlib.CategoryTheory.Presentable.IsCardinalFiltered","initialProofState":"T : Type u\nκ : Cardinal.{w}\nhT : HasCardinalLT T κ\nhκ : LE.le Cardinal.aleph0 κ\n⊢ HasCardinalLT (CategoryTheory.Arrow (CategoryTheory.Limits.WalkingParallelFamily T)) κ","decl":"lemma hasCardinalLT_arrow_walkingParallelFamily {T : Type u}\n    {κ : Cardinal.{w}} (hT : HasCardinalLT T κ) (hκ : Cardinal.aleph0 ≤ κ) :\n    HasCardinalLT (Arrow (WalkingParallelFamily T)) κ := by\n  simpa only [hasCardinalLT_iff_of_equiv (WalkingParallelFamily.arrowEquiv T),\n    hasCardinalLT_option_iff _ _ hκ] using hT\n\n"}
{"name":"CategoryTheory.IsCardinalFiltered.of_le","module":"Mathlib.CategoryTheory.Presentable.IsCardinalFiltered","initialProofState":"J : Type u\ninst✝² : CategoryTheory.Category.{v, u} J\nκ : Cardinal.{w}\nhκ : Fact κ.IsRegular\ninst✝¹ : CategoryTheory.IsCardinalFiltered J κ\nκ' : Cardinal.{w}\ninst✝ : Fact κ'.IsRegular\nh : LE.le κ' κ\n⊢ CategoryTheory.IsCardinalFiltered J κ'","decl":"variable (J) in\nlemma of_le {κ' : Cardinal.{w}} [Fact κ'.IsRegular] (h : κ' ≤ κ) :\n    IsCardinalFiltered J κ' where\n  nonempty_cocone F hA := ⟨cocone F (hA.of_le h)⟩\n\n"}
{"name":"CategoryTheory.IsCardinalFiltered.of_equivalence","module":"Mathlib.CategoryTheory.Presentable.IsCardinalFiltered","initialProofState":"J : Type u\ninst✝² : CategoryTheory.Category.{v, u} J\nκ : Cardinal.{w}\nhκ : Fact κ.IsRegular\ninst✝¹ : CategoryTheory.IsCardinalFiltered J κ\nJ' : Type u'\ninst✝ : CategoryTheory.Category.{v', u'} J'\ne : CategoryTheory.Equivalence J J'\n⊢ CategoryTheory.IsCardinalFiltered J' κ","decl":"variable (κ) in\nlemma of_equivalence {J' : Type u'} [Category.{v'} J'] (e : J ≌ J') :\n    IsCardinalFiltered J' κ where\n  nonempty_cocone F hA := ⟨e.inverse.mapCoconeInv (cocone (F ⋙ e.inverse) hA)⟩\n\n"}
{"name":"CategoryTheory.IsCardinalFiltered.coeq_condition","module":"Mathlib.CategoryTheory.Presentable.IsCardinalFiltered","initialProofState":"J : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} J\nκ : Cardinal.{w}\nhκ : Fact κ.IsRegular\ninst✝ : CategoryTheory.IsCardinalFiltered J κ\nK : Type v'\nj j' : J\nf : K → Quiver.Hom j j'\nhK : HasCardinalLT K κ\nk : K\n⊢ Eq (CategoryTheory.CategoryStruct.comp (f k) (CategoryTheory.IsCardinalFiltered.coeqHom f hK)) (CategoryTheory.IsCardinalFiltered.toCoeq f hK)","decl":"@[reassoc]\nlemma coeq_condition (k : K) : f k ≫ coeqHom f hK = toCoeq f hK :=\n  (cocone (parallelFamily f)\n    (hasCardinalLT_arrow_walkingParallelFamily hK hκ.out.aleph0_le)).w\n    (.line k)\n\n"}
{"name":"CategoryTheory.IsCardinalFiltered.coeq_condition_assoc","module":"Mathlib.CategoryTheory.Presentable.IsCardinalFiltered","initialProofState":"J : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} J\nκ : Cardinal.{w}\nhκ : Fact κ.IsRegular\ninst✝ : CategoryTheory.IsCardinalFiltered J κ\nK : Type v'\nj j' : J\nf : K → Quiver.Hom j j'\nhK : HasCardinalLT K κ\nk : K\nZ : J\nh : Quiver.Hom (CategoryTheory.IsCardinalFiltered.coeq f hK) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (f k) (CategoryTheory.CategoryStruct.comp (CategoryTheory.IsCardinalFiltered.coeqHom f hK) h)) (CategoryTheory.CategoryStruct.comp (CategoryTheory.IsCardinalFiltered.toCoeq f hK) h)","decl":"@[reassoc]\nlemma coeq_condition (k : K) : f k ≫ coeqHom f hK = toCoeq f hK :=\n  (cocone (parallelFamily f)\n    (hasCardinalLT_arrow_walkingParallelFamily hK hκ.out.aleph0_le)).w\n    (.line k)\n\n"}
{"name":"CategoryTheory.isFiltered_of_isCardinalDirected","module":"Mathlib.CategoryTheory.Presentable.IsCardinalFiltered","initialProofState":"J : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} J\nκ : Cardinal.{w}\nhκ : Fact κ.IsRegular\ninst✝ : CategoryTheory.IsCardinalFiltered J κ\n⊢ CategoryTheory.IsFiltered J","decl":"open IsCardinalFiltered in\nlemma isFiltered_of_isCardinalDirected (J : Type u) [Category.{v} J]\n    (κ : Cardinal.{w}) [hκ : Fact κ.IsRegular] [IsCardinalFiltered J κ] :\n    IsFiltered J := by\n  rw [IsFiltered.iff_cocone_nonempty.{w}]\n  intro A _ _ F\n  have hA : HasCardinalLT (Arrow A) κ := by\n    refine HasCardinalLT.of_le ?_ hκ.out.aleph0_le\n    simp only [hasCardinalLT_aleph0_iff]\n    infer_instance\n  exact ⟨cocone F hA⟩\n\n"}
{"name":"CategoryTheory.isCardinalFiltered_aleph0_iff","module":"Mathlib.CategoryTheory.Presentable.IsCardinalFiltered","initialProofState":"J : Type u\ninst✝ : CategoryTheory.Category.{v, u} J\n⊢ Iff (CategoryTheory.IsCardinalFiltered J Cardinal.aleph0) (CategoryTheory.IsFiltered J)","decl":"lemma isCardinalFiltered_aleph0_iff (J : Type u) [Category.{v} J] :\n    IsCardinalFiltered J Cardinal.aleph0.{w} ↔ IsFiltered J := by\n  constructor\n  · intro\n    exact isFiltered_of_isCardinalDirected J Cardinal.aleph0\n  · intro\n    constructor\n    intro A _ F hA\n    rw [hasCardinalLT_aleph0_iff] at hA\n    have := ((Arrow.finite_iff A).1 hA).some\n    exact ⟨IsFiltered.cocone F⟩\n\n"}
{"name":"CategoryTheory.isCardinalFiltered_preorder","module":"Mathlib.CategoryTheory.Presentable.IsCardinalFiltered","initialProofState":"J : Type w\ninst✝¹ : Preorder J\nκ : Cardinal.{w}\ninst✝ : Fact κ.IsRegular\nh : ∀ ⦃K : Type w⦄ (s : K → J), LT.lt (Cardinal.mk K) κ → Exists fun j => ∀ (k : K), LE.le (s k) j\n⊢ CategoryTheory.IsCardinalFiltered J κ","decl":"lemma isCardinalFiltered_preorder (J : Type w) [Preorder J]\n    (κ : Cardinal.{w}) [Fact κ.IsRegular]\n    (h : ∀ ⦃K : Type w⦄ (s : K → J) (_ : Cardinal.mk K < κ),\n      ∃ (j : J), ∀ (k : K), s k ≤ j) :\n    IsCardinalFiltered J κ where\n  nonempty_cocone {A _ F hA} := by\n    obtain ⟨j, hj⟩ := h F.obj (by simpa only [hasCardinalLT_iff_cardinal_mk_lt] using\n        hasCardinalLT_of_hasCardinalLT_arrow hA)\n    exact ⟨Cocone.mk j\n      { app a := homOfLE (hj a)\n        naturality _ _ _ := rfl }⟩\n\n"}
