{"name":"AddSubmonoidWithOneClass.toOneMemClass","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"S : Type u_1\nR : outParam (Type u_2)\ninst✝¹ : AddMonoidWithOne R\ninst✝ : SetLike S R\nself : AddSubmonoidWithOneClass S R\n⊢ OneMemClass S R","decl":"/-- `AddSubmonoidWithOneClass S R` says `S` is a type of subsets `s ≤ R` that contain `0`, `1`,\nand are closed under `(+)` -/\nclass AddSubmonoidWithOneClass (S : Type*) (R : outParam Type*) [AddMonoidWithOne R]\n  [SetLike S R] extends AddSubmonoidClass S R, OneMemClass S R : Prop\n\n"}
{"name":"AddSubmonoidWithOneClass.toAddSubmonoidClass","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"S : Type u_1\nR : outParam (Type u_2)\ninst✝¹ : AddMonoidWithOne R\ninst✝ : SetLike S R\nself : AddSubmonoidWithOneClass S R\n⊢ AddSubmonoidClass S R","decl":"/-- `AddSubmonoidWithOneClass S R` says `S` is a type of subsets `s ≤ R` that contain `0`, `1`,\nand are closed under `(+)` -/\nclass AddSubmonoidWithOneClass (S : Type*) (R : outParam Type*) [AddMonoidWithOne R]\n  [SetLike S R] extends AddSubmonoidClass S R, OneMemClass S R : Prop\n\n"}
{"name":"natCast_mem","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"S : Type u_1\nR : Type u_2\ninst✝² : AddMonoidWithOne R\ninst✝¹ : SetLike S R\ns : S\ninst✝ : AddSubmonoidWithOneClass S R\nn : Nat\n⊢ Membership.mem s ↑n","decl":"@[aesop safe apply (rule_sets := [SetLike])]\ntheorem natCast_mem [AddSubmonoidWithOneClass S R] (n : ℕ) : (n : R) ∈ s := by\n  induction n <;> simp [zero_mem, add_mem, one_mem, *]\n\n"}
{"name":"ofNat_mem","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"S : Type u_1\nR : Type u_2\ninst✝³ : AddMonoidWithOne R\ninst✝² : SetLike S R\ninst✝¹ : AddSubmonoidWithOneClass S R\ns : S\nn : Nat\ninst✝ : n.AtLeastTwo\n⊢ Membership.mem s (OfNat.ofNat n)","decl":"@[aesop safe apply (rule_sets := [SetLike])]\nlemma ofNat_mem [AddSubmonoidWithOneClass S R] (s : S) (n : ℕ) [n.AtLeastTwo] :\n    ofNat(n) ∈ s := by\n  rw [← Nat.cast_ofNat]; exact natCast_mem s n\n\n"}
{"name":"SubsemiringClass.toSubmonoidClass","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"S : Type u_1\nR : outParam (Type u)\ninst✝¹ : NonAssocSemiring R\ninst✝ : SetLike S R\nself : SubsemiringClass S R\n⊢ SubmonoidClass S R","decl":"/-- `SubsemiringClass S R` states that `S` is a type of subsets `s ⊆ R` that\nare both a multiplicative and an additive submonoid. -/\nclass SubsemiringClass (S : Type*) (R : outParam (Type u)) [NonAssocSemiring R]\n  [SetLike S R] extends SubmonoidClass S R, AddSubmonoidClass S R : Prop\n\n-- See note [lower instance priority]\n"}
{"name":"SubsemiringClass.toAddSubmonoidClass","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"S : Type u_1\nR : outParam (Type u)\ninst✝¹ : NonAssocSemiring R\ninst✝ : SetLike S R\nself : SubsemiringClass S R\n⊢ AddSubmonoidClass S R","decl":"/-- `SubsemiringClass S R` states that `S` is a type of subsets `s ⊆ R` that\nare both a multiplicative and an additive submonoid. -/\nclass SubsemiringClass (S : Type*) (R : outParam (Type u)) [NonAssocSemiring R]\n  [SetLike S R] extends SubmonoidClass S R, AddSubmonoidClass S R : Prop\n\n-- See note [lower instance priority]\n"}
{"name":"SubsemiringClass.addSubmonoidWithOneClass","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"S : Type u_1\nR : Type u\nx✝ : NonAssocSemiring R\ninst✝ : SetLike S R\nh : SubsemiringClass S R\n⊢ AddSubmonoidWithOneClass S R","decl":"instance (priority := 100) SubsemiringClass.addSubmonoidWithOneClass (S : Type*)\n    (R : Type u) {_ : NonAssocSemiring R} [SetLike S R] [h : SubsemiringClass S R] :\n    AddSubmonoidWithOneClass S R :=\n  { h with }\n\n"}
{"name":"SubsemiringClass.nonUnitalSubsemiringClass","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"S : Type u_1\nR : Type u\ninst✝² : NonAssocSemiring R\ninst✝¹ : SetLike S R\ninst✝ : SubsemiringClass S R\n⊢ NonUnitalSubsemiringClass S R","decl":"instance (priority := 100) SubsemiringClass.nonUnitalSubsemiringClass (S : Type*)\n    (R : Type u) [NonAssocSemiring R] [SetLike S R] [SubsemiringClass S R] :\n    NonUnitalSubsemiringClass S R where\n  mul_mem := mul_mem\n\n"}
{"name":"SubsemiringClass.nontrivial","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\nS : Type v\ninst✝² : NonAssocSemiring R\ninst✝¹ : SetLike S R\nhSR : SubsemiringClass S R\ns : S\ninst✝ : Nontrivial R\n⊢ Nontrivial (Subtype fun x => Membership.mem s x)","decl":"instance nontrivial [Nontrivial R] : Nontrivial s :=\n  nontrivial_of_ne 0 1 fun H => zero_ne_one (congr_arg Subtype.val H)\n\n"}
{"name":"SubsemiringClass.noZeroDivisors","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\nS : Type v\ninst✝² : NonAssocSemiring R\ninst✝¹ : SetLike S R\nhSR : SubsemiringClass S R\ns : S\ninst✝ : NoZeroDivisors R\n⊢ NoZeroDivisors (Subtype fun x => Membership.mem s x)","decl":"instance noZeroDivisors [NoZeroDivisors R] : NoZeroDivisors s :=\n  Subtype.coe_injective.noZeroDivisors _ rfl fun _ _ => rfl\n\n"}
{"name":"SubsemiringClass.coe_subtype","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonAssocSemiring R\ninst✝ : SetLike S R\nhSR : SubsemiringClass S R\ns : S\n⊢ Eq (⇑(SubsemiringClass.subtype s)) Subtype.val","decl":"@[simp]\ntheorem coe_subtype : (subtype s : s → R) = ((↑) : s → R) :=\n  rfl\n\n-- Prefer subclasses of `Semiring` over subclasses of `SubsemiringClass`.\n"}
{"name":"SubsemiringClass.coe_pow","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"S : Type v\ns : S\nR : Type u_1\ninst✝² : Semiring R\ninst✝¹ : SetLike S R\ninst✝ : SubsemiringClass S R\nx : Subtype fun x => Membership.mem s x\nn : Nat\n⊢ Eq (↑(HPow.hPow x n)) (HPow.hPow (↑x) n)","decl":"@[simp, norm_cast]\ntheorem coe_pow {R} [Semiring R] [SetLike S R] [SubsemiringClass S R] (x : s) (n : ℕ) :\n    ((x ^ n : s) : R) = (x : R) ^ n := by\n  induction n with\n  | zero => simp\n  | succ n ih => simp [pow_succ, ih]\n\n"}
{"name":"Subsemiring.add_mem'","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\nself : Subsemiring R\na b : R\na✝¹ : Membership.mem self.carrier a\na✝ : Membership.mem self.carrier b\n⊢ Membership.mem self.carrier (HAdd.hAdd a b)","decl":"/-- A subsemiring of a semiring `R` is a subset `s` that is both a multiplicative and an additive\nsubmonoid. -/\nstructure Subsemiring (R : Type u) [NonAssocSemiring R] extends Submonoid R, AddSubmonoid R\n\n"}
{"name":"Subsemiring.mk.sizeOf_spec","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝¹ : NonAssocSemiring R\ninst✝ : SizeOf R\ntoSubmonoid : Submonoid R\nadd_mem' : ∀ {a b : R}, Membership.mem toSubmonoid.carrier a → Membership.mem toSubmonoid.carrier b → Membership.mem toSubmonoid.carrier (HAdd.hAdd a b)\nzero_mem' : Membership.mem toSubmonoid.carrier 0\n⊢ Eq (SizeOf.sizeOf { toSubmonoid := toSubmonoid, add_mem' := add_mem', zero_mem' := zero_mem' }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toSubmonoid)) (SizeOf.sizeOf zero_mem'))","decl":"/-- A subsemiring of a semiring `R` is a subset `s` that is both a multiplicative and an additive\nsubmonoid. -/\nstructure Subsemiring (R : Type u) [NonAssocSemiring R] extends Submonoid R, AddSubmonoid R\n\n"}
{"name":"Subsemiring.mk.injEq","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ntoSubmonoid✝ : Submonoid R\nadd_mem'✝ : ∀ {a b : R}, Membership.mem toSubmonoid✝.carrier a → Membership.mem toSubmonoid✝.carrier b → Membership.mem toSubmonoid✝.carrier (HAdd.hAdd a b)\nzero_mem'✝ : Membership.mem toSubmonoid✝.carrier 0\ntoSubmonoid : Submonoid R\nadd_mem' : ∀ {a b : R}, Membership.mem toSubmonoid.carrier a → Membership.mem toSubmonoid.carrier b → Membership.mem toSubmonoid.carrier (HAdd.hAdd a b)\nzero_mem' : Membership.mem toSubmonoid.carrier 0\n⊢ Eq (Eq { toSubmonoid := toSubmonoid✝, add_mem' := add_mem'✝, zero_mem' := zero_mem'✝ } { toSubmonoid := toSubmonoid, add_mem' := add_mem', zero_mem' := zero_mem' }) (Eq toSubmonoid✝ toSubmonoid)","decl":"/-- A subsemiring of a semiring `R` is a subset `s` that is both a multiplicative and an additive\nsubmonoid. -/\nstructure Subsemiring (R : Type u) [NonAssocSemiring R] extends Submonoid R, AddSubmonoid R\n\n"}
{"name":"Subsemiring.mk.inj","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ntoSubmonoid✝ : Submonoid R\nadd_mem'✝ : ∀ {a b : R}, Membership.mem toSubmonoid✝.carrier a → Membership.mem toSubmonoid✝.carrier b → Membership.mem toSubmonoid✝.carrier (HAdd.hAdd a b)\nzero_mem'✝ : Membership.mem toSubmonoid✝.carrier 0\ntoSubmonoid : Submonoid R\nadd_mem' : ∀ {a b : R}, Membership.mem toSubmonoid.carrier a → Membership.mem toSubmonoid.carrier b → Membership.mem toSubmonoid.carrier (HAdd.hAdd a b)\nzero_mem' : Membership.mem toSubmonoid.carrier 0\nx✝ : Eq { toSubmonoid := toSubmonoid✝, add_mem' := add_mem'✝, zero_mem' := zero_mem'✝ } { toSubmonoid := toSubmonoid, add_mem' := add_mem', zero_mem' := zero_mem' }\n⊢ Eq toSubmonoid✝ toSubmonoid","decl":"/-- A subsemiring of a semiring `R` is a subset `s` that is both a multiplicative and an additive\nsubmonoid. -/\nstructure Subsemiring (R : Type u) [NonAssocSemiring R] extends Submonoid R, AddSubmonoid R\n\n"}
{"name":"Subsemiring.zero_mem'","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\nself : Subsemiring R\n⊢ Membership.mem self.carrier 0","decl":"/-- A subsemiring of a semiring `R` is a subset `s` that is both a multiplicative and an additive\nsubmonoid. -/\nstructure Subsemiring (R : Type u) [NonAssocSemiring R] extends Submonoid R, AddSubmonoid R\n\n"}
{"name":"Subsemiring.instSubsemiringClass","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\n⊢ SubsemiringClass (Subsemiring R) R","decl":"instance : SubsemiringClass (Subsemiring R) R where\n  zero_mem := zero_mem'\n  add_mem {s} := AddSubsemigroup.add_mem' s.toAddSubmonoid.toAddSubsemigroup\n  one_mem {s} := Submonoid.one_mem' s.toSubmonoid\n  mul_mem {s} := Subsemigroup.mul_mem' s.toSubmonoid.toSubsemigroup\n\n"}
{"name":"Subsemiring.mem_toSubmonoid","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ns : Subsemiring R\nx : R\n⊢ Iff (Membership.mem s.toSubmonoid x) (Membership.mem s x)","decl":"@[simp]\ntheorem mem_toSubmonoid {s : Subsemiring R} {x : R} : x ∈ s.toSubmonoid ↔ x ∈ s :=\n  Iff.rfl\n\n"}
{"name":"Subsemiring.mem_toNonUnitalSubsemiring","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\nS : Subsemiring R\nx : R\n⊢ Iff (Membership.mem S.toNonUnitalSubsemiring x) (Membership.mem S x)","decl":"@[simp]\nlemma mem_toNonUnitalSubsemiring {S : Subsemiring R} {x : R} :\n    x ∈ S.toNonUnitalSubsemiring ↔ x ∈ S := .rfl\n\n"}
{"name":"Subsemiring.mem_carrier","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ns : Subsemiring R\nx : R\n⊢ Iff (Membership.mem s.carrier x) (Membership.mem s x)","decl":"theorem mem_carrier {s : Subsemiring R} {x : R} : x ∈ s.carrier ↔ x ∈ s :=\n  Iff.rfl\n\n"}
{"name":"Subsemiring.coe_toNonUnitalSubsemiring","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\nS : Subsemiring R\n⊢ Eq ↑S.toNonUnitalSubsemiring ↑S","decl":"@[simp]\nlemma coe_toNonUnitalSubsemiring (S : Subsemiring R) : (S.toNonUnitalSubsemiring : Set R) = S := rfl\n\n"}
{"name":"Subsemiring.ext_iff","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\nS T : Subsemiring R\n⊢ Iff (Eq S T) (∀ (x : R), Iff (Membership.mem S x) (Membership.mem T x))","decl":"/-- Two subsemirings are equal if they have the same elements. -/\n@[ext]\ntheorem ext {S T : Subsemiring R} (h : ∀ x, x ∈ S ↔ x ∈ T) : S = T :=\n  SetLike.ext h\n\n"}
{"name":"Subsemiring.ext","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\nS T : Subsemiring R\nh : ∀ (x : R), Iff (Membership.mem S x) (Membership.mem T x)\n⊢ Eq S T","decl":"/-- Two subsemirings are equal if they have the same elements. -/\n@[ext]\ntheorem ext {S T : Subsemiring R} (h : ∀ x, x ∈ S ↔ x ∈ T) : S = T :=\n  SetLike.ext h\n\n"}
{"name":"Subsemiring.copy_toSubmonoid","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\nS : Subsemiring R\ns : Set R\nhs : Eq s ↑S\n⊢ Eq (S.copy s hs).toSubmonoid { carrier := s, mul_mem' := ⋯, one_mem' := ⋯ }","decl":"/-- Copy of a subsemiring with a new `carrier` equal to the old one. Useful to fix definitional\nequalities. -/\n@[simps coe toSubmonoid]\nprotected def copy (S : Subsemiring R) (s : Set R) (hs : s = ↑S) : Subsemiring R :=\n  { S.toAddSubmonoid.copy s hs, S.toSubmonoid.copy s hs with carrier := s }\n\n"}
{"name":"Subsemiring.coe_copy","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\nS : Subsemiring R\ns : Set R\nhs : Eq s ↑S\n⊢ Eq (↑(S.copy s hs)) s","decl":"/-- Copy of a subsemiring with a new `carrier` equal to the old one. Useful to fix definitional\nequalities. -/\n@[simps coe toSubmonoid]\nprotected def copy (S : Subsemiring R) (s : Set R) (hs : s = ↑S) : Subsemiring R :=\n  { S.toAddSubmonoid.copy s hs, S.toSubmonoid.copy s hs with carrier := s }\n\n"}
{"name":"Subsemiring.copy_eq","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\nS : Subsemiring R\ns : Set R\nhs : Eq s ↑S\n⊢ Eq (S.copy s hs) S","decl":"theorem copy_eq (S : Subsemiring R) (s : Set R) (hs : s = ↑S) : S.copy s hs = S :=\n  SetLike.coe_injective hs\n\n"}
{"name":"Subsemiring.toSubmonoid_injective","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\n⊢ Function.Injective Subsemiring.toSubmonoid","decl":"theorem toSubmonoid_injective : Function.Injective (toSubmonoid : Subsemiring R → Submonoid R)\n  | _, _, h => ext (SetLike.ext_iff.mp h :)\n\n"}
{"name":"Subsemiring.toAddSubmonoid_injective","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\n⊢ Function.Injective Subsemiring.toAddSubmonoid","decl":"theorem toAddSubmonoid_injective :\n    Function.Injective (toAddSubmonoid : Subsemiring R → AddSubmonoid R)\n  | _, _, h => ext (SetLike.ext_iff.mp h :)\n\n"}
{"name":"Subsemiring.toNonUnitalSubsemiring_injective","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\n⊢ Function.Injective Subsemiring.toNonUnitalSubsemiring","decl":"lemma toNonUnitalSubsemiring_injective :\n    Function.Injective (toNonUnitalSubsemiring : Subsemiring R → _) :=\n  fun S₁ S₂ h => SetLike.ext'_iff.2 (\n    show (S₁.toNonUnitalSubsemiring : Set R) = S₂ from SetLike.ext'_iff.1 h)\n\n"}
{"name":"Subsemiring.toNonUnitalSubsemiring_inj","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\nS₁ S₂ : Subsemiring R\n⊢ Iff (Eq S₁.toNonUnitalSubsemiring S₂.toNonUnitalSubsemiring) (Eq S₁ S₂)","decl":"@[simp]\nlemma toNonUnitalSubsemiring_inj {S₁ S₂ : Subsemiring R} :\n    S₁.toNonUnitalSubsemiring = S₂.toNonUnitalSubsemiring ↔ S₁ = S₂ :=\n  toNonUnitalSubsemiring_injective.eq_iff\n\n"}
{"name":"Subsemiring.one_mem_toNonUnitalSubsemiring","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\nS : Subsemiring R\n⊢ Membership.mem S.toNonUnitalSubsemiring 1","decl":"lemma one_mem_toNonUnitalSubsemiring (S : Subsemiring R) : (1 : R) ∈ S.toNonUnitalSubsemiring :=\n  S.one_mem\n\n"}
{"name":"Subsemiring.coe_mk'","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ns : Set R\nsm : Submonoid R\nhm : Eq (↑sm) s\nsa : AddSubmonoid R\nha : Eq (↑sa) s\n⊢ Eq (↑(Subsemiring.mk' s sm hm sa ha)) s","decl":"/-- Construct a `Subsemiring R` from a set `s`, a submonoid `sm`, and an additive\nsubmonoid `sa` such that `x ∈ s ↔ x ∈ sm ↔ x ∈ sa`. -/\n@[simps coe]\nprotected def mk' (s : Set R) (sm : Submonoid R) (hm : ↑sm = s) (sa : AddSubmonoid R)\n    (ha : ↑sa = s) : Subsemiring R where\n  carrier := s\n  zero_mem' := by exact ha ▸ sa.zero_mem\n  one_mem' := by exact hm ▸ sm.one_mem\n  add_mem' {x y} := by simpa only [← ha] using sa.add_mem\n  mul_mem' {x y} := by simpa only [← hm] using sm.mul_mem\n\n"}
{"name":"Subsemiring.mem_mk'","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ns : Set R\nsm : Submonoid R\nhm : Eq (↑sm) s\nsa : AddSubmonoid R\nha : Eq (↑sa) s\nx : R\n⊢ Iff (Membership.mem (Subsemiring.mk' s sm hm sa ha) x) (Membership.mem s x)","decl":"@[simp]\ntheorem mem_mk' {s : Set R} {sm : Submonoid R} (hm : ↑sm = s) {sa : AddSubmonoid R} (ha : ↑sa = s)\n    {x : R} : x ∈ Subsemiring.mk' s sm hm sa ha ↔ x ∈ s :=\n  Iff.rfl\n\n"}
{"name":"Subsemiring.mk'_toSubmonoid","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ns : Set R\nsm : Submonoid R\nhm : Eq (↑sm) s\nsa : AddSubmonoid R\nha : Eq (↑sa) s\n⊢ Eq (Subsemiring.mk' s sm hm sa ha).toSubmonoid sm","decl":"@[simp]\ntheorem mk'_toSubmonoid {s : Set R} {sm : Submonoid R} (hm : ↑sm = s) {sa : AddSubmonoid R}\n    (ha : ↑sa = s) : (Subsemiring.mk' s sm hm sa ha).toSubmonoid = sm :=\n  SetLike.coe_injective hm.symm\n\n"}
{"name":"Subsemiring.mk'_toAddSubmonoid","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ns : Set R\nsm : Submonoid R\nhm : Eq (↑sm) s\nsa : AddSubmonoid R\nha : Eq (↑sa) s\n⊢ Eq (Subsemiring.mk' s sm hm sa ha).toAddSubmonoid sa","decl":"@[simp]\ntheorem mk'_toAddSubmonoid {s : Set R} {sm : Submonoid R} (hm : ↑sm = s) {sa : AddSubmonoid R}\n    (ha : ↑sa = s) : (Subsemiring.mk' s sm hm sa ha).toAddSubmonoid = sa :=\n  SetLike.coe_injective ha.symm\n\n"}
{"name":"Subsemiring.one_mem","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ns : Subsemiring R\n⊢ Membership.mem s 1","decl":"/-- A subsemiring contains the semiring's 1. -/\nprotected theorem one_mem : (1 : R) ∈ s :=\n  one_mem s\n\n"}
{"name":"Subsemiring.zero_mem","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ns : Subsemiring R\n⊢ Membership.mem s 0","decl":"/-- A subsemiring contains the semiring's 0. -/\nprotected theorem zero_mem : (0 : R) ∈ s :=\n  zero_mem s\n\n"}
{"name":"Subsemiring.mul_mem","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ns : Subsemiring R\nx y : R\na✝¹ : Membership.mem s x\na✝ : Membership.mem s y\n⊢ Membership.mem s (HMul.hMul x y)","decl":"/-- A subsemiring is closed under multiplication. -/\nprotected theorem mul_mem {x y : R} : x ∈ s → y ∈ s → x * y ∈ s :=\n  mul_mem\n\n"}
{"name":"Subsemiring.add_mem","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ns : Subsemiring R\nx y : R\na✝¹ : Membership.mem s x\na✝ : Membership.mem s y\n⊢ Membership.mem s (HAdd.hAdd x y)","decl":"/-- A subsemiring is closed under addition. -/\nprotected theorem add_mem {x y : R} : x ∈ s → y ∈ s → x + y ∈ s :=\n  add_mem\n\n"}
{"name":"Subsemiring.coe_one","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ns : Subsemiring R\n⊢ Eq (↑1) 1","decl":"@[simp, norm_cast]\ntheorem coe_one : ((1 : s) : R) = (1 : R) :=\n  rfl\n\n"}
{"name":"Subsemiring.coe_zero","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ns : Subsemiring R\n⊢ Eq (↑0) 0","decl":"@[simp, norm_cast]\ntheorem coe_zero : ((0 : s) : R) = (0 : R) :=\n  rfl\n\n"}
{"name":"Subsemiring.coe_add","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ns : Subsemiring R\nx y : Subtype fun x => Membership.mem s x\n⊢ Eq (↑(HAdd.hAdd x y)) (HAdd.hAdd ↑x ↑y)","decl":"@[simp, norm_cast]\ntheorem coe_add (x y : s) : ((x + y : s) : R) = (x + y : R) :=\n  rfl\n\n"}
{"name":"Subsemiring.coe_mul","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ns : Subsemiring R\nx y : Subtype fun x => Membership.mem s x\n⊢ Eq (↑(HMul.hMul x y)) (HMul.hMul ↑x ↑y)","decl":"@[simp, norm_cast]\ntheorem coe_mul (x y : s) : ((x * y : s) : R) = (x * y : R) :=\n  rfl\n\n"}
{"name":"Subsemiring.nontrivial","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝¹ : NonAssocSemiring R\ns : Subsemiring R\ninst✝ : Nontrivial R\n⊢ Nontrivial (Subtype fun x => Membership.mem s x)","decl":"instance nontrivial [Nontrivial R] : Nontrivial s :=\n  nontrivial_of_ne 0 1 fun H => zero_ne_one (congr_arg Subtype.val H)\n\n"}
{"name":"Subsemiring.pow_mem","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u_1\ninst✝ : Semiring R\ns : Subsemiring R\nx : R\nhx : Membership.mem s x\nn : Nat\n⊢ Membership.mem s (HPow.hPow x n)","decl":"protected theorem pow_mem {R : Type*} [Semiring R] (s : Subsemiring R) {x : R} (hx : x ∈ s)\n    (n : ℕ) : x ^ n ∈ s :=\n  pow_mem hx n\n\n"}
{"name":"Subsemiring.noZeroDivisors","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝¹ : NonAssocSemiring R\ns : Subsemiring R\ninst✝ : NoZeroDivisors R\n⊢ NoZeroDivisors (Subtype fun x => Membership.mem s x)","decl":"instance noZeroDivisors [NoZeroDivisors R] : NoZeroDivisors s where\n  eq_zero_or_eq_zero_of_mul_eq_zero {_ _} h :=\n    (eq_zero_or_eq_zero_of_mul_eq_zero <| Subtype.ext_iff.mp h).imp Subtype.eq Subtype.eq\n\n"}
{"name":"Subsemiring.coe_pow","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u_1\ninst✝ : Semiring R\ns : Subsemiring R\nx : Subtype fun x => Membership.mem s x\nn : Nat\n⊢ Eq (↑(HPow.hPow x n)) (HPow.hPow (↑x) n)","decl":"@[simp, norm_cast]\ntheorem coe_pow {R} [Semiring R] (s : Subsemiring R) (x : s) (n : ℕ) :\n    ((x ^ n : s) : R) = (x : R) ^ n := by\n  induction n with\n  | zero => simp\n  | succ n ih => simp [pow_succ, ih]\n\n"}
{"name":"Subsemiring.coe_subtype","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ns : Subsemiring R\n⊢ Eq (⇑s.subtype) Subtype.val","decl":"@[simp]\ntheorem coe_subtype : ⇑s.subtype = ((↑) : s → R) :=\n  rfl\n\n"}
{"name":"Subsemiring.subtype_injective","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ns : Subsemiring R\n⊢ Function.Injective ⇑s.subtype","decl":"theorem subtype_injective : Function.Injective s.subtype := Subtype.coe_injective\n\n"}
{"name":"Subsemiring.nsmul_mem","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ns : Subsemiring R\nx : R\nhx : Membership.mem s x\nn : Nat\n⊢ Membership.mem s (HSMul.hSMul n x)","decl":"protected theorem nsmul_mem {x : R} (hx : x ∈ s) (n : ℕ) : n • x ∈ s :=\n  nsmul_mem hx n\n\n"}
{"name":"Subsemiring.coe_toSubmonoid","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ns : Subsemiring R\n⊢ Eq ↑s.toSubmonoid ↑s","decl":"@[simp]\ntheorem coe_toSubmonoid (s : Subsemiring R) : (s.toSubmonoid : Set R) = s :=\n  rfl\n\n-- Porting note: adding this as `simp`-normal form for `coe_toAddSubmonoid`\n"}
{"name":"Subsemiring.coe_carrier_toSubmonoid","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ns : Subsemiring R\n⊢ Eq s.carrier ↑s","decl":"@[simp]\ntheorem coe_carrier_toSubmonoid (s : Subsemiring R) : (s.toSubmonoid.carrier : Set R) = s :=\n  rfl\n\n-- Porting note: can be proven using `SetLike` so removing `@[simp]`\n"}
{"name":"Subsemiring.mem_toAddSubmonoid","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ns : Subsemiring R\nx : R\n⊢ Iff (Membership.mem s.toAddSubmonoid x) (Membership.mem s x)","decl":"theorem mem_toAddSubmonoid {s : Subsemiring R} {x : R} : x ∈ s.toAddSubmonoid ↔ x ∈ s :=\n  Iff.rfl\n\n-- Porting note: new normal form is `coe_carrier_toSubmonoid` so removing `@[simp]`\n"}
{"name":"Subsemiring.coe_toAddSubmonoid","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\ns : Subsemiring R\n⊢ Eq ↑s.toAddSubmonoid ↑s","decl":"theorem coe_toAddSubmonoid (s : Subsemiring R) : (s.toAddSubmonoid : Set R) = s :=\n  rfl\n\n"}
{"name":"Subsemiring.mem_top","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\nx : R\n⊢ Membership.mem Top.top x","decl":"@[simp]\ntheorem mem_top (x : R) : x ∈ (⊤ : Subsemiring R) :=\n  Set.mem_univ x\n\n"}
{"name":"Subsemiring.coe_top","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\n⊢ Eq (↑Top.top) Set.univ","decl":"@[simp]\ntheorem coe_top : ((⊤ : Subsemiring R) : Set R) = Set.univ :=\n  rfl\n\n"}
{"name":"Subsemiring.coe_inf","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\np p' : Subsemiring R\n⊢ Eq (↑(Min.min p p')) (Inter.inter ↑p ↑p')","decl":"@[simp]\ntheorem coe_inf (p p' : Subsemiring R) : ((p ⊓ p' : Subsemiring R) : Set R) = (p : Set R) ∩ p' :=\n  rfl\n\n"}
{"name":"Subsemiring.mem_inf","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\np p' : Subsemiring R\nx : R\n⊢ Iff (Membership.mem (Min.min p p') x) (And (Membership.mem p x) (Membership.mem p' x))","decl":"@[simp]\ntheorem mem_inf {p p' : Subsemiring R} {x : R} : x ∈ p ⊓ p' ↔ x ∈ p ∧ x ∈ p' :=\n  Iff.rfl\n\n\n"}
{"name":"RingHom.restrict_apply","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\nS : Type v\ninst✝³ : NonAssocSemiring R\ninst✝² : NonAssocSemiring S\nσR : Type u_1\ninst✝¹ : SetLike σR R\ninst✝ : SubsemiringClass σR R\nf : RingHom R S\ns : σR\nx : Subtype fun x => Membership.mem s x\n⊢ Eq ((f.domRestrict s) x) (f ↑x)","decl":"@[simp]\ntheorem restrict_apply (f : R →+* S) {s : σR} (x : s) : f.domRestrict s x = f x :=\n  rfl\n\n"}
{"name":"RingHom.eqLocusS_same","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonAssocSemiring R\ninst✝ : NonAssocSemiring S\nf : RingHom R S\n⊢ Eq (f.eqLocusS f) Top.top","decl":"@[simp]\ntheorem eqLocusS_same (f : R →+* S) : f.eqLocusS f = ⊤ :=\n  SetLike.ext fun _ => eq_self_iff_true _\n\n"}
{"name":"Subsemiring.toNonUnitalSubsemiring_toSubsemiring","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\nS : Subsemiring R\n⊢ Eq (S.toNonUnitalSubsemiring.toSubsemiring ⋯) S","decl":"lemma Subsemiring.toNonUnitalSubsemiring_toSubsemiring (S : Subsemiring R) :\n    S.toNonUnitalSubsemiring.toSubsemiring S.one_mem = S := rfl\n\n"}
{"name":"NonUnitalSubsemiring.toSubsemiring_toNonUnitalSubsemiring","module":"Mathlib.Algebra.Ring.Subsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonAssocSemiring R\nS : NonUnitalSubsemiring R\nh1 : Membership.mem S 1\n⊢ Eq (S.toSubsemiring h1).toNonUnitalSubsemiring S","decl":"lemma NonUnitalSubsemiring.toSubsemiring_toNonUnitalSubsemiring (S : NonUnitalSubsemiring R) (h1) :\n    (NonUnitalSubsemiring.toSubsemiring S h1).toNonUnitalSubsemiring = S := rfl\n"}
