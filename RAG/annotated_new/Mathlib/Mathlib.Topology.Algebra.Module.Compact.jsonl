{"name":"Submodule.isCompact_of_fg","module":"Mathlib.Topology.Algebra.Module.Compact","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁷ : CommSemiring R\ninst✝⁶ : TopologicalSpace R\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : Module R M\ninst✝³ : TopologicalSpace M\ninst✝² : ContinuousAdd M\ninst✝¹ : ContinuousSMul R M\ninst✝ : CompactSpace R\nN : Submodule R M\nhN : N.FG\n⊢ IsCompact ↑N","decl":"lemma Submodule.isCompact_of_fg [CompactSpace R] {N : Submodule R M} (hN : N.FG) :\n    IsCompact (X := M) N := by\n  obtain ⟨s, hs⟩ := hN\n  have : LinearMap.range (Fintype.linearCombination R R (α := s) Subtype.val) = N := by\n    simp [Finsupp.range_linearCombination, hs]\n  rw [← this]\n  refine isCompact_range ?_\n  simp only [Fintype.linearCombination, Finset.univ_eq_attach, smul_eq_mul, LinearMap.coe_mk,\n    AddHom.coe_mk]\n  continuity\n\n"}
{"name":"Ideal.isCompact_of_fg","module":"Mathlib.Topology.Algebra.Module.Compact","initialProofState":"R : Type u_1\ninst✝³ : CommSemiring R\ninst✝² : TopologicalSpace R\ninst✝¹ : TopologicalSemiring R\ninst✝ : CompactSpace R\nI : Ideal R\nhI : I.FG\n⊢ IsCompact ↑I","decl":"lemma Ideal.isCompact_of_fg [TopologicalSemiring R] [CompactSpace R]\n    {I : Ideal R} (hI : I.FG) : IsCompact (X := R) I :=\n  Submodule.isCompact_of_fg hI\n\n"}
{"name":"Module.Finite.compactSpace","module":"Mathlib.Topology.Algebra.Module.Compact","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁸ : CommSemiring R\ninst✝⁷ : TopologicalSpace R\ninst✝⁶ : AddCommMonoid M\ninst✝⁵ : Module R M\ninst✝⁴ : TopologicalSpace M\ninst✝³ : ContinuousAdd M\ninst✝² : ContinuousSMul R M\ninst✝¹ : CompactSpace R\ninst✝ : Module.Finite R M\n⊢ CompactSpace M","decl":"variable (R M) in\nlemma Module.Finite.compactSpace [CompactSpace R] [Module.Finite R M] : CompactSpace M :=\n  ⟨Submodule.isCompact_of_fg (Module.Finite.fg_top (R := R))⟩\n"}
