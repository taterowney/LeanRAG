{"name":"Polynomial.smeval_def","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_3\ninst✝³ : Semiring R\np : Polynomial R\nS : Type u_4\ninst✝² : AddCommMonoid S\ninst✝¹ : Pow S Nat\ninst✝ : MulActionWithZero R S\nx : S\n⊢ Eq (p.smeval x) (p.sum (Polynomial.smul_pow x))","decl":"/-- Evaluate a polynomial `p` in the scalar semiring `R` at an element `x` in the target `S` using\nscalar multiple `R`-action. -/\nirreducible_def smeval : S := p.sum (smul_pow x)\n\n"}
{"name":"Polynomial.smeval_eq_sum","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝³ : Semiring R\np : Polynomial R\nS : Type u_2\ninst✝² : AddCommMonoid S\ninst✝¹ : Pow S Nat\ninst✝ : MulActionWithZero R S\nx : S\n⊢ Eq (p.smeval x) (p.sum (Polynomial.smul_pow x))","decl":"theorem smeval_eq_sum : p.smeval x = p.sum (smul_pow x) := by rw [smeval_def]\n\n"}
{"name":"Polynomial.smeval_C","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝³ : Semiring R\nr : R\nS : Type u_2\ninst✝² : AddCommMonoid S\ninst✝¹ : Pow S Nat\ninst✝ : MulActionWithZero R S\nx : S\n⊢ Eq ((Polynomial.C r).smeval x) (HSMul.hSMul r (HPow.hPow x 0))","decl":"@[simp]\ntheorem smeval_C : (C r).smeval x = r • x ^ 0 := by\n  simp only [smeval_eq_sum, smul_pow, zero_smul, sum_C_index]\n\n"}
{"name":"Polynomial.smeval_monomial","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝³ : Semiring R\nr : R\nS : Type u_2\ninst✝² : AddCommMonoid S\ninst✝¹ : Pow S Nat\ninst✝ : MulActionWithZero R S\nx : S\nn : Nat\n⊢ Eq (((Polynomial.monomial n) r).smeval x) (HSMul.hSMul r (HPow.hPow x n))","decl":"@[simp]\ntheorem smeval_monomial (n : ℕ) :\n    (monomial n r).smeval x = r • x ^ n := by\n  simp only [smeval_eq_sum, smul_pow, zero_smul, sum_monomial_index]\n\n"}
{"name":"Polynomial.eval_eq_smeval","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nr : R\np : Polynomial R\n⊢ Eq (Polynomial.eval r p) (p.smeval r)","decl":"theorem eval_eq_smeval : p.eval r = p.smeval r := by\n  rw [eval_eq_sum, smeval_eq_sum]\n  rfl\n\n"}
{"name":"Polynomial.eval₂_smulOneHom_eq_smeval","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_3\ninst✝³ : Semiring R\nS : Type u_4\ninst✝² : Semiring S\ninst✝¹ : Module R S\ninst✝ : IsScalarTower R S S\np : Polynomial R\nx : S\n⊢ Eq (Polynomial.eval₂ RingHom.smulOneHom x p) (p.smeval x)","decl":"theorem eval₂_smulOneHom_eq_smeval (R : Type*) [Semiring R] {S : Type*} [Semiring S] [Module R S]\n    [IsScalarTower R S S] (p : R[X]) (x : S) :\n    p.eval₂ RingHom.smulOneHom x = p.smeval x := by\n  rw [smeval_eq_sum, eval₂_eq_sum]\n  congr 1 with e a\n  simp only [RingHom.smulOneHom_apply, smul_one_mul, smul_pow]\n\n"}
{"name":"Polynomial.smeval_zero","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝³ : Semiring R\nS : Type u_2\ninst✝² : AddCommMonoid S\ninst✝¹ : Pow S Nat\ninst✝ : MulActionWithZero R S\nx : S\n⊢ Eq (Polynomial.smeval 0 x) 0","decl":"@[simp]\ntheorem smeval_zero : (0 : R[X]).smeval x = 0 := by\n  simp only [smeval_eq_sum, smul_pow, sum_zero_index]\n\n"}
{"name":"Polynomial.smeval_one","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝³ : Semiring R\nS : Type u_2\ninst✝² : AddCommMonoid S\ninst✝¹ : Pow S Nat\ninst✝ : MulActionWithZero R S\nx : S\n⊢ Eq (Polynomial.smeval 1 x) (HSMul.hSMul 1 (HPow.hPow x 0))","decl":"@[simp]\ntheorem smeval_one : (1 : R[X]).smeval x = 1 • x ^ 0 := by\n  rw [← C_1, smeval_C]\n  simp only [Nat.cast_one, one_smul]\n\n"}
{"name":"Polynomial.smeval_X","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝³ : Semiring R\nS : Type u_2\ninst✝² : AddCommMonoid S\ninst✝¹ : Pow S Nat\ninst✝ : MulActionWithZero R S\nx : S\n⊢ Eq (Polynomial.X.smeval x) (HPow.hPow x 1)","decl":"@[simp]\ntheorem smeval_X :\n    (X : R[X]).smeval x = x ^ 1 := by\n  simp only [smeval_eq_sum, smul_pow, zero_smul, sum_X_index, one_smul]\n\n"}
{"name":"Polynomial.smeval_X_pow","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝³ : Semiring R\nS : Type u_2\ninst✝² : AddCommMonoid S\ninst✝¹ : Pow S Nat\ninst✝ : MulActionWithZero R S\nx : S\nn : Nat\n⊢ Eq ((HPow.hPow Polynomial.X n).smeval x) (HPow.hPow x n)","decl":"@[simp]\ntheorem smeval_X_pow {n : ℕ} :\n    (X ^ n : R[X]).smeval x = x ^ n := by\n  simp only [smeval_eq_sum, smul_pow, X_pow_eq_monomial, zero_smul, sum_monomial_index, one_smul]\n\n"}
{"name":"Polynomial.smeval_add","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝³ : Semiring R\np q : Polynomial R\nS : Type u_2\ninst✝² : AddCommMonoid S\ninst✝¹ : Pow S Nat\ninst✝ : Module R S\nx : S\n⊢ Eq ((HAdd.hAdd p q).smeval x) (HAdd.hAdd (p.smeval x) (q.smeval x))","decl":"@[simp]\ntheorem smeval_add : (p + q).smeval x = p.smeval x + q.smeval x := by\n  simp only [smeval_eq_sum, smul_pow]\n  refine sum_add_index p q (smul_pow x) (fun _ ↦ ?_) (fun _ _ _ ↦ ?_)\n  · rw [smul_pow, zero_smul]\n  · rw [smul_pow, smul_pow, smul_pow, add_smul]\n\n"}
{"name":"Polynomial.smeval_natCast","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝³ : Semiring R\nS : Type u_2\ninst✝² : AddCommMonoid S\ninst✝¹ : Pow S Nat\ninst✝ : Module R S\nx : S\nn : Nat\n⊢ Eq ((↑n).smeval x) (HSMul.hSMul n (HPow.hPow x 0))","decl":"theorem smeval_natCast (n : ℕ) : (n : R[X]).smeval x = n • x ^ 0 := by\n  induction n with\n  | zero => simp only [smeval_zero, Nat.cast_zero, zero_smul]\n  | succ n ih => rw [n.cast_succ, smeval_add, ih, smeval_one, ← add_nsmul]\n\n"}
{"name":"Polynomial.smeval_smul","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝³ : Semiring R\np : Polynomial R\nS : Type u_2\ninst✝² : AddCommMonoid S\ninst✝¹ : Pow S Nat\ninst✝ : Module R S\nx : S\nr : R\n⊢ Eq ((HSMul.hSMul r p).smeval x) (HSMul.hSMul r (p.smeval x))","decl":"@[simp]\ntheorem smeval_smul (r : R) : (r • p).smeval x = r • p.smeval x := by\n  induction p using Polynomial.induction_on' with\n  | h_add p q ph qh =>\n    rw [smul_add, smeval_add, ph, qh, ← smul_add, smeval_add]\n  | h_monomial n a =>\n    rw [smul_monomial, smeval_monomial, smeval_monomial, smul_assoc]\n\n"}
{"name":"Polynomial.smeval.linearMap_apply","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝³ : Semiring R\np : Polynomial R\nS : Type u_2\ninst✝² : AddCommMonoid S\ninst✝¹ : Pow S Nat\ninst✝ : Module R S\nx : S\n⊢ Eq ((Polynomial.smeval.linearMap R x) p) (p.smeval x)","decl":"@[simp]\ntheorem smeval.linearMap_apply : smeval.linearMap R x p = p.smeval x := rfl\n\n"}
{"name":"Polynomial.leval_coe_eq_smeval","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_3\ninst✝ : Semiring R\nr : R\n⊢ Eq ⇑(Polynomial.leval r) fun p => p.smeval r","decl":"theorem leval_coe_eq_smeval {R : Type*} [Semiring R] (r : R) :\n    ⇑(leval r) = fun p => p.smeval r := by\n  rw [funext_iff]\n  intro\n  rw [leval_apply, smeval_def, eval_eq_sum]\n  rfl\n\n"}
{"name":"Polynomial.leval_eq_smeval.linearMap","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_3\ninst✝ : Semiring R\nr : R\n⊢ Eq (Polynomial.leval r) (Polynomial.smeval.linearMap R r)","decl":"theorem leval_eq_smeval.linearMap {R : Type*} [Semiring R] (r : R) :\n    leval r = smeval.linearMap R r := by\n  refine LinearMap.ext ?_\n  intro\n  rw [leval_apply, smeval.linearMap_apply, eval_eq_smeval]\n\n"}
{"name":"Polynomial.smeval_neg","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝³ : Ring R\nS : Type u_2\ninst✝² : AddCommGroup S\ninst✝¹ : Pow S Nat\ninst✝ : Module R S\np : Polynomial R\nx : S\n⊢ Eq ((Neg.neg p).smeval x) (Neg.neg (p.smeval x))","decl":"@[simp]\ntheorem smeval_neg : (-p).smeval x = - p.smeval x := by\n  rw [← add_eq_zero_iff_eq_neg, ← smeval_add, neg_add_cancel, smeval_zero]\n\n"}
{"name":"Polynomial.smeval_sub","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝³ : Ring R\nS : Type u_2\ninst✝² : AddCommGroup S\ninst✝¹ : Pow S Nat\ninst✝ : Module R S\np q : Polynomial R\nx : S\n⊢ Eq ((HSub.hSub p q).smeval x) (HSub.hSub (p.smeval x) (q.smeval x))","decl":"@[simp]\ntheorem smeval_sub : (p - q).smeval x = p.smeval x - q.smeval x := by\n  rw [sub_eq_add_neg, smeval_add, smeval_neg, sub_eq_add_neg]\n\n"}
{"name":"Polynomial.smeval_neg_nat","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"S : Type u_3\ninst✝² : NonAssocRing S\ninst✝¹ : Pow S Nat\ninst✝ : NatPowAssoc S\nq : Polynomial Nat\nn : Nat\n⊢ Eq (q.smeval (Neg.neg ↑n)) ↑(q.smeval (Neg.neg ↑n))","decl":"theorem smeval_neg_nat (S : Type*) [NonAssocRing S] [Pow S ℕ] [NatPowAssoc S] (q : ℕ[X])\n    (n : ℕ) : q.smeval (-(n : S)) = q.smeval (-n : ℤ) := by\n  rw [smeval_eq_sum, smeval_eq_sum]\n  simp only [Polynomial.smul_pow, sum_def, Int.cast_sum, Int.cast_mul, Int.cast_npow]\n  refine Finset.sum_congr rfl ?_\n  intro k _\n  rw [show -(n : S) = (-n : ℤ) by simp only [Int.cast_neg, Int.cast_natCast], nsmul_eq_mul,\n    ← AddGroupWithOne.intCast_ofNat, ← Int.cast_npow, ← Int.cast_mul, ← nsmul_eq_mul]\n\n"}
{"name":"Polynomial.smeval_C_mul","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝³ : Semiring R\nr : R\np : Polynomial R\nS : Type u_2\ninst✝² : NonAssocSemiring S\ninst✝¹ : Module R S\ninst✝ : Pow S Nat\nx : S\n⊢ Eq ((HMul.hMul (Polynomial.C r) p).smeval x) (HSMul.hSMul r (p.smeval x))","decl":"theorem smeval_C_mul : (C r * p).smeval x = r • p.smeval x := by\n  induction p using Polynomial.induction_on' with\n  | h_add p q ph qh =>\n    simp only [mul_add, smeval_add, ph, qh, smul_add]\n  | h_monomial n b =>\n    simp only [C_mul_monomial, smeval_monomial, mul_smul]\n\n"}
{"name":"Polynomial.smeval_at_natCast","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"S : Type u_2\ninst✝² : NonAssocSemiring S\ninst✝¹ : Pow S Nat\ninst✝ : NatPowAssoc S\nq : Polynomial Nat\nn : Nat\n⊢ Eq (q.smeval ↑n) ↑(q.smeval n)","decl":"theorem smeval_at_natCast (q : ℕ[X]) : ∀(n : ℕ), q.smeval (n : S) = q.smeval n := by\n  induction q using Polynomial.induction_on' with\n  | h_add p q ph qh =>\n    intro n\n    simp only [add_mul, smeval_add, ph, qh, Nat.cast_add]\n  | h_monomial n a =>\n    intro n\n    rw [smeval_monomial, smeval_monomial, nsmul_eq_mul, smul_eq_mul, Nat.cast_mul, Nat.cast_npow]\n\n"}
{"name":"Polynomial.smeval_at_zero","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝⁴ : Semiring R\np : Polynomial R\nS : Type u_2\ninst✝³ : NonAssocSemiring S\ninst✝² : Module R S\ninst✝¹ : Pow S Nat\ninst✝ : NatPowAssoc S\n⊢ Eq (p.smeval 0) (HSMul.hSMul (p.coeff 0) 1)","decl":"theorem smeval_at_zero : p.smeval (0 : S) = (p.coeff 0) • (1 : S)  := by\n  induction p using Polynomial.induction_on' with\n  | h_add p q ph qh =>\n    simp_all only [smeval_add, coeff_add, add_smul]\n  | h_monomial n a =>\n    cases n with\n    | zero => simp only [monomial_zero_left, smeval_C, npow_zero, coeff_C_zero]\n    | succ n => rw [coeff_monomial_succ, smeval_monomial, npow_add, npow_one, mul_zero, zero_smul,\n        smul_zero]\n\n"}
{"name":"Polynomial.smeval_X_mul","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝⁵ : Semiring R\np : Polynomial R\nS : Type u_2\ninst✝⁴ : NonAssocSemiring S\ninst✝³ : Module R S\ninst✝² : Pow S Nat\nx : S\ninst✝¹ : NatPowAssoc S\ninst✝ : SMulCommClass R S S\n⊢ Eq ((HMul.hMul Polynomial.X p).smeval x) (HMul.hMul x (p.smeval x))","decl":"theorem smeval_X_mul : (X * p).smeval x = x * p.smeval x := by\n    induction p using Polynomial.induction_on' with\n  | h_add p q ph qh =>\n    simp only [smeval_add, ph, qh, mul_add]\n  | h_monomial n a =>\n    rw [← monomial_one_one_eq_X, monomial_mul_monomial, smeval_monomial, one_mul, npow_add,\n      npow_one, ← mul_smul_comm, smeval_monomial]\n\n"}
{"name":"Polynomial.smeval_X_pow_assoc","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝⁵ : Semiring R\np : Polynomial R\nS : Type u_2\ninst✝⁴ : NonAssocSemiring S\ninst✝³ : Module R S\ninst✝² : Pow S Nat\nx : S\ninst✝¹ : NatPowAssoc S\ninst✝ : SMulCommClass R S S\nm n : Nat\n⊢ Eq (HMul.hMul (HMul.hMul (HPow.hPow x m) (HPow.hPow x n)) (p.smeval x)) (HMul.hMul (HPow.hPow x m) (HMul.hMul (HPow.hPow x n) (p.smeval x)))","decl":"theorem smeval_X_pow_assoc (m n : ℕ) :\n    x ^ m * x ^ n * p.smeval x = x ^ m * (x ^ n * p.smeval x) := by\n  induction p using Polynomial.induction_on' with\n  | h_add p q ph qh =>\n    simp only [smeval_add, ph, qh, mul_add]\n  | h_monomial n a =>\n    simp only [smeval_monomial, mul_smul_comm, npow_mul_assoc]\n\n"}
{"name":"Polynomial.smeval_X_pow_mul","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝⁵ : Semiring R\np : Polynomial R\nS : Type u_2\ninst✝⁴ : NonAssocSemiring S\ninst✝³ : Module R S\ninst✝² : Pow S Nat\nx : S\ninst✝¹ : NatPowAssoc S\ninst✝ : SMulCommClass R S S\nn : Nat\n⊢ Eq ((HMul.hMul (HPow.hPow Polynomial.X n) p).smeval x) (HMul.hMul (HPow.hPow x n) (p.smeval x))","decl":"theorem smeval_X_pow_mul : ∀ (n : ℕ), (X^n * p).smeval x = x^n * p.smeval x\n  | 0 => by\n    simp [npow_zero, one_mul]\n  | n + 1 => by\n    rw [add_comm, npow_add, mul_assoc, npow_one, smeval_X_mul, smeval_X_pow_mul n, npow_add,\n      smeval_X_pow_assoc, npow_one]\n\n"}
{"name":"Polynomial.smeval_monomial_mul","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝⁵ : Semiring R\nr : R\np : Polynomial R\nS : Type u_2\ninst✝⁴ : NonAssocSemiring S\ninst✝³ : Module R S\ninst✝² : Pow S Nat\nx : S\ninst✝¹ : NatPowAssoc S\ninst✝ : SMulCommClass R S S\nn : Nat\n⊢ Eq ((HMul.hMul ((Polynomial.monomial n) r) p).smeval x) (HSMul.hSMul r (HMul.hMul (HPow.hPow x n) (p.smeval x)))","decl":"theorem smeval_monomial_mul (n : ℕ) :\n    (monomial n r * p).smeval x = r • (x ^ n * p.smeval x) := by\n  induction p using Polynomial.induction_on' with\n  | h_add r s hr hs =>\n    simp only [add_comp, hr, hs, smeval_add, add_mul]\n    rw [← C_mul_X_pow_eq_monomial, mul_assoc, smeval_C_mul, smeval_X_pow_mul, smeval_add]\n  | h_monomial n a =>\n    rw [smeval_monomial, monomial_mul_monomial, smeval_monomial, npow_add, mul_smul, mul_smul_comm]\n\n"}
{"name":"Polynomial.smeval_mul_X","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝⁵ : Semiring R\np : Polynomial R\nS : Type u_2\ninst✝⁴ : NonAssocSemiring S\ninst✝³ : Module R S\ninst✝² : Pow S Nat\nx : S\ninst✝¹ : NatPowAssoc S\ninst✝ : IsScalarTower R S S\n⊢ Eq ((HMul.hMul p Polynomial.X).smeval x) (HMul.hMul (p.smeval x) x)","decl":"theorem smeval_mul_X : (p * X).smeval x = p.smeval x * x := by\n    induction p using Polynomial.induction_on' with\n  | h_add p q ph qh =>\n    simp only [add_mul, smeval_add, ph, qh]\n  | h_monomial n a =>\n    simp only [← monomial_one_one_eq_X, monomial_mul_monomial, smeval_monomial, mul_one, pow_succ',\n      mul_assoc, npow_add, smul_mul_assoc, npow_one]\n\n"}
{"name":"Polynomial.smeval_assoc_X_pow","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝⁵ : Semiring R\np : Polynomial R\nS : Type u_2\ninst✝⁴ : NonAssocSemiring S\ninst✝³ : Module R S\ninst✝² : Pow S Nat\nx : S\ninst✝¹ : NatPowAssoc S\ninst✝ : IsScalarTower R S S\nm n : Nat\n⊢ Eq (HMul.hMul (HMul.hMul (p.smeval x) (HPow.hPow x m)) (HPow.hPow x n)) (HMul.hMul (p.smeval x) (HMul.hMul (HPow.hPow x m) (HPow.hPow x n)))","decl":"theorem smeval_assoc_X_pow (m n : ℕ) :\n    p.smeval x * x ^ m * x ^ n = p.smeval x * (x ^ m * x ^ n) := by\n  induction p using Polynomial.induction_on' with\n  | h_add p q ph qh =>\n    simp only [smeval_add, ph, qh, add_mul]\n  | h_monomial n a =>\n    rw [smeval_monomial, smul_mul_assoc, smul_mul_assoc, npow_mul_assoc, ← smul_mul_assoc]\n\n"}
{"name":"Polynomial.smeval_mul_X_pow","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝⁵ : Semiring R\np : Polynomial R\nS : Type u_2\ninst✝⁴ : NonAssocSemiring S\ninst✝³ : Module R S\ninst✝² : Pow S Nat\nx : S\ninst✝¹ : NatPowAssoc S\ninst✝ : IsScalarTower R S S\nn : Nat\n⊢ Eq ((HMul.hMul p (HPow.hPow Polynomial.X n)).smeval x) (HMul.hMul (p.smeval x) (HPow.hPow x n))","decl":"theorem smeval_mul_X_pow : ∀ (n : ℕ), (p * X^n).smeval x = p.smeval x * x^n\n  | 0 => by\n    simp only [npow_zero, mul_one]\n  | n + 1 => by\n    rw [npow_add, ← mul_assoc, npow_one, smeval_mul_X, smeval_mul_X_pow n, npow_add,\n      ← smeval_assoc_X_pow, npow_one]\n\n"}
{"name":"Polynomial.smeval_mul","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝⁶ : Semiring R\np q : Polynomial R\nS : Type u_2\ninst✝⁵ : NonAssocSemiring S\ninst✝⁴ : Module R S\ninst✝³ : Pow S Nat\nx : S\ninst✝² : NatPowAssoc S\ninst✝¹ : IsScalarTower R S S\ninst✝ : SMulCommClass R S S\n⊢ Eq ((HMul.hMul p q).smeval x) (HMul.hMul (p.smeval x) (q.smeval x))","decl":"theorem smeval_mul : (p * q).smeval x  = p.smeval x * q.smeval x := by\n  induction p using Polynomial.induction_on' with\n  | h_add r s hr hs =>\n    simp only [add_comp, hr, hs, smeval_add, add_mul]\n  | h_monomial n a =>\n    simp only [smeval_monomial, smeval_C_mul, smeval_mul_X_pow, smeval_monomial_mul, smul_mul_assoc]\n\n"}
{"name":"Polynomial.smeval_pow","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝⁶ : Semiring R\np : Polynomial R\nS : Type u_2\ninst✝⁵ : NonAssocSemiring S\ninst✝⁴ : Module R S\ninst✝³ : Pow S Nat\nx : S\ninst✝² : NatPowAssoc S\ninst✝¹ : IsScalarTower R S S\ninst✝ : SMulCommClass R S S\nn : Nat\n⊢ Eq ((HPow.hPow p n).smeval x) (HPow.hPow (p.smeval x) n)","decl":"theorem smeval_pow : ∀ (n : ℕ), (p^n).smeval x = (p.smeval x)^n\n  | 0 => by\n    simp only [npow_zero, smeval_one, one_smul]\n  | n + 1 => by\n    rw [npow_add, smeval_mul, smeval_pow n, pow_one, npow_add, npow_one]\n\n"}
{"name":"Polynomial.smeval_comp","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝⁶ : Semiring R\np q : Polynomial R\nS : Type u_2\ninst✝⁵ : NonAssocSemiring S\ninst✝⁴ : Module R S\ninst✝³ : Pow S Nat\nx : S\ninst✝² : NatPowAssoc S\ninst✝¹ : IsScalarTower R S S\ninst✝ : SMulCommClass R S S\n⊢ Eq ((p.comp q).smeval x) (p.smeval (q.smeval x))","decl":"theorem smeval_comp : (p.comp q).smeval x  = p.smeval (q.smeval x) := by\n  induction p using Polynomial.induction_on' with\n  | h_add r s hr hs =>\n    simp [add_comp, hr, hs, smeval_add]\n  | h_monomial n a =>\n    simp [smeval_monomial, smeval_C_mul, smeval_pow]\n\n"}
{"name":"Polynomial.smeval_commute_left","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝⁴ : Semiring R\np : Polynomial R\nS : Type u_2\ninst✝³ : Semiring S\ninst✝² : Module R S\ninst✝¹ : IsScalarTower R S S\ninst✝ : SMulCommClass R S S\nx y : S\nhc : Commute x y\n⊢ Commute (p.smeval x) y","decl":"theorem smeval_commute_left (hc : Commute x y) : Commute (p.smeval x) y := by\n  induction p using Polynomial.induction_on' with\n  | h_add r s hr hs => exact (smeval_add R r s x) ▸ Commute.add_left hr hs\n  | h_monomial n a =>\n    simp only [smeval_monomial]\n    refine Commute.smul_left ?_ a\n    induction n with\n    | zero => simp only [npow_zero, Commute.one_left]\n    | succ n ih =>\n      refine (commute_iff_eq (x ^ (n + 1)) y).mpr ?_\n      rw [commute_iff_eq (x ^ n) y] at ih\n      rw [pow_succ, ← mul_assoc, ← ih]\n      exact Commute.right_comm hc (x ^ n)\n\n"}
{"name":"Polynomial.smeval_commute","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝⁴ : Semiring R\np q : Polynomial R\nS : Type u_2\ninst✝³ : Semiring S\ninst✝² : Module R S\ninst✝¹ : IsScalarTower R S S\ninst✝ : SMulCommClass R S S\nx y : S\nhc : Commute x y\n⊢ Commute (p.smeval x) (q.smeval y)","decl":"theorem smeval_commute (hc : Commute x y) : Commute (p.smeval x) (q.smeval y) := by\n  induction p using Polynomial.induction_on' with\n  | h_add r s hr hs => exact (smeval_add R r s x) ▸ Commute.add_left hr hs\n  | h_monomial n a =>\n    simp only [smeval_monomial]\n    refine Commute.smul_left ?_ a\n    induction n with\n    | zero => simp only [npow_zero, Commute.one_left]\n    | succ n ih =>\n      refine (commute_iff_eq (x ^ (n + 1)) (q.smeval y)).mpr ?_\n      rw [commute_iff_eq (x ^ n) (q.smeval y)] at ih\n      have hxq : x * q.smeval y = q.smeval y * x := by\n        refine (commute_iff_eq x (q.smeval y)).mp ?_\n        exact Commute.symm (smeval_commute_left R q (Commute.symm hc))\n      rw [pow_succ, ← mul_assoc, ← ih, mul_assoc, hxq, mul_assoc]\n\n"}
{"name":"Polynomial.aeval_eq_smeval","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝² : CommSemiring R\nS : Type u_2\ninst✝¹ : Semiring S\ninst✝ : Algebra R S\nx : S\np : Polynomial R\n⊢ Eq ((Polynomial.aeval x) p) (p.smeval x)","decl":"theorem aeval_eq_smeval {R : Type*} [CommSemiring R] {S : Type*} [Semiring S] [Algebra R S]\n    (x : S) (p : R[X]) : aeval x p = p.smeval x := by\n  rw [aeval_def, eval₂_def, Algebra.algebraMap_eq_smul_one', smeval_def]\n  simp only [Algebra.smul_mul_assoc, one_mul]\n  exact rfl\n\n"}
{"name":"Polynomial.aeval_coe_eq_smeval","module":"Mathlib.Algebra.Polynomial.Smeval","initialProofState":"R : Type u_1\ninst✝² : CommSemiring R\nS : Type u_2\ninst✝¹ : Semiring S\ninst✝ : Algebra R S\nx : S\n⊢ Eq ⇑(Polynomial.aeval x) fun p => p.smeval x","decl":"theorem aeval_coe_eq_smeval {R : Type*} [CommSemiring R] {S : Type*} [Semiring S] [Algebra R S]\n    (x : S) : ⇑(aeval x) = fun (p : R[X]) => p.smeval x := funext fun p => aeval_eq_smeval x p\n\n"}
