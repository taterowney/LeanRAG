{"name":"CategoryTheory.Functor.extendToSuccRestrictionLEIso_hom_app","module":"Mathlib.CategoryTheory.SmallObject.Iteration.ExtendToSucc","initialProofState":"C : Type u_1\ninst✝² : CategoryTheory.Category.{u_2, u_1} C\nJ : Type u\ninst✝¹ : LinearOrder J\ninst✝ : SuccOrder J\nj : J\nF : CategoryTheory.Functor (↑(Set.Iic j)) C\nX : ↑(Set.Iic j)\n⊢ Eq (F.extendToSuccRestrictionLEIso.hom.app X) (sorryAx (Unit → (X : ↑(Set.Iic j)) → CategoryTheory.Iso ((CategoryTheory.Functor.Iteration.restrictionLE (sorryAx (Unit → CategoryTheory.Functor (↑(Set.Iic (Order.succ j))) C) Bool.true Unit.unit) ⋯).obj X) (F.obj X)) Bool.true Unit.unit X).hom","decl":"/-- The isomorphism expressing that `extendToSucc hj F τ` extends `F`. -/\n@[simps!]\ndef extendToSuccRestrictionLEIso :\n    Iteration.restrictionLE (extendToSucc hj F τ) (Order.le_succ j) ≅ F :=\n  NatIso.ofComponents (extendToSuccObjIso hj F τ) (by\n    rintro ⟨i₁, h₁⟩ ⟨i₂, h₂⟩ f\n    apply extendToSuccObjIso_hom_naturality)\n\n"}
{"name":"CategoryTheory.Functor.extendToSuccRestrictionLEIso_inv_app","module":"Mathlib.CategoryTheory.SmallObject.Iteration.ExtendToSucc","initialProofState":"C : Type u_1\ninst✝² : CategoryTheory.Category.{u_2, u_1} C\nJ : Type u\ninst✝¹ : LinearOrder J\ninst✝ : SuccOrder J\nj : J\nF : CategoryTheory.Functor (↑(Set.Iic j)) C\nX : ↑(Set.Iic j)\n⊢ Eq (F.extendToSuccRestrictionLEIso.inv.app X) (sorryAx (Unit → (X : ↑(Set.Iic j)) → CategoryTheory.Iso ((CategoryTheory.Functor.Iteration.restrictionLE (sorryAx (Unit → CategoryTheory.Functor (↑(Set.Iic (Order.succ j))) C) Bool.true Unit.unit) ⋯).obj X) (F.obj X)) Bool.true Unit.unit X).inv","decl":"/-- The isomorphism expressing that `extendToSucc hj F τ` extends `F`. -/\n@[simps!]\ndef extendToSuccRestrictionLEIso :\n    Iteration.restrictionLE (extendToSucc hj F τ) (Order.le_succ j) ≅ F :=\n  NatIso.ofComponents (extendToSuccObjIso hj F τ) (by\n    rintro ⟨i₁, h₁⟩ ⟨i₂, h₂⟩ f\n    apply extendToSuccObjIso_hom_naturality)\n\n"}
