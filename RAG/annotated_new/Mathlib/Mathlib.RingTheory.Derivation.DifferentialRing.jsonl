{"name":"Differential.ext","module":"Mathlib.RingTheory.Derivation.DifferentialRing","initialProofState":"R : Type u_1\ninst✝ : CommRing R\nx y : Differential R\nderiv : Eq Differential.deriv Differential.deriv\n⊢ Eq x y","decl":"/-- A derivation from a ring to itself, as a typeclass. -/\n@[ext]\nclass Differential (R : Type*) [CommRing R] where\n  /-- The `Derivation` associated with the ring. -/\n  deriv : Derivation ℤ R R\n\n"}
{"name":"Differential.ext_iff","module":"Mathlib.RingTheory.Derivation.DifferentialRing","initialProofState":"R : Type u_1\ninst✝ : CommRing R\nx y : Differential R\n⊢ Iff (Eq x y) (Eq Differential.deriv Differential.deriv)","decl":"/-- A derivation from a ring to itself, as a typeclass. -/\n@[ext]\nclass Differential (R : Type*) [CommRing R] where\n  /-- The `Derivation` associated with the ring. -/\n  deriv : Derivation ℤ R R\n\n"}
{"name":"DifferentialAlgebra.deriv_algebraMap","module":"Mathlib.RingTheory.Derivation.DifferentialRing","initialProofState":"A : Type u_1\nB : Type u_2\ninst✝⁴ : CommRing A\ninst✝³ : CommRing B\ninst✝² : Algebra A B\ninst✝¹ : Differential A\ninst✝ : Differential B\nself : DifferentialAlgebra A B\na : A\n⊢ Eq ((algebraMap A B) a)′ ((algebraMap A B) a′)","decl":"/--\nA differential algebra is an `Algebra` where the derivation commutes with `algebraMap`.\n-/\nclass DifferentialAlgebra (A B : Type*) [CommRing A] [CommRing B] [Algebra A B]\n    [Differential A] [Differential B] : Prop where\n  deriv_algebraMap : ∀ a : A, (algebraMap A B a)′ = algebraMap A B a′\n\n"}
{"name":"algebraMap.coe_deriv","module":"Mathlib.RingTheory.Derivation.DifferentialRing","initialProofState":"A : Type u_1\nB : Type u_2\ninst✝⁵ : CommRing A\ninst✝⁴ : CommRing B\ninst✝³ : Algebra A B\ninst✝² : Differential A\ninst✝¹ : Differential B\ninst✝ : DifferentialAlgebra A B\na : A\n⊢ Eq (↑a′) (↑a)′","decl":"@[norm_cast]\nlemma algebraMap.coe_deriv {A : Type*} {B : Type*} [CommRing A] [CommRing B] [Algebra A B]\n    [Differential A] [Differential B] [DifferentialAlgebra A B] (a : A) :\n    (a′ : A) = (a : B)′ :=\n  (DifferentialAlgebra.deriv_algebraMap _).symm\n\n"}
{"name":"Differential.ContainConstants.mem_range_of_deriv_eq_zero","module":"Mathlib.RingTheory.Derivation.DifferentialRing","initialProofState":"A : Type u_1\nB : Type u_2\ninst✝³ : CommRing A\ninst✝² : CommRing B\ninst✝¹ : Algebra A B\ninst✝ : Differential B\nself : Differential.ContainConstants A B\nx : B\nh : Eq x′ 0\n⊢ Membership.mem (algebraMap A B).range x","decl":"/--\nA differential ring `A` and an algebra over it `B` share constants if all\nconstants in B are in the range of `algberaMap A B`.\n-/\nclass Differential.ContainConstants (A B : Type*) [CommRing A] [CommRing B]\n    [Algebra A B] [Differential B] : Prop where\n  /-- If the derivative of x is 0, then it's in the range of `algberaMap A B`. -/\n  protected mem_range_of_deriv_eq_zero {x : B} (h : x′ = 0) : x ∈ (algebraMap A B).range\n\n"}
{"name":"mem_range_of_deriv_eq_zero","module":"Mathlib.RingTheory.Derivation.DifferentialRing","initialProofState":"A : Type u_1\nB : Type u_2\ninst✝⁴ : CommRing A\ninst✝³ : CommRing B\ninst✝² : Algebra A B\ninst✝¹ : Differential B\ninst✝ : Differential.ContainConstants A B\nx : B\nh : Eq x′ 0\n⊢ Membership.mem (algebraMap A B).range x","decl":"lemma mem_range_of_deriv_eq_zero (A : Type*) {B : Type*} [CommRing A] [CommRing B] [Algebra A B]\n    [Differential B] [Differential.ContainConstants A B] {x : B} (h : x′ = 0) :\n    x ∈ (algebraMap A B).range :=\n  Differential.ContainConstants.mem_range_of_deriv_eq_zero h\n\n"}
{"name":"instDifferentialAlgebra","module":"Mathlib.RingTheory.Derivation.DifferentialRing","initialProofState":"A : Type u_1\ninst✝¹ : CommRing A\ninst✝ : Differential A\n⊢ DifferentialAlgebra A A","decl":"instance (A : Type*) [CommRing A] [Differential A] : DifferentialAlgebra A A where\n  deriv_algebraMap _ := rfl\n\n"}
{"name":"instContainConstants","module":"Mathlib.RingTheory.Derivation.DifferentialRing","initialProofState":"A : Type u_1\ninst✝¹ : CommRing A\ninst✝ : Differential A\n⊢ Differential.ContainConstants A A","decl":"instance (A : Type*) [CommRing A] [Differential A] : Differential.ContainConstants A A where\n  mem_range_of_deriv_eq_zero {x} _ := ⟨x, rfl⟩\n\n"}
{"name":"DifferentialAlgebra.equiv","module":"Mathlib.RingTheory.Derivation.DifferentialRing","initialProofState":"A : Type u_1\ninst✝⁷ : CommRing A\ninst✝⁶ : Differential A\nR : Type u_2\nR₂ : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing R₂\ninst✝³ : Differential R₂\ninst✝² : Algebra A R\ninst✝¹ : Algebra A R₂\ninst✝ : DifferentialAlgebra A R₂\nh : AlgEquiv A R R₂\n⊢ DifferentialAlgebra A R","decl":"/--\nTransfer a `DifferentialAlgebra` instance across a `AlgEquiv`.\n-/\nlemma DifferentialAlgebra.equiv {A : Type*} [CommRing A] [Differential A]\n    {R R₂ : Type*} [CommRing R] [CommRing R₂] [Differential R₂] [Algebra A R]\n    [Algebra A R₂] [DifferentialAlgebra A R₂] (h : R ≃ₐ[A] R₂) :\n    letI := Differential.equiv h.toRingEquiv\n    DifferentialAlgebra A R :=\n  letI := Differential.equiv h.toRingEquiv\n  ⟨fun a ↦ by\n    change (LinearMap.comp ..) _ = _\n    simp only [AlgEquiv.toRingEquiv_eq_coe, RingHom.toAddMonoidHom_eq_coe,\n      RingEquiv.toRingHom_eq_coe, AlgEquiv.toRingEquiv_toRingHom, LinearMap.coe_comp,\n      AddMonoidHom.coe_toIntLinearMap, AddMonoidHom.coe_coe, RingHom.coe_coe, Derivation.coeFn_coe,\n      Function.comp_apply, AlgEquiv.commutes, deriv_algebraMap]\n    apply h.symm.commutes⟩\n"}
