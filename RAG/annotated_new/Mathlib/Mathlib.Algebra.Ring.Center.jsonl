{"name":"Set.natCast_mem_center","module":"Mathlib.Algebra.Ring.Center","initialProofState":"M : Type u_1\ninst✝ : NonAssocSemiring M\nn : Nat\n⊢ Membership.mem (Set.center M) ↑n","decl":"@[simp]\ntheorem natCast_mem_center [NonAssocSemiring M] (n : ℕ) : (n : M) ∈ Set.center M where\n  comm _ := by rw [Nat.commute_cast]\n  left_assoc _ _ := by\n    induction n with\n    | zero => rw [Nat.cast_zero, zero_mul, zero_mul, zero_mul]\n    | succ n ihn => rw [Nat.cast_succ, add_mul, one_mul, ihn, add_mul, add_mul, one_mul]\n  mid_assoc _ _ := by\n    induction n with\n    | zero => rw [Nat.cast_zero, zero_mul, mul_zero, zero_mul]\n    | succ n ihn => rw [Nat.cast_succ, add_mul, mul_add, add_mul, ihn, mul_add, one_mul, mul_one]\n  right_assoc _ _ := by\n    induction n with\n    | zero => rw [Nat.cast_zero, mul_zero, mul_zero, mul_zero]\n    | succ n ihn => rw [Nat.cast_succ, mul_add, ihn, mul_add, mul_add, mul_one, mul_one]\n\n"}
{"name":"Set.ofNat_mem_center","module":"Mathlib.Algebra.Ring.Center","initialProofState":"M : Type u_1\ninst✝¹ : NonAssocSemiring M\nn : Nat\ninst✝ : n.AtLeastTwo\n⊢ Membership.mem (Set.center M) (OfNat.ofNat n)","decl":"@[simp]\ntheorem ofNat_mem_center [NonAssocSemiring M] (n : ℕ) [n.AtLeastTwo] :\n    ofNat(n) ∈ Set.center M :=\n  natCast_mem_center M n\n\n"}
{"name":"Set.intCast_mem_center","module":"Mathlib.Algebra.Ring.Center","initialProofState":"M : Type u_1\ninst✝ : NonAssocRing M\nn : Int\n⊢ Membership.mem (Set.center M) ↑n","decl":"@[simp]\ntheorem intCast_mem_center [NonAssocRing M] (n : ℤ) : (n : M) ∈ Set.center M where\n  comm _ := by rw [Int.commute_cast]\n  left_assoc _ _ := match n with\n    | (n : ℕ) => by rw [Int.cast_natCast, (natCast_mem_center _ n).left_assoc _ _]\n    | Int.negSucc n => by\n      rw [Int.cast_negSucc, Nat.cast_add, Nat.cast_one, neg_add_rev, add_mul, add_mul, add_mul,\n        neg_mul, one_mul, neg_mul 1, one_mul, ← neg_mul, add_right_inj, neg_mul,\n        (natCast_mem_center _ n).left_assoc _ _, neg_mul, neg_mul]\n  mid_assoc _ _ := match n with\n    | (n : ℕ) => by rw [Int.cast_natCast, (natCast_mem_center _ n).mid_assoc _ _]\n    | Int.negSucc n => by\n        simp only [Int.cast_negSucc, Nat.cast_add, Nat.cast_one, neg_add_rev]\n        rw [add_mul, mul_add, add_mul, mul_add, neg_mul, one_mul]\n        rw [neg_mul, mul_neg, mul_one, mul_neg, neg_mul, neg_mul]\n        rw [(natCast_mem_center _ n).mid_assoc _ _]\n        simp only [mul_neg]\n  right_assoc _ _ := match n with\n    | (n : ℕ) => by rw [Int.cast_natCast, (natCast_mem_center _ n).right_assoc _ _]\n    | Int.negSucc n => by\n        simp only [Int.cast_negSucc, Nat.cast_add, Nat.cast_one, neg_add_rev]\n        rw [mul_add, mul_add, mul_add, mul_neg, mul_one, mul_neg, mul_neg, mul_one, mul_neg,\n          add_right_inj, (natCast_mem_center _ n).right_assoc _ _, mul_neg, mul_neg]\n\n"}
{"name":"Set.add_mem_center","module":"Mathlib.Algebra.Ring.Center","initialProofState":"M : Type u_1\ninst✝ : Distrib M\na b : M\nha : Membership.mem (Set.center M) a\nhb : Membership.mem (Set.center M) b\n⊢ Membership.mem (Set.center M) (HAdd.hAdd a b)","decl":"@[simp]\ntheorem add_mem_center [Distrib M] {a b : M} (ha : a ∈ Set.center M) (hb : b ∈ Set.center M) :\n    a + b ∈ Set.center M  where\n  comm _ := by rw [add_mul, mul_add, ha.comm, hb.comm]\n  left_assoc _ _ := by rw [add_mul, ha.left_assoc, hb.left_assoc, ← add_mul, ← add_mul]\n  mid_assoc _ _ := by rw [mul_add, add_mul, ha.mid_assoc, hb.mid_assoc, ← mul_add, ← add_mul]\n  right_assoc _ _ := by rw [mul_add, ha.right_assoc, hb.right_assoc, ← mul_add, ← mul_add]\n\n"}
{"name":"Set.neg_mem_center","module":"Mathlib.Algebra.Ring.Center","initialProofState":"M : Type u_1\ninst✝ : NonUnitalNonAssocRing M\na : M\nha : Membership.mem (Set.center M) a\n⊢ Membership.mem (Set.center M) (Neg.neg a)","decl":"@[simp]\ntheorem neg_mem_center [NonUnitalNonAssocRing M] {a : M} (ha : a ∈ Set.center M) :\n    -a ∈ Set.center M where\n  comm _ := by rw [← neg_mul_comm, ← ha.comm, neg_mul_comm]\n  left_assoc _ _ := by rw [neg_mul, ha.left_assoc, neg_mul, neg_mul]\n  mid_assoc _ _ := by rw [← neg_mul_comm, ha.mid_assoc, neg_mul_comm, neg_mul]\n  right_assoc _ _ := by rw [mul_neg, ha.right_assoc, mul_neg, mul_neg]\n\n"}
