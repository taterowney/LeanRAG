{"name":"Pi.star_apply","module":"Mathlib.Algebra.Star.Pi","initialProofState":"I : Type u\nf : I → Type v\ninst✝ : (i : I) → Star (f i)\nx : (i : I) → f i\ni : I\n⊢ Eq (Star.star x i) (Star.star (x i))","decl":"@[simp]\ntheorem star_apply [∀ i, Star (f i)] (x : ∀ i, f i) (i : I) : star x i = star (x i) :=\n  rfl\n\n"}
{"name":"Pi.star_def","module":"Mathlib.Algebra.Star.Pi","initialProofState":"I : Type u\nf : I → Type v\ninst✝ : (i : I) → Star (f i)\nx : (i : I) → f i\n⊢ Eq (Star.star x) fun i => Star.star (x i)","decl":"theorem star_def [∀ i, Star (f i)] (x : ∀ i, f i) : star x = fun i => star (x i) :=\n  rfl\n\n"}
{"name":"Pi.instTrivialStarForall","module":"Mathlib.Algebra.Star.Pi","initialProofState":"I : Type u\nf : I → Type v\ninst✝¹ : (i : I) → Star (f i)\ninst✝ : ∀ (i : I), TrivialStar (f i)\n⊢ TrivialStar ((i : I) → f i)","decl":"instance [∀ i, Star (f i)] [∀ i, TrivialStar (f i)] : TrivialStar (∀ i, f i) where\n  star_trivial _ := funext fun _ => star_trivial _\n\n"}
{"name":"Pi.instStarModuleForall","module":"Mathlib.Algebra.Star.Pi","initialProofState":"I : Type u\nf : I → Type v\nR : Type w\ninst✝³ : (i : I) → SMul R (f i)\ninst✝² : Star R\ninst✝¹ : (i : I) → Star (f i)\ninst✝ : ∀ (i : I), StarModule R (f i)\n⊢ StarModule R ((i : I) → f i)","decl":"instance {R : Type w} [∀ i, SMul R (f i)] [Star R] [∀ i, Star (f i)]\n    [∀ i, StarModule R (f i)] : StarModule R (∀ i, f i) where\n  star_smul r x := funext fun i => star_smul r (x i)\n\n"}
{"name":"Pi.single_star","module":"Mathlib.Algebra.Star.Pi","initialProofState":"I : Type u\nf : I → Type v\ninst✝² : (i : I) → AddMonoid (f i)\ninst✝¹ : (i : I) → StarAddMonoid (f i)\ninst✝ : DecidableEq I\ni : I\na : f i\n⊢ Eq (Pi.single i (Star.star a)) (Star.star (Pi.single i a))","decl":"theorem single_star [∀ i, AddMonoid (f i)] [∀ i, StarAddMonoid (f i)] [DecidableEq I] (i : I)\n    (a : f i) : Pi.single i (star a) = star (Pi.single i a) :=\n  single_op (fun i => @star (f i) _) (fun _ => star_zero _) i a\n\n"}
{"name":"Pi.conj_apply","module":"Mathlib.Algebra.Star.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : (i : ι) → CommSemiring (α i)\ninst✝ : (i : ι) → StarRing (α i)\nf : (i : ι) → α i\ni : ι\n⊢ Eq ((starRingEnd ((i : ι) → α i)) f i) ((starRingEnd (α i)) (f i))","decl":"@[simp]\nlemma conj_apply {ι : Type*} {α : ι → Type*} [∀ i, CommSemiring (α i)] [∀ i, StarRing (α i)]\n    (f : ∀ i, α i) (i : ι) : conj f i = conj (f i) := rfl\n\n"}
{"name":"Function.update_star","module":"Mathlib.Algebra.Star.Pi","initialProofState":"I : Type u\nf : I → Type v\ninst✝¹ : (i : I) → Star (f i)\ninst✝ : DecidableEq I\nh : (i : I) → f i\ni : I\na : f i\n⊢ Eq (Function.update (Star.star h) i (Star.star a)) (Star.star (Function.update h i a))","decl":"theorem update_star [∀ i, Star (f i)] [DecidableEq I] (h : ∀ i : I, f i) (i : I) (a : f i) :\n    Function.update (star h) i (star a) = star (Function.update h i a) :=\n  funext fun j => (apply_update (fun _ => star) h i a j).symm\n\n"}
{"name":"Function.star_sum_elim","module":"Mathlib.Algebra.Star.Pi","initialProofState":"I : Type u_1\nJ : Type u_2\nα : Type u_3\nx : I → α\ny : J → α\ninst✝ : Star α\n⊢ Eq (Star.star (Sum.elim x y)) (Sum.elim (Star.star x) (Star.star y))","decl":"theorem star_sum_elim {I J α : Type*} (x : I → α) (y : J → α) [Star α] :\n    star (Sum.elim x y) = Sum.elim (star x) (star y) := by\n  ext x; cases x <;> simp only [Pi.star_apply, Sum.elim_inl, Sum.elim_inr]\n\n"}
