{"name":"EReal.exp_bot","module":"Mathlib.Analysis.SpecialFunctions.Log.ERealExp","initialProofState":"⊢ Eq Bot.bot.exp 0","decl":"@[simp] lemma exp_bot : exp ⊥ = 0 := rfl\n"}
{"name":"EReal.exp_zero","module":"Mathlib.Analysis.SpecialFunctions.Log.ERealExp","initialProofState":"⊢ Eq (EReal.exp 0) 1","decl":"@[simp] lemma exp_zero : exp 0 = 1 := by simp [exp]\n"}
{"name":"EReal.exp_top","module":"Mathlib.Analysis.SpecialFunctions.Log.ERealExp","initialProofState":"⊢ Eq Top.top.exp Top.top","decl":"@[simp] lemma exp_top : exp ⊤ = ∞ := rfl\n"}
{"name":"EReal.exp_coe","module":"Mathlib.Analysis.SpecialFunctions.Log.ERealExp","initialProofState":"x : Real\n⊢ Eq (↑x).exp (ENNReal.ofReal (Real.exp x))","decl":"@[simp] lemma exp_coe (x : ℝ) : exp x = ENNReal.ofReal (Real.exp x) := rfl\n\n"}
{"name":"EReal.exp_eq_zero_iff","module":"Mathlib.Analysis.SpecialFunctions.Log.ERealExp","initialProofState":"x : EReal\n⊢ Iff (Eq x.exp 0) (Eq x Bot.bot)","decl":"@[simp] lemma exp_eq_zero_iff {x : EReal} : exp x = 0 ↔ x = ⊥ := by\n  induction x <;> simp [Real.exp_pos]\n\n"}
{"name":"EReal.exp_eq_top_iff","module":"Mathlib.Analysis.SpecialFunctions.Log.ERealExp","initialProofState":"x : EReal\n⊢ Iff (Eq x.exp Top.top) (Eq x Top.top)","decl":"@[simp] lemma exp_eq_top_iff {x : EReal} : exp x = ∞ ↔ x = ⊤ := by\n  induction x <;> simp\n\n"}
{"name":"EReal.exp_strictMono","module":"Mathlib.Analysis.SpecialFunctions.Log.ERealExp","initialProofState":"⊢ StrictMono EReal.exp","decl":"lemma exp_strictMono : StrictMono exp := by\n  intro x y h\n  induction x\n  · rw [exp_bot, pos_iff_ne_zero, ne_eq, exp_eq_zero_iff]\n    exact h.ne'\n  · induction y\n    · simp at h\n    · simp_rw [exp_coe]\n      exact ENNReal.ofReal_lt_ofReal_iff'.mpr ⟨Real.exp_lt_exp_of_lt (mod_cast h), Real.exp_pos _⟩\n    · simp\n  · exact (not_top_lt h).elim\n\n"}
{"name":"EReal.exp_monotone","module":"Mathlib.Analysis.SpecialFunctions.Log.ERealExp","initialProofState":"⊢ Monotone EReal.exp","decl":"lemma exp_monotone : Monotone exp := exp_strictMono.monotone\n\n"}
{"name":"EReal.exp_lt_exp_iff","module":"Mathlib.Analysis.SpecialFunctions.Log.ERealExp","initialProofState":"a b : EReal\n⊢ Iff (LT.lt a.exp b.exp) (LT.lt a b)","decl":"@[simp] lemma exp_lt_exp_iff {a b : EReal} : exp a < exp b ↔ a < b := exp_strictMono.lt_iff_lt\n\n"}
{"name":"EReal.zero_lt_exp_iff","module":"Mathlib.Analysis.SpecialFunctions.Log.ERealExp","initialProofState":"a : EReal\n⊢ Iff (LT.lt 0 a.exp) (LT.lt Bot.bot a)","decl":"@[simp] lemma zero_lt_exp_iff {a : EReal} : 0 < exp a ↔ ⊥ < a := exp_bot ▸ @exp_lt_exp_iff ⊥ a\n\n"}
{"name":"EReal.exp_lt_top_iff","module":"Mathlib.Analysis.SpecialFunctions.Log.ERealExp","initialProofState":"a : EReal\n⊢ Iff (LT.lt a.exp Top.top) (LT.lt a Top.top)","decl":"@[simp] lemma exp_lt_top_iff {a : EReal} : exp a < ⊤ ↔ a < ⊤ := exp_top ▸ @exp_lt_exp_iff a ⊤\n\n"}
{"name":"EReal.exp_lt_one_iff","module":"Mathlib.Analysis.SpecialFunctions.Log.ERealExp","initialProofState":"a : EReal\n⊢ Iff (LT.lt a.exp 1) (LT.lt a 0)","decl":"@[simp] lemma exp_lt_one_iff {a : EReal} : exp a < 1 ↔ a < 0 := exp_zero ▸ @exp_lt_exp_iff a 0\n\n"}
{"name":"EReal.one_lt_exp_iff","module":"Mathlib.Analysis.SpecialFunctions.Log.ERealExp","initialProofState":"a : EReal\n⊢ Iff (LT.lt 1 a.exp) (LT.lt 0 a)","decl":"@[simp] lemma one_lt_exp_iff {a : EReal} : 1 < exp a ↔ 0 < a := exp_zero ▸ @exp_lt_exp_iff 0 a\n\n"}
{"name":"EReal.exp_le_exp_iff","module":"Mathlib.Analysis.SpecialFunctions.Log.ERealExp","initialProofState":"a b : EReal\n⊢ Iff (LE.le a.exp b.exp) (LE.le a b)","decl":"@[simp] lemma exp_le_exp_iff {a b : EReal} : exp a ≤ exp b ↔ a ≤ b := exp_strictMono.le_iff_le\n\n"}
{"name":"EReal.exp_le_one_iff","module":"Mathlib.Analysis.SpecialFunctions.Log.ERealExp","initialProofState":"a : EReal\n⊢ Iff (LE.le a.exp 1) (LE.le a 0)","decl":"@[simp] lemma exp_le_one_iff {a : EReal} : exp a ≤ 1 ↔ a ≤ 0 := exp_zero ▸ @exp_le_exp_iff a 0\n\n"}
{"name":"EReal.one_le_exp_iff","module":"Mathlib.Analysis.SpecialFunctions.Log.ERealExp","initialProofState":"a : EReal\n⊢ Iff (LE.le 1 a.exp) (LE.le 0 a)","decl":"@[simp] lemma one_le_exp_iff {a : EReal} : 1 ≤ exp a ↔ 0 ≤ a := exp_zero ▸ @exp_le_exp_iff 0 a\n\n"}
{"name":"EReal.exp_neg","module":"Mathlib.Analysis.SpecialFunctions.Log.ERealExp","initialProofState":"x : EReal\n⊢ Eq (Neg.neg x).exp (Inv.inv x.exp)","decl":"lemma exp_neg (x : EReal) : exp (-x) = (exp x)⁻¹ := by\n  induction x\n  · simp\n  · rw [exp_coe, ← EReal.coe_neg, exp_coe, ← ENNReal.ofReal_inv_of_pos (Real.exp_pos _),\n      Real.exp_neg]\n  · simp\n\n"}
{"name":"EReal.exp_add","module":"Mathlib.Analysis.SpecialFunctions.Log.ERealExp","initialProofState":"x y : EReal\n⊢ Eq (HAdd.hAdd x y).exp (HMul.hMul x.exp y.exp)","decl":"lemma exp_add (x y : EReal) : exp (x + y) = exp x * exp y := by\n  induction x\n  · simp\n  · induction y\n    · simp\n    · simp only [← EReal.coe_add, exp_coe]\n      rw [← ENNReal.ofReal_mul (Real.exp_nonneg _), Real.exp_add]\n    · simp only [EReal.coe_add_top, exp_top, exp_coe]\n      rw [ENNReal.mul_top]\n      simp [Real.exp_pos]\n  · induction y\n    · simp\n    · simp only [EReal.top_add_coe, exp_top, exp_coe]\n      rw [ENNReal.top_mul]\n      simp [Real.exp_pos]\n    · simp\n\n"}
