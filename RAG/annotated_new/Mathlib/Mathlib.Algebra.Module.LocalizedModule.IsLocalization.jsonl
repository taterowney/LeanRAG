{"name":"isLocalizedModule_iff_isLocalization","module":"Mathlib.Algebra.Module.LocalizedModule.IsLocalization","initialProofState":"R : Type u_1\ninst✝⁶ : CommSemiring R\nS : Submonoid R\nA : Type u_2\nAₛ : Type u_3\ninst✝⁵ : CommSemiring A\ninst✝⁴ : Algebra R A\ninst✝³ : CommSemiring Aₛ\ninst✝² : Algebra A Aₛ\ninst✝¹ : Algebra R Aₛ\ninst✝ : IsScalarTower R A Aₛ\n⊢ Iff (IsLocalizedModule S (IsScalarTower.toAlgHom R A Aₛ).toLinearMap) (IsLocalization (Algebra.algebraMapSubmonoid A S) Aₛ)","decl":"variable {S} in\ntheorem isLocalizedModule_iff_isLocalization {A Aₛ} [CommSemiring A] [Algebra R A] [CommSemiring Aₛ]\n    [Algebra A Aₛ] [Algebra R Aₛ] [IsScalarTower R A Aₛ] :\n    IsLocalizedModule S (IsScalarTower.toAlgHom R A Aₛ).toLinearMap ↔\n      IsLocalization (Algebra.algebraMapSubmonoid A S) Aₛ := by\n  rw [isLocalizedModule_iff, isLocalization_iff]\n  refine and_congr ?_ (and_congr (forall_congr' fun _ ↦ ?_) (forall₂_congr fun _ _ ↦ ?_))\n  · simp_rw [← (Algebra.lmul R Aₛ).commutes, Algebra.lmul_isUnit_iff, Subtype.forall,\n      Algebra.algebraMapSubmonoid, ← SetLike.mem_coe, Submonoid.coe_map,\n      Set.forall_mem_image, ← IsScalarTower.algebraMap_apply]\n  · simp_rw [Prod.exists, Subtype.exists, Algebra.algebraMapSubmonoid]\n    simp [← IsScalarTower.algebraMap_apply, Submonoid.mk_smul, Algebra.smul_def, mul_comm]\n  · congr!; simp_rw [Subtype.exists, Algebra.algebraMapSubmonoid]; simp [Algebra.smul_def]\n\n"}
{"name":"instIsLocalizedModuleToLinearMapToAlgHomOfIsLocalizationAlgebraMapSubmonoid","module":"Mathlib.Algebra.Module.LocalizedModule.IsLocalization","initialProofState":"R : Type u_1\ninst✝⁶ : CommSemiring R\nS : Submonoid R\nA : Type u_2\nAₛ : Type u_3\ninst✝⁵ : CommSemiring A\ninst✝⁴ : Algebra R A\ninst✝³ : CommSemiring Aₛ\ninst✝² : Algebra A Aₛ\ninst✝¹ : Algebra R Aₛ\ninst✝ : IsScalarTower R A Aₛ\nh : IsLocalization (Algebra.algebraMapSubmonoid A S) Aₛ\n⊢ IsLocalizedModule S (IsScalarTower.toAlgHom R A Aₛ).toLinearMap","decl":"instance {A Aₛ} [CommSemiring A] [Algebra R A][CommSemiring Aₛ] [Algebra A Aₛ] [Algebra R Aₛ]\n    [IsScalarTower R A Aₛ] [h : IsLocalization (Algebra.algebraMapSubmonoid A S) Aₛ] :\n    IsLocalizedModule S (IsScalarTower.toAlgHom R A Aₛ).toLinearMap :=\n  isLocalizedModule_iff_isLocalization.mpr h\n\n"}
{"name":"isLocalizedModule_iff_isLocalization'","module":"Mathlib.Algebra.Module.LocalizedModule.IsLocalization","initialProofState":"R : Type u_1\ninst✝² : CommSemiring R\nS : Submonoid R\nR' : Type u_2\ninst✝¹ : CommSemiring R'\ninst✝ : Algebra R R'\n⊢ Iff (IsLocalizedModule S (Algebra.linearMap R R')) (IsLocalization S R')","decl":"lemma isLocalizedModule_iff_isLocalization' (R') [CommSemiring R'] [Algebra R R'] :\n    IsLocalizedModule S (Algebra.linearMap R R') ↔ IsLocalization S R' := by\n  convert isLocalizedModule_iff_isLocalization (S := S) (A := R) (Aₛ := R')\n  exact (Submonoid.map_id S).symm\n\n"}
{"name":"instIsLocalizedModuleLinearMapOfIsLocalization","module":"Mathlib.Algebra.Module.LocalizedModule.IsLocalization","initialProofState":"R : Type u_1\ninst✝³ : CommSemiring R\nS : Submonoid R\nA : Type u_2\ninst✝² : CommSemiring A\ninst✝¹ : Algebra R A\ninst✝ : IsLocalization S A\n⊢ IsLocalizedModule S (Algebra.linearMap R A)","decl":"instance {A} [CommSemiring A] [Algebra R A] [IsLocalization S A] :\n    IsLocalizedModule S (Algebra.linearMap R A) :=\n  (isLocalizedModule_iff_isLocalization' S _).mpr inferInstance\n\n"}
