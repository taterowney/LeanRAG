{"name":"ProbabilityTheory.Kernel.densityProcess_def","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nn : Nat\na : α\ns : Set β\n⊢ Eq (fun t => κ.densityProcess ν n a t s) fun t => (HDiv.hDiv ((κ a) (SProd.sprod (MeasurableSpace.countablePartitionSet n t) s)) ((ν a) (MeasurableSpace.countablePartitionSet n t))).toReal","decl":"lemma densityProcess_def (κ : Kernel α (γ × β)) (ν : Kernel α γ) (n : ℕ) (a : α) (s : Set β) :\n    (fun t ↦ densityProcess κ ν n a t s)\n      = fun t ↦ (κ a (countablePartitionSet n t ×ˢ s) / ν a (countablePartitionSet n t)).toReal :=\n  rfl\n\n"}
{"name":"ProbabilityTheory.Kernel.measurable_densityProcess_countableFiltration_aux","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nn : Nat\ns : Set β\nhs : MeasurableSet s\n⊢ Measurable fun p => HDiv.hDiv ((κ p.1) (SProd.sprod (MeasurableSpace.countablePartitionSet n p.2) s)) ((ν p.1) (MeasurableSpace.countablePartitionSet n p.2))","decl":"lemma measurable_densityProcess_countableFiltration_aux (κ : Kernel α (γ × β)) (ν : Kernel α γ)\n    (n : ℕ) {s : Set β} (hs : MeasurableSet s) :\n    Measurable[mα.prod (countableFiltration γ n)] (fun (p : α × γ) ↦\n      κ p.1 (countablePartitionSet n p.2 ×ˢ s) / ν p.1 (countablePartitionSet n p.2)) := by\n  change Measurable[mα.prod (countableFiltration γ n)]\n      ((fun (p : α × countablePartition γ n) ↦ κ p.1 (↑p.2 ×ˢ s) / ν p.1 p.2)\n        ∘ (fun (p : α × γ) ↦ (p.1, ⟨countablePartitionSet n p.2, countablePartitionSet_mem n p.2⟩)))\n  have h1 : @Measurable _ _ (mα.prod ⊤) _\n      (fun p : α × countablePartition γ n ↦ κ p.1 (↑p.2 ×ˢ s) / ν p.1 p.2) := by\n    refine Measurable.div ?_ ?_\n    · refine measurable_from_prod_countable (fun t ↦ ?_)\n      exact Kernel.measurable_coe _ ((measurableSet_countablePartition _ t.prop).prod hs)\n    · refine measurable_from_prod_countable ?_\n      rintro ⟨t, ht⟩\n      exact Kernel.measurable_coe _ (measurableSet_countablePartition _ ht)\n  refine h1.comp (measurable_fst.prod_mk ?_)\n  change @Measurable (α × γ) (countablePartition γ n) (mα.prod (countableFiltration γ n)) ⊤\n    ((fun c ↦ ⟨countablePartitionSet n c, countablePartitionSet_mem n c⟩) ∘ (fun p : α × γ ↦ p.2))\n  exact (measurable_countablePartitionSet_subtype n ⊤).comp measurable_snd\n\n"}
{"name":"ProbabilityTheory.Kernel.measurable_densityProcess_aux","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nn : Nat\ns : Set β\nhs : MeasurableSet s\n⊢ Measurable fun p => HDiv.hDiv ((κ p.1) (SProd.sprod (MeasurableSpace.countablePartitionSet n p.2) s)) ((ν p.1) (MeasurableSpace.countablePartitionSet n p.2))","decl":"lemma measurable_densityProcess_aux (κ : Kernel α (γ × β)) (ν : Kernel α γ) (n : ℕ)\n    {s : Set β} (hs : MeasurableSet s) :\n    Measurable (fun (p : α × γ) ↦\n      κ p.1 (countablePartitionSet n p.2 ×ˢ s) / ν p.1 (countablePartitionSet n p.2)) := by\n  refine Measurable.mono (measurable_densityProcess_countableFiltration_aux κ ν n hs) ?_ le_rfl\n  exact sup_le_sup le_rfl (comap_mono ((countableFiltration γ).le _))\n\n"}
{"name":"ProbabilityTheory.Kernel.measurable_densityProcess","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nn : Nat\ns : Set β\nhs : MeasurableSet s\n⊢ Measurable fun p => κ.densityProcess ν n p.1 p.2 s","decl":"lemma measurable_densityProcess (κ : Kernel α (γ × β)) (ν : Kernel α γ) (n : ℕ)\n    {s : Set β} (hs : MeasurableSet s) :\n    Measurable (fun (p : α × γ) ↦ densityProcess κ ν n p.1 p.2 s) :=\n  (measurable_densityProcess_aux κ ν n hs).ennreal_toReal\n\n-- The following two lemmas also work without the `( :)`, but they are slow.\n"}
{"name":"ProbabilityTheory.Kernel.measurable_densityProcess_left","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nn : Nat\nx : γ\ns : Set β\nhs : MeasurableSet s\n⊢ Measurable fun a => κ.densityProcess ν n a x s","decl":"lemma measurable_densityProcess_left (κ : Kernel α (γ × β)) (ν : Kernel α γ) (n : ℕ)\n    (x : γ) {s : Set β} (hs : MeasurableSet s) :\n    Measurable (fun a ↦ densityProcess κ ν n a x s) :=\n  ((measurable_densityProcess κ ν n hs).comp (measurable_id.prod_mk measurable_const):)\n\n"}
{"name":"ProbabilityTheory.Kernel.measurable_densityProcess_right","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nn : Nat\ns : Set β\na : α\nhs : MeasurableSet s\n⊢ Measurable fun x => κ.densityProcess ν n a x s","decl":"lemma measurable_densityProcess_right (κ : Kernel α (γ × β)) (ν : Kernel α γ) (n : ℕ)\n    {s : Set β} (a : α) (hs : MeasurableSet s) :\n    Measurable (fun x ↦ densityProcess κ ν n a x s) :=\n  ((measurable_densityProcess κ ν n hs).comp (measurable_const.prod_mk measurable_id):)\n\n"}
{"name":"ProbabilityTheory.Kernel.measurable_countableFiltration_densityProcess","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nn : Nat\na : α\ns : Set β\nhs : MeasurableSet s\n⊢ Measurable fun x => κ.densityProcess ν n a x s","decl":"lemma measurable_countableFiltration_densityProcess (κ : Kernel α (γ × β)) (ν : Kernel α γ) (n : ℕ)\n    (a : α) {s : Set β} (hs : MeasurableSet s) :\n    Measurable[countableFiltration γ n] (fun x ↦ densityProcess κ ν n a x s) := by\n  refine @Measurable.ennreal_toReal _ (countableFiltration γ n) _ ?_\n  exact (measurable_densityProcess_countableFiltration_aux κ ν n hs).comp measurable_prod_mk_left\n\n"}
{"name":"ProbabilityTheory.Kernel.stronglyMeasurable_countableFiltration_densityProcess","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nn : Nat\na : α\ns : Set β\nhs : MeasurableSet s\n⊢ MeasureTheory.StronglyMeasurable fun x => κ.densityProcess ν n a x s","decl":"lemma stronglyMeasurable_countableFiltration_densityProcess (κ : Kernel α (γ × β)) (ν : Kernel α γ)\n    (n : ℕ) (a : α) {s : Set β} (hs : MeasurableSet s) :\n    StronglyMeasurable[countableFiltration γ n] (fun x ↦ densityProcess κ ν n a x s) :=\n  (measurable_countableFiltration_densityProcess κ ν n a hs).stronglyMeasurable\n\n"}
{"name":"ProbabilityTheory.Kernel.adapted_densityProcess","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\na : α\ns : Set β\nhs : MeasurableSet s\n⊢ MeasureTheory.Adapted (ProbabilityTheory.countableFiltration γ) fun n x => κ.densityProcess ν n a x s","decl":"lemma adapted_densityProcess (κ : Kernel α (γ × β)) (ν : Kernel α γ) (a : α)\n    {s : Set β} (hs : MeasurableSet s) :\n    Adapted (countableFiltration γ) (fun n x ↦ densityProcess κ ν n a x s) :=\n  fun n ↦ stronglyMeasurable_countableFiltration_densityProcess κ ν n a hs\n\n"}
{"name":"ProbabilityTheory.Kernel.densityProcess_nonneg","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nn : Nat\na : α\nx : γ\ns : Set β\n⊢ LE.le 0 (κ.densityProcess ν n a x s)","decl":"lemma densityProcess_nonneg (κ : Kernel α (γ × β)) (ν : Kernel α γ) (n : ℕ)\n    (a : α) (x : γ) (s : Set β) :\n    0 ≤ densityProcess κ ν n a x s :=\n  ENNReal.toReal_nonneg\n\n"}
{"name":"ProbabilityTheory.Kernel.meas_countablePartitionSet_le_of_fst_le","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\nn : Nat\na : α\nx : γ\ns : Set β\n⊢ LE.le ((κ a) (SProd.sprod (MeasurableSpace.countablePartitionSet n x) s)) ((ν a) (MeasurableSpace.countablePartitionSet n x))","decl":"lemma meas_countablePartitionSet_le_of_fst_le (hκν : fst κ ≤ ν) (n : ℕ) (a : α) (x : γ)\n    (s : Set β) :\n    κ a (countablePartitionSet n x ×ˢ s) ≤ ν a (countablePartitionSet n x) := by\n  calc κ a (countablePartitionSet n x ×ˢ s)\n    ≤ fst κ a (countablePartitionSet n x) := by\n        rw [fst_apply' _ _ (measurableSet_countablePartitionSet _ _)]\n        refine measure_mono (fun x ↦ ?_)\n        simp only [mem_prod, mem_setOf_eq, and_imp]\n        exact fun h _ ↦ h\n  _ ≤ ν a (countablePartitionSet n x) := hκν a _\n\n"}
{"name":"ProbabilityTheory.Kernel.densityProcess_le_one","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\nn : Nat\na : α\nx : γ\ns : Set β\n⊢ LE.le (κ.densityProcess ν n a x s) 1","decl":"lemma densityProcess_le_one (hκν : fst κ ≤ ν) (n : ℕ) (a : α) (x : γ) (s : Set β) :\n    densityProcess κ ν n a x s ≤ 1 := by\n  refine ENNReal.toReal_le_of_le_ofReal zero_le_one (ENNReal.div_le_of_le_mul ?_)\n  rw [ENNReal.ofReal_one, one_mul]\n  exact meas_countablePartitionSet_le_of_fst_le hκν n a x s\n\n"}
{"name":"ProbabilityTheory.Kernel.eLpNorm_densityProcess_le","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\nn : Nat\na : α\ns : Set β\n⊢ LE.le (MeasureTheory.eLpNorm (fun x => κ.densityProcess ν n a x s) 1 (ν a)) ((ν a) Set.univ)","decl":"lemma eLpNorm_densityProcess_le (hκν : fst κ ≤ ν) (n : ℕ) (a : α) (s : Set β) :\n    eLpNorm (fun x ↦ densityProcess κ ν n a x s) 1 (ν a) ≤ ν a univ := by\n  refine (eLpNorm_le_of_ae_bound (C := 1) (ae_of_all _ (fun x ↦ ?_))).trans ?_\n  · simp only [Real.norm_eq_abs, abs_of_nonneg (densityProcess_nonneg κ ν n a x s),\n      densityProcess_le_one hκν n a x s]\n  · simp\n\n"}
{"name":"ProbabilityTheory.Kernel.integrable_densityProcess","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\nn : Nat\na : α\ns : Set β\nhs : MeasurableSet s\n⊢ MeasureTheory.Integrable (fun x => κ.densityProcess ν n a x s) (ν a)","decl":"lemma integrable_densityProcess (hκν : fst κ ≤ ν) [IsFiniteKernel ν] (n : ℕ)\n    (a : α) {s : Set β} (hs : MeasurableSet s) :\n    Integrable (fun x ↦ densityProcess κ ν n a x s) (ν a) := by\n  rw [← memℒp_one_iff_integrable]\n  refine ⟨Measurable.aestronglyMeasurable ?_, ?_⟩\n  · exact measurable_densityProcess_right κ ν n a hs\n  · exact (eLpNorm_densityProcess_le hκν n a s).trans_lt (measure_lt_top _ _)\n\n"}
{"name":"ProbabilityTheory.Kernel.setIntegral_densityProcess_of_mem","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\nhν : ProbabilityTheory.IsFiniteKernel ν\nn : Nat\na : α\ns : Set β\nhs : MeasurableSet s\nu : Set γ\nhu : Membership.mem (MeasurableSpace.countablePartition γ n) u\n⊢ Eq (MeasureTheory.integral ((ν a).restrict u) fun x => κ.densityProcess ν n a x s) ((κ a) (SProd.sprod u s)).toReal","decl":"lemma setIntegral_densityProcess_of_mem (hκν : fst κ ≤ ν) [hν : IsFiniteKernel ν]\n    (n : ℕ) (a : α) {s : Set β} (hs : MeasurableSet s) {u : Set γ}\n    (hu : u ∈ countablePartition γ n) :\n    ∫ x in u, densityProcess κ ν n a x s ∂(ν a) = (κ a (u ×ˢ s)).toReal := by\n  have : IsFiniteKernel κ := isFiniteKernel_of_isFiniteKernel_fst (h := isFiniteKernel_of_le hκν)\n  have hu_meas : MeasurableSet u := measurableSet_countablePartition n hu\n  simp_rw [densityProcess]\n  rw [integral_toReal]\n  rotate_left\n  · refine Measurable.aemeasurable ?_\n    change Measurable ((fun (p : α × _) ↦ κ p.1 (countablePartitionSet n p.2 ×ˢ s)\n      / ν p.1 (countablePartitionSet n p.2)) ∘ (fun x ↦ (a, x)))\n    exact (measurable_densityProcess_aux κ ν n hs).comp measurable_prod_mk_left\n  · refine ae_of_all _ (fun x ↦ ?_)\n    by_cases h0 : ν a (countablePartitionSet n x) = 0\n    · suffices κ a (countablePartitionSet n x ×ˢ s) = 0 by simp [h0, this]\n      have h0' : fst κ a (countablePartitionSet n x) = 0 :=\n        le_antisymm ((hκν a _).trans h0.le) zero_le'\n      rw [fst_apply' _ _ (measurableSet_countablePartitionSet _ _)] at h0'\n      refine measure_mono_null (fun x ↦ ?_) h0'\n      simp only [mem_prod, mem_setOf_eq, and_imp]\n      exact fun h _ ↦ h\n    · exact ENNReal.div_lt_top (measure_ne_top _ _) h0\n  congr\n  have : ∫⁻ x in u, κ a (countablePartitionSet n x ×ˢ s) / ν a (countablePartitionSet n x) ∂(ν a)\n      = ∫⁻ _ in u, κ a (u ×ˢ s) / ν a u ∂(ν a) := by\n    refine setLIntegral_congr_fun hu_meas (ae_of_all _ (fun t ht ↦ ?_))\n    rw [countablePartitionSet_of_mem hu ht]\n  rw [this]\n  simp only [MeasureTheory.lintegral_const, MeasurableSet.univ, Measure.restrict_apply, univ_inter]\n  by_cases h0 : ν a u = 0\n  · simp only [h0, mul_zero]\n    have h0' : fst κ a u = 0 := le_antisymm ((hκν a _).trans h0.le) zero_le'\n    rw [fst_apply' _ _ hu_meas] at h0'\n    refine (measure_mono_null ?_ h0').symm\n    intro p\n    simp only [mem_prod, mem_setOf_eq, and_imp]\n    exact fun h _ ↦ h\n  rw [div_eq_mul_inv, mul_assoc, ENNReal.inv_mul_cancel h0, mul_one]\n  exact measure_ne_top _ _\n\n"}
{"name":"ProbabilityTheory.Kernel.setIntegral_densityProcess","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\nn : Nat\na : α\ns : Set β\nhs : MeasurableSet s\nA : Set γ\nhA : MeasurableSet A\n⊢ Eq (MeasureTheory.integral ((ν a).restrict A) fun x => κ.densityProcess ν n a x s) ((κ a) (SProd.sprod A s)).toReal","decl":"open scoped Function in -- required for scoped `on` notation\nlemma setIntegral_densityProcess (hκν : fst κ ≤ ν) [IsFiniteKernel ν]\n    (n : ℕ) (a : α) {s : Set β} (hs : MeasurableSet s) {A : Set γ}\n    (hA : MeasurableSet[countableFiltration γ n] A) :\n    ∫ x in A, densityProcess κ ν n a x s ∂(ν a) = (κ a (A ×ˢ s)).toReal := by\n  have : IsFiniteKernel κ := isFiniteKernel_of_isFiniteKernel_fst (h := isFiniteKernel_of_le hκν)\n  obtain ⟨S, hS_subset, rfl⟩ := (measurableSet_generateFrom_countablePartition_iff _ _).mp hA\n  simp_rw [sUnion_eq_iUnion]\n  have h_disj : Pairwise (Disjoint on fun i : S ↦ (i : Set γ)) := by\n    intro u v huv\n    #adaptation_note /-- nightly-2024-03-16\n    Previously `Function.onFun` unfolded in the following `simp only`,\n    but now needs a `rw`.\n    This may be a bug: a no import minimization may be required.\n    simp only [Finset.coe_sort_coe, Function.onFun] -/\n    rw [Function.onFun]\n    refine disjoint_countablePartition (hS_subset (by simp)) (hS_subset (by simp)) ?_\n    rwa [ne_eq, ← Subtype.ext_iff]\n  rw [integral_iUnion, iUnion_prod_const, measure_iUnion,\n      ENNReal.tsum_toReal_eq (fun _ ↦ measure_ne_top _ _)]\n  · congr with u\n    rw [setIntegral_densityProcess_of_mem hκν _ _ hs (hS_subset (by simp))]\n  · intro u v huv\n    simp only [Finset.coe_sort_coe, Set.disjoint_prod, disjoint_self, bot_eq_empty]\n    exact Or.inl (h_disj huv)\n  · exact fun _ ↦ (measurableSet_countablePartition n (hS_subset (by simp))).prod hs\n  · exact fun _ ↦ measurableSet_countablePartition n (hS_subset (by simp))\n  · exact h_disj\n  · exact (integrable_densityProcess hκν _ _ hs).integrableOn\n\n"}
{"name":"ProbabilityTheory.Kernel.integral_densityProcess","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\nn : Nat\na : α\ns : Set β\nhs : MeasurableSet s\n⊢ Eq (MeasureTheory.integral (ν a) fun x => κ.densityProcess ν n a x s) ((κ a) (SProd.sprod Set.univ s)).toReal","decl":"lemma integral_densityProcess (hκν : fst κ ≤ ν) [IsFiniteKernel ν]\n    (n : ℕ) (a : α) {s : Set β} (hs : MeasurableSet s) :\n    ∫ x, densityProcess κ ν n a x s ∂(ν a) = (κ a (univ ×ˢ s)).toReal := by\n  rw [← setIntegral_univ, setIntegral_densityProcess hκν _ _ hs MeasurableSet.univ]\n\n"}
{"name":"ProbabilityTheory.Kernel.setIntegral_densityProcess_of_le","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\nn m : Nat\nhnm : LE.le n m\na : α\ns : Set β\nhs : MeasurableSet s\nA : Set γ\nhA : MeasurableSet A\n⊢ Eq (MeasureTheory.integral ((ν a).restrict A) fun x => κ.densityProcess ν m a x s) ((κ a) (SProd.sprod A s)).toReal","decl":"lemma setIntegral_densityProcess_of_le (hκν : fst κ ≤ ν)\n    [IsFiniteKernel ν] {n m : ℕ} (hnm : n ≤ m) (a : α) {s : Set β} (hs : MeasurableSet s)\n    {A : Set γ} (hA : MeasurableSet[countableFiltration γ n] A) :\n    ∫ x in A, densityProcess κ ν m a x s ∂(ν a) = (κ a (A ×ˢ s)).toReal :=\n  setIntegral_densityProcess hκν m a hs ((countableFiltration γ).mono hnm A hA)\n\n"}
{"name":"ProbabilityTheory.Kernel.condExp_densityProcess","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\ni j : Nat\nhij : LE.le i j\na : α\ns : Set β\nhs : MeasurableSet s\n⊢ (MeasureTheory.ae (ν a)).EventuallyEq (MeasureTheory.condExp (↑(ProbabilityTheory.countableFiltration γ) i) (ν a) fun x => κ.densityProcess ν j a x s) fun x => κ.densityProcess ν i a x s","decl":"lemma condExp_densityProcess (hκν : fst κ ≤ ν) [IsFiniteKernel ν]\n    {i j : ℕ} (hij : i ≤ j) (a : α) {s : Set β} (hs : MeasurableSet s) :\n    (ν a)[fun x ↦ densityProcess κ ν j a x s | countableFiltration γ i]\n      =ᵐ[ν a] fun x ↦ densityProcess κ ν i a x s := by\n  refine (ae_eq_condExp_of_forall_setIntegral_eq ?_ ?_ ?_ ?_ ?_).symm\n  · exact integrable_densityProcess hκν j a hs\n  · exact fun _ _ _ ↦ (integrable_densityProcess hκν _ _ hs).integrableOn\n  · intro x hx _\n    rw [setIntegral_densityProcess hκν i a hs hx,\n      setIntegral_densityProcess_of_le hκν hij a hs hx]\n  · exact StronglyMeasurable.aestronglyMeasurable\n      (stronglyMeasurable_countableFiltration_densityProcess κ ν i a hs)\n\n"}
{"name":"ProbabilityTheory.Kernel.condexp_densityProcess","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\ni j : Nat\nhij : LE.le i j\na : α\ns : Set β\nhs : MeasurableSet s\n⊢ (MeasureTheory.ae (ν a)).EventuallyEq (MeasureTheory.condExp (↑(ProbabilityTheory.countableFiltration γ) i) (ν a) fun x => κ.densityProcess ν j a x s) fun x => κ.densityProcess ν i a x s","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_densityProcess := condExp_densityProcess\n\n"}
{"name":"ProbabilityTheory.Kernel.martingale_densityProcess","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\na : α\ns : Set β\nhs : MeasurableSet s\n⊢ MeasureTheory.Martingale (fun n x => κ.densityProcess ν n a x s) (ProbabilityTheory.countableFiltration γ) (ν a)","decl":"lemma martingale_densityProcess (hκν : fst κ ≤ ν) [IsFiniteKernel ν]\n    (a : α) {s : Set β} (hs : MeasurableSet s) :\n    Martingale (fun n x ↦ densityProcess κ ν n a x s) (countableFiltration γ) (ν a) :=\n  ⟨adapted_densityProcess κ ν a hs, fun _ _ h ↦ condExp_densityProcess hκν h a hs⟩\n\n"}
{"name":"ProbabilityTheory.Kernel.densityProcess_mono_set","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\nn : Nat\na : α\nx : γ\ns s' : Set β\nh : HasSubset.Subset s s'\n⊢ LE.le (κ.densityProcess ν n a x s) (κ.densityProcess ν n a x s')","decl":"lemma densityProcess_mono_set (hκν : fst κ ≤ ν) (n : ℕ) (a : α) (x : γ)\n    {s s' : Set β} (h : s ⊆ s') :\n    densityProcess κ ν n a x s ≤ densityProcess κ ν n a x s' := by\n  unfold densityProcess\n  obtain h₀ | h₀ := eq_or_ne (ν a (countablePartitionSet n x)) 0\n  · simp [h₀]\n  · gcongr\n    simp only [ne_eq, ENNReal.div_eq_top, h₀, and_false, false_or, not_and, not_not]\n    exact eq_top_mono (meas_countablePartitionSet_le_of_fst_le hκν n a x s')\n\n"}
{"name":"ProbabilityTheory.Kernel.densityProcess_mono_kernel_left","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nκ' : ProbabilityTheory.Kernel α (Prod γ β)\nhκκ' : LE.le κ κ'\nhκ'ν : LE.le κ'.fst ν\nn : Nat\na : α\nx : γ\ns : Set β\n⊢ LE.le (κ.densityProcess ν n a x s) (κ'.densityProcess ν n a x s)","decl":"lemma densityProcess_mono_kernel_left {κ' : Kernel α (γ × β)} (hκκ' : κ ≤ κ')\n    (hκ'ν : fst κ' ≤ ν) (n : ℕ) (a : α) (x : γ) (s : Set β) :\n    densityProcess κ ν n a x s ≤ densityProcess κ' ν n a x s := by\n  unfold densityProcess\n  by_cases h0 : ν a (countablePartitionSet n x) = 0\n  · rw [h0, ENNReal.toReal_div, ENNReal.toReal_div]\n    simp\n  have h_le : κ' a (countablePartitionSet n x ×ˢ s) ≤ ν a (countablePartitionSet n x) :=\n    meas_countablePartitionSet_le_of_fst_le hκ'ν n a x s\n  gcongr\n  · simp only [ne_eq, ENNReal.div_eq_top, h0, and_false, false_or, not_and, not_not]\n    exact fun h_top ↦ eq_top_mono h_le h_top\n  · apply hκκ'\n\n"}
{"name":"ProbabilityTheory.Kernel.densityProcess_antitone_kernel_right","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν ν' : ProbabilityTheory.Kernel α γ\nhνν' : LE.le ν ν'\nhκν : LE.le κ.fst ν\nn : Nat\na : α\nx : γ\ns : Set β\n⊢ LE.le (κ.densityProcess ν' n a x s) (κ.densityProcess ν n a x s)","decl":"lemma densityProcess_antitone_kernel_right {ν' : Kernel α γ}\n    (hνν' : ν ≤ ν') (hκν : fst κ ≤ ν) (n : ℕ) (a : α) (x : γ) (s : Set β) :\n    densityProcess κ ν' n a x s ≤ densityProcess κ ν n a x s := by\n  unfold densityProcess\n  have h_le : κ a (countablePartitionSet n x ×ˢ s) ≤ ν a (countablePartitionSet n x) :=\n    meas_countablePartitionSet_le_of_fst_le hκν n a x s\n  by_cases h0 : ν a (countablePartitionSet n x) = 0\n  · simp [le_antisymm (h_le.trans h0.le) zero_le', h0]\n  gcongr\n  · simp only [ne_eq, ENNReal.div_eq_top, h0, and_false, false_or, not_and, not_not]\n    exact fun h_top ↦ eq_top_mono h_le h_top\n  · apply hνν'\n\n"}
{"name":"ProbabilityTheory.Kernel.densityProcess_empty","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nn : Nat\na : α\nx : γ\n⊢ Eq (κ.densityProcess ν n a x EmptyCollection.emptyCollection) 0","decl":"@[simp]\nlemma densityProcess_empty (κ : Kernel α (γ × β)) (ν : Kernel α γ) (n : ℕ) (a : α) (x : γ) :\n    densityProcess κ ν n a x ∅ = 0 := by\n  simp [densityProcess]\n\n"}
{"name":"ProbabilityTheory.Kernel.tendsto_densityProcess_atTop_empty_of_antitone","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\ninst✝ : ProbabilityTheory.IsFiniteKernel κ\nn : Nat\na : α\nx : γ\nseq : Nat → Set β\nhseq : Antitone seq\nhseq_iInter : Eq (Set.iInter fun i => seq i) EmptyCollection.emptyCollection\nhseq_meas : ∀ (m : Nat), MeasurableSet (seq m)\n⊢ Filter.Tendsto (fun m => κ.densityProcess ν n a x (seq m)) Filter.atTop (nhds (κ.densityProcess ν n a x EmptyCollection.emptyCollection))","decl":"lemma tendsto_densityProcess_atTop_empty_of_antitone (κ : Kernel α (γ × β)) (ν : Kernel α γ)\n    [IsFiniteKernel κ] (n : ℕ) (a : α) (x : γ)\n    (seq : ℕ → Set β) (hseq : Antitone seq) (hseq_iInter : ⋂ i, seq i = ∅)\n    (hseq_meas : ∀ m, MeasurableSet (seq m)) :\n    Tendsto (fun m ↦ densityProcess κ ν n a x (seq m)) atTop\n      (𝓝 (densityProcess κ ν n a x ∅)) := by\n  simp_rw [densityProcess]\n  by_cases h0 : ν a (countablePartitionSet n x) = 0\n  · simp_rw [h0, ENNReal.toReal_div]\n    simp\n  refine (ENNReal.tendsto_toReal ?_).comp ?_\n  · rw [ne_eq, ENNReal.div_eq_top]\n    push_neg\n    simp\n  refine ENNReal.Tendsto.div_const ?_ (.inr h0)\n  have : Tendsto (fun m ↦ κ a (countablePartitionSet n x ×ˢ seq m)) atTop\n      (𝓝 ((κ a) (⋂ n_1, countablePartitionSet n x ×ˢ seq n_1))) := by\n    apply tendsto_measure_iInter_atTop\n    · measurability\n    · exact fun _ _ h ↦ prod_mono_right <| hseq h\n    · exact ⟨0, measure_ne_top _ _⟩\n  simpa only [← prod_iInter, hseq_iInter] using this\n\n"}
{"name":"ProbabilityTheory.Kernel.tendsto_densityProcess_atTop_of_antitone","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\ninst✝ : ProbabilityTheory.IsFiniteKernel κ\nn : Nat\na : α\nx : γ\nseq : Nat → Set β\nhseq : Antitone seq\nhseq_iInter : Eq (Set.iInter fun i => seq i) EmptyCollection.emptyCollection\nhseq_meas : ∀ (m : Nat), MeasurableSet (seq m)\n⊢ Filter.Tendsto (fun m => κ.densityProcess ν n a x (seq m)) Filter.atTop (nhds 0)","decl":"lemma tendsto_densityProcess_atTop_of_antitone (κ : Kernel α (γ × β)) (ν : Kernel α γ)\n    [IsFiniteKernel κ] (n : ℕ) (a : α) (x : γ)\n    (seq : ℕ → Set β) (hseq : Antitone seq) (hseq_iInter : ⋂ i, seq i = ∅)\n    (hseq_meas : ∀ m, MeasurableSet (seq m)) :\n    Tendsto (fun m ↦ densityProcess κ ν n a x (seq m)) atTop (𝓝 0) := by\n  rw [← densityProcess_empty κ ν n a x]\n  exact tendsto_densityProcess_atTop_empty_of_antitone κ ν n a x seq hseq hseq_iInter hseq_meas\n\n"}
{"name":"ProbabilityTheory.Kernel.tendsto_densityProcess_limitProcess","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\na : α\ns : Set β\nhs : MeasurableSet s\n⊢ Filter.Eventually (fun x => Filter.Tendsto (fun n => κ.densityProcess ν n a x s) Filter.atTop (nhds (MeasureTheory.Filtration.limitProcess (fun n x => κ.densityProcess ν n a x s) (ProbabilityTheory.countableFiltration γ) (ν a) x))) (MeasureTheory.ae (ν a))","decl":"lemma tendsto_densityProcess_limitProcess (hκν : fst κ ≤ ν)\n    [IsFiniteKernel ν] (a : α) {s : Set β} (hs : MeasurableSet s) :\n    ∀ᵐ x ∂(ν a), Tendsto (fun n ↦ densityProcess κ ν n a x s) atTop\n      (𝓝 ((countableFiltration γ).limitProcess\n      (fun n x ↦ densityProcess κ ν n a x s) (ν a) x)) := by\n  refine Submartingale.ae_tendsto_limitProcess (martingale_densityProcess hκν a hs).submartingale\n    (R := (ν a univ).toNNReal) (fun n ↦ ?_)\n  refine (eLpNorm_densityProcess_le hκν n a s).trans_eq ?_\n  rw [ENNReal.coe_toNNReal]\n  exact measure_ne_top _ _\n\n"}
{"name":"ProbabilityTheory.Kernel.memL1_limitProcess_densityProcess","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\na : α\ns : Set β\nhs : MeasurableSet s\n⊢ MeasureTheory.Memℒp (MeasureTheory.Filtration.limitProcess (fun n x => κ.densityProcess ν n a x s) (ProbabilityTheory.countableFiltration γ) (ν a)) 1 (ν a)","decl":"lemma memL1_limitProcess_densityProcess (hκν : fst κ ≤ ν) [IsFiniteKernel ν]\n    (a : α) {s : Set β} (hs : MeasurableSet s) :\n    Memℒp ((countableFiltration γ).limitProcess\n      (fun n x ↦ densityProcess κ ν n a x s) (ν a)) 1 (ν a) := by\n  refine Submartingale.memℒp_limitProcess (martingale_densityProcess hκν a hs).submartingale\n    (R := (ν a univ).toNNReal) (fun n ↦ ?_)\n  refine (eLpNorm_densityProcess_le hκν n a s).trans_eq ?_\n  rw [ENNReal.coe_toNNReal]\n  exact measure_ne_top _ _\n\n"}
{"name":"ProbabilityTheory.Kernel.tendsto_eLpNorm_one_densityProcess_limitProcess","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\na : α\ns : Set β\nhs : MeasurableSet s\n⊢ Filter.Tendsto (fun n => MeasureTheory.eLpNorm (HSub.hSub (fun x => κ.densityProcess ν n a x s) (MeasureTheory.Filtration.limitProcess (fun n x => κ.densityProcess ν n a x s) (ProbabilityTheory.countableFiltration γ) (ν a))) 1 (ν a)) Filter.atTop (nhds 0)","decl":"lemma tendsto_eLpNorm_one_densityProcess_limitProcess (hκν : fst κ ≤ ν) [IsFiniteKernel ν]\n    (a : α) {s : Set β} (hs : MeasurableSet s) :\n    Tendsto (fun n ↦ eLpNorm ((fun x ↦ densityProcess κ ν n a x s)\n      - (countableFiltration γ).limitProcess (fun n x ↦ densityProcess κ ν n a x s) (ν a))\n      1 (ν a)) atTop (𝓝 0) := by\n  refine Submartingale.tendsto_eLpNorm_one_limitProcess ?_ ?_\n  · exact (martingale_densityProcess hκν a hs).submartingale\n  · refine uniformIntegrable_of le_rfl ENNReal.one_ne_top ?_ ?_\n    · exact fun n ↦ (measurable_densityProcess_right κ ν n a hs).aestronglyMeasurable\n    · refine fun ε _ ↦ ⟨2, fun n ↦ le_of_eq_of_le ?_ (?_ : 0 ≤ ENNReal.ofReal ε)⟩\n      · suffices {x | 2 ≤ ‖densityProcess κ ν n a x s‖₊} = ∅ by simp [this]\n        ext x\n        simp only [mem_setOf_eq, mem_empty_iff_false, iff_false, not_le]\n        refine (?_ : _ ≤ (1 : ℝ≥0)).trans_lt one_lt_two\n        rw [Real.nnnorm_of_nonneg (densityProcess_nonneg _ _ _ _ _ _)]\n        exact mod_cast (densityProcess_le_one hκν _ _ _ _)\n      · simp\n\n"}
{"name":"ProbabilityTheory.Kernel.tendsto_eLpNorm_one_restrict_densityProcess_limitProcess","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\nhκν : LE.le κ.fst ν\na : α\ns : Set β\nhs : MeasurableSet s\nA : Set γ\n⊢ Filter.Tendsto (fun n => MeasureTheory.eLpNorm (HSub.hSub (fun x => κ.densityProcess ν n a x s) (MeasureTheory.Filtration.limitProcess (fun n x => κ.densityProcess ν n a x s) (ProbabilityTheory.countableFiltration γ) (ν a))) 1 ((ν a).restrict A)) Filter.atTop (nhds 0)","decl":"lemma tendsto_eLpNorm_one_restrict_densityProcess_limitProcess [IsFiniteKernel ν]\n    (hκν : fst κ ≤ ν) (a : α) {s : Set β} (hs : MeasurableSet s) (A : Set γ) :\n    Tendsto (fun n ↦ eLpNorm ((fun x ↦ densityProcess κ ν n a x s)\n      - (countableFiltration γ).limitProcess (fun n x ↦ densityProcess κ ν n a x s) (ν a))\n      1 ((ν a).restrict A)) atTop (𝓝 0) :=\n  tendsto_of_tendsto_of_tendsto_of_le_of_le tendsto_const_nhds\n    (tendsto_eLpNorm_one_densityProcess_limitProcess hκν a hs) (fun _ ↦ zero_le')\n    (fun _ ↦ eLpNorm_restrict_le _ _ _ _)\n\n"}
{"name":"ProbabilityTheory.Kernel.density_ae_eq_limitProcess","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\na : α\ns : Set β\nhs : MeasurableSet s\n⊢ (MeasureTheory.ae (ν a)).EventuallyEq (fun x => κ.density ν a x s) (MeasureTheory.Filtration.limitProcess (fun n x => κ.densityProcess ν n a x s) (ProbabilityTheory.countableFiltration γ) (ν a))","decl":"lemma density_ae_eq_limitProcess (hκν : fst κ ≤ ν) [IsFiniteKernel ν]\n    (a : α) {s : Set β} (hs : MeasurableSet s) :\n    (fun x ↦ density κ ν a x s)\n      =ᵐ[ν a] (countableFiltration γ).limitProcess\n        (fun n x ↦ densityProcess κ ν n a x s) (ν a) := by\n  filter_upwards [tendsto_densityProcess_limitProcess hκν a hs] with t ht using ht.limsup_eq\n\n"}
{"name":"ProbabilityTheory.Kernel.tendsto_m_density","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\na : α\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\ns : Set β\nhs : MeasurableSet s\n⊢ Filter.Eventually (fun x => Filter.Tendsto (fun n => κ.densityProcess ν n a x s) Filter.atTop (nhds (κ.density ν a x s))) (MeasureTheory.ae (ν a))","decl":"lemma tendsto_m_density (hκν : fst κ ≤ ν) (a : α) [IsFiniteKernel ν]\n    {s : Set β} (hs : MeasurableSet s) :\n    ∀ᵐ x ∂(ν a),\n      Tendsto (fun n ↦ densityProcess κ ν n a x s) atTop (𝓝 (density κ ν a x s)) := by\n  filter_upwards [tendsto_densityProcess_limitProcess hκν a hs, density_ae_eq_limitProcess hκν a hs]\n    with t h1 h2 using h2 ▸ h1\n\n"}
{"name":"ProbabilityTheory.Kernel.measurable_density","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\ns : Set β\nhs : MeasurableSet s\n⊢ Measurable fun p => κ.density ν p.1 p.2 s","decl":"lemma measurable_density (κ : Kernel α (γ × β)) (ν : Kernel α γ)\n    {s : Set β} (hs : MeasurableSet s) :\n    Measurable (fun (p : α × γ) ↦ density κ ν p.1 p.2 s) :=\n  .limsup (fun n ↦ measurable_densityProcess κ ν n hs)\n\n"}
{"name":"ProbabilityTheory.Kernel.measurable_density_left","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nx : γ\ns : Set β\nhs : MeasurableSet s\n⊢ Measurable fun a => κ.density ν a x s","decl":"lemma measurable_density_left (κ : Kernel α (γ × β)) (ν : Kernel α γ) (x : γ)\n    {s : Set β} (hs : MeasurableSet s) :\n    Measurable (fun a ↦ density κ ν a x s) := by\n  change Measurable ((fun (p : α × γ) ↦ density κ ν p.1 p.2 s) ∘ (fun a ↦ (a, x)))\n  exact (measurable_density κ ν hs).comp measurable_prod_mk_right\n\n"}
{"name":"ProbabilityTheory.Kernel.measurable_density_right","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\ns : Set β\nhs : MeasurableSet s\na : α\n⊢ Measurable fun x => κ.density ν a x s","decl":"lemma measurable_density_right (κ : Kernel α (γ × β)) (ν : Kernel α γ)\n    {s : Set β} (hs : MeasurableSet s) (a : α) :\n    Measurable (fun x ↦ density κ ν a x s) := by\n  change Measurable ((fun (p : α × γ) ↦ density κ ν p.1 p.2 s) ∘ (fun x ↦ (a, x)))\n  exact (measurable_density κ ν hs).comp measurable_prod_mk_left\n\n"}
{"name":"ProbabilityTheory.Kernel.density_mono_set","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\na : α\nx : γ\ns s' : Set β\nh : HasSubset.Subset s s'\n⊢ LE.le (κ.density ν a x s) (κ.density ν a x s')","decl":"lemma density_mono_set (hκν : fst κ ≤ ν) (a : α) (x : γ) {s s' : Set β} (h : s ⊆ s') :\n    density κ ν a x s ≤ density κ ν a x s' := by\n  refine limsup_le_limsup ?_ ?_ ?_\n  · exact Eventually.of_forall (fun n ↦ densityProcess_mono_set hκν n a x h)\n  · exact isCoboundedUnder_le_of_le atTop (fun i ↦ densityProcess_nonneg _ _ _ _ _ _)\n  · exact isBoundedUnder_of ⟨1, fun n ↦ densityProcess_le_one hκν _ _ _ _⟩\n\n"}
{"name":"ProbabilityTheory.Kernel.density_nonneg","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\na : α\nx : γ\ns : Set β\n⊢ LE.le 0 (κ.density ν a x s)","decl":"lemma density_nonneg (hκν : fst κ ≤ ν) (a : α) (x : γ) (s : Set β) :\n    0 ≤ density κ ν a x s := by\n  refine le_limsup_of_frequently_le ?_ ?_\n  · exact Frequently.of_forall (fun n ↦ densityProcess_nonneg _ _ _ _ _ _)\n  · exact isBoundedUnder_of ⟨1, fun n ↦ densityProcess_le_one hκν _ _ _ _⟩\n\n"}
{"name":"ProbabilityTheory.Kernel.density_le_one","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\na : α\nx : γ\ns : Set β\n⊢ LE.le (κ.density ν a x s) 1","decl":"lemma density_le_one (hκν : fst κ ≤ ν) (a : α) (x : γ) (s : Set β) :\n    density κ ν a x s ≤ 1 := by\n  refine limsup_le_of_le ?_ ?_\n  · exact isCoboundedUnder_le_of_le atTop (fun i ↦ densityProcess_nonneg _ _ _ _ _ _)\n  · exact Eventually.of_forall (fun n ↦ densityProcess_le_one hκν _ _ _ _)\n\n"}
{"name":"ProbabilityTheory.Kernel.eLpNorm_density_le","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\na : α\ns : Set β\n⊢ LE.le (MeasureTheory.eLpNorm (fun x => κ.density ν a x s) 1 (ν a)) ((ν a) Set.univ)","decl":"lemma eLpNorm_density_le (hκν : fst κ ≤ ν) (a : α) (s : Set β) :\n    eLpNorm (fun x ↦ density κ ν a x s) 1 (ν a) ≤ ν a univ := by\n  refine (eLpNorm_le_of_ae_bound (C := 1) (ae_of_all _ (fun t ↦ ?_))).trans ?_\n  · simp only [Real.norm_eq_abs, abs_of_nonneg (density_nonneg hκν a t s),\n      density_le_one hκν a t s]\n  · simp\n\n"}
{"name":"ProbabilityTheory.Kernel.integrable_density","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\na : α\ns : Set β\nhs : MeasurableSet s\n⊢ MeasureTheory.Integrable (fun x => κ.density ν a x s) (ν a)","decl":"lemma integrable_density (hκν : fst κ ≤ ν) [IsFiniteKernel ν]\n    (a : α) {s : Set β} (hs : MeasurableSet s) :\n    Integrable (fun x ↦ density κ ν a x s) (ν a) := by\n  rw [← memℒp_one_iff_integrable]\n  refine ⟨Measurable.aestronglyMeasurable ?_, ?_⟩\n  · exact measurable_density_right κ ν hs a\n  · exact (eLpNorm_density_le hκν a s).trans_lt (measure_lt_top _ _)\n\n"}
{"name":"ProbabilityTheory.Kernel.tendsto_setIntegral_densityProcess","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\na : α\ns : Set β\nhs : MeasurableSet s\nA : Set γ\n⊢ Filter.Tendsto (fun i => MeasureTheory.integral ((ν a).restrict A) fun x => κ.densityProcess ν i a x s) Filter.atTop (nhds (MeasureTheory.integral ((ν a).restrict A) fun x => κ.density ν a x s))","decl":"lemma tendsto_setIntegral_densityProcess (hκν : fst κ ≤ ν)\n    [IsFiniteKernel ν] (a : α) {s : Set β} (hs : MeasurableSet s) (A : Set γ) :\n    Tendsto (fun i ↦ ∫ x in A, densityProcess κ ν i a x s ∂(ν a)) atTop\n      (𝓝 (∫ x in A, density κ ν a x s ∂(ν a))) := by\n  refine tendsto_setIntegral_of_L1' (μ := ν a) (fun x ↦ density κ ν a x s)\n    (integrable_density hκν a hs) (F := fun i x ↦ densityProcess κ ν i a x s) (l := atTop)\n    (Eventually.of_forall (fun n ↦ integrable_densityProcess hκν _ _ hs)) ?_ A\n  refine (tendsto_congr fun n ↦ ?_).mp (tendsto_eLpNorm_one_densityProcess_limitProcess hκν a hs)\n  refine eLpNorm_congr_ae ?_\n  exact EventuallyEq.rfl.sub (density_ae_eq_limitProcess hκν a hs).symm\n\n"}
{"name":"ProbabilityTheory.Kernel.setIntegral_density_of_measurableSet","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\nn : Nat\na : α\ns : Set β\nhs : MeasurableSet s\nA : Set γ\nhA : MeasurableSet A\n⊢ Eq (MeasureTheory.integral ((ν a).restrict A) fun x => κ.density ν a x s) ((κ a) (SProd.sprod A s)).toReal","decl":"/-- Auxiliary lemma for `setIntegral_density`. -/\nlemma setIntegral_density_of_measurableSet (hκν : fst κ ≤ ν)\n    [IsFiniteKernel ν] (n : ℕ) (a : α) {s : Set β} (hs : MeasurableSet s) {A : Set γ}\n    (hA : MeasurableSet[countableFiltration γ n] A) :\n    ∫ x in A, density κ ν a x s ∂(ν a) = (κ a (A ×ˢ s)).toReal := by\n  suffices ∫ x in A, density κ ν a x s ∂(ν a) = ∫ x in A, densityProcess κ ν n a x s ∂(ν a) by\n    exact this ▸ setIntegral_densityProcess hκν _ _ hs hA\n  suffices ∫ x in A, density κ ν a x s ∂(ν a)\n      = limsup (fun i ↦ ∫ x in A, densityProcess κ ν i a x s ∂(ν a)) atTop by\n    rw [this, ← limsup_const (α := ℕ) (f := atTop) (∫ x in A, densityProcess κ ν n a x s ∂(ν a)),\n      limsup_congr]\n    simp only [eventually_atTop]\n    refine ⟨n, fun m hnm ↦ ?_⟩\n    rw [setIntegral_densityProcess_of_le hκν hnm _ hs hA,\n      setIntegral_densityProcess hκν _ _ hs hA]\n  -- use L1 convergence\n  have h := tendsto_setIntegral_densityProcess hκν a hs A\n  rw [h.limsup_eq]\n\n"}
{"name":"ProbabilityTheory.Kernel.integral_density","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\na : α\ns : Set β\nhs : MeasurableSet s\n⊢ Eq (MeasureTheory.integral (ν a) fun x => κ.density ν a x s) ((κ a) (SProd.sprod Set.univ s)).toReal","decl":"lemma integral_density (hκν : fst κ ≤ ν) [IsFiniteKernel ν]\n    (a : α) {s : Set β} (hs : MeasurableSet s) :\n    ∫ x, density κ ν a x s ∂(ν a) = (κ a (univ ×ˢ s)).toReal := by\n  rw [← setIntegral_univ, setIntegral_density_of_measurableSet hκν 0 a hs MeasurableSet.univ]\n\n"}
{"name":"ProbabilityTheory.Kernel.setIntegral_density","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\na : α\ns : Set β\nhs : MeasurableSet s\nA : Set γ\nhA : MeasurableSet A\n⊢ Eq (MeasureTheory.integral ((ν a).restrict A) fun x => κ.density ν a x s) ((κ a) (SProd.sprod A s)).toReal","decl":"lemma setIntegral_density (hκν : fst κ ≤ ν) [IsFiniteKernel ν]\n    (a : α) {s : Set β} (hs : MeasurableSet s) {A : Set γ} (hA : MeasurableSet A) :\n    ∫ x in A, density κ ν a x s ∂(ν a) = (κ a (A ×ˢ s)).toReal := by\n  have : IsFiniteKernel κ := isFiniteKernel_of_isFiniteKernel_fst (h := isFiniteKernel_of_le hκν)\n  have hgen : ‹MeasurableSpace γ› =\n      .generateFrom {s | ∃ n, MeasurableSet[countableFiltration γ n] s} := by\n    rw [setOf_exists, generateFrom_iUnion_measurableSet (countableFiltration γ),\n      iSup_countableFiltration]\n  have hpi : IsPiSystem {s | ∃ n, MeasurableSet[countableFiltration γ n] s} := by\n    rw [setOf_exists]\n    exact isPiSystem_iUnion_of_monotone _\n      (fun n ↦ @isPiSystem_measurableSet _ (countableFiltration γ n))\n      fun _ _ ↦ (countableFiltration γ).mono\n  induction A, hA using induction_on_inter hgen hpi with\n  | empty => simp\n  | basic s hs =>\n    rcases hs with ⟨n, hn⟩\n    exact setIntegral_density_of_measurableSet hκν n a hs hn\n  | compl A hA hA_eq =>\n    have h := integral_add_compl hA (integrable_density hκν a hs)\n    rw [hA_eq, integral_density hκν a hs] at h\n    have : Aᶜ ×ˢ s = univ ×ˢ s \\ A ×ˢ s := by\n      rw [prod_diff_prod, compl_eq_univ_diff]\n      simp\n    rw [this, measure_diff (by intro; simp) (hA.prod hs).nullMeasurableSet (measure_ne_top (κ a) _),\n      ENNReal.toReal_sub_of_le (measure_mono (by intro x; simp)) (measure_ne_top _ _)]\n    rw [eq_tsub_iff_add_eq_of_le, add_comm]\n    · exact h\n    · gcongr <;> simp\n  | iUnion f hf_disj hf h_eq =>\n    rw [integral_iUnion hf hf_disj (integrable_density hκν _ hs).integrableOn]\n    simp_rw [h_eq]\n    rw [← ENNReal.tsum_toReal_eq (fun _ ↦ measure_ne_top _ _)]\n    congr\n    rw [iUnion_prod_const, measure_iUnion]\n    · exact hf_disj.mono fun _ _ h ↦ h.set_prod_left _ _\n    · exact fun i ↦ (hf i).prod hs\n\n"}
{"name":"ProbabilityTheory.Kernel.setLIntegral_density","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\na : α\ns : Set β\nhs : MeasurableSet s\nA : Set γ\nhA : MeasurableSet A\n⊢ Eq (MeasureTheory.lintegral ((ν a).restrict A) fun x => ENNReal.ofReal (κ.density ν a x s)) ((κ a) (SProd.sprod A s))","decl":"lemma setLIntegral_density (hκν : fst κ ≤ ν) [IsFiniteKernel ν]\n    (a : α) {s : Set β} (hs : MeasurableSet s) {A : Set γ} (hA : MeasurableSet A) :\n    ∫⁻ x in A, ENNReal.ofReal (density κ ν a x s) ∂(ν a) = κ a (A ×ˢ s) := by\n  have : IsFiniteKernel κ := isFiniteKernel_of_isFiniteKernel_fst (h := isFiniteKernel_of_le hκν)\n  rw [← ofReal_integral_eq_lintegral_ofReal]\n  · rw [setIntegral_density hκν a hs hA,\n      ENNReal.ofReal_toReal (measure_ne_top _ _)]\n  · exact (integrable_density hκν a hs).restrict\n  · exact ae_of_all _ (fun _ ↦ density_nonneg hκν _ _ _)\n\n"}
{"name":"ProbabilityTheory.Kernel.lintegral_density","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\na : α\ns : Set β\nhs : MeasurableSet s\n⊢ Eq (MeasureTheory.lintegral (ν a) fun x => ENNReal.ofReal (κ.density ν a x s)) ((κ a) (SProd.sprod Set.univ s))","decl":"lemma lintegral_density (hκν : fst κ ≤ ν) [IsFiniteKernel ν]\n    (a : α) {s : Set β} (hs : MeasurableSet s) :\n    ∫⁻ x, ENNReal.ofReal (density κ ν a x s) ∂(ν a) = κ a (univ ×ˢ s) := by\n  rw [← setLIntegral_univ]\n  exact setLIntegral_density hκν a hs MeasurableSet.univ\n\n"}
{"name":"ProbabilityTheory.Kernel.tendsto_integral_density_of_monotone","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\na : α\nseq : Nat → Set β\nhseq : Monotone seq\nhseq_iUnion : Eq (Set.iUnion fun i => seq i) Set.univ\nhseq_meas : ∀ (m : Nat), MeasurableSet (seq m)\n⊢ Filter.Tendsto (fun m => MeasureTheory.integral (ν a) fun x => κ.density ν a x (seq m)) Filter.atTop (nhds ((κ a) Set.univ).toReal)","decl":"lemma tendsto_integral_density_of_monotone (hκν : fst κ ≤ ν) [IsFiniteKernel ν]\n    (a : α) (seq : ℕ → Set β) (hseq : Monotone seq) (hseq_iUnion : ⋃ i, seq i = univ)\n    (hseq_meas : ∀ m, MeasurableSet (seq m)) :\n    Tendsto (fun m ↦ ∫ x, density κ ν a x (seq m) ∂(ν a)) atTop (𝓝 (κ a univ).toReal) := by\n  have : IsFiniteKernel κ := isFiniteKernel_of_isFiniteKernel_fst (h := isFiniteKernel_of_le hκν)\n  simp_rw [integral_density hκν a (hseq_meas _)]\n  have h_cont := ENNReal.continuousOn_toReal.continuousAt (x := κ a univ) ?_\n  swap\n  · rw [mem_nhds_iff]\n    refine ⟨Iio (κ a univ + 1), fun x hx ↦ ne_top_of_lt (?_ : x < κ a univ + 1), isOpen_Iio, ?_⟩\n    · simpa using hx\n    · simp only [mem_Iio]\n      exact ENNReal.lt_add_right (measure_ne_top _ _) one_ne_zero\n  refine h_cont.tendsto.comp ?_\n  convert tendsto_measure_iUnion_atTop (monotone_const.set_prod hseq)\n  rw [← prod_iUnion, hseq_iUnion, univ_prod_univ]\n\n"}
{"name":"ProbabilityTheory.Kernel.tendsto_integral_density_of_antitone","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\na : α\nseq : Nat → Set β\nhseq : Antitone seq\nhseq_iInter : Eq (Set.iInter fun i => seq i) EmptyCollection.emptyCollection\nhseq_meas : ∀ (m : Nat), MeasurableSet (seq m)\n⊢ Filter.Tendsto (fun m => MeasureTheory.integral (ν a) fun x => κ.density ν a x (seq m)) Filter.atTop (nhds 0)","decl":"lemma tendsto_integral_density_of_antitone (hκν : fst κ ≤ ν) [IsFiniteKernel ν] (a : α)\n    (seq : ℕ → Set β) (hseq : Antitone seq) (hseq_iInter : ⋂ i, seq i = ∅)\n    (hseq_meas : ∀ m, MeasurableSet (seq m)) :\n    Tendsto (fun m ↦ ∫ x, density κ ν a x (seq m) ∂(ν a)) atTop (𝓝 0) := by\n  have : IsFiniteKernel κ := isFiniteKernel_of_isFiniteKernel_fst (h := isFiniteKernel_of_le hκν)\n  simp_rw [integral_density hκν a (hseq_meas _)]\n  rw [← ENNReal.zero_toReal]\n  have h_cont := ENNReal.continuousAt_toReal ENNReal.zero_ne_top\n  refine h_cont.tendsto.comp ?_\n  have h : Tendsto (fun m ↦ κ a (univ ×ˢ seq m)) atTop\n      (𝓝 ((κ a) (⋂ n, (fun m ↦ univ ×ˢ seq m) n))) := by\n    apply tendsto_measure_iInter_atTop\n    · measurability\n    · exact antitone_const.set_prod hseq\n    · exact ⟨0, measure_ne_top _ _⟩\n  simpa [← prod_iInter, hseq_iInter] using h\n\n"}
{"name":"ProbabilityTheory.Kernel.tendsto_density_atTop_ae_of_antitone","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nν : ProbabilityTheory.Kernel α γ\nhκν : LE.le κ.fst ν\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\na : α\nseq : Nat → Set β\nhseq : Antitone seq\nhseq_iInter : Eq (Set.iInter fun i => seq i) EmptyCollection.emptyCollection\nhseq_meas : ∀ (m : Nat), MeasurableSet (seq m)\n⊢ Filter.Eventually (fun x => Filter.Tendsto (fun m => κ.density ν a x (seq m)) Filter.atTop (nhds 0)) (MeasureTheory.ae (ν a))","decl":"lemma tendsto_density_atTop_ae_of_antitone (hκν : fst κ ≤ ν) [IsFiniteKernel ν] (a : α)\n    (seq : ℕ → Set β) (hseq : Antitone seq) (hseq_iInter : ⋂ i, seq i = ∅)\n    (hseq_meas : ∀ m, MeasurableSet (seq m)) :\n    ∀ᵐ x ∂(ν a), Tendsto (fun m ↦ density κ ν a x (seq m)) atTop (𝓝 0) := by\n  refine tendsto_of_integral_tendsto_of_antitone ?_ (integrable_const _) ?_ ?_ ?_\n  · exact fun m ↦ integrable_density hκν _ (hseq_meas m)\n  · rw [integral_zero]\n    exact tendsto_integral_density_of_antitone hκν a seq hseq hseq_iInter hseq_meas\n  · exact ae_of_all _ (fun c n m hnm ↦ density_mono_set hκν a c (hseq hnm))\n  · exact ae_of_all _ (fun x m ↦ density_nonneg hκν a x (seq m))\n\n"}
{"name":"ProbabilityTheory.Kernel.densityProcess_fst_univ","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\ninst✝ : ProbabilityTheory.IsFiniteKernel κ\nn : Nat\na : α\nx : γ\n⊢ Eq (κ.densityProcess κ.fst n a x Set.univ) (ite (Eq ((κ.fst a) (MeasurableSpace.countablePartitionSet n x)) 0) 0 1)","decl":"lemma densityProcess_fst_univ [IsFiniteKernel κ] (n : ℕ) (a : α) (x : γ) :\n    densityProcess κ (fst κ) n a x univ\n      = if fst κ a (countablePartitionSet n x) = 0 then 0 else 1 := by\n  rw [densityProcess]\n  split_ifs with h\n  · simp only [h]\n    by_cases h' : κ a (countablePartitionSet n x ×ˢ univ) = 0\n    · simp [h']\n    · rw [ENNReal.div_zero h']\n      simp\n  · rw [fst_apply' _ _ (measurableSet_countablePartitionSet _ _)]\n    have : countablePartitionSet n x ×ˢ univ = {p : γ × β | p.1 ∈ countablePartitionSet n x} := by\n      ext x\n      simp\n    rw [this, ENNReal.div_self]\n    · simp\n    · rwa [fst_apply' _ _ (measurableSet_countablePartitionSet _ _)] at h\n    · exact measure_ne_top _ _\n\n"}
{"name":"ProbabilityTheory.Kernel.densityProcess_fst_univ_ae","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\ninst✝ : ProbabilityTheory.IsFiniteKernel κ\nn : Nat\na : α\n⊢ Filter.Eventually (fun x => Eq (κ.densityProcess κ.fst n a x Set.univ) 1) (MeasureTheory.ae (κ.fst a))","decl":"lemma densityProcess_fst_univ_ae (κ : Kernel α (γ × β)) [IsFiniteKernel κ] (n : ℕ) (a : α) :\n    ∀ᵐ x ∂(fst κ a), densityProcess κ (fst κ) n a x univ = 1 := by\n  rw [ae_iff]\n  have : {x | ¬ densityProcess κ (fst κ) n a x univ = 1}\n      ⊆ {x | fst κ a (countablePartitionSet n x) = 0} := by\n    intro x hx\n    simp only [mem_setOf_eq] at hx ⊢\n    rw [densityProcess_fst_univ] at hx\n    simpa using hx\n  refine measure_mono_null this ?_\n  have : {x | fst κ a (countablePartitionSet n x) = 0}\n      ⊆ ⋃ (u) (_ : u ∈ countablePartition γ n) (_ : fst κ a u = 0), u := by\n    intro t ht\n    simp only [mem_setOf_eq, mem_iUnion, exists_prop] at ht ⊢\n    exact ⟨countablePartitionSet n t, countablePartitionSet_mem _ _, ht,\n      mem_countablePartitionSet _ _⟩\n  refine measure_mono_null this ?_\n  rw [measure_biUnion]\n  · simp\n  · exact (finite_countablePartition _ _).countable\n  · intro s hs t ht hst\n    simp only [disjoint_iUnion_right, disjoint_iUnion_left]\n    exact fun _ _ ↦ disjoint_countablePartition hs ht hst\n  · intro s hs\n    by_cases h : fst κ a s = 0\n    · simp [h, measurableSet_countablePartition n hs]\n    · simp [h]\n\n"}
{"name":"ProbabilityTheory.Kernel.tendsto_densityProcess_fst_atTop_univ_of_monotone","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\nn : Nat\na : α\nx : γ\nseq : Nat → Set β\nhseq : Monotone seq\nhseq_iUnion : Eq (Set.iUnion fun i => seq i) Set.univ\n⊢ Filter.Tendsto (fun m => κ.densityProcess κ.fst n a x (seq m)) Filter.atTop (nhds (κ.densityProcess κ.fst n a x Set.univ))","decl":"lemma tendsto_densityProcess_fst_atTop_univ_of_monotone (κ : Kernel α (γ × β)) (n : ℕ) (a : α)\n    (x : γ) (seq : ℕ → Set β) (hseq : Monotone seq) (hseq_iUnion : ⋃ i, seq i = univ) :\n    Tendsto (fun m ↦ densityProcess κ (fst κ) n a x (seq m)) atTop\n      (𝓝 (densityProcess κ (fst κ) n a x univ)) := by\n  simp_rw [densityProcess]\n  refine (ENNReal.tendsto_toReal ?_).comp ?_\n  · rw [ne_eq, ENNReal.div_eq_top]\n    push_neg\n    simp_rw [fst_apply' _ _ (measurableSet_countablePartitionSet _ _)]\n    constructor\n    · refine fun h h0 ↦ h (measure_mono_null (fun x ↦ ?_) h0)\n      simp only [mem_prod, mem_setOf_eq, and_imp]\n      exact fun h _ ↦ h\n    · refine fun h_top ↦ eq_top_mono (measure_mono (fun x ↦ ?_)) h_top\n      simp only [mem_prod, mem_setOf_eq, and_imp]\n      exact fun h _ ↦ h\n  by_cases h0 : fst κ a (countablePartitionSet n x) = 0\n  · rw [fst_apply' _ _ (measurableSet_countablePartitionSet _ _)] at h0 ⊢\n    suffices ∀ m, κ a (countablePartitionSet n x ×ˢ seq m) = 0 by\n      simp only [this, h0, ENNReal.zero_div, tendsto_const_nhds_iff]\n      suffices κ a (countablePartitionSet n x ×ˢ univ) = 0 by\n        simp only [this, ENNReal.zero_div]\n      convert h0\n      ext x\n      simp only [mem_prod, mem_univ, and_true, mem_setOf_eq]\n    refine fun m ↦ measure_mono_null (fun x ↦ ?_) h0\n    simp only [mem_prod, mem_setOf_eq, and_imp]\n    exact fun h _ ↦ h\n  refine ENNReal.Tendsto.div_const ?_ ?_\n  · convert tendsto_measure_iUnion_atTop (monotone_const.set_prod hseq)\n    rw [← prod_iUnion, hseq_iUnion]\n  · exact Or.inr h0\n\n"}
{"name":"ProbabilityTheory.Kernel.tendsto_densityProcess_fst_atTop_ae_of_monotone","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\ninst✝ : ProbabilityTheory.IsFiniteKernel κ\nn : Nat\na : α\nseq : Nat → Set β\nhseq : Monotone seq\nhseq_iUnion : Eq (Set.iUnion fun i => seq i) Set.univ\n⊢ Filter.Eventually (fun x => Filter.Tendsto (fun m => κ.densityProcess κ.fst n a x (seq m)) Filter.atTop (nhds 1)) (MeasureTheory.ae (κ.fst a))","decl":"lemma tendsto_densityProcess_fst_atTop_ae_of_monotone (κ : Kernel α (γ × β)) [IsFiniteKernel κ]\n    (n : ℕ) (a : α) (seq : ℕ → Set β) (hseq : Monotone seq) (hseq_iUnion : ⋃ i, seq i = univ) :\n    ∀ᵐ x ∂(fst κ a), Tendsto (fun m ↦ densityProcess κ (fst κ) n a x (seq m)) atTop (𝓝 1) := by\n  filter_upwards [densityProcess_fst_univ_ae κ n a] with x hx\n  rw [← hx]\n  exact tendsto_densityProcess_fst_atTop_univ_of_monotone κ n a x seq hseq hseq_iUnion\n\n"}
{"name":"ProbabilityTheory.Kernel.density_fst_univ","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\ninst✝ : ProbabilityTheory.IsFiniteKernel κ\na : α\n⊢ Filter.Eventually (fun x => Eq (κ.density κ.fst a x Set.univ) 1) (MeasureTheory.ae (κ.fst a))","decl":"lemma density_fst_univ (κ : Kernel α (γ × β)) [IsFiniteKernel κ] (a : α) :\n    ∀ᵐ x ∂(fst κ a), density κ (fst κ) a x univ = 1 := by\n  have h := fun n ↦ densityProcess_fst_univ_ae κ n a\n  rw [← ae_all_iff] at h\n  filter_upwards [h] with x hx\n  simp [density, hx]\n\n"}
{"name":"ProbabilityTheory.Kernel.tendsto_density_fst_atTop_ae_of_monotone","module":"Mathlib.Probability.Kernel.Disintegration.Density","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝¹ : MeasurableSpace.CountablyGenerated γ\nκ : ProbabilityTheory.Kernel α (Prod γ β)\ninst✝ : ProbabilityTheory.IsFiniteKernel κ\na : α\nseq : Nat → Set β\nhseq : Monotone seq\nhseq_iUnion : Eq (Set.iUnion fun i => seq i) Set.univ\nhseq_meas : ∀ (m : Nat), MeasurableSet (seq m)\n⊢ Filter.Eventually (fun x => Filter.Tendsto (fun m => κ.density κ.fst a x (seq m)) Filter.atTop (nhds 1)) (MeasureTheory.ae (κ.fst a))","decl":"lemma tendsto_density_fst_atTop_ae_of_monotone [IsFiniteKernel κ]\n    (a : α) (seq : ℕ → Set β) (hseq : Monotone seq) (hseq_iUnion : ⋃ i, seq i = univ)\n    (hseq_meas : ∀ m, MeasurableSet (seq m)) :\n    ∀ᵐ x ∂(fst κ a), Tendsto (fun m ↦ density κ (fst κ) a x (seq m)) atTop (𝓝 1) := by\n  refine tendsto_of_integral_tendsto_of_monotone ?_ (integrable_const _) ?_ ?_ ?_\n  · exact fun m ↦ integrable_density le_rfl _ (hseq_meas m)\n  · rw [MeasureTheory.integral_const, smul_eq_mul, mul_one]\n    convert tendsto_integral_density_of_monotone (κ := κ) le_rfl a seq hseq hseq_iUnion hseq_meas\n    rw [fst_apply' _ _ MeasurableSet.univ]\n    simp only [mem_univ, setOf_true]\n  · exact ae_of_all _ (fun c n m hnm ↦ density_mono_set le_rfl a c (hseq hnm))\n  · exact ae_of_all _ (fun x m ↦ density_le_one le_rfl a x (seq m))\n\n"}
