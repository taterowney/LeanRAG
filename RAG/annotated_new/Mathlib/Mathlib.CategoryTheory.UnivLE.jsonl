{"name":"UnivLE.ofEssSurj","module":"Mathlib.CategoryTheory.UnivLE","initialProofState":"w : CategoryTheory.uliftFunctor.{u, v}.EssSurj\n⊢ UnivLE.{max u v, v}","decl":"theorem UnivLE.ofEssSurj (w : (uliftFunctor.{u, v} : Type v ⥤ Type max u v).EssSurj) :\n    UnivLE.{max u v, v} :=\n  fun α ↦ by\n    obtain ⟨a', ⟨m⟩⟩ := w.mem_essImage α\n    exact ⟨a', ⟨(Iso.toEquiv m).symm.trans Equiv.ulift⟩⟩\n\n"}
{"name":"EssSurj.ofUnivLE","module":"Mathlib.CategoryTheory.UnivLE","initialProofState":"inst✝ : UnivLE.{max u v, v}\n⊢ CategoryTheory.uliftFunctor.{u, v}.EssSurj","decl":"instance EssSurj.ofUnivLE [UnivLE.{max u v, v}] :\n    (uliftFunctor.{u, v} : Type v ⥤ Type max u v).EssSurj where\n  mem_essImage α :=\n    ⟨Shrink α, ⟨Equiv.toIso (Equiv.ulift.trans (equivShrink α).symm)⟩⟩\n\n"}
{"name":"UnivLE_iff_essSurj","module":"Mathlib.CategoryTheory.UnivLE","initialProofState":"⊢ Iff UnivLE.{max u v, v} CategoryTheory.uliftFunctor.{u, v}.EssSurj","decl":"theorem UnivLE_iff_essSurj :\n    UnivLE.{max u v, v} ↔ (uliftFunctor.{u, v} : Type v ⥤ Type max u v).EssSurj :=\n  ⟨fun _ => inferInstance, fun w => UnivLE.ofEssSurj w⟩\n\n"}
{"name":"instIsEquivalenceUliftFunctorOfUnivLE","module":"Mathlib.CategoryTheory.UnivLE","initialProofState":"inst✝ : UnivLE.{max u v, v}\n⊢ CategoryTheory.uliftFunctor.{u, v}.IsEquivalence","decl":"instance [UnivLE.{max u v, v}] : uliftFunctor.{u, v}.IsEquivalence where\n\n"}
{"name":"instFaithfulWitness","module":"Mathlib.CategoryTheory.UnivLE","initialProofState":"inst✝ : UnivLE.{max u v, v}\n⊢ UnivLE.witness.Faithful","decl":"instance [UnivLE.{max u v, v}] : UnivLE.witness.{u, v}.Faithful :=\n  inferInstanceAs <| Functor.Faithful (_ ⋙ _)\n\n"}
{"name":"instFullWitness","module":"Mathlib.CategoryTheory.UnivLE","initialProofState":"inst✝ : UnivLE.{max u v, v}\n⊢ UnivLE.witness.Full","decl":"instance [UnivLE.{max u v, v}] : UnivLE.witness.{u, v}.Full :=\n  inferInstanceAs <| Functor.Full (_ ⋙ _)\n"}
