{"name":"RingHom.toRatAlgHom_toRingHom","module":"Mathlib.Algebra.Algebra.Hom.Rat","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝³ : Ring R\ninst✝² : Ring S\ninst✝¹ : Algebra Rat R\ninst✝ : Algebra Rat S\nf : RingHom R S\n⊢ Eq (↑f.toRatAlgHom) f","decl":"@[simp]\ntheorem toRatAlgHom_toRingHom [Ring R] [Ring S] [Algebra ℚ R] [Algebra ℚ S] (f : R →+* S) :\n    ↑f.toRatAlgHom = f :=\n  RingHom.ext fun _x => rfl\n\n"}
{"name":"AlgHom.toRingHom_toRatAlgHom","module":"Mathlib.Algebra.Algebra.Hom.Rat","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝³ : Ring R\ninst✝² : Ring S\ninst✝¹ : Algebra Rat R\ninst✝ : Algebra Rat S\nf : AlgHom Rat R S\n⊢ Eq (↑f).toRatAlgHom f","decl":"@[simp]\ntheorem AlgHom.toRingHom_toRatAlgHom [Ring R] [Ring S] [Algebra ℚ R] [Algebra ℚ S]\n    (f : R →ₐ[ℚ] S) : (f : R →+* S).toRatAlgHom = f :=\n  AlgHom.ext fun _x => rfl\n\n"}
{"name":"RingHom.equivRatAlgHom_apply","module":"Mathlib.Algebra.Algebra.Hom.Rat","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝³ : Ring R\ninst✝² : Ring S\ninst✝¹ : Algebra Rat R\ninst✝ : Algebra Rat S\nf : RingHom R S\n⊢ Eq (RingHom.equivRatAlgHom f) f.toRatAlgHom","decl":"/-- The equivalence between `RingHom` and `ℚ`-algebra homomorphisms. -/\n@[simps]\ndef RingHom.equivRatAlgHom [Ring R] [Ring S] [Algebra ℚ R] [Algebra ℚ S] :\n    (R →+* S) ≃ (R →ₐ[ℚ] S) where\n  toFun := RingHom.toRatAlgHom\n  invFun := AlgHom.toRingHom\n  left_inv f := RingHom.toRatAlgHom_toRingHom f\n  right_inv f := AlgHom.toRingHom_toRatAlgHom f\n\n"}
{"name":"RingHom.equivRatAlgHom_symm_apply","module":"Mathlib.Algebra.Algebra.Hom.Rat","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝³ : Ring R\ninst✝² : Ring S\ninst✝¹ : Algebra Rat R\ninst✝ : Algebra Rat S\nself : AlgHom Rat R S\n⊢ Eq (RingHom.equivRatAlgHom.symm self) self.toRingHom","decl":"/-- The equivalence between `RingHom` and `ℚ`-algebra homomorphisms. -/\n@[simps]\ndef RingHom.equivRatAlgHom [Ring R] [Ring S] [Algebra ℚ R] [Algebra ℚ S] :\n    (R →+* S) ≃ (R →ₐ[ℚ] S) where\n  toFun := RingHom.toRatAlgHom\n  invFun := AlgHom.toRingHom\n  left_inv f := RingHom.toRatAlgHom_toRingHom f\n  right_inv f := AlgHom.toRingHom_toRatAlgHom f\n\n"}
