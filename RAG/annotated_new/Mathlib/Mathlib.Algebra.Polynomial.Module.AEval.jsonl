{"name":"Module.AEval.instFiniteOrig","module":"Mathlib.Algebra.Polynomial.Module.AEval","initialProofState":"R : Type u_1\nA : Type u_3\nM : Type u_2\ninst✝⁷ : CommSemiring R\ninst✝⁶ : Semiring A\na : A\ninst✝⁵ : Algebra R A\ninst✝⁴ : AddCommMonoid M\ninst✝³ : Module A M\ninst✝² : Module R M\ninst✝¹ : IsScalarTower R A M\ninst✝ : Module.Finite R M\n⊢ Module.Finite R (Module.AEval R M a)","decl":"instance instFiniteOrig [Module.Finite R M] : Module.Finite R <| AEval R M a :=\n  ‹Module.Finite R M›\n\n"}
{"name":"Module.AEval.of_aeval_smul","module":"Mathlib.Algebra.Polynomial.Module.AEval","initialProofState":"R : Type u_1\nA : Type u_3\nM : Type u_2\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\na : A\ninst✝⁴ : Algebra R A\ninst✝³ : AddCommMonoid M\ninst✝² : Module A M\ninst✝¹ : Module R M\ninst✝ : IsScalarTower R A M\nf : Polynomial R\nm : M\n⊢ Eq ((Module.AEval.of R M a) (HSMul.hSMul ((Polynomial.aeval a) f) m)) (HSMul.hSMul f ((Module.AEval.of R M a) m))","decl":"lemma of_aeval_smul (f : R[X]) (m : M) : of R M a (aeval a f • m) = f • of R M a m := rfl\n\n"}
{"name":"Module.AEval.of_symm_smul","module":"Mathlib.Algebra.Polynomial.Module.AEval","initialProofState":"R : Type u_1\nA : Type u_3\nM : Type u_2\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\na : A\ninst✝⁴ : Algebra R A\ninst✝³ : AddCommMonoid M\ninst✝² : Module A M\ninst✝¹ : Module R M\ninst✝ : IsScalarTower R A M\nf : Polynomial R\nm : Module.AEval R M a\n⊢ Eq ((Module.AEval.of R M a).symm (HSMul.hSMul f m)) (HSMul.hSMul ((Polynomial.aeval a) f) ((Module.AEval.of R M a).symm m))","decl":"@[simp] lemma of_symm_smul (f : R[X]) (m : AEval R M a) :\n    (of R M a).symm (f • m) = aeval a f • (of R M a).symm m := rfl\n\n"}
{"name":"Module.AEval.C_smul","module":"Mathlib.Algebra.Polynomial.Module.AEval","initialProofState":"R : Type u_1\nA : Type u_3\nM : Type u_2\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\na : A\ninst✝⁴ : Algebra R A\ninst✝³ : AddCommMonoid M\ninst✝² : Module A M\ninst✝¹ : Module R M\ninst✝ : IsScalarTower R A M\nt : R\nm : Module.AEval R M a\n⊢ Eq (HSMul.hSMul (Polynomial.C t) m) (HSMul.hSMul t m)","decl":"@[simp] lemma C_smul (t : R) (m : AEval R M a) : C t • m = t • m :=\n  (of R M a).symm.injective <| by simp\n\n"}
{"name":"Module.AEval.X_smul_of","module":"Mathlib.Algebra.Polynomial.Module.AEval","initialProofState":"R : Type u_2\nA : Type u_3\nM : Type u_1\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\na : A\ninst✝⁴ : Algebra R A\ninst✝³ : AddCommMonoid M\ninst✝² : Module A M\ninst✝¹ : Module R M\ninst✝ : IsScalarTower R A M\nm : M\n⊢ Eq (HSMul.hSMul Polynomial.X ((Module.AEval.of R M a) m)) ((Module.AEval.of R M a) (HSMul.hSMul a m))","decl":"lemma X_smul_of (m : M) : (X : R[X]) • (of R M a m) = of R M a (a • m) := by\n  rw [← of_aeval_smul, aeval_X]\n\n"}
{"name":"Module.AEval.of_symm_X_smul","module":"Mathlib.Algebra.Polynomial.Module.AEval","initialProofState":"R : Type u_1\nA : Type u_3\nM : Type u_2\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\na : A\ninst✝⁴ : Algebra R A\ninst✝³ : AddCommMonoid M\ninst✝² : Module A M\ninst✝¹ : Module R M\ninst✝ : IsScalarTower R A M\nm : Module.AEval R M a\n⊢ Eq ((Module.AEval.of R M a).symm (HSMul.hSMul Polynomial.X m)) (HSMul.hSMul a ((Module.AEval.of R M a).symm m))","decl":"lemma of_symm_X_smul (m : AEval R M a) :\n    (of R M a).symm ((X : R[X]) • m) = a • (of R M a).symm m := by\n  rw [of_symm_smul, aeval_X]\n\n"}
{"name":"Module.AEval.instIsScalarTowerOrigPolynomial","module":"Mathlib.Algebra.Polynomial.Module.AEval","initialProofState":"R : Type u_1\nA : Type u_3\nM : Type u_2\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\na : A\ninst✝⁴ : Algebra R A\ninst✝³ : AddCommMonoid M\ninst✝² : Module A M\ninst✝¹ : Module R M\ninst✝ : IsScalarTower R A M\n⊢ IsScalarTower R (Polynomial R) (Module.AEval R M a)","decl":"instance instIsScalarTowerOrigPolynomial : IsScalarTower R R[X] <| AEval R M a where\n  smul_assoc r f m := by\n    apply (of R M a).symm.injective\n    rw [of_symm_smul, map_smul, smul_assoc, map_smul, of_symm_smul]\n\n"}
{"name":"Module.AEval.instFinitePolynomial","module":"Mathlib.Algebra.Polynomial.Module.AEval","initialProofState":"R : Type u_1\nA : Type u_3\nM : Type u_2\ninst✝⁷ : CommSemiring R\ninst✝⁶ : Semiring A\na : A\ninst✝⁵ : Algebra R A\ninst✝⁴ : AddCommMonoid M\ninst✝³ : Module A M\ninst✝² : Module R M\ninst✝¹ : IsScalarTower R A M\ninst✝ : Module.Finite R M\n⊢ Module.Finite (Polynomial R) (Module.AEval R M a)","decl":"instance instFinitePolynomial [Module.Finite R M] : Module.Finite R[X] <| AEval R M a :=\n  Finite.of_restrictScalars_finite R _ _\n\n"}
{"name":"Module.AEval.annihilator_eq_ker_aeval","module":"Mathlib.Algebra.Polynomial.Module.AEval","initialProofState":"R : Type u_3\nA : Type u_1\nM : Type u_2\ninst✝⁷ : CommSemiring R\ninst✝⁶ : Semiring A\na : A\ninst✝⁵ : Algebra R A\ninst✝⁴ : AddCommMonoid M\ninst✝³ : Module A M\ninst✝² : Module R M\ninst✝¹ : IsScalarTower R A M\ninst✝ : FaithfulSMul A M\n⊢ Eq (Module.annihilator (Polynomial R) (Module.AEval R M a)) (RingHom.ker (Polynomial.aeval a))","decl":"lemma annihilator_eq_ker_aeval [FaithfulSMul A M] :\n    annihilator R[X] (AEval R M a) = RingHom.ker (aeval a) := by\n  ext p\n  simp_rw [mem_annihilator, RingHom.mem_ker]\n  change (∀ m : M, aeval a p • m = 0) ↔ _\n  exact ⟨fun h ↦ eq_of_smul_eq_smul (α := M) <| by simp [h], fun h ↦ by simp [h]⟩\n\n"}
{"name":"Module.AEval.annihilator_top_eq_ker_aeval","module":"Mathlib.Algebra.Polynomial.Module.AEval","initialProofState":"R : Type u_3\nA : Type u_1\nM : Type u_2\ninst✝⁷ : CommSemiring R\ninst✝⁶ : Semiring A\na : A\ninst✝⁵ : Algebra R A\ninst✝⁴ : AddCommMonoid M\ninst✝³ : Module A M\ninst✝² : Module R M\ninst✝¹ : IsScalarTower R A M\ninst✝ : FaithfulSMul A M\n⊢ Eq Top.top.annihilator (RingHom.ker (Polynomial.aeval a))","decl":"@[simp]\nlemma annihilator_top_eq_ker_aeval [FaithfulSMul A M] :\n    (⊤ : Submodule R[X] <| AEval R M a).annihilator = RingHom.ker (aeval a) := by\n  ext p\n  simp only [Submodule.mem_annihilator, Submodule.mem_top, forall_true_left, RingHom.mem_ker]\n  change (∀ m : M, aeval a p • m = 0) ↔ _\n  exact ⟨fun h ↦ eq_of_smul_eq_smul (α := M) <| by simp [h], fun h ↦ by simp [h]⟩\n\n"}
{"name":"Module.AEval.mem_mapSubmodule_apply","module":"Mathlib.Algebra.Polynomial.Module.AEval","initialProofState":"R : Type u_2\nA : Type u_3\nM : Type u_1\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\na : A\ninst✝⁴ : Algebra R A\ninst✝³ : AddCommMonoid M\ninst✝² : Module A M\ninst✝¹ : Module R M\ninst✝ : IsScalarTower R A M\np : Subtype fun x => Membership.mem ((Algebra.lsmul R R M) a).invtSubmodule x\nm : Module.AEval R M a\n⊢ Iff (Membership.mem ((Module.AEval.mapSubmodule R M a) p) m) (Membership.mem (↑p) ((Module.AEval.of R M a).symm m))","decl":"@[simp] lemma mem_mapSubmodule_apply {p : (Algebra.lsmul R R M a).invtSubmodule} {m : AEval R M a} :\n    m ∈ mapSubmodule R M a p ↔ (of R M a).symm m ∈ (p : Submodule R M) :=\n  ⟨fun ⟨_, hm, hm'⟩ ↦ hm'.symm ▸ hm, fun hm ↦ ⟨(of R M a).symm m, hm, rfl⟩⟩\n\n"}
{"name":"Module.AEval.mem_mapSubmodule_symm_apply","module":"Mathlib.Algebra.Polynomial.Module.AEval","initialProofState":"R : Type u_1\nA : Type u_3\nM : Type u_2\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\na : A\ninst✝⁴ : Algebra R A\ninst✝³ : AddCommMonoid M\ninst✝² : Module A M\ninst✝¹ : Module R M\ninst✝ : IsScalarTower R A M\nq : Submodule (Polynomial R) (Module.AEval R M a)\nm : M\n⊢ Iff (Membership.mem (↑((Module.AEval.mapSubmodule R M a).symm q)) m) (Membership.mem q ((Module.AEval.of R M a) m))","decl":"@[simp] lemma mem_mapSubmodule_symm_apply {q : Submodule R[X] (AEval R M a)} {m : M} :\n    m ∈ ((mapSubmodule R M a).symm q : Submodule R M) ↔ of R M a m ∈ q :=\n  Iff.rfl\n\n"}
{"name":"Module.AEval'_def","module":"Mathlib.Algebra.Polynomial.Module.AEval","initialProofState":"R : Type u_2\nM : Type u_1\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nφ : LinearMap (RingHom.id R) M M\n⊢ Eq (Module.AEval' φ) (Module.AEval R M φ)","decl":"lemma AEval'_def : AEval' φ = AEval R M φ := rfl\n"}
{"name":"Module.AEval'.X_smul_of","module":"Mathlib.Algebra.Polynomial.Module.AEval","initialProofState":"R : Type u_2\nM : Type u_1\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nφ : LinearMap (RingHom.id R) M M\nm : M\n⊢ Eq (HSMul.hSMul Polynomial.X ((Module.AEval'.of φ) m)) ((Module.AEval'.of φ) (φ m))","decl":"lemma AEval'.X_smul_of (m : M) : (X : R[X]) • AEval'.of φ m = AEval'.of φ (φ m) :=\n  AEval.X_smul_of _ _\n"}
{"name":"Module.AEval'.of_symm_X_smul","module":"Mathlib.Algebra.Polynomial.Module.AEval","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nφ : LinearMap (RingHom.id R) M M\nm : Module.AEval' φ\n⊢ Eq ((Module.AEval'.of φ).symm (HSMul.hSMul Polynomial.X m)) (φ ((Module.AEval'.of φ).symm m))","decl":"lemma AEval'.of_symm_X_smul (m : AEval' φ) :\n    (AEval'.of φ).symm ((X : R[X]) • m) = φ ((AEval'.of φ).symm m) := AEval.of_symm_X_smul _ _\n\n"}
{"name":"Module.instFinitePolynomialAEval'","module":"Mathlib.Algebra.Polynomial.Module.AEval","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid M\ninst✝¹ : Module R M\nφ : LinearMap (RingHom.id R) M M\ninst✝ : Module.Finite R M\n⊢ Module.Finite (Polynomial R) (Module.AEval' φ)","decl":"instance [Module.Finite R M] : Module.Finite R[X] <| AEval' φ := inferInstance\n\n"}
