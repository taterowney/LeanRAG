{"name":"riesz_lemma","module":"Mathlib.Analysis.NormedSpace.RieszLemma","initialProofState":"ùïú : Type u_1\ninst‚úù¬≤ : NormedField ùïú\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace ùïú E\nF : Subspace ùïú E\nhFc : IsClosed ‚ÜëF\nhF : Exists fun x => Not (Membership.mem F x)\nr : Real\nhr : LT.lt r 1\n‚ä¢ Exists fun x‚ÇÄ => And (Not (Membership.mem F x‚ÇÄ)) (‚àÄ (y : E), Membership.mem F y ‚Üí LE.le (HMul.hMul r (Norm.norm x‚ÇÄ)) (Norm.norm (HSub.hSub x‚ÇÄ y)))","decl":"/-- Riesz's lemma, which usually states that it is possible to find a\nvector with norm 1 whose distance to a closed proper subspace is\narbitrarily close to 1. The statement here is in terms of multiples of\nnorms, since in general the existence of an element of norm exactly 1\nis not guaranteed. For a variant giving an element with norm in `[1, R]`, see\n`riesz_lemma_of_norm_lt`. -/\ntheorem riesz_lemma {F : Subspace ùïú E} (hFc : IsClosed (F : Set E)) (hF : ‚àÉ x : E, x ‚àâ F) {r : ‚Ñù}\n    (hr : r < 1) : ‚àÉ x‚ÇÄ : E, x‚ÇÄ ‚àâ F ‚àß ‚àÄ y ‚àà F, r * ‚Äñx‚ÇÄ‚Äñ ‚â§ ‚Äñx‚ÇÄ - y‚Äñ := by\n  classical\n    obtain ‚ü®x, hx‚ü© : ‚àÉ x : E, x ‚àâ F := hF\n    let d := Metric.infDist x F\n    have hFn : (F : Set E).Nonempty := ‚ü®_, F.zero_mem‚ü©\n    have hdp : 0 < d :=\n      lt_of_le_of_ne Metric.infDist_nonneg fun heq =>\n        hx ((hFc.mem_iff_infDist_zero hFn).2 heq.symm)\n    let r' := max r 2‚Åª¬π\n    have hr' : r' < 1 := by\n      simp only [r', max_lt_iff, hr, true_and]\n      norm_num\n    have hlt : 0 < r' := lt_of_lt_of_le (by norm_num) (le_max_right r 2‚Åª¬π)\n    have hdlt : d < d / r' := (lt_div_iff‚ÇÄ hlt).mpr ((mul_lt_iff_lt_one_right hdp).2 hr')\n    obtain ‚ü®y‚ÇÄ, hy‚ÇÄF, hxy‚ÇÄ‚ü© : ‚àÉ y ‚àà F, dist x y < d / r' := (Metric.infDist_lt_iff hFn).mp hdlt\n    have x_ne_y‚ÇÄ : x - y‚ÇÄ ‚àâ F := by\n      by_contra h\n      have : x - y‚ÇÄ + y‚ÇÄ ‚àà F := F.add_mem h hy‚ÇÄF\n      simp only [neg_add_cancel_right, sub_eq_add_neg] at this\n      exact hx this\n    refine ‚ü®x - y‚ÇÄ, x_ne_y‚ÇÄ, fun y hy => le_of_lt ?_‚ü©\n    have hy‚ÇÄy : y‚ÇÄ + y ‚àà F := F.add_mem hy‚ÇÄF hy\n    calc\n      r * ‚Äñx - y‚ÇÄ‚Äñ ‚â§ r' * ‚Äñx - y‚ÇÄ‚Äñ := by gcongr; apply le_max_left\n      _ < d := by\n        rw [‚Üê dist_eq_norm]\n        exact (lt_div_iff‚ÇÄ' hlt).1 hxy‚ÇÄ\n      _ ‚â§ dist x (y‚ÇÄ + y) := Metric.infDist_le_dist_of_mem hy‚ÇÄy\n      _ = ‚Äñx - y‚ÇÄ - y‚Äñ := by rw [sub_sub, dist_eq_norm]\n\n"}
{"name":"riesz_lemma_of_norm_lt","module":"Mathlib.Analysis.NormedSpace.RieszLemma","initialProofState":"ùïú : Type u_1\ninst‚úù¬≤ : NormedField ùïú\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace ùïú E\nc : ùïú\nhc : LT.lt 1 (Norm.norm c)\nR : Real\nhR : LT.lt (Norm.norm c) R\nF : Subspace ùïú E\nhFc : IsClosed ‚ÜëF\nhF : Exists fun x => Not (Membership.mem F x)\n‚ä¢ Exists fun x‚ÇÄ => And (LE.le (Norm.norm x‚ÇÄ) R) (‚àÄ (y : E), Membership.mem F y ‚Üí LE.le 1 (Norm.norm (HSub.hSub x‚ÇÄ y)))","decl":"/--\nA version of Riesz lemma: given a strict closed subspace `F`, one may find an element of norm `‚â§ R`\nwhich is at distance at least `1` of every element of `F`. Here, `R` is any given constant\nstrictly larger than the norm of an element of norm `> 1`. For a version without an `R`, see\n`riesz_lemma`.\n\nSince we are considering a general nontrivially normed field, there may be a gap in possible norms\n(for instance no element of norm in `(1,2)`). Hence, we can not allow `R` arbitrarily close to `1`,\nand require `R > ‚Äñc‚Äñ` for some `c : ùïú` with norm `> 1`.\n-/\ntheorem riesz_lemma_of_norm_lt {c : ùïú} (hc : 1 < ‚Äñc‚Äñ) {R : ‚Ñù} (hR : ‚Äñc‚Äñ < R) {F : Subspace ùïú E}\n    (hFc : IsClosed (F : Set E)) (hF : ‚àÉ x : E, x ‚àâ F) :\n    ‚àÉ x‚ÇÄ : E, ‚Äñx‚ÇÄ‚Äñ ‚â§ R ‚àß ‚àÄ y ‚àà F, 1 ‚â§ ‚Äñx‚ÇÄ - y‚Äñ := by\n  have Rpos : 0 < R := (norm_nonneg _).trans_lt hR\n  have : ‚Äñc‚Äñ / R < 1 := by\n    rw [div_lt_iff‚ÇÄ Rpos]\n    simpa using hR\n  rcases riesz_lemma hFc hF this with ‚ü®x, xF, hx‚ü©\n  have x0 : x ‚â† 0 := fun H => by simp [H] at xF\n  obtain ‚ü®d, d0, dxlt, ledx, -‚ü© :\n    ‚àÉ d : ùïú, d ‚â† 0 ‚àß ‚Äñd ‚Ä¢ x‚Äñ < R ‚àß R / ‚Äñc‚Äñ ‚â§ ‚Äñd ‚Ä¢ x‚Äñ ‚àß ‚Äñd‚Äñ‚Åª¬π ‚â§ R‚Åª¬π * ‚Äñc‚Äñ * ‚Äñx‚Äñ :=\n    rescale_to_shell hc Rpos x0\n  refine ‚ü®d ‚Ä¢ x, dxlt.le, fun y hy => ?_‚ü©\n  set y' := d‚Åª¬π ‚Ä¢ y\n  have yy' : y = d ‚Ä¢ y' := by simp [y', smul_smul, mul_inv_cancel‚ÇÄ d0]\n  calc\n    1 = ‚Äñc‚Äñ / R * (R / ‚Äñc‚Äñ) := by field_simp [Rpos.ne', (zero_lt_one.trans hc).ne']\n    _ ‚â§ ‚Äñc‚Äñ / R * ‚Äñd ‚Ä¢ x‚Äñ := by gcongr\n    _ = ‚Äñd‚Äñ * (‚Äñc‚Äñ / R * ‚Äñx‚Äñ) := by\n      simp only [norm_smul]\n      ring\n    _ ‚â§ ‚Äñd‚Äñ * ‚Äñx - y'‚Äñ := by gcongr; exact hx y' (by simp [y', Submodule.smul_mem _ _ hy])\n    _ = ‚Äñd ‚Ä¢ x - y‚Äñ := by rw [yy', ‚Üê smul_sub, norm_smul]\n\n"}
{"name":"Metric.closedBall_infDist_compl_subset_closure","module":"Mathlib.Analysis.NormedSpace.RieszLemma","initialProofState":"F : Type u_3\ninst‚úù¬π : SeminormedAddCommGroup F\ninst‚úù : NormedSpace Real F\nx : F\ns : Set F\nhx : Membership.mem s x\n‚ä¢ HasSubset.Subset (Metric.closedBall x (Metric.infDist x (HasCompl.compl s))) (closure s)","decl":"theorem Metric.closedBall_infDist_compl_subset_closure {x : F} {s : Set F} (hx : x ‚àà s) :\n    closedBall x (infDist x s·∂ú) ‚äÜ closure s := by\n  rcases eq_or_ne (infDist x s·∂ú) 0 with h‚ÇÄ | h‚ÇÄ\n  ¬∑ rw [h‚ÇÄ, closedBall_zero']\n    exact closure_mono (singleton_subset_iff.2 hx)\n  ¬∑ rw [‚Üê closure_ball x h‚ÇÄ]\n    exact closure_mono ball_infDist_compl_subset\n"}
