{"name":"Units.val_add","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\nx : Units R\nt : R\nh : LT.lt (Norm.norm t) (Inv.inv (Norm.norm ↑(Inv.inv x)))\n⊢ Eq (↑(x.add t h)) (HAdd.hAdd (↑x) t)","decl":"/-- In a normed ring with summable geometric series, a perturbation of a unit `x` by an\nelement `t` of distance less than `‖x⁻¹‖⁻¹` from `x` is a unit.\nHere we construct its `Units` structure. -/\n@[simps! val]\ndef add (x : Rˣ) (t : R) (h : ‖t‖ < ‖(↑x⁻¹ : R)‖⁻¹) : Rˣ :=\n  Units.copy -- to make `add_val` true definitionally, for convenience\n    (x * Units.oneSub (-((x⁻¹).1 * t)) (by\n      nontriviality R using zero_lt_one\n      have hpos : 0 < ‖(↑x⁻¹ : R)‖ := Units.norm_pos x⁻¹\n      calc\n        ‖-(↑x⁻¹ * t)‖ = ‖↑x⁻¹ * t‖ := by rw [norm_neg]\n        _ ≤ ‖(↑x⁻¹ : R)‖ * ‖t‖ := norm_mul_le (x⁻¹).1 _\n        _ < ‖(↑x⁻¹ : R)‖ * ‖(↑x⁻¹ : R)‖⁻¹ := by nlinarith only [h, hpos]\n        _ = 1 := mul_inv_cancel₀ (ne_of_gt hpos)))\n    (x + t) (by simp [mul_add]) _ rfl\n\n"}
{"name":"Units.val_ofNearby","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\nx : Units R\ny : R\nh : LT.lt (Norm.norm (HSub.hSub y ↑x)) (Inv.inv (Norm.norm ↑(Inv.inv x)))\n⊢ Eq (↑(x.ofNearby y h)) y","decl":"/-- In a normed ring with summable geometric series, an element `y` of distance less\nthan `‖x⁻¹‖⁻¹` from `x` is a unit. Here we construct its `Units` structure. -/\n@[simps! val]\ndef ofNearby (x : Rˣ) (y : R) (h : ‖y - x‖ < ‖(↑x⁻¹ : R)‖⁻¹) : Rˣ :=\n  (x.add (y - x : R) h).copy y (by simp) _ rfl\n\n"}
{"name":"Units.isOpen","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\n⊢ IsOpen (setOf fun x => IsUnit x)","decl":"/-- The group of units of a normed ring with summable geometric series is an open subset\nof the ring. -/\nprotected theorem isOpen : IsOpen { x : R | IsUnit x } := by\n  nontriviality R\n  rw [Metric.isOpen_iff]\n  rintro _ ⟨x, rfl⟩\n  refine ⟨‖(↑x⁻¹ : R)‖⁻¹, _root_.inv_pos.mpr (Units.norm_pos x⁻¹), fun y hy ↦ ?_⟩\n  rw [mem_ball_iff_norm] at hy\n  exact (x.ofNearby y hy).isUnit\n\n"}
{"name":"Units.nhds","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\nx : Units R\n⊢ Membership.mem (nhds ↑x) (setOf fun x => IsUnit x)","decl":"protected theorem nhds (x : Rˣ) : { x : R | IsUnit x } ∈ 𝓝 (x : R) :=\n  IsOpen.mem_nhds Units.isOpen x.isUnit\n\n"}
{"name":"nonunits.subset_compl_ball","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\n⊢ HasSubset.Subset (nonunits R) (HasCompl.compl (Metric.ball 1 1))","decl":"/-- The `nonunits` in a normed ring with summable geometric series are contained in the\ncomplement of the ball of radius `1` centered at `1 : R`. -/\ntheorem subset_compl_ball : nonunits R ⊆ (Metric.ball (1 : R) 1)ᶜ := fun x hx h₁ ↦ hx <|\n  sub_sub_self 1 x ▸ (Units.oneSub (1 - x) (by rwa [mem_ball_iff_norm'] at h₁)).isUnit\n\n-- The `nonunits` in a normed ring with summable geometric series are a closed set\n"}
{"name":"nonunits.isClosed","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\n⊢ IsClosed (nonunits R)","decl":"protected theorem isClosed : IsClosed (nonunits R) :=\n  Units.isOpen.isClosed_compl\n\n"}
{"name":"NormedRing.inverse_one_sub","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\nt : R\nh : LT.lt (Norm.norm t) 1\n⊢ Eq (Ring.inverse (HSub.hSub 1 t)) ↑(Inv.inv (Units.oneSub t h))","decl":"theorem inverse_one_sub (t : R) (h : ‖t‖ < 1) : inverse (1 - t) = ↑(Units.oneSub t h)⁻¹ := by\n  rw [← inverse_unit (Units.oneSub t h), Units.val_oneSub]\n\n"}
{"name":"NormedRing.inverse_add","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\nx : Units R\n⊢ Filter.Eventually (fun t => Eq (Ring.inverse (HAdd.hAdd (↑x) t)) (HMul.hMul (Ring.inverse (HAdd.hAdd 1 (HMul.hMul (↑(Inv.inv x)) t))) ↑(Inv.inv x))) (nhds 0)","decl":"/-- The formula `Ring.inverse (x + t) = Ring.inverse (1 + x⁻¹ * t) * x⁻¹` holds for `t` sufficiently\nsmall. -/\ntheorem inverse_add (x : Rˣ) :\n    ∀ᶠ t in 𝓝 0, inverse ((x : R) + t) = inverse (1 + ↑x⁻¹ * t) * ↑x⁻¹ := by\n  nontriviality R\n  rw [Metric.eventually_nhds_iff]\n  refine ⟨‖(↑x⁻¹ : R)‖⁻¹, by cancel_denoms, fun t ht ↦ ?_⟩\n  rw [dist_zero_right] at ht\n  rw [← x.val_add t ht, inverse_unit, Units.add, Units.copy_eq, mul_inv_rev, Units.val_mul,\n    ← inverse_unit, Units.val_oneSub, sub_neg_eq_add]\n\n"}
{"name":"NormedRing.inverse_one_sub_nth_order'","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\nn : Nat\nt : R\nht : LT.lt (Norm.norm t) 1\n⊢ Eq (Ring.inverse (HSub.hSub 1 t)) (HAdd.hAdd ((Finset.range n).sum fun i => HPow.hPow t i) (HMul.hMul (HPow.hPow t n) (Ring.inverse (HSub.hSub 1 t))))","decl":"theorem inverse_one_sub_nth_order' (n : ℕ) {t : R} (ht : ‖t‖ < 1) :\n    inverse ((1 : R) - t) = (∑ i ∈ range n, t ^ i) + t ^ n * inverse (1 - t) :=\n  have := _root_.summable_geometric_of_norm_lt_one ht\n  calc inverse (1 - t) = ∑' i : ℕ, t ^ i := inverse_one_sub t ht\n    _ = ∑ i ∈ range n, t ^ i + ∑' i : ℕ, t ^ (i + n) := (sum_add_tsum_nat_add _ this).symm\n    _ = (∑ i ∈ range n, t ^ i) + t ^ n * inverse (1 - t) := by\n      simp only [inverse_one_sub t ht, add_comm _ n, pow_add, this.tsum_mul_left]; rfl\n\n"}
{"name":"NormedRing.inverse_one_sub_nth_order","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\nn : Nat\n⊢ Filter.Eventually (fun t => Eq (Ring.inverse (HSub.hSub 1 t)) (HAdd.hAdd ((Finset.range n).sum fun i => HPow.hPow t i) (HMul.hMul (HPow.hPow t n) (Ring.inverse (HSub.hSub 1 t))))) (nhds 0)","decl":"theorem inverse_one_sub_nth_order (n : ℕ) :\n    ∀ᶠ t in 𝓝 0, inverse ((1 : R) - t) = (∑ i ∈ range n, t ^ i) + t ^ n * inverse (1 - t) :=\n  Metric.eventually_nhds_iff.2 ⟨1, one_pos, fun t ht ↦ inverse_one_sub_nth_order' n <| by\n    rwa [← dist_zero_right]⟩\n\n\n"}
{"name":"NormedRing.inverse_add_nth_order","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\nx : Units R\nn : Nat\n⊢ Filter.Eventually (fun t => Eq (Ring.inverse (HAdd.hAdd (↑x) t)) (HAdd.hAdd (HMul.hMul ((Finset.range n).sum fun i => HPow.hPow (HMul.hMul (Neg.neg ↑(Inv.inv x)) t) i) ↑(Inv.inv x)) (HMul.hMul (HPow.hPow (HMul.hMul (Neg.neg ↑(Inv.inv x)) t) n) (Ring.inverse (HAdd.hAdd (↑x) t))))) (nhds 0)","decl":"/-- The formula\n`Ring.inverse (x + t) =\n  (∑ i ∈ Finset.range n, (- x⁻¹ * t) ^ i) * x⁻¹ + (- x⁻¹ * t) ^ n * Ring.inverse (x + t)`\nholds for `t` sufficiently small. -/\ntheorem inverse_add_nth_order (x : Rˣ) (n : ℕ) :\n    ∀ᶠ t in 𝓝 0, inverse ((x : R) + t) =\n      (∑ i ∈ range n, (-↑x⁻¹ * t) ^ i) * ↑x⁻¹ + (-↑x⁻¹ * t) ^ n * inverse (x + t) := by\n  have hzero : Tendsto (-(↑x⁻¹ : R) * ·) (𝓝 0) (𝓝 0) :=\n    (mulLeft_continuous _).tendsto' _ _ <| mul_zero _\n  filter_upwards [inverse_add x, hzero.eventually (inverse_one_sub_nth_order n)] with t ht ht'\n  rw [neg_mul, sub_neg_eq_add] at ht'\n  conv_lhs => rw [ht, ht', add_mul, ← neg_mul, mul_assoc]\n  rw [ht]\n\n"}
{"name":"NormedRing.inverse_one_sub_norm","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\n⊢ Asymptotics.IsBigO (nhds 0) (fun t => Ring.inverse (HSub.hSub 1 t)) fun _t => 1","decl":"theorem inverse_one_sub_norm : (fun t : R => inverse (1 - t)) =O[𝓝 0] (fun _t => 1 : R → ℝ) := by\n  simp only [IsBigO, IsBigOWith, Metric.eventually_nhds_iff]\n  refine ⟨‖(1 : R)‖ + 1, (2 : ℝ)⁻¹, by norm_num, fun t ht ↦ ?_⟩\n  rw [dist_zero_right] at ht\n  have ht' : ‖t‖ < 1 := by linarith\n  simp only [inverse_one_sub t ht', norm_one, mul_one, Set.mem_setOf_eq]\n  change ‖∑' n : ℕ, t ^ n‖ ≤ _\n  have := tsum_geometric_le_of_norm_lt_one t ht'\n  have : (1 - ‖t‖)⁻¹ ≤ 2 := by\n    rw [← inv_inv (2 : ℝ)]\n    refine inv_anti₀ (by norm_num) ?_\n    linarith\n  linarith\n\n"}
{"name":"NormedRing.inverse_add_norm","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\nx : Units R\n⊢ Asymptotics.IsBigO (nhds 0) (fun t => Ring.inverse (HAdd.hAdd (↑x) t)) fun _t => 1","decl":"/-- The function `fun t ↦ inverse (x + t)` is O(1) as `t → 0`. -/\ntheorem inverse_add_norm (x : Rˣ) : (fun t : R => inverse (↑x + t)) =O[𝓝 0] fun _t => (1 : ℝ) := by\n  refine EventuallyEq.trans_isBigO (inverse_add x) (one_mul (1 : ℝ) ▸ ?_)\n  simp only [← sub_neg_eq_add, ← neg_mul]\n  have hzero : Tendsto (-(↑x⁻¹ : R) * ·) (𝓝 0) (𝓝 0) :=\n    (mulLeft_continuous _).tendsto' _ _ <| mul_zero _\n  exact (inverse_one_sub_norm.comp_tendsto hzero).mul (isBigO_const_const _ one_ne_zero _)\n\n"}
{"name":"NormedRing.inverse_add_norm_diff_nth_order","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\nx : Units R\nn : Nat\n⊢ Asymptotics.IsBigO (nhds 0) (fun t => HSub.hSub (Ring.inverse (HAdd.hAdd (↑x) t)) (HMul.hMul ((Finset.range n).sum fun i => HPow.hPow (HMul.hMul (Neg.neg ↑(Inv.inv x)) t) i) ↑(Inv.inv x))) fun t => HPow.hPow (Norm.norm t) n","decl":"/-- The function\n`fun t ↦ Ring.inverse (x + t) - (∑ i ∈ Finset.range n, (- x⁻¹ * t) ^ i) * x⁻¹`\nis `O(t ^ n)` as `t → 0`. -/\ntheorem inverse_add_norm_diff_nth_order (x : Rˣ) (n : ℕ) :\n    (fun t : R => inverse (↑x + t) - (∑ i ∈ range n, (-↑x⁻¹ * t) ^ i) * ↑x⁻¹) =O[𝓝 (0 : R)]\n      fun t => ‖t‖ ^ n := by\n  refine EventuallyEq.trans_isBigO (.sub (inverse_add_nth_order x n) (.refl _ _)) ?_\n  simp only [add_sub_cancel_left]\n  refine ((isBigO_refl _ _).norm_right.mul (inverse_add_norm x)).trans ?_\n  simp only [mul_one, isBigO_norm_left]\n  exact ((isBigO_refl _ _).norm_right.const_mul_left _).pow _\n\n"}
{"name":"NormedRing.inverse_add_norm_diff_first_order","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\nx : Units R\n⊢ Asymptotics.IsBigO (nhds 0) (fun t => HSub.hSub (Ring.inverse (HAdd.hAdd (↑x) t)) ↑(Inv.inv x)) fun t => Norm.norm t","decl":"/-- The function `fun t ↦ Ring.inverse (x + t) - x⁻¹` is `O(t)` as `t → 0`. -/\ntheorem inverse_add_norm_diff_first_order (x : Rˣ) :\n    (fun t : R => inverse (↑x + t) - ↑x⁻¹) =O[𝓝 0] fun t => ‖t‖ := by\n  simpa using inverse_add_norm_diff_nth_order x 1\n\n"}
{"name":"NormedRing.inverse_add_norm_diff_second_order","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\nx : Units R\n⊢ Asymptotics.IsBigO (nhds 0) (fun t => HAdd.hAdd (HSub.hSub (Ring.inverse (HAdd.hAdd (↑x) t)) ↑(Inv.inv x)) (HMul.hMul (HMul.hMul (↑(Inv.inv x)) t) ↑(Inv.inv x))) fun t => HPow.hPow (Norm.norm t) 2","decl":"/-- The function `fun t ↦ Ring.inverse (x + t) - x⁻¹ + x⁻¹ * t * x⁻¹` is `O(t ^ 2)` as `t → 0`. -/\ntheorem inverse_add_norm_diff_second_order (x : Rˣ) :\n    (fun t : R => inverse (↑x + t) - ↑x⁻¹ + ↑x⁻¹ * t * ↑x⁻¹) =O[𝓝 0] fun t => ‖t‖ ^ 2 := by\n  convert inverse_add_norm_diff_nth_order x 2 using 2\n  simp only [sum_range_succ, sum_range_zero, zero_add, pow_zero, pow_one, add_mul, one_mul,\n    ← sub_sub, neg_mul, sub_neg_eq_add]\n\n"}
{"name":"NormedRing.inverse_continuousAt","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\nx : Units R\n⊢ ContinuousAt Ring.inverse ↑x","decl":"/-- The function `Ring.inverse` is continuous at each unit of `R`. -/\ntheorem inverse_continuousAt (x : Rˣ) : ContinuousAt inverse (x : R) := by\n  have h_is_o : (fun t : R => inverse (↑x + t) - ↑x⁻¹) =o[𝓝 0] (fun _ => 1 : R → ℝ) :=\n    (inverse_add_norm_diff_first_order x).trans_isLittleO (isLittleO_id_const one_ne_zero).norm_left\n  have h_lim : Tendsto (fun y : R => y - x) (𝓝 x) (𝓝 0) := by\n    refine tendsto_zero_iff_norm_tendsto_zero.mpr ?_\n    exact tendsto_iff_norm_sub_tendsto_zero.mp tendsto_id\n  rw [ContinuousAt, tendsto_iff_norm_sub_tendsto_zero, inverse_unit]\n  simpa [Function.comp_def] using h_is_o.norm_left.tendsto_div_nhds_zero.comp h_lim\n\n"}
{"name":"Units.isOpenEmbedding_val","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\n⊢ Topology.IsOpenEmbedding Units.val","decl":"/-- In a normed ring with summable geometric series, the coercion from `Rˣ` (equipped with the\ninduced topology from the embedding in `R × R`) to `R` is an open embedding. -/\ntheorem isOpenEmbedding_val : IsOpenEmbedding (val : Rˣ → R) where\n  toIsEmbedding := isEmbedding_val_mk'\n    (fun _ ⟨u, hu⟩ ↦ hu ▸ (inverse_continuousAt u).continuousWithinAt) Ring.inverse_unit\n  isOpen_range := Units.isOpen\n\n"}
{"name":"Units.openEmbedding_val","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\n⊢ Topology.IsOpenEmbedding Units.val","decl":"@[deprecated (since := \"2024-10-18\")]\nalias openEmbedding_val := isOpenEmbedding_val\n\n"}
{"name":"Units.isOpenMap_val","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\n⊢ IsOpenMap Units.val","decl":"/-- In a normed ring with summable geometric series, the coercion from `Rˣ` (equipped with the\ninduced topology from the embedding in `R × R`) to `R` is an open map. -/\ntheorem isOpenMap_val : IsOpenMap (val : Rˣ → R) :=\n  isOpenEmbedding_val.isOpenMap\n\n"}
{"name":"Ideal.eq_top_of_norm_lt_one","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\nI : Ideal R\nx : R\nhxI : Membership.mem I x\nhx : LT.lt (Norm.norm (HSub.hSub 1 x)) 1\n⊢ Eq I Top.top","decl":"/-- An ideal which contains an element within `1` of `1 : R` is the unit ideal. -/\ntheorem eq_top_of_norm_lt_one (I : Ideal R) {x : R} (hxI : x ∈ I) (hx : ‖1 - x‖ < 1) : I = ⊤ :=\n  let u := Units.oneSub (1 - x) hx\n  I.eq_top_iff_one.mpr <| by\n    simpa only [show u.inv * x = 1 by simp [u]] using I.mul_mem_left u.inv hxI\n\n"}
{"name":"Ideal.closure_ne_top","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\nI : Ideal R\nhI : Ne I Top.top\n⊢ Ne I.closure Top.top","decl":"/-- The `Ideal.closure` of a proper ideal in a normed ring with summable\ngeometric series is proper. -/\ntheorem closure_ne_top (I : Ideal R) (hI : I ≠ ⊤) : I.closure ≠ ⊤ := by\n  have h := closure_minimal (coe_subset_nonunits hI) nonunits.isClosed\n  simpa only [I.closure.eq_top_iff_one, Ne] using mt (@h 1) one_not_mem_nonunits\n\n"}
{"name":"Ideal.IsMaximal.closure_eq","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\nI : Ideal R\nhI : I.IsMaximal\n⊢ Eq I.closure I","decl":"/-- The `Ideal.closure` of a maximal ideal in a normed ring with summable\ngeometric series is the ideal itself. -/\ntheorem IsMaximal.closure_eq {I : Ideal R} (hI : I.IsMaximal) : I.closure = I :=\n  (hI.eq_of_le (I.closure_ne_top hI.ne_top) subset_closure).symm\n\n"}
{"name":"Ideal.IsMaximal.isClosed","module":"Mathlib.Analysis.Normed.Ring.Units","initialProofState":"R : Type u_1\ninst✝¹ : NormedRing R\ninst✝ : HasSummableGeomSeries R\nI : Ideal R\nhI : I.IsMaximal\n⊢ IsClosed ↑I","decl":"/-- Maximal ideals in normed rings with summable geometric series are closed. -/\ninstance IsMaximal.isClosed {I : Ideal R} [hI : I.IsMaximal] : IsClosed (I : Set R) :=\n  isClosed_of_closure_subset <| Eq.subset <| congr_arg ((↑) : Ideal R → Set R) hI.closure_eq\n\n"}
