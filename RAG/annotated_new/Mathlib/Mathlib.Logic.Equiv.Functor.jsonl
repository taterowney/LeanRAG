{"name":"Functor.mapEquiv_apply","module":"Mathlib.Logic.Equiv.Functor","initialProofState":"α β : Type u\nf : Type u → Type v\ninst✝¹ : Functor f\ninst✝ : LawfulFunctor f\nh : Equiv α β\nx : f α\n⊢ Eq ((Functor.mapEquiv f h) x) (Functor.map (⇑h) x)","decl":"@[simp]\ntheorem mapEquiv_apply (h : α ≃ β) (x : f α) : (mapEquiv f h : f α ≃ f β) x = map h x :=\n  rfl\n\n"}
{"name":"Functor.mapEquiv_symm_apply","module":"Mathlib.Logic.Equiv.Functor","initialProofState":"α β : Type u\nf : Type u → Type v\ninst✝¹ : Functor f\ninst✝ : LawfulFunctor f\nh : Equiv α β\ny : f β\n⊢ Eq ((Functor.mapEquiv f h).symm y) (Functor.map (⇑h.symm) y)","decl":"@[simp]\ntheorem mapEquiv_symm_apply (h : α ≃ β) (y : f β) :\n    (mapEquiv f h : f α ≃ f β).symm y = map h.symm y :=\n  rfl\n\n"}
{"name":"Functor.mapEquiv_refl","module":"Mathlib.Logic.Equiv.Functor","initialProofState":"α : Type u\nf : Type u → Type v\ninst✝¹ : Functor f\ninst✝ : LawfulFunctor f\n⊢ Eq (Functor.mapEquiv f (Equiv.refl α)) (Equiv.refl (f α))","decl":"@[simp]\ntheorem mapEquiv_refl : mapEquiv f (Equiv.refl α) = Equiv.refl (f α) := by\n  ext x\n  simp only [mapEquiv_apply, refl_apply]\n  exact LawfulFunctor.id_map x\n\n"}
{"name":"Bifunctor.mapEquiv_apply","module":"Mathlib.Logic.Equiv.Functor","initialProofState":"α β : Type u\nα' β' : Type v\nF : Type u → Type v → Type w\ninst✝¹ : Bifunctor F\ninst✝ : LawfulBifunctor F\nh : Equiv α β\nh' : Equiv α' β'\nx : F α α'\n⊢ Eq ((Bifunctor.mapEquiv F h h') x) (Bifunctor.bimap (⇑h) (⇑h') x)","decl":"@[simp]\ntheorem mapEquiv_apply (h : α ≃ β) (h' : α' ≃ β') (x : F α α') :\n    (mapEquiv F h h' : F α α' ≃ F β β') x = bimap h h' x :=\n  rfl\n\n"}
{"name":"Bifunctor.mapEquiv_symm_apply","module":"Mathlib.Logic.Equiv.Functor","initialProofState":"α β : Type u\nα' β' : Type v\nF : Type u → Type v → Type w\ninst✝¹ : Bifunctor F\ninst✝ : LawfulBifunctor F\nh : Equiv α β\nh' : Equiv α' β'\ny : F β β'\n⊢ Eq ((Bifunctor.mapEquiv F h h').symm y) (Bifunctor.bimap (⇑h.symm) (⇑h'.symm) y)","decl":"@[simp]\ntheorem mapEquiv_symm_apply (h : α ≃ β) (h' : α' ≃ β') (y : F β β') :\n    (mapEquiv F h h' : F α α' ≃ F β β').symm y = bimap h.symm h'.symm y :=\n  rfl\n\n"}
{"name":"Bifunctor.mapEquiv_refl_refl","module":"Mathlib.Logic.Equiv.Functor","initialProofState":"α : Type u\nα' : Type v\nF : Type u → Type v → Type w\ninst✝¹ : Bifunctor F\ninst✝ : LawfulBifunctor F\n⊢ Eq (Bifunctor.mapEquiv F (Equiv.refl α) (Equiv.refl α')) (Equiv.refl (F α α'))","decl":"@[simp]\ntheorem mapEquiv_refl_refl : mapEquiv F (Equiv.refl α) (Equiv.refl α') = Equiv.refl (F α α') := by\n  ext x\n  simp [id_bimap]\n\n"}
