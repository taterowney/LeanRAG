{"name":"ContinuousLinearMapWOT.instContinuousLinearMapClass","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\n⊢ ContinuousLinearMapClass (ContinuousLinearMapWOT 𝕜 E F) 𝕜 E F","decl":"instance instContinuousLinearMapClass : ContinuousLinearMapClass (E →WOT[𝕜] F) 𝕜 E F where\n  map_add f x y := by simp only [DFunLike.coe]; simp\n  map_smulₛₗ f r x := by simp only [DFunLike.coe]; simp\n  map_continuous f := ContinuousLinearMap.continuous ((ContinuousLinearMap.toWOT 𝕜 E F).symm f)\n\n"}
{"name":"ContinuousLinearMap.toWOT_apply","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\nA : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\n⊢ Eq (((ContinuousLinearMap.toWOT 𝕜 E F) A) x) (A x)","decl":"lemma _root_.ContinuousLinearMap.toWOT_apply {A : E →L[𝕜] F} {x : E} :\n    ((ContinuousLinearMap.toWOT 𝕜 E F) A) x = A x := rfl\n\n"}
{"name":"ContinuousLinearMapWOT.ext","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\nA B : ContinuousLinearMapWOT 𝕜 E F\nh : ∀ (x : E), Eq (A x) (B x)\n⊢ Eq A B","decl":"unseal ContinuousLinearMapWOT in\nlemma ext {A B : E →WOT[𝕜] F} (h : ∀ x, A x = B x) : A = B := ContinuousLinearMap.ext h\n\n"}
{"name":"ContinuousLinearMapWOT.ext_iff","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\nA B : ContinuousLinearMapWOT 𝕜 E F\n⊢ Iff (Eq A B) (∀ (x : E), Eq (A x) (B x))","decl":"unseal ContinuousLinearMapWOT in\nlemma ext_iff {A B : E →WOT[𝕜] F} : A = B ↔ ∀ x, A x = B x := ContinuousLinearMap.ext_iff\n\n-- This `ext` lemma is set at a lower priority than the default of 1000, so that the\n-- version with an inner product (`ContinuousLinearMapWOT.ext_inner`) takes precedence\n-- in the case of Hilbert spaces.\n"}
{"name":"ContinuousLinearMapWOT.ext_dual","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\nH : SeparatingDual 𝕜 F\nA B : ContinuousLinearMapWOT 𝕜 E F\nh : ∀ (x : E) (y : ContinuousLinearMap (RingHom.id 𝕜) F 𝕜), Eq (y (A x)) (y (B x))\n⊢ Eq A B","decl":"@[ext 900]\nlemma ext_dual [H : SeparatingDual 𝕜 F] {A B : E →WOT[𝕜] F}\n    (h : ∀ x (y : F⋆), y (A x) = y (B x)) : A = B := by\n  simp_rw [ext_iff, ← (separatingDual_iff_injective.mp H).eq_iff, LinearMap.ext_iff]\n  exact h\n\n"}
{"name":"ContinuousLinearMapWOT.ext_dual_iff","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\nH : SeparatingDual 𝕜 F\nA B : ContinuousLinearMapWOT 𝕜 E F\n⊢ Iff (Eq A B) (∀ (x : E) (y : ContinuousLinearMap (RingHom.id 𝕜) F 𝕜), Eq (y (A x)) (y (B x)))","decl":"@[ext 900]\nlemma ext_dual [H : SeparatingDual 𝕜 F] {A B : E →WOT[𝕜] F}\n    (h : ∀ x (y : F⋆), y (A x) = y (B x)) : A = B := by\n  simp_rw [ext_iff, ← (separatingDual_iff_injective.mp H).eq_iff, LinearMap.ext_iff]\n  exact h\n\n"}
{"name":"ContinuousLinearMapWOT.zero_apply","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\nx : E\n⊢ Eq (0 x) 0","decl":"@[simp] lemma zero_apply (x : E) : (0 : E →WOT[𝕜] F) x = 0 := by simp only [DFunLike.coe]; rfl\n\n"}
{"name":"ContinuousLinearMapWOT.add_apply","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\nf g : ContinuousLinearMapWOT 𝕜 E F\nx : E\n⊢ Eq ((HAdd.hAdd f g) x) (HAdd.hAdd (f x) (g x))","decl":"unseal ContinuousLinearMapWOT in\n@[simp] lemma add_apply {f g : E →WOT[𝕜] F} (x : E) : (f + g) x = f x + g x := by\n  simp only [DFunLike.coe]; rfl\n\n"}
{"name":"ContinuousLinearMapWOT.sub_apply","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\nf g : ContinuousLinearMapWOT 𝕜 E F\nx : E\n⊢ Eq ((HSub.hSub f g) x) (HSub.hSub (f x) (g x))","decl":"unseal ContinuousLinearMapWOT in\n@[simp] lemma sub_apply {f g : E →WOT[𝕜] F} (x : E) : (f - g) x = f x - g x := by\n  simp only [DFunLike.coe]; rfl\n\n"}
{"name":"ContinuousLinearMapWOT.neg_apply","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\nf : ContinuousLinearMapWOT 𝕜 E F\nx : E\n⊢ Eq ((Neg.neg f) x) (Neg.neg (f x))","decl":"unseal ContinuousLinearMapWOT in\n@[simp] lemma neg_apply {f : E →WOT[𝕜] F} (x : E) : (-f) x = -(f x) := by\n  simp only [DFunLike.coe]; rfl\n\n"}
{"name":"ContinuousLinearMapWOT.smul_apply","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\nf : ContinuousLinearMapWOT 𝕜 E F\nc : 𝕜\nx : E\n⊢ Eq ((HSMul.hSMul c f) x) (HSMul.hSMul c (f x))","decl":"unseal ContinuousLinearMapWOT in\n@[simp] lemma smul_apply {f : E →WOT[𝕜] F} (c : 𝕜) (x : E) : (c • f) x = c • (f x) := by\n  simp only [DFunLike.coe]; rfl\n\n"}
{"name":"ContinuousLinearMapWOT.inducingFn_apply","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\nf : ContinuousLinearMapWOT 𝕜 E F\nx : E\ny : ContinuousLinearMap (RingHom.id 𝕜) F 𝕜\n⊢ Eq ((ContinuousLinearMapWOT.inducingFn 𝕜 E F) f { fst := x, snd := y }) (y (f x))","decl":"@[simp]\nlemma inducingFn_apply {f : E →WOT[𝕜] F} {x : E} {y : F⋆} :\n    inducingFn 𝕜 E F f (x, y) = y (f x) :=\n  rfl\n\n"}
{"name":"ContinuousLinearMapWOT.continuous_inducingFn","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\n⊢ Continuous ⇑(ContinuousLinearMapWOT.inducingFn 𝕜 E F)","decl":"@[fun_prop]\nlemma continuous_inducingFn : Continuous (inducingFn 𝕜 E F) :=\n  continuous_induced_dom\n\n"}
{"name":"ContinuousLinearMapWOT.continuous_dual_apply","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\nx : E\ny : ContinuousLinearMap (RingHom.id 𝕜) F 𝕜\n⊢ Continuous fun A => y (A x)","decl":"lemma continuous_dual_apply (x : E) (y : F⋆) : Continuous fun (A : E →WOT[𝕜] F) => y (A x) := by\n  refine (continuous_pi_iff.mp continuous_inducingFn) ⟨x, y⟩\n\n"}
{"name":"ContinuousLinearMapWOT.continuous_of_dual_apply_continuous","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : AddCommGroup E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : AddCommGroup F\ninst✝⁴ : TopologicalSpace F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalAddGroup F\ninst✝¹ : ContinuousConstSMul 𝕜 F\nα : Type u_4\ninst✝ : TopologicalSpace α\ng : α → ContinuousLinearMapWOT 𝕜 E F\nh : ∀ (x : E) (y : ContinuousLinearMap (RingHom.id 𝕜) F 𝕜), Continuous fun a => y ((g a) x)\n⊢ Continuous g","decl":"@[fun_prop]\nlemma continuous_of_dual_apply_continuous {α : Type*} [TopologicalSpace α] {g : α → E →WOT[𝕜] F}\n    (h : ∀ x (y : F⋆), Continuous fun a => y (g a x)) : Continuous g :=\n  continuous_induced_rng.2 (continuous_pi_iff.mpr fun p => h p.1 p.2)\n\n"}
{"name":"ContinuousLinearMapWOT.isInducing_inducingFn","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\n⊢ Topology.IsInducing ⇑(ContinuousLinearMapWOT.inducingFn 𝕜 E F)","decl":"lemma isInducing_inducingFn : IsInducing (inducingFn 𝕜 E F) := ⟨rfl⟩\n\n"}
{"name":"ContinuousLinearMapWOT.isEmbedding_inducingFn","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : AddCommGroup E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : AddCommGroup F\ninst✝⁴ : TopologicalSpace F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalAddGroup F\ninst✝¹ : ContinuousConstSMul 𝕜 F\ninst✝ : SeparatingDual 𝕜 F\n⊢ Topology.IsEmbedding ⇑(ContinuousLinearMapWOT.inducingFn 𝕜 E F)","decl":"lemma isEmbedding_inducingFn [SeparatingDual 𝕜 F] : IsEmbedding (inducingFn 𝕜 E F) := by\n  refine Function.Injective.isEmbedding_induced fun A B hAB => ?_\n  rw [ContinuousLinearMapWOT.ext_dual_iff]\n  simpa [funext_iff] using hAB\n\n"}
{"name":"ContinuousLinearMapWOT.embedding_inducingFn","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : AddCommGroup E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : AddCommGroup F\ninst✝⁴ : TopologicalSpace F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalAddGroup F\ninst✝¹ : ContinuousConstSMul 𝕜 F\ninst✝ : SeparatingDual 𝕜 F\n⊢ Topology.IsEmbedding ⇑(ContinuousLinearMapWOT.inducingFn 𝕜 E F)","decl":"@[deprecated (since := \"2024-10-26\")]\nalias embedding_inducingFn := isEmbedding_inducingFn\n\n"}
{"name":"ContinuousLinearMapWOT.tendsto_iff_forall_dual_apply_tendsto","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\nα : Type u_4\nl : Filter α\nf : α → ContinuousLinearMapWOT 𝕜 E F\nA : ContinuousLinearMapWOT 𝕜 E F\n⊢ Iff (Filter.Tendsto f l (nhds A)) (∀ (x : E) (y : ContinuousLinearMap (RingHom.id 𝕜) F 𝕜), Filter.Tendsto (fun a => y ((f a) x)) l (nhds (y (A x))))","decl":"open Filter in\n/-- The defining property of the weak operator topology: a function `f` tends to\n`A : E →WOT[𝕜] F` along filter `l` iff `y (f a x)` tends to `y (A x)` along the same filter. -/\nlemma tendsto_iff_forall_dual_apply_tendsto {α : Type*} {l : Filter α} {f : α → E →WOT[𝕜] F}\n    {A : E →WOT[𝕜] F} :\n    Tendsto f l (𝓝 A) ↔ ∀ x (y : F⋆), Tendsto (fun a => y (f a x)) l (𝓝 (y (A x))) := by\n  simp [isInducing_inducingFn.tendsto_nhds_iff, tendsto_pi_nhds]\n\n"}
{"name":"ContinuousLinearMapWOT.le_nhds_iff_forall_dual_apply_le_nhds","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\nl : Filter (ContinuousLinearMapWOT 𝕜 E F)\nA : ContinuousLinearMapWOT 𝕜 E F\n⊢ Iff (LE.le l (nhds A)) (∀ (x : E) (y : ContinuousLinearMap (RingHom.id 𝕜) F 𝕜), LE.le (Filter.map (fun T => y (T x)) l) (nhds (y (A x))))","decl":"lemma le_nhds_iff_forall_dual_apply_le_nhds {l : Filter (E →WOT[𝕜] F)} {A : E →WOT[𝕜] F} :\n    l ≤ 𝓝 A ↔ ∀ x (y : F⋆), l.map (fun T => y (T x)) ≤ 𝓝 (y (A x)) :=\n  tendsto_iff_forall_dual_apply_tendsto (f := id)\n\n"}
{"name":"ContinuousLinearMapWOT.instT3Space","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : AddCommGroup E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : AddCommGroup F\ninst✝⁴ : TopologicalSpace F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalAddGroup F\ninst✝¹ : ContinuousConstSMul 𝕜 F\ninst✝ : SeparatingDual 𝕜 F\n⊢ T3Space (ContinuousLinearMapWOT 𝕜 E F)","decl":"instance instT3Space [SeparatingDual 𝕜 F] : T3Space (E →WOT[𝕜] F) := isEmbedding_inducingFn.t3Space\n\n"}
{"name":"ContinuousLinearMapWOT.instContinuousAdd","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\n⊢ ContinuousAdd (ContinuousLinearMapWOT 𝕜 E F)","decl":"instance instContinuousAdd : ContinuousAdd (E →WOT[𝕜] F) := .induced (inducingFn 𝕜 E F)\n"}
{"name":"ContinuousLinearMapWOT.instContinuousNeg","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\n⊢ ContinuousNeg (ContinuousLinearMapWOT 𝕜 E F)","decl":"instance instContinuousNeg : ContinuousNeg (E →WOT[𝕜] F) := .induced (inducingFn 𝕜 E F)\n"}
{"name":"ContinuousLinearMapWOT.instContinuousSMul","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\n⊢ ContinuousSMul 𝕜 (ContinuousLinearMapWOT 𝕜 E F)","decl":"instance instContinuousSMul : ContinuousSMul 𝕜 (E →WOT[𝕜] F) := .induced (inducingFn 𝕜 E F)\n\n"}
{"name":"ContinuousLinearMapWOT.instTopologicalAddGroup","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\n⊢ TopologicalAddGroup (ContinuousLinearMapWOT 𝕜 E F)","decl":"instance instTopologicalAddGroup : TopologicalAddGroup (E →WOT[𝕜] F) where\n\n"}
{"name":"ContinuousLinearMapWOT.instUniformAddGroup","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\n⊢ UniformAddGroup (ContinuousLinearMapWOT 𝕜 E F)","decl":"instance instUniformAddGroup : UniformAddGroup (E →WOT[𝕜] F) := .comap (inducingFn 𝕜 E F)\n\n"}
{"name":"ContinuousLinearMapWOT.withSeminorms","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\n⊢ WithSeminorms (ContinuousLinearMapWOT.seminormFamily 𝕜 E F)","decl":"lemma withSeminorms : WithSeminorms (seminormFamily 𝕜 E F) :=\n  let e : E × F⋆ ≃ (Σ _ : E × F⋆, Fin 1) := .symm <| .sigmaUnique _ _\n  have : Nonempty (Σ _ : E × F⋆, Fin 1) := e.symm.nonempty\n  isInducing_inducingFn.withSeminorms <| withSeminorms_pi (fun _ ↦ norm_withSeminorms 𝕜 𝕜)\n    |>.congr_equiv e\n\n"}
{"name":"ContinuousLinearMapWOT.hasBasis_seminorms","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\n⊢ (nhds 0).HasBasis (ContinuousLinearMapWOT.seminormFamily 𝕜 E F).basisSets id","decl":"lemma hasBasis_seminorms : (𝓝 (0 : E →WOT[𝕜] F)).HasBasis (seminormFamily 𝕜 E F).basisSets id :=\n  withSeminorms.hasBasis\n\n"}
{"name":"ContinuousLinearMapWOT.instLocallyConvexSpace","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝¹¹ : NormedField 𝕜\ninst✝¹⁰ : AddCommGroup E\ninst✝⁹ : TopologicalSpace E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : TopologicalSpace F\ninst✝⁵ : Module 𝕜 F\ninst✝⁴ : TopologicalAddGroup F\ninst✝³ : ContinuousConstSMul 𝕜 F\ninst✝² : NormedSpace Real 𝕜\ninst✝¹ : Module Real (ContinuousLinearMapWOT 𝕜 E F)\ninst✝ : IsScalarTower Real 𝕜 (ContinuousLinearMapWOT 𝕜 E F)\n⊢ LocallyConvexSpace Real (ContinuousLinearMapWOT 𝕜 E F)","decl":"instance instLocallyConvexSpace [NormedSpace ℝ 𝕜] [Module ℝ (E →WOT[𝕜] F)]\n    [IsScalarTower ℝ 𝕜 (E →WOT[𝕜] F)] :\n    LocallyConvexSpace ℝ (E →WOT[𝕜] F) :=\n  withSeminorms.toLocallyConvexSpace\n\n"}
{"name":"ContinuousLinearMapWOT.ContinuousLinearMap.continuous_toWOT","module":"Mathlib.Analysis.LocallyConvex.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : AddCommGroup E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : AddCommGroup F\ninst✝⁴ : TopologicalSpace F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalAddGroup F\ninst✝¹ : ContinuousConstSMul 𝕜 F\ninst✝ : ContinuousSMul 𝕜 E\n⊢ Continuous ⇑(ContinuousLinearMap.toWOT 𝕜 E F)","decl":"/-- The weak operator topology is coarser than the bounded convergence topology, i.e. the inclusion\nmap is continuous. -/\n@[continuity, fun_prop]\nlemma ContinuousLinearMap.continuous_toWOT :\n    Continuous (ContinuousLinearMap.toWOT 𝕜 E F) :=\n  ContinuousLinearMapWOT.continuous_of_dual_apply_continuous fun x y ↦\n    y.cont.comp <| continuous_eval_const x\n\n"}
