{"name":"lintegral_Iic_eq_lintegral_Iio_add_Icc","module":"Mathlib.Probability.Distributions.Gamma","initialProofState":"y z : Real\nf : Real → ENNReal\nhzy : LE.le z y\n⊢ Eq (MeasureTheory.lintegral (MeasureTheory.MeasureSpace.volume.restrict (Set.Iic y)) fun x => f x) (HAdd.hAdd (MeasureTheory.lintegral (MeasureTheory.MeasureSpace.volume.restrict (Set.Iio z)) fun x => f x) (MeasureTheory.lintegral (MeasureTheory.MeasureSpace.volume.restrict (Set.Icc z y)) fun x => f x))","decl":"/-- A Lebesgue Integral from -∞ to y can be expressed as the sum of one from -∞ to 0 and 0 to x -/\nlemma lintegral_Iic_eq_lintegral_Iio_add_Icc {y z : ℝ} (f : ℝ → ℝ≥0∞) (hzy : z ≤ y) :\n    ∫⁻ x in Iic y, f x = (∫⁻ x in Iio z, f x) + ∫⁻ x in Icc z y, f x := by\n  rw [← Iio_union_Icc_eq_Iic hzy, lintegral_union measurableSet_Icc]\n  simp_rw [Set.disjoint_iff_forall_ne, mem_Iio, mem_Icc]\n  intros\n  linarith\n\n"}
{"name":"ProbabilityTheory.gammaPDF_eq","module":"Mathlib.Probability.Distributions.Gamma","initialProofState":"a r x : Real\n⊢ Eq (ProbabilityTheory.gammaPDF a r x) (ENNReal.ofReal (ite (LE.le 0 x) (HMul.hMul (HMul.hMul (HDiv.hDiv (HPow.hPow r a) (Real.Gamma a)) (HPow.hPow x (HSub.hSub a 1))) (Real.exp (Neg.neg (HMul.hMul r x)))) 0))","decl":"lemma gammaPDF_eq (a r x : ℝ) :\n    gammaPDF a r x =\n      ENNReal.ofReal (if 0 ≤ x then r ^ a / (Gamma a) * x ^ (a-1) * exp (-(r * x)) else 0) :=\n  rfl\n\n"}
{"name":"ProbabilityTheory.gammaPDF_of_neg","module":"Mathlib.Probability.Distributions.Gamma","initialProofState":"a r x : Real\nhx : LT.lt x 0\n⊢ Eq (ProbabilityTheory.gammaPDF a r x) 0","decl":"lemma gammaPDF_of_neg {a r x : ℝ} (hx : x < 0) : gammaPDF a r x = 0 := by\n  simp only [gammaPDF_eq, if_neg (not_le.mpr hx), ENNReal.ofReal_zero]\n\n"}
{"name":"ProbabilityTheory.gammaPDF_of_nonneg","module":"Mathlib.Probability.Distributions.Gamma","initialProofState":"a r x : Real\nhx : LE.le 0 x\n⊢ Eq (ProbabilityTheory.gammaPDF a r x) (ENNReal.ofReal (HMul.hMul (HMul.hMul (HDiv.hDiv (HPow.hPow r a) (Real.Gamma a)) (HPow.hPow x (HSub.hSub a 1))) (Real.exp (Neg.neg (HMul.hMul r x)))))","decl":"lemma gammaPDF_of_nonneg {a r x : ℝ} (hx : 0 ≤ x) :\n    gammaPDF a r x = ENNReal.ofReal (r ^ a / (Gamma a) * x ^ (a-1) * exp (-(r * x))) := by\n  simp only [gammaPDF_eq, if_pos hx]\n\n"}
{"name":"ProbabilityTheory.lintegral_gammaPDF_of_nonpos","module":"Mathlib.Probability.Distributions.Gamma","initialProofState":"x a r : Real\nhx : LE.le x 0\n⊢ Eq (MeasureTheory.lintegral (MeasureTheory.MeasureSpace.volume.restrict (Set.Iio x)) fun y => ProbabilityTheory.gammaPDF a r y) 0","decl":"/-- The Lebesgue integral of the gamma pdf over nonpositive reals equals 0 -/\nlemma lintegral_gammaPDF_of_nonpos {x a r : ℝ} (hx : x ≤ 0) :\n    ∫⁻ y in Iio x, gammaPDF a r y = 0 := by\n  rw [setLIntegral_congr_fun (g := fun _ ↦ 0) measurableSet_Iio]\n  · rw [lintegral_zero, ← ENNReal.ofReal_zero]\n  · simp only [gammaPDF_eq, ENNReal.ofReal_eq_zero]\n    filter_upwards with a (_ : a < _)\n    rw [if_neg (by linarith)]\n\n"}
{"name":"ProbabilityTheory.measurable_gammaPDFReal","module":"Mathlib.Probability.Distributions.Gamma","initialProofState":"a r : Real\n⊢ Measurable (ProbabilityTheory.gammaPDFReal a r)","decl":"/-- The gamma pdf is measurable. -/\n@[measurability]\nlemma measurable_gammaPDFReal (a r : ℝ) : Measurable (gammaPDFReal a r) :=\n  Measurable.ite measurableSet_Ici (((measurable_id'.pow_const _).const_mul _).mul\n    (measurable_id'.const_mul _).neg.exp) measurable_const\n\n"}
{"name":"ProbabilityTheory.stronglyMeasurable_gammaPDFReal","module":"Mathlib.Probability.Distributions.Gamma","initialProofState":"a r : Real\n⊢ MeasureTheory.StronglyMeasurable (ProbabilityTheory.gammaPDFReal a r)","decl":"/-- The gamma pdf is strongly measurable -/\n@[measurability]\n lemma stronglyMeasurable_gammaPDFReal (a r : ℝ) :\n     StronglyMeasurable (gammaPDFReal a r) :=\n   (measurable_gammaPDFReal a r).stronglyMeasurable\n\n"}
{"name":"ProbabilityTheory.gammaPDFReal_pos","module":"Mathlib.Probability.Distributions.Gamma","initialProofState":"x a r : Real\nha : LT.lt 0 a\nhr : LT.lt 0 r\nhx : LT.lt 0 x\n⊢ LT.lt 0 (ProbabilityTheory.gammaPDFReal a r x)","decl":"/-- The gamma pdf is positive for all positive reals -/\nlemma gammaPDFReal_pos {x a r : ℝ} (ha : 0 < a) (hr : 0 < r) (hx : 0 < x) :\n    0 < gammaPDFReal a r x := by\n  simp only [gammaPDFReal, if_pos hx.le]\n  positivity\n\n"}
{"name":"ProbabilityTheory.gammaPDFReal_nonneg","module":"Mathlib.Probability.Distributions.Gamma","initialProofState":"a r : Real\nha : LT.lt 0 a\nhr : LT.lt 0 r\nx : Real\n⊢ LE.le 0 (ProbabilityTheory.gammaPDFReal a r x)","decl":"/-- The gamma pdf is nonnegative -/\nlemma gammaPDFReal_nonneg {a r : ℝ} (ha : 0 < a) (hr : 0 < r) (x : ℝ) :\n    0 ≤ gammaPDFReal a r x := by\n  unfold gammaPDFReal\n  split_ifs <;> positivity\n\n"}
{"name":"ProbabilityTheory.lintegral_gammaPDF_eq_one","module":"Mathlib.Probability.Distributions.Gamma","initialProofState":"a r : Real\nha : LT.lt 0 a\nhr : LT.lt 0 r\n⊢ Eq (MeasureTheory.lintegral MeasureTheory.MeasureSpace.volume fun x => ProbabilityTheory.gammaPDF a r x) 1","decl":"/-- The pdf of the gamma distribution integrates to 1 -/\n@[simp]\nlemma lintegral_gammaPDF_eq_one {a r : ℝ} (ha : 0 < a) (hr : 0 < r) :\n    ∫⁻ x, gammaPDF a r x = 1 := by\n  have leftSide : ∫⁻ x in Iio 0, gammaPDF a r x = 0 := by\n    rw [setLIntegral_congr_fun measurableSet_Iio\n      (ae_of_all _ (fun x (hx : x < 0) ↦ gammaPDF_of_neg hx)), lintegral_zero]\n  have rightSide : ∫⁻ x in Ici 0, gammaPDF a r x =\n      ∫⁻ x in Ici 0, ENNReal.ofReal (r ^ a / Gamma a * x ^ (a - 1) * exp (-(r * x))) :=\n    setLIntegral_congr_fun measurableSet_Ici (ae_of_all _ (fun _ ↦ gammaPDF_of_nonneg))\n  rw [← ENNReal.toReal_eq_one_iff, ← lintegral_add_compl _ measurableSet_Ici, compl_Ici,\n    leftSide, rightSide, add_zero, ← integral_eq_lintegral_of_nonneg_ae]\n  · simp_rw [integral_Ici_eq_integral_Ioi, mul_assoc]\n    rw [integral_mul_left, integral_rpow_mul_exp_neg_mul_Ioi ha hr, div_mul_eq_mul_div,\n      ← mul_assoc, mul_div_assoc, div_self (Gamma_pos_of_pos ha).ne', mul_one,\n      div_rpow zero_le_one hr.le, one_rpow, mul_one_div, div_self (rpow_pos_of_pos hr _).ne']\n  · rw [EventuallyLE, ae_restrict_iff' measurableSet_Ici]\n    exact ae_of_all _ (fun x (hx : 0 ≤ x) ↦ by positivity)\n  · apply (measurable_gammaPDFReal a r).aestronglyMeasurable.congr\n    refine (ae_restrict_iff' measurableSet_Ici).mpr <| ae_of_all _ fun x (hx : 0 ≤ x) ↦ ?_\n    simp_rw [gammaPDFReal, eq_true_intro hx, ite_true]\n\n"}
{"name":"ProbabilityTheory.isProbabilityMeasureGamma","module":"Mathlib.Probability.Distributions.Gamma","initialProofState":"a r : Real\nha : LT.lt 0 a\nhr : LT.lt 0 r\n⊢ MeasureTheory.IsProbabilityMeasure (ProbabilityTheory.gammaMeasure a r)","decl":"lemma isProbabilityMeasureGamma {a r : ℝ} (ha : 0 < a) (hr : 0 < r) :\n    IsProbabilityMeasure (gammaMeasure a r) where\n  measure_univ := by simp [gammaMeasure, lintegral_gammaPDF_eq_one ha hr]\n\n"}
{"name":"ProbabilityTheory.gammaCDFReal_eq_integral","module":"Mathlib.Probability.Distributions.Gamma","initialProofState":"a r : Real\nha : LT.lt 0 a\nhr : LT.lt 0 r\nx : Real\n⊢ Eq (↑(ProbabilityTheory.gammaCDFReal a r) x) (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.Iic x)) fun x => ProbabilityTheory.gammaPDFReal a r x)","decl":"lemma gammaCDFReal_eq_integral {a r : ℝ} (ha : 0 < a) (hr : 0 < r) (x : ℝ) :\n    gammaCDFReal a r x = ∫ x in Iic x, gammaPDFReal a r x := by\n  have : IsProbabilityMeasure (gammaMeasure a r) := isProbabilityMeasureGamma ha hr\n  rw [gammaCDFReal, cdf_eq_toReal, gammaMeasure, withDensity_apply _ measurableSet_Iic]\n  refine (integral_eq_lintegral_of_nonneg_ae ?_ ?_).symm\n  · exact ae_of_all _ fun b ↦ by simp only [Pi.zero_apply, gammaPDFReal_nonneg ha hr]\n  · exact (measurable_gammaPDFReal a r).aestronglyMeasurable.restrict\n\n"}
{"name":"ProbabilityTheory.gammaCDFReal_eq_lintegral","module":"Mathlib.Probability.Distributions.Gamma","initialProofState":"a r : Real\nha : LT.lt 0 a\nhr : LT.lt 0 r\nx : Real\n⊢ Eq (↑(ProbabilityTheory.gammaCDFReal a r) x) (MeasureTheory.lintegral (MeasureTheory.MeasureSpace.volume.restrict (Set.Iic x)) fun x => ProbabilityTheory.gammaPDF a r x).toReal","decl":"lemma gammaCDFReal_eq_lintegral {a r : ℝ} (ha : 0 < a) (hr : 0 < r) (x : ℝ) :\n    gammaCDFReal a r x = ENNReal.toReal (∫⁻ x in Iic x, gammaPDF a r x) := by\n  have : IsProbabilityMeasure (gammaMeasure a r) := isProbabilityMeasureGamma ha hr\n  simp only [gammaPDF, gammaCDFReal, cdf_eq_toReal]\n  simp only [gammaMeasure, measurableSet_Iic, withDensity_apply, gammaPDF]\n\n"}
