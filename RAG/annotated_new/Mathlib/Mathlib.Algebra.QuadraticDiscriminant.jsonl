{"name":"discrim_neg","module":"Mathlib.Algebra.QuadraticDiscriminant","initialProofState":"R : Type u_1\ninst✝ : Ring R\na b c : R\n⊢ Eq (discrim (Neg.neg a) (Neg.neg b) (Neg.neg c)) (discrim a b c)","decl":"@[simp] lemma discrim_neg [Ring R] (a b c : R) : discrim (-a) (-b) (-c) = discrim a b c := by\n  simp [discrim]\n\n"}
{"name":"discrim_eq_sq_of_quadratic_eq_zero","module":"Mathlib.Algebra.QuadraticDiscriminant","initialProofState":"R : Type u_1\ninst✝ : CommRing R\na b c x : R\nh : Eq (HAdd.hAdd (HAdd.hAdd (HMul.hMul a (HMul.hMul x x)) (HMul.hMul b x)) c) 0\n⊢ Eq (discrim a b c) (HPow.hPow (HAdd.hAdd (HMul.hMul (HMul.hMul 2 a) x) b) 2)","decl":"lemma discrim_eq_sq_of_quadratic_eq_zero {x : R} (h : a * (x * x) + b * x + c = 0) :\n    discrim a b c = (2 * a * x + b) ^ 2 := by\n  rw [discrim]\n  linear_combination -4 * a * h\n\n"}
{"name":"quadratic_eq_zero_iff_discrim_eq_sq","module":"Mathlib.Algebra.QuadraticDiscriminant","initialProofState":"R : Type u_1\ninst✝² : CommRing R\na b c : R\ninst✝¹ : NeZero 2\ninst✝ : NoZeroDivisors R\nha : Ne a 0\nx : R\n⊢ Iff (Eq (HAdd.hAdd (HAdd.hAdd (HMul.hMul a (HMul.hMul x x)) (HMul.hMul b x)) c) 0) (Eq (discrim a b c) (HPow.hPow (HAdd.hAdd (HMul.hMul (HMul.hMul 2 a) x) b) 2))","decl":"/-- A quadratic has roots if and only if its discriminant equals some square.\n-/\ntheorem quadratic_eq_zero_iff_discrim_eq_sq [NeZero (2 : R)] [NoZeroDivisors R]\n    (ha : a ≠ 0) (x : R) :\n    a * (x * x) + b * x + c = 0 ↔ discrim a b c = (2 * a * x + b) ^ 2 := by\n  refine ⟨discrim_eq_sq_of_quadratic_eq_zero, fun h ↦ ?_⟩\n  rw [discrim] at h\n  have ha : 2 * 2 * a ≠ 0 := mul_ne_zero (mul_ne_zero (NeZero.ne _) (NeZero.ne _)) ha\n  apply mul_left_cancel₀ ha\n  linear_combination -h\n\n"}
{"name":"quadratic_ne_zero_of_discrim_ne_sq","module":"Mathlib.Algebra.QuadraticDiscriminant","initialProofState":"R : Type u_1\ninst✝ : CommRing R\na b c : R\nh : ∀ (s : R), Ne (discrim a b c) (HPow.hPow s 2)\nx : R\n⊢ Ne (HAdd.hAdd (HAdd.hAdd (HMul.hMul a (HMul.hMul x x)) (HMul.hMul b x)) c) 0","decl":"/-- A quadratic has no root if its discriminant has no square root. -/\ntheorem quadratic_ne_zero_of_discrim_ne_sq (h : ∀ s : R, discrim a b c ≠ s^2) (x : R) :\n    a * (x * x) + b * x + c ≠ 0 :=\n  mt discrim_eq_sq_of_quadratic_eq_zero (h _)\n\n"}
{"name":"quadratic_eq_zero_iff","module":"Mathlib.Algebra.QuadraticDiscriminant","initialProofState":"K : Type u_1\ninst✝¹ : Field K\ninst✝ : NeZero 2\na b c : K\nha : Ne a 0\ns : K\nh : Eq (discrim a b c) (HMul.hMul s s)\nx : K\n⊢ Iff (Eq (HAdd.hAdd (HAdd.hAdd (HMul.hMul a (HMul.hMul x x)) (HMul.hMul b x)) c) 0) (Or (Eq x (HDiv.hDiv (HAdd.hAdd (Neg.neg b) s) (HMul.hMul 2 a))) (Eq x (HDiv.hDiv (HSub.hSub (Neg.neg b) s) (HMul.hMul 2 a))))","decl":"/-- Roots of a quadratic equation. -/\ntheorem quadratic_eq_zero_iff (ha : a ≠ 0) {s : K} (h : discrim a b c = s * s) (x : K) :\n    a * (x * x) + b * x + c = 0 ↔ x = (-b + s) / (2 * a) ∨ x = (-b - s) / (2 * a) := by\n  rw [quadratic_eq_zero_iff_discrim_eq_sq ha, h, sq, mul_self_eq_mul_self_iff]\n  field_simp\n  apply or_congr\n  · constructor <;> intro h' <;> linear_combination -h'\n  · constructor <;> intro h' <;> linear_combination h'\n\n"}
{"name":"exists_quadratic_eq_zero","module":"Mathlib.Algebra.QuadraticDiscriminant","initialProofState":"K : Type u_1\ninst✝¹ : Field K\ninst✝ : NeZero 2\na b c : K\nha : Ne a 0\nh : Exists fun s => Eq (discrim a b c) (HMul.hMul s s)\n⊢ Exists fun x => Eq (HAdd.hAdd (HAdd.hAdd (HMul.hMul a (HMul.hMul x x)) (HMul.hMul b x)) c) 0","decl":"/-- A quadratic has roots if its discriminant has square roots -/\ntheorem exists_quadratic_eq_zero (ha : a ≠ 0) (h : ∃ s, discrim a b c = s * s) :\n    ∃ x, a * (x * x) + b * x + c = 0 := by\n  rcases h with ⟨s, hs⟩\n  use (-b + s) / (2 * a)\n  rw [quadratic_eq_zero_iff ha hs]\n  simp\n\n"}
{"name":"quadratic_eq_zero_iff_of_discrim_eq_zero","module":"Mathlib.Algebra.QuadraticDiscriminant","initialProofState":"K : Type u_1\ninst✝¹ : Field K\ninst✝ : NeZero 2\na b c : K\nha : Ne a 0\nh : Eq (discrim a b c) 0\nx : K\n⊢ Iff (Eq (HAdd.hAdd (HAdd.hAdd (HMul.hMul a (HMul.hMul x x)) (HMul.hMul b x)) c) 0) (Eq x (HDiv.hDiv (Neg.neg b) (HMul.hMul 2 a)))","decl":"/-- Root of a quadratic when its discriminant equals zero -/\ntheorem quadratic_eq_zero_iff_of_discrim_eq_zero (ha : a ≠ 0) (h : discrim a b c = 0) (x : K) :\n    a * (x * x) + b * x + c = 0 ↔ x = -b / (2 * a) := by\n  have : discrim a b c = 0 * 0 := by rw [h, mul_zero]\n  rw [quadratic_eq_zero_iff ha this, add_zero, sub_zero, or_self_iff]\n\n"}
{"name":"discrim_le_zero","module":"Mathlib.Algebra.QuadraticDiscriminant","initialProofState":"K : Type u_1\ninst✝ : LinearOrderedField K\na b c : K\nh : ∀ (x : K), LE.le 0 (HAdd.hAdd (HAdd.hAdd (HMul.hMul a (HMul.hMul x x)) (HMul.hMul b x)) c)\n⊢ LE.le (discrim a b c) 0","decl":"/-- If a polynomial of degree 2 is always nonnegative, then its discriminant is nonpositive -/\ntheorem discrim_le_zero (h : ∀ x : K, 0 ≤ a * (x * x) + b * x + c) : discrim a b c ≤ 0 := by\n  rw [discrim, sq]\n  obtain ha | rfl | ha : a < 0 ∨ a = 0 ∨ 0 < a := lt_trichotomy a 0\n  -- if a < 0\n  · have : Tendsto (fun x => (a * x + b) * x + c) atTop atBot :=\n      tendsto_atBot_add_const_right _ c\n        ((tendsto_atBot_add_const_right _ b (tendsto_id.const_mul_atTop_of_neg ha)).atBot_mul_atTop\n          tendsto_id)\n    rcases (this.eventually (eventually_lt_atBot 0)).exists with ⟨x, hx⟩\n    exact False.elim ((h x).not_lt <| by rwa [← mul_assoc, ← add_mul])\n  -- if a = 0\n  · rcases eq_or_ne b 0 with (rfl | hb)\n    · simp\n    · have := h ((-c - 1) / b)\n      rw [mul_div_cancel₀ _ hb] at this\n      linarith\n  -- if a > 0\n  · have ha' : 0 ≤ 4 * a := mul_nonneg zero_le_four ha.le\n    convert neg_nonpos.2 (mul_nonneg ha' (h (-b / (2 * a)))) using 1\n    field_simp\n    ring\n\n"}
{"name":"discrim_le_zero_of_nonpos","module":"Mathlib.Algebra.QuadraticDiscriminant","initialProofState":"K : Type u_1\ninst✝ : LinearOrderedField K\na b c : K\nh : ∀ (x : K), LE.le (HAdd.hAdd (HAdd.hAdd (HMul.hMul a (HMul.hMul x x)) (HMul.hMul b x)) c) 0\n⊢ LE.le (discrim a b c) 0","decl":"lemma discrim_le_zero_of_nonpos (h : ∀ x : K, a * (x * x) + b * x + c ≤ 0) : discrim a b c ≤ 0 :=\n  discrim_neg a b c ▸ discrim_le_zero <| by simpa only [neg_mul, ← neg_add, neg_nonneg]\n\n"}
{"name":"discrim_lt_zero","module":"Mathlib.Algebra.QuadraticDiscriminant","initialProofState":"K : Type u_1\ninst✝ : LinearOrderedField K\na b c : K\nha : Ne a 0\nh : ∀ (x : K), LT.lt 0 (HAdd.hAdd (HAdd.hAdd (HMul.hMul a (HMul.hMul x x)) (HMul.hMul b x)) c)\n⊢ LT.lt (discrim a b c) 0","decl":"/-- If a polynomial of degree 2 is always positive, then its discriminant is negative,\nat least when the coefficient of the quadratic term is nonzero.\n-/\ntheorem discrim_lt_zero (ha : a ≠ 0) (h : ∀ x : K, 0 < a * (x * x) + b * x + c) :\n    discrim a b c < 0 := by\n  have : ∀ x : K, 0 ≤ a * (x * x) + b * x + c := fun x => le_of_lt (h x)\n  refine lt_of_le_of_ne (discrim_le_zero this) fun h' ↦ ?_\n  have := h (-b / (2 * a))\n  have : a * (-b / (2 * a)) * (-b / (2 * a)) + b * (-b / (2 * a)) + c = 0 := by\n    rw [mul_assoc, quadratic_eq_zero_iff_of_discrim_eq_zero ha h' (-b / (2 * a))]\n  linarith\n\n"}
{"name":"discrim_lt_zero_of_neg","module":"Mathlib.Algebra.QuadraticDiscriminant","initialProofState":"K : Type u_1\ninst✝ : LinearOrderedField K\na b c : K\nha : Ne a 0\nh : ∀ (x : K), LT.lt (HAdd.hAdd (HAdd.hAdd (HMul.hMul a (HMul.hMul x x)) (HMul.hMul b x)) c) 0\n⊢ LT.lt (discrim a b c) 0","decl":"lemma discrim_lt_zero_of_neg (ha : a ≠ 0) (h : ∀ x : K, a * (x * x) + b * x + c < 0) :\n    discrim a b c < 0 :=\n  discrim_neg a b c ▸ discrim_lt_zero (neg_ne_zero.2 ha) <| by\n    simpa only [neg_mul, ← neg_add, neg_pos]\n\n"}
