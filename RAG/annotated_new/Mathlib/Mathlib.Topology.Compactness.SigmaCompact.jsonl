{"name":"IsCompact.isSigmaCompact","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\nhs : IsCompact s\n⊢ IsSigmaCompact s","decl":"/-- Compact sets are σ-compact. -/\nlemma IsCompact.isSigmaCompact {s : Set X} (hs : IsCompact s) : IsSigmaCompact s :=\n  ⟨fun _ => s, fun _ => hs, iUnion_const _⟩\n\n"}
{"name":"isSigmaCompact_empty","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\n⊢ IsSigmaCompact EmptyCollection.emptyCollection","decl":"/-- The empty set is σ-compact. -/\n@[simp]\nlemma isSigmaCompact_empty : IsSigmaCompact (∅ : Set X) :=\n  IsCompact.isSigmaCompact isCompact_empty\n\n"}
{"name":"isSigmaCompact_iUnion_of_isCompact","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\nι : Type u_3\ninst✝ : TopologicalSpace X\nhι : Countable ι\ns : ι → Set X\nhcomp : ∀ (i : ι), IsCompact (s i)\n⊢ IsSigmaCompact (Set.iUnion fun i => s i)","decl":"/-- Countable unions of compact sets are σ-compact. -/\nlemma isSigmaCompact_iUnion_of_isCompact [hι : Countable ι] (s : ι → Set X)\n    (hcomp : ∀ i, IsCompact (s i)) : IsSigmaCompact (⋃ i, s i) := by\n  rcases isEmpty_or_nonempty ι\n  · simp only [iUnion_of_empty, isSigmaCompact_empty]\n  · -- If ι is non-empty, choose a surjection f : ℕ → ι, this yields a map ℕ → Set X.\n    obtain ⟨f, hf⟩ := countable_iff_exists_surjective.mp hι\n    exact ⟨s ∘ f, fun n ↦ hcomp (f n), Function.Surjective.iUnion_comp hf _⟩\n\n"}
{"name":"isSigmaCompact_sUnion_of_isCompact","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nS : Set (Set X)\nhc : S.Countable\nhcomp : ∀ (s : Set X), Membership.mem S s → IsCompact s\n⊢ IsSigmaCompact S.sUnion","decl":"/-- Countable unions of compact sets are σ-compact. -/\nlemma isSigmaCompact_sUnion_of_isCompact {S : Set (Set X)} (hc : Set.Countable S)\n    (hcomp : ∀ (s : Set X), s ∈ S → IsCompact s) : IsSigmaCompact (⋃₀ S) := by\n  have : Countable S := countable_coe_iff.mpr hc\n  rw [sUnion_eq_iUnion]\n  apply isSigmaCompact_iUnion_of_isCompact _ (fun ⟨s, hs⟩ ↦ hcomp s hs)\n\n"}
{"name":"isSigmaCompact_iUnion","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\nι : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : Countable ι\ns : ι → Set X\nhcomp : ∀ (i : ι), IsSigmaCompact (s i)\n⊢ IsSigmaCompact (Set.iUnion fun i => s i)","decl":"/-- Countable unions of σ-compact sets are σ-compact. -/\nlemma isSigmaCompact_iUnion [Countable ι] (s : ι → Set X)\n    (hcomp : ∀ i, IsSigmaCompact (s i)) : IsSigmaCompact (⋃ i, s i) := by\n  -- Choose a decomposition s_i = ⋃ K_i,j for each i.\n  choose K hcomp hcov using fun i ↦ hcomp i\n  -- Then, we have a countable union of countable unions of compact sets, i.e. countably many.\n  have := calc\n    ⋃ i, s i\n    _ = ⋃ i, ⋃ n, (K i n) := by simp_rw [hcov]\n    _ = ⋃ (i) (n : ℕ), (K.uncurry ⟨i, n⟩) := by rw [Function.uncurry_def]\n    _ = ⋃ x, K.uncurry x := by rw [← iUnion_prod']\n  rw [this]\n  exact isSigmaCompact_iUnion_of_isCompact K.uncurry fun x ↦ (hcomp x.1 x.2)\n\n"}
{"name":"isSigmaCompact_sUnion","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nS : Set (Set X)\nhc : S.Countable\nhcomp : ∀ (s : ↑S), IsSigmaCompact ↑s\n⊢ IsSigmaCompact S.sUnion","decl":"/-- Countable unions of σ-compact sets are σ-compact. -/\nlemma isSigmaCompact_sUnion (S : Set (Set X)) (hc : Set.Countable S)\n    (hcomp : ∀ s : S, IsSigmaCompact s (X := X)) : IsSigmaCompact (⋃₀ S) := by\n  have : Countable S := countable_coe_iff.mpr hc\n  apply sUnion_eq_iUnion.symm ▸ isSigmaCompact_iUnion _ hcomp\n\n"}
{"name":"isSigmaCompact_biUnion","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\nι : Type u_3\ninst✝ : TopologicalSpace X\ns : Set ι\nS : ι → Set X\nhc : s.Countable\nhcomp : ∀ (i : ι), Membership.mem s i → IsSigmaCompact (S i)\n⊢ IsSigmaCompact (Set.iUnion fun i => Set.iUnion fun x => S i)","decl":"/-- Countable unions of σ-compact sets are σ-compact. -/\nlemma isSigmaCompact_biUnion {s : Set ι} {S : ι → Set X} (hc : Set.Countable s)\n    (hcomp : ∀ (i : ι), i ∈ s → IsSigmaCompact (S i)) :\n    IsSigmaCompact (⋃ (i : ι) (_ : i ∈ s), S i) := by\n  have : Countable ↑s := countable_coe_iff.mpr hc\n  rw [biUnion_eq_iUnion]\n  exact isSigmaCompact_iUnion _ (fun ⟨i', hi'⟩ ↦ hcomp i' hi')\n\n"}
{"name":"IsSigmaCompact.of_isClosed_subset","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns t : Set X\nht : IsSigmaCompact t\nhs : IsClosed s\nh : HasSubset.Subset s t\n⊢ IsSigmaCompact s","decl":"/-- A closed subset of a σ-compact set is σ-compact. -/\nlemma IsSigmaCompact.of_isClosed_subset {s t : Set X} (ht : IsSigmaCompact t)\n    (hs : IsClosed s) (h : s ⊆ t) : IsSigmaCompact s := by\n  rcases ht with ⟨K, hcompact, hcov⟩\n  refine ⟨(fun n ↦ s ∩ (K n)), fun n ↦ (hcompact n).inter_left hs, ?_⟩\n  rw [← inter_iUnion, hcov]\n  exact inter_eq_left.mpr h\n\n"}
{"name":"IsSigmaCompact.image_of_continuousOn","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\ns : Set X\nhs : IsSigmaCompact s\nhf : ContinuousOn f s\n⊢ IsSigmaCompact (Set.image f s)","decl":"/-- If `s` is σ-compact and `f` is continuous on `s`, `f(s)` is σ-compact. -/\nlemma IsSigmaCompact.image_of_continuousOn {f : X → Y} {s : Set X} (hs : IsSigmaCompact s)\n    (hf : ContinuousOn f s) : IsSigmaCompact (f '' s) := by\n  rcases hs with ⟨K, hcompact, hcov⟩\n  refine ⟨fun n ↦ f '' K n, ?_, hcov.symm ▸ image_iUnion.symm⟩\n  exact fun n ↦ (hcompact n).image_of_continuousOn (hf.mono (hcov.symm ▸ subset_iUnion K n))\n\n"}
{"name":"IsSigmaCompact.image","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : Continuous f\ns : Set X\nhs : IsSigmaCompact s\n⊢ IsSigmaCompact (Set.image f s)","decl":"/-- If `s` is σ-compact and `f` continuous, `f(s)` is σ-compact. -/\nlemma IsSigmaCompact.image {f : X → Y} (hf : Continuous f) {s : Set X} (hs : IsSigmaCompact s) :\n    IsSigmaCompact (f '' s) := hs.image_of_continuousOn hf.continuousOn\n\n"}
{"name":"Topology.IsInducing.isSigmaCompact_iff","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\ns : Set X\nhf : Topology.IsInducing f\n⊢ Iff (IsSigmaCompact s) (IsSigmaCompact (Set.image f s))","decl":"/-- If `f : X → Y` is an inducing map, the image `f '' s` of a set `s` is σ-compact\n  if and only `s` is σ-compact. -/\nlemma Topology.IsInducing.isSigmaCompact_iff {f : X → Y} {s : Set X}\n    (hf : IsInducing f) : IsSigmaCompact s ↔ IsSigmaCompact (f '' s) := by\n  constructor\n  · exact fun h ↦ h.image hf.continuous\n  · rintro ⟨L, hcomp, hcov⟩\n    -- Suppose f(s) is σ-compact; we want to show s is σ-compact.\n    -- Write f(s) as a union of compact sets L n, so s = ⋃ K n with K n := f⁻¹(L n) ∩ s.\n    -- Since f is inducing, each K n is compact iff L n is.\n    refine ⟨fun n ↦ f ⁻¹' (L n) ∩ s, ?_, ?_⟩\n    · intro n\n      have : f '' (f ⁻¹' (L n) ∩ s) = L n := by\n        rw [image_preimage_inter, inter_eq_left.mpr]\n        exact (subset_iUnion _ n).trans hcov.le\n      apply hf.isCompact_iff.mpr (this.symm ▸ (hcomp n))\n    · calc ⋃ n, f ⁻¹' L n ∩ s\n        _ = f ⁻¹' (⋃ n, L n) ∩ s  := by rw [preimage_iUnion, iUnion_inter]\n        _ = f ⁻¹' (f '' s) ∩ s := by rw [hcov]\n        _ = s := inter_eq_right.mpr (subset_preimage_image _ _)\n\n"}
{"name":"Inducing.isSigmaCompact_iff","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\ns : Set X\nhf : Topology.IsInducing f\n⊢ Iff (IsSigmaCompact s) (IsSigmaCompact (Set.image f s))","decl":"@[deprecated (since := \"2024-10-28\")]\nalias Inducing.isSigmaCompact_iff := IsInducing.isSigmaCompact_iff\n\n"}
{"name":"Topology.IsEmbedding.isSigmaCompact_iff","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\ns : Set X\nhf : Topology.IsEmbedding f\n⊢ Iff (IsSigmaCompact s) (IsSigmaCompact (Set.image f s))","decl":"/-- If `f : X → Y` is an embedding, the image `f '' s` of a set `s` is σ-compact\nif and only `s` is σ-compact. -/\nlemma Topology.IsEmbedding.isSigmaCompact_iff {f : X → Y} {s : Set X}\n    (hf : IsEmbedding f) : IsSigmaCompact s ↔ IsSigmaCompact (f '' s) :=\n  hf.isInducing.isSigmaCompact_iff\n\n"}
{"name":"Embedding.isSigmaCompact_iff","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\ns : Set X\nhf : Topology.IsEmbedding f\n⊢ Iff (IsSigmaCompact s) (IsSigmaCompact (Set.image f s))","decl":"@[deprecated (since := \"2024-10-26\")]\nalias Embedding.isSigmaCompact_iff := IsEmbedding.isSigmaCompact_iff\n\n"}
{"name":"Subtype.isSigmaCompact_iff","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\np : X → Prop\ns : Set (Subtype fun a => p a)\n⊢ Iff (IsSigmaCompact s) (IsSigmaCompact (Set.image Subtype.val s))","decl":"/-- Sets of subtype are σ-compact iff the image under a coercion is. -/\nlemma Subtype.isSigmaCompact_iff {p : X → Prop} {s : Set { a // p a }} :\n    IsSigmaCompact s ↔ IsSigmaCompact ((↑) '' s : Set X) :=\n  IsEmbedding.subtypeVal.isSigmaCompact_iff\n\n"}
{"name":"SigmaCompactSpace.isSigmaCompact_univ","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_4\ninst✝ : TopologicalSpace X\nself : SigmaCompactSpace X\n⊢ IsSigmaCompact Set.univ","decl":"/-- A σ-compact space is a space that is the union of a countable collection of compact subspaces.\n  Note that a locally compact separable T₂ space need not be σ-compact.\n  The sequence can be extracted using `compactCovering`. -/\nclass SigmaCompactSpace (X : Type*) [TopologicalSpace X] : Prop where\n  /-- In a σ-compact space, `Set.univ` is a σ-compact set. -/\n  isSigmaCompact_univ : IsSigmaCompact (univ : Set X)\n\n"}
{"name":"isSigmaCompact_univ_iff","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\n⊢ Iff (IsSigmaCompact Set.univ) (SigmaCompactSpace X)","decl":"/-- A topological space is σ-compact iff `univ` is σ-compact. -/\nlemma isSigmaCompact_univ_iff : IsSigmaCompact (univ : Set X) ↔ SigmaCompactSpace X :=\n  ⟨fun h => ⟨h⟩, fun h => h.1⟩\n\n"}
{"name":"isSigmaCompact_univ","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nh : SigmaCompactSpace X\n⊢ IsSigmaCompact Set.univ","decl":"/-- In a σ-compact space, `univ` is σ-compact. -/\nlemma isSigmaCompact_univ [h : SigmaCompactSpace X] : IsSigmaCompact (univ : Set X) :=\n  isSigmaCompact_univ_iff.mpr h\n\n"}
{"name":"SigmaCompactSpace_iff_exists_compact_covering","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\n⊢ Iff (SigmaCompactSpace X) (Exists fun K => And (∀ (n : Nat), IsCompact (K n)) (Eq (Set.iUnion fun n => K n) Set.univ))","decl":"/-- A topological space is σ-compact iff there exists a countable collection of compact\nsubspaces that cover the entire space. -/\nlemma SigmaCompactSpace_iff_exists_compact_covering :\n    SigmaCompactSpace X ↔ ∃ K : ℕ → Set X, (∀ n, IsCompact (K n)) ∧ ⋃ n, K n = univ := by\n  rw [← isSigmaCompact_univ_iff, IsSigmaCompact]\n\n"}
{"name":"SigmaCompactSpace.exists_compact_covering","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nh : SigmaCompactSpace X\n⊢ Exists fun K => And (∀ (n : Nat), IsCompact (K n)) (Eq (Set.iUnion fun n => K n) Set.univ)","decl":"lemma SigmaCompactSpace.exists_compact_covering [h : SigmaCompactSpace X] :\n    ∃ K : ℕ → Set X, (∀ n, IsCompact (K n)) ∧ ⋃ n, K n = univ :=\n  SigmaCompactSpace_iff_exists_compact_covering.mp h\n\n"}
{"name":"isSigmaCompact_range","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\nf : X → Y\nhf : Continuous f\ninst✝ : SigmaCompactSpace X\n⊢ IsSigmaCompact (Set.range f)","decl":"/-- If `X` is σ-compact, `im f` is σ-compact. -/\nlemma isSigmaCompact_range {f : X → Y} (hf : Continuous f) [SigmaCompactSpace X] :\n    IsSigmaCompact (range f) :=\n  image_univ ▸ isSigmaCompact_univ.image hf\n\n"}
{"name":"isSigmaCompact_iff_isSigmaCompact_univ","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\n⊢ Iff (IsSigmaCompact s) (IsSigmaCompact Set.univ)","decl":"/-- A subset `s` is σ-compact iff `s` (with the subspace topology) is a σ-compact space. -/\nlemma isSigmaCompact_iff_isSigmaCompact_univ {s : Set X} :\n    IsSigmaCompact s ↔ IsSigmaCompact (univ : Set s) := by\n  rw [Subtype.isSigmaCompact_iff, image_univ, Subtype.range_coe]\n\n"}
{"name":"isSigmaCompact_iff_sigmaCompactSpace","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\n⊢ Iff (IsSigmaCompact s) (SigmaCompactSpace ↑s)","decl":"lemma isSigmaCompact_iff_sigmaCompactSpace {s : Set X} :\n    IsSigmaCompact s ↔ SigmaCompactSpace s :=\n  isSigmaCompact_iff_isSigmaCompact_univ.trans isSigmaCompact_univ_iff\n\n-- see Note [lower instance priority]\n"}
{"name":"CompactSpace.sigmaCompact","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝¹ : TopologicalSpace X\ninst✝ : CompactSpace X\n⊢ SigmaCompactSpace X","decl":"instance (priority := 200) CompactSpace.sigmaCompact [CompactSpace X] : SigmaCompactSpace X :=\n  ⟨⟨fun _ => univ, fun _ => isCompact_univ, iUnion_const _⟩⟩\n\n-- The `alias` command creates a definition, triggering the defLemma linter.\n"}
{"name":"CompactSpace.sigma_compact","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝¹ : TopologicalSpace X\ninst✝ : CompactSpace X\n⊢ SigmaCompactSpace X","decl":"@[nolint defLemma, deprecated (since := \"2024-11-13\")] alias\nCompactSpace.sigma_compact := CompactSpace.sigmaCompact\n\n"}
{"name":"SigmaCompactSpace.of_countable","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nS : Set (Set X)\nHc : S.Countable\nHcomp : ∀ (s : Set X), Membership.mem S s → IsCompact s\nHU : Eq S.sUnion Set.univ\n⊢ SigmaCompactSpace X","decl":"theorem SigmaCompactSpace.of_countable (S : Set (Set X)) (Hc : S.Countable)\n    (Hcomp : ∀ s ∈ S, IsCompact s) (HU : ⋃₀ S = univ) : SigmaCompactSpace X :=\n  ⟨(exists_seq_cover_iff_countable ⟨_, isCompact_empty⟩).2 ⟨S, Hc, Hcomp, HU⟩⟩\n\n-- see Note [lower instance priority]\n"}
{"name":"sigmaCompactSpace_of_locallyCompact_secondCountable","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝² : TopologicalSpace X\ninst✝¹ : LocallyCompactSpace X\ninst✝ : SecondCountableTopology X\n⊢ SigmaCompactSpace X","decl":"instance (priority := 100) sigmaCompactSpace_of_locallyCompact_secondCountable\n    [LocallyCompactSpace X] [SecondCountableTopology X] : SigmaCompactSpace X := by\n  choose K hKc hxK using fun x : X => exists_compact_mem_nhds x\n  rcases countable_cover_nhds hxK with ⟨s, hsc, hsU⟩\n  refine SigmaCompactSpace.of_countable _ (hsc.image K) (forall_mem_image.2 fun x _ => hKc x) ?_\n  rwa [sUnion_image]\n\n-- The `alias` command creates a definition, triggering the defLemma linter.\n"}
{"name":"sigmaCompactSpace_of_locally_compact_second_countable","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝² : TopologicalSpace X\ninst✝¹ : LocallyCompactSpace X\ninst✝ : SecondCountableTopology X\n⊢ SigmaCompactSpace X","decl":"@[nolint defLemma, deprecated (since := \"2024-11-13\")]\nalias sigmaCompactSpace_of_locally_compact_second_countable :=\n  sigmaCompactSpace_of_locallyCompact_secondCountable\n\n"}
{"name":"isCompact_compactCovering","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝¹ : TopologicalSpace X\ninst✝ : SigmaCompactSpace X\nn : Nat\n⊢ IsCompact (compactCovering X n)","decl":"theorem isCompact_compactCovering (n : ℕ) : IsCompact (compactCovering X n) :=\n  isCompact_accumulate (Classical.choose_spec SigmaCompactSpace.exists_compact_covering).1 n\n\n"}
{"name":"iUnion_compactCovering","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝¹ : TopologicalSpace X\ninst✝ : SigmaCompactSpace X\n⊢ Eq (Set.iUnion fun n => compactCovering X n) Set.univ","decl":"theorem iUnion_compactCovering : ⋃ n, compactCovering X n = univ := by\n  rw [compactCovering, iUnion_accumulate]\n  exact (Classical.choose_spec SigmaCompactSpace.exists_compact_covering).2\n\n"}
{"name":"iUnion_closure_compactCovering","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝¹ : TopologicalSpace X\ninst✝ : SigmaCompactSpace X\n⊢ Eq (Set.iUnion fun n => closure (compactCovering X n)) Set.univ","decl":"theorem iUnion_closure_compactCovering : ⋃ n, closure (compactCovering X n) = univ :=\n  eq_top_mono (iUnion_mono fun _ ↦ subset_closure) (iUnion_compactCovering X)\n\n"}
{"name":"compactCovering_subset","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝¹ : TopologicalSpace X\ninst✝ : SigmaCompactSpace X\nm n : Nat\nh : LE.le m n\n⊢ HasSubset.Subset (compactCovering X m) (compactCovering X n)","decl":"@[mono, gcongr]\ntheorem compactCovering_subset ⦃m n : ℕ⦄ (h : m ≤ n) : compactCovering X m ⊆ compactCovering X n :=\n  monotone_accumulate h\n\n"}
{"name":"exists_mem_compactCovering","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝¹ : TopologicalSpace X\ninst✝ : SigmaCompactSpace X\nx : X\n⊢ Exists fun n => Membership.mem (compactCovering X n) x","decl":"theorem exists_mem_compactCovering (x : X) : ∃ n, x ∈ compactCovering X n :=\n  iUnion_eq_univ_iff.mp (iUnion_compactCovering X) x\n\n"}
{"name":"instSigmaCompactSpaceProd","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : SigmaCompactSpace X\ninst✝ : SigmaCompactSpace Y\n⊢ SigmaCompactSpace (Prod X Y)","decl":"instance [SigmaCompactSpace Y] : SigmaCompactSpace (X × Y) :=\n  ⟨⟨fun n => compactCovering X n ×ˢ compactCovering Y n, fun _ =>\n      (isCompact_compactCovering _ _).prod (isCompact_compactCovering _ _), by\n      simp only [iUnion_prod_of_monotone (compactCovering_subset X) (compactCovering_subset Y),\n        iUnion_compactCovering, univ_prod_univ]⟩⟩\n\n"}
{"name":"instSigmaCompactSpaceForallOfFinite","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"ι : Type u_3\ninst✝² : Finite ι\nX : ι → Type u_4\ninst✝¹ : (i : ι) → TopologicalSpace (X i)\ninst✝ : ∀ (i : ι), SigmaCompactSpace (X i)\n⊢ SigmaCompactSpace ((i : ι) → X i)","decl":"instance [Finite ι] {X : ι → Type*} [∀ i, TopologicalSpace (X i)] [∀ i, SigmaCompactSpace (X i)] :\n    SigmaCompactSpace (∀ i, X i) := by\n  refine ⟨⟨fun n => Set.pi univ fun i => compactCovering (X i) n,\n    fun n => isCompact_univ_pi fun i => isCompact_compactCovering (X i) _, ?_⟩⟩\n  rw [iUnion_univ_pi_of_monotone]\n  · simp only [iUnion_compactCovering, pi_univ]\n  · exact fun i => compactCovering_subset (X i)\n\n"}
{"name":"instSigmaCompactSpaceSum","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : SigmaCompactSpace X\ninst✝ : SigmaCompactSpace Y\n⊢ SigmaCompactSpace (Sum X Y)","decl":"instance [SigmaCompactSpace Y] : SigmaCompactSpace (X ⊕ Y) :=\n  ⟨⟨fun n => Sum.inl '' compactCovering X n ∪ Sum.inr '' compactCovering Y n, fun n =>\n      ((isCompact_compactCovering X n).image continuous_inl).union\n        ((isCompact_compactCovering Y n).image continuous_inr),\n      by simp only [iUnion_union_distrib, ← image_iUnion, iUnion_compactCovering, image_univ,\n        range_inl_union_range_inr]⟩⟩\n\n"}
{"name":"instSigmaCompactSpaceSigmaOfCountable","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"ι : Type u_3\ninst✝² : Countable ι\nX : ι → Type u_4\ninst✝¹ : (i : ι) → TopologicalSpace (X i)\ninst✝ : ∀ (i : ι), SigmaCompactSpace (X i)\n⊢ SigmaCompactSpace (Sigma fun i => X i)","decl":"instance [Countable ι] {X : ι → Type*} [∀ i, TopologicalSpace (X i)]\n    [∀ i, SigmaCompactSpace (X i)] : SigmaCompactSpace (Σi, X i) := by\n  cases isEmpty_or_nonempty ι\n  · infer_instance\n  · rcases exists_surjective_nat ι with ⟨f, hf⟩\n    refine ⟨⟨fun n => ⋃ k ≤ n, Sigma.mk (f k) '' compactCovering (X (f k)) n, fun n => ?_, ?_⟩⟩\n    · refine (finite_le_nat _).isCompact_biUnion fun k _ => ?_\n      exact (isCompact_compactCovering _ _).image continuous_sigmaMk\n    · simp only [iUnion_eq_univ_iff, Sigma.forall, mem_iUnion, hf.forall]\n      intro k y\n      rcases exists_mem_compactCovering y with ⟨n, hn⟩\n      refine ⟨max k n, k, le_max_left _ _, mem_image_of_mem _ ?_⟩\n      exact compactCovering_subset _ (le_max_right _ _) hn\n\n"}
{"name":"Topology.IsClosedEmbedding.sigmaCompactSpace","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : SigmaCompactSpace X\ne : Y → X\nhe : Topology.IsClosedEmbedding e\n⊢ SigmaCompactSpace Y","decl":"protected lemma Topology.IsClosedEmbedding.sigmaCompactSpace {e : Y → X}\n    (he : IsClosedEmbedding e) : SigmaCompactSpace Y :=\n  ⟨⟨fun n => e ⁻¹' compactCovering X n, fun _ =>\n      he.isCompact_preimage (isCompact_compactCovering _ _), by\n      rw [← preimage_iUnion, iUnion_compactCovering, preimage_univ]⟩⟩\n\n"}
{"name":"ClosedEmbedding.sigmaCompactSpace","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : SigmaCompactSpace X\ne : Y → X\nhe : Topology.IsClosedEmbedding e\n⊢ SigmaCompactSpace Y","decl":"@[deprecated (since := \"2024-10-20\")]\nalias ClosedEmbedding.sigmaCompactSpace := IsClosedEmbedding.sigmaCompactSpace\n\n"}
{"name":"IsClosed.sigmaCompactSpace","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝¹ : TopologicalSpace X\ninst✝ : SigmaCompactSpace X\ns : Set X\nhs : IsClosed s\n⊢ SigmaCompactSpace ↑s","decl":"theorem IsClosed.sigmaCompactSpace {s : Set X} (hs : IsClosed s) : SigmaCompactSpace s :=\n  hs.isClosedEmbedding_subtypeVal.sigmaCompactSpace\n\n"}
{"name":"instSigmaCompactSpaceULift","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"Y : Type u_2\ninst✝¹ : TopologicalSpace Y\ninst✝ : SigmaCompactSpace Y\n⊢ SigmaCompactSpace (ULift.{u, u_2} Y)","decl":"instance [SigmaCompactSpace Y] : SigmaCompactSpace (ULift.{u} Y) :=\n  IsClosedEmbedding.uliftDown.sigmaCompactSpace\n\n"}
{"name":"LocallyFinite.countable_univ","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\nι : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : SigmaCompactSpace X\nf : ι → Set X\nhf : LocallyFinite f\nhne : ∀ (i : ι), (f i).Nonempty\n⊢ Set.univ.Countable","decl":"/-- If `X` is a `σ`-compact space, then a locally finite family of nonempty sets of `X` can have\nonly countably many elements, `Set.Countable` version. -/\nprotected theorem LocallyFinite.countable_univ {f : ι → Set X} (hf : LocallyFinite f)\n    (hne : ∀ i, (f i).Nonempty) : (univ : Set ι).Countable := by\n  have := fun n => hf.finite_nonempty_inter_compact (isCompact_compactCovering X n)\n  refine (countable_iUnion fun n => (this n).countable).mono fun i _ => ?_\n  rcases hne i with ⟨x, hx⟩\n  rcases iUnion_eq_univ_iff.1 (iUnion_compactCovering X) x with ⟨n, hn⟩\n  exact mem_iUnion.2 ⟨n, x, hx, hn⟩\n\n"}
{"name":"countable_cover_nhdsWithin_of_sigmaCompact","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝¹ : TopologicalSpace X\ninst✝ : SigmaCompactSpace X\nf : X → Set X\ns : Set X\nhs : IsClosed s\nhf : ∀ (x : X), Membership.mem s x → Membership.mem (nhdsWithin x s) (f x)\n⊢ Exists fun t => And (HasSubset.Subset t s) (And t.Countable (HasSubset.Subset s (Set.iUnion fun x => Set.iUnion fun h => f x)))","decl":"/-- In a topological space with sigma compact topology, if `f` is a function that sends each point\n`x` of a closed set `s` to a neighborhood of `x` within `s`, then for some countable set `t ⊆ s`,\nthe neighborhoods `f x`, `x ∈ t`, cover the whole set `s`. -/\ntheorem countable_cover_nhdsWithin_of_sigmaCompact {f : X → Set X} {s : Set X} (hs : IsClosed s)\n    (hf : ∀ x ∈ s, f x ∈ 𝓝[s] x) : ∃ t ⊆ s, t.Countable ∧ s ⊆ ⋃ x ∈ t, f x := by\n  simp only [nhdsWithin, mem_inf_principal] at hf\n  choose t ht hsub using fun n =>\n    ((isCompact_compactCovering X n).inter_right hs).elim_nhds_subcover _ fun x hx => hf x hx.right\n  refine\n    ⟨⋃ n, (t n : Set X), iUnion_subset fun n x hx => (ht n x hx).2,\n      countable_iUnion fun n => (t n).countable_toSet, fun x hx => mem_iUnion₂.2 ?_⟩\n  rcases exists_mem_compactCovering x with ⟨n, hn⟩\n  rcases mem_iUnion₂.1 (hsub n ⟨hn, hx⟩) with ⟨y, hyt : y ∈ t n, hyf : x ∈ s → x ∈ f y⟩\n  exact ⟨y, mem_iUnion.2 ⟨n, hyt⟩, hyf hx⟩\n\n"}
{"name":"countable_cover_nhdsWithin_of_sigma_compact","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝¹ : TopologicalSpace X\ninst✝ : SigmaCompactSpace X\nf : X → Set X\ns : Set X\nhs : IsClosed s\nhf : ∀ (x : X), Membership.mem s x → Membership.mem (nhdsWithin x s) (f x)\n⊢ Exists fun t => And (HasSubset.Subset t s) (And t.Countable (HasSubset.Subset s (Set.iUnion fun x => Set.iUnion fun h => f x)))","decl":"@[deprecated (since := \"2024-11-13\")] alias\ncountable_cover_nhdsWithin_of_sigma_compact := countable_cover_nhdsWithin_of_sigmaCompact\n\n"}
{"name":"countable_cover_nhds_of_sigmaCompact","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝¹ : TopologicalSpace X\ninst✝ : SigmaCompactSpace X\nf : X → Set X\nhf : ∀ (x : X), Membership.mem (nhds x) (f x)\n⊢ Exists fun s => And s.Countable (Eq (Set.iUnion fun x => Set.iUnion fun h => f x) Set.univ)","decl":"/-- In a topological space with sigma compact topology, if `f` is a function that sends each\npoint `x` to a neighborhood of `x`, then for some countable set `s`, the neighborhoods `f x`,\n`x ∈ s`, cover the whole space. -/\ntheorem countable_cover_nhds_of_sigmaCompact {f : X → Set X} (hf : ∀ x, f x ∈ 𝓝 x) :\n    ∃ s : Set X, s.Countable ∧ ⋃ x ∈ s, f x = univ := by\n  simp only [← nhdsWithin_univ] at hf\n  rcases countable_cover_nhdsWithin_of_sigmaCompact isClosed_univ fun x _ => hf x with\n    ⟨s, -, hsc, hsU⟩\n  exact ⟨s, hsc, univ_subset_iff.1 hsU⟩\n"}
{"name":"countable_cover_nhds_of_sigma_compact","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝¹ : TopologicalSpace X\ninst✝ : SigmaCompactSpace X\nf : X → Set X\nhf : ∀ (x : X), Membership.mem (nhds x) (f x)\n⊢ Exists fun s => And s.Countable (Eq (Set.iUnion fun x => Set.iUnion fun h => f x) Set.univ)","decl":"@[deprecated (since := \"2024-11-13\")] alias\ncountable_cover_nhds_of_sigma_compact := countable_cover_nhds_of_sigmaCompact\n\n\n"}
{"name":"CompactExhaustion.iUnion_eq'","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_4\ninst✝ : TopologicalSpace X\nself : CompactExhaustion X\n⊢ Eq (Set.iUnion fun n => self.toFun n) Set.univ","decl":"/-- An [exhaustion by compact sets](https://en.wikipedia.org/wiki/Exhaustion_by_compact_sets) of a\ntopological space is a sequence of compact sets `K n` such that `K n ⊆ interior (K (n + 1))` and\n`⋃ n, K n = univ`.\n\nIf `X` is a locally compact sigma compact space, then `CompactExhaustion.choice X` provides\na choice of an exhaustion by compact sets. This choice is also available as\n`(default : CompactExhaustion X)`. -/\nstructure CompactExhaustion (X : Type*) [TopologicalSpace X] where\n  /-- The sequence of compact sets that form a compact exhaustion. -/\n  toFun : ℕ → Set X\n  /-- The sets in the compact exhaustion are in fact compact. -/\n  isCompact' : ∀ n, IsCompact (toFun n)\n  /-- The sets in the compact exhaustion form a sequence:\n    each set is contained in the interior of the next. -/\n  subset_interior_succ' : ∀ n, toFun n ⊆ interior (toFun (n + 1))\n  /-- The union of all sets in a compact exhaustion equals the entire space. -/\n  iUnion_eq' : ⋃ n, toFun n = univ\n\n"}
{"name":"CompactExhaustion.mk.inj","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_4\ninst✝ : TopologicalSpace X\ntoFun✝ : Nat → Set X\nisCompact'✝ : ∀ (n : Nat), IsCompact (toFun✝ n)\nsubset_interior_succ'✝ : ∀ (n : Nat), HasSubset.Subset (toFun✝ n) (interior (toFun✝ (HAdd.hAdd n 1)))\niUnion_eq'✝ : Eq (Set.iUnion fun n => toFun✝ n) Set.univ\ntoFun : Nat → Set X\nisCompact' : ∀ (n : Nat), IsCompact (toFun n)\nsubset_interior_succ' : ∀ (n : Nat), HasSubset.Subset (toFun n) (interior (toFun (HAdd.hAdd n 1)))\niUnion_eq' : Eq (Set.iUnion fun n => toFun n) Set.univ\nx✝ : Eq { toFun := toFun✝, isCompact' := isCompact'✝, subset_interior_succ' := subset_interior_succ'✝, iUnion_eq' := iUnion_eq'✝ } { toFun := toFun, isCompact' := isCompact', subset_interior_succ' := subset_interior_succ', iUnion_eq' := iUnion_eq' }\n⊢ Eq toFun✝ toFun","decl":"/-- An [exhaustion by compact sets](https://en.wikipedia.org/wiki/Exhaustion_by_compact_sets) of a\ntopological space is a sequence of compact sets `K n` such that `K n ⊆ interior (K (n + 1))` and\n`⋃ n, K n = univ`.\n\nIf `X` is a locally compact sigma compact space, then `CompactExhaustion.choice X` provides\na choice of an exhaustion by compact sets. This choice is also available as\n`(default : CompactExhaustion X)`. -/\nstructure CompactExhaustion (X : Type*) [TopologicalSpace X] where\n  /-- The sequence of compact sets that form a compact exhaustion. -/\n  toFun : ℕ → Set X\n  /-- The sets in the compact exhaustion are in fact compact. -/\n  isCompact' : ∀ n, IsCompact (toFun n)\n  /-- The sets in the compact exhaustion form a sequence:\n    each set is contained in the interior of the next. -/\n  subset_interior_succ' : ∀ n, toFun n ⊆ interior (toFun (n + 1))\n  /-- The union of all sets in a compact exhaustion equals the entire space. -/\n  iUnion_eq' : ⋃ n, toFun n = univ\n\n"}
{"name":"CompactExhaustion.mk.injEq","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_4\ninst✝ : TopologicalSpace X\ntoFun✝ : Nat → Set X\nisCompact'✝ : ∀ (n : Nat), IsCompact (toFun✝ n)\nsubset_interior_succ'✝ : ∀ (n : Nat), HasSubset.Subset (toFun✝ n) (interior (toFun✝ (HAdd.hAdd n 1)))\niUnion_eq'✝ : Eq (Set.iUnion fun n => toFun✝ n) Set.univ\ntoFun : Nat → Set X\nisCompact' : ∀ (n : Nat), IsCompact (toFun n)\nsubset_interior_succ' : ∀ (n : Nat), HasSubset.Subset (toFun n) (interior (toFun (HAdd.hAdd n 1)))\niUnion_eq' : Eq (Set.iUnion fun n => toFun n) Set.univ\n⊢ Eq (Eq { toFun := toFun✝, isCompact' := isCompact'✝, subset_interior_succ' := subset_interior_succ'✝, iUnion_eq' := iUnion_eq'✝ } { toFun := toFun, isCompact' := isCompact', subset_interior_succ' := subset_interior_succ', iUnion_eq' := iUnion_eq' }) (Eq toFun✝ toFun)","decl":"/-- An [exhaustion by compact sets](https://en.wikipedia.org/wiki/Exhaustion_by_compact_sets) of a\ntopological space is a sequence of compact sets `K n` such that `K n ⊆ interior (K (n + 1))` and\n`⋃ n, K n = univ`.\n\nIf `X` is a locally compact sigma compact space, then `CompactExhaustion.choice X` provides\na choice of an exhaustion by compact sets. This choice is also available as\n`(default : CompactExhaustion X)`. -/\nstructure CompactExhaustion (X : Type*) [TopologicalSpace X] where\n  /-- The sequence of compact sets that form a compact exhaustion. -/\n  toFun : ℕ → Set X\n  /-- The sets in the compact exhaustion are in fact compact. -/\n  isCompact' : ∀ n, IsCompact (toFun n)\n  /-- The sets in the compact exhaustion form a sequence:\n    each set is contained in the interior of the next. -/\n  subset_interior_succ' : ∀ n, toFun n ⊆ interior (toFun (n + 1))\n  /-- The union of all sets in a compact exhaustion equals the entire space. -/\n  iUnion_eq' : ⋃ n, toFun n = univ\n\n"}
{"name":"CompactExhaustion.subset_interior_succ'","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_4\ninst✝ : TopologicalSpace X\nself : CompactExhaustion X\nn : Nat\n⊢ HasSubset.Subset (self.toFun n) (interior (self.toFun (HAdd.hAdd n 1)))","decl":"/-- An [exhaustion by compact sets](https://en.wikipedia.org/wiki/Exhaustion_by_compact_sets) of a\ntopological space is a sequence of compact sets `K n` such that `K n ⊆ interior (K (n + 1))` and\n`⋃ n, K n = univ`.\n\nIf `X` is a locally compact sigma compact space, then `CompactExhaustion.choice X` provides\na choice of an exhaustion by compact sets. This choice is also available as\n`(default : CompactExhaustion X)`. -/\nstructure CompactExhaustion (X : Type*) [TopologicalSpace X] where\n  /-- The sequence of compact sets that form a compact exhaustion. -/\n  toFun : ℕ → Set X\n  /-- The sets in the compact exhaustion are in fact compact. -/\n  isCompact' : ∀ n, IsCompact (toFun n)\n  /-- The sets in the compact exhaustion form a sequence:\n    each set is contained in the interior of the next. -/\n  subset_interior_succ' : ∀ n, toFun n ⊆ interior (toFun (n + 1))\n  /-- The union of all sets in a compact exhaustion equals the entire space. -/\n  iUnion_eq' : ⋃ n, toFun n = univ\n\n"}
{"name":"CompactExhaustion.isCompact'","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_4\ninst✝ : TopologicalSpace X\nself : CompactExhaustion X\nn : Nat\n⊢ IsCompact (self.toFun n)","decl":"/-- An [exhaustion by compact sets](https://en.wikipedia.org/wiki/Exhaustion_by_compact_sets) of a\ntopological space is a sequence of compact sets `K n` such that `K n ⊆ interior (K (n + 1))` and\n`⋃ n, K n = univ`.\n\nIf `X` is a locally compact sigma compact space, then `CompactExhaustion.choice X` provides\na choice of an exhaustion by compact sets. This choice is also available as\n`(default : CompactExhaustion X)`. -/\nstructure CompactExhaustion (X : Type*) [TopologicalSpace X] where\n  /-- The sequence of compact sets that form a compact exhaustion. -/\n  toFun : ℕ → Set X\n  /-- The sets in the compact exhaustion are in fact compact. -/\n  isCompact' : ∀ n, IsCompact (toFun n)\n  /-- The sets in the compact exhaustion form a sequence:\n    each set is contained in the interior of the next. -/\n  subset_interior_succ' : ∀ n, toFun n ⊆ interior (toFun (n + 1))\n  /-- The union of all sets in a compact exhaustion equals the entire space. -/\n  iUnion_eq' : ⋃ n, toFun n = univ\n\n"}
{"name":"CompactExhaustion.mk.sizeOf_spec","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_4\ninst✝¹ : TopologicalSpace X\ninst✝ : SizeOf X\ntoFun : Nat → Set X\nisCompact' : ∀ (n : Nat), IsCompact (toFun n)\nsubset_interior_succ' : ∀ (n : Nat), HasSubset.Subset (toFun n) (interior (toFun (HAdd.hAdd n 1)))\niUnion_eq' : Eq (Set.iUnion fun n => toFun n) Set.univ\n⊢ Eq (SizeOf.sizeOf { toFun := toFun, isCompact' := isCompact', subset_interior_succ' := subset_interior_succ', iUnion_eq' := iUnion_eq' }) (HAdd.hAdd 1 (SizeOf.sizeOf iUnion_eq'))","decl":"/-- An [exhaustion by compact sets](https://en.wikipedia.org/wiki/Exhaustion_by_compact_sets) of a\ntopological space is a sequence of compact sets `K n` such that `K n ⊆ interior (K (n + 1))` and\n`⋃ n, K n = univ`.\n\nIf `X` is a locally compact sigma compact space, then `CompactExhaustion.choice X` provides\na choice of an exhaustion by compact sets. This choice is also available as\n`(default : CompactExhaustion X)`. -/\nstructure CompactExhaustion (X : Type*) [TopologicalSpace X] where\n  /-- The sequence of compact sets that form a compact exhaustion. -/\n  toFun : ℕ → Set X\n  /-- The sets in the compact exhaustion are in fact compact. -/\n  isCompact' : ∀ n, IsCompact (toFun n)\n  /-- The sets in the compact exhaustion form a sequence:\n    each set is contained in the interior of the next. -/\n  subset_interior_succ' : ∀ n, toFun n ⊆ interior (toFun (n + 1))\n  /-- The union of all sets in a compact exhaustion equals the entire space. -/\n  iUnion_eq' : ⋃ n, toFun n = univ\n\n"}
{"name":"CompactExhaustion.instRelHomClassNatSetLeSubset","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\n⊢ RelHomClass (CompactExhaustion X) LE.le HasSubset.Subset","decl":"instance : RelHomClass (CompactExhaustion X) LE.le HasSubset.Subset where\n  map_rel f _ _ h := monotone_nat_of_le_succ\n    (fun n ↦ (f.subset_interior_succ' n).trans interior_subset) h\n\n"}
{"name":"CompactExhaustion.toFun_eq_coe","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nK : CompactExhaustion X\n⊢ Eq K.toFun ⇑K","decl":"@[simp]\ntheorem toFun_eq_coe : K.toFun = K := rfl\n\n"}
{"name":"CompactExhaustion.isCompact","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nK : CompactExhaustion X\nn : Nat\n⊢ IsCompact (K n)","decl":"protected theorem isCompact (n : ℕ) : IsCompact (K n) :=\n  K.isCompact' n\n\n"}
{"name":"CompactExhaustion.subset_interior_succ","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nK : CompactExhaustion X\nn : Nat\n⊢ HasSubset.Subset (K n) (interior (K (HAdd.hAdd n 1)))","decl":"theorem subset_interior_succ (n : ℕ) : K n ⊆ interior (K (n + 1)) :=\n  K.subset_interior_succ' n\n\n"}
{"name":"CompactExhaustion.subset","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nK : CompactExhaustion X\nm n : Nat\nh : LE.le m n\n⊢ HasSubset.Subset (K m) (K n)","decl":"@[mono]\nprotected theorem subset ⦃m n : ℕ⦄ (h : m ≤ n) : K m ⊆ K n :=\n  OrderHomClass.mono K h\n\n"}
{"name":"CompactExhaustion.subset_succ","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nK : CompactExhaustion X\nn : Nat\n⊢ HasSubset.Subset (K n) (K (HAdd.hAdd n 1))","decl":"theorem subset_succ (n : ℕ) : K n ⊆ K (n + 1) := K.subset n.le_succ\n\n"}
{"name":"CompactExhaustion.subset_interior","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nK : CompactExhaustion X\nm n : Nat\nh : LT.lt m n\n⊢ HasSubset.Subset (K m) (interior (K n))","decl":"theorem subset_interior ⦃m n : ℕ⦄ (h : m < n) : K m ⊆ interior (K n) :=\n  Subset.trans (K.subset_interior_succ m) <| interior_mono <| K.subset h\n\n"}
{"name":"CompactExhaustion.iUnion_eq","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nK : CompactExhaustion X\n⊢ Eq (Set.iUnion fun n => K n) Set.univ","decl":"theorem iUnion_eq : ⋃ n, K n = univ :=\n  K.iUnion_eq'\n\n"}
{"name":"CompactExhaustion.exists_mem","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nK : CompactExhaustion X\nx : X\n⊢ Exists fun n => Membership.mem (K n) x","decl":"theorem exists_mem (x : X) : ∃ n, x ∈ K n :=\n  iUnion_eq_univ_iff.1 K.iUnion_eq x\n\n"}
{"name":"CompactExhaustion.exists_mem_nhds","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nK : CompactExhaustion X\nx : X\n⊢ Exists fun n => Membership.mem (nhds x) (K n)","decl":"theorem exists_mem_nhds (x : X) : ∃ n, K n ∈ 𝓝 x := by\n  rcases K.exists_mem x with ⟨n, hn⟩\n  exact ⟨n + 1, mem_interior_iff_mem_nhds.mp <| K.subset_interior_succ n hn⟩\n\n"}
{"name":"CompactExhaustion.exists_superset_of_isCompact","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nK : CompactExhaustion X\ns : Set X\nhs : IsCompact s\n⊢ Exists fun n => HasSubset.Subset s (K n)","decl":"/-- A compact exhaustion eventually covers any compact set. -/\ntheorem exists_superset_of_isCompact {s : Set X} (hs : IsCompact s) : ∃ n, s ⊆ K n := by\n  suffices ∃ n, s ⊆ interior (K n) from this.imp fun _ ↦ (Subset.trans · interior_subset)\n  refine hs.elim_directed_cover (interior ∘ K) (fun _ ↦ isOpen_interior) ?_ ?_\n  · intro x _\n    rcases K.exists_mem x with ⟨k, hk⟩\n    exact mem_iUnion.2 ⟨k + 1, K.subset_interior_succ _ hk⟩\n  · exact Monotone.directed_le fun _ _ h ↦ interior_mono <| K.subset h\n\n"}
{"name":"CompactExhaustion.mem_find","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nK : CompactExhaustion X\nx : X\n⊢ Membership.mem (K (K.find x)) x","decl":"theorem mem_find (x : X) : x ∈ K (K.find x) := by\n  classical\n  exact Nat.find_spec (K.exists_mem x)\n\n"}
{"name":"CompactExhaustion.mem_iff_find_le","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nK : CompactExhaustion X\nx : X\nn : Nat\n⊢ Iff (Membership.mem (K n) x) (LE.le (K.find x) n)","decl":"theorem mem_iff_find_le {x : X} {n : ℕ} : x ∈ K n ↔ K.find x ≤ n := by\n  classical\n  exact ⟨fun h => Nat.find_min' (K.exists_mem x) h, fun h => K.subset h <| K.mem_find x⟩\n\n"}
{"name":"CompactExhaustion.find_shiftr","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nK : CompactExhaustion X\nx : X\n⊢ Eq (K.shiftr.find x) (HAdd.hAdd (K.find x) 1)","decl":"@[simp]\ntheorem find_shiftr (x : X) : K.shiftr.find x = K.find x + 1 := by\n  classical\n  exact Nat.find_comp_succ _ _ (not_mem_empty _)\n\n"}
{"name":"CompactExhaustion.mem_diff_shiftr_find","module":"Mathlib.Topology.Compactness.SigmaCompact","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nK : CompactExhaustion X\nx : X\n⊢ Membership.mem (SDiff.sdiff (K.shiftr (HAdd.hAdd (K.find x) 1)) (K.shiftr (K.find x))) x","decl":"theorem mem_diff_shiftr_find (x : X) : x ∈ K.shiftr (K.find x + 1) \\ K.shiftr (K.find x) :=\n  ⟨K.mem_find _,\n    mt K.shiftr.mem_iff_find_le.1 <| by simp only [find_shiftr, not_le, Nat.lt_succ_self]⟩\n\n"}
