{"name":"Submodule.coe_norm","module":"Mathlib.Analysis.Normed.Group.Submodule","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : Ring 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : Module 𝕜 E\ns : Submodule 𝕜 E\nx : Subtype fun x => Membership.mem s x\n⊢ Eq (Norm.norm x) (Norm.norm ↑x)","decl":"/-- If `x` is an element of a submodule `s` of a normed group `E`, its norm in `s` is equal to its\nnorm in `E`. -/\n@[simp]\ntheorem coe_norm [Ring 𝕜] [SeminormedAddCommGroup E] [Module 𝕜 E] {s : Submodule 𝕜 E}\n    (x : s) : ‖x‖ = ‖(x : E)‖ :=\n  rfl\n\n"}
{"name":"Submodule.norm_coe","module":"Mathlib.Analysis.Normed.Group.Submodule","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : Ring 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : Module 𝕜 E\ns : Submodule 𝕜 E\nx : Subtype fun x => Membership.mem s x\n⊢ Eq (Norm.norm ↑x) (Norm.norm x)","decl":"/-- If `x` is an element of a submodule `s` of a normed group `E`, its norm in `E` is equal to its\nnorm in `s`.\n\nThis is a reversed version of the `simp` lemma `Submodule.coe_norm` for use by `norm_cast`. -/\n@[norm_cast]\ntheorem norm_coe [Ring 𝕜] [SeminormedAddCommGroup E] [Module 𝕜 E] {s : Submodule 𝕜 E}\n    (x : s) : ‖(x : E)‖ = ‖x‖ :=\n  rfl\n\n"}
