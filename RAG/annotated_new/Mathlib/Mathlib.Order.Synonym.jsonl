{"name":"OrderDual.instNontrivial","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\nh : Nontrivial α\n⊢ Nontrivial (OrderDual α)","decl":"instance [h : Nontrivial α] : Nontrivial αᵒᵈ :=\n  h\n\n"}
{"name":"OrderDual.toDual_symm_eq","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\n⊢ Eq OrderDual.toDual.symm OrderDual.ofDual","decl":"@[simp]\ntheorem toDual_symm_eq : (@toDual α).symm = ofDual := rfl\n\n"}
{"name":"OrderDual.ofDual_symm_eq","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\n⊢ Eq OrderDual.ofDual.symm OrderDual.toDual","decl":"@[simp]\ntheorem ofDual_symm_eq : (@ofDual α).symm = toDual := rfl\n\n"}
{"name":"OrderDual.toDual_ofDual","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\na : OrderDual α\n⊢ Eq (OrderDual.toDual (OrderDual.ofDual a)) a","decl":"@[simp]\ntheorem toDual_ofDual (a : αᵒᵈ) : toDual (ofDual a) = a :=\n  rfl\n\n"}
{"name":"OrderDual.ofDual_toDual","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\na : α\n⊢ Eq (OrderDual.ofDual (OrderDual.toDual a)) a","decl":"@[simp]\ntheorem ofDual_toDual (a : α) : ofDual (toDual a) = a :=\n  rfl\n\n-- Porting note:\n-- removed @[simp] since this already follows by `simp only [EmbeddingLike.apply_eq_iff_eq]`\n"}
{"name":"OrderDual.toDual_inj","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\na b : α\n⊢ Iff (Eq (OrderDual.toDual a) (OrderDual.toDual b)) (Eq a b)","decl":"theorem toDual_inj {a b : α} : toDual a = toDual b ↔ a = b :=\n  Iff.rfl\n\n-- Porting note:\n-- removed @[simp] since this already follows by `simp only [EmbeddingLike.apply_eq_iff_eq]`\n"}
{"name":"OrderDual.ofDual_inj","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\na b : OrderDual α\n⊢ Iff (Eq (OrderDual.ofDual a) (OrderDual.ofDual b)) (Eq a b)","decl":"theorem ofDual_inj {a b : αᵒᵈ} : ofDual a = ofDual b ↔ a = b :=\n  Iff.rfl\n\n"}
{"name":"OrderDual.toDual_le_toDual","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\ninst✝ : LE α\na b : α\n⊢ Iff (LE.le (OrderDual.toDual a) (OrderDual.toDual b)) (LE.le b a)","decl":"@[simp]\ntheorem toDual_le_toDual [LE α] {a b : α} : toDual a ≤ toDual b ↔ b ≤ a :=\n  Iff.rfl\n\n"}
{"name":"OrderDual.toDual_lt_toDual","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\ninst✝ : LT α\na b : α\n⊢ Iff (LT.lt (OrderDual.toDual a) (OrderDual.toDual b)) (LT.lt b a)","decl":"@[simp]\ntheorem toDual_lt_toDual [LT α] {a b : α} : toDual a < toDual b ↔ b < a :=\n  Iff.rfl\n\n"}
{"name":"OrderDual.ofDual_le_ofDual","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\ninst✝ : LE α\na b : OrderDual α\n⊢ Iff (LE.le (OrderDual.ofDual a) (OrderDual.ofDual b)) (LE.le b a)","decl":"@[simp]\ntheorem ofDual_le_ofDual [LE α] {a b : αᵒᵈ} : ofDual a ≤ ofDual b ↔ b ≤ a :=\n  Iff.rfl\n\n"}
{"name":"OrderDual.ofDual_lt_ofDual","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\ninst✝ : LT α\na b : OrderDual α\n⊢ Iff (LT.lt (OrderDual.ofDual a) (OrderDual.ofDual b)) (LT.lt b a)","decl":"@[simp]\ntheorem ofDual_lt_ofDual [LT α] {a b : αᵒᵈ} : ofDual a < ofDual b ↔ b < a :=\n  Iff.rfl\n\n"}
{"name":"OrderDual.le_toDual","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\ninst✝ : LE α\na : OrderDual α\nb : α\n⊢ Iff (LE.le a (OrderDual.toDual b)) (LE.le b (OrderDual.ofDual a))","decl":"theorem le_toDual [LE α] {a : αᵒᵈ} {b : α} : a ≤ toDual b ↔ b ≤ ofDual a :=\n  Iff.rfl\n\n"}
{"name":"OrderDual.lt_toDual","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\ninst✝ : LT α\na : OrderDual α\nb : α\n⊢ Iff (LT.lt a (OrderDual.toDual b)) (LT.lt b (OrderDual.ofDual a))","decl":"theorem lt_toDual [LT α] {a : αᵒᵈ} {b : α} : a < toDual b ↔ b < ofDual a :=\n  Iff.rfl\n\n"}
{"name":"OrderDual.toDual_le","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\ninst✝ : LE α\na : α\nb : OrderDual α\n⊢ Iff (LE.le (OrderDual.toDual a) b) (LE.le (OrderDual.ofDual b) a)","decl":"theorem toDual_le [LE α] {a : α} {b : αᵒᵈ} : toDual a ≤ b ↔ ofDual b ≤ a :=\n  Iff.rfl\n\n"}
{"name":"OrderDual.toDual_lt","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\ninst✝ : LT α\na : α\nb : OrderDual α\n⊢ Iff (LT.lt (OrderDual.toDual a) b) (LT.lt (OrderDual.ofDual b) a)","decl":"theorem toDual_lt [LT α] {a : α} {b : αᵒᵈ} : toDual a < b ↔ ofDual b < a :=\n  Iff.rfl\n\n"}
{"name":"OrderDual.forall","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\np : OrderDual α → Prop\n⊢ Iff (∀ (a : OrderDual α), p a) (∀ (a : α), p (OrderDual.toDual a))","decl":"@[simp]\nprotected theorem «forall» {p : αᵒᵈ → Prop} : (∀ a, p a) ↔ ∀ a, p (toDual a) :=\n  Iff.rfl\n\n"}
{"name":"OrderDual.exists","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\np : OrderDual α → Prop\n⊢ Iff (Exists fun a => p a) (Exists fun a => p (OrderDual.toDual a))","decl":"@[simp]\nprotected theorem «exists» {p : αᵒᵈ → Prop} : (∃ a, p a) ↔ ∃ a, p (toDual a) :=\n  Iff.rfl\n\n"}
{"name":"LE.le.dual","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\ninst✝ : LE α\na b : α\na✝ : LE.le b a\n⊢ LE.le (OrderDual.toDual a) (OrderDual.toDual b)","decl":"alias ⟨_, _root_.LE.le.dual⟩ := toDual_le_toDual\n\n"}
{"name":"LT.lt.dual","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\ninst✝ : LT α\na b : α\na✝ : LT.lt b a\n⊢ LT.lt (OrderDual.toDual a) (OrderDual.toDual b)","decl":"alias ⟨_, _root_.LT.lt.dual⟩ := toDual_lt_toDual\n\n"}
{"name":"LE.le.ofDual","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\ninst✝ : LE α\na b : OrderDual α\na✝ : LE.le b a\n⊢ LE.le (OrderDual.ofDual a) (OrderDual.ofDual b)","decl":"alias ⟨_, _root_.LE.le.ofDual⟩ := ofDual_le_ofDual\n\n"}
{"name":"LT.lt.ofDual","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\ninst✝ : LT α\na b : OrderDual α\na✝ : LT.lt b a\n⊢ LT.lt (OrderDual.ofDual a) (OrderDual.ofDual b)","decl":"alias ⟨_, _root_.LT.lt.ofDual⟩ := ofDual_lt_ofDual\n\n"}
{"name":"toLex_symm_eq","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\n⊢ Eq toLex.symm ofLex","decl":"@[simp]\ntheorem toLex_symm_eq : (@toLex α).symm = ofLex :=\n  rfl\n\n"}
{"name":"ofLex_symm_eq","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\n⊢ Eq ofLex.symm toLex","decl":"@[simp]\ntheorem ofLex_symm_eq : (@ofLex α).symm = toLex :=\n  rfl\n\n"}
{"name":"toLex_ofLex","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\na : Lex α\n⊢ Eq (toLex (ofLex a)) a","decl":"@[simp]\ntheorem toLex_ofLex (a : Lex α) : toLex (ofLex a) = a :=\n  rfl\n\n"}
{"name":"ofLex_toLex","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\na : α\n⊢ Eq (ofLex (toLex a)) a","decl":"@[simp]\ntheorem ofLex_toLex (a : α) : ofLex (toLex a) = a :=\n  rfl\n\n-- Porting note:\n-- removed @[simp] since this already follows by `simp only [EmbeddingLike.apply_eq_iff_eq]`\n"}
{"name":"toLex_inj","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\na b : α\n⊢ Iff (Eq (toLex a) (toLex b)) (Eq a b)","decl":"theorem toLex_inj {a b : α} : toLex a = toLex b ↔ a = b :=\n  Iff.rfl\n\n-- Porting note:\n-- removed @[simp] since this already follows by `simp only [EmbeddingLike.apply_eq_iff_eq]`\n"}
{"name":"ofLex_inj","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\na b : Lex α\n⊢ Iff (Eq (ofLex a) (ofLex b)) (Eq a b)","decl":"theorem ofLex_inj {a b : Lex α} : ofLex a = ofLex b ↔ a = b :=\n  Iff.rfl\n\n"}
{"name":"instLawfulBEqLex","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_2\ninst✝¹ : BEq α\ninst✝ : LawfulBEq α\n⊢ LawfulBEq (Lex α)","decl":"instance (α : Type*) [BEq α] [LawfulBEq α] : LawfulBEq (Lex α) :=\n  inferInstanceAs (LawfulBEq α)\n\n"}
{"name":"Lex.forall","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\np : Lex α → Prop\n⊢ Iff (∀ (a : Lex α), p a) (∀ (a : α), p (toLex a))","decl":"@[simp] lemma Lex.forall {p : Lex α → Prop} : (∀ a, p a) ↔ ∀ a, p (toLex a) := Iff.rfl\n"}
{"name":"Lex.exists","module":"Mathlib.Order.Synonym","initialProofState":"α : Type u_1\np : Lex α → Prop\n⊢ Iff (Exists fun a => p a) (Exists fun a => p (toLex a))","decl":"@[simp] lemma Lex.exists {p : Lex α → Prop} : (∃ a, p a) ↔ ∃ a, p (toLex a) := Iff.rfl\n"}
