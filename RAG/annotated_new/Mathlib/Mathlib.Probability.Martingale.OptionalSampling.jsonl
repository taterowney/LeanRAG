{"name":"MeasureTheory.Martingale.condExp_stopping_time_ae_eq_restrict_eq_const","module":"Mathlib.Probability.Martingale.OptionalSampling","initialProofState":"Ω : Type u_1\nE : Type u_2\nm : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace Real E\ninst✝⁷ : CompleteSpace E\nι : Type u_3\ninst✝⁶ : LinearOrder ι\ninst✝⁵ : TopologicalSpace ι\ninst✝⁴ : OrderTopology ι\ninst✝³ : FirstCountableTopology ι\nℱ : MeasureTheory.Filtration ι m\ninst✝² : MeasureTheory.SigmaFiniteFiltration μ ℱ\nτ : Ω → ι\nf : ι → Ω → E\ni n : ι\ninst✝¹ : Filter.atTop.IsCountablyGenerated\nh : MeasureTheory.Martingale f ℱ μ\nhτ : MeasureTheory.IsStoppingTime ℱ τ\ninst✝ : MeasureTheory.SigmaFinite (μ.trim ⋯)\nhin : LE.le i n\n⊢ (MeasureTheory.ae (μ.restrict (setOf fun x => Eq (τ x) i))).EventuallyEq (MeasureTheory.condExp hτ.measurableSpace μ (f n)) (f i)","decl":"theorem condExp_stopping_time_ae_eq_restrict_eq_const\n    [(Filter.atTop : Filter ι).IsCountablyGenerated] (h : Martingale f ℱ μ)\n    (hτ : IsStoppingTime ℱ τ) [SigmaFinite (μ.trim hτ.measurableSpace_le)] (hin : i ≤ n) :\n    μ[f n|hτ.measurableSpace] =ᵐ[μ.restrict {x | τ x = i}] f i := by\n  refine Filter.EventuallyEq.trans ?_ (ae_restrict_of_ae (h.condExp_ae_eq hin))\n  refine condExp_ae_eq_restrict_of_measurableSpace_eq_on hτ.measurableSpace_le (ℱ.le i)\n    (hτ.measurableSet_eq' i) fun t => ?_\n  rw [Set.inter_comm _ t, IsStoppingTime.measurableSet_inter_eq_iff]\n\n"}
{"name":"MeasureTheory.Martingale.condexp_stopping_time_ae_eq_restrict_eq_const","module":"Mathlib.Probability.Martingale.OptionalSampling","initialProofState":"Ω : Type u_1\nE : Type u_2\nm : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace Real E\ninst✝⁷ : CompleteSpace E\nι : Type u_3\ninst✝⁶ : LinearOrder ι\ninst✝⁵ : TopologicalSpace ι\ninst✝⁴ : OrderTopology ι\ninst✝³ : FirstCountableTopology ι\nℱ : MeasureTheory.Filtration ι m\ninst✝² : MeasureTheory.SigmaFiniteFiltration μ ℱ\nτ : Ω → ι\nf : ι → Ω → E\ni n : ι\ninst✝¹ : Filter.atTop.IsCountablyGenerated\nh : MeasureTheory.Martingale f ℱ μ\nhτ : MeasureTheory.IsStoppingTime ℱ τ\ninst✝ : MeasureTheory.SigmaFinite (μ.trim ⋯)\nhin : LE.le i n\n⊢ (MeasureTheory.ae (μ.restrict (setOf fun x => Eq (τ x) i))).EventuallyEq (MeasureTheory.condExp hτ.measurableSpace μ (f n)) (f i)","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexp_stopping_time_ae_eq_restrict_eq_const := condExp_stopping_time_ae_eq_restrict_eq_const\n\n"}
{"name":"MeasureTheory.Martingale.condExp_stopping_time_ae_eq_restrict_eq_const_of_le_const","module":"Mathlib.Probability.Martingale.OptionalSampling","initialProofState":"Ω : Type u_1\nE : Type u_2\nm : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace Real E\ninst✝⁶ : CompleteSpace E\nι : Type u_3\ninst✝⁵ : LinearOrder ι\ninst✝⁴ : TopologicalSpace ι\ninst✝³ : OrderTopology ι\ninst✝² : FirstCountableTopology ι\nℱ : MeasureTheory.Filtration ι m\ninst✝¹ : MeasureTheory.SigmaFiniteFiltration μ ℱ\nτ : Ω → ι\nf : ι → Ω → E\nn : ι\nh : MeasureTheory.Martingale f ℱ μ\nhτ : MeasureTheory.IsStoppingTime ℱ τ\nhτ_le : ∀ (x : Ω), LE.le (τ x) n\ninst✝ : MeasureTheory.SigmaFinite (μ.trim ⋯)\ni : ι\n⊢ (MeasureTheory.ae (μ.restrict (setOf fun x => Eq (τ x) i))).EventuallyEq (MeasureTheory.condExp hτ.measurableSpace μ (f n)) (f i)","decl":"theorem condExp_stopping_time_ae_eq_restrict_eq_const_of_le_const (h : Martingale f ℱ μ)\n    (hτ : IsStoppingTime ℱ τ) (hτ_le : ∀ x, τ x ≤ n)\n    [SigmaFinite (μ.trim (hτ.measurableSpace_le_of_le hτ_le))] (i : ι) :\n    μ[f n|hτ.measurableSpace] =ᵐ[μ.restrict {x | τ x = i}] f i := by\n  by_cases hin : i ≤ n\n  · refine Filter.EventuallyEq.trans ?_ (ae_restrict_of_ae (h.condExp_ae_eq hin))\n    refine condExp_ae_eq_restrict_of_measurableSpace_eq_on (hτ.measurableSpace_le_of_le hτ_le)\n      (ℱ.le i) (hτ.measurableSet_eq' i) fun t => ?_\n    rw [Set.inter_comm _ t, IsStoppingTime.measurableSet_inter_eq_iff]\n  · suffices {x : Ω | τ x = i} = ∅ by simp [this]; norm_cast\n    ext1 x\n    simp only [Set.mem_setOf_eq, Set.mem_empty_iff_false, iff_false]\n    rintro rfl\n    exact hin (hτ_le x)\n\n"}
{"name":"MeasureTheory.Martingale.condexp_stopping_time_ae_eq_restrict_eq_const_of_le_const","module":"Mathlib.Probability.Martingale.OptionalSampling","initialProofState":"Ω : Type u_1\nE : Type u_2\nm : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace Real E\ninst✝⁶ : CompleteSpace E\nι : Type u_3\ninst✝⁵ : LinearOrder ι\ninst✝⁴ : TopologicalSpace ι\ninst✝³ : OrderTopology ι\ninst✝² : FirstCountableTopology ι\nℱ : MeasureTheory.Filtration ι m\ninst✝¹ : MeasureTheory.SigmaFiniteFiltration μ ℱ\nτ : Ω → ι\nf : ι → Ω → E\nn : ι\nh : MeasureTheory.Martingale f ℱ μ\nhτ : MeasureTheory.IsStoppingTime ℱ τ\nhτ_le : ∀ (x : Ω), LE.le (τ x) n\ninst✝ : MeasureTheory.SigmaFinite (μ.trim ⋯)\ni : ι\n⊢ (MeasureTheory.ae (μ.restrict (setOf fun x => Eq (τ x) i))).EventuallyEq (MeasureTheory.condExp hτ.measurableSpace μ (f n)) (f i)","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexp_stopping_time_ae_eq_restrict_eq_const_of_le_const :=\n  condExp_stopping_time_ae_eq_restrict_eq_const_of_le_const\n\n"}
{"name":"MeasureTheory.Martingale.stoppedValue_ae_eq_restrict_eq","module":"Mathlib.Probability.Martingale.OptionalSampling","initialProofState":"Ω : Type u_1\nE : Type u_2\nm : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace Real E\ninst✝⁶ : CompleteSpace E\nι : Type u_3\ninst✝⁵ : LinearOrder ι\ninst✝⁴ : TopologicalSpace ι\ninst✝³ : OrderTopology ι\ninst✝² : FirstCountableTopology ι\nℱ : MeasureTheory.Filtration ι m\ninst✝¹ : MeasureTheory.SigmaFiniteFiltration μ ℱ\nτ : Ω → ι\nf : ι → Ω → E\nn : ι\nh : MeasureTheory.Martingale f ℱ μ\nhτ : MeasureTheory.IsStoppingTime ℱ τ\nhτ_le : ∀ (x : Ω), LE.le (τ x) n\ninst✝ : MeasureTheory.SigmaFinite (μ.trim ⋯)\ni : ι\n⊢ (MeasureTheory.ae (μ.restrict (setOf fun x => Eq (τ x) i))).EventuallyEq (MeasureTheory.stoppedValue f τ) (MeasureTheory.condExp hτ.measurableSpace μ (f n))","decl":"theorem stoppedValue_ae_eq_restrict_eq (h : Martingale f ℱ μ) (hτ : IsStoppingTime ℱ τ)\n    (hτ_le : ∀ x, τ x ≤ n) [SigmaFinite (μ.trim (hτ.measurableSpace_le_of_le hτ_le))] (i : ι) :\n    stoppedValue f τ =ᵐ[μ.restrict {x | τ x = i}] μ[f n|hτ.measurableSpace] := by\n  refine Filter.EventuallyEq.trans ?_\n    (condExp_stopping_time_ae_eq_restrict_eq_const_of_le_const h hτ hτ_le i).symm\n  rw [Filter.EventuallyEq, ae_restrict_iff' (ℱ.le _ _ (hτ.measurableSet_eq i))]\n  refine Filter.Eventually.of_forall fun x hx => ?_\n  rw [Set.mem_setOf_eq] at hx\n  simp_rw [stoppedValue, hx]\n\n"}
{"name":"MeasureTheory.Martingale.stoppedValue_ae_eq_condExp_of_le_const_of_countable_range","module":"Mathlib.Probability.Martingale.OptionalSampling","initialProofState":"Ω : Type u_1\nE : Type u_2\nm : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace Real E\ninst✝⁶ : CompleteSpace E\nι : Type u_3\ninst✝⁵ : LinearOrder ι\ninst✝⁴ : TopologicalSpace ι\ninst✝³ : OrderTopology ι\ninst✝² : FirstCountableTopology ι\nℱ : MeasureTheory.Filtration ι m\ninst✝¹ : MeasureTheory.SigmaFiniteFiltration μ ℱ\nτ : Ω → ι\nf : ι → Ω → E\nn : ι\nh : MeasureTheory.Martingale f ℱ μ\nhτ : MeasureTheory.IsStoppingTime ℱ τ\nhτ_le : ∀ (x : Ω), LE.le (τ x) n\nh_countable_range : (Set.range τ).Countable\ninst✝ : MeasureTheory.SigmaFinite (μ.trim ⋯)\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.stoppedValue f τ) (MeasureTheory.condExp hτ.measurableSpace μ (f n))","decl":"/-- The value of a martingale `f` at a stopping time `τ` bounded by `n` is the conditional\nexpectation of `f n` with respect to the σ-algebra generated by `τ`. -/\ntheorem stoppedValue_ae_eq_condExp_of_le_const_of_countable_range (h : Martingale f ℱ μ)\n    (hτ : IsStoppingTime ℱ τ) (hτ_le : ∀ x, τ x ≤ n) (h_countable_range : (Set.range τ).Countable)\n    [SigmaFinite (μ.trim (hτ.measurableSpace_le_of_le hτ_le))] :\n    stoppedValue f τ =ᵐ[μ] μ[f n|hτ.measurableSpace] := by\n  have : Set.univ = ⋃ i ∈ Set.range τ, {x | τ x = i} := by\n    ext1 x\n    simp only [Set.mem_univ, Set.mem_range, Set.iUnion_exists, Set.iUnion_iUnion_eq',\n      Set.mem_iUnion, Set.mem_setOf_eq, exists_apply_eq_apply']\n  nth_rw 1 [← @Measure.restrict_univ Ω _ μ]\n  rw [this, ae_eq_restrict_biUnion_iff _ h_countable_range]\n  exact fun i _ => stoppedValue_ae_eq_restrict_eq h _ hτ_le i\n\n"}
{"name":"MeasureTheory.Martingale.stoppedValue_ae_eq_condexp_of_le_const_of_countable_range","module":"Mathlib.Probability.Martingale.OptionalSampling","initialProofState":"Ω : Type u_1\nE : Type u_2\nm : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace Real E\ninst✝⁶ : CompleteSpace E\nι : Type u_3\ninst✝⁵ : LinearOrder ι\ninst✝⁴ : TopologicalSpace ι\ninst✝³ : OrderTopology ι\ninst✝² : FirstCountableTopology ι\nℱ : MeasureTheory.Filtration ι m\ninst✝¹ : MeasureTheory.SigmaFiniteFiltration μ ℱ\nτ : Ω → ι\nf : ι → Ω → E\nn : ι\nh : MeasureTheory.Martingale f ℱ μ\nhτ : MeasureTheory.IsStoppingTime ℱ τ\nhτ_le : ∀ (x : Ω), LE.le (τ x) n\nh_countable_range : (Set.range τ).Countable\ninst✝ : MeasureTheory.SigmaFinite (μ.trim ⋯)\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.stoppedValue f τ) (MeasureTheory.condExp hτ.measurableSpace μ (f n))","decl":"@[deprecated (since := \"2025-01-21\")]\nalias stoppedValue_ae_eq_condexp_of_le_const_of_countable_range :=\n  stoppedValue_ae_eq_condExp_of_le_const_of_countable_range\n\n"}
{"name":"MeasureTheory.Martingale.stoppedValue_ae_eq_condExp_of_le_const","module":"Mathlib.Probability.Martingale.OptionalSampling","initialProofState":"Ω : Type u_1\nE : Type u_2\nm : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace Real E\ninst✝⁷ : CompleteSpace E\nι : Type u_3\ninst✝⁶ : LinearOrder ι\ninst✝⁵ : TopologicalSpace ι\ninst✝⁴ : OrderTopology ι\ninst✝³ : FirstCountableTopology ι\nℱ : MeasureTheory.Filtration ι m\ninst✝² : MeasureTheory.SigmaFiniteFiltration μ ℱ\nτ : Ω → ι\nf : ι → Ω → E\nn : ι\ninst✝¹ : Countable ι\nh : MeasureTheory.Martingale f ℱ μ\nhτ : MeasureTheory.IsStoppingTime ℱ τ\nhτ_le : ∀ (x : Ω), LE.le (τ x) n\ninst✝ : MeasureTheory.SigmaFinite (μ.trim ⋯)\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.stoppedValue f τ) (MeasureTheory.condExp hτ.measurableSpace μ (f n))","decl":"/-- The value of a martingale `f` at a stopping time `τ` bounded by `n` is the conditional\nexpectation of `f n` with respect to the σ-algebra generated by `τ`. -/\ntheorem stoppedValue_ae_eq_condExp_of_le_const [Countable ι] (h : Martingale f ℱ μ)\n    (hτ : IsStoppingTime ℱ τ) (hτ_le : ∀ x, τ x ≤ n)\n    [SigmaFinite (μ.trim (hτ.measurableSpace_le_of_le hτ_le))] :\n    stoppedValue f τ =ᵐ[μ] μ[f n|hτ.measurableSpace] :=\n  h.stoppedValue_ae_eq_condExp_of_le_const_of_countable_range hτ hτ_le (Set.to_countable _)\n\n"}
{"name":"MeasureTheory.Martingale.stoppedValue_ae_eq_condexp_of_le_const","module":"Mathlib.Probability.Martingale.OptionalSampling","initialProofState":"Ω : Type u_1\nE : Type u_2\nm : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace Real E\ninst✝⁷ : CompleteSpace E\nι : Type u_3\ninst✝⁶ : LinearOrder ι\ninst✝⁵ : TopologicalSpace ι\ninst✝⁴ : OrderTopology ι\ninst✝³ : FirstCountableTopology ι\nℱ : MeasureTheory.Filtration ι m\ninst✝² : MeasureTheory.SigmaFiniteFiltration μ ℱ\nτ : Ω → ι\nf : ι → Ω → E\nn : ι\ninst✝¹ : Countable ι\nh : MeasureTheory.Martingale f ℱ μ\nhτ : MeasureTheory.IsStoppingTime ℱ τ\nhτ_le : ∀ (x : Ω), LE.le (τ x) n\ninst✝ : MeasureTheory.SigmaFinite (μ.trim ⋯)\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.stoppedValue f τ) (MeasureTheory.condExp hτ.measurableSpace μ (f n))","decl":"@[deprecated (since := \"2025-01-21\")]\nalias stoppedValue_ae_eq_condexp_of_le_const := stoppedValue_ae_eq_condExp_of_le_const\n\n"}
{"name":"MeasureTheory.Martingale.stoppedValue_ae_eq_condExp_of_le_of_countable_range","module":"Mathlib.Probability.Martingale.OptionalSampling","initialProofState":"Ω : Type u_1\nE : Type u_2\nm : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace Real E\ninst✝⁶ : CompleteSpace E\nι : Type u_3\ninst✝⁵ : LinearOrder ι\ninst✝⁴ : TopologicalSpace ι\ninst✝³ : OrderTopology ι\ninst✝² : FirstCountableTopology ι\nℱ : MeasureTheory.Filtration ι m\ninst✝¹ : MeasureTheory.SigmaFiniteFiltration μ ℱ\nτ σ : Ω → ι\nf : ι → Ω → E\nn : ι\nh : MeasureTheory.Martingale f ℱ μ\nhτ : MeasureTheory.IsStoppingTime ℱ τ\nhσ : MeasureTheory.IsStoppingTime ℱ σ\nhσ_le_τ : LE.le σ τ\nhτ_le : ∀ (x : Ω), LE.le (τ x) n\nhτ_countable_range : (Set.range τ).Countable\nhσ_countable_range : (Set.range σ).Countable\ninst✝ : MeasureTheory.SigmaFinite (μ.trim ⋯)\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.stoppedValue f σ) (MeasureTheory.condExp hσ.measurableSpace μ (MeasureTheory.stoppedValue f τ))","decl":"/-- If `τ` and `σ` are two stopping times with `σ ≤ τ` and `τ` is bounded, then the value of a\nmartingale `f` at `σ` is the conditional expectation of its value at `τ` with respect to the\nσ-algebra generated by `σ`. -/\ntheorem stoppedValue_ae_eq_condExp_of_le_of_countable_range (h : Martingale f ℱ μ)\n    (hτ : IsStoppingTime ℱ τ) (hσ : IsStoppingTime ℱ σ) (hσ_le_τ : σ ≤ τ) (hτ_le : ∀ x, τ x ≤ n)\n    (hτ_countable_range : (Set.range τ).Countable) (hσ_countable_range : (Set.range σ).Countable)\n    [SigmaFinite (μ.trim (hσ.measurableSpace_le_of_le fun x => (hσ_le_τ x).trans (hτ_le x)))] :\n    stoppedValue f σ =ᵐ[μ] μ[stoppedValue f τ|hσ.measurableSpace] := by\n  have : SigmaFinite (μ.trim (hτ.measurableSpace_le_of_le hτ_le)) :=\n    sigmaFiniteTrim_mono _ (IsStoppingTime.measurableSpace_mono hσ hτ hσ_le_τ)\n  have : μ[stoppedValue f τ|hσ.measurableSpace] =ᵐ[μ]\n      μ[μ[f n|hτ.measurableSpace]|hσ.measurableSpace] := condExp_congr_ae\n    (h.stoppedValue_ae_eq_condExp_of_le_const_of_countable_range hτ hτ_le hτ_countable_range)\n  refine (Filter.EventuallyEq.trans ?_\n    (condExp_condExp_of_le ?_ (hτ.measurableSpace_le_of_le hτ_le)).symm).trans this.symm\n  · exact h.stoppedValue_ae_eq_condExp_of_le_const_of_countable_range hσ\n      (fun x => (hσ_le_τ x).trans (hτ_le x)) hσ_countable_range\n  · exact hσ.measurableSpace_mono hτ hσ_le_τ\n\n"}
{"name":"MeasureTheory.Martingale.stoppedValue_ae_eq_condexp_of_le_of_countable_range","module":"Mathlib.Probability.Martingale.OptionalSampling","initialProofState":"Ω : Type u_1\nE : Type u_2\nm : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace Real E\ninst✝⁶ : CompleteSpace E\nι : Type u_3\ninst✝⁵ : LinearOrder ι\ninst✝⁴ : TopologicalSpace ι\ninst✝³ : OrderTopology ι\ninst✝² : FirstCountableTopology ι\nℱ : MeasureTheory.Filtration ι m\ninst✝¹ : MeasureTheory.SigmaFiniteFiltration μ ℱ\nτ σ : Ω → ι\nf : ι → Ω → E\nn : ι\nh : MeasureTheory.Martingale f ℱ μ\nhτ : MeasureTheory.IsStoppingTime ℱ τ\nhσ : MeasureTheory.IsStoppingTime ℱ σ\nhσ_le_τ : LE.le σ τ\nhτ_le : ∀ (x : Ω), LE.le (τ x) n\nhτ_countable_range : (Set.range τ).Countable\nhσ_countable_range : (Set.range σ).Countable\ninst✝ : MeasureTheory.SigmaFinite (μ.trim ⋯)\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.stoppedValue f σ) (MeasureTheory.condExp hσ.measurableSpace μ (MeasureTheory.stoppedValue f τ))","decl":"@[deprecated (since := \"2025-01-21\")]\nalias stoppedValue_ae_eq_condexp_of_le_of_countable_range :=\n  stoppedValue_ae_eq_condExp_of_le_of_countable_range\n\n"}
{"name":"MeasureTheory.Martingale.stoppedValue_ae_eq_condExp_of_le","module":"Mathlib.Probability.Martingale.OptionalSampling","initialProofState":"Ω : Type u_1\nE : Type u_2\nm : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace Real E\ninst✝⁷ : CompleteSpace E\nι : Type u_3\ninst✝⁶ : LinearOrder ι\ninst✝⁵ : TopologicalSpace ι\ninst✝⁴ : OrderTopology ι\ninst✝³ : FirstCountableTopology ι\nℱ : MeasureTheory.Filtration ι m\ninst✝² : MeasureTheory.SigmaFiniteFiltration μ ℱ\nτ σ : Ω → ι\nf : ι → Ω → E\nn : ι\ninst✝¹ : Countable ι\nh : MeasureTheory.Martingale f ℱ μ\nhτ : MeasureTheory.IsStoppingTime ℱ τ\nhσ : MeasureTheory.IsStoppingTime ℱ σ\nhσ_le_τ : LE.le σ τ\nhτ_le : ∀ (x : Ω), LE.le (τ x) n\ninst✝ : MeasureTheory.SigmaFinite (μ.trim ⋯)\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.stoppedValue f σ) (MeasureTheory.condExp hσ.measurableSpace μ (MeasureTheory.stoppedValue f τ))","decl":"/-- If `τ` and `σ` are two stopping times with `σ ≤ τ` and `τ` is bounded, then the value of a\nmartingale `f` at `σ` is the conditional expectation of its value at `τ` with respect to the\nσ-algebra generated by `σ`. -/\ntheorem stoppedValue_ae_eq_condExp_of_le [Countable ι] (h : Martingale f ℱ μ)\n    (hτ : IsStoppingTime ℱ τ) (hσ : IsStoppingTime ℱ σ) (hσ_le_τ : σ ≤ τ) (hτ_le : ∀ x, τ x ≤ n)\n    [SigmaFinite (μ.trim hσ.measurableSpace_le)] :\n    stoppedValue f σ =ᵐ[μ] μ[stoppedValue f τ|hσ.measurableSpace] :=\n  h.stoppedValue_ae_eq_condExp_of_le_of_countable_range hτ hσ hσ_le_τ hτ_le (Set.to_countable _)\n    (Set.to_countable _)\n\n"}
{"name":"MeasureTheory.Martingale.stoppedValue_ae_eq_condexp_of_le","module":"Mathlib.Probability.Martingale.OptionalSampling","initialProofState":"Ω : Type u_1\nE : Type u_2\nm : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace Real E\ninst✝⁷ : CompleteSpace E\nι : Type u_3\ninst✝⁶ : LinearOrder ι\ninst✝⁵ : TopologicalSpace ι\ninst✝⁴ : OrderTopology ι\ninst✝³ : FirstCountableTopology ι\nℱ : MeasureTheory.Filtration ι m\ninst✝² : MeasureTheory.SigmaFiniteFiltration μ ℱ\nτ σ : Ω → ι\nf : ι → Ω → E\nn : ι\ninst✝¹ : Countable ι\nh : MeasureTheory.Martingale f ℱ μ\nhτ : MeasureTheory.IsStoppingTime ℱ τ\nhσ : MeasureTheory.IsStoppingTime ℱ σ\nhσ_le_τ : LE.le σ τ\nhτ_le : ∀ (x : Ω), LE.le (τ x) n\ninst✝ : MeasureTheory.SigmaFinite (μ.trim ⋯)\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.stoppedValue f σ) (MeasureTheory.condExp hσ.measurableSpace μ (MeasureTheory.stoppedValue f τ))","decl":"@[deprecated (since := \"2025-01-21\")]\nalias stoppedValue_ae_eq_condexp_of_le := stoppedValue_ae_eq_condExp_of_le\n\n"}
{"name":"MeasureTheory.Martingale.condExp_stoppedValue_stopping_time_ae_eq_restrict_le","module":"Mathlib.Probability.Martingale.OptionalSampling","initialProofState":"Ω : Type u_1\nE : Type u_2\nm : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝¹³ : NormedAddCommGroup E\ninst✝¹² : NormedSpace Real E\ninst✝¹¹ : CompleteSpace E\nι : Type u_3\ninst✝¹⁰ : LinearOrder ι\ninst✝⁹ : LocallyFiniteOrder ι\ninst✝⁸ : OrderBot ι\ninst✝⁷ : TopologicalSpace ι\ninst✝⁶ : DiscreteTopology ι\ninst✝⁵ : MeasurableSpace ι\ninst✝⁴ : BorelSpace ι\ninst✝³ : MeasurableSpace E\ninst✝² : BorelSpace E\ninst✝¹ : SecondCountableTopology E\nℱ : MeasureTheory.Filtration ι m\nτ σ : Ω → ι\nf : ι → Ω → E\ni : ι\nh : MeasureTheory.Martingale f ℱ μ\nhτ : MeasureTheory.IsStoppingTime ℱ τ\nhσ : MeasureTheory.IsStoppingTime ℱ σ\ninst✝ : MeasureTheory.SigmaFinite (μ.trim ⋯)\nhτ_le : ∀ (x : Ω), LE.le (τ x) i\n⊢ (MeasureTheory.ae (μ.restrict (setOf fun x => LE.le (τ x) (σ x)))).EventuallyEq (MeasureTheory.condExp hσ.measurableSpace μ (MeasureTheory.stoppedValue f τ)) (MeasureTheory.stoppedValue f τ)","decl":"theorem condExp_stoppedValue_stopping_time_ae_eq_restrict_le (h : Martingale f ℱ μ)\n    (hτ : IsStoppingTime ℱ τ) (hσ : IsStoppingTime ℱ σ) [SigmaFinite (μ.trim hσ.measurableSpace_le)]\n    (hτ_le : ∀ x, τ x ≤ i) :\n    μ[stoppedValue f τ|hσ.measurableSpace] =ᵐ[μ.restrict {x : Ω | τ x ≤ σ x}] stoppedValue f τ := by\n  rw [ae_eq_restrict_iff_indicator_ae_eq\n    (hτ.measurableSpace_le _ (hτ.measurableSet_le_stopping_time hσ))]\n  refine (condExp_indicator (integrable_stoppedValue ι hτ h.integrable hτ_le)\n    (hτ.measurableSet_stopping_time_le hσ)).symm.trans ?_\n  have h_int :\n      Integrable ({ω : Ω | τ ω ≤ σ ω}.indicator (stoppedValue (fun n : ι => f n) τ)) μ := by\n    refine (integrable_stoppedValue ι hτ h.integrable hτ_le).indicator ?_\n    exact hτ.measurableSpace_le _ (hτ.measurableSet_le_stopping_time hσ)\n  have h_meas : AEStronglyMeasurable[hσ.measurableSpace]\n      ({ω : Ω | τ ω ≤ σ ω}.indicator (stoppedValue (fun n : ι => f n) τ)) μ := by\n    refine StronglyMeasurable.aestronglyMeasurable ?_\n    refine StronglyMeasurable.stronglyMeasurable_of_measurableSpace_le_on\n      (hτ.measurableSet_le_stopping_time hσ) ?_ ?_ ?_\n    · intro t ht\n      rw [Set.inter_comm _ t] at ht ⊢\n      rw [hτ.measurableSet_inter_le_iff hσ, IsStoppingTime.measurableSet_min_iff hτ hσ] at ht\n      exact ht.2\n    · refine StronglyMeasurable.indicator ?_ (hτ.measurableSet_le_stopping_time hσ)\n      refine Measurable.stronglyMeasurable ?_\n      exact measurable_stoppedValue h.adapted.progMeasurable_of_discrete hτ\n    · intro x hx\n      simp only [hx, Set.indicator_of_not_mem, not_false_iff]\n  exact condExp_of_aestronglyMeasurable' hσ.measurableSpace_le h_meas h_int\n\n"}
{"name":"MeasureTheory.Martingale.condexp_stoppedValue_stopping_time_ae_eq_restrict_le","module":"Mathlib.Probability.Martingale.OptionalSampling","initialProofState":"Ω : Type u_1\nE : Type u_2\nm : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝¹³ : NormedAddCommGroup E\ninst✝¹² : NormedSpace Real E\ninst✝¹¹ : CompleteSpace E\nι : Type u_3\ninst✝¹⁰ : LinearOrder ι\ninst✝⁹ : LocallyFiniteOrder ι\ninst✝⁸ : OrderBot ι\ninst✝⁷ : TopologicalSpace ι\ninst✝⁶ : DiscreteTopology ι\ninst✝⁵ : MeasurableSpace ι\ninst✝⁴ : BorelSpace ι\ninst✝³ : MeasurableSpace E\ninst✝² : BorelSpace E\ninst✝¹ : SecondCountableTopology E\nℱ : MeasureTheory.Filtration ι m\nτ σ : Ω → ι\nf : ι → Ω → E\ni : ι\nh : MeasureTheory.Martingale f ℱ μ\nhτ : MeasureTheory.IsStoppingTime ℱ τ\nhσ : MeasureTheory.IsStoppingTime ℱ σ\ninst✝ : MeasureTheory.SigmaFinite (μ.trim ⋯)\nhτ_le : ∀ (x : Ω), LE.le (τ x) i\n⊢ (MeasureTheory.ae (μ.restrict (setOf fun x => LE.le (τ x) (σ x)))).EventuallyEq (MeasureTheory.condExp hσ.measurableSpace μ (MeasureTheory.stoppedValue f τ)) (MeasureTheory.stoppedValue f τ)","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexp_stoppedValue_stopping_time_ae_eq_restrict_le :=\n  condExp_stoppedValue_stopping_time_ae_eq_restrict_le\n\n"}
{"name":"MeasureTheory.Martingale.stoppedValue_min_ae_eq_condExp","module":"Mathlib.Probability.Martingale.OptionalSampling","initialProofState":"Ω : Type u_1\nE : Type u_2\nm : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝¹³ : NormedAddCommGroup E\ninst✝¹² : NormedSpace Real E\ninst✝¹¹ : CompleteSpace E\nι : Type u_3\ninst✝¹⁰ : LinearOrder ι\ninst✝⁹ : LocallyFiniteOrder ι\ninst✝⁸ : OrderBot ι\ninst✝⁷ : TopologicalSpace ι\ninst✝⁶ : DiscreteTopology ι\ninst✝⁵ : MeasurableSpace ι\ninst✝⁴ : BorelSpace ι\ninst✝³ : MeasurableSpace E\ninst✝² : BorelSpace E\ninst✝¹ : SecondCountableTopology E\nℱ : MeasureTheory.Filtration ι m\nτ σ : Ω → ι\nf : ι → Ω → E\ninst✝ : MeasureTheory.SigmaFiniteFiltration μ ℱ\nh : MeasureTheory.Martingale f ℱ μ\nhτ : MeasureTheory.IsStoppingTime ℱ τ\nhσ : MeasureTheory.IsStoppingTime ℱ σ\nn : ι\nhτ_le : ∀ (x : Ω), LE.le (τ x) n\nh_sf_min : MeasureTheory.SigmaFinite (μ.trim ⋯)\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.stoppedValue f fun x => Min.min (σ x) (τ x)) (MeasureTheory.condExp hσ.measurableSpace μ (MeasureTheory.stoppedValue f τ))","decl":"/-- **Optional Sampling theorem**. If `τ` is a bounded stopping time and `σ` is another stopping\ntime, then the value of a martingale `f` at the stopping time `min τ σ` is almost everywhere equal\nto the conditional expectation of `f` stopped at `τ` with respect to the σ-algebra generated\nby `σ`. -/\ntheorem stoppedValue_min_ae_eq_condExp [SigmaFiniteFiltration μ ℱ] (h : Martingale f ℱ μ)\n    (hτ : IsStoppingTime ℱ τ) (hσ : IsStoppingTime ℱ σ) {n : ι} (hτ_le : ∀ x, τ x ≤ n)\n    [h_sf_min : SigmaFinite (μ.trim (hτ.min hσ).measurableSpace_le)] :\n    (stoppedValue f fun x => min (σ x) (τ x)) =ᵐ[μ] μ[stoppedValue f τ|hσ.measurableSpace] := by\n  refine\n    (h.stoppedValue_ae_eq_condExp_of_le hτ (hσ.min hτ) (fun x => min_le_right _ _) hτ_le).trans ?_\n  refine ae_of_ae_restrict_of_ae_restrict_compl {x | σ x ≤ τ x} ?_ ?_\n  · exact condExp_min_stopping_time_ae_eq_restrict_le hσ hτ\n  · suffices μ[stoppedValue f τ|(hσ.min hτ).measurableSpace] =ᵐ[μ.restrict {x | τ x ≤ σ x}]\n        μ[stoppedValue f τ|hσ.measurableSpace] by\n      rw [ae_restrict_iff' (hσ.measurableSpace_le _ (hσ.measurableSet_le_stopping_time hτ).compl)]\n      rw [Filter.EventuallyEq, ae_restrict_iff'] at this\n      swap; · exact hτ.measurableSpace_le _ (hτ.measurableSet_le_stopping_time hσ)\n      filter_upwards [this] with x hx hx_mem\n      simp only [Set.mem_compl_iff, Set.mem_setOf_eq, not_le] at hx_mem\n      exact hx hx_mem.le\n    apply Filter.EventuallyEq.trans _ ((condExp_min_stopping_time_ae_eq_restrict_le hτ hσ).trans _)\n    · exact stoppedValue f τ\n    · rw [IsStoppingTime.measurableSpace_min hσ, IsStoppingTime.measurableSpace_min hτ, inf_comm]\n    · have h1 : μ[stoppedValue f τ|hτ.measurableSpace] = stoppedValue f τ := by\n        apply condExp_of_stronglyMeasurable hτ.measurableSpace_le\n        · exact Measurable.stronglyMeasurable <|\n            measurable_stoppedValue h.adapted.progMeasurable_of_discrete hτ\n        · exact integrable_stoppedValue ι hτ h.integrable hτ_le\n      rw [h1]\n      exact (condExp_stoppedValue_stopping_time_ae_eq_restrict_le h hτ hσ hτ_le).symm\n\n"}
{"name":"MeasureTheory.Martingale.stoppedValue_min_ae_eq_condexp","module":"Mathlib.Probability.Martingale.OptionalSampling","initialProofState":"Ω : Type u_1\nE : Type u_2\nm : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝¹³ : NormedAddCommGroup E\ninst✝¹² : NormedSpace Real E\ninst✝¹¹ : CompleteSpace E\nι : Type u_3\ninst✝¹⁰ : LinearOrder ι\ninst✝⁹ : LocallyFiniteOrder ι\ninst✝⁸ : OrderBot ι\ninst✝⁷ : TopologicalSpace ι\ninst✝⁶ : DiscreteTopology ι\ninst✝⁵ : MeasurableSpace ι\ninst✝⁴ : BorelSpace ι\ninst✝³ : MeasurableSpace E\ninst✝² : BorelSpace E\ninst✝¹ : SecondCountableTopology E\nℱ : MeasureTheory.Filtration ι m\nτ σ : Ω → ι\nf : ι → Ω → E\ninst✝ : MeasureTheory.SigmaFiniteFiltration μ ℱ\nh : MeasureTheory.Martingale f ℱ μ\nhτ : MeasureTheory.IsStoppingTime ℱ τ\nhσ : MeasureTheory.IsStoppingTime ℱ σ\nn : ι\nhτ_le : ∀ (x : Ω), LE.le (τ x) n\nh_sf_min : MeasureTheory.SigmaFinite (μ.trim ⋯)\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.stoppedValue f fun x => Min.min (σ x) (τ x)) (MeasureTheory.condExp hσ.measurableSpace μ (MeasureTheory.stoppedValue f τ))","decl":"@[deprecated (since := \"2025-01-21\")]\nalias stoppedValue_min_ae_eq_condexp := stoppedValue_min_ae_eq_condExp\n\n"}
