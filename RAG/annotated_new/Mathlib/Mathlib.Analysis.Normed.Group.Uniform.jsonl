{"name":"NormedGroup.to_isometricSMul_right","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedGroup E\n⊢ IsometricSMul (MulOpposite E) E","decl":"@[to_additive]\ninstance NormedGroup.to_isometricSMul_right : IsometricSMul Eᵐᵒᵖ E :=\n  ⟨fun a => Isometry.of_dist_eq fun b c => by simp [dist_eq_norm_div]⟩\n\n"}
{"name":"NormedAddGroup.to_isometricVAdd_right","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddGroup E\n⊢ IsometricVAdd (AddOpposite E) E","decl":"@[to_additive]\ninstance NormedGroup.to_isometricSMul_right : IsometricSMul Eᵐᵒᵖ E :=\n  ⟨fun a => Isometry.of_dist_eq fun b c => by simp [dist_eq_norm_div]⟩\n\n"}
{"name":"Isometry.norm_map_of_map_zero","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedAddGroup E\ninst✝ : SeminormedAddGroup F\nf : E → F\nhi : Isometry f\nh₁ : Eq (f 0) 0\nx : E\n⊢ Eq (Norm.norm (f x)) (Norm.norm x)","decl":"@[to_additive]\ntheorem Isometry.norm_map_of_map_one {f : E → F} (hi : Isometry f) (h₁ : f 1 = 1) (x : E) :\n    ‖f x‖ = ‖x‖ := by rw [← dist_one_right, ← h₁, hi.dist_eq, dist_one_right]\n\n"}
{"name":"Isometry.norm_map_of_map_one","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedGroup E\ninst✝ : SeminormedGroup F\nf : E → F\nhi : Isometry f\nh₁ : Eq (f 1) 1\nx : E\n⊢ Eq (Norm.norm (f x)) (Norm.norm x)","decl":"@[to_additive]\ntheorem Isometry.norm_map_of_map_one {f : E → F} (hi : Isometry f) (h₁ : f 1 = 1) (x : E) :\n    ‖f x‖ = ‖x‖ := by rw [← dist_one_right, ← h₁, hi.dist_eq, dist_one_right]\n\n"}
{"name":"dist_mul_self_right","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedGroup E\na b : E\n⊢ Eq (Dist.dist b (HMul.hMul a b)) (Norm.norm a)","decl":"@[to_additive (attr := simp)]\ntheorem dist_mul_self_right (a b : E) : dist b (a * b) = ‖a‖ := by\n  rw [← dist_one_left, ← dist_mul_right 1 a b, one_mul]\n\n"}
{"name":"dist_add_self_right","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddGroup E\na b : E\n⊢ Eq (Dist.dist b (HAdd.hAdd a b)) (Norm.norm a)","decl":"@[to_additive (attr := simp)]\ntheorem dist_mul_self_right (a b : E) : dist b (a * b) = ‖a‖ := by\n  rw [← dist_one_left, ← dist_mul_right 1 a b, one_mul]\n\n"}
{"name":"dist_add_self_left","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddGroup E\na b : E\n⊢ Eq (Dist.dist (HAdd.hAdd a b) b) (Norm.norm a)","decl":"@[to_additive (attr := simp)]\ntheorem dist_mul_self_left (a b : E) : dist (a * b) b = ‖a‖ := by\n  rw [dist_comm, dist_mul_self_right]\n\n"}
{"name":"dist_mul_self_left","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedGroup E\na b : E\n⊢ Eq (Dist.dist (HMul.hMul a b) b) (Norm.norm a)","decl":"@[to_additive (attr := simp)]\ntheorem dist_mul_self_left (a b : E) : dist (a * b) b = ‖a‖ := by\n  rw [dist_comm, dist_mul_self_right]\n\n"}
{"name":"dist_div_eq_dist_mul_left","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedGroup E\na b c : E\n⊢ Eq (Dist.dist (HDiv.hDiv a b) c) (Dist.dist a (HMul.hMul c b))","decl":"@[to_additive (attr := simp)]\ntheorem dist_div_eq_dist_mul_left (a b c : E) : dist (a / b) c = dist a (c * b) := by\n  rw [← dist_mul_right _ _ b, div_mul_cancel]\n\n"}
{"name":"dist_sub_eq_dist_add_left","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddGroup E\na b c : E\n⊢ Eq (Dist.dist (HSub.hSub a b) c) (Dist.dist a (HAdd.hAdd c b))","decl":"@[to_additive (attr := simp)]\ntheorem dist_div_eq_dist_mul_left (a b c : E) : dist (a / b) c = dist a (c * b) := by\n  rw [← dist_mul_right _ _ b, div_mul_cancel]\n\n"}
{"name":"dist_sub_eq_dist_add_right","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddGroup E\na b c : E\n⊢ Eq (Dist.dist a (HSub.hSub b c)) (Dist.dist (HAdd.hAdd a c) b)","decl":"@[to_additive (attr := simp)]\ntheorem dist_div_eq_dist_mul_right (a b c : E) : dist a (b / c) = dist (a * c) b := by\n  rw [← dist_mul_right _ _ c, div_mul_cancel]\n\n"}
{"name":"dist_div_eq_dist_mul_right","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedGroup E\na b c : E\n⊢ Eq (Dist.dist a (HDiv.hDiv b c)) (Dist.dist (HMul.hMul a c) b)","decl":"@[to_additive (attr := simp)]\ntheorem dist_div_eq_dist_mul_right (a b c : E) : dist a (b / c) = dist (a * c) b := by\n  rw [← dist_mul_right _ _ c, div_mul_cancel]\n\n"}
{"name":"MonoidHomClass.lipschitz_of_bound","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"𝓕 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝³ : SeminormedGroup E\ninst✝² : SeminormedGroup F\ninst✝¹ : FunLike 𝓕 E F\ninst✝ : MonoidHomClass 𝓕 E F\nf : 𝓕\nC : Real\nh : ∀ (x : E), LE.le (Norm.norm (f x)) (HMul.hMul C (Norm.norm x))\n⊢ LipschitzWith C.toNNReal ⇑f","decl":"/-- A homomorphism `f` of seminormed groups is Lipschitz, if there exists a constant `C` such that\nfor all `x`, one has `‖f x‖ ≤ C * ‖x‖`. The analogous condition for a linear map of\n(semi)normed spaces is in `Mathlib/Analysis/NormedSpace/OperatorNorm.lean`. -/\n@[to_additive \"A homomorphism `f` of seminormed groups is Lipschitz, if there exists a constant\n`C` such that for all `x`, one has `‖f x‖ ≤ C * ‖x‖`. The analogous condition for a linear map of\n(semi)normed spaces is in `Mathlib/Analysis/NormedSpace/OperatorNorm.lean`.\"]\ntheorem MonoidHomClass.lipschitz_of_bound [MonoidHomClass 𝓕 E F] (f : 𝓕) (C : ℝ)\n    (h : ∀ x, ‖f x‖ ≤ C * ‖x‖) : LipschitzWith (Real.toNNReal C) f :=\n  LipschitzWith.of_dist_le' fun x y => by simpa only [dist_eq_norm_div, map_div] using h (x / y)\n\n"}
{"name":"AddMonoidHomClass.lipschitz_of_bound","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"𝓕 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝³ : SeminormedAddGroup E\ninst✝² : SeminormedAddGroup F\ninst✝¹ : FunLike 𝓕 E F\ninst✝ : AddMonoidHomClass 𝓕 E F\nf : 𝓕\nC : Real\nh : ∀ (x : E), LE.le (Norm.norm (f x)) (HMul.hMul C (Norm.norm x))\n⊢ LipschitzWith C.toNNReal ⇑f","decl":"/-- A homomorphism `f` of seminormed groups is Lipschitz, if there exists a constant `C` such that\nfor all `x`, one has `‖f x‖ ≤ C * ‖x‖`. The analogous condition for a linear map of\n(semi)normed spaces is in `Mathlib/Analysis/NormedSpace/OperatorNorm.lean`. -/\n@[to_additive \"A homomorphism `f` of seminormed groups is Lipschitz, if there exists a constant\n`C` such that for all `x`, one has `‖f x‖ ≤ C * ‖x‖`. The analogous condition for a linear map of\n(semi)normed spaces is in `Mathlib/Analysis/NormedSpace/OperatorNorm.lean`.\"]\ntheorem MonoidHomClass.lipschitz_of_bound [MonoidHomClass 𝓕 E F] (f : 𝓕) (C : ℝ)\n    (h : ∀ x, ‖f x‖ ≤ C * ‖x‖) : LipschitzWith (Real.toNNReal C) f :=\n  LipschitzWith.of_dist_le' fun x y => by simpa only [dist_eq_norm_div, map_div] using h (x / y)\n\n"}
{"name":"lipschitzOnWith_iff_norm_div_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedGroup E\ninst✝ : SeminormedGroup F\ns : Set E\nf : E → F\nC : NNReal\n⊢ Iff (LipschitzOnWith C f s) (∀ ⦃x : E⦄, Membership.mem s x → ∀ ⦃y : E⦄, Membership.mem s y → LE.le (Norm.norm (HDiv.hDiv (f x) (f y))) (HMul.hMul (↑C) (Norm.norm (HDiv.hDiv x y))))","decl":"@[to_additive]\ntheorem lipschitzOnWith_iff_norm_div_le {f : E → F} {C : ℝ≥0} :\n    LipschitzOnWith C f s ↔ ∀ ⦃x⦄, x ∈ s → ∀ ⦃y⦄, y ∈ s → ‖f x / f y‖ ≤ C * ‖x / y‖ := by\n  simp only [lipschitzOnWith_iff_dist_le_mul, dist_eq_norm_div]\n\n"}
{"name":"lipschitzOnWith_iff_norm_sub_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedAddGroup E\ninst✝ : SeminormedAddGroup F\ns : Set E\nf : E → F\nC : NNReal\n⊢ Iff (LipschitzOnWith C f s) (∀ ⦃x : E⦄, Membership.mem s x → ∀ ⦃y : E⦄, Membership.mem s y → LE.le (Norm.norm (HSub.hSub (f x) (f y))) (HMul.hMul (↑C) (Norm.norm (HSub.hSub x y))))","decl":"@[to_additive]\ntheorem lipschitzOnWith_iff_norm_div_le {f : E → F} {C : ℝ≥0} :\n    LipschitzOnWith C f s ↔ ∀ ⦃x⦄, x ∈ s → ∀ ⦃y⦄, y ∈ s → ‖f x / f y‖ ≤ C * ‖x / y‖ := by\n  simp only [lipschitzOnWith_iff_dist_le_mul, dist_eq_norm_div]\n\n"}
{"name":"LipschitzOnWith.norm_div_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedGroup E\ninst✝ : SeminormedGroup F\ns : Set E\nf : E → F\nC : NNReal\na✝² : LipschitzOnWith C f s\nx : E\na✝¹ : Membership.mem s x\ny : E\na✝ : Membership.mem s y\n⊢ LE.le (Norm.norm (HDiv.hDiv (f x) (f y))) (HMul.hMul (↑C) (Norm.norm (HDiv.hDiv x y)))","decl":"alias ⟨LipschitzOnWith.norm_div_le, _⟩ := lipschitzOnWith_iff_norm_div_le\n\n"}
{"name":"LipschitzOnWith.norm_sub_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedAddGroup E\ninst✝ : SeminormedAddGroup F\ns : Set E\nf : E → F\nC : NNReal\na✝² : LipschitzOnWith C f s\nx : E\na✝¹ : Membership.mem s x\ny : E\na✝ : Membership.mem s y\n⊢ LE.le (Norm.norm (HSub.hSub (f x) (f y))) (HMul.hMul (↑C) (Norm.norm (HSub.hSub x y)))","decl":"attribute [to_additive] LipschitzOnWith.norm_div_le\n\n"}
{"name":"LipschitzOnWith.norm_sub_le_of_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedAddGroup E\ninst✝ : SeminormedAddGroup F\ns : Set E\na b : E\nr : Real\nf : E → F\nC : NNReal\nh : LipschitzOnWith C f s\nha : Membership.mem s a\nhb : Membership.mem s b\nhr : LE.le (Norm.norm (HSub.hSub a b)) r\n⊢ LE.le (Norm.norm (HSub.hSub (f a) (f b))) (HMul.hMul (↑C) r)","decl":"@[to_additive]\ntheorem LipschitzOnWith.norm_div_le_of_le {f : E → F} {C : ℝ≥0} (h : LipschitzOnWith C f s)\n    (ha : a ∈ s) (hb : b ∈ s) (hr : ‖a / b‖ ≤ r) : ‖f a / f b‖ ≤ C * r :=\n  (h.norm_div_le ha hb).trans <| by gcongr\n\n"}
{"name":"LipschitzOnWith.norm_div_le_of_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedGroup E\ninst✝ : SeminormedGroup F\ns : Set E\na b : E\nr : Real\nf : E → F\nC : NNReal\nh : LipschitzOnWith C f s\nha : Membership.mem s a\nhb : Membership.mem s b\nhr : LE.le (Norm.norm (HDiv.hDiv a b)) r\n⊢ LE.le (Norm.norm (HDiv.hDiv (f a) (f b))) (HMul.hMul (↑C) r)","decl":"@[to_additive]\ntheorem LipschitzOnWith.norm_div_le_of_le {f : E → F} {C : ℝ≥0} (h : LipschitzOnWith C f s)\n    (ha : a ∈ s) (hb : b ∈ s) (hr : ‖a / b‖ ≤ r) : ‖f a / f b‖ ≤ C * r :=\n  (h.norm_div_le ha hb).trans <| by gcongr\n\n"}
{"name":"lipschitzWith_iff_norm_sub_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedAddGroup E\ninst✝ : SeminormedAddGroup F\nf : E → F\nC : NNReal\n⊢ Iff (LipschitzWith C f) (∀ (x y : E), LE.le (Norm.norm (HSub.hSub (f x) (f y))) (HMul.hMul (↑C) (Norm.norm (HSub.hSub x y))))","decl":"@[to_additive]\ntheorem lipschitzWith_iff_norm_div_le {f : E → F} {C : ℝ≥0} :\n    LipschitzWith C f ↔ ∀ x y, ‖f x / f y‖ ≤ C * ‖x / y‖ := by\n  simp only [lipschitzWith_iff_dist_le_mul, dist_eq_norm_div]\n\n"}
{"name":"lipschitzWith_iff_norm_div_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedGroup E\ninst✝ : SeminormedGroup F\nf : E → F\nC : NNReal\n⊢ Iff (LipschitzWith C f) (∀ (x y : E), LE.le (Norm.norm (HDiv.hDiv (f x) (f y))) (HMul.hMul (↑C) (Norm.norm (HDiv.hDiv x y))))","decl":"@[to_additive]\ntheorem lipschitzWith_iff_norm_div_le {f : E → F} {C : ℝ≥0} :\n    LipschitzWith C f ↔ ∀ x y, ‖f x / f y‖ ≤ C * ‖x / y‖ := by\n  simp only [lipschitzWith_iff_dist_le_mul, dist_eq_norm_div]\n\n"}
{"name":"LipschitzWith.norm_div_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedGroup E\ninst✝ : SeminormedGroup F\nf : E → F\nC : NNReal\na✝ : LipschitzWith C f\nx y : E\n⊢ LE.le (Norm.norm (HDiv.hDiv (f x) (f y))) (HMul.hMul (↑C) (Norm.norm (HDiv.hDiv x y)))","decl":"alias ⟨LipschitzWith.norm_div_le, _⟩ := lipschitzWith_iff_norm_div_le\n\n"}
{"name":"LipschitzWith.norm_sub_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedAddGroup E\ninst✝ : SeminormedAddGroup F\nf : E → F\nC : NNReal\na✝ : LipschitzWith C f\nx y : E\n⊢ LE.le (Norm.norm (HSub.hSub (f x) (f y))) (HMul.hMul (↑C) (Norm.norm (HSub.hSub x y)))","decl":"attribute [to_additive] LipschitzWith.norm_div_le\n\n"}
{"name":"LipschitzWith.norm_div_le_of_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedGroup E\ninst✝ : SeminormedGroup F\na b : E\nr : Real\nf : E → F\nC : NNReal\nh : LipschitzWith C f\nhr : LE.le (Norm.norm (HDiv.hDiv a b)) r\n⊢ LE.le (Norm.norm (HDiv.hDiv (f a) (f b))) (HMul.hMul (↑C) r)","decl":"@[to_additive]\ntheorem LipschitzWith.norm_div_le_of_le {f : E → F} {C : ℝ≥0} (h : LipschitzWith C f)\n    (hr : ‖a / b‖ ≤ r) : ‖f a / f b‖ ≤ C * r :=\n  (h.norm_div_le _ _).trans <| by gcongr\n\n"}
{"name":"LipschitzWith.norm_sub_le_of_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedAddGroup E\ninst✝ : SeminormedAddGroup F\na b : E\nr : Real\nf : E → F\nC : NNReal\nh : LipschitzWith C f\nhr : LE.le (Norm.norm (HSub.hSub a b)) r\n⊢ LE.le (Norm.norm (HSub.hSub (f a) (f b))) (HMul.hMul (↑C) r)","decl":"@[to_additive]\ntheorem LipschitzWith.norm_div_le_of_le {f : E → F} {C : ℝ≥0} (h : LipschitzWith C f)\n    (hr : ‖a / b‖ ≤ r) : ‖f a / f b‖ ≤ C * r :=\n  (h.norm_div_le _ _).trans <| by gcongr\n\n"}
{"name":"AddMonoidHomClass.continuous_of_bound","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"𝓕 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝³ : SeminormedAddGroup E\ninst✝² : SeminormedAddGroup F\ninst✝¹ : FunLike 𝓕 E F\ninst✝ : AddMonoidHomClass 𝓕 E F\nf : 𝓕\nC : Real\nh : ∀ (x : E), LE.le (Norm.norm (f x)) (HMul.hMul C (Norm.norm x))\n⊢ Continuous ⇑f","decl":"/-- A homomorphism `f` of seminormed groups is continuous, if there exists a constant `C` such that\nfor all `x`, one has `‖f x‖ ≤ C * ‖x‖`. -/\n@[to_additive \"A homomorphism `f` of seminormed groups is continuous, if there exists a constant `C`\nsuch that for all `x`, one has `‖f x‖ ≤ C * ‖x‖`\"]\ntheorem MonoidHomClass.continuous_of_bound [MonoidHomClass 𝓕 E F] (f : 𝓕) (C : ℝ)\n    (h : ∀ x, ‖f x‖ ≤ C * ‖x‖) : Continuous f :=\n  (MonoidHomClass.lipschitz_of_bound f C h).continuous\n\n"}
{"name":"MonoidHomClass.continuous_of_bound","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"𝓕 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝³ : SeminormedGroup E\ninst✝² : SeminormedGroup F\ninst✝¹ : FunLike 𝓕 E F\ninst✝ : MonoidHomClass 𝓕 E F\nf : 𝓕\nC : Real\nh : ∀ (x : E), LE.le (Norm.norm (f x)) (HMul.hMul C (Norm.norm x))\n⊢ Continuous ⇑f","decl":"/-- A homomorphism `f` of seminormed groups is continuous, if there exists a constant `C` such that\nfor all `x`, one has `‖f x‖ ≤ C * ‖x‖`. -/\n@[to_additive \"A homomorphism `f` of seminormed groups is continuous, if there exists a constant `C`\nsuch that for all `x`, one has `‖f x‖ ≤ C * ‖x‖`\"]\ntheorem MonoidHomClass.continuous_of_bound [MonoidHomClass 𝓕 E F] (f : 𝓕) (C : ℝ)\n    (h : ∀ x, ‖f x‖ ≤ C * ‖x‖) : Continuous f :=\n  (MonoidHomClass.lipschitz_of_bound f C h).continuous\n\n"}
{"name":"AddMonoidHomClass.uniformContinuous_of_bound","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"𝓕 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝³ : SeminormedAddGroup E\ninst✝² : SeminormedAddGroup F\ninst✝¹ : FunLike 𝓕 E F\ninst✝ : AddMonoidHomClass 𝓕 E F\nf : 𝓕\nC : Real\nh : ∀ (x : E), LE.le (Norm.norm (f x)) (HMul.hMul C (Norm.norm x))\n⊢ UniformContinuous ⇑f","decl":"@[to_additive]\ntheorem MonoidHomClass.uniformContinuous_of_bound [MonoidHomClass 𝓕 E F] (f : 𝓕) (C : ℝ)\n    (h : ∀ x, ‖f x‖ ≤ C * ‖x‖) : UniformContinuous f :=\n  (MonoidHomClass.lipschitz_of_bound f C h).uniformContinuous\n\n"}
{"name":"MonoidHomClass.uniformContinuous_of_bound","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"𝓕 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝³ : SeminormedGroup E\ninst✝² : SeminormedGroup F\ninst✝¹ : FunLike 𝓕 E F\ninst✝ : MonoidHomClass 𝓕 E F\nf : 𝓕\nC : Real\nh : ∀ (x : E), LE.le (Norm.norm (f x)) (HMul.hMul C (Norm.norm x))\n⊢ UniformContinuous ⇑f","decl":"@[to_additive]\ntheorem MonoidHomClass.uniformContinuous_of_bound [MonoidHomClass 𝓕 E F] (f : 𝓕) (C : ℝ)\n    (h : ∀ x, ‖f x‖ ≤ C * ‖x‖) : UniformContinuous f :=\n  (MonoidHomClass.lipschitz_of_bound f C h).uniformContinuous\n\n"}
{"name":"MonoidHomClass.isometry_iff_norm","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"𝓕 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝³ : SeminormedGroup E\ninst✝² : SeminormedGroup F\ninst✝¹ : FunLike 𝓕 E F\ninst✝ : MonoidHomClass 𝓕 E F\nf : 𝓕\n⊢ Iff (Isometry ⇑f) (∀ (x : E), Eq (Norm.norm (f x)) (Norm.norm x))","decl":"@[to_additive]\ntheorem MonoidHomClass.isometry_iff_norm [MonoidHomClass 𝓕 E F] (f : 𝓕) :\n    Isometry f ↔ ∀ x, ‖f x‖ = ‖x‖ := by\n  simp only [isometry_iff_dist_eq, dist_eq_norm_div, ← map_div]\n  refine ⟨fun h x => ?_, fun h x y => h _⟩\n  simpa using h x 1\n\n"}
{"name":"AddMonoidHomClass.isometry_iff_norm","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"𝓕 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝³ : SeminormedAddGroup E\ninst✝² : SeminormedAddGroup F\ninst✝¹ : FunLike 𝓕 E F\ninst✝ : AddMonoidHomClass 𝓕 E F\nf : 𝓕\n⊢ Iff (Isometry ⇑f) (∀ (x : E), Eq (Norm.norm (f x)) (Norm.norm x))","decl":"@[to_additive]\ntheorem MonoidHomClass.isometry_iff_norm [MonoidHomClass 𝓕 E F] (f : 𝓕) :\n    Isometry f ↔ ∀ x, ‖f x‖ = ‖x‖ := by\n  simp only [isometry_iff_dist_eq, dist_eq_norm_div, ← map_div]\n  refine ⟨fun h x => ?_, fun h x y => h _⟩\n  simpa using h x 1\n\n"}
{"name":"MonoidHomClass.isometry_of_norm","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"𝓕 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝³ : SeminormedGroup E\ninst✝² : SeminormedGroup F\ninst✝¹ : FunLike 𝓕 E F\ninst✝ : MonoidHomClass 𝓕 E F\nf : 𝓕\na✝ : ∀ (x : E), Eq (Norm.norm (f x)) (Norm.norm x)\n⊢ Isometry ⇑f","decl":"alias ⟨_, MonoidHomClass.isometry_of_norm⟩ := MonoidHomClass.isometry_iff_norm\n\n"}
{"name":"AddMonoidHomClass.isometry_of_norm","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"𝓕 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝³ : SeminormedAddGroup E\ninst✝² : SeminormedAddGroup F\ninst✝¹ : FunLike 𝓕 E F\ninst✝ : AddMonoidHomClass 𝓕 E F\nf : 𝓕\na✝ : ∀ (x : E), Eq (Norm.norm (f x)) (Norm.norm x)\n⊢ Isometry ⇑f","decl":"attribute [to_additive] MonoidHomClass.isometry_of_norm\n\n"}
{"name":"AddMonoidHomClass.lipschitz_of_bound_nnnorm","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"𝓕 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝³ : SeminormedAddGroup E\ninst✝² : SeminormedAddGroup F\ninst✝¹ : FunLike 𝓕 E F\ninst✝ : AddMonoidHomClass 𝓕 E F\nf : 𝓕\nC : NNReal\nh : ∀ (x : E), LE.le (NNNorm.nnnorm (f x)) (HMul.hMul C (NNNorm.nnnorm x))\n⊢ LipschitzWith C ⇑f","decl":"@[to_additive]\ntheorem MonoidHomClass.lipschitz_of_bound_nnnorm [MonoidHomClass 𝓕 E F] (f : 𝓕) (C : ℝ≥0)\n    (h : ∀ x, ‖f x‖₊ ≤ C * ‖x‖₊) : LipschitzWith C f :=\n  @Real.toNNReal_coe C ▸ MonoidHomClass.lipschitz_of_bound f C h\n\n"}
{"name":"MonoidHomClass.lipschitz_of_bound_nnnorm","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"𝓕 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝³ : SeminormedGroup E\ninst✝² : SeminormedGroup F\ninst✝¹ : FunLike 𝓕 E F\ninst✝ : MonoidHomClass 𝓕 E F\nf : 𝓕\nC : NNReal\nh : ∀ (x : E), LE.le (NNNorm.nnnorm (f x)) (HMul.hMul C (NNNorm.nnnorm x))\n⊢ LipschitzWith C ⇑f","decl":"@[to_additive]\ntheorem MonoidHomClass.lipschitz_of_bound_nnnorm [MonoidHomClass 𝓕 E F] (f : 𝓕) (C : ℝ≥0)\n    (h : ∀ x, ‖f x‖₊ ≤ C * ‖x‖₊) : LipschitzWith C f :=\n  @Real.toNNReal_coe C ▸ MonoidHomClass.lipschitz_of_bound f C h\n\n"}
{"name":"AddMonoidHomClass.antilipschitz_of_bound","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"𝓕 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝³ : SeminormedAddGroup E\ninst✝² : SeminormedAddGroup F\ninst✝¹ : FunLike 𝓕 E F\ninst✝ : AddMonoidHomClass 𝓕 E F\nf : 𝓕\nK : NNReal\nh : ∀ (x : E), LE.le (Norm.norm x) (HMul.hMul (↑K) (Norm.norm (f x)))\n⊢ AntilipschitzWith K ⇑f","decl":"@[to_additive]\ntheorem MonoidHomClass.antilipschitz_of_bound [MonoidHomClass 𝓕 E F] (f : 𝓕) {K : ℝ≥0}\n    (h : ∀ x, ‖x‖ ≤ K * ‖f x‖) : AntilipschitzWith K f :=\n  AntilipschitzWith.of_le_mul_dist fun x y => by\n    simpa only [dist_eq_norm_div, map_div] using h (x / y)\n\n"}
{"name":"MonoidHomClass.antilipschitz_of_bound","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"𝓕 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝³ : SeminormedGroup E\ninst✝² : SeminormedGroup F\ninst✝¹ : FunLike 𝓕 E F\ninst✝ : MonoidHomClass 𝓕 E F\nf : 𝓕\nK : NNReal\nh : ∀ (x : E), LE.le (Norm.norm x) (HMul.hMul (↑K) (Norm.norm (f x)))\n⊢ AntilipschitzWith K ⇑f","decl":"@[to_additive]\ntheorem MonoidHomClass.antilipschitz_of_bound [MonoidHomClass 𝓕 E F] (f : 𝓕) {K : ℝ≥0}\n    (h : ∀ x, ‖x‖ ≤ K * ‖f x‖) : AntilipschitzWith K f :=\n  AntilipschitzWith.of_le_mul_dist fun x y => by\n    simpa only [dist_eq_norm_div, map_div] using h (x / y)\n\n"}
{"name":"LipschitzWith.norm_le_mul","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedAddGroup E\ninst✝ : SeminormedAddGroup F\nf : E → F\nK : NNReal\nh : LipschitzWith K f\nhf : Eq (f 0) 0\nx : E\n⊢ LE.le (Norm.norm (f x)) (HMul.hMul (↑K) (Norm.norm x))","decl":"@[to_additive LipschitzWith.norm_le_mul]\ntheorem LipschitzWith.norm_le_mul' {f : E → F} {K : ℝ≥0} (h : LipschitzWith K f) (hf : f 1 = 1)\n    (x) : ‖f x‖ ≤ K * ‖x‖ := by simpa only [dist_one_right, hf] using h.dist_le_mul x 1\n\n"}
{"name":"LipschitzWith.norm_le_mul'","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedGroup E\ninst✝ : SeminormedGroup F\nf : E → F\nK : NNReal\nh : LipschitzWith K f\nhf : Eq (f 1) 1\nx : E\n⊢ LE.le (Norm.norm (f x)) (HMul.hMul (↑K) (Norm.norm x))","decl":"@[to_additive LipschitzWith.norm_le_mul]\ntheorem LipschitzWith.norm_le_mul' {f : E → F} {K : ℝ≥0} (h : LipschitzWith K f) (hf : f 1 = 1)\n    (x) : ‖f x‖ ≤ K * ‖x‖ := by simpa only [dist_one_right, hf] using h.dist_le_mul x 1\n\n"}
{"name":"LipschitzWith.nnorm_le_mul","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedAddGroup E\ninst✝ : SeminormedAddGroup F\nf : E → F\nK : NNReal\nh : LipschitzWith K f\nhf : Eq (f 0) 0\nx : E\n⊢ LE.le (NNNorm.nnnorm (f x)) (HMul.hMul K (NNNorm.nnnorm x))","decl":"@[to_additive LipschitzWith.nnorm_le_mul]\ntheorem LipschitzWith.nnorm_le_mul' {f : E → F} {K : ℝ≥0} (h : LipschitzWith K f) (hf : f 1 = 1)\n    (x) : ‖f x‖₊ ≤ K * ‖x‖₊ :=\n  h.norm_le_mul' hf x\n\n"}
{"name":"LipschitzWith.nnorm_le_mul'","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedGroup E\ninst✝ : SeminormedGroup F\nf : E → F\nK : NNReal\nh : LipschitzWith K f\nhf : Eq (f 1) 1\nx : E\n⊢ LE.le (NNNorm.nnnorm (f x)) (HMul.hMul K (NNNorm.nnnorm x))","decl":"@[to_additive LipschitzWith.nnorm_le_mul]\ntheorem LipschitzWith.nnorm_le_mul' {f : E → F} {K : ℝ≥0} (h : LipschitzWith K f) (hf : f 1 = 1)\n    (x) : ‖f x‖₊ ≤ K * ‖x‖₊ :=\n  h.norm_le_mul' hf x\n\n"}
{"name":"AntilipschitzWith.le_mul_norm","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedAddGroup E\ninst✝ : SeminormedAddGroup F\nf : E → F\nK : NNReal\nh : AntilipschitzWith K f\nhf : Eq (f 0) 0\nx : E\n⊢ LE.le (Norm.norm x) (HMul.hMul (↑K) (Norm.norm (f x)))","decl":"@[to_additive AntilipschitzWith.le_mul_norm]\ntheorem AntilipschitzWith.le_mul_norm' {f : E → F} {K : ℝ≥0} (h : AntilipschitzWith K f)\n    (hf : f 1 = 1) (x) : ‖x‖ ≤ K * ‖f x‖ := by\n  simpa only [dist_one_right, hf] using h.le_mul_dist x 1\n\n"}
{"name":"AntilipschitzWith.le_mul_norm'","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedGroup E\ninst✝ : SeminormedGroup F\nf : E → F\nK : NNReal\nh : AntilipschitzWith K f\nhf : Eq (f 1) 1\nx : E\n⊢ LE.le (Norm.norm x) (HMul.hMul (↑K) (Norm.norm (f x)))","decl":"@[to_additive AntilipschitzWith.le_mul_norm]\ntheorem AntilipschitzWith.le_mul_norm' {f : E → F} {K : ℝ≥0} (h : AntilipschitzWith K f)\n    (hf : f 1 = 1) (x) : ‖x‖ ≤ K * ‖f x‖ := by\n  simpa only [dist_one_right, hf] using h.le_mul_dist x 1\n\n"}
{"name":"AntilipschitzWith.le_mul_nnnorm","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedAddGroup E\ninst✝ : SeminormedAddGroup F\nf : E → F\nK : NNReal\nh : AntilipschitzWith K f\nhf : Eq (f 0) 0\nx : E\n⊢ LE.le (NNNorm.nnnorm x) (HMul.hMul K (NNNorm.nnnorm (f x)))","decl":"@[to_additive AntilipschitzWith.le_mul_nnnorm]\ntheorem AntilipschitzWith.le_mul_nnnorm' {f : E → F} {K : ℝ≥0} (h : AntilipschitzWith K f)\n    (hf : f 1 = 1) (x) : ‖x‖₊ ≤ K * ‖f x‖₊ :=\n  h.le_mul_norm' hf x\n\n"}
{"name":"AntilipschitzWith.le_mul_nnnorm'","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedGroup E\ninst✝ : SeminormedGroup F\nf : E → F\nK : NNReal\nh : AntilipschitzWith K f\nhf : Eq (f 1) 1\nx : E\n⊢ LE.le (NNNorm.nnnorm x) (HMul.hMul K (NNNorm.nnnorm (f x)))","decl":"@[to_additive AntilipschitzWith.le_mul_nnnorm]\ntheorem AntilipschitzWith.le_mul_nnnorm' {f : E → F} {K : ℝ≥0} (h : AntilipschitzWith K f)\n    (hf : f 1 = 1) (x) : ‖x‖₊ ≤ K * ‖f x‖₊ :=\n  h.le_mul_norm' hf x\n\n"}
{"name":"OneHomClass.bound_of_antilipschitz","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"𝓕 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝³ : SeminormedGroup E\ninst✝² : SeminormedGroup F\ninst✝¹ : FunLike 𝓕 E F\ninst✝ : OneHomClass 𝓕 E F\nf : 𝓕\nK : NNReal\nh : AntilipschitzWith K ⇑f\nx : E\n⊢ LE.le (Norm.norm x) (HMul.hMul (↑K) (Norm.norm (f x)))","decl":"@[to_additive]\ntheorem OneHomClass.bound_of_antilipschitz [OneHomClass 𝓕 E F] (f : 𝓕) {K : ℝ≥0}\n    (h : AntilipschitzWith K f) (x) : ‖x‖ ≤ K * ‖f x‖ :=\n  h.le_mul_nnnorm' (map_one f) x\n\n"}
{"name":"ZeroHomClass.bound_of_antilipschitz","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"𝓕 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝³ : SeminormedAddGroup E\ninst✝² : SeminormedAddGroup F\ninst✝¹ : FunLike 𝓕 E F\ninst✝ : ZeroHomClass 𝓕 E F\nf : 𝓕\nK : NNReal\nh : AntilipschitzWith K ⇑f\nx : E\n⊢ LE.le (Norm.norm x) (HMul.hMul (↑K) (Norm.norm (f x)))","decl":"@[to_additive]\ntheorem OneHomClass.bound_of_antilipschitz [OneHomClass 𝓕 E F] (f : 𝓕) {K : ℝ≥0}\n    (h : AntilipschitzWith K f) (x) : ‖x‖ ≤ K * ‖f x‖ :=\n  h.le_mul_nnnorm' (map_one f) x\n\n"}
{"name":"Isometry.nnnorm_map_of_map_zero","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedAddGroup E\ninst✝ : SeminormedAddGroup F\nf : E → F\nhi : Isometry f\nh₁ : Eq (f 0) 0\nx : E\n⊢ Eq (NNNorm.nnnorm (f x)) (NNNorm.nnnorm x)","decl":"@[to_additive]\ntheorem Isometry.nnnorm_map_of_map_one {f : E → F} (hi : Isometry f) (h₁ : f 1 = 1) (x : E) :\n    ‖f x‖₊ = ‖x‖₊ :=\n  Subtype.ext <| hi.norm_map_of_map_one h₁ x\n\n"}
{"name":"Isometry.nnnorm_map_of_map_one","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : SeminormedGroup E\ninst✝ : SeminormedGroup F\nf : E → F\nhi : Isometry f\nh₁ : Eq (f 1) 1\nx : E\n⊢ Eq (NNNorm.nnnorm (f x)) (NNNorm.nnnorm x)","decl":"@[to_additive]\ntheorem Isometry.nnnorm_map_of_map_one {f : E → F} (hi : Isometry f) (h₁ : f 1 = 1) (x : E) :\n    ‖f x‖₊ = ‖x‖₊ :=\n  Subtype.ext <| hi.norm_map_of_map_one h₁ x\n\n"}
{"name":"lipschitzWith_one_norm'","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedGroup E\n⊢ LipschitzWith 1 Norm.norm","decl":"@[to_additive lipschitzWith_one_norm]\ntheorem lipschitzWith_one_norm' : LipschitzWith 1 (norm : E → ℝ) := by\n  simpa using LipschitzWith.dist_right (1 : E)\n\n"}
{"name":"lipschitzWith_one_norm","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddGroup E\n⊢ LipschitzWith 1 Norm.norm","decl":"@[to_additive lipschitzWith_one_norm]\ntheorem lipschitzWith_one_norm' : LipschitzWith 1 (norm : E → ℝ) := by\n  simpa using LipschitzWith.dist_right (1 : E)\n\n"}
{"name":"lipschitzWith_one_nnnorm'","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedGroup E\n⊢ LipschitzWith 1 NNNorm.nnnorm","decl":"@[to_additive lipschitzWith_one_nnnorm]\ntheorem lipschitzWith_one_nnnorm' : LipschitzWith 1 (NNNorm.nnnorm : E → ℝ≥0) :=\n  lipschitzWith_one_norm'\n\n"}
{"name":"lipschitzWith_one_nnnorm","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddGroup E\n⊢ LipschitzWith 1 NNNorm.nnnorm","decl":"@[to_additive lipschitzWith_one_nnnorm]\ntheorem lipschitzWith_one_nnnorm' : LipschitzWith 1 (NNNorm.nnnorm : E → ℝ≥0) :=\n  lipschitzWith_one_norm'\n\n"}
{"name":"uniformContinuous_norm'","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedGroup E\n⊢ UniformContinuous Norm.norm","decl":"@[to_additive uniformContinuous_norm]\ntheorem uniformContinuous_norm' : UniformContinuous (norm : E → ℝ) :=\n  lipschitzWith_one_norm'.uniformContinuous\n\n"}
{"name":"uniformContinuous_norm","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddGroup E\n⊢ UniformContinuous Norm.norm","decl":"@[to_additive uniformContinuous_norm]\ntheorem uniformContinuous_norm' : UniformContinuous (norm : E → ℝ) :=\n  lipschitzWith_one_norm'.uniformContinuous\n\n"}
{"name":"uniformContinuous_nnnorm'","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedGroup E\n⊢ UniformContinuous fun a => NNNorm.nnnorm a","decl":"@[to_additive uniformContinuous_nnnorm]\ntheorem uniformContinuous_nnnorm' : UniformContinuous fun a : E => ‖a‖₊ :=\n  uniformContinuous_norm'.subtype_mk _\n\n"}
{"name":"uniformContinuous_nnnorm","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddGroup E\n⊢ UniformContinuous fun a => NNNorm.nnnorm a","decl":"@[to_additive uniformContinuous_nnnorm]\ntheorem uniformContinuous_nnnorm' : UniformContinuous fun a : E => ‖a‖₊ :=\n  uniformContinuous_norm'.subtype_mk _\n\n"}
{"name":"NormedGroup.to_isometricSMul_left","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedCommGroup E\n⊢ IsometricSMul E E","decl":"@[to_additive]\ninstance NormedGroup.to_isometricSMul_left : IsometricSMul E E :=\n  ⟨fun a => Isometry.of_dist_eq fun b c => by simp [dist_eq_norm_div]⟩\n\n"}
{"name":"NormedAddGroup.to_isometricVAdd_left","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddCommGroup E\n⊢ IsometricVAdd E E","decl":"@[to_additive]\ninstance NormedGroup.to_isometricSMul_left : IsometricSMul E E :=\n  ⟨fun a => Isometry.of_dist_eq fun b c => by simp [dist_eq_norm_div]⟩\n\n"}
{"name":"dist_self_add_right","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddCommGroup E\na b : E\n⊢ Eq (Dist.dist a (HAdd.hAdd a b)) (Norm.norm b)","decl":"@[to_additive (attr := simp)]\ntheorem dist_self_mul_right (a b : E) : dist a (a * b) = ‖b‖ := by\n  rw [← dist_one_left, ← dist_mul_left a 1 b, mul_one]\n\n"}
{"name":"dist_self_mul_right","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedCommGroup E\na b : E\n⊢ Eq (Dist.dist a (HMul.hMul a b)) (Norm.norm b)","decl":"@[to_additive (attr := simp)]\ntheorem dist_self_mul_right (a b : E) : dist a (a * b) = ‖b‖ := by\n  rw [← dist_one_left, ← dist_mul_left a 1 b, mul_one]\n\n"}
{"name":"dist_self_add_left","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddCommGroup E\na b : E\n⊢ Eq (Dist.dist (HAdd.hAdd a b) a) (Norm.norm b)","decl":"@[to_additive (attr := simp)]\ntheorem dist_self_mul_left (a b : E) : dist (a * b) a = ‖b‖ := by\n  rw [dist_comm, dist_self_mul_right]\n\n"}
{"name":"dist_self_mul_left","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedCommGroup E\na b : E\n⊢ Eq (Dist.dist (HMul.hMul a b) a) (Norm.norm b)","decl":"@[to_additive (attr := simp)]\ntheorem dist_self_mul_left (a b : E) : dist (a * b) a = ‖b‖ := by\n  rw [dist_comm, dist_self_mul_right]\n\n"}
{"name":"dist_self_div_right","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedCommGroup E\na b : E\n⊢ Eq (Dist.dist a (HDiv.hDiv a b)) (Norm.norm b)","decl":"@[to_additive (attr := simp 1001)] -- Increase priority because `simp` can prove this\ntheorem dist_self_div_right (a b : E) : dist a (a / b) = ‖b‖ := by\n  rw [div_eq_mul_inv, dist_self_mul_right, norm_inv']\n\n"}
{"name":"dist_self_sub_right","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddCommGroup E\na b : E\n⊢ Eq (Dist.dist a (HSub.hSub a b)) (Norm.norm b)","decl":"@[to_additive (attr := simp 1001)] -- Increase priority because `simp` can prove this\ntheorem dist_self_div_right (a b : E) : dist a (a / b) = ‖b‖ := by\n  rw [div_eq_mul_inv, dist_self_mul_right, norm_inv']\n\n"}
{"name":"dist_self_div_left","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedCommGroup E\na b : E\n⊢ Eq (Dist.dist (HDiv.hDiv a b) a) (Norm.norm b)","decl":"@[to_additive (attr := simp 1001)] -- Increase priority because `simp` can prove this\ntheorem dist_self_div_left (a b : E) : dist (a / b) a = ‖b‖ := by\n  rw [dist_comm, dist_self_div_right]\n\n"}
{"name":"dist_self_sub_left","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddCommGroup E\na b : E\n⊢ Eq (Dist.dist (HSub.hSub a b) a) (Norm.norm b)","decl":"@[to_additive (attr := simp 1001)] -- Increase priority because `simp` can prove this\ntheorem dist_self_div_left (a b : E) : dist (a / b) a = ‖b‖ := by\n  rw [dist_comm, dist_self_div_right]\n\n"}
{"name":"dist_mul_mul_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedCommGroup E\na₁ a₂ b₁ b₂ : E\n⊢ LE.le (Dist.dist (HMul.hMul a₁ a₂) (HMul.hMul b₁ b₂)) (HAdd.hAdd (Dist.dist a₁ b₁) (Dist.dist a₂ b₂))","decl":"@[to_additive]\ntheorem dist_mul_mul_le (a₁ a₂ b₁ b₂ : E) : dist (a₁ * a₂) (b₁ * b₂) ≤ dist a₁ b₁ + dist a₂ b₂ := by\n  simpa only [dist_mul_left, dist_mul_right] using dist_triangle (a₁ * a₂) (b₁ * a₂) (b₁ * b₂)\n\n"}
{"name":"dist_add_add_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddCommGroup E\na₁ a₂ b₁ b₂ : E\n⊢ LE.le (Dist.dist (HAdd.hAdd a₁ a₂) (HAdd.hAdd b₁ b₂)) (HAdd.hAdd (Dist.dist a₁ b₁) (Dist.dist a₂ b₂))","decl":"@[to_additive]\ntheorem dist_mul_mul_le (a₁ a₂ b₁ b₂ : E) : dist (a₁ * a₂) (b₁ * b₂) ≤ dist a₁ b₁ + dist a₂ b₂ := by\n  simpa only [dist_mul_left, dist_mul_right] using dist_triangle (a₁ * a₂) (b₁ * a₂) (b₁ * b₂)\n\n"}
{"name":"dist_mul_mul_le_of_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedCommGroup E\na₁ a₂ b₁ b₂ : E\nr₁ r₂ : Real\nh₁ : LE.le (Dist.dist a₁ b₁) r₁\nh₂ : LE.le (Dist.dist a₂ b₂) r₂\n⊢ LE.le (Dist.dist (HMul.hMul a₁ a₂) (HMul.hMul b₁ b₂)) (HAdd.hAdd r₁ r₂)","decl":"@[to_additive]\ntheorem dist_mul_mul_le_of_le (h₁ : dist a₁ b₁ ≤ r₁) (h₂ : dist a₂ b₂ ≤ r₂) :\n    dist (a₁ * a₂) (b₁ * b₂) ≤ r₁ + r₂ :=\n  (dist_mul_mul_le a₁ a₂ b₁ b₂).trans <| add_le_add h₁ h₂\n\n"}
{"name":"dist_add_add_le_of_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddCommGroup E\na₁ a₂ b₁ b₂ : E\nr₁ r₂ : Real\nh₁ : LE.le (Dist.dist a₁ b₁) r₁\nh₂ : LE.le (Dist.dist a₂ b₂) r₂\n⊢ LE.le (Dist.dist (HAdd.hAdd a₁ a₂) (HAdd.hAdd b₁ b₂)) (HAdd.hAdd r₁ r₂)","decl":"@[to_additive]\ntheorem dist_mul_mul_le_of_le (h₁ : dist a₁ b₁ ≤ r₁) (h₂ : dist a₂ b₂ ≤ r₂) :\n    dist (a₁ * a₂) (b₁ * b₂) ≤ r₁ + r₂ :=\n  (dist_mul_mul_le a₁ a₂ b₁ b₂).trans <| add_le_add h₁ h₂\n\n"}
{"name":"dist_div_div_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedCommGroup E\na₁ a₂ b₁ b₂ : E\n⊢ LE.le (Dist.dist (HDiv.hDiv a₁ a₂) (HDiv.hDiv b₁ b₂)) (HAdd.hAdd (Dist.dist a₁ b₁) (Dist.dist a₂ b₂))","decl":"@[to_additive]\ntheorem dist_div_div_le (a₁ a₂ b₁ b₂ : E) : dist (a₁ / a₂) (b₁ / b₂) ≤ dist a₁ b₁ + dist a₂ b₂ := by\n  simpa only [div_eq_mul_inv, dist_inv_inv] using dist_mul_mul_le a₁ a₂⁻¹ b₁ b₂⁻¹\n\n"}
{"name":"dist_sub_sub_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddCommGroup E\na₁ a₂ b₁ b₂ : E\n⊢ LE.le (Dist.dist (HSub.hSub a₁ a₂) (HSub.hSub b₁ b₂)) (HAdd.hAdd (Dist.dist a₁ b₁) (Dist.dist a₂ b₂))","decl":"@[to_additive]\ntheorem dist_div_div_le (a₁ a₂ b₁ b₂ : E) : dist (a₁ / a₂) (b₁ / b₂) ≤ dist a₁ b₁ + dist a₂ b₂ := by\n  simpa only [div_eq_mul_inv, dist_inv_inv] using dist_mul_mul_le a₁ a₂⁻¹ b₁ b₂⁻¹\n\n"}
{"name":"dist_sub_sub_le_of_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddCommGroup E\na₁ a₂ b₁ b₂ : E\nr₁ r₂ : Real\nh₁ : LE.le (Dist.dist a₁ b₁) r₁\nh₂ : LE.le (Dist.dist a₂ b₂) r₂\n⊢ LE.le (Dist.dist (HSub.hSub a₁ a₂) (HSub.hSub b₁ b₂)) (HAdd.hAdd r₁ r₂)","decl":"@[to_additive]\ntheorem dist_div_div_le_of_le (h₁ : dist a₁ b₁ ≤ r₁) (h₂ : dist a₂ b₂ ≤ r₂) :\n    dist (a₁ / a₂) (b₁ / b₂) ≤ r₁ + r₂ :=\n  (dist_div_div_le a₁ a₂ b₁ b₂).trans <| add_le_add h₁ h₂\n\n"}
{"name":"dist_div_div_le_of_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedCommGroup E\na₁ a₂ b₁ b₂ : E\nr₁ r₂ : Real\nh₁ : LE.le (Dist.dist a₁ b₁) r₁\nh₂ : LE.le (Dist.dist a₂ b₂) r₂\n⊢ LE.le (Dist.dist (HDiv.hDiv a₁ a₂) (HDiv.hDiv b₁ b₂)) (HAdd.hAdd r₁ r₂)","decl":"@[to_additive]\ntheorem dist_div_div_le_of_le (h₁ : dist a₁ b₁ ≤ r₁) (h₂ : dist a₂ b₂ ≤ r₂) :\n    dist (a₁ / a₂) (b₁ / b₂) ≤ r₁ + r₂ :=\n  (dist_div_div_le a₁ a₂ b₁ b₂).trans <| add_le_add h₁ h₂\n\n"}
{"name":"abs_dist_sub_le_dist_add_add","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddCommGroup E\na₁ a₂ b₁ b₂ : E\n⊢ LE.le (abs (HSub.hSub (Dist.dist a₁ b₁) (Dist.dist a₂ b₂))) (Dist.dist (HAdd.hAdd a₁ a₂) (HAdd.hAdd b₁ b₂))","decl":"@[to_additive]\ntheorem abs_dist_sub_le_dist_mul_mul (a₁ a₂ b₁ b₂ : E) :\n    |dist a₁ b₁ - dist a₂ b₂| ≤ dist (a₁ * a₂) (b₁ * b₂) := by\n  simpa only [dist_mul_left, dist_mul_right, dist_comm b₂] using\n    abs_dist_sub_le (a₁ * a₂) (b₁ * b₂) (b₁ * a₂)\n\n"}
{"name":"abs_dist_sub_le_dist_mul_mul","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedCommGroup E\na₁ a₂ b₁ b₂ : E\n⊢ LE.le (abs (HSub.hSub (Dist.dist a₁ b₁) (Dist.dist a₂ b₂))) (Dist.dist (HMul.hMul a₁ a₂) (HMul.hMul b₁ b₂))","decl":"@[to_additive]\ntheorem abs_dist_sub_le_dist_mul_mul (a₁ a₂ b₁ b₂ : E) :\n    |dist a₁ b₁ - dist a₂ b₂| ≤ dist (a₁ * a₂) (b₁ * b₂) := by\n  simpa only [dist_mul_left, dist_mul_right, dist_comm b₂] using\n    abs_dist_sub_le (a₁ * a₂) (b₁ * b₂) (b₁ * a₂)\n\n"}
{"name":"nndist_add_add_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddCommGroup E\na₁ a₂ b₁ b₂ : E\n⊢ LE.le (NNDist.nndist (HAdd.hAdd a₁ a₂) (HAdd.hAdd b₁ b₂)) (HAdd.hAdd (NNDist.nndist a₁ b₁) (NNDist.nndist a₂ b₂))","decl":"@[to_additive]\ntheorem nndist_mul_mul_le (a₁ a₂ b₁ b₂ : E) :\n    nndist (a₁ * a₂) (b₁ * b₂) ≤ nndist a₁ b₁ + nndist a₂ b₂ :=\n  NNReal.coe_le_coe.1 <| dist_mul_mul_le a₁ a₂ b₁ b₂\n\n"}
{"name":"nndist_mul_mul_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedCommGroup E\na₁ a₂ b₁ b₂ : E\n⊢ LE.le (NNDist.nndist (HMul.hMul a₁ a₂) (HMul.hMul b₁ b₂)) (HAdd.hAdd (NNDist.nndist a₁ b₁) (NNDist.nndist a₂ b₂))","decl":"@[to_additive]\ntheorem nndist_mul_mul_le (a₁ a₂ b₁ b₂ : E) :\n    nndist (a₁ * a₂) (b₁ * b₂) ≤ nndist a₁ b₁ + nndist a₂ b₂ :=\n  NNReal.coe_le_coe.1 <| dist_mul_mul_le a₁ a₂ b₁ b₂\n\n"}
{"name":"edist_mul_mul_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedCommGroup E\na₁ a₂ b₁ b₂ : E\n⊢ LE.le (EDist.edist (HMul.hMul a₁ a₂) (HMul.hMul b₁ b₂)) (HAdd.hAdd (EDist.edist a₁ b₁) (EDist.edist a₂ b₂))","decl":"@[to_additive]\ntheorem edist_mul_mul_le (a₁ a₂ b₁ b₂ : E) :\n    edist (a₁ * a₂) (b₁ * b₂) ≤ edist a₁ b₁ + edist a₂ b₂ := by\n  simp only [edist_nndist]\n  norm_cast\n  apply nndist_mul_mul_le\n\n"}
{"name":"edist_add_add_le","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddCommGroup E\na₁ a₂ b₁ b₂ : E\n⊢ LE.le (EDist.edist (HAdd.hAdd a₁ a₂) (HAdd.hAdd b₁ b₂)) (HAdd.hAdd (EDist.edist a₁ b₁) (EDist.edist a₂ b₂))","decl":"@[to_additive]\ntheorem edist_mul_mul_le (a₁ a₂ b₁ b₂ : E) :\n    edist (a₁ * a₂) (b₁ * b₂) ≤ edist a₁ b₁ + edist a₂ b₂ := by\n  simp only [edist_nndist]\n  norm_cast\n  apply nndist_mul_mul_le\n\n"}
{"name":"lipschitzWith_inv_iff","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nK : NNReal\nf : α → E\n⊢ Iff (LipschitzWith K (Inv.inv f)) (LipschitzWith K f)","decl":"@[to_additive (attr := simp)]\nlemma lipschitzWith_inv_iff : LipschitzWith K f⁻¹ ↔ LipschitzWith K f := by simp [LipschitzWith]\n\n"}
{"name":"lipschitzWith_neg_iff","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nK : NNReal\nf : α → E\n⊢ Iff (LipschitzWith K (Neg.neg f)) (LipschitzWith K f)","decl":"@[to_additive (attr := simp)]\nlemma lipschitzWith_inv_iff : LipschitzWith K f⁻¹ ↔ LipschitzWith K f := by simp [LipschitzWith]\n\n"}
{"name":"antilipschitzWith_inv_iff","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nK : NNReal\nf : α → E\n⊢ Iff (AntilipschitzWith K (Inv.inv f)) (AntilipschitzWith K f)","decl":"@[to_additive (attr := simp)]\nlemma antilipschitzWith_inv_iff : AntilipschitzWith K f⁻¹ ↔ AntilipschitzWith K f := by\n  simp [AntilipschitzWith]\n\n"}
{"name":"antilipschitzWith_neg_iff","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nK : NNReal\nf : α → E\n⊢ Iff (AntilipschitzWith K (Neg.neg f)) (AntilipschitzWith K f)","decl":"@[to_additive (attr := simp)]\nlemma antilipschitzWith_inv_iff : AntilipschitzWith K f⁻¹ ↔ AntilipschitzWith K f := by\n  simp [AntilipschitzWith]\n\n"}
{"name":"lipschitzOnWith_inv_iff","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nK : NNReal\nf : α → E\ns : Set α\n⊢ Iff (LipschitzOnWith K (Inv.inv f) s) (LipschitzOnWith K f s)","decl":"@[to_additive (attr := simp)]\nlemma lipschitzOnWith_inv_iff : LipschitzOnWith K f⁻¹ s ↔ LipschitzOnWith K f s := by\n  simp [LipschitzOnWith]\n\n"}
{"name":"lipschitzOnWith_neg_iff","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nK : NNReal\nf : α → E\ns : Set α\n⊢ Iff (LipschitzOnWith K (Neg.neg f) s) (LipschitzOnWith K f s)","decl":"@[to_additive (attr := simp)]\nlemma lipschitzOnWith_inv_iff : LipschitzOnWith K f⁻¹ s ↔ LipschitzOnWith K f s := by\n  simp [LipschitzOnWith]\n\n"}
{"name":"locallyLipschitz_neg_iff","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nf : α → E\n⊢ Iff (LocallyLipschitz (Neg.neg f)) (LocallyLipschitz f)","decl":"@[to_additive (attr := simp)]\nlemma locallyLipschitz_inv_iff : LocallyLipschitz f⁻¹ ↔ LocallyLipschitz f := by\n  simp [LocallyLipschitz]\n\n"}
{"name":"locallyLipschitz_inv_iff","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nf : α → E\n⊢ Iff (LocallyLipschitz (Inv.inv f)) (LocallyLipschitz f)","decl":"@[to_additive (attr := simp)]\nlemma locallyLipschitz_inv_iff : LocallyLipschitz f⁻¹ ↔ LocallyLipschitz f := by\n  simp [LocallyLipschitz]\n\n"}
{"name":"locallyLipschitzOn_inv_iff","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nf : α → E\ns : Set α\n⊢ Iff (LocallyLipschitzOn s (Inv.inv f)) (LocallyLipschitzOn s f)","decl":"@[to_additive (attr := simp)]\nlemma locallyLipschitzOn_inv_iff : LocallyLipschitzOn s f⁻¹ ↔ LocallyLipschitzOn s f := by\n  simp [LocallyLipschitzOn]\n\n"}
{"name":"locallyLipschitzOn_neg_iff","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nf : α → E\ns : Set α\n⊢ Iff (LocallyLipschitzOn s (Neg.neg f)) (LocallyLipschitzOn s f)","decl":"@[to_additive (attr := simp)]\nlemma locallyLipschitzOn_inv_iff : LocallyLipschitzOn s f⁻¹ ↔ LocallyLipschitzOn s f := by\n  simp [LocallyLipschitzOn]\n\n"}
{"name":"LipschitzWith.of_neg","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nK : NNReal\nf : α → E\na✝ : LipschitzWith K (Neg.neg f)\n⊢ LipschitzWith K f","decl":"@[to_additive] alias ⟨LipschitzWith.of_inv, LipschitzWith.inv⟩ := lipschitzWith_inv_iff\n"}
{"name":"LipschitzWith.inv","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nK : NNReal\nf : α → E\na✝ : LipschitzWith K f\n⊢ LipschitzWith K (Inv.inv f)","decl":"@[to_additive] alias ⟨LipschitzWith.of_inv, LipschitzWith.inv⟩ := lipschitzWith_inv_iff\n"}
{"name":"LipschitzWith.of_inv","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nK : NNReal\nf : α → E\na✝ : LipschitzWith K (Inv.inv f)\n⊢ LipschitzWith K f","decl":"@[to_additive] alias ⟨LipschitzWith.of_inv, LipschitzWith.inv⟩ := lipschitzWith_inv_iff\n"}
{"name":"LipschitzWith.neg","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nK : NNReal\nf : α → E\na✝ : LipschitzWith K f\n⊢ LipschitzWith K (Neg.neg f)","decl":"@[to_additive] alias ⟨LipschitzWith.of_inv, LipschitzWith.inv⟩ := lipschitzWith_inv_iff\n"}
{"name":"AntilipschitzWith.of_neg","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nK : NNReal\nf : α → E\na✝ : AntilipschitzWith K (Neg.neg f)\n⊢ AntilipschitzWith K f","decl":"@[to_additive] alias ⟨AntilipschitzWith.of_inv, AntilipschitzWith.inv⟩ := antilipschitzWith_inv_iff\n"}
{"name":"AntilipschitzWith.of_inv","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nK : NNReal\nf : α → E\na✝ : AntilipschitzWith K (Inv.inv f)\n⊢ AntilipschitzWith K f","decl":"@[to_additive] alias ⟨AntilipschitzWith.of_inv, AntilipschitzWith.inv⟩ := antilipschitzWith_inv_iff\n"}
{"name":"AntilipschitzWith.neg","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nK : NNReal\nf : α → E\na✝ : AntilipschitzWith K f\n⊢ AntilipschitzWith K (Neg.neg f)","decl":"@[to_additive] alias ⟨AntilipschitzWith.of_inv, AntilipschitzWith.inv⟩ := antilipschitzWith_inv_iff\n"}
{"name":"AntilipschitzWith.inv","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nK : NNReal\nf : α → E\na✝ : AntilipschitzWith K f\n⊢ AntilipschitzWith K (Inv.inv f)","decl":"@[to_additive] alias ⟨AntilipschitzWith.of_inv, AntilipschitzWith.inv⟩ := antilipschitzWith_inv_iff\n"}
{"name":"LipschitzOnWith.of_neg","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nK : NNReal\nf : α → E\ns : Set α\na✝ : LipschitzOnWith K (Neg.neg f) s\n⊢ LipschitzOnWith K f s","decl":"@[to_additive] alias ⟨LipschitzOnWith.of_inv, LipschitzOnWith.inv⟩ := lipschitzOnWith_inv_iff\n"}
{"name":"LipschitzOnWith.of_inv","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nK : NNReal\nf : α → E\ns : Set α\na✝ : LipschitzOnWith K (Inv.inv f) s\n⊢ LipschitzOnWith K f s","decl":"@[to_additive] alias ⟨LipschitzOnWith.of_inv, LipschitzOnWith.inv⟩ := lipschitzOnWith_inv_iff\n"}
{"name":"LipschitzOnWith.neg","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nK : NNReal\nf : α → E\ns : Set α\na✝ : LipschitzOnWith K f s\n⊢ LipschitzOnWith K (Neg.neg f) s","decl":"@[to_additive] alias ⟨LipschitzOnWith.of_inv, LipschitzOnWith.inv⟩ := lipschitzOnWith_inv_iff\n"}
{"name":"LipschitzOnWith.inv","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nK : NNReal\nf : α → E\ns : Set α\na✝ : LipschitzOnWith K f s\n⊢ LipschitzOnWith K (Inv.inv f) s","decl":"@[to_additive] alias ⟨LipschitzOnWith.of_inv, LipschitzOnWith.inv⟩ := lipschitzOnWith_inv_iff\n"}
{"name":"LocallyLipschitz.of_inv","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nf : α → E\na✝ : LocallyLipschitz (Inv.inv f)\n⊢ LocallyLipschitz f","decl":"@[to_additive] alias ⟨LocallyLipschitz.of_inv, LocallyLipschitz.inv⟩ := locallyLipschitz_inv_iff\n"}
{"name":"LocallyLipschitz.neg","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nf : α → E\na✝ : LocallyLipschitz f\n⊢ LocallyLipschitz (Neg.neg f)","decl":"@[to_additive] alias ⟨LocallyLipschitz.of_inv, LocallyLipschitz.inv⟩ := locallyLipschitz_inv_iff\n"}
{"name":"LocallyLipschitz.inv","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nf : α → E\na✝ : LocallyLipschitz f\n⊢ LocallyLipschitz (Inv.inv f)","decl":"@[to_additive] alias ⟨LocallyLipschitz.of_inv, LocallyLipschitz.inv⟩ := locallyLipschitz_inv_iff\n"}
{"name":"LocallyLipschitz.of_neg","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nf : α → E\na✝ : LocallyLipschitz (Neg.neg f)\n⊢ LocallyLipschitz f","decl":"@[to_additive] alias ⟨LocallyLipschitz.of_inv, LocallyLipschitz.inv⟩ := locallyLipschitz_inv_iff\n"}
{"name":"LocallyLipschitzOn.inv","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nf : α → E\ns : Set α\na✝ : LocallyLipschitzOn s f\n⊢ LocallyLipschitzOn s (Inv.inv f)","decl":"@[to_additive]\nalias ⟨LocallyLipschitzOn.of_inv, LocallyLipschitzOn.inv⟩ := locallyLipschitzOn_inv_iff\n\n"}
{"name":"LocallyLipschitzOn.of_neg","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nf : α → E\ns : Set α\na✝ : LocallyLipschitzOn s (Neg.neg f)\n⊢ LocallyLipschitzOn s f","decl":"@[to_additive]\nalias ⟨LocallyLipschitzOn.of_inv, LocallyLipschitzOn.inv⟩ := locallyLipschitzOn_inv_iff\n\n"}
{"name":"LocallyLipschitzOn.neg","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nf : α → E\ns : Set α\na✝ : LocallyLipschitzOn s f\n⊢ LocallyLipschitzOn s (Neg.neg f)","decl":"@[to_additive]\nalias ⟨LocallyLipschitzOn.of_inv, LocallyLipschitzOn.inv⟩ := locallyLipschitzOn_inv_iff\n\n"}
{"name":"LocallyLipschitzOn.of_inv","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nf : α → E\ns : Set α\na✝ : LocallyLipschitzOn s (Inv.inv f)\n⊢ LocallyLipschitzOn s f","decl":"@[to_additive]\nalias ⟨LocallyLipschitzOn.of_inv, LocallyLipschitzOn.inv⟩ := locallyLipschitzOn_inv_iff\n\n"}
{"name":"LipschitzOnWith.add","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nKf Kg : NNReal\nf g : α → E\ns : Set α\nhf : LipschitzOnWith Kf f s\nhg : LipschitzOnWith Kg g s\n⊢ LipschitzOnWith (HAdd.hAdd Kf Kg) (fun x => HAdd.hAdd (f x) (g x)) s","decl":"@[to_additive]\nlemma LipschitzOnWith.mul (hf : LipschitzOnWith Kf f s) (hg : LipschitzOnWith Kg g s) :\n    LipschitzOnWith (Kf + Kg) (fun x ↦ f x * g x) s := fun x hx y hy ↦\n  calc\n    edist (f x * g x) (f y * g y) ≤ edist (f x) (f y) + edist (g x) (g y) :=\n      edist_mul_mul_le _ _ _ _\n    _ ≤ Kf * edist x y + Kg * edist x y := add_le_add (hf hx hy) (hg hx hy)\n    _ = (Kf + Kg) * edist x y := (add_mul _ _ _).symm\n\n"}
{"name":"LipschitzOnWith.mul","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nKf Kg : NNReal\nf g : α → E\ns : Set α\nhf : LipschitzOnWith Kf f s\nhg : LipschitzOnWith Kg g s\n⊢ LipschitzOnWith (HAdd.hAdd Kf Kg) (fun x => HMul.hMul (f x) (g x)) s","decl":"@[to_additive]\nlemma LipschitzOnWith.mul (hf : LipschitzOnWith Kf f s) (hg : LipschitzOnWith Kg g s) :\n    LipschitzOnWith (Kf + Kg) (fun x ↦ f x * g x) s := fun x hx y hy ↦\n  calc\n    edist (f x * g x) (f y * g y) ≤ edist (f x) (f y) + edist (g x) (g y) :=\n      edist_mul_mul_le _ _ _ _\n    _ ≤ Kf * edist x y + Kg * edist x y := add_le_add (hf hx hy) (hg hx hy)\n    _ = (Kf + Kg) * edist x y := (add_mul _ _ _).symm\n\n"}
{"name":"LipschitzWith.mul","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nKf Kg : NNReal\nf g : α → E\nhf : LipschitzWith Kf f\nhg : LipschitzWith Kg g\n⊢ LipschitzWith (HAdd.hAdd Kf Kg) fun x => HMul.hMul (f x) (g x)","decl":"@[to_additive]\nlemma LipschitzWith.mul (hf : LipschitzWith Kf f) (hg : LipschitzWith Kg g) :\n    LipschitzWith (Kf + Kg) fun x ↦ f x * g x := by\n  simpa [← lipschitzOnWith_univ] using hf.lipschitzOnWith.mul hg.lipschitzOnWith\n\n"}
{"name":"LipschitzWith.add","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nKf Kg : NNReal\nf g : α → E\nhf : LipschitzWith Kf f\nhg : LipschitzWith Kg g\n⊢ LipschitzWith (HAdd.hAdd Kf Kg) fun x => HAdd.hAdd (f x) (g x)","decl":"@[to_additive]\nlemma LipschitzWith.mul (hf : LipschitzWith Kf f) (hg : LipschitzWith Kg g) :\n    LipschitzWith (Kf + Kg) fun x ↦ f x * g x := by\n  simpa [← lipschitzOnWith_univ] using hf.lipschitzOnWith.mul hg.lipschitzOnWith\n\n"}
{"name":"LipschitzWith.mul'","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nKf Kg : NNReal\nf g : α → E\nhf : LipschitzWith Kf f\nhg : LipschitzWith Kg g\n⊢ LipschitzWith (HAdd.hAdd Kf Kg) fun x => HMul.hMul (f x) (g x)","decl":"@[deprecated (since := \"2024-08-25\")] alias LipschitzWith.mul' := LipschitzWith.mul\n\n"}
{"name":"LocallyLipschitzOn.add","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nf g : α → E\ns : Set α\nhf : LocallyLipschitzOn s f\nhg : LocallyLipschitzOn s g\n⊢ LocallyLipschitzOn s fun x => HAdd.hAdd (f x) (g x)","decl":"@[to_additive]\nlemma LocallyLipschitzOn.mul (hf : LocallyLipschitzOn s f) (hg : LocallyLipschitzOn s g) :\n    LocallyLipschitzOn s fun x ↦ f x * g x := fun x hx ↦ by\n  obtain ⟨Kf, t, ht, hKf⟩ := hf hx\n  obtain ⟨Kg, u, hu, hKg⟩ := hg hx\n  exact ⟨Kf + Kg, t ∩ u, inter_mem ht hu,\n    (hKf.mono Set.inter_subset_left).mul (hKg.mono Set.inter_subset_right)⟩\n\n"}
{"name":"LocallyLipschitzOn.mul","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nf g : α → E\ns : Set α\nhf : LocallyLipschitzOn s f\nhg : LocallyLipschitzOn s g\n⊢ LocallyLipschitzOn s fun x => HMul.hMul (f x) (g x)","decl":"@[to_additive]\nlemma LocallyLipschitzOn.mul (hf : LocallyLipschitzOn s f) (hg : LocallyLipschitzOn s g) :\n    LocallyLipschitzOn s fun x ↦ f x * g x := fun x hx ↦ by\n  obtain ⟨Kf, t, ht, hKf⟩ := hf hx\n  obtain ⟨Kg, u, hu, hKg⟩ := hg hx\n  exact ⟨Kf + Kg, t ∩ u, inter_mem ht hu,\n    (hKf.mono Set.inter_subset_left).mul (hKg.mono Set.inter_subset_right)⟩\n\n"}
{"name":"LocallyLipschitz.add","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nf g : α → E\nhf : LocallyLipschitz f\nhg : LocallyLipschitz g\n⊢ LocallyLipschitz fun x => HAdd.hAdd (f x) (g x)","decl":"@[to_additive]\nlemma LocallyLipschitz.mul (hf : LocallyLipschitz f) (hg : LocallyLipschitz g) :\n    LocallyLipschitz fun x ↦ f x * g x := by\n  simpa [← locallyLipschitzOn_univ] using hf.locallyLipschitzOn.mul hg.locallyLipschitzOn\n\n"}
{"name":"LocallyLipschitz.mul","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nf g : α → E\nhf : LocallyLipschitz f\nhg : LocallyLipschitz g\n⊢ LocallyLipschitz fun x => HMul.hMul (f x) (g x)","decl":"@[to_additive]\nlemma LocallyLipschitz.mul (hf : LocallyLipschitz f) (hg : LocallyLipschitz g) :\n    LocallyLipschitz fun x ↦ f x * g x := by\n  simpa [← locallyLipschitzOn_univ] using hf.locallyLipschitzOn.mul hg.locallyLipschitzOn\n\n"}
{"name":"LipschitzOnWith.div","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nKf Kg : NNReal\nf g : α → E\ns : Set α\nhf : LipschitzOnWith Kf f s\nhg : LipschitzOnWith Kg g s\n⊢ LipschitzOnWith (HAdd.hAdd Kf Kg) (fun x => HDiv.hDiv (f x) (g x)) s","decl":"@[to_additive]\nlemma LipschitzOnWith.div (hf : LipschitzOnWith Kf f s) (hg : LipschitzOnWith Kg g s) :\n    LipschitzOnWith (Kf + Kg) (fun x ↦ f x / g x) s := by\n  simpa only [div_eq_mul_inv] using hf.mul hg.inv\n\n"}
{"name":"LipschitzOnWith.sub","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nKf Kg : NNReal\nf g : α → E\ns : Set α\nhf : LipschitzOnWith Kf f s\nhg : LipschitzOnWith Kg g s\n⊢ LipschitzOnWith (HAdd.hAdd Kf Kg) (fun x => HSub.hSub (f x) (g x)) s","decl":"@[to_additive]\nlemma LipschitzOnWith.div (hf : LipschitzOnWith Kf f s) (hg : LipschitzOnWith Kg g s) :\n    LipschitzOnWith (Kf + Kg) (fun x ↦ f x / g x) s := by\n  simpa only [div_eq_mul_inv] using hf.mul hg.inv\n\n"}
{"name":"LipschitzWith.sub","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nKf Kg : NNReal\nf g : α → E\nhf : LipschitzWith Kf f\nhg : LipschitzWith Kg g\n⊢ LipschitzWith (HAdd.hAdd Kf Kg) fun x => HSub.hSub (f x) (g x)","decl":"@[to_additive]\ntheorem LipschitzWith.div (hf : LipschitzWith Kf f) (hg : LipschitzWith Kg g) :\n    LipschitzWith (Kf + Kg) fun x => f x / g x := by\n  simpa only [div_eq_mul_inv] using hf.mul hg.inv\n\n"}
{"name":"LipschitzWith.div","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nKf Kg : NNReal\nf g : α → E\nhf : LipschitzWith Kf f\nhg : LipschitzWith Kg g\n⊢ LipschitzWith (HAdd.hAdd Kf Kg) fun x => HDiv.hDiv (f x) (g x)","decl":"@[to_additive]\ntheorem LipschitzWith.div (hf : LipschitzWith Kf f) (hg : LipschitzWith Kg g) :\n    LipschitzWith (Kf + Kg) fun x => f x / g x := by\n  simpa only [div_eq_mul_inv] using hf.mul hg.inv\n\n"}
{"name":"LocallyLipschitzOn.div","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nf g : α → E\ns : Set α\nhf : LocallyLipschitzOn s f\nhg : LocallyLipschitzOn s g\n⊢ LocallyLipschitzOn s fun x => HDiv.hDiv (f x) (g x)","decl":"@[to_additive]\nlemma LocallyLipschitzOn.div (hf : LocallyLipschitzOn s f) (hg : LocallyLipschitzOn s g) :\n    LocallyLipschitzOn s fun x ↦ f x / g x := by\n  simpa only [div_eq_mul_inv] using hf.mul hg.inv\n\n"}
{"name":"LocallyLipschitzOn.sub","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nf g : α → E\ns : Set α\nhf : LocallyLipschitzOn s f\nhg : LocallyLipschitzOn s g\n⊢ LocallyLipschitzOn s fun x => HSub.hSub (f x) (g x)","decl":"@[to_additive]\nlemma LocallyLipschitzOn.div (hf : LocallyLipschitzOn s f) (hg : LocallyLipschitzOn s g) :\n    LocallyLipschitzOn s fun x ↦ f x / g x := by\n  simpa only [div_eq_mul_inv] using hf.mul hg.inv\n\n"}
{"name":"LocallyLipschitz.div","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nf g : α → E\nhf : LocallyLipschitz f\nhg : LocallyLipschitz g\n⊢ LocallyLipschitz fun x => HDiv.hDiv (f x) (g x)","decl":"@[to_additive]\nlemma LocallyLipschitz.div (hf : LocallyLipschitz f) (hg : LocallyLipschitz g) :\n    LocallyLipschitz fun x ↦ f x / g x := by\n  simpa only [div_eq_mul_inv] using hf.mul hg.inv\n\n"}
{"name":"LocallyLipschitz.sub","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nf g : α → E\nhf : LocallyLipschitz f\nhg : LocallyLipschitz g\n⊢ LocallyLipschitz fun x => HSub.hSub (f x) (g x)","decl":"@[to_additive]\nlemma LocallyLipschitz.div (hf : LocallyLipschitz f) (hg : LocallyLipschitz g) :\n    LocallyLipschitz fun x ↦ f x / g x := by\n  simpa only [div_eq_mul_inv] using hf.mul hg.inv\n\n"}
{"name":"AntilipschitzWith.mul_lipschitzWith","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nKf Kg : NNReal\nf g : α → E\nhf : AntilipschitzWith Kf f\nhg : LipschitzWith Kg g\nhK : LT.lt Kg (Inv.inv Kf)\n⊢ AntilipschitzWith (Inv.inv (HSub.hSub (Inv.inv Kf) Kg)) fun x => HMul.hMul (f x) (g x)","decl":"@[to_additive]\ntheorem mul_lipschitzWith (hf : AntilipschitzWith Kf f) (hg : LipschitzWith Kg g) (hK : Kg < Kf⁻¹) :\n    AntilipschitzWith (Kf⁻¹ - Kg)⁻¹ fun x => f x * g x := by\n  letI : PseudoMetricSpace α := PseudoEMetricSpace.toPseudoMetricSpace hf.edist_ne_top\n  refine AntilipschitzWith.of_le_mul_dist fun x y => ?_\n  rw [NNReal.coe_inv, ← _root_.div_eq_inv_mul]\n  rw [le_div_iff₀ (NNReal.coe_pos.2 <| tsub_pos_iff_lt.2 hK)]\n  rw [mul_comm, NNReal.coe_sub hK.le, sub_mul]\n  calc\n    ↑Kf⁻¹ * dist x y - Kg * dist x y ≤ dist (f x) (f y) - dist (g x) (g y) :=\n      sub_le_sub (hf.mul_le_dist x y) (hg.dist_le_mul x y)\n    _ ≤ _ := le_trans (le_abs_self _) (abs_dist_sub_le_dist_mul_mul _ _ _ _)\n\n"}
{"name":"AntilipschitzWith.add_lipschitzWith","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nKf Kg : NNReal\nf g : α → E\nhf : AntilipschitzWith Kf f\nhg : LipschitzWith Kg g\nhK : LT.lt Kg (Inv.inv Kf)\n⊢ AntilipschitzWith (Inv.inv (HSub.hSub (Inv.inv Kf) Kg)) fun x => HAdd.hAdd (f x) (g x)","decl":"@[to_additive]\ntheorem mul_lipschitzWith (hf : AntilipschitzWith Kf f) (hg : LipschitzWith Kg g) (hK : Kg < Kf⁻¹) :\n    AntilipschitzWith (Kf⁻¹ - Kg)⁻¹ fun x => f x * g x := by\n  letI : PseudoMetricSpace α := PseudoEMetricSpace.toPseudoMetricSpace hf.edist_ne_top\n  refine AntilipschitzWith.of_le_mul_dist fun x y => ?_\n  rw [NNReal.coe_inv, ← _root_.div_eq_inv_mul]\n  rw [le_div_iff₀ (NNReal.coe_pos.2 <| tsub_pos_iff_lt.2 hK)]\n  rw [mul_comm, NNReal.coe_sub hK.le, sub_mul]\n  calc\n    ↑Kf⁻¹ * dist x y - Kg * dist x y ≤ dist (f x) (f y) - dist (g x) (g y) :=\n      sub_le_sub (hf.mul_le_dist x y) (hg.dist_le_mul x y)\n    _ ≤ _ := le_trans (le_abs_self _) (abs_dist_sub_le_dist_mul_mul _ _ _ _)\n\n"}
{"name":"AntilipschitzWith.mul_div_lipschitzWith","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedCommGroup E\ninst✝ : PseudoEMetricSpace α\nKf Kg : NNReal\nf g : α → E\nhf : AntilipschitzWith Kf f\nhg : LipschitzWith Kg (HDiv.hDiv g f)\nhK : LT.lt Kg (Inv.inv Kf)\n⊢ AntilipschitzWith (Inv.inv (HSub.hSub (Inv.inv Kf) Kg)) g","decl":"@[to_additive]\ntheorem mul_div_lipschitzWith (hf : AntilipschitzWith Kf f) (hg : LipschitzWith Kg (g / f))\n    (hK : Kg < Kf⁻¹) : AntilipschitzWith (Kf⁻¹ - Kg)⁻¹ g := by\n  simpa only [Pi.div_apply, mul_div_cancel] using hf.mul_lipschitzWith hg hK\n\n"}
{"name":"AntilipschitzWith.add_sub_lipschitzWith","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"α : Type u_4\nE : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : PseudoEMetricSpace α\nKf Kg : NNReal\nf g : α → E\nhf : AntilipschitzWith Kf f\nhg : LipschitzWith Kg (HSub.hSub g f)\nhK : LT.lt Kg (Inv.inv Kf)\n⊢ AntilipschitzWith (Inv.inv (HSub.hSub (Inv.inv Kf) Kg)) g","decl":"@[to_additive]\ntheorem mul_div_lipschitzWith (hf : AntilipschitzWith Kf f) (hg : LipschitzWith Kg (g / f))\n    (hK : Kg < Kf⁻¹) : AntilipschitzWith (Kf⁻¹ - Kg)⁻¹ g := by\n  simpa only [Pi.div_apply, mul_div_cancel] using hf.mul_lipschitzWith hg hK\n\n"}
{"name":"AntilipschitzWith.le_mul_norm_sub","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"F : Type u_3\ninst✝¹ : SeminormedAddCommGroup F\nE : Type u_5\ninst✝ : SeminormedAddCommGroup E\nK : NNReal\nf : E → F\nhf : AntilipschitzWith K f\nx y : E\n⊢ LE.le (Norm.norm (HSub.hSub x y)) (HMul.hMul (↑K) (Norm.norm (HSub.hSub (f x) (f y))))","decl":"@[to_additive le_mul_norm_sub]\ntheorem le_mul_norm_div {f : E → F} (hf : AntilipschitzWith K f) (x y : E) :\n    ‖x / y‖ ≤ K * ‖f x / f y‖ := by simp [← dist_eq_norm_div, hf.le_mul_dist x y]\n\n"}
{"name":"AntilipschitzWith.le_mul_norm_div","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"F : Type u_3\ninst✝¹ : SeminormedCommGroup F\nE : Type u_5\ninst✝ : SeminormedCommGroup E\nK : NNReal\nf : E → F\nhf : AntilipschitzWith K f\nx y : E\n⊢ LE.le (Norm.norm (HDiv.hDiv x y)) (HMul.hMul (↑K) (Norm.norm (HDiv.hDiv (f x) (f y))))","decl":"@[to_additive le_mul_norm_sub]\ntheorem le_mul_norm_div {f : E → F} (hf : AntilipschitzWith K f) (x y : E) :\n    ‖x / y‖ ≤ K * ‖f x / f y‖ := by simp [← dist_eq_norm_div, hf.le_mul_dist x y]\n\n"}
{"name":"SeminormedAddCommGroup.to_lipschitzAdd","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddCommGroup E\n⊢ LipschitzAdd E","decl":"@[to_additive]\ninstance (priority := 100) SeminormedCommGroup.to_lipschitzMul : LipschitzMul E :=\n  ⟨⟨1 + 1, LipschitzWith.prod_fst.mul LipschitzWith.prod_snd⟩⟩\n\n-- See note [lower instance priority]\n"}
{"name":"SeminormedCommGroup.to_lipschitzMul","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedCommGroup E\n⊢ LipschitzMul E","decl":"@[to_additive]\ninstance (priority := 100) SeminormedCommGroup.to_lipschitzMul : LipschitzMul E :=\n  ⟨⟨1 + 1, LipschitzWith.prod_fst.mul LipschitzWith.prod_snd⟩⟩\n\n-- See note [lower instance priority]\n"}
{"name":"SeminormedCommGroup.to_uniformGroup","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedCommGroup E\n⊢ UniformGroup E","decl":"/-- A seminormed group is a uniform group, i.e., multiplication and division are uniformly\ncontinuous. -/\n@[to_additive \"A seminormed group is a uniform additive group, i.e., addition and subtraction are\nuniformly continuous.\"]\ninstance (priority := 100) SeminormedCommGroup.to_uniformGroup : UniformGroup E :=\n  ⟨(LipschitzWith.prod_fst.div LipschitzWith.prod_snd).uniformContinuous⟩\n\n-- short-circuit type class inference\n-- See note [lower instance priority]\n"}
{"name":"SeminormedAddCommGroup.to_uniformAddGroup","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddCommGroup E\n⊢ UniformAddGroup E","decl":"/-- A seminormed group is a uniform group, i.e., multiplication and division are uniformly\ncontinuous. -/\n@[to_additive \"A seminormed group is a uniform additive group, i.e., addition and subtraction are\nuniformly continuous.\"]\ninstance (priority := 100) SeminormedCommGroup.to_uniformGroup : UniformGroup E :=\n  ⟨(LipschitzWith.prod_fst.div LipschitzWith.prod_snd).uniformContinuous⟩\n\n-- short-circuit type class inference\n-- See note [lower instance priority]\n"}
{"name":"SeminormedCommGroup.toTopologicalGroup","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedCommGroup E\n⊢ TopologicalGroup E","decl":"@[to_additive]\ninstance (priority := 100) SeminormedCommGroup.toTopologicalGroup : TopologicalGroup E :=\n  inferInstance\n\n"}
{"name":"SeminormedAddCommGroup.toTopologicalAddGroup","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddCommGroup E\n⊢ TopologicalAddGroup E","decl":"@[to_additive]\ninstance (priority := 100) SeminormedCommGroup.toTopologicalGroup : TopologicalGroup E :=\n  inferInstance\n\n"}
{"name":"SeparationQuotient.norm_mk","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddCommGroup E\np : E\n⊢ Eq (Norm.norm (SeparationQuotient.mk p)) (Norm.norm p)","decl":"set_option linter.docPrime false in\n@[to_additive (attr := simp) norm_mk]\ntheorem norm_mk' (p : E) : ‖mk p‖ = ‖p‖ := rfl\n\n"}
{"name":"SeparationQuotient.norm_mk'","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedCommGroup E\np : E\n⊢ Eq (Norm.norm (SeparationQuotient.mk p)) (Norm.norm p)","decl":"set_option linter.docPrime false in\n@[to_additive (attr := simp) norm_mk]\ntheorem norm_mk' (p : E) : ‖mk p‖ = ‖p‖ := rfl\n\n"}
{"name":"SeparationQuotient.mk_eq_zero_iff","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddCommGroup E\np : E\n⊢ Iff (Eq (SeparationQuotient.mk p) 0) (Eq (Norm.norm p) 0)","decl":"@[to_additive]\ntheorem mk_eq_one_iff {p : E} : mk p = 1 ↔ ‖p‖ = 0 := by\n  rw [← norm_mk', norm_eq_zero']\n\n"}
{"name":"SeparationQuotient.mk_eq_one_iff","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedCommGroup E\np : E\n⊢ Iff (Eq (SeparationQuotient.mk p) 1) (Eq (Norm.norm p) 0)","decl":"@[to_additive]\ntheorem mk_eq_one_iff {p : E} : mk p = 1 ↔ ‖p‖ = 0 := by\n  rw [← norm_mk', norm_eq_zero']\n\n"}
{"name":"SeparationQuotient.nnnorm_mk","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddCommGroup E\np : E\n⊢ Eq (NNNorm.nnnorm (SeparationQuotient.mk p)) (NNNorm.nnnorm p)","decl":"set_option linter.docPrime false in\n@[to_additive (attr := simp) nnnorm_mk]\ntheorem nnnorm_mk' (p : E) : ‖mk p‖₊ = ‖p‖₊ := rfl\n\n"}
{"name":"SeparationQuotient.nnnorm_mk'","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedCommGroup E\np : E\n⊢ Eq (NNNorm.nnnorm (SeparationQuotient.mk p)) (NNNorm.nnnorm p)","decl":"set_option linter.docPrime false in\n@[to_additive (attr := simp) nnnorm_mk]\ntheorem nnnorm_mk' (p : E) : ‖mk p‖₊ = ‖p‖₊ := rfl\n\n"}
{"name":"cauchySeq_prod_of_eventually_eq","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedCommGroup E\nu v : Nat → E\nN : Nat\nhuv : ∀ (n : Nat), GE.ge n N → Eq (u n) (v n)\nhv : CauchySeq fun n => (Finset.range (HAdd.hAdd n 1)).prod fun k => v k\n⊢ CauchySeq fun n => (Finset.range (HAdd.hAdd n 1)).prod fun k => u k","decl":"@[to_additive]\ntheorem cauchySeq_prod_of_eventually_eq {u v : ℕ → E} {N : ℕ} (huv : ∀ n ≥ N, u n = v n)\n    (hv : CauchySeq fun n => ∏ k ∈ range (n + 1), v k) :\n    CauchySeq fun n => ∏ k ∈ range (n + 1), u k := by\n  let d : ℕ → E := fun n => ∏ k ∈ range (n + 1), u k / v k\n  rw [show (fun n => ∏ k ∈ range (n + 1), u k) = d * fun n => ∏ k ∈ range (n + 1), v k\n      by ext n; simp [d]]\n  suffices ∀ n ≥ N, d n = d N from (tendsto_atTop_of_eventually_const this).cauchySeq.mul hv\n  intro n hn\n  dsimp [d]\n  rw [eventually_constant_prod _ (add_le_add_right hn 1)]\n  intro m hm\n  simp [huv m (le_of_lt hm)]\n\n"}
{"name":"cauchySeq_sum_of_eventually_eq","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"E : Type u_2\ninst✝ : SeminormedAddCommGroup E\nu v : Nat → E\nN : Nat\nhuv : ∀ (n : Nat), GE.ge n N → Eq (u n) (v n)\nhv : CauchySeq fun n => (Finset.range (HAdd.hAdd n 1)).sum fun k => v k\n⊢ CauchySeq fun n => (Finset.range (HAdd.hAdd n 1)).sum fun k => u k","decl":"@[to_additive]\ntheorem cauchySeq_prod_of_eventually_eq {u v : ℕ → E} {N : ℕ} (huv : ∀ n ≥ N, u n = v n)\n    (hv : CauchySeq fun n => ∏ k ∈ range (n + 1), v k) :\n    CauchySeq fun n => ∏ k ∈ range (n + 1), u k := by\n  let d : ℕ → E := fun n => ∏ k ∈ range (n + 1), u k / v k\n  rw [show (fun n => ∏ k ∈ range (n + 1), u k) = d * fun n => ∏ k ∈ range (n + 1), v k\n      by ext n; simp [d]]\n  suffices ∀ n ≥ N, d n = d N from (tendsto_atTop_of_eventually_const this).cauchySeq.mul hv\n  intro n hn\n  dsimp [d]\n  rw [eventually_constant_prod _ (add_le_add_right hn 1)]\n  intro m hm\n  simp [huv m (le_of_lt hm)]\n\n"}
{"name":"CauchySeq.mul_norm_bddAbove","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"G : Type u_4\ninst✝ : SeminormedGroup G\nu : Nat → G\nhu : CauchySeq u\n⊢ BddAbove (Set.range fun n => Norm.norm (u n))","decl":"@[to_additive CauchySeq.norm_bddAbove]\nlemma CauchySeq.mul_norm_bddAbove {G : Type*} [SeminormedGroup G] {u : ℕ → G}\n    (hu : CauchySeq u) : BddAbove (Set.range (fun n ↦ ‖u n‖)) := by\n  obtain ⟨C, -, hC⟩ := cauchySeq_bdd hu\n  simp_rw [SeminormedGroup.dist_eq] at hC\n  have : ∀ n, ‖u n‖ ≤ C + ‖u 0‖ := by\n    intro n\n    rw [add_comm]\n    refine (norm_le_norm_add_norm_div' (u n) (u 0)).trans ?_\n    simp [(hC _ _).le]\n  rw [bddAbove_def]\n  exact ⟨C + ‖u 0‖, by simpa using this⟩\n\n"}
{"name":"CauchySeq.norm_bddAbove","module":"Mathlib.Analysis.Normed.Group.Uniform","initialProofState":"G : Type u_4\ninst✝ : SeminormedAddGroup G\nu : Nat → G\nhu : CauchySeq u\n⊢ BddAbove (Set.range fun n => Norm.norm (u n))","decl":"@[to_additive CauchySeq.norm_bddAbove]\nlemma CauchySeq.mul_norm_bddAbove {G : Type*} [SeminormedGroup G] {u : ℕ → G}\n    (hu : CauchySeq u) : BddAbove (Set.range (fun n ↦ ‖u n‖)) := by\n  obtain ⟨C, -, hC⟩ := cauchySeq_bdd hu\n  simp_rw [SeminormedGroup.dist_eq] at hC\n  have : ∀ n, ‖u n‖ ≤ C + ‖u 0‖ := by\n    intro n\n    rw [add_comm]\n    refine (norm_le_norm_add_norm_div' (u n) (u 0)).trans ?_\n    simp [(hC _ _).le]\n  rw [bddAbove_def]\n  exact ⟨C + ‖u 0‖, by simpa using this⟩\n\n"}
