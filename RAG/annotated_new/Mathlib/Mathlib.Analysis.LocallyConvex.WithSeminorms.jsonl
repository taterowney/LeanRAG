{"name":"SeminormFamily.basisSets_iff","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝² : NormedField 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\np : SeminormFamily 𝕜 E ι\nU : Set E\n⊢ Iff (Membership.mem p.basisSets U) (Exists fun i => Exists fun r => And (LT.lt 0 r) (Eq U ((i.sup p).ball 0 r)))","decl":"theorem basisSets_iff {U : Set E} :\n    U ∈ p.basisSets ↔ ∃ (i : Finset ι) (r : ℝ), 0 < r ∧ U = ball (i.sup p) 0 r := by\n  simp only [basisSets, mem_iUnion, exists_prop, mem_singleton_iff]\n\n"}
{"name":"SeminormFamily.basisSets_mem","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝² : NormedField 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\np : SeminormFamily 𝕜 E ι\ni : Finset ι\nr : Real\nhr : LT.lt 0 r\n⊢ Membership.mem p.basisSets ((i.sup p).ball 0 r)","decl":"theorem basisSets_mem (i : Finset ι) {r : ℝ} (hr : 0 < r) : (i.sup p).ball 0 r ∈ p.basisSets :=\n  (basisSets_iff _).mpr ⟨i, _, hr, rfl⟩\n\n"}
{"name":"SeminormFamily.basisSets_singleton_mem","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝² : NormedField 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\np : SeminormFamily 𝕜 E ι\ni : ι\nr : Real\nhr : LT.lt 0 r\n⊢ Membership.mem p.basisSets ((p i).ball 0 r)","decl":"theorem basisSets_singleton_mem (i : ι) {r : ℝ} (hr : 0 < r) : (p i).ball 0 r ∈ p.basisSets :=\n  (basisSets_iff _).mpr ⟨{i}, _, hr, by rw [Finset.sup_singleton]⟩\n\n"}
{"name":"SeminormFamily.basisSets_nonempty","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝³ : NormedField 𝕜\ninst✝² : AddCommGroup E\ninst✝¹ : Module 𝕜 E\np : SeminormFamily 𝕜 E ι\ninst✝ : Nonempty ι\n⊢ p.basisSets.Nonempty","decl":"theorem basisSets_nonempty [Nonempty ι] : p.basisSets.Nonempty := by\n  let i := Classical.arbitrary ι\n  refine nonempty_def.mpr ⟨(p i).ball 0 1, ?_⟩\n  exact p.basisSets_singleton_mem i zero_lt_one\n\n"}
{"name":"SeminormFamily.basisSets_intersect","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝² : NormedField 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\np : SeminormFamily 𝕜 E ι\nU V : Set E\nhU : Membership.mem p.basisSets U\nhV : Membership.mem p.basisSets V\n⊢ Exists fun z => And (Membership.mem p.basisSets z) (HasSubset.Subset z (Inter.inter U V))","decl":"theorem basisSets_intersect (U V : Set E) (hU : U ∈ p.basisSets) (hV : V ∈ p.basisSets) :\n    ∃ z ∈ p.basisSets, z ⊆ U ∩ V := by\n  classical\n    rcases p.basisSets_iff.mp hU with ⟨s, r₁, hr₁, hU⟩\n    rcases p.basisSets_iff.mp hV with ⟨t, r₂, hr₂, hV⟩\n    use ((s ∪ t).sup p).ball 0 (min r₁ r₂)\n    refine ⟨p.basisSets_mem (s ∪ t) (lt_min_iff.mpr ⟨hr₁, hr₂⟩), ?_⟩\n    rw [hU, hV, ball_finset_sup_eq_iInter _ _ _ (lt_min_iff.mpr ⟨hr₁, hr₂⟩),\n      ball_finset_sup_eq_iInter _ _ _ hr₁, ball_finset_sup_eq_iInter _ _ _ hr₂]\n    exact\n      Set.subset_inter\n        (Set.iInter₂_mono' fun i hi =>\n          ⟨i, Finset.subset_union_left hi, ball_mono <| min_le_left _ _⟩)\n        (Set.iInter₂_mono' fun i hi =>\n          ⟨i, Finset.subset_union_right hi, ball_mono <| min_le_right _ _⟩)\n\n"}
{"name":"SeminormFamily.basisSets_zero","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝² : NormedField 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\np : SeminormFamily 𝕜 E ι\nU : Set E\nhU : Membership.mem p.basisSets U\n⊢ Membership.mem U 0","decl":"theorem basisSets_zero (U) (hU : U ∈ p.basisSets) : (0 : E) ∈ U := by\n  rcases p.basisSets_iff.mp hU with ⟨ι', r, hr, hU⟩\n  rw [hU, mem_ball_zero, map_zero]\n  exact hr\n\n"}
{"name":"SeminormFamily.basisSets_add","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝² : NormedField 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\np : SeminormFamily 𝕜 E ι\nU : Set E\nhU : Membership.mem p.basisSets U\n⊢ Exists fun V => And (Membership.mem p.basisSets V) (HasSubset.Subset (HAdd.hAdd V V) U)","decl":"theorem basisSets_add (U) (hU : U ∈ p.basisSets) :\n    ∃ V ∈ p.basisSets, V + V ⊆ U := by\n  rcases p.basisSets_iff.mp hU with ⟨s, r, hr, hU⟩\n  use (s.sup p).ball 0 (r / 2)\n  refine ⟨p.basisSets_mem s (div_pos hr zero_lt_two), ?_⟩\n  refine Set.Subset.trans (ball_add_ball_subset (s.sup p) (r / 2) (r / 2) 0 0) ?_\n  rw [hU, add_zero, add_halves]\n\n"}
{"name":"SeminormFamily.basisSets_neg","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝² : NormedField 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\np : SeminormFamily 𝕜 E ι\nU : Set E\nhU' : Membership.mem p.basisSets U\n⊢ Exists fun V => And (Membership.mem p.basisSets V) (HasSubset.Subset V (Set.preimage (fun x => Neg.neg x) U))","decl":"theorem basisSets_neg (U) (hU' : U ∈ p.basisSets) :\n    ∃ V ∈ p.basisSets, V ⊆ (fun x : E => -x) ⁻¹' U := by\n  rcases p.basisSets_iff.mp hU' with ⟨s, r, _, hU⟩\n  rw [hU, neg_preimage, neg_ball (s.sup p), neg_zero]\n  exact ⟨U, hU', Eq.subset hU⟩\n\n"}
{"name":"SeminormFamily.basisSets_smul_right","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝² : NormedField 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\np : SeminormFamily 𝕜 E ι\nv : E\nU : Set E\nhU : Membership.mem p.basisSets U\n⊢ Filter.Eventually (fun x => Membership.mem U (HSMul.hSMul x v)) (nhds 0)","decl":"theorem basisSets_smul_right (v : E) (U : Set E) (hU : U ∈ p.basisSets) :\n    ∀ᶠ x : 𝕜 in 𝓝 0, x • v ∈ U := by\n  rcases p.basisSets_iff.mp hU with ⟨s, r, hr, hU⟩\n  rw [hU, Filter.eventually_iff]\n  simp_rw [(s.sup p).mem_ball_zero, map_smul_eq_mul]\n  by_cases h : 0 < (s.sup p) v\n  · simp_rw [(lt_div_iff₀ h).symm]\n    rw [← _root_.ball_zero_eq]\n    exact Metric.ball_mem_nhds 0 (div_pos hr h)\n  simp_rw [le_antisymm (not_lt.mp h) (apply_nonneg _ v), mul_zero, hr]\n  exact IsOpen.mem_nhds isOpen_univ (mem_univ 0)\n\n"}
{"name":"SeminormFamily.basisSets_smul","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝³ : NormedField 𝕜\ninst✝² : AddCommGroup E\ninst✝¹ : Module 𝕜 E\np : SeminormFamily 𝕜 E ι\ninst✝ : Nonempty ι\nU : Set E\nhU : Membership.mem p.basisSets U\n⊢ Exists fun V => And (Membership.mem (nhds 0) V) (Exists fun W => And (Membership.mem AddGroupFilterBasis.toFilterBasis.sets W) (HasSubset.Subset (HSMul.hSMul V W) U))","decl":"theorem basisSets_smul (U) (hU : U ∈ p.basisSets) :\n    ∃ V ∈ 𝓝 (0 : 𝕜), ∃ W ∈ p.addGroupFilterBasis.sets, V • W ⊆ U := by\n  rcases p.basisSets_iff.mp hU with ⟨s, r, hr, hU⟩\n  refine ⟨Metric.ball 0 √r, Metric.ball_mem_nhds 0 (Real.sqrt_pos.mpr hr), ?_⟩\n  refine ⟨(s.sup p).ball 0 √r, p.basisSets_mem s (Real.sqrt_pos.mpr hr), ?_⟩\n  refine Set.Subset.trans (ball_smul_ball (s.sup p) √r √r) ?_\n  rw [hU, Real.mul_self_sqrt (le_of_lt hr)]\n\n"}
{"name":"SeminormFamily.basisSets_smul_left","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝³ : NormedField 𝕜\ninst✝² : AddCommGroup E\ninst✝¹ : Module 𝕜 E\np : SeminormFamily 𝕜 E ι\ninst✝ : Nonempty ι\nx : 𝕜\nU : Set E\nhU : Membership.mem p.basisSets U\n⊢ Exists fun V => And (Membership.mem AddGroupFilterBasis.toFilterBasis.sets V) (HasSubset.Subset V (Set.preimage (fun y => HSMul.hSMul x y) U))","decl":"theorem basisSets_smul_left (x : 𝕜) (U : Set E) (hU : U ∈ p.basisSets) :\n    ∃ V ∈ p.addGroupFilterBasis.sets, V ⊆ (fun y : E => x • y) ⁻¹' U := by\n  rcases p.basisSets_iff.mp hU with ⟨s, r, hr, hU⟩\n  rw [hU]\n  by_cases h : x ≠ 0\n  · rw [(s.sup p).smul_ball_preimage 0 r x h, smul_zero]\n    use (s.sup p).ball 0 (r / ‖x‖)\n    exact ⟨p.basisSets_mem s (div_pos hr (norm_pos_iff.mpr h)), Subset.rfl⟩\n  refine ⟨(s.sup p).ball 0 r, p.basisSets_mem s hr, ?_⟩\n  simp only [not_ne_iff.mp h, Set.subset_def, mem_ball_zero, hr, mem_univ, map_zero, imp_true_iff,\n    preimage_const_of_mem, zero_smul]\n\n"}
{"name":"SeminormFamily.filter_eq_iInf","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝³ : NormedField 𝕜\ninst✝² : AddCommGroup E\ninst✝¹ : Module 𝕜 E\ninst✝ : Nonempty ι\np : SeminormFamily 𝕜 E ι\n⊢ Eq AddGroupFilterBasis.toFilterBasis.filter (iInf fun i => Filter.comap (⇑(p i)) (nhds 0))","decl":"theorem filter_eq_iInf (p : SeminormFamily 𝕜 E ι) :\n    p.moduleFilterBasis.toFilterBasis.filter = ⨅ i, (𝓝 0).comap (p i) := by\n  refine le_antisymm (le_iInf fun i => ?_) ?_\n  · rw [p.moduleFilterBasis.toFilterBasis.hasBasis.le_basis_iff\n        (Metric.nhds_basis_ball.comap _)]\n    intro ε hε\n    refine ⟨(p i).ball 0 ε, ?_, ?_⟩\n    · rw [← (Finset.sup_singleton : _ = p i)]\n      exact p.basisSets_mem {i} hε\n    · rw [id, (p i).ball_zero_eq_preimage_ball]\n  · rw [p.moduleFilterBasis.toFilterBasis.hasBasis.ge_iff]\n    rintro U (hU : U ∈ p.basisSets)\n    rcases p.basisSets_iff.mp hU with ⟨s, r, hr, rfl⟩\n    rw [id, Seminorm.ball_finset_sup_eq_iInter _ _ _ hr, s.iInter_mem_sets]\n    exact fun i _ =>\n      Filter.mem_iInf_of_mem i\n        ⟨Metric.ball 0 r, Metric.ball_mem_nhds 0 hr,\n          Eq.subset (p i).ball_zero_eq_preimage_ball.symm⟩\n\n"}
{"name":"SeminormFamily.basisSets_mem_nhds","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_10\nE : Type u_11\nι : Type u_12\ninst✝³ : NormedField 𝕜\ninst✝² : AddCommGroup E\ninst✝¹ : Module 𝕜 E\ninst✝ : TopologicalSpace E\np : SeminormFamily 𝕜 E ι\nhp : ∀ (i : ι), Continuous ⇑(p i)\nU : Set E\nhU : Membership.mem p.basisSets U\n⊢ Membership.mem (nhds 0) U","decl":"/-- If a family of seminorms is continuous, then their basis sets are neighborhoods of zero. -/\nlemma basisSets_mem_nhds {𝕜 E ι : Type*} [NormedField 𝕜]\n    [AddCommGroup E] [Module 𝕜 E] [TopologicalSpace E] (p : SeminormFamily 𝕜 E ι)\n    (hp : ∀ i, Continuous (p i)) (U : Set E) (hU : U ∈ p.basisSets) : U ∈ 𝓝 (0 : E) := by\n  obtain ⟨s, r, hr, rfl⟩ := p.basisSets_iff.mp hU\n  clear hU\n  refine Seminorm.ball_mem_nhds ?_ hr\n  classical\n  induction s using Finset.induction_on\n  case empty => simpa using continuous_zero\n  case insert a s _ hs =>\n    simp only [Finset.sup_insert, coe_sup]\n    exact Continuous.max (hp a) hs\n\n"}
{"name":"Seminorm.isBounded_const","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\n𝕜₂ : Type u_2\nE : Type u_5\nF : Type u_6\nι : Type u_8\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : NormedField 𝕜₂\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\nσ₁₂ : RingHom 𝕜 𝕜₂\ninst✝¹ : RingHomIsometric σ₁₂\nι' : Type u_10\ninst✝ : Nonempty ι'\np : ι → Seminorm 𝕜 E\nq : Seminorm 𝕜₂ F\nf : LinearMap σ₁₂ E F\n⊢ Iff (Seminorm.IsBounded p (fun x => q) f) (Exists fun s => Exists fun C => LE.le (q.comp f) (HSMul.hSMul C (s.sup p)))","decl":"theorem isBounded_const (ι' : Type*) [Nonempty ι'] {p : ι → Seminorm 𝕜 E} {q : Seminorm 𝕜₂ F}\n    (f : E →ₛₗ[σ₁₂] F) :\n    IsBounded p (fun _ : ι' => q) f ↔ ∃ (s : Finset ι) (C : ℝ≥0), q.comp f ≤ C • s.sup p := by\n  simp only [IsBounded, forall_const]\n\n"}
{"name":"Seminorm.const_isBounded","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\n𝕜₂ : Type u_2\nE : Type u_5\nF : Type u_6\nι' : Type u_9\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : NormedField 𝕜₂\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\nσ₁₂ : RingHom 𝕜 𝕜₂\ninst✝¹ : RingHomIsometric σ₁₂\nι : Type u_10\ninst✝ : Nonempty ι\np : Seminorm 𝕜 E\nq : ι' → Seminorm 𝕜₂ F\nf : LinearMap σ₁₂ E F\n⊢ Iff (Seminorm.IsBounded (fun x => p) q f) (∀ (i : ι'), Exists fun C => LE.le ((q i).comp f) (HSMul.hSMul C p))","decl":"theorem const_isBounded (ι : Type*) [Nonempty ι] {p : Seminorm 𝕜 E} {q : ι' → Seminorm 𝕜₂ F}\n    (f : E →ₛₗ[σ₁₂] F) : IsBounded (fun _ : ι => p) q f ↔ ∀ i, ∃ C : ℝ≥0, (q i).comp f ≤ C • p := by\n  constructor <;> intro h i\n  · rcases h i with ⟨s, C, h⟩\n    exact ⟨C, le_trans h (smul_le_smul (Finset.sup_le fun _ _ => le_rfl) le_rfl)⟩\n  use {Classical.arbitrary ι}\n  simp only [h, Finset.sup_singleton]\n\n"}
{"name":"Seminorm.isBounded_sup","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\n𝕜₂ : Type u_2\nE : Type u_5\nF : Type u_6\nι : Type u_8\nι' : Type u_9\ninst✝⁶ : NormedField 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : Module 𝕜 E\ninst✝³ : NormedField 𝕜₂\ninst✝² : AddCommGroup F\ninst✝¹ : Module 𝕜₂ F\nσ₁₂ : RingHom 𝕜 𝕜₂\ninst✝ : RingHomIsometric σ₁₂\np : ι → Seminorm 𝕜 E\nq : ι' → Seminorm 𝕜₂ F\nf : LinearMap σ₁₂ E F\nhf : Seminorm.IsBounded p q f\ns' : Finset ι'\n⊢ Exists fun C => Exists fun s => LE.le ((s'.sup q).comp f) (HSMul.hSMul C (s.sup p))","decl":"theorem isBounded_sup {p : ι → Seminorm 𝕜 E} {q : ι' → Seminorm 𝕜₂ F} {f : E →ₛₗ[σ₁₂] F}\n    (hf : IsBounded p q f) (s' : Finset ι') :\n    ∃ (C : ℝ≥0) (s : Finset ι), (s'.sup q).comp f ≤ C • s.sup p := by\n  classical\n    obtain rfl | _ := s'.eq_empty_or_nonempty\n    · exact ⟨1, ∅, by simp [Seminorm.bot_eq_zero]⟩\n    choose fₛ fC hf using hf\n    use s'.card • s'.sup fC, Finset.biUnion s' fₛ\n    have hs : ∀ i : ι', i ∈ s' → (q i).comp f ≤ s'.sup fC • (Finset.biUnion s' fₛ).sup p := by\n      intro i hi\n      refine (hf i).trans (smul_le_smul ?_ (Finset.le_sup hi))\n      exact Finset.sup_mono (Finset.subset_biUnion_of_mem fₛ hi)\n    refine (comp_mono f (finset_sup_le_sum q s')).trans ?_\n    simp_rw [← pullback_apply, map_sum, pullback_apply]\n    refine (Finset.sum_le_sum hs).trans ?_\n    rw [Finset.sum_const, smul_assoc]\n\n"}
{"name":"WithSeminorms.topology_eq_withSeminorms","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝³ : NormedField 𝕜\ninst✝² : AddCommGroup E\ninst✝¹ : Module 𝕜 E\ninst✝ : Nonempty ι\np : SeminormFamily 𝕜 E ι\ntopology : TopologicalSpace E\nself : WithSeminorms p\n⊢ Eq topology p.moduleFilterBasis.topology","decl":"/-- The proposition that the topology of `E` is induced by a family of seminorms `p`. -/\nstructure WithSeminorms (p : SeminormFamily 𝕜 E ι) [topology : TopologicalSpace E] : Prop where\n  topology_eq_withSeminorms : topology = p.moduleFilterBasis.topology\n\n"}
{"name":"WithSeminorms.withSeminorms_eq","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝³ : NormedField 𝕜\ninst✝² : AddCommGroup E\ninst✝¹ : Module 𝕜 E\ninst✝ : Nonempty ι\np : SeminormFamily 𝕜 E ι\nt : TopologicalSpace E\nhp : WithSeminorms p\n⊢ Eq t p.moduleFilterBasis.topology","decl":"theorem WithSeminorms.withSeminorms_eq {p : SeminormFamily 𝕜 E ι} [t : TopologicalSpace E]\n    (hp : WithSeminorms p) : t = p.moduleFilterBasis.topology :=\n  hp.1\n\n"}
{"name":"WithSeminorms.topologicalAddGroup","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁴ : NormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : Nonempty ι\ninst✝ : TopologicalSpace E\np : SeminormFamily 𝕜 E ι\nhp : WithSeminorms p\n⊢ TopologicalAddGroup E","decl":"theorem WithSeminorms.topologicalAddGroup (hp : WithSeminorms p) : TopologicalAddGroup E := by\n  rw [hp.withSeminorms_eq]\n  exact AddGroupFilterBasis.isTopologicalAddGroup _\n\n"}
{"name":"WithSeminorms.continuousSMul","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁴ : NormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : Nonempty ι\ninst✝ : TopologicalSpace E\np : SeminormFamily 𝕜 E ι\nhp : WithSeminorms p\n⊢ ContinuousSMul 𝕜 E","decl":"theorem WithSeminorms.continuousSMul (hp : WithSeminorms p) : ContinuousSMul 𝕜 E := by\n  rw [hp.withSeminorms_eq]\n  exact ModuleFilterBasis.continuousSMul _\n\n"}
{"name":"WithSeminorms.hasBasis","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁴ : NormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : Nonempty ι\ninst✝ : TopologicalSpace E\np : SeminormFamily 𝕜 E ι\nhp : WithSeminorms p\n⊢ (nhds 0).HasBasis (fun s => Membership.mem p.basisSets s) id","decl":"theorem WithSeminorms.hasBasis (hp : WithSeminorms p) :\n    (𝓝 (0 : E)).HasBasis (fun s : Set E => s ∈ p.basisSets) id := by\n  rw [congr_fun (congr_arg (@nhds E) hp.1) 0]\n  exact AddGroupFilterBasis.nhds_zero_hasBasis _\n\n"}
{"name":"WithSeminorms.hasBasis_zero_ball","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁴ : NormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : Nonempty ι\ninst✝ : TopologicalSpace E\np : SeminormFamily 𝕜 E ι\nhp : WithSeminorms p\n⊢ (nhds 0).HasBasis (fun sr => LT.lt 0 sr.2) fun sr => (sr.1.sup p).ball 0 sr.2","decl":"theorem WithSeminorms.hasBasis_zero_ball (hp : WithSeminorms p) :\n    (𝓝 (0 : E)).HasBasis\n    (fun sr : Finset ι × ℝ => 0 < sr.2) fun sr => (sr.1.sup p).ball 0 sr.2 := by\n  refine ⟨fun V => ?_⟩\n  simp only [hp.hasBasis.mem_iff, SeminormFamily.basisSets_iff, Prod.exists]\n  constructor\n  · rintro ⟨-, ⟨s, r, hr, rfl⟩, hV⟩\n    exact ⟨s, r, hr, hV⟩\n  · rintro ⟨s, r, hr, hV⟩\n    exact ⟨_, ⟨s, r, hr, rfl⟩, hV⟩\n\n"}
{"name":"WithSeminorms.hasBasis_ball","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁴ : NormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : Nonempty ι\ninst✝ : TopologicalSpace E\np : SeminormFamily 𝕜 E ι\nhp : WithSeminorms p\nx : E\n⊢ (nhds x).HasBasis (fun sr => LT.lt 0 sr.2) fun sr => (sr.1.sup p).ball x sr.2","decl":"theorem WithSeminorms.hasBasis_ball (hp : WithSeminorms p) {x : E} :\n    (𝓝 (x : E)).HasBasis\n    (fun sr : Finset ι × ℝ => 0 < sr.2) fun sr => (sr.1.sup p).ball x sr.2 := by\n  have : TopologicalAddGroup E := hp.topologicalAddGroup\n  rw [← map_add_left_nhds_zero]\n  convert hp.hasBasis_zero_ball.map (x + ·) using 1\n  ext sr : 1\n  -- Porting note: extra type ascriptions needed on `0`\n  have : (sr.fst.sup p).ball (x +ᵥ (0 : E)) sr.snd = x +ᵥ (sr.fst.sup p).ball 0 sr.snd :=\n    Eq.symm (Seminorm.vadd_ball (sr.fst.sup p))\n  rwa [vadd_eq_add, add_zero] at this\n\n"}
{"name":"WithSeminorms.mem_nhds_iff","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁴ : NormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : Nonempty ι\ninst✝ : TopologicalSpace E\np : SeminormFamily 𝕜 E ι\nhp : WithSeminorms p\nx : E\nU : Set E\n⊢ Iff (Membership.mem (nhds x) U) (Exists fun s => Exists fun r => And (GT.gt r 0) (HasSubset.Subset ((s.sup p).ball x r) U))","decl":"/-- The `x`-neighbourhoods of a space whose topology is induced by a family of seminorms\nare exactly the sets which contain seminorm balls around `x`. -/\ntheorem WithSeminorms.mem_nhds_iff (hp : WithSeminorms p) (x : E) (U : Set E) :\n    U ∈ 𝓝 x ↔ ∃ s : Finset ι, ∃ r > 0, (s.sup p).ball x r ⊆ U := by\n  rw [hp.hasBasis_ball.mem_iff, Prod.exists]\n\n"}
{"name":"WithSeminorms.isOpen_iff_mem_balls","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁴ : NormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : Nonempty ι\ninst✝ : TopologicalSpace E\np : SeminormFamily 𝕜 E ι\nhp : WithSeminorms p\nU : Set E\n⊢ Iff (IsOpen U) (∀ (x : E), Membership.mem U x → Exists fun s => Exists fun r => And (GT.gt r 0) (HasSubset.Subset ((s.sup p).ball x r) U))","decl":"/-- The open sets of a space whose topology is induced by a family of seminorms\nare exactly the sets which contain seminorm balls around all of their points. -/\ntheorem WithSeminorms.isOpen_iff_mem_balls (hp : WithSeminorms p) (U : Set E) :\n    IsOpen U ↔ ∀ x ∈ U, ∃ s : Finset ι, ∃ r > 0, (s.sup p).ball x r ⊆ U := by\n  simp_rw [← WithSeminorms.mem_nhds_iff hp _ U, isOpen_iff_mem_nhds]\n\n/- Note that through the following lemmas, one also immediately has that separating families\nof seminorms induce T₂ and T₃ topologies by `TopologicalAddGroup.t2Space`\nand `TopologicalAddGroup.t3Space` -/\n"}
{"name":"WithSeminorms.T1_of_separating","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁴ : NormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : Nonempty ι\ninst✝ : TopologicalSpace E\np : SeminormFamily 𝕜 E ι\nhp : WithSeminorms p\nh : ∀ (x : E), Ne x 0 → Exists fun i => Ne ((p i) x) 0\n⊢ T1Space E","decl":"/-- A separating family of seminorms induces a T₁ topology. -/\ntheorem WithSeminorms.T1_of_separating (hp : WithSeminorms p)\n    (h : ∀ x, x ≠ 0 → ∃ i, p i x ≠ 0) : T1Space E := by\n  have := hp.topologicalAddGroup\n  refine TopologicalAddGroup.t1Space _ ?_\n  rw [← isOpen_compl_iff, hp.isOpen_iff_mem_balls]\n  rintro x (hx : x ≠ 0)\n  cases' h x hx with i pi_nonzero\n  refine ⟨{i}, p i x, by positivity, subset_compl_singleton_iff.mpr ?_⟩\n  rw [Finset.sup_singleton, mem_ball, zero_sub, map_neg_eq_map, not_lt]\n\n"}
{"name":"WithSeminorms.separating_of_T1","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁵ : NormedField 𝕜\ninst✝⁴ : AddCommGroup E\ninst✝³ : Module 𝕜 E\ninst✝² : Nonempty ι\ninst✝¹ : TopologicalSpace E\np : SeminormFamily 𝕜 E ι\ninst✝ : T1Space E\nhp : WithSeminorms p\nx : E\nhx : Ne x 0\n⊢ Exists fun i => Ne ((p i) x) 0","decl":"/-- A family of seminorms inducing a T₁ topology is separating. -/\ntheorem WithSeminorms.separating_of_T1 [T1Space E] (hp : WithSeminorms p) (x : E) (hx : x ≠ 0) :\n    ∃ i, p i x ≠ 0 := by\n  have := ((t1Space_TFAE E).out 0 9).mp (inferInstanceAs <| T1Space E)\n  by_contra! h\n  refine hx (this ?_)\n  rw [hp.hasBasis_zero_ball.specializes_iff]\n  rintro ⟨s, r⟩ (hr : 0 < r)\n  simp only [ball_finset_sup_eq_iInter _ _ _ hr, mem_iInter₂, mem_ball_zero, h, hr, forall_true_iff]\n\n"}
{"name":"WithSeminorms.separating_iff_T1","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁴ : NormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : Nonempty ι\ninst✝ : TopologicalSpace E\np : SeminormFamily 𝕜 E ι\nhp : WithSeminorms p\n⊢ Iff (∀ (x : E), Ne x 0 → Exists fun i => Ne ((p i) x) 0) (T1Space E)","decl":"/-- A family of seminorms is separating iff it induces a T₁ topology. -/\ntheorem WithSeminorms.separating_iff_T1 (hp : WithSeminorms p) :\n    (∀ x, x ≠ 0 → ∃ i, p i x ≠ 0) ↔ T1Space E := by\n  refine ⟨WithSeminorms.T1_of_separating hp, ?_⟩\n  intro\n  exact WithSeminorms.separating_of_T1 hp\n\n"}
{"name":"WithSeminorms.tendsto_nhds'","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nF : Type u_6\nι : Type u_8\ninst✝⁴ : NormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : Nonempty ι\ninst✝ : TopologicalSpace E\np : SeminormFamily 𝕜 E ι\nhp : WithSeminorms p\nu : F → E\nf : Filter F\ny₀ : E\n⊢ Iff (Filter.Tendsto u f (nhds y₀)) (∀ (s : Finset ι) (ε : Real), LT.lt 0 ε → Filter.Eventually (fun x => LT.lt ((s.sup p) (HSub.hSub (u x) y₀)) ε) f)","decl":"/-- Convergence along filters for `WithSeminorms`.\n\nVariant with `Finset.sup`. -/\ntheorem WithSeminorms.tendsto_nhds' (hp : WithSeminorms p) (u : F → E) {f : Filter F} (y₀ : E) :\n    Filter.Tendsto u f (𝓝 y₀) ↔\n    ∀ (s : Finset ι) (ε), 0 < ε → ∀ᶠ x in f, s.sup p (u x - y₀) < ε := by\n  simp [hp.hasBasis_ball.tendsto_right_iff]\n\n"}
{"name":"WithSeminorms.tendsto_nhds","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nF : Type u_6\nι : Type u_8\ninst✝⁴ : NormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : Nonempty ι\ninst✝ : TopologicalSpace E\np : SeminormFamily 𝕜 E ι\nhp : WithSeminorms p\nu : F → E\nf : Filter F\ny₀ : E\n⊢ Iff (Filter.Tendsto u f (nhds y₀)) (∀ (i : ι) (ε : Real), LT.lt 0 ε → Filter.Eventually (fun x => LT.lt ((p i) (HSub.hSub (u x) y₀)) ε) f)","decl":"/-- Convergence along filters for `WithSeminorms`. -/\ntheorem WithSeminorms.tendsto_nhds (hp : WithSeminorms p) (u : F → E) {f : Filter F} (y₀ : E) :\n    Filter.Tendsto u f (𝓝 y₀) ↔ ∀ i ε, 0 < ε → ∀ᶠ x in f, p i (u x - y₀) < ε := by\n  rw [hp.tendsto_nhds' u y₀]\n  exact\n    ⟨fun h i => by simpa only [Finset.sup_singleton] using h {i}, fun h s ε hε =>\n      (s.eventually_all.2 fun i _ => h i ε hε).mono fun _ => finset_sup_apply_lt hε⟩\n\n"}
{"name":"WithSeminorms.tendsto_nhds_atTop","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nF : Type u_6\nι : Type u_8\ninst✝⁶ : NormedField 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : Module 𝕜 E\ninst✝³ : Nonempty ι\ninst✝² : TopologicalSpace E\np : SeminormFamily 𝕜 E ι\ninst✝¹ : SemilatticeSup F\ninst✝ : Nonempty F\nhp : WithSeminorms p\nu : F → E\ny₀ : E\n⊢ Iff (Filter.Tendsto u Filter.atTop (nhds y₀)) (∀ (i : ι) (ε : Real), LT.lt 0 ε → Exists fun x₀ => ∀ (x : F), LE.le x₀ x → LT.lt ((p i) (HSub.hSub (u x) y₀)) ε)","decl":"/-- Limit `→ ∞` for `WithSeminorms`. -/\ntheorem WithSeminorms.tendsto_nhds_atTop (hp : WithSeminorms p) (u : F → E) (y₀ : E) :\n    Filter.Tendsto u Filter.atTop (𝓝 y₀) ↔\n    ∀ i ε, 0 < ε → ∃ x₀, ∀ x, x₀ ≤ x → p i (u x - y₀) < ε := by\n  rw [hp.tendsto_nhds u y₀]\n  exact forall₃_congr fun _ _ _ => Filter.eventually_atTop\n\n"}
{"name":"SeminormFamily.withSeminorms_of_nhds","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁴ : NormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : Nonempty ι\nt : TopologicalSpace E\ninst✝ : TopologicalAddGroup E\np : SeminormFamily 𝕜 E ι\nh : Eq (nhds 0) AddGroupFilterBasis.toFilterBasis.filter\n⊢ WithSeminorms p","decl":"theorem SeminormFamily.withSeminorms_of_nhds [TopologicalAddGroup E] (p : SeminormFamily 𝕜 E ι)\n    (h : 𝓝 (0 : E) = p.moduleFilterBasis.toFilterBasis.filter) : WithSeminorms p := by\n  refine\n    ⟨TopologicalAddGroup.ext inferInstance p.addGroupFilterBasis.isTopologicalAddGroup ?_⟩\n  rw [AddGroupFilterBasis.nhds_zero_eq]\n  exact h\n\n"}
{"name":"SeminormFamily.withSeminorms_of_hasBasis","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁴ : NormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : Nonempty ι\nt : TopologicalSpace E\ninst✝ : TopologicalAddGroup E\np : SeminormFamily 𝕜 E ι\nh : (nhds 0).HasBasis (fun s => Membership.mem p.basisSets s) id\n⊢ WithSeminorms p","decl":"theorem SeminormFamily.withSeminorms_of_hasBasis [TopologicalAddGroup E] (p : SeminormFamily 𝕜 E ι)\n    (h : (𝓝 (0 : E)).HasBasis (fun s : Set E => s ∈ p.basisSets) id) : WithSeminorms p :=\n  p.withSeminorms_of_nhds <|\n    Filter.HasBasis.eq_of_same_basis h p.addGroupFilterBasis.toFilterBasis.hasBasis\n\n"}
{"name":"SeminormFamily.withSeminorms_iff_nhds_eq_iInf","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁴ : NormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : Nonempty ι\nt : TopologicalSpace E\ninst✝ : TopologicalAddGroup E\np : SeminormFamily 𝕜 E ι\n⊢ Iff (WithSeminorms p) (Eq (nhds 0) (iInf fun i => Filter.comap (⇑(p i)) (nhds 0)))","decl":"theorem SeminormFamily.withSeminorms_iff_nhds_eq_iInf [TopologicalAddGroup E]\n    (p : SeminormFamily 𝕜 E ι) : WithSeminorms p ↔ (𝓝 (0 : E)) = ⨅ i, (𝓝 0).comap (p i) := by\n  rw [← p.filter_eq_iInf]\n  refine ⟨fun h => ?_, p.withSeminorms_of_nhds⟩\n  rw [h.topology_eq_withSeminorms]\n  exact AddGroupFilterBasis.nhds_zero_eq _\n\n"}
{"name":"SeminormFamily.withSeminorms_iff_topologicalSpace_eq_iInf","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁴ : NormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : Nonempty ι\nt : TopologicalSpace E\ninst✝ : TopologicalAddGroup E\np : SeminormFamily 𝕜 E ι\n⊢ Iff (WithSeminorms p) (Eq t (iInf fun i => UniformSpace.toTopologicalSpace))","decl":"/-- The topology induced by a family of seminorms is exactly the infimum of the ones induced by\neach seminorm individually. We express this as a characterization of `WithSeminorms p`. -/\ntheorem SeminormFamily.withSeminorms_iff_topologicalSpace_eq_iInf [TopologicalAddGroup E]\n    (p : SeminormFamily 𝕜 E ι) :\n    WithSeminorms p ↔\n      t = ⨅ i, (p i).toSeminormedAddCommGroup.toUniformSpace.toTopologicalSpace := by\n  rw [p.withSeminorms_iff_nhds_eq_iInf,\n    TopologicalAddGroup.ext_iff inferInstance (topologicalAddGroup_iInf fun i => inferInstance),\n    nhds_iInf]\n  congrm _ = ⨅ i, ?_\n  exact @comap_norm_nhds_zero _ (p i).toSeminormedAddGroup\n\n"}
{"name":"WithSeminorms.continuous_seminorm","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝³ : NormedField 𝕜\ninst✝² : AddCommGroup E\ninst✝¹ : Module 𝕜 E\ninst✝ : Nonempty ι\nt : TopologicalSpace E\np : SeminormFamily 𝕜 E ι\nhp : WithSeminorms p\ni : ι\n⊢ Continuous ⇑(p i)","decl":"theorem WithSeminorms.continuous_seminorm {p : SeminormFamily 𝕜 E ι} (hp : WithSeminorms p)\n    (i : ι) : Continuous (p i) := by\n  have := hp.topologicalAddGroup\n  rw [p.withSeminorms_iff_topologicalSpace_eq_iInf.mp hp]\n  exact continuous_iInf_dom (@continuous_norm _ (p i).toSeminormedAddGroup)\n\n"}
{"name":"SeminormFamily.withSeminorms_iff_uniformSpace_eq_iInf","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁴ : NormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : Nonempty ι\nu : UniformSpace E\ninst✝ : UniformAddGroup E\np : SeminormFamily 𝕜 E ι\n⊢ Iff (WithSeminorms p) (Eq u (iInf fun i => PseudoMetricSpace.toUniformSpace))","decl":"/-- The uniform structure induced by a family of seminorms is exactly the infimum of the ones\ninduced by each seminorm individually. We express this as a characterization of\n`WithSeminorms p`. -/\ntheorem SeminormFamily.withSeminorms_iff_uniformSpace_eq_iInf [u : UniformSpace E]\n    [UniformAddGroup E] (p : SeminormFamily 𝕜 E ι) :\n    WithSeminorms p ↔ u = ⨅ i, (p i).toSeminormedAddCommGroup.toUniformSpace := by\n  rw [p.withSeminorms_iff_nhds_eq_iInf,\n    UniformAddGroup.ext_iff inferInstance (uniformAddGroup_iInf fun i => inferInstance),\n    UniformSpace.toTopologicalSpace_iInf, nhds_iInf]\n  congrm _ = ⨅ i, ?_\n  exact @comap_norm_nhds_zero _ (p i).toAddGroupSeminorm.toSeminormedAddGroup\n\n"}
{"name":"norm_withSeminorms","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_10\nE : Type u_11\ninst✝² : NormedField 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\n⊢ WithSeminorms fun x => normSeminorm 𝕜 E","decl":"/-- The topology of a `NormedSpace 𝕜 E` is induced by the seminorm `normSeminorm 𝕜 E`. -/\ntheorem norm_withSeminorms (𝕜 E) [NormedField 𝕜] [SeminormedAddCommGroup E] [NormedSpace 𝕜 E] :\n    WithSeminorms fun _ : Fin 1 => normSeminorm 𝕜 E := by\n  let p : SeminormFamily 𝕜 E (Fin 1) := fun _ => normSeminorm 𝕜 E\n  refine\n    ⟨SeminormedAddCommGroup.toTopologicalAddGroup.ext\n        p.addGroupFilterBasis.isTopologicalAddGroup ?_⟩\n  refine Filter.HasBasis.eq_of_same_basis Metric.nhds_basis_ball ?_\n  rw [← ball_normSeminorm 𝕜 E]\n  refine\n    Filter.HasBasis.to_hasBasis p.addGroupFilterBasis.nhds_zero_hasBasis ?_ fun r hr =>\n      ⟨(normSeminorm 𝕜 E).ball 0 r, p.basisSets_singleton_mem 0 hr, rfl.subset⟩\n  rintro U (hU : U ∈ p.basisSets)\n  rcases p.basisSets_iff.mp hU with ⟨s, r, hr, hU⟩\n  use r, hr\n  rw [hU, id]\n  by_cases h : s.Nonempty\n  · rw [Finset.sup_const h]\n  rw [Finset.not_nonempty_iff_eq_empty.mp h, Finset.sup_empty, ball_bot _ hr]\n  exact Set.subset_univ _\n\n"}
{"name":"WithSeminorms.isVonNBounded_iff_finset_seminorm_bounded","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : Nonempty ι\np : SeminormFamily 𝕜 E ι\ninst✝ : TopologicalSpace E\ns : Set E\nhp : WithSeminorms p\n⊢ Iff (Bornology.IsVonNBounded 𝕜 s) (∀ (I : Finset ι), Exists fun r => And (GT.gt r 0) (∀ (x : E), Membership.mem s x → LT.lt ((I.sup p) x) r))","decl":"theorem WithSeminorms.isVonNBounded_iff_finset_seminorm_bounded {s : Set E} (hp : WithSeminorms p) :\n    Bornology.IsVonNBounded 𝕜 s ↔ ∀ I : Finset ι, ∃ r > 0, ∀ x ∈ s, I.sup p x < r := by\n  rw [hp.hasBasis.isVonNBounded_iff]\n  constructor\n  · intro h I\n    simp only [id] at h\n    specialize h ((I.sup p).ball 0 1) (p.basisSets_mem I zero_lt_one)\n    rcases h.exists_pos with ⟨r, hr, h⟩\n    cases' NormedField.exists_lt_norm 𝕜 r with a ha\n    specialize h a (le_of_lt ha)\n    rw [Seminorm.smul_ball_zero (norm_pos_iff.1 <| hr.trans ha), mul_one] at h\n    refine ⟨‖a‖, lt_trans hr ha, ?_⟩\n    intro x hx\n    specialize h hx\n    exact (Finset.sup I p).mem_ball_zero.mp h\n  intro h s' hs'\n  rcases p.basisSets_iff.mp hs' with ⟨I, r, hr, hs'⟩\n  rw [id, hs']\n  rcases h I with ⟨r', _, h'⟩\n  simp_rw [← (I.sup p).mem_ball_zero] at h'\n  refine Absorbs.mono_right ?_ h'\n  exact (Finset.sup I p).ball_zero_absorbs_ball_zero hr\n\n"}
{"name":"WithSeminorms.image_isVonNBounded_iff_finset_seminorm_bounded","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nG : Type u_7\nι : Type u_8\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : Nonempty ι\np : SeminormFamily 𝕜 E ι\ninst✝ : TopologicalSpace E\nf : G → E\ns : Set G\nhp : WithSeminorms p\n⊢ Iff (Bornology.IsVonNBounded 𝕜 (Set.image f s)) (∀ (I : Finset ι), Exists fun r => And (GT.gt r 0) (∀ (x : G), Membership.mem s x → LT.lt ((I.sup p) (f x)) r))","decl":"theorem WithSeminorms.image_isVonNBounded_iff_finset_seminorm_bounded (f : G → E) {s : Set G}\n    (hp : WithSeminorms p) :\n    Bornology.IsVonNBounded 𝕜 (f '' s) ↔\n      ∀ I : Finset ι, ∃ r > 0, ∀ x ∈ s, I.sup p (f x) < r := by\n  simp_rw [hp.isVonNBounded_iff_finset_seminorm_bounded, Set.forall_mem_image]\n\n"}
{"name":"WithSeminorms.isVonNBounded_iff_seminorm_bounded","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : Nonempty ι\np : SeminormFamily 𝕜 E ι\ninst✝ : TopologicalSpace E\ns : Set E\nhp : WithSeminorms p\n⊢ Iff (Bornology.IsVonNBounded 𝕜 s) (∀ (i : ι), Exists fun r => And (GT.gt r 0) (∀ (x : E), Membership.mem s x → LT.lt ((p i) x) r))","decl":"theorem WithSeminorms.isVonNBounded_iff_seminorm_bounded {s : Set E} (hp : WithSeminorms p) :\n    Bornology.IsVonNBounded 𝕜 s ↔ ∀ i : ι, ∃ r > 0, ∀ x ∈ s, p i x < r := by\n  rw [hp.isVonNBounded_iff_finset_seminorm_bounded]\n  constructor\n  · intro hI i\n    convert hI {i}\n    rw [Finset.sup_singleton]\n  intro hi I\n  by_cases hI : I.Nonempty\n  · choose r hr h using hi\n    have h' : 0 < I.sup' hI r := by\n      rcases hI with ⟨i, hi⟩\n      exact lt_of_lt_of_le (hr i) (Finset.le_sup' r hi)\n    refine ⟨I.sup' hI r, h', fun x hx => finset_sup_apply_lt h' fun i hi => ?_⟩\n    refine lt_of_lt_of_le (h i x hx) ?_\n    simp only [Finset.le_sup'_iff, exists_prop]\n    exact ⟨i, hi, (Eq.refl _).le⟩\n  simp only [Finset.not_nonempty_iff_eq_empty.mp hI, Finset.sup_empty, coe_bot, Pi.zero_apply,\n    exists_prop]\n  exact ⟨1, zero_lt_one, fun _ _ => zero_lt_one⟩\n\n"}
{"name":"WithSeminorms.image_isVonNBounded_iff_seminorm_bounded","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nG : Type u_7\nι : Type u_8\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : Nonempty ι\np : SeminormFamily 𝕜 E ι\ninst✝ : TopologicalSpace E\nf : G → E\ns : Set G\nhp : WithSeminorms p\n⊢ Iff (Bornology.IsVonNBounded 𝕜 (Set.image f s)) (∀ (i : ι), Exists fun r => And (GT.gt r 0) (∀ (x : G), Membership.mem s x → LT.lt ((p i) (f x)) r))","decl":"theorem WithSeminorms.image_isVonNBounded_iff_seminorm_bounded (f : G → E) {s : Set G}\n    (hp : WithSeminorms p) :\n    Bornology.IsVonNBounded 𝕜 (f '' s) ↔ ∀ i : ι, ∃ r > 0, ∀ x ∈ s, p i (f x) < r := by\n  simp_rw [hp.isVonNBounded_iff_seminorm_bounded, Set.forall_mem_image]\n\n"}
{"name":"Seminorm.continuous_of_continuous_comp","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕝 : Type u_3\n𝕝₂ : Type u_4\nE : Type u_5\nF : Type u_6\nι' : Type u_9\ninst✝¹⁰ : AddCommGroup E\ninst✝⁹ : NormedField 𝕝\ninst✝⁸ : Module 𝕝 E\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : NormedField 𝕝₂\ninst✝⁵ : Module 𝕝₂ F\nτ₁₂ : RingHom 𝕝 𝕝₂\ninst✝⁴ : RingHomIsometric τ₁₂\ninst✝³ : Nonempty ι'\nq : SeminormFamily 𝕝₂ F ι'\ninst✝² : TopologicalSpace E\ninst✝¹ : TopologicalAddGroup E\ninst✝ : TopologicalSpace F\nhq : WithSeminorms q\nf : LinearMap τ₁₂ E F\nhf : ∀ (i : ι'), Continuous ⇑((q i).comp f)\n⊢ Continuous ⇑f","decl":"theorem continuous_of_continuous_comp {q : SeminormFamily 𝕝₂ F ι'} [TopologicalSpace E]\n    [TopologicalAddGroup E] [TopologicalSpace F] (hq : WithSeminorms q)\n    (f : E →ₛₗ[τ₁₂] F) (hf : ∀ i, Continuous ((q i).comp f)) : Continuous f := by\n  have : TopologicalAddGroup F := hq.topologicalAddGroup\n  refine continuous_of_continuousAt_zero f ?_\n  simp_rw [ContinuousAt, f.map_zero, q.withSeminorms_iff_nhds_eq_iInf.mp hq, Filter.tendsto_iInf,\n    Filter.tendsto_comap_iff]\n  intro i\n  convert (hf i).continuousAt.tendsto\n  exact (map_zero _).symm\n\n"}
{"name":"Seminorm.continuous_iff_continuous_comp","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\n𝕜₂ : Type u_2\nE : Type u_5\nF : Type u_6\nι' : Type u_9\ninst✝¹⁰ : NontriviallyNormedField 𝕜\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : NontriviallyNormedField 𝕜₂\ninst✝⁶ : AddCommGroup F\ninst✝⁵ : Module 𝕜₂ F\nσ₁₂ : RingHom 𝕜 𝕜₂\ninst✝⁴ : RingHomIsometric σ₁₂\ninst✝³ : Nonempty ι'\nq : SeminormFamily 𝕜₂ F ι'\ninst✝² : TopologicalSpace E\ninst✝¹ : TopologicalAddGroup E\ninst✝ : TopologicalSpace F\nhq : WithSeminorms q\nf : LinearMap σ₁₂ E F\n⊢ Iff (Continuous ⇑f) (∀ (i : ι'), Continuous ⇑((q i).comp f))","decl":"theorem continuous_iff_continuous_comp {q : SeminormFamily 𝕜₂ F ι'} [TopologicalSpace E]\n    [TopologicalAddGroup E] [TopologicalSpace F] (hq : WithSeminorms q) (f : E →ₛₗ[σ₁₂] F) :\n    Continuous f ↔ ∀ i, Continuous ((q i).comp f) :=\n    -- Porting note: if we *don't* use dot notation for `Continuous.comp`, Lean tries to show\n    -- continuity of `((q i).comp f) ∘ id` because it doesn't see that `((q i).comp f)` is\n    -- actually a composition of functions.\n  ⟨fun h i => (hq.continuous_seminorm i).comp h, continuous_of_continuous_comp hq f⟩\n\n"}
{"name":"Seminorm.continuous_from_bounded","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕝 : Type u_3\n𝕝₂ : Type u_4\nE : Type u_5\nF : Type u_6\nι : Type u_8\nι' : Type u_9\ninst✝⁸ : AddCommGroup E\ninst✝⁷ : NormedField 𝕝\ninst✝⁶ : Module 𝕝 E\ninst✝⁵ : AddCommGroup F\ninst✝⁴ : NormedField 𝕝₂\ninst✝³ : Module 𝕝₂ F\nτ₁₂ : RingHom 𝕝 𝕝₂\ninst✝² : RingHomIsometric τ₁₂\ninst✝¹ : Nonempty ι\ninst✝ : Nonempty ι'\np : SeminormFamily 𝕝 E ι\nq : SeminormFamily 𝕝₂ F ι'\nx✝¹ : TopologicalSpace E\nhp : WithSeminorms p\nx✝ : TopologicalSpace F\nhq : WithSeminorms q\nf : LinearMap τ₁₂ E F\nhf : Seminorm.IsBounded p q f\n⊢ Continuous ⇑f","decl":"theorem continuous_from_bounded {p : SeminormFamily 𝕝 E ι} {q : SeminormFamily 𝕝₂ F ι'}\n    {_ : TopologicalSpace E} (hp : WithSeminorms p) {_ : TopologicalSpace F} (hq : WithSeminorms q)\n    (f : E →ₛₗ[τ₁₂] F) (hf : Seminorm.IsBounded p q f) : Continuous f := by\n  have : TopologicalAddGroup E := hp.topologicalAddGroup\n  refine continuous_of_continuous_comp hq _ fun i => ?_\n  rcases hf i with ⟨s, C, hC⟩\n  rw [← Seminorm.finset_sup_smul] at hC\n  -- Note: we deduce continuouty of `s.sup (C • p)` from that of `∑ i ∈ s, C • p i`.\n  -- The reason is that there is no `continuous_finset_sup`, and even if it were we couldn't\n  -- really use it since `ℝ` is not an `OrderBot`.\n  refine Seminorm.continuous_of_le ?_ (hC.trans <| Seminorm.finset_sup_le_sum _ _)\n  change Continuous (fun x ↦ Seminorm.coeFnAddMonoidHom _ _ (∑ i ∈ s, C • p i) x)\n  simp_rw [map_sum, Finset.sum_apply]\n  exact (continuous_finset_sum _ fun i _ ↦ (hp.continuous_seminorm i).const_smul (C : ℝ))\n\n"}
{"name":"Seminorm.cont_withSeminorms_normedSpace","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕝 : Type u_3\n𝕝₂ : Type u_4\nE : Type u_5\nι : Type u_8\ninst✝⁸ : AddCommGroup E\ninst✝⁷ : NormedField 𝕝\ninst✝⁶ : Module 𝕝 E\ninst✝⁵ : NormedField 𝕝₂\nτ₁₂ : RingHom 𝕝 𝕝₂\ninst✝⁴ : RingHomIsometric τ₁₂\ninst✝³ : Nonempty ι\nF : Type u_10\ninst✝² : SeminormedAddCommGroup F\ninst✝¹ : NormedSpace 𝕝₂ F\ninst✝ : TopologicalSpace E\np : ι → Seminorm 𝕝 E\nhp : WithSeminorms p\nf : LinearMap τ₁₂ E F\nhf : Exists fun s => Exists fun C => LE.le ((normSeminorm 𝕝₂ F).comp f) (HSMul.hSMul C (s.sup p))\n⊢ Continuous ⇑f","decl":"theorem cont_withSeminorms_normedSpace (F) [SeminormedAddCommGroup F] [NormedSpace 𝕝₂ F]\n    [TopologicalSpace E] {p : ι → Seminorm 𝕝 E} (hp : WithSeminorms p)\n    (f : E →ₛₗ[τ₁₂] F) (hf : ∃ (s : Finset ι) (C : ℝ≥0), (normSeminorm 𝕝₂ F).comp f ≤ C • s.sup p) :\n    Continuous f := by\n  rw [← Seminorm.isBounded_const (Fin 1)] at hf\n  exact continuous_from_bounded hp (norm_withSeminorms 𝕝₂ F) f hf\n\n"}
{"name":"Seminorm.cont_normedSpace_to_withSeminorms","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕝 : Type u_3\n𝕝₂ : Type u_4\nF : Type u_6\nι : Type u_8\ninst✝⁸ : NormedField 𝕝\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : NormedField 𝕝₂\ninst✝⁵ : Module 𝕝₂ F\nτ₁₂ : RingHom 𝕝 𝕝₂\ninst✝⁴ : RingHomIsometric τ₁₂\ninst✝³ : Nonempty ι\nE : Type u_10\ninst✝² : SeminormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕝 E\ninst✝ : TopologicalSpace F\nq : ι → Seminorm 𝕝₂ F\nhq : WithSeminorms q\nf : LinearMap τ₁₂ E F\nhf : ∀ (i : ι), Exists fun C => LE.le ((q i).comp f) (HSMul.hSMul C (normSeminorm 𝕝 E))\n⊢ Continuous ⇑f","decl":"theorem cont_normedSpace_to_withSeminorms (E) [SeminormedAddCommGroup E] [NormedSpace 𝕝 E]\n    [TopologicalSpace F] {q : ι → Seminorm 𝕝₂ F} (hq : WithSeminorms q)\n    (f : E →ₛₗ[τ₁₂] F) (hf : ∀ i : ι, ∃ C : ℝ≥0, (q i).comp f ≤ C • normSeminorm 𝕝 E) :\n    Continuous f := by\n  rw [← Seminorm.const_isBounded (Fin 1)] at hf\n  exact continuous_from_bounded (norm_withSeminorms 𝕝 E) hq f hf\n\n"}
{"name":"WithSeminorms.equicontinuous_TFAE","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\n𝕜₂ : Type u_2\nE : Type u_5\nF : Type u_6\nι' : Type u_9\ninst✝¹⁰ : NontriviallyNormedField 𝕜\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : NontriviallyNormedField 𝕜₂\ninst✝⁶ : AddCommGroup F\ninst✝⁵ : Module 𝕜₂ F\nσ₁₂ : RingHom 𝕜 𝕜₂\ninst✝⁴ : RingHomIsometric σ₁₂\ninst✝³ : Nonempty ι'\nκ : Type u_10\nq : SeminormFamily 𝕜₂ F ι'\ninst✝² : UniformSpace E\ninst✝¹ : UniformAddGroup E\nu : UniformSpace F\nhu : UniformAddGroup F\nhq : WithSeminorms q\ninst✝ : ContinuousSMul 𝕜 E\nf : κ → LinearMap σ₁₂ E F\n⊢ (List.cons (EquicontinuousAt (Function.comp DFunLike.coe f) 0) (List.cons (Equicontinuous (Function.comp DFunLike.coe f)) (List.cons (UniformEquicontinuous (Function.comp DFunLike.coe f)) (List.cons (∀ (i : ι'), Exists fun p => And (Continuous ⇑p) (∀ (k : κ), LE.le ((q i).comp (f k)) p)) (List.cons (∀ (i : ι'), And (BddAbove (Set.range fun k => (q i).comp (f k))) (Continuous (iSup fun k => ⇑((q i).comp (f k))))) List.nil))))).TFAE","decl":"/-- Let `E` and `F` be two topological vector spaces over a `NontriviallyNormedField`, and assume\nthat the topology of `F` is generated by some family of seminorms `q`. For a family `f` of linear\nmaps from `E` to `F`, the following are equivalent:\n* `f` is equicontinuous at `0`.\n* `f` is equicontinuous.\n* `f` is uniformly equicontinuous.\n* For each `q i`, the family of seminorms `k ↦ (q i) ∘ (f k)` is bounded by some continuous\n  seminorm `p` on `E`.\n* For each `q i`, the seminorm `⊔ k, (q i) ∘ (f k)` is well-defined and continuous.\n\nIn particular, if you can determine all continuous seminorms on `E`, that gives you a complete\ncharacterization of equicontinuity for linear maps from `E` to `F`. For example `E` and `F` are\nboth normed spaces, you get `NormedSpace.equicontinuous_TFAE`. -/\nprotected theorem _root_.WithSeminorms.equicontinuous_TFAE {κ : Type*}\n    {q : SeminormFamily 𝕜₂ F ι'} [UniformSpace E] [UniformAddGroup E] [u : UniformSpace F]\n    [hu : UniformAddGroup F] (hq : WithSeminorms q) [ContinuousSMul 𝕜 E]\n    (f : κ → E →ₛₗ[σ₁₂] F) : TFAE\n    [ EquicontinuousAt ((↑) ∘ f) 0,\n      Equicontinuous ((↑) ∘ f),\n      UniformEquicontinuous ((↑) ∘ f),\n      ∀ i, ∃ p : Seminorm 𝕜 E, Continuous p ∧ ∀ k, (q i).comp (f k) ≤ p,\n      ∀ i, BddAbove (range fun k ↦ (q i).comp (f k)) ∧ Continuous (⨆ k, (q i).comp (f k)) ] := by\n  -- We start by reducing to the case where the target is a seminormed space\n  rw [q.withSeminorms_iff_uniformSpace_eq_iInf.mp hq, uniformEquicontinuous_iInf_rng,\n      equicontinuous_iInf_rng, equicontinuousAt_iInf_rng]\n  refine forall_tfae [_, _, _, _, _] fun i ↦ ?_\n  let _ : SeminormedAddCommGroup F := (q i).toSeminormedAddCommGroup\n  clear u hu hq\n  -- Now we can prove the equivalence in this setting\n  simp only [List.map]\n  tfae_have 1 → 3 := uniformEquicontinuous_of_equicontinuousAt_zero f\n  tfae_have 3 → 2 := UniformEquicontinuous.equicontinuous\n  tfae_have 2 → 1 := fun H ↦ H 0\n  tfae_have 3 → 5\n  | H => by\n    have : ∀ᶠ x in 𝓝 0, ∀ k, q i (f k x) ≤ 1 := by\n      filter_upwards [Metric.equicontinuousAt_iff_right.mp (H.equicontinuous 0) 1 one_pos]\n        with x hx k\n      simpa using (hx k).le\n    have bdd : BddAbove (range fun k ↦ (q i).comp (f k)) :=\n      Seminorm.bddAbove_of_absorbent (absorbent_nhds_zero this)\n        (fun x hx ↦ ⟨1, forall_mem_range.mpr hx⟩)\n    rw [← Seminorm.coe_iSup_eq bdd]\n    refine ⟨bdd, Seminorm.continuous' (r := 1) ?_⟩\n    filter_upwards [this] with x hx\n    simpa only [closedBall_iSup bdd _ one_pos, mem_iInter, mem_closedBall_zero] using hx\n  tfae_have 5 → 4 := fun H ↦ ⟨⨆ k, (q i).comp (f k), Seminorm.coe_iSup_eq H.1 ▸ H.2, le_ciSup H.1⟩\n  tfae_have 4 → 1 -- This would work over any `NormedField`\n  | ⟨p, hp, hfp⟩ =>\n    Metric.equicontinuousAt_of_continuity_modulus p (map_zero p ▸ hp.tendsto 0) _ <|\n      Eventually.of_forall fun x k ↦ by simpa using hfp k x\n  tfae_finish\n\n"}
{"name":"WithSeminorms.uniformEquicontinuous_iff_exists_continuous_seminorm","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\n𝕜₂ : Type u_2\nE : Type u_5\nF : Type u_6\nι' : Type u_9\ninst✝¹¹ : NontriviallyNormedField 𝕜\ninst✝¹⁰ : AddCommGroup E\ninst✝⁹ : Module 𝕜 E\ninst✝⁸ : NontriviallyNormedField 𝕜₂\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : Module 𝕜₂ F\nσ₁₂ : RingHom 𝕜 𝕜₂\ninst✝⁵ : RingHomIsometric σ₁₂\ninst✝⁴ : Nonempty ι'\nκ : Type u_10\nq : SeminormFamily 𝕜₂ F ι'\ninst✝³ : UniformSpace E\ninst✝² : UniformAddGroup E\nu : UniformSpace F\ninst✝¹ : UniformAddGroup F\nhq : WithSeminorms q\ninst✝ : ContinuousSMul 𝕜 E\nf : κ → LinearMap σ₁₂ E F\n⊢ Iff (UniformEquicontinuous (Function.comp DFunLike.coe f)) (∀ (i : ι'), Exists fun p => And (Continuous ⇑p) (∀ (k : κ), LE.le ((q i).comp (f k)) p))","decl":"theorem _root_.WithSeminorms.uniformEquicontinuous_iff_exists_continuous_seminorm {κ : Type*}\n    {q : SeminormFamily 𝕜₂ F ι'} [UniformSpace E] [UniformAddGroup E] [u : UniformSpace F]\n    [UniformAddGroup F] (hq : WithSeminorms q) [ContinuousSMul 𝕜 E]\n    (f : κ → E →ₛₗ[σ₁₂] F) :\n    UniformEquicontinuous ((↑) ∘ f) ↔\n    ∀ i, ∃ p : Seminorm 𝕜 E, Continuous p ∧ ∀ k, (q i).comp (f k) ≤ p :=\n  (hq.equicontinuous_TFAE f).out 2 3\n\n"}
{"name":"WithSeminorms.uniformEquicontinuous_iff_bddAbove_and_continuous_iSup","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\n𝕜₂ : Type u_2\nE : Type u_5\nF : Type u_6\nι' : Type u_9\ninst✝¹¹ : NontriviallyNormedField 𝕜\ninst✝¹⁰ : AddCommGroup E\ninst✝⁹ : Module 𝕜 E\ninst✝⁸ : NontriviallyNormedField 𝕜₂\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : Module 𝕜₂ F\nσ₁₂ : RingHom 𝕜 𝕜₂\ninst✝⁵ : RingHomIsometric σ₁₂\ninst✝⁴ : Nonempty ι'\nκ : Type u_10\nq : SeminormFamily 𝕜₂ F ι'\ninst✝³ : UniformSpace E\ninst✝² : UniformAddGroup E\nu : UniformSpace F\ninst✝¹ : UniformAddGroup F\nhq : WithSeminorms q\ninst✝ : ContinuousSMul 𝕜 E\nf : κ → LinearMap σ₁₂ E F\n⊢ Iff (UniformEquicontinuous (Function.comp DFunLike.coe f)) (∀ (i : ι'), And (BddAbove (Set.range fun k => (q i).comp (f k))) (Continuous (iSup fun k => ⇑((q i).comp (f k)))))","decl":"theorem _root_.WithSeminorms.uniformEquicontinuous_iff_bddAbove_and_continuous_iSup {κ : Type*}\n    {q : SeminormFamily 𝕜₂ F ι'} [UniformSpace E] [UniformAddGroup E] [u : UniformSpace F]\n    [UniformAddGroup F] (hq : WithSeminorms q) [ContinuousSMul 𝕜 E]\n    (f : κ → E →ₛₗ[σ₁₂] F) :\n    UniformEquicontinuous ((↑) ∘ f) ↔ ∀ i,\n    BddAbove (range fun k ↦ (q i).comp (f k)) ∧\n      Continuous (⨆ k, (q i).comp (f k)) :=\n  (hq.equicontinuous_TFAE f).out 2 4\n\n"}
{"name":"WithSeminorms.congr","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\nι' : Type u_9\ninst✝⁴ : Nonempty ι\ninst✝³ : Nonempty ι'\ninst✝² : NormedField 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\np : SeminormFamily 𝕜 E ι\nq : SeminormFamily 𝕜 E ι'\nt : TopologicalSpace E\nhp : WithSeminorms p\nhpq : Seminorm.IsBounded p q LinearMap.id\nhqp : Seminorm.IsBounded q p LinearMap.id\n⊢ WithSeminorms q","decl":"/-- Two families of seminorms `p` and `q` on the same space generate the same topology\nif each `p i` is bounded by some `C • Finset.sup s q` and vice-versa.\n\nWe formulate these boundedness assumptions as `Seminorm.IsBounded q p LinearMap.id` (and\nvice-versa) to reuse the API. Furthermore, we don't actually state it as an equality of topologies\nbut as a way to deduce `WithSeminorms q` from `WithSeminorms p`, since this should be more\nuseful in practice. -/\nprotected theorem congr {p : SeminormFamily 𝕜 E ι} {q : SeminormFamily 𝕜 E ι'}\n    [t : TopologicalSpace E] (hp : WithSeminorms p) (hpq : Seminorm.IsBounded p q LinearMap.id)\n    (hqp : Seminorm.IsBounded q p LinearMap.id) : WithSeminorms q := by\n  constructor\n  rw [hp.topology_eq_withSeminorms]\n  clear hp t\n  refine le_antisymm ?_ ?_ <;>\n  rw [← continuous_id_iff_le] <;>\n  refine continuous_from_bounded (.mk (topology := _) rfl) (.mk (topology := _) rfl)\n    LinearMap.id (by assumption)\n\n"}
{"name":"WithSeminorms.finset_sups","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁴ : Nonempty ι\ninst✝³ : NormedField 𝕜\ninst✝² : AddCommGroup E\ninst✝¹ : Module 𝕜 E\np : SeminormFamily 𝕜 E ι\ninst✝ : TopologicalSpace E\nhp : WithSeminorms p\n⊢ WithSeminorms fun s => s.sup p","decl":"protected theorem finset_sups {p : SeminormFamily 𝕜 E ι} [TopologicalSpace E]\n    (hp : WithSeminorms p) : WithSeminorms (fun s : Finset ι ↦ s.sup p) := by\n  refine hp.congr ?_ ?_\n  · intro s\n    refine ⟨s, 1, ?_⟩\n    rw [one_smul]\n    rfl\n  · intro i\n    refine ⟨{{i}}, 1, ?_⟩\n    rw [Finset.sup_singleton, Finset.sup_singleton, one_smul]\n    rfl\n\n"}
{"name":"WithSeminorms.partial_sups","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁶ : Nonempty ι\ninst✝⁵ : NormedField 𝕜\ninst✝⁴ : AddCommGroup E\ninst✝³ : Module 𝕜 E\ninst✝² : Preorder ι\ninst✝¹ : LocallyFiniteOrderBot ι\np : SeminormFamily 𝕜 E ι\ninst✝ : TopologicalSpace E\nhp : WithSeminorms p\n⊢ WithSeminorms fun i => (Finset.Iic i).sup p","decl":"protected theorem partial_sups [Preorder ι] [LocallyFiniteOrderBot ι] {p : SeminormFamily 𝕜 E ι}\n    [TopologicalSpace E] (hp : WithSeminorms p) : WithSeminorms (fun i ↦ (Finset.Iic i).sup p) := by\n  refine hp.congr ?_ ?_\n  · intro i\n    refine ⟨Finset.Iic i, 1, ?_⟩\n    rw [one_smul]\n    rfl\n  · intro i\n    refine ⟨{i}, 1, ?_⟩\n    rw [Finset.sup_singleton, one_smul]\n    exact (Finset.le_sup (Finset.mem_Iic.mpr le_rfl) : p i ≤ (Finset.Iic i).sup p)\n\n"}
{"name":"WithSeminorms.congr_equiv","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\nι' : Type u_9\ninst✝⁴ : Nonempty ι\ninst✝³ : Nonempty ι'\ninst✝² : NormedField 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\np : SeminormFamily 𝕜 E ι\nt : TopologicalSpace E\nhp : WithSeminorms p\ne : Equiv ι' ι\n⊢ WithSeminorms (Function.comp p ⇑e)","decl":"protected theorem congr_equiv {p : SeminormFamily 𝕜 E ι} [t : TopologicalSpace E]\n    (hp : WithSeminorms p) (e : ι' ≃ ι) : WithSeminorms (p ∘ e) := by\n  refine hp.congr ?_ ?_ <;>\n  intro i <;>\n  [use {e i}, 1; use {e.symm i}, 1] <;>\n  simp\n\n"}
{"name":"Seminorm.map_eq_zero_of_norm_zero","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nF : Type u_6\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : SeminormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nq : Seminorm 𝕜 F\nhq : Continuous ⇑q\nx : F\nhx : Eq (Norm.norm x) 0\n⊢ Eq (q x) 0","decl":"/-- In a semi-`NormedSpace`, a continuous seminorm is zero on elements of norm `0`. -/\nlemma map_eq_zero_of_norm_zero (q : Seminorm 𝕜 F)\n    (hq : Continuous q) {x : F} (hx : ‖x‖ = 0) : q x = 0 :=\n  (map_zero q) ▸\n    ((specializes_iff_mem_closure.mpr <| mem_closure_zero_iff_norm.mpr hx).map hq).eq.symm\n\n"}
{"name":"Seminorm.bound_of_continuous_normedSpace","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nF : Type u_6\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : SeminormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nq : Seminorm 𝕜 F\nhq : Continuous ⇑q\n⊢ Exists fun C => And (LT.lt 0 C) (∀ (x : F), LE.le (q x) (HMul.hMul C (Norm.norm x)))","decl":"/-- Let `F` be a semi-`NormedSpace` over a `NontriviallyNormedField`, and let `q` be a\nseminorm on `F`. If `q` is continuous, then it is uniformly controlled by the norm, that is there\nis some `C > 0` such that `∀ x, q x ≤ C * ‖x‖`.\nThe continuity ensures boundedness on a ball of some radius `ε`. The nontriviality of the\nnorm is then used to rescale any element into an element of norm in `[ε/C, ε[`, thus with a\ncontrolled image by `q`. The control of `q` at the original element follows by rescaling. -/\nlemma bound_of_continuous_normedSpace (q : Seminorm 𝕜 F)\n    (hq : Continuous q) : ∃ C, 0 < C ∧ (∀ x : F, q x ≤ C * ‖x‖) := by\n  have hq' : Tendsto q (𝓝 0) (𝓝 0) := map_zero q ▸ hq.tendsto 0\n  rcases NormedAddCommGroup.nhds_zero_basis_norm_lt.mem_iff.mp (hq' <| Iio_mem_nhds one_pos)\n    with ⟨ε, ε_pos, hε⟩\n  rcases NormedField.exists_one_lt_norm 𝕜 with ⟨c, hc⟩\n  have : 0 < ‖c‖ / ε := by positivity\n  refine ⟨‖c‖ / ε, this, fun x ↦ ?_⟩\n  by_cases hx : ‖x‖ = 0\n  · rw [hx, mul_zero]\n    exact le_of_eq (map_eq_zero_of_norm_zero q hq hx)\n  · refine (normSeminorm 𝕜 F).bound_of_shell q ε_pos hc (fun x hle hlt ↦ ?_) hx\n    refine (le_of_lt <| show q x < _ from hε hlt).trans ?_\n    rwa [← div_le_iff₀' this, one_div_div]\n\n"}
{"name":"Seminorm.bound_of_continuous","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝³ : NontriviallyNormedField 𝕜\ninst✝² : AddCommGroup E\ninst✝¹ : Module 𝕜 E\np : SeminormFamily 𝕜 E ι\ninst✝ : Nonempty ι\nt : TopologicalSpace E\nhp : WithSeminorms p\nq : Seminorm 𝕜 E\nhq : Continuous ⇑q\n⊢ Exists fun s => Exists fun C => And (Ne C 0) (LE.le q (HSMul.hSMul C (s.sup p)))","decl":"/-- Let `E` be a topological vector space (over a `NontriviallyNormedField`) whose topology is\ngenerated by some family of seminorms `p`, and let `q` be a seminorm on `E`. If `q` is continuous,\nthen it is uniformly controlled by *finitely many* seminorms of `p`, that is there\nis some finset `s` of the index set and some `C > 0` such that `q ≤ C • s.sup p`. -/\nlemma bound_of_continuous [Nonempty ι] [t : TopologicalSpace E] (hp : WithSeminorms p)\n    (q : Seminorm 𝕜 E) (hq : Continuous q) :\n    ∃ s : Finset ι, ∃ C : ℝ≥0, C ≠ 0 ∧ q ≤ C • s.sup p := by\n  -- The continuity of `q` gives us a finset `s` and a real `ε > 0`\n  -- such that `hε : (s.sup p).ball 0 ε ⊆ q.ball 0 1`.\n  rcases hp.hasBasis.mem_iff.mp (ball_mem_nhds hq one_pos) with ⟨V, hV, hε⟩\n  rcases p.basisSets_iff.mp hV with ⟨s, ε, ε_pos, rfl⟩\n  -- Now forget that `E` already had a topology and view it as the (semi)normed space\n  -- `(E, s.sup p)`.\n  clear hp hq t\n  let _ : SeminormedAddCommGroup E := (s.sup p).toSeminormedAddCommGroup\n  let _ : NormedSpace 𝕜 E := { norm_smul_le := fun a b ↦ le_of_eq (map_smul_eq_mul (s.sup p) a b) }\n  -- The inclusion `hε` tells us exactly that `q` is *still* continuous for this new topology\n  have : Continuous q :=\n    Seminorm.continuous (r := 1) (mem_of_superset (Metric.ball_mem_nhds _ ε_pos) hε)\n  -- Hence we can conclude by applying `bound_of_continuous_normedSpace`.\n  rcases bound_of_continuous_normedSpace q this with ⟨C, C_pos, hC⟩\n  exact ⟨s, ⟨C, C_pos.le⟩, fun H ↦ C_pos.ne.symm (congr_arg NNReal.toReal H), hC⟩\n  -- Note that the key ingredient for this proof is that, by scaling arguments hidden in\n  -- `Seminorm.continuous`, we only have to look at the `q`-ball of radius one, and the `s` we get\n  -- from that will automatically work for all other radii.\n\n"}
{"name":"WithSeminorms.toLocallyConvexSpace","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁷ : Nonempty ι\ninst✝⁶ : NormedField 𝕜\ninst✝⁵ : NormedSpace Real 𝕜\ninst✝⁴ : AddCommGroup E\ninst✝³ : Module 𝕜 E\ninst✝² : Module Real E\ninst✝¹ : IsScalarTower Real 𝕜 E\ninst✝ : TopologicalSpace E\np : SeminormFamily 𝕜 E ι\nhp : WithSeminorms p\n⊢ LocallyConvexSpace Real E","decl":"theorem WithSeminorms.toLocallyConvexSpace {p : SeminormFamily 𝕜 E ι} (hp : WithSeminorms p) :\n    LocallyConvexSpace ℝ E := by\n  have := hp.topologicalAddGroup\n  apply ofBasisZero ℝ E id fun s => s ∈ p.basisSets\n  · rw [hp.1, AddGroupFilterBasis.nhds_eq _, AddGroupFilterBasis.N_zero]\n    exact FilterBasis.hasBasis _\n  · intro s hs\n    change s ∈ Set.iUnion _ at hs\n    simp_rw [Set.mem_iUnion, Set.mem_singleton_iff] at hs\n    rcases hs with ⟨I, r, _, rfl⟩\n    exact convex_ball _ _ _\n\n"}
{"name":"NormedSpace.toLocallyConvexSpace'","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\ninst✝⁵ : NormedField 𝕜\ninst✝⁴ : NormedSpace Real 𝕜\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\ninst✝¹ : Module Real E\ninst✝ : IsScalarTower Real 𝕜 E\n⊢ LocallyConvexSpace Real E","decl":"/-- Not an instance since `𝕜` can't be inferred. See `NormedSpace.toLocallyConvexSpace` for a\nslightly weaker instance version. -/\ntheorem NormedSpace.toLocallyConvexSpace' [NormedSpace 𝕜 E] [Module ℝ E] [IsScalarTower ℝ 𝕜 E] :\n    LocallyConvexSpace ℝ E :=\n  (norm_withSeminorms 𝕜 E).toLocallyConvexSpace\n\n"}
{"name":"NormedSpace.toLocallyConvexSpace","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"E : Type u_5\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\n⊢ LocallyConvexSpace Real E","decl":"/-- See `NormedSpace.toLocallyConvexSpace'` for a slightly stronger version which is not an\ninstance. -/\ninstance NormedSpace.toLocallyConvexSpace [NormedSpace ℝ E] : LocallyConvexSpace ℝ E :=\n  NormedSpace.toLocallyConvexSpace' ℝ\n\n"}
{"name":"SeminormFamily.comp_apply","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\n𝕜₂ : Type u_2\nE : Type u_5\nF : Type u_6\nι : Type u_8\ninst✝⁶ : NormedField 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : Module 𝕜 E\ninst✝³ : NormedField 𝕜₂\ninst✝² : AddCommGroup F\ninst✝¹ : Module 𝕜₂ F\nσ₁₂ : RingHom 𝕜 𝕜₂\ninst✝ : RingHomIsometric σ₁₂\nq : SeminormFamily 𝕜₂ F ι\ni : ι\nf : LinearMap σ₁₂ E F\n⊢ Eq (q.comp f i) ((q i).comp f)","decl":"theorem SeminormFamily.comp_apply (q : SeminormFamily 𝕜₂ F ι) (i : ι) (f : E →ₛₗ[σ₁₂] F) :\n    q.comp f i = (q i).comp f :=\n  rfl\n\n"}
{"name":"SeminormFamily.finset_sup_comp","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\n𝕜₂ : Type u_2\nE : Type u_5\nF : Type u_6\nι : Type u_8\ninst✝⁶ : NormedField 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : Module 𝕜 E\ninst✝³ : NormedField 𝕜₂\ninst✝² : AddCommGroup F\ninst✝¹ : Module 𝕜₂ F\nσ₁₂ : RingHom 𝕜 𝕜₂\ninst✝ : RingHomIsometric σ₁₂\nq : SeminormFamily 𝕜₂ F ι\ns : Finset ι\nf : LinearMap σ₁₂ E F\n⊢ Eq ((s.sup q).comp f) (s.sup (q.comp f))","decl":"theorem SeminormFamily.finset_sup_comp (q : SeminormFamily 𝕜₂ F ι) (s : Finset ι)\n    (f : E →ₛₗ[σ₁₂] F) : (s.sup q).comp f = s.sup (q.comp f) := by\n  ext x\n  rw [Seminorm.comp_apply, Seminorm.finset_sup_apply, Seminorm.finset_sup_apply]\n  rfl\n\n"}
{"name":"LinearMap.withSeminorms_induced","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\n𝕜₂ : Type u_2\nE : Type u_5\nF : Type u_6\nι : Type u_8\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : NormedField 𝕜₂\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\nσ₁₂ : RingHom 𝕜 𝕜₂\ninst✝¹ : RingHomIsometric σ₁₂\ninst✝ : TopologicalSpace F\nhι : Nonempty ι\nq : SeminormFamily 𝕜₂ F ι\nhq : WithSeminorms q\nf : LinearMap σ₁₂ E F\n⊢ WithSeminorms (q.comp f)","decl":"theorem LinearMap.withSeminorms_induced [hι : Nonempty ι] {q : SeminormFamily 𝕜₂ F ι}\n    (hq : WithSeminorms q) (f : E →ₛₗ[σ₁₂] F) :\n    WithSeminorms (topology := induced f inferInstance) (q.comp f) := by\n  have := hq.topologicalAddGroup\n  let _ : TopologicalSpace E := induced f inferInstance\n  have : TopologicalAddGroup E := topologicalAddGroup_induced f\n  rw [(q.comp f).withSeminorms_iff_nhds_eq_iInf, nhds_induced, map_zero,\n    q.withSeminorms_iff_nhds_eq_iInf.mp hq, Filter.comap_iInf]\n  refine iInf_congr fun i => ?_\n  exact Filter.comap_comap\n\n"}
{"name":"Topology.IsInducing.withSeminorms","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\n𝕜₂ : Type u_2\nE : Type u_5\nF : Type u_6\nι : Type u_8\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : NormedField 𝕜₂\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜₂ F\nσ₁₂ : RingHom 𝕜 𝕜₂\ninst✝² : RingHomIsometric σ₁₂\ninst✝¹ : TopologicalSpace F\nhι : Nonempty ι\nq : SeminormFamily 𝕜₂ F ι\nhq : WithSeminorms q\ninst✝ : TopologicalSpace E\nf : LinearMap σ₁₂ E F\nhf : Topology.IsInducing ⇑f\n⊢ WithSeminorms (q.comp f)","decl":"lemma Topology.IsInducing.withSeminorms [hι : Nonempty ι] {q : SeminormFamily 𝕜₂ F ι}\n    (hq : WithSeminorms q) [TopologicalSpace E] {f : E →ₛₗ[σ₁₂] F} (hf : IsInducing f) :\n    WithSeminorms (q.comp f) := by\n  rw [hf.eq_induced]\n  exact f.withSeminorms_induced hq\n\n"}
{"name":"Inducing.withSeminorms","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\n𝕜₂ : Type u_2\nE : Type u_5\nF : Type u_6\nι : Type u_8\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : NormedField 𝕜₂\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜₂ F\nσ₁₂ : RingHom 𝕜 𝕜₂\ninst✝² : RingHomIsometric σ₁₂\ninst✝¹ : TopologicalSpace F\nhι : Nonempty ι\nq : SeminormFamily 𝕜₂ F ι\nhq : WithSeminorms q\ninst✝ : TopologicalSpace E\nf : LinearMap σ₁₂ E F\nhf : Topology.IsInducing ⇑f\n⊢ WithSeminorms (q.comp f)","decl":"@[deprecated (since := \"2024-10-28\")] alias Inducing.withSeminorms := IsInducing.withSeminorms\n\n"}
{"name":"withSeminorms_iInf","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁴ : NormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\nκ : ι → Type u_10\ninst✝¹ : Nonempty (Sigma fun i => κ i)\ninst✝ : ∀ (i : ι), Nonempty (κ i)\np : (i : ι) → SeminormFamily 𝕜 E (κ i)\nt : ι → TopologicalSpace E\nhp : ∀ (i : ι), WithSeminorms (p i)\n⊢ WithSeminorms (SeminormFamily.sigma p)","decl":"theorem withSeminorms_iInf {κ : ι → Type*} [Nonempty ((i : ι) × κ i)] [∀ i, Nonempty (κ i)]\n    {p : (i : ι) → SeminormFamily 𝕜 E (κ i)} {t : ι → TopologicalSpace E}\n    (hp : ∀ i, WithSeminorms (topology := t i) (p i)) :\n    WithSeminorms (topology := ⨅ i, t i) (SeminormFamily.sigma p) := by\n  have : ∀ i, @TopologicalAddGroup E (t i) _ :=\n    fun i ↦ @WithSeminorms.topologicalAddGroup _ _ _ _ _ _ _ (t i) _ (hp i)\n  have : @TopologicalAddGroup E (⨅ i, t i) _ := topologicalAddGroup_iInf inferInstance\n  simp_rw [@SeminormFamily.withSeminorms_iff_topologicalSpace_eq_iInf _ _ _ _ _ _ _ (_)] at hp ⊢\n  rw [iInf_sigma]\n  exact iInf_congr hp\n\n"}
{"name":"withSeminorms_pi","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nι : Type u_8\ninst✝⁵ : NormedField 𝕜\nκ : ι → Type u_10\nE : ι → Type u_11\ninst✝⁴ : (i : ι) → AddCommGroup (E i)\ninst✝³ : (i : ι) → Module 𝕜 (E i)\ninst✝² : (i : ι) → TopologicalSpace (E i)\ninst✝¹ : Nonempty (Sigma fun i => κ i)\ninst✝ : ∀ (i : ι), Nonempty (κ i)\np : (i : ι) → SeminormFamily 𝕜 (E i) (κ i)\nhp : ∀ (i : ι), WithSeminorms (p i)\n⊢ WithSeminorms (SeminormFamily.sigma fun i => (p i).comp (LinearMap.proj i))","decl":"theorem withSeminorms_pi {κ : ι → Type*} {E : ι → Type*}\n    [∀ i, AddCommGroup (E i)] [∀ i, Module 𝕜 (E i)] [∀ i, TopologicalSpace (E i)]\n    [Nonempty ((i : ι) × κ i)] [∀ i, Nonempty (κ i)] {p : (i : ι) → SeminormFamily 𝕜 (E i) (κ i)}\n    (hp : ∀ i, WithSeminorms (p i)) :\n    WithSeminorms (SeminormFamily.sigma (fun i ↦ (p i).comp (LinearMap.proj i))) :=\n  withSeminorms_iInf fun i ↦ (LinearMap.proj i).withSeminorms_induced (hp i)\n\n"}
{"name":"WithSeminorms.firstCountableTopology","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁵ : NontriviallyNormedField 𝕜\ninst✝⁴ : AddCommGroup E\ninst✝³ : Module 𝕜 E\ninst✝² : Nonempty ι\ninst✝¹ : Countable ι\np : SeminormFamily 𝕜 E ι\ninst✝ : TopologicalSpace E\nhp : WithSeminorms p\n⊢ FirstCountableTopology E","decl":"/-- If the topology of a space is induced by a countable family of seminorms, then the topology\nis first countable. -/\ntheorem WithSeminorms.firstCountableTopology (hp : WithSeminorms p) :\n    FirstCountableTopology E := by\n  have := hp.topologicalAddGroup\n  let _ : UniformSpace E := TopologicalAddGroup.toUniformSpace E\n  have : UniformAddGroup E := comm_topologicalAddGroup_is_uniform\n  have : (𝓝 (0 : E)).IsCountablyGenerated := by\n    rw [p.withSeminorms_iff_nhds_eq_iInf.mp hp]\n    exact Filter.iInf.isCountablyGenerated _\n  have : (uniformity E).IsCountablyGenerated := UniformAddGroup.uniformity_countably_generated\n  exact UniformSpace.firstCountableTopology E\n\n"}
{"name":"WithSeminorms.first_countable","module":"Mathlib.Analysis.LocallyConvex.WithSeminorms","initialProofState":"𝕜 : Type u_1\nE : Type u_5\nι : Type u_8\ninst✝⁵ : NontriviallyNormedField 𝕜\ninst✝⁴ : AddCommGroup E\ninst✝³ : Module 𝕜 E\ninst✝² : Nonempty ι\ninst✝¹ : Countable ι\np : SeminormFamily 𝕜 E ι\ninst✝ : TopologicalSpace E\nhp : WithSeminorms p\n⊢ FirstCountableTopology E","decl":"@[deprecated (since := \"2024-11-13\")] alias\nWithSeminorms.first_countable := WithSeminorms.firstCountableTopology\n\n"}
