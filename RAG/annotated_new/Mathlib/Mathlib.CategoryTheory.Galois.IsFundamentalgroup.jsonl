{"name":"CategoryTheory.PreGaloisCategory.IsNaturalSMul.naturality","module":"Mathlib.CategoryTheory.Galois.IsFundamentalgroup","initialProofState":"C : Type u‚ÇÅ\ninst‚úù¬≤ : CategoryTheory.Category.{u‚ÇÇ, u‚ÇÅ} C\nF : CategoryTheory.Functor C FintypeCat\nG : Type u_1\ninst‚úù¬π : Group G\ninst‚úù : (X : C) ‚Üí MulAction G ‚Üë(F.obj X)\nself : CategoryTheory.PreGaloisCategory.IsNaturalSMul F G\ng : G\nX Y : C\nf : Quiver.Hom X Y\nx : ‚Üë(F.obj X)\n‚ä¢ Eq (F.map f (HSMul.hSMul g x)) (HSMul.hSMul g (F.map f x))","decl":"/-- We say `G` acts naturally on the fibers of `F` if for every `f : X ‚ü∂ Y`, the `G`-actions\non `F.obj X` and `F.obj Y` are compatible with `F.map f`. -/\nclass IsNaturalSMul : Prop where\n  naturality (g : G) {X Y : C} (f : X ‚ü∂ Y) (x : F.obj X) : F.map f (g ‚Ä¢ x) = g ‚Ä¢ F.map f x\n\n"}
{"name":"CategoryTheory.PreGaloisCategory.toAut_hom_app_apply","module":"Mathlib.CategoryTheory.Galois.IsFundamentalgroup","initialProofState":"C : Type u‚ÇÅ\ninst‚úù¬≥ : CategoryTheory.Category.{u‚ÇÇ, u‚ÇÅ} C\nF : CategoryTheory.Functor C FintypeCat\nG : Type u_1\ninst‚úù¬≤ : Group G\ninst‚úù¬π : (X : C) ‚Üí MulAction G ‚Üë(F.obj X)\ninst‚úù : CategoryTheory.PreGaloisCategory.IsNaturalSMul F G\ng : G\nX : C\nx : ‚Üë(F.obj X)\n‚ä¢ Eq (((CategoryTheory.PreGaloisCategory.toAut F G) g).hom.app X x) (HSMul.hSMul g x)","decl":"variable {G} in\n@[simp]\nlemma toAut_hom_app_apply (g : G) {X : C} (x : F.obj X) : (toAut F G g).hom.app X x = g ‚Ä¢ x :=\n  rfl\n\n"}
{"name":"CategoryTheory.PreGaloisCategory.toAut_injective_of_non_trivial","module":"Mathlib.CategoryTheory.Galois.IsFundamentalgroup","initialProofState":"C : Type u‚ÇÅ\ninst‚úù¬≥ : CategoryTheory.Category.{u‚ÇÇ, u‚ÇÅ} C\nF : CategoryTheory.Functor C FintypeCat\nG : Type u_1\ninst‚úù¬≤ : Group G\ninst‚úù¬π : (X : C) ‚Üí MulAction G ‚Üë(F.obj X)\ninst‚úù : CategoryTheory.PreGaloisCategory.IsNaturalSMul F G\nh : ‚àÄ (g : G), (‚àÄ (X : C) (x : ‚Üë(F.obj X)), Eq (HSMul.hSMul g x) x) ‚Üí Eq g 1\n‚ä¢ Function.Injective ‚áë(CategoryTheory.PreGaloisCategory.toAut F G)","decl":"/-- `toAut` is injective, if only the identity acts trivially on every fiber. -/\nlemma toAut_injective_of_non_trivial (h : ‚àÄ (g : G), (‚àÄ (X : C) (x : F.obj X), g ‚Ä¢ x = x) ‚Üí g = 1) :\n    Function.Injective (toAut F G) := by\n  rw [‚Üê MonoidHom.ker_eq_bot_iff, eq_bot_iff]\n  intro g (hg : toAut F G g = 1)\n  refine h g (fun X x ‚Ü¶ ?_)\n  have : (toAut F G g).hom.app X = ùüô (F.obj X) := by\n    rw [hg]\n    rfl\n  rw [‚Üê toAut_hom_app_apply, this, FintypeCat.id_apply]\n\n"}
{"name":"CategoryTheory.PreGaloisCategory.toAut_continuous","module":"Mathlib.CategoryTheory.Galois.IsFundamentalgroup","initialProofState":"C : Type u‚ÇÅ\ninst‚úù‚Å∏ : CategoryTheory.Category.{u‚ÇÇ, u‚ÇÅ} C\nF : CategoryTheory.Functor C FintypeCat\nG : Type u_1\ninst‚úù‚Å∑ : Group G\ninst‚úù‚Å∂ : (X : C) ‚Üí MulAction G ‚Üë(F.obj X)\ninst‚úù‚Åµ : CategoryTheory.PreGaloisCategory.IsNaturalSMul F G\ninst‚úù‚Å¥ : CategoryTheory.GaloisCategory C\ninst‚úù¬≥ : CategoryTheory.PreGaloisCategory.FiberFunctor F\ninst‚úù¬≤ : TopologicalSpace G\ninst‚úù¬π : TopologicalGroup G\ninst‚úù : ‚àÄ (X : C), ContinuousSMul G ‚Üë(F.obj X)\n‚ä¢ Continuous ‚áë(CategoryTheory.PreGaloisCategory.toAut F G)","decl":"lemma toAut_continuous [TopologicalSpace G] [TopologicalGroup G]\n    [‚àÄ (X : C), ContinuousSMul G (F.obj X)] :\n    Continuous (toAut F G) := by\n  apply continuous_of_continuousAt_one\n  rw [continuousAt_def, map_one]\n  intro A hA\n  obtain ‚ü®X, _, hX‚ü© := ((nhds_one_has_basis_stabilizers F).mem_iff' A).mp hA\n  rw [mem_nhds_iff]\n  exact ‚ü®MulAction.stabilizer G X.pt, Set.preimage_mono (f := toAut F G) hX,\n    stabilizer_isOpen G X.pt, one_mem _‚ü©\n\n"}
{"name":"CategoryTheory.PreGaloisCategory.action_ext_of_isGalois","module":"Mathlib.CategoryTheory.Galois.IsFundamentalgroup","initialProofState":"C : Type u‚ÇÅ\ninst‚úù‚Å∂ : CategoryTheory.Category.{u‚ÇÇ, u‚ÇÅ} C\nF : CategoryTheory.Functor C FintypeCat\nG : Type u_1\ninst‚úù‚Åµ : Group G\ninst‚úù‚Å¥ : (X : C) ‚Üí MulAction G ‚Üë(F.obj X)\ninst‚úù¬≥ : CategoryTheory.PreGaloisCategory.IsNaturalSMul F G\ninst‚úù¬≤ : CategoryTheory.GaloisCategory C\ninst‚úù¬π : CategoryTheory.PreGaloisCategory.FiberFunctor F\nt : Quiver.Hom F F\nX : C\ninst‚úù : CategoryTheory.PreGaloisCategory.IsGalois X\ng : G\nx : ‚Üë(F.obj X)\nhg : Eq (HSMul.hSMul g x) (t.app X x)\ny : ‚Üë(F.obj X)\n‚ä¢ Eq (HSMul.hSMul g y) (t.app X y)","decl":"lemma action_ext_of_isGalois {t : F ‚ü∂ F} {X : C} [IsGalois X] {g : G} (x : F.obj X)\n    (hg : g ‚Ä¢ x = t.app X x) (y : F.obj X) : g ‚Ä¢ y = t.app X y := by\n  obtain ‚ü®œÜ, (rfl : F.map œÜ.hom y = x)‚ü© := MulAction.exists_smul_eq (Aut X) y x\n  have : Function.Injective (F.map œÜ.hom) :=\n    ConcreteCategory.injective_of_mono_of_preservesPullback (F.map œÜ.hom)\n  apply this\n  rw [IsNaturalSMul.naturality, hg, FunctorToFintypeCat.naturality]\n\n"}
{"name":"CategoryTheory.PreGaloisCategory.toAut_surjective_isGalois","module":"Mathlib.CategoryTheory.Galois.IsFundamentalgroup","initialProofState":"C : Type u‚ÇÅ\ninst‚úù‚Å∑ : CategoryTheory.Category.{u‚ÇÇ, u‚ÇÅ} C\nF : CategoryTheory.Functor C FintypeCat\nG : Type u_1\ninst‚úù‚Å∂ : Group G\ninst‚úù‚Åµ : (X : C) ‚Üí MulAction G ‚Üë(F.obj X)\ninst‚úù‚Å¥ : CategoryTheory.PreGaloisCategory.IsNaturalSMul F G\ninst‚úù¬≥ : CategoryTheory.GaloisCategory C\ninst‚úù¬≤ : CategoryTheory.PreGaloisCategory.FiberFunctor F\nt : CategoryTheory.Aut F\nX : C\ninst‚úù¬π : CategoryTheory.PreGaloisCategory.IsGalois X\ninst‚úù : MulAction.IsPretransitive G ‚Üë(F.obj X)\n‚ä¢ Exists fun g => ‚àÄ (x : ‚Üë(F.obj X)), Eq (HSMul.hSMul g x) (t.hom.app X x)","decl":"lemma toAut_surjective_isGalois (t : Aut F) (X : C) [IsGalois X]\n    [MulAction.IsPretransitive G (F.obj X)] :\n    ‚àÉ (g : G), ‚àÄ (x : F.obj X), g ‚Ä¢ x = t.hom.app X x := by\n  obtain ‚ü®a‚ü© := nonempty_fiber_of_isConnected F X\n  obtain ‚ü®g, hg‚ü© := MulAction.exists_smul_eq G a (t.hom.app X a)\n  exact ‚ü®g, action_ext_of_isGalois F _ hg‚ü©\n\n"}
{"name":"CategoryTheory.PreGaloisCategory.toAut_surjective_isGalois_finite_family","module":"Mathlib.CategoryTheory.Galois.IsFundamentalgroup","initialProofState":"C : Type u‚ÇÅ\ninst‚úù‚Å∑ : CategoryTheory.Category.{u‚ÇÇ, u‚ÇÅ} C\nF : CategoryTheory.Functor C FintypeCat\nG : Type u_1\ninst‚úù‚Å∂ : Group G\ninst‚úù‚Åµ : (X : C) ‚Üí MulAction G ‚Üë(F.obj X)\ninst‚úù‚Å¥ : CategoryTheory.PreGaloisCategory.IsNaturalSMul F G\ninst‚úù¬≥ : CategoryTheory.GaloisCategory C\ninst‚úù¬≤ : CategoryTheory.PreGaloisCategory.FiberFunctor F\nt : CategoryTheory.Aut F\nŒπ : Type u_2\ninst‚úù¬π : Finite Œπ\nX : Œπ ‚Üí C\ninst‚úù : ‚àÄ (i : Œπ), CategoryTheory.PreGaloisCategory.IsGalois (X i)\nh : ‚àÄ (X : C) [inst : CategoryTheory.PreGaloisCategory.IsGalois X], MulAction.IsPretransitive G ‚Üë(F.obj X)\n‚ä¢ Exists fun g => ‚àÄ (i : Œπ) (x : ‚Üë(F.obj (X i))), Eq (HSMul.hSMul g x) (t.hom.app (X i) x)","decl":"lemma toAut_surjective_isGalois_finite_family (t : Aut F) {Œπ : Type*} [Finite Œπ] (X : Œπ ‚Üí C)\n    [‚àÄ i, IsGalois (X i)] (h : ‚àÄ (X : C) [IsGalois X], MulAction.IsPretransitive G (F.obj X)) :\n    ‚àÉ (g : G), ‚àÄ (i : Œπ) (x : F.obj (X i)), g ‚Ä¢ x = t.hom.app (X i) x := by\n  let x (i : Œπ) : F.obj (X i) := (nonempty_fiber_of_isConnected F (X i)).some\n  let P : C := ‚àè·∂ú X\n  letI : Fintype Œπ := Fintype.ofFinite Œπ\n  let is‚ÇÅ : F.obj P ‚âÖ ‚àè·∂ú fun i ‚Ü¶ (F.obj (X i)) := PreservesProduct.iso F X\n  let is‚ÇÇ : (‚àè·∂ú fun i ‚Ü¶ F.obj (X i) : FintypeCat) ‚âÉ ‚àÄ i, F.obj (X i) :=\n    Limits.FintypeCat.productEquiv (fun i ‚Ü¶ (F.obj (X i)))\n  let px : F.obj P := is‚ÇÅ.inv (is‚ÇÇ.symm x)\n  have hpx (i : Œπ) : F.map (Pi.œÄ X i) px = x i := by\n    simp only [px, is‚ÇÅ, is‚ÇÇ, ‚Üê piComparison_comp_œÄ, ‚Üê PreservesProduct.iso_hom]\n    simp only [FintypeCat.comp_apply, FintypeCat.inv_hom_id_apply,\n      FintypeCat.productEquiv_symm_comp_œÄ_apply]\n  obtain ‚ü®A, f, a, _, hfa‚ü© := exists_hom_from_galois_of_fiber F P px\n  obtain ‚ü®g, hg‚ü© := toAut_surjective_isGalois F G t A\n  refine ‚ü®g, fun i y ‚Ü¶ action_ext_of_isGalois F (x i) ?_ _‚ü©\n  rw [‚Üê hpx i, ‚Üê IsNaturalSMul.naturality, FunctorToFintypeCat.naturality,\n    ‚Üê hfa, FunctorToFintypeCat.naturality, ‚Üê IsNaturalSMul.naturality, hg]\n\n"}
{"name":"CategoryTheory.PreGaloisCategory.toAut_surjective_of_isPretransitive","module":"Mathlib.CategoryTheory.Galois.IsFundamentalgroup","initialProofState":"C : Type u‚ÇÅ\ninst‚úù‚Åπ : CategoryTheory.Category.{u‚ÇÇ, u‚ÇÅ} C\nF : CategoryTheory.Functor C FintypeCat\nG : Type u_1\ninst‚úù‚Å∏ : Group G\ninst‚úù‚Å∑ : (X : C) ‚Üí MulAction G ‚Üë(F.obj X)\ninst‚úù‚Å∂ : CategoryTheory.PreGaloisCategory.IsNaturalSMul F G\ninst‚úù‚Åµ : CategoryTheory.GaloisCategory C\ninst‚úù‚Å¥ : CategoryTheory.PreGaloisCategory.FiberFunctor F\ninst‚úù¬≥ : TopologicalSpace G\ninst‚úù¬≤ : TopologicalGroup G\ninst‚úù¬π : CompactSpace G\ninst‚úù : ‚àÄ (X : C), ContinuousSMul G ‚Üë(F.obj X)\nh : ‚àÄ (X : C) [inst : CategoryTheory.PreGaloisCategory.IsGalois X], MulAction.IsPretransitive G ‚Üë(F.obj X)\n‚ä¢ Function.Surjective ‚áë(CategoryTheory.PreGaloisCategory.toAut F G)","decl":"/-- If `G` is a compact, topological group that acts continuously and naturally on the\nfibers of `F`, `toAut F G` is surjective if and only if it acts transitively on the fibers\nof all Galois objects. This is the `if` direction. For the `only if` see\n`isPretransitive_of_surjective`. -/\nlemma toAut_surjective_of_isPretransitive [TopologicalSpace G] [TopologicalGroup G] [CompactSpace G]\n    [‚àÄ (X : C), ContinuousSMul G (F.obj X)]\n    (h : ‚àÄ (X : C) [IsGalois X], MulAction.IsPretransitive G (F.obj X)) :\n    Function.Surjective (toAut F G) := by\n  intro t\n  choose gi hgi using (fun X : PointedGaloisObject F ‚Ü¶ toAut_surjective_isGalois F G t X)\n  let cl (X : PointedGaloisObject F) : Set G := gi X ‚Ä¢ MulAction.stabilizer G X.pt\n  let c : Set G := ‚ãÇ i, cl i\n  have hne : c.Nonempty := by\n    rw [‚Üê Set.univ_inter c]\n    apply CompactSpace.isCompact_univ.inter_iInter_nonempty\n    ¬∑ intro X\n      apply IsClosed.leftCoset\n      exact Subgroup.isClosed_of_isOpen _ (stabilizer_isOpen G X.pt)\n    ¬∑ intro s\n      rw [Set.univ_inter]\n      obtain ‚ü®gs, hgs‚ü© :=\n        toAut_surjective_isGalois_finite_family F G t (fun X : s ‚Ü¶ X.val.obj) h\n      use gs\n      simp only [Set.mem_iInter]\n      intro X hXmem\n      rw [mem_leftCoset_iff, SetLike.mem_coe, MulAction.mem_stabilizer_iff, mul_smul,\n        hgs ‚ü®X, hXmem‚ü©, ‚Üê hgi X, inv_smul_smul]\n  obtain ‚ü®g, hg‚ü© := hne\n  refine ‚ü®g, Iso.ext <| natTrans_ext_of_isGalois _ <| fun X _ ‚Ü¶ ?_‚ü©\n  ext x\n  simp only [toAut_hom_app_apply]\n  have : g ‚àà (gi ‚ü®X, x, inferInstance‚ü© ‚Ä¢ MulAction.stabilizer G x : Set G) := by\n    simp only [Set.mem_iInter, c] at hg\n    exact hg _\n  obtain ‚ü®s, (hsmem : s ‚Ä¢ x = x), (rfl : gi ‚ü®X, x, inferInstance‚ü© ‚Ä¢ s = _)‚ü© := this\n  rw [smul_eq_mul, mul_smul, hsmem]\n  exact hgi ‚ü®X, x, inferInstance‚ü© x\n\n"}
{"name":"CategoryTheory.PreGaloisCategory.isPretransitive_of_surjective","module":"Mathlib.CategoryTheory.Galois.IsFundamentalgroup","initialProofState":"C : Type u‚ÇÅ\ninst‚úù‚Å∂ : CategoryTheory.Category.{u‚ÇÇ, u‚ÇÅ} C\nF : CategoryTheory.Functor C FintypeCat\nG : Type u_1\ninst‚úù‚Åµ : Group G\ninst‚úù‚Å¥ : (X : C) ‚Üí MulAction G ‚Üë(F.obj X)\ninst‚úù¬≥ : CategoryTheory.PreGaloisCategory.IsNaturalSMul F G\ninst‚úù¬≤ : CategoryTheory.GaloisCategory C\ninst‚úù¬π : CategoryTheory.PreGaloisCategory.FiberFunctor F\nh : Function.Surjective ‚áë(CategoryTheory.PreGaloisCategory.toAut F G)\nX : C\ninst‚úù : CategoryTheory.PreGaloisCategory.IsConnected X\n‚ä¢ MulAction.IsPretransitive G ‚Üë(F.obj X)","decl":"/-- If `toAut F G` is surjective, then `G` acts transitively on the fibers of connected objects.\nFor a converse see `toAut_surjective`. -/\nlemma isPretransitive_of_surjective (h : Function.Surjective (toAut F G)) (X : C)\n    [IsConnected X] : MulAction.IsPretransitive G (F.obj X) where\n  exists_smul_eq x y := by\n    obtain ‚ü®t, ht‚ü© := MulAction.exists_smul_eq (Aut F) x y\n    obtain ‚ü®g, rfl‚ü© := h t\n    exact ‚ü®g, ht‚ü©\n\n"}
{"name":"CategoryTheory.PreGaloisCategory.IsFundamentalGroup.non_trivial'","module":"Mathlib.CategoryTheory.Galois.IsFundamentalgroup","initialProofState":"C : Type u‚ÇÅ\ninst‚úù‚Å∂ : CategoryTheory.Category.{u‚ÇÇ, u‚ÇÅ} C\nF : CategoryTheory.Functor C FintypeCat\ninst‚úù‚Åµ : CategoryTheory.GaloisCategory C\nG : Type u_1\ninst‚úù‚Å¥ : Group G\ninst‚úù¬≥ : (X : C) ‚Üí MulAction G ‚Üë(F.obj X)\ninst‚úù¬≤ : TopologicalSpace G\ninst‚úù¬π : TopologicalGroup G\ninst‚úù : CompactSpace G\nself : CategoryTheory.PreGaloisCategory.IsFundamentalGroup F G\ng : G\na‚úù : ‚àÄ (X : C) (x : ‚Üë(F.obj X)), Eq (HSMul.hSMul g x) x\n‚ä¢ Eq g 1","decl":"/-- A compact, topological group `G` with a natural action on `F.obj X` for each `X : C`\nis a fundamental group of `F`, if `G` acts transitively on the fibers of Galois objects,\nthe action on `F.obj X` is continuous for all `X : C` and the only trivially acting element of `G`\nis the identity. -/\nclass IsFundamentalGroup [TopologicalSpace G] [TopologicalGroup G] [CompactSpace G]\n    extends IsNaturalSMul F G : Prop where\n  transitive_of_isGalois (X : C) [IsGalois X] : MulAction.IsPretransitive G (F.obj X)\n  continuous_smul (X : C) : ContinuousSMul G (F.obj X)\n  non_trivial' (g : G) : (‚àÄ (X : C) (x : F.obj X), g ‚Ä¢ x = x) ‚Üí g = 1\n\n"}
{"name":"CategoryTheory.PreGaloisCategory.IsFundamentalGroup.toIsNaturalSMul","module":"Mathlib.CategoryTheory.Galois.IsFundamentalgroup","initialProofState":"C : Type u‚ÇÅ\ninst‚úù‚Å∂ : CategoryTheory.Category.{u‚ÇÇ, u‚ÇÅ} C\nF : CategoryTheory.Functor C FintypeCat\ninst‚úù‚Åµ : CategoryTheory.GaloisCategory C\nG : Type u_1\ninst‚úù‚Å¥ : Group G\ninst‚úù¬≥ : (X : C) ‚Üí MulAction G ‚Üë(F.obj X)\ninst‚úù¬≤ : TopologicalSpace G\ninst‚úù¬π : TopologicalGroup G\ninst‚úù : CompactSpace G\nself : CategoryTheory.PreGaloisCategory.IsFundamentalGroup F G\n‚ä¢ CategoryTheory.PreGaloisCategory.IsNaturalSMul F G","decl":"/-- A compact, topological group `G` with a natural action on `F.obj X` for each `X : C`\nis a fundamental group of `F`, if `G` acts transitively on the fibers of Galois objects,\nthe action on `F.obj X` is continuous for all `X : C` and the only trivially acting element of `G`\nis the identity. -/\nclass IsFundamentalGroup [TopologicalSpace G] [TopologicalGroup G] [CompactSpace G]\n    extends IsNaturalSMul F G : Prop where\n  transitive_of_isGalois (X : C) [IsGalois X] : MulAction.IsPretransitive G (F.obj X)\n  continuous_smul (X : C) : ContinuousSMul G (F.obj X)\n  non_trivial' (g : G) : (‚àÄ (X : C) (x : F.obj X), g ‚Ä¢ x = x) ‚Üí g = 1\n\n"}
{"name":"CategoryTheory.PreGaloisCategory.IsFundamentalGroup.transitive_of_isGalois","module":"Mathlib.CategoryTheory.Galois.IsFundamentalgroup","initialProofState":"C : Type u‚ÇÅ\ninst‚úù‚Å∑ : CategoryTheory.Category.{u‚ÇÇ, u‚ÇÅ} C\nF : CategoryTheory.Functor C FintypeCat\ninst‚úù‚Å∂ : CategoryTheory.GaloisCategory C\nG : Type u_1\ninst‚úù‚Åµ : Group G\ninst‚úù‚Å¥ : (X : C) ‚Üí MulAction G ‚Üë(F.obj X)\ninst‚úù¬≥ : TopologicalSpace G\ninst‚úù¬≤ : TopologicalGroup G\ninst‚úù¬π : CompactSpace G\nself : CategoryTheory.PreGaloisCategory.IsFundamentalGroup F G\nX : C\ninst‚úù : CategoryTheory.PreGaloisCategory.IsGalois X\n‚ä¢ MulAction.IsPretransitive G ‚Üë(F.obj X)","decl":"/-- A compact, topological group `G` with a natural action on `F.obj X` for each `X : C`\nis a fundamental group of `F`, if `G` acts transitively on the fibers of Galois objects,\nthe action on `F.obj X` is continuous for all `X : C` and the only trivially acting element of `G`\nis the identity. -/\nclass IsFundamentalGroup [TopologicalSpace G] [TopologicalGroup G] [CompactSpace G]\n    extends IsNaturalSMul F G : Prop where\n  transitive_of_isGalois (X : C) [IsGalois X] : MulAction.IsPretransitive G (F.obj X)\n  continuous_smul (X : C) : ContinuousSMul G (F.obj X)\n  non_trivial' (g : G) : (‚àÄ (X : C) (x : F.obj X), g ‚Ä¢ x = x) ‚Üí g = 1\n\n"}
{"name":"CategoryTheory.PreGaloisCategory.IsFundamentalGroup.continuous_smul","module":"Mathlib.CategoryTheory.Galois.IsFundamentalgroup","initialProofState":"C : Type u‚ÇÅ\ninst‚úù‚Å∂ : CategoryTheory.Category.{u‚ÇÇ, u‚ÇÅ} C\nF : CategoryTheory.Functor C FintypeCat\ninst‚úù‚Åµ : CategoryTheory.GaloisCategory C\nG : Type u_1\ninst‚úù‚Å¥ : Group G\ninst‚úù¬≥ : (X : C) ‚Üí MulAction G ‚Üë(F.obj X)\ninst‚úù¬≤ : TopologicalSpace G\ninst‚úù¬π : TopologicalGroup G\ninst‚úù : CompactSpace G\nself : CategoryTheory.PreGaloisCategory.IsFundamentalGroup F G\nX : C\n‚ä¢ ContinuousSMul G ‚Üë(F.obj X)","decl":"/-- A compact, topological group `G` with a natural action on `F.obj X` for each `X : C`\nis a fundamental group of `F`, if `G` acts transitively on the fibers of Galois objects,\nthe action on `F.obj X` is continuous for all `X : C` and the only trivially acting element of `G`\nis the identity. -/\nclass IsFundamentalGroup [TopologicalSpace G] [TopologicalGroup G] [CompactSpace G]\n    extends IsNaturalSMul F G : Prop where\n  transitive_of_isGalois (X : C) [IsGalois X] : MulAction.IsPretransitive G (F.obj X)\n  continuous_smul (X : C) : ContinuousSMul G (F.obj X)\n  non_trivial' (g : G) : (‚àÄ (X : C) (x : F.obj X), g ‚Ä¢ x = x) ‚Üí g = 1\n\n"}
{"name":"CategoryTheory.PreGaloisCategory.IsFundamentalGroup.non_trivial","module":"Mathlib.CategoryTheory.Galois.IsFundamentalgroup","initialProofState":"C : Type u‚ÇÅ\ninst‚úù‚Å∑ : CategoryTheory.Category.{u‚ÇÇ, u‚ÇÅ} C\nF : CategoryTheory.Functor C FintypeCat\ninst‚úù‚Å∂ : CategoryTheory.GaloisCategory C\nG : Type u_1\ninst‚úù‚Åµ : Group G\ninst‚úù‚Å¥ : (X : C) ‚Üí MulAction G ‚Üë(F.obj X)\ninst‚úù¬≥ : TopologicalSpace G\ninst‚úù¬≤ : TopologicalGroup G\ninst‚úù¬π : CompactSpace G\ninst‚úù : CategoryTheory.PreGaloisCategory.IsFundamentalGroup F G\ng : G\nh : ‚àÄ (X : C) (x : ‚Üë(F.obj X)), Eq (HSMul.hSMul g x) x\n‚ä¢ Eq g 1","decl":"lemma non_trivial (g : G) (h : ‚àÄ (X : C) (x : F.obj X), g ‚Ä¢ x = x) : g = 1 :=\n  IsFundamentalGroup.non_trivial' g h\n\n"}
{"name":"CategoryTheory.PreGaloisCategory.instIsFundamentalGroupAutFunctorFintypeCat","module":"Mathlib.CategoryTheory.Galois.IsFundamentalgroup","initialProofState":"C : Type u‚ÇÅ\ninst‚úù¬≤ : CategoryTheory.Category.{u‚ÇÇ, u‚ÇÅ} C\nF : CategoryTheory.Functor C FintypeCat\ninst‚úù¬π : CategoryTheory.GaloisCategory C\ninst‚úù : CategoryTheory.PreGaloisCategory.FiberFunctor F\n‚ä¢ CategoryTheory.PreGaloisCategory.IsFundamentalGroup F (CategoryTheory.Aut F)","decl":"/-- `Aut F` is a fundamental group for `F`. -/\ninstance : IsFundamentalGroup F (Aut F) where\n  naturality g _ _ f x := (FunctorToFintypeCat.naturality F F g.hom f x).symm\n  transitive_of_isGalois X := FiberFunctor.isPretransitive_of_isConnected F X\n  continuous_smul X := continuousSMul_aut_fiber F X\n  non_trivial' g h := by\n    ext X x\n    exact h X x\n\n"}
{"name":"CategoryTheory.PreGaloisCategory.toAut_bijective","module":"Mathlib.CategoryTheory.Galois.IsFundamentalgroup","initialProofState":"C : Type u‚ÇÅ\ninst‚úù‚Å∏ : CategoryTheory.Category.{u‚ÇÇ, u‚ÇÅ} C\nF : CategoryTheory.Functor C FintypeCat\ninst‚úù‚Å∑ : CategoryTheory.GaloisCategory C\nG : Type u_1\ninst‚úù‚Å∂ : Group G\ninst‚úù‚Åµ : (X : C) ‚Üí MulAction G ‚Üë(F.obj X)\ninst‚úù‚Å¥ : CategoryTheory.PreGaloisCategory.FiberFunctor F\ninst‚úù¬≥ : TopologicalSpace G\ninst‚úù¬≤ : TopologicalGroup G\ninst‚úù¬π : CompactSpace G\ninst‚úù : CategoryTheory.PreGaloisCategory.IsFundamentalGroup F G\n‚ä¢ Function.Bijective ‚áë(CategoryTheory.PreGaloisCategory.toAut F G)","decl":"lemma toAut_bijective : Function.Bijective (toAut F G) where\n  left := toAut_injective_of_non_trivial F G IsFundamentalGroup.non_trivial'\n  right := toAut_surjective_of_isPretransitive F G IsFundamentalGroup.transitive_of_isGalois\n\n"}
{"name":"CategoryTheory.PreGaloisCategory.instIsPretransitiveŒ±FintypeObjFintypeCatOfIsConnected","module":"Mathlib.CategoryTheory.Galois.IsFundamentalgroup","initialProofState":"C : Type u‚ÇÅ\ninst‚úù‚Åπ : CategoryTheory.Category.{u‚ÇÇ, u‚ÇÅ} C\nF : CategoryTheory.Functor C FintypeCat\ninst‚úù‚Å∏ : CategoryTheory.GaloisCategory C\nG : Type u_1\ninst‚úù‚Å∑ : Group G\ninst‚úù‚Å∂ : (X : C) ‚Üí MulAction G ‚Üë(F.obj X)\ninst‚úù‚Åµ : CategoryTheory.PreGaloisCategory.FiberFunctor F\ninst‚úù‚Å¥ : TopologicalSpace G\ninst‚úù¬≥ : TopologicalGroup G\ninst‚úù¬≤ : CompactSpace G\ninst‚úù¬π : CategoryTheory.PreGaloisCategory.IsFundamentalGroup F G\nX : C\ninst‚úù : CategoryTheory.PreGaloisCategory.IsConnected X\n‚ä¢ MulAction.IsPretransitive G ‚Üë(F.obj X)","decl":"instance (X : C) [IsConnected X] : MulAction.IsPretransitive G (F.obj X) :=\n  isPretransitive_of_surjective F G (toAut_bijective F G).surjective X\n\n"}
{"name":"CategoryTheory.PreGaloisCategory.toAut_isHomeomorph","module":"Mathlib.CategoryTheory.Galois.IsFundamentalgroup","initialProofState":"C : Type u‚ÇÅ\ninst‚úù‚Å∏ : CategoryTheory.Category.{u‚ÇÇ, u‚ÇÅ} C\nF : CategoryTheory.Functor C FintypeCat\ninst‚úù‚Å∑ : CategoryTheory.GaloisCategory C\nG : Type u_1\ninst‚úù‚Å∂ : Group G\ninst‚úù‚Åµ : (X : C) ‚Üí MulAction G ‚Üë(F.obj X)\ninst‚úù‚Å¥ : CategoryTheory.PreGaloisCategory.FiberFunctor F\ninst‚úù¬≥ : TopologicalSpace G\ninst‚úù¬≤ : TopologicalGroup G\ninst‚úù¬π : CompactSpace G\ninst‚úù : CategoryTheory.PreGaloisCategory.IsFundamentalGroup F G\n‚ä¢ IsHomeomorph ‚áë(CategoryTheory.PreGaloisCategory.toAut F G)","decl":"lemma toAut_isHomeomorph : IsHomeomorph (toAut F G) := by\n  rw [isHomeomorph_iff_continuous_bijective]\n  exact ‚ü®toAut_continuous F G, toAut_bijective F G‚ü©\n\n"}
{"name":"CategoryTheory.PreGaloisCategory.toAutMulEquiv_isHomeomorph","module":"Mathlib.CategoryTheory.Galois.IsFundamentalgroup","initialProofState":"C : Type u‚ÇÅ\ninst‚úù‚Å∏ : CategoryTheory.Category.{u‚ÇÇ, u‚ÇÅ} C\nF : CategoryTheory.Functor C FintypeCat\ninst‚úù‚Å∑ : CategoryTheory.GaloisCategory C\nG : Type u_1\ninst‚úù‚Å∂ : Group G\ninst‚úù‚Åµ : (X : C) ‚Üí MulAction G ‚Üë(F.obj X)\ninst‚úù‚Å¥ : CategoryTheory.PreGaloisCategory.FiberFunctor F\ninst‚úù¬≥ : TopologicalSpace G\ninst‚úù¬≤ : TopologicalGroup G\ninst‚úù¬π : CompactSpace G\ninst‚úù : CategoryTheory.PreGaloisCategory.IsFundamentalGroup F G\n‚ä¢ IsHomeomorph ‚áë(CategoryTheory.PreGaloisCategory.toAutMulEquiv F G)","decl":"lemma toAutMulEquiv_isHomeomorph : IsHomeomorph (toAutMulEquiv F G) :=\n  toAut_isHomeomorph F G\n\n"}
{"name":"CategoryTheory.PreGaloisCategory.toAutMulEquiv_apply","module":"Mathlib.CategoryTheory.Galois.IsFundamentalgroup","initialProofState":"C : Type u‚ÇÅ\ninst‚úù‚Å∏ : CategoryTheory.Category.{u‚ÇÇ, u‚ÇÅ} C\nF : CategoryTheory.Functor C FintypeCat\ninst‚úù‚Å∑ : CategoryTheory.GaloisCategory C\nG : Type u_1\ninst‚úù‚Å∂ : Group G\ninst‚úù‚Åµ : (X : C) ‚Üí MulAction G ‚Üë(F.obj X)\ninst‚úù‚Å¥ : CategoryTheory.PreGaloisCategory.FiberFunctor F\ninst‚úù¬≥ : TopologicalSpace G\ninst‚úù¬≤ : TopologicalGroup G\ninst‚úù¬π : CompactSpace G\ninst‚úù : CategoryTheory.PreGaloisCategory.IsFundamentalGroup F G\ng : G\n‚ä¢ Eq ((CategoryTheory.PreGaloisCategory.toAutMulEquiv F G) g) ((CategoryTheory.PreGaloisCategory.toAut F G) g)","decl":"@[simp]\nlemma toAutMulEquiv_apply (g : G) : toAutMulEquiv F G g = toAut F G g := rfl\n\n"}
{"name":"CategoryTheory.PreGaloisCategory.toAutHomeo_apply","module":"Mathlib.CategoryTheory.Galois.IsFundamentalgroup","initialProofState":"C : Type u‚ÇÅ\ninst‚úù‚Å∏ : CategoryTheory.Category.{u‚ÇÇ, u‚ÇÅ} C\nF : CategoryTheory.Functor C FintypeCat\ninst‚úù‚Å∑ : CategoryTheory.GaloisCategory C\nG : Type u_1\ninst‚úù‚Å∂ : Group G\ninst‚úù‚Åµ : (X : C) ‚Üí MulAction G ‚Üë(F.obj X)\ninst‚úù‚Å¥ : CategoryTheory.PreGaloisCategory.FiberFunctor F\ninst‚úù¬≥ : TopologicalSpace G\ninst‚úù¬≤ : TopologicalGroup G\ninst‚úù¬π : CompactSpace G\ninst‚úù : CategoryTheory.PreGaloisCategory.IsFundamentalGroup F G\ng : G\n‚ä¢ Eq ((CategoryTheory.PreGaloisCategory.toAutHomeo F G) g) ((CategoryTheory.PreGaloisCategory.toAut F G) g)","decl":"@[simp]\nlemma toAutHomeo_apply (g : G) : toAutHomeo F G g = toAut F G g := rfl\n\n"}
