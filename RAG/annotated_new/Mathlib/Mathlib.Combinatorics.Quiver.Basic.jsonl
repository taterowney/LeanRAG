{"name":"Quiver.Hom.opEquiv_apply","module":"Mathlib.Combinatorics.Quiver.Basic","initialProofState":"V : Type u_1\ninst✝ : Quiver V\nX Y : V\nunop : Quiver.Hom X Y\n⊢ Eq (Quiver.Hom.opEquiv unop) { unop := unop }","decl":"/-- The bijection `(X ⟶ Y) ≃ (op Y ⟶ op X)`. -/\n@[simps]\ndef Hom.opEquiv {V} [Quiver V] {X Y : V} :\n    (X ⟶ Y) ≃ (Opposite.op Y ⟶ Opposite.op X) where\n  toFun := Opposite.op\n  invFun := Opposite.unop\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"Quiver.Hom.opEquiv_symm_apply","module":"Mathlib.Combinatorics.Quiver.Basic","initialProofState":"V : Type u_1\ninst✝ : Quiver V\nX Y : V\nself : Opposite (Quiver.Hom (Opposite.unop { unop := X }) (Opposite.unop { unop := Y }))\n⊢ Eq (Quiver.Hom.opEquiv.symm self) (Opposite.unop self)","decl":"/-- The bijection `(X ⟶ Y) ≃ (op Y ⟶ op X)`. -/\n@[simps]\ndef Hom.opEquiv {V} [Quiver V] {X Y : V} :\n    (X ⟶ Y) ≃ (Opposite.op Y ⟶ Opposite.op X) where\n  toFun := Opposite.op\n  invFun := Opposite.unop\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"Quiver.empty_arrow","module":"Mathlib.Combinatorics.Quiver.Basic","initialProofState":"V : Type u\na b : Quiver.Empty V\n⊢ Eq (Quiver.Hom a b) PEmpty.{u}","decl":"@[simp]\ntheorem empty_arrow {V : Type u} (a b : Empty V) : (a ⟶ b) = PEmpty := rfl\n\n"}
{"name":"Quiver.homOfEq_trans","module":"Mathlib.Combinatorics.Quiver.Basic","initialProofState":"V : Type u_1\ninst✝ : Quiver V\nX Y : V\nf : Quiver.Hom X Y\nX' Y' : V\nhX : Eq X X'\nhY : Eq Y Y'\nX'' Y'' : V\nhX' : Eq X' X''\nhY' : Eq Y' Y''\n⊢ Eq (Quiver.homOfEq (Quiver.homOfEq f hX hY) hX' hY') (Quiver.homOfEq f ⋯ ⋯)","decl":"@[simp]\nlemma homOfEq_trans {X Y : V} (f : X ⟶ Y) {X' Y' : V} (hX : X = X') (hY : Y = Y')\n    {X'' Y'' : V} (hX' : X' = X'') (hY' : Y' = Y'') :\n    homOfEq (homOfEq f hX hY) hX' hY' = homOfEq f (hX.trans hX') (hY.trans hY') := by\n  subst hX hY hX' hY'\n  rfl\n\n"}
{"name":"Quiver.homOfEq_injective","module":"Mathlib.Combinatorics.Quiver.Basic","initialProofState":"V : Type u_1\ninst✝ : Quiver V\nX X' Y Y' : V\nhX : Eq X X'\nhY : Eq Y Y'\nf g : Quiver.Hom X Y\nh : Eq (Quiver.homOfEq f hX hY) (Quiver.homOfEq g hX hY)\n⊢ Eq f g","decl":"lemma homOfEq_injective {X X' Y Y' : V} (hX : X = X') (hY : Y = Y')\n    {f g : X ⟶ Y} (h : Quiver.homOfEq f hX hY = Quiver.homOfEq g hX hY) : f = g := by\n  subst hX hY\n  exact h\n\n"}
{"name":"Quiver.homOfEq_rfl","module":"Mathlib.Combinatorics.Quiver.Basic","initialProofState":"V : Type u_1\ninst✝ : Quiver V\nX Y : V\nf : Quiver.Hom X Y\n⊢ Eq (Quiver.homOfEq f ⋯ ⋯) f","decl":"@[simp]\nlemma homOfEq_rfl {X Y : V} (f : X ⟶ Y) : Quiver.homOfEq f rfl rfl = f := rfl\n\n"}
