{"name":"NormedAddGroupHom.completion_def","module":"Mathlib.Analysis.Normed.Group.HomCompletion","initialProofState":"G : Type u_1\ninst✝¹ : SeminormedAddCommGroup G\nH : Type u_2\ninst✝ : SeminormedAddCommGroup H\nf : NormedAddGroupHom G H\nx : UniformSpace.Completion G\n⊢ Eq (f.completion x) (UniformSpace.Completion.map (⇑f) x)","decl":"theorem NormedAddGroupHom.completion_def (f : NormedAddGroupHom G H) (x : Completion G) :\n    f.completion x = Completion.map f x :=\n  rfl\n\n"}
{"name":"NormedAddGroupHom.completion_coe_to_fun","module":"Mathlib.Analysis.Normed.Group.HomCompletion","initialProofState":"G : Type u_1\ninst✝¹ : SeminormedAddCommGroup G\nH : Type u_2\ninst✝ : SeminormedAddCommGroup H\nf : NormedAddGroupHom G H\n⊢ Eq (⇑f.completion) (UniformSpace.Completion.map ⇑f)","decl":"@[simp]\ntheorem NormedAddGroupHom.completion_coe_to_fun (f : NormedAddGroupHom G H) :\n    (f.completion : Completion G → Completion H) = Completion.map f := rfl\n\n-- Porting note: `@[simp]` moved to the next lemma\n"}
{"name":"NormedAddGroupHom.completion_coe","module":"Mathlib.Analysis.Normed.Group.HomCompletion","initialProofState":"G : Type u_1\ninst✝¹ : SeminormedAddCommGroup G\nH : Type u_2\ninst✝ : SeminormedAddCommGroup H\nf : NormedAddGroupHom G H\ng : G\n⊢ Eq (f.completion ↑g) ↑(f g)","decl":"theorem NormedAddGroupHom.completion_coe (f : NormedAddGroupHom G H) (g : G) :\n    f.completion g = f g :=\n  Completion.map_coe f.uniformContinuous _\n\n"}
{"name":"NormedAddGroupHom.completion_coe'","module":"Mathlib.Analysis.Normed.Group.HomCompletion","initialProofState":"G : Type u_1\ninst✝¹ : SeminormedAddCommGroup G\nH : Type u_2\ninst✝ : SeminormedAddCommGroup H\nf : NormedAddGroupHom G H\ng : G\n⊢ Eq (UniformSpace.Completion.map ⇑f ↑g) ↑(f g)","decl":"@[simp]\ntheorem NormedAddGroupHom.completion_coe' (f : NormedAddGroupHom G H) (g : G) :\n    Completion.map f g = f g :=\n  f.completion_coe g\n\n"}
{"name":"normedAddGroupHomCompletionHom_apply","module":"Mathlib.Analysis.Normed.Group.HomCompletion","initialProofState":"G : Type u_1\ninst✝¹ : SeminormedAddCommGroup G\nH : Type u_2\ninst✝ : SeminormedAddCommGroup H\nf : NormedAddGroupHom G H\n⊢ Eq (normedAddGroupHomCompletionHom f) f.completion","decl":"/-- Completion of normed group homs as a normed group hom. -/\n@[simps]\ndef normedAddGroupHomCompletionHom :\n    NormedAddGroupHom G H →+ NormedAddGroupHom (Completion G) (Completion H) where\n  toFun := NormedAddGroupHom.completion\n  map_zero' := toAddMonoidHom_injective AddMonoidHom.completion_zero\n  map_add' f g := toAddMonoidHom_injective <|\n    f.toAddMonoidHom.completion_add g.toAddMonoidHom f.continuous g.continuous\n\n"}
{"name":"NormedAddGroupHom.completion_id","module":"Mathlib.Analysis.Normed.Group.HomCompletion","initialProofState":"G : Type u_1\ninst✝ : SeminormedAddCommGroup G\n⊢ Eq (NormedAddGroupHom.id G).completion (NormedAddGroupHom.id (UniformSpace.Completion G))","decl":"@[simp]\ntheorem NormedAddGroupHom.completion_id :\n    (NormedAddGroupHom.id G).completion = NormedAddGroupHom.id (Completion G) := by\n  ext x\n  rw [NormedAddGroupHom.completion_def, NormedAddGroupHom.coe_id, Completion.map_id]\n  rfl\n\n"}
{"name":"NormedAddGroupHom.completion_comp","module":"Mathlib.Analysis.Normed.Group.HomCompletion","initialProofState":"G : Type u_1\ninst✝² : SeminormedAddCommGroup G\nH : Type u_2\ninst✝¹ : SeminormedAddCommGroup H\nK : Type u_3\ninst✝ : SeminormedAddCommGroup K\nf : NormedAddGroupHom G H\ng : NormedAddGroupHom H K\n⊢ Eq (g.completion.comp f.completion) (g.comp f).completion","decl":"theorem NormedAddGroupHom.completion_comp (f : NormedAddGroupHom G H) (g : NormedAddGroupHom H K) :\n    g.completion.comp f.completion = (g.comp f).completion := by\n  ext x\n  rw [NormedAddGroupHom.coe_comp, NormedAddGroupHom.completion_def,\n    NormedAddGroupHom.completion_coe_to_fun, NormedAddGroupHom.completion_coe_to_fun,\n    Completion.map_comp g.uniformContinuous f.uniformContinuous]\n  rfl\n\n"}
{"name":"NormedAddGroupHom.completion_neg","module":"Mathlib.Analysis.Normed.Group.HomCompletion","initialProofState":"G : Type u_1\ninst✝¹ : SeminormedAddCommGroup G\nH : Type u_2\ninst✝ : SeminormedAddCommGroup H\nf : NormedAddGroupHom G H\n⊢ Eq (Neg.neg f).completion (Neg.neg f.completion)","decl":"theorem NormedAddGroupHom.completion_neg (f : NormedAddGroupHom G H) :\n    (-f).completion = -f.completion :=\n  map_neg (normedAddGroupHomCompletionHom : NormedAddGroupHom G H →+ _) f\n\n"}
{"name":"NormedAddGroupHom.completion_add","module":"Mathlib.Analysis.Normed.Group.HomCompletion","initialProofState":"G : Type u_1\ninst✝¹ : SeminormedAddCommGroup G\nH : Type u_2\ninst✝ : SeminormedAddCommGroup H\nf g : NormedAddGroupHom G H\n⊢ Eq (HAdd.hAdd f g).completion (HAdd.hAdd f.completion g.completion)","decl":"theorem NormedAddGroupHom.completion_add (f g : NormedAddGroupHom G H) :\n    (f + g).completion = f.completion + g.completion :=\n  normedAddGroupHomCompletionHom.map_add f g\n\n"}
{"name":"NormedAddGroupHom.completion_sub","module":"Mathlib.Analysis.Normed.Group.HomCompletion","initialProofState":"G : Type u_1\ninst✝¹ : SeminormedAddCommGroup G\nH : Type u_2\ninst✝ : SeminormedAddCommGroup H\nf g : NormedAddGroupHom G H\n⊢ Eq (HSub.hSub f g).completion (HSub.hSub f.completion g.completion)","decl":"theorem NormedAddGroupHom.completion_sub (f g : NormedAddGroupHom G H) :\n    (f - g).completion = f.completion - g.completion :=\n  map_sub (normedAddGroupHomCompletionHom : NormedAddGroupHom G H →+ _) f g\n\n"}
{"name":"NormedAddGroupHom.zero_completion","module":"Mathlib.Analysis.Normed.Group.HomCompletion","initialProofState":"G : Type u_1\ninst✝¹ : SeminormedAddCommGroup G\nH : Type u_2\ninst✝ : SeminormedAddCommGroup H\n⊢ Eq (NormedAddGroupHom.completion 0) 0","decl":"@[simp]\ntheorem NormedAddGroupHom.zero_completion : (0 : NormedAddGroupHom G H).completion = 0 :=\n  normedAddGroupHomCompletionHom.map_zero\n\n"}
{"name":"NormedAddCommGroup.toCompl_apply","module":"Mathlib.Analysis.Normed.Group.HomCompletion","initialProofState":"G : Type u_1\ninst✝ : SeminormedAddCommGroup G\na✝ : G\n⊢ Eq (NormedAddCommGroup.toCompl a✝) ↑a✝","decl":"/-- The map from a normed group to its completion, as a normed group hom. -/\n@[simps]\ndef NormedAddCommGroup.toCompl : NormedAddGroupHom G (Completion G) where\n  toFun := (↑)\n  map_add' := Completion.toCompl.map_add\n  bound' := ⟨1, by simp [le_refl]⟩\n\n"}
{"name":"NormedAddCommGroup.norm_toCompl","module":"Mathlib.Analysis.Normed.Group.HomCompletion","initialProofState":"G : Type u_1\ninst✝ : SeminormedAddCommGroup G\nx : G\n⊢ Eq (Norm.norm (NormedAddCommGroup.toCompl x)) (Norm.norm x)","decl":"theorem NormedAddCommGroup.norm_toCompl (x : G) : ‖toCompl x‖ = ‖x‖ :=\n  Completion.norm_coe x\n\n"}
{"name":"NormedAddCommGroup.denseRange_toCompl","module":"Mathlib.Analysis.Normed.Group.HomCompletion","initialProofState":"G : Type u_1\ninst✝ : SeminormedAddCommGroup G\n⊢ DenseRange ⇑NormedAddCommGroup.toCompl","decl":"theorem NormedAddCommGroup.denseRange_toCompl : DenseRange (toCompl : G → Completion G) :=\n  Completion.isDenseInducing_coe.dense\n\n"}
{"name":"NormedAddGroupHom.completion_toCompl","module":"Mathlib.Analysis.Normed.Group.HomCompletion","initialProofState":"G : Type u_1\ninst✝¹ : SeminormedAddCommGroup G\nH : Type u_2\ninst✝ : SeminormedAddCommGroup H\nf : NormedAddGroupHom G H\n⊢ Eq (f.completion.comp NormedAddCommGroup.toCompl) (NormedAddCommGroup.toCompl.comp f)","decl":"@[simp]\ntheorem NormedAddGroupHom.completion_toCompl (f : NormedAddGroupHom G H) :\n    f.completion.comp toCompl = toCompl.comp f := by ext x; simp\n\n"}
{"name":"NormedAddGroupHom.norm_completion","module":"Mathlib.Analysis.Normed.Group.HomCompletion","initialProofState":"G : Type u_1\ninst✝¹ : SeminormedAddCommGroup G\nH : Type u_2\ninst✝ : SeminormedAddCommGroup H\nf : NormedAddGroupHom G H\n⊢ Eq (Norm.norm f.completion) (Norm.norm f)","decl":"@[simp]\ntheorem NormedAddGroupHom.norm_completion (f : NormedAddGroupHom G H) : ‖f.completion‖ = ‖f‖ :=\n  le_antisymm (ofLipschitz_norm_le _ _) <| opNorm_le_bound _ (norm_nonneg _) fun x => by\n    simpa using f.completion.le_opNorm x\n\n"}
{"name":"NormedAddGroupHom.ker_le_ker_completion","module":"Mathlib.Analysis.Normed.Group.HomCompletion","initialProofState":"G : Type u_1\ninst✝¹ : SeminormedAddCommGroup G\nH : Type u_2\ninst✝ : SeminormedAddCommGroup H\nf : NormedAddGroupHom G H\n⊢ LE.le (NormedAddCommGroup.toCompl.comp (NormedAddGroupHom.incl f.ker)).range f.completion.ker","decl":"theorem NormedAddGroupHom.ker_le_ker_completion (f : NormedAddGroupHom G H) :\n    (toCompl.comp <| incl f.ker).range ≤ f.completion.ker := by\n  rintro _ ⟨⟨g, h₀ : f g = 0⟩, rfl⟩\n  simp [h₀, mem_ker, Completion.coe_zero]\n\n"}
{"name":"NormedAddGroupHom.ker_completion","module":"Mathlib.Analysis.Normed.Group.HomCompletion","initialProofState":"G : Type u_1\ninst✝¹ : SeminormedAddCommGroup G\nH : Type u_2\ninst✝ : SeminormedAddCommGroup H\nf : NormedAddGroupHom G H\nC : Real\nh : f.SurjectiveOnWith f.range C\n⊢ Eq (↑f.completion.ker) (closure ↑(NormedAddCommGroup.toCompl.comp (NormedAddGroupHom.incl f.ker)).range)","decl":"theorem NormedAddGroupHom.ker_completion {f : NormedAddGroupHom G H} {C : ℝ}\n    (h : f.SurjectiveOnWith f.range C) :\n    (f.completion.ker : Set <| Completion G) = closure (toCompl.comp <| incl f.ker).range := by\n  refine le_antisymm ?_ (closure_minimal f.ker_le_ker_completion f.completion.isClosed_ker)\n  rintro hatg (hatg_in : f.completion hatg = 0)\n  rw [SeminormedAddCommGroup.mem_closure_iff]\n  intro ε ε_pos\n  rcases h.exists_pos with ⟨C', C'_pos, hC'⟩\n  rcases exists_pos_mul_lt ε_pos (1 + C' * ‖f‖) with ⟨δ, δ_pos, hδ⟩\n  obtain ⟨_, ⟨g : G, rfl⟩, hg : ‖hatg - g‖ < δ⟩ :=\n    SeminormedAddCommGroup.mem_closure_iff.mp (Completion.isDenseInducing_coe.dense hatg) δ δ_pos\n  obtain ⟨g' : G, hgg' : f g' = f g, hfg : ‖g'‖ ≤ C' * ‖f g‖⟩ := hC' (f g) (mem_range_self _ g)\n  have mem_ker : g - g' ∈ f.ker := by rw [f.mem_ker, map_sub, sub_eq_zero.mpr hgg'.symm]\n  refine ⟨_, ⟨⟨g - g', mem_ker⟩, rfl⟩, ?_⟩\n  have : ‖f g‖ ≤ ‖f‖ * δ := calc\n    ‖f g‖ ≤ ‖f‖ * ‖hatg - g‖ := by\n      simpa [map_sub, hatg_in] using f.completion.le_opNorm (hatg - g)\n    _ ≤ ‖f‖ * δ := by gcongr\n  calc ‖hatg - ↑(g - g')‖ = ‖hatg - g + g'‖ := by rw [Completion.coe_sub, sub_add]\n    _ ≤ ‖hatg - g‖ + ‖(g' : Completion G)‖ := norm_add_le _ _\n    _ = ‖hatg - g‖ + ‖g'‖ := by rw [Completion.norm_coe]\n    _ < δ + C' * ‖f g‖ := add_lt_add_of_lt_of_le hg hfg\n    _ ≤ δ + C' * (‖f‖ * δ) := by gcongr\n    _ < ε := by simpa only [add_mul, one_mul, mul_assoc] using hδ\n\n"}
{"name":"NormedAddGroupHom.extension_def","module":"Mathlib.Analysis.Normed.Group.HomCompletion","initialProofState":"G : Type u_1\ninst✝³ : SeminormedAddCommGroup G\nH : Type u_2\ninst✝² : SeminormedAddCommGroup H\ninst✝¹ : T0Space H\ninst✝ : CompleteSpace H\nf : NormedAddGroupHom G H\nv : G\n⊢ Eq (f.extension ↑v) (UniformSpace.Completion.extension ⇑f ↑v)","decl":"theorem NormedAddGroupHom.extension_def (f : NormedAddGroupHom G H) (v : G) :\n    f.extension v = Completion.extension f v :=\n  rfl\n\n"}
{"name":"NormedAddGroupHom.extension_coe","module":"Mathlib.Analysis.Normed.Group.HomCompletion","initialProofState":"G : Type u_1\ninst✝³ : SeminormedAddCommGroup G\nH : Type u_2\ninst✝² : SeminormedAddCommGroup H\ninst✝¹ : T0Space H\ninst✝ : CompleteSpace H\nf : NormedAddGroupHom G H\nv : G\n⊢ Eq (f.extension ↑v) (f v)","decl":"@[simp]\ntheorem NormedAddGroupHom.extension_coe (f : NormedAddGroupHom G H) (v : G) : f.extension v = f v :=\n  AddMonoidHom.extension_coe _ f.continuous _\n\n"}
{"name":"NormedAddGroupHom.extension_coe_to_fun","module":"Mathlib.Analysis.Normed.Group.HomCompletion","initialProofState":"G : Type u_1\ninst✝³ : SeminormedAddCommGroup G\nH : Type u_2\ninst✝² : SeminormedAddCommGroup H\ninst✝¹ : T0Space H\ninst✝ : CompleteSpace H\nf : NormedAddGroupHom G H\n⊢ Eq (⇑f.extension) (UniformSpace.Completion.extension ⇑f)","decl":"theorem NormedAddGroupHom.extension_coe_to_fun (f : NormedAddGroupHom G H) :\n    (f.extension : Completion G → H) = Completion.extension f :=\n  rfl\n\n"}
{"name":"NormedAddGroupHom.extension_unique","module":"Mathlib.Analysis.Normed.Group.HomCompletion","initialProofState":"G : Type u_1\ninst✝³ : SeminormedAddCommGroup G\nH : Type u_2\ninst✝² : SeminormedAddCommGroup H\ninst✝¹ : T0Space H\ninst✝ : CompleteSpace H\nf : NormedAddGroupHom G H\ng : NormedAddGroupHom (UniformSpace.Completion G) H\nhg : ∀ (v : G), Eq (f v) (g ↑v)\n⊢ Eq f.extension g","decl":"theorem NormedAddGroupHom.extension_unique (f : NormedAddGroupHom G H)\n    {g : NormedAddGroupHom (Completion G) H} (hg : ∀ v, f v = g v) : f.extension = g := by\n  ext v\n  rw [NormedAddGroupHom.extension_coe_to_fun,\n    Completion.extension_unique f.uniformContinuous g.uniformContinuous fun a => hg a]\n\n"}
