{"name":"QuasiErgodic.ae_eq_const_of_ae_eq_comp_of_ae_range₀","module":"Mathlib.Dynamics.Ergodic.Function","initialProofState":"α : Type u_1\nX : Type u_2\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : Nonempty X\ninst✝¹ : MeasurableSpace X\ns : Set X\ninst✝ : MeasurableSpace.CountablySeparated ↑s\nf : α → α\ng : α → X\nh : QuasiErgodic f μ\nhs : Filter.Eventually (fun x => Membership.mem s (g x)) (MeasureTheory.ae μ)\nhgm : MeasureTheory.NullMeasurable g μ\nhg_eq : (MeasureTheory.ae μ).EventuallyEq (Function.comp g f) g\n⊢ Exists fun c => (MeasureTheory.ae μ).EventuallyEq g (Function.const α c)","decl":"/-- Let `f : α → α` be a (quasi)ergodic map. Let `g : α → X` is a null-measurable function\nfrom `α` to a nonempty space with a countable family of measurable sets\nseparating points of a set `s` such that `f x ∈ s` for a.e. `x`.\nIf `g` that is a.e.-invariant under `f`, then `g` is a.e. constant. -/\ntheorem QuasiErgodic.ae_eq_const_of_ae_eq_comp_of_ae_range₀ [Nonempty X] [MeasurableSpace X]\n    {s : Set X} [MeasurableSpace.CountablySeparated s] {f : α → α} {g : α → X}\n    (h : QuasiErgodic f μ) (hs : ∀ᵐ x ∂μ, g x ∈ s) (hgm : NullMeasurable g μ)\n    (hg_eq : g ∘ f =ᵐ[μ] g) :\n    ∃ c, g =ᵐ[μ] const α c := by\n  refine exists_eventuallyEq_const_of_eventually_mem_of_forall_separating MeasurableSet hs ?_\n  refine fun U hU ↦ h.ae_mem_or_ae_nmem₀ (s := g ⁻¹' U) (hgm hU) ?_b\n  refine (hg_eq.mono fun x hx ↦ ?_).set_eq\n  rw [← preimage_comp, mem_preimage, mem_preimage, hx]\n\n"}
{"name":"PreErgodic.ae_eq_const_of_ae_eq_comp","module":"Mathlib.Dynamics.Ergodic.Function","initialProofState":"α : Type u_1\nX : Type u_2\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : Nonempty X\ninst✝¹ : MeasurableSpace X\ninst✝ : MeasurableSpace.CountablySeparated X\nf : α → α\ng : α → X\nh : PreErgodic f μ\nhgm : Measurable g\nhg_eq : Eq (Function.comp g f) g\n⊢ Exists fun c => (MeasureTheory.ae μ).EventuallyEq g (Function.const α c)","decl":"/-- Let `f : α → α` be a (pre)ergodic map.\nLet `g : α → X` be a measurable function from `α` to a nonempty measurable space\nwith a countable family of measurable sets separating the points of `X`.\nIf `g` is invariant under `f`, then `g` is a.e. constant. -/\ntheorem PreErgodic.ae_eq_const_of_ae_eq_comp (h : PreErgodic f μ) (hgm : Measurable g)\n    (hg_eq : g ∘ f = g) : ∃ c, g =ᵐ[μ] const α c :=\n  exists_eventuallyEq_const_of_forall_separating MeasurableSet fun U hU ↦\n    h.ae_mem_or_ae_nmem (s := g ⁻¹' U) (hgm hU) <| by rw [← preimage_comp, hg_eq]\n\n"}
{"name":"QuasiErgodic.ae_eq_const_of_ae_eq_comp₀","module":"Mathlib.Dynamics.Ergodic.Function","initialProofState":"α : Type u_1\nX : Type u_2\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : Nonempty X\ninst✝¹ : MeasurableSpace X\ninst✝ : MeasurableSpace.CountablySeparated X\nf : α → α\ng : α → X\nh : QuasiErgodic f μ\nhgm : MeasureTheory.NullMeasurable g μ\nhg_eq : (MeasureTheory.ae μ).EventuallyEq (Function.comp g f) g\n⊢ Exists fun c => (MeasureTheory.ae μ).EventuallyEq g (Function.const α c)","decl":"/-- Let `f : α → α` be a quasi ergodic map.\nLet `g : α → X` be a null-measurable function from `α` to a nonempty measurable space\nwith a countable family of measurable sets separating the points of `X`.\nIf `g` is a.e.-invariant under `f`, then `g` is a.e. constant. -/\ntheorem QuasiErgodic.ae_eq_const_of_ae_eq_comp₀ (h : QuasiErgodic f μ) (hgm : NullMeasurable g μ)\n    (hg_eq : g ∘ f =ᵐ[μ] g) : ∃ c, g =ᵐ[μ] const α c :=\n  h.ae_eq_const_of_ae_eq_comp_of_ae_range₀ (s := univ) univ_mem hgm hg_eq\n\n"}
{"name":"Ergodic.ae_eq_const_of_ae_eq_comp₀","module":"Mathlib.Dynamics.Ergodic.Function","initialProofState":"α : Type u_1\nX : Type u_2\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : Nonempty X\ninst✝¹ : MeasurableSpace X\ninst✝ : MeasurableSpace.CountablySeparated X\nf : α → α\ng : α → X\nh : Ergodic f μ\nhgm : MeasureTheory.NullMeasurable g μ\nhg_eq : (MeasureTheory.ae μ).EventuallyEq (Function.comp g f) g\n⊢ Exists fun c => (MeasureTheory.ae μ).EventuallyEq g (Function.const α c)","decl":"/-- Let `f : α → α` be an ergodic map.\nLet `g : α → X` be a null-measurable function from `α` to a nonempty measurable space\nwith a countable family of measurable sets separating the points of `X`.\nIf `g` is a.e.-invariant under `f`, then `g` is a.e. constant. -/\ntheorem Ergodic.ae_eq_const_of_ae_eq_comp₀ (h : Ergodic f μ) (hgm : NullMeasurable g μ)\n    (hg_eq : g ∘ f =ᵐ[μ] g) : ∃ c, g =ᵐ[μ] const α c :=\n  h.quasiErgodic.ae_eq_const_of_ae_eq_comp₀ hgm hg_eq\n\n"}
{"name":"QuasiErgodic.ae_eq_const_of_ae_eq_comp_ae","module":"Mathlib.Dynamics.Ergodic.Function","initialProofState":"α : Type u_1\nX : Type u_2\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace.MetrizableSpace X\ninst✝ : Nonempty X\nf : α → α\ng : α → X\nh : QuasiErgodic f μ\nhgm : MeasureTheory.AEStronglyMeasurable g μ\nhg_eq : (MeasureTheory.ae μ).EventuallyEq (Function.comp g f) g\n⊢ Exists fun c => (MeasureTheory.ae μ).EventuallyEq g (Function.const α c)","decl":"/-- Let `f : α → α` be a quasi ergodic map.\nLet `g : α → X` be an a.e. strongly measurable function\nfrom `α` to a nonempty metrizable topological space.\nIf `g` is a.e.-invariant under `f`, then `g` is a.e. constant. -/\ntheorem ae_eq_const_of_ae_eq_comp_ae {g : α → X} (h : QuasiErgodic f μ)\n    (hgm : AEStronglyMeasurable g μ) (hg_eq : g ∘ f =ᵐ[μ] g) : ∃ c, g =ᵐ[μ] const α c := by\n  borelize X\n  rcases hgm.isSeparable_ae_range with ⟨t, ht, hgt⟩\n  haveI := ht.secondCountableTopology\n  exact h.ae_eq_const_of_ae_eq_comp_of_ae_range₀ hgt hgm.aemeasurable.nullMeasurable hg_eq\n\n"}
{"name":"QuasiErgodic.eq_const_of_compQuasiMeasurePreserving_eq","module":"Mathlib.Dynamics.Ergodic.Function","initialProofState":"α : Type u_1\nX : Type u_2\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace.MetrizableSpace X\ninst✝ : Nonempty X\nf : α → α\nh : QuasiErgodic f μ\ng : MeasureTheory.AEEqFun α X μ\nhg_eq : Eq (g.compQuasiMeasurePreserving f ⋯) g\n⊢ Exists fun c => Eq g (MeasureTheory.AEEqFun.const α c)","decl":"theorem eq_const_of_compQuasiMeasurePreserving_eq (h : QuasiErgodic f μ) {g : α →ₘ[μ] X}\n    (hg_eq : g.compQuasiMeasurePreserving f h.1 = g) : ∃ c, g = .const α c :=\n  have : g ∘ f =ᵐ[μ] g := (g.coeFn_compQuasiMeasurePreserving h.1).symm.trans\n    (hg_eq.symm ▸ .refl _ _)\n  let ⟨c, hc⟩ := h.ae_eq_const_of_ae_eq_comp_ae g.aestronglyMeasurable this\n  ⟨c, AEEqFun.ext <| hc.trans (AEEqFun.coeFn_const _ _).symm⟩\n\n"}
{"name":"Ergodic.ae_eq_const_of_ae_eq_comp_ae","module":"Mathlib.Dynamics.Ergodic.Function","initialProofState":"α : Type u_1\nX : Type u_2\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace.MetrizableSpace X\ninst✝ : Nonempty X\nf : α → α\ng : α → X\nh : Ergodic f μ\nhgm : MeasureTheory.AEStronglyMeasurable g μ\nhg_eq : (MeasureTheory.ae μ).EventuallyEq (Function.comp g f) g\n⊢ Exists fun c => (MeasureTheory.ae μ).EventuallyEq g (Function.const α c)","decl":"/-- Let `f : α → α` be an ergodic map.\nLet `g : α → X` be an a.e. strongly measurable function\nfrom `α` to a nonempty metrizable topological space.\nIf `g` is a.e.-invariant under `f`, then `g` is a.e. constant. -/\ntheorem ae_eq_const_of_ae_eq_comp_ae {g : α → X} (h : Ergodic f μ) (hgm : AEStronglyMeasurable g μ)\n    (hg_eq : g ∘ f =ᵐ[μ] g) : ∃ c, g =ᵐ[μ] const α c :=\n  h.quasiErgodic.ae_eq_const_of_ae_eq_comp_ae hgm hg_eq\n\n"}
{"name":"Ergodic.eq_const_of_compMeasurePreserving_eq","module":"Mathlib.Dynamics.Ergodic.Function","initialProofState":"α : Type u_1\nX : Type u_2\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace.MetrizableSpace X\ninst✝ : Nonempty X\nf : α → α\nh : Ergodic f μ\ng : MeasureTheory.AEEqFun α X μ\nhg_eq : Eq (g.compMeasurePreserving f ⋯) g\n⊢ Exists fun c => Eq g (MeasureTheory.AEEqFun.const α c)","decl":"theorem eq_const_of_compMeasurePreserving_eq (h : Ergodic f μ) {g : α →ₘ[μ] X}\n    (hg_eq : g.compMeasurePreserving f h.1 = g) : ∃ c, g = .const α c :=\n  h.quasiErgodic.eq_const_of_compQuasiMeasurePreserving_eq hg_eq\n\n"}
