{"name":"Nat.exists_infinite_primes","module":"Mathlib.Data.Nat.Prime.Infinite","initialProofState":"n : Nat\n⊢ Exists fun p => And (LE.le n p) (Nat.Prime p)","decl":"/-- Euclid's theorem on the **infinitude of primes**.\nHere given in the form: for every `n`, there exists a prime number `p ≥ n`. -/\ntheorem exists_infinite_primes (n : ℕ) : ∃ p, n ≤ p ∧ Prime p :=\n  let p := minFac (n ! + 1)\n  have f1 : n ! + 1 ≠ 1 := ne_of_gt <| succ_lt_succ <| factorial_pos _\n  have pp : Prime p := minFac_prime f1\n  have np : n ≤ p :=\n    le_of_not_ge fun h =>\n      have h₁ : p ∣ n ! := dvd_factorial (minFac_pos _) h\n      have h₂ : p ∣ 1 := (Nat.dvd_add_iff_right h₁).2 (minFac_dvd _)\n      pp.not_dvd_one h₂\n  ⟨p, np, pp⟩\n\n"}
{"name":"Nat.not_bddAbove_setOf_prime","module":"Mathlib.Data.Nat.Prime.Infinite","initialProofState":"⊢ Not (BddAbove (setOf fun p => Nat.Prime p))","decl":"/-- A version of `Nat.exists_infinite_primes` using the `BddAbove` predicate. -/\ntheorem not_bddAbove_setOf_prime : ¬BddAbove { p | Prime p } := by\n  rw [not_bddAbove_iff]\n  intro n\n  obtain ⟨p, hi, hp⟩ := exists_infinite_primes n.succ\n  exact ⟨p, hp, hi⟩\n\n"}
