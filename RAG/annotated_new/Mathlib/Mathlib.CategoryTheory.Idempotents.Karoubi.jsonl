{"name":"CategoryTheory.Idempotents.Karoubi.mk.inj","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nX✝ : C\np✝ : Quiver.Hom X✝ X✝\nidem✝ : autoParam (Eq (CategoryTheory.CategoryStruct.comp p✝ p✝) p✝) _auto✝\nX : C\np : Quiver.Hom X X\nidem : autoParam (Eq (CategoryTheory.CategoryStruct.comp p p) p) _auto✝\nx✝ : Eq { X := X✝, p := p✝, idem := idem✝ } { X := X, p := p, idem := idem }\n⊢ And (Eq X✝ X) (HEq p✝ p)","decl":"/-- In a preadditive category `C`, when an object `X` decomposes as `X ≅ P ⨿ Q`, one may\nconsider `P` as a direct factor of `X` and up to unique isomorphism, it is determined by the\nobvious idempotent `X ⟶ P ⟶ X` which is the projection onto `P` with kernel `Q`. More generally,\none may define a formal direct factor of an object `X : C` : it consists of an idempotent\n`p : X ⟶ X` which is thought as the \"formal image\" of `p`. The type `Karoubi C` shall be the\ntype of the objects of the karoubi envelope of `C`. It makes sense for any category `C`. -/\nstructure Karoubi where\n  /-- an object of the underlying category -/\n  X : C\n  /-- an endomorphism of the object -/\n  p : X ⟶ X\n  /-- the condition that the given endomorphism is an idempotent -/\n  idem : p ≫ p = p := by aesop_cat\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.mk.injEq","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nX✝ : C\np✝ : Quiver.Hom X✝ X✝\nidem✝ : autoParam (Eq (CategoryTheory.CategoryStruct.comp p✝ p✝) p✝) _auto✝\nX : C\np : Quiver.Hom X X\nidem : autoParam (Eq (CategoryTheory.CategoryStruct.comp p p) p) _auto✝\n⊢ Eq (Eq { X := X✝, p := p✝, idem := idem✝ } { X := X, p := p, idem := idem }) (And (Eq X✝ X) (HEq p✝ p))","decl":"/-- In a preadditive category `C`, when an object `X` decomposes as `X ≅ P ⨿ Q`, one may\nconsider `P` as a direct factor of `X` and up to unique isomorphism, it is determined by the\nobvious idempotent `X ⟶ P ⟶ X` which is the projection onto `P` with kernel `Q`. More generally,\none may define a formal direct factor of an object `X : C` : it consists of an idempotent\n`p : X ⟶ X` which is thought as the \"formal image\" of `p`. The type `Karoubi C` shall be the\ntype of the objects of the karoubi envelope of `C`. It makes sense for any category `C`. -/\nstructure Karoubi where\n  /-- an object of the underlying category -/\n  X : C\n  /-- an endomorphism of the object -/\n  p : X ⟶ X\n  /-- the condition that the given endomorphism is an idempotent -/\n  idem : p ≫ p = p := by aesop_cat\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.idem","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nself : CategoryTheory.Idempotents.Karoubi C\n⊢ Eq (CategoryTheory.CategoryStruct.comp self.p self.p) self.p","decl":"/-- In a preadditive category `C`, when an object `X` decomposes as `X ≅ P ⨿ Q`, one may\nconsider `P` as a direct factor of `X` and up to unique isomorphism, it is determined by the\nobvious idempotent `X ⟶ P ⟶ X` which is the projection onto `P` with kernel `Q`. More generally,\none may define a formal direct factor of an object `X : C` : it consists of an idempotent\n`p : X ⟶ X` which is thought as the \"formal image\" of `p`. The type `Karoubi C` shall be the\ntype of the objects of the karoubi envelope of `C`. It makes sense for any category `C`. -/\nstructure Karoubi where\n  /-- an object of the underlying category -/\n  X : C\n  /-- an endomorphism of the object -/\n  p : X ⟶ X\n  /-- the condition that the given endomorphism is an idempotent -/\n  idem : p ≫ p = p := by aesop_cat\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.mk.sizeOf_spec","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_2, u_1} C\ninst✝ : SizeOf C\nX : C\np : Quiver.Hom X X\nidem : autoParam (Eq (CategoryTheory.CategoryStruct.comp p p) p) _auto✝\n⊢ Eq (SizeOf.sizeOf { X := X, p := p, idem := idem }) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf X)) (SizeOf.sizeOf p)) (SizeOf.sizeOf idem))","decl":"/-- In a preadditive category `C`, when an object `X` decomposes as `X ≅ P ⨿ Q`, one may\nconsider `P` as a direct factor of `X` and up to unique isomorphism, it is determined by the\nobvious idempotent `X ⟶ P ⟶ X` which is the projection onto `P` with kernel `Q`. More generally,\none may define a formal direct factor of an object `X : C` : it consists of an idempotent\n`p : X ⟶ X` which is thought as the \"formal image\" of `p`. The type `Karoubi C` shall be the\ntype of the objects of the karoubi envelope of `C`. It makes sense for any category `C`. -/\nstructure Karoubi where\n  /-- an object of the underlying category -/\n  X : C\n  /-- an endomorphism of the object -/\n  p : X ⟶ X\n  /-- the condition that the given endomorphism is an idempotent -/\n  idem : p ≫ p = p := by aesop_cat\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.idem_assoc","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nself : CategoryTheory.Idempotents.Karoubi C\nZ : C\nh : Quiver.Hom self.X Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp self.p (CategoryTheory.CategoryStruct.comp self.p h)) (CategoryTheory.CategoryStruct.comp self.p h)","decl":"attribute [reassoc (attr := simp)] idem\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.ext","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP Q : CategoryTheory.Idempotents.Karoubi C\nh_X : Eq P.X Q.X\nh_p : Eq (CategoryTheory.CategoryStruct.comp P.p (CategoryTheory.eqToHom h_X)) (CategoryTheory.CategoryStruct.comp (CategoryTheory.eqToHom h_X) Q.p)\n⊢ Eq P Q","decl":"@[ext (iff := false)]\ntheorem ext {P Q : Karoubi C} (h_X : P.X = Q.X) (h_p : P.p ≫ eqToHom h_X = eqToHom h_X ≫ Q.p) :\n    P = Q := by\n  cases P\n  cases Q\n  dsimp at h_X h_p\n  subst h_X\n  simpa only [mk.injEq, heq_eq_eq, true_and, eqToHom_refl, comp_id, id_comp] using h_p\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.Hom.ext_iff","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP Q : CategoryTheory.Idempotents.Karoubi C\nx y : P.Hom Q\n⊢ Iff (Eq x y) (Eq x.f y.f)","decl":"/-- A morphism `P ⟶ Q` in the category `Karoubi C` is a morphism in the underlying category\n`C` which satisfies a relation, which in the preadditive case, expresses that it induces a\nmap between the corresponding \"formal direct factors\" and that it vanishes on the complement\nformal direct factor. -/\n@[ext]\nstructure Hom (P Q : Karoubi C) where\n  /-- a morphism between the underlying objects -/\n  f : P.X ⟶ Q.X\n  /-- compatibility of the given morphism with the given idempotents -/\n  comm : f = P.p ≫ f ≫ Q.p := by aesop_cat\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.Hom.mk.inj","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP Q : CategoryTheory.Idempotents.Karoubi C\nf✝ : Quiver.Hom P.X Q.X\ncomm✝ : autoParam (Eq f✝ (CategoryTheory.CategoryStruct.comp P.p (CategoryTheory.CategoryStruct.comp f✝ Q.p))) _auto✝\nf : Quiver.Hom P.X Q.X\ncomm : autoParam (Eq f (CategoryTheory.CategoryStruct.comp P.p (CategoryTheory.CategoryStruct.comp f Q.p))) _auto✝\nx✝ : Eq { f := f✝, comm := comm✝ } { f := f, comm := comm }\n⊢ Eq f✝ f","decl":"/-- A morphism `P ⟶ Q` in the category `Karoubi C` is a morphism in the underlying category\n`C` which satisfies a relation, which in the preadditive case, expresses that it induces a\nmap between the corresponding \"formal direct factors\" and that it vanishes on the complement\nformal direct factor. -/\n@[ext]\nstructure Hom (P Q : Karoubi C) where\n  /-- a morphism between the underlying objects -/\n  f : P.X ⟶ Q.X\n  /-- compatibility of the given morphism with the given idempotents -/\n  comm : f = P.p ≫ f ≫ Q.p := by aesop_cat\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.Hom.ext","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP Q : CategoryTheory.Idempotents.Karoubi C\nx y : P.Hom Q\nf : Eq x.f y.f\n⊢ Eq x y","decl":"/-- A morphism `P ⟶ Q` in the category `Karoubi C` is a morphism in the underlying category\n`C` which satisfies a relation, which in the preadditive case, expresses that it induces a\nmap between the corresponding \"formal direct factors\" and that it vanishes on the complement\nformal direct factor. -/\n@[ext]\nstructure Hom (P Q : Karoubi C) where\n  /-- a morphism between the underlying objects -/\n  f : P.X ⟶ Q.X\n  /-- compatibility of the given morphism with the given idempotents -/\n  comm : f = P.p ≫ f ≫ Q.p := by aesop_cat\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.Hom.mk.injEq","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP Q : CategoryTheory.Idempotents.Karoubi C\nf✝ : Quiver.Hom P.X Q.X\ncomm✝ : autoParam (Eq f✝ (CategoryTheory.CategoryStruct.comp P.p (CategoryTheory.CategoryStruct.comp f✝ Q.p))) _auto✝\nf : Quiver.Hom P.X Q.X\ncomm : autoParam (Eq f (CategoryTheory.CategoryStruct.comp P.p (CategoryTheory.CategoryStruct.comp f Q.p))) _auto✝\n⊢ Eq (Eq { f := f✝, comm := comm✝ } { f := f, comm := comm }) (Eq f✝ f)","decl":"/-- A morphism `P ⟶ Q` in the category `Karoubi C` is a morphism in the underlying category\n`C` which satisfies a relation, which in the preadditive case, expresses that it induces a\nmap between the corresponding \"formal direct factors\" and that it vanishes on the complement\nformal direct factor. -/\n@[ext]\nstructure Hom (P Q : Karoubi C) where\n  /-- a morphism between the underlying objects -/\n  f : P.X ⟶ Q.X\n  /-- compatibility of the given morphism with the given idempotents -/\n  comm : f = P.p ≫ f ≫ Q.p := by aesop_cat\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.Hom.mk.sizeOf_spec","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_2, u_1} C\nP Q : CategoryTheory.Idempotents.Karoubi C\ninst✝ : SizeOf C\nf : Quiver.Hom P.X Q.X\ncomm : autoParam (Eq f (CategoryTheory.CategoryStruct.comp P.p (CategoryTheory.CategoryStruct.comp f Q.p))) _auto✝\n⊢ Eq (SizeOf.sizeOf { f := f, comm := comm }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf f)) (SizeOf.sizeOf comm))","decl":"/-- A morphism `P ⟶ Q` in the category `Karoubi C` is a morphism in the underlying category\n`C` which satisfies a relation, which in the preadditive case, expresses that it induces a\nmap between the corresponding \"formal direct factors\" and that it vanishes on the complement\nformal direct factor. -/\n@[ext]\nstructure Hom (P Q : Karoubi C) where\n  /-- a morphism between the underlying objects -/\n  f : P.X ⟶ Q.X\n  /-- compatibility of the given morphism with the given idempotents -/\n  comm : f = P.p ≫ f ≫ Q.p := by aesop_cat\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.Hom.comm","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP Q : CategoryTheory.Idempotents.Karoubi C\nself : P.Hom Q\n⊢ Eq self.f (CategoryTheory.CategoryStruct.comp P.p (CategoryTheory.CategoryStruct.comp self.f Q.p))","decl":"/-- A morphism `P ⟶ Q` in the category `Karoubi C` is a morphism in the underlying category\n`C` which satisfies a relation, which in the preadditive case, expresses that it induces a\nmap between the corresponding \"formal direct factors\" and that it vanishes on the complement\nformal direct factor. -/\n@[ext]\nstructure Hom (P Q : Karoubi C) where\n  /-- a morphism between the underlying objects -/\n  f : P.X ⟶ Q.X\n  /-- compatibility of the given morphism with the given idempotents -/\n  comm : f = P.p ≫ f ≫ Q.p := by aesop_cat\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.p_comp","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP Q : CategoryTheory.Idempotents.Karoubi C\nf : P.Hom Q\n⊢ Eq (CategoryTheory.CategoryStruct.comp P.p f.f) f.f","decl":"@[reassoc (attr := simp)]\ntheorem p_comp {P Q : Karoubi C} (f : Hom P Q) : P.p ≫ f.f = f.f := by rw [f.comm, ← assoc, P.idem]\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.p_comp_assoc","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP Q : CategoryTheory.Idempotents.Karoubi C\nf : P.Hom Q\nZ : C\nh : Quiver.Hom Q.X Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp P.p (CategoryTheory.CategoryStruct.comp f.f h)) (CategoryTheory.CategoryStruct.comp f.f h)","decl":"@[reassoc (attr := simp)]\ntheorem p_comp {P Q : Karoubi C} (f : Hom P Q) : P.p ≫ f.f = f.f := by rw [f.comm, ← assoc, P.idem]\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.comp_p_assoc","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP Q : CategoryTheory.Idempotents.Karoubi C\nf : P.Hom Q\nZ : C\nh : Quiver.Hom Q.X Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp f.f (CategoryTheory.CategoryStruct.comp Q.p h)) (CategoryTheory.CategoryStruct.comp f.f h)","decl":"@[reassoc (attr := simp)]\ntheorem comp_p {P Q : Karoubi C} (f : Hom P Q) : f.f ≫ Q.p = f.f := by\n  rw [f.comm, assoc, assoc, Q.idem]\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.comp_p","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP Q : CategoryTheory.Idempotents.Karoubi C\nf : P.Hom Q\n⊢ Eq (CategoryTheory.CategoryStruct.comp f.f Q.p) f.f","decl":"@[reassoc (attr := simp)]\ntheorem comp_p {P Q : Karoubi C} (f : Hom P Q) : f.f ≫ Q.p = f.f := by\n  rw [f.comm, assoc, assoc, Q.idem]\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.p_comm_assoc","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP Q : CategoryTheory.Idempotents.Karoubi C\nf : P.Hom Q\nZ : C\nh : Quiver.Hom Q.X Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp P.p (CategoryTheory.CategoryStruct.comp f.f h)) (CategoryTheory.CategoryStruct.comp f.f (CategoryTheory.CategoryStruct.comp Q.p h))","decl":"@[reassoc]\ntheorem p_comm {P Q : Karoubi C} (f : Hom P Q) : P.p ≫ f.f = f.f ≫ Q.p := by rw [p_comp, comp_p]\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.p_comm","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP Q : CategoryTheory.Idempotents.Karoubi C\nf : P.Hom Q\n⊢ Eq (CategoryTheory.CategoryStruct.comp P.p f.f) (CategoryTheory.CategoryStruct.comp f.f Q.p)","decl":"@[reassoc]\ntheorem p_comm {P Q : Karoubi C} (f : Hom P Q) : P.p ≫ f.f = f.f ≫ Q.p := by rw [p_comp, comp_p]\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.comp_proof","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP Q R : CategoryTheory.Idempotents.Karoubi C\ng : Q.Hom R\nf : P.Hom Q\n⊢ Eq (CategoryTheory.CategoryStruct.comp f.f g.f) (CategoryTheory.CategoryStruct.comp P.p (CategoryTheory.CategoryStruct.comp (CategoryTheory.CategoryStruct.comp f.f g.f) R.p))","decl":"theorem comp_proof {P Q R : Karoubi C} (g : Hom Q R) (f : Hom P Q) :\n    f.f ≫ g.f = P.p ≫ (f.f ≫ g.f) ≫ R.p := by rw [assoc, comp_p, ← assoc, p_comp]\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.hom_ext_iff","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP Q : CategoryTheory.Idempotents.Karoubi C\nf g : Quiver.Hom P Q\n⊢ Iff (Eq f g) (Eq f.f g.f)","decl":"@[simp]\ntheorem hom_ext_iff {P Q : Karoubi C} {f g : P ⟶ Q} : f = g ↔ f.f = g.f := by\n  constructor\n  · intro h\n    rw [h]\n  · apply Hom.ext\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.hom_ext","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP Q : CategoryTheory.Idempotents.Karoubi C\nf g : Quiver.Hom P Q\nh : Eq f.f g.f\n⊢ Eq f g","decl":"@[ext]\ntheorem hom_ext {P Q : Karoubi C} (f g : P ⟶ Q) (h : f.f = g.f) : f = g := by\n  simpa [hom_ext_iff] using h\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.comp_f","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP Q R : CategoryTheory.Idempotents.Karoubi C\nf : Quiver.Hom P Q\ng : Quiver.Hom Q R\n⊢ Eq (CategoryTheory.CategoryStruct.comp f g).f (CategoryTheory.CategoryStruct.comp f.f g.f)","decl":"@[simp]\ntheorem comp_f {P Q R : Karoubi C} (f : P ⟶ Q) (g : Q ⟶ R) : (f ≫ g).f = f.f ≫ g.f := rfl\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.id_f","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP : CategoryTheory.Idempotents.Karoubi C\n⊢ Eq (CategoryTheory.CategoryStruct.id P).f P.p","decl":"@[simp]\ntheorem id_f {P : Karoubi C} : Hom.f (𝟙 P) = P.p := rfl\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.coe_X","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nX : C\n⊢ Eq { X := X, p := CategoryTheory.CategoryStruct.id X, idem := ⋯ }.X X","decl":"theorem coe_X (X : C) : (X : Karoubi C).X = X := rfl\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.coe_p","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nX : C\n⊢ Eq { X := X, p := CategoryTheory.CategoryStruct.id X, idem := ⋯ }.p (CategoryTheory.CategoryStruct.id X)","decl":"@[simp]\ntheorem coe_p (X : C) : (X : Karoubi C).p = 𝟙 X := rfl\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.eqToHom_f","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP Q : CategoryTheory.Idempotents.Karoubi C\nh : Eq P Q\n⊢ Eq (CategoryTheory.eqToHom h).f (CategoryTheory.CategoryStruct.comp P.p (CategoryTheory.eqToHom ⋯))","decl":"@[simp]\ntheorem eqToHom_f {P Q : Karoubi C} (h : P = Q) :\n    Karoubi.Hom.f (eqToHom h) = P.p ≫ eqToHom (congr_arg Karoubi.X h) := by\n  subst h\n  simp only [eqToHom_refl, Karoubi.id_f, comp_id]\n\n"}
{"name":"CategoryTheory.Idempotents.toKaroubi_obj_p","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nX : C\n⊢ Eq ((CategoryTheory.Idempotents.toKaroubi C).obj X).p (CategoryTheory.CategoryStruct.id X)","decl":"/-- The obvious fully faithful functor `toKaroubi` sends an object `X : C` to the obvious\nformal direct factor of `X` given by `𝟙 X`. -/\n@[simps]\ndef toKaroubi : C ⥤ Karoubi C where\n  obj X := ⟨X, 𝟙 X, by rw [comp_id]⟩\n  map f := ⟨f, by simp only [comp_id, id_comp]⟩\n\n"}
{"name":"CategoryTheory.Idempotents.toKaroubi_map_f","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nX✝ Y✝ : C\nf : Quiver.Hom X✝ Y✝\n⊢ Eq ((CategoryTheory.Idempotents.toKaroubi C).map f).f f","decl":"/-- The obvious fully faithful functor `toKaroubi` sends an object `X : C` to the obvious\nformal direct factor of `X` given by `𝟙 X`. -/\n@[simps]\ndef toKaroubi : C ⥤ Karoubi C where\n  obj X := ⟨X, 𝟙 X, by rw [comp_id]⟩\n  map f := ⟨f, by simp only [comp_id, id_comp]⟩\n\n"}
{"name":"CategoryTheory.Idempotents.toKaroubi_obj_X","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nX : C\n⊢ Eq ((CategoryTheory.Idempotents.toKaroubi C).obj X).X X","decl":"/-- The obvious fully faithful functor `toKaroubi` sends an object `X : C` to the obvious\nformal direct factor of `X` given by `𝟙 X`. -/\n@[simps]\ndef toKaroubi : C ⥤ Karoubi C where\n  obj X := ⟨X, 𝟙 X, by rw [comp_id]⟩\n  map f := ⟨f, by simp only [comp_id, id_comp]⟩\n\n"}
{"name":"CategoryTheory.Idempotents.instFullKaroubiToKaroubi","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\n⊢ (CategoryTheory.Idempotents.toKaroubi C).Full","decl":"instance : (toKaroubi C).Full where map_surjective f := ⟨f.f, rfl⟩\n\n"}
{"name":"CategoryTheory.Idempotents.instFaithfulKaroubiToKaroubi","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\n⊢ (CategoryTheory.Idempotents.toKaroubi C).Faithful","decl":"instance : (toKaroubi C).Faithful where\n  map_injective := fun h => congr_arg Karoubi.Hom.f h\n\n"}
{"name":"CategoryTheory.Idempotents.instAdd_add","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_2, u_1} C\ninst✝ : CategoryTheory.Preadditive C\nP Q : CategoryTheory.Idempotents.Karoubi C\nf g : Quiver.Hom P Q\n⊢ Eq (HAdd.hAdd f g) { f := HAdd.hAdd f.f g.f, comm := ⋯ }","decl":"@[simps add]\ninstance instAdd [Preadditive C] {P Q : Karoubi C} : Add (P ⟶ Q) where\n  add f g := ⟨f.f + g.f, by rw [add_comp, comp_add, ← f.comm, ← g.comm]⟩\n\n"}
{"name":"CategoryTheory.Idempotents.instNeg_neg","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_2, u_1} C\ninst✝ : CategoryTheory.Preadditive C\nP Q : CategoryTheory.Idempotents.Karoubi C\nf : Quiver.Hom P Q\n⊢ Eq (Neg.neg f) { f := Neg.neg f.f, comm := ⋯ }","decl":"@[simps neg]\ninstance instNeg [Preadditive C] {P Q : Karoubi C} : Neg (P ⟶ Q) where\n  neg f := ⟨-f.f, by simpa only [neg_comp, comp_neg, neg_inj] using f.comm⟩\n\n"}
{"name":"CategoryTheory.Idempotents.instZero_zero","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_2, u_1} C\ninst✝ : CategoryTheory.Preadditive C\nP Q : CategoryTheory.Idempotents.Karoubi C\n⊢ Eq 0 { f := 0, comm := ⋯ }","decl":"@[simps zero]\ninstance instZero [Preadditive C] {P Q : Karoubi C} : Zero (P ⟶ Q) where\n  zero := ⟨0, by simp only [comp_zero, zero_comp]⟩\n\n-- dsimp loops when applying this lemma to its LHS,\n-- probably https://github.com/leanprover/lean4/pull/2867\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.hom_eq_zero_iff","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_2, u_1} C\ninst✝ : CategoryTheory.Preadditive C\nP Q : CategoryTheory.Idempotents.Karoubi C\nf : Quiver.Hom P Q\n⊢ Iff (Eq f 0) (Eq f.f 0)","decl":"theorem hom_eq_zero_iff [Preadditive C] {P Q : Karoubi C} {f : P ⟶ Q} : f = 0 ↔ f.f = 0 :=\n  hom_ext_iff\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.inclusionHom_apply","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_2, u_1} C\ninst✝ : CategoryTheory.Preadditive C\nP Q : CategoryTheory.Idempotents.Karoubi C\nf : Quiver.Hom P Q\n⊢ Eq ((P.inclusionHom Q) f) f.f","decl":"/-- The map sending `f : P ⟶ Q` to `f.f : P.X ⟶ Q.X` is additive. -/\n@[simps]\ndef inclusionHom [Preadditive C] (P Q : Karoubi C) : AddMonoidHom (P ⟶ Q) (P.X ⟶ Q.X) where\n  toFun f := f.f\n  map_zero' := rfl\n  map_add' _ _ := rfl\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.sum_hom","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Preadditive C\nP Q : CategoryTheory.Idempotents.Karoubi C\nα : Type u_2\ns : Finset α\nf : α → Quiver.Hom P Q\n⊢ Eq (s.sum fun x => f x).f (s.sum fun x => (f x).f)","decl":"@[simp]\ntheorem sum_hom [Preadditive C] {P Q : Karoubi C} {α : Type*} (s : Finset α) (f : α → (P ⟶ Q)) :\n    (∑ x ∈ s, f x).f = ∑ x ∈ s, (f x).f :=\n  map_sum (inclusionHom P Q) f s\n\n"}
{"name":"CategoryTheory.Idempotents.instAdditiveKaroubiToKaroubi","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_2, u_1} C\ninst✝ : CategoryTheory.Preadditive C\n⊢ (CategoryTheory.Idempotents.toKaroubi C).Additive","decl":"instance [Preadditive C] : Functor.Additive (toKaroubi C) where\n\n"}
{"name":"CategoryTheory.Idempotents.instIsIdempotentCompleteKaroubi","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\n⊢ CategoryTheory.IsIdempotentComplete (CategoryTheory.Idempotents.Karoubi C)","decl":"instance : IsIdempotentComplete (Karoubi C) := by\n  refine ⟨?_⟩\n  intro P p hp\n  simp only [hom_ext_iff, comp_f] at hp\n  use ⟨P.X, p.f, hp⟩\n  use ⟨p.f, by rw [comp_p p, hp]⟩\n  use ⟨p.f, by rw [hp, p_comp p]⟩\n  simp [hp]\n\n"}
{"name":"CategoryTheory.Idempotents.instEssSurjKaroubiToKaroubiOfIsIdempotentComplete","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_2, u_1} C\ninst✝ : CategoryTheory.IsIdempotentComplete C\n⊢ (CategoryTheory.Idempotents.toKaroubi C).EssSurj","decl":"instance [IsIdempotentComplete C] : (toKaroubi C).EssSurj :=\n  ⟨fun P => by\n    rcases IsIdempotentComplete.idempotents_split P.X P.p P.idem with ⟨Y, i, e, ⟨h₁, h₂⟩⟩\n    use Y\n    exact\n      Nonempty.intro\n        { hom := ⟨i, by erw [id_comp, ← h₂, ← assoc, h₁, id_comp]⟩\n          inv := ⟨e, by erw [comp_id, ← h₂, assoc, h₁, comp_id]⟩ }⟩\n\n"}
{"name":"CategoryTheory.Idempotents.toKaroubi_isEquivalence","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_2, u_1} C\ninst✝ : CategoryTheory.IsIdempotentComplete C\n⊢ (CategoryTheory.Idempotents.toKaroubi C).IsEquivalence","decl":"/-- If `C` is idempotent complete, the functor `toKaroubi : C ⥤ Karoubi C` is an equivalence. -/\ninstance toKaroubi_isEquivalence [IsIdempotentComplete C] : (toKaroubi C).IsEquivalence where\n\n"}
{"name":"CategoryTheory.Idempotents.toKaroubiEquivalence_functor_additive","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝² : CategoryTheory.Category.{u_2, u_1} C\ninst✝¹ : CategoryTheory.Preadditive C\ninst✝ : CategoryTheory.IsIdempotentComplete C\n⊢ (CategoryTheory.Idempotents.toKaroubiEquivalence C).functor.Additive","decl":"instance toKaroubiEquivalence_functor_additive [Preadditive C] [IsIdempotentComplete C] :\n    (toKaroubiEquivalence C).functor.Additive :=\n  (inferInstance : (toKaroubi C).Additive)\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.decompId_i_f","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP : CategoryTheory.Idempotents.Karoubi C\n⊢ Eq P.decompId_i.f P.p","decl":"/-- The split mono which appears in the factorisation `decompId P`. -/\n@[simps]\ndef decompId_i (P : Karoubi C) : P ⟶ P.X :=\n  ⟨P.p, by rw [coe_p, comp_id, P.idem]⟩\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.decompId_p_f","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP : CategoryTheory.Idempotents.Karoubi C\n⊢ Eq P.decompId_p.f P.p","decl":"/-- The split epi which appears in the factorisation `decompId P`. -/\n@[simps]\ndef decompId_p (P : Karoubi C) : (P.X : Karoubi C) ⟶ P :=\n  ⟨P.p, by rw [coe_p, id_comp, P.idem]⟩\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.decompId","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP : CategoryTheory.Idempotents.Karoubi C\n⊢ Eq (CategoryTheory.CategoryStruct.id P) (CategoryTheory.CategoryStruct.comp P.decompId_i P.decompId_p)","decl":"/-- The formal direct factor of `P.X` given by the idempotent `P.p` in the category `C`\nis actually a direct factor in the category `Karoubi C`. -/\n@[reassoc]\ntheorem decompId (P : Karoubi C) : 𝟙 P = decompId_i P ≫ decompId_p P := by\n  ext\n  simp only [comp_f, id_f, P.idem, decompId_i, decompId_p]\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.decompId_assoc","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP Z : CategoryTheory.Idempotents.Karoubi C\nh : Quiver.Hom P Z\n⊢ Eq h (CategoryTheory.CategoryStruct.comp P.decompId_i (CategoryTheory.CategoryStruct.comp P.decompId_p h))","decl":"/-- The formal direct factor of `P.X` given by the idempotent `P.p` in the category `C`\nis actually a direct factor in the category `Karoubi C`. -/\n@[reassoc]\ntheorem decompId (P : Karoubi C) : 𝟙 P = decompId_i P ≫ decompId_p P := by\n  ext\n  simp only [comp_f, id_f, P.idem, decompId_i, decompId_p]\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.decomp_p","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP : CategoryTheory.Idempotents.Karoubi C\n⊢ Eq ((CategoryTheory.Idempotents.toKaroubi C).map P.p) (CategoryTheory.CategoryStruct.comp P.decompId_p P.decompId_i)","decl":"theorem decomp_p (P : Karoubi C) : (toKaroubi C).map P.p = decompId_p P ≫ decompId_i P := by\n  ext\n  simp only [comp_f, decompId_p_f, decompId_i_f, P.idem, toKaroubi_map_f]\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.decompId_i_toKaroubi","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nX : C\n⊢ Eq ((CategoryTheory.Idempotents.toKaroubi C).obj X).decompId_i (CategoryTheory.CategoryStruct.id ((CategoryTheory.Idempotents.toKaroubi C).obj X))","decl":"theorem decompId_i_toKaroubi (X : C) : decompId_i ((toKaroubi C).obj X) = 𝟙 _ := by\n  rfl\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.decompId_p_toKaroubi","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nX : C\n⊢ Eq ((CategoryTheory.Idempotents.toKaroubi C).obj X).decompId_p (CategoryTheory.CategoryStruct.id { X := ((CategoryTheory.Idempotents.toKaroubi C).obj X).X, p := CategoryTheory.CategoryStruct.id ((CategoryTheory.Idempotents.toKaroubi C).obj X).X, idem := ⋯ })","decl":"theorem decompId_p_toKaroubi (X : C) : decompId_p ((toKaroubi C).obj X) = 𝟙 _ := by\n  rfl\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.decompId_i_naturality","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP Q : CategoryTheory.Idempotents.Karoubi C\nf : Quiver.Hom P Q\n⊢ Eq (CategoryTheory.CategoryStruct.comp f Q.decompId_i) (CategoryTheory.CategoryStruct.comp P.decompId_i { f := f.f, comm := ⋯ })","decl":"theorem decompId_i_naturality {P Q : Karoubi C} (f : P ⟶ Q) :\n    f ≫ decompId_i Q = decompId_i P ≫ (by exact Hom.mk f.f (by simp)) := by\n  simp\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.decompId_p_naturality","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nP Q : CategoryTheory.Idempotents.Karoubi C\nf : Quiver.Hom P Q\n⊢ Eq (CategoryTheory.CategoryStruct.comp P.decompId_p f) (CategoryTheory.CategoryStruct.comp { f := f.f, comm := ⋯ } Q.decompId_p)","decl":"theorem decompId_p_naturality {P Q : Karoubi C} (f : P ⟶ Q) :\n    decompId_p P ≫ f = (by exact Hom.mk f.f (by simp)) ≫ decompId_p Q := by\n  simp\n\n"}
{"name":"CategoryTheory.Idempotents.Karoubi.zsmul_hom","module":"Mathlib.CategoryTheory.Idempotents.Karoubi","initialProofState":"C : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_2, u_1} C\ninst✝ : CategoryTheory.Preadditive C\nP Q : CategoryTheory.Idempotents.Karoubi C\nn : Int\nf : Quiver.Hom P Q\n⊢ Eq (HSMul.hSMul n f).f (HSMul.hSMul n f.f)","decl":"@[simp]\ntheorem zsmul_hom [Preadditive C] {P Q : Karoubi C} (n : ℤ) (f : P ⟶ Q) : (n • f).f = n • f.f :=\n  map_zsmul (inclusionHom P Q) n f\n\n"}
