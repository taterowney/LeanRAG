{"name":"LieDerivation.ad_apply_apply","module":"Mathlib.Algebra.Lie.Derivation.AdjointAction","initialProofState":"R : Type u_1\nL : Type u_2\ninst✝² : CommRing R\ninst✝¹ : LieRing L\ninst✝ : LieAlgebra R L\na✝ a : L\n⊢ Eq (((LieDerivation.ad R L) a✝) a) (Bracket.bracket a✝ a)","decl":"/-- The adjoint action of a Lie algebra `L` on itself, seen as a morphism of Lie algebras from\n`L` to its derivations.\nNote the minus sign: this is chosen to so that `ad ⁅x, y⁆ = ⁅ad x, ad y⁆`. -/\n@[simps!]\ndef ad : L →ₗ⁅R⁆ LieDerivation R L L :=\n  { __ := - inner R L L\n    map_lie' := by\n      intro x y\n      ext z\n      simp only [AddHom.toFun_eq_coe, LinearMap.coe_toAddHom, LinearMap.neg_apply, coe_neg,\n        Pi.neg_apply, inner_apply_apply, commutator_apply]\n      rw [leibniz_lie, neg_lie, neg_lie, ← lie_skew x]\n      abel }\n\n"}
{"name":"LieDerivation.coe_ad_apply_eq_ad_apply","module":"Mathlib.Algebra.Lie.Derivation.AdjointAction","initialProofState":"R : Type u_1\nL : Type u_2\ninst✝² : CommRing R\ninst✝¹ : LieRing L\ninst✝ : LieAlgebra R L\nx : L\n⊢ Eq (↑((LieDerivation.ad R L) x)) ((LieAlgebra.ad R L) x)","decl":"/-- The definitions `LieDerivation.ad` and `LieAlgebra.ad` agree. -/\n@[simp] lemma coe_ad_apply_eq_ad_apply (x : L) : ad R L x = LieAlgebra.ad R L x := by ext; simp\n\n"}
{"name":"LieDerivation.ad_apply_lieDerivation","module":"Mathlib.Algebra.Lie.Derivation.AdjointAction","initialProofState":"R : Type u_1\nL : Type u_2\ninst✝² : CommRing R\ninst✝¹ : LieRing L\ninst✝ : LieAlgebra R L\nx : L\nD : LieDerivation R L L\n⊢ Eq ((LieDerivation.ad R L) (D x)) (Neg.neg (Bracket.bracket x D))","decl":"lemma ad_apply_lieDerivation (x : L) (D : LieDerivation R L L) : ad R L (D x) = - ⁅x, D⁆ := rfl\n\n"}
{"name":"LieDerivation.lie_ad","module":"Mathlib.Algebra.Lie.Derivation.AdjointAction","initialProofState":"R : Type u_1\nL : Type u_2\ninst✝² : CommRing R\ninst✝¹ : LieRing L\ninst✝ : LieAlgebra R L\nx : L\nD : LieDerivation R L L\n⊢ Eq (Bracket.bracket ((LieDerivation.ad R L) x) D) (Bracket.bracket x D)","decl":"lemma lie_ad (x : L) (D : LieDerivation R L L) : ⁅ad R L x, D⁆ = ⁅x, D⁆ := by ext; simp\n\n"}
{"name":"LieDerivation.ad_ker_eq_center","module":"Mathlib.Algebra.Lie.Derivation.AdjointAction","initialProofState":"R : Type u_1\nL : Type u_2\ninst✝² : CommRing R\ninst✝¹ : LieRing L\ninst✝ : LieAlgebra R L\n⊢ Eq (LieDerivation.ad R L).ker (LieAlgebra.center R L)","decl":"variable (R L) in\n/-- The kernel of the adjoint action on a Lie algebra is equal to its center. -/\nlemma ad_ker_eq_center : (ad R L).ker = LieAlgebra.center R L := by\n  ext x\n  rw [← LieAlgebra.self_module_ker_eq_center, LieHom.mem_ker, LieModule.mem_ker]\n  simp [DFunLike.ext_iff]\n\n"}
{"name":"LieDerivation.injective_ad_of_center_eq_bot","module":"Mathlib.Algebra.Lie.Derivation.AdjointAction","initialProofState":"R : Type u_1\nL : Type u_2\ninst✝² : CommRing R\ninst✝¹ : LieRing L\ninst✝ : LieAlgebra R L\nh : Eq (LieAlgebra.center R L) Bot.bot\n⊢ Function.Injective ⇑(LieDerivation.ad R L)","decl":"/-- If the center of a Lie algebra is trivial, then the adjoint action is injective. -/\nlemma injective_ad_of_center_eq_bot (h : LieAlgebra.center R L = ⊥) :\n    Function.Injective (ad R L) := by\n  rw [← LieHom.ker_eq_bot, ad_ker_eq_center, h]\n\n"}
{"name":"LieDerivation.lie_der_ad_eq_ad_der","module":"Mathlib.Algebra.Lie.Derivation.AdjointAction","initialProofState":"R : Type u_1\nL : Type u_2\ninst✝² : CommRing R\ninst✝¹ : LieRing L\ninst✝ : LieAlgebra R L\nD : LieDerivation R L L\nx : L\n⊢ Eq (Bracket.bracket D ((LieDerivation.ad R L) x)) ((LieDerivation.ad R L) (D x))","decl":"/-- The commutator of a derivation `D` and a derivation of the form `ad x` is `ad (D x)`. -/\nlemma lie_der_ad_eq_ad_der (D : LieDerivation R L L) (x : L) : ⁅D, ad R L x⁆ = ad R L (D x) := by\n  rw [ad_apply_lieDerivation, ← lie_ad, lie_skew]\n\n"}
{"name":"LieDerivation.ad_isIdealMorphism","module":"Mathlib.Algebra.Lie.Derivation.AdjointAction","initialProofState":"R : Type u_1\nL : Type u_2\ninst✝² : CommRing R\ninst✝¹ : LieRing L\ninst✝ : LieAlgebra R L\n⊢ (LieDerivation.ad R L).IsIdealMorphism","decl":"variable (R L) in\n/-- The range of the adjoint action homomorphism from a Lie algebra `L` to the Lie algebra of its\nderivations is an ideal of the latter. -/\nlemma ad_isIdealMorphism : (ad R L).IsIdealMorphism := by\n  simp_rw [LieHom.isIdealMorphism_iff, lie_der_ad_eq_ad_der]\n  tauto\n\n"}
{"name":"LieDerivation.mem_ad_idealRange_iff","module":"Mathlib.Algebra.Lie.Derivation.AdjointAction","initialProofState":"R : Type u_1\nL : Type u_2\ninst✝² : CommRing R\ninst✝¹ : LieRing L\ninst✝ : LieAlgebra R L\nD : LieDerivation R L L\n⊢ Iff (Membership.mem (LieDerivation.ad R L).idealRange D) (Exists fun x => Eq ((LieDerivation.ad R L) x) D)","decl":"/-- A derivation `D` belongs to the ideal range of the adjoint action iff it is of the form `ad x`\nfor some `x` in the Lie algebra `L`. -/\nlemma mem_ad_idealRange_iff {D : LieDerivation R L L} :\n    D ∈ (ad R L).idealRange ↔ ∃ x : L, ad R L x = D :=\n  (ad R L).mem_idealRange_iff (ad_isIdealMorphism R L)\n\n"}
{"name":"LieDerivation.maxTrivSubmodule_eq_bot_of_center_eq_bot","module":"Mathlib.Algebra.Lie.Derivation.AdjointAction","initialProofState":"R : Type u_1\nL : Type u_2\ninst✝² : CommRing R\ninst✝¹ : LieRing L\ninst✝ : LieAlgebra R L\nh : Eq (LieAlgebra.center R L) Bot.bot\n⊢ Eq (LieModule.maxTrivSubmodule R L (LieDerivation R L L)) Bot.bot","decl":"lemma maxTrivSubmodule_eq_bot_of_center_eq_bot (h : LieAlgebra.center R L = ⊥) :\n    LieModule.maxTrivSubmodule R L (LieDerivation R L L) = ⊥ := by\n  refine (LieSubmodule.eq_bot_iff _).mpr fun D hD ↦ ext fun x ↦ ?_\n  have : ad R L (D x) = 0 := by\n    rw [LieModule.mem_maxTrivSubmodule] at hD\n    simp [ad_apply_lieDerivation, hD]\n  rw [← LieHom.mem_ker, ad_ker_eq_center, h, LieSubmodule.mem_bot] at this\n  simp [this]\n\n"}
