{"name":"Option.smul_def","module":"Mathlib.Algebra.Group.Action.Option","initialProofState":"M : Type u_1\nα : Type u_3\ninst✝ : SMul M α\na : M\nx : Option α\n⊢ Eq (HSMul.hSMul a x) (Option.map (fun x => HSMul.hSMul a x) x)","decl":"@[to_additive]\ntheorem smul_def : a • x = x.map (a • ·) :=\n  rfl\n\n"}
{"name":"Option.vadd_def","module":"Mathlib.Algebra.Group.Action.Option","initialProofState":"M : Type u_1\nα : Type u_3\ninst✝ : VAdd M α\na : M\nx : Option α\n⊢ Eq (HVAdd.hVAdd a x) (Option.map (fun x => HVAdd.hVAdd a x) x)","decl":"@[to_additive]\ntheorem smul_def : a • x = x.map (a • ·) :=\n  rfl\n\n"}
{"name":"Option.smul_none","module":"Mathlib.Algebra.Group.Action.Option","initialProofState":"M : Type u_1\nα : Type u_3\ninst✝ : SMul M α\na : M\n⊢ Eq (HSMul.hSMul a Option.none) Option.none","decl":"@[to_additive (attr := simp)]\ntheorem smul_none : a • (none : Option α) = none :=\n  rfl\n\n"}
{"name":"Option.vadd_none","module":"Mathlib.Algebra.Group.Action.Option","initialProofState":"M : Type u_1\nα : Type u_3\ninst✝ : VAdd M α\na : M\n⊢ Eq (HVAdd.hVAdd a Option.none) Option.none","decl":"@[to_additive (attr := simp)]\ntheorem smul_none : a • (none : Option α) = none :=\n  rfl\n\n"}
{"name":"Option.smul_some","module":"Mathlib.Algebra.Group.Action.Option","initialProofState":"M : Type u_1\nα : Type u_3\ninst✝ : SMul M α\na : M\nb : α\n⊢ Eq (HSMul.hSMul a (Option.some b)) (Option.some (HSMul.hSMul a b))","decl":"@[to_additive (attr := simp)]\ntheorem smul_some : a • some b = some (a • b) :=\n  rfl\n\n"}
{"name":"Option.vadd_some","module":"Mathlib.Algebra.Group.Action.Option","initialProofState":"M : Type u_1\nα : Type u_3\ninst✝ : VAdd M α\na : M\nb : α\n⊢ Eq (HVAdd.hVAdd a (Option.some b)) (Option.some (HVAdd.hVAdd a b))","decl":"@[to_additive (attr := simp)]\ntheorem smul_some : a • some b = some (a • b) :=\n  rfl\n\n"}
{"name":"Option.instIsScalarTowerOfSMul","module":"Mathlib.Algebra.Group.Action.Option","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝³ : SMul M α\ninst✝² : SMul N α\ninst✝¹ : SMul M N\ninst✝ : IsScalarTower M N α\n⊢ IsScalarTower M N (Option α)","decl":"@[to_additive]\ninstance instIsScalarTowerOfSMul [SMul M N] [IsScalarTower M N α] : IsScalarTower M N (Option α) :=\n  ⟨fun a b x => by\n    cases x\n    exacts [rfl, congr_arg some (smul_assoc _ _ _)]⟩\n\n"}
{"name":"Option.instIsScalarTowerOfVAdd","module":"Mathlib.Algebra.Group.Action.Option","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝³ : VAdd M α\ninst✝² : VAdd N α\ninst✝¹ : VAdd M N\ninst✝ : VAddAssocClass M N α\n⊢ VAddAssocClass M N (Option α)","decl":"@[to_additive]\ninstance instIsScalarTowerOfSMul [SMul M N] [IsScalarTower M N α] : IsScalarTower M N (Option α) :=\n  ⟨fun a b x => by\n    cases x\n    exacts [rfl, congr_arg some (smul_assoc _ _ _)]⟩\n\n"}
{"name":"Option.instSMulCommClass","module":"Mathlib.Algebra.Group.Action.Option","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝² : SMul M α\ninst✝¹ : SMul N α\ninst✝ : SMulCommClass M N α\n⊢ SMulCommClass M N (Option α)","decl":"@[to_additive]\ninstance [SMulCommClass M N α] : SMulCommClass M N (Option α) :=\n  ⟨fun _ _ => Function.Commute.option_map <| smul_comm _ _⟩\n\n"}
{"name":"Option.instVAddCommClass","module":"Mathlib.Algebra.Group.Action.Option","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝² : VAdd M α\ninst✝¹ : VAdd N α\ninst✝ : VAddCommClass M N α\n⊢ VAddCommClass M N (Option α)","decl":"@[to_additive]\ninstance [SMulCommClass M N α] : SMulCommClass M N (Option α) :=\n  ⟨fun _ _ => Function.Commute.option_map <| smul_comm _ _⟩\n\n"}
{"name":"Option.instIsCentralVAdd","module":"Mathlib.Algebra.Group.Action.Option","initialProofState":"M : Type u_1\nα : Type u_3\ninst✝² : VAdd M α\ninst✝¹ : VAdd (AddOpposite M) α\ninst✝ : IsCentralVAdd M α\n⊢ IsCentralVAdd M (Option α)","decl":"@[to_additive]\ninstance [SMul Mᵐᵒᵖ α] [IsCentralScalar M α] : IsCentralScalar M (Option α) :=\n  ⟨fun a x => by\n    cases x\n    exacts [rfl, congr_arg some (op_smul_eq_smul _ _)]⟩\n\n"}
{"name":"Option.instIsCentralScalar","module":"Mathlib.Algebra.Group.Action.Option","initialProofState":"M : Type u_1\nα : Type u_3\ninst✝² : SMul M α\ninst✝¹ : SMul (MulOpposite M) α\ninst✝ : IsCentralScalar M α\n⊢ IsCentralScalar M (Option α)","decl":"@[to_additive]\ninstance [SMul Mᵐᵒᵖ α] [IsCentralScalar M α] : IsCentralScalar M (Option α) :=\n  ⟨fun a x => by\n    cases x\n    exacts [rfl, congr_arg some (op_smul_eq_smul _ _)]⟩\n\n"}
{"name":"Option.instFaithfulSMul","module":"Mathlib.Algebra.Group.Action.Option","initialProofState":"M : Type u_1\nα : Type u_3\ninst✝¹ : SMul M α\ninst✝ : FaithfulSMul M α\n⊢ FaithfulSMul M (Option α)","decl":"@[to_additive]\ninstance [FaithfulSMul M α] : FaithfulSMul M (Option α) :=\n  ⟨fun h => eq_of_smul_eq_smul fun b : α => by injection h (some b)⟩\n\n"}
{"name":"Option.instFaithfulVAdd","module":"Mathlib.Algebra.Group.Action.Option","initialProofState":"M : Type u_1\nα : Type u_3\ninst✝¹ : VAdd M α\ninst✝ : FaithfulVAdd M α\n⊢ FaithfulVAdd M (Option α)","decl":"@[to_additive]\ninstance [FaithfulSMul M α] : FaithfulSMul M (Option α) :=\n  ⟨fun h => eq_of_smul_eq_smul fun b : α => by injection h (some b)⟩\n\n"}
