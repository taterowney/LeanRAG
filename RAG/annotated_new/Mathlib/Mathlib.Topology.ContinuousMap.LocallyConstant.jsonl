{"name":"LocallyConstant.toContinuousMapMonoidHom_apply","module":"Mathlib.Topology.ContinuousMap.LocallyConstant","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : Monoid Y\ninst✝ : ContinuousMul Y\nf : LocallyConstant X Y\n⊢ Eq (LocallyConstant.toContinuousMapMonoidHom f) ↑f","decl":"/-- The inclusion of locally-constant functions into continuous functions as a multiplicative\nmonoid hom. -/\n@[to_additive (attr := simps)\n\"The inclusion of locally-constant functions into continuous functions as an additive monoid hom.\"]\ndef toContinuousMapMonoidHom [Monoid Y] [ContinuousMul Y] : LocallyConstant X Y →* C(X, Y) where\n  toFun := (↑)\n  map_one' := by\n    ext\n    simp\n  map_mul' x y := by\n    ext\n    simp\n\n"}
{"name":"LocallyConstant.toContinuousMapAddMonoidHom_apply","module":"Mathlib.Topology.ContinuousMap.LocallyConstant","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : AddMonoid Y\ninst✝ : ContinuousAdd Y\nf : LocallyConstant X Y\n⊢ Eq (LocallyConstant.toContinuousMapAddMonoidHom f) ↑f","decl":"/-- The inclusion of locally-constant functions into continuous functions as a multiplicative\nmonoid hom. -/\n@[to_additive (attr := simps)\n\"The inclusion of locally-constant functions into continuous functions as an additive monoid hom.\"]\ndef toContinuousMapMonoidHom [Monoid Y] [ContinuousMul Y] : LocallyConstant X Y →* C(X, Y) where\n  toFun := (↑)\n  map_one' := by\n    ext\n    simp\n  map_mul' x y := by\n    ext\n    simp\n\n"}
{"name":"LocallyConstant.toContinuousMapLinearMap_apply","module":"Mathlib.Topology.ContinuousMap.LocallyConstant","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁶ : TopologicalSpace X\ninst✝⁵ : TopologicalSpace Y\nR : Type u_3\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid Y\ninst✝² : Module R Y\ninst✝¹ : ContinuousAdd Y\ninst✝ : ContinuousConstSMul R Y\nf : LocallyConstant X Y\n⊢ Eq ((LocallyConstant.toContinuousMapLinearMap R) f) ↑f","decl":"/-- The inclusion of locally-constant functions into continuous functions as a linear map. -/\n@[simps]\ndef toContinuousMapLinearMap (R : Type*) [Semiring R] [AddCommMonoid Y] [Module R Y]\n    [ContinuousAdd Y] [ContinuousConstSMul R Y] : LocallyConstant X Y →ₗ[R] C(X, Y) where\n  toFun := (↑)\n  map_add' x y := by\n    ext\n    simp\n  map_smul' x y := by\n    ext\n    simp\n\n"}
{"name":"LocallyConstant.toContinuousMapAlgHom_apply","module":"Mathlib.Topology.ContinuousMap.LocallyConstant","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁵ : TopologicalSpace X\ninst✝⁴ : TopologicalSpace Y\nR : Type u_3\ninst✝³ : CommSemiring R\ninst✝² : Semiring Y\ninst✝¹ : Algebra R Y\ninst✝ : TopologicalSemiring Y\nf : LocallyConstant X Y\n⊢ Eq ((LocallyConstant.toContinuousMapAlgHom R) f) ↑f","decl":"/-- The inclusion of locally-constant functions into continuous functions as an algebra map. -/\n@[simps]\ndef toContinuousMapAlgHom (R : Type*) [CommSemiring R] [Semiring Y] [Algebra R Y]\n    [TopologicalSemiring Y] : LocallyConstant X Y →ₐ[R] C(X, Y) where\n  toFun := (↑)\n  map_one' := by\n    ext\n    simp\n  map_mul' x y := by\n    ext\n    simp\n  map_zero' := by\n    ext\n    simp\n  map_add' x y := by\n    ext\n    simp\n  commutes' r := by\n    ext x\n    simp [Algebra.smul_def]\n\n"}
