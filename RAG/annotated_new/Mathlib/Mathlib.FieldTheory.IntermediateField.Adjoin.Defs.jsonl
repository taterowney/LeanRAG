{"name":"IntermediateField.adjoin_toSubfield","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : Set E\n⊢ Eq (IntermediateField.adjoin F S).toSubfield (Subfield.closure (Union.union (Set.range ⇑(algebraMap F E)) S))","decl":"@[simp]\ntheorem adjoin_toSubfield :\n    (adjoin F S).toSubfield = Subfield.closure (Set.range (algebraMap F E) ∪ S) := rfl\n\n"}
{"name":"IntermediateField.adjoin_le_iff","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : Set E\nT : IntermediateField F E\n⊢ Iff (LE.le (IntermediateField.adjoin F S) T) (HasSubset.Subset S ↑T)","decl":"@[simp]\ntheorem adjoin_le_iff {S : Set E} {T : IntermediateField F E} : adjoin F S ≤ T ↔ S ⊆ T :=\n  ⟨fun H => le_trans (le_trans Set.subset_union_right Subfield.subset_closure) H, fun H =>\n    (@Subfield.closure_le E _ (Set.range (algebraMap F E) ∪ S) T.toSubfield).mpr\n      (Set.union_subset (IntermediateField.set_range_subset T) H)⟩\n\n"}
{"name":"IntermediateField.gc","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\n⊢ GaloisConnection (IntermediateField.adjoin F) fun x => ↑x","decl":"theorem gc : GaloisConnection (adjoin F : Set E → IntermediateField F E)\n    (fun (x : IntermediateField F E) => (x : Set E)) := fun _ _ =>\n  adjoin_le_iff\n\n"}
{"name":"IntermediateField.sup_def","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS T : IntermediateField F E\n⊢ Eq (Max.max S T) (IntermediateField.adjoin F (Union.union ↑S ↑T))","decl":"theorem sup_def (S T : IntermediateField F E) : S ⊔ T = adjoin F (S ∪ T : Set E) := rfl\n\n"}
{"name":"IntermediateField.sSup_def","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : Set (IntermediateField F E)\n⊢ Eq (SupSet.sSup S) (IntermediateField.adjoin F (Set.image SetLike.coe S).sUnion)","decl":"theorem sSup_def (S : Set (IntermediateField F E)) :\n    sSup S = adjoin F (⋃₀ (SetLike.coe '' S)) := rfl\n\n"}
{"name":"IntermediateField.coe_bot","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\n⊢ Eq (↑Bot.bot) (Set.range ⇑(algebraMap F E))","decl":"theorem coe_bot : ↑(⊥ : IntermediateField F E) = Set.range (algebraMap F E) := rfl\n\n"}
{"name":"IntermediateField.mem_bot","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nx : E\n⊢ Iff (Membership.mem Bot.bot x) (Membership.mem (Set.range ⇑(algebraMap F E)) x)","decl":"theorem mem_bot {x : E} : x ∈ (⊥ : IntermediateField F E) ↔ x ∈ Set.range (algebraMap F E) :=\n  Iff.rfl\n\n"}
{"name":"IntermediateField.bot_toSubalgebra","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\n⊢ Eq Bot.bot.toSubalgebra Bot.bot","decl":"@[simp]\ntheorem bot_toSubalgebra : (⊥ : IntermediateField F E).toSubalgebra = ⊥ := rfl\n\n"}
{"name":"IntermediateField.bot_toSubfield","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\n⊢ Eq Bot.bot.toSubfield (algebraMap F E).fieldRange","decl":"theorem bot_toSubfield : (⊥ : IntermediateField F E).toSubfield = (algebraMap F E).fieldRange :=\n  rfl\n\n"}
{"name":"IntermediateField.coe_top","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\n⊢ Eq (↑Top.top) Set.univ","decl":"@[simp]\ntheorem coe_top : ↑(⊤ : IntermediateField F E) = (Set.univ : Set E) :=\n  rfl\n\n"}
{"name":"IntermediateField.mem_top","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nx : E\n⊢ Membership.mem Top.top x","decl":"@[simp]\ntheorem mem_top {x : E} : x ∈ (⊤ : IntermediateField F E) :=\n  trivial\n\n"}
{"name":"IntermediateField.top_toSubalgebra","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\n⊢ Eq Top.top.toSubalgebra Top.top","decl":"@[simp]\ntheorem top_toSubalgebra : (⊤ : IntermediateField F E).toSubalgebra = ⊤ :=\n  rfl\n\n"}
{"name":"IntermediateField.top_toSubfield","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\n⊢ Eq Top.top.toSubfield Top.top","decl":"@[simp]\ntheorem top_toSubfield : (⊤ : IntermediateField F E).toSubfield = ⊤ :=\n  rfl\n\n"}
{"name":"IntermediateField.coe_inf","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS T : IntermediateField F E\n⊢ Eq (↑(Min.min S T)) (Inter.inter ↑S ↑T)","decl":"@[simp, norm_cast]\ntheorem coe_inf (S T : IntermediateField F E) : (↑(S ⊓ T) : Set E) = (S : Set E) ∩ T :=\n  rfl\n\n"}
{"name":"IntermediateField.mem_inf","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS T : IntermediateField F E\nx : E\n⊢ Iff (Membership.mem (Min.min S T) x) (And (Membership.mem S x) (Membership.mem T x))","decl":"@[simp]\ntheorem mem_inf {S T : IntermediateField F E} {x : E} : x ∈ S ⊓ T ↔ x ∈ S ∧ x ∈ T :=\n  Iff.rfl\n\n"}
{"name":"IntermediateField.inf_toSubalgebra","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS T : IntermediateField F E\n⊢ Eq (Min.min S T).toSubalgebra (Min.min S.toSubalgebra T.toSubalgebra)","decl":"@[simp]\ntheorem inf_toSubalgebra (S T : IntermediateField F E) :\n    (S ⊓ T).toSubalgebra = S.toSubalgebra ⊓ T.toSubalgebra :=\n  rfl\n\n"}
{"name":"IntermediateField.inf_toSubfield","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS T : IntermediateField F E\n⊢ Eq (Min.min S T).toSubfield (Min.min S.toSubfield T.toSubfield)","decl":"@[simp]\ntheorem inf_toSubfield (S T : IntermediateField F E) :\n    (S ⊓ T).toSubfield = S.toSubfield ⊓ T.toSubfield :=\n  rfl\n\n"}
{"name":"IntermediateField.sup_toSubfield","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS T : IntermediateField F E\n⊢ Eq (Max.max S T).toSubfield (Max.max S.toSubfield T.toSubfield)","decl":"@[simp]\ntheorem sup_toSubfield (S T : IntermediateField F E) :\n    (S ⊔ T).toSubfield = S.toSubfield ⊔ T.toSubfield := by\n  rw [← S.toSubfield.closure_eq, ← T.toSubfield.closure_eq, ← Subfield.closure_union]\n  simp_rw [sup_def, adjoin_toSubfield, coe_toSubfield]\n  congr 1\n  rw [Set.union_eq_right]\n  rintro _ ⟨x, rfl⟩\n  exact Set.mem_union_left _ (algebraMap_mem S x)\n\n"}
{"name":"IntermediateField.coe_sInf","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : Set (IntermediateField F E)\n⊢ Eq (↑(InfSet.sInf S)) (InfSet.sInf (Set.image (fun x => ↑x) S))","decl":"@[simp, norm_cast]\ntheorem coe_sInf (S : Set (IntermediateField F E)) : (↑(sInf S) : Set E) =\n    sInf ((fun (x : IntermediateField F E) => (x : Set E)) '' S) :=\n  rfl\n\n"}
{"name":"IntermediateField.sInf_toSubalgebra","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : Set (IntermediateField F E)\n⊢ Eq (InfSet.sInf S).toSubalgebra (InfSet.sInf (Set.image IntermediateField.toSubalgebra S))","decl":"@[simp]\ntheorem sInf_toSubalgebra (S : Set (IntermediateField F E)) :\n    (sInf S).toSubalgebra = sInf (toSubalgebra '' S) :=\n  SetLike.coe_injective <| by simp [Set.sUnion_image]\n\n"}
{"name":"IntermediateField.sInf_toSubfield","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : Set (IntermediateField F E)\n⊢ Eq (InfSet.sInf S).toSubfield (InfSet.sInf (Set.image IntermediateField.toSubfield S))","decl":"@[simp]\ntheorem sInf_toSubfield (S : Set (IntermediateField F E)) :\n    (sInf S).toSubfield = sInf (toSubfield '' S) :=\n  SetLike.coe_injective <| by simp [Set.sUnion_image]\n\n"}
{"name":"IntermediateField.sSup_toSubfield","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : Set (IntermediateField F E)\nhS : S.Nonempty\n⊢ Eq (SupSet.sSup S).toSubfield (SupSet.sSup (Set.image IntermediateField.toSubfield S))","decl":"@[simp]\ntheorem sSup_toSubfield (S : Set (IntermediateField F E)) (hS : S.Nonempty) :\n    (sSup S).toSubfield = sSup (toSubfield '' S) := by\n  have h : toSubfield '' S = Subfield.closure '' (SetLike.coe '' S) := by\n    rw [Set.image_image]\n    congr! with x\n    exact x.toSubfield.closure_eq.symm\n  rw [h, sSup_image, ← Subfield.closure_sUnion, sSup_def, adjoin_toSubfield]\n  congr 1\n  rw [Set.union_eq_right]\n  rintro _ ⟨x, rfl⟩\n  obtain ⟨y, hy⟩ := hS\n  simp only [Set.mem_sUnion, Set.mem_image, exists_exists_and_eq_and, SetLike.mem_coe]\n  exact ⟨y, hy, algebraMap_mem y x⟩\n\n"}
{"name":"IntermediateField.coe_iInf","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nι : Sort u_3\nS : ι → IntermediateField F E\n⊢ Eq (↑(iInf S)) (Set.iInter fun i => ↑(S i))","decl":"@[simp, norm_cast]\ntheorem coe_iInf {ι : Sort*} (S : ι → IntermediateField F E) : (↑(iInf S) : Set E) = ⋂ i, S i := by\n  simp [iInf]\n\n"}
{"name":"IntermediateField.iInf_toSubalgebra","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nι : Sort u_3\nS : ι → IntermediateField F E\n⊢ Eq (iInf S).toSubalgebra (iInf fun i => (S i).toSubalgebra)","decl":"@[simp]\ntheorem iInf_toSubalgebra {ι : Sort*} (S : ι → IntermediateField F E) :\n    (iInf S).toSubalgebra = ⨅ i, (S i).toSubalgebra :=\n  SetLike.coe_injective <| by simp [iInf]\n\n"}
{"name":"IntermediateField.iInf_toSubfield","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nι : Sort u_3\nS : ι → IntermediateField F E\n⊢ Eq (iInf S).toSubfield (iInf fun i => (S i).toSubfield)","decl":"@[simp]\ntheorem iInf_toSubfield {ι : Sort*} (S : ι → IntermediateField F E) :\n    (iInf S).toSubfield = ⨅ i, (S i).toSubfield :=\n  SetLike.coe_injective <| by simp [iInf]\n\n"}
{"name":"IntermediateField.iSup_toSubfield","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝³ : Field F\nE : Type u_2\ninst✝² : Field E\ninst✝¹ : Algebra F E\nι : Sort u_3\ninst✝ : Nonempty ι\nS : ι → IntermediateField F E\n⊢ Eq (iSup S).toSubfield (iSup fun i => (S i).toSubfield)","decl":"@[simp]\ntheorem iSup_toSubfield {ι : Sort*} [Nonempty ι] (S : ι → IntermediateField F E) :\n    (iSup S).toSubfield = ⨆ i, (S i).toSubfield := by\n  simp only [iSup, Set.range_nonempty, sSup_toSubfield, ← Set.range_comp, Function.comp_def]\n\n"}
{"name":"IntermediateField.equivOfEq_apply","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS T : IntermediateField F E\nh : Eq S T\nx : Subtype fun x => Membership.mem S.toSubalgebra x\n⊢ Eq ((IntermediateField.equivOfEq h) x) ⟨↑x, ⋯⟩","decl":"/-- Construct an algebra isomorphism from an equality of intermediate fields -/\n@[simps! apply]\ndef equivOfEq {S T : IntermediateField F E} (h : S = T) : S ≃ₐ[F] T :=\n  Subalgebra.equivOfEq _ _ (congr_arg toSubalgebra h)\n\n"}
{"name":"IntermediateField.equivOfEq_symm","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS T : IntermediateField F E\nh : Eq S T\n⊢ Eq (IntermediateField.equivOfEq h).symm (IntermediateField.equivOfEq ⋯)","decl":"@[simp]\ntheorem equivOfEq_symm {S T : IntermediateField F E} (h : S = T) :\n    (equivOfEq h).symm = equivOfEq h.symm :=\n  rfl\n\n"}
{"name":"IntermediateField.equivOfEq_rfl","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : IntermediateField F E\n⊢ Eq (IntermediateField.equivOfEq ⋯) AlgEquiv.refl","decl":"@[simp]\ntheorem equivOfEq_rfl (S : IntermediateField F E) : equivOfEq (rfl : S = S) = AlgEquiv.refl := by\n  ext; rfl\n\n"}
{"name":"IntermediateField.equivOfEq_trans","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS T U : IntermediateField F E\nhST : Eq S T\nhTU : Eq T U\n⊢ Eq ((IntermediateField.equivOfEq hST).trans (IntermediateField.equivOfEq hTU)) (IntermediateField.equivOfEq ⋯)","decl":"@[simp]\ntheorem equivOfEq_trans {S T U : IntermediateField F E} (hST : S = T) (hTU : T = U) :\n    (equivOfEq hST).trans (equivOfEq hTU) = equivOfEq (hST.trans hTU) :=\n  rfl\n\n"}
{"name":"IntermediateField.botEquiv_def","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nx : F\n⊢ Eq ((IntermediateField.botEquiv F E) ((algebraMap F (Subtype fun x => Membership.mem Bot.bot x)) x)) x","decl":"theorem botEquiv_def (x : F) : botEquiv F E (algebraMap F (⊥ : IntermediateField F E) x) = x := by\n  simp\n\n"}
{"name":"IntermediateField.botEquiv_symm","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nx : F\n⊢ Eq ((IntermediateField.botEquiv F E).symm x) ((algebraMap F (Subtype fun x => Membership.mem Bot.bot x)) x)","decl":"@[simp]\ntheorem botEquiv_symm (x : F) : (botEquiv F E).symm x = algebraMap F _ x :=\n  rfl\n\n"}
{"name":"IntermediateField.coe_algebraMap_over_bot","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\n⊢ Eq ⇑(algebraMap (Subtype fun x => Membership.mem Bot.bot x) F) ⇑(IntermediateField.botEquiv F E)","decl":"theorem coe_algebraMap_over_bot :\n    (algebraMap (⊥ : IntermediateField F E) F : (⊥ : IntermediateField F E) → F) =\n      IntermediateField.botEquiv F E :=\n  rfl\n\n"}
{"name":"IntermediateField.isScalarTower_over_bot","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\n⊢ IsScalarTower (Subtype fun x => Membership.mem Bot.bot x) F E","decl":"instance isScalarTower_over_bot : IsScalarTower (⊥ : IntermediateField F E) F E :=\n  IsScalarTower.of_algebraMap_eq\n    (by\n      intro x\n      obtain ⟨y, rfl⟩ := (botEquiv F E).symm.surjective x\n      rw [coe_algebraMap_over_bot, (botEquiv F E).apply_symm_apply, botEquiv_symm,\n        IsScalarTower.algebraMap_apply F (⊥ : IntermediateField F E) E])\n\n"}
{"name":"IntermediateField.topEquiv_symm_apply_coe","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\na : E\n⊢ Eq (↑(IntermediateField.topEquiv.symm a)) a","decl":"/-- The top `IntermediateField` is isomorphic to the field.\n\nThis is the intermediate field version of `Subalgebra.topEquiv`. -/\n@[simps!]\ndef topEquiv : (⊤ : IntermediateField F E) ≃ₐ[F] E :=\n  Subalgebra.topEquiv\n\n"}
{"name":"IntermediateField.topEquiv_apply","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\na : Subtype fun x => Membership.mem Top.top x\n⊢ Eq (IntermediateField.topEquiv a) ↑a","decl":"/-- The top `IntermediateField` is isomorphic to the field.\n\nThis is the intermediate field version of `Subalgebra.topEquiv`. -/\n@[simps!]\ndef topEquiv : (⊤ : IntermediateField F E) ≃ₐ[F] E :=\n  Subalgebra.topEquiv\n\n"}
{"name":"IntermediateField.restrictScalars_bot_eq_self","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nK : IntermediateField F E\n⊢ Eq (IntermediateField.restrictScalars F Bot.bot) K","decl":"@[simp]\ntheorem restrictScalars_bot_eq_self (K : IntermediateField F E) :\n    (⊥ : IntermediateField K E).restrictScalars _ = K :=\n  SetLike.coe_injective Subtype.range_coe\n\n"}
{"name":"IntermediateField.restrictScalars_top","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝⁶ : Field F\nE : Type u_2\ninst✝⁵ : Field E\ninst✝⁴ : Algebra F E\nK : Type u_3\ninst✝³ : Field K\ninst✝² : Algebra K E\ninst✝¹ : Algebra K F\ninst✝ : IsScalarTower K F E\n⊢ Eq (IntermediateField.restrictScalars K Top.top) Top.top","decl":"@[simp]\ntheorem restrictScalars_top : (⊤ : IntermediateField F E).restrictScalars K = ⊤ :=\n  rfl\n\n"}
{"name":"IntermediateField.restrictScalars_sup","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝⁶ : Field F\nE : Type u_2\ninst✝⁵ : Field E\ninst✝⁴ : Algebra F E\nK : Type u_3\ninst✝³ : Field K\ninst✝² : Algebra K E\ninst✝¹ : Algebra K F\ninst✝ : IsScalarTower K F E\nL L' : IntermediateField F E\n⊢ Eq (Max.max (IntermediateField.restrictScalars K L) (IntermediateField.restrictScalars K L')) (IntermediateField.restrictScalars K (Max.max L L'))","decl":"theorem restrictScalars_sup :\n    L.restrictScalars K ⊔ L'.restrictScalars K = (L ⊔ L').restrictScalars K :=\n  toSubfield_injective (by simp)\n\n"}
{"name":"IntermediateField.restrictScalars_inf","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝⁶ : Field F\nE : Type u_2\ninst✝⁵ : Field E\ninst✝⁴ : Algebra F E\nK : Type u_3\ninst✝³ : Field K\ninst✝² : Algebra K E\ninst✝¹ : Algebra K F\ninst✝ : IsScalarTower K F E\nL L' : IntermediateField F E\n⊢ Eq (Min.min (IntermediateField.restrictScalars K L) (IntermediateField.restrictScalars K L')) (IntermediateField.restrictScalars K (Min.min L L'))","decl":"theorem restrictScalars_inf :\n    L.restrictScalars K ⊓ L'.restrictScalars K = (L ⊓ L').restrictScalars K := rfl\n\n"}
{"name":"IntermediateField.map_bot","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝⁴ : Field F\nE : Type u_2\ninst✝³ : Field E\ninst✝² : Algebra F E\nK : Type u_3\ninst✝¹ : Field K\ninst✝ : Algebra F K\nf : AlgHom F E K\n⊢ Eq (IntermediateField.map f Bot.bot) Bot.bot","decl":"@[simp]\ntheorem map_bot (f : E →ₐ[F] K) :\n    IntermediateField.map f ⊥ = ⊥ :=\n  toSubalgebra_injective <| Algebra.map_bot _\n\n"}
{"name":"IntermediateField.map_sup","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝⁴ : Field F\nE : Type u_2\ninst✝³ : Field E\ninst✝² : Algebra F E\nK : Type u_3\ninst✝¹ : Field K\ninst✝ : Algebra F K\ns t : IntermediateField F E\nf : AlgHom F E K\n⊢ Eq (IntermediateField.map f (Max.max s t)) (Max.max (IntermediateField.map f s) (IntermediateField.map f t))","decl":"theorem map_sup (s t : IntermediateField F E) (f : E →ₐ[F] K) : (s ⊔ t).map f = s.map f ⊔ t.map f :=\n  (gc_map_comap f).l_sup\n\n"}
{"name":"IntermediateField.map_iSup","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝⁴ : Field F\nE : Type u_2\ninst✝³ : Field E\ninst✝² : Algebra F E\nK : Type u_3\ninst✝¹ : Field K\ninst✝ : Algebra F K\nι : Sort u_4\nf : AlgHom F E K\ns : ι → IntermediateField F E\n⊢ Eq (IntermediateField.map f (iSup s)) (iSup fun i => IntermediateField.map f (s i))","decl":"theorem map_iSup {ι : Sort*} (f : E →ₐ[F] K) (s : ι → IntermediateField F E) :\n    (iSup s).map f = ⨆ i, (s i).map f :=\n  (gc_map_comap f).l_iSup\n\n"}
{"name":"IntermediateField.map_inf","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝⁴ : Field F\nE : Type u_2\ninst✝³ : Field E\ninst✝² : Algebra F E\nK : Type u_3\ninst✝¹ : Field K\ninst✝ : Algebra F K\ns t : IntermediateField F E\nf : AlgHom F E K\n⊢ Eq (IntermediateField.map f (Min.min s t)) (Min.min (IntermediateField.map f s) (IntermediateField.map f t))","decl":"theorem map_inf (s t : IntermediateField F E) (f : E →ₐ[F] K) :\n    (s ⊓ t).map f = s.map f ⊓ t.map f := SetLike.coe_injective (Set.image_inter f.injective)\n\n"}
{"name":"IntermediateField.map_iInf","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝⁵ : Field F\nE : Type u_2\ninst✝⁴ : Field E\ninst✝³ : Algebra F E\nK : Type u_3\ninst✝² : Field K\ninst✝¹ : Algebra F K\nι : Sort u_4\ninst✝ : Nonempty ι\nf : AlgHom F E K\ns : ι → IntermediateField F E\n⊢ Eq (IntermediateField.map f (iInf s)) (iInf fun i => IntermediateField.map f (s i))","decl":"theorem map_iInf {ι : Sort*} [Nonempty ι] (f : E →ₐ[F] K) (s : ι → IntermediateField F E) :\n    (iInf s).map f = ⨅ i, (s i).map f := by\n  apply SetLike.coe_injective\n  simpa using (Set.injOn_of_injective f.injective).image_iInter_eq (s := SetLike.coe ∘ s)\n\n"}
{"name":"AlgHom.fieldRange_eq_map","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝⁴ : Field F\nE : Type u_2\ninst✝³ : Field E\ninst✝² : Algebra F E\nK : Type u_3\ninst✝¹ : Field K\ninst✝ : Algebra F K\nf : AlgHom F E K\n⊢ Eq f.fieldRange (IntermediateField.map f Top.top)","decl":"theorem _root_.AlgHom.fieldRange_eq_map (f : E →ₐ[F] K) :\n    f.fieldRange = IntermediateField.map f ⊤ :=\n  SetLike.ext' Set.image_univ.symm\n\n"}
{"name":"AlgHom.map_fieldRange","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝⁶ : Field F\nE : Type u_2\ninst✝⁵ : Field E\ninst✝⁴ : Algebra F E\nK : Type u_3\ninst✝³ : Field K\ninst✝² : Algebra F K\nL : Type u_4\ninst✝¹ : Field L\ninst✝ : Algebra F L\nf : AlgHom F E K\ng : AlgHom F K L\n⊢ Eq (IntermediateField.map g f.fieldRange) (g.comp f).fieldRange","decl":"theorem _root_.AlgHom.map_fieldRange {L : Type*} [Field L] [Algebra F L]\n    (f : E →ₐ[F] K) (g : K →ₐ[F] L) : f.fieldRange.map g = (g.comp f).fieldRange :=\n  SetLike.ext' (Set.range_comp g f).symm\n\n"}
{"name":"AlgHom.fieldRange_eq_top","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝⁴ : Field F\nE : Type u_2\ninst✝³ : Field E\ninst✝² : Algebra F E\nK : Type u_3\ninst✝¹ : Field K\ninst✝ : Algebra F K\nf : AlgHom F E K\n⊢ Iff (Eq f.fieldRange Top.top) (Function.Surjective ⇑f)","decl":"theorem _root_.AlgHom.fieldRange_eq_top {f : E →ₐ[F] K} :\n    f.fieldRange = ⊤ ↔ Function.Surjective f :=\n  SetLike.ext'_iff.trans Set.range_eq_univ\n\n"}
{"name":"AlgEquiv.fieldRange_eq_top","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝⁴ : Field F\nE : Type u_2\ninst✝³ : Field E\ninst✝² : Algebra F E\nK : Type u_3\ninst✝¹ : Field K\ninst✝ : Algebra F K\nf : AlgEquiv F E K\n⊢ Eq (↑f).fieldRange Top.top","decl":"@[simp]\ntheorem _root_.AlgEquiv.fieldRange_eq_top (f : E ≃ₐ[F] K) :\n    (f : E →ₐ[F] K).fieldRange = ⊤ :=\n  AlgHom.fieldRange_eq_top.mpr f.surjective\n\n"}
{"name":"IntermediateField.fieldRange_comp_val","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝⁴ : Field F\nE : Type u_2\ninst✝³ : Field E\ninst✝² : Algebra F E\nK : Type u_3\ninst✝¹ : Field K\ninst✝ : Algebra F K\nL : IntermediateField F E\nf : AlgHom F E K\n⊢ Eq (f.comp L.val).fieldRange (IntermediateField.map f L)","decl":"theorem fieldRange_comp_val : (f.comp L.val).fieldRange = L.map f := toSubalgebra_injective <| by\n  rw [toSubalgebra_map, AlgHom.fieldRange_toSubalgebra, AlgHom.range_comp, range_val]\n\n"}
{"name":"IntermediateField.coe_equivMap_apply","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝⁴ : Field F\nE : Type u_2\ninst✝³ : Field E\ninst✝² : Algebra F E\nK : Type u_3\ninst✝¹ : Field K\ninst✝ : Algebra F K\nL : IntermediateField F E\nf : AlgHom F E K\nx : Subtype fun x => Membership.mem L x\n⊢ Eq (↑((L.equivMap f) x)) (f ↑x)","decl":"@[simp]\ntheorem coe_equivMap_apply (x : L) : ↑(equivMap L f x) = f x := rfl\n\n"}
{"name":"IntermediateField.adjoin_eq_range_algebraMap_adjoin","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : Set E\n⊢ Eq (↑(IntermediateField.adjoin F S)) (Set.range ⇑(algebraMap (Subtype fun x => Membership.mem (IntermediateField.adjoin F S) x) E))","decl":"theorem adjoin_eq_range_algebraMap_adjoin :\n    (adjoin F S : Set E) = Set.range (algebraMap (adjoin F S) E) :=\n  Subtype.range_coe.symm\n\n"}
{"name":"IntermediateField.adjoin.algebraMap_mem","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : Set E\nx : F\n⊢ Membership.mem (IntermediateField.adjoin F S) ((algebraMap F E) x)","decl":"theorem adjoin.algebraMap_mem (x : F) : algebraMap F E x ∈ adjoin F S :=\n  IntermediateField.algebraMap_mem (adjoin F S) x\n\n"}
{"name":"IntermediateField.adjoin.range_algebraMap_subset","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : Set E\n⊢ HasSubset.Subset (Set.range ⇑(algebraMap F E)) ↑(IntermediateField.adjoin F S)","decl":"theorem adjoin.range_algebraMap_subset : Set.range (algebraMap F E) ⊆ adjoin F S := by\n  intro x hx\n  cases' hx with f hf\n  rw [← hf]\n  exact adjoin.algebraMap_mem F S f\n\n"}
{"name":"IntermediateField.subset_adjoin","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : Set E\n⊢ HasSubset.Subset S ↑(IntermediateField.adjoin F S)","decl":"theorem subset_adjoin : S ⊆ adjoin F S := fun _ hx => Subfield.subset_closure (Or.inr hx)\n\n"}
{"name":"IntermediateField.adjoin.mono","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS T : Set E\nh : HasSubset.Subset S T\n⊢ LE.le (IntermediateField.adjoin F S) (IntermediateField.adjoin F T)","decl":"@[mono]\ntheorem adjoin.mono (T : Set E) (h : S ⊆ T) : adjoin F S ≤ adjoin F T :=\n  GaloisConnection.monotone_l gc h\n\n"}
{"name":"IntermediateField.adjoin_contains_field_as_subfield","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"E : Type u_2\ninst✝ : Field E\nS : Set E\nF : Subfield E\n⊢ HasSubset.Subset ↑F ↑(IntermediateField.adjoin (Subtype fun x => Membership.mem F x) S)","decl":"theorem adjoin_contains_field_as_subfield (F : Subfield E) : (F : Set E) ⊆ adjoin F S := fun x hx =>\n  adjoin.algebraMap_mem F S ⟨x, hx⟩\n\n"}
{"name":"IntermediateField.subset_adjoin_of_subset_left","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"E : Type u_2\ninst✝ : Field E\nS : Set E\nF : Subfield E\nT : Set E\nHT : HasSubset.Subset T ↑F\n⊢ HasSubset.Subset T ↑(IntermediateField.adjoin (Subtype fun x => Membership.mem F x) S)","decl":"theorem subset_adjoin_of_subset_left {F : Subfield E} {T : Set E} (HT : T ⊆ F) : T ⊆ adjoin F S :=\n  fun x hx => (adjoin F S).algebraMap_mem ⟨x, HT hx⟩\n\n"}
{"name":"IntermediateField.subset_adjoin_of_subset_right","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS T : Set E\nH : HasSubset.Subset T S\n⊢ HasSubset.Subset T ↑(IntermediateField.adjoin F S)","decl":"theorem subset_adjoin_of_subset_right {T : Set E} (H : T ⊆ S) : T ⊆ adjoin F S := fun _ hx =>\n  subset_adjoin F S (H hx)\n\n"}
{"name":"IntermediateField.adjoin_empty","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_3\nE : Type u_4\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\n⊢ Eq (IntermediateField.adjoin F EmptyCollection.emptyCollection) Bot.bot","decl":"@[simp]\ntheorem adjoin_empty (F E : Type*) [Field F] [Field E] [Algebra F E] : adjoin F (∅ : Set E) = ⊥ :=\n  eq_bot_iff.mpr (adjoin_le_iff.mpr (Set.empty_subset _))\n\n"}
{"name":"IntermediateField.adjoin_univ","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_3\nE : Type u_4\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\n⊢ Eq (IntermediateField.adjoin F Set.univ) Top.top","decl":"@[simp]\ntheorem adjoin_univ (F E : Type*) [Field F] [Field E] [Algebra F E] :\n    adjoin F (Set.univ : Set E) = ⊤ :=\n  eq_top_iff.mpr <| subset_adjoin _ _\n\n"}
{"name":"IntermediateField.adjoin_le_subfield","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : Set E\nK : Subfield E\nHF : HasSubset.Subset (Set.range ⇑(algebraMap F E)) ↑K\nHS : HasSubset.Subset S ↑K\n⊢ LE.le (IntermediateField.adjoin F S).toSubfield K","decl":"/-- If `K` is a field with `F ⊆ K` and `S ⊆ K` then `adjoin F S ≤ K`. -/\ntheorem adjoin_le_subfield {K : Subfield E} (HF : Set.range (algebraMap F E) ⊆ K) (HS : S ⊆ K) :\n    (adjoin F S).toSubfield ≤ K := by\n  apply Subfield.closure_le.mpr\n  rw [Set.union_subset_iff]\n  exact ⟨HF, HS⟩\n\n"}
{"name":"IntermediateField.adjoin_subset_adjoin_iff","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝⁴ : Field F\nE : Type u_2\ninst✝³ : Field E\ninst✝² : Algebra F E\nF' : Type u_3\ninst✝¹ : Field F'\ninst✝ : Algebra F' E\nS S' : Set E\n⊢ Iff (HasSubset.Subset ↑(IntermediateField.adjoin F S) ↑(IntermediateField.adjoin F' S')) (And (HasSubset.Subset (Set.range ⇑(algebraMap F E)) ↑(IntermediateField.adjoin F' S')) (HasSubset.Subset S ↑(IntermediateField.adjoin F' S')))","decl":"theorem adjoin_subset_adjoin_iff {F' : Type*} [Field F'] [Algebra F' E] {S S' : Set E} :\n    (adjoin F S : Set E) ⊆ adjoin F' S' ↔\n      Set.range (algebraMap F E) ⊆ adjoin F' S' ∧ S ⊆ adjoin F' S' :=\n  ⟨fun h => ⟨(adjoin.range_algebraMap_subset _ _).trans h,\n    (subset_adjoin _ _).trans h⟩, fun ⟨hF, hS⟩ =>\n      (Subfield.closure_le (t := (adjoin F' S').toSubfield)).mpr (Set.union_subset hF hS)⟩\n\n"}
{"name":"IntermediateField.adjoin_adjoin_left","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS T : Set E\n⊢ Eq (IntermediateField.restrictScalars F (IntermediateField.adjoin (Subtype fun x => Membership.mem (IntermediateField.adjoin F S) x) T)) (IntermediateField.adjoin F (Union.union S T))","decl":"/-- Adjoining S and then T is the same as adjoining `S ∪ T`. -/\ntheorem adjoin_adjoin_left (T : Set E) :\n    (adjoin (adjoin F S) T).restrictScalars _ = adjoin F (S ∪ T) := by\n  rw [SetLike.ext'_iff]\n  change (adjoin (adjoin F S) T : Set E) = _\n  apply subset_antisymm <;> rw [adjoin_subset_adjoin_iff] <;> constructor\n  · rintro _ ⟨⟨x, hx⟩, rfl⟩; exact adjoin.mono _ _ _ Set.subset_union_left hx\n  · exact subset_adjoin_of_subset_right _ _ Set.subset_union_right\n  · exact Set.range_subset_iff.mpr fun f ↦ Subfield.subset_closure (.inl ⟨f, rfl⟩)\n  · exact Set.union_subset\n      (fun x hx ↦ Subfield.subset_closure <| .inl ⟨⟨x, Subfield.subset_closure (.inr hx)⟩, rfl⟩)\n      (fun x hx ↦ Subfield.subset_closure <| .inr hx)\n\n"}
{"name":"IntermediateField.adjoin_insert_adjoin","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : Set E\nx : E\n⊢ Eq (IntermediateField.adjoin F (Insert.insert x ↑(IntermediateField.adjoin F S))) (IntermediateField.adjoin F (Insert.insert x S))","decl":"@[simp]\ntheorem adjoin_insert_adjoin (x : E) :\n    adjoin F (insert x (adjoin F S : Set E)) = adjoin F (insert x S) :=\n  le_antisymm\n    (adjoin_le_iff.mpr\n      (Set.insert_subset_iff.mpr\n        ⟨subset_adjoin _ _ (Set.mem_insert _ _),\n          adjoin_le_iff.mpr (subset_adjoin_of_subset_right _ _ (Set.subset_insert _ _))⟩))\n    (adjoin.mono _ _ _ (Set.insert_subset_insert (subset_adjoin _ _)))\n\n"}
{"name":"IntermediateField.adjoin_adjoin_comm","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS T : Set E\n⊢ Eq (IntermediateField.restrictScalars F (IntermediateField.adjoin (Subtype fun x => Membership.mem (IntermediateField.adjoin F S) x) T)) (IntermediateField.restrictScalars F (IntermediateField.adjoin (Subtype fun x => Membership.mem (IntermediateField.adjoin F T) x) S))","decl":"/-- `F[S][T] = F[T][S]` -/\ntheorem adjoin_adjoin_comm (T : Set E) :\n    (adjoin (adjoin F S) T).restrictScalars F = (adjoin (adjoin F T) S).restrictScalars F := by\n  rw [adjoin_adjoin_left, adjoin_adjoin_left, Set.union_comm]\n\n"}
{"name":"IntermediateField.adjoin_map","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝⁴ : Field F\nE : Type u_2\ninst✝³ : Field E\ninst✝² : Algebra F E\nS : Set E\nE' : Type u_3\ninst✝¹ : Field E'\ninst✝ : Algebra F E'\nf : AlgHom F E E'\n⊢ Eq (IntermediateField.map f (IntermediateField.adjoin F S)) (IntermediateField.adjoin F (Set.image (⇑f) S))","decl":"theorem adjoin_map {E' : Type*} [Field E'] [Algebra F E'] (f : E →ₐ[F] E') :\n    (adjoin F S).map f = adjoin F (f '' S) :=\n  le_antisymm\n    (map_le_iff_le_comap.mpr <| adjoin_le_iff.mpr fun x hx ↦ subset_adjoin _ _ ⟨x, hx, rfl⟩)\n    (adjoin_le_iff.mpr <| Set.monotone_image <| subset_adjoin _ _)\n\n"}
{"name":"IntermediateField.lift_adjoin","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nK : IntermediateField F E\nS : Set (Subtype fun x => Membership.mem K x)\n⊢ Eq (IntermediateField.lift (IntermediateField.adjoin F S)) (IntermediateField.adjoin F (Set.image Subtype.val S))","decl":"@[simp]\ntheorem lift_adjoin (K : IntermediateField F E) (S : Set K) :\n    lift (adjoin F S) = adjoin F (Subtype.val '' S) :=\n  adjoin_map _ _ _\n\n"}
{"name":"IntermediateField.lift_adjoin_simple","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nK : IntermediateField F E\nα : Subtype fun x => Membership.mem K x\n⊢ Eq (IntermediateField.lift (IntermediateField.adjoin F (Singleton.singleton α))) (IntermediateField.adjoin F (Singleton.singleton ↑α))","decl":"theorem lift_adjoin_simple (K : IntermediateField F E) (α : K) :\n    lift (adjoin F {α}) = adjoin F {α.1} := by\n  simp only [lift_adjoin, Set.image_singleton]\n\n"}
{"name":"IntermediateField.lift_bot","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nK : IntermediateField F E\n⊢ Eq (IntermediateField.lift Bot.bot) Bot.bot","decl":"@[simp]\ntheorem lift_bot (K : IntermediateField F E) :\n    lift (F := K) ⊥ = ⊥ := map_bot _\n\n"}
{"name":"IntermediateField.lift_top","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nK : IntermediateField F E\n⊢ Eq (IntermediateField.lift Top.top) K","decl":"@[simp]\ntheorem lift_top (K : IntermediateField F E) :\n    lift (F := K) ⊤ = K := by rw [lift, ← AlgHom.fieldRange_eq_map, fieldRange_val]\n\n"}
{"name":"IntermediateField.adjoin_self","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nK : IntermediateField F E\n⊢ Eq (IntermediateField.adjoin F ↑K) K","decl":"@[simp]\ntheorem adjoin_self (K : IntermediateField F E) :\n    adjoin F K = K := le_antisymm (adjoin_le_iff.2 fun _ ↦ id) (subset_adjoin F _)\n\n"}
{"name":"IntermediateField.restrictScalars_adjoin","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nK : IntermediateField F E\nS : Set E\n⊢ Eq (IntermediateField.restrictScalars F (IntermediateField.adjoin (Subtype fun x => Membership.mem K x) S)) (IntermediateField.adjoin F (Union.union (↑K) S))","decl":"theorem restrictScalars_adjoin (K : IntermediateField F E) (S : Set E) :\n    restrictScalars F (adjoin K S) = adjoin F (K ∪ S) := by\n  rw [← adjoin_self _ K, adjoin_adjoin_left, adjoin_self _ K]\n\n"}
{"name":"IntermediateField.extendScalars_adjoin","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nK : IntermediateField F E\nS : Set E\nh : LE.le K (IntermediateField.adjoin F S)\n⊢ Eq (IntermediateField.extendScalars h) (IntermediateField.adjoin (Subtype fun x => Membership.mem K x) S)","decl":"variable {F} in\ntheorem extendScalars_adjoin {K : IntermediateField F E} {S : Set E} (h : K ≤ adjoin F S) :\n    extendScalars h = adjoin K S := restrictScalars_injective F <| by\n  rw [extendScalars_restrictScalars, restrictScalars_adjoin]\n  exact le_antisymm (adjoin.mono F S _ Set.subset_union_right) <| adjoin_le_iff.2 <|\n    Set.union_subset h (subset_adjoin F S)\n\n"}
{"name":"IntermediateField.adjoin_union","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS T : Set E\n⊢ Eq (IntermediateField.adjoin F (Union.union S T)) (Max.max (IntermediateField.adjoin F S) (IntermediateField.adjoin F T))","decl":"theorem adjoin_union {S T : Set E} : adjoin F (S ∪ T) = adjoin F S ⊔ adjoin F T :=\n  gc.l_sup\n\n"}
{"name":"IntermediateField.restrictScalars_adjoin_eq_sup","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nK : IntermediateField F E\nS : Set E\n⊢ Eq (IntermediateField.restrictScalars F (IntermediateField.adjoin (Subtype fun x => Membership.mem K x) S)) (Max.max K (IntermediateField.adjoin F S))","decl":"theorem restrictScalars_adjoin_eq_sup (K : IntermediateField F E) (S : Set E) :\n    restrictScalars F (adjoin K S) = K ⊔ adjoin F S := by\n  rw [restrictScalars_adjoin, adjoin_union, adjoin_self]\n\n"}
{"name":"IntermediateField.adjoin_iUnion","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nι : Sort u_3\nf : ι → Set E\n⊢ Eq (IntermediateField.adjoin F (Set.iUnion fun i => f i)) (iSup fun i => IntermediateField.adjoin F (f i))","decl":"theorem adjoin_iUnion {ι} (f : ι → Set E) : adjoin F (⋃ i, f i) = ⨆ i, adjoin F (f i) :=\n  gc.l_iSup\n\n"}
{"name":"IntermediateField.iSup_eq_adjoin","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nι : Sort u_3\nf : ι → IntermediateField F E\n⊢ Eq (iSup fun i => f i) (IntermediateField.adjoin F (Set.iUnion fun i => ↑(f i)))","decl":"theorem iSup_eq_adjoin {ι} (f : ι → IntermediateField F E) :\n    ⨆ i, f i = adjoin F (⋃ i, f i : Set E) := by\n  simp_rw [adjoin_iUnion, adjoin_self]\n\n"}
{"name":"IntermediateField.restrictScalars_adjoin_of_algEquiv","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝¹⁰ : Field F\nE : Type u_2\ninst✝⁹ : Field E\ninst✝⁸ : Algebra F E\nL : Type u_3\nL' : Type u_4\ninst✝⁷ : Field L\ninst✝⁶ : Field L'\ninst✝⁵ : Algebra F L\ninst✝⁴ : Algebra L E\ninst✝³ : Algebra F L'\ninst✝² : Algebra L' E\ninst✝¹ : IsScalarTower F L E\ninst✝ : IsScalarTower F L' E\ni : AlgEquiv F L L'\nhi : Eq (⇑(algebraMap L E)) (Function.comp ⇑(algebraMap L' E) ⇑i)\nS : Set E\n⊢ Eq (IntermediateField.restrictScalars F (IntermediateField.adjoin L S)) (IntermediateField.restrictScalars F (IntermediateField.adjoin L' S))","decl":"variable {F} in\n/-- If `E / L / F` and `E / L' / F` are two field extension towers, `L ≃ₐ[F] L'` is an isomorphism\ncompatible with `E / L` and `E / L'`, then for any subset `S` of `E`, `L(S)` and `L'(S)` are\nequal as intermediate fields of `E / F`. -/\ntheorem restrictScalars_adjoin_of_algEquiv\n    {L L' : Type*} [Field L] [Field L']\n    [Algebra F L] [Algebra L E] [Algebra F L'] [Algebra L' E]\n    [IsScalarTower F L E] [IsScalarTower F L' E] (i : L ≃ₐ[F] L')\n    (hi : algebraMap L E = (algebraMap L' E) ∘ i) (S : Set E) :\n    (adjoin L S).restrictScalars F = (adjoin L' S).restrictScalars F := by\n  apply_fun toSubfield using (fun K K' h ↦ by\n    ext x; change x ∈ K.toSubfield ↔ x ∈ K'.toSubfield; rw [h])\n  change Subfield.closure _ = Subfield.closure _\n  congr\n  ext x\n  exact ⟨fun ⟨y, h⟩ ↦ ⟨i y, by rw [← h, hi]; rfl⟩,\n    fun ⟨y, h⟩ ↦ ⟨i.symm y, by rw [← h, hi, Function.comp_apply, AlgEquiv.apply_symm_apply]⟩⟩\n\n"}
{"name":"IntermediateField.adjoin_induction","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\ns : Set E\np : (x : E) → Membership.mem (IntermediateField.adjoin F s) x → Prop\nmem : ∀ (x : E) (hx : Membership.mem s x), p x ⋯\nalgebraMap : ∀ (x : F), p ((_root_.algebraMap F E) x) ⋯\nadd : ∀ (x y : E) (hx : Membership.mem (IntermediateField.adjoin F s) x) (hy : Membership.mem (IntermediateField.adjoin F s) y), p x hx → p y hy → p (HAdd.hAdd x y) ⋯\ninv : ∀ (x : E) (hx : Membership.mem (IntermediateField.adjoin F s) x), p x hx → p (Inv.inv x) ⋯\nmul : ∀ (x y : E) (hx : Membership.mem (IntermediateField.adjoin F s) x) (hy : Membership.mem (IntermediateField.adjoin F s) y), p x hx → p y hy → p (HMul.hMul x y) ⋯\nx : E\nh : Membership.mem (IntermediateField.adjoin F s) x\n⊢ p x h","decl":"@[elab_as_elim]\ntheorem adjoin_induction {s : Set E} {p : ∀ x ∈ adjoin F s, Prop}\n    (mem : ∀ x hx, p x (subset_adjoin _ _ hx))\n    (algebraMap : ∀ x, p (algebraMap F E x) (algebraMap_mem _ _))\n    (add : ∀ x y hx hy, p x hx → p y hy → p (x + y) (add_mem hx hy))\n    (inv : ∀ x hx, p x hx → p x⁻¹ (inv_mem hx))\n    (mul : ∀ x y hx hy, p x hx → p y hy → p (x * y) (mul_mem hx hy))\n    {x} (h : x ∈ adjoin F s) : p x h :=\n  Subfield.closure_induction\n    (fun x hx ↦ Or.casesOn hx (fun ⟨x, hx⟩ ↦ hx ▸ algebraMap x) (mem x))\n    (by simp_rw [← (_root_.algebraMap F E).map_one]; exact algebraMap 1) add\n    (fun x _ h ↦ by\n      simp_rw [← neg_one_smul F x, Algebra.smul_def]; exact mul _ _ _ _ (algebraMap _) h) inv mul h\n\n"}
{"name":"IntermediateField.adjoin_algHom_ext","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝⁴ : Field F\nE : Type u_2\ninst✝³ : Field E\ninst✝² : Algebra F E\nK : Type u_3\ninst✝¹ : Semiring K\ninst✝ : Algebra F K\ns : Set E\nφ₁ φ₂ : AlgHom F (Subtype fun x => Membership.mem (IntermediateField.adjoin F s) x) K\nh : ∀ (x : E) (hx : Membership.mem s x), Eq (φ₁ ⟨x, ⋯⟩) (φ₂ ⟨x, ⋯⟩)\n⊢ Eq φ₁ φ₂","decl":"theorem adjoin_algHom_ext {s : Set E} ⦃φ₁ φ₂ : adjoin F s →ₐ[F] K⦄\n    (h : ∀ x hx, φ₁ ⟨x, subset_adjoin _ _ hx⟩ = φ₂ ⟨x, subset_adjoin _ _ hx⟩) :\n    φ₁ = φ₂ :=\n  AlgHom.ext fun ⟨x, hx⟩ ↦ adjoin_induction _ h (fun _ ↦ φ₂.commutes _ ▸ φ₁.commutes _)\n    (fun _ _ _ _ h₁ h₂ ↦ by convert congr_arg₂ (· + ·) h₁ h₂ <;> rw [← map_add] <;> rfl)\n    (fun _ _ ↦ eq_on_inv₀ _ _)\n    (fun _ _ _ _ h₁ h₂ ↦ by convert congr_arg₂ (· * ·) h₁ h₂ <;> rw [← map_mul] <;> rfl)\n    hx\n\n"}
{"name":"IntermediateField.algHom_ext_of_eq_adjoin","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝⁴ : Field F\nE : Type u_2\ninst✝³ : Field E\ninst✝² : Algebra F E\nK : Type u_3\ninst✝¹ : Semiring K\ninst✝ : Algebra F K\nS : IntermediateField F E\ns : Set E\nhS : Eq S (IntermediateField.adjoin F s)\nφ₁ φ₂ : AlgHom F (Subtype fun x => Membership.mem S x) K\nh : ∀ (x : E) (hx : Membership.mem s x), Eq (φ₁ ⟨x, ⋯⟩) (φ₂ ⟨x, ⋯⟩)\n⊢ Eq φ₁ φ₂","decl":"theorem algHom_ext_of_eq_adjoin {S : IntermediateField F E} {s : Set E} (hS : S = adjoin F s)\n    ⦃φ₁ φ₂ : S →ₐ[F] K⦄\n    (h : ∀ x hx, φ₁ ⟨x, hS.ge (subset_adjoin _ _ hx)⟩ = φ₂ ⟨x, hS.ge (subset_adjoin _ _ hx)⟩) :\n    φ₁ = φ₂ := by\n  subst hS; exact adjoin_algHom_ext F h\n\n"}
{"name":"IntermediateField.mem_adjoin_simple_self","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nα : E\n⊢ Membership.mem (IntermediateField.adjoin F (Singleton.singleton α)) α","decl":"theorem mem_adjoin_simple_self : α ∈ F⟮α⟯ :=\n  subset_adjoin F {α} (Set.mem_singleton α)\n\n"}
{"name":"IntermediateField.AdjoinSimple.coe_gen","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nα : E\n⊢ Eq (↑(IntermediateField.AdjoinSimple.gen F α)) α","decl":"@[simp]\ntheorem AdjoinSimple.coe_gen : (AdjoinSimple.gen F α : E) = α :=\n  rfl\n\n"}
{"name":"IntermediateField.AdjoinSimple.algebraMap_gen","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nα : E\n⊢ Eq ((algebraMap (Subtype fun x => Membership.mem (IntermediateField.adjoin F (Singleton.singleton α)) x) E) (IntermediateField.AdjoinSimple.gen F α)) α","decl":"theorem AdjoinSimple.algebraMap_gen : algebraMap F⟮α⟯ E (AdjoinSimple.gen F α) = α :=\n  rfl\n\n"}
{"name":"IntermediateField.adjoin_simple_adjoin_simple","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nα β : E\n⊢ Eq (IntermediateField.restrictScalars F (IntermediateField.adjoin (Subtype fun x => Membership.mem (IntermediateField.adjoin F (Singleton.singleton α)) x) (Singleton.singleton β))) (IntermediateField.adjoin F (Insert.insert α (Singleton.singleton β)))","decl":"theorem adjoin_simple_adjoin_simple (β : E) : F⟮α⟯⟮β⟯.restrictScalars F = F⟮α, β⟯ :=\n  adjoin_adjoin_left _ _ _\n\n"}
{"name":"IntermediateField.adjoin_simple_comm","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nα β : E\n⊢ Eq (IntermediateField.restrictScalars F (IntermediateField.adjoin (Subtype fun x => Membership.mem (IntermediateField.adjoin F (Singleton.singleton α)) x) (Singleton.singleton β))) (IntermediateField.restrictScalars F (IntermediateField.adjoin (Subtype fun x => Membership.mem (IntermediateField.adjoin F (Singleton.singleton β)) x) (Singleton.singleton α)))","decl":"theorem adjoin_simple_comm (β : E) : F⟮α⟯⟮β⟯.restrictScalars F = F⟮β⟯⟮α⟯.restrictScalars F :=\n  adjoin_adjoin_comm _ _ _\n\n"}
{"name":"IntermediateField.adjoin_simple_le_iff","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nα : E\nK : IntermediateField F E\n⊢ Iff (LE.le (IntermediateField.adjoin F (Singleton.singleton α)) K) (Membership.mem K α)","decl":"theorem adjoin_simple_le_iff {K : IntermediateField F E} : F⟮α⟯ ≤ K ↔ α ∈ K := by simp\n\n"}
{"name":"IntermediateField.biSup_adjoin_simple","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : Set E\n⊢ Eq (iSup fun x => iSup fun h => IntermediateField.adjoin F (Singleton.singleton x)) (IntermediateField.adjoin F S)","decl":"theorem biSup_adjoin_simple : ⨆ x ∈ S, F⟮x⟯ = adjoin F S := by\n  rw [← iSup_subtype'', ← gc.l_iSup, iSup_subtype'']; congr; exact S.biUnion_of_singleton\n\n"}
{"name":"IntermediateField.adjoin_eq_bot_iff","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : Set E\n⊢ Iff (Eq (IntermediateField.adjoin F S) Bot.bot) (HasSubset.Subset S ↑Bot.bot)","decl":"@[simp]\ntheorem adjoin_eq_bot_iff : adjoin F S = ⊥ ↔ S ⊆ (⊥ : IntermediateField F E) := by\n  rw [eq_bot_iff, adjoin_le_iff]\n\n/- Porting note: this was tagged `simp`. -/\n"}
{"name":"IntermediateField.adjoin_simple_eq_bot_iff","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nα : E\n⊢ Iff (Eq (IntermediateField.adjoin F (Singleton.singleton α)) Bot.bot) (Membership.mem Bot.bot α)","decl":"theorem adjoin_simple_eq_bot_iff : F⟮α⟯ = ⊥ ↔ α ∈ (⊥ : IntermediateField F E) := by\n  simp\n\n"}
{"name":"IntermediateField.adjoin_zero","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\n⊢ Eq (IntermediateField.adjoin F (Singleton.singleton 0)) Bot.bot","decl":"@[simp]\ntheorem adjoin_zero : F⟮(0 : E)⟯ = ⊥ :=\n  adjoin_simple_eq_bot_iff.mpr (zero_mem ⊥)\n\n"}
{"name":"IntermediateField.adjoin_one","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\n⊢ Eq (IntermediateField.adjoin F (Singleton.singleton 1)) Bot.bot","decl":"@[simp]\ntheorem adjoin_one : F⟮(1 : E)⟯ = ⊥ :=\n  adjoin_simple_eq_bot_iff.mpr (one_mem ⊥)\n\n"}
{"name":"IntermediateField.adjoin_intCast","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nn : Int\n⊢ Eq (IntermediateField.adjoin F (Singleton.singleton ↑n)) Bot.bot","decl":"@[simp]\ntheorem adjoin_intCast (n : ℤ) : F⟮(n : E)⟯ = ⊥ := by\n  exact adjoin_simple_eq_bot_iff.mpr (intCast_mem ⊥ n)\n\n"}
{"name":"IntermediateField.adjoin_natCast","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nn : Nat\n⊢ Eq (IntermediateField.adjoin F (Singleton.singleton ↑n)) Bot.bot","decl":"@[simp]\ntheorem adjoin_natCast (n : ℕ) : F⟮(n : E)⟯ = ⊥ :=\n  adjoin_simple_eq_bot_iff.mpr (natCast_mem ⊥ n)\n\n"}
{"name":"IntermediateField.fg_adjoin_finset","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nt : Finset E\n⊢ (IntermediateField.adjoin F ↑t).FG","decl":"theorem fg_adjoin_finset (t : Finset E) : (adjoin F (↑t : Set E)).FG :=\n  ⟨t, rfl⟩\n\n"}
{"name":"IntermediateField.fg_def","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : IntermediateField F E\n⊢ Iff S.FG (Exists fun t => And t.Finite (Eq (IntermediateField.adjoin F t) S))","decl":"theorem fg_def {S : IntermediateField F E} : S.FG ↔ ∃ t : Set E, Set.Finite t ∧ adjoin F t = S :=\n  Iff.symm Set.exists_finite_iff_finset\n\n"}
{"name":"IntermediateField.fg_adjoin_of_finite","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nt : Set E\nh : t.Finite\n⊢ (IntermediateField.adjoin F t).FG","decl":"theorem fg_adjoin_of_finite {t : Set E} (h : Set.Finite t) : (adjoin F t).FG :=\n  fg_def.mpr ⟨t, h, rfl⟩\n\n"}
{"name":"IntermediateField.fg_bot","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\n⊢ Bot.bot.FG","decl":"theorem fg_bot : (⊥ : IntermediateField F E).FG :=\n  -- Porting note: was `⟨∅, adjoin_empty F E⟩`\n  ⟨∅, by simp only [Finset.coe_empty, adjoin_empty]⟩\n\n"}
{"name":"IntermediateField.fg_sup","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS T : IntermediateField F E\nhS : S.FG\nhT : T.FG\n⊢ (Max.max S T).FG","decl":"theorem fg_sup {S T : IntermediateField F E} (hS : S.FG) (hT : T.FG) : (S ⊔ T).FG := by\n  obtain ⟨s, rfl⟩ := hS; obtain ⟨t, rfl⟩ := hT\n  classical rw [← adjoin_union, ← Finset.coe_union]\n  exact fg_adjoin_finset _\n\n"}
{"name":"IntermediateField.fg_iSup","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝³ : Field F\nE : Type u_2\ninst✝² : Field E\ninst✝¹ : Algebra F E\nι : Sort u_3\ninst✝ : Finite ι\nS : ι → IntermediateField F E\nh : ∀ (i : ι), (S i).FG\n⊢ (iSup fun i => S i).FG","decl":"theorem fg_iSup {ι : Sort*} [Finite ι] {S : ι → IntermediateField F E} (h : ∀ i, (S i).FG) :\n    (⨆ i, S i).FG := by\n  choose s hs using h\n  simp_rw [← hs, ← adjoin_iUnion]\n  exact fg_adjoin_of_finite (Set.finite_iUnion fun _ ↦ Finset.finite_toSet _)\n\n"}
{"name":"IntermediateField.induction_on_adjoin_finset","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nS : Finset E\nP : IntermediateField F E → Prop\nbase : P Bot.bot\nih : ∀ (K : IntermediateField F E) (x : E), Membership.mem S x → P K → P (IntermediateField.restrictScalars F (IntermediateField.adjoin (Subtype fun x => Membership.mem K x) (Singleton.singleton x)))\n⊢ P (IntermediateField.adjoin F ↑S)","decl":"theorem induction_on_adjoin_finset (S : Finset E) (P : IntermediateField F E → Prop) (base : P ⊥)\n    (ih : ∀ (K : IntermediateField F E), ∀ x ∈ S, P K → P (K⟮x⟯.restrictScalars F)) :\n    P (adjoin F S) := by\n  classical\n  refine Finset.induction_on' S ?_ (fun ha _ _ h => ?_)\n  · simp [base]\n  · rw [Finset.coe_insert, Set.insert_eq, Set.union_comm, ← adjoin_adjoin_left]\n    exact ih (adjoin F _) _ ha h\n\n"}
{"name":"IntermediateField.induction_on_adjoin_fg","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"F : Type u_1\ninst✝² : Field F\nE : Type u_2\ninst✝¹ : Field E\ninst✝ : Algebra F E\nP : IntermediateField F E → Prop\nbase : P Bot.bot\nih : ∀ (K : IntermediateField F E) (x : E), P K → P (IntermediateField.restrictScalars F (IntermediateField.adjoin (Subtype fun x => Membership.mem K x) (Singleton.singleton x)))\nK : IntermediateField F E\nhK : K.FG\n⊢ P K","decl":"theorem induction_on_adjoin_fg (P : IntermediateField F E → Prop) (base : P ⊥)\n    (ih : ∀ (K : IntermediateField F E) (x : E), P K → P (K⟮x⟯.restrictScalars F))\n    (K : IntermediateField F E) (hK : K.FG) : P K := by\n  obtain ⟨S, rfl⟩ := hK\n  exact induction_on_adjoin_finset S P base fun K x _ hK => ih K x hK\n\n"}
{"name":"IntermediateField.map_comap_eq","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"K : Type u_1\nL : Type u_2\nL' : Type u_3\ninst✝⁴ : Field K\ninst✝³ : Field L\ninst✝² : Field L'\ninst✝¹ : Algebra K L\ninst✝ : Algebra K L'\nf : AlgHom K L L'\nS : IntermediateField K L'\n⊢ Eq (IntermediateField.map f (IntermediateField.comap f S)) (Min.min S f.fieldRange)","decl":"theorem map_comap_eq (f : L →ₐ[K] L') (S : IntermediateField K L') :\n    (S.comap f).map f = S ⊓ f.fieldRange :=\n  SetLike.coe_injective Set.image_preimage_eq_inter_range\n\n"}
{"name":"IntermediateField.map_comap_eq_self","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"K : Type u_1\nL : Type u_2\nL' : Type u_3\ninst✝⁴ : Field K\ninst✝³ : Field L\ninst✝² : Field L'\ninst✝¹ : Algebra K L\ninst✝ : Algebra K L'\nf : AlgHom K L L'\nS : IntermediateField K L'\nh : LE.le S f.fieldRange\n⊢ Eq (IntermediateField.map f (IntermediateField.comap f S)) S","decl":"theorem map_comap_eq_self {f : L →ₐ[K] L'} {S : IntermediateField K L'} (h : S ≤ f.fieldRange) :\n    (S.comap f).map f = S := by\n  simpa only [inf_of_le_left h] using map_comap_eq f S\n\n"}
{"name":"IntermediateField.map_comap_eq_self_of_surjective","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"K : Type u_1\nL : Type u_2\nL' : Type u_3\ninst✝⁴ : Field K\ninst✝³ : Field L\ninst✝² : Field L'\ninst✝¹ : Algebra K L\ninst✝ : Algebra K L'\nf : AlgHom K L L'\nhf : Function.Surjective ⇑f\nS : IntermediateField K L'\n⊢ Eq (IntermediateField.map f (IntermediateField.comap f S)) S","decl":"theorem map_comap_eq_self_of_surjective {f : L →ₐ[K] L'} (hf : Function.Surjective f)\n    (S : IntermediateField K L') : (S.comap f).map f = S :=\n  SetLike.coe_injective (Set.image_preimage_eq _ hf)\n\n"}
{"name":"IntermediateField.comap_map","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"K : Type u_1\nL : Type u_2\nL' : Type u_3\ninst✝⁴ : Field K\ninst✝³ : Field L\ninst✝² : Field L'\ninst✝¹ : Algebra K L\ninst✝ : Algebra K L'\nf : AlgHom K L L'\nS : IntermediateField K L\n⊢ Eq (IntermediateField.comap f (IntermediateField.map f S)) S","decl":"theorem comap_map (f : L →ₐ[K] L') (S : IntermediateField K L) : (S.map f).comap f = S :=\n  SetLike.coe_injective (Set.preimage_image_eq _ f.injective)\n\n"}
{"name":"Subfield.extendScalars_self","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"L : Type u_2\ninst✝ : Field L\nF : Subfield L\n⊢ Eq (Subfield.extendScalars ⋯) Bot.bot","decl":"@[simp]\ntheorem extendScalars_self : extendScalars (le_refl F) = ⊥ := by\n  ext x\n  rw [mem_extendScalars, IntermediateField.mem_bot]\n  refine ⟨fun h ↦ ⟨⟨x, h⟩, rfl⟩, ?_⟩\n  rintro ⟨y, rfl⟩\n  exact y.2\n\n"}
{"name":"Subfield.extendScalars_top","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"L : Type u_2\ninst✝ : Field L\nF : Subfield L\n⊢ Eq (Subfield.extendScalars ⋯) Top.top","decl":"@[simp]\ntheorem extendScalars_top : extendScalars (le_top : F ≤ ⊤) = ⊤ :=\n  IntermediateField.toSubfield_injective (by simp)\n\n"}
{"name":"Subfield.extendScalars_sup","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"L : Type u_2\ninst✝ : Field L\nF E E' : Subfield L\nh : LE.le F E\nh' : LE.le F E'\n⊢ Eq (Max.max (Subfield.extendScalars h) (Subfield.extendScalars h')) (Subfield.extendScalars ⋯)","decl":"theorem extendScalars_sup :\n    extendScalars h ⊔ extendScalars h' = extendScalars (le_sup_of_le_left h : F ≤ E ⊔ E') :=\n  ((extendScalars.orderIso F).map_sup ⟨_, h⟩ ⟨_, h'⟩).symm\n\n"}
{"name":"Subfield.extendScalars_inf","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"L : Type u_2\ninst✝ : Field L\nF E E' : Subfield L\nh : LE.le F E\nh' : LE.le F E'\n⊢ Eq (Min.min (Subfield.extendScalars h) (Subfield.extendScalars h')) (Subfield.extendScalars ⋯)","decl":"theorem extendScalars_inf : extendScalars h ⊓ extendScalars h' = extendScalars (le_inf h h') :=\n  ((extendScalars.orderIso F).map_inf ⟨_, h⟩ ⟨_, h'⟩).symm\n\n"}
{"name":"IntermediateField.extendScalars_self","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"K : Type u_1\ninst✝² : Field K\nL : Type u_2\ninst✝¹ : Field L\ninst✝ : Algebra K L\nF : IntermediateField K L\n⊢ Eq (IntermediateField.extendScalars ⋯) Bot.bot","decl":"@[simp]\ntheorem extendScalars_self : extendScalars (le_refl F) = ⊥ :=\n  restrictScalars_injective K (by simp)\n\n"}
{"name":"IntermediateField.extendScalars_top","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"K : Type u_1\ninst✝² : Field K\nL : Type u_2\ninst✝¹ : Field L\ninst✝ : Algebra K L\nF : IntermediateField K L\n⊢ Eq (IntermediateField.extendScalars ⋯) Top.top","decl":"@[simp]\ntheorem extendScalars_top : extendScalars (le_top : F ≤ ⊤) = ⊤ :=\n  restrictScalars_injective K (by simp)\n\n"}
{"name":"IntermediateField.extendScalars_sup","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"K : Type u_1\ninst✝² : Field K\nL : Type u_2\ninst✝¹ : Field L\ninst✝ : Algebra K L\nF E E' : IntermediateField K L\nh : LE.le F E\nh' : LE.le F E'\n⊢ Eq (Max.max (IntermediateField.extendScalars h) (IntermediateField.extendScalars h')) (IntermediateField.extendScalars ⋯)","decl":"theorem extendScalars_sup :\n    extendScalars h ⊔ extendScalars h' = extendScalars (le_sup_of_le_left h : F ≤ E ⊔ E') :=\n  ((extendScalars.orderIso F).map_sup ⟨_, h⟩ ⟨_, h'⟩).symm\n\n"}
{"name":"IntermediateField.extendScalars_inf","module":"Mathlib.FieldTheory.IntermediateField.Adjoin.Defs","initialProofState":"K : Type u_1\ninst✝² : Field K\nL : Type u_2\ninst✝¹ : Field L\ninst✝ : Algebra K L\nF E E' : IntermediateField K L\nh : LE.le F E\nh' : LE.le F E'\n⊢ Eq (Min.min (IntermediateField.extendScalars h) (IntermediateField.extendScalars h')) (IntermediateField.extendScalars ⋯)","decl":"theorem extendScalars_inf : extendScalars h ⊓ extendScalars h' = extendScalars (le_inf h h') :=\n  ((extendScalars.orderIso F).map_inf ⟨_, h⟩ ⟨_, h'⟩).symm\n\n"}
