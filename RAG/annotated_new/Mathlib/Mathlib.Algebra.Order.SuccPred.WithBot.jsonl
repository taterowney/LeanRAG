{"name":"WithBot.succ_natCast","module":"Mathlib.Algebra.Order.SuccPred.WithBot","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : OrderBot α\ninst✝¹ : AddMonoidWithOne α\ninst✝ : SuccAddOrder α\nn : Nat\n⊢ Eq (↑n).succ (HAdd.hAdd (↑n) 1)","decl":"lemma succ_natCast (n : ℕ) : succ (n : WithBot α) = n + 1 := by\n  rw [← WithBot.coe_natCast, succ_coe, Order.succ_eq_add_one]\n\n"}
{"name":"WithBot.succ_zero","module":"Mathlib.Algebra.Order.SuccPred.WithBot","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : OrderBot α\ninst✝¹ : AddMonoidWithOne α\ninst✝ : SuccAddOrder α\n⊢ Eq (WithBot.succ 0) 1","decl":"@[simp] lemma succ_zero : succ (0 : WithBot α) = 1 := by simpa using succ_natCast 0\n\n"}
{"name":"WithBot.succ_one","module":"Mathlib.Algebra.Order.SuccPred.WithBot","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : OrderBot α\ninst✝¹ : AddMonoidWithOne α\ninst✝ : SuccAddOrder α\n⊢ Eq (WithBot.succ 1) 2","decl":"@[simp]\nlemma succ_one : succ (1 : WithBot α) = 2 := by simpa [one_add_one_eq_two] using succ_natCast 1\n\n"}
{"name":"WithBot.succ_ofNat","module":"Mathlib.Algebra.Order.SuccPred.WithBot","initialProofState":"α : Type u_1\ninst✝⁴ : Preorder α\ninst✝³ : OrderBot α\ninst✝² : AddMonoidWithOne α\ninst✝¹ : SuccAddOrder α\nn : Nat\ninst✝ : n.AtLeastTwo\n⊢ Eq (OfNat.ofNat n).succ (HAdd.hAdd (OfNat.ofNat n) 1)","decl":"@[simp]\nlemma succ_ofNat (n : ℕ) [n.AtLeastTwo] :\n    succ (ofNat(n) : WithBot α) = ofNat(n) + 1 := succ_natCast n\n\n"}
