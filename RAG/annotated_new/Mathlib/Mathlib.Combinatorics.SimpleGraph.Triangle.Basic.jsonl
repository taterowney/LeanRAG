{"name":"SimpleGraph.LocallyLinear.edgeDisjointTriangles","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\nG : SimpleGraph Œ±\na‚úù : G.LocallyLinear\n‚ä¢ G.EdgeDisjointTriangles","decl":"protected lemma LocallyLinear.edgeDisjointTriangles : G.LocallyLinear ‚Üí G.EdgeDisjointTriangles :=\n  And.left\n\n"}
{"name":"SimpleGraph.EdgeDisjointTriangles.mono","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\nG H : SimpleGraph Œ±\nh : LE.le G H\nhH : H.EdgeDisjointTriangles\n‚ä¢ G.EdgeDisjointTriangles","decl":"nonrec lemma EdgeDisjointTriangles.mono (h : G ‚â§ H) (hH : H.EdgeDisjointTriangles) :\n    G.EdgeDisjointTriangles := hH.mono <| cliqueSet_mono h\n\n"}
{"name":"SimpleGraph.edgeDisjointTriangles_bot","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\n‚ä¢ Bot.bot.EdgeDisjointTriangles","decl":"@[simp] lemma edgeDisjointTriangles_bot : (‚ä• : SimpleGraph Œ±).EdgeDisjointTriangles := by\n  simp [EdgeDisjointTriangles]\n\n"}
{"name":"SimpleGraph.locallyLinear_bot","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\n‚ä¢ Bot.bot.LocallyLinear","decl":"@[simp] lemma locallyLinear_bot : (‚ä• : SimpleGraph Œ±).LocallyLinear := by simp [LocallyLinear]\n\n"}
{"name":"SimpleGraph.EdgeDisjointTriangles.map","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\nG : SimpleGraph Œ±\nf : Function.Embedding Œ± Œ≤\nhG : G.EdgeDisjointTriangles\n‚ä¢ (SimpleGraph.map f G).EdgeDisjointTriangles","decl":"lemma EdgeDisjointTriangles.map (f : Œ± ‚Ü™ Œ≤) (hG : G.EdgeDisjointTriangles) :\n    (G.map f).EdgeDisjointTriangles := by\n  rw [EdgeDisjointTriangles, cliqueSet_map (by norm_num : 3 ‚â† 1),\n    (Finset.map_injective f).injOn.pairwise_image]\n  classical\n  rintro s hs t ht hst\n  dsimp [Function.onFun]\n  rw [‚Üê coe_inter, ‚Üê map_inter, coe_map, coe_inter]\n  exact (hG hs ht hst).image _\n\n"}
{"name":"SimpleGraph.LocallyLinear.map","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\nG : SimpleGraph Œ±\nf : Function.Embedding Œ± Œ≤\nhG : G.LocallyLinear\n‚ä¢ (SimpleGraph.map f G).LocallyLinear","decl":"lemma LocallyLinear.map (f : Œ± ‚Ü™ Œ≤) (hG : G.LocallyLinear) : (G.map f).LocallyLinear := by\n  refine ‚ü®hG.1.map _, ?_‚ü©\n  rintro _ _ ‚ü®a, b, h, rfl, rfl‚ü©\n  obtain ‚ü®s, hs, ha, hb‚ü© := hG.2 h\n  exact ‚ü®s.map f, hs.map, mem_map_of_mem _ ha, mem_map_of_mem _ hb‚ü©\n\n"}
{"name":"SimpleGraph.locallyLinear_comap","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\nG : SimpleGraph Œ≤\ne : Equiv Œ± Œ≤\n‚ä¢ Iff (SimpleGraph.comap (‚áëe) G).LocallyLinear G.LocallyLinear","decl":"@[simp] lemma locallyLinear_comap {G : SimpleGraph Œ≤} {e : Œ± ‚âÉ Œ≤} :\n    (G.comap e).LocallyLinear ‚Üî G.LocallyLinear := by\n  refine ‚ü®fun h ‚Ü¶ ?_, ?_‚ü©\n  ¬∑ rw [‚Üê comap_map_eq e.symm.toEmbedding G, comap_symm, map_symm]\n    exact h.map _\n  ¬∑ rw [‚Üê Equiv.coe_toEmbedding, ‚Üê map_symm]\n    exact LocallyLinear.map _\n\n"}
{"name":"SimpleGraph.edgeDisjointTriangles_iff_mem_sym2_subsingleton","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\nG : SimpleGraph Œ±\n‚ä¢ Iff G.EdgeDisjointTriangles (‚àÄ ‚¶Ée : Sym2 Œ±‚¶Ñ, Not e.IsDiag ‚Üí (setOf fun s => And (Membership.mem (G.cliqueSet 3) s) (Membership.mem s.sym2 e)).Subsingleton)","decl":"lemma edgeDisjointTriangles_iff_mem_sym2_subsingleton :\n    G.EdgeDisjointTriangles ‚Üî\n      ‚àÄ ‚¶Ée : Sym2 Œ±‚¶Ñ, ¬¨ e.IsDiag ‚Üí {s ‚àà G.cliqueSet 3 | e ‚àà (s : Finset Œ±).sym2}.Subsingleton := by\n  classical\n  have (a b) (hab : a ‚â† b) : {s ‚àà (G.cliqueSet 3 : Set (Finset Œ±)) | s(a, b) ‚àà (s : Finset Œ±).sym2}\n    = {s | G.Adj a b ‚àß ‚àÉ c, G.Adj a c ‚àß G.Adj b c ‚àß s = {a, b, c}} := by\n    ext s\n    simp only [mem_sym2_iff, Sym2.mem_iff, forall_eq_or_imp, forall_eq, Set.sep_and,\n      Set.mem_inter_iff, Set.mem_sep_iff, mem_cliqueSet_iff, Set.mem_setOf_eq,\n      and_and_and_comm (b := _ ‚àà _), and_self, is3Clique_iff]\n    constructor\n    ¬∑ rintro ‚ü®‚ü®c, d, e, hcd, hce, hde, rfl‚ü©, hab‚ü©\n      simp only [mem_insert, mem_singleton] at hab\n      obtain ‚ü®rfl | rfl | rfl, rfl | rfl | rfl‚ü© := hab\n      any_goals\n        simp only [*, adj_comm, true_and, Ne, eq_self_iff_true, not_true] at *\n      any_goals\n        first\n        | exact ‚ü®c, by aesop‚ü©\n        | exact ‚ü®d, by aesop‚ü©\n        | exact ‚ü®e, by aesop‚ü©\n        | simp only [*, adj_comm, true_and, Ne, eq_self_iff_true, not_true] at *\n          exact ‚ü®c, by aesop‚ü©\n        | simp only [*, adj_comm, true_and, Ne, eq_self_iff_true, not_true] at *\n          exact ‚ü®d, by aesop‚ü©\n        | simp only [*, adj_comm, true_and, Ne, eq_self_iff_true, not_true] at *\n          exact ‚ü®e, by aesop‚ü©\n    ¬∑ rintro ‚ü®hab, c, hac, hbc, rfl‚ü©\n      refine ‚ü®‚ü®a, b, c, ?_‚ü©, ?_‚ü© <;> simp [*]\n  constructor\n  ¬∑ rw [Sym2.forall]\n    rintro hG a b hab\n    simp only [Sym2.isDiag_iff_proj_eq] at hab\n    rw [this _ _ (Sym2.mk_isDiag_iff.not.2 hab)]\n    rintro _ ‚ü®hab, c, hac, hbc, rfl‚ü© _ ‚ü®-, d, had, hbd, rfl‚ü©\n    refine hG.eq ?_ ?_ (Set.Nontrivial.not_subsingleton ‚ü®a, ?_, b, ?_, hab.ne‚ü©) <;>\n      simp [is3Clique_triple_iff, *]\n  ¬∑ simp only [EdgeDisjointTriangles, is3Clique_iff, Set.Pairwise, mem_cliqueSet_iff, Ne,\n      forall_exists_index, and_imp, ‚Üê Set.not_nontrivial_iff (s := _ ‚à© _), not_imp_not,\n      Set.Nontrivial, Set.mem_inter_iff, mem_coe]\n    rintro hG _ a b c hab hac hbc rfl _ d e f hde hdf hef rfl g hg‚ÇÅ hg‚ÇÇ h hh‚ÇÅ hh‚ÇÇ hgh\n    refine hG (Sym2.mk_isDiag_iff.not.2 hgh) ‚ü®‚ü®a, b, c, ?_‚ü©, by simpa using And.intro hg‚ÇÅ hh‚ÇÅ‚ü©\n      ‚ü®‚ü®d, e, f, ?_‚ü©, by simpa using And.intro hg‚ÇÇ hh‚ÇÇ‚ü© <;> simp [is3Clique_triple_iff, *]\n\n"}
{"name":"SimpleGraph.EdgeDisjointTriangles.mem_sym2_subsingleton","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\nG : SimpleGraph Œ±\na‚úù¬π : G.EdgeDisjointTriangles\ne : Sym2 Œ±\na‚úù : Not e.IsDiag\n‚ä¢ (setOf fun s => And (Membership.mem (G.cliqueSet 3) s) (Membership.mem s.sym2 e)).Subsingleton","decl":"alias ‚ü®EdgeDisjointTriangles.mem_sym2_subsingleton, _‚ü© :=\n  edgeDisjointTriangles_iff_mem_sym2_subsingleton\n\n"}
{"name":"SimpleGraph.EdgeDisjointTriangles.card_edgeFinset_le","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\nG : SimpleGraph Œ±\ninst‚úù¬≤ : DecidableEq Œ±\ninst‚úù¬π : Fintype Œ±\ninst‚úù : DecidableRel G.Adj\nhG : G.EdgeDisjointTriangles\n‚ä¢ LE.le (HMul.hMul 3 (G.cliqueFinset 3).card) G.edgeFinset.card","decl":"lemma EdgeDisjointTriangles.card_edgeFinset_le (hG : G.EdgeDisjointTriangles) :\n    3 * #(G.cliqueFinset 3) ‚â§ #G.edgeFinset := by\n  rw [mul_comm, ‚Üê mul_one #G.edgeFinset]\n  refine card_mul_le_card_mul (fun s e ‚Ü¶ e ‚àà s.sym2) ?_ (fun e he ‚Ü¶ ?_)\n  ¬∑ simp only [is3Clique_iff, mem_cliqueFinset_iff, mem_sym2_iff, forall_exists_index, and_imp]\n    rintro _ a b c hab hac hbc rfl\n    have : #{s(a, b), s(a, c), s(b, c)} = 3 := by\n      refine card_eq_three.2 ‚ü®_, _, _, ?_, ?_, ?_, rfl‚ü© <;> simp [hab.ne, hac.ne, hbc.ne]\n    rw [‚Üê this]\n    refine card_mono ?_\n    simp [insert_subset, *]\n  ¬∑ simpa only [card_le_one, mem_bipartiteBelow, and_imp, Set.Subsingleton, Set.mem_setOf_eq,\n      mem_cliqueFinset_iff, mem_cliqueSet_iff]\n      using hG.mem_sym2_subsingleton (G.not_isDiag_of_mem_edgeSet <| mem_edgeFinset.1 he)\n\n"}
{"name":"SimpleGraph.LocallyLinear.card_edgeFinset","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\nG : SimpleGraph Œ±\ninst‚úù¬≤ : DecidableEq Œ±\ninst‚úù¬π : Fintype Œ±\ninst‚úù : DecidableRel G.Adj\nhG : G.LocallyLinear\n‚ä¢ Eq G.edgeFinset.card (HMul.hMul 3 (G.cliqueFinset 3).card)","decl":"lemma LocallyLinear.card_edgeFinset (hG : G.LocallyLinear) :\n    #G.edgeFinset = 3 * #(G.cliqueFinset 3) := by\n  refine hG.edgeDisjointTriangles.card_edgeFinset_le.antisymm' ?_\n  rw [‚Üê mul_comm, ‚Üê mul_one #_]\n  refine card_mul_le_card_mul (fun e s ‚Ü¶ e ‚àà s.sym2) ?_ ?_\n  ¬∑ simpa [Sym2.forall, Nat.one_le_iff_ne_zero, -Finset.card_eq_zero, Finset.card_ne_zero,\n        Finset.Nonempty]\n      using hG.2\n  simp only [mem_cliqueFinset_iff, is3Clique_iff, forall_exists_index, and_imp]\n  rintro _ a b c hab hac hbc rfl\n  calc\n    _ ‚â§ #{s(a, b), s(a, c), s(b, c)} := card_le_card ?_\n    _ ‚â§ 3 := (card_insert_le _ _).trans (succ_le_succ <| (card_insert_le _ _).trans_eq <| by\n      rw [card_singleton])\n  simp only [subset_iff, Sym2.forall, mem_sym2_iff, le_eq_subset, mem_bipartiteBelow, mem_insert,\n    mem_edgeFinset, mem_singleton, and_imp, mem_edgeSet, Sym2.mem_iff, forall_eq_or_imp,\n    forall_eq, Quotient.eq, Sym2.rel_iff]\n  rintro d e hde (rfl | rfl | rfl) (rfl | rfl | rfl) <;> simp [*] at *\n\n"}
{"name":"SimpleGraph.farFromTriangleFree_iff","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\nùïú : Type u_3\ninst‚úù¬≤ : LinearOrderedField ùïú\nG : SimpleGraph Œ±\nŒµ : ùïú\ninst‚úù¬π : Fintype Œ±\ninst‚úù : DecidableRel G.Adj\n‚ä¢ Iff (G.FarFromTriangleFree Œµ) (‚àÄ ‚¶ÉH : SimpleGraph Œ±‚¶Ñ [inst : DecidableRel H.Adj], LE.le H G ‚Üí H.CliqueFree 3 ‚Üí LE.le (HMul.hMul Œµ ‚Üë(HPow.hPow (Fintype.card Œ±) 2)) (HSub.hSub ‚ÜëG.edgeFinset.card ‚ÜëH.edgeFinset.card))","decl":"theorem farFromTriangleFree_iff :\n    G.FarFromTriangleFree Œµ ‚Üî ‚àÄ ‚¶ÉH : SimpleGraph Œ±‚¶Ñ, [DecidableRel H.Adj] ‚Üí H ‚â§ G ‚Üí H.CliqueFree 3 ‚Üí\n      Œµ * (card Œ± ^ 2 : ‚Ñï) ‚â§ #G.edgeFinset - #H.edgeFinset := deleteFar_iff\n\n"}
{"name":"SimpleGraph.farFromTriangleFree.le_card_sub_card","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\nùïú : Type u_3\ninst‚úù¬≥ : LinearOrderedField ùïú\nG : SimpleGraph Œ±\nŒµ : ùïú\ninst‚úù¬≤ : Fintype Œ±\ninst‚úù¬π : DecidableRel G.Adj\na‚úù¬≤ : G.FarFromTriangleFree Œµ\nH : SimpleGraph Œ±\ninst‚úù : DecidableRel H.Adj\na‚úù¬π : LE.le H G\na‚úù : H.CliqueFree 3\n‚ä¢ LE.le (HMul.hMul Œµ ‚Üë(HPow.hPow (Fintype.card Œ±) 2)) (HSub.hSub ‚ÜëG.edgeFinset.card ‚ÜëH.edgeFinset.card)","decl":"alias ‚ü®farFromTriangleFree.le_card_sub_card, _‚ü© := farFromTriangleFree_iff\n\n"}
{"name":"SimpleGraph.FarFromTriangleFree.mono","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\nùïú : Type u_3\ninst‚úù¬≤ : LinearOrderedField ùïú\nG : SimpleGraph Œ±\nŒµ Œ¥ : ùïú\ninst‚úù¬π : Fintype Œ±\ninst‚úù : DecidableRel G.Adj\nhŒµ : G.FarFromTriangleFree Œµ\nh : LE.le Œ¥ Œµ\n‚ä¢ G.FarFromTriangleFree Œ¥","decl":"nonrec theorem FarFromTriangleFree.mono (hŒµ : G.FarFromTriangleFree Œµ) (h : Œ¥ ‚â§ Œµ) :\n    G.FarFromTriangleFree Œ¥ := hŒµ.mono <| by gcongr\n\n"}
{"name":"SimpleGraph.FarFromTriangleFree.cliqueFinset_nonempty'","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\nùïú : Type u_3\ninst‚úù‚Å¥ : LinearOrderedField ùïú\nG H : SimpleGraph Œ±\nŒµ : ùïú\ninst‚úù¬≥ : Fintype Œ±\ninst‚úù¬≤ : DecidableRel G.Adj\ninst‚úù¬π : DecidableRel H.Adj\ninst‚úù : DecidableEq Œ±\nhH : LE.le H G\nhG : G.FarFromTriangleFree Œµ\nhcard : LT.lt (HSub.hSub ‚ÜëG.edgeFinset.card ‚ÜëH.edgeFinset.card) (HMul.hMul Œµ ‚Üë(HPow.hPow (Fintype.card Œ±) 2))\n‚ä¢ (H.cliqueFinset 3).Nonempty","decl":"theorem FarFromTriangleFree.cliqueFinset_nonempty' (hH : H ‚â§ G) (hG : G.FarFromTriangleFree Œµ)\n    (hcard : #G.edgeFinset - #H.edgeFinset < Œµ * (card Œ± ^ 2 : ‚Ñï)) :\n    (H.cliqueFinset 3).Nonempty :=\n  nonempty_of_ne_empty <|\n    cliqueFinset_eq_empty_iff.not.2 fun hH' => (hG.le_card_sub_card hH hH').not_lt hcard\n\n"}
{"name":"SimpleGraph.farFromTriangleFree_of_disjoint_triangles","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\nùïú : Type u_3\ninst‚úù¬≥ : LinearOrderedField ùïú\nG : SimpleGraph Œ±\nŒµ : ùïú\ninst‚úù¬≤ : Fintype Œ±\ninst‚úù¬π : DecidableRel G.Adj\ninst‚úù : DecidableEq Œ±\ntris : Finset (Finset Œ±)\nhtris : HasSubset.Subset tris (G.cliqueFinset 3)\npd : (‚Üëtris).Pairwise fun x y => (Inter.inter ‚Üëx ‚Üëy).Subsingleton\ntris_big : LE.le (HMul.hMul Œµ ‚Üë(HPow.hPow (Fintype.card Œ±) 2)) ‚Üëtris.card\n‚ä¢ G.FarFromTriangleFree Œµ","decl":"/-- If there are `Œµ * (card Œ±)^2` disjoint triangles, then the graph is `Œµ`-far from being\ntriangle-free. -/\nlemma farFromTriangleFree_of_disjoint_triangles (tris : Finset (Finset Œ±))\n    (htris : tris ‚äÜ G.cliqueFinset 3)\n    (pd : (tris : Set (Finset Œ±)).Pairwise fun x y ‚Ü¶ (x ‚à© y : Set Œ±).Subsingleton)\n    (tris_big : Œµ * (card Œ± ^ 2 : ‚Ñï) ‚â§ #tris) :\n    G.FarFromTriangleFree Œµ := by\n  rw [farFromTriangleFree_iff]\n  intros H _ hG hH\n  rw [‚Üê Nat.cast_sub (card_le_card <| edgeFinset_mono hG)]\n  exact tris_big.trans\n    (Nat.cast_le.2 <| farFromTriangleFree_of_disjoint_triangles_aux htris pd hG hH)\n\n"}
{"name":"SimpleGraph.EdgeDisjointTriangles.farFromTriangleFree","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\nùïú : Type u_3\ninst‚úù¬≥ : LinearOrderedField ùïú\nG : SimpleGraph Œ±\nŒµ : ùïú\ninst‚úù¬≤ : Fintype Œ±\ninst‚úù¬π : DecidableRel G.Adj\ninst‚úù : DecidableEq Œ±\nhG : G.EdgeDisjointTriangles\ntris_big : LE.le (HMul.hMul Œµ ‚Üë(HPow.hPow (Fintype.card Œ±) 2)) ‚Üë(G.cliqueFinset 3).card\n‚ä¢ G.FarFromTriangleFree Œµ","decl":"protected lemma EdgeDisjointTriangles.farFromTriangleFree (hG : G.EdgeDisjointTriangles)\n    (tris_big : Œµ * (card Œ± ^ 2 : ‚Ñï) ‚â§ #(G.cliqueFinset 3)) :\n    G.FarFromTriangleFree Œµ :=\n  farFromTriangleFree_of_disjoint_triangles _ Subset.rfl (by simpa using hG) tris_big\n\n"}
{"name":"SimpleGraph.FarFromTriangleFree.lt_half","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\nùïú : Type u_3\ninst‚úù¬≥ : LinearOrderedField ùïú\nG : SimpleGraph Œ±\nŒµ : ùïú\ninst‚úù¬≤ : Fintype Œ±\ninst‚úù¬π : DecidableRel G.Adj\ninst‚úù : Nonempty Œ±\nhG : G.FarFromTriangleFree Œµ\n‚ä¢ LT.lt Œµ (Inv.inv 2)","decl":"lemma FarFromTriangleFree.lt_half (hG : G.FarFromTriangleFree Œµ) : Œµ < 2‚Åª¬π := by\n  classical\n  by_contra! hŒµ\n  refine lt_irrefl (Œµ * card Œ± ^ 2) ?_\n  have hŒµ‚ÇÄ : 0 < Œµ := hŒµ.trans_lt' (by norm_num)\n  rw [inv_le_iff_one_le_mul‚ÇÄ (zero_lt_two' ùïú)] at hŒµ\n  calc\n    _ ‚â§ (#G.edgeFinset : ùïú) := by\n      simpa using hG.le_card_sub_card bot_le (cliqueFree_bot (le_succ _))\n    _ ‚â§ Œµ * 2 * #G.edgeFinset := le_mul_of_one_le_left (by positivity) (by assumption)\n    _ < Œµ * card Œ± ^ 2 := ?_\n  rw [mul_assoc, mul_lt_mul_left hŒµ‚ÇÄ]\n  norm_cast\n  calc\n    _ ‚â§ 2 * (‚ä§ : SimpleGraph Œ±).edgeFinset.card := by gcongr; exact le_top\n    _ < card Œ± ^ 2 := ?_\n  rw [edgeFinset_top, filter_not, card_sdiff (subset_univ _), card_univ, Sym2.card]\n  simp_rw [choose_two_right, Nat.add_sub_cancel, Nat.mul_comm _ (card Œ±),\n    funext (propext <| Sym2.isDiag_iff_mem_range_diag ¬∑), univ_filter_mem_range, mul_tsub,\n    Nat.mul_div_cancel' (card Œ±).even_mul_succ_self.two_dvd]\n  rw [card_image_of_injective _ Sym2.diag_injective, card_univ, mul_add_one (Œ± := ‚Ñï), two_mul, sq,\n    add_tsub_add_eq_tsub_right]\n  apply tsub_lt_self <;> positivity\n\n"}
{"name":"SimpleGraph.FarFromTriangleFree.lt_one","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\nùïú : Type u_3\ninst‚úù¬≥ : LinearOrderedField ùïú\nG : SimpleGraph Œ±\nŒµ : ùïú\ninst‚úù¬≤ : Fintype Œ±\ninst‚úù¬π : DecidableRel G.Adj\ninst‚úù : Nonempty Œ±\nhG : G.FarFromTriangleFree Œµ\n‚ä¢ LT.lt Œµ 1","decl":"lemma FarFromTriangleFree.lt_one (hG : G.FarFromTriangleFree Œµ) : Œµ < 1 :=\n  hG.lt_half.trans two_inv_lt_one\n\n"}
{"name":"SimpleGraph.FarFromTriangleFree.nonpos","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\nùïú : Type u_3\ninst‚úù¬≥ : LinearOrderedField ùïú\nG : SimpleGraph Œ±\nŒµ : ùïú\ninst‚úù¬≤ : Fintype Œ±\ninst‚úù¬π : DecidableRel G.Adj\ninst‚úù : Nonempty Œ±\nh‚ÇÄ : G.FarFromTriangleFree Œµ\nh‚ÇÅ : G.CliqueFree 3\n‚ä¢ LE.le Œµ 0","decl":"theorem FarFromTriangleFree.nonpos (h‚ÇÄ : G.FarFromTriangleFree Œµ) (h‚ÇÅ : G.CliqueFree 3) :\n    Œµ ‚â§ 0 := by\n  have := h‚ÇÄ (empty_subset _)\n  rw [coe_empty, Finset.card_empty, cast_zero, deleteEdges_empty] at this\n  exact nonpos_of_mul_nonpos_left (this h‚ÇÅ) (cast_pos.2 <| sq_pos_of_pos Fintype.card_pos)\n\n"}
{"name":"SimpleGraph.CliqueFree.not_farFromTriangleFree","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\nùïú : Type u_3\ninst‚úù¬≥ : LinearOrderedField ùïú\nG : SimpleGraph Œ±\nŒµ : ùïú\ninst‚úù¬≤ : Fintype Œ±\ninst‚úù¬π : DecidableRel G.Adj\ninst‚úù : Nonempty Œ±\nhG : G.CliqueFree 3\nhŒµ : LT.lt 0 Œµ\n‚ä¢ Not (G.FarFromTriangleFree Œµ)","decl":"theorem CliqueFree.not_farFromTriangleFree (hG : G.CliqueFree 3) (hŒµ : 0 < Œµ) :\n    ¬¨G.FarFromTriangleFree Œµ := fun h => (h.nonpos hG).not_lt hŒµ\n\n"}
{"name":"SimpleGraph.FarFromTriangleFree.not_cliqueFree","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\nùïú : Type u_3\ninst‚úù¬≥ : LinearOrderedField ùïú\nG : SimpleGraph Œ±\nŒµ : ùïú\ninst‚úù¬≤ : Fintype Œ±\ninst‚úù¬π : DecidableRel G.Adj\ninst‚úù : Nonempty Œ±\nhG : G.FarFromTriangleFree Œµ\nhŒµ : LT.lt 0 Œµ\n‚ä¢ Not (G.CliqueFree 3)","decl":"theorem FarFromTriangleFree.not_cliqueFree (hG : G.FarFromTriangleFree Œµ) (hŒµ : 0 < Œµ) :\n    ¬¨G.CliqueFree 3 := fun h => (hG.nonpos h).not_lt hŒµ\n\n"}
{"name":"SimpleGraph.FarFromTriangleFree.cliqueFinset_nonempty","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Basic","initialProofState":"Œ± : Type u_1\nùïú : Type u_3\ninst‚úù‚Å¥ : LinearOrderedField ùïú\nG : SimpleGraph Œ±\nŒµ : ùïú\ninst‚úù¬≥ : Fintype Œ±\ninst‚úù¬≤ : DecidableRel G.Adj\ninst‚úù¬π : Nonempty Œ±\ninst‚úù : DecidableEq Œ±\nhG : G.FarFromTriangleFree Œµ\nhŒµ : LT.lt 0 Œµ\n‚ä¢ (G.cliqueFinset 3).Nonempty","decl":"theorem FarFromTriangleFree.cliqueFinset_nonempty [DecidableEq Œ±]\n    (hG : G.FarFromTriangleFree Œµ) (hŒµ : 0 < Œµ) : (G.cliqueFinset 3).Nonempty :=\n  nonempty_of_ne_empty <| cliqueFinset_eq_empty_iff.not.2 <| hG.not_cliqueFree hŒµ\n\n"}
