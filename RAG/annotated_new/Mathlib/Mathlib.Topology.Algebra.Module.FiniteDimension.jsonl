{"name":"instFiniteDimensionalContinuousLinearMapId","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝¹¹ : Field 𝕜\ninst✝¹⁰ : TopologicalSpace 𝕜\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : AddCommGroup F\ninst✝⁵ : Module 𝕜 F\ninst✝⁴ : TopologicalSpace F\ninst✝³ : TopologicalAddGroup F\ninst✝² : ContinuousSMul 𝕜 F\ninst✝¹ : FiniteDimensional 𝕜 E\ninst✝ : FiniteDimensional 𝕜 F\n⊢ FiniteDimensional 𝕜 (ContinuousLinearMap (RingHom.id 𝕜) E F)","decl":"/-- The space of continuous linear maps between finite-dimensional spaces is finite-dimensional. -/\ninstance [FiniteDimensional 𝕜 E] [FiniteDimensional 𝕜 F] : FiniteDimensional 𝕜 (E →L[𝕜] F) :=\n  FiniteDimensional.of_injective (ContinuousLinearMap.coeLM 𝕜 : (E →L[𝕜] F) →ₗ[𝕜] E →ₗ[𝕜] F)\n    ContinuousLinearMap.coe_injective\n\n"}
{"name":"unique_topology_of_t2","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nt : TopologicalSpace 𝕜\nh₁ : TopologicalAddGroup 𝕜\nh₂ : ContinuousSMul 𝕜 𝕜\nh₃ : T2Space 𝕜\n⊢ Eq t UniformSpace.toTopologicalSpace","decl":"/-- If `𝕜` is a nontrivially normed field, any T2 topology on `𝕜` which makes it a topological\nvector space over itself (with the norm topology) is *equal* to the norm topology. -/\ntheorem unique_topology_of_t2 {t : TopologicalSpace 𝕜} (h₁ : @TopologicalAddGroup 𝕜 t _)\n    (h₂ : @ContinuousSMul 𝕜 𝕜 _ hnorm.toUniformSpace.toTopologicalSpace t) (h₃ : @T2Space 𝕜 t) :\n    t = hnorm.toUniformSpace.toTopologicalSpace := by\n  -- Let `𝓣₀` denote the topology on `𝕜` induced by the norm, and `𝓣` be any T2 vector\n  -- topology on `𝕜`. To show that `𝓣₀ = 𝓣`, it suffices to show that they have the same\n  -- neighborhoods of 0.\n  refine TopologicalAddGroup.ext h₁ inferInstance (le_antisymm ?_ ?_)\n  · -- To show `𝓣 ≤ 𝓣₀`, we have to show that closed balls are `𝓣`-neighborhoods of 0.\n    rw [Metric.nhds_basis_closedBall.ge_iff]\n    -- Let `ε > 0`. Since `𝕜` is nontrivially normed, we have `0 < ‖ξ₀‖ < ε` for some `ξ₀ : 𝕜`.\n    intro ε hε\n    rcases NormedField.exists_norm_lt 𝕜 hε with ⟨ξ₀, hξ₀, hξ₀ε⟩\n    -- Since `ξ₀ ≠ 0` and `𝓣` is T2, we know that `{ξ₀}ᶜ` is a `𝓣`-neighborhood of 0.\n    -- Porting note: added `mem_compl_singleton_iff.mpr`\n    have : {ξ₀}ᶜ ∈ @nhds 𝕜 t 0 := IsOpen.mem_nhds isOpen_compl_singleton <|\n      mem_compl_singleton_iff.mpr <| Ne.symm <| norm_ne_zero_iff.mp hξ₀.ne.symm\n    -- Thus, its balanced core `𝓑` is too. Let's show that the closed ball of radius `ε` contains\n    -- `𝓑`, which will imply that the closed ball is indeed a `𝓣`-neighborhood of 0.\n    have : balancedCore 𝕜 {ξ₀}ᶜ ∈ @nhds 𝕜 t 0 := balancedCore_mem_nhds_zero this\n    refine mem_of_superset this fun ξ hξ => ?_\n    -- Let `ξ ∈ 𝓑`. We want to show `‖ξ‖ < ε`. If `ξ = 0`, this is trivial.\n    by_cases hξ0 : ξ = 0\n    · rw [hξ0]\n      exact Metric.mem_closedBall_self hε.le\n    · rw [mem_closedBall_zero_iff]\n      -- Now suppose `ξ ≠ 0`. By contradiction, let's assume `ε < ‖ξ‖`, and show that\n      -- `ξ₀ ∈ 𝓑 ⊆ {ξ₀}ᶜ`, which is a contradiction.\n      by_contra! h\n      suffices (ξ₀ * ξ⁻¹) • ξ ∈ balancedCore 𝕜 {ξ₀}ᶜ by\n        rw [smul_eq_mul 𝕜, mul_assoc, inv_mul_cancel₀ hξ0, mul_one] at this\n        exact not_mem_compl_iff.mpr (mem_singleton ξ₀) ((balancedCore_subset _) this)\n      -- For that, we use that `𝓑` is balanced : since `‖ξ₀‖ < ε < ‖ξ‖`, we have `‖ξ₀ / ξ‖ ≤ 1`,\n      -- hence `ξ₀ = (ξ₀ / ξ) • ξ ∈ 𝓑` because `ξ ∈ 𝓑`.\n      refine (balancedCore_balanced _).smul_mem ?_ hξ\n      rw [norm_mul, norm_inv, mul_inv_le_iff₀ (norm_pos_iff.mpr hξ0), one_mul]\n      exact (hξ₀ε.trans h).le\n  · -- Finally, to show `𝓣₀ ≤ 𝓣`, we simply argue that `id = (fun x ↦ x • 1)` is continuous from\n    -- `(𝕜, 𝓣₀)` to `(𝕜, 𝓣)` because `(•) : (𝕜, 𝓣₀) × (𝕜, 𝓣) → (𝕜, 𝓣)` is continuous.\n    calc\n      @nhds 𝕜 hnorm.toUniformSpace.toTopologicalSpace 0 =\n          map id (@nhds 𝕜 hnorm.toUniformSpace.toTopologicalSpace 0) :=\n        map_id.symm\n      _ = map (fun x => id x • (1 : 𝕜)) (@nhds 𝕜 hnorm.toUniformSpace.toTopologicalSpace 0) := by\n        conv_rhs =>\n          congr\n          ext\n          rw [smul_eq_mul, mul_one]\n      _ ≤ @nhds 𝕜 t ((0 : 𝕜) • (1 : 𝕜)) :=\n        (@Tendsto.smul_const _ _ _ hnorm.toUniformSpace.toTopologicalSpace t _ _ _ _ _\n          tendsto_id (1 : 𝕜))\n      _ = @nhds 𝕜 t 0 := by rw [zero_smul]\n\n"}
{"name":"LinearMap.continuous_of_isClosed_ker","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝⁴ : AddCommGroup E\ninst✝³ : Module 𝕜 E\ninst✝² : TopologicalSpace E\ninst✝¹ : TopologicalAddGroup E\ninst✝ : ContinuousSMul 𝕜 E\nl : LinearMap (RingHom.id 𝕜) E 𝕜\nhl : IsClosed ↑(LinearMap.ker l)\n⊢ Continuous ⇑l","decl":"/-- Any linear form on a topological vector space over a nontrivially normed field is continuous if\n    its kernel is closed. -/\ntheorem LinearMap.continuous_of_isClosed_ker (l : E →ₗ[𝕜] 𝕜)\n    (hl : IsClosed (LinearMap.ker l : Set E)) :\n    Continuous l := by\n  -- `l` is either constant or surjective. If it is constant, the result is trivial.\n  by_cases H : finrank 𝕜 (LinearMap.range l) = 0\n  · rw [Submodule.finrank_eq_zero, LinearMap.range_eq_bot] at H\n    rw [H]\n    exact continuous_zero\n  · -- In the case where `l` is surjective, we factor it as `φ : (E ⧸ l.ker) ≃ₗ[𝕜] 𝕜`. Note that\n    -- `E ⧸ l.ker` is T2 since `l.ker` is closed.\n    have : finrank 𝕜 (LinearMap.range l) = 1 :=\n      le_antisymm (finrank_self 𝕜 ▸ l.range.finrank_le) (zero_lt_iff.mpr H)\n    have hi : Function.Injective ((LinearMap.ker l).liftQ l (le_refl _)) := by\n      rw [← LinearMap.ker_eq_bot]\n      exact Submodule.ker_liftQ_eq_bot _ _ _ (le_refl _)\n    have hs : Function.Surjective ((LinearMap.ker l).liftQ l (le_refl _)) := by\n      rw [← LinearMap.range_eq_top, Submodule.range_liftQ]\n      exact Submodule.eq_top_of_finrank_eq ((finrank_self 𝕜).symm ▸ this)\n    let φ : (E ⧸ LinearMap.ker l) ≃ₗ[𝕜] 𝕜 :=\n      LinearEquiv.ofBijective ((LinearMap.ker l).liftQ l (le_refl _)) ⟨hi, hs⟩\n    have hlφ : (l : E → 𝕜) = φ ∘ (LinearMap.ker l).mkQ := by ext; rfl\n    -- Since the quotient map `E →ₗ[𝕜] (E ⧸ l.ker)` is continuous, the continuity of `l` will follow\n    -- form the continuity of `φ`.\n    suffices Continuous φ.toEquiv by\n      rw [hlφ]\n      exact this.comp continuous_quot_mk\n    -- The pullback by `φ.symm` of the quotient topology is a T2 topology on `𝕜`, because `φ.symm`\n    -- is injective. Since `φ.symm` is linear, it is also a vector space topology.\n    -- Hence, we know that it is equal to the topology induced by the norm.\n    have : induced φ.toEquiv.symm inferInstance = hnorm.toUniformSpace.toTopologicalSpace := by\n      refine unique_topology_of_t2 (topologicalAddGroup_induced φ.symm.toLinearMap)\n        (continuousSMul_induced φ.symm.toMulActionHom) ?_\n      -- Porting note: was `rw [t2Space_iff]`\n      refine (@t2Space_iff 𝕜 (induced (↑(LinearEquiv.toEquiv φ).symm) inferInstance)).mpr ?_\n      exact fun x y hxy =>\n        @separated_by_continuous _ _ (induced _ _) _ _ _ continuous_induced_dom _ _\n          (φ.toEquiv.symm.injective.ne hxy)\n    -- Finally, the pullback by `φ.symm` is exactly the pushforward by `φ`, so we have to prove\n    -- that `φ` is continuous when `𝕜` is endowed with the pushforward by `φ` of the quotient\n    -- topology, which is trivial by definition of the pushforward.\n    rw [this.symm, Equiv.induced_symm]\n    exact continuous_coinduced_rng\n\n"}
{"name":"LinearMap.continuous_iff_isClosed_ker","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝⁴ : AddCommGroup E\ninst✝³ : Module 𝕜 E\ninst✝² : TopologicalSpace E\ninst✝¹ : TopologicalAddGroup E\ninst✝ : ContinuousSMul 𝕜 E\nl : LinearMap (RingHom.id 𝕜) E 𝕜\n⊢ Iff (Continuous ⇑l) (IsClosed ↑(LinearMap.ker l))","decl":"/-- Any linear form on a topological vector space over a nontrivially normed field is continuous if\n    and only if its kernel is closed. -/\ntheorem LinearMap.continuous_iff_isClosed_ker (l : E →ₗ[𝕜] 𝕜) :\n    Continuous l ↔ IsClosed (LinearMap.ker l : Set E) :=\n  ⟨fun h => isClosed_singleton.preimage h, l.continuous_of_isClosed_ker⟩\n\n"}
{"name":"LinearMap.continuous_of_nonzero_on_open","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝⁴ : AddCommGroup E\ninst✝³ : Module 𝕜 E\ninst✝² : TopologicalSpace E\ninst✝¹ : TopologicalAddGroup E\ninst✝ : ContinuousSMul 𝕜 E\nl : LinearMap (RingHom.id 𝕜) E 𝕜\ns : Set E\nhs₁ : IsOpen s\nhs₂ : s.Nonempty\nhs₃ : ∀ (x : E), Membership.mem s x → Ne (l x) 0\n⊢ Continuous ⇑l","decl":"/-- Over a nontrivially normed field, any linear form which is nonzero on a nonempty open set is\n    automatically continuous. -/\ntheorem LinearMap.continuous_of_nonzero_on_open (l : E →ₗ[𝕜] 𝕜) (s : Set E) (hs₁ : IsOpen s)\n    (hs₂ : s.Nonempty) (hs₃ : ∀ x ∈ s, l x ≠ 0) : Continuous l := by\n  refine l.continuous_of_isClosed_ker (l.isClosed_or_dense_ker.resolve_right fun hl => ?_)\n  rcases hs₂ with ⟨x, hx⟩\n  have : x ∈ interior (LinearMap.ker l : Set E)ᶜ := by\n    rw [mem_interior_iff_mem_nhds]\n    exact mem_of_superset (hs₁.mem_nhds hx) hs₃\n  rwa [hl.interior_compl] at this\n\n"}
{"name":"LinearMap.continuous_of_finiteDimensional","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝¹² : AddCommGroup E\ninst✝¹¹ : Module 𝕜 E\ninst✝¹⁰ : TopologicalSpace E\ninst✝⁹ : TopologicalAddGroup E\ninst✝⁸ : ContinuousSMul 𝕜 E\nF' : Type x\ninst✝⁷ : AddCommGroup F'\ninst✝⁶ : Module 𝕜 F'\ninst✝⁵ : TopologicalSpace F'\ninst✝⁴ : TopologicalAddGroup F'\ninst✝³ : ContinuousSMul 𝕜 F'\ninst✝² : CompleteSpace 𝕜\ninst✝¹ : T2Space E\ninst✝ : FiniteDimensional 𝕜 E\nf : LinearMap (RingHom.id 𝕜) E F'\n⊢ Continuous ⇑f","decl":"/-- Any linear map on a finite dimensional space over a complete field is continuous. -/\ntheorem LinearMap.continuous_of_finiteDimensional [T2Space E] [FiniteDimensional 𝕜 E]\n    (f : E →ₗ[𝕜] F') : Continuous f := by\n  -- for the proof, go to a model vector space `b → 𝕜` thanks to `continuous_equivFun_basis`, and\n  -- argue that all linear maps there are continuous.\n  let b := Basis.ofVectorSpace 𝕜 E\n  have A : Continuous b.equivFun := continuous_equivFun_basis_aux b\n  have B : Continuous (f.comp (b.equivFun.symm : (Basis.ofVectorSpaceIndex 𝕜 E → 𝕜) →ₗ[𝕜] E)) :=\n    LinearMap.continuous_on_pi _\n  have :\n    Continuous\n      (f.comp (b.equivFun.symm : (Basis.ofVectorSpaceIndex 𝕜 E → 𝕜) →ₗ[𝕜] E) ∘ b.equivFun) :=\n    B.comp A\n  convert this\n  ext x\n  dsimp\n  rw [Basis.equivFun_symm_apply, Basis.sum_repr]\n\n"}
{"name":"LinearMap.continuousLinearMapClassOfFiniteDimensional","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝¹² : AddCommGroup E\ninst✝¹¹ : Module 𝕜 E\ninst✝¹⁰ : TopologicalSpace E\ninst✝⁹ : TopologicalAddGroup E\ninst✝⁸ : ContinuousSMul 𝕜 E\nF' : Type x\ninst✝⁷ : AddCommGroup F'\ninst✝⁶ : Module 𝕜 F'\ninst✝⁵ : TopologicalSpace F'\ninst✝⁴ : TopologicalAddGroup F'\ninst✝³ : ContinuousSMul 𝕜 F'\ninst✝² : CompleteSpace 𝕜\ninst✝¹ : T2Space E\ninst✝ : FiniteDimensional 𝕜 E\n⊢ ContinuousLinearMapClass (LinearMap (RingHom.id 𝕜) E F') 𝕜 E F'","decl":"instance LinearMap.continuousLinearMapClassOfFiniteDimensional [T2Space E] [FiniteDimensional 𝕜 E] :\n    ContinuousLinearMapClass (E →ₗ[𝕜] F') 𝕜 E F' :=\n  { LinearMap.semilinearMapClass with map_continuous := fun f => f.continuous_of_finiteDimensional }\n\n"}
{"name":"continuous_equivFun_basis","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : TopologicalSpace E\ninst✝⁴ : TopologicalAddGroup E\ninst✝³ : ContinuousSMul 𝕜 E\ninst✝² : CompleteSpace 𝕜\ninst✝¹ : T2Space E\nι : Type u_1\ninst✝ : Finite ι\nξ : Basis ι 𝕜 E\n⊢ Continuous ⇑ξ.equivFun","decl":"/-- In finite dimensions over a non-discrete complete normed field, the canonical identification\n(in terms of a basis) with `𝕜^n` (endowed with the product topology) is continuous.\nThis is the key fact which makes all linear maps from a T2 finite dimensional TVS over such a field\ncontinuous (see `LinearMap.continuous_of_finiteDimensional`), which in turn implies that all\nnorms are equivalent in finite dimensions. -/\ntheorem continuous_equivFun_basis [T2Space E] {ι : Type*} [Finite ι] (ξ : Basis ι 𝕜 E) :\n    Continuous ξ.equivFun :=\n  haveI : FiniteDimensional 𝕜 E := .of_fintype_basis ξ\n  ξ.equivFun.toLinearMap.continuous_of_finiteDimensional\n\n"}
{"name":"LinearMap.coe_toContinuousLinearMap'","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝¹² : AddCommGroup E\ninst✝¹¹ : Module 𝕜 E\ninst✝¹⁰ : TopologicalSpace E\ninst✝⁹ : TopologicalAddGroup E\ninst✝⁸ : ContinuousSMul 𝕜 E\nF' : Type x\ninst✝⁷ : AddCommGroup F'\ninst✝⁶ : Module 𝕜 F'\ninst✝⁵ : TopologicalSpace F'\ninst✝⁴ : TopologicalAddGroup F'\ninst✝³ : ContinuousSMul 𝕜 F'\ninst✝² : CompleteSpace 𝕜\ninst✝¹ : T2Space E\ninst✝ : FiniteDimensional 𝕜 E\nf : LinearMap (RingHom.id 𝕜) E F'\n⊢ Eq ⇑(LinearMap.toContinuousLinearMap f) ⇑f","decl":"@[simp]\ntheorem coe_toContinuousLinearMap' (f : E →ₗ[𝕜] F') : ⇑(LinearMap.toContinuousLinearMap f) = f :=\n  rfl\n\n"}
{"name":"LinearMap.coe_toContinuousLinearMap","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝¹² : AddCommGroup E\ninst✝¹¹ : Module 𝕜 E\ninst✝¹⁰ : TopologicalSpace E\ninst✝⁹ : TopologicalAddGroup E\ninst✝⁸ : ContinuousSMul 𝕜 E\nF' : Type x\ninst✝⁷ : AddCommGroup F'\ninst✝⁶ : Module 𝕜 F'\ninst✝⁵ : TopologicalSpace F'\ninst✝⁴ : TopologicalAddGroup F'\ninst✝³ : ContinuousSMul 𝕜 F'\ninst✝² : CompleteSpace 𝕜\ninst✝¹ : T2Space E\ninst✝ : FiniteDimensional 𝕜 E\nf : LinearMap (RingHom.id 𝕜) E F'\n⊢ Eq (↑(LinearMap.toContinuousLinearMap f)) f","decl":"@[simp]\ntheorem coe_toContinuousLinearMap (f : E →ₗ[𝕜] F') :\n    ((LinearMap.toContinuousLinearMap f) : E →ₗ[𝕜] F') = f :=\n  rfl\n\n"}
{"name":"LinearMap.coe_toContinuousLinearMap_symm","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝¹² : AddCommGroup E\ninst✝¹¹ : Module 𝕜 E\ninst✝¹⁰ : TopologicalSpace E\ninst✝⁹ : TopologicalAddGroup E\ninst✝⁸ : ContinuousSMul 𝕜 E\nF' : Type x\ninst✝⁷ : AddCommGroup F'\ninst✝⁶ : Module 𝕜 F'\ninst✝⁵ : TopologicalSpace F'\ninst✝⁴ : TopologicalAddGroup F'\ninst✝³ : ContinuousSMul 𝕜 F'\ninst✝² : CompleteSpace 𝕜\ninst✝¹ : T2Space E\ninst✝ : FiniteDimensional 𝕜 E\n⊢ Eq (⇑LinearMap.toContinuousLinearMap.symm) ContinuousLinearMap.toLinearMap","decl":"@[simp]\ntheorem coe_toContinuousLinearMap_symm :\n    ⇑(toContinuousLinearMap : (E →ₗ[𝕜] F') ≃ₗ[𝕜] E →L[𝕜] F').symm =\n      ((↑) : (E →L[𝕜] F') → E →ₗ[𝕜] F') :=\n  rfl\n\n"}
{"name":"LinearMap.det_toContinuousLinearMap","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : TopologicalSpace E\ninst✝⁴ : TopologicalAddGroup E\ninst✝³ : ContinuousSMul 𝕜 E\ninst✝² : CompleteSpace 𝕜\ninst✝¹ : T2Space E\ninst✝ : FiniteDimensional 𝕜 E\nf : LinearMap (RingHom.id 𝕜) E E\n⊢ Eq (LinearMap.toContinuousLinearMap f).det (LinearMap.det f)","decl":"@[simp]\ntheorem det_toContinuousLinearMap (f : E →ₗ[𝕜] E) :\n    (LinearMap.toContinuousLinearMap f).det = LinearMap.det f :=\n  rfl\n\n"}
{"name":"LinearMap.ker_toContinuousLinearMap","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝¹² : AddCommGroup E\ninst✝¹¹ : Module 𝕜 E\ninst✝¹⁰ : TopologicalSpace E\ninst✝⁹ : TopologicalAddGroup E\ninst✝⁸ : ContinuousSMul 𝕜 E\nF' : Type x\ninst✝⁷ : AddCommGroup F'\ninst✝⁶ : Module 𝕜 F'\ninst✝⁵ : TopologicalSpace F'\ninst✝⁴ : TopologicalAddGroup F'\ninst✝³ : ContinuousSMul 𝕜 F'\ninst✝² : CompleteSpace 𝕜\ninst✝¹ : T2Space E\ninst✝ : FiniteDimensional 𝕜 E\nf : LinearMap (RingHom.id 𝕜) E F'\n⊢ Eq (LinearMap.ker (LinearMap.toContinuousLinearMap f)) (LinearMap.ker f)","decl":"@[simp]\ntheorem ker_toContinuousLinearMap (f : E →ₗ[𝕜] F') :\n    ker (LinearMap.toContinuousLinearMap f) = ker f :=\n  rfl\n\n"}
{"name":"LinearMap.range_toContinuousLinearMap","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝¹² : AddCommGroup E\ninst✝¹¹ : Module 𝕜 E\ninst✝¹⁰ : TopologicalSpace E\ninst✝⁹ : TopologicalAddGroup E\ninst✝⁸ : ContinuousSMul 𝕜 E\nF' : Type x\ninst✝⁷ : AddCommGroup F'\ninst✝⁶ : Module 𝕜 F'\ninst✝⁵ : TopologicalSpace F'\ninst✝⁴ : TopologicalAddGroup F'\ninst✝³ : ContinuousSMul 𝕜 F'\ninst✝² : CompleteSpace 𝕜\ninst✝¹ : T2Space E\ninst✝ : FiniteDimensional 𝕜 E\nf : LinearMap (RingHom.id 𝕜) E F'\n⊢ Eq (LinearMap.range (LinearMap.toContinuousLinearMap f)) (LinearMap.range f)","decl":"@[simp]\ntheorem range_toContinuousLinearMap (f : E →ₗ[𝕜] F') :\n    range (LinearMap.toContinuousLinearMap f) = range f :=\n  rfl\n\n"}
{"name":"LinearMap.isOpenMap_of_finiteDimensional","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝¹² : AddCommGroup E\ninst✝¹¹ : Module 𝕜 E\ninst✝¹⁰ : TopologicalSpace E\ninst✝⁹ : TopologicalAddGroup E\ninst✝⁸ : ContinuousSMul 𝕜 E\nF : Type w\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : Module 𝕜 F\ninst✝⁵ : TopologicalSpace F\ninst✝⁴ : TopologicalAddGroup F\ninst✝³ : ContinuousSMul 𝕜 F\ninst✝² : CompleteSpace 𝕜\ninst✝¹ : T2Space E\ninst✝ : FiniteDimensional 𝕜 E\nf : LinearMap (RingHom.id 𝕜) F E\nhf : Function.Surjective ⇑f\n⊢ IsOpenMap ⇑f","decl":"/-- A surjective linear map `f` with finite dimensional codomain is an open map. -/\ntheorem isOpenMap_of_finiteDimensional (f : F →ₗ[𝕜] E) (hf : Function.Surjective f) :\n    IsOpenMap f := by\n  obtain ⟨g, hg⟩ := f.exists_rightInverse_of_surjective (LinearMap.range_eq_top.2 hf)\n  refine IsOpenMap.of_sections fun x => ⟨fun y => g (y - f x) + x, ?_, ?_, fun y => ?_⟩\n  · exact\n      ((g.continuous_of_finiteDimensional.comp <| continuous_id.sub continuous_const).add\n          continuous_const).continuousAt\n  · simp only\n    rw [sub_self, map_zero, zero_add]\n  · simp only [map_sub, map_add, ← comp_apply f g, hg, id_apply, sub_add_cancel]\n\n"}
{"name":"LinearMap.canLiftContinuousLinearMap","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝¹² : AddCommGroup E\ninst✝¹¹ : Module 𝕜 E\ninst✝¹⁰ : TopologicalSpace E\ninst✝⁹ : TopologicalAddGroup E\ninst✝⁸ : ContinuousSMul 𝕜 E\nF : Type w\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : Module 𝕜 F\ninst✝⁵ : TopologicalSpace F\ninst✝⁴ : TopologicalAddGroup F\ninst✝³ : ContinuousSMul 𝕜 F\ninst✝² : CompleteSpace 𝕜\ninst✝¹ : T2Space E\ninst✝ : FiniteDimensional 𝕜 E\n⊢ CanLift (LinearMap (RingHom.id 𝕜) E F) (ContinuousLinearMap (RingHom.id 𝕜) E F) ContinuousLinearMap.toLinearMap fun x => True","decl":"instance canLiftContinuousLinearMap : CanLift (E →ₗ[𝕜] F) (E →L[𝕜] F) (↑) fun _ => True :=\n  ⟨fun f _ => ⟨LinearMap.toContinuousLinearMap f, rfl⟩⟩\n\n"}
{"name":"LinearEquiv.coe_toContinuousLinearEquiv","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝¹³ : AddCommGroup E\ninst✝¹² : Module 𝕜 E\ninst✝¹¹ : TopologicalSpace E\ninst✝¹⁰ : TopologicalAddGroup E\ninst✝⁹ : ContinuousSMul 𝕜 E\nF : Type w\ninst✝⁸ : AddCommGroup F\ninst✝⁷ : Module 𝕜 F\ninst✝⁶ : TopologicalSpace F\ninst✝⁵ : TopologicalAddGroup F\ninst✝⁴ : ContinuousSMul 𝕜 F\ninst✝³ : CompleteSpace 𝕜\ninst✝² : T2Space E\ninst✝¹ : T2Space F\ninst✝ : FiniteDimensional 𝕜 E\ne : LinearEquiv (RingHom.id 𝕜) E F\n⊢ Eq ↑↑e.toContinuousLinearEquiv ↑e","decl":"@[simp]\ntheorem coe_toContinuousLinearEquiv (e : E ≃ₗ[𝕜] F) : (e.toContinuousLinearEquiv : E →ₗ[𝕜] F) = e :=\n  rfl\n\n"}
{"name":"LinearEquiv.coe_toContinuousLinearEquiv'","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝¹³ : AddCommGroup E\ninst✝¹² : Module 𝕜 E\ninst✝¹¹ : TopologicalSpace E\ninst✝¹⁰ : TopologicalAddGroup E\ninst✝⁹ : ContinuousSMul 𝕜 E\nF : Type w\ninst✝⁸ : AddCommGroup F\ninst✝⁷ : Module 𝕜 F\ninst✝⁶ : TopologicalSpace F\ninst✝⁵ : TopologicalAddGroup F\ninst✝⁴ : ContinuousSMul 𝕜 F\ninst✝³ : CompleteSpace 𝕜\ninst✝² : T2Space E\ninst✝¹ : T2Space F\ninst✝ : FiniteDimensional 𝕜 E\ne : LinearEquiv (RingHom.id 𝕜) E F\n⊢ Eq ⇑e.toContinuousLinearEquiv ⇑e","decl":"@[simp]\ntheorem coe_toContinuousLinearEquiv' (e : E ≃ₗ[𝕜] F) : (e.toContinuousLinearEquiv : E → F) = e :=\n  rfl\n\n"}
{"name":"LinearEquiv.coe_toContinuousLinearEquiv_symm","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝¹³ : AddCommGroup E\ninst✝¹² : Module 𝕜 E\ninst✝¹¹ : TopologicalSpace E\ninst✝¹⁰ : TopologicalAddGroup E\ninst✝⁹ : ContinuousSMul 𝕜 E\nF : Type w\ninst✝⁸ : AddCommGroup F\ninst✝⁷ : Module 𝕜 F\ninst✝⁶ : TopologicalSpace F\ninst✝⁵ : TopologicalAddGroup F\ninst✝⁴ : ContinuousSMul 𝕜 F\ninst✝³ : CompleteSpace 𝕜\ninst✝² : T2Space E\ninst✝¹ : T2Space F\ninst✝ : FiniteDimensional 𝕜 E\ne : LinearEquiv (RingHom.id 𝕜) E F\n⊢ Eq ↑↑e.toContinuousLinearEquiv.symm ↑e.symm","decl":"@[simp]\ntheorem coe_toContinuousLinearEquiv_symm (e : E ≃ₗ[𝕜] F) :\n    (e.toContinuousLinearEquiv.symm : F →ₗ[𝕜] E) = e.symm :=\n  rfl\n\n"}
{"name":"LinearEquiv.coe_toContinuousLinearEquiv_symm'","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝¹³ : AddCommGroup E\ninst✝¹² : Module 𝕜 E\ninst✝¹¹ : TopologicalSpace E\ninst✝¹⁰ : TopologicalAddGroup E\ninst✝⁹ : ContinuousSMul 𝕜 E\nF : Type w\ninst✝⁸ : AddCommGroup F\ninst✝⁷ : Module 𝕜 F\ninst✝⁶ : TopologicalSpace F\ninst✝⁵ : TopologicalAddGroup F\ninst✝⁴ : ContinuousSMul 𝕜 F\ninst✝³ : CompleteSpace 𝕜\ninst✝² : T2Space E\ninst✝¹ : T2Space F\ninst✝ : FiniteDimensional 𝕜 E\ne : LinearEquiv (RingHom.id 𝕜) E F\n⊢ Eq ⇑e.toContinuousLinearEquiv.symm ⇑e.symm","decl":"@[simp]\ntheorem coe_toContinuousLinearEquiv_symm' (e : E ≃ₗ[𝕜] F) :\n    (e.toContinuousLinearEquiv.symm : F → E) = e.symm :=\n  rfl\n\n"}
{"name":"LinearEquiv.toLinearEquiv_toContinuousLinearEquiv","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝¹³ : AddCommGroup E\ninst✝¹² : Module 𝕜 E\ninst✝¹¹ : TopologicalSpace E\ninst✝¹⁰ : TopologicalAddGroup E\ninst✝⁹ : ContinuousSMul 𝕜 E\nF : Type w\ninst✝⁸ : AddCommGroup F\ninst✝⁷ : Module 𝕜 F\ninst✝⁶ : TopologicalSpace F\ninst✝⁵ : TopologicalAddGroup F\ninst✝⁴ : ContinuousSMul 𝕜 F\ninst✝³ : CompleteSpace 𝕜\ninst✝² : T2Space E\ninst✝¹ : T2Space F\ninst✝ : FiniteDimensional 𝕜 E\ne : LinearEquiv (RingHom.id 𝕜) E F\n⊢ Eq e.toContinuousLinearEquiv.toLinearEquiv e","decl":"@[simp]\ntheorem toLinearEquiv_toContinuousLinearEquiv (e : E ≃ₗ[𝕜] F) :\n    e.toContinuousLinearEquiv.toLinearEquiv = e := by\n  ext x\n  rfl\n\n"}
{"name":"LinearEquiv.toLinearEquiv_toContinuousLinearEquiv_symm","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝¹³ : AddCommGroup E\ninst✝¹² : Module 𝕜 E\ninst✝¹¹ : TopologicalSpace E\ninst✝¹⁰ : TopologicalAddGroup E\ninst✝⁹ : ContinuousSMul 𝕜 E\nF : Type w\ninst✝⁸ : AddCommGroup F\ninst✝⁷ : Module 𝕜 F\ninst✝⁶ : TopologicalSpace F\ninst✝⁵ : TopologicalAddGroup F\ninst✝⁴ : ContinuousSMul 𝕜 F\ninst✝³ : CompleteSpace 𝕜\ninst✝² : T2Space E\ninst✝¹ : T2Space F\ninst✝ : FiniteDimensional 𝕜 E\ne : LinearEquiv (RingHom.id 𝕜) E F\n⊢ Eq e.toContinuousLinearEquiv.symm.toLinearEquiv e.symm","decl":"theorem toLinearEquiv_toContinuousLinearEquiv_symm (e : E ≃ₗ[𝕜] F) :\n    e.toContinuousLinearEquiv.symm.toLinearEquiv = e.symm := by\n  ext x\n  rfl\n\n"}
{"name":"LinearEquiv.canLiftContinuousLinearEquiv","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝¹³ : AddCommGroup E\ninst✝¹² : Module 𝕜 E\ninst✝¹¹ : TopologicalSpace E\ninst✝¹⁰ : TopologicalAddGroup E\ninst✝⁹ : ContinuousSMul 𝕜 E\nF : Type w\ninst✝⁸ : AddCommGroup F\ninst✝⁷ : Module 𝕜 F\ninst✝⁶ : TopologicalSpace F\ninst✝⁵ : TopologicalAddGroup F\ninst✝⁴ : ContinuousSMul 𝕜 F\ninst✝³ : CompleteSpace 𝕜\ninst✝² : T2Space E\ninst✝¹ : T2Space F\ninst✝ : FiniteDimensional 𝕜 E\n⊢ CanLift (LinearEquiv (RingHom.id 𝕜) E F) (ContinuousLinearEquiv (RingHom.id 𝕜) E F) ContinuousLinearEquiv.toLinearEquiv fun x => True","decl":"instance canLiftContinuousLinearEquiv :\n    CanLift (E ≃ₗ[𝕜] F) (E ≃L[𝕜] F) ContinuousLinearEquiv.toLinearEquiv fun _ => True :=\n  ⟨fun f _ => ⟨_, f.toLinearEquiv_toContinuousLinearEquiv⟩⟩\n\n"}
{"name":"FiniteDimensional.nonempty_continuousLinearEquiv_of_finrank_eq","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝¹⁴ : AddCommGroup E\ninst✝¹³ : Module 𝕜 E\ninst✝¹² : TopologicalSpace E\ninst✝¹¹ : TopologicalAddGroup E\ninst✝¹⁰ : ContinuousSMul 𝕜 E\nF : Type w\ninst✝⁹ : AddCommGroup F\ninst✝⁸ : Module 𝕜 F\ninst✝⁷ : TopologicalSpace F\ninst✝⁶ : TopologicalAddGroup F\ninst✝⁵ : ContinuousSMul 𝕜 F\ninst✝⁴ : CompleteSpace 𝕜\ninst✝³ : T2Space E\ninst✝² : T2Space F\ninst✝¹ : FiniteDimensional 𝕜 E\ninst✝ : FiniteDimensional 𝕜 F\ncond : Eq (Module.finrank 𝕜 E) (Module.finrank 𝕜 F)\n⊢ Nonempty (ContinuousLinearEquiv (RingHom.id 𝕜) E F)","decl":"/-- Two finite-dimensional topological vector spaces over a complete normed field are continuously\nlinearly equivalent if they have the same (finite) dimension. -/\ntheorem FiniteDimensional.nonempty_continuousLinearEquiv_of_finrank_eq\n    (cond : finrank 𝕜 E = finrank 𝕜 F) : Nonempty (E ≃L[𝕜] F) :=\n  (nonempty_linearEquiv_of_finrank_eq cond).map LinearEquiv.toContinuousLinearEquiv\n\n"}
{"name":"FiniteDimensional.nonempty_continuousLinearEquiv_iff_finrank_eq","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝¹⁴ : AddCommGroup E\ninst✝¹³ : Module 𝕜 E\ninst✝¹² : TopologicalSpace E\ninst✝¹¹ : TopologicalAddGroup E\ninst✝¹⁰ : ContinuousSMul 𝕜 E\nF : Type w\ninst✝⁹ : AddCommGroup F\ninst✝⁸ : Module 𝕜 F\ninst✝⁷ : TopologicalSpace F\ninst✝⁶ : TopologicalAddGroup F\ninst✝⁵ : ContinuousSMul 𝕜 F\ninst✝⁴ : CompleteSpace 𝕜\ninst✝³ : T2Space E\ninst✝² : T2Space F\ninst✝¹ : FiniteDimensional 𝕜 E\ninst✝ : FiniteDimensional 𝕜 F\n⊢ Iff (Nonempty (ContinuousLinearEquiv (RingHom.id 𝕜) E F)) (Eq (Module.finrank 𝕜 E) (Module.finrank 𝕜 F))","decl":"/-- Two finite-dimensional topological vector spaces over a complete normed field are continuously\nlinearly equivalent if and only if they have the same (finite) dimension. -/\ntheorem FiniteDimensional.nonempty_continuousLinearEquiv_iff_finrank_eq :\n    Nonempty (E ≃L[𝕜] F) ↔ finrank 𝕜 E = finrank 𝕜 F :=\n  ⟨fun ⟨h⟩ => h.toLinearEquiv.finrank_eq, fun h =>\n    FiniteDimensional.nonempty_continuousLinearEquiv_of_finrank_eq h⟩\n\n"}
{"name":"Basis.coe_constrL","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝¹² : AddCommGroup E\ninst✝¹¹ : Module 𝕜 E\ninst✝¹⁰ : TopologicalSpace E\ninst✝⁹ : TopologicalAddGroup E\ninst✝⁸ : ContinuousSMul 𝕜 E\nF : Type w\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : Module 𝕜 F\ninst✝⁵ : TopologicalSpace F\ninst✝⁴ : TopologicalAddGroup F\ninst✝³ : ContinuousSMul 𝕜 F\ninst✝² : CompleteSpace 𝕜\nι : Type u_1\ninst✝¹ : Finite ι\ninst✝ : T2Space E\nv : Basis ι 𝕜 E\nf : ι → F\n⊢ Eq (↑(v.constrL f)) ((v.constr 𝕜) f)","decl":"@[simp] -- Porting note: removed `norm_cast`\ntheorem coe_constrL (v : Basis ι 𝕜 E) (f : ι → F) : (v.constrL f : E →ₗ[𝕜] F) = v.constr 𝕜 f :=\n  rfl\n\n"}
{"name":"Basis.equivFunL_apply","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : TopologicalSpace E\ninst✝⁴ : TopologicalAddGroup E\ninst✝³ : ContinuousSMul 𝕜 E\ninst✝² : CompleteSpace 𝕜\nι : Type u_1\ninst✝¹ : Finite ι\ninst✝ : T2Space E\nv : Basis ι 𝕜 E\na✝¹ : E\na✝ : ι\n⊢ Eq (v.equivFunL a✝¹ a✝) ((v.repr a✝¹) a✝)","decl":"/-- The continuous linear equivalence between a vector space over `𝕜` with a finite basis and\nfunctions from its basis indexing type to `𝕜`. -/\n@[simps! apply]\ndef equivFunL (v : Basis ι 𝕜 E) : E ≃L[𝕜] ι → 𝕜 :=\n  { v.equivFun with\n    continuous_toFun :=\n      haveI : FiniteDimensional 𝕜 E := FiniteDimensional.of_fintype_basis v\n      v.equivFun.toLinearMap.continuous_of_finiteDimensional\n    continuous_invFun := by\n      change Continuous v.equivFun.symm.toFun\n      exact v.equivFun.symm.toLinearMap.continuous_of_finiteDimensional }\n\n"}
{"name":"Basis.equivFunL_symm_apply_repr","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : TopologicalSpace E\ninst✝⁴ : TopologicalAddGroup E\ninst✝³ : ContinuousSMul 𝕜 E\ninst✝² : CompleteSpace 𝕜\nι : Type u_1\ninst✝¹ : Finite ι\ninst✝ : T2Space E\nv : Basis ι 𝕜 E\nx : E\n⊢ Eq (v.equivFunL.symm ⇑(v.repr x)) x","decl":"@[simp]\nlemma equivFunL_symm_apply_repr (v : Basis ι 𝕜 E) (x : E) :\n    v.equivFunL.symm (v.repr x) = x :=\n  v.equivFunL.symm_apply_apply x\n\n"}
{"name":"Basis.constrL_apply","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝¹² : AddCommGroup E\ninst✝¹¹ : Module 𝕜 E\ninst✝¹⁰ : TopologicalSpace E\ninst✝⁹ : TopologicalAddGroup E\ninst✝⁸ : ContinuousSMul 𝕜 E\nF : Type w\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : Module 𝕜 F\ninst✝⁵ : TopologicalSpace F\ninst✝⁴ : TopologicalAddGroup F\ninst✝³ : ContinuousSMul 𝕜 F\ninst✝² : CompleteSpace 𝕜\ninst✝¹ : T2Space E\nι : Type u_2\ninst✝ : Fintype ι\nv : Basis ι 𝕜 E\nf : ι → F\ne : E\n⊢ Eq ((v.constrL f) e) (Finset.univ.sum fun i => HSMul.hSMul (v.equivFun e i) (f i))","decl":"@[simp]\ntheorem constrL_apply {ι : Type*} [Fintype ι] (v : Basis ι 𝕜 E) (f : ι → F) (e : E) :\n    v.constrL f e = ∑ i, v.equivFun e i • f i :=\n  v.constr_apply_fintype 𝕜 _ _\n\n"}
{"name":"Basis.constrL_basis","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝¹² : AddCommGroup E\ninst✝¹¹ : Module 𝕜 E\ninst✝¹⁰ : TopologicalSpace E\ninst✝⁹ : TopologicalAddGroup E\ninst✝⁸ : ContinuousSMul 𝕜 E\nF : Type w\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : Module 𝕜 F\ninst✝⁵ : TopologicalSpace F\ninst✝⁴ : TopologicalAddGroup F\ninst✝³ : ContinuousSMul 𝕜 F\ninst✝² : CompleteSpace 𝕜\nι : Type u_1\ninst✝¹ : Finite ι\ninst✝ : T2Space E\nv : Basis ι 𝕜 E\nf : ι → F\ni : ι\n⊢ Eq ((v.constrL f) (v i)) (f i)","decl":"@[simp 1100]\ntheorem constrL_basis (v : Basis ι 𝕜 E) (f : ι → F) (i : ι) : v.constrL f (v i) = f i :=\n  v.constr_basis 𝕜 _ _\n\n"}
{"name":"ContinuousLinearMap.coe_toContinuousLinearEquivOfDetNeZero","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : TopologicalSpace E\ninst✝⁴ : TopologicalAddGroup E\ninst✝³ : ContinuousSMul 𝕜 E\ninst✝² : CompleteSpace 𝕜\ninst✝¹ : T2Space E\ninst✝ : FiniteDimensional 𝕜 E\nf : ContinuousLinearMap (RingHom.id 𝕜) E E\nhf : Ne f.det 0\n⊢ Eq (↑(f.toContinuousLinearEquivOfDetNeZero hf)) f","decl":"@[simp]\ntheorem coe_toContinuousLinearEquivOfDetNeZero (f : E →L[𝕜] E) (hf : f.det ≠ 0) :\n    (f.toContinuousLinearEquivOfDetNeZero hf : E →L[𝕜] E) = f := by\n  ext x\n  rfl\n\n"}
{"name":"ContinuousLinearMap.toContinuousLinearEquivOfDetNeZero_apply","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\nE : Type v\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : TopologicalSpace E\ninst✝⁴ : TopologicalAddGroup E\ninst✝³ : ContinuousSMul 𝕜 E\ninst✝² : CompleteSpace 𝕜\ninst✝¹ : T2Space E\ninst✝ : FiniteDimensional 𝕜 E\nf : ContinuousLinearMap (RingHom.id 𝕜) E E\nhf : Ne f.det 0\nx : E\n⊢ Eq ((f.toContinuousLinearEquivOfDetNeZero hf) x) (f x)","decl":"@[simp]\ntheorem toContinuousLinearEquivOfDetNeZero_apply (f : E →L[𝕜] E) (hf : f.det ≠ 0) (x : E) :\n    f.toContinuousLinearEquivOfDetNeZero hf x = f x :=\n  rfl\n\n"}
{"name":"Matrix.toLin_finTwoProd_toContinuousLinearMap","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u\nhnorm : NontriviallyNormedField 𝕜\ninst✝ : CompleteSpace 𝕜\na b c d : 𝕜\n⊢ Eq (LinearMap.toContinuousLinearMap ((Matrix.toLin (Basis.finTwoProd 𝕜) (Basis.finTwoProd 𝕜)) (Matrix.of (Matrix.vecCons (Matrix.vecCons a (Matrix.vecCons b Matrix.vecEmpty)) (Matrix.vecCons (Matrix.vecCons c (Matrix.vecCons d Matrix.vecEmpty)) Matrix.vecEmpty))))) ((HAdd.hAdd (HSMul.hSMul a (ContinuousLinearMap.fst 𝕜 𝕜 𝕜)) (HSMul.hSMul b (ContinuousLinearMap.snd 𝕜 𝕜 𝕜))).prod (HAdd.hAdd (HSMul.hSMul c (ContinuousLinearMap.fst 𝕜 𝕜 𝕜)) (HSMul.hSMul d (ContinuousLinearMap.snd 𝕜 𝕜 𝕜))))","decl":"theorem _root_.Matrix.toLin_finTwoProd_toContinuousLinearMap (a b c d : 𝕜) :\n    LinearMap.toContinuousLinearMap\n      (Matrix.toLin (Basis.finTwoProd 𝕜) (Basis.finTwoProd 𝕜) !![a, b; c, d]) =\n      (a • ContinuousLinearMap.fst 𝕜 𝕜 𝕜 + b • ContinuousLinearMap.snd 𝕜 𝕜 𝕜).prod\n        (c • ContinuousLinearMap.fst 𝕜 𝕜 𝕜 + d • ContinuousLinearMap.snd 𝕜 𝕜 𝕜) :=\n  ContinuousLinearMap.ext <| Matrix.toLin_finTwoProd_apply _ _ _ _\n\n"}
{"name":"FiniteDimensional.complete","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁸ : NontriviallyNormedField 𝕜\ninst✝⁷ : CompleteSpace 𝕜\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : UniformSpace E\ninst✝⁴ : T2Space E\ninst✝³ : UniformAddGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : ContinuousSMul 𝕜 E\ninst✝ : FiniteDimensional 𝕜 E\n⊢ CompleteSpace E","decl":"include 𝕜 in\ntheorem FiniteDimensional.complete [FiniteDimensional 𝕜 E] : CompleteSpace E := by\n  set e := ContinuousLinearEquiv.ofFinrankEq (@finrank_fin_fun 𝕜 _ _ (finrank 𝕜 E)).symm\n  have : IsUniformEmbedding e.toEquiv.symm := e.symm.isUniformEmbedding\n  exact (completeSpace_congr this).1 inferInstance\n\n"}
{"name":"Submodule.complete_of_finiteDimensional","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁸ : NontriviallyNormedField 𝕜\ninst✝⁷ : CompleteSpace 𝕜\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : UniformSpace E\ninst✝⁴ : T2Space E\ninst✝³ : UniformAddGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : ContinuousSMul 𝕜 E\ns : Submodule 𝕜 E\ninst✝ : FiniteDimensional 𝕜 (Subtype fun x => Membership.mem s x)\n⊢ IsComplete ↑s","decl":"/-- A finite-dimensional subspace is complete. -/\ntheorem Submodule.complete_of_finiteDimensional (s : Submodule 𝕜 E) [FiniteDimensional 𝕜 s] :\n    IsComplete (s : Set E) :=\n  haveI : UniformAddGroup s := s.toAddSubgroup.uniformAddGroup\n  completeSpace_coe_iff_isComplete.1 (FiniteDimensional.complete 𝕜 s)\n\n"}
{"name":"Submodule.closed_of_finiteDimensional","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁸ : NontriviallyNormedField 𝕜\ninst✝⁷ : CompleteSpace 𝕜\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : TopologicalSpace E\ninst✝⁴ : TopologicalAddGroup E\ninst✝³ : Module 𝕜 E\ninst✝² : ContinuousSMul 𝕜 E\ninst✝¹ : T2Space E\ns : Submodule 𝕜 E\ninst✝ : FiniteDimensional 𝕜 (Subtype fun x => Membership.mem s x)\n⊢ IsClosed ↑s","decl":"/-- A finite-dimensional subspace is closed. -/\ntheorem Submodule.closed_of_finiteDimensional\n    [T2Space E] (s : Submodule 𝕜 E) [FiniteDimensional 𝕜 s] :\n    IsClosed (s : Set E) :=\n  letI := TopologicalAddGroup.toUniformSpace E\n  haveI : UniformAddGroup E := comm_topologicalAddGroup_is_uniform\n  s.complete_of_finiteDimensional.isClosed\n\n"}
{"name":"LinearMap.isClosedEmbedding_of_injective","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝¹⁴ : NontriviallyNormedField 𝕜\ninst✝¹³ : CompleteSpace 𝕜\ninst✝¹² : AddCommGroup E\ninst✝¹¹ : TopologicalSpace E\ninst✝¹⁰ : TopologicalAddGroup E\ninst✝⁹ : Module 𝕜 E\ninst✝⁸ : ContinuousSMul 𝕜 E\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : TopologicalSpace F\ninst✝⁵ : T2Space F\ninst✝⁴ : TopologicalAddGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : ContinuousSMul 𝕜 F\ninst✝¹ : T2Space E\ninst✝ : FiniteDimensional 𝕜 E\nf : LinearMap (RingHom.id 𝕜) E F\nhf : Eq (LinearMap.ker f) Bot.bot\n⊢ Topology.IsClosedEmbedding ⇑f","decl":"/-- An injective linear map with finite-dimensional domain is a closed embedding. -/\ntheorem LinearMap.isClosedEmbedding_of_injective [T2Space E] [FiniteDimensional 𝕜 E] {f : E →ₗ[𝕜] F}\n    (hf : LinearMap.ker f = ⊥) : IsClosedEmbedding f :=\n  let g := LinearEquiv.ofInjective f (LinearMap.ker_eq_bot.mp hf)\n  { IsEmbedding.subtypeVal.comp g.toContinuousLinearEquiv.toHomeomorph.isEmbedding with\n    isClosed_range := by\n      haveI := f.finiteDimensional_range\n      simpa [LinearMap.range_coe f] using f.range.closed_of_finiteDimensional }\n\n"}
{"name":"LinearMap.closedEmbedding_of_injective","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝¹⁴ : NontriviallyNormedField 𝕜\ninst✝¹³ : CompleteSpace 𝕜\ninst✝¹² : AddCommGroup E\ninst✝¹¹ : TopologicalSpace E\ninst✝¹⁰ : TopologicalAddGroup E\ninst✝⁹ : Module 𝕜 E\ninst✝⁸ : ContinuousSMul 𝕜 E\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : TopologicalSpace F\ninst✝⁵ : T2Space F\ninst✝⁴ : TopologicalAddGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : ContinuousSMul 𝕜 F\ninst✝¹ : T2Space E\ninst✝ : FiniteDimensional 𝕜 E\nf : LinearMap (RingHom.id 𝕜) E F\nhf : Eq (LinearMap.ker f) Bot.bot\n⊢ Topology.IsClosedEmbedding ⇑f","decl":"@[deprecated (since := \"2024-10-20\")]\nalias LinearMap.closedEmbedding_of_injective := LinearMap.isClosedEmbedding_of_injective\n\n"}
{"name":"isClosedEmbedding_smul_left","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁷ : NontriviallyNormedField 𝕜\ninst✝⁶ : CompleteSpace 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : TopologicalAddGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : ContinuousSMul 𝕜 E\ninst✝ : T2Space E\nc : E\nhc : Ne c 0\n⊢ Topology.IsClosedEmbedding fun x => HSMul.hSMul x c","decl":"theorem isClosedEmbedding_smul_left [T2Space E] {c : E} (hc : c ≠ 0) :\n    IsClosedEmbedding fun x : 𝕜 => x • c :=\n  LinearMap.isClosedEmbedding_of_injective (LinearMap.ker_toSpanSingleton 𝕜 E hc)\n\n"}
{"name":"closedEmbedding_smul_left","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁷ : NontriviallyNormedField 𝕜\ninst✝⁶ : CompleteSpace 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : TopologicalAddGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : ContinuousSMul 𝕜 E\ninst✝ : T2Space E\nc : E\nhc : Ne c 0\n⊢ Topology.IsClosedEmbedding fun x => HSMul.hSMul x c","decl":"@[deprecated (since := \"2024-10-20\")]\nalias closedEmbedding_smul_left := isClosedEmbedding_smul_left\n\n-- `smul` is a closed map in the first argument.\n"}
{"name":"isClosedMap_smul_left","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁷ : NontriviallyNormedField 𝕜\ninst✝⁶ : CompleteSpace 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : TopologicalAddGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : ContinuousSMul 𝕜 E\ninst✝ : T2Space E\nc : E\n⊢ IsClosedMap fun x => HSMul.hSMul x c","decl":"theorem isClosedMap_smul_left [T2Space E] (c : E) : IsClosedMap fun x : 𝕜 => x • c := by\n  by_cases hc : c = 0\n  · simp_rw [hc, smul_zero]\n    exact isClosedMap_const\n  · exact (isClosedEmbedding_smul_left hc).isClosedMap\n\n"}
{"name":"ContinuousLinearMap.exists_right_inverse_of_surjective","module":"Mathlib.Topology.Algebra.Module.FiniteDimension","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝¹³ : NontriviallyNormedField 𝕜\ninst✝¹² : CompleteSpace 𝕜\ninst✝¹¹ : AddCommGroup E\ninst✝¹⁰ : TopologicalSpace E\ninst✝⁹ : TopologicalAddGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : ContinuousSMul 𝕜 E\ninst✝⁶ : AddCommGroup F\ninst✝⁵ : TopologicalSpace F\ninst✝⁴ : T2Space F\ninst✝³ : TopologicalAddGroup F\ninst✝² : Module 𝕜 F\ninst✝¹ : ContinuousSMul 𝕜 F\ninst✝ : FiniteDimensional 𝕜 F\nf : ContinuousLinearMap (RingHom.id 𝕜) E F\nhf : Eq (LinearMap.range f) Top.top\n⊢ Exists fun g => Eq (f.comp g) (ContinuousLinearMap.id 𝕜 F)","decl":"theorem ContinuousLinearMap.exists_right_inverse_of_surjective [FiniteDimensional 𝕜 F]\n    (f : E →L[𝕜] F) (hf : LinearMap.range f = ⊤) :\n    ∃ g : F →L[𝕜] E, f.comp g = ContinuousLinearMap.id 𝕜 F :=\n  let ⟨g, hg⟩ := (f : E →ₗ[𝕜] F).exists_rightInverse_of_surjective hf\n  ⟨LinearMap.toContinuousLinearMap g, ContinuousLinearMap.coe_inj.1 hg⟩\n"}
