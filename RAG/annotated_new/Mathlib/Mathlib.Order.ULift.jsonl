{"name":"ULift.up_le","module":"Mathlib.Order.ULift","initialProofState":"α : Type u\ninst✝ : LE α\na b : α\n⊢ Iff (LE.le { down := a } { down := b }) (LE.le a b)","decl":"@[simp] theorem up_le [LE α] {a b : α} : up a ≤ up b ↔ a ≤ b := Iff.rfl\n"}
{"name":"ULift.down_le","module":"Mathlib.Order.ULift","initialProofState":"α : Type u\ninst✝ : LE α\na b : ULift.{u_1, u} α\n⊢ Iff (LE.le a.down b.down) (LE.le a b)","decl":"@[simp] theorem down_le [LE α] {a b : ULift α} : down a ≤ down b ↔ a ≤ b := Iff.rfl\n\n"}
{"name":"ULift.up_lt","module":"Mathlib.Order.ULift","initialProofState":"α : Type u\ninst✝ : LT α\na b : α\n⊢ Iff (LT.lt { down := a } { down := b }) (LT.lt a b)","decl":"@[simp] theorem up_lt [LT α] {a b : α} : up a < up b ↔ a < b := Iff.rfl\n"}
{"name":"ULift.down_lt","module":"Mathlib.Order.ULift","initialProofState":"α : Type u\ninst✝ : LT α\na b : ULift.{u_1, u} α\n⊢ Iff (LT.lt a.down b.down) (LT.lt a b)","decl":"@[simp] theorem down_lt [LT α] {a b : ULift α} : down a < down b ↔ a < b := Iff.rfl\n\n"}
{"name":"ULift.up_beq","module":"Mathlib.Order.ULift","initialProofState":"α : Type u\ninst✝ : BEq α\na b : α\n⊢ Eq (BEq.beq { down := a } { down := b }) (BEq.beq a b)","decl":"@[simp] theorem up_beq [BEq α] (a b : α) : (up a == up b) = (a == b) := rfl\n"}
{"name":"ULift.down_beq","module":"Mathlib.Order.ULift","initialProofState":"α : Type u\ninst✝ : BEq α\na b : ULift.{u_1, u} α\n⊢ Eq (BEq.beq a.down b.down) (BEq.beq a b)","decl":"@[simp] theorem down_beq [BEq α] (a b : ULift α) : (down a == down b) = (a == b) := rfl\n\n"}
{"name":"ULift.up_compare","module":"Mathlib.Order.ULift","initialProofState":"α : Type u\ninst✝ : Ord α\na b : α\n⊢ Eq (Ord.compare { down := a } { down := b }) (Ord.compare a b)","decl":"@[simp] theorem up_compare [Ord α] (a b : α) : compare (up a) (up b) = compare a b := rfl\n"}
{"name":"ULift.down_compare","module":"Mathlib.Order.ULift","initialProofState":"α : Type u\ninst✝ : Ord α\na b : ULift.{u_1, u} α\n⊢ Eq (Ord.compare a.down b.down) (Ord.compare a b)","decl":"@[simp] theorem down_compare [Ord α] (a b : ULift α) :\n  compare (down a) (down b) = compare a b := rfl\n\n"}
{"name":"ULift.up_sup","module":"Mathlib.Order.ULift","initialProofState":"α : Type u\ninst✝ : Max α\na b : α\n⊢ Eq { down := Max.max a b } (Max.max { down := a } { down := b })","decl":"@[simp] theorem up_sup [Max α] (a b : α) : up (a ⊔ b) = up a ⊔ up b := rfl\n"}
{"name":"ULift.down_sup","module":"Mathlib.Order.ULift","initialProofState":"α : Type u\ninst✝ : Max α\na b : ULift.{u_1, u} α\n⊢ Eq (Max.max a b).down (Max.max a.down b.down)","decl":"@[simp] theorem down_sup [Max α] (a b : ULift α) : down (a ⊔ b) = down a ⊔ down b := rfl\n\n"}
{"name":"ULift.up_inf","module":"Mathlib.Order.ULift","initialProofState":"α : Type u\ninst✝ : Min α\na b : α\n⊢ Eq { down := Min.min a b } (Min.min { down := a } { down := b })","decl":"@[simp] theorem up_inf [Min α] (a b : α) : up (a ⊓ b) = up a ⊓ up b := rfl\n"}
{"name":"ULift.down_inf","module":"Mathlib.Order.ULift","initialProofState":"α : Type u\ninst✝ : Min α\na b : ULift.{u_1, u} α\n⊢ Eq (Min.min a b).down (Min.min a.down b.down)","decl":"@[simp] theorem down_inf [Min α] (a b : ULift α) : down (a ⊓ b) = down a ⊓ down b := rfl\n\n"}
{"name":"ULift.up_sdiff","module":"Mathlib.Order.ULift","initialProofState":"α : Type u\ninst✝ : SDiff α\na b : α\n⊢ Eq { down := SDiff.sdiff a b } (SDiff.sdiff { down := a } { down := b })","decl":"@[simp] theorem up_sdiff [SDiff α] (a b : α) : up (a \\ b) = up a \\ up b := rfl\n"}
{"name":"ULift.down_sdiff","module":"Mathlib.Order.ULift","initialProofState":"α : Type u\ninst✝ : SDiff α\na b : ULift.{u_1, u} α\n⊢ Eq (SDiff.sdiff a b).down (SDiff.sdiff a.down b.down)","decl":"@[simp] theorem down_sdiff [SDiff α] (a b : ULift α) : down (a \\ b) = down a \\ down b := rfl\n\n"}
{"name":"ULift.up_compl","module":"Mathlib.Order.ULift","initialProofState":"α : Type u\ninst✝ : HasCompl α\na : α\n⊢ Eq { down := HasCompl.compl a } (HasCompl.compl { down := a })","decl":"@[simp] theorem up_compl [HasCompl α] (a : α) : up (aᶜ) = (up a)ᶜ := rfl\n"}
{"name":"ULift.down_compl","module":"Mathlib.Order.ULift","initialProofState":"α : Type u\ninst✝ : HasCompl α\na : ULift.{u_1, u} α\n⊢ Eq (HasCompl.compl a).down (HasCompl.compl a.down)","decl":"@[simp] theorem down_compl [HasCompl α] (a : ULift α) : down aᶜ = (down a)ᶜ := rfl\n\n"}
{"name":"ULift.instOrientedOrd","module":"Mathlib.Order.ULift","initialProofState":"α : Type u\ninst✝ : Ord α\ninst : Batteries.OrientedOrd α\n⊢ Batteries.OrientedOrd (ULift.{v, u} α)","decl":"instance [Ord α] [inst : OrientedOrd α] : OrientedOrd (ULift.{v} α) where\n  symm _ _ := inst.symm ..\n\n"}
{"name":"ULift.instTransOrd","module":"Mathlib.Order.ULift","initialProofState":"α : Type u\ninst✝ : Ord α\ninst : Batteries.TransOrd α\n⊢ Batteries.TransOrd (ULift.{v, u} α)","decl":"instance [Ord α] [inst : TransOrd α] : TransOrd (ULift.{v} α) where\n  le_trans := inst.le_trans\n\n"}
{"name":"ULift.instBEqOrd","module":"Mathlib.Order.ULift","initialProofState":"α : Type u\ninst✝¹ : BEq α\ninst✝ : Ord α\ninst : Batteries.BEqOrd α\n⊢ Batteries.BEqOrd (ULift.{v, u} α)","decl":"instance [BEq α] [Ord α] [inst : BEqOrd α] : BEqOrd (ULift.{v} α) where\n  cmp_iff_beq := inst.cmp_iff_beq\n\n"}
{"name":"ULift.instLTOrd","module":"Mathlib.Order.ULift","initialProofState":"α : Type u\ninst✝¹ : LT α\ninst✝ : Ord α\ninst : Batteries.LTOrd α\n⊢ Batteries.LTOrd (ULift.{v, u} α)","decl":"instance [LT α] [Ord α] [inst : LTOrd α] : LTOrd (ULift.{v} α) where\n  cmp_iff_lt := inst.cmp_iff_lt\n\n"}
{"name":"ULift.instLEOrd","module":"Mathlib.Order.ULift","initialProofState":"α : Type u\ninst✝¹ : LE α\ninst✝ : Ord α\ninst : Batteries.LEOrd α\n⊢ Batteries.LEOrd (ULift.{v, u} α)","decl":"instance [LE α] [Ord α] [inst : LEOrd α] : LEOrd (ULift.{v} α) where\n  cmp_iff_le := inst.cmp_iff_le\n\n"}
{"name":"ULift.instLawfulOrd","module":"Mathlib.Order.ULift","initialProofState":"α : Type u\ninst✝³ : LE α\ninst✝² : LT α\ninst✝¹ : BEq α\ninst✝ : Ord α\ninst : Batteries.LawfulOrd α\n⊢ Batteries.LawfulOrd (ULift.{v, u} α)","decl":"instance [LE α] [LT α] [BEq α] [Ord α] [inst : LawfulOrd α] : LawfulOrd (ULift.{v} α) where\n  cmp_iff_lt := inst.cmp_iff_lt\n  cmp_iff_le := inst.cmp_iff_le\n\n"}
