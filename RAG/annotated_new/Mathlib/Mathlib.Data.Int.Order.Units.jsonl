{"name":"Int.isUnit_iff_abs_eq","module":"Mathlib.Data.Int.Order.Units","initialProofState":"x : Int\n⊢ Iff (IsUnit x) (Eq (abs x) 1)","decl":"theorem isUnit_iff_abs_eq {x : ℤ} : IsUnit x ↔ abs x = 1 := by\n  rw [isUnit_iff_natAbs_eq, abs_eq_natAbs, ← Int.ofNat_one, natCast_inj]\n\n"}
{"name":"Int.isUnit_sq","module":"Mathlib.Data.Int.Order.Units","initialProofState":"a : Int\nha : IsUnit a\n⊢ Eq (HPow.hPow a 2) 1","decl":"theorem isUnit_sq {a : ℤ} (ha : IsUnit a) : a ^ 2 = 1 := by rw [sq, isUnit_mul_self ha]\n\n"}
{"name":"Int.units_sq","module":"Mathlib.Data.Int.Order.Units","initialProofState":"u : Units Int\n⊢ Eq (HPow.hPow u 2) 1","decl":"@[simp]\ntheorem units_sq (u : ℤˣ) : u ^ 2 = 1 := by\n  rw [Units.ext_iff, Units.val_pow_eq_pow_val, Units.val_one, isUnit_sq u.isUnit]\n\n"}
{"name":"Int.units_pow_two","module":"Mathlib.Data.Int.Order.Units","initialProofState":"u : Units Int\n⊢ Eq (HPow.hPow u 2) 1","decl":"alias units_pow_two := units_sq\n\n"}
{"name":"Int.units_mul_self","module":"Mathlib.Data.Int.Order.Units","initialProofState":"u : Units Int\n⊢ Eq (HMul.hMul u u) 1","decl":"@[simp]\ntheorem units_mul_self (u : ℤˣ) : u * u = 1 := by rw [← sq, units_sq]\n\n"}
{"name":"Int.units_inv_eq_self","module":"Mathlib.Data.Int.Order.Units","initialProofState":"u : Units Int\n⊢ Eq (Inv.inv u) u","decl":"@[simp]\ntheorem units_inv_eq_self (u : ℤˣ) : u⁻¹ = u := by rw [inv_eq_iff_mul_eq_one, units_mul_self]\n\n"}
{"name":"Int.units_div_eq_mul","module":"Mathlib.Data.Int.Order.Units","initialProofState":"u₁ u₂ : Units Int\n⊢ Eq (HDiv.hDiv u₁ u₂) (HMul.hMul u₁ u₂)","decl":"theorem units_div_eq_mul (u₁ u₂ : ℤˣ) : u₁ / u₂ = u₁ * u₂ := by\n  rw [div_eq_mul_inv, units_inv_eq_self]\n\n-- `Units.val_mul` is a \"wrong turn\" for the simplifier, this undoes it and simplifies further\n"}
{"name":"Int.units_coe_mul_self","module":"Mathlib.Data.Int.Order.Units","initialProofState":"u : Units Int\n⊢ Eq (HMul.hMul ↑u ↑u) 1","decl":"@[simp]\ntheorem units_coe_mul_self (u : ℤˣ) : (u * u : ℤ) = 1 := by\n  rw [← Units.val_mul, units_mul_self, Units.val_one]\n\n"}
{"name":"Int.neg_one_pow_ne_zero","module":"Mathlib.Data.Int.Order.Units","initialProofState":"n : Nat\n⊢ Ne (HPow.hPow (-1) n) 0","decl":"theorem neg_one_pow_ne_zero {n : ℕ} : (-1 : ℤ) ^ n ≠ 0 := by simp\n\n"}
{"name":"Int.sq_eq_one_of_sq_lt_four","module":"Mathlib.Data.Int.Order.Units","initialProofState":"x : Int\nh1 : LT.lt (HPow.hPow x 2) 4\nh2 : Ne x 0\n⊢ Eq (HPow.hPow x 2) 1","decl":"theorem sq_eq_one_of_sq_lt_four {x : ℤ} (h1 : x ^ 2 < 4) (h2 : x ≠ 0) : x ^ 2 = 1 :=\n  sq_eq_one_iff.mpr\n    ((abs_eq (zero_le_one' ℤ)).mp\n      (le_antisymm (lt_add_one_iff.mp (abs_lt_of_sq_lt_sq h1 zero_le_two))\n        (sub_one_lt_iff.mp (abs_pos.mpr h2))))\n\n"}
{"name":"Int.sq_eq_one_of_sq_le_three","module":"Mathlib.Data.Int.Order.Units","initialProofState":"x : Int\nh1 : LE.le (HPow.hPow x 2) 3\nh2 : Ne x 0\n⊢ Eq (HPow.hPow x 2) 1","decl":"theorem sq_eq_one_of_sq_le_three {x : ℤ} (h1 : x ^ 2 ≤ 3) (h2 : x ≠ 0) : x ^ 2 = 1 :=\n  sq_eq_one_of_sq_lt_four (lt_of_le_of_lt h1 (lt_add_one (3 : ℤ))) h2\n\n"}
{"name":"Int.units_pow_eq_pow_mod_two","module":"Mathlib.Data.Int.Order.Units","initialProofState":"u : Units Int\nn : Nat\n⊢ Eq (HPow.hPow u n) (HPow.hPow u (HMod.hMod n 2))","decl":"theorem units_pow_eq_pow_mod_two (u : ℤˣ) (n : ℕ) : u ^ n = u ^ (n % 2) := by\n  conv =>\n    lhs\n    rw [← Nat.mod_add_div n 2]\n    rw [pow_add, pow_mul, units_sq, one_pow, mul_one]\n\n"}
