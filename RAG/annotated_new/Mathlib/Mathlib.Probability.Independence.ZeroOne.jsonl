{"name":"ProbabilityTheory.Kernel.measure_eq_zero_or_one_or_top_of_indepSet_self","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"α : Type u_1\nΩ : Type u_2\n_mα : MeasurableSpace α\nm0 : MeasurableSpace Ω\nκ : ProbabilityTheory.Kernel α Ω\nμα : MeasureTheory.Measure α\nt : Set Ω\nh_indep : ProbabilityTheory.Kernel.IndepSet t t κ μα\n⊢ Filter.Eventually (fun a => Or (Eq ((κ a) t) 0) (Or (Eq ((κ a) t) 1) (Eq ((κ a) t) Top.top))) (MeasureTheory.ae μα)","decl":"theorem Kernel.measure_eq_zero_or_one_or_top_of_indepSet_self {t : Set Ω}\n    (h_indep : Kernel.IndepSet t t κ μα) :\n    ∀ᵐ a ∂μα, κ a t = 0 ∨ κ a t = 1 ∨ κ a t = ∞ := by\n  specialize h_indep t t (measurableSet_generateFrom (Set.mem_singleton t))\n    (measurableSet_generateFrom (Set.mem_singleton t))\n  filter_upwards [h_indep] with a ha\n  by_cases h0 : κ a t = 0\n  · exact Or.inl h0\n  by_cases h_top : κ a t = ∞\n  · exact Or.inr (Or.inr h_top)\n  rw [← one_mul (κ a (t ∩ t)), Set.inter_self, ENNReal.mul_left_inj h0 h_top] at ha\n  exact Or.inr (Or.inl ha.symm)\n\n"}
{"name":"ProbabilityTheory.measure_eq_zero_or_one_or_top_of_indepSet_self","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nt : Set Ω\nh_indep : ProbabilityTheory.IndepSet t t μ\n⊢ Or (Eq (μ t) 0) (Or (Eq (μ t) 1) (Eq (μ t) Top.top))","decl":"theorem measure_eq_zero_or_one_or_top_of_indepSet_self {t : Set Ω}\n    (h_indep : IndepSet t t μ) : μ t = 0 ∨ μ t = 1 ∨ μ t = ∞ := by\n  simpa only [ae_dirac_eq, Filter.eventually_pure]\n    using Kernel.measure_eq_zero_or_one_or_top_of_indepSet_self h_indep\n\n"}
{"name":"ProbabilityTheory.Kernel.measure_eq_zero_or_one_of_indepSet_self'","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"α : Type u_1\nΩ : Type u_2\n_mα : MeasurableSpace α\nm0 : MeasurableSpace Ω\nκ : ProbabilityTheory.Kernel α Ω\nμα : MeasureTheory.Measure α\nh : Filter.Eventually (fun a => MeasureTheory.IsFiniteMeasure (κ a)) (MeasureTheory.ae μα)\nt : Set Ω\nh_indep : ProbabilityTheory.Kernel.IndepSet t t κ μα\n⊢ Filter.Eventually (fun a => Or (Eq ((κ a) t) 0) (Eq ((κ a) t) 1)) (MeasureTheory.ae μα)","decl":"theorem Kernel.measure_eq_zero_or_one_of_indepSet_self' (h : ∀ᵐ a ∂μα, IsFiniteMeasure (κ a))\n    {t : Set Ω} (h_indep : IndepSet t t κ μα) :\n    ∀ᵐ a ∂μα, κ a t = 0 ∨ κ a t = 1 := by\n  filter_upwards [measure_eq_zero_or_one_or_top_of_indepSet_self h_indep, h] with a h_0_1_top h'\n  simpa only [measure_ne_top (κ a), or_false] using h_0_1_top\n\n"}
{"name":"ProbabilityTheory.Kernel.measure_eq_zero_or_one_of_indepSet_self","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"α : Type u_1\nΩ : Type u_2\n_mα : MeasurableSpace α\nm0 : MeasurableSpace Ω\nκ : ProbabilityTheory.Kernel α Ω\nμα : MeasureTheory.Measure α\nh : ∀ (a : α), MeasureTheory.IsFiniteMeasure (κ a)\nt : Set Ω\nh_indep : ProbabilityTheory.Kernel.IndepSet t t κ μα\n⊢ Filter.Eventually (fun a => Or (Eq ((κ a) t) 0) (Eq ((κ a) t) 1)) (MeasureTheory.ae μα)","decl":"theorem Kernel.measure_eq_zero_or_one_of_indepSet_self [h : ∀ a, IsFiniteMeasure (κ a)] {t : Set Ω}\n    (h_indep : IndepSet t t κ μα) :\n    ∀ᵐ a ∂μα, κ a t = 0 ∨ κ a t = 1 :=\n  Kernel.measure_eq_zero_or_one_of_indepSet_self' (ae_of_all μα h) h_indep\n\n"}
{"name":"ProbabilityTheory.measure_eq_zero_or_one_of_indepSet_self","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nt : Set Ω\nh_indep : ProbabilityTheory.IndepSet t t μ\n⊢ Or (Eq (μ t) 0) (Eq (μ t) 1)","decl":"theorem measure_eq_zero_or_one_of_indepSet_self [IsFiniteMeasure μ] {t : Set Ω}\n    (h_indep : IndepSet t t μ) : μ t = 0 ∨ μ t = 1 := by\n  simpa only [ae_dirac_eq, Filter.eventually_pure]\n    using Kernel.measure_eq_zero_or_one_of_indepSet_self h_indep\n\n"}
{"name":"ProbabilityTheory.condExp_eq_zero_or_one_of_condIndepSet_self","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nm m0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝ : StandardBorelSpace Ω\nhm : LE.le m m0\nhμ : MeasureTheory.IsFiniteMeasure μ\nt : Set Ω\nht : MeasurableSet t\nh_indep : ProbabilityTheory.CondIndepSet m hm t t μ\n⊢ Filter.Eventually (fun ω => Or (Eq (MeasureTheory.condExp m μ (t.indicator fun ω => 1) ω) 0) (Eq (MeasureTheory.condExp m μ (t.indicator fun ω => 1) ω) 1)) (MeasureTheory.ae μ)","decl":"theorem condExp_eq_zero_or_one_of_condIndepSet_self\n    [StandardBorelSpace Ω]\n    (hm : m ≤ m0) [hμ : IsFiniteMeasure μ] {t : Set Ω} (ht : MeasurableSet t)\n    (h_indep : CondIndepSet m hm t t μ) :\n    ∀ᵐ ω ∂μ, (μ⟦t | m⟧) ω = 0 ∨ (μ⟦t | m⟧) ω = 1 := by\n  -- TODO: Why is not inferred?\n  have (a) : IsFiniteMeasure (condExpKernel μ m a) := inferInstance\n  have h := ae_of_ae_trim hm (Kernel.measure_eq_zero_or_one_of_indepSet_self h_indep)\n  filter_upwards [condExpKernel_ae_eq_condExp hm ht, h] with ω hω_eq hω\n  rw [← hω_eq, ENNReal.toReal_eq_zero_iff, ENNReal.toReal_eq_one_iff]\n  cases hω with\n  | inl h => exact Or.inl (Or.inl h)\n  | inr h => exact Or.inr h\n\n"}
{"name":"ProbabilityTheory.condexp_eq_zero_or_one_of_condIndepSet_self","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nm m0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝ : StandardBorelSpace Ω\nhm : LE.le m m0\nhμ : MeasureTheory.IsFiniteMeasure μ\nt : Set Ω\nht : MeasurableSet t\nh_indep : ProbabilityTheory.CondIndepSet m hm t t μ\n⊢ Filter.Eventually (fun ω => Or (Eq (MeasureTheory.condExp m μ (t.indicator fun ω => 1) ω) 0) (Eq (MeasureTheory.condExp m μ (t.indicator fun ω => 1) ω) 1)) (MeasureTheory.ae μ)","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexp_eq_zero_or_one_of_condIndepSet_self := condExp_eq_zero_or_one_of_condIndepSet_self\n\n"}
{"name":"ProbabilityTheory.Kernel.indep_biSup_compl","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"α : Type u_1\nΩ : Type u_2\nι : Type u_3\n_mα : MeasurableSpace α\ns : ι → MeasurableSpace Ω\nm0 : MeasurableSpace Ω\nκ : ProbabilityTheory.Kernel α Ω\nμα : MeasureTheory.Measure α\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.Kernel.iIndep s κ μα\nt : Set ι\n⊢ ProbabilityTheory.Kernel.Indep (iSup fun n => iSup fun h => s n) (iSup fun n => iSup fun h => s n) κ μα","decl":"theorem Kernel.indep_biSup_compl (h_le : ∀ n, s n ≤ m0) (h_indep : iIndep s κ μα) (t : Set ι) :\n    Indep (⨆ n ∈ t, s n) (⨆ n ∈ tᶜ, s n) κ μα :=\n  indep_iSup_of_disjoint h_le h_indep disjoint_compl_right\n\n"}
{"name":"ProbabilityTheory.indep_biSup_compl","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iIndep s μ\nt : Set ι\n⊢ ProbabilityTheory.Indep (iSup fun n => iSup fun h => s n) (iSup fun n => iSup fun h => s n) μ","decl":"theorem indep_biSup_compl (h_le : ∀ n, s n ≤ m0) (h_indep : iIndep s μ) (t : Set ι) :\n    Indep (⨆ n ∈ t, s n) (⨆ n ∈ tᶜ, s n) μ :=\n  Kernel.indep_biSup_compl h_le h_indep t\n\n"}
{"name":"ProbabilityTheory.condIndep_biSup_compl","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm m0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝¹ : StandardBorelSpace Ω\nhm : LE.le m m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iCondIndep m hm s μ\nt : Set ι\n⊢ ProbabilityTheory.CondIndep m (iSup fun n => iSup fun h => s n) (iSup fun n => iSup fun h => s n) hm μ","decl":"theorem condIndep_biSup_compl [StandardBorelSpace Ω]\n    (hm : m ≤ m0) [IsFiniteMeasure μ]\n    (h_le : ∀ n, s n ≤ m0) (h_indep : iCondIndep m hm s μ) (t : Set ι) :\n    CondIndep m (⨆ n ∈ t, s n) (⨆ n ∈ tᶜ, s n) hm μ :=\n  Kernel.indep_biSup_compl h_le h_indep t\n\n"}
{"name":"ProbabilityTheory.Kernel.indep_biSup_limsup","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"α : Type u_1\nΩ : Type u_2\nι : Type u_3\n_mα : MeasurableSpace α\ns : ι → MeasurableSpace Ω\nm0 : MeasurableSpace Ω\nκ : ProbabilityTheory.Kernel α Ω\nμα : MeasureTheory.Measure α\np : Set ι → Prop\nf : Filter ι\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.Kernel.iIndep s κ μα\nhf : ∀ (t : Set ι), p t → Membership.mem f (HasCompl.compl t)\nt : Set ι\nht : p t\n⊢ ProbabilityTheory.Kernel.Indep (iSup fun n => iSup fun h => s n) (Filter.limsup s f) κ μα","decl":"theorem Kernel.indep_biSup_limsup (h_le : ∀ n, s n ≤ m0) (h_indep : iIndep s κ μα)\n    (hf : ∀ t, p t → tᶜ ∈ f) {t : Set ι} (ht : p t) :\n    Indep (⨆ n ∈ t, s n) (limsup s f) κ μα := by\n  refine indep_of_indep_of_le_right (indep_biSup_compl h_le h_indep t) ?_\n  refine limsSup_le_of_le (by isBoundedDefault) ?_\n  simp only [Set.mem_compl_iff, eventually_map]\n  exact eventually_of_mem (hf t ht) le_iSup₂\n\n"}
{"name":"ProbabilityTheory.indep_biSup_limsup","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\np : Set ι → Prop\nf : Filter ι\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iIndep s μ\nhf : ∀ (t : Set ι), p t → Membership.mem f (HasCompl.compl t)\nt : Set ι\nht : p t\n⊢ ProbabilityTheory.Indep (iSup fun n => iSup fun h => s n) (Filter.limsup s f) μ","decl":"theorem indep_biSup_limsup\n    (h_le : ∀ n, s n ≤ m0) (h_indep : iIndep s μ) (hf : ∀ t, p t → tᶜ ∈ f)\n    {t : Set ι} (ht : p t) :\n    Indep (⨆ n ∈ t, s n) (limsup s f) μ :=\n  Kernel.indep_biSup_limsup h_le h_indep hf ht\n\n"}
{"name":"ProbabilityTheory.condIndep_biSup_limsup","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm m0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\np : Set ι → Prop\nf : Filter ι\ninst✝¹ : StandardBorelSpace Ω\nhm : LE.le m m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iCondIndep m hm s μ\nhf : ∀ (t : Set ι), p t → Membership.mem f (HasCompl.compl t)\nt : Set ι\nht : p t\n⊢ ProbabilityTheory.CondIndep m (iSup fun n => iSup fun h => s n) (Filter.limsup s f) hm μ","decl":"theorem condIndep_biSup_limsup [StandardBorelSpace Ω]\n    (hm : m ≤ m0) [IsFiniteMeasure μ]\n    (h_le : ∀ n, s n ≤ m0) (h_indep : iCondIndep m hm s μ) (hf : ∀ t, p t → tᶜ ∈ f)\n    {t : Set ι} (ht : p t) :\n    CondIndep m (⨆ n ∈ t, s n) (limsup s f) hm μ :=\n  Kernel.indep_biSup_limsup h_le h_indep hf ht\n\n"}
{"name":"ProbabilityTheory.Kernel.indep_iSup_directed_limsup","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"α : Type u_1\nΩ : Type u_2\nι : Type u_3\n_mα : MeasurableSpace α\ns : ι → MeasurableSpace Ω\nm0 : MeasurableSpace Ω\nκ : ProbabilityTheory.Kernel α Ω\nμα : MeasureTheory.Measure α\nβ : Type u_4\np : Set ι → Prop\nf : Filter ι\nns : β → Set ι\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.Kernel.iIndep s κ μα\nhf : ∀ (t : Set ι), p t → Membership.mem f (HasCompl.compl t)\nhns : Directed (fun x1 x2 => LE.le x1 x2) ns\nhnsp : ∀ (a : β), p (ns a)\n⊢ ProbabilityTheory.Kernel.Indep (iSup fun a => iSup fun n => iSup fun h => s n) (Filter.limsup s f) κ μα","decl":"theorem Kernel.indep_iSup_directed_limsup (h_le : ∀ n, s n ≤ m0) (h_indep : iIndep s κ μα)\n    (hf : ∀ t, p t → tᶜ ∈ f) (hns : Directed (· ≤ ·) ns) (hnsp : ∀ a, p (ns a)) :\n    Indep (⨆ a, ⨆ n ∈ ns a, s n) (limsup s f) κ μα := by\n  rcases eq_or_ne μα 0 with rfl | hμ\n  · simp\n  obtain ⟨η, η_eq, hη⟩ : ∃ (η : Kernel α Ω), κ =ᵐ[μα] η ∧ IsMarkovKernel η :=\n    exists_ae_eq_isMarkovKernel h_indep.ae_isProbabilityMeasure hμ\n  replace h_indep := h_indep.congr η_eq\n  apply Indep.congr (Filter.EventuallyEq.symm η_eq)\n  apply indep_iSup_of_directed_le\n  · exact fun a => indep_biSup_limsup h_le h_indep hf (hnsp a)\n  · exact fun a => iSup₂_le fun n _ => h_le n\n  · exact limsup_le_iSup.trans (iSup_le h_le)\n  · intro a b\n    obtain ⟨c, hc⟩ := hns a b\n    refine ⟨c, ?_, ?_⟩ <;> refine iSup_mono fun n => iSup_mono' fun hn => ⟨?_, le_rfl⟩\n    · exact hc.1 hn\n    · exact hc.2 hn\n\n"}
{"name":"ProbabilityTheory.indep_iSup_directed_limsup","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_4\np : Set ι → Prop\nf : Filter ι\nns : β → Set ι\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iIndep s μ\nhf : ∀ (t : Set ι), p t → Membership.mem f (HasCompl.compl t)\nhns : Directed (fun x1 x2 => LE.le x1 x2) ns\nhnsp : ∀ (a : β), p (ns a)\n⊢ ProbabilityTheory.Indep (iSup fun a => iSup fun n => iSup fun h => s n) (Filter.limsup s f) μ","decl":"theorem indep_iSup_directed_limsup\n    (h_le : ∀ n, s n ≤ m0) (h_indep : iIndep s μ)\n    (hf : ∀ t, p t → tᶜ ∈ f) (hns : Directed (· ≤ ·) ns) (hnsp : ∀ a, p (ns a)) :\n    Indep (⨆ a, ⨆ n ∈ ns a, s n) (limsup s f) μ :=\n  Kernel.indep_iSup_directed_limsup h_le h_indep hf hns hnsp\n\n"}
{"name":"ProbabilityTheory.condIndep_iSup_directed_limsup","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm m0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_4\np : Set ι → Prop\nf : Filter ι\nns : β → Set ι\ninst✝¹ : StandardBorelSpace Ω\nhm : LE.le m m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iCondIndep m hm s μ\nhf : ∀ (t : Set ι), p t → Membership.mem f (HasCompl.compl t)\nhns : Directed (fun x1 x2 => LE.le x1 x2) ns\nhnsp : ∀ (a : β), p (ns a)\n⊢ ProbabilityTheory.CondIndep m (iSup fun a => iSup fun n => iSup fun h => s n) (Filter.limsup s f) hm μ","decl":"theorem condIndep_iSup_directed_limsup [StandardBorelSpace Ω]\n    (hm : m ≤ m0) [IsFiniteMeasure μ]\n    (h_le : ∀ n, s n ≤ m0) (h_indep : iCondIndep m hm s μ)\n    (hf : ∀ t, p t → tᶜ ∈ f) (hns : Directed (· ≤ ·) ns) (hnsp : ∀ a, p (ns a)) :\n    CondIndep m (⨆ a, ⨆ n ∈ ns a, s n) (limsup s f) hm μ :=\n  Kernel.indep_iSup_directed_limsup h_le h_indep hf hns hnsp\n\n"}
{"name":"ProbabilityTheory.Kernel.indep_iSup_limsup","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"α : Type u_1\nΩ : Type u_2\nι : Type u_3\n_mα : MeasurableSpace α\ns : ι → MeasurableSpace Ω\nm0 : MeasurableSpace Ω\nκ : ProbabilityTheory.Kernel α Ω\nμα : MeasureTheory.Measure α\nβ : Type u_4\np : Set ι → Prop\nf : Filter ι\nns : β → Set ι\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.Kernel.iIndep s κ μα\nhf : ∀ (t : Set ι), p t → Membership.mem f (HasCompl.compl t)\nhns : Directed (fun x1 x2 => LE.le x1 x2) ns\nhnsp : ∀ (a : β), p (ns a)\nhns_univ : ∀ (n : ι), Exists fun a => Membership.mem (ns a) n\n⊢ ProbabilityTheory.Kernel.Indep (iSup fun n => s n) (Filter.limsup s f) κ μα","decl":"theorem Kernel.indep_iSup_limsup (h_le : ∀ n, s n ≤ m0) (h_indep : iIndep s κ μα)\n    (hf : ∀ t, p t → tᶜ ∈ f)\n    (hns : Directed (· ≤ ·) ns) (hnsp : ∀ a, p (ns a)) (hns_univ : ∀ n, ∃ a, n ∈ ns a) :\n    Indep (⨆ n, s n) (limsup s f) κ μα := by\n  suffices (⨆ a, ⨆ n ∈ ns a, s n) = ⨆ n, s n by\n    rw [← this]\n    exact indep_iSup_directed_limsup h_le h_indep hf hns hnsp\n  rw [iSup_comm]\n  refine iSup_congr fun n => ?_\n  have h : ⨆ (i : β) (_ : n ∈ ns i), s n = ⨆ _ : ∃ i, n ∈ ns i, s n := by rw [iSup_exists]\n  haveI : Nonempty (∃ i : β, n ∈ ns i) := ⟨hns_univ n⟩\n  rw [h, iSup_const]\n\n"}
{"name":"ProbabilityTheory.indep_iSup_limsup","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_4\np : Set ι → Prop\nf : Filter ι\nns : β → Set ι\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iIndep s μ\nhf : ∀ (t : Set ι), p t → Membership.mem f (HasCompl.compl t)\nhns : Directed (fun x1 x2 => LE.le x1 x2) ns\nhnsp : ∀ (a : β), p (ns a)\nhns_univ : ∀ (n : ι), Exists fun a => Membership.mem (ns a) n\n⊢ ProbabilityTheory.Indep (iSup fun n => s n) (Filter.limsup s f) μ","decl":"theorem indep_iSup_limsup\n    (h_le : ∀ n, s n ≤ m0) (h_indep : iIndep s μ) (hf : ∀ t, p t → tᶜ ∈ f)\n    (hns : Directed (· ≤ ·) ns) (hnsp : ∀ a, p (ns a)) (hns_univ : ∀ n, ∃ a, n ∈ ns a) :\n    Indep (⨆ n, s n) (limsup s f) μ :=\n  Kernel.indep_iSup_limsup h_le h_indep hf hns hnsp hns_univ\n\n"}
{"name":"ProbabilityTheory.condIndep_iSup_limsup","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm m0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_4\np : Set ι → Prop\nf : Filter ι\nns : β → Set ι\ninst✝¹ : StandardBorelSpace Ω\nhm : LE.le m m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iCondIndep m hm s μ\nhf : ∀ (t : Set ι), p t → Membership.mem f (HasCompl.compl t)\nhns : Directed (fun x1 x2 => LE.le x1 x2) ns\nhnsp : ∀ (a : β), p (ns a)\nhns_univ : ∀ (n : ι), Exists fun a => Membership.mem (ns a) n\n⊢ ProbabilityTheory.CondIndep m (iSup fun n => s n) (Filter.limsup s f) hm μ","decl":"theorem condIndep_iSup_limsup [StandardBorelSpace Ω]\n    (hm : m ≤ m0) [IsFiniteMeasure μ]\n    (h_le : ∀ n, s n ≤ m0) (h_indep : iCondIndep m hm s μ) (hf : ∀ t, p t → tᶜ ∈ f)\n    (hns : Directed (· ≤ ·) ns) (hnsp : ∀ a, p (ns a)) (hns_univ : ∀ n, ∃ a, n ∈ ns a) :\n    CondIndep m (⨆ n, s n) (limsup s f) hm μ :=\n  Kernel.indep_iSup_limsup h_le h_indep hf hns hnsp hns_univ\n\n"}
{"name":"ProbabilityTheory.Kernel.indep_limsup_self","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"α : Type u_1\nΩ : Type u_2\nι : Type u_3\n_mα : MeasurableSpace α\ns : ι → MeasurableSpace Ω\nm0 : MeasurableSpace Ω\nκ : ProbabilityTheory.Kernel α Ω\nμα : MeasureTheory.Measure α\nβ : Type u_4\np : Set ι → Prop\nf : Filter ι\nns : β → Set ι\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.Kernel.iIndep s κ μα\nhf : ∀ (t : Set ι), p t → Membership.mem f (HasCompl.compl t)\nhns : Directed (fun x1 x2 => LE.le x1 x2) ns\nhnsp : ∀ (a : β), p (ns a)\nhns_univ : ∀ (n : ι), Exists fun a => Membership.mem (ns a) n\n⊢ ProbabilityTheory.Kernel.Indep (Filter.limsup s f) (Filter.limsup s f) κ μα","decl":"theorem Kernel.indep_limsup_self (h_le : ∀ n, s n ≤ m0) (h_indep : iIndep s κ μα)\n    (hf : ∀ t, p t → tᶜ ∈ f)\n    (hns : Directed (· ≤ ·) ns) (hnsp : ∀ a, p (ns a)) (hns_univ : ∀ n, ∃ a, n ∈ ns a) :\n    Indep (limsup s f) (limsup s f) κ μα :=\n  indep_of_indep_of_le_left (indep_iSup_limsup h_le h_indep hf hns hnsp hns_univ) limsup_le_iSup\n\n"}
{"name":"ProbabilityTheory.indep_limsup_self","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_4\np : Set ι → Prop\nf : Filter ι\nns : β → Set ι\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iIndep s μ\nhf : ∀ (t : Set ι), p t → Membership.mem f (HasCompl.compl t)\nhns : Directed (fun x1 x2 => LE.le x1 x2) ns\nhnsp : ∀ (a : β), p (ns a)\nhns_univ : ∀ (n : ι), Exists fun a => Membership.mem (ns a) n\n⊢ ProbabilityTheory.Indep (Filter.limsup s f) (Filter.limsup s f) μ","decl":"theorem indep_limsup_self\n    (h_le : ∀ n, s n ≤ m0) (h_indep : iIndep s μ) (hf : ∀ t, p t → tᶜ ∈ f)\n    (hns : Directed (· ≤ ·) ns) (hnsp : ∀ a, p (ns a)) (hns_univ : ∀ n, ∃ a, n ∈ ns a) :\n    Indep (limsup s f) (limsup s f) μ :=\n  Kernel.indep_limsup_self h_le h_indep hf hns hnsp hns_univ\n\n"}
{"name":"ProbabilityTheory.condIndep_limsup_self","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm m0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_4\np : Set ι → Prop\nf : Filter ι\nns : β → Set ι\ninst✝¹ : StandardBorelSpace Ω\nhm : LE.le m m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iCondIndep m hm s μ\nhf : ∀ (t : Set ι), p t → Membership.mem f (HasCompl.compl t)\nhns : Directed (fun x1 x2 => LE.le x1 x2) ns\nhnsp : ∀ (a : β), p (ns a)\nhns_univ : ∀ (n : ι), Exists fun a => Membership.mem (ns a) n\n⊢ ProbabilityTheory.CondIndep m (Filter.limsup s f) (Filter.limsup s f) hm μ","decl":"theorem condIndep_limsup_self [StandardBorelSpace Ω]\n    (hm : m ≤ m0) [IsFiniteMeasure μ]\n    (h_le : ∀ n, s n ≤ m0) (h_indep : iCondIndep m hm s μ) (hf : ∀ t, p t → tᶜ ∈ f)\n    (hns : Directed (· ≤ ·) ns) (hnsp : ∀ a, p (ns a)) (hns_univ : ∀ n, ∃ a, n ∈ ns a) :\n    CondIndep m (limsup s f) (limsup s f) hm μ :=\n  Kernel.indep_limsup_self h_le h_indep hf hns hnsp hns_univ\n\n"}
{"name":"ProbabilityTheory.Kernel.measure_zero_or_one_of_measurableSet_limsup","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"α : Type u_1\nΩ : Type u_2\nι : Type u_3\n_mα : MeasurableSpace α\ns : ι → MeasurableSpace Ω\nm0 : MeasurableSpace Ω\nκ : ProbabilityTheory.Kernel α Ω\nμα : MeasureTheory.Measure α\nβ : Type u_4\np : Set ι → Prop\nf : Filter ι\nns : β → Set ι\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.Kernel.iIndep s κ μα\nhf : ∀ (t : Set ι), p t → Membership.mem f (HasCompl.compl t)\nhns : Directed (fun x1 x2 => LE.le x1 x2) ns\nhnsp : ∀ (a : β), p (ns a)\nhns_univ : ∀ (n : ι), Exists fun a => Membership.mem (ns a) n\nt : Set Ω\nht_tail : MeasurableSet t\n⊢ Filter.Eventually (fun a => Or (Eq ((κ a) t) 0) (Eq ((κ a) t) 1)) (MeasureTheory.ae μα)","decl":"theorem Kernel.measure_zero_or_one_of_measurableSet_limsup (h_le : ∀ n, s n ≤ m0)\n    (h_indep : iIndep s κ μα)\n    (hf : ∀ t, p t → tᶜ ∈ f) (hns : Directed (· ≤ ·) ns) (hnsp : ∀ a, p (ns a))\n    (hns_univ : ∀ n, ∃ a, n ∈ ns a) {t : Set Ω} (ht_tail : MeasurableSet[limsup s f] t) :\n    ∀ᵐ a ∂μα, κ a t = 0 ∨ κ a t = 1 := by\n  apply measure_eq_zero_or_one_of_indepSet_self' ?_\n    ((indep_limsup_self h_le h_indep hf hns hnsp hns_univ).indepSet_of_measurableSet ht_tail\n      ht_tail)\n  filter_upwards [h_indep.ae_isProbabilityMeasure] with a ha using by infer_instance\n\n"}
{"name":"ProbabilityTheory.measure_zero_or_one_of_measurableSet_limsup","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_4\np : Set ι → Prop\nf : Filter ι\nns : β → Set ι\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iIndep s μ\nhf : ∀ (t : Set ι), p t → Membership.mem f (HasCompl.compl t)\nhns : Directed (fun x1 x2 => LE.le x1 x2) ns\nhnsp : ∀ (a : β), p (ns a)\nhns_univ : ∀ (n : ι), Exists fun a => Membership.mem (ns a) n\nt : Set Ω\nht_tail : MeasurableSet t\n⊢ Or (Eq (μ t) 0) (Eq (μ t) 1)","decl":"theorem measure_zero_or_one_of_measurableSet_limsup\n    (h_le : ∀ n, s n ≤ m0) (h_indep : iIndep s μ)\n    (hf : ∀ t, p t → tᶜ ∈ f) (hns : Directed (· ≤ ·) ns) (hnsp : ∀ a, p (ns a))\n    (hns_univ : ∀ n, ∃ a, n ∈ ns a) {t : Set Ω} (ht_tail : MeasurableSet[limsup s f] t) :\n    μ t = 0 ∨ μ t = 1 := by\n  simpa only [ae_dirac_eq, Filter.eventually_pure]\n    using Kernel.measure_zero_or_one_of_measurableSet_limsup h_le h_indep hf hns hnsp hns_univ\n      ht_tail\n\n"}
{"name":"ProbabilityTheory.condExp_zero_or_one_of_measurableSet_limsup","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm m0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_4\np : Set ι → Prop\nf : Filter ι\nns : β → Set ι\ninst✝¹ : StandardBorelSpace Ω\nhm : LE.le m m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iCondIndep m hm s μ\nhf : ∀ (t : Set ι), p t → Membership.mem f (HasCompl.compl t)\nhns : Directed (fun x1 x2 => LE.le x1 x2) ns\nhnsp : ∀ (a : β), p (ns a)\nhns_univ : ∀ (n : ι), Exists fun a => Membership.mem (ns a) n\nt : Set Ω\nht_tail : MeasurableSet t\n⊢ Filter.Eventually (fun ω => Or (Eq (MeasureTheory.condExp m μ (t.indicator fun ω => 1) ω) 0) (Eq (MeasureTheory.condExp m μ (t.indicator fun ω => 1) ω) 1)) (MeasureTheory.ae μ)","decl":"theorem condExp_zero_or_one_of_measurableSet_limsup [StandardBorelSpace Ω]\n    (hm : m ≤ m0) [IsFiniteMeasure μ]\n    (h_le : ∀ n, s n ≤ m0) (h_indep : iCondIndep m hm s μ)\n    (hf : ∀ t, p t → tᶜ ∈ f) (hns : Directed (· ≤ ·) ns) (hnsp : ∀ a, p (ns a))\n    (hns_univ : ∀ n, ∃ a, n ∈ ns a) {t : Set Ω} (ht_tail : MeasurableSet[limsup s f] t) :\n    ∀ᵐ ω ∂μ, (μ⟦t | m⟧) ω = 0 ∨ (μ⟦t | m⟧) ω = 1 := by\n  have h := ae_of_ae_trim hm\n    (Kernel.measure_zero_or_one_of_measurableSet_limsup h_le h_indep hf hns hnsp hns_univ ht_tail)\n  have ht : MeasurableSet t := limsup_le_iSup.trans (iSup_le h_le) t ht_tail\n  filter_upwards [condExpKernel_ae_eq_condExp hm ht, h] with ω hω_eq hω\n  rw [← hω_eq, ENNReal.toReal_eq_zero_iff, ENNReal.toReal_eq_one_iff]\n  cases hω with\n  | inl h => exact Or.inl (Or.inl h)\n  | inr h => exact Or.inr h\n\n"}
{"name":"ProbabilityTheory.condexp_zero_or_one_of_measurableSet_limsup","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm m0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_4\np : Set ι → Prop\nf : Filter ι\nns : β → Set ι\ninst✝¹ : StandardBorelSpace Ω\nhm : LE.le m m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iCondIndep m hm s μ\nhf : ∀ (t : Set ι), p t → Membership.mem f (HasCompl.compl t)\nhns : Directed (fun x1 x2 => LE.le x1 x2) ns\nhnsp : ∀ (a : β), p (ns a)\nhns_univ : ∀ (n : ι), Exists fun a => Membership.mem (ns a) n\nt : Set Ω\nht_tail : MeasurableSet t\n⊢ Filter.Eventually (fun ω => Or (Eq (MeasureTheory.condExp m μ (t.indicator fun ω => 1) ω) 0) (Eq (MeasureTheory.condExp m μ (t.indicator fun ω => 1) ω) 1)) (MeasureTheory.ae μ)","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexp_zero_or_one_of_measurableSet_limsup := condExp_zero_or_one_of_measurableSet_limsup\n\n"}
{"name":"ProbabilityTheory.Kernel.indep_limsup_atTop_self","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"α : Type u_1\nΩ : Type u_2\nι : Type u_3\n_mα : MeasurableSpace α\ns : ι → MeasurableSpace Ω\nm0 : MeasurableSpace Ω\nκ : ProbabilityTheory.Kernel α Ω\nμα : MeasureTheory.Measure α\ninst✝² : SemilatticeSup ι\ninst✝¹ : NoMaxOrder ι\ninst✝ : Nonempty ι\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.Kernel.iIndep s κ μα\n⊢ ProbabilityTheory.Kernel.Indep (Filter.limsup s Filter.atTop) (Filter.limsup s Filter.atTop) κ μα","decl":"theorem Kernel.indep_limsup_atTop_self (h_le : ∀ n, s n ≤ m0) (h_indep : iIndep s κ μα) :\n    Indep (limsup s atTop) (limsup s atTop) κ μα := by\n  let ns : ι → Set ι := Set.Iic\n  have hnsp : ∀ i, BddAbove (ns i) := fun i => bddAbove_Iic\n  refine indep_limsup_self h_le h_indep ?_ ?_ hnsp ?_\n  · simp only [mem_atTop_sets, Set.mem_compl_iff, BddAbove, upperBounds, Set.Nonempty]\n    rintro t ⟨a, ha⟩\n    obtain ⟨b, hb⟩ : ∃ b, a < b := exists_gt a\n    refine ⟨b, fun c hc hct => ?_⟩\n    suffices ∀ i ∈ t, i < c from lt_irrefl c (this c hct)\n    exact fun i hi => (ha hi).trans_lt (hb.trans_le hc)\n  · exact Monotone.directed_le fun i j hij k hki => le_trans hki hij\n  · exact fun n => ⟨n, le_rfl⟩\n\n"}
{"name":"ProbabilityTheory.indep_limsup_atTop_self","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝² : SemilatticeSup ι\ninst✝¹ : NoMaxOrder ι\ninst✝ : Nonempty ι\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iIndep s μ\n⊢ ProbabilityTheory.Indep (Filter.limsup s Filter.atTop) (Filter.limsup s Filter.atTop) μ","decl":"theorem indep_limsup_atTop_self (h_le : ∀ n, s n ≤ m0) (h_indep : iIndep s μ) :\n    Indep (limsup s atTop) (limsup s atTop) μ :=\n  Kernel.indep_limsup_atTop_self h_le h_indep\n\n"}
{"name":"ProbabilityTheory.condIndep_limsup_atTop_self","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm m0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁴ : SemilatticeSup ι\ninst✝³ : NoMaxOrder ι\ninst✝² : Nonempty ι\ninst✝¹ : StandardBorelSpace Ω\nhm : LE.le m m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iCondIndep m hm s μ\n⊢ ProbabilityTheory.CondIndep m (Filter.limsup s Filter.atTop) (Filter.limsup s Filter.atTop) hm μ","decl":"theorem condIndep_limsup_atTop_self [StandardBorelSpace Ω]\n    (hm : m ≤ m0) [IsFiniteMeasure μ]\n    (h_le : ∀ n, s n ≤ m0) (h_indep : iCondIndep m hm s μ) :\n    CondIndep m (limsup s atTop) (limsup s atTop) hm μ :=\n  Kernel.indep_limsup_atTop_self h_le h_indep\n\n"}
{"name":"ProbabilityTheory.Kernel.measure_zero_or_one_of_measurableSet_limsup_atTop","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"α : Type u_1\nΩ : Type u_2\nι : Type u_3\n_mα : MeasurableSpace α\ns : ι → MeasurableSpace Ω\nm0 : MeasurableSpace Ω\nκ : ProbabilityTheory.Kernel α Ω\nμα : MeasureTheory.Measure α\ninst✝² : SemilatticeSup ι\ninst✝¹ : NoMaxOrder ι\ninst✝ : Nonempty ι\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.Kernel.iIndep s κ μα\nt : Set Ω\nht_tail : MeasurableSet t\n⊢ Filter.Eventually (fun a => Or (Eq ((κ a) t) 0) (Eq ((κ a) t) 1)) (MeasureTheory.ae μα)","decl":"theorem Kernel.measure_zero_or_one_of_measurableSet_limsup_atTop (h_le : ∀ n, s n ≤ m0)\n    (h_indep : iIndep s κ μα) {t : Set Ω} (ht_tail : MeasurableSet[limsup s atTop] t) :\n    ∀ᵐ a ∂μα, κ a t = 0 ∨ κ a t = 1 := by\n  apply measure_eq_zero_or_one_of_indepSet_self' ?_\n    ((indep_limsup_atTop_self h_le h_indep).indepSet_of_measurableSet ht_tail ht_tail)\n  filter_upwards [h_indep.ae_isProbabilityMeasure] with a ha using by infer_instance\n\n"}
{"name":"ProbabilityTheory.measure_zero_or_one_of_measurableSet_limsup_atTop","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝² : SemilatticeSup ι\ninst✝¹ : NoMaxOrder ι\ninst✝ : Nonempty ι\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iIndep s μ\nt : Set Ω\nht_tail : MeasurableSet t\n⊢ Or (Eq (μ t) 0) (Eq (μ t) 1)","decl":"/-- **Kolmogorov's 0-1 law** : any event in the tail σ-algebra of an independent sequence of\nsub-σ-algebras has probability 0 or 1.\nThe tail σ-algebra `limsup s atTop` is the same as `⋂ n, ⋃ i ≥ n, s i`. -/\ntheorem measure_zero_or_one_of_measurableSet_limsup_atTop\n    (h_le : ∀ n, s n ≤ m0)\n    (h_indep : iIndep s μ) {t : Set Ω} (ht_tail : MeasurableSet[limsup s atTop] t) :\n    μ t = 0 ∨ μ t = 1 := by\n  simpa only [ae_dirac_eq, Filter.eventually_pure]\n    using Kernel.measure_zero_or_one_of_measurableSet_limsup_atTop h_le h_indep ht_tail\n\n"}
{"name":"ProbabilityTheory.condExp_zero_or_one_of_measurableSet_limsup_atTop","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm m0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁴ : SemilatticeSup ι\ninst✝³ : NoMaxOrder ι\ninst✝² : Nonempty ι\ninst✝¹ : StandardBorelSpace Ω\nhm : LE.le m m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iCondIndep m hm s μ\nt : Set Ω\nht_tail : MeasurableSet t\n⊢ Filter.Eventually (fun ω => Or (Eq (MeasureTheory.condExp m μ (t.indicator fun ω => 1) ω) 0) (Eq (MeasureTheory.condExp m μ (t.indicator fun ω => 1) ω) 1)) (MeasureTheory.ae μ)","decl":"theorem condExp_zero_or_one_of_measurableSet_limsup_atTop [StandardBorelSpace Ω]\n    (hm : m ≤ m0) [IsFiniteMeasure μ] (h_le : ∀ n, s n ≤ m0)\n    (h_indep : iCondIndep m hm s μ) {t : Set Ω} (ht_tail : MeasurableSet[limsup s atTop] t) :\n    ∀ᵐ ω ∂μ, (μ⟦t | m⟧) ω = 0 ∨ (μ⟦t | m⟧) ω = 1 :=\n  condExp_eq_zero_or_one_of_condIndepSet_self hm (limsup_le_iSup.trans (iSup_le h_le) t ht_tail)\n    ((condIndep_limsup_atTop_self hm h_le h_indep).condIndepSet_of_measurableSet ht_tail ht_tail)\n\n"}
{"name":"ProbabilityTheory.condexp_zero_or_one_of_measurableSet_limsup_atTop","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm m0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁴ : SemilatticeSup ι\ninst✝³ : NoMaxOrder ι\ninst✝² : Nonempty ι\ninst✝¹ : StandardBorelSpace Ω\nhm : LE.le m m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iCondIndep m hm s μ\nt : Set Ω\nht_tail : MeasurableSet t\n⊢ Filter.Eventually (fun ω => Or (Eq (MeasureTheory.condExp m μ (t.indicator fun ω => 1) ω) 0) (Eq (MeasureTheory.condExp m μ (t.indicator fun ω => 1) ω) 1)) (MeasureTheory.ae μ)","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexp_zero_or_one_of_measurableSet_limsup_atTop :=\n  condExp_zero_or_one_of_measurableSet_limsup_atTop\n\n"}
{"name":"ProbabilityTheory.Kernel.indep_limsup_atBot_self","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"α : Type u_1\nΩ : Type u_2\nι : Type u_3\n_mα : MeasurableSpace α\ns : ι → MeasurableSpace Ω\nm0 : MeasurableSpace Ω\nκ : ProbabilityTheory.Kernel α Ω\nμα : MeasureTheory.Measure α\ninst✝² : SemilatticeInf ι\ninst✝¹ : NoMinOrder ι\ninst✝ : Nonempty ι\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.Kernel.iIndep s κ μα\n⊢ ProbabilityTheory.Kernel.Indep (Filter.limsup s Filter.atBot) (Filter.limsup s Filter.atBot) κ μα","decl":"theorem Kernel.indep_limsup_atBot_self (h_le : ∀ n, s n ≤ m0) (h_indep : iIndep s κ μα) :\n    Indep (limsup s atBot) (limsup s atBot) κ μα := by\n  let ns : ι → Set ι := Set.Ici\n  have hnsp : ∀ i, BddBelow (ns i) := fun i => bddBelow_Ici\n  refine indep_limsup_self h_le h_indep ?_ ?_ hnsp ?_\n  · simp only [mem_atBot_sets, Set.mem_compl_iff, BddBelow, lowerBounds, Set.Nonempty]\n    rintro t ⟨a, ha⟩\n    obtain ⟨b, hb⟩ : ∃ b, b < a := exists_lt a\n    refine ⟨b, fun c hc hct => ?_⟩\n    suffices ∀ i ∈ t, c < i from lt_irrefl c (this c hct)\n    exact fun i hi => hc.trans_lt (hb.trans_le (ha hi))\n  · exact Antitone.directed_le fun _ _ ↦ Set.Ici_subset_Ici.2\n  · exact fun n => ⟨n, le_rfl⟩\n\n"}
{"name":"ProbabilityTheory.indep_limsup_atBot_self","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝² : SemilatticeInf ι\ninst✝¹ : NoMinOrder ι\ninst✝ : Nonempty ι\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iIndep s μ\n⊢ ProbabilityTheory.Indep (Filter.limsup s Filter.atBot) (Filter.limsup s Filter.atBot) μ","decl":"theorem indep_limsup_atBot_self\n    (h_le : ∀ n, s n ≤ m0) (h_indep : iIndep s μ) :\n    Indep (limsup s atBot) (limsup s atBot) μ :=\n  Kernel.indep_limsup_atBot_self h_le h_indep\n\n"}
{"name":"ProbabilityTheory.condIndep_limsup_atBot_self","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm m0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁴ : SemilatticeInf ι\ninst✝³ : NoMinOrder ι\ninst✝² : Nonempty ι\ninst✝¹ : StandardBorelSpace Ω\nhm : LE.le m m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iCondIndep m hm s μ\n⊢ ProbabilityTheory.CondIndep m (Filter.limsup s Filter.atBot) (Filter.limsup s Filter.atBot) hm μ","decl":"theorem condIndep_limsup_atBot_self [StandardBorelSpace Ω]\n    (hm : m ≤ m0) [IsFiniteMeasure μ]\n    (h_le : ∀ n, s n ≤ m0) (h_indep : iCondIndep m hm s μ) :\n    CondIndep m (limsup s atBot) (limsup s atBot) hm μ :=\n  Kernel.indep_limsup_atBot_self h_le h_indep\n\n"}
{"name":"ProbabilityTheory.Kernel.measure_zero_or_one_of_measurableSet_limsup_atBot","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"α : Type u_1\nΩ : Type u_2\nι : Type u_3\n_mα : MeasurableSpace α\ns : ι → MeasurableSpace Ω\nm0 : MeasurableSpace Ω\nκ : ProbabilityTheory.Kernel α Ω\nμα : MeasureTheory.Measure α\ninst✝² : SemilatticeInf ι\ninst✝¹ : NoMinOrder ι\ninst✝ : Nonempty ι\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.Kernel.iIndep s κ μα\nt : Set Ω\nht_tail : MeasurableSet t\n⊢ Filter.Eventually (fun a => Or (Eq ((κ a) t) 0) (Eq ((κ a) t) 1)) (MeasureTheory.ae μα)","decl":"/-- **Kolmogorov's 0-1 law**, kernel version: any event in the tail σ-algebra of an independent\nsequence of sub-σ-algebras has probability 0 or 1 almost surely. -/\ntheorem Kernel.measure_zero_or_one_of_measurableSet_limsup_atBot (h_le : ∀ n, s n ≤ m0)\n    (h_indep : iIndep s κ μα) {t : Set Ω} (ht_tail : MeasurableSet[limsup s atBot] t) :\n    ∀ᵐ a ∂μα, κ a t = 0 ∨ κ a t = 1 := by\n  apply measure_eq_zero_or_one_of_indepSet_self' ?_\n    ((indep_limsup_atBot_self h_le h_indep).indepSet_of_measurableSet ht_tail ht_tail)\n  filter_upwards [h_indep.ae_isProbabilityMeasure] with a ha using by infer_instance\n\n"}
{"name":"ProbabilityTheory.measure_zero_or_one_of_measurableSet_limsup_atBot","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝² : SemilatticeInf ι\ninst✝¹ : NoMinOrder ι\ninst✝ : Nonempty ι\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iIndep s μ\nt : Set Ω\nht_tail : MeasurableSet t\n⊢ Or (Eq (μ t) 0) (Eq (μ t) 1)","decl":"/-- **Kolmogorov's 0-1 law** : any event in the tail σ-algebra of an independent sequence of\nsub-σ-algebras has probability 0 or 1. -/\ntheorem measure_zero_or_one_of_measurableSet_limsup_atBot\n    (h_le : ∀ n, s n ≤ m0) (h_indep : iIndep s μ) {t : Set Ω}\n    (ht_tail : MeasurableSet[limsup s atBot] t) :\n    μ t = 0 ∨ μ t = 1 := by\n  simpa only [ae_dirac_eq, Filter.eventually_pure]\n    using Kernel.measure_zero_or_one_of_measurableSet_limsup_atBot h_le h_indep ht_tail\n\n"}
{"name":"ProbabilityTheory.condExp_zero_or_one_of_measurableSet_limsup_atBot","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm m0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁴ : SemilatticeInf ι\ninst✝³ : NoMinOrder ι\ninst✝² : Nonempty ι\ninst✝¹ : StandardBorelSpace Ω\nhm : LE.le m m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iCondIndep m hm s μ\nt : Set Ω\nht_tail : MeasurableSet t\n⊢ Filter.Eventually (fun ω => Or (Eq (MeasureTheory.condExp m μ (t.indicator fun ω => 1) ω) 0) (Eq (MeasureTheory.condExp m μ (t.indicator fun ω => 1) ω) 1)) (MeasureTheory.ae μ)","decl":"/-- **Kolmogorov's 0-1 law**, conditional version: any event in the tail σ-algebra of a\nconditionally independent sequence of sub-σ-algebras has conditional probability 0 or 1. -/\ntheorem condExp_zero_or_one_of_measurableSet_limsup_atBot [StandardBorelSpace Ω]\n    (hm : m ≤ m0) [IsFiniteMeasure μ] (h_le : ∀ n, s n ≤ m0)\n    (h_indep : iCondIndep m hm s μ) {t : Set Ω} (ht_tail : MeasurableSet[limsup s atBot] t) :\n    ∀ᵐ ω ∂μ, (μ⟦t | m⟧) ω = 0 ∨ (μ⟦t | m⟧) ω = 1 :=\n  condExp_eq_zero_or_one_of_condIndepSet_self hm (limsup_le_iSup.trans (iSup_le h_le) t ht_tail)\n    ((condIndep_limsup_atBot_self hm h_le h_indep).condIndepSet_of_measurableSet ht_tail ht_tail)\n\n"}
{"name":"ProbabilityTheory.condexp_zero_or_one_of_measurableSet_limsup_atBot","module":"Mathlib.Probability.Independence.ZeroOne","initialProofState":"Ω : Type u_2\nι : Type u_3\ns : ι → MeasurableSpace Ω\nm m0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁴ : SemilatticeInf ι\ninst✝³ : NoMinOrder ι\ninst✝² : Nonempty ι\ninst✝¹ : StandardBorelSpace Ω\nhm : LE.le m m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nh_le : ∀ (n : ι), LE.le (s n) m0\nh_indep : ProbabilityTheory.iCondIndep m hm s μ\nt : Set Ω\nht_tail : MeasurableSet t\n⊢ Filter.Eventually (fun ω => Or (Eq (MeasureTheory.condExp m μ (t.indicator fun ω => 1) ω) 0) (Eq (MeasureTheory.condExp m μ (t.indicator fun ω => 1) ω) 1)) (MeasureTheory.ae μ)","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexp_zero_or_one_of_measurableSet_limsup_atBot :=\n  condExp_zero_or_one_of_measurableSet_limsup_atBot\n\n"}
