{"name":"Complex.norm_eventually_eq_of_mdifferentiableAt_of_isLocalMax","module":"Mathlib.Geometry.Manifold.Complex","initialProofState":"E : Type u_1\ninst‚úù‚Å∏ : NormedAddCommGroup E\ninst‚úù‚Å∑ : NormedSpace Complex E\nF : Type u_2\ninst‚úù‚Å∂ : NormedAddCommGroup F\ninst‚úù‚Åµ : NormedSpace Complex F\nH : Type u_3\ninst‚úù‚Å¥ : TopologicalSpace H\nI : ModelWithCorners Complex E H\ninst‚úù¬≥ : I.Boundaryless\nM : Type u_4\ninst‚úù¬≤ : TopologicalSpace M\ninst‚úù¬π : ChartedSpace H M\ninst‚úù : IsManifold I 1 M\nf : M ‚Üí F\nc : M\nhd : Filter.Eventually (fun z => MDifferentiableAt I (modelWithCornersSelf Complex F) f z) (nhds c)\nhc : IsLocalMax (Function.comp Norm.norm f) c\n‚ä¢ Filter.Eventually (fun y => Eq (Norm.norm (f y)) (Norm.norm (f c))) (nhds c)","decl":"/-- **Maximum modulus principle**: if `f : M ‚Üí F` is complex differentiable in a neighborhood of `c`\nand the norm `‚Äñf z‚Äñ` has a local maximum at `c`, then `‚Äñf z‚Äñ` is locally constant in a neighborhood\nof `c`. This is a manifold version of `Complex.norm_eventually_eq_of_isLocalMax`. -/\ntheorem Complex.norm_eventually_eq_of_mdifferentiableAt_of_isLocalMax {f : M ‚Üí F} {c : M}\n    (hd : ‚àÄ·∂† z in ùìù c, MDifferentiableAt I ùìò(‚ÑÇ, F) f z) (hc : IsLocalMax (norm ‚àò f) c) :\n    ‚àÄ·∂† y in ùìù c, ‚Äñf y‚Äñ = ‚Äñf c‚Äñ := by\n  set e := extChartAt I c\n  have hI : range I = univ := ModelWithCorners.Boundaryless.range_eq_univ\n  have H‚ÇÅ : ùìù[range I] (e c) = ùìù (e c) := by rw [hI, nhdsWithin_univ]\n  have H‚ÇÇ : map e.symm (ùìù (e c)) = ùìù c := by\n    rw [‚Üê map_extChartAt_symm_nhdsWithin_range (I := I) c, H‚ÇÅ]\n  rw [‚Üê H‚ÇÇ, eventually_map]\n  replace hd : ‚àÄ·∂† y in ùìù (e c), DifferentiableAt ‚ÑÇ (f ‚àò e.symm) y := by\n    have : e.target ‚àà ùìù (e c) := H‚ÇÅ ‚ñ∏ extChartAt_target_mem_nhdsWithin c\n    filter_upwards [this, Tendsto.eventually H‚ÇÇ.le hd] with y hyt hy‚ÇÇ\n    have hys : e.symm y ‚àà (chartAt H c).source := by\n      rw [‚Üê extChartAt_source I c]\n      exact (extChartAt I c).map_target hyt\n    have hfy : f (e.symm y) ‚àà (chartAt F (0 : F)).source := mem_univ _\n    rw [mdifferentiableAt_iff_of_mem_source hys hfy, hI, differentiableWithinAt_univ,\n      e.right_inv hyt] at hy‚ÇÇ\n    exact hy‚ÇÇ.2\n  convert norm_eventually_eq_of_isLocalMax hd _\n  ¬∑ exact congr_arg f (extChartAt_to_inv _).symm\n  ¬∑ simpa only [e, IsLocalMax, IsMaxFilter, ‚Üê H‚ÇÇ, (¬∑ ‚àò ¬∑), extChartAt_to_inv] using hc\n\n"}
{"name":"MDifferentiableOn.norm_eqOn_of_isPreconnected_of_isMaxOn","module":"Mathlib.Geometry.Manifold.Complex","initialProofState":"E : Type u_1\ninst‚úù‚Å∏ : NormedAddCommGroup E\ninst‚úù‚Å∑ : NormedSpace Complex E\nF : Type u_2\ninst‚úù‚Å∂ : NormedAddCommGroup F\ninst‚úù‚Åµ : NormedSpace Complex F\nH : Type u_3\ninst‚úù‚Å¥ : TopologicalSpace H\nI : ModelWithCorners Complex E H\ninst‚úù¬≥ : I.Boundaryless\nM : Type u_4\ninst‚úù¬≤ : TopologicalSpace M\ninst‚úù¬π : ChartedSpace H M\ninst‚úù : IsManifold I 1 M\nf : M ‚Üí F\nU : Set M\nc : M\nhd : MDifferentiableOn I (modelWithCornersSelf Complex F) f U\nhc : IsPreconnected U\nho : IsOpen U\nhcU : Membership.mem U c\nhm : IsMaxOn (Function.comp Norm.norm f) U c\n‚ä¢ Set.EqOn (Function.comp Norm.norm f) (Function.const M (Norm.norm (f c))) U","decl":"/-- **Maximum modulus principle** on a connected set. Let `U` be a (pre)connected open set in a\ncomplex normed space. Let `f : E ‚Üí F` be a function that is complex differentiable on `U`. Suppose\nthat `‚Äñf x‚Äñ` takes its maximum value on `U` at `c ‚àà U`. Then `‚Äñf x‚Äñ = ‚Äñf c‚Äñ` for all `x ‚àà U`. -/\ntheorem norm_eqOn_of_isPreconnected_of_isMaxOn {f : M ‚Üí F} {U : Set M} {c : M}\n    (hd : MDifferentiableOn I ùìò(‚ÑÇ, F) f U) (hc : IsPreconnected U) (ho : IsOpen U)\n    (hcU : c ‚àà U) (hm : IsMaxOn (norm ‚àò f) U c) : EqOn (norm ‚àò f) (const M ‚Äñf c‚Äñ) U := by\n  set V := {z ‚àà U | ‚Äñf z‚Äñ = ‚Äñf c‚Äñ}\n  suffices U ‚äÜ V from fun x hx ‚Ü¶ (this hx).2\n  have hVo : IsOpen V := by\n    refine isOpen_iff_mem_nhds.2 fun x hx ‚Ü¶ inter_mem (ho.mem_nhds hx.1) ?_\n    replace hm : IsLocalMax (‚Äñf ¬∑‚Äñ) x :=\n      mem_of_superset (ho.mem_nhds hx.1) fun z hz ‚Ü¶ (hm hz).out.trans_eq hx.2.symm\n    replace hd : ‚àÄ·∂† y in ùìù x, MDifferentiableAt I ùìò(‚ÑÇ, F) f y :=\n      (eventually_mem_nhds_iff.2 (ho.mem_nhds hx.1)).mono fun z ‚Ü¶ hd.mdifferentiableAt\n    exact (Complex.norm_eventually_eq_of_mdifferentiableAt_of_isLocalMax hd hm).mono fun _ ‚Ü¶\n      (Eq.trans ¬∑ hx.2)\n  have hVne : (U ‚à© V).Nonempty := ‚ü®c, hcU, hcU, rfl‚ü©\n  set W := U ‚à© {z | ‚Äñf z‚Äñ = ‚Äñf c‚Äñ}·∂ú\n  have hWo : IsOpen W := hd.continuousOn.norm.isOpen_inter_preimage ho isOpen_ne\n  have hdVW : Disjoint V W := disjoint_compl_right.mono inf_le_right inf_le_right\n  have hUVW : U ‚äÜ V ‚à™ W := fun x hx => (eq_or_ne ‚Äñf x‚Äñ ‚Äñf c‚Äñ).imp (.intro hx) (.intro hx)\n  exact hc.subset_left_of_subset_union hVo hWo hdVW hUVW hVne\n\n"}
{"name":"MDifferentiableOn.eqOn_of_isPreconnected_of_isMaxOn_norm","module":"Mathlib.Geometry.Manifold.Complex","initialProofState":"E : Type u_1\ninst‚úù‚Åπ : NormedAddCommGroup E\ninst‚úù‚Å∏ : NormedSpace Complex E\nF : Type u_2\ninst‚úù‚Å∑ : NormedAddCommGroup F\ninst‚úù‚Å∂ : NormedSpace Complex F\nH : Type u_3\ninst‚úù‚Åµ : TopologicalSpace H\nI : ModelWithCorners Complex E H\ninst‚úù‚Å¥ : I.Boundaryless\nM : Type u_4\ninst‚úù¬≥ : TopologicalSpace M\ninst‚úù¬≤ : ChartedSpace H M\ninst‚úù¬π : IsManifold I 1 M\ninst‚úù : StrictConvexSpace Real F\nf : M ‚Üí F\nU : Set M\nc : M\nhd : MDifferentiableOn I (modelWithCornersSelf Complex F) f U\nhc : IsPreconnected U\nho : IsOpen U\nhcU : Membership.mem U c\nhm : IsMaxOn (Function.comp Norm.norm f) U c\n‚ä¢ Set.EqOn f (Function.const M (f c)) U","decl":"/-- **Maximum modulus principle** on a connected set. Let `U` be a (pre)connected open set in a\ncomplex normed space.  Let `f : E ‚Üí F` be a function that is complex differentiable on `U`. Suppose\nthat `‚Äñf x‚Äñ` takes its maximum value on `U` at `c ‚àà U`. Then `f x = f c` for all `x ‚àà U`.\n\nTODO: change assumption from `IsMaxOn` to `IsLocalMax`. -/\ntheorem eqOn_of_isPreconnected_of_isMaxOn_norm [StrictConvexSpace ‚Ñù F] {f : M ‚Üí F} {U : Set M}\n    {c : M} (hd : MDifferentiableOn I ùìò(‚ÑÇ, F) f U) (hc : IsPreconnected U) (ho : IsOpen U)\n    (hcU : c ‚àà U) (hm : IsMaxOn (norm ‚àò f) U c) : EqOn f (const M (f c)) U := fun x hx =>\n  have H‚ÇÅ : ‚Äñf x‚Äñ = ‚Äñf c‚Äñ := hd.norm_eqOn_of_isPreconnected_of_isMaxOn hc ho hcU hm hx\n  -- TODO: Add `MDifferentiableOn.add` etc; does it mean importing `Manifold.Algebra.Monoid`?\n  have hd' : MDifferentiableOn I ùìò(‚ÑÇ, F) (f ¬∑ + f c) U := fun x hx ‚Ü¶\n    ‚ü®(hd x hx).1.add continuousWithinAt_const, (hd x hx).2.add_const _‚ü©\n  have H‚ÇÇ : ‚Äñf x + f c‚Äñ = ‚Äñf c + f c‚Äñ :=\n    hd'.norm_eqOn_of_isPreconnected_of_isMaxOn hc ho hcU hm.norm_add_self hx\n  eq_of_norm_eq_of_norm_add_eq H‚ÇÅ <| by simp only [H‚ÇÇ, SameRay.rfl.norm_add, H‚ÇÅ, Function.const]\n\n"}
{"name":"MDifferentiableOn.apply_eq_of_isPreconnected_isCompact_isOpen","module":"Mathlib.Geometry.Manifold.Complex","initialProofState":"E : Type u_1\ninst‚úù‚Å∏ : NormedAddCommGroup E\ninst‚úù‚Å∑ : NormedSpace Complex E\nF : Type u_2\ninst‚úù‚Å∂ : NormedAddCommGroup F\ninst‚úù‚Åµ : NormedSpace Complex F\nH : Type u_3\ninst‚úù‚Å¥ : TopologicalSpace H\nI : ModelWithCorners Complex E H\ninst‚úù¬≥ : I.Boundaryless\nM : Type u_4\ninst‚úù¬≤ : TopologicalSpace M\ninst‚úù¬π : ChartedSpace H M\ninst‚úù : IsManifold I 1 M\nf : M ‚Üí F\nU : Set M\na b : M\nhd : MDifferentiableOn I (modelWithCornersSelf Complex F) f U\nhpc : IsPreconnected U\nhc : IsCompact U\nho : IsOpen U\nha : Membership.mem U a\nhb : Membership.mem U b\n‚ä¢ Eq (f a) (f b)","decl":"/-- If a function `f : M ‚Üí F` from a complex manifold to a complex normed space is holomorphic on a\n(pre)connected compact open set, then it is a constant on this set. -/\ntheorem apply_eq_of_isPreconnected_isCompact_isOpen {f : M ‚Üí F} {U : Set M} {a b : M}\n    (hd : MDifferentiableOn I ùìò(‚ÑÇ, F) f U) (hpc : IsPreconnected U) (hc : IsCompact U)\n    (ho : IsOpen U) (ha : a ‚àà U) (hb : b ‚àà U) : f a = f b := by\n  refine ?_\n  -- Subtract `f b` to avoid the assumption `[StrictConvexSpace ‚Ñù F]`\n  wlog hb‚ÇÄ : f b = 0 generalizing f\n  ¬∑ have hd' : MDifferentiableOn I ùìò(‚ÑÇ, F) (f ¬∑ - f b) U := fun x hx ‚Ü¶\n      ‚ü®(hd x hx).1.sub continuousWithinAt_const, (hd x hx).2.sub_const _‚ü©\n    simpa [sub_eq_zero] using this hd' (sub_self _)\n  rcases hc.exists_isMaxOn ‚ü®a, ha‚ü© hd.continuousOn.norm with ‚ü®c, hcU, hc‚ü©\n  have : ‚àÄ x ‚àà U, ‚Äñf x‚Äñ = ‚Äñf c‚Äñ :=\n    norm_eqOn_of_isPreconnected_of_isMaxOn hd hpc ho hcU hc\n  rw [hb‚ÇÄ, ‚Üê norm_eq_zero, this a ha, ‚Üê this b hb, hb‚ÇÄ, norm_zero]\n\n"}
{"name":"MDifferentiable.isLocallyConstant","module":"Mathlib.Geometry.Manifold.Complex","initialProofState":"E : Type u_1\ninst‚úù‚Åπ : NormedAddCommGroup E\ninst‚úù‚Å∏ : NormedSpace Complex E\nF : Type u_2\ninst‚úù‚Å∑ : NormedAddCommGroup F\ninst‚úù‚Å∂ : NormedSpace Complex F\nH : Type u_3\ninst‚úù‚Åµ : TopologicalSpace H\nI : ModelWithCorners Complex E H\ninst‚úù‚Å¥ : I.Boundaryless\nM : Type u_4\ninst‚úù¬≥ : TopologicalSpace M\ninst‚úù¬≤ : ChartedSpace H M\ninst‚úù¬π : IsManifold I 1 M\ninst‚úù : CompactSpace M\nf : M ‚Üí F\nhf : MDifferentiable I (modelWithCornersSelf Complex F) f\n‚ä¢ IsLocallyConstant f","decl":"/-- A holomorphic function on a compact complex manifold is locally constant. -/\nprotected theorem isLocallyConstant {f : M ‚Üí F} (hf : MDifferentiable I ùìò(‚ÑÇ, F) f) :\n    IsLocallyConstant f :=\n  haveI : LocallyConnectedSpace H := I.toHomeomorph.locallyConnectedSpace\n  haveI : LocallyConnectedSpace M := ChartedSpace.locallyConnectedSpace H M\n  IsLocallyConstant.of_constant_on_preconnected_clopens fun _ hpc hclo _a ha _b hb ‚Ü¶\n    hf.mdifferentiableOn.apply_eq_of_isPreconnected_isCompact_isOpen hpc\n      hclo.isClosed.isCompact hclo.isOpen hb ha\n\n"}
{"name":"MDifferentiable.apply_eq_of_compactSpace","module":"Mathlib.Geometry.Manifold.Complex","initialProofState":"E : Type u_1\ninst‚úù¬π‚Å∞ : NormedAddCommGroup E\ninst‚úù‚Åπ : NormedSpace Complex E\nF : Type u_2\ninst‚úù‚Å∏ : NormedAddCommGroup F\ninst‚úù‚Å∑ : NormedSpace Complex F\nH : Type u_3\ninst‚úù‚Å∂ : TopologicalSpace H\nI : ModelWithCorners Complex E H\ninst‚úù‚Åµ : I.Boundaryless\nM : Type u_4\ninst‚úù‚Å¥ : TopologicalSpace M\ninst‚úù¬≥ : ChartedSpace H M\ninst‚úù¬≤ : IsManifold I 1 M\ninst‚úù¬π : CompactSpace M\ninst‚úù : PreconnectedSpace M\nf : M ‚Üí F\nhf : MDifferentiable I (modelWithCornersSelf Complex F) f\na b : M\n‚ä¢ Eq (f a) (f b)","decl":"/-- A holomorphic function on a compact connected complex manifold is constant. -/\ntheorem apply_eq_of_compactSpace [PreconnectedSpace M] {f : M ‚Üí F}\n    (hf : MDifferentiable I ùìò(‚ÑÇ, F) f) (a b : M) : f a = f b :=\n  hf.isLocallyConstant.apply_eq_of_preconnectedSpace _ _\n\n"}
{"name":"MDifferentiable.exists_eq_const_of_compactSpace","module":"Mathlib.Geometry.Manifold.Complex","initialProofState":"E : Type u_1\ninst‚úù¬π‚Å∞ : NormedAddCommGroup E\ninst‚úù‚Åπ : NormedSpace Complex E\nF : Type u_2\ninst‚úù‚Å∏ : NormedAddCommGroup F\ninst‚úù‚Å∑ : NormedSpace Complex F\nH : Type u_3\ninst‚úù‚Å∂ : TopologicalSpace H\nI : ModelWithCorners Complex E H\ninst‚úù‚Åµ : I.Boundaryless\nM : Type u_4\ninst‚úù‚Å¥ : TopologicalSpace M\ninst‚úù¬≥ : ChartedSpace H M\ninst‚úù¬≤ : IsManifold I 1 M\ninst‚úù¬π : CompactSpace M\ninst‚úù : PreconnectedSpace M\nf : M ‚Üí F\nhf : MDifferentiable I (modelWithCornersSelf Complex F) f\n‚ä¢ Exists fun v => Eq f (Function.const M v)","decl":"/-- A holomorphic function on a compact connected complex manifold is the constant function `f ‚â° v`,\nfor some value `v`. -/\ntheorem exists_eq_const_of_compactSpace [PreconnectedSpace M] {f : M ‚Üí F}\n    (hf : MDifferentiable I ùìò(‚ÑÇ, F) f) : ‚àÉ v : F, f = Function.const M v :=\n  hf.isLocallyConstant.exists_eq_const\n\n"}
