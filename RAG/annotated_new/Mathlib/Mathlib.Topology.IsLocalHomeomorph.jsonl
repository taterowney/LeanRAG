{"name":"isLocalHomeomorphOn_iff_isOpenEmbedding_restrict","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\ns : Set X\nf : X ‚Üí Y\n‚ä¢ Iff (IsLocalHomeomorphOn f s) (‚àÄ (x : X), Membership.mem s x ‚Üí Exists fun U => And (Membership.mem (nhds x) U) (Topology.IsOpenEmbedding (U.restrict f)))","decl":"theorem isLocalHomeomorphOn_iff_isOpenEmbedding_restrict {f : X ‚Üí Y} :\n    IsLocalHomeomorphOn f s ‚Üî ‚àÄ x ‚àà s, ‚àÉ U ‚àà ùìù x, IsOpenEmbedding (U.restrict f) := by\n  refine ‚ü®fun h x hx ‚Ü¶ ?_, fun h x hx ‚Ü¶ ?_‚ü©\n  ¬∑ obtain ‚ü®e, hxe, rfl‚ü© := h x hx\n    exact ‚ü®e.source, e.open_source.mem_nhds hxe, e.isOpenEmbedding_restrict‚ü©\n  ¬∑ obtain ‚ü®U, hU, emb‚ü© := h x hx\n    have : IsOpenEmbedding ((interior U).restrict f) := by\n      refine emb.comp ‚ü®.inclusion interior_subset, ?_‚ü©\n      rw [Set.range_inclusion]; exact isOpen_induced isOpen_interior\n    obtain ‚ü®cont, inj, openMap‚ü© := isOpenEmbedding_iff_continuous_injective_isOpenMap.mp this\n    haveI : Nonempty X := ‚ü®x‚ü©\n    exact ‚ü®PartialHomeomorph.ofContinuousOpenRestrict\n      (Set.injOn_iff_injective.mpr inj).toPartialEquiv\n      (continuousOn_iff_continuous_restrict.mpr cont) openMap isOpen_interior,\n      mem_interior_iff_mem_nhds.mpr hU, rfl‚ü©\n\n"}
{"name":"isLocalHomeomorphOn_iff_openEmbedding_restrict","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\ns : Set X\nf : X ‚Üí Y\n‚ä¢ Iff (IsLocalHomeomorphOn f s) (‚àÄ (x : X), Membership.mem s x ‚Üí Exists fun U => And (Membership.mem (nhds x) U) (Topology.IsOpenEmbedding (U.restrict f)))","decl":"@[deprecated (since := \"2024-10-18\")]\nalias isLocalHomeomorphOn_iff_openEmbedding_restrict :=\n  isLocalHomeomorphOn_iff_isOpenEmbedding_restrict\n\n"}
{"name":"IsLocalHomeomorphOn.mk","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\nf : X ‚Üí Y\ns : Set X\nh : ‚àÄ (x : X), Membership.mem s x ‚Üí Exists fun e => And (Membership.mem e.source x) (Set.EqOn f (‚Üëe) e.source)\n‚ä¢ IsLocalHomeomorphOn f s","decl":"/-- Proves that `f` satisfies `IsLocalHomeomorphOn f s`. The condition `h` is weaker than the\ndefinition of `IsLocalHomeomorphOn f s`, since it only requires `e : PartialHomeomorph X Y` to\nagree with `f` on its source `e.source`, as opposed to on the whole space `X`. -/\ntheorem mk (h : ‚àÄ x ‚àà s, ‚àÉ e : PartialHomeomorph X Y, x ‚àà e.source ‚àß Set.EqOn f e e.source) :\n    IsLocalHomeomorphOn f s := by\n  intro x hx\n  obtain ‚ü®e, hx, he‚ü© := h x hx\n  exact\n    ‚ü®{ e with\n        toFun := f\n        map_source' := fun _x hx ‚Ü¶ by rw [he hx]; exact e.map_source' hx\n        left_inv' := fun _x hx ‚Ü¶ by rw [he hx]; exact e.left_inv' hx\n        right_inv' := fun _y hy ‚Ü¶ by rw [he (e.map_target' hy)]; exact e.right_inv' hy\n        continuousOn_toFun := (continuousOn_congr he).mpr e.continuousOn_toFun },\n      hx, rfl‚ü©\n\n"}
{"name":"IsLocalHomeomorphOn.PartialHomeomorph.isLocalHomeomorphOn","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\ne : PartialHomeomorph X Y\n‚ä¢ IsLocalHomeomorphOn (‚Üëe) e.source","decl":"/-- A `PartialHomeomorph` is a local homeomorphism on its source. -/\nlemma PartialHomeomorph.isLocalHomeomorphOn (e : PartialHomeomorph X Y) :\n    IsLocalHomeomorphOn e e.source :=\n  fun _ hx ‚Ü¶ ‚ü®e, hx, rfl‚ü©\n\n"}
{"name":"IsLocalHomeomorphOn.mono","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\nf : X ‚Üí Y\ns t : Set X\nhf : IsLocalHomeomorphOn f t\nhst : HasSubset.Subset s t\n‚ä¢ IsLocalHomeomorphOn f s","decl":"theorem mono {t : Set X} (hf : IsLocalHomeomorphOn f t) (hst : s ‚äÜ t) : IsLocalHomeomorphOn f s :=\n  fun x hx ‚Ü¶ hf x (hst hx)\n\n"}
{"name":"IsLocalHomeomorphOn.of_comp_left","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_3\ninst‚úù¬≤ : TopologicalSpace X\ninst‚úù¬π : TopologicalSpace Y\ninst‚úù : TopologicalSpace Z\ng : Y ‚Üí Z\nf : X ‚Üí Y\ns : Set X\nhgf : IsLocalHomeomorphOn (Function.comp g f) s\nhg : IsLocalHomeomorphOn g (Set.image f s)\ncont : ‚àÄ (x : X), Membership.mem s x ‚Üí ContinuousAt f x\n‚ä¢ IsLocalHomeomorphOn f s","decl":"theorem of_comp_left (hgf : IsLocalHomeomorphOn (g ‚àò f) s) (hg : IsLocalHomeomorphOn g (f '' s))\n    (cont : ‚àÄ x ‚àà s, ContinuousAt f x) : IsLocalHomeomorphOn f s := mk f s fun x hx ‚Ü¶ by\n  obtain ‚ü®g, hxg, rfl‚ü© := hg (f x) ‚ü®x, hx, rfl‚ü©\n  obtain ‚ü®gf, hgf, he‚ü© := hgf x hx\n  refine ‚ü®(gf.restr <| f ‚Åª¬π' g.source).trans g.symm, ‚ü®‚ü®hgf, mem_interior_iff_mem_nhds.mpr\n    ((cont x hx).preimage_mem_nhds <| g.open_source.mem_nhds hxg)‚ü©, he ‚ñ∏ g.map_source hxg‚ü©,\n    fun y hy ‚Ü¶ ?_‚ü©\n  change f y = g.symm (gf y)\n  have : f y ‚àà g.source := by apply interior_subset hy.1.2\n  rw [‚Üê he, g.eq_symm_apply this (by apply g.map_source this), Function.comp_apply]\n\n"}
{"name":"IsLocalHomeomorphOn.of_comp_right","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_3\ninst‚úù¬≤ : TopologicalSpace X\ninst‚úù¬π : TopologicalSpace Y\ninst‚úù : TopologicalSpace Z\ng : Y ‚Üí Z\nf : X ‚Üí Y\ns : Set X\nhgf : IsLocalHomeomorphOn (Function.comp g f) s\nhf : IsLocalHomeomorphOn f s\n‚ä¢ IsLocalHomeomorphOn g (Set.image f s)","decl":"theorem of_comp_right (hgf : IsLocalHomeomorphOn (g ‚àò f) s) (hf : IsLocalHomeomorphOn f s) :\n    IsLocalHomeomorphOn g (f '' s) := mk g _ <| by\n  rintro _ ‚ü®x, hx, rfl‚ü©\n  obtain ‚ü®f, hxf, rfl‚ü© := hf x hx\n  obtain ‚ü®gf, hgf, he‚ü© := hgf x hx\n  refine ‚ü®f.symm.trans gf, ‚ü®f.map_source hxf, ?_‚ü©, fun y hy ‚Ü¶ ?_‚ü©\n  ¬∑ apply (f.left_inv hxf).symm ‚ñ∏ hgf\n  ¬∑ change g y = gf (f.symm y)\n    rw [‚Üê he, Function.comp_apply, f.right_inv hy.1]\n\n"}
{"name":"IsLocalHomeomorphOn.map_nhds_eq","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\nf : X ‚Üí Y\ns : Set X\nhf : IsLocalHomeomorphOn f s\nx : X\nhx : Membership.mem s x\n‚ä¢ Eq (Filter.map f (nhds x)) (nhds (f x))","decl":"theorem map_nhds_eq (hf : IsLocalHomeomorphOn f s) {x : X} (hx : x ‚àà s) : (ùìù x).map f = ùìù (f x) :=\n  let ‚ü®e, hx, he‚ü© := hf x hx\n  he.symm ‚ñ∏ e.map_nhds_eq hx\n\n"}
{"name":"IsLocalHomeomorphOn.continuousAt","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\nf : X ‚Üí Y\ns : Set X\nhf : IsLocalHomeomorphOn f s\nx : X\nhx : Membership.mem s x\n‚ä¢ ContinuousAt f x","decl":"protected theorem continuousAt (hf : IsLocalHomeomorphOn f s) {x : X} (hx : x ‚àà s) :\n    ContinuousAt f x :=\n  (hf.map_nhds_eq hx).le\n\n"}
{"name":"IsLocalHomeomorphOn.continuousOn","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\nf : X ‚Üí Y\ns : Set X\nhf : IsLocalHomeomorphOn f s\n‚ä¢ ContinuousOn f s","decl":"protected theorem continuousOn (hf : IsLocalHomeomorphOn f s) : ContinuousOn f s :=\n  continuousOn_of_forall_continuousAt fun _x ‚Ü¶ hf.continuousAt\n\n"}
{"name":"IsLocalHomeomorphOn.comp","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_3\ninst‚úù¬≤ : TopologicalSpace X\ninst‚úù¬π : TopologicalSpace Y\ninst‚úù : TopologicalSpace Z\ng : Y ‚Üí Z\nf : X ‚Üí Y\ns : Set X\nt : Set Y\nhg : IsLocalHomeomorphOn g t\nhf : IsLocalHomeomorphOn f s\nh : Set.MapsTo f s t\n‚ä¢ IsLocalHomeomorphOn (Function.comp g f) s","decl":"protected theorem comp (hg : IsLocalHomeomorphOn g t) (hf : IsLocalHomeomorphOn f s)\n    (h : Set.MapsTo f s t) : IsLocalHomeomorphOn (g ‚àò f) s := by\n  intro x hx\n  obtain ‚ü®eg, hxg, rfl‚ü© := hg (f x) (h hx)\n  obtain ‚ü®ef, hxf, rfl‚ü© := hf x hx\n  exact ‚ü®ef.trans eg, ‚ü®hxf, hxg‚ü©, rfl‚ü©\n\n"}
{"name":"Homeomorph.isLocalHomeomorph","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\nf : Homeomorph X Y\n‚ä¢ IsLocalHomeomorph ‚áëf","decl":"theorem Homeomorph.isLocalHomeomorph (f : X ‚âÉ‚Çú Y) : IsLocalHomeomorph f :=\n  fun _ ‚Ü¶ ‚ü®f.toPartialHomeomorph, trivial, rfl‚ü©\n\n"}
{"name":"isLocalHomeomorph_iff_isLocalHomeomorphOn_univ","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\nf : X ‚Üí Y\n‚ä¢ Iff (IsLocalHomeomorph f) (IsLocalHomeomorphOn f Set.univ)","decl":"theorem isLocalHomeomorph_iff_isLocalHomeomorphOn_univ :\n    IsLocalHomeomorph f ‚Üî IsLocalHomeomorphOn f Set.univ :=\n  ‚ü®fun h x _ ‚Ü¶ h x, fun h x ‚Ü¶ h x trivial‚ü©\n\n"}
{"name":"IsLocalHomeomorph.isLocalHomeomorphOn","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\nf : X ‚Üí Y\ns : Set X\nhf : IsLocalHomeomorph f\n‚ä¢ IsLocalHomeomorphOn f s","decl":"protected theorem IsLocalHomeomorph.isLocalHomeomorphOn (hf : IsLocalHomeomorph f) :\n    IsLocalHomeomorphOn f s := fun x _ ‚Ü¶ hf x\n\n"}
{"name":"isLocalHomeomorph_iff_isOpenEmbedding_restrict","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\nf : X ‚Üí Y\n‚ä¢ Iff (IsLocalHomeomorph f) (‚àÄ (x : X), Exists fun U => And (Membership.mem (nhds x) U) (Topology.IsOpenEmbedding (U.restrict f)))","decl":"theorem isLocalHomeomorph_iff_isOpenEmbedding_restrict {f : X ‚Üí Y} :\n    IsLocalHomeomorph f ‚Üî ‚àÄ x : X, ‚àÉ U ‚àà ùìù x, IsOpenEmbedding (U.restrict f) := by\n  simp_rw [isLocalHomeomorph_iff_isLocalHomeomorphOn_univ,\n    isLocalHomeomorphOn_iff_isOpenEmbedding_restrict, imp_iff_right (Set.mem_univ _)]\n\n"}
{"name":"isLocalHomeomorph_iff_openEmbedding_restrict","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\nf : X ‚Üí Y\n‚ä¢ Iff (IsLocalHomeomorph f) (‚àÄ (x : X), Exists fun U => And (Membership.mem (nhds x) U) (Topology.IsOpenEmbedding (U.restrict f)))","decl":"@[deprecated (since := \"2024-10-18\")]\nalias isLocalHomeomorph_iff_openEmbedding_restrict := isLocalHomeomorph_iff_isOpenEmbedding_restrict\n\n"}
{"name":"Topology.IsOpenEmbedding.isLocalHomeomorph","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\nf : X ‚Üí Y\nhf : Topology.IsOpenEmbedding f\n‚ä¢ IsLocalHomeomorph f","decl":"theorem Topology.IsOpenEmbedding.isLocalHomeomorph (hf : IsOpenEmbedding f) : IsLocalHomeomorph f :=\n  isLocalHomeomorph_iff_isOpenEmbedding_restrict.mpr fun _ ‚Ü¶\n    ‚ü®_, Filter.univ_mem, hf.comp (Homeomorph.Set.univ X).isOpenEmbedding‚ü©\n\n"}
{"name":"OpenEmbedding.isLocalHomeomorph","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\nf : X ‚Üí Y\nhf : Topology.IsOpenEmbedding f\n‚ä¢ IsLocalHomeomorph f","decl":"@[deprecated (since := \"2024-10-18\")]\nalias OpenEmbedding.isLocalHomeomorph := IsOpenEmbedding.isLocalHomeomorph\n\n"}
{"name":"IsLocalHomeomorph.mk","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\nf : X ‚Üí Y\nh : ‚àÄ (x : X), Exists fun e => And (Membership.mem e.source x) (Set.EqOn f (‚Üëe) e.source)\n‚ä¢ IsLocalHomeomorph f","decl":"/-- Proves that `f` satisfies `IsLocalHomeomorph f`. The condition `h` is weaker than the\ndefinition of `IsLocalHomeomorph f`, since it only requires `e : PartialHomeomorph X Y` to\nagree with `f` on its source `e.source`, as opposed to on the whole space `X`. -/\ntheorem mk (h : ‚àÄ x : X, ‚àÉ e : PartialHomeomorph X Y, x ‚àà e.source ‚àß Set.EqOn f e e.source) :\n    IsLocalHomeomorph f :=\n  isLocalHomeomorph_iff_isLocalHomeomorphOn_univ.mpr\n    (IsLocalHomeomorphOn.mk f Set.univ fun x _hx ‚Ü¶ h x)\n\n"}
{"name":"IsLocalHomeomorph.Homeomorph.isLocalHomeomorph","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\nh : Homeomorph X Y\n‚ä¢ IsLocalHomeomorph ‚áëh","decl":"/-- A homeomorphism is a local homeomorphism. -/\nlemma Homeomorph.isLocalHomeomorph (h : X ‚âÉ‚Çú Y) : IsLocalHomeomorph h :=\n  fun _ ‚Ü¶ ‚ü®h.toPartialHomeomorph, trivial, rfl‚ü©\n\n"}
{"name":"IsLocalHomeomorph.isLocallyInjective","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\nf : X ‚Üí Y\nhf : IsLocalHomeomorph f\n‚ä¢ IsLocallyInjective f","decl":"lemma isLocallyInjective (hf : IsLocalHomeomorph f) : IsLocallyInjective f :=\n  fun x ‚Ü¶ by obtain ‚ü®f, hx, rfl‚ü© := hf x; exact ‚ü®f.source, f.open_source, hx, f.injOn‚ü©\n\n"}
{"name":"IsLocalHomeomorph.of_comp","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_3\ninst‚úù¬≤ : TopologicalSpace X\ninst‚úù¬π : TopologicalSpace Y\ninst‚úù : TopologicalSpace Z\ng : Y ‚Üí Z\nf : X ‚Üí Y\nhgf : IsLocalHomeomorph (Function.comp g f)\nhg : IsLocalHomeomorph g\ncont : Continuous f\n‚ä¢ IsLocalHomeomorph f","decl":"theorem of_comp (hgf : IsLocalHomeomorph (g ‚àò f)) (hg : IsLocalHomeomorph g)\n    (cont : Continuous f) : IsLocalHomeomorph f :=\n  isLocalHomeomorph_iff_isLocalHomeomorphOn_univ.mpr <|\n    hgf.isLocalHomeomorphOn.of_comp_left hg.isLocalHomeomorphOn fun _ _ ‚Ü¶ cont.continuousAt\n\n"}
{"name":"IsLocalHomeomorph.map_nhds_eq","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\nf : X ‚Üí Y\nhf : IsLocalHomeomorph f\nx : X\n‚ä¢ Eq (Filter.map f (nhds x)) (nhds (f x))","decl":"theorem map_nhds_eq (hf : IsLocalHomeomorph f) (x : X) : (ùìù x).map f = ùìù (f x) :=\n  hf.isLocalHomeomorphOn.map_nhds_eq (Set.mem_univ x)\n\n"}
{"name":"IsLocalHomeomorph.continuous","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\nf : X ‚Üí Y\nhf : IsLocalHomeomorph f\n‚ä¢ Continuous f","decl":"/-- A local homeomorphism is continuous. -/\nprotected theorem continuous (hf : IsLocalHomeomorph f) : Continuous f :=\n  continuous_iff_continuousOn_univ.mpr hf.isLocalHomeomorphOn.continuousOn\n\n"}
{"name":"IsLocalHomeomorph.isOpenMap","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\nf : X ‚Üí Y\nhf : IsLocalHomeomorph f\n‚ä¢ IsOpenMap f","decl":"/-- A local homeomorphism is an open map. -/\nprotected theorem isOpenMap (hf : IsLocalHomeomorph f) : IsOpenMap f :=\n  IsOpenMap.of_nhds_le fun x ‚Ü¶ ge_of_eq (hf.map_nhds_eq x)\n\n"}
{"name":"IsLocalHomeomorph.comp","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_3\ninst‚úù¬≤ : TopologicalSpace X\ninst‚úù¬π : TopologicalSpace Y\ninst‚úù : TopologicalSpace Z\ng : Y ‚Üí Z\nf : X ‚Üí Y\nhg : IsLocalHomeomorph g\nhf : IsLocalHomeomorph f\n‚ä¢ IsLocalHomeomorph (Function.comp g f)","decl":"/-- The composition of local homeomorphisms is a local homeomorphism. -/\nprotected theorem comp (hg : IsLocalHomeomorph g) (hf : IsLocalHomeomorph f) :\n    IsLocalHomeomorph (g ‚àò f) :=\n  isLocalHomeomorph_iff_isLocalHomeomorphOn_univ.mpr\n    (hg.isLocalHomeomorphOn.comp hf.isLocalHomeomorphOn (Set.univ.mapsTo_univ f))\n\n"}
{"name":"IsLocalHomeomorph.isOpenEmbedding_of_injective","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\nf : X ‚Üí Y\nhf : IsLocalHomeomorph f\nhi : Function.Injective f\n‚ä¢ Topology.IsOpenEmbedding f","decl":"/-- An injective local homeomorphism is an open embedding. -/\ntheorem isOpenEmbedding_of_injective (hf : IsLocalHomeomorph f) (hi : f.Injective) :\n    IsOpenEmbedding f :=\n  .of_continuous_injective_isOpenMap hf.continuous hi hf.isOpenMap\n\n"}
{"name":"IsLocalHomeomorph.openEmbedding_of_injective","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\nf : X ‚Üí Y\nhf : IsLocalHomeomorph f\nhi : Function.Injective f\n‚ä¢ Topology.IsOpenEmbedding f","decl":"@[deprecated (since := \"2024-10-18\")]\nalias openEmbedding_of_injective := isOpenEmbedding_of_injective\n\n"}
{"name":"IsLocalHomeomorph.isOpenEmbedding_of_comp","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_3\ninst‚úù¬≤ : TopologicalSpace X\ninst‚úù¬π : TopologicalSpace Y\ninst‚úù : TopologicalSpace Z\ng : Y ‚Üí Z\nf : X ‚Üí Y\nhf : IsLocalHomeomorph g\nhgf : Topology.IsOpenEmbedding (Function.comp g f)\ncont : Continuous f\n‚ä¢ Topology.IsOpenEmbedding f","decl":"/-- Continuous local sections of a local homeomorphism are open embeddings. -/\ntheorem isOpenEmbedding_of_comp (hf : IsLocalHomeomorph g) (hgf : IsOpenEmbedding (g ‚àò f))\n    (cont : Continuous f) : IsOpenEmbedding f :=\n  (hgf.isLocalHomeomorph.of_comp hf cont).isOpenEmbedding_of_injective hgf.injective.of_comp\n\n"}
{"name":"IsLocalHomeomorph.openEmbedding_of_comp","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_3\ninst‚úù¬≤ : TopologicalSpace X\ninst‚úù¬π : TopologicalSpace Y\ninst‚úù : TopologicalSpace Z\ng : Y ‚Üí Z\nf : X ‚Üí Y\nhf : IsLocalHomeomorph g\nhgf : Topology.IsOpenEmbedding (Function.comp g f)\ncont : Continuous f\n‚ä¢ Topology.IsOpenEmbedding f","decl":"@[deprecated (since := \"2024-10-18\")]\nalias openEmbedding_of_comp := isOpenEmbedding_of_comp\n\n"}
{"name":"IsLocalHomeomorph.isTopologicalBasis","module":"Mathlib.Topology.IsLocalHomeomorph","initialProofState":"X : Type u_1\nY : Type u_2\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace Y\nf : X ‚Üí Y\nhf : IsLocalHomeomorph f\n‚ä¢ TopologicalSpace.IsTopologicalBasis (setOf fun U => Exists fun V => And (IsOpen V) (Exists fun s => And (Eq (Function.comp f ‚áës) Subtype.val) (Eq (Set.range ‚áës) U)))","decl":"open TopologicalSpace in\n/-- Ranges of continuous local sections of a local homeomorphism\nform a basis of the source space. -/\ntheorem isTopologicalBasis (hf : IsLocalHomeomorph f) : IsTopologicalBasis\n    {U : Set X | ‚àÉ V : Set Y, IsOpen V ‚àß ‚àÉ s : C(V,X), f ‚àò s = (‚Üë) ‚àß Set.range s = U} := by\n  refine isTopologicalBasis_of_isOpen_of_nhds ?_ fun x U hx hU ‚Ü¶ ?_\n  ¬∑ rintro _ ‚ü®U, hU, s, hs, rfl‚ü©\n    refine (isOpenEmbedding_of_comp hf (hs ‚ñ∏ ‚ü®IsEmbedding.subtypeVal, ?_‚ü©)\n      s.continuous).isOpen_range\n    rwa [Subtype.range_val]\n  ¬∑ obtain ‚ü®f, hxf, rfl‚ü© := hf x\n    refine ‚ü®f.source ‚à© U, ‚ü®f.target ‚à© f.symm ‚Åª¬π' U, f.symm.isOpen_inter_preimage hU,\n      ‚ü®_, continuousOn_iff_continuous_restrict.mp (f.continuousOn_invFun.mono fun _ h ‚Ü¶ h.1)‚ü©,\n      ?_, (Set.range_restrict _ _).trans ?_‚ü©, ‚ü®hxf, hx‚ü©, fun _ h ‚Ü¶ h.2‚ü©\n    ¬∑ ext y; exact f.right_inv y.2.1\n    ¬∑ apply (f.symm_image_target_inter_eq _).trans\n      rw [Set.preimage_inter, ‚Üê Set.inter_assoc, Set.inter_eq_self_of_subset_left\n        f.source_preimage_target, f.source_inter_preimage_inv_preimage]\n\n"}
