{"name":"Rat.sqrt_eq","module":"Mathlib.Data.Rat.Sqrt","initialProofState":"q : Rat\n⊢ Eq (Rat.sqrt (HMul.hMul q q)) (abs q)","decl":"theorem sqrt_eq (q : ℚ) : Rat.sqrt (q * q) = |q| := by\n  rw [sqrt, mul_self_num, mul_self_den, Int.sqrt_eq, Nat.sqrt_eq, abs_def, divInt_ofNat]\n\n"}
{"name":"Rat.exists_mul_self","module":"Mathlib.Data.Rat.Sqrt","initialProofState":"x : Rat\n⊢ Iff (Exists fun q => Eq (HMul.hMul q q) x) (Eq (HMul.hMul (Rat.sqrt x) (Rat.sqrt x)) x)","decl":"theorem exists_mul_self (x : ℚ) : (∃ q, q * q = x) ↔ Rat.sqrt x * Rat.sqrt x = x :=\n  ⟨fun ⟨n, hn⟩ => by rw [← hn, sqrt_eq, abs_mul_abs_self], fun h => ⟨Rat.sqrt x, h⟩⟩\n\n"}
{"name":"Rat.sqrt_nonneg","module":"Mathlib.Data.Rat.Sqrt","initialProofState":"q : Rat\n⊢ LE.le 0 (Rat.sqrt q)","decl":"lemma sqrt_nonneg (q : ℚ) : 0 ≤ Rat.sqrt q := mkRat_nonneg (Int.sqrt_nonneg _) _\n\n"}
{"name":"Rat.sqrt_intCast","module":"Mathlib.Data.Rat.Sqrt","initialProofState":"z : Int\n⊢ Eq (Rat.sqrt ↑z) ↑(Int.sqrt z)","decl":"@[simp, norm_cast]\ntheorem sqrt_intCast (z : ℤ) : Rat.sqrt (z : ℚ) = Int.sqrt z := by\n  simp only [sqrt, num_intCast, den_intCast, Nat.sqrt_one, mkRat_one]\n\n"}
{"name":"Rat.sqrt_natCast","module":"Mathlib.Data.Rat.Sqrt","initialProofState":"n : Nat\n⊢ Eq (Rat.sqrt ↑n) ↑n.sqrt","decl":"@[simp, norm_cast]\ntheorem sqrt_natCast (n : ℕ) : Rat.sqrt (n : ℚ) = Nat.sqrt n := by\n  rw [← Int.cast_natCast, sqrt_intCast, Int.sqrt_natCast, Int.cast_natCast]\n\n"}
{"name":"Rat.sqrt_ofNat","module":"Mathlib.Data.Rat.Sqrt","initialProofState":"n : Nat\n⊢ Eq (Rat.sqrt (OfNat.ofNat n)) ↑(Nat.sqrt (OfNat.ofNat n))","decl":"@[simp]\ntheorem sqrt_ofNat (n : ℕ) : Rat.sqrt (ofNat(n) : ℚ) = Nat.sqrt (OfNat.ofNat n) :=\n  sqrt_natCast _\n\n"}
