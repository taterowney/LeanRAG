{"name":"padicValRat_two_harmonic","module":"Mathlib.NumberTheory.Harmonic.Int","initialProofState":"n : Nat\n⊢ Eq (padicValRat 2 (harmonic n)) (Neg.neg ↑(Nat.log 2 n))","decl":"/-- The 2-adic valuation of the n-th harmonic number is the negative of the logarithm\n    of n. -/\ntheorem padicValRat_two_harmonic (n : ℕ) : padicValRat 2 (harmonic n) = -Nat.log 2 n := by\n  induction' n with n ih\n  · simp\n  · rcases eq_or_ne n 0 with rfl | hn\n    · simp\n    rw [harmonic_succ]\n    have key : padicValRat 2 (harmonic n) ≠ padicValRat 2 (↑(n + 1))⁻¹ := by\n      rw [ih, padicValRat.inv, padicValRat.of_nat, Ne, neg_inj, Nat.cast_inj]\n      exact Nat.log_ne_padicValNat_succ hn\n    rw [padicValRat.add_eq_min (harmonic_succ n ▸ (harmonic_pos n.succ_ne_zero).ne')\n        (harmonic_pos hn).ne' (inv_ne_zero (Nat.cast_ne_zero.mpr n.succ_ne_zero)) key, ih,\n        padicValRat.inv, padicValRat.of_nat, min_neg_neg, neg_inj, ← Nat.cast_max, Nat.cast_inj]\n    exact Nat.max_log_padicValNat_succ_eq_log_succ n\n\n"}
{"name":"padicNorm_two_harmonic","module":"Mathlib.NumberTheory.Harmonic.Int","initialProofState":"n : Nat\nhn : Ne n 0\n⊢ Eq (Norm.norm ↑(harmonic n)) (HPow.hPow 2 (Nat.log 2 n))","decl":"/-- The 2-adic norm of the n-th harmonic number is 2 raised to the logarithm of n in base 2. -/\nlemma padicNorm_two_harmonic {n : ℕ} (hn : n ≠ 0) :\n    ‖(harmonic n : ℚ_[2])‖ = 2 ^ (Nat.log 2 n) := by\n  rw [padicNormE.eq_padicNorm, padicNorm.eq_zpow_of_nonzero (harmonic_pos hn).ne',\n    padicValRat_two_harmonic, neg_neg, zpow_natCast, Rat.cast_pow, Rat.cast_natCast, Nat.cast_ofNat]\n\n"}
{"name":"harmonic_not_int","module":"Mathlib.NumberTheory.Harmonic.Int","initialProofState":"n : Nat\nh : LE.le 2 n\n⊢ Not (Eq (harmonic n).isInt Bool.true)","decl":"/-- The n-th harmonic number is not an integer for n ≥ 2. -/\ntheorem harmonic_not_int {n : ℕ} (h : 2 ≤ n) : ¬ (harmonic n).isInt := by\n  apply padicNorm.not_int_of_not_padic_int 2\n  rw [padicNorm.eq_zpow_of_nonzero (harmonic_pos (ne_zero_of_lt h)).ne',\n      padicValRat_two_harmonic, neg_neg, zpow_natCast]\n  exact one_lt_pow₀ one_lt_two (Nat.log_pos one_lt_two h).ne'\n"}
