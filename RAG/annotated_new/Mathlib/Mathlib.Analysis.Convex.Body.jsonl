{"name":"ConvexBody.nonempty'","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_2\ninst✝² : TopologicalSpace V\ninst✝¹ : AddCommMonoid V\ninst✝ : SMul Real V\nself : ConvexBody V\n⊢ self.carrier.Nonempty","decl":"/-- Let `V` be a real topological vector space. A subset of `V` is a convex body if and only if\nit is convex, compact, and nonempty.\n-/\nstructure ConvexBody (V : Type*) [TopologicalSpace V] [AddCommMonoid V] [SMul ℝ V] where\n  /-- The **carrier set** underlying a convex body: the set of points contained in it -/\n  carrier : Set V\n  /-- A convex body has convex carrier set -/\n  convex' : Convex ℝ carrier\n  /-- A convex body has compact carrier set -/\n  isCompact' : IsCompact carrier\n  /-- A convex body has non-empty carrier set -/\n  nonempty' : carrier.Nonempty\n\n"}
{"name":"ConvexBody.mk.inj","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_2\ninst✝² : TopologicalSpace V\ninst✝¹ : AddCommMonoid V\ninst✝ : SMul Real V\ncarrier✝ : Set V\nconvex'✝ : Convex Real carrier✝\nisCompact'✝ : IsCompact carrier✝\nnonempty'✝ : carrier✝.Nonempty\ncarrier : Set V\nconvex' : Convex Real carrier\nisCompact' : IsCompact carrier\nnonempty' : carrier.Nonempty\nx✝ : Eq { carrier := carrier✝, convex' := convex'✝, isCompact' := isCompact'✝, nonempty' := nonempty'✝ } { carrier := carrier, convex' := convex', isCompact' := isCompact', nonempty' := nonempty' }\n⊢ Eq carrier✝ carrier","decl":"/-- Let `V` be a real topological vector space. A subset of `V` is a convex body if and only if\nit is convex, compact, and nonempty.\n-/\nstructure ConvexBody (V : Type*) [TopologicalSpace V] [AddCommMonoid V] [SMul ℝ V] where\n  /-- The **carrier set** underlying a convex body: the set of points contained in it -/\n  carrier : Set V\n  /-- A convex body has convex carrier set -/\n  convex' : Convex ℝ carrier\n  /-- A convex body has compact carrier set -/\n  isCompact' : IsCompact carrier\n  /-- A convex body has non-empty carrier set -/\n  nonempty' : carrier.Nonempty\n\n"}
{"name":"ConvexBody.mk.sizeOf_spec","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_2\ninst✝³ : TopologicalSpace V\ninst✝² : AddCommMonoid V\ninst✝¹ : SMul Real V\ninst✝ : SizeOf V\ncarrier : Set V\nconvex' : Convex Real carrier\nisCompact' : IsCompact carrier\nnonempty' : carrier.Nonempty\n⊢ Eq (SizeOf.sizeOf { carrier := carrier, convex' := convex', isCompact' := isCompact', nonempty' := nonempty' }) (HAdd.hAdd 1 (SizeOf.sizeOf nonempty'))","decl":"/-- Let `V` be a real topological vector space. A subset of `V` is a convex body if and only if\nit is convex, compact, and nonempty.\n-/\nstructure ConvexBody (V : Type*) [TopologicalSpace V] [AddCommMonoid V] [SMul ℝ V] where\n  /-- The **carrier set** underlying a convex body: the set of points contained in it -/\n  carrier : Set V\n  /-- A convex body has convex carrier set -/\n  convex' : Convex ℝ carrier\n  /-- A convex body has compact carrier set -/\n  isCompact' : IsCompact carrier\n  /-- A convex body has non-empty carrier set -/\n  nonempty' : carrier.Nonempty\n\n"}
{"name":"ConvexBody.mk.injEq","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_2\ninst✝² : TopologicalSpace V\ninst✝¹ : AddCommMonoid V\ninst✝ : SMul Real V\ncarrier✝ : Set V\nconvex'✝ : Convex Real carrier✝\nisCompact'✝ : IsCompact carrier✝\nnonempty'✝ : carrier✝.Nonempty\ncarrier : Set V\nconvex' : Convex Real carrier\nisCompact' : IsCompact carrier\nnonempty' : carrier.Nonempty\n⊢ Eq (Eq { carrier := carrier✝, convex' := convex'✝, isCompact' := isCompact'✝, nonempty' := nonempty'✝ } { carrier := carrier, convex' := convex', isCompact' := isCompact', nonempty' := nonempty' }) (Eq carrier✝ carrier)","decl":"/-- Let `V` be a real topological vector space. A subset of `V` is a convex body if and only if\nit is convex, compact, and nonempty.\n-/\nstructure ConvexBody (V : Type*) [TopologicalSpace V] [AddCommMonoid V] [SMul ℝ V] where\n  /-- The **carrier set** underlying a convex body: the set of points contained in it -/\n  carrier : Set V\n  /-- A convex body has convex carrier set -/\n  convex' : Convex ℝ carrier\n  /-- A convex body has compact carrier set -/\n  isCompact' : IsCompact carrier\n  /-- A convex body has non-empty carrier set -/\n  nonempty' : carrier.Nonempty\n\n"}
{"name":"ConvexBody.convex'","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_2\ninst✝² : TopologicalSpace V\ninst✝¹ : AddCommMonoid V\ninst✝ : SMul Real V\nself : ConvexBody V\n⊢ Convex Real self.carrier","decl":"/-- Let `V` be a real topological vector space. A subset of `V` is a convex body if and only if\nit is convex, compact, and nonempty.\n-/\nstructure ConvexBody (V : Type*) [TopologicalSpace V] [AddCommMonoid V] [SMul ℝ V] where\n  /-- The **carrier set** underlying a convex body: the set of points contained in it -/\n  carrier : Set V\n  /-- A convex body has convex carrier set -/\n  convex' : Convex ℝ carrier\n  /-- A convex body has compact carrier set -/\n  isCompact' : IsCompact carrier\n  /-- A convex body has non-empty carrier set -/\n  nonempty' : carrier.Nonempty\n\n"}
{"name":"ConvexBody.isCompact'","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_2\ninst✝² : TopologicalSpace V\ninst✝¹ : AddCommMonoid V\ninst✝ : SMul Real V\nself : ConvexBody V\n⊢ IsCompact self.carrier","decl":"/-- Let `V` be a real topological vector space. A subset of `V` is a convex body if and only if\nit is convex, compact, and nonempty.\n-/\nstructure ConvexBody (V : Type*) [TopologicalSpace V] [AddCommMonoid V] [SMul ℝ V] where\n  /-- The **carrier set** underlying a convex body: the set of points contained in it -/\n  carrier : Set V\n  /-- A convex body has convex carrier set -/\n  convex' : Convex ℝ carrier\n  /-- A convex body has compact carrier set -/\n  isCompact' : IsCompact carrier\n  /-- A convex body has non-empty carrier set -/\n  nonempty' : carrier.Nonempty\n\n"}
{"name":"ConvexBody.convex","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_1\ninst✝² : TopologicalSpace V\ninst✝¹ : AddCommGroup V\ninst✝ : Module Real V\nK : ConvexBody V\n⊢ Convex Real ↑K","decl":"protected theorem convex (K : ConvexBody V) : Convex ℝ (K : Set V) :=\n  K.convex'\n\n"}
{"name":"ConvexBody.isCompact","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_1\ninst✝² : TopologicalSpace V\ninst✝¹ : AddCommGroup V\ninst✝ : Module Real V\nK : ConvexBody V\n⊢ IsCompact ↑K","decl":"protected theorem isCompact (K : ConvexBody V) : IsCompact (K : Set V) :=\n  K.isCompact'\n\n"}
{"name":"ConvexBody.isClosed","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_1\ninst✝³ : TopologicalSpace V\ninst✝² : AddCommGroup V\ninst✝¹ : Module Real V\ninst✝ : T2Space V\nK : ConvexBody V\n⊢ IsClosed ↑K","decl":"protected theorem isClosed [T2Space V] (K : ConvexBody V) : IsClosed (K : Set V) :=\n  K.isCompact.isClosed\n\n"}
{"name":"ConvexBody.nonempty","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_1\ninst✝² : TopologicalSpace V\ninst✝¹ : AddCommGroup V\ninst✝ : Module Real V\nK : ConvexBody V\n⊢ (↑K).Nonempty","decl":"protected theorem nonempty (K : ConvexBody V) : (K : Set V).Nonempty :=\n  K.nonempty'\n\n"}
{"name":"ConvexBody.ext","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_1\ninst✝² : TopologicalSpace V\ninst✝¹ : AddCommGroup V\ninst✝ : Module Real V\nK L : ConvexBody V\nh : Eq ↑K ↑L\n⊢ Eq K L","decl":"@[ext]\nprotected theorem ext {K L : ConvexBody V} (h : (K : Set V) = L) : K = L :=\n  SetLike.ext' h\n\n"}
{"name":"ConvexBody.ext_iff","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_1\ninst✝² : TopologicalSpace V\ninst✝¹ : AddCommGroup V\ninst✝ : Module Real V\nK L : ConvexBody V\n⊢ Iff (Eq K L) (Eq ↑K ↑L)","decl":"@[ext]\nprotected theorem ext {K L : ConvexBody V} (h : (K : Set V) = L) : K = L :=\n  SetLike.ext' h\n\n"}
{"name":"ConvexBody.coe_mk","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_1\ninst✝² : TopologicalSpace V\ninst✝¹ : AddCommGroup V\ninst✝ : Module Real V\ns : Set V\nh₁ : Convex Real s\nh₂ : IsCompact s\nh₃ : s.Nonempty\n⊢ Eq (↑{ carrier := s, convex' := h₁, isCompact' := h₂, nonempty' := h₃ }) s","decl":"@[simp]\ntheorem coe_mk (s : Set V) (h₁ h₂ h₃) : (mk s h₁ h₂ h₃ : Set V) = s :=\n  rfl\n\n"}
{"name":"ConvexBody.zero_mem_of_symmetric","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_1\ninst✝² : TopologicalSpace V\ninst✝¹ : AddCommGroup V\ninst✝ : Module Real V\nK : ConvexBody V\nh_symm : ∀ (x : V), Membership.mem K x → Membership.mem K (Neg.neg x)\n⊢ Membership.mem K 0","decl":"/-- A convex body that is symmetric contains `0`. -/\ntheorem zero_mem_of_symmetric (K : ConvexBody V) (h_symm : ∀ x ∈ K, - x ∈ K) : 0 ∈ K := by\n  obtain ⟨x, hx⟩ := K.nonempty\n  rw [show 0 = (1/2 : ℝ) • x + (1/2 : ℝ) • (- x) by field_simp]\n  apply convex_iff_forall_pos.mp K.convex hx (h_symm x hx)\n  all_goals linarith\n\n"}
{"name":"ConvexBody.coe_zero","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_1\ninst✝² : TopologicalSpace V\ninst✝¹ : AddCommGroup V\ninst✝ : Module Real V\n⊢ Eq (↑0) 0","decl":"@[simp] -- Porting note: add norm_cast; we leave it out for now to reproduce mathlib3 behavior.\ntheorem coe_zero : (↑(0 : ConvexBody V) : Set V) = 0 :=\n  rfl\n\n"}
{"name":"ConvexBody.coe_nsmul","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_1\ninst✝³ : TopologicalSpace V\ninst✝² : AddCommGroup V\ninst✝¹ : Module Real V\ninst✝ : ContinuousAdd V\nn : Nat\nK : ConvexBody V\n⊢ Eq (↑(HSMul.hSMul n K)) (HSMul.hSMul n ↑K)","decl":"theorem coe_nsmul : ∀ (n : ℕ) (K : ConvexBody V), ↑(n • K) = n • (K : Set V)\n  | 0, _ => rfl\n  | (n + 1), K => congr_arg₂ (Set.image2 (· + ·)) (coe_nsmul n K) rfl\n\n"}
{"name":"ConvexBody.coe_add","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_1\ninst✝³ : TopologicalSpace V\ninst✝² : AddCommGroup V\ninst✝¹ : Module Real V\ninst✝ : ContinuousAdd V\nK L : ConvexBody V\n⊢ Eq (↑(HAdd.hAdd K L)) (HAdd.hAdd ↑K ↑L)","decl":"@[simp] -- Porting note: add norm_cast; we leave it out for now to reproduce mathlib3 behavior.\ntheorem coe_add (K L : ConvexBody V) : (↑(K + L) : Set V) = (K : Set V) + L :=\n  rfl\n\n"}
{"name":"ConvexBody.coe_smul","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_1\ninst✝³ : TopologicalSpace V\ninst✝² : AddCommGroup V\ninst✝¹ : Module Real V\ninst✝ : ContinuousSMul Real V\nc : Real\nK : ConvexBody V\n⊢ Eq (↑(HSMul.hSMul c K)) (HSMul.hSMul c ↑K)","decl":"@[simp] -- Porting note: add norm_cast; we leave it out for now to reproduce mathlib3 behavior.\ntheorem coe_smul (c : ℝ) (K : ConvexBody V) : (↑(c • K) : Set V) = c • (K : Set V) :=\n  rfl\n\n"}
{"name":"ConvexBody.coe_smul'","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_1\ninst✝⁴ : TopologicalSpace V\ninst✝³ : AddCommGroup V\ninst✝² : Module Real V\ninst✝¹ : ContinuousSMul Real V\ninst✝ : ContinuousAdd V\nc : NNReal\nK : ConvexBody V\n⊢ Eq (↑(HSMul.hSMul c K)) (HSMul.hSMul c ↑K)","decl":"@[simp] -- Porting note: add norm_cast; we leave it out for now to reproduce mathlib3 behavior.\ntheorem coe_smul' (c : ℝ≥0) (K : ConvexBody V) : (↑(c • K) : Set V) = c • (K : Set V) :=\n  rfl\n\n"}
{"name":"ConvexBody.smul_le_of_le","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_1\ninst✝⁴ : TopologicalSpace V\ninst✝³ : AddCommGroup V\ninst✝² : Module Real V\ninst✝¹ : ContinuousSMul Real V\ninst✝ : ContinuousAdd V\nK : ConvexBody V\nh_zero : Membership.mem K 0\na b : NNReal\nh : LE.le a b\n⊢ LE.le (HSMul.hSMul a K) (HSMul.hSMul b K)","decl":"theorem smul_le_of_le (K : ConvexBody V) (h_zero : 0 ∈ K) {a b : ℝ≥0} (h : a ≤ b) :\n    a • K ≤ b • K := by\n  rw [← SetLike.coe_subset_coe, coe_smul', coe_smul']\n  obtain rfl | ha := eq_zero_or_pos a\n  · rw [Set.zero_smul_set K.nonempty, Set.zero_subset]\n    exact Set.mem_smul_set.mpr ⟨0, h_zero, smul_zero _⟩\n  · intro x hx\n    obtain ⟨y, hy, rfl⟩ := Set.mem_smul_set.mp hx\n    rw [← Set.mem_inv_smul_set_iff₀ ha.ne', smul_smul]\n    refine Convex.mem_smul_of_zero_mem K.convex h_zero hy (?_ : 1 ≤ a⁻¹ * b)\n    rwa [le_inv_mul_iff₀ ha, mul_one]\n\n"}
{"name":"ConvexBody.isBounded","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_1\ninst✝¹ : SeminormedAddCommGroup V\ninst✝ : NormedSpace Real V\nK : ConvexBody V\n⊢ Bornology.IsBounded ↑K","decl":"protected theorem isBounded : Bornology.IsBounded (K : Set V) :=\n  K.isCompact.isBounded\n\n"}
{"name":"ConvexBody.hausdorffEdist_ne_top","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_1\ninst✝¹ : SeminormedAddCommGroup V\ninst✝ : NormedSpace Real V\nK L : ConvexBody V\n⊢ Ne (EMetric.hausdorffEdist ↑K ↑L) Top.top","decl":"theorem hausdorffEdist_ne_top {K L : ConvexBody V} : EMetric.hausdorffEdist (K : Set V) L ≠ ⊤ := by\n  apply_rules [Metric.hausdorffEdist_ne_top_of_nonempty_of_bounded, ConvexBody.nonempty,\n    ConvexBody.isBounded]\n\n"}
{"name":"ConvexBody.hausdorffDist_coe","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_1\ninst✝¹ : SeminormedAddCommGroup V\ninst✝ : NormedSpace Real V\nK L : ConvexBody V\n⊢ Eq (Metric.hausdorffDist ↑K ↑L) (Dist.dist K L)","decl":"@[simp, norm_cast]\ntheorem hausdorffDist_coe : Metric.hausdorffDist (K : Set V) L = dist K L :=\n  rfl\n\n"}
{"name":"ConvexBody.hausdorffEdist_coe","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_1\ninst✝¹ : SeminormedAddCommGroup V\ninst✝ : NormedSpace Real V\nK L : ConvexBody V\n⊢ Eq (EMetric.hausdorffEdist ↑K ↑L) (EDist.edist K L)","decl":"@[simp, norm_cast]\ntheorem hausdorffEdist_coe : EMetric.hausdorffEdist (K : Set V) L = edist K L := by\n  rw [edist_dist]\n  exact (ENNReal.ofReal_toReal hausdorffEdist_ne_top).symm\n\n"}
{"name":"ConvexBody.iInter_smul_eq_self","module":"Mathlib.Analysis.Convex.Body","initialProofState":"V : Type u_1\ninst✝² : SeminormedAddCommGroup V\ninst✝¹ : NormedSpace Real V\ninst✝ : T2Space V\nu : Nat → NNReal\nK : ConvexBody V\nh_zero : Membership.mem K 0\nhu : Filter.Tendsto u Filter.atTop (nhds 0)\n⊢ Eq (Set.iInter fun n => HSMul.hSMul (HAdd.hAdd 1 ↑(u n)) ↑K) ↑K","decl":"/-- Let `K` be a convex body that contains `0` and let `u n` be a sequence of nonnegative real\nnumbers that tends to `0`. Then the intersection of the dilated bodies `(1 + u n) • K` is equal\nto `K`. -/\ntheorem iInter_smul_eq_self [T2Space V] {u : ℕ → ℝ≥0} (K : ConvexBody V) (h_zero : 0 ∈ K)\n    (hu : Tendsto u atTop (𝓝 0)) :\n    ⋂ n : ℕ, (1 + (u n : ℝ)) • (K : Set V) = K := by\n  ext x\n  refine ⟨fun h => ?_, fun h => ?_⟩\n  · obtain ⟨C, hC_pos, hC_bdd⟩ := K.isBounded.exists_pos_norm_le\n    rw [← K.isClosed.closure_eq, SeminormedAddCommGroup.mem_closure_iff]\n    rw [← NNReal.tendsto_coe, NormedAddCommGroup.tendsto_atTop] at hu\n    intro ε hε\n    obtain ⟨n, hn⟩ := hu (ε / C) (div_pos hε hC_pos)\n    obtain ⟨y, hyK, rfl⟩ := Set.mem_smul_set.mp (Set.mem_iInter.mp h n)\n    refine ⟨y, hyK, ?_⟩\n    rw [show (1 + u n : ℝ) • y - y = (u n : ℝ) • y by rw [add_smul, one_smul, add_sub_cancel_left],\n      norm_smul, Real.norm_eq_abs]\n    specialize hn n le_rfl\n    rw [lt_div_iff₀' hC_pos, mul_comm, NNReal.coe_zero, sub_zero, Real.norm_eq_abs] at hn\n    refine lt_of_le_of_lt ?_ hn\n    exact mul_le_mul_of_nonneg_left (hC_bdd _ hyK) (abs_nonneg _)\n  · refine Set.mem_iInter.mpr (fun n => Convex.mem_smul_of_zero_mem K.convex h_zero h ?_)\n    exact le_add_of_nonneg_right (by positivity)\n\n"}
