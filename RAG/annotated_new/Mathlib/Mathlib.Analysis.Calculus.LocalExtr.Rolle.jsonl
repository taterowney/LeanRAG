{"name":"exists_hasDerivAt_eq_zero","module":"Mathlib.Analysis.Calculus.LocalExtr.Rolle","initialProofState":"f f' : Real → Real\na b : Real\nhab : LT.lt a b\nhfc : ContinuousOn f (Set.Icc a b)\nhfI : Eq (f a) (f b)\nhff' : ∀ (x : Real), Membership.mem (Set.Ioo a b) x → HasDerivAt f (f' x) x\n⊢ Exists fun c => And (Membership.mem (Set.Ioo a b) c) (Eq (f' c) 0)","decl":"/-- **Rolle's Theorem** `HasDerivAt` version -/\ntheorem exists_hasDerivAt_eq_zero (hab : a < b) (hfc : ContinuousOn f (Icc a b)) (hfI : f a = f b)\n    (hff' : ∀ x ∈ Ioo a b, HasDerivAt f (f' x) x) : ∃ c ∈ Ioo a b, f' c = 0 :=\n  let ⟨c, cmem, hc⟩ := exists_isLocalExtr_Ioo hab hfc hfI\n  ⟨c, cmem, hc.hasDerivAt_eq_zero <| hff' c cmem⟩\n\n"}
{"name":"exists_deriv_eq_zero","module":"Mathlib.Analysis.Calculus.LocalExtr.Rolle","initialProofState":"f : Real → Real\na b : Real\nhab : LT.lt a b\nhfc : ContinuousOn f (Set.Icc a b)\nhfI : Eq (f a) (f b)\n⊢ Exists fun c => And (Membership.mem (Set.Ioo a b) c) (Eq (deriv f c) 0)","decl":"/-- **Rolle's Theorem** `deriv` version -/\ntheorem exists_deriv_eq_zero (hab : a < b) (hfc : ContinuousOn f (Icc a b)) (hfI : f a = f b) :\n    ∃ c ∈ Ioo a b, deriv f c = 0 :=\n  let ⟨c, cmem, hc⟩ := exists_isLocalExtr_Ioo hab hfc hfI\n  ⟨c, cmem, hc.deriv_eq_zero⟩\n\n"}
{"name":"exists_hasDerivAt_eq_zero'","module":"Mathlib.Analysis.Calculus.LocalExtr.Rolle","initialProofState":"f f' : Real → Real\na b l : Real\nhab : LT.lt a b\nhfa : Filter.Tendsto f (nhdsWithin a (Set.Ioi a)) (nhds l)\nhfb : Filter.Tendsto f (nhdsWithin b (Set.Iio b)) (nhds l)\nhff' : ∀ (x : Real), Membership.mem (Set.Ioo a b) x → HasDerivAt f (f' x) x\n⊢ Exists fun c => And (Membership.mem (Set.Ioo a b) c) (Eq (f' c) 0)","decl":"/-- **Rolle's Theorem**, a version for a function on an open interval: if `f` has derivative `f'`\non `(a, b)` and has the same limit `l` at `𝓝[>] a` and `𝓝[<] b`, then `f' c = 0`\nfor some `c ∈ (a, b)`. -/\ntheorem exists_hasDerivAt_eq_zero' (hab : a < b) (hfa : Tendsto f (𝓝[>] a) (𝓝 l))\n    (hfb : Tendsto f (𝓝[<] b) (𝓝 l)) (hff' : ∀ x ∈ Ioo a b, HasDerivAt f (f' x) x) :\n    ∃ c ∈ Ioo a b, f' c = 0 :=\n  let ⟨c, cmem, hc⟩ := exists_isLocalExtr_Ioo_of_tendsto hab\n    (fun x hx ↦ (hff' x hx).continuousAt.continuousWithinAt) hfa hfb\n  ⟨c, cmem, hc.hasDerivAt_eq_zero <| hff' c cmem⟩\n\n"}
{"name":"exists_deriv_eq_zero'","module":"Mathlib.Analysis.Calculus.LocalExtr.Rolle","initialProofState":"f : Real → Real\na b l : Real\nhab : LT.lt a b\nhfa : Filter.Tendsto f (nhdsWithin a (Set.Ioi a)) (nhds l)\nhfb : Filter.Tendsto f (nhdsWithin b (Set.Iio b)) (nhds l)\n⊢ Exists fun c => And (Membership.mem (Set.Ioo a b) c) (Eq (deriv f c) 0)","decl":"/-- **Rolle's Theorem**, a version for a function on an open interval: if `f` has the same limit\n`l` at `𝓝[>] a` and `𝓝[<] b`, then `deriv f c = 0` for some `c ∈ (a, b)`. This version\ndoes not require differentiability of `f` because we define `deriv f c = 0` whenever `f` is not\ndifferentiable at `c`. -/\ntheorem exists_deriv_eq_zero' (hab : a < b) (hfa : Tendsto f (𝓝[>] a) (𝓝 l))\n    (hfb : Tendsto f (𝓝[<] b) (𝓝 l)) : ∃ c ∈ Ioo a b, deriv f c = 0 := by\n  by_cases h : ∀ x ∈ Ioo a b, DifferentiableAt ℝ f x\n  · exact exists_hasDerivAt_eq_zero' hab hfa hfb fun x hx => (h x hx).hasDerivAt\n  · obtain ⟨c, hc, hcdiff⟩ : ∃ x ∈ Ioo a b, ¬DifferentiableAt ℝ f x := by\n      push_neg at h; exact h\n    exact ⟨c, hc, deriv_zero_of_not_differentiableAt hcdiff⟩\n"}
