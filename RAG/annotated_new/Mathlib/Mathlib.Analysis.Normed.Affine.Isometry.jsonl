{"name":"AffineIsometry.mk.sizeOf_spec","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝¹³ : NormedField 𝕜\ninst✝¹² : SeminormedAddCommGroup V\ninst✝¹¹ : NormedSpace 𝕜 V\ninst✝¹⁰ : PseudoMetricSpace P\ninst✝⁹ : NormedAddTorsor V P\ninst✝⁸ : SeminormedAddCommGroup V₂\ninst✝⁷ : NormedSpace 𝕜 V₂\ninst✝⁶ : PseudoMetricSpace P₂\ninst✝⁵ : NormedAddTorsor V₂ P₂\ninst✝⁴ : SizeOf 𝕜\ninst✝³ : SizeOf V\ninst✝² : SizeOf V₂\ninst✝¹ : SizeOf P\ninst✝ : SizeOf P₂\ntoAffineMap : AffineMap 𝕜 P P₂\nnorm_map : ∀ (x : V), Eq (Norm.norm (toAffineMap.linear x)) (Norm.norm x)\n⊢ Eq (SizeOf.sizeOf { toAffineMap := toAffineMap, norm_map := norm_map }) (HAdd.hAdd 1 (SizeOf.sizeOf toAffineMap))","decl":"/-- A `𝕜`-affine isometric embedding of one normed add-torsor over a normed `𝕜`-space into\nanother, denoted as `f : P →ᵃⁱ[𝕜] P₂`. -/\nstructure AffineIsometry extends P →ᵃ[𝕜] P₂ where\n  norm_map : ∀ x : V, ‖linear x‖ = ‖x‖\n\n"}
{"name":"AffineIsometry.norm_map","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nself : AffineIsometry 𝕜 P P₂\nx : V\n⊢ Eq (Norm.norm (self.linear x)) (Norm.norm x)","decl":"/-- A `𝕜`-affine isometric embedding of one normed add-torsor over a normed `𝕜`-space into\nanother, denoted as `f : P →ᵃⁱ[𝕜] P₂`. -/\nstructure AffineIsometry extends P →ᵃ[𝕜] P₂ where\n  norm_map : ∀ x : V, ‖linear x‖ = ‖x‖\n\n"}
{"name":"AffineIsometry.mk.injEq","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ntoAffineMap✝ : AffineMap 𝕜 P P₂\nnorm_map✝ : ∀ (x : V), Eq (Norm.norm (toAffineMap✝.linear x)) (Norm.norm x)\ntoAffineMap : AffineMap 𝕜 P P₂\nnorm_map : ∀ (x : V), Eq (Norm.norm (toAffineMap.linear x)) (Norm.norm x)\n⊢ Eq (Eq { toAffineMap := toAffineMap✝, norm_map := norm_map✝ } { toAffineMap := toAffineMap, norm_map := norm_map }) (Eq toAffineMap✝ toAffineMap)","decl":"/-- A `𝕜`-affine isometric embedding of one normed add-torsor over a normed `𝕜`-space into\nanother, denoted as `f : P →ᵃⁱ[𝕜] P₂`. -/\nstructure AffineIsometry extends P →ᵃ[𝕜] P₂ where\n  norm_map : ∀ x : V, ‖linear x‖ = ‖x‖\n\n"}
{"name":"AffineIsometry.mk.inj","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ntoAffineMap✝ : AffineMap 𝕜 P P₂\nnorm_map✝ : ∀ (x : V), Eq (Norm.norm (toAffineMap✝.linear x)) (Norm.norm x)\ntoAffineMap : AffineMap 𝕜 P P₂\nnorm_map : ∀ (x : V), Eq (Norm.norm (toAffineMap.linear x)) (Norm.norm x)\nx✝ : Eq { toAffineMap := toAffineMap✝, norm_map := norm_map✝ } { toAffineMap := toAffineMap, norm_map := norm_map }\n⊢ Eq toAffineMap✝ toAffineMap","decl":"/-- A `𝕜`-affine isometric embedding of one normed add-torsor over a normed `𝕜`-space into\nanother, denoted as `f : P →ᵃⁱ[𝕜] P₂`. -/\nstructure AffineIsometry extends P →ᵃ[𝕜] P₂ where\n  norm_map : ∀ x : V, ‖linear x‖ = ‖x‖\n\n"}
{"name":"AffineIsometry.linear_eq_linearIsometry","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf : AffineIsometry 𝕜 P P₂\n⊢ Eq f.linear f.linearIsometry.toLinearMap","decl":"@[simp]\ntheorem linear_eq_linearIsometry : f.linear = f.linearIsometry.toLinearMap := by\n  ext\n  rfl\n\n"}
{"name":"AffineIsometry.coe_toAffineMap","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf : AffineIsometry 𝕜 P P₂\n⊢ Eq ⇑f.toAffineMap ⇑f","decl":"@[simp]\ntheorem coe_toAffineMap : ⇑f.toAffineMap = f := by\n  rfl\n\n"}
{"name":"AffineIsometry.toAffineMap_injective","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\n⊢ Function.Injective AffineIsometry.toAffineMap","decl":"theorem toAffineMap_injective : Injective (toAffineMap : (P →ᵃⁱ[𝕜] P₂) → P →ᵃ[𝕜] P₂) := by\n  rintro ⟨f, _⟩ ⟨g, _⟩ rfl\n  rfl\n\n"}
{"name":"AffineIsometry.coeFn_injective","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\n⊢ Function.Injective DFunLike.coe","decl":"theorem coeFn_injective : @Injective (P →ᵃⁱ[𝕜] P₂) (P → P₂) (↑) :=\n  AffineMap.coeFn_injective.comp toAffineMap_injective\n\n"}
{"name":"AffineIsometry.ext","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf g : AffineIsometry 𝕜 P P₂\nh : ∀ (x : P), Eq (f x) (g x)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : P →ᵃⁱ[𝕜] P₂} (h : ∀ x, f x = g x) : f = g :=\n  coeFn_injective <| funext h\n\n"}
{"name":"AffineIsometry.ext_iff","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf g : AffineIsometry 𝕜 P P₂\n⊢ Iff (Eq f g) (∀ (x : P), Eq (f x) (g x))","decl":"@[ext]\ntheorem ext {f g : P →ᵃⁱ[𝕜] P₂} (h : ∀ x, f x = g x) : f = g :=\n  coeFn_injective <| funext h\n\n"}
{"name":"LinearIsometry.coe_toAffineIsometry","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : SeminormedAddCommGroup V₂\ninst✝ : NormedSpace 𝕜 V₂\nf : LinearIsometry (RingHom.id 𝕜) V V₂\n⊢ Eq ⇑f.toAffineIsometry ⇑f","decl":"@[simp]\ntheorem coe_toAffineIsometry : ⇑(f.toAffineIsometry : V →ᵃⁱ[𝕜] V₂) = f :=\n  rfl\n\n"}
{"name":"LinearIsometry.toAffineIsometry_linearIsometry","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : SeminormedAddCommGroup V₂\ninst✝ : NormedSpace 𝕜 V₂\nf : LinearIsometry (RingHom.id 𝕜) V V₂\n⊢ Eq f.toAffineIsometry.linearIsometry f","decl":"@[simp]\ntheorem toAffineIsometry_linearIsometry : f.toAffineIsometry.linearIsometry = f := by\n  ext\n  rfl\n\n-- somewhat arbitrary choice of simp direction\n"}
{"name":"LinearIsometry.toAffineIsometry_toAffineMap","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : SeminormedAddCommGroup V₂\ninst✝ : NormedSpace 𝕜 V₂\nf : LinearIsometry (RingHom.id 𝕜) V V₂\n⊢ Eq f.toAffineIsometry.toAffineMap f.toAffineMap","decl":"@[simp]\ntheorem toAffineIsometry_toAffineMap : f.toAffineIsometry.toAffineMap = f.toLinearMap.toAffineMap :=\n  rfl\n\n"}
{"name":"AffineIsometry.map_vadd","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf : AffineIsometry 𝕜 P P₂\np : P\nv : V\n⊢ Eq (f (HVAdd.hVAdd v p)) (HVAdd.hVAdd (f.linearIsometry v) (f p))","decl":"@[simp]\ntheorem map_vadd (p : P) (v : V) : f (v +ᵥ p) = f.linearIsometry v +ᵥ f p :=\n  f.toAffineMap.map_vadd p v\n\n"}
{"name":"AffineIsometry.map_vsub","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf : AffineIsometry 𝕜 P P₂\np1 p2 : P\n⊢ Eq (f.linearIsometry (VSub.vsub p1 p2)) (VSub.vsub (f p1) (f p2))","decl":"@[simp]\ntheorem map_vsub (p1 p2 : P) : f.linearIsometry (p1 -ᵥ p2) = f p1 -ᵥ f p2 :=\n  f.toAffineMap.linearMap_vsub p1 p2\n\n"}
{"name":"AffineIsometry.dist_map","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf : AffineIsometry 𝕜 P P₂\nx y : P\n⊢ Eq (Dist.dist (f x) (f y)) (Dist.dist x y)","decl":"@[simp]\ntheorem dist_map (x y : P) : dist (f x) (f y) = dist x y := by\n  rw [dist_eq_norm_vsub V₂, dist_eq_norm_vsub V, ← map_vsub, f.linearIsometry.norm_map]\n\n"}
{"name":"AffineIsometry.nndist_map","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf : AffineIsometry 𝕜 P P₂\nx y : P\n⊢ Eq (NNDist.nndist (f x) (f y)) (NNDist.nndist x y)","decl":"@[simp]\ntheorem nndist_map (x y : P) : nndist (f x) (f y) = nndist x y := by simp [nndist_dist]\n\n"}
{"name":"AffineIsometry.edist_map","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf : AffineIsometry 𝕜 P P₂\nx y : P\n⊢ Eq (EDist.edist (f x) (f y)) (EDist.edist x y)","decl":"@[simp]\ntheorem edist_map (x y : P) : edist (f x) (f y) = edist x y := by simp [edist_dist]\n\n"}
{"name":"AffineIsometry.isometry","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf : AffineIsometry 𝕜 P P₂\n⊢ Isometry ⇑f","decl":"protected theorem isometry : Isometry f :=\n  f.edist_map\n\n"}
{"name":"AffineIsometry.injective","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV₁' : Type u_4\nV₂ : Type u_5\nP₁' : Type u_9\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V₁'\ninst✝⁶ : NormedSpace 𝕜 V₁'\ninst✝⁵ : MetricSpace P₁'\ninst✝⁴ : NormedAddTorsor V₁' P₁'\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf₁ : AffineIsometry 𝕜 P₁' P₂\n⊢ Function.Injective ⇑f₁","decl":"protected theorem injective : Injective f₁ :=\n  f₁.isometry.injective\n\n"}
{"name":"AffineIsometry.map_eq_iff","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV₁' : Type u_4\nV₂ : Type u_5\nP₁' : Type u_9\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V₁'\ninst✝⁶ : NormedSpace 𝕜 V₁'\ninst✝⁵ : MetricSpace P₁'\ninst✝⁴ : NormedAddTorsor V₁' P₁'\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf₁ : AffineIsometry 𝕜 P₁' P₂\nx y : P₁'\n⊢ Iff (Eq (f₁ x) (f₁ y)) (Eq x y)","decl":"@[simp]\ntheorem map_eq_iff {x y : P₁'} : f₁ x = f₁ y ↔ x = y :=\n  f₁.injective.eq_iff\n\n"}
{"name":"AffineIsometry.map_ne","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV₁' : Type u_4\nV₂ : Type u_5\nP₁' : Type u_9\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V₁'\ninst✝⁶ : NormedSpace 𝕜 V₁'\ninst✝⁵ : MetricSpace P₁'\ninst✝⁴ : NormedAddTorsor V₁' P₁'\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf₁ : AffineIsometry 𝕜 P₁' P₂\nx y : P₁'\nh : Ne x y\n⊢ Ne (f₁ x) (f₁ y)","decl":"theorem map_ne {x y : P₁'} (h : x ≠ y) : f₁ x ≠ f₁ y :=\n  f₁.injective.ne h\n\n"}
{"name":"AffineIsometry.lipschitz","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf : AffineIsometry 𝕜 P P₂\n⊢ LipschitzWith 1 ⇑f","decl":"protected theorem lipschitz : LipschitzWith 1 f :=\n  f.isometry.lipschitz\n\n"}
{"name":"AffineIsometry.antilipschitz","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf : AffineIsometry 𝕜 P P₂\n⊢ AntilipschitzWith 1 ⇑f","decl":"protected theorem antilipschitz : AntilipschitzWith 1 f :=\n  f.isometry.antilipschitz\n\n"}
{"name":"AffineIsometry.continuous","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf : AffineIsometry 𝕜 P P₂\n⊢ Continuous ⇑f","decl":"@[continuity]\nprotected theorem continuous : Continuous f :=\n  f.isometry.continuous\n\n"}
{"name":"AffineIsometry.ediam_image","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf : AffineIsometry 𝕜 P P₂\ns : Set P\n⊢ Eq (EMetric.diam (Set.image (⇑f) s)) (EMetric.diam s)","decl":"theorem ediam_image (s : Set P) : EMetric.diam (f '' s) = EMetric.diam s :=\n  f.isometry.ediam_image s\n\n"}
{"name":"AffineIsometry.ediam_range","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf : AffineIsometry 𝕜 P P₂\n⊢ Eq (EMetric.diam (Set.range ⇑f)) (EMetric.diam Set.univ)","decl":"theorem ediam_range : EMetric.diam (range f) = EMetric.diam (univ : Set P) :=\n  f.isometry.ediam_range\n\n"}
{"name":"AffineIsometry.diam_image","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf : AffineIsometry 𝕜 P P₂\ns : Set P\n⊢ Eq (Metric.diam (Set.image (⇑f) s)) (Metric.diam s)","decl":"theorem diam_image (s : Set P) : Metric.diam (f '' s) = Metric.diam s :=\n  f.isometry.diam_image s\n\n"}
{"name":"AffineIsometry.diam_range","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf : AffineIsometry 𝕜 P P₂\n⊢ Eq (Metric.diam (Set.range ⇑f)) (Metric.diam Set.univ)","decl":"theorem diam_range : Metric.diam (range f) = Metric.diam (univ : Set P) :=\n  f.isometry.diam_range\n\n"}
{"name":"AffineIsometry.comp_continuous_iff","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : SeminormedAddCommGroup V\ninst✝⁷ : NormedSpace 𝕜 V\ninst✝⁶ : PseudoMetricSpace P\ninst✝⁵ : NormedAddTorsor V P\ninst✝⁴ : SeminormedAddCommGroup V₂\ninst✝³ : NormedSpace 𝕜 V₂\ninst✝² : PseudoMetricSpace P₂\ninst✝¹ : NormedAddTorsor V₂ P₂\nf : AffineIsometry 𝕜 P P₂\nα : Type u_14\ninst✝ : TopologicalSpace α\ng : α → P\n⊢ Iff (Continuous (Function.comp (⇑f) g)) (Continuous g)","decl":"@[simp]\ntheorem comp_continuous_iff {α : Type*} [TopologicalSpace α] {g : α → P} :\n    Continuous (f ∘ g) ↔ Continuous g :=\n  f.isometry.comp_continuous_iff\n\n"}
{"name":"AffineIsometry.coe_id","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\n⊢ Eq (⇑AffineIsometry.id) id","decl":"@[simp, norm_cast]\ntheorem coe_id : ⇑(id : P →ᵃⁱ[𝕜] P) = _root_.id :=\n  rfl\n\n"}
{"name":"AffineIsometry.id_apply","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\nx : P\n⊢ Eq (AffineIsometry.id x) x","decl":"@[simp]\ntheorem id_apply (x : P) : (AffineIsometry.id : P →ᵃⁱ[𝕜] P) x = x :=\n  rfl\n\n"}
{"name":"AffineIsometry.id_toAffineMap","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\n⊢ Eq AffineIsometry.id.toAffineMap (AffineMap.id 𝕜 P)","decl":"@[simp]\ntheorem id_toAffineMap : (id.toAffineMap : P →ᵃ[𝕜] P) = AffineMap.id 𝕜 P :=\n  rfl\n\n"}
{"name":"AffineIsometry.coe_comp","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nV₃ : Type u_6\nP : Type u_10\nP₂ : Type u_11\nP₃ : Type u_12\ninst✝¹² : NormedField 𝕜\ninst✝¹¹ : SeminormedAddCommGroup V\ninst✝¹⁰ : NormedSpace 𝕜 V\ninst✝⁹ : PseudoMetricSpace P\ninst✝⁸ : NormedAddTorsor V P\ninst✝⁷ : SeminormedAddCommGroup V₂\ninst✝⁶ : NormedSpace 𝕜 V₂\ninst✝⁵ : PseudoMetricSpace P₂\ninst✝⁴ : NormedAddTorsor V₂ P₂\ninst✝³ : SeminormedAddCommGroup V₃\ninst✝² : NormedSpace 𝕜 V₃\ninst✝¹ : PseudoMetricSpace P₃\ninst✝ : NormedAddTorsor V₃ P₃\ng : AffineIsometry 𝕜 P₂ P₃\nf : AffineIsometry 𝕜 P P₂\n⊢ Eq (⇑(g.comp f)) (Function.comp ⇑g ⇑f)","decl":"@[simp]\ntheorem coe_comp (g : P₂ →ᵃⁱ[𝕜] P₃) (f : P →ᵃⁱ[𝕜] P₂) : ⇑(g.comp f) = g ∘ f :=\n  rfl\n\n"}
{"name":"AffineIsometry.id_comp","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf : AffineIsometry 𝕜 P P₂\n⊢ Eq (AffineIsometry.id.comp f) f","decl":"@[simp]\ntheorem id_comp : (id : P₂ →ᵃⁱ[𝕜] P₂).comp f = f :=\n  ext fun _ => rfl\n\n"}
{"name":"AffineIsometry.comp_id","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf : AffineIsometry 𝕜 P P₂\n⊢ Eq (f.comp AffineIsometry.id) f","decl":"@[simp]\ntheorem comp_id : f.comp id = f :=\n  ext fun _ => rfl\n\n"}
{"name":"AffineIsometry.comp_assoc","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nV₃ : Type u_6\nV₄ : Type u_7\nP : Type u_10\nP₂ : Type u_11\nP₃ : Type u_12\nP₄ : Type u_13\ninst✝¹⁶ : NormedField 𝕜\ninst✝¹⁵ : SeminormedAddCommGroup V\ninst✝¹⁴ : NormedSpace 𝕜 V\ninst✝¹³ : PseudoMetricSpace P\ninst✝¹² : NormedAddTorsor V P\ninst✝¹¹ : SeminormedAddCommGroup V₂\ninst✝¹⁰ : NormedSpace 𝕜 V₂\ninst✝⁹ : PseudoMetricSpace P₂\ninst✝⁸ : NormedAddTorsor V₂ P₂\ninst✝⁷ : SeminormedAddCommGroup V₃\ninst✝⁶ : NormedSpace 𝕜 V₃\ninst✝⁵ : PseudoMetricSpace P₃\ninst✝⁴ : NormedAddTorsor V₃ P₃\ninst✝³ : SeminormedAddCommGroup V₄\ninst✝² : NormedSpace 𝕜 V₄\ninst✝¹ : PseudoMetricSpace P₄\ninst✝ : NormedAddTorsor V₄ P₄\nf : AffineIsometry 𝕜 P₃ P₄\ng : AffineIsometry 𝕜 P₂ P₃\nh : AffineIsometry 𝕜 P P₂\n⊢ Eq ((f.comp g).comp h) (f.comp (g.comp h))","decl":"theorem comp_assoc (f : P₃ →ᵃⁱ[𝕜] P₄) (g : P₂ →ᵃⁱ[𝕜] P₃) (h : P →ᵃⁱ[𝕜] P₂) :\n    (f.comp g).comp h = f.comp (g.comp h) :=\n  rfl\n\n"}
{"name":"AffineIsometry.coe_one","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\n⊢ Eq (⇑1) id","decl":"@[simp]\ntheorem coe_one : ⇑(1 : P →ᵃⁱ[𝕜] P) = _root_.id :=\n  rfl\n\n"}
{"name":"AffineIsometry.coe_mul","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\nf g : AffineIsometry 𝕜 P P\n⊢ Eq (⇑(HMul.hMul f g)) (Function.comp ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_mul (f g : P →ᵃⁱ[𝕜] P) : ⇑(f * g) = f ∘ g :=\n  rfl\n\n"}
{"name":"AffineSubspace.subtypeₐᵢ_linear","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁵ : NormedField 𝕜\ninst✝⁴ : SeminormedAddCommGroup V\ninst✝³ : NormedSpace 𝕜 V\ninst✝² : PseudoMetricSpace P\ninst✝¹ : NormedAddTorsor V P\ns : AffineSubspace 𝕜 P\ninst✝ : Nonempty (Subtype fun x => Membership.mem s x)\n⊢ Eq s.subtypeₐᵢ.linear s.direction.subtype","decl":"theorem subtypeₐᵢ_linear (s : AffineSubspace 𝕜 P) [Nonempty s] :\n    s.subtypeₐᵢ.linear = s.direction.subtype :=\n  rfl\n\n"}
{"name":"AffineSubspace.subtypeₐᵢ_linearIsometry","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁵ : NormedField 𝕜\ninst✝⁴ : SeminormedAddCommGroup V\ninst✝³ : NormedSpace 𝕜 V\ninst✝² : PseudoMetricSpace P\ninst✝¹ : NormedAddTorsor V P\ns : AffineSubspace 𝕜 P\ninst✝ : Nonempty (Subtype fun x => Membership.mem s x)\n⊢ Eq s.subtypeₐᵢ.linearIsometry s.direction.subtypeₗᵢ","decl":"@[simp]\ntheorem subtypeₐᵢ_linearIsometry (s : AffineSubspace 𝕜 P) [Nonempty s] :\n    s.subtypeₐᵢ.linearIsometry = s.direction.subtypeₗᵢ :=\n  rfl\n\n"}
{"name":"AffineSubspace.coe_subtypeₐᵢ","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁵ : NormedField 𝕜\ninst✝⁴ : SeminormedAddCommGroup V\ninst✝³ : NormedSpace 𝕜 V\ninst✝² : PseudoMetricSpace P\ninst✝¹ : NormedAddTorsor V P\ns : AffineSubspace 𝕜 P\ninst✝ : Nonempty (Subtype fun x => Membership.mem s x)\n⊢ Eq ⇑s.subtypeₐᵢ ⇑s.subtype","decl":"@[simp]\ntheorem coe_subtypeₐᵢ (s : AffineSubspace 𝕜 P) [Nonempty s] : ⇑s.subtypeₐᵢ = s.subtype :=\n  rfl\n\n"}
{"name":"AffineSubspace.subtypeₐᵢ_toAffineMap","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁵ : NormedField 𝕜\ninst✝⁴ : SeminormedAddCommGroup V\ninst✝³ : NormedSpace 𝕜 V\ninst✝² : PseudoMetricSpace P\ninst✝¹ : NormedAddTorsor V P\ns : AffineSubspace 𝕜 P\ninst✝ : Nonempty (Subtype fun x => Membership.mem s x)\n⊢ Eq s.subtypeₐᵢ.toAffineMap s.subtype","decl":"@[simp]\ntheorem subtypeₐᵢ_toAffineMap (s : AffineSubspace 𝕜 P) [Nonempty s] :\n    s.subtypeₐᵢ.toAffineMap = s.subtype :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.mk.sizeOf_spec","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝¹³ : NormedField 𝕜\ninst✝¹² : SeminormedAddCommGroup V\ninst✝¹¹ : NormedSpace 𝕜 V\ninst✝¹⁰ : PseudoMetricSpace P\ninst✝⁹ : NormedAddTorsor V P\ninst✝⁸ : SeminormedAddCommGroup V₂\ninst✝⁷ : NormedSpace 𝕜 V₂\ninst✝⁶ : PseudoMetricSpace P₂\ninst✝⁵ : NormedAddTorsor V₂ P₂\ninst✝⁴ : SizeOf 𝕜\ninst✝³ : SizeOf V\ninst✝² : SizeOf V₂\ninst✝¹ : SizeOf P\ninst✝ : SizeOf P₂\ntoAffineEquiv : AffineEquiv 𝕜 P P₂\nnorm_map : ∀ (x : V), Eq (Norm.norm (toAffineEquiv.linear x)) (Norm.norm x)\n⊢ Eq (SizeOf.sizeOf { toAffineEquiv := toAffineEquiv, norm_map := norm_map }) (HAdd.hAdd 1 (SizeOf.sizeOf toAffineEquiv))","decl":"/-- An affine isometric equivalence between two normed vector spaces,\ndenoted `f : P ≃ᵃⁱ[𝕜] P₂`. -/\nstructure AffineIsometryEquiv extends P ≃ᵃ[𝕜] P₂ where\n  norm_map : ∀ x, ‖linear x‖ = ‖x‖\n\n"}
{"name":"AffineIsometryEquiv.mk.injEq","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ntoAffineEquiv✝ : AffineEquiv 𝕜 P P₂\nnorm_map✝ : ∀ (x : V), Eq (Norm.norm (toAffineEquiv✝.linear x)) (Norm.norm x)\ntoAffineEquiv : AffineEquiv 𝕜 P P₂\nnorm_map : ∀ (x : V), Eq (Norm.norm (toAffineEquiv.linear x)) (Norm.norm x)\n⊢ Eq (Eq { toAffineEquiv := toAffineEquiv✝, norm_map := norm_map✝ } { toAffineEquiv := toAffineEquiv, norm_map := norm_map }) (Eq toAffineEquiv✝ toAffineEquiv)","decl":"/-- An affine isometric equivalence between two normed vector spaces,\ndenoted `f : P ≃ᵃⁱ[𝕜] P₂`. -/\nstructure AffineIsometryEquiv extends P ≃ᵃ[𝕜] P₂ where\n  norm_map : ∀ x, ‖linear x‖ = ‖x‖\n\n"}
{"name":"AffineIsometryEquiv.mk.inj","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ntoAffineEquiv✝ : AffineEquiv 𝕜 P P₂\nnorm_map✝ : ∀ (x : V), Eq (Norm.norm (toAffineEquiv✝.linear x)) (Norm.norm x)\ntoAffineEquiv : AffineEquiv 𝕜 P P₂\nnorm_map : ∀ (x : V), Eq (Norm.norm (toAffineEquiv.linear x)) (Norm.norm x)\nx✝ : Eq { toAffineEquiv := toAffineEquiv✝, norm_map := norm_map✝ } { toAffineEquiv := toAffineEquiv, norm_map := norm_map }\n⊢ Eq toAffineEquiv✝ toAffineEquiv","decl":"/-- An affine isometric equivalence between two normed vector spaces,\ndenoted `f : P ≃ᵃⁱ[𝕜] P₂`. -/\nstructure AffineIsometryEquiv extends P ≃ᵃ[𝕜] P₂ where\n  norm_map : ∀ x, ‖linear x‖ = ‖x‖\n\n"}
{"name":"AffineIsometryEquiv.norm_map","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nself : AffineIsometryEquiv 𝕜 P P₂\nx : V\n⊢ Eq (Norm.norm (self.linear x)) (Norm.norm x)","decl":"/-- An affine isometric equivalence between two normed vector spaces,\ndenoted `f : P ≃ᵃⁱ[𝕜] P₂`. -/\nstructure AffineIsometryEquiv extends P ≃ᵃ[𝕜] P₂ where\n  norm_map : ∀ x, ‖linear x‖ = ‖x‖\n\n"}
{"name":"AffineIsometryEquiv.linear_eq_linear_isometry","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\n⊢ Eq e.linear e.linearIsometryEquiv.toLinearEquiv","decl":"@[simp]\ntheorem linear_eq_linear_isometry : e.linear = e.linearIsometryEquiv.toLinearEquiv := by\n  ext\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.coe_mk","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineEquiv 𝕜 P P₂\nhe : ∀ (x : V), Eq (Norm.norm (e.linear x)) (Norm.norm x)\n⊢ Eq ⇑{ toAffineEquiv := e, norm_map := he } ⇑e","decl":"@[simp]\ntheorem coe_mk (e : P ≃ᵃ[𝕜] P₂) (he : ∀ x, ‖e.linear x‖ = ‖x‖) : ⇑(mk e he) = e :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.coe_toAffineEquiv","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\n⊢ Eq ⇑e.toAffineEquiv ⇑e","decl":"@[simp]\ntheorem coe_toAffineEquiv (e : P ≃ᵃⁱ[𝕜] P₂) : ⇑e.toAffineEquiv = e :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.toAffineEquiv_injective","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\n⊢ Function.Injective AffineIsometryEquiv.toAffineEquiv","decl":"theorem toAffineEquiv_injective : Injective (toAffineEquiv : (P ≃ᵃⁱ[𝕜] P₂) → P ≃ᵃ[𝕜] P₂)\n  | ⟨_, _⟩, ⟨_, _⟩, rfl => rfl\n\n"}
{"name":"AffineIsometryEquiv.ext_iff","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne e' : AffineIsometryEquiv 𝕜 P P₂\n⊢ Iff (Eq e e') (∀ (x : P), Eq (e x) (e' x))","decl":"@[ext]\ntheorem ext {e e' : P ≃ᵃⁱ[𝕜] P₂} (h : ∀ x, e x = e' x) : e = e' :=\n  toAffineEquiv_injective <| AffineEquiv.ext h\n\n"}
{"name":"AffineIsometryEquiv.ext","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne e' : AffineIsometryEquiv 𝕜 P P₂\nh : ∀ (x : P), Eq (e x) (e' x)\n⊢ Eq e e'","decl":"@[ext]\ntheorem ext {e e' : P ≃ᵃⁱ[𝕜] P₂} (h : ∀ x, e x = e' x) : e = e' :=\n  toAffineEquiv_injective <| AffineEquiv.ext h\n\n"}
{"name":"AffineIsometryEquiv.coe_toAffineIsometry","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\n⊢ Eq ⇑e.toAffineIsometry ⇑e","decl":"@[simp]\ntheorem coe_toAffineIsometry : ⇑e.toAffineIsometry = e :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.coe_mk'","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV₁ : Type u_3\nV₂ : Type u_5\nP₁ : Type u_8\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V₁\ninst✝⁶ : NormedSpace 𝕜 V₁\ninst✝⁵ : PseudoMetricSpace P₁\ninst✝⁴ : NormedAddTorsor V₁ P₁\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : P₁ → P₂\ne' : LinearIsometryEquiv (RingHom.id 𝕜) V₁ V₂\np : P₁\nh : ∀ (p' : P₁), Eq (e p') (HVAdd.hVAdd (e' (VSub.vsub p' p)) (e p))\n⊢ Eq (⇑(AffineIsometryEquiv.mk' e e' p h)) e","decl":"@[simp]\ntheorem coe_mk' (e : P₁ → P₂) (e' : V₁ ≃ₗᵢ[𝕜] V₂) (p h) : ⇑(mk' e e' p h) = e :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.linearIsometryEquiv_mk'","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV₁ : Type u_3\nV₂ : Type u_5\nP₁ : Type u_8\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V₁\ninst✝⁶ : NormedSpace 𝕜 V₁\ninst✝⁵ : PseudoMetricSpace P₁\ninst✝⁴ : NormedAddTorsor V₁ P₁\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : P₁ → P₂\ne' : LinearIsometryEquiv (RingHom.id 𝕜) V₁ V₂\np : P₁\nh : ∀ (p' : P₁), Eq (e p') (HVAdd.hVAdd (e' (VSub.vsub p' p)) (e p))\n⊢ Eq (AffineIsometryEquiv.mk' e e' p h).linearIsometryEquiv e'","decl":"@[simp]\ntheorem linearIsometryEquiv_mk' (e : P₁ → P₂) (e' : V₁ ≃ₗᵢ[𝕜] V₂) (p h) :\n    (mk' e e' p h).linearIsometryEquiv = e' := by\n  ext\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.coe_toAffineIsometryEquiv","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : SeminormedAddCommGroup V₂\ninst✝ : NormedSpace 𝕜 V₂\ne : LinearIsometryEquiv (RingHom.id 𝕜) V V₂\n⊢ Eq ⇑e.toAffineIsometryEquiv ⇑e","decl":"@[simp]\ntheorem coe_toAffineIsometryEquiv : ⇑(e.toAffineIsometryEquiv : V ≃ᵃⁱ[𝕜] V₂) = e := by\n  rfl\n\n"}
{"name":"LinearIsometryEquiv.toAffineIsometryEquiv_linearIsometryEquiv","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : SeminormedAddCommGroup V₂\ninst✝ : NormedSpace 𝕜 V₂\ne : LinearIsometryEquiv (RingHom.id 𝕜) V V₂\n⊢ Eq e.toAffineIsometryEquiv.linearIsometryEquiv e","decl":"@[simp]\ntheorem toAffineIsometryEquiv_linearIsometryEquiv :\n    e.toAffineIsometryEquiv.linearIsometryEquiv = e := by\n  ext\n  rfl\n\n-- somewhat arbitrary choice of simp direction\n"}
{"name":"LinearIsometryEquiv.toAffineIsometryEquiv_toAffineEquiv","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : SeminormedAddCommGroup V₂\ninst✝ : NormedSpace 𝕜 V₂\ne : LinearIsometryEquiv (RingHom.id 𝕜) V V₂\n⊢ Eq e.toAffineIsometryEquiv.toAffineEquiv e.toAffineEquiv","decl":"@[simp]\ntheorem toAffineIsometryEquiv_toAffineEquiv :\n    e.toAffineIsometryEquiv.toAffineEquiv = e.toLinearEquiv.toAffineEquiv :=\n  rfl\n\n-- somewhat arbitrary choice of simp direction\n"}
{"name":"LinearIsometryEquiv.toAffineIsometryEquiv_toAffineIsometry","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : SeminormedAddCommGroup V₂\ninst✝ : NormedSpace 𝕜 V₂\ne : LinearIsometryEquiv (RingHom.id 𝕜) V V₂\n⊢ Eq e.toAffineIsometryEquiv.toAffineIsometry e.toLinearIsometry.toAffineIsometry","decl":"@[simp]\ntheorem toAffineIsometryEquiv_toAffineIsometry :\n    e.toAffineIsometryEquiv.toAffineIsometry = e.toLinearIsometry.toAffineIsometry :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.isometry","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\n⊢ Isometry ⇑e","decl":"protected theorem isometry : Isometry e :=\n  e.toAffineIsometry.isometry\n\n"}
{"name":"AffineIsometryEquiv.coe_toIsometryEquiv","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\n⊢ Eq ⇑e.toIsometryEquiv ⇑e","decl":"@[simp]\ntheorem coe_toIsometryEquiv : ⇑e.toIsometryEquiv = e :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.range_eq_univ","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\n⊢ Eq (Set.range ⇑e) Set.univ","decl":"theorem range_eq_univ (e : P ≃ᵃⁱ[𝕜] P₂) : Set.range e = Set.univ := by\n  rw [← coe_toIsometryEquiv]\n  exact IsometryEquiv.range_eq_univ _\n\n"}
{"name":"AffineIsometryEquiv.coe_toHomeomorph","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\n⊢ Eq ⇑e.toHomeomorph ⇑e","decl":"@[simp]\ntheorem coe_toHomeomorph : ⇑e.toHomeomorph = e :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.continuous","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\n⊢ Continuous ⇑e","decl":"protected theorem continuous : Continuous e :=\n  e.isometry.continuous\n\n"}
{"name":"AffineIsometryEquiv.continuousAt","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\nx : P\n⊢ ContinuousAt (⇑e) x","decl":"protected theorem continuousAt {x} : ContinuousAt e x :=\n  e.continuous.continuousAt\n\n"}
{"name":"AffineIsometryEquiv.continuousOn","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\ns : Set P\n⊢ ContinuousOn (⇑e) s","decl":"protected theorem continuousOn {s} : ContinuousOn e s :=\n  e.continuous.continuousOn\n\n"}
{"name":"AffineIsometryEquiv.continuousWithinAt","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\ns : Set P\nx : P\n⊢ ContinuousWithinAt (⇑e) s x","decl":"protected theorem continuousWithinAt {s x} : ContinuousWithinAt e s x :=\n  e.continuous.continuousWithinAt\n\n"}
{"name":"AffineIsometryEquiv.coe_refl","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\n⊢ Eq (⇑(AffineIsometryEquiv.refl 𝕜 P)) id","decl":"@[simp]\ntheorem coe_refl : ⇑(refl 𝕜 P) = id :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.toAffineEquiv_refl","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\n⊢ Eq (AffineIsometryEquiv.refl 𝕜 P).toAffineEquiv (AffineEquiv.refl 𝕜 P)","decl":"@[simp]\ntheorem toAffineEquiv_refl : (refl 𝕜 P).toAffineEquiv = AffineEquiv.refl 𝕜 P :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.toIsometryEquiv_refl","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\n⊢ Eq (AffineIsometryEquiv.refl 𝕜 P).toIsometryEquiv (IsometryEquiv.refl P)","decl":"@[simp]\ntheorem toIsometryEquiv_refl : (refl 𝕜 P).toIsometryEquiv = IsometryEquiv.refl P :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.toHomeomorph_refl","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\n⊢ Eq (AffineIsometryEquiv.refl 𝕜 P).toHomeomorph (Homeomorph.refl P)","decl":"@[simp]\ntheorem toHomeomorph_refl : (refl 𝕜 P).toHomeomorph = Homeomorph.refl P :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.apply_symm_apply","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\nx : P₂\n⊢ Eq (e (e.symm x)) x","decl":"@[simp]\ntheorem apply_symm_apply (x : P₂) : e (e.symm x) = x :=\n  e.toAffineEquiv.apply_symm_apply x\n\n"}
{"name":"AffineIsometryEquiv.symm_apply_apply","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\nx : P\n⊢ Eq (e.symm (e x)) x","decl":"@[simp]\ntheorem symm_apply_apply (x : P) : e.symm (e x) = x :=\n  e.toAffineEquiv.symm_apply_apply x\n\n"}
{"name":"AffineIsometryEquiv.symm_symm","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\n⊢ Eq e.symm.symm e","decl":"@[simp]\ntheorem symm_symm : e.symm.symm = e := rfl\n\n"}
{"name":"AffineIsometryEquiv.toAffineEquiv_symm","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\n⊢ Eq e.symm e.symm.toAffineEquiv","decl":"@[simp]\ntheorem toAffineEquiv_symm : e.toAffineEquiv.symm = e.symm.toAffineEquiv :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.toIsometryEquiv_symm","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\n⊢ Eq e.toIsometryEquiv.symm e.symm.toIsometryEquiv","decl":"@[simp]\ntheorem toIsometryEquiv_symm : e.toIsometryEquiv.symm = e.symm.toIsometryEquiv :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.toHomeomorph_symm","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\n⊢ Eq e.toHomeomorph.symm e.symm.toHomeomorph","decl":"@[simp]\ntheorem toHomeomorph_symm : e.toHomeomorph.symm = e.symm.toHomeomorph :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.coe_trans","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nV₃ : Type u_6\nP : Type u_10\nP₂ : Type u_11\nP₃ : Type u_12\ninst✝¹² : NormedField 𝕜\ninst✝¹¹ : SeminormedAddCommGroup V\ninst✝¹⁰ : NormedSpace 𝕜 V\ninst✝⁹ : PseudoMetricSpace P\ninst✝⁸ : NormedAddTorsor V P\ninst✝⁷ : SeminormedAddCommGroup V₂\ninst✝⁶ : NormedSpace 𝕜 V₂\ninst✝⁵ : PseudoMetricSpace P₂\ninst✝⁴ : NormedAddTorsor V₂ P₂\ninst✝³ : SeminormedAddCommGroup V₃\ninst✝² : NormedSpace 𝕜 V₃\ninst✝¹ : PseudoMetricSpace P₃\ninst✝ : NormedAddTorsor V₃ P₃\ne₁ : AffineIsometryEquiv 𝕜 P P₂\ne₂ : AffineIsometryEquiv 𝕜 P₂ P₃\n⊢ Eq (⇑(e₁.trans e₂)) (Function.comp ⇑e₂ ⇑e₁)","decl":"@[simp]\ntheorem coe_trans (e₁ : P ≃ᵃⁱ[𝕜] P₂) (e₂ : P₂ ≃ᵃⁱ[𝕜] P₃) : ⇑(e₁.trans e₂) = e₂ ∘ e₁ :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.trans_refl","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\n⊢ Eq (e.trans (AffineIsometryEquiv.refl 𝕜 P₂)) e","decl":"@[simp]\ntheorem trans_refl : e.trans (refl 𝕜 P₂) = e :=\n  ext fun _ => rfl\n\n"}
{"name":"AffineIsometryEquiv.refl_trans","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\n⊢ Eq ((AffineIsometryEquiv.refl 𝕜 P).trans e) e","decl":"@[simp]\ntheorem refl_trans : (refl 𝕜 P).trans e = e :=\n  ext fun _ => rfl\n\n"}
{"name":"AffineIsometryEquiv.self_trans_symm","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\n⊢ Eq (e.trans e.symm) (AffineIsometryEquiv.refl 𝕜 P)","decl":"@[simp]\ntheorem self_trans_symm : e.trans e.symm = refl 𝕜 P :=\n  ext e.symm_apply_apply\n\n"}
{"name":"AffineIsometryEquiv.symm_trans_self","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\n⊢ Eq (e.symm.trans e) (AffineIsometryEquiv.refl 𝕜 P₂)","decl":"@[simp]\ntheorem symm_trans_self : e.symm.trans e = refl 𝕜 P₂ :=\n  ext e.apply_symm_apply\n\n"}
{"name":"AffineIsometryEquiv.coe_symm_trans","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nV₃ : Type u_6\nP : Type u_10\nP₂ : Type u_11\nP₃ : Type u_12\ninst✝¹² : NormedField 𝕜\ninst✝¹¹ : SeminormedAddCommGroup V\ninst✝¹⁰ : NormedSpace 𝕜 V\ninst✝⁹ : PseudoMetricSpace P\ninst✝⁸ : NormedAddTorsor V P\ninst✝⁷ : SeminormedAddCommGroup V₂\ninst✝⁶ : NormedSpace 𝕜 V₂\ninst✝⁵ : PseudoMetricSpace P₂\ninst✝⁴ : NormedAddTorsor V₂ P₂\ninst✝³ : SeminormedAddCommGroup V₃\ninst✝² : NormedSpace 𝕜 V₃\ninst✝¹ : PseudoMetricSpace P₃\ninst✝ : NormedAddTorsor V₃ P₃\ne₁ : AffineIsometryEquiv 𝕜 P P₂\ne₂ : AffineIsometryEquiv 𝕜 P₂ P₃\n⊢ Eq (⇑(e₁.trans e₂).symm) (Function.comp ⇑e₁.symm ⇑e₂.symm)","decl":"@[simp]\ntheorem coe_symm_trans (e₁ : P ≃ᵃⁱ[𝕜] P₂) (e₂ : P₂ ≃ᵃⁱ[𝕜] P₃) :\n    ⇑(e₁.trans e₂).symm = e₁.symm ∘ e₂.symm :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.trans_assoc","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nV₃ : Type u_6\nV₄ : Type u_7\nP : Type u_10\nP₂ : Type u_11\nP₃ : Type u_12\nP₄ : Type u_13\ninst✝¹⁶ : NormedField 𝕜\ninst✝¹⁵ : SeminormedAddCommGroup V\ninst✝¹⁴ : NormedSpace 𝕜 V\ninst✝¹³ : PseudoMetricSpace P\ninst✝¹² : NormedAddTorsor V P\ninst✝¹¹ : SeminormedAddCommGroup V₂\ninst✝¹⁰ : NormedSpace 𝕜 V₂\ninst✝⁹ : PseudoMetricSpace P₂\ninst✝⁸ : NormedAddTorsor V₂ P₂\ninst✝⁷ : SeminormedAddCommGroup V₃\ninst✝⁶ : NormedSpace 𝕜 V₃\ninst✝⁵ : PseudoMetricSpace P₃\ninst✝⁴ : NormedAddTorsor V₃ P₃\ninst✝³ : SeminormedAddCommGroup V₄\ninst✝² : NormedSpace 𝕜 V₄\ninst✝¹ : PseudoMetricSpace P₄\ninst✝ : NormedAddTorsor V₄ P₄\nePP₂ : AffineIsometryEquiv 𝕜 P P₂\neP₂G : AffineIsometryEquiv 𝕜 P₂ P₃\neGG' : AffineIsometryEquiv 𝕜 P₃ P₄\n⊢ Eq (ePP₂.trans (eP₂G.trans eGG')) ((ePP₂.trans eP₂G).trans eGG')","decl":"theorem trans_assoc (ePP₂ : P ≃ᵃⁱ[𝕜] P₂) (eP₂G : P₂ ≃ᵃⁱ[𝕜] P₃) (eGG' : P₃ ≃ᵃⁱ[𝕜] P₄) :\n    ePP₂.trans (eP₂G.trans eGG') = (ePP₂.trans eP₂G).trans eGG' :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.coe_one","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\n⊢ Eq (⇑1) id","decl":"@[simp]\ntheorem coe_one : ⇑(1 : P ≃ᵃⁱ[𝕜] P) = id :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.coe_mul","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\ne e' : AffineIsometryEquiv 𝕜 P P\n⊢ Eq (⇑(HMul.hMul e e')) (Function.comp ⇑e ⇑e')","decl":"@[simp]\ntheorem coe_mul (e e' : P ≃ᵃⁱ[𝕜] P) : ⇑(e * e') = e ∘ e' :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.coe_inv","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\ne : AffineIsometryEquiv 𝕜 P P\n⊢ Eq ⇑(Inv.inv e) ⇑e.symm","decl":"@[simp]\ntheorem coe_inv (e : P ≃ᵃⁱ[𝕜] P) : ⇑e⁻¹ = e.symm :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.map_vadd","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\np : P\nv : V\n⊢ Eq (e (HVAdd.hVAdd v p)) (HVAdd.hVAdd (e.linearIsometryEquiv v) (e p))","decl":"@[simp]\ntheorem map_vadd (p : P) (v : V) : e (v +ᵥ p) = e.linearIsometryEquiv v +ᵥ e p :=\n  e.toAffineIsometry.map_vadd p v\n\n"}
{"name":"AffineIsometryEquiv.map_vsub","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\np1 p2 : P\n⊢ Eq (e.linearIsometryEquiv (VSub.vsub p1 p2)) (VSub.vsub (e p1) (e p2))","decl":"@[simp]\ntheorem map_vsub (p1 p2 : P) : e.linearIsometryEquiv (p1 -ᵥ p2) = e p1 -ᵥ e p2 :=\n  e.toAffineIsometry.map_vsub p1 p2\n\n"}
{"name":"AffineIsometryEquiv.dist_map","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\nx y : P\n⊢ Eq (Dist.dist (e x) (e y)) (Dist.dist x y)","decl":"@[simp]\ntheorem dist_map (x y : P) : dist (e x) (e y) = dist x y :=\n  e.toAffineIsometry.dist_map x y\n\n"}
{"name":"AffineIsometryEquiv.edist_map","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\nx y : P\n⊢ Eq (EDist.edist (e x) (e y)) (EDist.edist x y)","decl":"@[simp]\ntheorem edist_map (x y : P) : edist (e x) (e y) = edist x y :=\n  e.toAffineIsometry.edist_map x y\n\n"}
{"name":"AffineIsometryEquiv.bijective","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\n⊢ Function.Bijective ⇑e","decl":"protected theorem bijective : Bijective e :=\n  e.1.bijective\n\n"}
{"name":"AffineIsometryEquiv.injective","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\n⊢ Function.Injective ⇑e","decl":"protected theorem injective : Injective e :=\n  e.1.injective\n\n"}
{"name":"AffineIsometryEquiv.surjective","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\n⊢ Function.Surjective ⇑e","decl":"protected theorem surjective : Surjective e :=\n  e.1.surjective\n\n"}
{"name":"AffineIsometryEquiv.map_eq_iff","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\nx y : P\n⊢ Iff (Eq (e x) (e y)) (Eq x y)","decl":"theorem map_eq_iff {x y : P} : e x = e y ↔ x = y :=\n  e.injective.eq_iff\n\n"}
{"name":"AffineIsometryEquiv.map_ne","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\nx y : P\nh : Ne x y\n⊢ Ne (e x) (e y)","decl":"theorem map_ne {x y : P} (h : x ≠ y) : e x ≠ e y :=\n  e.injective.ne h\n\n"}
{"name":"AffineIsometryEquiv.lipschitz","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\n⊢ LipschitzWith 1 ⇑e","decl":"protected theorem lipschitz : LipschitzWith 1 e :=\n  e.isometry.lipschitz\n\n"}
{"name":"AffineIsometryEquiv.antilipschitz","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\n⊢ AntilipschitzWith 1 ⇑e","decl":"protected theorem antilipschitz : AntilipschitzWith 1 e :=\n  e.isometry.antilipschitz\n\n"}
{"name":"AffineIsometryEquiv.ediam_image","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\ns : Set P\n⊢ Eq (EMetric.diam (Set.image (⇑e) s)) (EMetric.diam s)","decl":"@[simp]\ntheorem ediam_image (s : Set P) : EMetric.diam (e '' s) = EMetric.diam s :=\n  e.isometry.ediam_image s\n\n"}
{"name":"AffineIsometryEquiv.diam_image","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\ns : Set P\n⊢ Eq (Metric.diam (Set.image (⇑e) s)) (Metric.diam s)","decl":"@[simp]\ntheorem diam_image (s : Set P) : Metric.diam (e '' s) = Metric.diam s :=\n  e.isometry.diam_image s\n\n"}
{"name":"AffineIsometryEquiv.comp_continuousOn_iff","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : SeminormedAddCommGroup V\ninst✝⁷ : NormedSpace 𝕜 V\ninst✝⁶ : PseudoMetricSpace P\ninst✝⁵ : NormedAddTorsor V P\ninst✝⁴ : SeminormedAddCommGroup V₂\ninst✝³ : NormedSpace 𝕜 V₂\ninst✝² : PseudoMetricSpace P₂\ninst✝¹ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\nα : Type u_14\ninst✝ : TopologicalSpace α\nf : α → P\ns : Set α\n⊢ Iff (ContinuousOn (Function.comp (⇑e) f) s) (ContinuousOn f s)","decl":"@[simp]\ntheorem comp_continuousOn_iff {f : α → P} {s : Set α} : ContinuousOn (e ∘ f) s ↔ ContinuousOn f s :=\n  e.isometry.comp_continuousOn_iff\n\n"}
{"name":"AffineIsometryEquiv.comp_continuous_iff","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : SeminormedAddCommGroup V\ninst✝⁷ : NormedSpace 𝕜 V\ninst✝⁶ : PseudoMetricSpace P\ninst✝⁵ : NormedAddTorsor V P\ninst✝⁴ : SeminormedAddCommGroup V₂\ninst✝³ : NormedSpace 𝕜 V₂\ninst✝² : PseudoMetricSpace P₂\ninst✝¹ : NormedAddTorsor V₂ P₂\ne : AffineIsometryEquiv 𝕜 P P₂\nα : Type u_14\ninst✝ : TopologicalSpace α\nf : α → P\n⊢ Iff (Continuous (Function.comp (⇑e) f)) (Continuous f)","decl":"@[simp]\ntheorem comp_continuous_iff {f : α → P} : Continuous (e ∘ f) ↔ Continuous f :=\n  e.isometry.comp_continuous_iff\n\n"}
{"name":"AffineIsometryEquiv.coe_vaddConst","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\np : P\n⊢ Eq ⇑(AffineIsometryEquiv.vaddConst 𝕜 p) fun v => HVAdd.hVAdd v p","decl":"@[simp]\ntheorem coe_vaddConst (p : P) : ⇑(vaddConst 𝕜 p) = fun v => v +ᵥ p :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.coe_vaddConst'","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\np : P\n⊢ Eq ⇑(AffineEquiv.vaddConst 𝕜 p) fun v => HVAdd.hVAdd v p","decl":"@[simp]\ntheorem coe_vaddConst' (p : P) : ↑(AffineEquiv.vaddConst 𝕜 p) = fun v => v +ᵥ p :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.coe_vaddConst_symm","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\np : P\n⊢ Eq ⇑(AffineIsometryEquiv.vaddConst 𝕜 p).symm fun p' => VSub.vsub p' p","decl":"@[simp]\ntheorem coe_vaddConst_symm (p : P) : ⇑(vaddConst 𝕜 p).symm = fun p' => p' -ᵥ p :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.vaddConst_toAffineEquiv","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\np : P\n⊢ Eq (AffineIsometryEquiv.vaddConst 𝕜 p).toAffineEquiv (AffineEquiv.vaddConst 𝕜 p)","decl":"@[simp]\ntheorem vaddConst_toAffineEquiv (p : P) :\n    (vaddConst 𝕜 p).toAffineEquiv = AffineEquiv.vaddConst 𝕜 p :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.coe_constVSub","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\np : P\n⊢ Eq ⇑(AffineIsometryEquiv.constVSub 𝕜 p) fun x => VSub.vsub p x","decl":"@[simp]\ntheorem coe_constVSub (p : P) : ⇑(constVSub 𝕜 p) = (p -ᵥ ·) :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.symm_constVSub","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\np : P\n⊢ Eq (AffineIsometryEquiv.constVSub 𝕜 p).symm ((LinearIsometryEquiv.neg 𝕜).toAffineIsometryEquiv.trans (AffineIsometryEquiv.vaddConst 𝕜 p))","decl":"@[simp]\ntheorem symm_constVSub (p : P) :\n    (constVSub 𝕜 p).symm =\n      (LinearIsometryEquiv.neg 𝕜).toAffineIsometryEquiv.trans (vaddConst 𝕜 p) := by\n  ext\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.coe_constVAdd","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\nv : V\n⊢ Eq ⇑(AffineIsometryEquiv.constVAdd 𝕜 P v) fun x => HVAdd.hVAdd v x","decl":"@[simp]\ntheorem coe_constVAdd (v : V) : ⇑(constVAdd 𝕜 P v : P ≃ᵃⁱ[𝕜] P) = (v +ᵥ ·) :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.constVAdd_zero","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\n⊢ Eq (AffineIsometryEquiv.constVAdd 𝕜 P 0) (AffineIsometryEquiv.refl 𝕜 P)","decl":"@[simp]\ntheorem constVAdd_zero : constVAdd 𝕜 P (0 : V) = refl 𝕜 P :=\n  ext <| zero_vadd V\n\n"}
{"name":"AffineIsometryEquiv.vadd_vsub","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf : P → P₂\nhf : Isometry f\np : P\ng : V → V₂\nhg : ∀ (v : V), Eq (g v) (VSub.vsub (f (HVAdd.hVAdd v p)) (f p))\n⊢ Isometry g","decl":"include 𝕜 in\n/-- The map `g` from `V` to `V₂` corresponding to a map `f` from `P` to `P₂`, at a base point `p`,\nis an isometry if `f` is one. -/\ntheorem vadd_vsub {f : P → P₂} (hf : Isometry f) {p : P} {g : V → V₂}\n    (hg : ∀ v, g v = f (v +ᵥ p) -ᵥ f p) : Isometry g := by\n  convert (vaddConst 𝕜 (f p)).symm.isometry.comp (hf.comp (vaddConst 𝕜 p).isometry)\n  exact funext hg\n\n"}
{"name":"AffineIsometryEquiv.pointReflection_apply","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\nx y : P\n⊢ Eq ((AffineIsometryEquiv.pointReflection 𝕜 x) y) (HVAdd.hVAdd (VSub.vsub x y) x)","decl":"theorem pointReflection_apply (x y : P) : (pointReflection 𝕜 x) y = (x -ᵥ y) +ᵥ x :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.pointReflection_toAffineEquiv","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\nx : P\n⊢ Eq (AffineIsometryEquiv.pointReflection 𝕜 x).toAffineEquiv (AffineEquiv.pointReflection 𝕜 x)","decl":"@[simp]\ntheorem pointReflection_toAffineEquiv (x : P) :\n    (pointReflection 𝕜 x).toAffineEquiv = AffineEquiv.pointReflection 𝕜 x :=\n  rfl\n\n"}
{"name":"AffineIsometryEquiv.pointReflection_self","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\nx : P\n⊢ Eq ((AffineIsometryEquiv.pointReflection 𝕜 x) x) x","decl":"@[simp]\ntheorem pointReflection_self (x : P) : pointReflection 𝕜 x x = x :=\n  AffineEquiv.pointReflection_self 𝕜 x\n\n"}
{"name":"AffineIsometryEquiv.pointReflection_involutive","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\nx : P\n⊢ Function.Involutive ⇑(AffineIsometryEquiv.pointReflection 𝕜 x)","decl":"theorem pointReflection_involutive (x : P) : Function.Involutive (pointReflection 𝕜 x) :=\n  Equiv.pointReflection_involutive x\n\n"}
{"name":"AffineIsometryEquiv.pointReflection_symm","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\nx : P\n⊢ Eq (AffineIsometryEquiv.pointReflection 𝕜 x).symm (AffineIsometryEquiv.pointReflection 𝕜 x)","decl":"@[simp]\ntheorem pointReflection_symm (x : P) : (pointReflection 𝕜 x).symm = pointReflection 𝕜 x :=\n  toAffineEquiv_injective <| AffineEquiv.pointReflection_symm 𝕜 x\n\n"}
{"name":"AffineIsometryEquiv.dist_pointReflection_fixed","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\nx y : P\n⊢ Eq (Dist.dist ((AffineIsometryEquiv.pointReflection 𝕜 x) y) x) (Dist.dist y x)","decl":"@[simp]\ntheorem dist_pointReflection_fixed (x y : P) : dist (pointReflection 𝕜 x y) x = dist y x := by\n  rw [← (pointReflection 𝕜 x).dist_map y x, pointReflection_self]\n\n"}
{"name":"AffineIsometryEquiv.dist_pointReflection_self'","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\nx y : P\n⊢ Eq (Dist.dist ((AffineIsometryEquiv.pointReflection 𝕜 x) y) y) (Norm.norm (HSMul.hSMul 2 (VSub.vsub x y)))","decl":"theorem dist_pointReflection_self' (x y : P) :\n    dist (pointReflection 𝕜 x y) y = ‖2 • (x -ᵥ y)‖ := by\n  rw [pointReflection_apply, dist_eq_norm_vsub V, vadd_vsub_assoc, two_nsmul]\n\n"}
{"name":"AffineIsometryEquiv.dist_pointReflection_self","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁴ : NormedField 𝕜\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace 𝕜 V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\nx y : P\n⊢ Eq (Dist.dist ((AffineIsometryEquiv.pointReflection 𝕜 x) y) y) (HMul.hMul (Norm.norm 2) (Dist.dist x y))","decl":"theorem dist_pointReflection_self (x y : P) :\n    dist (pointReflection 𝕜 x y) y = ‖(2 : 𝕜)‖ * dist x y := by\n  rw [dist_pointReflection_self', two_nsmul, ← two_smul 𝕜, norm_smul, ← dist_eq_norm_vsub V]\n\n"}
{"name":"AffineIsometryEquiv.pointReflection_fixed_iff","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nP : Type u_10\ninst✝⁵ : NormedField 𝕜\ninst✝⁴ : SeminormedAddCommGroup V\ninst✝³ : NormedSpace 𝕜 V\ninst✝² : PseudoMetricSpace P\ninst✝¹ : NormedAddTorsor V P\ninst✝ : Invertible 2\nx y : P\n⊢ Iff (Eq ((AffineIsometryEquiv.pointReflection 𝕜 x) y) y) (Eq y x)","decl":"theorem pointReflection_fixed_iff [Invertible (2 : 𝕜)] {x y : P} :\n    pointReflection 𝕜 x y = y ↔ y = x :=\n  AffineEquiv.pointReflection_fixed_iff_of_module 𝕜\n\n"}
{"name":"AffineIsometryEquiv.dist_pointReflection_self_real","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"V : Type u_2\nP : Type u_10\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : PseudoMetricSpace P\ninst✝¹ : NormedAddTorsor V P\ninst✝ : NormedSpace Real V\nx y : P\n⊢ Eq (Dist.dist ((AffineIsometryEquiv.pointReflection Real x) y) y) (HMul.hMul 2 (Dist.dist x y))","decl":"theorem dist_pointReflection_self_real (x y : P) :\n    dist (pointReflection ℝ x y) y = 2 * dist x y := by\n  rw [dist_pointReflection_self, Real.norm_two]\n\n"}
{"name":"AffineIsometryEquiv.pointReflection_midpoint_left","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"V : Type u_2\nP : Type u_10\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : PseudoMetricSpace P\ninst✝¹ : NormedAddTorsor V P\ninst✝ : NormedSpace Real V\nx y : P\n⊢ Eq ((AffineIsometryEquiv.pointReflection Real (midpoint Real x y)) x) y","decl":"@[simp]\ntheorem pointReflection_midpoint_left (x y : P) : pointReflection ℝ (midpoint ℝ x y) x = y :=\n  AffineEquiv.pointReflection_midpoint_left x y\n\n"}
{"name":"AffineIsometryEquiv.pointReflection_midpoint_right","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"V : Type u_2\nP : Type u_10\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : PseudoMetricSpace P\ninst✝¹ : NormedAddTorsor V P\ninst✝ : NormedSpace Real V\nx y : P\n⊢ Eq ((AffineIsometryEquiv.pointReflection Real (midpoint Real x y)) y) x","decl":"@[simp]\ntheorem pointReflection_midpoint_right (x y : P) : pointReflection ℝ (midpoint ℝ x y) y = x :=\n  AffineEquiv.pointReflection_midpoint_right x y\n\n"}
{"name":"AffineMap.continuous_linear_iff","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf : AffineMap 𝕜 P P₂\n⊢ Iff (Continuous ⇑f.linear) (Continuous ⇑f)","decl":"/-- If `f` is an affine map, then its linear part is continuous iff `f` is continuous. -/\ntheorem AffineMap.continuous_linear_iff {f : P →ᵃ[𝕜] P₂} : Continuous f.linear ↔ Continuous f := by\n  inhabit P\n  have :\n    (f.linear : V → V₂) =\n      (AffineIsometryEquiv.vaddConst 𝕜 <| f default).toHomeomorph.symm ∘\n        f ∘ (AffineIsometryEquiv.vaddConst 𝕜 default).toHomeomorph := by\n    ext v\n    simp\n  rw [this]\n  simp only [Homeomorph.comp_continuous_iff, Homeomorph.comp_continuous_iff']\n\n"}
{"name":"AffineMap.isOpenMap_linear_iff","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV : Type u_2\nV₂ : Type u_5\nP : Type u_10\nP₂ : Type u_11\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : SeminormedAddCommGroup V\ninst✝⁶ : NormedSpace 𝕜 V\ninst✝⁵ : PseudoMetricSpace P\ninst✝⁴ : NormedAddTorsor V P\ninst✝³ : SeminormedAddCommGroup V₂\ninst✝² : NormedSpace 𝕜 V₂\ninst✝¹ : PseudoMetricSpace P₂\ninst✝ : NormedAddTorsor V₂ P₂\nf : AffineMap 𝕜 P P₂\n⊢ Iff (IsOpenMap ⇑f.linear) (IsOpenMap ⇑f)","decl":"/-- If `f` is an affine map, then its linear part is an open map iff `f` is an open map. -/\ntheorem AffineMap.isOpenMap_linear_iff {f : P →ᵃ[𝕜] P₂} : IsOpenMap f.linear ↔ IsOpenMap f := by\n  inhabit P\n  have :\n    (f.linear : V → V₂) =\n      (AffineIsometryEquiv.vaddConst 𝕜 <| f default).toHomeomorph.symm ∘\n        f ∘ (AffineIsometryEquiv.vaddConst 𝕜 default).toHomeomorph := by\n    ext v\n    simp\n  rw [this]\n  simp only [Homeomorph.comp_isOpenMap_iff, Homeomorph.comp_isOpenMap_iff']\n\n"}
{"name":"AffineSubspace.equivMapOfInjective_toFun","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV₁ : Type u_3\nV₂ : Type u_5\nP₁ : Type u_8\nP₂ : Type u_11\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : SeminormedAddCommGroup V₁\ninst✝⁷ : NormedSpace 𝕜 V₁\ninst✝⁶ : PseudoMetricSpace P₁\ninst✝⁵ : NormedAddTorsor V₁ P₁\ninst✝⁴ : SeminormedAddCommGroup V₂\ninst✝³ : NormedSpace 𝕜 V₂\ninst✝² : PseudoMetricSpace P₂\ninst✝¹ : NormedAddTorsor V₂ P₂\nE : AffineSubspace 𝕜 P₁\ninst✝ : Nonempty (Subtype fun x => Membership.mem E x)\nφ : AffineMap 𝕜 P₁ P₂\nhφ : Function.Injective ⇑φ\np : ↑↑E\n⊢ Eq ((E.equivMapOfInjective φ hφ) p) ⟨φ ↑p, ⋯⟩","decl":"/-- An affine subspace is isomorphic to its image under an injective affine map.\nThis is the affine version of `Submodule.equivMapOfInjective`.\n-/\n@[simps linear, simps! toFun]\nnoncomputable def equivMapOfInjective (E : AffineSubspace 𝕜 P₁) [Nonempty E] (φ : P₁ →ᵃ[𝕜] P₂)\n    (hφ : Function.Injective φ) : E ≃ᵃ[𝕜] E.map φ :=\n  { Equiv.Set.image _ (E : Set P₁) hφ with\n    linear :=\n      (E.direction.equivMapOfInjective φ.linear (φ.linear_injective_iff.mpr hφ)).trans\n        (LinearEquiv.ofEq _ _ (AffineSubspace.map_direction _ _).symm)\n    map_vadd' := fun p v => Subtype.ext <| φ.map_vadd p v }\n\n"}
{"name":"AffineSubspace.linear_equivMapOfInjective","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV₁ : Type u_3\nV₂ : Type u_5\nP₁ : Type u_8\nP₂ : Type u_11\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : SeminormedAddCommGroup V₁\ninst✝⁷ : NormedSpace 𝕜 V₁\ninst✝⁶ : PseudoMetricSpace P₁\ninst✝⁵ : NormedAddTorsor V₁ P₁\ninst✝⁴ : SeminormedAddCommGroup V₂\ninst✝³ : NormedSpace 𝕜 V₂\ninst✝² : PseudoMetricSpace P₂\ninst✝¹ : NormedAddTorsor V₂ P₂\nE : AffineSubspace 𝕜 P₁\ninst✝ : Nonempty (Subtype fun x => Membership.mem E x)\nφ : AffineMap 𝕜 P₁ P₂\nhφ : Function.Injective ⇑φ\n⊢ Eq (E.equivMapOfInjective φ hφ).linear ((Submodule.equivMapOfInjective φ.linear ⋯ E.direction).trans (LinearEquiv.ofEq (Submodule.map φ.linear E.direction) (AffineSubspace.map φ E).direction ⋯))","decl":"/-- An affine subspace is isomorphic to its image under an injective affine map.\nThis is the affine version of `Submodule.equivMapOfInjective`.\n-/\n@[simps linear, simps! toFun]\nnoncomputable def equivMapOfInjective (E : AffineSubspace 𝕜 P₁) [Nonempty E] (φ : P₁ →ᵃ[𝕜] P₂)\n    (hφ : Function.Injective φ) : E ≃ᵃ[𝕜] E.map φ :=\n  { Equiv.Set.image _ (E : Set P₁) hφ with\n    linear :=\n      (E.direction.equivMapOfInjective φ.linear (φ.linear_injective_iff.mpr hφ)).trans\n        (LinearEquiv.ofEq _ _ (AffineSubspace.map_direction _ _).symm)\n    map_vadd' := fun p v => Subtype.ext <| φ.map_vadd p v }\n\n"}
{"name":"AffineSubspace.isometryEquivMap.apply_symm_apply","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV₁' : Type u_4\nV₂ : Type u_5\nP₁' : Type u_9\nP₂ : Type u_11\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : SeminormedAddCommGroup V₁'\ninst✝⁷ : NormedSpace 𝕜 V₁'\ninst✝⁶ : MetricSpace P₁'\ninst✝⁵ : NormedAddTorsor V₁' P₁'\ninst✝⁴ : SeminormedAddCommGroup V₂\ninst✝³ : NormedSpace 𝕜 V₂\ninst✝² : PseudoMetricSpace P₂\ninst✝¹ : NormedAddTorsor V₂ P₂\nE : AffineSubspace 𝕜 P₁'\ninst✝ : Nonempty (Subtype fun x => Membership.mem E x)\nφ : AffineIsometry 𝕜 P₁' P₂\nx : Subtype fun x => Membership.mem (AffineSubspace.map φ.toAffineMap E) x\n⊢ Eq (φ ↑((AffineSubspace.isometryEquivMap φ E).symm x)) ↑x","decl":"@[simp]\ntheorem isometryEquivMap.apply_symm_apply {E : AffineSubspace 𝕜 P₁'} [Nonempty E]\n    {φ : P₁' →ᵃⁱ[𝕜] P₂} (x : E.map φ.toAffineMap) : φ ((E.isometryEquivMap φ).symm x) = x :=\n  congr_arg Subtype.val <| (E.isometryEquivMap φ).apply_symm_apply _\n\n"}
{"name":"AffineSubspace.isometryEquivMap.coe_apply","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV₁' : Type u_4\nV₂ : Type u_5\nP₁' : Type u_9\nP₂ : Type u_11\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : SeminormedAddCommGroup V₁'\ninst✝⁷ : NormedSpace 𝕜 V₁'\ninst✝⁶ : MetricSpace P₁'\ninst✝⁵ : NormedAddTorsor V₁' P₁'\ninst✝⁴ : SeminormedAddCommGroup V₂\ninst✝³ : NormedSpace 𝕜 V₂\ninst✝² : PseudoMetricSpace P₂\ninst✝¹ : NormedAddTorsor V₂ P₂\nφ : AffineIsometry 𝕜 P₁' P₂\nE : AffineSubspace 𝕜 P₁'\ninst✝ : Nonempty (Subtype fun x => Membership.mem E x)\ng : Subtype fun x => Membership.mem E x\n⊢ Eq (↑((AffineSubspace.isometryEquivMap φ E) g)) (φ ↑g)","decl":"@[simp]\ntheorem isometryEquivMap.coe_apply (φ : P₁' →ᵃⁱ[𝕜] P₂) (E : AffineSubspace 𝕜 P₁') [Nonempty E]\n    (g : E) : ↑(E.isometryEquivMap φ g) = φ g :=\n  rfl\n\n"}
{"name":"AffineSubspace.isometryEquivMap.toAffineMap_eq","module":"Mathlib.Analysis.Normed.Affine.Isometry","initialProofState":"𝕜 : Type u_1\nV₁' : Type u_4\nV₂ : Type u_5\nP₁' : Type u_9\nP₂ : Type u_11\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : SeminormedAddCommGroup V₁'\ninst✝⁷ : NormedSpace 𝕜 V₁'\ninst✝⁶ : MetricSpace P₁'\ninst✝⁵ : NormedAddTorsor V₁' P₁'\ninst✝⁴ : SeminormedAddCommGroup V₂\ninst✝³ : NormedSpace 𝕜 V₂\ninst✝² : PseudoMetricSpace P₂\ninst✝¹ : NormedAddTorsor V₂ P₂\nφ : AffineIsometry 𝕜 P₁' P₂\nE : AffineSubspace 𝕜 P₁'\ninst✝ : Nonempty (Subtype fun x => Membership.mem E x)\n⊢ Eq ↑(AffineSubspace.isometryEquivMap φ E).toAffineEquiv ↑(E.equivMapOfInjective φ.toAffineMap ⋯)","decl":"@[simp]\ntheorem isometryEquivMap.toAffineMap_eq (φ : P₁' →ᵃⁱ[𝕜] P₂) (E : AffineSubspace 𝕜 P₁')\n    [Nonempty E] :\n    (E.isometryEquivMap φ).toAffineMap = E.equivMapOfInjective φ.toAffineMap φ.injective :=\n  rfl\n\n"}
