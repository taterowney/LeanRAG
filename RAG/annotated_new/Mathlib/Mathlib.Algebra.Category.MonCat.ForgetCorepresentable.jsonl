{"name":"MonoidHom.fromMultiplicativeNatEquiv_apply","module":"Mathlib.Algebra.Category.MonCat.ForgetCorepresentable","initialProofState":"α : Type u\ninst✝ : Monoid α\nφ : MonoidHom (Multiplicative Nat) α\n⊢ Eq ((MonoidHom.fromMultiplicativeNatEquiv α) φ) (φ (Multiplicative.ofAdd 1))","decl":"/-- The equivalence `(Multiplicative ℕ →* α) ≃ α` for any monoid `α`. -/\n@[simps]\ndef fromMultiplicativeNatEquiv (α : Type u) [Monoid α] : (Multiplicative ℕ →* α) ≃ α where\n  toFun φ := φ (Multiplicative.ofAdd 1)\n  invFun x := powersHom α x\n  left_inv φ := by ext; simp\n  right_inv x := by simp\n\n"}
{"name":"MonoidHom.fromMultiplicativeNatEquiv_symm_apply","module":"Mathlib.Algebra.Category.MonCat.ForgetCorepresentable","initialProofState":"α : Type u\ninst✝ : Monoid α\nx : α\n⊢ Eq ((MonoidHom.fromMultiplicativeNatEquiv α).symm x) ((powersHom α) x)","decl":"/-- The equivalence `(Multiplicative ℕ →* α) ≃ α` for any monoid `α`. -/\n@[simps]\ndef fromMultiplicativeNatEquiv (α : Type u) [Monoid α] : (Multiplicative ℕ →* α) ≃ α where\n  toFun φ := φ (Multiplicative.ofAdd 1)\n  invFun x := powersHom α x\n  left_inv φ := by ext; simp\n  right_inv x := by simp\n\n"}
{"name":"MonoidHom.fromULiftMultiplicativeNatEquiv_symm_apply_apply","module":"Mathlib.Algebra.Category.MonCat.ForgetCorepresentable","initialProofState":"α : Type u\ninst✝ : Monoid α\na✝¹ : α\na✝ : ULift.{u, 0} (Multiplicative Nat)\n⊢ Eq (((MonoidHom.fromULiftMultiplicativeNatEquiv α).symm a✝¹) a✝) (HPow.hPow a✝¹ (Multiplicative.toAdd (MulEquiv.ulift a✝)))","decl":"/-- The equivalence `(ULift (Multiplicative ℕ) →* α) ≃ α` for any monoid `α`. -/\n@[simps!]\ndef fromULiftMultiplicativeNatEquiv (α : Type u) [Monoid α] :\n    (ULift.{u} (Multiplicative ℕ) →* α) ≃ α :=\n  (precompEquiv (MulEquiv.ulift.symm) _).trans (fromMultiplicativeNatEquiv α)\n\n"}
{"name":"MonoidHom.fromULiftMultiplicativeNatEquiv_apply","module":"Mathlib.Algebra.Category.MonCat.ForgetCorepresentable","initialProofState":"α : Type u\ninst✝ : Monoid α\na✝ : MonoidHom (ULift.{u, 0} (Multiplicative Nat)) α\n⊢ Eq ((MonoidHom.fromULiftMultiplicativeNatEquiv α) a✝) (a✝ (MulEquiv.ulift.symm (Multiplicative.ofAdd 1)))","decl":"/-- The equivalence `(ULift (Multiplicative ℕ) →* α) ≃ α` for any monoid `α`. -/\n@[simps!]\ndef fromULiftMultiplicativeNatEquiv (α : Type u) [Monoid α] :\n    (ULift.{u} (Multiplicative ℕ) →* α) ≃ α :=\n  (precompEquiv (MulEquiv.ulift.symm) _).trans (fromMultiplicativeNatEquiv α)\n\n"}
{"name":"AddMonoidHom.fromNatEquiv_symm_apply","module":"Mathlib.Algebra.Category.MonCat.ForgetCorepresentable","initialProofState":"α : Type u\ninst✝ : AddMonoid α\nx : α\n⊢ Eq ((AddMonoidHom.fromNatEquiv α).symm x) ((multiplesHom α) x)","decl":"/-- The equivalence `(ℤ →+ α) ≃ α` for any additive group `α`. -/\n@[simps]\ndef fromNatEquiv (α : Type u) [AddMonoid α] : (ℕ →+ α) ≃ α where\n  toFun φ := φ 1\n  invFun x := multiplesHom α x\n  left_inv φ := by ext; simp\n  right_inv x := by simp\n\n"}
{"name":"AddMonoidHom.fromNatEquiv_apply","module":"Mathlib.Algebra.Category.MonCat.ForgetCorepresentable","initialProofState":"α : Type u\ninst✝ : AddMonoid α\nφ : AddMonoidHom Nat α\n⊢ Eq ((AddMonoidHom.fromNatEquiv α) φ) (φ 1)","decl":"/-- The equivalence `(ℤ →+ α) ≃ α` for any additive group `α`. -/\n@[simps]\ndef fromNatEquiv (α : Type u) [AddMonoid α] : (ℕ →+ α) ≃ α where\n  toFun φ := φ 1\n  invFun x := multiplesHom α x\n  left_inv φ := by ext; simp\n  right_inv x := by simp\n\n"}
{"name":"AddMonoidHom.fromULiftNatEquiv_symm_apply_apply","module":"Mathlib.Algebra.Category.MonCat.ForgetCorepresentable","initialProofState":"α : Type u\ninst✝ : AddMonoid α\na✝¹ : α\na✝ : ULift.{u, 0} Nat\n⊢ Eq (((AddMonoidHom.fromULiftNatEquiv α).symm a✝¹) a✝) (HSMul.hSMul (AddEquiv.ulift a✝) a✝¹)","decl":"/-- The equivalence `(ULift ℕ →+ α) ≃ α` for any additive monoid `α`. -/\n@[simps!]\ndef fromULiftNatEquiv (α : Type u) [AddMonoid α] : (ULift.{u} ℕ →+ α) ≃ α :=\n  (precompEquiv (AddEquiv.ulift.symm) _).trans (fromNatEquiv α)\n\n"}
{"name":"AddMonoidHom.fromULiftNatEquiv_apply","module":"Mathlib.Algebra.Category.MonCat.ForgetCorepresentable","initialProofState":"α : Type u\ninst✝ : AddMonoid α\na✝ : AddMonoidHom (ULift.{u, 0} Nat) α\n⊢ Eq ((AddMonoidHom.fromULiftNatEquiv α) a✝) (a✝ (AddEquiv.ulift.symm 1))","decl":"/-- The equivalence `(ULift ℕ →+ α) ≃ α` for any additive monoid `α`. -/\n@[simps!]\ndef fromULiftNatEquiv (α : Type u) [AddMonoid α] : (ULift.{u} ℕ →+ α) ≃ α :=\n  (precompEquiv (AddEquiv.ulift.symm) _).trans (fromNatEquiv α)\n\n"}
{"name":"MonCat.forget_isCorepresentable","module":"Mathlib.Algebra.Category.MonCat.ForgetCorepresentable","initialProofState":"⊢ (CategoryTheory.forget MonCat).IsCorepresentable","decl":"instance MonCat.forget_isCorepresentable :\n    (forget MonCat.{u}).IsCorepresentable :=\n  Functor.IsCorepresentable.mk' MonCat.coyonedaObjIsoForget\n\n"}
{"name":"CommMonCat.forget_isCorepresentable","module":"Mathlib.Algebra.Category.MonCat.ForgetCorepresentable","initialProofState":"⊢ (CategoryTheory.forget CommMonCat).IsCorepresentable","decl":"instance CommMonCat.forget_isCorepresentable :\n    (forget CommMonCat.{u}).IsCorepresentable :=\n  Functor.IsCorepresentable.mk' CommMonCat.coyonedaObjIsoForget\n\n"}
{"name":"AddMonCat.forget_isCorepresentable","module":"Mathlib.Algebra.Category.MonCat.ForgetCorepresentable","initialProofState":"⊢ (CategoryTheory.forget AddMonCat).IsCorepresentable","decl":"instance AddMonCat.forget_isCorepresentable :\n    (forget AddMonCat.{u}).IsCorepresentable :=\n  Functor.IsCorepresentable.mk' AddMonCat.coyonedaObjIsoForget\n\n"}
{"name":"AddCommMonCat.forget_isCorepresentable","module":"Mathlib.Algebra.Category.MonCat.ForgetCorepresentable","initialProofState":"⊢ (CategoryTheory.forget AddCommMonCat).IsCorepresentable","decl":"instance AddCommMonCat.forget_isCorepresentable :\n    (forget AddCommMonCat.{u}).IsCorepresentable :=\n  Functor.IsCorepresentable.mk' AddCommMonCat.coyonedaObjIsoForget\n"}
