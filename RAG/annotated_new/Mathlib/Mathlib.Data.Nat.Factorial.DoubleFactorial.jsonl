{"name":"Nat.doubleFactorial_pos","module":"Mathlib.Data.Nat.Factorial.DoubleFactorial","initialProofState":"n : Nat\n⊢ LT.lt 0 n.doubleFactorial","decl":"lemma doubleFactorial_pos : ∀ n, 0 < n‼\n  | 0 | 1 => zero_lt_one\n  | _n + 2 => mul_pos (succ_pos _) (doubleFactorial_pos _)\n\n"}
{"name":"Nat.doubleFactorial_add_two","module":"Mathlib.Data.Nat.Factorial.DoubleFactorial","initialProofState":"n : Nat\n⊢ Eq (HAdd.hAdd n 2).doubleFactorial (HMul.hMul (HAdd.hAdd n 2) n.doubleFactorial)","decl":"theorem doubleFactorial_add_two (n : ℕ) : (n + 2)‼ = (n + 2) * n‼ :=\n  rfl\n\n"}
{"name":"Nat.doubleFactorial_add_one","module":"Mathlib.Data.Nat.Factorial.DoubleFactorial","initialProofState":"n : Nat\n⊢ Eq (HAdd.hAdd n 1).doubleFactorial (HMul.hMul (HAdd.hAdd n 1) (HSub.hSub n 1).doubleFactorial)","decl":"theorem doubleFactorial_add_one (n : ℕ) : (n + 1)‼ = (n + 1) * (n - 1)‼ := by cases n <;> rfl\n\n"}
{"name":"Nat.factorial_eq_mul_doubleFactorial","module":"Mathlib.Data.Nat.Factorial.DoubleFactorial","initialProofState":"n : Nat\n⊢ Eq (HAdd.hAdd n 1).factorial (HMul.hMul (HAdd.hAdd n 1).doubleFactorial n.doubleFactorial)","decl":"theorem factorial_eq_mul_doubleFactorial : ∀ n : ℕ, (n + 1)! = (n + 1)‼ * n‼\n  | 0 => rfl\n  | k + 1 => by\n    rw [doubleFactorial_add_two, factorial, factorial_eq_mul_doubleFactorial _, mul_comm _ k‼,\n      mul_assoc]\n\n"}
{"name":"Nat.doubleFactorial_le_factorial","module":"Mathlib.Data.Nat.Factorial.DoubleFactorial","initialProofState":"n : Nat\n⊢ LE.le n.doubleFactorial n.factorial","decl":"lemma doubleFactorial_le_factorial : ∀ n, n‼ ≤ n !\n  | 0 => le_rfl\n  | n + 1 => by\n    rw [factorial_eq_mul_doubleFactorial]; exact Nat.le_mul_of_pos_right _ n.doubleFactorial_pos\n\n"}
{"name":"Nat.doubleFactorial_two_mul","module":"Mathlib.Data.Nat.Factorial.DoubleFactorial","initialProofState":"n : Nat\n⊢ Eq (HMul.hMul 2 n).doubleFactorial (HMul.hMul (HPow.hPow 2 n) n.factorial)","decl":"theorem doubleFactorial_two_mul : ∀ n : ℕ, (2 * n)‼ = 2 ^ n * n !\n  | 0 => rfl\n  | n + 1 => by\n    rw [mul_add, mul_one, doubleFactorial_add_two, factorial, pow_succ, doubleFactorial_two_mul _,\n      succ_eq_add_one]\n    ring\n\n"}
{"name":"Nat.doubleFactorial_eq_prod_even","module":"Mathlib.Data.Nat.Factorial.DoubleFactorial","initialProofState":"n : Nat\n⊢ Eq (HMul.hMul 2 n).doubleFactorial ((Finset.range n).prod fun i => HMul.hMul 2 (HAdd.hAdd i 1))","decl":"theorem doubleFactorial_eq_prod_even : ∀ n : ℕ, (2 * n)‼ = ∏ i ∈ Finset.range n, 2 * (i + 1)\n  | 0 => rfl\n  | n + 1 => by\n    rw [Finset.prod_range_succ, ← doubleFactorial_eq_prod_even _, mul_comm (2 * n)‼,\n      (by ring : 2 * (n + 1) = 2 * n + 2)]\n    rfl\n\n"}
{"name":"Nat.doubleFactorial_eq_prod_odd","module":"Mathlib.Data.Nat.Factorial.DoubleFactorial","initialProofState":"n : Nat\n⊢ Eq (HAdd.hAdd (HMul.hMul 2 n) 1).doubleFactorial ((Finset.range n).prod fun i => HAdd.hAdd (HMul.hMul 2 (HAdd.hAdd i 1)) 1)","decl":"theorem doubleFactorial_eq_prod_odd :\n    ∀ n : ℕ, (2 * n + 1)‼ = ∏ i ∈ Finset.range n, (2 * (i + 1) + 1)\n  | 0 => rfl\n  | n + 1 => by\n    rw [Finset.prod_range_succ, ← doubleFactorial_eq_prod_odd _, mul_comm (2 * n + 1)‼,\n      (by ring : 2 * (n + 1) + 1 = 2 * n + 1 + 2)]\n    rfl\n\n"}
