{"name":"EquicontinuousAt.equicontinuousWithinAt","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nx‚ÇÄ : X\nH : EquicontinuousAt F x‚ÇÄ\nS : Set X\n‚ä¢ EquicontinuousWithinAt F S x‚ÇÄ","decl":"lemma EquicontinuousAt.equicontinuousWithinAt {F : Œπ ‚Üí X ‚Üí Œ±} {x‚ÇÄ : X} (H : EquicontinuousAt F x‚ÇÄ)\n    (S : Set X) : EquicontinuousWithinAt F S x‚ÇÄ :=\n  fun U hU ‚Ü¶ (H U hU).filter_mono inf_le_left\n\n"}
{"name":"EquicontinuousWithinAt.mono","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nx‚ÇÄ : X\nS T : Set X\nH : EquicontinuousWithinAt F T x‚ÇÄ\nhST : HasSubset.Subset S T\n‚ä¢ EquicontinuousWithinAt F S x‚ÇÄ","decl":"lemma EquicontinuousWithinAt.mono {F : Œπ ‚Üí X ‚Üí Œ±} {x‚ÇÄ : X} {S T : Set X}\n    (H : EquicontinuousWithinAt F T x‚ÇÄ) (hST : S ‚äÜ T) : EquicontinuousWithinAt F S x‚ÇÄ :=\n  fun U hU ‚Ü¶ (H U hU).filter_mono <| nhdsWithin_mono x‚ÇÄ hST\n\n"}
{"name":"equicontinuousWithinAt_univ","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nx‚ÇÄ : X\n‚ä¢ Iff (EquicontinuousWithinAt F Set.univ x‚ÇÄ) (EquicontinuousAt F x‚ÇÄ)","decl":"@[simp] lemma equicontinuousWithinAt_univ (F : Œπ ‚Üí X ‚Üí Œ±) (x‚ÇÄ : X) :\n    EquicontinuousWithinAt F univ x‚ÇÄ ‚Üî EquicontinuousAt F x‚ÇÄ := by\n  rw [EquicontinuousWithinAt, EquicontinuousAt, nhdsWithin_univ]\n\n"}
{"name":"equicontinuousAt_restrict_iff","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\nx‚ÇÄ : ‚ÜëS\n‚ä¢ Iff (EquicontinuousAt (Function.comp S.restrict F) x‚ÇÄ) (EquicontinuousWithinAt F S ‚Üëx‚ÇÄ)","decl":"lemma equicontinuousAt_restrict_iff (F : Œπ ‚Üí X ‚Üí Œ±) {S : Set X} (x‚ÇÄ : S) :\n    EquicontinuousAt (S.restrict ‚àò F) x‚ÇÄ ‚Üî EquicontinuousWithinAt F S x‚ÇÄ := by\n  simp [EquicontinuousWithinAt, EquicontinuousAt,\n    ‚Üê eventually_nhds_subtype_iff]\n\n"}
{"name":"Equicontinuous.equicontinuousOn","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nH : Equicontinuous F\nS : Set X\n‚ä¢ EquicontinuousOn F S","decl":"lemma Equicontinuous.equicontinuousOn {F : Œπ ‚Üí X ‚Üí Œ±} (H : Equicontinuous F)\n    (S : Set X) : EquicontinuousOn F S :=\n  fun x _ ‚Ü¶ (H x).equicontinuousWithinAt S\n\n"}
{"name":"EquicontinuousOn.mono","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nS T : Set X\nH : EquicontinuousOn F T\nhST : HasSubset.Subset S T\n‚ä¢ EquicontinuousOn F S","decl":"lemma EquicontinuousOn.mono {F : Œπ ‚Üí X ‚Üí Œ±} {S T : Set X}\n    (H : EquicontinuousOn F T) (hST : S ‚äÜ T) : EquicontinuousOn F S :=\n  fun x hx ‚Ü¶ (H x (hST hx)).mono hST\n\n"}
{"name":"equicontinuousOn_univ","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\n‚ä¢ Iff (EquicontinuousOn F Set.univ) (Equicontinuous F)","decl":"lemma equicontinuousOn_univ (F : Œπ ‚Üí X ‚Üí Œ±) :\n    EquicontinuousOn F univ ‚Üî Equicontinuous F := by\n  simp [EquicontinuousOn, Equicontinuous]\n\n"}
{"name":"equicontinuous_restrict_iff","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\n‚ä¢ Iff (Equicontinuous (Function.comp S.restrict F)) (EquicontinuousOn F S)","decl":"lemma equicontinuous_restrict_iff (F : Œπ ‚Üí X ‚Üí Œ±) {S : Set X} :\n    Equicontinuous (S.restrict ‚àò F) ‚Üî EquicontinuousOn F S := by\n  simp [Equicontinuous, EquicontinuousOn, equicontinuousAt_restrict_iff]\n\n"}
{"name":"UniformEquicontinuous.uniformEquicontinuousOn","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nH : UniformEquicontinuous F\nS : Set Œ≤\n‚ä¢ UniformEquicontinuousOn F S","decl":"lemma UniformEquicontinuous.uniformEquicontinuousOn {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} (H : UniformEquicontinuous F)\n    (S : Set Œ≤) : UniformEquicontinuousOn F S :=\n  fun U hU ‚Ü¶ (H U hU).filter_mono inf_le_left\n\n"}
{"name":"UniformEquicontinuousOn.mono","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nS T : Set Œ≤\nH : UniformEquicontinuousOn F T\nhST : HasSubset.Subset S T\n‚ä¢ UniformEquicontinuousOn F S","decl":"lemma UniformEquicontinuousOn.mono {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} {S T : Set Œ≤}\n    (H : UniformEquicontinuousOn F T) (hST : S ‚äÜ T) : UniformEquicontinuousOn F S :=\n  fun U hU ‚Ü¶ (H U hU).filter_mono <| by gcongr\n\n"}
{"name":"uniformEquicontinuousOn_univ","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\n‚ä¢ Iff (UniformEquicontinuousOn F Set.univ) (UniformEquicontinuous F)","decl":"lemma uniformEquicontinuousOn_univ (F : Œπ ‚Üí Œ≤ ‚Üí Œ±) :\n    UniformEquicontinuousOn F univ ‚Üî UniformEquicontinuous F := by\n  simp [UniformEquicontinuousOn, UniformEquicontinuous]\n\n"}
{"name":"uniformEquicontinuous_restrict_iff","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nS : Set Œ≤\n‚ä¢ Iff (UniformEquicontinuous (Function.comp S.restrict F)) (UniformEquicontinuousOn F S)","decl":"lemma uniformEquicontinuous_restrict_iff (F : Œπ ‚Üí Œ≤ ‚Üí Œ±) {S : Set Œ≤} :\n    UniformEquicontinuous (S.restrict ‚àò F) ‚Üî UniformEquicontinuousOn F S := by\n  rw [UniformEquicontinuous, UniformEquicontinuousOn]\n  conv in _ ‚äì _ => rw [‚Üê Subtype.range_val (s := S), ‚Üê range_prod_map, ‚Üê map_comap]\n  rfl\n\n"}
{"name":"equicontinuousAt_empty","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nh : IsEmpty Œπ\nF : Œπ ‚Üí X ‚Üí Œ±\nx‚ÇÄ : X\n‚ä¢ EquicontinuousAt F x‚ÇÄ","decl":"@[simp]\nlemma equicontinuousAt_empty [h : IsEmpty Œπ] (F : Œπ ‚Üí X ‚Üí Œ±) (x‚ÇÄ : X) :\n    EquicontinuousAt F x‚ÇÄ :=\n  fun _ _ ‚Ü¶ Eventually.of_forall (fun _ ‚Ü¶ h.elim)\n\n"}
{"name":"equicontinuousWithinAt_empty","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nh : IsEmpty Œπ\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\nx‚ÇÄ : X\n‚ä¢ EquicontinuousWithinAt F S x‚ÇÄ","decl":"@[simp]\nlemma equicontinuousWithinAt_empty [h : IsEmpty Œπ] (F : Œπ ‚Üí X ‚Üí Œ±) (S : Set X) (x‚ÇÄ : X) :\n    EquicontinuousWithinAt F S x‚ÇÄ :=\n  fun _ _ ‚Ü¶ Eventually.of_forall (fun _ ‚Ü¶ h.elim)\n\n"}
{"name":"equicontinuous_empty","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\ninst‚úù : IsEmpty Œπ\nF : Œπ ‚Üí X ‚Üí Œ±\n‚ä¢ Equicontinuous F","decl":"@[simp]\nlemma equicontinuous_empty [IsEmpty Œπ] (F : Œπ ‚Üí X ‚Üí Œ±) :\n    Equicontinuous F :=\n  equicontinuousAt_empty F\n\n"}
{"name":"equicontinuousOn_empty","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\ninst‚úù : IsEmpty Œπ\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\n‚ä¢ EquicontinuousOn F S","decl":"@[simp]\nlemma equicontinuousOn_empty [IsEmpty Œπ] (F : Œπ ‚Üí X ‚Üí Œ±) (S : Set X) :\n    EquicontinuousOn F S :=\n  fun x‚ÇÄ _ ‚Ü¶ equicontinuousWithinAt_empty F S x‚ÇÄ\n\n"}
{"name":"uniformEquicontinuous_empty","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nh : IsEmpty Œπ\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\n‚ä¢ UniformEquicontinuous F","decl":"@[simp]\nlemma uniformEquicontinuous_empty [h : IsEmpty Œπ] (F : Œπ ‚Üí Œ≤ ‚Üí Œ±) :\n    UniformEquicontinuous F :=\n  fun _ _ ‚Ü¶ Eventually.of_forall (fun _ ‚Ü¶ h.elim)\n\n"}
{"name":"uniformEquicontinuousOn_empty","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nh : IsEmpty Œπ\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nS : Set Œ≤\n‚ä¢ UniformEquicontinuousOn F S","decl":"@[simp]\nlemma uniformEquicontinuousOn_empty [h : IsEmpty Œπ] (F : Œπ ‚Üí Œ≤ ‚Üí Œ±) (S : Set Œ≤) :\n    UniformEquicontinuousOn F S :=\n  fun _ _ ‚Ü¶ Eventually.of_forall (fun _ ‚Ü¶ h.elim)\n\n"}
{"name":"equicontinuousAt_finite","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\ninst‚úù : Finite Œπ\nF : Œπ ‚Üí X ‚Üí Œ±\nx‚ÇÄ : X\n‚ä¢ Iff (EquicontinuousAt F x‚ÇÄ) (‚àÄ (i : Œπ), ContinuousAt (F i) x‚ÇÄ)","decl":"theorem equicontinuousAt_finite [Finite Œπ] {F : Œπ ‚Üí X ‚Üí Œ±} {x‚ÇÄ : X} :\n    EquicontinuousAt F x‚ÇÄ ‚Üî ‚àÄ i, ContinuousAt (F i) x‚ÇÄ := by\n  simp [EquicontinuousAt, ContinuousAt, (nhds_basis_uniformity' (ùì§ Œ±).basis_sets).tendsto_right_iff,\n    UniformSpace.ball, @forall_swap _ Œπ]\n\n"}
{"name":"equicontinuousWithinAt_finite","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\ninst‚úù : Finite Œπ\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\nx‚ÇÄ : X\n‚ä¢ Iff (EquicontinuousWithinAt F S x‚ÇÄ) (‚àÄ (i : Œπ), ContinuousWithinAt (F i) S x‚ÇÄ)","decl":"theorem equicontinuousWithinAt_finite [Finite Œπ] {F : Œπ ‚Üí X ‚Üí Œ±} {S : Set X} {x‚ÇÄ : X} :\n    EquicontinuousWithinAt F S x‚ÇÄ ‚Üî ‚àÄ i, ContinuousWithinAt (F i) S x‚ÇÄ := by\n  simp [EquicontinuousWithinAt, ContinuousWithinAt,\n    (nhds_basis_uniformity' (ùì§ Œ±).basis_sets).tendsto_right_iff, UniformSpace.ball,\n    @forall_swap _ Œπ]\n\n"}
{"name":"equicontinuous_finite","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\ninst‚úù : Finite Œπ\nF : Œπ ‚Üí X ‚Üí Œ±\n‚ä¢ Iff (Equicontinuous F) (‚àÄ (i : Œπ), Continuous (F i))","decl":"theorem equicontinuous_finite [Finite Œπ] {F : Œπ ‚Üí X ‚Üí Œ±} :\n    Equicontinuous F ‚Üî ‚àÄ i, Continuous (F i) := by\n  simp only [Equicontinuous, equicontinuousAt_finite, continuous_iff_continuousAt, @forall_swap Œπ]\n\n"}
{"name":"equicontinuousOn_finite","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\ninst‚úù : Finite Œπ\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\n‚ä¢ Iff (EquicontinuousOn F S) (‚àÄ (i : Œπ), ContinuousOn (F i) S)","decl":"theorem equicontinuousOn_finite [Finite Œπ] {F : Œπ ‚Üí X ‚Üí Œ±} {S : Set X} :\n    EquicontinuousOn F S ‚Üî ‚àÄ i, ContinuousOn (F i) S := by\n  simp only [EquicontinuousOn, equicontinuousWithinAt_finite, ContinuousOn, @forall_swap Œπ]\n\n"}
{"name":"uniformEquicontinuous_finite","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\ninst‚úù : Finite Œπ\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\n‚ä¢ Iff (UniformEquicontinuous F) (‚àÄ (i : Œπ), UniformContinuous (F i))","decl":"theorem uniformEquicontinuous_finite [Finite Œπ] {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} :\n    UniformEquicontinuous F ‚Üî ‚àÄ i, UniformContinuous (F i) := by\n  simp only [UniformEquicontinuous, eventually_all, @forall_swap _ Œπ]; rfl\n\n"}
{"name":"uniformEquicontinuousOn_finite","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\ninst‚úù : Finite Œπ\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nS : Set Œ≤\n‚ä¢ Iff (UniformEquicontinuousOn F S) (‚àÄ (i : Œπ), UniformContinuousOn (F i) S)","decl":"theorem uniformEquicontinuousOn_finite [Finite Œπ] {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} {S : Set Œ≤} :\n    UniformEquicontinuousOn F S ‚Üî ‚àÄ i, UniformContinuousOn (F i) S := by\n  simp only [UniformEquicontinuousOn, eventually_all, @forall_swap _ Œπ]; rfl\n\n"}
{"name":"equicontinuousAt_unique","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\ninst‚úù : Unique Œπ\nF : Œπ ‚Üí X ‚Üí Œ±\nx : X\n‚ä¢ Iff (EquicontinuousAt F x) (ContinuousAt (F Inhabited.default) x)","decl":"theorem equicontinuousAt_unique [Unique Œπ] {F : Œπ ‚Üí X ‚Üí Œ±} {x : X} :\n    EquicontinuousAt F x ‚Üî ContinuousAt (F default) x :=\n  equicontinuousAt_finite.trans Unique.forall_iff\n\n"}
{"name":"equicontinuousWithinAt_unique","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\ninst‚úù : Unique Œπ\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\nx : X\n‚ä¢ Iff (EquicontinuousWithinAt F S x) (ContinuousWithinAt (F Inhabited.default) S x)","decl":"theorem equicontinuousWithinAt_unique [Unique Œπ] {F : Œπ ‚Üí X ‚Üí Œ±} {S : Set X} {x : X} :\n    EquicontinuousWithinAt F S x ‚Üî ContinuousWithinAt (F default) S x :=\n  equicontinuousWithinAt_finite.trans Unique.forall_iff\n\n"}
{"name":"equicontinuous_unique","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\ninst‚úù : Unique Œπ\nF : Œπ ‚Üí X ‚Üí Œ±\n‚ä¢ Iff (Equicontinuous F) (Continuous (F Inhabited.default))","decl":"theorem equicontinuous_unique [Unique Œπ] {F : Œπ ‚Üí X ‚Üí Œ±} :\n    Equicontinuous F ‚Üî Continuous (F default) :=\n  equicontinuous_finite.trans Unique.forall_iff\n\n"}
{"name":"equicontinuousOn_unique","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\ninst‚úù : Unique Œπ\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\n‚ä¢ Iff (EquicontinuousOn F S) (ContinuousOn (F Inhabited.default) S)","decl":"theorem equicontinuousOn_unique [Unique Œπ] {F : Œπ ‚Üí X ‚Üí Œ±} {S : Set X} :\n    EquicontinuousOn F S ‚Üî ContinuousOn (F default) S :=\n  equicontinuousOn_finite.trans Unique.forall_iff\n\n"}
{"name":"uniformEquicontinuous_unique","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\ninst‚úù : Unique Œπ\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\n‚ä¢ Iff (UniformEquicontinuous F) (UniformContinuous (F Inhabited.default))","decl":"theorem uniformEquicontinuous_unique [Unique Œπ] {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} :\n    UniformEquicontinuous F ‚Üî UniformContinuous (F default) :=\n  uniformEquicontinuous_finite.trans Unique.forall_iff\n\n"}
{"name":"uniformEquicontinuousOn_unique","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\ninst‚úù : Unique Œπ\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nS : Set Œ≤\n‚ä¢ Iff (UniformEquicontinuousOn F S) (UniformContinuousOn (F Inhabited.default) S)","decl":"theorem uniformEquicontinuousOn_unique [Unique Œπ] {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} {S : Set Œ≤} :\n    UniformEquicontinuousOn F S ‚Üî UniformContinuousOn (F default) S :=\n  uniformEquicontinuousOn_finite.trans Unique.forall_iff\n\n"}
{"name":"equicontinuousWithinAt_iff_pair","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\nx‚ÇÄ : X\nhx‚ÇÄ : Membership.mem S x‚ÇÄ\n‚ä¢ Iff (EquicontinuousWithinAt F S x‚ÇÄ) (‚àÄ (U : Set (Prod Œ± Œ±)), Membership.mem (uniformity Œ±) U ‚Üí Exists fun V => And (Membership.mem (nhdsWithin x‚ÇÄ S) V) (‚àÄ (x : X), Membership.mem V x ‚Üí ‚àÄ (y : X), Membership.mem V y ‚Üí ‚àÄ (i : Œπ), Membership.mem U { fst := F i x, snd := F i y }))","decl":"/-- Reformulation of equicontinuity at `x‚ÇÄ` within a set `S`, comparing two variables near `x‚ÇÄ`\ninstead of comparing only one with `x‚ÇÄ`. -/\ntheorem equicontinuousWithinAt_iff_pair {F : Œπ ‚Üí X ‚Üí Œ±} {S : Set X} {x‚ÇÄ : X} (hx‚ÇÄ : x‚ÇÄ ‚àà S) :\n    EquicontinuousWithinAt F S x‚ÇÄ ‚Üî\n      ‚àÄ U ‚àà ùì§ Œ±, ‚àÉ V ‚àà ùìù[S] x‚ÇÄ, ‚àÄ x ‚àà V, ‚àÄ y ‚àà V, ‚àÄ i, (F i x, F i y) ‚àà U := by\n  constructor <;> intro H U hU\n  ¬∑ rcases comp_symm_mem_uniformity_sets hU with ‚ü®V, hV, hVsymm, hVU‚ü©\n    refine ‚ü®_, H V hV, fun x hx y hy i => hVU (prod_mk_mem_compRel ?_ (hy i))‚ü©\n    exact hVsymm.mk_mem_comm.mp (hx i)\n  ¬∑ rcases H U hU with ‚ü®V, hV, hVU‚ü©\n    filter_upwards [hV] using fun x hx i => hVU x‚ÇÄ (mem_of_mem_nhdsWithin hx‚ÇÄ hV) x hx i\n\n"}
{"name":"equicontinuousAt_iff_pair","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nx‚ÇÄ : X\n‚ä¢ Iff (EquicontinuousAt F x‚ÇÄ) (‚àÄ (U : Set (Prod Œ± Œ±)), Membership.mem (uniformity Œ±) U ‚Üí Exists fun V => And (Membership.mem (nhds x‚ÇÄ) V) (‚àÄ (x : X), Membership.mem V x ‚Üí ‚àÄ (y : X), Membership.mem V y ‚Üí ‚àÄ (i : Œπ), Membership.mem U { fst := F i x, snd := F i y }))","decl":"/-- Reformulation of equicontinuity at `x‚ÇÄ` comparing two variables near `x‚ÇÄ` instead of comparing\nonly one with `x‚ÇÄ`. -/\ntheorem equicontinuousAt_iff_pair {F : Œπ ‚Üí X ‚Üí Œ±} {x‚ÇÄ : X} :\n    EquicontinuousAt F x‚ÇÄ ‚Üî\n      ‚àÄ U ‚àà ùì§ Œ±, ‚àÉ V ‚àà ùìù x‚ÇÄ, ‚àÄ x ‚àà V, ‚àÄ y ‚àà V, ‚àÄ i, (F i x, F i y) ‚àà U := by\n  simp_rw [‚Üê equicontinuousWithinAt_univ, equicontinuousWithinAt_iff_pair (mem_univ x‚ÇÄ),\n    nhdsWithin_univ]\n\n"}
{"name":"UniformEquicontinuous.equicontinuous","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nh : UniformEquicontinuous F\n‚ä¢ Equicontinuous F","decl":"/-- Uniform equicontinuity implies equicontinuity. -/\ntheorem UniformEquicontinuous.equicontinuous {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} (h : UniformEquicontinuous F) :\n    Equicontinuous F := fun x‚ÇÄ U hU ‚Ü¶\n  mem_of_superset (ball_mem_nhds x‚ÇÄ (h U hU)) fun _ hx i ‚Ü¶ hx i\n\n"}
{"name":"UniformEquicontinuousOn.equicontinuousOn","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nS : Set Œ≤\nh : UniformEquicontinuousOn F S\n‚ä¢ EquicontinuousOn F S","decl":"/-- Uniform equicontinuity on a subset implies equicontinuity on that subset. -/\ntheorem UniformEquicontinuousOn.equicontinuousOn {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} {S : Set Œ≤}\n    (h : UniformEquicontinuousOn F S) :\n    EquicontinuousOn F S := fun _ hx‚ÇÄ U hU ‚Ü¶\n  mem_of_superset (ball_mem_nhdsWithin hx‚ÇÄ (h U hU)) fun _ hx i ‚Ü¶ hx i\n\n"}
{"name":"EquicontinuousAt.continuousAt","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nx‚ÇÄ : X\nh : EquicontinuousAt F x‚ÇÄ\ni : Œπ\n‚ä¢ ContinuousAt (F i) x‚ÇÄ","decl":"/-- Each function of a family equicontinuous at `x‚ÇÄ` is continuous at `x‚ÇÄ`. -/\ntheorem EquicontinuousAt.continuousAt {F : Œπ ‚Üí X ‚Üí Œ±} {x‚ÇÄ : X} (h : EquicontinuousAt F x‚ÇÄ) (i : Œπ) :\n    ContinuousAt (F i) x‚ÇÄ :=\n  (UniformSpace.hasBasis_nhds _).tendsto_right_iff.2 fun U ‚ü®hU, _‚ü© ‚Ü¶ (h U hU).mono fun _x hx ‚Ü¶ hx i\n\n"}
{"name":"EquicontinuousWithinAt.continuousWithinAt","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\nx‚ÇÄ : X\nh : EquicontinuousWithinAt F S x‚ÇÄ\ni : Œπ\n‚ä¢ ContinuousWithinAt (F i) S x‚ÇÄ","decl":"/-- Each function of a family equicontinuous at `x‚ÇÄ` within `S` is continuous at `x‚ÇÄ` within `S`. -/\ntheorem EquicontinuousWithinAt.continuousWithinAt {F : Œπ ‚Üí X ‚Üí Œ±} {S : Set X} {x‚ÇÄ : X}\n    (h : EquicontinuousWithinAt F S x‚ÇÄ) (i : Œπ) :\n    ContinuousWithinAt (F i) S x‚ÇÄ :=\n  (UniformSpace.hasBasis_nhds _).tendsto_right_iff.2 fun U ‚ü®hU, _‚ü© ‚Ü¶ (h U hU).mono fun _x hx ‚Ü¶ hx i\n\n"}
{"name":"Set.EquicontinuousAt.continuousAt_of_mem","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"X : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nH : Set (X ‚Üí Œ±)\nx‚ÇÄ : X\nh : H.EquicontinuousAt x‚ÇÄ\nf : X ‚Üí Œ±\nhf : Membership.mem H f\n‚ä¢ ContinuousAt f x‚ÇÄ","decl":"protected theorem Set.EquicontinuousAt.continuousAt_of_mem {H : Set <| X ‚Üí Œ±} {x‚ÇÄ : X}\n    (h : H.EquicontinuousAt x‚ÇÄ) {f : X ‚Üí Œ±} (hf : f ‚àà H) : ContinuousAt f x‚ÇÄ :=\n  h.continuousAt ‚ü®f, hf‚ü©\n\n"}
{"name":"Set.EquicontinuousWithinAt.continuousWithinAt_of_mem","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"X : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nH : Set (X ‚Üí Œ±)\nS : Set X\nx‚ÇÄ : X\nh : H.EquicontinuousWithinAt S x‚ÇÄ\nf : X ‚Üí Œ±\nhf : Membership.mem H f\n‚ä¢ ContinuousWithinAt f S x‚ÇÄ","decl":"protected theorem Set.EquicontinuousWithinAt.continuousWithinAt_of_mem {H : Set <| X ‚Üí Œ±}\n    {S : Set X} {x‚ÇÄ : X} (h : H.EquicontinuousWithinAt S x‚ÇÄ) {f : X ‚Üí Œ±} (hf : f ‚àà H) :\n    ContinuousWithinAt f S x‚ÇÄ :=\n  h.continuousWithinAt ‚ü®f, hf‚ü©\n\n"}
{"name":"Equicontinuous.continuous","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nh : Equicontinuous F\ni : Œπ\n‚ä¢ Continuous (F i)","decl":"/-- Each function of an equicontinuous family is continuous. -/\ntheorem Equicontinuous.continuous {F : Œπ ‚Üí X ‚Üí Œ±} (h : Equicontinuous F) (i : Œπ) :\n    Continuous (F i) :=\n  continuous_iff_continuousAt.mpr fun x => (h x).continuousAt i\n\n"}
{"name":"EquicontinuousOn.continuousOn","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\nh : EquicontinuousOn F S\ni : Œπ\n‚ä¢ ContinuousOn (F i) S","decl":"/-- Each function of a family equicontinuous on `S` is continuous on `S`. -/\ntheorem EquicontinuousOn.continuousOn {F : Œπ ‚Üí X ‚Üí Œ±} {S : Set X} (h : EquicontinuousOn F S)\n    (i : Œπ) : ContinuousOn (F i) S :=\n  fun x hx ‚Ü¶ (h x hx).continuousWithinAt i\n\n"}
{"name":"Set.Equicontinuous.continuous_of_mem","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"X : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nH : Set (X ‚Üí Œ±)\nh : H.Equicontinuous\nf : X ‚Üí Œ±\nhf : Membership.mem H f\n‚ä¢ Continuous f","decl":"protected theorem Set.Equicontinuous.continuous_of_mem {H : Set <| X ‚Üí Œ±} (h : H.Equicontinuous)\n    {f : X ‚Üí Œ±} (hf : f ‚àà H) : Continuous f :=\n  h.continuous ‚ü®f, hf‚ü©\n\n"}
{"name":"Set.EquicontinuousOn.continuousOn_of_mem","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"X : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nH : Set (X ‚Üí Œ±)\nS : Set X\nh : H.EquicontinuousOn S\nf : X ‚Üí Œ±\nhf : Membership.mem H f\n‚ä¢ ContinuousOn f S","decl":"protected theorem Set.EquicontinuousOn.continuousOn_of_mem {H : Set <| X ‚Üí Œ±} {S : Set X}\n    (h : H.EquicontinuousOn S) {f : X ‚Üí Œ±} (hf : f ‚àà H) : ContinuousOn f S :=\n  h.continuousOn ‚ü®f, hf‚ü©\n\n"}
{"name":"UniformEquicontinuous.uniformContinuous","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nh : UniformEquicontinuous F\ni : Œπ\n‚ä¢ UniformContinuous (F i)","decl":"/-- Each function of a uniformly equicontinuous family is uniformly continuous. -/\ntheorem UniformEquicontinuous.uniformContinuous {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} (h : UniformEquicontinuous F)\n    (i : Œπ) : UniformContinuous (F i) := fun U hU =>\n  mem_map.mpr (mem_of_superset (h U hU) fun _ hxy => hxy i)\n\n"}
{"name":"UniformEquicontinuousOn.uniformContinuousOn","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nS : Set Œ≤\nh : UniformEquicontinuousOn F S\ni : Œπ\n‚ä¢ UniformContinuousOn (F i) S","decl":"/-- Each function of a family uniformly equicontinuous on `S` is uniformly continuous on `S`. -/\ntheorem UniformEquicontinuousOn.uniformContinuousOn {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} {S : Set Œ≤}\n    (h : UniformEquicontinuousOn F S) (i : Œπ) :\n    UniformContinuousOn (F i) S := fun U hU =>\n  mem_map.mpr (mem_of_superset (h U hU) fun _ hxy => hxy i)\n\n"}
{"name":"Set.UniformEquicontinuous.uniformContinuous_of_mem","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nH : Set (Œ≤ ‚Üí Œ±)\nh : H.UniformEquicontinuous\nf : Œ≤ ‚Üí Œ±\nhf : Membership.mem H f\n‚ä¢ UniformContinuous f","decl":"protected theorem Set.UniformEquicontinuous.uniformContinuous_of_mem {H : Set <| Œ≤ ‚Üí Œ±}\n    (h : H.UniformEquicontinuous) {f : Œ≤ ‚Üí Œ±} (hf : f ‚àà H) : UniformContinuous f :=\n  h.uniformContinuous ‚ü®f, hf‚ü©\n\n"}
{"name":"Set.UniformEquicontinuousOn.uniformContinuousOn_of_mem","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nH : Set (Œ≤ ‚Üí Œ±)\nS : Set Œ≤\nh : H.UniformEquicontinuousOn S\nf : Œ≤ ‚Üí Œ±\nhf : Membership.mem H f\n‚ä¢ UniformContinuousOn f S","decl":"protected theorem Set.UniformEquicontinuousOn.uniformContinuousOn_of_mem {H : Set <| Œ≤ ‚Üí Œ±}\n    {S : Set Œ≤} (h : H.UniformEquicontinuousOn S) {f : Œ≤ ‚Üí Œ±} (hf : f ‚àà H) :\n    UniformContinuousOn f S :=\n  h.uniformContinuousOn ‚ü®f, hf‚ü©\n\n"}
{"name":"EquicontinuousAt.comp","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nx‚ÇÄ : X\nh : EquicontinuousAt F x‚ÇÄ\nu : Œ∫ ‚Üí Œπ\n‚ä¢ EquicontinuousAt (Function.comp F u) x‚ÇÄ","decl":"/-- Taking sub-families preserves equicontinuity at a point. -/\ntheorem EquicontinuousAt.comp {F : Œπ ‚Üí X ‚Üí Œ±} {x‚ÇÄ : X} (h : EquicontinuousAt F x‚ÇÄ) (u : Œ∫ ‚Üí Œπ) :\n    EquicontinuousAt (F ‚àò u) x‚ÇÄ := fun U hU => (h U hU).mono fun _ H k => H (u k)\n\n"}
{"name":"EquicontinuousWithinAt.comp","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\nx‚ÇÄ : X\nh : EquicontinuousWithinAt F S x‚ÇÄ\nu : Œ∫ ‚Üí Œπ\n‚ä¢ EquicontinuousWithinAt (Function.comp F u) S x‚ÇÄ","decl":"/-- Taking sub-families preserves equicontinuity at a point within a subset. -/\ntheorem EquicontinuousWithinAt.comp {F : Œπ ‚Üí X ‚Üí Œ±} {S : Set X} {x‚ÇÄ : X}\n    (h : EquicontinuousWithinAt F S x‚ÇÄ) (u : Œ∫ ‚Üí Œπ) :\n    EquicontinuousWithinAt (F ‚àò u) S x‚ÇÄ :=\n  fun U hU ‚Ü¶ (h U hU).mono fun _ H k => H (u k)\n\n"}
{"name":"Set.EquicontinuousAt.mono","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"X : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nH H' : Set (X ‚Üí Œ±)\nx‚ÇÄ : X\nh : H.EquicontinuousAt x‚ÇÄ\nhH : HasSubset.Subset H' H\n‚ä¢ H'.EquicontinuousAt x‚ÇÄ","decl":"protected theorem Set.EquicontinuousAt.mono {H H' : Set <| X ‚Üí Œ±} {x‚ÇÄ : X}\n    (h : H.EquicontinuousAt x‚ÇÄ) (hH : H' ‚äÜ H) : H'.EquicontinuousAt x‚ÇÄ :=\n  h.comp (inclusion hH)\n\n"}
{"name":"Set.EquicontinuousWithinAt.mono","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"X : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nH H' : Set (X ‚Üí Œ±)\nS : Set X\nx‚ÇÄ : X\nh : H.EquicontinuousWithinAt S x‚ÇÄ\nhH : HasSubset.Subset H' H\n‚ä¢ H'.EquicontinuousWithinAt S x‚ÇÄ","decl":"protected theorem Set.EquicontinuousWithinAt.mono {H H' : Set <| X ‚Üí Œ±} {S : Set X} {x‚ÇÄ : X}\n    (h : H.EquicontinuousWithinAt S x‚ÇÄ) (hH : H' ‚äÜ H) : H'.EquicontinuousWithinAt S x‚ÇÄ :=\n  h.comp (inclusion hH)\n\n"}
{"name":"Equicontinuous.comp","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nh : Equicontinuous F\nu : Œ∫ ‚Üí Œπ\n‚ä¢ Equicontinuous (Function.comp F u)","decl":"/-- Taking sub-families preserves equicontinuity. -/\ntheorem Equicontinuous.comp {F : Œπ ‚Üí X ‚Üí Œ±} (h : Equicontinuous F) (u : Œ∫ ‚Üí Œπ) :\n    Equicontinuous (F ‚àò u) := fun x => (h x).comp u\n\n"}
{"name":"EquicontinuousOn.comp","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\nh : EquicontinuousOn F S\nu : Œ∫ ‚Üí Œπ\n‚ä¢ EquicontinuousOn (Function.comp F u) S","decl":"/-- Taking sub-families preserves equicontinuity on a subset. -/\ntheorem EquicontinuousOn.comp {F : Œπ ‚Üí X ‚Üí Œ±} {S : Set X} (h : EquicontinuousOn F S) (u : Œ∫ ‚Üí Œπ) :\n    EquicontinuousOn (F ‚àò u) S := fun x hx ‚Ü¶ (h x hx).comp u\n\n"}
{"name":"Set.Equicontinuous.mono","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"X : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nH H' : Set (X ‚Üí Œ±)\nh : H.Equicontinuous\nhH : HasSubset.Subset H' H\n‚ä¢ H'.Equicontinuous","decl":"protected theorem Set.Equicontinuous.mono {H H' : Set <| X ‚Üí Œ±} (h : H.Equicontinuous)\n    (hH : H' ‚äÜ H) : H'.Equicontinuous :=\n  h.comp (inclusion hH)\n\n"}
{"name":"Set.EquicontinuousOn.mono","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"X : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nH H' : Set (X ‚Üí Œ±)\nS : Set X\nh : H.EquicontinuousOn S\nhH : HasSubset.Subset H' H\n‚ä¢ H'.EquicontinuousOn S","decl":"protected theorem Set.EquicontinuousOn.mono {H H' : Set <| X ‚Üí Œ±} {S : Set X}\n    (h : H.EquicontinuousOn S) (hH : H' ‚äÜ H) : H'.EquicontinuousOn S :=\n  h.comp (inclusion hH)\n\n"}
{"name":"UniformEquicontinuous.comp","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nh : UniformEquicontinuous F\nu : Œ∫ ‚Üí Œπ\n‚ä¢ UniformEquicontinuous (Function.comp F u)","decl":"/-- Taking sub-families preserves uniform equicontinuity. -/\ntheorem UniformEquicontinuous.comp {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} (h : UniformEquicontinuous F) (u : Œ∫ ‚Üí Œπ) :\n    UniformEquicontinuous (F ‚àò u) := fun U hU => (h U hU).mono fun _ H k => H (u k)\n\n"}
{"name":"UniformEquicontinuousOn.comp","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nS : Set Œ≤\nh : UniformEquicontinuousOn F S\nu : Œ∫ ‚Üí Œπ\n‚ä¢ UniformEquicontinuousOn (Function.comp F u) S","decl":"/-- Taking sub-families preserves uniform equicontinuity on a subset. -/\ntheorem UniformEquicontinuousOn.comp {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} {S : Set Œ≤} (h : UniformEquicontinuousOn F S)\n    (u : Œ∫ ‚Üí Œπ) : UniformEquicontinuousOn (F ‚àò u) S :=\n  fun U hU ‚Ü¶ (h U hU).mono fun _ H k => H (u k)\n\n"}
{"name":"Set.UniformEquicontinuous.mono","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nH H' : Set (Œ≤ ‚Üí Œ±)\nh : H.UniformEquicontinuous\nhH : HasSubset.Subset H' H\n‚ä¢ H'.UniformEquicontinuous","decl":"protected theorem Set.UniformEquicontinuous.mono {H H' : Set <| Œ≤ ‚Üí Œ±} (h : H.UniformEquicontinuous)\n    (hH : H' ‚äÜ H) : H'.UniformEquicontinuous :=\n  h.comp (inclusion hH)\n\n"}
{"name":"Set.UniformEquicontinuousOn.mono","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nH H' : Set (Œ≤ ‚Üí Œ±)\nS : Set Œ≤\nh : H.UniformEquicontinuousOn S\nhH : HasSubset.Subset H' H\n‚ä¢ H'.UniformEquicontinuousOn S","decl":"protected theorem Set.UniformEquicontinuousOn.mono {H H' : Set <| Œ≤ ‚Üí Œ±} {S : Set Œ≤}\n    (h : H.UniformEquicontinuousOn S) (hH : H' ‚äÜ H) : H'.UniformEquicontinuousOn S :=\n  h.comp (inclusion hH)\n\n"}
{"name":"equicontinuousAt_iff_range","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nx‚ÇÄ : X\n‚ä¢ Iff (EquicontinuousAt F x‚ÇÄ) (EquicontinuousAt Subtype.val x‚ÇÄ)","decl":"/-- A family `ùìï : Œπ ‚Üí X ‚Üí Œ±` is equicontinuous at `x‚ÇÄ` iff `range ùìï` is equicontinuous at `x‚ÇÄ`,\ni.e the family `(‚Üë) : range F ‚Üí X ‚Üí Œ±` is equicontinuous at `x‚ÇÄ`. -/\ntheorem equicontinuousAt_iff_range {F : Œπ ‚Üí X ‚Üí Œ±} {x‚ÇÄ : X} :\n    EquicontinuousAt F x‚ÇÄ ‚Üî EquicontinuousAt ((‚Üë) : range F ‚Üí X ‚Üí Œ±) x‚ÇÄ := by\n  simp only [EquicontinuousAt, forall_subtype_range_iff]\n\n"}
{"name":"equicontinuousWithinAt_iff_range","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\nx‚ÇÄ : X\n‚ä¢ Iff (EquicontinuousWithinAt F S x‚ÇÄ) (EquicontinuousWithinAt Subtype.val S x‚ÇÄ)","decl":"/-- A family `ùìï : Œπ ‚Üí X ‚Üí Œ±` is equicontinuous at `x‚ÇÄ` within `S` iff `range ùìï` is equicontinuous\nat `x‚ÇÄ` within `S`, i.e the family `(‚Üë) : range F ‚Üí X ‚Üí Œ±` is equicontinuous at `x‚ÇÄ` within `S`. -/\ntheorem equicontinuousWithinAt_iff_range {F : Œπ ‚Üí X ‚Üí Œ±} {S : Set X} {x‚ÇÄ : X} :\n    EquicontinuousWithinAt F S x‚ÇÄ ‚Üî EquicontinuousWithinAt ((‚Üë) : range F ‚Üí X ‚Üí Œ±) S x‚ÇÄ := by\n  simp only [EquicontinuousWithinAt, forall_subtype_range_iff]\n\n"}
{"name":"equicontinuous_iff_range","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\n‚ä¢ Iff (Equicontinuous F) (Equicontinuous Subtype.val)","decl":"/-- A family `ùìï : Œπ ‚Üí X ‚Üí Œ±` is equicontinuous iff `range ùìï` is equicontinuous,\ni.e the family `(‚Üë) : range F ‚Üí X ‚Üí Œ±` is equicontinuous. -/\ntheorem equicontinuous_iff_range {F : Œπ ‚Üí X ‚Üí Œ±} :\n    Equicontinuous F ‚Üî Equicontinuous ((‚Üë) : range F ‚Üí X ‚Üí Œ±) :=\n  forall_congr' fun _ => equicontinuousAt_iff_range\n\n"}
{"name":"equicontinuousOn_iff_range","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\n‚ä¢ Iff (EquicontinuousOn F S) (EquicontinuousOn Subtype.val S)","decl":"/-- A family `ùìï : Œπ ‚Üí X ‚Üí Œ±` is equicontinuous on `S` iff `range ùìï` is equicontinuous on `S`,\ni.e the family `(‚Üë) : range F ‚Üí X ‚Üí Œ±` is equicontinuous on `S`. -/\ntheorem equicontinuousOn_iff_range {F : Œπ ‚Üí X ‚Üí Œ±} {S : Set X} :\n    EquicontinuousOn F S ‚Üî EquicontinuousOn ((‚Üë) : range F ‚Üí X ‚Üí Œ±) S :=\n  forall_congr' fun _ ‚Ü¶ forall_congr' fun _ ‚Ü¶ equicontinuousWithinAt_iff_range\n\n"}
{"name":"uniformEquicontinuous_iff_range","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\n‚ä¢ Iff (UniformEquicontinuous F) (UniformEquicontinuous Subtype.val)","decl":"/-- A family `ùìï : Œπ ‚Üí Œ≤ ‚Üí Œ±` is uniformly equicontinuous iff `range ùìï` is uniformly equicontinuous,\ni.e the family `(‚Üë) : range F ‚Üí Œ≤ ‚Üí Œ±` is uniformly equicontinuous. -/\ntheorem uniformEquicontinuous_iff_range {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} :\n    UniformEquicontinuous F ‚Üî UniformEquicontinuous ((‚Üë) : range F ‚Üí Œ≤ ‚Üí Œ±) :=\n  ‚ü®fun h => by rw [‚Üê comp_rangeSplitting F]; exact h.comp _, fun h =>\n    h.comp (rangeFactorization F)‚ü©\n\n"}
{"name":"uniformEquicontinuousOn_iff_range","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nS : Set Œ≤\n‚ä¢ Iff (UniformEquicontinuousOn F S) (UniformEquicontinuousOn Subtype.val S)","decl":"/-- A family `ùìï : Œπ ‚Üí Œ≤ ‚Üí Œ±` is uniformly equicontinuous on `S` iff `range ùìï` is uniformly\nequicontinuous on `S`, i.e the family `(‚Üë) : range F ‚Üí Œ≤ ‚Üí Œ±` is uniformly equicontinuous on `S`. -/\ntheorem uniformEquicontinuousOn_iff_range {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} {S : Set Œ≤} :\n    UniformEquicontinuousOn F S ‚Üî UniformEquicontinuousOn ((‚Üë) : range F ‚Üí Œ≤ ‚Üí Œ±) S :=\n  ‚ü®fun h => by rw [‚Üê comp_rangeSplitting F]; exact h.comp _, fun h =>\n    h.comp (rangeFactorization F)‚ü©\n\n"}
{"name":"equicontinuousAt_iff_continuousAt","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nx‚ÇÄ : X\n‚ä¢ Iff (EquicontinuousAt F x‚ÇÄ) (ContinuousAt (Function.comp (‚áëUniformFun.ofFun) (Function.swap F)) x‚ÇÄ)","decl":"/-- A family `ùìï : Œπ ‚Üí X ‚Üí Œ±` is equicontinuous at `x‚ÇÄ` iff the function `swap ùìï : X ‚Üí Œπ ‚Üí Œ±` is\ncontinuous at `x‚ÇÄ` *when `Œπ ‚Üí Œ±` is equipped with the topology of uniform convergence*. This is\nvery useful for developing the equicontinuity API, but it should not be used directly for other\npurposes. -/\ntheorem equicontinuousAt_iff_continuousAt {F : Œπ ‚Üí X ‚Üí Œ±} {x‚ÇÄ : X} :\n    EquicontinuousAt F x‚ÇÄ ‚Üî ContinuousAt (ofFun ‚àò Function.swap F : X ‚Üí Œπ ‚Üí·µ§ Œ±) x‚ÇÄ := by\n  rw [ContinuousAt, (UniformFun.hasBasis_nhds Œπ Œ± _).tendsto_right_iff]\n  rfl\n\n"}
{"name":"equicontinuousWithinAt_iff_continuousWithinAt","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\nx‚ÇÄ : X\n‚ä¢ Iff (EquicontinuousWithinAt F S x‚ÇÄ) (ContinuousWithinAt (Function.comp (‚áëUniformFun.ofFun) (Function.swap F)) S x‚ÇÄ)","decl":"/-- A family `ùìï : Œπ ‚Üí X ‚Üí Œ±` is equicontinuous at `x‚ÇÄ` within `S` iff the function\n`swap ùìï : X ‚Üí Œπ ‚Üí Œ±` is continuous at `x‚ÇÄ` within `S`\n*when `Œπ ‚Üí Œ±` is equipped with the topology of uniform convergence*. This is very useful for\ndeveloping the equicontinuity API, but it should not be used directly for other purposes. -/\ntheorem equicontinuousWithinAt_iff_continuousWithinAt {F : Œπ ‚Üí X ‚Üí Œ±} {S : Set X} {x‚ÇÄ : X} :\n    EquicontinuousWithinAt F S x‚ÇÄ ‚Üî\n    ContinuousWithinAt (ofFun ‚àò Function.swap F : X ‚Üí Œπ ‚Üí·µ§ Œ±) S x‚ÇÄ := by\n  rw [ContinuousWithinAt, (UniformFun.hasBasis_nhds Œπ Œ± _).tendsto_right_iff]\n  rfl\n\n"}
{"name":"equicontinuous_iff_continuous","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\n‚ä¢ Iff (Equicontinuous F) (Continuous (Function.comp (‚áëUniformFun.ofFun) (Function.swap F)))","decl":"/-- A family `ùìï : Œπ ‚Üí X ‚Üí Œ±` is equicontinuous iff the function `swap ùìï : X ‚Üí Œπ ‚Üí Œ±` is\ncontinuous *when `Œπ ‚Üí Œ±` is equipped with the topology of uniform convergence*. This is\nvery useful for developing the equicontinuity API, but it should not be used directly for other\npurposes. -/\ntheorem equicontinuous_iff_continuous {F : Œπ ‚Üí X ‚Üí Œ±} :\n    Equicontinuous F ‚Üî Continuous (ofFun ‚àò Function.swap F : X ‚Üí Œπ ‚Üí·µ§ Œ±) := by\n  simp_rw [Equicontinuous, continuous_iff_continuousAt, equicontinuousAt_iff_continuousAt]\n\n"}
{"name":"equicontinuousOn_iff_continuousOn","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\n‚ä¢ Iff (EquicontinuousOn F S) (ContinuousOn (Function.comp (‚áëUniformFun.ofFun) (Function.swap F)) S)","decl":"/-- A family `ùìï : Œπ ‚Üí X ‚Üí Œ±` is equicontinuous on `S` iff the function `swap ùìï : X ‚Üí Œπ ‚Üí Œ±` is\ncontinuous on `S` *when `Œπ ‚Üí Œ±` is equipped with the topology of uniform convergence*. This is\nvery useful for developing the equicontinuity API, but it should not be used directly for other\npurposes. -/\ntheorem equicontinuousOn_iff_continuousOn {F : Œπ ‚Üí X ‚Üí Œ±} {S : Set X} :\n    EquicontinuousOn F S ‚Üî ContinuousOn (ofFun ‚àò Function.swap F : X ‚Üí Œπ ‚Üí·µ§ Œ±) S := by\n  simp_rw [EquicontinuousOn, ContinuousOn, equicontinuousWithinAt_iff_continuousWithinAt]\n\n"}
{"name":"uniformEquicontinuous_iff_uniformContinuous","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\n‚ä¢ Iff (UniformEquicontinuous F) (UniformContinuous (Function.comp (‚áëUniformFun.ofFun) (Function.swap F)))","decl":"/-- A family `ùìï : Œπ ‚Üí Œ≤ ‚Üí Œ±` is uniformly equicontinuous iff the function `swap ùìï : Œ≤ ‚Üí Œπ ‚Üí Œ±` is\nuniformly continuous *when `Œπ ‚Üí Œ±` is equipped with the uniform structure of uniform convergence*.\nThis is very useful for developing the equicontinuity API, but it should not be used directly\nfor other purposes. -/\ntheorem uniformEquicontinuous_iff_uniformContinuous {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} :\n    UniformEquicontinuous F ‚Üî UniformContinuous (ofFun ‚àò Function.swap F : Œ≤ ‚Üí Œπ ‚Üí·µ§ Œ±) := by\n  rw [UniformContinuous, (UniformFun.hasBasis_uniformity Œπ Œ±).tendsto_right_iff]\n  rfl\n\n"}
{"name":"uniformEquicontinuousOn_iff_uniformContinuousOn","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nS : Set Œ≤\n‚ä¢ Iff (UniformEquicontinuousOn F S) (UniformContinuousOn (Function.comp (‚áëUniformFun.ofFun) (Function.swap F)) S)","decl":"/-- A family `ùìï : Œπ ‚Üí Œ≤ ‚Üí Œ±` is uniformly equicontinuous on `S` iff the function\n`swap ùìï : Œ≤ ‚Üí Œπ ‚Üí Œ±` is uniformly continuous on `S`\n*when `Œπ ‚Üí Œ±` is equipped with the uniform structure of uniform convergence*. This is very useful\nfor developing the equicontinuity API, but it should not be used directly for other purposes. -/\ntheorem uniformEquicontinuousOn_iff_uniformContinuousOn {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} {S : Set Œ≤} :\n    UniformEquicontinuousOn F S ‚Üî UniformContinuousOn (ofFun ‚àò Function.swap F : Œ≤ ‚Üí Œπ ‚Üí·µ§ Œ±) S := by\n  rw [UniformContinuousOn, (UniformFun.hasBasis_uniformity Œπ Œ±).tendsto_right_iff]\n  rfl\n\n"}
{"name":"equicontinuousWithinAt_iInf_rng","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nX : Type u_3\nŒ±' : Type u_7\ntX : TopologicalSpace X\nu : Œ∫ ‚Üí UniformSpace Œ±'\nF : Œπ ‚Üí X ‚Üí Œ±'\nS : Set X\nx‚ÇÄ : X\n‚ä¢ Iff (EquicontinuousWithinAt F S x‚ÇÄ) (‚àÄ (k : Œ∫), EquicontinuousWithinAt F S x‚ÇÄ)","decl":"theorem equicontinuousWithinAt_iInf_rng {u : Œ∫ ‚Üí UniformSpace Œ±'} {F : Œπ ‚Üí X ‚Üí Œ±'}\n    {S : Set X} {x‚ÇÄ : X} : EquicontinuousWithinAt (uŒ± :=  ‚®Ö k, u k) F S x‚ÇÄ ‚Üî\n      ‚àÄ k, EquicontinuousWithinAt (uŒ± :=  u k) F S x‚ÇÄ := by\n  simp only [equicontinuousWithinAt_iff_continuousWithinAt (uŒ± := _), topologicalSpace]\n  unfold ContinuousWithinAt\n  rw [UniformFun.iInf_eq, toTopologicalSpace_iInf, nhds_iInf, tendsto_iInf]\n\n"}
{"name":"equicontinuousAt_iInf_rng","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nX : Type u_3\nŒ±' : Type u_7\ntX : TopologicalSpace X\nu : Œ∫ ‚Üí UniformSpace Œ±'\nF : Œπ ‚Üí X ‚Üí Œ±'\nx‚ÇÄ : X\n‚ä¢ Iff (EquicontinuousAt F x‚ÇÄ) (‚àÄ (k : Œ∫), EquicontinuousAt F x‚ÇÄ)","decl":"theorem equicontinuousAt_iInf_rng {u : Œ∫ ‚Üí UniformSpace Œ±'} {F : Œπ ‚Üí X ‚Üí Œ±'}\n    {x‚ÇÄ : X} :\n    EquicontinuousAt (uŒ± := ‚®Ö k, u k) F x‚ÇÄ ‚Üî ‚àÄ k, EquicontinuousAt (uŒ± := u k) F x‚ÇÄ := by\n  simp only [‚Üê equicontinuousWithinAt_univ (uŒ± := _), equicontinuousWithinAt_iInf_rng]\n\n"}
{"name":"equicontinuous_iInf_rng","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nX : Type u_3\nŒ±' : Type u_7\ntX : TopologicalSpace X\nu : Œ∫ ‚Üí UniformSpace Œ±'\nF : Œπ ‚Üí X ‚Üí Œ±'\n‚ä¢ Iff (Equicontinuous F) (‚àÄ (k : Œ∫), Equicontinuous F)","decl":"theorem equicontinuous_iInf_rng {u : Œ∫ ‚Üí UniformSpace Œ±'} {F : Œπ ‚Üí X ‚Üí Œ±'} :\n    Equicontinuous (uŒ± := ‚®Ö k, u k) F ‚Üî ‚àÄ k, Equicontinuous (uŒ± := u k) F := by\n  simp_rw [equicontinuous_iff_continuous (uŒ± := _), UniformFun.topologicalSpace]\n  rw [UniformFun.iInf_eq, toTopologicalSpace_iInf, continuous_iInf_rng]\n\n"}
{"name":"equicontinuousOn_iInf_rng","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nX : Type u_3\nŒ±' : Type u_7\ntX : TopologicalSpace X\nu : Œ∫ ‚Üí UniformSpace Œ±'\nF : Œπ ‚Üí X ‚Üí Œ±'\nS : Set X\n‚ä¢ Iff (EquicontinuousOn F S) (‚àÄ (k : Œ∫), EquicontinuousOn F S)","decl":"theorem equicontinuousOn_iInf_rng {u : Œ∫ ‚Üí UniformSpace Œ±'} {F : Œπ ‚Üí X ‚Üí Œ±'}\n    {S : Set X} :\n    EquicontinuousOn (uŒ± := ‚®Ö k, u k) F S ‚Üî ‚àÄ k, EquicontinuousOn (uŒ± := u k) F S := by\n  simp_rw [EquicontinuousOn, equicontinuousWithinAt_iInf_rng, @forall_swap _ Œ∫]\n\n"}
{"name":"uniformEquicontinuous_iInf_rng","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nŒ±' : Type u_7\nŒ≤ : Type u_8\nuŒ≤ : UniformSpace Œ≤\nu : Œ∫ ‚Üí UniformSpace Œ±'\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±'\n‚ä¢ Iff (UniformEquicontinuous F) (‚àÄ (k : Œ∫), UniformEquicontinuous F)","decl":"theorem uniformEquicontinuous_iInf_rng {u : Œ∫ ‚Üí UniformSpace Œ±'} {F : Œπ ‚Üí Œ≤ ‚Üí Œ±'} :\n    UniformEquicontinuous (uŒ± := ‚®Ö k, u k) F ‚Üî ‚àÄ k, UniformEquicontinuous (uŒ± := u k) F := by\n  simp_rw [uniformEquicontinuous_iff_uniformContinuous (uŒ± := _)]\n  rw [UniformFun.iInf_eq, uniformContinuous_iInf_rng]\n\n"}
{"name":"uniformEquicontinuousOn_iInf_rng","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nŒ±' : Type u_7\nŒ≤ : Type u_8\nuŒ≤ : UniformSpace Œ≤\nu : Œ∫ ‚Üí UniformSpace Œ±'\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±'\nS : Set Œ≤\n‚ä¢ Iff (UniformEquicontinuousOn F S) (‚àÄ (k : Œ∫), UniformEquicontinuousOn F S)","decl":"theorem uniformEquicontinuousOn_iInf_rng {u : Œ∫ ‚Üí UniformSpace Œ±'} {F : Œπ ‚Üí Œ≤ ‚Üí Œ±'}\n    {S : Set Œ≤} : UniformEquicontinuousOn (uŒ± := ‚®Ö k, u k) F S ‚Üî\n      ‚àÄ k, UniformEquicontinuousOn (uŒ± := u k) F S := by\n  simp_rw [uniformEquicontinuousOn_iff_uniformContinuousOn (uŒ± := _)]\n  unfold UniformContinuousOn\n  rw [UniformFun.iInf_eq, iInf_uniformity, tendsto_iInf]\n\n"}
{"name":"equicontinuousWithinAt_iInf_dom","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nX' : Type u_4\nŒ± : Type u_6\nuŒ± : UniformSpace Œ±\nt : Œ∫ ‚Üí TopologicalSpace X'\nF : Œπ ‚Üí X' ‚Üí Œ±\nS : Set X'\nx‚ÇÄ : X'\nk : Œ∫\nhk : EquicontinuousWithinAt F S x‚ÇÄ\n‚ä¢ EquicontinuousWithinAt F S x‚ÇÄ","decl":"theorem equicontinuousWithinAt_iInf_dom {t : Œ∫ ‚Üí TopologicalSpace X'} {F : Œπ ‚Üí X' ‚Üí Œ±}\n    {S : Set X'} {x‚ÇÄ : X'} {k : Œ∫} (hk : EquicontinuousWithinAt (tX := t k) F S x‚ÇÄ) :\n    EquicontinuousWithinAt (tX := ‚®Ö k, t k) F S x‚ÇÄ := by\n  simp only [equicontinuousWithinAt_iff_continuousWithinAt (tX := _)] at hk ‚ä¢\n  unfold ContinuousWithinAt nhdsWithin at hk ‚ä¢\n  rw [nhds_iInf]\n  exact hk.mono_left <| inf_le_inf_right _ <| iInf_le _ k\n\n"}
{"name":"equicontinuousAt_iInf_dom","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nX' : Type u_4\nŒ± : Type u_6\nuŒ± : UniformSpace Œ±\nt : Œ∫ ‚Üí TopologicalSpace X'\nF : Œπ ‚Üí X' ‚Üí Œ±\nx‚ÇÄ : X'\nk : Œ∫\nhk : EquicontinuousAt F x‚ÇÄ\n‚ä¢ EquicontinuousAt F x‚ÇÄ","decl":"theorem equicontinuousAt_iInf_dom {t : Œ∫ ‚Üí TopologicalSpace X'} {F : Œπ ‚Üí X' ‚Üí Œ±}\n    {x‚ÇÄ : X'} {k : Œ∫} (hk : EquicontinuousAt (tX := t k) F x‚ÇÄ) :\n    EquicontinuousAt (tX := ‚®Ö k, t k) F x‚ÇÄ := by\n  rw [‚Üê equicontinuousWithinAt_univ (tX := _)] at hk ‚ä¢\n  exact equicontinuousWithinAt_iInf_dom hk\n\n"}
{"name":"equicontinuous_iInf_dom","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nX' : Type u_4\nŒ± : Type u_6\nuŒ± : UniformSpace Œ±\nt : Œ∫ ‚Üí TopologicalSpace X'\nF : Œπ ‚Üí X' ‚Üí Œ±\nk : Œ∫\nhk : Equicontinuous F\n‚ä¢ Equicontinuous F","decl":"theorem equicontinuous_iInf_dom {t : Œ∫ ‚Üí TopologicalSpace X'} {F : Œπ ‚Üí X' ‚Üí Œ±}\n    {k : Œ∫} (hk : Equicontinuous (tX := t k) F) :\n    Equicontinuous (tX := ‚®Ö k, t k) F :=\n  fun x ‚Ü¶ equicontinuousAt_iInf_dom (hk x)\n\n"}
{"name":"equicontinuousOn_iInf_dom","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nX' : Type u_4\nŒ± : Type u_6\nuŒ± : UniformSpace Œ±\nt : Œ∫ ‚Üí TopologicalSpace X'\nF : Œπ ‚Üí X' ‚Üí Œ±\nS : Set X'\nk : Œ∫\nhk : EquicontinuousOn F S\n‚ä¢ EquicontinuousOn F S","decl":"theorem equicontinuousOn_iInf_dom {t : Œ∫ ‚Üí TopologicalSpace X'} {F : Œπ ‚Üí X' ‚Üí Œ±}\n    {S : Set X'} {k : Œ∫} (hk : EquicontinuousOn (tX := t k) F S) :\n    EquicontinuousOn (tX := ‚®Ö k, t k) F S :=\n  fun x hx ‚Ü¶ equicontinuousWithinAt_iInf_dom (hk x hx)\n\n"}
{"name":"uniformEquicontinuous_iInf_dom","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nŒ± : Type u_6\nŒ≤' : Type u_9\nuŒ± : UniformSpace Œ±\nu : Œ∫ ‚Üí UniformSpace Œ≤'\nF : Œπ ‚Üí Œ≤' ‚Üí Œ±\nk : Œ∫\nhk : UniformEquicontinuous F\n‚ä¢ UniformEquicontinuous F","decl":"theorem uniformEquicontinuous_iInf_dom {u : Œ∫ ‚Üí UniformSpace Œ≤'} {F : Œπ ‚Üí Œ≤' ‚Üí Œ±}\n    {k : Œ∫} (hk : UniformEquicontinuous (uŒ≤ := u k) F) :\n    UniformEquicontinuous (uŒ≤ := ‚®Ö k, u k) F := by\n  simp_rw [uniformEquicontinuous_iff_uniformContinuous (uŒ≤ := _)] at hk ‚ä¢\n  exact uniformContinuous_iInf_dom hk\n\n"}
{"name":"uniformEquicontinuousOn_iInf_dom","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nŒ± : Type u_6\nŒ≤' : Type u_9\nuŒ± : UniformSpace Œ±\nu : Œ∫ ‚Üí UniformSpace Œ≤'\nF : Œπ ‚Üí Œ≤' ‚Üí Œ±\nS : Set Œ≤'\nk : Œ∫\nhk : UniformEquicontinuousOn F S\n‚ä¢ UniformEquicontinuousOn F S","decl":"theorem uniformEquicontinuousOn_iInf_dom {u : Œ∫ ‚Üí UniformSpace Œ≤'} {F : Œπ ‚Üí Œ≤' ‚Üí Œ±}\n    {S : Set Œ≤'} {k : Œ∫} (hk : UniformEquicontinuousOn (uŒ≤ := u k) F S) :\n    UniformEquicontinuousOn (uŒ≤ := ‚®Ö k, u k) F S := by\n  simp_rw [uniformEquicontinuousOn_iff_uniformContinuousOn (uŒ≤ := _)] at hk ‚ä¢\n  unfold UniformContinuousOn\n  rw [iInf_uniformity]\n  exact hk.mono_left <| inf_le_inf_right _ <| iInf_le _ k\n\n"}
{"name":"Filter.HasBasis.equicontinuousAt_iff_left","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\np : Œ∫ ‚Üí Prop\ns : Œ∫ ‚Üí Set X\nF : Œπ ‚Üí X ‚Üí Œ±\nx‚ÇÄ : X\nhX : (nhds x‚ÇÄ).HasBasis p s\n‚ä¢ Iff (EquicontinuousAt F x‚ÇÄ) (‚àÄ (U : Set (Prod Œ± Œ±)), Membership.mem (uniformity Œ±) U ‚Üí Exists fun k => And (p k) (‚àÄ (x : X), Membership.mem (s k) x ‚Üí ‚àÄ (i : Œπ), Membership.mem U { fst := F i x‚ÇÄ, snd := F i x }))","decl":"theorem Filter.HasBasis.equicontinuousAt_iff_left {p : Œ∫ ‚Üí Prop} {s : Œ∫ ‚Üí Set X}\n    {F : Œπ ‚Üí X ‚Üí Œ±} {x‚ÇÄ : X} (hX : (ùìù x‚ÇÄ).HasBasis p s) :\n    EquicontinuousAt F x‚ÇÄ ‚Üî ‚àÄ U ‚àà ùì§ Œ±, ‚àÉ k, p k ‚àß ‚àÄ x ‚àà s k, ‚àÄ i, (F i x‚ÇÄ, F i x) ‚àà U := by\n  rw [equicontinuousAt_iff_continuousAt, ContinuousAt,\n    hX.tendsto_iff (UniformFun.hasBasis_nhds Œπ Œ± _)]\n  rfl\n\n"}
{"name":"Filter.HasBasis.equicontinuousWithinAt_iff_left","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\np : Œ∫ ‚Üí Prop\ns : Œ∫ ‚Üí Set X\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\nx‚ÇÄ : X\nhX : (nhdsWithin x‚ÇÄ S).HasBasis p s\n‚ä¢ Iff (EquicontinuousWithinAt F S x‚ÇÄ) (‚àÄ (U : Set (Prod Œ± Œ±)), Membership.mem (uniformity Œ±) U ‚Üí Exists fun k => And (p k) (‚àÄ (x : X), Membership.mem (s k) x ‚Üí ‚àÄ (i : Œπ), Membership.mem U { fst := F i x‚ÇÄ, snd := F i x }))","decl":"theorem Filter.HasBasis.equicontinuousWithinAt_iff_left {p : Œ∫ ‚Üí Prop} {s : Œ∫ ‚Üí Set X}\n    {F : Œπ ‚Üí X ‚Üí Œ±} {S : Set X} {x‚ÇÄ : X} (hX : (ùìù[S] x‚ÇÄ).HasBasis p s) :\n    EquicontinuousWithinAt F S x‚ÇÄ ‚Üî ‚àÄ U ‚àà ùì§ Œ±, ‚àÉ k, p k ‚àß ‚àÄ x ‚àà s k, ‚àÄ i, (F i x‚ÇÄ, F i x) ‚àà U := by\n  rw [equicontinuousWithinAt_iff_continuousWithinAt, ContinuousWithinAt,\n    hX.tendsto_iff (UniformFun.hasBasis_nhds Œπ Œ± _)]\n  rfl\n\n"}
{"name":"Filter.HasBasis.equicontinuousAt_iff_right","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\np : Œ∫ ‚Üí Prop\ns : Œ∫ ‚Üí Set (Prod Œ± Œ±)\nF : Œπ ‚Üí X ‚Üí Œ±\nx‚ÇÄ : X\nhŒ± : (uniformity Œ±).HasBasis p s\n‚ä¢ Iff (EquicontinuousAt F x‚ÇÄ) (‚àÄ (k : Œ∫), p k ‚Üí Filter.Eventually (fun x => ‚àÄ (i : Œπ), Membership.mem (s k) { fst := F i x‚ÇÄ, snd := F i x }) (nhds x‚ÇÄ))","decl":"theorem Filter.HasBasis.equicontinuousAt_iff_right {p : Œ∫ ‚Üí Prop} {s : Œ∫ ‚Üí Set (Œ± √ó Œ±)}\n    {F : Œπ ‚Üí X ‚Üí Œ±} {x‚ÇÄ : X} (hŒ± : (ùì§ Œ±).HasBasis p s) :\n    EquicontinuousAt F x‚ÇÄ ‚Üî ‚àÄ k, p k ‚Üí ‚àÄ·∂† x in ùìù x‚ÇÄ, ‚àÄ i, (F i x‚ÇÄ, F i x) ‚àà s k := by\n  rw [equicontinuousAt_iff_continuousAt, ContinuousAt,\n    (UniformFun.hasBasis_nhds_of_basis Œπ Œ± _ hŒ±).tendsto_right_iff]\n  rfl\n\n"}
{"name":"Filter.HasBasis.equicontinuousWithinAt_iff_right","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\np : Œ∫ ‚Üí Prop\ns : Œ∫ ‚Üí Set (Prod Œ± Œ±)\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\nx‚ÇÄ : X\nhŒ± : (uniformity Œ±).HasBasis p s\n‚ä¢ Iff (EquicontinuousWithinAt F S x‚ÇÄ) (‚àÄ (k : Œ∫), p k ‚Üí Filter.Eventually (fun x => ‚àÄ (i : Œπ), Membership.mem (s k) { fst := F i x‚ÇÄ, snd := F i x }) (nhdsWithin x‚ÇÄ S))","decl":"theorem Filter.HasBasis.equicontinuousWithinAt_iff_right {p : Œ∫ ‚Üí Prop}\n    {s : Œ∫ ‚Üí Set (Œ± √ó Œ±)} {F : Œπ ‚Üí X ‚Üí Œ±} {S : Set X} {x‚ÇÄ : X} (hŒ± : (ùì§ Œ±).HasBasis p s) :\n    EquicontinuousWithinAt F S x‚ÇÄ ‚Üî ‚àÄ k, p k ‚Üí ‚àÄ·∂† x in ùìù[S] x‚ÇÄ, ‚àÄ i, (F i x‚ÇÄ, F i x) ‚àà s k := by\n  rw [equicontinuousWithinAt_iff_continuousWithinAt, ContinuousWithinAt,\n    (UniformFun.hasBasis_nhds_of_basis Œπ Œ± _ hŒ±).tendsto_right_iff]\n  rfl\n\n"}
{"name":"Filter.HasBasis.equicontinuousAt_iff","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nŒ∫‚ÇÅ : Type u_11\nŒ∫‚ÇÇ : Type u_12\np‚ÇÅ : Œ∫‚ÇÅ ‚Üí Prop\ns‚ÇÅ : Œ∫‚ÇÅ ‚Üí Set X\np‚ÇÇ : Œ∫‚ÇÇ ‚Üí Prop\ns‚ÇÇ : Œ∫‚ÇÇ ‚Üí Set (Prod Œ± Œ±)\nF : Œπ ‚Üí X ‚Üí Œ±\nx‚ÇÄ : X\nhX : (nhds x‚ÇÄ).HasBasis p‚ÇÅ s‚ÇÅ\nhŒ± : (uniformity Œ±).HasBasis p‚ÇÇ s‚ÇÇ\n‚ä¢ Iff (EquicontinuousAt F x‚ÇÄ) (‚àÄ (k‚ÇÇ : Œ∫‚ÇÇ), p‚ÇÇ k‚ÇÇ ‚Üí Exists fun k‚ÇÅ => And (p‚ÇÅ k‚ÇÅ) (‚àÄ (x : X), Membership.mem (s‚ÇÅ k‚ÇÅ) x ‚Üí ‚àÄ (i : Œπ), Membership.mem (s‚ÇÇ k‚ÇÇ) { fst := F i x‚ÇÄ, snd := F i x }))","decl":"theorem Filter.HasBasis.equicontinuousAt_iff {Œ∫‚ÇÅ Œ∫‚ÇÇ : Type*} {p‚ÇÅ : Œ∫‚ÇÅ ‚Üí Prop} {s‚ÇÅ : Œ∫‚ÇÅ ‚Üí Set X}\n    {p‚ÇÇ : Œ∫‚ÇÇ ‚Üí Prop} {s‚ÇÇ : Œ∫‚ÇÇ ‚Üí Set (Œ± √ó Œ±)} {F : Œπ ‚Üí X ‚Üí Œ±} {x‚ÇÄ : X} (hX : (ùìù x‚ÇÄ).HasBasis p‚ÇÅ s‚ÇÅ)\n    (hŒ± : (ùì§ Œ±).HasBasis p‚ÇÇ s‚ÇÇ) :\n    EquicontinuousAt F x‚ÇÄ ‚Üî\n      ‚àÄ k‚ÇÇ, p‚ÇÇ k‚ÇÇ ‚Üí ‚àÉ k‚ÇÅ, p‚ÇÅ k‚ÇÅ ‚àß ‚àÄ x ‚àà s‚ÇÅ k‚ÇÅ, ‚àÄ i, (F i x‚ÇÄ, F i x) ‚àà s‚ÇÇ k‚ÇÇ := by\n  rw [equicontinuousAt_iff_continuousAt, ContinuousAt,\n    hX.tendsto_iff (UniformFun.hasBasis_nhds_of_basis Œπ Œ± _ hŒ±)]\n  rfl\n\n"}
{"name":"Filter.HasBasis.equicontinuousWithinAt_iff","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nŒ∫‚ÇÅ : Type u_11\nŒ∫‚ÇÇ : Type u_12\np‚ÇÅ : Œ∫‚ÇÅ ‚Üí Prop\ns‚ÇÅ : Œ∫‚ÇÅ ‚Üí Set X\np‚ÇÇ : Œ∫‚ÇÇ ‚Üí Prop\ns‚ÇÇ : Œ∫‚ÇÇ ‚Üí Set (Prod Œ± Œ±)\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\nx‚ÇÄ : X\nhX : (nhdsWithin x‚ÇÄ S).HasBasis p‚ÇÅ s‚ÇÅ\nhŒ± : (uniformity Œ±).HasBasis p‚ÇÇ s‚ÇÇ\n‚ä¢ Iff (EquicontinuousWithinAt F S x‚ÇÄ) (‚àÄ (k‚ÇÇ : Œ∫‚ÇÇ), p‚ÇÇ k‚ÇÇ ‚Üí Exists fun k‚ÇÅ => And (p‚ÇÅ k‚ÇÅ) (‚àÄ (x : X), Membership.mem (s‚ÇÅ k‚ÇÅ) x ‚Üí ‚àÄ (i : Œπ), Membership.mem (s‚ÇÇ k‚ÇÇ) { fst := F i x‚ÇÄ, snd := F i x }))","decl":"theorem Filter.HasBasis.equicontinuousWithinAt_iff {Œ∫‚ÇÅ Œ∫‚ÇÇ : Type*} {p‚ÇÅ : Œ∫‚ÇÅ ‚Üí Prop}\n    {s‚ÇÅ : Œ∫‚ÇÅ ‚Üí Set X} {p‚ÇÇ : Œ∫‚ÇÇ ‚Üí Prop} {s‚ÇÇ : Œ∫‚ÇÇ ‚Üí Set (Œ± √ó Œ±)} {F : Œπ ‚Üí X ‚Üí Œ±} {S : Set X} {x‚ÇÄ : X}\n    (hX : (ùìù[S] x‚ÇÄ).HasBasis p‚ÇÅ s‚ÇÅ) (hŒ± : (ùì§ Œ±).HasBasis p‚ÇÇ s‚ÇÇ) :\n    EquicontinuousWithinAt F S x‚ÇÄ ‚Üî\n      ‚àÄ k‚ÇÇ, p‚ÇÇ k‚ÇÇ ‚Üí ‚àÉ k‚ÇÅ, p‚ÇÅ k‚ÇÅ ‚àß ‚àÄ x ‚àà s‚ÇÅ k‚ÇÅ, ‚àÄ i, (F i x‚ÇÄ, F i x) ‚àà s‚ÇÇ k‚ÇÇ := by\n  rw [equicontinuousWithinAt_iff_continuousWithinAt, ContinuousWithinAt,\n    hX.tendsto_iff (UniformFun.hasBasis_nhds_of_basis Œπ Œ± _ hŒ±)]\n  rfl\n\n"}
{"name":"Filter.HasBasis.uniformEquicontinuous_iff_left","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\np : Œ∫ ‚Üí Prop\ns : Œ∫ ‚Üí Set (Prod Œ≤ Œ≤)\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nhŒ≤ : (uniformity Œ≤).HasBasis p s\n‚ä¢ Iff (UniformEquicontinuous F) (‚àÄ (U : Set (Prod Œ± Œ±)), Membership.mem (uniformity Œ±) U ‚Üí Exists fun k => And (p k) (‚àÄ (x y : Œ≤), Membership.mem (s k) { fst := x, snd := y } ‚Üí ‚àÄ (i : Œπ), Membership.mem U { fst := F i x, snd := F i y }))","decl":"theorem Filter.HasBasis.uniformEquicontinuous_iff_left {p : Œ∫ ‚Üí Prop}\n    {s : Œ∫ ‚Üí Set (Œ≤ √ó Œ≤)} {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} (hŒ≤ : (ùì§ Œ≤).HasBasis p s) :\n    UniformEquicontinuous F ‚Üî\n      ‚àÄ U ‚àà ùì§ Œ±, ‚àÉ k, p k ‚àß ‚àÄ x y, (x, y) ‚àà s k ‚Üí ‚àÄ i, (F i x, F i y) ‚àà U := by\n  rw [uniformEquicontinuous_iff_uniformContinuous, UniformContinuous,\n    hŒ≤.tendsto_iff (UniformFun.hasBasis_uniformity Œπ Œ±)]\n  simp only [Prod.forall]\n  rfl\n\n"}
{"name":"Filter.HasBasis.uniformEquicontinuousOn_iff_left","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\np : Œ∫ ‚Üí Prop\ns : Œ∫ ‚Üí Set (Prod Œ≤ Œ≤)\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nS : Set Œ≤\nhŒ≤ : (Min.min (uniformity Œ≤) (Filter.principal (SProd.sprod S S))).HasBasis p s\n‚ä¢ Iff (UniformEquicontinuousOn F S) (‚àÄ (U : Set (Prod Œ± Œ±)), Membership.mem (uniformity Œ±) U ‚Üí Exists fun k => And (p k) (‚àÄ (x y : Œ≤), Membership.mem (s k) { fst := x, snd := y } ‚Üí ‚àÄ (i : Œπ), Membership.mem U { fst := F i x, snd := F i y }))","decl":"theorem Filter.HasBasis.uniformEquicontinuousOn_iff_left {p : Œ∫ ‚Üí Prop}\n    {s : Œ∫ ‚Üí Set (Œ≤ √ó Œ≤)} {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} {S : Set Œ≤} (hŒ≤ : (ùì§ Œ≤ ‚äì ùìü (S √óÀ¢ S)).HasBasis p s) :\n    UniformEquicontinuousOn F S ‚Üî\n      ‚àÄ U ‚àà ùì§ Œ±, ‚àÉ k, p k ‚àß ‚àÄ x y, (x, y) ‚àà s k ‚Üí ‚àÄ i, (F i x, F i y) ‚àà U := by\n  rw [uniformEquicontinuousOn_iff_uniformContinuousOn, UniformContinuousOn,\n    hŒ≤.tendsto_iff (UniformFun.hasBasis_uniformity Œπ Œ±)]\n  simp only [Prod.forall]\n  rfl\n\n"}
{"name":"Filter.HasBasis.uniformEquicontinuous_iff_right","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\np : Œ∫ ‚Üí Prop\ns : Œ∫ ‚Üí Set (Prod Œ± Œ±)\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nhŒ± : (uniformity Œ±).HasBasis p s\n‚ä¢ Iff (UniformEquicontinuous F) (‚àÄ (k : Œ∫), p k ‚Üí Filter.Eventually (fun xy => ‚àÄ (i : Œπ), Membership.mem (s k) { fst := F i xy.1, snd := F i xy.2 }) (uniformity Œ≤))","decl":"theorem Filter.HasBasis.uniformEquicontinuous_iff_right {p : Œ∫ ‚Üí Prop}\n    {s : Œ∫ ‚Üí Set (Œ± √ó Œ±)} {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} (hŒ± : (ùì§ Œ±).HasBasis p s) :\n    UniformEquicontinuous F ‚Üî ‚àÄ k, p k ‚Üí ‚àÄ·∂† xy : Œ≤ √ó Œ≤ in ùì§ Œ≤, ‚àÄ i, (F i xy.1, F i xy.2) ‚àà s k := by\n  rw [uniformEquicontinuous_iff_uniformContinuous, UniformContinuous,\n    (UniformFun.hasBasis_uniformity_of_basis Œπ Œ± hŒ±).tendsto_right_iff]\n  rfl\n\n"}
{"name":"Filter.HasBasis.uniformEquicontinuousOn_iff_right","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ∫ : Type u_2\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\np : Œ∫ ‚Üí Prop\ns : Œ∫ ‚Üí Set (Prod Œ± Œ±)\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nS : Set Œ≤\nhŒ± : (uniformity Œ±).HasBasis p s\n‚ä¢ Iff (UniformEquicontinuousOn F S) (‚àÄ (k : Œ∫), p k ‚Üí Filter.Eventually (fun xy => ‚àÄ (i : Œπ), Membership.mem (s k) { fst := F i xy.1, snd := F i xy.2 }) (Min.min (uniformity Œ≤) (Filter.principal (SProd.sprod S S))))","decl":"theorem Filter.HasBasis.uniformEquicontinuousOn_iff_right {p : Œ∫ ‚Üí Prop}\n    {s : Œ∫ ‚Üí Set (Œ± √ó Œ±)} {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} {S : Set Œ≤} (hŒ± : (ùì§ Œ±).HasBasis p s) :\n    UniformEquicontinuousOn F S ‚Üî\n      ‚àÄ k, p k ‚Üí ‚àÄ·∂† xy : Œ≤ √ó Œ≤ in ùì§ Œ≤ ‚äì ùìü (S √óÀ¢ S), ‚àÄ i, (F i xy.1, F i xy.2) ‚àà s k := by\n  rw [uniformEquicontinuousOn_iff_uniformContinuousOn, UniformContinuousOn,\n    (UniformFun.hasBasis_uniformity_of_basis Œπ Œ± hŒ±).tendsto_right_iff]\n  rfl\n\n"}
{"name":"Filter.HasBasis.uniformEquicontinuous_iff","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nŒ∫‚ÇÅ : Type u_11\nŒ∫‚ÇÇ : Type u_12\np‚ÇÅ : Œ∫‚ÇÅ ‚Üí Prop\ns‚ÇÅ : Œ∫‚ÇÅ ‚Üí Set (Prod Œ≤ Œ≤)\np‚ÇÇ : Œ∫‚ÇÇ ‚Üí Prop\ns‚ÇÇ : Œ∫‚ÇÇ ‚Üí Set (Prod Œ± Œ±)\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nhŒ≤ : (uniformity Œ≤).HasBasis p‚ÇÅ s‚ÇÅ\nhŒ± : (uniformity Œ±).HasBasis p‚ÇÇ s‚ÇÇ\n‚ä¢ Iff (UniformEquicontinuous F) (‚àÄ (k‚ÇÇ : Œ∫‚ÇÇ), p‚ÇÇ k‚ÇÇ ‚Üí Exists fun k‚ÇÅ => And (p‚ÇÅ k‚ÇÅ) (‚àÄ (x y : Œ≤), Membership.mem (s‚ÇÅ k‚ÇÅ) { fst := x, snd := y } ‚Üí ‚àÄ (i : Œπ), Membership.mem (s‚ÇÇ k‚ÇÇ) { fst := F i x, snd := F i y }))","decl":"theorem Filter.HasBasis.uniformEquicontinuous_iff {Œ∫‚ÇÅ Œ∫‚ÇÇ : Type*} {p‚ÇÅ : Œ∫‚ÇÅ ‚Üí Prop}\n    {s‚ÇÅ : Œ∫‚ÇÅ ‚Üí Set (Œ≤ √ó Œ≤)} {p‚ÇÇ : Œ∫‚ÇÇ ‚Üí Prop} {s‚ÇÇ : Œ∫‚ÇÇ ‚Üí Set (Œ± √ó Œ±)} {F : Œπ ‚Üí Œ≤ ‚Üí Œ±}\n    (hŒ≤ : (ùì§ Œ≤).HasBasis p‚ÇÅ s‚ÇÅ) (hŒ± : (ùì§ Œ±).HasBasis p‚ÇÇ s‚ÇÇ) :\n    UniformEquicontinuous F ‚Üî\n      ‚àÄ k‚ÇÇ, p‚ÇÇ k‚ÇÇ ‚Üí ‚àÉ k‚ÇÅ, p‚ÇÅ k‚ÇÅ ‚àß ‚àÄ x y, (x, y) ‚àà s‚ÇÅ k‚ÇÅ ‚Üí ‚àÄ i, (F i x, F i y) ‚àà s‚ÇÇ k‚ÇÇ := by\n  rw [uniformEquicontinuous_iff_uniformContinuous, UniformContinuous,\n    hŒ≤.tendsto_iff (UniformFun.hasBasis_uniformity_of_basis Œπ Œ± hŒ±)]\n  simp only [Prod.forall]\n  rfl\n\n"}
{"name":"Filter.HasBasis.uniformEquicontinuousOn_iff","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nŒ∫‚ÇÅ : Type u_11\nŒ∫‚ÇÇ : Type u_12\np‚ÇÅ : Œ∫‚ÇÅ ‚Üí Prop\ns‚ÇÅ : Œ∫‚ÇÅ ‚Üí Set (Prod Œ≤ Œ≤)\np‚ÇÇ : Œ∫‚ÇÇ ‚Üí Prop\ns‚ÇÇ : Œ∫‚ÇÇ ‚Üí Set (Prod Œ± Œ±)\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nS : Set Œ≤\nhŒ≤ : (Min.min (uniformity Œ≤) (Filter.principal (SProd.sprod S S))).HasBasis p‚ÇÅ s‚ÇÅ\nhŒ± : (uniformity Œ±).HasBasis p‚ÇÇ s‚ÇÇ\n‚ä¢ Iff (UniformEquicontinuousOn F S) (‚àÄ (k‚ÇÇ : Œ∫‚ÇÇ), p‚ÇÇ k‚ÇÇ ‚Üí Exists fun k‚ÇÅ => And (p‚ÇÅ k‚ÇÅ) (‚àÄ (x y : Œ≤), Membership.mem (s‚ÇÅ k‚ÇÅ) { fst := x, snd := y } ‚Üí ‚àÄ (i : Œπ), Membership.mem (s‚ÇÇ k‚ÇÇ) { fst := F i x, snd := F i y }))","decl":"theorem Filter.HasBasis.uniformEquicontinuousOn_iff {Œ∫‚ÇÅ Œ∫‚ÇÇ : Type*} {p‚ÇÅ : Œ∫‚ÇÅ ‚Üí Prop}\n    {s‚ÇÅ : Œ∫‚ÇÅ ‚Üí Set (Œ≤ √ó Œ≤)} {p‚ÇÇ : Œ∫‚ÇÇ ‚Üí Prop} {s‚ÇÇ : Œ∫‚ÇÇ ‚Üí Set (Œ± √ó Œ±)} {F : Œπ ‚Üí Œ≤ ‚Üí Œ±}\n    {S : Set Œ≤} (hŒ≤ : (ùì§ Œ≤ ‚äì ùìü (S √óÀ¢ S)).HasBasis p‚ÇÅ s‚ÇÅ) (hŒ± : (ùì§ Œ±).HasBasis p‚ÇÇ s‚ÇÇ) :\n    UniformEquicontinuousOn F S ‚Üî\n      ‚àÄ k‚ÇÇ, p‚ÇÇ k‚ÇÇ ‚Üí ‚àÉ k‚ÇÅ, p‚ÇÅ k‚ÇÅ ‚àß ‚àÄ x y, (x, y) ‚àà s‚ÇÅ k‚ÇÅ ‚Üí ‚àÄ i, (F i x, F i y) ‚àà s‚ÇÇ k‚ÇÇ := by\n  rw [uniformEquicontinuousOn_iff_uniformContinuousOn, UniformContinuousOn,\n    hŒ≤.tendsto_iff (UniformFun.hasBasis_uniformity_of_basis Œπ Œ± hŒ±)]\n  simp only [Prod.forall]\n  rfl\n\n"}
{"name":"IsUniformInducing.equicontinuousAt_iff","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\nŒ≤ : Type u_8\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nF : Œπ ‚Üí X ‚Üí Œ±\nx‚ÇÄ : X\nu : Œ± ‚Üí Œ≤\nhu : IsUniformInducing u\n‚ä¢ Iff (EquicontinuousAt F x‚ÇÄ) (EquicontinuousAt (Function.comp (fun x => Function.comp u x) F) x‚ÇÄ)","decl":"/-- Given `u : Œ± ‚Üí Œ≤` a uniform inducing map, a family `ùìï : Œπ ‚Üí X ‚Üí Œ±` is equicontinuous at a point\n`x‚ÇÄ : X` iff the family `ùìï'`, obtained by composing each function of `ùìï` by `u`, is\nequicontinuous at `x‚ÇÄ`. -/\ntheorem IsUniformInducing.equicontinuousAt_iff {F : Œπ ‚Üí X ‚Üí Œ±} {x‚ÇÄ : X} {u : Œ± ‚Üí Œ≤}\n    (hu : IsUniformInducing u) : EquicontinuousAt F x‚ÇÄ ‚Üî EquicontinuousAt ((u ‚àò ¬∑) ‚àò F) x‚ÇÄ := by\n  have := (UniformFun.postcomp_isUniformInducing (Œ± := Œπ) hu).isInducing\n  rw [equicontinuousAt_iff_continuousAt, equicontinuousAt_iff_continuousAt, this.continuousAt_iff]\n  rfl\n\n"}
{"name":"UniformInducing.equicontinuousAt_iff","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\nŒ≤ : Type u_8\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nF : Œπ ‚Üí X ‚Üí Œ±\nx‚ÇÄ : X\nu : Œ± ‚Üí Œ≤\nhu : IsUniformInducing u\n‚ä¢ Iff (EquicontinuousAt F x‚ÇÄ) (EquicontinuousAt (Function.comp (fun x => Function.comp u x) F) x‚ÇÄ)","decl":"@[deprecated (since := \"2024-10-05\")]\nalias UniformInducing.equicontinuousAt_iff := IsUniformInducing.equicontinuousAt_iff\n\n"}
{"name":"IsUniformInducing.equicontinuousWithinAt_iff","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\nŒ≤ : Type u_8\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\nx‚ÇÄ : X\nu : Œ± ‚Üí Œ≤\nhu : IsUniformInducing u\n‚ä¢ Iff (EquicontinuousWithinAt F S x‚ÇÄ) (EquicontinuousWithinAt (Function.comp (fun x => Function.comp u x) F) S x‚ÇÄ)","decl":"/-- Given `u : Œ± ‚Üí Œ≤` a uniform inducing map, a family `ùìï : Œπ ‚Üí X ‚Üí Œ±` is equicontinuous at a point\n`x‚ÇÄ : X` within a subset `S : Set X` iff the family `ùìï'`, obtained by composing each function\nof `ùìï` by `u`, is equicontinuous at `x‚ÇÄ` within `S`. -/\nlemma IsUniformInducing.equicontinuousWithinAt_iff {F : Œπ ‚Üí X ‚Üí Œ±} {S : Set X} {x‚ÇÄ : X} {u : Œ± ‚Üí Œ≤}\n    (hu : IsUniformInducing u) : EquicontinuousWithinAt F S x‚ÇÄ ‚Üî\n      EquicontinuousWithinAt ((u ‚àò ¬∑) ‚àò F) S x‚ÇÄ := by\n  have := (UniformFun.postcomp_isUniformInducing (Œ± := Œπ) hu).isInducing\n  simp only [equicontinuousWithinAt_iff_continuousWithinAt, this.continuousWithinAt_iff]\n  rfl\n\n"}
{"name":"UniformInducing.equicontinuousWithinAt_iff","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\nŒ≤ : Type u_8\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\nx‚ÇÄ : X\nu : Œ± ‚Üí Œ≤\nhu : IsUniformInducing u\n‚ä¢ Iff (EquicontinuousWithinAt F S x‚ÇÄ) (EquicontinuousWithinAt (Function.comp (fun x => Function.comp u x) F) S x‚ÇÄ)","decl":"@[deprecated (since := \"2024-10-05\")]\nalias UniformInducing.equicontinuousWithinAt_iff := IsUniformInducing.equicontinuousWithinAt_iff\n\n"}
{"name":"IsUniformInducing.equicontinuous_iff","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\nŒ≤ : Type u_8\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nF : Œπ ‚Üí X ‚Üí Œ±\nu : Œ± ‚Üí Œ≤\nhu : IsUniformInducing u\n‚ä¢ Iff (Equicontinuous F) (Equicontinuous (Function.comp (fun x => Function.comp u x) F))","decl":"/-- Given `u : Œ± ‚Üí Œ≤` a uniform inducing map, a family `ùìï : Œπ ‚Üí X ‚Üí Œ±` is equicontinuous iff the\nfamily `ùìï'`, obtained by composing each function of `ùìï` by `u`, is equicontinuous. -/\nlemma IsUniformInducing.equicontinuous_iff {F : Œπ ‚Üí X ‚Üí Œ±} {u : Œ± ‚Üí Œ≤} (hu : IsUniformInducing u) :\n    Equicontinuous F ‚Üî Equicontinuous ((u ‚àò ¬∑) ‚àò F) := by\n  congrm ‚àÄ x, ?_\n  rw [hu.equicontinuousAt_iff]\n\n"}
{"name":"UniformInducing.equicontinuous_iff","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\nŒ≤ : Type u_8\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nF : Œπ ‚Üí X ‚Üí Œ±\nu : Œ± ‚Üí Œ≤\nhu : IsUniformInducing u\n‚ä¢ Iff (Equicontinuous F) (Equicontinuous (Function.comp (fun x => Function.comp u x) F))","decl":"@[deprecated (since := \"2024-10-05\")]\nalias UniformInducing.equicontinuous_iff := IsUniformInducing.equicontinuous_iff\n\n"}
{"name":"IsUniformInducing.equicontinuousOn_iff","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\nŒ≤ : Type u_8\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\nu : Œ± ‚Üí Œ≤\nhu : IsUniformInducing u\n‚ä¢ Iff (EquicontinuousOn F S) (EquicontinuousOn (Function.comp (fun x => Function.comp u x) F) S)","decl":"/-- Given `u : Œ± ‚Üí Œ≤` a uniform inducing map, a family `ùìï : Œπ ‚Üí X ‚Üí Œ±` is equicontinuous on a\nsubset `S : Set X` iff the family `ùìï'`, obtained by composing each function of `ùìï` by `u`, is\nequicontinuous on `S`. -/\ntheorem IsUniformInducing.equicontinuousOn_iff {F : Œπ ‚Üí X ‚Üí Œ±} {S : Set X} {u : Œ± ‚Üí Œ≤}\n    (hu : IsUniformInducing u) : EquicontinuousOn F S ‚Üî EquicontinuousOn ((u ‚àò ¬∑) ‚àò F) S := by\n  congrm ‚àÄ x ‚àà S, ?_\n  rw [hu.equicontinuousWithinAt_iff]\n\n"}
{"name":"UniformInducing.equicontinuousOn_iff","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\nŒ≤ : Type u_8\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nF : Œπ ‚Üí X ‚Üí Œ±\nS : Set X\nu : Œ± ‚Üí Œ≤\nhu : IsUniformInducing u\n‚ä¢ Iff (EquicontinuousOn F S) (EquicontinuousOn (Function.comp (fun x => Function.comp u x) F) S)","decl":"@[deprecated (since := \"2024-10-05\")]\nalias UniformInducing.equicontinuousOn_iff := IsUniformInducing.equicontinuousOn_iff\n\n"}
{"name":"IsUniformInducing.uniformEquicontinuous_iff","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nŒ≥ : Type u_10\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nuŒ≥ : UniformSpace Œ≥\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nu : Œ± ‚Üí Œ≥\nhu : IsUniformInducing u\n‚ä¢ Iff (UniformEquicontinuous F) (UniformEquicontinuous (Function.comp (fun x => Function.comp u x) F))","decl":"/-- Given `u : Œ± ‚Üí Œ≥` a uniform inducing map, a family `ùìï : Œπ ‚Üí Œ≤ ‚Üí Œ±` is uniformly equicontinuous\niff the family `ùìï'`, obtained by composing each function of `ùìï` by `u`, is uniformly\nequicontinuous. -/\ntheorem IsUniformInducing.uniformEquicontinuous_iff {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} {u : Œ± ‚Üí Œ≥}\n    (hu : IsUniformInducing u) : UniformEquicontinuous F ‚Üî UniformEquicontinuous ((u ‚àò ¬∑) ‚àò F) := by\n  have := UniformFun.postcomp_isUniformInducing (Œ± := Œπ) hu\n  simp only [uniformEquicontinuous_iff_uniformContinuous, this.uniformContinuous_iff]\n  rfl\n\n"}
{"name":"UniformInducing.uniformEquicontinuous_iff","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nŒ≥ : Type u_10\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nuŒ≥ : UniformSpace Œ≥\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nu : Œ± ‚Üí Œ≥\nhu : IsUniformInducing u\n‚ä¢ Iff (UniformEquicontinuous F) (UniformEquicontinuous (Function.comp (fun x => Function.comp u x) F))","decl":"@[deprecated (since := \"2024-10-05\")]\nalias UniformInducing.uniformEquicontinuous_iff := IsUniformInducing.uniformEquicontinuous_iff\n\n"}
{"name":"IsUniformInducing.uniformEquicontinuousOn_iff","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nŒ≥ : Type u_10\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nuŒ≥ : UniformSpace Œ≥\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nS : Set Œ≤\nu : Œ± ‚Üí Œ≥\nhu : IsUniformInducing u\n‚ä¢ Iff (UniformEquicontinuousOn F S) (UniformEquicontinuousOn (Function.comp (fun x => Function.comp u x) F) S)","decl":"/-- Given `u : Œ± ‚Üí Œ≥` a uniform inducing map, a family `ùìï : Œπ ‚Üí Œ≤ ‚Üí Œ±` is uniformly equicontinuous\non a subset `S : Set Œ≤` iff the family `ùìï'`, obtained by composing each function of `ùìï` by `u`,\nis uniformly equicontinuous on `S`. -/\ntheorem IsUniformInducing.uniformEquicontinuousOn_iff {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} {S : Set Œ≤} {u : Œ± ‚Üí Œ≥}\n    (hu : IsUniformInducing u) :\n    UniformEquicontinuousOn F S ‚Üî UniformEquicontinuousOn ((u ‚àò ¬∑) ‚àò F) S := by\n  have := UniformFun.postcomp_isUniformInducing (Œ± := Œπ) hu\n  simp only [uniformEquicontinuousOn_iff_uniformContinuousOn, this.uniformContinuousOn_iff]\n  rfl\n\n"}
{"name":"UniformInducing.uniformEquicontinuousOn_iff","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nŒ≥ : Type u_10\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nuŒ≥ : UniformSpace Œ≥\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nS : Set Œ≤\nu : Œ± ‚Üí Œ≥\nhu : IsUniformInducing u\n‚ä¢ Iff (UniformEquicontinuousOn F S) (UniformEquicontinuousOn (Function.comp (fun x => Function.comp u x) F) S)","decl":"@[deprecated (since := \"2024-10-05\")]\nalias UniformInducing.uniformEquicontinuousOn_iff := IsUniformInducing.uniformEquicontinuousOn_iff\n\n"}
{"name":"EquicontinuousWithinAt.closure'","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"X : Type u_3\nY : Type u_5\nŒ± : Type u_6\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\nuŒ± : UniformSpace Œ±\nA : Set Y\nu : Y ‚Üí X ‚Üí Œ±\nS : Set X\nx‚ÇÄ : X\nhA : EquicontinuousWithinAt (Function.comp u Subtype.val) S x‚ÇÄ\nhu‚ÇÅ : Continuous (Function.comp S.restrict u)\nhu‚ÇÇ : Continuous (Function.comp (Function.eval x‚ÇÄ) u)\n‚ä¢ EquicontinuousWithinAt (Function.comp u Subtype.val) S x‚ÇÄ","decl":"/-- If a set of functions is equicontinuous at some `x‚ÇÄ` within a set `S`, the same is true for its\nclosure in *any* topology for which evaluation at any `x ‚àà S ‚à™ {x‚ÇÄ}` is continuous. Since\nthis will be applied to `DFunLike` types, we state it for any topological space with a map\nto `X ‚Üí Œ±` satisfying the right continuity conditions. See also `Set.EquicontinuousWithinAt.closure`\nfor a more familiar (but weaker) statement.\n\nNote: This could *technically* be called `EquicontinuousWithinAt.closure` without name clashes\nwith `Set.EquicontinuousWithinAt.closure`, but we don't do it because, even with a `protected`\nmarker, it would introduce ambiguities while working in namespace `Set` (e.g, in the proof of\nany theorem called `Set.something`). -/\ntheorem EquicontinuousWithinAt.closure' {A : Set Y} {u : Y ‚Üí X ‚Üí Œ±} {S : Set X} {x‚ÇÄ : X}\n    (hA : EquicontinuousWithinAt (u ‚àò (‚Üë) : A ‚Üí X ‚Üí Œ±) S x‚ÇÄ) (hu‚ÇÅ : Continuous (S.restrict ‚àò u))\n    (hu‚ÇÇ : Continuous (eval x‚ÇÄ ‚àò u)) :\n    EquicontinuousWithinAt (u ‚àò (‚Üë) : closure A ‚Üí X ‚Üí Œ±) S x‚ÇÄ := by\n  intro U hU\n  rcases mem_uniformity_isClosed hU with ‚ü®V, hV, hVclosed, hVU‚ü©\n  filter_upwards [hA V hV, eventually_mem_nhdsWithin] with x hx hxS\n  rw [SetCoe.forall] at *\n  change A ‚äÜ (fun f => (u f x‚ÇÄ, u f x)) ‚Åª¬π' V at hx\n  refine (closure_minimal hx <| hVclosed.preimage <| hu‚ÇÇ.prod_mk ?_).trans (preimage_mono hVU)\n  exact (continuous_apply ‚ü®x, hxS‚ü©).comp hu‚ÇÅ\n\n"}
{"name":"EquicontinuousAt.closure'","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"X : Type u_3\nY : Type u_5\nŒ± : Type u_6\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\nuŒ± : UniformSpace Œ±\nA : Set Y\nu : Y ‚Üí X ‚Üí Œ±\nx‚ÇÄ : X\nhA : EquicontinuousAt (Function.comp u Subtype.val) x‚ÇÄ\nhu : Continuous u\n‚ä¢ EquicontinuousAt (Function.comp u Subtype.val) x‚ÇÄ","decl":"/-- If a set of functions is equicontinuous at some `x‚ÇÄ`, the same is true for its closure in *any*\ntopology for which evaluation at any point is continuous. Since this will be applied to\n`DFunLike` types, we state it for any topological space with a map to `X ‚Üí Œ±` satisfying the right\ncontinuity conditions. See also `Set.EquicontinuousAt.closure` for a more familiar statement. -/\ntheorem EquicontinuousAt.closure' {A : Set Y} {u : Y ‚Üí X ‚Üí Œ±} {x‚ÇÄ : X}\n    (hA : EquicontinuousAt (u ‚àò (‚Üë) : A ‚Üí X ‚Üí Œ±) x‚ÇÄ) (hu : Continuous u) :\n    EquicontinuousAt (u ‚àò (‚Üë) : closure A ‚Üí X ‚Üí Œ±) x‚ÇÄ := by\n  rw [‚Üê equicontinuousWithinAt_univ] at hA ‚ä¢\n  exact hA.closure' (Pi.continuous_restrict _ |>.comp hu) (continuous_apply x‚ÇÄ |>.comp hu)\n\n"}
{"name":"Set.EquicontinuousAt.closure","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"X : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nA : Set (X ‚Üí Œ±)\nx‚ÇÄ : X\nhA : A.EquicontinuousAt x‚ÇÄ\n‚ä¢ (closure A).EquicontinuousAt x‚ÇÄ","decl":"/-- If a set of functions is equicontinuous at some `x‚ÇÄ`, its closure for the product topology is\nalso equicontinuous at `x‚ÇÄ`. -/\nprotected theorem Set.EquicontinuousAt.closure {A : Set (X ‚Üí Œ±)} {x‚ÇÄ : X}\n    (hA : A.EquicontinuousAt x‚ÇÄ) : (closure A).EquicontinuousAt x‚ÇÄ :=\n  hA.closure' (u := id) continuous_id\n\n"}
{"name":"Set.EquicontinuousWithinAt.closure","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"X : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nA : Set (X ‚Üí Œ±)\nS : Set X\nx‚ÇÄ : X\nhA : A.EquicontinuousWithinAt S x‚ÇÄ\n‚ä¢ (closure A).EquicontinuousWithinAt S x‚ÇÄ","decl":"/-- If a set of functions is equicontinuous at some `x‚ÇÄ` within a set `S`, its closure for the\nproduct topology is also equicontinuous at `x‚ÇÄ` within `S`. This would also be true for the coarser\ntopology of pointwise convergence on `S ‚à™ {x‚ÇÄ}`, see `Set.EquicontinuousWithinAt.closure'`. -/\nprotected theorem Set.EquicontinuousWithinAt.closure {A : Set (X ‚Üí Œ±)} {S : Set X} {x‚ÇÄ : X}\n    (hA : A.EquicontinuousWithinAt S x‚ÇÄ) :\n    (closure A).EquicontinuousWithinAt S x‚ÇÄ :=\n  hA.closure' (u := id) (Pi.continuous_restrict _) (continuous_apply _)\n\n"}
{"name":"Equicontinuous.closure'","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"X : Type u_3\nY : Type u_5\nŒ± : Type u_6\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\nuŒ± : UniformSpace Œ±\nA : Set Y\nu : Y ‚Üí X ‚Üí Œ±\nhA : Equicontinuous (Function.comp u Subtype.val)\nhu : Continuous u\n‚ä¢ Equicontinuous (Function.comp u Subtype.val)","decl":"/-- If a set of functions is equicontinuous, the same is true for its closure in *any*\ntopology for which evaluation at any point is continuous. Since this will be applied to\n`DFunLike` types, we state it for any topological space with a map to `X ‚Üí Œ±` satisfying the right\ncontinuity conditions. See also `Set.Equicontinuous.closure` for a more familiar statement. -/\ntheorem Equicontinuous.closure' {A : Set Y} {u : Y ‚Üí X ‚Üí Œ±}\n    (hA : Equicontinuous (u ‚àò (‚Üë) : A ‚Üí X ‚Üí Œ±)) (hu : Continuous u) :\n    Equicontinuous (u ‚àò (‚Üë) : closure A ‚Üí X ‚Üí Œ±) := fun x ‚Ü¶ (hA x).closure' hu\n\n"}
{"name":"EquicontinuousOn.closure'","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"X : Type u_3\nY : Type u_5\nŒ± : Type u_6\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\nuŒ± : UniformSpace Œ±\nA : Set Y\nu : Y ‚Üí X ‚Üí Œ±\nS : Set X\nhA : EquicontinuousOn (Function.comp u Subtype.val) S\nhu : Continuous (Function.comp S.restrict u)\n‚ä¢ EquicontinuousOn (Function.comp u Subtype.val) S","decl":"/-- If a set of functions is equicontinuous on a set `S`, the same is true for its closure in *any*\ntopology for which evaluation at any `x ‚àà S` is continuous. Since this will be applied to\n`DFunLike` types, we state it for any topological space with a map to `X ‚Üí Œ±` satisfying the right\ncontinuity conditions. See also `Set.EquicontinuousOn.closure` for a more familiar\n(but weaker) statement. -/\ntheorem EquicontinuousOn.closure' {A : Set Y} {u : Y ‚Üí X ‚Üí Œ±} {S : Set X}\n    (hA : EquicontinuousOn (u ‚àò (‚Üë) : A ‚Üí X ‚Üí Œ±) S) (hu : Continuous (S.restrict ‚àò u)) :\n    EquicontinuousOn (u ‚àò (‚Üë) : closure A ‚Üí X ‚Üí Œ±) S :=\n  fun x hx ‚Ü¶ (hA x hx).closure' hu <| by exact continuous_apply ‚ü®x, hx‚ü© |>.comp hu\n\n"}
{"name":"Set.Equicontinuous.closure","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"X : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nA : Set (X ‚Üí Œ±)\nhA : A.Equicontinuous\n‚ä¢ (closure A).Equicontinuous","decl":"/-- If a set of functions is equicontinuous, its closure for the product topology is also\nequicontinuous. -/\nprotected theorem Set.Equicontinuous.closure {A : Set <| X ‚Üí Œ±} (hA : A.Equicontinuous) :\n    (closure A).Equicontinuous := fun x ‚Ü¶ Set.EquicontinuousAt.closure (hA x)\n\n"}
{"name":"Set.EquicontinuousOn.closure","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"X : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nA : Set (X ‚Üí Œ±)\nS : Set X\nhA : A.EquicontinuousOn S\n‚ä¢ (closure A).EquicontinuousOn S","decl":"/-- If a set of functions is equicontinuous, its closure for the product topology is also\nequicontinuous. This would also be true for the coarser topology of pointwise convergence on `S`,\nsee `EquicontinuousOn.closure'`. -/\nprotected theorem Set.EquicontinuousOn.closure {A : Set <| X ‚Üí Œ±} {S : Set X}\n    (hA : A.EquicontinuousOn S) : (closure A).EquicontinuousOn S :=\n  fun x hx ‚Ü¶ Set.EquicontinuousWithinAt.closure (hA x hx)\n\n"}
{"name":"UniformEquicontinuousOn.closure'","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Y : Type u_5\nŒ± : Type u_6\nŒ≤ : Type u_8\ntY : TopologicalSpace Y\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nA : Set Y\nu : Y ‚Üí Œ≤ ‚Üí Œ±\nS : Set Œ≤\nhA : UniformEquicontinuousOn (Function.comp u Subtype.val) S\nhu : Continuous (Function.comp S.restrict u)\n‚ä¢ UniformEquicontinuousOn (Function.comp u Subtype.val) S","decl":"/-- If a set of functions is uniformly equicontinuous on a set `S`, the same is true for its\nclosure in *any* topology for which evaluation at any `x ‚àà S` i continuous. Since this will be\napplied to `DFunLike` types, we state it for any topological space with a map to `Œ≤ ‚Üí Œ±` satisfying\nthe right continuity conditions. See also `Set.UniformEquicontinuousOn.closure` for a more familiar\n(but weaker) statement. -/\ntheorem UniformEquicontinuousOn.closure' {A : Set Y} {u : Y ‚Üí Œ≤ ‚Üí Œ±} {S : Set Œ≤}\n    (hA : UniformEquicontinuousOn (u ‚àò (‚Üë) : A ‚Üí Œ≤ ‚Üí Œ±) S) (hu : Continuous (S.restrict ‚àò u)) :\n    UniformEquicontinuousOn (u ‚àò (‚Üë) : closure A ‚Üí Œ≤ ‚Üí Œ±) S := by\n  intro U hU\n  rcases mem_uniformity_isClosed hU with ‚ü®V, hV, hVclosed, hVU‚ü©\n  filter_upwards [hA V hV, mem_inf_of_right (mem_principal_self _)]\n  rintro ‚ü®x, y‚ü© hxy ‚ü®hxS, hyS‚ü©\n  rw [SetCoe.forall] at *\n  change A ‚äÜ (fun f => (u f x, u f y)) ‚Åª¬π' V at hxy\n  refine (closure_minimal hxy <| hVclosed.preimage <| .prod_mk ?_ ?_).trans (preimage_mono hVU)\n  ¬∑ exact (continuous_apply ‚ü®x, hxS‚ü©).comp hu\n  ¬∑ exact (continuous_apply ‚ü®y, hyS‚ü©).comp hu\n\n"}
{"name":"UniformEquicontinuous.closure'","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Y : Type u_5\nŒ± : Type u_6\nŒ≤ : Type u_8\ntY : TopologicalSpace Y\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nA : Set Y\nu : Y ‚Üí Œ≤ ‚Üí Œ±\nhA : UniformEquicontinuous (Function.comp u Subtype.val)\nhu : Continuous u\n‚ä¢ UniformEquicontinuous (Function.comp u Subtype.val)","decl":"/-- If a set of functions is uniformly equicontinuous, the same is true for its closure in *any*\ntopology for which evaluation at any point is continuous. Since this will be applied to\n`DFunLike` types, we state it for any topological space with a map to `Œ≤ ‚Üí Œ±` satisfying the right\ncontinuity conditions. See also `Set.UniformEquicontinuous.closure` for a more familiar statement.\n-/\ntheorem UniformEquicontinuous.closure' {A : Set Y} {u : Y ‚Üí Œ≤ ‚Üí Œ±}\n    (hA : UniformEquicontinuous (u ‚àò (‚Üë) : A ‚Üí Œ≤ ‚Üí Œ±)) (hu : Continuous u) :\n    UniformEquicontinuous (u ‚àò (‚Üë) : closure A ‚Üí Œ≤ ‚Üí Œ±) := by\n  rw [‚Üê uniformEquicontinuousOn_univ] at hA ‚ä¢\n  exact hA.closure' (Pi.continuous_restrict _ |>.comp hu)\n\n"}
{"name":"Set.UniformEquicontinuous.closure","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nA : Set (Œ≤ ‚Üí Œ±)\nhA : A.UniformEquicontinuous\n‚ä¢ (closure A).UniformEquicontinuous","decl":"/-- If a set of functions is uniformly equicontinuous, its closure for the product topology is also\nuniformly equicontinuous. -/\nprotected theorem Set.UniformEquicontinuous.closure {A : Set <| Œ≤ ‚Üí Œ±}\n    (hA : A.UniformEquicontinuous) : (closure A).UniformEquicontinuous :=\n  UniformEquicontinuous.closure' (u := id) hA continuous_id\n\n"}
{"name":"Set.UniformEquicontinuousOn.closure","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nA : Set (Œ≤ ‚Üí Œ±)\nS : Set Œ≤\nhA : A.UniformEquicontinuousOn S\n‚ä¢ (closure A).UniformEquicontinuousOn S","decl":"/-- If a set of functions is uniformly equicontinuous on a set `S`, its closure for the product\ntopology is also uniformly equicontinuous. This would also be true for the coarser topology of\npointwise convergence on `S`, see `UniformEquicontinuousOn.closure'`. -/\nprotected theorem Set.UniformEquicontinuousOn.closure {A : Set <| Œ≤ ‚Üí Œ±} {S : Set Œ≤}\n    (hA : A.UniformEquicontinuousOn S) : (closure A).UniformEquicontinuousOn S :=\n  UniformEquicontinuousOn.closure' (u := id) hA (Pi.continuous_restrict _)\n\n/-\nImplementation note: The following lemma (as well as all the following variations) could\ntheoretically be deduced from the \"closure\" statements above. For example, we could do:\n```lean\ntheorem Filter.Tendsto.continuousAt_of_equicontinuousAt {l : Filter Œπ} [l.NeBot] {F : Œπ ‚Üí X ‚Üí Œ±}\n    {f : X ‚Üí Œ±} {x‚ÇÄ : X} (h‚ÇÅ : Tendsto F l (ùìù f)) (h‚ÇÇ : EquicontinuousAt F x‚ÇÄ) :\n    ContinuousAt f x‚ÇÄ :=\n  (equicontinuousAt_iff_range.mp h‚ÇÇ).closure.continuousAt\n    ‚ü®f, mem_closure_of_tendsto h‚ÇÅ <| Eventually.of_forall mem_range_self‚ü©\n\ntheorem Filter.Tendsto.uniformContinuous_of_uniformEquicontinuous {l : Filter Œπ} [l.NeBot]\n    {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} {f : Œ≤ ‚Üí Œ±} (h‚ÇÅ : Tendsto F l (ùìù f)) (h‚ÇÇ : UniformEquicontinuous F) :\n    UniformContinuous f :=\n  (uniformEquicontinuous_iff_range.mp h‚ÇÇ).closure.uniformContinuous\n    ‚ü®f, mem_closure_of_tendsto h‚ÇÅ <| Eventually.of_forall mem_range_self‚ü©\n```\n\nUnfortunately, the proofs get painful when dealing with the relative case as one needs to change\nthe ambient topology. So it turns out to be easier to re-do the proof by hand.\n-/\n\n"}
{"name":"Filter.Tendsto.continuousWithinAt_of_equicontinuousWithinAt","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nl : Filter Œπ\ninst‚úù : l.NeBot\nF : Œπ ‚Üí X ‚Üí Œ±\nf : X ‚Üí Œ±\nS : Set X\nx‚ÇÄ : X\nh‚ÇÅ : ‚àÄ (x : X), Membership.mem S x ‚Üí Filter.Tendsto (fun x_1 => F x_1 x) l (nhds (f x))\nh‚ÇÇ : Filter.Tendsto (fun x => F x x‚ÇÄ) l (nhds (f x‚ÇÄ))\nh‚ÇÉ : EquicontinuousWithinAt F S x‚ÇÄ\n‚ä¢ ContinuousWithinAt f S x‚ÇÄ","decl":"/-- If `ùìï : Œπ ‚Üí X ‚Üí Œ±` tends to `f : X ‚Üí Œ±` *pointwise on `S ‚à™ {x‚ÇÄ} : Set X`* along some nontrivial\nfilter, and if the family `ùìï` is equicontinuous at `x‚ÇÄ : X` within `S`, then the limit is\ncontinuous at `x‚ÇÄ` within `S`. -/\ntheorem Filter.Tendsto.continuousWithinAt_of_equicontinuousWithinAt {l : Filter Œπ} [l.NeBot]\n    {F : Œπ ‚Üí X ‚Üí Œ±} {f : X ‚Üí Œ±} {S : Set X} {x‚ÇÄ : X} (h‚ÇÅ : ‚àÄ x ‚àà S, Tendsto (F ¬∑ x) l (ùìù (f x)))\n    (h‚ÇÇ : Tendsto (F ¬∑ x‚ÇÄ) l (ùìù (f x‚ÇÄ))) (h‚ÇÉ : EquicontinuousWithinAt F S x‚ÇÄ) :\n    ContinuousWithinAt f S x‚ÇÄ := by\n  intro U hU; rw [mem_map]\n  rcases UniformSpace.mem_nhds_iff.mp hU with ‚ü®V, hV, hVU‚ü©\n  rcases mem_uniformity_isClosed hV with ‚ü®W, hW, hWclosed, hWV‚ü©\n  filter_upwards [h‚ÇÉ W hW, eventually_mem_nhdsWithin] with x hx hxS using\n    hVU <| ball_mono hWV (f x‚ÇÄ) <| hWclosed.mem_of_tendsto (h‚ÇÇ.prod_mk_nhds (h‚ÇÅ x hxS)) <|\n    Eventually.of_forall hx\n\n"}
{"name":"Filter.Tendsto.continuousAt_of_equicontinuousAt","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nl : Filter Œπ\ninst‚úù : l.NeBot\nF : Œπ ‚Üí X ‚Üí Œ±\nf : X ‚Üí Œ±\nx‚ÇÄ : X\nh‚ÇÅ : Filter.Tendsto F l (nhds f)\nh‚ÇÇ : EquicontinuousAt F x‚ÇÄ\n‚ä¢ ContinuousAt f x‚ÇÄ","decl":"/-- If `ùìï : Œπ ‚Üí X ‚Üí Œ±` tends to `f : X ‚Üí Œ±` *pointwise* along some nontrivial filter, and if the\nfamily `ùìï` is equicontinuous at some `x‚ÇÄ : X`, then the limit is continuous at `x‚ÇÄ`. -/\ntheorem Filter.Tendsto.continuousAt_of_equicontinuousAt {l : Filter Œπ} [l.NeBot] {F : Œπ ‚Üí X ‚Üí Œ±}\n    {f : X ‚Üí Œ±} {x‚ÇÄ : X} (h‚ÇÅ : Tendsto F l (ùìù f)) (h‚ÇÇ : EquicontinuousAt F x‚ÇÄ) :\n    ContinuousAt f x‚ÇÄ := by\n  rw [‚Üê continuousWithinAt_univ, ‚Üê equicontinuousWithinAt_univ, tendsto_pi_nhds] at *\n  exact continuousWithinAt_of_equicontinuousWithinAt (fun x _ ‚Ü¶ h‚ÇÅ x) (h‚ÇÅ x‚ÇÄ) h‚ÇÇ\n\n"}
{"name":"Filter.Tendsto.continuous_of_equicontinuous","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nl : Filter Œπ\ninst‚úù : l.NeBot\nF : Œπ ‚Üí X ‚Üí Œ±\nf : X ‚Üí Œ±\nh‚ÇÅ : Filter.Tendsto F l (nhds f)\nh‚ÇÇ : Equicontinuous F\n‚ä¢ Continuous f","decl":"/-- If `ùìï : Œπ ‚Üí X ‚Üí Œ±` tends to `f : X ‚Üí Œ±` *pointwise* along some nontrivial filter, and if the\nfamily `ùìï` is equicontinuous, then the limit is continuous. -/\ntheorem Filter.Tendsto.continuous_of_equicontinuous {l : Filter Œπ} [l.NeBot] {F : Œπ ‚Üí X ‚Üí Œ±}\n    {f : X ‚Üí Œ±} (h‚ÇÅ : Tendsto F l (ùìù f)) (h‚ÇÇ : Equicontinuous F) : Continuous f :=\n  continuous_iff_continuousAt.mpr fun x => h‚ÇÅ.continuousAt_of_equicontinuousAt (h‚ÇÇ x)\n\n"}
{"name":"Filter.Tendsto.continuousOn_of_equicontinuousOn","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nl : Filter Œπ\ninst‚úù : l.NeBot\nF : Œπ ‚Üí X ‚Üí Œ±\nf : X ‚Üí Œ±\nS : Set X\nh‚ÇÅ : ‚àÄ (x : X), Membership.mem S x ‚Üí Filter.Tendsto (fun x_1 => F x_1 x) l (nhds (f x))\nh‚ÇÇ : EquicontinuousOn F S\n‚ä¢ ContinuousOn f S","decl":"/-- If `ùìï : Œπ ‚Üí X ‚Üí Œ±` tends to `f : X ‚Üí Œ±` *pointwise on `S : Set X`* along some nontrivial\nfilter, and if the family `ùìï` is equicontinuous, then the limit is continuous on `S`. -/\ntheorem Filter.Tendsto.continuousOn_of_equicontinuousOn {l : Filter Œπ} [l.NeBot] {F : Œπ ‚Üí X ‚Üí Œ±}\n    {f : X ‚Üí Œ±} {S : Set X} (h‚ÇÅ : ‚àÄ x ‚àà S, Tendsto (F ¬∑ x) l (ùìù (f x)))\n    (h‚ÇÇ : EquicontinuousOn F S) : ContinuousOn f S :=\n  fun x hx ‚Ü¶ Filter.Tendsto.continuousWithinAt_of_equicontinuousWithinAt h‚ÇÅ (h‚ÇÅ x hx) (h‚ÇÇ x hx)\n\n"}
{"name":"Filter.Tendsto.uniformContinuousOn_of_uniformEquicontinuousOn","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nl : Filter Œπ\ninst‚úù : l.NeBot\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nf : Œ≤ ‚Üí Œ±\nS : Set Œ≤\nh‚ÇÅ : ‚àÄ (x : Œ≤), Membership.mem S x ‚Üí Filter.Tendsto (fun x_1 => F x_1 x) l (nhds (f x))\nh‚ÇÇ : UniformEquicontinuousOn F S\n‚ä¢ UniformContinuousOn f S","decl":"/-- If `ùìï : Œπ ‚Üí Œ≤ ‚Üí Œ±` tends to `f : Œ≤ ‚Üí Œ±` *pointwise on `S : Set Œ≤`* along some nontrivial\nfilter, and if the family `ùìï` is uniformly equicontinuous on `S`, then the limit is uniformly\ncontinuous on `S`. -/\ntheorem Filter.Tendsto.uniformContinuousOn_of_uniformEquicontinuousOn {l : Filter Œπ} [l.NeBot]\n    {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} {f : Œ≤ ‚Üí Œ±} {S : Set Œ≤} (h‚ÇÅ : ‚àÄ x ‚àà S, Tendsto (F ¬∑ x) l (ùìù (f x)))\n    (h‚ÇÇ : UniformEquicontinuousOn F S) :\n    UniformContinuousOn f S := by\n  intro U hU; rw [mem_map]\n  rcases mem_uniformity_isClosed hU with ‚ü®V, hV, hVclosed, hVU‚ü©\n  filter_upwards [h‚ÇÇ V hV, mem_inf_of_right (mem_principal_self _)]\n  rintro ‚ü®x, y‚ü© hxy ‚ü®hxS, hyS‚ü©\n  exact hVU <| hVclosed.mem_of_tendsto ((h‚ÇÅ x hxS).prod_mk_nhds (h‚ÇÅ y hyS)) <|\n    Eventually.of_forall hxy\n\n"}
{"name":"Filter.Tendsto.uniformContinuous_of_uniformEquicontinuous","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nŒ± : Type u_6\nŒ≤ : Type u_8\nuŒ± : UniformSpace Œ±\nuŒ≤ : UniformSpace Œ≤\nl : Filter Œπ\ninst‚úù : l.NeBot\nF : Œπ ‚Üí Œ≤ ‚Üí Œ±\nf : Œ≤ ‚Üí Œ±\nh‚ÇÅ : Filter.Tendsto F l (nhds f)\nh‚ÇÇ : UniformEquicontinuous F\n‚ä¢ UniformContinuous f","decl":"/-- If `ùìï : Œπ ‚Üí Œ≤ ‚Üí Œ±` tends to `f : Œ≤ ‚Üí Œ±` *pointwise* along some nontrivial filter, and if the\nfamily `ùìï` is uniformly equicontinuous, then the limit is uniformly continuous. -/\ntheorem Filter.Tendsto.uniformContinuous_of_uniformEquicontinuous {l : Filter Œπ} [l.NeBot]\n    {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} {f : Œ≤ ‚Üí Œ±} (h‚ÇÅ : Tendsto F l (ùìù f)) (h‚ÇÇ : UniformEquicontinuous F) :\n    UniformContinuous f := by\n  rw [‚Üê uniformContinuousOn_univ, ‚Üê uniformEquicontinuousOn_univ, tendsto_pi_nhds] at *\n  exact uniformContinuousOn_of_uniformEquicontinuousOn (fun x _ ‚Ü¶ h‚ÇÅ x) h‚ÇÇ\n\n"}
{"name":"EquicontinuousAt.tendsto_of_mem_closure","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nl : Filter Œπ\nF : Œπ ‚Üí X ‚Üí Œ±\nf : X ‚Üí Œ±\ns : Set X\nx : X\nz : Œ±\nhF : EquicontinuousAt F x\nhf : Filter.Tendsto f (nhdsWithin x s) (nhds z)\nhs : ‚àÄ (y : X), Membership.mem s y ‚Üí Filter.Tendsto (fun x => F x y) l (nhds (f y))\nhx : Membership.mem (closure s) x\n‚ä¢ Filter.Tendsto (fun x_1 => F x_1 x) l (nhds z)","decl":"/-- If `F : Œπ ‚Üí X ‚Üí Œ±` is a family of functions equicontinuous at `x`,\nit tends to `f y` along a filter `l` for any `y ‚àà s`,\nthe limit function `f` tends to `z` along `ùìù[s] x`, and `x ‚àà closure s`,\nthen `(F ¬∑ x)` tends to `z` along `l`.\n\nIn some sense, this is a converse of `EquicontinuousAt.closure`. -/\ntheorem EquicontinuousAt.tendsto_of_mem_closure {l : Filter Œπ} {F : Œπ ‚Üí X ‚Üí Œ±} {f : X ‚Üí Œ±}\n    {s : Set X} {x : X} {z : Œ±} (hF : EquicontinuousAt F x) (hf : Tendsto f (ùìù[s] x) (ùìù z))\n    (hs : ‚àÄ y ‚àà s, Tendsto (F ¬∑ y) l (ùìù (f y))) (hx : x ‚àà closure s) :\n    Tendsto (F ¬∑ x) l (ùìù z) := by\n  rw [(nhds_basis_uniformity (ùì§ Œ±).basis_sets).tendsto_right_iff] at hf ‚ä¢\n  intro U hU\n  rcases comp_comp_symm_mem_uniformity_sets hU with ‚ü®V, hV, hVs, hVU‚ü©\n  rw [mem_closure_iff_nhdsWithin_neBot] at hx\n  have : ‚àÄ·∂† y in ùìù[s] x, y ‚àà s ‚àß (‚àÄ i, (F i x, F i y) ‚àà V) ‚àß (f y, z) ‚àà V :=\n    eventually_mem_nhdsWithin.and <| ((hF V hV).filter_mono nhdsWithin_le_nhds).and (hf V hV)\n  rcases this.exists with ‚ü®y, hys, hFy, hfy‚ü©\n  filter_upwards [hs y hys (ball_mem_nhds _ hV)] with i hi\n  exact hVU ‚ü®_, ‚ü®_, hFy i, (mem_ball_symmetry hVs).2 hi‚ü©, hfy‚ü©\n\n"}
{"name":"Equicontinuous.isClosed_setOf_tendsto","module":"Mathlib.Topology.UniformSpace.Equicontinuity","initialProofState":"Œπ : Type u_1\nX : Type u_3\nŒ± : Type u_6\ntX : TopologicalSpace X\nuŒ± : UniformSpace Œ±\nl : Filter Œπ\nF : Œπ ‚Üí X ‚Üí Œ±\nf : X ‚Üí Œ±\nhF : Equicontinuous F\nhf : Continuous f\n‚ä¢ IsClosed (setOf fun x => Filter.Tendsto (fun x_1 => F x_1 x) l (nhds (f x)))","decl":"/-- If `F : Œπ ‚Üí X ‚Üí Œ±` is an equicontinuous family of functions,\n`f : X ‚Üí Œ±` is a continuous function, and `l` is a filter on `Œπ`,\nthen `{x | Filter.Tendsto (F ¬∑ x) l (ùìù (f x))}` is a closed set. -/\ntheorem Equicontinuous.isClosed_setOf_tendsto {l : Filter Œπ} {F : Œπ ‚Üí X ‚Üí Œ±} {f : X ‚Üí Œ±}\n    (hF : Equicontinuous F) (hf : Continuous f) :\n    IsClosed {x | Tendsto (F ¬∑ x) l (ùìù (f x))} :=\n  closure_subset_iff_isClosed.mp fun x hx ‚Ü¶\n    (hF x).tendsto_of_mem_closure (hf.continuousAt.mono_left inf_le_left) (fun _ ‚Ü¶ id) hx\n\n"}
