{"name":"sum_conjClasses_card_eq_card","module":"Mathlib.GroupTheory.ClassEquation","initialProofState":"G : Type u_1\ninst✝³ : Group G\ninst✝² : Fintype (ConjClasses G)\ninst✝¹ : Fintype G\ninst✝ : (x : ConjClasses G) → Fintype ↑x.carrier\n⊢ Eq (Finset.univ.sum fun x => x.carrier.toFinset.card) (Fintype.card G)","decl":"/-- Conjugacy classes form a partition of G, stated in terms of cardinality. -/\ntheorem sum_conjClasses_card_eq_card [Fintype <| ConjClasses G] [Fintype G]\n    [∀ x : ConjClasses G, Fintype x.carrier] :\n    ∑ x : ConjClasses G, x.carrier.toFinset.card = Fintype.card G := by\n  suffices (Σ x : ConjClasses G, x.carrier) ≃ G by simpa using (Fintype.card_congr this)\n  simpa [carrier_eq_preimage_mk] using Equiv.sigmaFiberEquiv ConjClasses.mk\n\n"}
{"name":"Group.sum_card_conj_classes_eq_card","module":"Mathlib.GroupTheory.ClassEquation","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : Finite G\n⊢ Eq (finsum fun x => x.carrier.ncard) (Nat.card G)","decl":"/-- Conjugacy classes form a partition of G, stated in terms of cardinality. -/\ntheorem Group.sum_card_conj_classes_eq_card [Finite G] :\n    ∑ᶠ x : ConjClasses G, x.carrier.ncard = Nat.card G := by\n  classical\n  cases nonempty_fintype G\n  rw [Nat.card_eq_fintype_card, ← sum_conjClasses_card_eq_card, finsum_eq_sum_of_fintype]\n  simp [Set.ncard_eq_toFinset_card']\n\n"}
{"name":"Group.nat_card_center_add_sum_card_noncenter_eq_card","module":"Mathlib.GroupTheory.ClassEquation","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : Finite G\n⊢ Eq (HAdd.hAdd (Nat.card (Subtype fun x => Membership.mem (Subgroup.center G) x)) (finsum fun x => finsum fun h => Nat.card ↑x.carrier)) (Nat.card G)","decl":"/-- The **class equation** for finite groups. The cardinality of a group is equal to the size\nof its center plus the sum of the size of all its nontrivial conjugacy classes. -/\ntheorem Group.nat_card_center_add_sum_card_noncenter_eq_card [Finite G] :\n    Nat.card (Subgroup.center G) + ∑ᶠ x ∈ noncenter G, Nat.card x.carrier = Nat.card G := by\n  classical\n  cases nonempty_fintype G\n  rw [@Nat.card_eq_fintype_card G, ← sum_conjClasses_card_eq_card, ←\n    Finset.sum_sdiff (ConjClasses.noncenter G).toFinset.subset_univ]\n  simp only [Nat.card_eq_fintype_card, Set.toFinset_card]\n  congr 1\n  swap\n  · convert finsum_cond_eq_sum_of_cond_iff _ _\n    simp [Set.mem_toFinset]\n  calc\n    Fintype.card (Subgroup.center G) = Fintype.card ((noncenter G)ᶜ : Set _) :=\n      Fintype.card_congr ((mk_bijOn G).equiv _)\n    _ = Finset.card (Finset.univ \\ (noncenter G).toFinset) := by\n      rw [← Set.toFinset_card, Set.toFinset_compl, Finset.compl_eq_univ_sdiff]\n    _ = _ := ?_\n  rw [Finset.card_eq_sum_ones]\n  refine Finset.sum_congr rfl ?_\n  rintro ⟨g⟩ hg\n  simp only [noncenter, Set.not_subsingleton_iff, Set.toFinset_setOf, Finset.mem_univ, true_and,\n             forall_true_left, Finset.mem_sdiff, Finset.mem_filter, Set.not_nontrivial_iff] at hg\n  rw [eq_comm, ← Set.toFinset_card, Finset.card_eq_one]\n  exact ⟨g, Finset.coe_injective <| by simpa using hg.eq_singleton_of_mem mem_carrier_mk⟩\n\n"}
{"name":"Group.card_center_add_sum_card_noncenter_eq_card","module":"Mathlib.GroupTheory.ClassEquation","initialProofState":"G : Type u_2\ninst✝⁴ : Group G\ninst✝³ : (x : ConjClasses G) → Fintype ↑x.carrier\ninst✝² : Fintype G\ninst✝¹ : Fintype (Subtype fun x => Membership.mem (Subgroup.center G) x)\ninst✝ : Fintype ↑(ConjClasses.noncenter G)\n⊢ Eq (HAdd.hAdd (Fintype.card (Subtype fun x => Membership.mem (Subgroup.center G) x)) ((ConjClasses.noncenter G).toFinset.sum fun x => x.carrier.toFinset.card)) (Fintype.card G)","decl":"theorem Group.card_center_add_sum_card_noncenter_eq_card (G) [Group G]\n    [∀ x : ConjClasses G, Fintype x.carrier] [Fintype G] [Fintype <| Subgroup.center G]\n    [Fintype <| noncenter G] : Fintype.card (Subgroup.center G) +\n  ∑ x ∈ (noncenter G).toFinset, x.carrier.toFinset.card = Fintype.card G := by\n  convert Group.nat_card_center_add_sum_card_noncenter_eq_card G using 2\n  · simp\n  · rw [← finsum_set_coe_eq_finsum_mem (noncenter G), finsum_eq_sum_of_fintype,\n      ← Finset.sum_set_coe]\n    simp\n  · simp\n"}
