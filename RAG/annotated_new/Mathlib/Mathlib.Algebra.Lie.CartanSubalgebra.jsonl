{"name":"LieSubalgebra.IsCartanSubalgebra.self_normalizing","module":"Mathlib.Algebra.Lie.CartanSubalgebra","initialProofState":"R : Type u\nL : Type v\ninst✝² : CommRing R\ninst✝¹ : LieRing L\ninst✝ : LieAlgebra R L\nH : LieSubalgebra R L\nself : H.IsCartanSubalgebra\n⊢ Eq H.normalizer H","decl":"/-- A Cartan subalgebra is a nilpotent, self-normalizing subalgebra.\n\nA _splitting_ Cartan subalgebra can be defined by mixing in `LieModule.IsTriangularizable R H L`. -/\nclass IsCartanSubalgebra : Prop where\n  nilpotent : LieRing.IsNilpotent H\n  self_normalizing : H.normalizer = H\n\n"}
{"name":"LieSubalgebra.IsCartanSubalgebra.nilpotent","module":"Mathlib.Algebra.Lie.CartanSubalgebra","initialProofState":"R : Type u\nL : Type v\ninst✝² : CommRing R\ninst✝¹ : LieRing L\ninst✝ : LieAlgebra R L\nH : LieSubalgebra R L\nself : H.IsCartanSubalgebra\n⊢ LieRing.IsNilpotent (Subtype fun x => Membership.mem H x)","decl":"/-- A Cartan subalgebra is a nilpotent, self-normalizing subalgebra.\n\nA _splitting_ Cartan subalgebra can be defined by mixing in `LieModule.IsTriangularizable R H L`. -/\nclass IsCartanSubalgebra : Prop where\n  nilpotent : LieRing.IsNilpotent H\n  self_normalizing : H.normalizer = H\n\n"}
{"name":"LieSubalgebra.instIsNilpotentSubtypeMemOfIsCartanSubalgebra","module":"Mathlib.Algebra.Lie.CartanSubalgebra","initialProofState":"R : Type u\nL : Type v\ninst✝³ : CommRing R\ninst✝² : LieRing L\ninst✝¹ : LieAlgebra R L\nH : LieSubalgebra R L\ninst✝ : H.IsCartanSubalgebra\n⊢ LieRing.IsNilpotent (Subtype fun x => Membership.mem H x)","decl":"instance [H.IsCartanSubalgebra] : LieRing.IsNilpotent H :=\n  IsCartanSubalgebra.nilpotent\n\n"}
{"name":"LieSubalgebra.normalizer_eq_self_of_isCartanSubalgebra","module":"Mathlib.Algebra.Lie.CartanSubalgebra","initialProofState":"R : Type u\nL : Type v\ninst✝³ : CommRing R\ninst✝² : LieRing L\ninst✝¹ : LieAlgebra R L\nH : LieSubalgebra R L\ninst✝ : H.IsCartanSubalgebra\n⊢ Eq H.toLieSubmodule.normalizer H.toLieSubmodule","decl":"@[simp]\ntheorem normalizer_eq_self_of_isCartanSubalgebra (H : LieSubalgebra R L) [H.IsCartanSubalgebra] :\n    H.toLieSubmodule.normalizer = H.toLieSubmodule := by\n  rw [← LieSubmodule.toSubmodule_inj, coe_normalizer_eq_normalizer,\n    IsCartanSubalgebra.self_normalizing, coe_toLieSubmodule]\n\n"}
{"name":"LieSubalgebra.ucs_eq_self_of_isCartanSubalgebra","module":"Mathlib.Algebra.Lie.CartanSubalgebra","initialProofState":"R : Type u\nL : Type v\ninst✝³ : CommRing R\ninst✝² : LieRing L\ninst✝¹ : LieAlgebra R L\nH : LieSubalgebra R L\ninst✝ : H.IsCartanSubalgebra\nk : Nat\n⊢ Eq (LieSubmodule.ucs k H.toLieSubmodule) H.toLieSubmodule","decl":"@[simp]\ntheorem ucs_eq_self_of_isCartanSubalgebra (H : LieSubalgebra R L) [H.IsCartanSubalgebra] (k : ℕ) :\n    H.toLieSubmodule.ucs k = H.toLieSubmodule := by\n  induction k with\n  | zero => simp\n  | succ k ih => simp [ih]\n\n"}
{"name":"LieSubalgebra.isCartanSubalgebra_iff_isUcsLimit","module":"Mathlib.Algebra.Lie.CartanSubalgebra","initialProofState":"R : Type u\nL : Type v\ninst✝² : CommRing R\ninst✝¹ : LieRing L\ninst✝ : LieAlgebra R L\nH : LieSubalgebra R L\n⊢ Iff H.IsCartanSubalgebra H.toLieSubmodule.IsUcsLimit","decl":"theorem isCartanSubalgebra_iff_isUcsLimit : H.IsCartanSubalgebra ↔ H.toLieSubmodule.IsUcsLimit := by\n  constructor\n  · intro h\n    have h₁ : LieRing.IsNilpotent H := by infer_instance\n    obtain ⟨k, hk⟩ := H.toLieSubmodule.isNilpotent_iff_exists_self_le_ucs.mp h₁\n    replace hk : H.toLieSubmodule = LieSubmodule.ucs k ⊥ :=\n      le_antisymm hk\n        (LieSubmodule.ucs_le_of_normalizer_eq_self H.normalizer_eq_self_of_isCartanSubalgebra k)\n    refine ⟨k, fun l hl => ?_⟩\n    rw [← Nat.sub_add_cancel hl, LieSubmodule.ucs_add, ← hk,\n      LieSubalgebra.ucs_eq_self_of_isCartanSubalgebra]\n  · rintro ⟨k, hk⟩\n    exact\n      { nilpotent := by\n          dsimp only [LieRing.IsNilpotent]\n          erw [H.toLieSubmodule.isNilpotent_iff_exists_lcs_eq_bot]\n          use k\n          rw [_root_.eq_bot_iff, LieSubmodule.lcs_le_iff, hk k (le_refl k)]\n        self_normalizing := by\n          have hk' := hk (k + 1) k.le_succ\n          rw [LieSubmodule.ucs_succ, hk k (le_refl k)] at hk'\n          rw [← LieSubalgebra.toSubmodule_inj, ← LieSubalgebra.coe_normalizer_eq_normalizer,\n            hk', LieSubalgebra.coe_toLieSubmodule] }\n\n"}
{"name":"LieSubalgebra.ne_bot_of_isCartanSubalgebra","module":"Mathlib.Algebra.Lie.CartanSubalgebra","initialProofState":"R : Type u\nL : Type v\ninst✝⁴ : CommRing R\ninst✝³ : LieRing L\ninst✝² : LieAlgebra R L\ninst✝¹ : Nontrivial L\nH : LieSubalgebra R L\ninst✝ : H.IsCartanSubalgebra\n⊢ Ne H Bot.bot","decl":"lemma ne_bot_of_isCartanSubalgebra [Nontrivial L] (H : LieSubalgebra R L) [H.IsCartanSubalgebra] :\n    H ≠ ⊥ := by\n  intro e\n  obtain ⟨x, hx⟩ := exists_ne (0 : L)\n  have : x ∈ H.normalizer := by simp [LieSubalgebra.mem_normalizer_iff, e]\n  exact hx (by rwa [LieSubalgebra.IsCartanSubalgebra.self_normalizing, e] at this)\n\n"}
{"name":"LieSubalgebra.instNontrivialSubtypeMemOfIsCartanSubalgebra","module":"Mathlib.Algebra.Lie.CartanSubalgebra","initialProofState":"R : Type u\nL : Type v\ninst✝⁴ : CommRing R\ninst✝³ : LieRing L\ninst✝² : LieAlgebra R L\ninst✝¹ : Nontrivial L\nH : LieSubalgebra R L\ninst✝ : H.IsCartanSubalgebra\n⊢ Nontrivial (Subtype fun x => Membership.mem H x)","decl":"instance (priority := 500) [Nontrivial L] (H : LieSubalgebra R L) [H.IsCartanSubalgebra] :\n    Nontrivial H := by\n  refine (subsingleton_or_nontrivial H).elim (fun inst ↦ False.elim ?_) id\n  apply ne_bot_of_isCartanSubalgebra H\n  rw [eq_bot_iff]\n  exact fun x hx ↦ congr_arg Subtype.val (Subsingleton.elim (⟨x, hx⟩ : H) 0)\n\n"}
{"name":"LieIdeal.normalizer_eq_top","module":"Mathlib.Algebra.Lie.CartanSubalgebra","initialProofState":"R : Type u\nL : Type v\ninst✝² : CommRing R\ninst✝¹ : LieRing L\ninst✝ : LieAlgebra R L\nI : LieIdeal R L\n⊢ Eq (LieIdeal.toLieSubalgebra R L I).normalizer Top.top","decl":"@[simp]\ntheorem LieIdeal.normalizer_eq_top {R : Type u} {L : Type v} [CommRing R] [LieRing L]\n    [LieAlgebra R L] (I : LieIdeal R L) : (I : LieSubalgebra R L).normalizer = ⊤ := by\n  ext x\n  simpa only [LieSubalgebra.mem_normalizer_iff, LieSubalgebra.mem_top, iff_true] using\n    fun y hy => I.lie_mem hy\n\n"}
{"name":"LieAlgebra.top_isCartanSubalgebra_of_nilpotent","module":"Mathlib.Algebra.Lie.CartanSubalgebra","initialProofState":"R : Type u\nL : Type v\ninst✝³ : CommRing R\ninst✝² : LieRing L\ninst✝¹ : LieAlgebra R L\ninst✝ : LieRing.IsNilpotent L\n⊢ Top.top.IsCartanSubalgebra","decl":"/-- A nilpotent Lie algebra is its own Cartan subalgebra. -/\ninstance LieAlgebra.top_isCartanSubalgebra_of_nilpotent [LieRing.IsNilpotent L] :\n    LieSubalgebra.IsCartanSubalgebra (⊤ : LieSubalgebra R L) where\n  nilpotent := inferInstance\n  self_normalizing := by rw [← top_toLieSubalgebra, normalizer_eq_top, top_toLieSubalgebra]\n"}
