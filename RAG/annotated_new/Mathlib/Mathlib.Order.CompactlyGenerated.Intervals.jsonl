{"name":"Set.Iic.isCompactElement","module":"Mathlib.Order.CompactlyGenerated.Intervals","initialProofState":"α : Type u_2\ninst✝ : CompleteLattice α\na : α\nb : ↑(Set.Iic a)\nh : CompleteLattice.IsCompactElement ↑b\n⊢ CompleteLattice.IsCompactElement b","decl":"theorem isCompactElement {a : α} {b : Iic a} (h : CompleteLattice.IsCompactElement (b : α)) :\n    CompleteLattice.IsCompactElement b := by\n  simp only [CompleteLattice.isCompactElement_iff, Finset.sup_eq_iSup] at h ⊢\n  intro ι s hb\n  replace hb : (b : α) ≤ iSup ((↑) ∘ s) := le_trans hb <| (coe_iSup s) ▸ le_refl _\n  obtain ⟨t, ht⟩ := h ι ((↑) ∘ s) hb\n  exact ⟨t, (by simpa using ht : (b : α) ≤ _)⟩\n\n"}
{"name":"Set.Iic.instIsCompactlyGenerated","module":"Mathlib.Order.CompactlyGenerated.Intervals","initialProofState":"α : Type u_2\ninst✝¹ : CompleteLattice α\ninst✝ : IsCompactlyGenerated α\na : α\n⊢ IsCompactlyGenerated ↑(Set.Iic a)","decl":"instance instIsCompactlyGenerated [IsCompactlyGenerated α] {a : α} :\n    IsCompactlyGenerated (Iic a) := by\n  refine ⟨fun ⟨x, (hx : x ≤ a)⟩ ↦ ?_⟩\n  obtain ⟨s, hs, rfl⟩ := IsCompactlyGenerated.exists_sSup_eq x\n  rw [sSup_le_iff] at hx\n  let f : s → Iic a := fun y ↦ ⟨y, hx _ y.property⟩\n  refine ⟨range f, ?_, ?_⟩\n  · rintro - ⟨⟨y, hy⟩, hy', rfl⟩\n    exact isCompactElement (hs _ hy)\n  · rw [Subtype.ext_iff]\n    change sSup (((↑) : Iic a → α) '' (range f)) = sSup s\n    congr\n    ext b\n    simpa [f] using hx b\n\n"}
{"name":"complementedLattice_of_complementedLattice_Iic","module":"Mathlib.Order.CompactlyGenerated.Intervals","initialProofState":"ι : Type u_1\nα : Type u_2\ninst✝² : CompleteLattice α\ninst✝¹ : IsModularLattice α\ninst✝ : IsCompactlyGenerated α\ns : Set ι\nf : ι → α\nh : ∀ (i : ι), Membership.mem s i → ComplementedLattice ↑(Set.Iic (f i))\nh' : Eq (iSup fun i => iSup fun h => f i) Top.top\n⊢ ComplementedLattice α","decl":"theorem complementedLattice_of_complementedLattice_Iic\n    [IsModularLattice α] [IsCompactlyGenerated α]\n    {s : Set ι} {f : ι → α}\n    (h : ∀ i ∈ s, ComplementedLattice <| Iic (f i))\n    (h' : ⨆ i ∈ s, f i = ⊤) :\n    ComplementedLattice α := by\n  apply complementedLattice_of_sSup_atoms_eq_top\n  have : ∀ i ∈ s, ∃ t : Set α, f i = sSup t ∧ ∀ a ∈ t, IsAtom a := fun i hi ↦ by\n    replace h := complementedLattice_iff_isAtomistic.mp (h i hi)\n    obtain ⟨u, hu, hu'⟩ := eq_sSup_atoms (⊤ : Iic (f i))\n    refine ⟨(↑) '' u, ?_, ?_⟩\n    · replace hu : f i = ↑(sSup u) := Subtype.ext_iff.mp hu\n      simp_rw [hu, Iic.coe_sSup]\n    · rintro b ⟨⟨a, ha'⟩, ha, rfl⟩\n      exact IsAtom.of_isAtom_coe_Iic (hu' _ ha)\n  choose t ht ht' using this\n  let u : Set α := ⋃ i, ⋃ hi : i ∈ s, t i hi\n  have hu₁ : u ⊆ {a | IsAtom a} := by\n    rintro a ⟨-, ⟨i, rfl⟩, ⟨-, ⟨hi, rfl⟩, ha : a ∈ t i hi⟩⟩\n    exact ht' i hi a ha\n  have hu₂ : sSup u = ⨆ i ∈ s, f i := by simp_rw [u, sSup_iUnion, biSup_congr' ht]\n  rw [eq_top_iff, ← h', ← hu₂]\n  exact sSup_le_sSup hu₁\n"}
