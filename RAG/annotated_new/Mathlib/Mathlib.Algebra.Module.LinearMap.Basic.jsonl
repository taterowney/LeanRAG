{"name":"DomMulAct.smul_linearMap_apply","module":"Mathlib.Algebra.Module.LinearMap.Basic","initialProofState":"R : Type u_1\nR' : Type u_2\nM : Type u_4\nM' : Type u_5\ninst✝⁸ : Semiring R\ninst✝⁷ : Semiring R'\ninst✝⁶ : AddCommMonoid M\ninst✝⁵ : AddCommMonoid M'\ninst✝⁴ : Module R M\ninst✝³ : Module R' M'\nσ₁₂ : RingHom R R'\nS' : Type u_6\ninst✝² : Monoid S'\ninst✝¹ : DistribMulAction S' M\ninst✝ : SMulCommClass R S' M\na : DomMulAct S'\nf : LinearMap σ₁₂ M M'\nx : M\n⊢ Eq ((HSMul.hSMul a f) x) (f (HSMul.hSMul (DomMulAct.mk.symm a) x))","decl":"theorem _root_.DomMulAct.smul_linearMap_apply (a : S'ᵈᵐᵃ) (f : M →ₛₗ[σ₁₂] M') (x : M) :\n    (a • f) x = f (DomMulAct.mk.symm a • x) :=\n  rfl\n\n"}
{"name":"DomMulAct.mk_smul_linearMap_apply","module":"Mathlib.Algebra.Module.LinearMap.Basic","initialProofState":"R : Type u_1\nR' : Type u_2\nM : Type u_4\nM' : Type u_5\ninst✝⁸ : Semiring R\ninst✝⁷ : Semiring R'\ninst✝⁶ : AddCommMonoid M\ninst✝⁵ : AddCommMonoid M'\ninst✝⁴ : Module R M\ninst✝³ : Module R' M'\nσ₁₂ : RingHom R R'\nS' : Type u_6\ninst✝² : Monoid S'\ninst✝¹ : DistribMulAction S' M\ninst✝ : SMulCommClass R S' M\na : S'\nf : LinearMap σ₁₂ M M'\nx : M\n⊢ Eq ((HSMul.hSMul (DomMulAct.mk a) f) x) (f (HSMul.hSMul a x))","decl":"@[simp]\ntheorem _root_.DomMulAct.mk_smul_linearMap_apply (a : S') (f : M →ₛₗ[σ₁₂] M') (x : M) :\n    (DomMulAct.mk a • f) x = f (a • x) :=\n  rfl\n\n"}
{"name":"DomMulAct.coe_smul_linearMap","module":"Mathlib.Algebra.Module.LinearMap.Basic","initialProofState":"R : Type u_1\nR' : Type u_2\nM : Type u_4\nM' : Type u_5\ninst✝⁸ : Semiring R\ninst✝⁷ : Semiring R'\ninst✝⁶ : AddCommMonoid M\ninst✝⁵ : AddCommMonoid M'\ninst✝⁴ : Module R M\ninst✝³ : Module R' M'\nσ₁₂ : RingHom R R'\nS' : Type u_6\ninst✝² : Monoid S'\ninst✝¹ : DistribMulAction S' M\ninst✝ : SMulCommClass R S' M\na : DomMulAct S'\nf : LinearMap σ₁₂ M M'\n⊢ Eq (⇑(HSMul.hSMul a f)) (HSMul.hSMul a ⇑f)","decl":"theorem  _root_.DomMulAct.coe_smul_linearMap (a : S'ᵈᵐᵃ) (f : M →ₛₗ[σ₁₂] M') :\n    (a • f : M →ₛₗ[σ₁₂] M') = a • (f : M → M') :=\n  rfl\n\n"}
{"name":"LinearMap.instSMulCommClassDomMulAct","module":"Mathlib.Algebra.Module.LinearMap.Basic","initialProofState":"R : Type u_1\nR' : Type u_2\nM : Type u_4\nM' : Type u_5\ninst✝¹⁰ : Semiring R\ninst✝⁹ : Semiring R'\ninst✝⁸ : AddCommMonoid M\ninst✝⁷ : AddCommMonoid M'\ninst✝⁶ : Module R M\ninst✝⁵ : Module R' M'\nσ₁₂ : RingHom R R'\nS' : Type u_6\nT' : Type u_7\ninst✝⁴ : Monoid S'\ninst✝³ : DistribMulAction S' M\ninst✝² : Monoid T'\ninst✝¹ : DistribMulAction T' M\ninst✝ : SMulCommClass S' T' M\n⊢ SMulCommClass (DomMulAct S') (DomMulAct T') (LinearMap σ₁₂ M M')","decl":"instance [SMulCommClass S' T' M] : SMulCommClass S'ᵈᵐᵃ T'ᵈᵐᵃ (M →ₛₗ[σ₁₂] M') :=\n  ⟨fun s t f ↦ ext fun m ↦ by simp_rw [DomMulAct.smul_linearMap_apply, smul_comm]⟩\n\n"}
{"name":"LinearMap.instNoZeroSMulDivisors","module":"Mathlib.Algebra.Module.LinearMap.Basic","initialProofState":"R : Type u_1\nR' : Type u_2\nS : Type u_3\nM : Type u_4\nM' : Type u_5\ninst✝⁹ : Semiring R\ninst✝⁸ : Semiring R'\ninst✝⁷ : AddCommMonoid M\ninst✝⁶ : AddCommMonoid M'\ninst✝⁵ : Module R M\ninst✝⁴ : Module R' M'\nσ₁₂ : RingHom R R'\ninst✝³ : Semiring S\ninst✝² : Module S M'\ninst✝¹ : SMulCommClass R' S M'\ninst✝ : NoZeroSMulDivisors S M'\n⊢ NoZeroSMulDivisors S (LinearMap σ₁₂ M M')","decl":"instance [NoZeroSMulDivisors S M'] : NoZeroSMulDivisors S (M →ₛₗ[σ₁₂] M') :=\n  coe_injective.noZeroSMulDivisors _ rfl coe_smul\n\n"}
