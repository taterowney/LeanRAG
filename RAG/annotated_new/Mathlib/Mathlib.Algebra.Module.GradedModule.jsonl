{"name":"DirectSum.GdistribMulAction.smul_zero","module":"Mathlib.Algebra.Module.GradedModule","initialProofState":"ιA : Type u_1\nιB : Type u_2\nA : ιA → Type u_3\nM : ιB → Type u_4\ninst✝³ : AddMonoid ιA\ninst✝² : VAdd ιA ιB\ninst✝¹ : GradedMonoid.GMonoid A\ninst✝ : (i : ιB) → AddMonoid (M i)\nself : DirectSum.GdistribMulAction A M\ni : ιA\nj : ιB\na : A i\n⊢ Eq (GradedMonoid.GSMul.smul a 0) 0","decl":"/-- A graded version of `DistribMulAction`. -/\nclass GdistribMulAction [AddMonoid ιA] [VAdd ιA ιB] [GMonoid A] [∀ i, AddMonoid (M i)]\n    extends GMulAction A M where\n  smul_add {i j} (a : A i) (b c : M j) : smul a (b + c) = smul a b + smul a c\n  smul_zero {i j} (a : A i) : smul a (0 : M j) = 0\n\n"}
{"name":"DirectSum.GdistribMulAction.smul_add","module":"Mathlib.Algebra.Module.GradedModule","initialProofState":"ιA : Type u_1\nιB : Type u_2\nA : ιA → Type u_3\nM : ιB → Type u_4\ninst✝³ : AddMonoid ιA\ninst✝² : VAdd ιA ιB\ninst✝¹ : GradedMonoid.GMonoid A\ninst✝ : (i : ιB) → AddMonoid (M i)\nself : DirectSum.GdistribMulAction A M\ni : ιA\nj : ιB\na : A i\nb c : M j\n⊢ Eq (GradedMonoid.GSMul.smul a (HAdd.hAdd b c)) (HAdd.hAdd (GradedMonoid.GSMul.smul a b) (GradedMonoid.GSMul.smul a c))","decl":"/-- A graded version of `DistribMulAction`. -/\nclass GdistribMulAction [AddMonoid ιA] [VAdd ιA ιB] [GMonoid A] [∀ i, AddMonoid (M i)]\n    extends GMulAction A M where\n  smul_add {i j} (a : A i) (b c : M j) : smul a (b + c) = smul a b + smul a c\n  smul_zero {i j} (a : A i) : smul a (0 : M j) = 0\n\n"}
{"name":"DirectSum.Gmodule.zero_smul","module":"Mathlib.Algebra.Module.GradedModule","initialProofState":"ιA : Type u_1\nιB : Type u_2\nA : ιA → Type u_3\nM : ιB → Type u_4\ninst✝⁴ : AddMonoid ιA\ninst✝³ : VAdd ιA ιB\ninst✝² : (i : ιA) → AddMonoid (A i)\ninst✝¹ : (i : ιB) → AddMonoid (M i)\ninst✝ : GradedMonoid.GMonoid A\nself : DirectSum.Gmodule A M\ni : ιA\nj : ιB\nb : M j\n⊢ Eq (GradedMonoid.GSMul.smul 0 b) 0","decl":"/-- A graded version of `Module`. -/\nclass Gmodule [AddMonoid ιA] [VAdd ιA ιB] [∀ i, AddMonoid (A i)] [∀ i, AddMonoid (M i)] [GMonoid A]\n    extends GdistribMulAction A M where\n  add_smul {i j} (a a' : A i) (b : M j) : smul (a + a') b = smul a b + smul a' b\n  zero_smul {i j} (b : M j) : smul (0 : A i) b = 0\n\n"}
{"name":"DirectSum.Gmodule.add_smul","module":"Mathlib.Algebra.Module.GradedModule","initialProofState":"ιA : Type u_1\nιB : Type u_2\nA : ιA → Type u_3\nM : ιB → Type u_4\ninst✝⁴ : AddMonoid ιA\ninst✝³ : VAdd ιA ιB\ninst✝² : (i : ιA) → AddMonoid (A i)\ninst✝¹ : (i : ιB) → AddMonoid (M i)\ninst✝ : GradedMonoid.GMonoid A\nself : DirectSum.Gmodule A M\ni : ιA\nj : ιB\na a' : A i\nb : M j\n⊢ Eq (GradedMonoid.GSMul.smul (HAdd.hAdd a a') b) (HAdd.hAdd (GradedMonoid.GSMul.smul a b) (GradedMonoid.GSMul.smul a' b))","decl":"/-- A graded version of `Module`. -/\nclass Gmodule [AddMonoid ιA] [VAdd ιA ιB] [∀ i, AddMonoid (A i)] [∀ i, AddMonoid (M i)] [GMonoid A]\n    extends GdistribMulAction A M where\n  add_smul {i j} (a a' : A i) (b : M j) : smul (a + a') b = smul a b + smul a' b\n  zero_smul {i j} (b : M j) : smul (0 : A i) b = 0\n\n"}
{"name":"DirectSum.gsmulHom_apply_apply","module":"Mathlib.Algebra.Module.GradedModule","initialProofState":"ιA : Type u_1\nιB : Type u_2\nA : ιA → Type u_3\nM : ιB → Type u_4\ninst✝⁵ : AddMonoid ιA\ninst✝⁴ : VAdd ιA ιB\ninst✝³ : (i : ιA) → AddCommMonoid (A i)\ninst✝² : (i : ιB) → AddCommMonoid (M i)\ninst✝¹ : GradedMonoid.GMonoid A\ninst✝ : DirectSum.Gmodule A M\ni : ιA\nj : ιB\na : A i\nb : M j\n⊢ Eq (((DirectSum.gsmulHom A M) a) b) (GradedMonoid.GSMul.smul a b)","decl":"/-- The piecewise multiplication from the `Mul` instance, as a bundled homomorphism. -/\n@[simps]\ndef gsmulHom [GMonoid A] [Gmodule A M] {i j} : A i →+ M j →+ M (i +ᵥ j) where\n  toFun a :=\n    { toFun := fun b => GSMul.smul a b\n      map_zero' := GdistribMulAction.smul_zero _\n      map_add' := GdistribMulAction.smul_add _ }\n  map_zero' := AddMonoidHom.ext fun a => Gmodule.zero_smul a\n  map_add' _a₁ _a₂ := AddMonoidHom.ext fun _b => Gmodule.add_smul _ _ _\n\n"}
{"name":"DirectSum.Gmodule.smul_def","module":"Mathlib.Algebra.Module.GradedModule","initialProofState":"ιA : Type u_1\nιB : Type u_2\nA : ιA → Type u_3\nM : ιB → Type u_4\ninst✝⁷ : AddMonoid ιA\ninst✝⁶ : VAdd ιA ιB\ninst✝⁵ : (i : ιA) → AddCommMonoid (A i)\ninst✝⁴ : (i : ιB) → AddCommMonoid (M i)\ninst✝³ : DecidableEq ιA\ninst✝² : DecidableEq ιB\ninst✝¹ : GradedMonoid.GMonoid A\ninst✝ : DirectSum.Gmodule A M\nx : DirectSum ιA fun i => A i\ny : DirectSum ιB fun i => M i\n⊢ Eq (HSMul.hSMul x y) (((DirectSum.Gmodule.smulAddMonoidHom A M) x) y)","decl":"@[simp]\ntheorem smul_def [DecidableEq ιA] [DecidableEq ιB] [GMonoid A] [Gmodule A M]\n    (x : ⨁ i, A i) (y : ⨁ i, M i) :\n    x • y = smulAddMonoidHom _ _ x y := rfl\n\n"}
{"name":"DirectSum.Gmodule.smulAddMonoidHom_apply_of_of","module":"Mathlib.Algebra.Module.GradedModule","initialProofState":"ιA : Type u_1\nιB : Type u_2\nA : ιA → Type u_3\nM : ιB → Type u_4\ninst✝⁷ : AddMonoid ιA\ninst✝⁶ : VAdd ιA ιB\ninst✝⁵ : (i : ιA) → AddCommMonoid (A i)\ninst✝⁴ : (i : ιB) → AddCommMonoid (M i)\ninst✝³ : DecidableEq ιA\ninst✝² : DecidableEq ιB\ninst✝¹ : GradedMonoid.GMonoid A\ninst✝ : DirectSum.Gmodule A M\ni : ιA\nj : ιB\nx : A i\ny : M j\n⊢ Eq (((DirectSum.Gmodule.smulAddMonoidHom A M) ((DirectSum.of A i) x)) ((DirectSum.of M j) y)) ((DirectSum.of M (HVAdd.hVAdd i j)) (GradedMonoid.GSMul.smul x y))","decl":"@[simp]\ntheorem smulAddMonoidHom_apply_of_of [DecidableEq ιA] [DecidableEq ιB] [GMonoid A] [Gmodule A M]\n    {i j} (x : A i) (y : M j) :\n    smulAddMonoidHom A M (DirectSum.of A i x) (of M j y) = of M (i +ᵥ j) (GSMul.smul x y) := by\n  simp [smulAddMonoidHom]\n\n"}
{"name":"DirectSum.Gmodule.of_smul_of","module":"Mathlib.Algebra.Module.GradedModule","initialProofState":"ιA : Type u_1\nιB : Type u_2\nA : ιA → Type u_3\nM : ιB → Type u_4\ninst✝⁷ : AddMonoid ιA\ninst✝⁶ : VAdd ιA ιB\ninst✝⁵ : (i : ιA) → AddCommMonoid (A i)\ninst✝⁴ : (i : ιB) → AddCommMonoid (M i)\ninst✝³ : DecidableEq ιA\ninst✝² : DecidableEq ιB\ninst✝¹ : GradedMonoid.GMonoid A\ninst✝ : DirectSum.Gmodule A M\ni : ιA\nj : ιB\nx : A i\ny : M j\n⊢ Eq (HSMul.hSMul ((DirectSum.of A i) x) ((DirectSum.of M j) y)) ((DirectSum.of M (HVAdd.hVAdd i j)) (GradedMonoid.GSMul.smul x y))","decl":"theorem of_smul_of [DecidableEq ιA] [DecidableEq ιB] [GMonoid A] [Gmodule A M]\n    {i j} (x : A i) (y : M j) :\n    DirectSum.of A i x • of M j y = of M (i +ᵥ j) (GSMul.smul x y) := by simp\n\n"}
