{"name":"gaugeRescale_def","module":"Mathlib.Analysis.Convex.GaugeRescale","initialProofState":"E : Type u_1\ninst‚úù¬π : AddCommGroup E\ninst‚úù : Module Real E\ns t : Set E\nx : E\n‚ä¢ Eq (gaugeRescale s t x) (HSMul.hSMul (HDiv.hDiv (gauge s x) (gauge t x)) x)","decl":"theorem gaugeRescale_def (s t : Set E) (x : E) :\n    gaugeRescale s t x = (gauge s x / gauge t x) ‚Ä¢ x :=\n  rfl\n\n"}
{"name":"gaugeRescale_zero","module":"Mathlib.Analysis.Convex.GaugeRescale","initialProofState":"E : Type u_1\ninst‚úù¬π : AddCommGroup E\ninst‚úù : Module Real E\ns t : Set E\n‚ä¢ Eq (gaugeRescale s t 0) 0","decl":"@[simp] theorem gaugeRescale_zero (s t : Set E) : gaugeRescale s t 0 = 0 := smul_zero _\n\n"}
{"name":"gaugeRescale_smul","module":"Mathlib.Analysis.Convex.GaugeRescale","initialProofState":"E : Type u_1\ninst‚úù¬π : AddCommGroup E\ninst‚úù : Module Real E\ns t : Set E\nc : Real\nhc : LE.le 0 c\nx : E\n‚ä¢ Eq (gaugeRescale s t (HSMul.hSMul c x)) (HSMul.hSMul c (gaugeRescale s t x))","decl":"theorem gaugeRescale_smul (s t : Set E) {c : ‚Ñù} (hc : 0 ‚â§ c) (x : E) :\n    gaugeRescale s t (c ‚Ä¢ x) = c ‚Ä¢ gaugeRescale s t x := by\n  simp only [gaugeRescale, gauge_smul_of_nonneg hc, smul_smul, smul_eq_mul]\n  rw [mul_div_mul_comm, mul_right_comm, div_self_mul_self]\n\n"}
{"name":"gauge_gaugeRescale'","module":"Mathlib.Analysis.Convex.GaugeRescale","initialProofState":"E : Type u_1\ninst‚úù¬π : AddCommGroup E\ninst‚úù : Module Real E\ns t : Set E\nx : E\nhx : Ne (gauge t x) 0\n‚ä¢ Eq (gauge t (gaugeRescale s t x)) (gauge s x)","decl":"theorem gauge_gaugeRescale' (s : Set E) {t : Set E} {x : E} (hx : gauge t x ‚â† 0) :\n    gauge t (gaugeRescale s t x) = gauge s x := by\n  rw [gaugeRescale, gauge_smul_of_nonneg (div_nonneg (gauge_nonneg _) (gauge_nonneg _)),\n    smul_eq_mul, div_mul_cancel‚ÇÄ _ hx]\n\n"}
{"name":"gauge_gaugeRescale_le","module":"Mathlib.Analysis.Convex.GaugeRescale","initialProofState":"E : Type u_1\ninst‚úù¬π : AddCommGroup E\ninst‚úù : Module Real E\ns t : Set E\nx : E\n‚ä¢ LE.le (gauge t (gaugeRescale s t x)) (gauge s x)","decl":"theorem gauge_gaugeRescale_le (s t : Set E) (x : E) :\n    gauge t (gaugeRescale s t x) ‚â§ gauge s x := by\n  by_cases hx : gauge t x = 0\n  ¬∑ simp [gaugeRescale, hx, gauge_nonneg]\n  ¬∑ exact (gauge_gaugeRescale' s hx).le\n\n"}
{"name":"gaugeRescale_self_apply","module":"Mathlib.Analysis.Convex.GaugeRescale","initialProofState":"E : Type u_1\ninst‚úù¬≥ : AddCommGroup E\ninst‚úù¬≤ : Module Real E\ninst‚úù¬π : TopologicalSpace E\ninst‚úù : T1Space E\ns : Set E\nhsa : Absorbent Real s\nhsb : Bornology.IsVonNBounded Real s\nx : E\n‚ä¢ Eq (gaugeRescale s s x) x","decl":"theorem gaugeRescale_self_apply {s : Set E} (hsa : Absorbent ‚Ñù s) (hsb : IsVonNBounded ‚Ñù s)\n    (x : E) : gaugeRescale s s x = x := by\n  rcases eq_or_ne x 0 with rfl | hx; ¬∑ simp\n  rw [gaugeRescale, div_self, one_smul]\n  exact ((gauge_pos hsa hsb).2 hx).ne'\n\n"}
{"name":"gaugeRescale_self","module":"Mathlib.Analysis.Convex.GaugeRescale","initialProofState":"E : Type u_1\ninst‚úù¬≥ : AddCommGroup E\ninst‚úù¬≤ : Module Real E\ninst‚úù¬π : TopologicalSpace E\ninst‚úù : T1Space E\ns : Set E\nhsa : Absorbent Real s\nhsb : Bornology.IsVonNBounded Real s\n‚ä¢ Eq (gaugeRescale s s) id","decl":"theorem gaugeRescale_self {s : Set E} (hsa : Absorbent ‚Ñù s) (hsb : IsVonNBounded ‚Ñù s) :\n    gaugeRescale s s = id :=\n  funext <| gaugeRescale_self_apply hsa hsb\n\n"}
{"name":"gauge_gaugeRescale","module":"Mathlib.Analysis.Convex.GaugeRescale","initialProofState":"E : Type u_1\ninst‚úù¬≥ : AddCommGroup E\ninst‚úù¬≤ : Module Real E\ninst‚úù¬π : TopologicalSpace E\ninst‚úù : T1Space E\ns t : Set E\nhta : Absorbent Real t\nhtb : Bornology.IsVonNBounded Real t\nx : E\n‚ä¢ Eq (gauge t (gaugeRescale s t x)) (gauge s x)","decl":"theorem gauge_gaugeRescale (s : Set E) {t : Set E} (hta : Absorbent ‚Ñù t) (htb : IsVonNBounded ‚Ñù t)\n    (x : E) : gauge t (gaugeRescale s t x) = gauge s x := by\n  rcases eq_or_ne x 0 with rfl | hx\n  ¬∑ simp\n  ¬∑ exact gauge_gaugeRescale' s ((gauge_pos hta htb).2 hx).ne'\n\n"}
{"name":"gaugeRescale_gaugeRescale","module":"Mathlib.Analysis.Convex.GaugeRescale","initialProofState":"E : Type u_1\ninst‚úù¬≥ : AddCommGroup E\ninst‚úù¬≤ : Module Real E\ninst‚úù¬π : TopologicalSpace E\ninst‚úù : T1Space E\ns t u : Set E\nhta : Absorbent Real t\nhtb : Bornology.IsVonNBounded Real t\nx : E\n‚ä¢ Eq (gaugeRescale t u (gaugeRescale s t x)) (gaugeRescale s u x)","decl":"theorem gaugeRescale_gaugeRescale {s t u : Set E} (hta : Absorbent ‚Ñù t) (htb : IsVonNBounded ‚Ñù t)\n    (x : E) : gaugeRescale t u (gaugeRescale s t x) = gaugeRescale s u x := by\n  rcases eq_or_ne x 0 with rfl | hx; ¬∑ simp\n  rw [gaugeRescale_def s t x, gaugeRescale_smul, gaugeRescale, gaugeRescale, smul_smul,\n    div_mul_div_cancel‚ÇÄ]\n  exacts [((gauge_pos hta htb).2 hx).ne', div_nonneg (gauge_nonneg _) (gauge_nonneg _)]\n\n"}
{"name":"mapsTo_gaugeRescale_interior","module":"Mathlib.Analysis.Convex.GaugeRescale","initialProofState":"E : Type u_1\ninst‚úù‚Å¥ : AddCommGroup E\ninst‚úù¬≥ : Module Real E\ninst‚úù¬≤ : TopologicalSpace E\ninst‚úù¬π : TopologicalAddGroup E\ninst‚úù : ContinuousSMul Real E\ns t : Set E\nh‚ÇÄ : Membership.mem (nhds 0) t\nhc : Convex Real t\n‚ä¢ Set.MapsTo (gaugeRescale s t) (interior s) (interior t)","decl":"theorem mapsTo_gaugeRescale_interior (h‚ÇÄ : t ‚àà ùìù 0) (hc : Convex ‚Ñù t) :\n    MapsTo (gaugeRescale s t) (interior s) (interior t) := fun x hx ‚Ü¶ by\n  rw [‚Üê gauge_lt_one_iff_mem_interior] <;> try assumption\n  exact (gauge_gaugeRescale_le _ _ _).trans_lt (interior_subset_gauge_lt_one _ hx)\n\n"}
{"name":"mapsTo_gaugeRescale_closure","module":"Mathlib.Analysis.Convex.GaugeRescale","initialProofState":"E : Type u_1\ninst‚úù‚Å¥ : AddCommGroup E\ninst‚úù¬≥ : Module Real E\ninst‚úù¬≤ : TopologicalSpace E\ninst‚úù¬π : TopologicalAddGroup E\ninst‚úù : ContinuousSMul Real E\ns t : Set E\nhsc : Convex Real s\nhs‚ÇÄ : Membership.mem (nhds 0) s\nhtc : Convex Real t\nht‚ÇÄ : Membership.mem t 0\nhta : Absorbent Real t\n‚ä¢ Set.MapsTo (gaugeRescale s t) (closure s) (closure t)","decl":"theorem mapsTo_gaugeRescale_closure {s t : Set E} (hsc : Convex ‚Ñù s) (hs‚ÇÄ : s ‚àà ùìù 0)\n    (htc : Convex ‚Ñù t) (ht‚ÇÄ : 0 ‚àà t) (hta : Absorbent ‚Ñù t) :\n    MapsTo (gaugeRescale s t) (closure s) (closure t) := fun _x hx ‚Ü¶\n  mem_closure_of_gauge_le_one htc ht‚ÇÄ hta <| (gauge_gaugeRescale_le _ _ _).trans <|\n    (gauge_le_one_iff_mem_closure hsc hs‚ÇÄ).2 hx\n\n"}
{"name":"continuous_gaugeRescale","module":"Mathlib.Analysis.Convex.GaugeRescale","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : AddCommGroup E\ninst‚úù‚Å¥ : Module Real E\ninst‚úù¬≥ : TopologicalSpace E\ninst‚úù¬≤ : TopologicalAddGroup E\ninst‚úù¬π : ContinuousSMul Real E\ninst‚úù : T1Space E\ns t : Set E\nhs : Convex Real s\nhs‚ÇÄ : Membership.mem (nhds 0) s\nht : Convex Real t\nht‚ÇÄ : Membership.mem (nhds 0) t\nhtb : Bornology.IsVonNBounded Real t\n‚ä¢ Continuous (gaugeRescale s t)","decl":"theorem continuous_gaugeRescale {s t : Set E} (hs : Convex ‚Ñù s) (hs‚ÇÄ : s ‚àà ùìù 0)\n    (ht : Convex ‚Ñù t) (ht‚ÇÄ : t ‚àà ùìù 0) (htb : IsVonNBounded ‚Ñù t) :\n    Continuous (gaugeRescale s t) := by\n  have hta : Absorbent ‚Ñù t := absorbent_nhds_zero ht‚ÇÄ\n  refine continuous_iff_continuousAt.2 fun x ‚Ü¶ ?_\n  rcases eq_or_ne x 0 with rfl | hx\n  ¬∑ rw [ContinuousAt, gaugeRescale_zero]\n    nth_rewrite 2 [‚Üê comap_gauge_nhds_zero htb ht‚ÇÄ]\n    simp only [tendsto_comap_iff, Function.comp_def, gauge_gaugeRescale _ hta htb]\n    exact tendsto_gauge_nhds_zero hs‚ÇÄ\n  ¬∑ exact ((continuousAt_gauge hs hs‚ÇÄ).div (continuousAt_gauge ht ht‚ÇÄ)\n      ((gauge_pos hta htb).2 hx).ne').smul continuousAt_id\n\n"}
{"name":"image_gaugeRescaleHomeomorph_interior","module":"Mathlib.Analysis.Convex.GaugeRescale","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : AddCommGroup E\ninst‚úù‚Å¥ : Module Real E\ninst‚úù¬≥ : TopologicalSpace E\ninst‚úù¬≤ : TopologicalAddGroup E\ninst‚úù¬π : ContinuousSMul Real E\ninst‚úù : T1Space E\ns t : Set E\nhsc : Convex Real s\nhs‚ÇÄ : Membership.mem (nhds 0) s\nhsb : Bornology.IsVonNBounded Real s\nhtc : Convex Real t\nht‚ÇÄ : Membership.mem (nhds 0) t\nhtb : Bornology.IsVonNBounded Real t\n‚ä¢ Eq (Set.image (‚áë(gaugeRescaleHomeomorph s t hsc hs‚ÇÄ hsb htc ht‚ÇÄ htb)) (interior s)) (interior t)","decl":"theorem image_gaugeRescaleHomeomorph_interior {s t : Set E}\n    (hsc : Convex ‚Ñù s) (hs‚ÇÄ : s ‚àà ùìù 0) (hsb : IsVonNBounded ‚Ñù s)\n    (htc : Convex ‚Ñù t) (ht‚ÇÄ : t ‚àà ùìù 0) (htb : IsVonNBounded ‚Ñù t) :\n    gaugeRescaleHomeomorph s t hsc hs‚ÇÄ hsb htc ht‚ÇÄ htb '' interior s = interior t :=\n  Subset.antisymm (mapsTo_gaugeRescale_interior ht‚ÇÄ htc).image_subset <| by\n    rw [‚Üê Homeomorph.preimage_symm, ‚Üê image_subset_iff]\n    exact (mapsTo_gaugeRescale_interior hs‚ÇÄ hsc).image_subset\n\n"}
{"name":"image_gaugeRescaleHomeomorph_closure","module":"Mathlib.Analysis.Convex.GaugeRescale","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : AddCommGroup E\ninst‚úù‚Å¥ : Module Real E\ninst‚úù¬≥ : TopologicalSpace E\ninst‚úù¬≤ : TopologicalAddGroup E\ninst‚úù¬π : ContinuousSMul Real E\ninst‚úù : T1Space E\ns t : Set E\nhsc : Convex Real s\nhs‚ÇÄ : Membership.mem (nhds 0) s\nhsb : Bornology.IsVonNBounded Real s\nhtc : Convex Real t\nht‚ÇÄ : Membership.mem (nhds 0) t\nhtb : Bornology.IsVonNBounded Real t\n‚ä¢ Eq (Set.image (‚áë(gaugeRescaleHomeomorph s t hsc hs‚ÇÄ hsb htc ht‚ÇÄ htb)) (closure s)) (closure t)","decl":"theorem image_gaugeRescaleHomeomorph_closure {s t : Set E}\n    (hsc : Convex ‚Ñù s) (hs‚ÇÄ : s ‚àà ùìù 0) (hsb : IsVonNBounded ‚Ñù s)\n    (htc : Convex ‚Ñù t) (ht‚ÇÄ : t ‚àà ùìù 0) (htb : IsVonNBounded ‚Ñù t) :\n    gaugeRescaleHomeomorph s t hsc hs‚ÇÄ hsb htc ht‚ÇÄ htb '' closure s = closure t := by\n  refine Subset.antisymm (mapsTo_gaugeRescale_closure hsc hs‚ÇÄ htc\n    (mem_of_mem_nhds ht‚ÇÄ) (absorbent_nhds_zero ht‚ÇÄ)).image_subset ?_\n  rw [‚Üê Homeomorph.preimage_symm, ‚Üê image_subset_iff]\n  exact (mapsTo_gaugeRescale_closure htc ht‚ÇÄ hsc\n    (mem_of_mem_nhds hs‚ÇÄ) (absorbent_nhds_zero hs‚ÇÄ)).image_subset\n\n"}
{"name":"exists_homeomorph_image_eq","module":"Mathlib.Analysis.Convex.GaugeRescale","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : AddCommGroup E\ninst‚úù‚Å¥ : Module Real E\ninst‚úù¬≥ : TopologicalSpace E\ninst‚úù¬≤ : TopologicalAddGroup E\ninst‚úù¬π : ContinuousSMul Real E\ninst‚úù : T1Space E\ns t : Set E\nhsc : Convex Real s\nhsne : (interior s).Nonempty\nhsb : Bornology.IsVonNBounded Real s\nhst : Convex Real t\nhtne : (interior t).Nonempty\nhtb : Bornology.IsVonNBounded Real t\n‚ä¢ Exists fun e => And (Eq (Set.image (‚áëe) (interior s)) (interior t)) (And (Eq (Set.image (‚áëe) (closure s)) (closure t)) (Eq (Set.image (‚áëe) (frontier s)) (frontier t)))","decl":"/-- Given two convex bounded sets in a topological vector space with nonempty interiors,\nthere exists a homeomorphism of the ambient space\nthat sends the interior, the closure, and the frontier of one set\nto the interior, the closure, and the frontier of the other set.\n\nIn particular, if both `s` and `t` are open set or both `s` and `t` are closed sets,\nthen `e` maps `s` to `t`. -/\ntheorem exists_homeomorph_image_eq {s t : Set E}\n    (hsc : Convex ‚Ñù s) (hsne : (interior s).Nonempty) (hsb : IsVonNBounded ‚Ñù s)\n    (hst : Convex ‚Ñù t) (htne : (interior t).Nonempty) (htb : IsVonNBounded ‚Ñù t) :\n    ‚àÉ e : E ‚âÉ‚Çú E, e '' interior s = interior t ‚àß e '' closure s = closure t ‚àß\n      e '' frontier s = frontier t := by\n  rsuffices ‚ü®e, h‚ÇÅ, h‚ÇÇ‚ü© : ‚àÉ e : E ‚âÉ‚Çú E, e '' interior s = interior t ‚àß e '' closure s = closure t\n  ¬∑ refine ‚ü®e, h‚ÇÅ, h‚ÇÇ, ?_‚ü©\n    simp_rw [‚Üê closure_diff_interior, image_diff e.injective, h‚ÇÅ, h‚ÇÇ]\n  rcases hsne with ‚ü®x, hx‚ü©\n  rcases htne with ‚ü®y, hy‚ü©\n  set h : E ‚âÉ‚Çú E := by\n    apply gaugeRescaleHomeomorph (-x +·µ• s) (-y +·µ• t) <;>\n      simp [‚Üê mem_interior_iff_mem_nhds, interior_vadd, mem_vadd_set_iff_neg_vadd_mem, *]\n  refine ‚ü®.trans (.addLeft (-x)) <| h.trans <| .addLeft y, ?_, ?_‚ü©\n  ¬∑ calc\n      (fun a ‚Ü¶ y + h (-x + a)) '' interior s = y +·µ• h '' interior (-x +·µ• s) := by\n        simp_rw [interior_vadd, ‚Üê image_vadd, image_image, vadd_eq_add]\n      _ = _ := by rw [image_gaugeRescaleHomeomorph_interior, interior_vadd, vadd_neg_vadd]\n  ¬∑ calc\n      (fun a ‚Ü¶ y + h (-x + a)) '' closure s = y +·µ• h '' closure (-x +·µ• s) := by\n        simp_rw [closure_vadd, ‚Üê image_vadd, image_image, vadd_eq_add]\n      _ = _ := by rw [image_gaugeRescaleHomeomorph_closure, closure_vadd, vadd_neg_vadd]\n\n"}
{"name":"exists_homeomorph_image_interior_closure_frontier_eq_unitBall","module":"Mathlib.Analysis.Convex.GaugeRescale","initialProofState":"E : Type u_1\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\ns : Set E\nhc : Convex Real s\nhne : (interior s).Nonempty\nhb : Bornology.IsBounded s\n‚ä¢ Exists fun h => And (Eq (Set.image (‚áëh) (interior s)) (Metric.ball 0 1)) (And (Eq (Set.image (‚áëh) (closure s)) (Metric.closedBall 0 1)) (Eq (Set.image (‚áëh) (frontier s)) (Metric.sphere 0 1)))","decl":"/-- If `s` is a convex bounded set with a nonempty interior in a real normed space,\nthen there is a homeomorphism of the ambient space to itself\nthat sends the interior of `s` to the unit open ball\nand the closure of `s` to the unit closed ball. -/\ntheorem exists_homeomorph_image_interior_closure_frontier_eq_unitBall {s : Set E}\n    (hc : Convex ‚Ñù s) (hne : (interior s).Nonempty) (hb : IsBounded s) :\n    ‚àÉ h : E ‚âÉ‚Çú E, h '' interior s = ball 0 1 ‚àß h '' closure s = closedBall 0 1 ‚àß\n      h '' frontier s = sphere 0 1 := by\n  simpa [isOpen_ball.interior_eq, closure_ball, frontier_ball]\n    using exists_homeomorph_image_eq hc hne (NormedSpace.isVonNBounded_of_isBounded _ hb)\n    (convex_ball 0 1) (by simp [isOpen_ball.interior_eq]) (NormedSpace.isVonNBounded_ball _ _ _)\n"}
