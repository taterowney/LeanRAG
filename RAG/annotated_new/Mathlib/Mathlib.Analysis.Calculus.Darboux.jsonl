{"name":"exists_hasDerivWithinAt_eq_of_gt_of_lt","module":"Mathlib.Analysis.Calculus.Darboux","initialProofState":"a b : Real\nf f' : Real ‚Üí Real\nhab : LE.le a b\nhf : ‚àÄ (x : Real), Membership.mem (Set.Icc a b) x ‚Üí HasDerivWithinAt f (f' x) (Set.Icc a b) x\nm : Real\nhma : LT.lt (f' a) m\nhmb : LT.lt m (f' b)\n‚ä¢ Membership.mem (Set.image f' (Set.Ioo a b)) m","decl":"/-- **Darboux's theorem**: if `a ‚â§ b` and `f' a < m < f' b`, then `f' c = m` for some\n`c ‚àà (a, b)`. -/\ntheorem exists_hasDerivWithinAt_eq_of_gt_of_lt (hab : a ‚â§ b)\n    (hf : ‚àÄ x ‚àà Icc a b, HasDerivWithinAt f (f' x) (Icc a b) x) {m : ‚Ñù} (hma : f' a < m)\n    (hmb : m < f' b) : m ‚àà f' '' Ioo a b := by\n  rcases hab.eq_or_lt with (rfl | hab')\n  ¬∑ exact (lt_asymm hma hmb).elim\n  set g : ‚Ñù ‚Üí ‚Ñù := fun x => f x - m * x\n  have hg : ‚àÄ x ‚àà Icc a b, HasDerivWithinAt g (f' x - m) (Icc a b) x := by\n    intro x hx\n    simpa using (hf x hx).sub ((hasDerivWithinAt_id x _).const_mul m)\n  obtain ‚ü®c, cmem, hc‚ü© : ‚àÉ c ‚àà Icc a b, IsMinOn g (Icc a b) c :=\n    isCompact_Icc.exists_isMinOn (nonempty_Icc.2 <| hab) fun x hx => (hg x hx).continuousWithinAt\n  have cmem' : c ‚àà Ioo a b := by\n    rcases cmem.1.eq_or_lt with (rfl | hac)\n    -- Show that `c` can't be equal to `a`\n    ¬∑ refine absurd (sub_nonneg.1 <| nonneg_of_mul_nonneg_right ?_ (sub_pos.2 hab'))\n        (not_le_of_lt hma)\n      have : b - a ‚àà posTangentConeAt (Icc a b) a :=\n        sub_mem_posTangentConeAt_of_segment_subset (segment_eq_Icc hab ‚ñ∏ Subset.rfl)\n      simpa only [ContinuousLinearMap.smulRight_apply, ContinuousLinearMap.one_apply]\n        using hc.localize.hasFDerivWithinAt_nonneg (hg a (left_mem_Icc.2 hab)) this\n    rcases cmem.2.eq_or_gt with (rfl | hcb)\n    -- Show that `c` can't be equal to `b`\n    ¬∑ refine absurd (sub_nonpos.1 <| nonpos_of_mul_nonneg_right ?_ (sub_lt_zero.2 hab'))\n        (not_le_of_lt hmb)\n      have : a - b ‚àà posTangentConeAt (Icc a b) b :=\n        sub_mem_posTangentConeAt_of_segment_subset (by rw [segment_symm, segment_eq_Icc hab])\n      simpa only [ContinuousLinearMap.smulRight_apply, ContinuousLinearMap.one_apply]\n        using hc.localize.hasFDerivWithinAt_nonneg (hg b (right_mem_Icc.2 hab)) this\n    exact ‚ü®hac, hcb‚ü©\n  use c, cmem'\n  rw [‚Üê sub_eq_zero]\n  have : Icc a b ‚àà ùìù c := by rwa [‚Üê mem_interior_iff_mem_nhds, interior_Icc]\n  exact (hc.isLocalMin this).hasDerivAt_eq_zero ((hg c cmem).hasDerivAt this)\n\n"}
{"name":"exists_hasDerivWithinAt_eq_of_lt_of_gt","module":"Mathlib.Analysis.Calculus.Darboux","initialProofState":"a b : Real\nf f' : Real ‚Üí Real\nhab : LE.le a b\nhf : ‚àÄ (x : Real), Membership.mem (Set.Icc a b) x ‚Üí HasDerivWithinAt f (f' x) (Set.Icc a b) x\nm : Real\nhma : LT.lt m (f' a)\nhmb : LT.lt (f' b) m\n‚ä¢ Membership.mem (Set.image f' (Set.Ioo a b)) m","decl":"/-- **Darboux's theorem**: if `a ‚â§ b` and `f' b < m < f' a`, then `f' c = m` for some `c ‚àà (a, b)`.\n-/\ntheorem exists_hasDerivWithinAt_eq_of_lt_of_gt (hab : a ‚â§ b)\n    (hf : ‚àÄ x ‚àà Icc a b, HasDerivWithinAt f (f' x) (Icc a b) x) {m : ‚Ñù} (hma : m < f' a)\n    (hmb : f' b < m) : m ‚àà f' '' Ioo a b :=\n  let ‚ü®c, cmem, hc‚ü© :=\n    exists_hasDerivWithinAt_eq_of_gt_of_lt hab (fun x hx => (hf x hx).neg) (neg_lt_neg hma)\n      (neg_lt_neg hmb)\n  ‚ü®c, cmem, neg_injective hc‚ü©\n\n"}
{"name":"Set.OrdConnected.image_hasDerivWithinAt","module":"Mathlib.Analysis.Calculus.Darboux","initialProofState":"f f' : Real ‚Üí Real\ns : Set Real\nhs : s.OrdConnected\nhf : ‚àÄ (x : Real), Membership.mem s x ‚Üí HasDerivWithinAt f (f' x) s x\n‚ä¢ (Set.image f' s).OrdConnected","decl":"/-- **Darboux's theorem**: the image of a `Set.OrdConnected` set under `f'` is a `Set.OrdConnected`\nset, `HasDerivWithinAt` version. -/\ntheorem Set.OrdConnected.image_hasDerivWithinAt {s : Set ‚Ñù} (hs : OrdConnected s)\n    (hf : ‚àÄ x ‚àà s, HasDerivWithinAt f (f' x) s x) : OrdConnected (f' '' s) := by\n  apply ordConnected_of_Ioo\n  rintro _ ‚ü®a, ha, rfl‚ü© _ ‚ü®b, hb, rfl‚ü© - m ‚ü®hma, hmb‚ü©\n  rcases le_total a b with hab | hab\n  ¬∑ have : Icc a b ‚äÜ s := hs.out ha hb\n    rcases exists_hasDerivWithinAt_eq_of_gt_of_lt hab (fun x hx => (hf x <| this hx).mono this) hma\n        hmb with\n      ‚ü®c, cmem, hc‚ü©\n    exact ‚ü®c, this <| Ioo_subset_Icc_self cmem, hc‚ü©\n  ¬∑ have : Icc b a ‚äÜ s := hs.out hb ha\n    rcases exists_hasDerivWithinAt_eq_of_lt_of_gt hab (fun x hx => (hf x <| this hx).mono this) hmb\n        hma with\n      ‚ü®c, cmem, hc‚ü©\n    exact ‚ü®c, this <| Ioo_subset_Icc_self cmem, hc‚ü©\n\n"}
{"name":"Set.OrdConnected.image_derivWithin","module":"Mathlib.Analysis.Calculus.Darboux","initialProofState":"f : Real ‚Üí Real\ns : Set Real\nhs : s.OrdConnected\nhf : DifferentiableOn Real f s\n‚ä¢ (Set.image (derivWithin f s) s).OrdConnected","decl":"/-- **Darboux's theorem**: the image of a `Set.OrdConnected` set under `f'` is a `Set.OrdConnected`\nset, `derivWithin` version. -/\ntheorem Set.OrdConnected.image_derivWithin {s : Set ‚Ñù} (hs : OrdConnected s)\n    (hf : DifferentiableOn ‚Ñù f s) : OrdConnected (derivWithin f s '' s) :=\n  hs.image_hasDerivWithinAt fun x hx => (hf x hx).hasDerivWithinAt\n\n"}
{"name":"Set.OrdConnected.image_deriv","module":"Mathlib.Analysis.Calculus.Darboux","initialProofState":"f : Real ‚Üí Real\ns : Set Real\nhs : s.OrdConnected\nhf : ‚àÄ (x : Real), Membership.mem s x ‚Üí DifferentiableAt Real f x\n‚ä¢ (Set.image (deriv f) s).OrdConnected","decl":"/-- **Darboux's theorem**: the image of a `Set.OrdConnected` set under `f'` is a `Set.OrdConnected`\nset, `deriv` version. -/\ntheorem Set.OrdConnected.image_deriv {s : Set ‚Ñù} (hs : OrdConnected s)\n    (hf : ‚àÄ x ‚àà s, DifferentiableAt ‚Ñù f x) : OrdConnected (deriv f '' s) :=\n  hs.image_hasDerivWithinAt fun x hx => (hf x hx).hasDerivAt.hasDerivWithinAt\n\n"}
{"name":"Convex.image_hasDerivWithinAt","module":"Mathlib.Analysis.Calculus.Darboux","initialProofState":"f f' : Real ‚Üí Real\ns : Set Real\nhs : Convex Real s\nhf : ‚àÄ (x : Real), Membership.mem s x ‚Üí HasDerivWithinAt f (f' x) s x\n‚ä¢ Convex Real (Set.image f' s)","decl":"/-- **Darboux's theorem**: the image of a convex set under `f'` is a convex set,\n`HasDerivWithinAt` version. -/\ntheorem Convex.image_hasDerivWithinAt {s : Set ‚Ñù} (hs : Convex ‚Ñù s)\n    (hf : ‚àÄ x ‚àà s, HasDerivWithinAt f (f' x) s x) : Convex ‚Ñù (f' '' s) :=\n  (hs.ordConnected.image_hasDerivWithinAt hf).convex\n\n"}
{"name":"Convex.image_derivWithin","module":"Mathlib.Analysis.Calculus.Darboux","initialProofState":"f : Real ‚Üí Real\ns : Set Real\nhs : Convex Real s\nhf : DifferentiableOn Real f s\n‚ä¢ Convex Real (Set.image (derivWithin f s) s)","decl":"/-- **Darboux's theorem**: the image of a convex set under `f'` is a convex set,\n`derivWithin` version. -/\ntheorem Convex.image_derivWithin {s : Set ‚Ñù} (hs : Convex ‚Ñù s) (hf : DifferentiableOn ‚Ñù f s) :\n    Convex ‚Ñù (derivWithin f s '' s) :=\n  (hs.ordConnected.image_derivWithin hf).convex\n\n"}
{"name":"Convex.image_deriv","module":"Mathlib.Analysis.Calculus.Darboux","initialProofState":"f : Real ‚Üí Real\ns : Set Real\nhs : Convex Real s\nhf : ‚àÄ (x : Real), Membership.mem s x ‚Üí DifferentiableAt Real f x\n‚ä¢ Convex Real (Set.image (deriv f) s)","decl":"/-- **Darboux's theorem**: the image of a convex set under `f'` is a convex set,\n`deriv` version. -/\ntheorem Convex.image_deriv {s : Set ‚Ñù} (hs : Convex ‚Ñù s) (hf : ‚àÄ x ‚àà s, DifferentiableAt ‚Ñù f x) :\n    Convex ‚Ñù (deriv f '' s) :=\n  (hs.ordConnected.image_deriv hf).convex\n\n"}
{"name":"exists_hasDerivWithinAt_eq_of_ge_of_le","module":"Mathlib.Analysis.Calculus.Darboux","initialProofState":"a b : Real\nf f' : Real ‚Üí Real\nhab : LE.le a b\nhf : ‚àÄ (x : Real), Membership.mem (Set.Icc a b) x ‚Üí HasDerivWithinAt f (f' x) (Set.Icc a b) x\nm : Real\nhma : LE.le (f' a) m\nhmb : LE.le m (f' b)\n‚ä¢ Membership.mem (Set.image f' (Set.Icc a b)) m","decl":"/-- **Darboux's theorem**: if `a ‚â§ b` and `f' a ‚â§ m ‚â§ f' b`, then `f' c = m` for some\n`c ‚àà [a, b]`. -/\ntheorem exists_hasDerivWithinAt_eq_of_ge_of_le (hab : a ‚â§ b)\n    (hf : ‚àÄ x ‚àà Icc a b, HasDerivWithinAt f (f' x) (Icc a b) x) {m : ‚Ñù} (hma : f' a ‚â§ m)\n    (hmb : m ‚â§ f' b) : m ‚àà f' '' Icc a b :=\n  (ordConnected_Icc.image_hasDerivWithinAt hf).out (mem_image_of_mem _ (left_mem_Icc.2 hab))\n    (mem_image_of_mem _ (right_mem_Icc.2 hab)) ‚ü®hma, hmb‚ü©\n\n"}
{"name":"exists_hasDerivWithinAt_eq_of_le_of_ge","module":"Mathlib.Analysis.Calculus.Darboux","initialProofState":"a b : Real\nf f' : Real ‚Üí Real\nhab : LE.le a b\nhf : ‚àÄ (x : Real), Membership.mem (Set.Icc a b) x ‚Üí HasDerivWithinAt f (f' x) (Set.Icc a b) x\nm : Real\nhma : LE.le (f' a) m\nhmb : LE.le m (f' b)\n‚ä¢ Membership.mem (Set.image f' (Set.Icc a b)) m","decl":"/-- **Darboux's theorem**: if `a ‚â§ b` and `f' b ‚â§ m ‚â§ f' a`, then `f' c = m` for some\n`c ‚àà [a, b]`. -/\ntheorem exists_hasDerivWithinAt_eq_of_le_of_ge (hab : a ‚â§ b)\n    (hf : ‚àÄ x ‚àà Icc a b, HasDerivWithinAt f (f' x) (Icc a b) x) {m : ‚Ñù} (hma : f' a ‚â§ m)\n    (hmb : m ‚â§ f' b) : m ‚àà f' '' Icc a b :=\n  (ordConnected_Icc.image_hasDerivWithinAt hf).out (mem_image_of_mem _ (left_mem_Icc.2 hab))\n    (mem_image_of_mem _ (right_mem_Icc.2 hab)) ‚ü®hma, hmb‚ü©\n\n"}
{"name":"hasDerivWithinAt_forall_lt_or_forall_gt_of_forall_ne","module":"Mathlib.Analysis.Calculus.Darboux","initialProofState":"f f' : Real ‚Üí Real\ns : Set Real\nhs : Convex Real s\nhf : ‚àÄ (x : Real), Membership.mem s x ‚Üí HasDerivWithinAt f (f' x) s x\nm : Real\nhf' : ‚àÄ (x : Real), Membership.mem s x ‚Üí Ne (f' x) m\n‚ä¢ Or (‚àÄ (x : Real), Membership.mem s x ‚Üí LT.lt (f' x) m) (‚àÄ (x : Real), Membership.mem s x ‚Üí LT.lt m (f' x))","decl":"/-- If the derivative of a function is never equal to `m`, then either\nit is always greater than `m`, or it is always less than `m`. -/\ntheorem hasDerivWithinAt_forall_lt_or_forall_gt_of_forall_ne {s : Set ‚Ñù} (hs : Convex ‚Ñù s)\n    (hf : ‚àÄ x ‚àà s, HasDerivWithinAt f (f' x) s x) {m : ‚Ñù} (hf' : ‚àÄ x ‚àà s, f' x ‚â† m) :\n    (‚àÄ x ‚àà s, f' x < m) ‚à® ‚àÄ x ‚àà s, m < f' x := by\n  contrapose! hf'\n  rcases hf' with ‚ü®‚ü®b, hb, hmb‚ü©, ‚ü®a, ha, hma‚ü©‚ü©\n  exact (hs.ordConnected.image_hasDerivWithinAt hf).out (mem_image_of_mem f' ha)\n    (mem_image_of_mem f' hb) ‚ü®hma, hmb‚ü©\n"}
