{"name":"LinearMap.frobenius_def","module":"Mathlib.Algebra.CharP.ExpChar","initialProofState":"R : Type u\ninst✝⁴ : CommSemiring R\nS : Type u_1\ninst✝³ : CommSemiring S\np : Nat\ninst✝² : ExpChar R p\ninst✝¹ : ExpChar S p\ninst✝ : Algebra R S\nx : S\n⊢ Eq ((LinearMap.frobenius R S p) x) (HPow.hPow x p)","decl":"theorem LinearMap.frobenius_def [Algebra R S] (x : S) : frobenius R S p x = x ^ p := rfl\n\n"}
{"name":"LinearMap.iterateFrobenius_def","module":"Mathlib.Algebra.CharP.ExpChar","initialProofState":"R : Type u\ninst✝⁴ : CommSemiring R\nS : Type u_1\ninst✝³ : CommSemiring S\np : Nat\ninst✝² : ExpChar R p\ninst✝¹ : ExpChar S p\ninst✝ : Algebra R S\nn : Nat\nx : S\n⊢ Eq ((LinearMap.iterateFrobenius R S p n) x) (HPow.hPow x (HPow.hPow p n))","decl":"theorem LinearMap.iterateFrobenius_def [Algebra R S] (n : ℕ) (x : S) :\n    iterateFrobenius R S p n x = x ^ p ^ n := rfl\n\n"}
{"name":"frobenius_zero","module":"Mathlib.Algebra.CharP.ExpChar","initialProofState":"R : Type u\ninst✝¹ : CommSemiring R\np : Nat\ninst✝ : ExpChar R p\n⊢ Eq ((frobenius R p) 0) 0","decl":"theorem frobenius_zero : frobenius R p 0 = 0 :=\n  (frobenius R p).map_zero\n\n"}
{"name":"frobenius_add","module":"Mathlib.Algebra.CharP.ExpChar","initialProofState":"R : Type u\ninst✝¹ : CommSemiring R\np : Nat\ninst✝ : ExpChar R p\nx y : R\n⊢ Eq ((frobenius R p) (HAdd.hAdd x y)) (HAdd.hAdd ((frobenius R p) x) ((frobenius R p) y))","decl":"theorem frobenius_add : frobenius R p (x + y) = frobenius R p x + frobenius R p y :=\n  (frobenius R p).map_add x y\n\n"}
{"name":"frobenius_natCast","module":"Mathlib.Algebra.CharP.ExpChar","initialProofState":"R : Type u\ninst✝¹ : CommSemiring R\np : Nat\ninst✝ : ExpChar R p\nn : Nat\n⊢ Eq ((frobenius R p) ↑n) ↑n","decl":"theorem frobenius_natCast (n : ℕ) : frobenius R p n = n :=\n  map_natCast (frobenius R p) n\n\n"}
