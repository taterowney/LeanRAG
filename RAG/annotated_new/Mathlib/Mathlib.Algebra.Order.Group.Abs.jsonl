{"name":"abs_nsmul","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nn : Nat\na : α\n⊢ Eq (abs (HSMul.hSMul n a)) (HSMul.hSMul n (abs a))","decl":"@[to_additive] lemma mabs_pow (n : ℕ) (a : α) : |a ^ n|ₘ = |a|ₘ ^ n := by\n  obtain ha | ha := le_total a 1\n  · rw [mabs_of_le_one ha, ← mabs_inv, ← inv_pow, mabs_of_one_le]\n    exact one_le_pow_of_one_le' (one_le_inv'.2 ha) n\n  · rw [mabs_of_one_le ha, mabs_of_one_le (one_le_pow_of_one_le' ha n)]\n\n"}
{"name":"mabs_pow","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedCommGroup α\nn : Nat\na : α\n⊢ Eq (mabs (HPow.hPow a n)) (HPow.hPow (mabs a) n)","decl":"@[to_additive] lemma mabs_pow (n : ℕ) (a : α) : |a ^ n|ₘ = |a|ₘ ^ n := by\n  obtain ha | ha := le_total a 1\n  · rw [mabs_of_le_one ha, ← mabs_inv, ← inv_pow, mabs_of_one_le]\n    exact one_le_pow_of_one_le' (one_le_inv'.2 ha) n\n  · rw [mabs_of_one_le ha, mabs_of_one_le (one_le_pow_of_one_le' ha n)]\n\n"}
{"name":"abs_add_eq_add_abs_iff","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\n⊢ Iff (Eq (abs (HAdd.hAdd a b)) (HAdd.hAdd (abs a) (abs b))) (Or (And (LE.le 0 a) (LE.le 0 b)) (And (LE.le a 0) (LE.le b 0)))","decl":"@[to_additive] lemma mabs_mul_eq_mul_mabs_iff (a b : α) :\n    |a * b|ₘ = |a|ₘ * |b|ₘ ↔ 1 ≤ a ∧ 1 ≤ b ∨ a ≤ 1 ∧ b ≤ 1 := by\n  obtain ab | ab := le_total a b\n  · exact mabs_mul_eq_mul_mabs_le ab\n  · simpa only [mul_comm, and_comm] using mabs_mul_eq_mul_mabs_le ab\n\n"}
{"name":"mabs_mul_eq_mul_mabs_iff","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedCommGroup α\na b : α\n⊢ Iff (Eq (mabs (HMul.hMul a b)) (HMul.hMul (mabs a) (mabs b))) (Or (And (LE.le 1 a) (LE.le 1 b)) (And (LE.le a 1) (LE.le b 1)))","decl":"@[to_additive] lemma mabs_mul_eq_mul_mabs_iff (a b : α) :\n    |a * b|ₘ = |a|ₘ * |b|ₘ ↔ 1 ≤ a ∧ 1 ≤ b ∨ a ≤ 1 ∧ b ≤ 1 := by\n  obtain ab | ab := le_total a b\n  · exact mabs_mul_eq_mul_mabs_le ab\n  · simpa only [mul_comm, and_comm] using mabs_mul_eq_mul_mabs_le ab\n\n"}
{"name":"abs_le","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\n⊢ Iff (LE.le (abs a) b) (And (LE.le (Neg.neg b) a) (LE.le a b))","decl":"theorem abs_le : |a| ≤ b ↔ -b ≤ a ∧ a ≤ b := by rw [abs_le', and_comm, @neg_le α]\n\n"}
{"name":"le_abs'","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\n⊢ Iff (LE.le a (abs b)) (Or (LE.le b (Neg.neg a)) (LE.le a b))","decl":"theorem le_abs' : a ≤ |b| ↔ b ≤ -a ∨ a ≤ b := by rw [le_abs, or_comm, @le_neg α]\n\n"}
{"name":"neg_le_of_abs_le","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\nh : LE.le (abs a) b\n⊢ LE.le (Neg.neg b) a","decl":"theorem neg_le_of_abs_le (h : |a| ≤ b) : -b ≤ a :=\n  (abs_le.mp h).1\n\n"}
{"name":"le_of_abs_le","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\nh : LE.le (abs a) b\n⊢ LE.le a b","decl":"theorem le_of_abs_le (h : |a| ≤ b) : a ≤ b :=\n  (abs_le.mp h).2\n\n"}
{"name":"apply_abs_le_mul_of_one_le'","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝⁴ : LinearOrderedAddCommGroup α\nβ : Type u_2\ninst✝³ : MulOneClass β\ninst✝² : Preorder β\ninst✝¹ : MulLeftMono β\ninst✝ : MulRightMono β\nf : α → β\na : α\nh₁ : LE.le 1 (f a)\nh₂ : LE.le 1 (f (Neg.neg a))\n⊢ LE.le (f (abs a)) (HMul.hMul (f a) (f (Neg.neg a)))","decl":"@[to_additive]\ntheorem apply_abs_le_mul_of_one_le' {β : Type*} [MulOneClass β] [Preorder β]\n    [MulLeftMono β] [MulRightMono β] {f : α → β}\n    {a : α} (h₁ : 1 ≤ f a) (h₂ : 1 ≤ f (-a)) : f |a| ≤ f a * f (-a) :=\n  (le_total a 0).rec (fun ha => (abs_of_nonpos ha).symm ▸ le_mul_of_one_le_left' h₁) fun ha =>\n    (abs_of_nonneg ha).symm ▸ le_mul_of_one_le_right' h₂\n\n"}
{"name":"apply_abs_le_add_of_nonneg'","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝⁴ : LinearOrderedAddCommGroup α\nβ : Type u_2\ninst✝³ : AddZeroClass β\ninst✝² : Preorder β\ninst✝¹ : AddLeftMono β\ninst✝ : AddRightMono β\nf : α → β\na : α\nh₁ : LE.le 0 (f a)\nh₂ : LE.le 0 (f (Neg.neg a))\n⊢ LE.le (f (abs a)) (HAdd.hAdd (f a) (f (Neg.neg a)))","decl":"@[to_additive]\ntheorem apply_abs_le_mul_of_one_le' {β : Type*} [MulOneClass β] [Preorder β]\n    [MulLeftMono β] [MulRightMono β] {f : α → β}\n    {a : α} (h₁ : 1 ≤ f a) (h₂ : 1 ≤ f (-a)) : f |a| ≤ f a * f (-a) :=\n  (le_total a 0).rec (fun ha => (abs_of_nonpos ha).symm ▸ le_mul_of_one_le_left' h₁) fun ha =>\n    (abs_of_nonneg ha).symm ▸ le_mul_of_one_le_right' h₂\n\n"}
{"name":"apply_abs_le_mul_of_one_le","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝⁴ : LinearOrderedAddCommGroup α\nβ : Type u_2\ninst✝³ : MulOneClass β\ninst✝² : Preorder β\ninst✝¹ : MulLeftMono β\ninst✝ : MulRightMono β\nf : α → β\nh : ∀ (x : α), LE.le 1 (f x)\na : α\n⊢ LE.le (f (abs a)) (HMul.hMul (f a) (f (Neg.neg a)))","decl":"@[to_additive]\ntheorem apply_abs_le_mul_of_one_le {β : Type*} [MulOneClass β] [Preorder β]\n    [MulLeftMono β] [MulRightMono β] {f : α → β}\n    (h : ∀ x, 1 ≤ f x) (a : α) : f |a| ≤ f a * f (-a) :=\n  apply_abs_le_mul_of_one_le' (h _) (h _)\n\n"}
{"name":"apply_abs_le_add_of_nonneg","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝⁴ : LinearOrderedAddCommGroup α\nβ : Type u_2\ninst✝³ : AddZeroClass β\ninst✝² : Preorder β\ninst✝¹ : AddLeftMono β\ninst✝ : AddRightMono β\nf : α → β\nh : ∀ (x : α), LE.le 0 (f x)\na : α\n⊢ LE.le (f (abs a)) (HAdd.hAdd (f a) (f (Neg.neg a)))","decl":"@[to_additive]\ntheorem apply_abs_le_mul_of_one_le {β : Type*} [MulOneClass β] [Preorder β]\n    [MulLeftMono β] [MulRightMono β] {f : α → β}\n    (h : ∀ x, 1 ≤ f x) (a : α) : f |a| ≤ f a * f (-a) :=\n  apply_abs_le_mul_of_one_le' (h _) (h _)\n\n"}
{"name":"abs_add","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\n⊢ LE.le (abs (HAdd.hAdd a b)) (HAdd.hAdd (abs a) (abs b))","decl":"/-- The **triangle inequality** in `LinearOrderedAddCommGroup`s. -/\ntheorem abs_add (a b : α) : |a + b| ≤ |a| + |b| := by\n  rw [abs_le, neg_add]\n  constructor <;> gcongr <;> apply_rules [neg_abs_le, le_abs_self]\n\n"}
{"name":"abs_add'","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\n⊢ LE.le (abs a) (HAdd.hAdd (abs b) (abs (HAdd.hAdd b a)))","decl":"theorem abs_add' (a b : α) : |a| ≤ |b| + |b + a| := by simpa using abs_add (-b) (b + a)\n\n"}
{"name":"abs_sub","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\n⊢ LE.le (abs (HSub.hSub a b)) (HAdd.hAdd (abs a) (abs b))","decl":"theorem abs_sub (a b : α) : |a - b| ≤ |a| + |b| := by\n  rw [sub_eq_add_neg, ← abs_neg b]\n  exact abs_add a _\n\n"}
{"name":"abs_sub_le_iff","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\n⊢ Iff (LE.le (abs (HSub.hSub a b)) c) (And (LE.le (HSub.hSub a b) c) (LE.le (HSub.hSub b a) c))","decl":"theorem abs_sub_le_iff : |a - b| ≤ c ↔ a - b ≤ c ∧ b - a ≤ c := by\n  rw [abs_le, neg_le_sub_iff_le_add, sub_le_iff_le_add', and_comm, sub_le_iff_le_add']\n\n"}
{"name":"abs_sub_lt_iff","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\n⊢ Iff (LT.lt (abs (HSub.hSub a b)) c) (And (LT.lt (HSub.hSub a b) c) (LT.lt (HSub.hSub b a) c))","decl":"theorem abs_sub_lt_iff : |a - b| < c ↔ a - b < c ∧ b - a < c := by\n  rw [@abs_lt α, neg_lt_sub_iff_lt_add', sub_lt_iff_lt_add', and_comm, sub_lt_iff_lt_add']\n\n"}
{"name":"sub_le_of_abs_sub_le_left","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\nh : LE.le (abs (HSub.hSub a b)) c\n⊢ LE.le (HSub.hSub b c) a","decl":"theorem sub_le_of_abs_sub_le_left (h : |a - b| ≤ c) : b - c ≤ a :=\n  sub_le_comm.1 <| (abs_sub_le_iff.1 h).2\n\n"}
{"name":"sub_le_of_abs_sub_le_right","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\nh : LE.le (abs (HSub.hSub a b)) c\n⊢ LE.le (HSub.hSub a c) b","decl":"theorem sub_le_of_abs_sub_le_right (h : |a - b| ≤ c) : a - c ≤ b :=\n  sub_le_of_abs_sub_le_left (abs_sub_comm a b ▸ h)\n\n"}
{"name":"sub_lt_of_abs_sub_lt_left","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\nh : LT.lt (abs (HSub.hSub a b)) c\n⊢ LT.lt (HSub.hSub b c) a","decl":"theorem sub_lt_of_abs_sub_lt_left (h : |a - b| < c) : b - c < a :=\n  sub_lt_comm.1 <| (abs_sub_lt_iff.1 h).2\n\n"}
{"name":"sub_lt_of_abs_sub_lt_right","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\nh : LT.lt (abs (HSub.hSub a b)) c\n⊢ LT.lt (HSub.hSub a c) b","decl":"theorem sub_lt_of_abs_sub_lt_right (h : |a - b| < c) : a - c < b :=\n  sub_lt_of_abs_sub_lt_left (abs_sub_comm a b ▸ h)\n\n"}
{"name":"abs_sub_abs_le_abs_sub","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\n⊢ LE.le (HSub.hSub (abs a) (abs b)) (abs (HSub.hSub a b))","decl":"theorem abs_sub_abs_le_abs_sub (a b : α) : |a| - |b| ≤ |a - b| :=\n  sub_le_iff_le_add.2 <|\n    calc\n      |a| = |a - b + b| := by rw [sub_add_cancel]\n      _ ≤ |a - b| + |b| := abs_add _ _\n\n"}
{"name":"abs_abs_sub_abs_le_abs_sub","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\n⊢ LE.le (abs (HSub.hSub (abs a) (abs b))) (abs (HSub.hSub a b))","decl":"theorem abs_abs_sub_abs_le_abs_sub (a b : α) : |(|a| - |b|)| ≤ |a - b| :=\n  abs_sub_le_iff.2\n    ⟨abs_sub_abs_le_abs_sub _ _, by rw [abs_sub_comm]; apply abs_sub_abs_le_abs_sub⟩\n\n"}
{"name":"abs_sub_le_of_nonneg_of_le","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b n : α\na_nonneg : LE.le 0 a\na_le_n : LE.le a n\nb_nonneg : LE.le 0 b\nb_le_n : LE.le b n\n⊢ LE.le (abs (HSub.hSub a b)) n","decl":"/-- `|a - b| ≤ n` if `0 ≤ a ≤ n` and `0 ≤ b ≤ n`. -/\ntheorem abs_sub_le_of_nonneg_of_le {a b n : α} (a_nonneg : 0 ≤ a) (a_le_n : a ≤ n)\n    (b_nonneg : 0 ≤ b) (b_le_n : b ≤ n) : |a - b| ≤ n := by\n  rw [abs_sub_le_iff, sub_le_iff_le_add, sub_le_iff_le_add]\n  exact ⟨le_add_of_le_of_nonneg a_le_n b_nonneg, le_add_of_le_of_nonneg b_le_n a_nonneg⟩\n\n"}
{"name":"abs_sub_lt_of_nonneg_of_lt","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b n : α\na_nonneg : LE.le 0 a\na_lt_n : LT.lt a n\nb_nonneg : LE.le 0 b\nb_lt_n : LT.lt b n\n⊢ LT.lt (abs (HSub.hSub a b)) n","decl":"/-- `|a - b| < n` if `0 ≤ a < n` and `0 ≤ b < n`. -/\ntheorem abs_sub_lt_of_nonneg_of_lt {a b n : α} (a_nonneg : 0 ≤ a) (a_lt_n : a < n)\n    (b_nonneg : 0 ≤ b) (b_lt_n : b < n) : |a - b| < n := by\n  rw [abs_sub_lt_iff, sub_lt_iff_lt_add, sub_lt_iff_lt_add]\n  exact ⟨lt_add_of_lt_of_nonneg a_lt_n b_nonneg, lt_add_of_lt_of_nonneg b_lt_n a_nonneg⟩\n\n"}
{"name":"abs_eq","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\nhb : LE.le 0 b\n⊢ Iff (Eq (abs a) b) (Or (Eq a b) (Eq a (Neg.neg b)))","decl":"theorem abs_eq (hb : 0 ≤ b) : |a| = b ↔ a = b ∨ a = -b := by\n  refine ⟨eq_or_eq_neg_of_abs_eq, ?_⟩\n  rintro (rfl | rfl) <;> simp only [abs_neg, abs_of_nonneg hb]\n\n"}
{"name":"abs_le_max_abs_abs","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\nhab : LE.le a b\nhbc : LE.le b c\n⊢ LE.le (abs b) (Max.max (abs a) (abs c))","decl":"theorem abs_le_max_abs_abs (hab : a ≤ b) (hbc : b ≤ c) : |b| ≤ max |a| |c| :=\n  abs_le'.2\n    ⟨by simp [hbc.trans (le_abs_self c)], by\n      simp [((@neg_le_neg_iff α ..).mpr hab).trans (neg_le_abs a)]⟩\n\n"}
{"name":"min_abs_abs_le_abs_max","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\n⊢ LE.le (Min.min (abs a) (abs b)) (abs (Max.max a b))","decl":"theorem min_abs_abs_le_abs_max : min |a| |b| ≤ |max a b| :=\n  (le_total a b).elim (fun h => (min_le_right _ _).trans_eq <| congr_arg _ (max_eq_right h).symm)\n    fun h => (min_le_left _ _).trans_eq <| congr_arg _ (max_eq_left h).symm\n\n"}
{"name":"min_abs_abs_le_abs_min","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\n⊢ LE.le (Min.min (abs a) (abs b)) (abs (Min.min a b))","decl":"theorem min_abs_abs_le_abs_min : min |a| |b| ≤ |min a b| :=\n  (le_total a b).elim (fun h => (min_le_left _ _).trans_eq <| congr_arg _ (min_eq_left h).symm)\n    fun h => (min_le_right _ _).trans_eq <| congr_arg _ (min_eq_right h).symm\n\n"}
{"name":"abs_max_le_max_abs_abs","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\n⊢ LE.le (abs (Max.max a b)) (Max.max (abs a) (abs b))","decl":"theorem abs_max_le_max_abs_abs : |max a b| ≤ max |a| |b| :=\n  (le_total a b).elim (fun h => (congr_arg _ <| max_eq_right h).trans_le <| le_max_right _ _)\n    fun h => (congr_arg _ <| max_eq_left h).trans_le <| le_max_left _ _\n\n"}
{"name":"abs_min_le_max_abs_abs","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\n⊢ LE.le (abs (Min.min a b)) (Max.max (abs a) (abs b))","decl":"theorem abs_min_le_max_abs_abs : |min a b| ≤ max |a| |b| :=\n  (le_total a b).elim (fun h => (congr_arg _ <| min_eq_left h).trans_le <| le_max_left _ _) fun h =>\n    (congr_arg _ <| min_eq_right h).trans_le <| le_max_right _ _\n\n"}
{"name":"eq_of_abs_sub_eq_zero","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\nh : Eq (abs (HSub.hSub a b)) 0\n⊢ Eq a b","decl":"theorem eq_of_abs_sub_eq_zero {a b : α} (h : |a - b| = 0) : a = b :=\n  sub_eq_zero.1 <| (abs_eq_zero (α := α)).1 h\n\n"}
{"name":"abs_sub_le","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\n⊢ LE.le (abs (HSub.hSub a c)) (HAdd.hAdd (abs (HSub.hSub a b)) (abs (HSub.hSub b c)))","decl":"theorem abs_sub_le (a b c : α) : |a - c| ≤ |a - b| + |b - c| :=\n  calc\n    |a - c| = |a - b + (b - c)| := by rw [sub_add_sub_cancel]\n    _ ≤ |a - b| + |b - c| := abs_add _ _\n\n"}
{"name":"abs_add_three","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\n⊢ LE.le (abs (HAdd.hAdd (HAdd.hAdd a b) c)) (HAdd.hAdd (HAdd.hAdd (abs a) (abs b)) (abs c))","decl":"theorem abs_add_three (a b c : α) : |a + b + c| ≤ |a| + |b| + |c| :=\n  (abs_add _ _).trans (add_le_add_right (abs_add _ _) _)\n\n"}
{"name":"dist_bdd_within_interval","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b lb ub : α\nhal : LE.le lb a\nhau : LE.le a ub\nhbl : LE.le lb b\nhbu : LE.le b ub\n⊢ LE.le (abs (HSub.hSub a b)) (HSub.hSub ub lb)","decl":"theorem dist_bdd_within_interval {a b lb ub : α} (hal : lb ≤ a) (hau : a ≤ ub) (hbl : lb ≤ b)\n    (hbu : b ≤ ub) : |a - b| ≤ ub - lb :=\n  abs_sub_le_iff.2 ⟨sub_le_sub hau hbl, sub_le_sub hbu hal⟩\n\n"}
{"name":"eq_of_abs_sub_nonpos","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\nh : LE.le (abs (HSub.hSub a b)) 0\n⊢ Eq a b","decl":"theorem eq_of_abs_sub_nonpos (h : |a - b| ≤ 0) : a = b :=\n  eq_of_abs_sub_eq_zero (le_antisymm h (abs_nonneg (a - b)))\n\n"}
{"name":"abs_sub_nonpos","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\n⊢ Iff (LE.le (abs (HSub.hSub a b)) 0) (Eq a b)","decl":"theorem abs_sub_nonpos : |a - b| ≤ 0 ↔ a = b :=\n  ⟨eq_of_abs_sub_nonpos, by rintro rfl; rw [sub_self, abs_zero]⟩\n\n"}
{"name":"abs_sub_pos","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\n⊢ Iff (LT.lt 0 (abs (HSub.hSub a b))) (Ne a b)","decl":"theorem abs_sub_pos : 0 < |a - b| ↔ a ≠ b :=\n  not_le.symm.trans abs_sub_nonpos.not\n\n"}
{"name":"abs_eq_self","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na : α\n⊢ Iff (Eq (abs a) a) (LE.le 0 a)","decl":"@[simp]\ntheorem abs_eq_self : |a| = a ↔ 0 ≤ a := by\n  rw [abs_eq_max_neg, max_eq_left_iff, neg_le_self_iff]\n\n"}
{"name":"abs_eq_neg_self","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na : α\n⊢ Iff (Eq (abs a) (Neg.neg a)) (LE.le a 0)","decl":"@[simp]\ntheorem abs_eq_neg_self : |a| = -a ↔ a ≤ 0 := by\n  rw [abs_eq_max_neg, max_eq_right_iff, le_neg_self_iff]\n\n"}
{"name":"abs_cases","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na : α\n⊢ Or (And (Eq (abs a) a) (LE.le 0 a)) (And (Eq (abs a) (Neg.neg a)) (LT.lt a 0))","decl":"/-- For an element `a` of a linear ordered ring, either `abs a = a` and `0 ≤ a`,\n    or `abs a = -a` and `a < 0`.\n    Use cases on this lemma to automate linarith in inequalities -/\ntheorem abs_cases (a : α) : |a| = a ∧ 0 ≤ a ∨ |a| = -a ∧ a < 0 := by\n  by_cases h : 0 ≤ a\n  · left\n    exact ⟨abs_eq_self.mpr h, h⟩\n  · right\n    push_neg at h\n    exact ⟨abs_eq_neg_self.mpr (le_of_lt h), h⟩\n\n"}
{"name":"max_zero_add_max_neg_zero_eq_abs_self","module":"Mathlib.Algebra.Order.Group.Abs","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na : α\n⊢ Eq (HAdd.hAdd (Max.max a 0) (Max.max (Neg.neg a) 0)) (abs a)","decl":"@[simp]\ntheorem max_zero_add_max_neg_zero_eq_abs_self (a : α) : max a 0 + max (-a) 0 = |a| := by\n  symm\n  rcases le_total 0 a with (ha | ha) <;> simp [ha]\n\n"}
