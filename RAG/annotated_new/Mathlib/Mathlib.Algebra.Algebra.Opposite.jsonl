{"name":"MulOpposite.algebraMap_apply","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nc : R\n⊢ Eq ((algebraMap R (MulOpposite A)) c) (MulOpposite.op ((algebraMap R A) c))","decl":"@[simp]\ntheorem algebraMap_apply (c : R) : algebraMap R Aᵐᵒᵖ c = op (algebraMap R A c) :=\n  rfl\n\n"}
{"name":"AlgEquiv.opOp_symm_apply","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\na✝ : MulOpposite (MulOpposite A)\n⊢ Eq ((AlgEquiv.opOp R A).symm a✝) (MulOpposite.unop (MulOpposite.unop a✝))","decl":"/-- An algebra is isomorphic to the opposite of its opposite. -/\n@[simps!]\ndef opOp : A ≃ₐ[R] Aᵐᵒᵖᵐᵒᵖ where\n  __ := RingEquiv.opOp A\n  commutes' _ := rfl\n\n"}
{"name":"AlgEquiv.opOp_apply","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\na✝ : A\n⊢ Eq ((AlgEquiv.opOp R A) a✝) (MulOpposite.op (MulOpposite.op a✝))","decl":"/-- An algebra is isomorphic to the opposite of its opposite. -/\n@[simps!]\ndef opOp : A ≃ₐ[R] Aᵐᵒᵖᵐᵒᵖ where\n  __ := RingEquiv.opOp A\n  commutes' _ := rfl\n\n"}
{"name":"AlgEquiv.toRingEquiv_opOp","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Eq (↑(AlgEquiv.opOp R A)) (RingEquiv.opOp A)","decl":"@[simp] theorem toRingEquiv_opOp : (opOp R A : A ≃+* Aᵐᵒᵖᵐᵒᵖ) = RingEquiv.opOp A := rfl\n\n"}
{"name":"AlgHom.fromOpposite_apply","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgHom R A B\nhf : ∀ (x y : A), Commute (f x) (f y)\n⊢ Eq (⇑(f.fromOpposite hf)) (Function.comp (⇑f) MulOpposite.unop)","decl":"/--\nAn algebra homomorphism `f : A →ₐ[R] B` such that `f x` commutes with `f y` for all `x, y` defines\nan algebra homomorphism from `Aᵐᵒᵖ`. -/\n@[simps (config := .asFn)]\ndef fromOpposite (f : A →ₐ[R] B) (hf : ∀ x y, Commute (f x) (f y)) : Aᵐᵒᵖ →ₐ[R] B :=\n  { f.toRingHom.fromOpposite hf with\n    toFun := f ∘ unop\n    commutes' := fun r => f.commutes r }\n\n"}
{"name":"AlgHom.toLinearMap_fromOpposite","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgHom R A B\nhf : ∀ (x y : A), Commute (f x) (f y)\n⊢ Eq (f.fromOpposite hf).toLinearMap (f.toLinearMap.comp ↑(MulOpposite.opLinearEquiv R).symm)","decl":"@[simp]\ntheorem toLinearMap_fromOpposite (f : A →ₐ[R] B) (hf : ∀ x y, Commute (f x) (f y)) :\n    (f.fromOpposite hf).toLinearMap = f.toLinearMap ∘ₗ (opLinearEquiv R (M := A)).symm :=\n  rfl\n\n"}
{"name":"AlgHom.toRingHom_fromOpposite","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgHom R A B\nhf : ∀ (x y : A), Commute (f x) (f y)\n⊢ Eq (↑(f.fromOpposite hf)) ((↑f).fromOpposite hf)","decl":"@[simp]\ntheorem toRingHom_fromOpposite (f : A →ₐ[R] B) (hf : ∀ x y, Commute (f x) (f y)) :\n    (f.fromOpposite hf : Aᵐᵒᵖ →+* B) = (f : A →+* B).fromOpposite hf :=\n  rfl\n\n"}
{"name":"AlgHom.toOpposite_apply","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgHom R A B\nhf : ∀ (x y : A), Commute (f x) (f y)\n⊢ Eq (⇑(f.toOpposite hf)) (Function.comp MulOpposite.op ⇑f)","decl":"/--\nAn algebra homomorphism `f : A →ₐ[R] B` such that `f x` commutes with `f y` for all `x, y` defines\nan algebra homomorphism to `Bᵐᵒᵖ`. -/\n@[simps (config := .asFn)]\ndef toOpposite (f : A →ₐ[R] B) (hf : ∀ x y, Commute (f x) (f y)) : A →ₐ[R] Bᵐᵒᵖ :=\n  { f.toRingHom.toOpposite hf with\n    toFun := op ∘ f\n    commutes' := fun r => unop_injective <| f.commutes r }\n\n"}
{"name":"AlgHom.toLinearMap_toOpposite","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgHom R A B\nhf : ∀ (x y : A), Commute (f x) (f y)\n⊢ Eq (f.toOpposite hf).toLinearMap ((↑(MulOpposite.opLinearEquiv R)).comp f.toLinearMap)","decl":"@[simp]\ntheorem toLinearMap_toOpposite (f : A →ₐ[R] B) (hf : ∀ x y, Commute (f x) (f y)) :\n    (f.toOpposite hf).toLinearMap = (opLinearEquiv R : B ≃ₗ[R] Bᵐᵒᵖ) ∘ₗ f.toLinearMap :=\n  rfl\n\n"}
{"name":"AlgHom.toRingHom_toOpposite","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgHom R A B\nhf : ∀ (x y : A), Commute (f x) (f y)\n⊢ Eq (↑(f.toOpposite hf)) ((↑f).toOpposite hf)","decl":"@[simp]\ntheorem toRingHom_toOpposite (f : A →ₐ[R] B) (hf : ∀ x y, Commute (f x) (f y)) :\n    (f.toOpposite hf : A →+* Bᵐᵒᵖ) = (f : A →+* B).toOpposite hf :=\n  rfl\n\n"}
{"name":"AlgHom.op_symm_apply_apply","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgHom R (MulOpposite A) (MulOpposite B)\na✝ : A\n⊢ Eq ((AlgHom.op.symm f) a✝) (MulOpposite.unop (f (MulOpposite.op a✝)))","decl":"/-- An algebra hom `A →ₐ[R] B` can equivalently be viewed as an algebra hom `Aᵐᵒᵖ →ₐ[R] Bᵐᵒᵖ`.\nThis is the action of the (fully faithful) `ᵐᵒᵖ`-functor on morphisms. -/\n@[simps!]\nprotected def op : (A →ₐ[R] B) ≃ (Aᵐᵒᵖ →ₐ[R] Bᵐᵒᵖ) where\n  toFun f := { RingHom.op f.toRingHom with commutes' := fun r => unop_injective <| f.commutes r }\n  invFun f := { RingHom.unop f.toRingHom with commutes' := fun r => op_injective <| f.commutes r }\n  left_inv _f := AlgHom.ext fun _a => rfl\n  right_inv _f := AlgHom.ext fun _a => rfl\n\n"}
{"name":"AlgHom.op_apply_apply","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgHom R A B\na✝ : MulOpposite A\n⊢ Eq ((AlgHom.op f) a✝) (MulOpposite.op (f (MulOpposite.unop a✝)))","decl":"/-- An algebra hom `A →ₐ[R] B` can equivalently be viewed as an algebra hom `Aᵐᵒᵖ →ₐ[R] Bᵐᵒᵖ`.\nThis is the action of the (fully faithful) `ᵐᵒᵖ`-functor on morphisms. -/\n@[simps!]\nprotected def op : (A →ₐ[R] B) ≃ (Aᵐᵒᵖ →ₐ[R] Bᵐᵒᵖ) where\n  toFun f := { RingHom.op f.toRingHom with commutes' := fun r => unop_injective <| f.commutes r }\n  invFun f := { RingHom.unop f.toRingHom with commutes' := fun r => op_injective <| f.commutes r }\n  left_inv _f := AlgHom.ext fun _a => rfl\n  right_inv _f := AlgHom.ext fun _a => rfl\n\n"}
{"name":"AlgHom.toRingHom_op","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgHom R A B\n⊢ Eq (AlgHom.op f).toRingHom (RingHom.op f.toRingHom)","decl":"theorem toRingHom_op (f : A →ₐ[R] B) : f.op.toRingHom = RingHom.op f.toRingHom :=\n  rfl\n\n"}
{"name":"AlgHom.toRingHom_unop","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgHom R (MulOpposite A) (MulOpposite B)\n⊢ Eq (AlgHom.unop f).toRingHom (RingHom.unop f.toRingHom)","decl":"theorem toRingHom_unop (f : Aᵐᵒᵖ →ₐ[R] Bᵐᵒᵖ) : f.unop.toRingHom = RingHom.unop f.toRingHom :=\n  rfl\n\n"}
{"name":"AlgHom.opComm_apply_apply","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\na✝¹ : AlgHom R A (MulOpposite B)\na✝ : MulOpposite A\n⊢ Eq ((AlgHom.opComm a✝¹) a✝) (MulOpposite.unop (a✝¹ (MulOpposite.unop a✝)))","decl":"/-- Swap the `ᵐᵒᵖ` on an algebra hom to the opposite side. -/\n@[simps!]\ndef opComm : (A →ₐ[R] Bᵐᵒᵖ) ≃ (Aᵐᵒᵖ →ₐ[R] B) :=\n  AlgHom.op.trans <| AlgEquiv.refl.arrowCongr (AlgEquiv.opOp R B).symm\n\n"}
{"name":"AlgHom.opComm_symm_apply_apply","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\na✝¹ : AlgHom R (MulOpposite A) B\na✝ : A\n⊢ Eq ((AlgHom.opComm.symm a✝¹) a✝) (MulOpposite.op (a✝¹ (MulOpposite.op a✝)))","decl":"/-- Swap the `ᵐᵒᵖ` on an algebra hom to the opposite side. -/\n@[simps!]\ndef opComm : (A →ₐ[R] Bᵐᵒᵖ) ≃ (Aᵐᵒᵖ →ₐ[R] B) :=\n  AlgHom.op.trans <| AlgEquiv.refl.arrowCongr (AlgEquiv.opOp R B).symm\n\n"}
{"name":"AlgEquiv.op_apply_symm_apply","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgEquiv R A B\na✝ : MulOpposite B\n⊢ Eq ((AlgEquiv.op f).symm a✝) (MulOpposite.op ((↑↑f).symm (MulOpposite.unop a✝)))","decl":"/-- An algebra iso `A ≃ₐ[R] B` can equivalently be viewed as an algebra iso `Aᵐᵒᵖ ≃ₐ[R] Bᵐᵒᵖ`.\nThis is the action of the (fully faithful) `ᵐᵒᵖ`-functor on morphisms. -/\n@[simps!]\ndef op : (A ≃ₐ[R] B) ≃ Aᵐᵒᵖ ≃ₐ[R] Bᵐᵒᵖ where\n  toFun f :=\n    { RingEquiv.op f.toRingEquiv with\n      commutes' := fun r => MulOpposite.unop_injective <| f.commutes r }\n  invFun f :=\n    { RingEquiv.unop f.toRingEquiv with\n      commutes' := fun r => MulOpposite.op_injective <| f.commutes r }\n  left_inv _f := AlgEquiv.ext fun _a => rfl\n  right_inv _f := AlgEquiv.ext fun _a => rfl\n\n"}
{"name":"AlgEquiv.op_symm_apply_symm_apply","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgEquiv R (MulOpposite A) (MulOpposite B)\na✝ : B\n⊢ Eq ((AlgEquiv.op.symm f).symm a✝) (MulOpposite.unop ((↑↑f).symm (MulOpposite.op a✝)))","decl":"/-- An algebra iso `A ≃ₐ[R] B` can equivalently be viewed as an algebra iso `Aᵐᵒᵖ ≃ₐ[R] Bᵐᵒᵖ`.\nThis is the action of the (fully faithful) `ᵐᵒᵖ`-functor on morphisms. -/\n@[simps!]\ndef op : (A ≃ₐ[R] B) ≃ Aᵐᵒᵖ ≃ₐ[R] Bᵐᵒᵖ where\n  toFun f :=\n    { RingEquiv.op f.toRingEquiv with\n      commutes' := fun r => MulOpposite.unop_injective <| f.commutes r }\n  invFun f :=\n    { RingEquiv.unop f.toRingEquiv with\n      commutes' := fun r => MulOpposite.op_injective <| f.commutes r }\n  left_inv _f := AlgEquiv.ext fun _a => rfl\n  right_inv _f := AlgEquiv.ext fun _a => rfl\n\n"}
{"name":"AlgEquiv.op_symm_apply_apply","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgEquiv R (MulOpposite A) (MulOpposite B)\na✝ : A\n⊢ Eq ((AlgEquiv.op.symm f) a✝) (MulOpposite.unop (f (MulOpposite.op a✝)))","decl":"/-- An algebra iso `A ≃ₐ[R] B` can equivalently be viewed as an algebra iso `Aᵐᵒᵖ ≃ₐ[R] Bᵐᵒᵖ`.\nThis is the action of the (fully faithful) `ᵐᵒᵖ`-functor on morphisms. -/\n@[simps!]\ndef op : (A ≃ₐ[R] B) ≃ Aᵐᵒᵖ ≃ₐ[R] Bᵐᵒᵖ where\n  toFun f :=\n    { RingEquiv.op f.toRingEquiv with\n      commutes' := fun r => MulOpposite.unop_injective <| f.commutes r }\n  invFun f :=\n    { RingEquiv.unop f.toRingEquiv with\n      commutes' := fun r => MulOpposite.op_injective <| f.commutes r }\n  left_inv _f := AlgEquiv.ext fun _a => rfl\n  right_inv _f := AlgEquiv.ext fun _a => rfl\n\n"}
{"name":"AlgEquiv.op_apply_apply","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgEquiv R A B\na✝ : MulOpposite A\n⊢ Eq ((AlgEquiv.op f) a✝) (MulOpposite.op (f (MulOpposite.unop a✝)))","decl":"/-- An algebra iso `A ≃ₐ[R] B` can equivalently be viewed as an algebra iso `Aᵐᵒᵖ ≃ₐ[R] Bᵐᵒᵖ`.\nThis is the action of the (fully faithful) `ᵐᵒᵖ`-functor on morphisms. -/\n@[simps!]\ndef op : (A ≃ₐ[R] B) ≃ Aᵐᵒᵖ ≃ₐ[R] Bᵐᵒᵖ where\n  toFun f :=\n    { RingEquiv.op f.toRingEquiv with\n      commutes' := fun r => MulOpposite.unop_injective <| f.commutes r }\n  invFun f :=\n    { RingEquiv.unop f.toRingEquiv with\n      commutes' := fun r => MulOpposite.op_injective <| f.commutes r }\n  left_inv _f := AlgEquiv.ext fun _a => rfl\n  right_inv _f := AlgEquiv.ext fun _a => rfl\n\n"}
{"name":"AlgEquiv.toAlgHom_op","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgEquiv R A B\n⊢ Eq (↑(AlgEquiv.op f)) (AlgHom.op ↑f)","decl":"theorem toAlgHom_op (f : A ≃ₐ[R] B) :\n    (AlgEquiv.op f).toAlgHom = AlgHom.op f.toAlgHom :=\n  rfl\n\n"}
{"name":"AlgEquiv.toRingEquiv_op","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgEquiv R A B\n⊢ Eq (AlgEquiv.op f).toRingEquiv (RingEquiv.op f.toRingEquiv)","decl":"theorem toRingEquiv_op (f : A ≃ₐ[R] B) :\n    (AlgEquiv.op f).toRingEquiv = RingEquiv.op f.toRingEquiv :=\n  rfl\n\n"}
{"name":"AlgEquiv.toAlgHom_unop","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgEquiv R (MulOpposite A) (MulOpposite B)\n⊢ Eq (↑(AlgEquiv.unop f)) (AlgHom.unop ↑f)","decl":"theorem toAlgHom_unop (f : Aᵐᵒᵖ ≃ₐ[R] Bᵐᵒᵖ) : f.unop.toAlgHom = AlgHom.unop f.toAlgHom :=\n  rfl\n\n"}
{"name":"AlgEquiv.toRingEquiv_unop","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgEquiv R (MulOpposite A) (MulOpposite B)\n⊢ Eq (AlgEquiv.unop f).toRingEquiv (RingEquiv.unop f.toRingEquiv)","decl":"theorem toRingEquiv_unop (f : Aᵐᵒᵖ ≃ₐ[R] Bᵐᵒᵖ) :\n    (AlgEquiv.unop f).toRingEquiv = RingEquiv.unop f.toRingEquiv :=\n  rfl\n\n"}
{"name":"AlgEquiv.opComm_symm_apply_symm_apply","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\na✝¹ : AlgEquiv R (MulOpposite A) B\na✝ : MulOpposite B\n⊢ Eq ((AlgEquiv.opComm.symm a✝¹).symm a✝) (MulOpposite.unop ((↑↑(AlgEquiv.refl.trans (a✝¹.trans (AlgEquiv.opOp R B)))).symm (MulOpposite.op a✝)))","decl":"/-- Swap the `ᵐᵒᵖ` on an algebra isomorphism to the opposite side. -/\n@[simps!]\ndef opComm : (A ≃ₐ[R] Bᵐᵒᵖ) ≃ (Aᵐᵒᵖ ≃ₐ[R] B) :=\n  AlgEquiv.op.trans <| AlgEquiv.refl.equivCongr (opOp R B).symm\n\n"}
{"name":"AlgEquiv.opComm_apply_symm_apply","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\na✝¹ : AlgEquiv R A (MulOpposite B)\na✝ : B\n⊢ Eq ((AlgEquiv.opComm a✝¹).symm a✝) ((↑↑AlgEquiv.refl).symm ((↑↑((AlgEquiv.op a✝¹).trans (AlgEquiv.opOp R B).symm)).symm a✝))","decl":"/-- Swap the `ᵐᵒᵖ` on an algebra isomorphism to the opposite side. -/\n@[simps!]\ndef opComm : (A ≃ₐ[R] Bᵐᵒᵖ) ≃ (Aᵐᵒᵖ ≃ₐ[R] B) :=\n  AlgEquiv.op.trans <| AlgEquiv.refl.equivCongr (opOp R B).symm\n\n"}
{"name":"AlgEquiv.opComm_apply_apply","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\na✝¹ : AlgEquiv R A (MulOpposite B)\na✝ : MulOpposite A\n⊢ Eq ((AlgEquiv.opComm a✝¹) a✝) (MulOpposite.unop (a✝¹ (MulOpposite.unop a✝)))","decl":"/-- Swap the `ᵐᵒᵖ` on an algebra isomorphism to the opposite side. -/\n@[simps!]\ndef opComm : (A ≃ₐ[R] Bᵐᵒᵖ) ≃ (Aᵐᵒᵖ ≃ₐ[R] B) :=\n  AlgEquiv.op.trans <| AlgEquiv.refl.equivCongr (opOp R B).symm\n\n"}
{"name":"AlgEquiv.opComm_symm_apply_apply","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\nB : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\na✝¹ : AlgEquiv R (MulOpposite A) B\na✝ : A\n⊢ Eq ((AlgEquiv.opComm.symm a✝¹) a✝) (MulOpposite.op (a✝¹ (MulOpposite.op a✝)))","decl":"/-- Swap the `ᵐᵒᵖ` on an algebra isomorphism to the opposite side. -/\n@[simps!]\ndef opComm : (A ≃ₐ[R] Bᵐᵒᵖ) ≃ (Aᵐᵒᵖ ≃ₐ[R] B) :=\n  AlgEquiv.op.trans <| AlgEquiv.refl.equivCongr (opOp R B).symm\n\n"}
{"name":"AlgEquiv.toOpposite_symm_apply","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\ninst✝² : CommSemiring R\ninst✝¹ : CommSemiring A\ninst✝ : Algebra R A\na✝ : MulOpposite A\n⊢ Eq ((AlgEquiv.toOpposite R A).symm a✝) (MulOpposite.unop a✝)","decl":"/-- A commutative algebra is isomorphic to its opposite. -/\n@[simps!]\ndef toOpposite : A ≃ₐ[R] Aᵐᵒᵖ where\n  __ := RingEquiv.toOpposite A\n  commutes' _r := rfl\n\n"}
{"name":"AlgEquiv.toOpposite_apply","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\ninst✝² : CommSemiring R\ninst✝¹ : CommSemiring A\ninst✝ : Algebra R A\na✝ : A\n⊢ Eq ((AlgEquiv.toOpposite R A) a✝) (MulOpposite.op a✝)","decl":"/-- A commutative algebra is isomorphic to its opposite. -/\n@[simps!]\ndef toOpposite : A ≃ₐ[R] Aᵐᵒᵖ where\n  __ := RingEquiv.toOpposite A\n  commutes' _r := rfl\n\n"}
{"name":"AlgEquiv.toRingEquiv_toOpposite","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\ninst✝² : CommSemiring R\ninst✝¹ : CommSemiring A\ninst✝ : Algebra R A\n⊢ Eq (↑(AlgEquiv.toOpposite R A)) (RingEquiv.toOpposite A)","decl":"@[simp] lemma toRingEquiv_toOpposite : (toOpposite R A : A ≃+* Aᵐᵒᵖ) = RingEquiv.toOpposite A := rfl\n"}
{"name":"AlgEquiv.toLinearEquiv_toOpposite","module":"Mathlib.Algebra.Algebra.Opposite","initialProofState":"R : Type u_1\nA : Type u_3\ninst✝² : CommSemiring R\ninst✝¹ : CommSemiring A\ninst✝ : Algebra R A\n⊢ Eq (AlgEquiv.toOpposite R A).toLinearEquiv (MulOpposite.opLinearEquiv R)","decl":"@[simp] lemma toLinearEquiv_toOpposite : toLinearEquiv (toOpposite R A) = opLinearEquiv R := rfl\n\n"}
