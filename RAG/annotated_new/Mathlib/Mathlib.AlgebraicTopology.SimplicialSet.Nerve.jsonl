{"name":"CategoryTheory.nerve_map","module":"Mathlib.AlgebraicTopology.SimplicialSet.Nerve","initialProofState":"C : Type u\ninst✝ : CategoryTheory.Category.{v, u} C\nX✝ Y✝ : Opposite SimplexCategory\nf : Quiver.Hom X✝ Y✝\nx : CategoryTheory.ComposableArrows C (Opposite.unop X✝).len\n⊢ Eq ((CategoryTheory.nerve C).map f x) (x.whiskerLeft (SimplexCategory.toCat.map f.unop))","decl":"/-- The nerve of a category -/\n@[simps]\ndef nerve (C : Type u) [Category.{v} C] : SSet.{max u v} where\n  obj Δ := ComposableArrows C (Δ.unop.len)\n  map f x := x.whiskerLeft (SimplexCategory.toCat.map f.unop)\n\n"}
{"name":"CategoryTheory.nerve_obj","module":"Mathlib.AlgebraicTopology.SimplicialSet.Nerve","initialProofState":"C : Type u\ninst✝ : CategoryTheory.Category.{v, u} C\nΔ : Opposite SimplexCategory\n⊢ Eq ((CategoryTheory.nerve C).obj Δ) (CategoryTheory.ComposableArrows C (Opposite.unop Δ).len)","decl":"/-- The nerve of a category -/\n@[simps]\ndef nerve (C : Type u) [Category.{v} C] : SSet.{max u v} where\n  obj Δ := ComposableArrows C (Δ.unop.len)\n  map f x := x.whiskerLeft (SimplexCategory.toCat.map f.unop)\n\n"}
{"name":"CategoryTheory.nerveMap_app","module":"Mathlib.AlgebraicTopology.SimplicialSet.Nerve","initialProofState":"C D : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Category.{v, u} D\nF : CategoryTheory.Functor C D\nx✝ : Opposite SimplexCategory\na✝ : CategoryTheory.ComposableArrows C (Opposite.unop x✝).len\n⊢ Eq ((CategoryTheory.nerveMap F).app x✝ a✝) ((F.mapComposableArrows (Opposite.unop x✝).len).obj a✝)","decl":"/-- Given a functor `C ⥤ D`, we obtain a morphism `nerve C ⟶ nerve D` of simplicial sets. -/\n@[simps]\ndef nerveMap {C D : Type u} [Category.{v} C] [Category.{v} D] (F : C ⥤ D) : nerve C ⟶ nerve D :=\n  { app := fun _ => (F.mapComposableArrows _).obj }\n\n"}
{"name":"CategoryTheory.nerveFunctor_map","module":"Mathlib.AlgebraicTopology.SimplicialSet.Nerve","initialProofState":"X✝ Y✝ : CategoryTheory.Cat\nF : Quiver.Hom X✝ Y✝\n⊢ Eq (CategoryTheory.nerveFunctor.map F) (CategoryTheory.nerveMap F)","decl":"/-- The nerve of a category, as a functor `Cat ⥤ SSet` -/\n@[simps]\ndef nerveFunctor : Cat.{v, u} ⥤ SSet where\n  obj C := nerve C\n  map F := nerveMap F\n\n"}
{"name":"CategoryTheory.nerveFunctor_obj","module":"Mathlib.AlgebraicTopology.SimplicialSet.Nerve","initialProofState":"C : CategoryTheory.Cat\n⊢ Eq (CategoryTheory.nerveFunctor.obj C) (CategoryTheory.nerve ↑C)","decl":"/-- The nerve of a category, as a functor `Cat ⥤ SSet` -/\n@[simps]\ndef nerveFunctor : Cat.{v, u} ⥤ SSet where\n  obj C := nerve C\n  map F := nerveMap F\n\n"}
{"name":"CategoryTheory.Nerve.δ₀_eq","module":"Mathlib.AlgebraicTopology.SimplicialSet.Nerve","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nn : Nat\nx : (CategoryTheory.nerve C).obj { unop := SimplexCategory.mk (HAdd.hAdd n 1) }\n⊢ Eq (CategoryTheory.SimplicialObject.δ (CategoryTheory.nerve C) 0 x) (CategoryTheory.ComposableArrows.δ₀ x)","decl":"lemma δ₀_eq {x : nerve C _[n + 1]} : (nerve C).δ (0 : Fin (n + 2)) x = x.δ₀ := rfl\n\n"}
