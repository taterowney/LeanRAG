{"name":"stronglyMeasurableAt_bot","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\ninst✝ : TopologicalSpace β\nμ : MeasureTheory.Measure α\nf : α → β\n⊢ StronglyMeasurableAtFilter f Bot.bot μ","decl":"@[simp]\ntheorem stronglyMeasurableAt_bot {f : α → β} : StronglyMeasurableAtFilter f ⊥ μ :=\n  ⟨∅, mem_bot, by simp⟩\n\n"}
{"name":"StronglyMeasurableAtFilter.eventually","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\ninst✝ : TopologicalSpace β\nl : Filter α\nf : α → β\nμ : MeasureTheory.Measure α\nh : StronglyMeasurableAtFilter f l μ\n⊢ Filter.Eventually (fun s => MeasureTheory.AEStronglyMeasurable f (μ.restrict s)) l.smallSets","decl":"protected theorem StronglyMeasurableAtFilter.eventually (h : StronglyMeasurableAtFilter f l μ) :\n    ∀ᶠ s in l.smallSets, AEStronglyMeasurable f (μ.restrict s) :=\n  (eventually_smallSets' fun _ _ => AEStronglyMeasurable.mono_set).2 h\n\n"}
{"name":"StronglyMeasurableAtFilter.filter_mono","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\ninst✝ : TopologicalSpace β\nl l' : Filter α\nf : α → β\nμ : MeasureTheory.Measure α\nh : StronglyMeasurableAtFilter f l μ\nh' : LE.le l' l\n⊢ StronglyMeasurableAtFilter f l' μ","decl":"protected theorem StronglyMeasurableAtFilter.filter_mono (h : StronglyMeasurableAtFilter f l μ)\n    (h' : l' ≤ l) : StronglyMeasurableAtFilter f l' μ :=\n  let ⟨s, hsl, hs⟩ := h\n  ⟨s, h' hsl, hs⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.stronglyMeasurableAtFilter","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\ninst✝ : TopologicalSpace β\nl : Filter α\nf : α → β\nμ : MeasureTheory.Measure α\nh : MeasureTheory.AEStronglyMeasurable f μ\n⊢ StronglyMeasurableAtFilter f l μ","decl":"protected theorem MeasureTheory.AEStronglyMeasurable.stronglyMeasurableAtFilter\n    (h : AEStronglyMeasurable f μ) : StronglyMeasurableAtFilter f l μ :=\n  ⟨univ, univ_mem, by rwa [Measure.restrict_univ]⟩\n\n"}
{"name":"AeStronglyMeasurable.stronglyMeasurableAtFilter_of_mem","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\ninst✝ : TopologicalSpace β\nl : Filter α\nf : α → β\nμ : MeasureTheory.Measure α\ns : Set α\nh : MeasureTheory.AEStronglyMeasurable f (μ.restrict s)\nhl : Membership.mem l s\n⊢ StronglyMeasurableAtFilter f l μ","decl":"theorem AeStronglyMeasurable.stronglyMeasurableAtFilter_of_mem {s}\n    (h : AEStronglyMeasurable f (μ.restrict s)) (hl : s ∈ l) : StronglyMeasurableAtFilter f l μ :=\n  ⟨s, hl, h⟩\n\n"}
{"name":"MeasureTheory.StronglyMeasurable.stronglyMeasurableAtFilter","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\ninst✝ : TopologicalSpace β\nl : Filter α\nf : α → β\nμ : MeasureTheory.Measure α\nh : MeasureTheory.StronglyMeasurable f\n⊢ StronglyMeasurableAtFilter f l μ","decl":"protected theorem MeasureTheory.StronglyMeasurable.stronglyMeasurableAtFilter\n    (h : StronglyMeasurable f) : StronglyMeasurableAtFilter f l μ :=\n  h.aestronglyMeasurable.stronglyMeasurableAtFilter\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_restrict_of_bounded","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns : Set α\nμ : MeasureTheory.Measure α\nC : Real\nhs : LT.lt (μ s) Top.top\nhf : Filter.Eventually (fun x => LE.le (Norm.norm (f x)) C) (MeasureTheory.ae (μ.restrict s))\n⊢ MeasureTheory.HasFiniteIntegral f (μ.restrict s)","decl":"theorem hasFiniteIntegral_restrict_of_bounded [NormedAddCommGroup E] {f : α → E} {s : Set α}\n    {μ : Measure α} {C} (hs : μ s < ∞) (hf : ∀ᵐ x ∂μ.restrict s, ‖f x‖ ≤ C) :\n    HasFiniteIntegral f (μ.restrict s) :=\n  haveI : IsFiniteMeasure (μ.restrict s) := ⟨by rwa [Measure.restrict_apply_univ]⟩\n  hasFiniteIntegral_of_bounded hf\n\n"}
{"name":"MeasureTheory.IntegrableOn.integrable","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns : Set α\nμ : MeasureTheory.Measure α\nh : MeasureTheory.IntegrableOn f s μ\n⊢ MeasureTheory.Integrable f (μ.restrict s)","decl":"theorem IntegrableOn.integrable (h : IntegrableOn f s μ) : Integrable f (μ.restrict s) :=\n  h\n\n"}
{"name":"MeasureTheory.integrableOn_empty","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\n⊢ MeasureTheory.IntegrableOn f EmptyCollection.emptyCollection μ","decl":"@[simp]\ntheorem integrableOn_empty : IntegrableOn f ∅ μ := by simp [IntegrableOn, integrable_zero_measure]\n\n"}
{"name":"MeasureTheory.integrableOn_univ","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\n⊢ Iff (MeasureTheory.IntegrableOn f Set.univ μ) (MeasureTheory.Integrable f μ)","decl":"@[simp]\ntheorem integrableOn_univ : IntegrableOn f univ μ ↔ Integrable f μ := by\n  rw [IntegrableOn, Measure.restrict_univ]\n\n"}
{"name":"MeasureTheory.integrableOn_zero","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\ns : Set α\nμ : MeasureTheory.Measure α\n⊢ MeasureTheory.IntegrableOn (fun x => 0) s μ","decl":"theorem integrableOn_zero : IntegrableOn (fun _ => (0 : E)) s μ :=\n  integrable_zero _ _ _\n\n"}
{"name":"MeasureTheory.integrableOn_const","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\ns : Set α\nμ : MeasureTheory.Measure α\nC : E\n⊢ Iff (MeasureTheory.IntegrableOn (fun x => C) s μ) (Or (Eq C 0) (LT.lt (μ s) Top.top))","decl":"@[simp]\ntheorem integrableOn_const {C : E} : IntegrableOn (fun _ => C) s μ ↔ C = 0 ∨ μ s < ∞ :=\n  integrable_const_iff.trans <| by rw [isFiniteMeasure_restrict, lt_top_iff_ne_top]\n\n"}
{"name":"MeasureTheory.IntegrableOn.mono","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns t : Set α\nμ ν : MeasureTheory.Measure α\nh : MeasureTheory.IntegrableOn f t ν\nhs : HasSubset.Subset s t\nhμ : LE.le μ ν\n⊢ MeasureTheory.IntegrableOn f s μ","decl":"theorem IntegrableOn.mono (h : IntegrableOn f t ν) (hs : s ⊆ t) (hμ : μ ≤ ν) : IntegrableOn f s μ :=\n  h.mono_measure <| Measure.restrict_mono hs hμ\n\n"}
{"name":"MeasureTheory.IntegrableOn.mono_set","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns t : Set α\nμ : MeasureTheory.Measure α\nh : MeasureTheory.IntegrableOn f t μ\nhst : HasSubset.Subset s t\n⊢ MeasureTheory.IntegrableOn f s μ","decl":"theorem IntegrableOn.mono_set (h : IntegrableOn f t μ) (hst : s ⊆ t) : IntegrableOn f s μ :=\n  h.mono hst le_rfl\n\n"}
{"name":"MeasureTheory.IntegrableOn.mono_measure","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns : Set α\nμ ν : MeasureTheory.Measure α\nh : MeasureTheory.IntegrableOn f s ν\nhμ : LE.le μ ν\n⊢ MeasureTheory.IntegrableOn f s μ","decl":"theorem IntegrableOn.mono_measure (h : IntegrableOn f s ν) (hμ : μ ≤ ν) : IntegrableOn f s μ :=\n  h.mono (Subset.refl _) hμ\n\n"}
{"name":"MeasureTheory.IntegrableOn.mono_set_ae","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns t : Set α\nμ : MeasureTheory.Measure α\nh : MeasureTheory.IntegrableOn f t μ\nhst : (MeasureTheory.ae μ).EventuallyLE s t\n⊢ MeasureTheory.IntegrableOn f s μ","decl":"theorem IntegrableOn.mono_set_ae (h : IntegrableOn f t μ) (hst : s ≤ᵐ[μ] t) : IntegrableOn f s μ :=\n  h.integrable.mono_measure <| Measure.restrict_mono_ae hst\n\n"}
{"name":"MeasureTheory.IntegrableOn.congr_set_ae","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns t : Set α\nμ : MeasureTheory.Measure α\nh : MeasureTheory.IntegrableOn f t μ\nhst : (MeasureTheory.ae μ).EventuallyEq s t\n⊢ MeasureTheory.IntegrableOn f s μ","decl":"theorem IntegrableOn.congr_set_ae (h : IntegrableOn f t μ) (hst : s =ᵐ[μ] t) : IntegrableOn f s μ :=\n  h.mono_set_ae hst.le\n\n"}
{"name":"MeasureTheory.IntegrableOn.congr_fun_ae","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf g : α → E\ns : Set α\nμ : MeasureTheory.Measure α\nh : MeasureTheory.IntegrableOn f s μ\nhst : (MeasureTheory.ae (μ.restrict s)).EventuallyEq f g\n⊢ MeasureTheory.IntegrableOn g s μ","decl":"theorem IntegrableOn.congr_fun_ae (h : IntegrableOn f s μ) (hst : f =ᵐ[μ.restrict s] g) :\n    IntegrableOn g s μ :=\n  Integrable.congr h hst\n\n"}
{"name":"MeasureTheory.integrableOn_congr_fun_ae","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf g : α → E\ns : Set α\nμ : MeasureTheory.Measure α\nhst : (MeasureTheory.ae (μ.restrict s)).EventuallyEq f g\n⊢ Iff (MeasureTheory.IntegrableOn f s μ) (MeasureTheory.IntegrableOn g s μ)","decl":"theorem integrableOn_congr_fun_ae (hst : f =ᵐ[μ.restrict s] g) :\n    IntegrableOn f s μ ↔ IntegrableOn g s μ :=\n  ⟨fun h => h.congr_fun_ae hst, fun h => h.congr_fun_ae hst.symm⟩\n\n"}
{"name":"MeasureTheory.IntegrableOn.congr_fun","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf g : α → E\ns : Set α\nμ : MeasureTheory.Measure α\nh : MeasureTheory.IntegrableOn f s μ\nhst : Set.EqOn f g s\nhs : MeasurableSet s\n⊢ MeasureTheory.IntegrableOn g s μ","decl":"theorem IntegrableOn.congr_fun (h : IntegrableOn f s μ) (hst : EqOn f g s) (hs : MeasurableSet s) :\n    IntegrableOn g s μ :=\n  h.congr_fun_ae ((ae_restrict_iff' hs).2 (Eventually.of_forall hst))\n\n"}
{"name":"MeasureTheory.integrableOn_congr_fun","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf g : α → E\ns : Set α\nμ : MeasureTheory.Measure α\nhst : Set.EqOn f g s\nhs : MeasurableSet s\n⊢ Iff (MeasureTheory.IntegrableOn f s μ) (MeasureTheory.IntegrableOn g s μ)","decl":"theorem integrableOn_congr_fun (hst : EqOn f g s) (hs : MeasurableSet s) :\n    IntegrableOn f s μ ↔ IntegrableOn g s μ :=\n  ⟨fun h => h.congr_fun hst hs, fun h => h.congr_fun hst.symm hs⟩\n\n"}
{"name":"MeasureTheory.Integrable.integrableOn","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns : Set α\nμ : MeasureTheory.Measure α\nh : MeasureTheory.Integrable f μ\n⊢ MeasureTheory.IntegrableOn f s μ","decl":"theorem Integrable.integrableOn (h : Integrable f μ) : IntegrableOn f s μ := h.restrict\n\n"}
{"name":"MeasureTheory.IntegrableOn.restrict","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns t : Set α\nμ : MeasureTheory.Measure α\nh : MeasureTheory.IntegrableOn f s μ\nhs : MeasurableSet s\n⊢ MeasureTheory.IntegrableOn f s (μ.restrict t)","decl":"theorem IntegrableOn.restrict (h : IntegrableOn f s μ) (hs : MeasurableSet s) :\n    IntegrableOn f s (μ.restrict t) := by\n  rw [IntegrableOn, Measure.restrict_restrict hs]; exact h.mono_set inter_subset_left\n\n"}
{"name":"MeasureTheory.IntegrableOn.inter_of_restrict","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns t : Set α\nμ : MeasureTheory.Measure α\nh : MeasureTheory.IntegrableOn f s (μ.restrict t)\n⊢ MeasureTheory.IntegrableOn f (Inter.inter s t) μ","decl":"theorem IntegrableOn.inter_of_restrict (h : IntegrableOn f s (μ.restrict t)) :\n    IntegrableOn f (s ∩ t) μ := by\n  have := h.mono_set (inter_subset_left (t := t))\n  rwa [IntegrableOn, μ.restrict_restrict_of_subset inter_subset_right] at this\n\n"}
{"name":"MeasureTheory.Integrable.piecewise","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝² : MeasurableSpace α\ninst✝¹ : NormedAddCommGroup E\nf g : α → E\ns : Set α\nμ : MeasureTheory.Measure α\ninst✝ : DecidablePred fun x => Membership.mem s x\nhs : MeasurableSet s\nhf : MeasureTheory.IntegrableOn f s μ\nhg : MeasureTheory.IntegrableOn g (HasCompl.compl s) μ\n⊢ MeasureTheory.Integrable (s.piecewise f g) μ","decl":"lemma Integrable.piecewise [DecidablePred (· ∈ s)]\n    (hs : MeasurableSet s) (hf : IntegrableOn f s μ) (hg : IntegrableOn g sᶜ μ) :\n    Integrable (s.piecewise f g) μ := by\n  rw [IntegrableOn] at hf hg\n  rw [← memℒp_one_iff_integrable] at hf hg ⊢\n  exact Memℒp.piecewise hs hf hg\n\n"}
{"name":"MeasureTheory.IntegrableOn.left_of_union","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns t : Set α\nμ : MeasureTheory.Measure α\nh : MeasureTheory.IntegrableOn f (Union.union s t) μ\n⊢ MeasureTheory.IntegrableOn f s μ","decl":"theorem IntegrableOn.left_of_union (h : IntegrableOn f (s ∪ t) μ) : IntegrableOn f s μ :=\n  h.mono_set subset_union_left\n\n"}
{"name":"MeasureTheory.IntegrableOn.right_of_union","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns t : Set α\nμ : MeasureTheory.Measure α\nh : MeasureTheory.IntegrableOn f (Union.union s t) μ\n⊢ MeasureTheory.IntegrableOn f t μ","decl":"theorem IntegrableOn.right_of_union (h : IntegrableOn f (s ∪ t) μ) : IntegrableOn f t μ :=\n  h.mono_set subset_union_right\n\n"}
{"name":"MeasureTheory.IntegrableOn.union","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns t : Set α\nμ : MeasureTheory.Measure α\nhs : MeasureTheory.IntegrableOn f s μ\nht : MeasureTheory.IntegrableOn f t μ\n⊢ MeasureTheory.IntegrableOn f (Union.union s t) μ","decl":"theorem IntegrableOn.union (hs : IntegrableOn f s μ) (ht : IntegrableOn f t μ) :\n    IntegrableOn f (s ∪ t) μ :=\n  (hs.add_measure ht).mono_measure <| Measure.restrict_union_le _ _\n\n"}
{"name":"MeasureTheory.integrableOn_union","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns t : Set α\nμ : MeasureTheory.Measure α\n⊢ Iff (MeasureTheory.IntegrableOn f (Union.union s t) μ) (And (MeasureTheory.IntegrableOn f s μ) (MeasureTheory.IntegrableOn f t μ))","decl":"@[simp]\ntheorem integrableOn_union : IntegrableOn f (s ∪ t) μ ↔ IntegrableOn f s μ ∧ IntegrableOn f t μ :=\n  ⟨fun h => ⟨h.left_of_union, h.right_of_union⟩, fun h => h.1.union h.2⟩\n\n"}
{"name":"MeasureTheory.integrableOn_singleton_iff","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝² : MeasurableSpace α\ninst✝¹ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\nx : α\ninst✝ : MeasurableSingletonClass α\n⊢ Iff (MeasureTheory.IntegrableOn f (Singleton.singleton x) μ) (Or (Eq (f x) 0) (LT.lt (μ (Singleton.singleton x)) Top.top))","decl":"@[simp]\ntheorem integrableOn_singleton_iff {x : α} [MeasurableSingletonClass α] :\n    IntegrableOn f {x} μ ↔ f x = 0 ∨ μ {x} < ∞ := by\n  have : f =ᵐ[μ.restrict {x}] fun _ => f x := by\n    filter_upwards [ae_restrict_mem (measurableSet_singleton x)] with _ ha\n    simp only [mem_singleton_iff.1 ha]\n  rw [IntegrableOn, integrable_congr this, integrable_const_iff, isFiniteMeasure_restrict,\n    lt_top_iff_ne_top]\n\n"}
{"name":"MeasureTheory.integrableOn_finite_biUnion","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\ns : Set β\nhs : s.Finite\nt : β → Set α\n⊢ Iff (MeasureTheory.IntegrableOn f (Set.iUnion fun i => Set.iUnion fun h => t i) μ) (∀ (i : β), Membership.mem s i → MeasureTheory.IntegrableOn f (t i) μ)","decl":"@[simp]\ntheorem integrableOn_finite_biUnion {s : Set β} (hs : s.Finite) {t : β → Set α} :\n    IntegrableOn f (⋃ i ∈ s, t i) μ ↔ ∀ i ∈ s, IntegrableOn f (t i) μ :=\n  hs.induction_on _ (by simp) <| by intro a s _ _ hf; simp [hf, or_imp, forall_and]\n\n"}
{"name":"MeasureTheory.integrableOn_finset_iUnion","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\ns : Finset β\nt : β → Set α\n⊢ Iff (MeasureTheory.IntegrableOn f (Set.iUnion fun i => Set.iUnion fun h => t i) μ) (∀ (i : β), Membership.mem s i → MeasureTheory.IntegrableOn f (t i) μ)","decl":"@[simp]\ntheorem integrableOn_finset_iUnion {s : Finset β} {t : β → Set α} :\n    IntegrableOn f (⋃ i ∈ s, t i) μ ↔ ∀ i ∈ s, IntegrableOn f (t i) μ :=\n  integrableOn_finite_biUnion s.finite_toSet\n\n"}
{"name":"MeasureTheory.integrableOn_finite_iUnion","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_4\ninst✝² : MeasurableSpace α\ninst✝¹ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\ninst✝ : Finite β\nt : β → Set α\n⊢ Iff (MeasureTheory.IntegrableOn f (Set.iUnion fun i => t i) μ) (∀ (i : β), MeasureTheory.IntegrableOn f (t i) μ)","decl":"@[simp]\ntheorem integrableOn_finite_iUnion [Finite β] {t : β → Set α} :\n    IntegrableOn f (⋃ i, t i) μ ↔ ∀ i, IntegrableOn f (t i) μ := by\n  cases nonempty_fintype β\n  simpa using @integrableOn_finset_iUnion _ _ _ _ _ f μ Finset.univ t\n\n"}
{"name":"MeasureTheory.IntegrableOn.finset","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝³ : MeasurableSpace α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : MeasurableSingletonClass α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsFiniteMeasure μ\ns : Finset α\nf : α → E\n⊢ MeasureTheory.IntegrableOn f (↑s) μ","decl":"lemma IntegrableOn.finset [MeasurableSingletonClass α] {μ : Measure α} [IsFiniteMeasure μ]\n    {s : Finset α} {f : α → E} : IntegrableOn f s μ := by\n  rw [← s.toSet.biUnion_of_singleton]\n  simp [integrableOn_finset_iUnion, measure_lt_top]\n\n"}
{"name":"MeasureTheory.IntegrableOn.of_finite","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝³ : MeasurableSpace α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : MeasurableSingletonClass α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsFiniteMeasure μ\ns : Set α\nhs : s.Finite\nf : α → E\n⊢ MeasureTheory.IntegrableOn f s μ","decl":"lemma IntegrableOn.of_finite [MeasurableSingletonClass α] {μ : Measure α} [IsFiniteMeasure μ]\n    {s : Set α} (hs : s.Finite) {f : α → E} : IntegrableOn f s μ := by\n  simpa using IntegrableOn.finset (s := hs.toFinset)\n\n"}
{"name":"MeasureTheory.IntegrableOn.add_measure","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns : Set α\nμ ν : MeasureTheory.Measure α\nhμ : MeasureTheory.IntegrableOn f s μ\nhν : MeasureTheory.IntegrableOn f s ν\n⊢ MeasureTheory.IntegrableOn f s (HAdd.hAdd μ ν)","decl":"theorem IntegrableOn.add_measure (hμ : IntegrableOn f s μ) (hν : IntegrableOn f s ν) :\n    IntegrableOn f s (μ + ν) := by\n  delta IntegrableOn; rw [Measure.restrict_add]; exact hμ.integrable.add_measure hν\n\n"}
{"name":"MeasureTheory.integrableOn_add_measure","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns : Set α\nμ ν : MeasureTheory.Measure α\n⊢ Iff (MeasureTheory.IntegrableOn f s (HAdd.hAdd μ ν)) (And (MeasureTheory.IntegrableOn f s μ) (MeasureTheory.IntegrableOn f s ν))","decl":"@[simp]\ntheorem integrableOn_add_measure :\n    IntegrableOn f s (μ + ν) ↔ IntegrableOn f s μ ∧ IntegrableOn f s ν :=\n  ⟨fun h =>\n    ⟨h.mono_measure (Measure.le_add_right le_rfl), h.mono_measure (Measure.le_add_left le_rfl)⟩,\n    fun h => h.1.add_measure h.2⟩\n\n"}
{"name":"MeasurableEmbedding.integrableOn_map_iff","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_4\ninst✝² : MeasurableSpace α\ninst✝¹ : NormedAddCommGroup E\ninst✝ : MeasurableSpace β\ne : α → β\nhe : MeasurableEmbedding e\nf : β → E\nμ : MeasureTheory.Measure α\ns : Set β\n⊢ Iff (MeasureTheory.IntegrableOn f s (MeasureTheory.Measure.map e μ)) (MeasureTheory.IntegrableOn (Function.comp f e) (Set.preimage e s) μ)","decl":"theorem _root_.MeasurableEmbedding.integrableOn_map_iff [MeasurableSpace β] {e : α → β}\n    (he : MeasurableEmbedding e) {f : β → E} {μ : Measure α} {s : Set β} :\n    IntegrableOn f s (μ.map e) ↔ IntegrableOn (f ∘ e) (e ⁻¹' s) μ := by\n  simp_rw [IntegrableOn, he.restrict_map, he.integrable_map_iff]\n\n"}
{"name":"MeasurableEmbedding.integrableOn_iff_comap","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_4\ninst✝² : MeasurableSpace α\ninst✝¹ : NormedAddCommGroup E\ninst✝ : MeasurableSpace β\ne : α → β\nhe : MeasurableEmbedding e\nf : β → E\nμ : MeasureTheory.Measure β\ns : Set β\nhs : HasSubset.Subset s (Set.range e)\n⊢ Iff (MeasureTheory.IntegrableOn f s μ) (MeasureTheory.IntegrableOn (Function.comp f e) (Set.preimage e s) (MeasureTheory.Measure.comap e μ))","decl":"theorem _root_.MeasurableEmbedding.integrableOn_iff_comap [MeasurableSpace β] {e : α → β}\n    (he : MeasurableEmbedding e) {f : β → E} {μ : Measure β} {s : Set β} (hs : s ⊆ range e) :\n    IntegrableOn f s μ ↔ IntegrableOn (f ∘ e) (e ⁻¹' s) (μ.comap e) := by\n  simp_rw [← he.integrableOn_map_iff, he.map_comap, IntegrableOn,\n    Measure.restrict_restrict_of_subset hs]\n\n"}
{"name":"MeasureTheory.integrableOn_map_equiv","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_4\ninst✝² : MeasurableSpace α\ninst✝¹ : NormedAddCommGroup E\ninst✝ : MeasurableSpace β\ne : MeasurableEquiv α β\nf : β → E\nμ : MeasureTheory.Measure α\ns : Set β\n⊢ Iff (MeasureTheory.IntegrableOn f s (MeasureTheory.Measure.map (⇑e) μ)) (MeasureTheory.IntegrableOn (Function.comp f ⇑e) (Set.preimage (⇑e) s) μ)","decl":"theorem integrableOn_map_equiv [MeasurableSpace β] (e : α ≃ᵐ β) {f : β → E} {μ : Measure α}\n    {s : Set β} : IntegrableOn f s (μ.map e) ↔ IntegrableOn (f ∘ e) (e ⁻¹' s) μ := by\n  simp only [IntegrableOn, e.restrict_map, integrable_map_equiv e]\n\n"}
{"name":"MeasureTheory.MeasurePreserving.integrableOn_comp_preimage","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_4\ninst✝² : MeasurableSpace α\ninst✝¹ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\ninst✝ : MeasurableSpace β\ne : α → β\nν : MeasureTheory.Measure β\nh₁ : MeasureTheory.MeasurePreserving e μ ν\nh₂ : MeasurableEmbedding e\nf : β → E\ns : Set β\n⊢ Iff (MeasureTheory.IntegrableOn (Function.comp f e) (Set.preimage e s) μ) (MeasureTheory.IntegrableOn f s ν)","decl":"theorem MeasurePreserving.integrableOn_comp_preimage [MeasurableSpace β] {e : α → β} {ν}\n    (h₁ : MeasurePreserving e μ ν) (h₂ : MeasurableEmbedding e) {f : β → E} {s : Set β} :\n    IntegrableOn (f ∘ e) (e ⁻¹' s) μ ↔ IntegrableOn f s ν :=\n  (h₁.restrict_preimage_emb h₂ s).integrable_comp_emb h₂\n\n"}
{"name":"MeasureTheory.MeasurePreserving.integrableOn_image","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_4\ninst✝² : MeasurableSpace α\ninst✝¹ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\ninst✝ : MeasurableSpace β\ne : α → β\nν : MeasureTheory.Measure β\nh₁ : MeasureTheory.MeasurePreserving e μ ν\nh₂ : MeasurableEmbedding e\nf : β → E\ns : Set α\n⊢ Iff (MeasureTheory.IntegrableOn f (Set.image e s) ν) (MeasureTheory.IntegrableOn (Function.comp f e) s μ)","decl":"theorem MeasurePreserving.integrableOn_image [MeasurableSpace β] {e : α → β} {ν}\n    (h₁ : MeasurePreserving e μ ν) (h₂ : MeasurableEmbedding e) {f : β → E} {s : Set α} :\n    IntegrableOn f (e '' s) ν ↔ IntegrableOn (f ∘ e) s μ :=\n  ((h₁.restrict_image_emb h₂ s).integrable_comp_emb h₂).symm\n\n"}
{"name":"MeasureTheory.integrable_indicator_iff","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns : Set α\nμ : MeasureTheory.Measure α\nhs : MeasurableSet s\n⊢ Iff (MeasureTheory.Integrable (s.indicator f) μ) (MeasureTheory.IntegrableOn f s μ)","decl":"theorem integrable_indicator_iff (hs : MeasurableSet s) :\n    Integrable (indicator s f) μ ↔ IntegrableOn f s μ := by\n  simp_rw [IntegrableOn, Integrable, hasFiniteIntegral_iff_enorm,\n    enorm_indicator_eq_indicator_enorm, lintegral_indicator hs,\n    aestronglyMeasurable_indicator_iff hs]\n\n"}
{"name":"MeasureTheory.IntegrableOn.integrable_indicator","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns : Set α\nμ : MeasureTheory.Measure α\nh : MeasureTheory.IntegrableOn f s μ\nhs : MeasurableSet s\n⊢ MeasureTheory.Integrable (s.indicator f) μ","decl":"theorem IntegrableOn.integrable_indicator (h : IntegrableOn f s μ) (hs : MeasurableSet s) :\n    Integrable (indicator s f) μ :=\n  (integrable_indicator_iff hs).2 h\n\n"}
{"name":"MeasureTheory.Integrable.indicator","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns : Set α\nμ : MeasureTheory.Measure α\nh : MeasureTheory.Integrable f μ\nhs : MeasurableSet s\n⊢ MeasureTheory.Integrable (s.indicator f) μ","decl":"@[fun_prop]\ntheorem Integrable.indicator (h : Integrable f μ) (hs : MeasurableSet s) :\n    Integrable (indicator s f) μ :=\n  h.integrableOn.integrable_indicator hs\n\n"}
{"name":"MeasureTheory.IntegrableOn.indicator","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns t : Set α\nμ : MeasureTheory.Measure α\nh : MeasureTheory.IntegrableOn f s μ\nht : MeasurableSet t\n⊢ MeasureTheory.IntegrableOn (t.indicator f) s μ","decl":"theorem IntegrableOn.indicator (h : IntegrableOn f s μ) (ht : MeasurableSet t) :\n    IntegrableOn (indicator t f) s μ :=\n  Integrable.indicator h ht\n\n"}
{"name":"MeasureTheory.integrable_indicatorConstLp","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nE : Type u_6\ninst✝ : NormedAddCommGroup E\np : ENNReal\ns : Set α\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nc : E\n⊢ MeasureTheory.Integrable (↑↑(MeasureTheory.indicatorConstLp p hs hμs c)) μ","decl":"theorem integrable_indicatorConstLp {E} [NormedAddCommGroup E] {p : ℝ≥0∞} {s : Set α}\n    (hs : MeasurableSet s) (hμs : μ s ≠ ∞) (c : E) :\n    Integrable (indicatorConstLp p hs hμs c) μ := by\n  rw [integrable_congr indicatorConstLp_coeFn, integrable_indicator_iff hs, IntegrableOn,\n    integrable_const_iff, isFiniteMeasure_restrict]\n  exact .inr hμs\n\n"}
{"name":"MeasureTheory.IntegrableOn.restrict_toMeasurable","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns : Set α\nμ : MeasureTheory.Measure α\nhf : MeasureTheory.IntegrableOn f s μ\nh's : ∀ (x : α), Membership.mem s x → Ne (f x) 0\n⊢ Eq (μ.restrict (MeasureTheory.toMeasurable μ s)) (μ.restrict s)","decl":"/-- If a function is integrable on a set `s` and nonzero there, then the measurable hull of `s` is\nwell behaved: the restriction of the measure to `toMeasurable μ s` coincides with its restriction\nto `s`. -/\ntheorem IntegrableOn.restrict_toMeasurable (hf : IntegrableOn f s μ) (h's : ∀ x ∈ s, f x ≠ 0) :\n    μ.restrict (toMeasurable μ s) = μ.restrict s := by\n  rcases exists_seq_strictAnti_tendsto (0 : ℝ) with ⟨u, _, u_pos, u_lim⟩\n  let v n := toMeasurable (μ.restrict s) { x | u n ≤ ‖f x‖ }\n  have A : ∀ n, μ (s ∩ v n) ≠ ∞ := by\n    intro n\n    rw [inter_comm, ← Measure.restrict_apply (measurableSet_toMeasurable _ _),\n      measure_toMeasurable]\n    exact (hf.measure_norm_ge_lt_top (u_pos n)).ne\n  apply Measure.restrict_toMeasurable_of_cover _ A\n  intro x hx\n  have : 0 < ‖f x‖ := by simp only [h's x hx, norm_pos_iff, Ne, not_false_iff]\n  obtain ⟨n, hn⟩ : ∃ n, u n < ‖f x‖ := ((tendsto_order.1 u_lim).2 _ this).exists\n  exact mem_iUnion.2 ⟨n, subset_toMeasurable _ _ hn.le⟩\n\n"}
{"name":"MeasureTheory.IntegrableOn.of_ae_diff_eq_zero","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns t : Set α\nμ : MeasureTheory.Measure α\nhf : MeasureTheory.IntegrableOn f s μ\nht : MeasureTheory.NullMeasurableSet t μ\nh't : Filter.Eventually (fun x => Membership.mem (SDiff.sdiff t s) x → Eq (f x) 0) (MeasureTheory.ae μ)\n⊢ MeasureTheory.IntegrableOn f t μ","decl":"/-- If a function is integrable on a set `s`, and vanishes on `t \\ s`, then it is integrable on `t`\nif `t` is null-measurable. -/\ntheorem IntegrableOn.of_ae_diff_eq_zero (hf : IntegrableOn f s μ) (ht : NullMeasurableSet t μ)\n    (h't : ∀ᵐ x ∂μ, x ∈ t \\ s → f x = 0) : IntegrableOn f t μ := by\n  let u := { x ∈ s | f x ≠ 0 }\n  have hu : IntegrableOn f u μ := hf.mono_set fun x hx => hx.1\n  let v := toMeasurable μ u\n  have A : IntegrableOn f v μ := by\n    rw [IntegrableOn, hu.restrict_toMeasurable]\n    · exact hu\n    · intro x hx; exact hx.2\n  have B : IntegrableOn f (t \\ v) μ := by\n    apply integrableOn_zero.congr\n    filter_upwards [ae_restrict_of_ae h't,\n      ae_restrict_mem₀ (ht.diff (measurableSet_toMeasurable μ u).nullMeasurableSet)] with x hxt hx\n    by_cases h'x : x ∈ s\n    · by_contra H\n      exact hx.2 (subset_toMeasurable μ u ⟨h'x, Ne.symm H⟩)\n    · exact (hxt ⟨hx.1, h'x⟩).symm\n  apply (A.union B).mono_set _\n  rw [union_diff_self]\n  exact subset_union_right\n\n"}
{"name":"MeasureTheory.IntegrableOn.of_forall_diff_eq_zero","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns t : Set α\nμ : MeasureTheory.Measure α\nhf : MeasureTheory.IntegrableOn f s μ\nht : MeasurableSet t\nh't : ∀ (x : α), Membership.mem (SDiff.sdiff t s) x → Eq (f x) 0\n⊢ MeasureTheory.IntegrableOn f t μ","decl":"/-- If a function is integrable on a set `s`, and vanishes on `t \\ s`, then it is integrable on `t`\nif `t` is measurable. -/\ntheorem IntegrableOn.of_forall_diff_eq_zero (hf : IntegrableOn f s μ) (ht : MeasurableSet t)\n    (h't : ∀ x ∈ t \\ s, f x = 0) : IntegrableOn f t μ :=\n  hf.of_ae_diff_eq_zero ht.nullMeasurableSet (Eventually.of_forall h't)\n\n"}
{"name":"MeasureTheory.IntegrableOn.integrable_of_ae_not_mem_eq_zero","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns : Set α\nμ : MeasureTheory.Measure α\nhf : MeasureTheory.IntegrableOn f s μ\nh't : Filter.Eventually (fun x => Not (Membership.mem s x) → Eq (f x) 0) (MeasureTheory.ae μ)\n⊢ MeasureTheory.Integrable f μ","decl":"/-- If a function is integrable on a set `s` and vanishes almost everywhere on its complement,\nthen it is integrable. -/\ntheorem IntegrableOn.integrable_of_ae_not_mem_eq_zero (hf : IntegrableOn f s μ)\n    (h't : ∀ᵐ x ∂μ, x ∉ s → f x = 0) : Integrable f μ := by\n  rw [← integrableOn_univ]\n  apply hf.of_ae_diff_eq_zero nullMeasurableSet_univ\n  filter_upwards [h't] with x hx h'x using hx h'x.2\n\n"}
{"name":"MeasureTheory.IntegrableOn.integrable_of_forall_not_mem_eq_zero","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns : Set α\nμ : MeasureTheory.Measure α\nhf : MeasureTheory.IntegrableOn f s μ\nh't : ∀ (x : α), Not (Membership.mem s x) → Eq (f x) 0\n⊢ MeasureTheory.Integrable f μ","decl":"/-- If a function is integrable on a set `s` and vanishes everywhere on its complement,\nthen it is integrable. -/\ntheorem IntegrableOn.integrable_of_forall_not_mem_eq_zero (hf : IntegrableOn f s μ)\n    (h't : ∀ x, x ∉ s → f x = 0) : Integrable f μ :=\n  hf.integrable_of_ae_not_mem_eq_zero (Eventually.of_forall fun x hx => h't x hx)\n\n"}
{"name":"MeasureTheory.integrableOn_iff_integrable_of_support_subset","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns : Set α\nμ : MeasureTheory.Measure α\nh1s : HasSubset.Subset (Function.support f) s\n⊢ Iff (MeasureTheory.IntegrableOn f s μ) (MeasureTheory.Integrable f μ)","decl":"theorem integrableOn_iff_integrable_of_support_subset (h1s : support f ⊆ s) :\n    IntegrableOn f s μ ↔ Integrable f μ := by\n  refine ⟨fun h => ?_, fun h => h.integrableOn⟩\n  refine h.integrable_of_forall_not_mem_eq_zero fun x hx => ?_\n  contrapose! hx\n  exact h1s (mem_support.2 hx)\n\n"}
{"name":"MeasureTheory.integrableOn_Lp_of_measure_ne_top","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nE : Type u_6\ninst✝ : NormedAddCommGroup E\np : ENNReal\ns : Set α\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\nhp : LE.le 1 p\nhμs : Ne (μ s) Top.top\n⊢ MeasureTheory.IntegrableOn (↑↑f) s μ","decl":"theorem integrableOn_Lp_of_measure_ne_top {E} [NormedAddCommGroup E] {p : ℝ≥0∞} {s : Set α}\n    (f : Lp E p μ) (hp : 1 ≤ p) (hμs : μ s ≠ ∞) : IntegrableOn f s μ := by\n  refine memℒp_one_iff_integrable.mp ?_\n  have hμ_restrict_univ : (μ.restrict s) Set.univ < ∞ := by\n    simpa only [Set.univ_inter, MeasurableSet.univ, Measure.restrict_apply, lt_top_iff_ne_top]\n  haveI hμ_finite : IsFiniteMeasure (μ.restrict s) := ⟨hμ_restrict_univ⟩\n  exact ((Lp.memℒp _).restrict s).mono_exponent hp\n\n"}
{"name":"MeasureTheory.Integrable.lintegral_lt_top","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → Real\nhf : MeasureTheory.Integrable f μ\n⊢ LT.lt (MeasureTheory.lintegral μ fun x => ENNReal.ofReal (f x)) Top.top","decl":"theorem Integrable.lintegral_lt_top {f : α → ℝ} (hf : Integrable f μ) :\n    (∫⁻ x, ENNReal.ofReal (f x) ∂μ) < ∞ :=\n  calc\n    (∫⁻ x, ENNReal.ofReal (f x) ∂μ) ≤ ∫⁻ x, ↑‖f x‖₊ ∂μ := lintegral_ofReal_le_lintegral_enorm f\n    _ < ∞ := hf.2\n\n"}
{"name":"MeasureTheory.IntegrableOn.setLIntegral_lt_top","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → Real\ns : Set α\nhf : MeasureTheory.IntegrableOn f s μ\n⊢ LT.lt (MeasureTheory.lintegral (μ.restrict s) fun x => ENNReal.ofReal (f x)) Top.top","decl":"theorem IntegrableOn.setLIntegral_lt_top {f : α → ℝ} {s : Set α} (hf : IntegrableOn f s μ) :\n    (∫⁻ x in s, ENNReal.ofReal (f x) ∂μ) < ∞ :=\n  Integrable.lintegral_lt_top hf\n\n"}
{"name":"MeasurableEmbedding.integrableAtFilter_map_iff","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_4\ninst✝² : MeasurableSpace α\ninst✝¹ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\nl : Filter α\ninst✝ : MeasurableSpace β\ne : α → β\nhe : MeasurableEmbedding e\nf : β → E\n⊢ Iff (MeasureTheory.IntegrableAtFilter f (Filter.map e l) (MeasureTheory.Measure.map e μ)) (MeasureTheory.IntegrableAtFilter (Function.comp f e) l μ)","decl":"theorem _root_.MeasurableEmbedding.integrableAtFilter_map_iff [MeasurableSpace β] {e : α → β}\n    (he : MeasurableEmbedding e) {f : β → E} :\n    IntegrableAtFilter f (l.map e) (μ.map e) ↔ IntegrableAtFilter (f ∘ e) l μ := by\n  simp_rw [IntegrableAtFilter, he.integrableOn_map_iff]\n  constructor <;> rintro ⟨s, hs⟩\n  · exact ⟨_, hs⟩\n  · exact ⟨e '' s, by rwa [mem_map, he.injective.preimage_image]⟩\n\n"}
{"name":"MeasurableEmbedding.integrableAtFilter_iff_comap","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_4\ninst✝² : MeasurableSpace α\ninst✝¹ : NormedAddCommGroup E\nl : Filter α\ninst✝ : MeasurableSpace β\ne : α → β\nhe : MeasurableEmbedding e\nf : β → E\nμ : MeasureTheory.Measure β\n⊢ Iff (MeasureTheory.IntegrableAtFilter f (Filter.map e l) μ) (MeasureTheory.IntegrableAtFilter (Function.comp f e) l (MeasureTheory.Measure.comap e μ))","decl":"theorem _root_.MeasurableEmbedding.integrableAtFilter_iff_comap [MeasurableSpace β] {e : α → β}\n    (he : MeasurableEmbedding e) {f : β → E} {μ : Measure β} :\n    IntegrableAtFilter f (l.map e) μ ↔ IntegrableAtFilter (f ∘ e) l (μ.comap e) := by\n  simp_rw [← he.integrableAtFilter_map_iff, IntegrableAtFilter, he.map_comap]\n  constructor <;> rintro ⟨s, hs, int⟩\n  · exact ⟨s, hs, int.mono_measure <| μ.restrict_le_self⟩\n  · exact ⟨_, inter_mem hs range_mem_map, int.inter_of_restrict⟩\n\n"}
{"name":"MeasureTheory.Integrable.integrableAtFilter","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\nh : MeasureTheory.Integrable f μ\nl : Filter α\n⊢ MeasureTheory.IntegrableAtFilter f l μ","decl":"theorem Integrable.integrableAtFilter (h : Integrable f μ) (l : Filter α) :\n    IntegrableAtFilter f l μ :=\n  ⟨univ, Filter.univ_mem, integrableOn_univ.2 h⟩\n\n"}
{"name":"MeasureTheory.IntegrableAtFilter.eventually","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\nl : Filter α\nh : MeasureTheory.IntegrableAtFilter f l μ\n⊢ Filter.Eventually (fun s => MeasureTheory.IntegrableOn f s μ) l.smallSets","decl":"protected theorem IntegrableAtFilter.eventually (h : IntegrableAtFilter f l μ) :\n    ∀ᶠ s in l.smallSets, IntegrableOn f s μ :=\n  Iff.mpr (eventually_smallSets' fun _s _t hst ht => ht.mono_set hst) h\n\n"}
{"name":"MeasureTheory.integrableAtFilter_atBot_iff","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\ninst✝² : Preorder α\ninst✝¹ : IsDirected α fun x1 x2 => GE.ge x1 x2\ninst✝ : Nonempty α\n⊢ Iff (MeasureTheory.IntegrableAtFilter f Filter.atBot μ) (Exists fun a => MeasureTheory.IntegrableOn f (Set.Iic a) μ)","decl":"theorem integrableAtFilter_atBot_iff [Preorder α] [IsDirected α fun (x1 x2 : α) => x1 ≥ x2]\n    [Nonempty α] :\n    IntegrableAtFilter f atBot μ ↔ ∃ a, IntegrableOn f (Iic a) μ := by\n  refine ⟨fun ⟨s, hs, hi⟩ ↦ ?_, fun ⟨a, ha⟩ ↦ ⟨Iic a, Iic_mem_atBot a, ha⟩⟩\n  obtain ⟨t, ht⟩ := mem_atBot_sets.mp hs\n  exact ⟨t, hi.mono_set fun _ hx ↦ ht _ hx⟩\n\n"}
{"name":"MeasureTheory.integrableAtFilter_atTop_iff","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\ninst✝² : Preorder α\ninst✝¹ : IsDirected α fun x1 x2 => LE.le x1 x2\ninst✝ : Nonempty α\n⊢ Iff (MeasureTheory.IntegrableAtFilter f Filter.atTop μ) (Exists fun a => MeasureTheory.IntegrableOn f (Set.Ici a) μ)","decl":"theorem integrableAtFilter_atTop_iff [Preorder α] [IsDirected α fun (x1 x2 : α) => x1 ≤ x2]\n    [Nonempty α] :\n    IntegrableAtFilter f atTop μ ↔ ∃ a, IntegrableOn f (Ici a) μ :=\n  integrableAtFilter_atBot_iff (α := αᵒᵈ)\n\n"}
{"name":"MeasureTheory.IntegrableAtFilter.add","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\nl : Filter α\nf g : α → E\nhf : MeasureTheory.IntegrableAtFilter f l μ\nhg : MeasureTheory.IntegrableAtFilter g l μ\n⊢ MeasureTheory.IntegrableAtFilter (HAdd.hAdd f g) l μ","decl":"protected theorem IntegrableAtFilter.add {f g : α → E}\n    (hf : IntegrableAtFilter f l μ) (hg : IntegrableAtFilter g l μ) :\n    IntegrableAtFilter (f + g) l μ := by\n  rcases hf with ⟨s, sl, hs⟩\n  rcases hg with ⟨t, tl, ht⟩\n  refine ⟨s ∩ t, inter_mem sl tl, ?_⟩\n  exact (hs.mono_set inter_subset_left).add (ht.mono_set inter_subset_right)\n\n"}
{"name":"MeasureTheory.IntegrableAtFilter.neg","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\nl : Filter α\nf : α → E\nhf : MeasureTheory.IntegrableAtFilter f l μ\n⊢ MeasureTheory.IntegrableAtFilter (Neg.neg f) l μ","decl":"protected theorem IntegrableAtFilter.neg {f : α → E} (hf : IntegrableAtFilter f l μ) :\n    IntegrableAtFilter (-f) l μ := by\n  rcases hf with ⟨s, sl, hs⟩\n  exact ⟨s, sl, hs.neg⟩\n\n"}
{"name":"MeasureTheory.IntegrableAtFilter.sub","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\nl : Filter α\nf g : α → E\nhf : MeasureTheory.IntegrableAtFilter f l μ\nhg : MeasureTheory.IntegrableAtFilter g l μ\n⊢ MeasureTheory.IntegrableAtFilter (HSub.hSub f g) l μ","decl":"protected theorem IntegrableAtFilter.sub {f g : α → E}\n    (hf : IntegrableAtFilter f l μ) (hg : IntegrableAtFilter g l μ) :\n    IntegrableAtFilter (f - g) l μ := by\n  rw [sub_eq_add_neg]\n  exact hf.add hg.neg\n\n"}
{"name":"MeasureTheory.IntegrableAtFilter.smul","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\nl : Filter α\n𝕜 : Type u_6\ninst✝² : NormedAddCommGroup 𝕜\ninst✝¹ : SMulZeroClass 𝕜 E\ninst✝ : BoundedSMul 𝕜 E\nf : α → E\nhf : MeasureTheory.IntegrableAtFilter f l μ\nc : 𝕜\n⊢ MeasureTheory.IntegrableAtFilter (HSMul.hSMul c f) l μ","decl":"protected theorem IntegrableAtFilter.smul {𝕜 : Type*} [NormedAddCommGroup 𝕜] [SMulZeroClass 𝕜 E]\n    [BoundedSMul 𝕜 E] {f : α → E} (hf : IntegrableAtFilter f l μ) (c : 𝕜) :\n    IntegrableAtFilter (c • f) l μ := by\n  rcases hf with ⟨s, sl, hs⟩\n  exact ⟨s, sl, hs.smul c⟩\n\n"}
{"name":"MeasureTheory.IntegrableAtFilter.norm","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\nl : Filter α\nhf : MeasureTheory.IntegrableAtFilter f l μ\n⊢ MeasureTheory.IntegrableAtFilter (fun x => Norm.norm (f x)) l μ","decl":"protected theorem IntegrableAtFilter.norm (hf : IntegrableAtFilter f l μ) :\n    IntegrableAtFilter (fun x => ‖f x‖) l μ :=\n  Exists.casesOn hf fun s hs ↦ ⟨s, hs.1, hs.2.norm⟩\n\n"}
{"name":"MeasureTheory.IntegrableAtFilter.filter_mono","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\nl l' : Filter α\nhl : LE.le l l'\nhl' : MeasureTheory.IntegrableAtFilter f l' μ\n⊢ MeasureTheory.IntegrableAtFilter f l μ","decl":"theorem IntegrableAtFilter.filter_mono (hl : l ≤ l') (hl' : IntegrableAtFilter f l' μ) :\n    IntegrableAtFilter f l μ :=\n  let ⟨s, hs, hsf⟩ := hl'\n  ⟨s, hl hs, hsf⟩\n\n"}
{"name":"MeasureTheory.IntegrableAtFilter.inf_of_left","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\nl l' : Filter α\nhl : MeasureTheory.IntegrableAtFilter f l μ\n⊢ MeasureTheory.IntegrableAtFilter f (Min.min l l') μ","decl":"theorem IntegrableAtFilter.inf_of_left (hl : IntegrableAtFilter f l μ) :\n    IntegrableAtFilter f (l ⊓ l') μ :=\n  hl.filter_mono inf_le_left\n\n"}
{"name":"MeasureTheory.IntegrableAtFilter.inf_of_right","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\nl l' : Filter α\nhl : MeasureTheory.IntegrableAtFilter f l μ\n⊢ MeasureTheory.IntegrableAtFilter f (Min.min l' l) μ","decl":"theorem IntegrableAtFilter.inf_of_right (hl : IntegrableAtFilter f l μ) :\n    IntegrableAtFilter f (l' ⊓ l) μ :=\n  hl.filter_mono inf_le_right\n\n"}
{"name":"MeasureTheory.IntegrableAtFilter.inf_ae_iff","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\nl : Filter α\n⊢ Iff (MeasureTheory.IntegrableAtFilter f (Min.min l (MeasureTheory.ae μ)) μ) (MeasureTheory.IntegrableAtFilter f l μ)","decl":"@[simp]\ntheorem IntegrableAtFilter.inf_ae_iff {l : Filter α} :\n    IntegrableAtFilter f (l ⊓ ae μ) μ ↔ IntegrableAtFilter f l μ := by\n  refine ⟨?_, fun h ↦ h.filter_mono inf_le_left⟩\n  rintro ⟨s, ⟨t, ht, u, hu, rfl⟩, hf⟩\n  refine ⟨t, ht, hf.congr_set_ae <| eventuallyEq_set.2 ?_⟩\n  filter_upwards [hu] with x hx using (and_iff_left hx).symm\n\n"}
{"name":"MeasureTheory.IntegrableAtFilter.of_inf_ae","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\nl : Filter α\na✝ : MeasureTheory.IntegrableAtFilter f (Min.min l (MeasureTheory.ae μ)) μ\n⊢ MeasureTheory.IntegrableAtFilter f l μ","decl":"alias ⟨IntegrableAtFilter.of_inf_ae, _⟩ := IntegrableAtFilter.inf_ae_iff\n\n"}
{"name":"MeasureTheory.integrableAtFilter_top","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\n⊢ Iff (MeasureTheory.IntegrableAtFilter f Top.top μ) (MeasureTheory.Integrable f μ)","decl":"@[simp]\ntheorem integrableAtFilter_top : IntegrableAtFilter f ⊤ μ ↔ Integrable f μ := by\n  refine ⟨fun h ↦ ?_, fun h ↦ h.integrableAtFilter ⊤⟩\n  obtain ⟨s, hsf, hs⟩ := h\n  exact (integrableOn_iff_integrable_of_support_subset fun _ _ ↦ hsf _).mp hs\n\n"}
{"name":"MeasureTheory.IntegrableAtFilter.sup_iff","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\nl l' : Filter α\n⊢ Iff (MeasureTheory.IntegrableAtFilter f (Max.max l l') μ) (And (MeasureTheory.IntegrableAtFilter f l μ) (MeasureTheory.IntegrableAtFilter f l' μ))","decl":"theorem IntegrableAtFilter.sup_iff {l l' : Filter α} :\n    IntegrableAtFilter f (l ⊔ l') μ ↔ IntegrableAtFilter f l μ ∧ IntegrableAtFilter f l' μ := by\n  constructor\n  · exact fun h => ⟨h.filter_mono le_sup_left, h.filter_mono le_sup_right⟩\n  · exact fun ⟨⟨s, hsl, hs⟩, ⟨t, htl, ht⟩⟩ ↦ ⟨s ∪ t, union_mem_sup hsl htl, hs.union ht⟩\n\n"}
{"name":"MeasureTheory.Measure.FiniteAtFilter.integrableAtFilter","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝² : MeasurableSpace α\ninst✝¹ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\nl : Filter α\ninst✝ : l.IsMeasurablyGenerated\nhfm : StronglyMeasurableAtFilter f l μ\nhμ : μ.FiniteAtFilter l\nhf : Filter.IsBoundedUnder (fun x1 x2 => LE.le x1 x2) l (Function.comp Norm.norm f)\n⊢ MeasureTheory.IntegrableAtFilter f l μ","decl":"/-- If `μ` is a measure finite at filter `l` and `f` is a function such that its norm is bounded\nabove at `l`, then `f` is integrable at `l`. -/\ntheorem Measure.FiniteAtFilter.integrableAtFilter {l : Filter α} [IsMeasurablyGenerated l]\n    (hfm : StronglyMeasurableAtFilter f l μ) (hμ : μ.FiniteAtFilter l)\n    (hf : l.IsBoundedUnder (· ≤ ·) (norm ∘ f)) : IntegrableAtFilter f l μ := by\n  obtain ⟨C, hC⟩ : ∃ C, ∀ᶠ s in l.smallSets, ∀ x ∈ s, ‖f x‖ ≤ C :=\n    hf.imp fun C hC => eventually_smallSets.2 ⟨_, hC, fun t => id⟩\n  rcases (hfm.eventually.and (hμ.eventually.and hC)).exists_measurable_mem_of_smallSets with\n    ⟨s, hsl, hsm, hfm, hμ, hC⟩\n  refine ⟨s, hsl, ⟨hfm, hasFiniteIntegral_restrict_of_bounded hμ (C := C) ?_⟩⟩\n  rw [ae_restrict_eq hsm, eventually_inf_principal]\n  exact Eventually.of_forall hC\n\n"}
{"name":"MeasureTheory.Measure.FiniteAtFilter.integrableAtFilter_of_tendsto_ae","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝² : MeasurableSpace α\ninst✝¹ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\nl : Filter α\ninst✝ : l.IsMeasurablyGenerated\nhfm : StronglyMeasurableAtFilter f l μ\nhμ : μ.FiniteAtFilter l\nb : E\nhf : Filter.Tendsto f (Min.min l (MeasureTheory.ae μ)) (nhds b)\n⊢ MeasureTheory.IntegrableAtFilter f l μ","decl":"theorem Measure.FiniteAtFilter.integrableAtFilter_of_tendsto_ae {l : Filter α}\n    [IsMeasurablyGenerated l] (hfm : StronglyMeasurableAtFilter f l μ) (hμ : μ.FiniteAtFilter l) {b}\n    (hf : Tendsto f (l ⊓ ae μ) (𝓝 b)) : IntegrableAtFilter f l μ :=\n  (hμ.inf_of_left.integrableAtFilter (hfm.filter_mono inf_le_left)\n      hf.norm.isBoundedUnder_le).of_inf_ae\n\n"}
{"name":"Filter.Tendsto.integrableAtFilter_ae","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝² : MeasurableSpace α\ninst✝¹ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\nl : Filter α\ninst✝ : l.IsMeasurablyGenerated\nhfm : StronglyMeasurableAtFilter f l μ\nhμ : μ.FiniteAtFilter l\nb : E\nhf : Filter.Tendsto f (Min.min l (MeasureTheory.ae μ)) (nhds b)\n⊢ MeasureTheory.IntegrableAtFilter f l μ","decl":"alias _root_.Filter.Tendsto.integrableAtFilter_ae :=\n  Measure.FiniteAtFilter.integrableAtFilter_of_tendsto_ae\n\n"}
{"name":"MeasureTheory.Measure.FiniteAtFilter.integrableAtFilter_of_tendsto","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝² : MeasurableSpace α\ninst✝¹ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\nl : Filter α\ninst✝ : l.IsMeasurablyGenerated\nhfm : StronglyMeasurableAtFilter f l μ\nhμ : μ.FiniteAtFilter l\nb : E\nhf : Filter.Tendsto f l (nhds b)\n⊢ MeasureTheory.IntegrableAtFilter f l μ","decl":"theorem Measure.FiniteAtFilter.integrableAtFilter_of_tendsto {l : Filter α}\n    [IsMeasurablyGenerated l] (hfm : StronglyMeasurableAtFilter f l μ) (hμ : μ.FiniteAtFilter l) {b}\n    (hf : Tendsto f l (𝓝 b)) : IntegrableAtFilter f l μ :=\n  hμ.integrableAtFilter hfm hf.norm.isBoundedUnder_le\n\n"}
{"name":"Filter.Tendsto.integrableAtFilter","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝² : MeasurableSpace α\ninst✝¹ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\nl : Filter α\ninst✝ : l.IsMeasurablyGenerated\nhfm : StronglyMeasurableAtFilter f l μ\nhμ : μ.FiniteAtFilter l\nb : E\nhf : Filter.Tendsto f l (nhds b)\n⊢ MeasureTheory.IntegrableAtFilter f l μ","decl":"alias _root_.Filter.Tendsto.integrableAtFilter :=\n  Measure.FiniteAtFilter.integrableAtFilter_of_tendsto\n\n"}
{"name":"MeasureTheory.Measure.integrableOn_of_bounded","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\ns : Set α\nμ : MeasureTheory.Measure α\ns_finite : Ne (μ s) Top.top\nf_mble : MeasureTheory.AEStronglyMeasurable f μ\nM : Real\nf_bdd : Filter.Eventually (fun a => LE.le (Norm.norm (f a)) M) (MeasureTheory.ae (μ.restrict s))\n⊢ MeasureTheory.IntegrableOn f s μ","decl":"lemma Measure.integrableOn_of_bounded (s_finite : μ s ≠ ∞) (f_mble : AEStronglyMeasurable f μ)\n    {M : ℝ} (f_bdd : ∀ᵐ a ∂(μ.restrict s), ‖f a‖ ≤ M) :\n    IntegrableOn f s μ :=\n  ⟨f_mble.restrict, hasFiniteIntegral_restrict_of_bounded (C := M) s_finite.lt_top f_bdd⟩\n\n"}
{"name":"MeasureTheory.integrable_add_of_disjoint","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\nf g : α → E\nh : Disjoint (Function.support f) (Function.support g)\nhf : MeasureTheory.StronglyMeasurable f\nhg : MeasureTheory.StronglyMeasurable g\n⊢ Iff (MeasureTheory.Integrable (HAdd.hAdd f g) μ) (And (MeasureTheory.Integrable f μ) (MeasureTheory.Integrable g μ))","decl":"theorem integrable_add_of_disjoint {f g : α → E} (h : Disjoint (support f) (support g))\n    (hf : StronglyMeasurable f) (hg : StronglyMeasurable g) :\n    Integrable (f + g) μ ↔ Integrable f μ ∧ Integrable g μ := by\n  refine ⟨fun hfg => ⟨?_, ?_⟩, fun h => h.1.add h.2⟩\n  · rw [← indicator_add_eq_left h]; exact hfg.indicator hf.measurableSet_support\n  · rw [← indicator_add_eq_right h]; exact hfg.indicator hg.measurableSet_support\n\n"}
{"name":"MeasureTheory.IntegrableAtFilter.eq_zero_of_tendsto","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup E\nf : α → E\nμ : MeasureTheory.Measure α\nl : Filter α\nh : MeasureTheory.IntegrableAtFilter f l μ\nh' : ∀ (s : Set α), Membership.mem l s → Eq (μ s) Top.top\na : E\nhf : Filter.Tendsto f l (nhds a)\n⊢ Eq a 0","decl":"/-- If a function converges along a filter to a limit `a`, is integrable along this filter, and\nall elements of the filter have infinite measure, then the limit has to vanish. -/\nlemma IntegrableAtFilter.eq_zero_of_tendsto\n    (h : IntegrableAtFilter f l μ) (h' : ∀ s ∈ l, μ s = ∞) {a : E}\n    (hf : Tendsto f l (𝓝 a)) : a = 0 := by\n  by_contra H\n  obtain ⟨ε, εpos, hε⟩ : ∃ (ε : ℝ), 0 < ε ∧ ε < ‖a‖ := exists_between (norm_pos_iff.mpr H)\n  rcases h with ⟨u, ul, hu⟩\n  let v := u ∩ {b | ε < ‖f b‖}\n  have hv : IntegrableOn f v μ := hu.mono_set inter_subset_left\n  have vl : v ∈ l := inter_mem ul ((tendsto_order.1 hf.norm).1 _ hε)\n  have : μ.restrict v v < ∞ := lt_of_le_of_lt (measure_mono inter_subset_right)\n    (Integrable.measure_gt_lt_top hv.norm εpos)\n  have : μ v ≠ ∞ := ne_of_lt (by simpa only [Measure.restrict_apply_self])\n  exact this (h' v vl)\n\n"}
{"name":"ContinuousOn.aemeasurable","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : OpensMeasurableSpace α\ninst✝² : MeasurableSpace β\ninst✝¹ : TopologicalSpace β\ninst✝ : BorelSpace β\nf : α → β\ns : Set α\nμ : MeasureTheory.Measure α\nhf : ContinuousOn f s\nhs : MeasurableSet s\n⊢ AEMeasurable f (μ.restrict s)","decl":"/-- A function which is continuous on a set `s` is almost everywhere measurable with respect to\n`μ.restrict s`. -/\ntheorem ContinuousOn.aemeasurable [TopologicalSpace α] [OpensMeasurableSpace α] [MeasurableSpace β]\n    [TopologicalSpace β] [BorelSpace β] {f : α → β} {s : Set α} {μ : Measure α}\n    (hf : ContinuousOn f s) (hs : MeasurableSet s) : AEMeasurable f (μ.restrict s) := by\n  classical\n  nontriviality α; inhabit α\n  have : (Set.piecewise s f fun _ => f default) =ᵐ[μ.restrict s] f := piecewise_ae_eq_restrict hs\n  refine ⟨Set.piecewise s f fun _ => f default, ?_, this.symm⟩\n  apply measurable_of_isOpen\n  intro t ht\n  obtain ⟨u, u_open, hu⟩ : ∃ u : Set α, IsOpen u ∧ f ⁻¹' t ∩ s = u ∩ s :=\n    _root_.continuousOn_iff'.1 hf t ht\n  rw [piecewise_preimage, Set.ite, hu]\n  exact (u_open.measurableSet.inter hs).union ((measurable_const ht.measurableSet).diff hs)\n\n"}
{"name":"ContinuousOn.aestronglyMeasurable_of_isSeparable","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : TopologicalSpace.PseudoMetrizableSpace α\ninst✝² : OpensMeasurableSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace.PseudoMetrizableSpace β\nf : α → β\ns : Set α\nμ : MeasureTheory.Measure α\nhf : ContinuousOn f s\nhs : MeasurableSet s\nh's : TopologicalSpace.IsSeparable s\n⊢ MeasureTheory.AEStronglyMeasurable f (μ.restrict s)","decl":"/-- A function which is continuous on a separable set `s` is almost everywhere strongly measurable\nwith respect to `μ.restrict s`. -/\ntheorem ContinuousOn.aestronglyMeasurable_of_isSeparable [TopologicalSpace α]\n    [PseudoMetrizableSpace α] [OpensMeasurableSpace α] [TopologicalSpace β]\n    [PseudoMetrizableSpace β] {f : α → β} {s : Set α} {μ : Measure α} (hf : ContinuousOn f s)\n    (hs : MeasurableSet s) (h's : TopologicalSpace.IsSeparable s) :\n    AEStronglyMeasurable f (μ.restrict s) := by\n  letI := pseudoMetrizableSpacePseudoMetric α\n  borelize β\n  rw [aestronglyMeasurable_iff_aemeasurable_separable]\n  refine ⟨hf.aemeasurable hs, f '' s, hf.isSeparable_image h's, ?_⟩\n  exact mem_of_superset (self_mem_ae_restrict hs) (subset_preimage_image _ _)\n\n"}
{"name":"ContinuousOn.aestronglyMeasurable","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : MeasurableSpace α\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\nh : SecondCountableTopologyEither α β\ninst✝¹ : OpensMeasurableSpace α\ninst✝ : TopologicalSpace.PseudoMetrizableSpace β\nf : α → β\ns : Set α\nμ : MeasureTheory.Measure α\nhf : ContinuousOn f s\nhs : MeasurableSet s\n⊢ MeasureTheory.AEStronglyMeasurable f (μ.restrict s)","decl":"/-- A function which is continuous on a set `s` is almost everywhere strongly measurable with\nrespect to `μ.restrict s` when either the source space or the target space is second-countable. -/\ntheorem ContinuousOn.aestronglyMeasurable [TopologicalSpace α] [TopologicalSpace β]\n    [h : SecondCountableTopologyEither α β] [OpensMeasurableSpace α] [PseudoMetrizableSpace β]\n    {f : α → β} {s : Set α} {μ : Measure α} (hf : ContinuousOn f s) (hs : MeasurableSet s) :\n    AEStronglyMeasurable f (μ.restrict s) := by\n  borelize β\n  refine\n    aestronglyMeasurable_iff_aemeasurable_separable.2\n      ⟨hf.aemeasurable hs, f '' s, ?_,\n        mem_of_superset (self_mem_ae_restrict hs) (subset_preimage_image _ _)⟩\n  cases h.out\n  · rw [image_eq_range]\n    exact isSeparable_range <| continuousOn_iff_continuous_restrict.1 hf\n  · exact .of_separableSpace _\n\n"}
{"name":"ContinuousOn.aestronglyMeasurable_of_isCompact","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : MeasurableSpace α\ninst✝³ : TopologicalSpace α\ninst✝² : OpensMeasurableSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace.PseudoMetrizableSpace β\nf : α → β\ns : Set α\nμ : MeasureTheory.Measure α\nhf : ContinuousOn f s\nhs : IsCompact s\nh's : MeasurableSet s\n⊢ MeasureTheory.AEStronglyMeasurable f (μ.restrict s)","decl":"/-- A function which is continuous on a compact set `s` is almost everywhere strongly measurable\nwith respect to `μ.restrict s`. -/\ntheorem ContinuousOn.aestronglyMeasurable_of_isCompact [TopologicalSpace α] [OpensMeasurableSpace α]\n    [TopologicalSpace β] [PseudoMetrizableSpace β] {f : α → β} {s : Set α} {μ : Measure α}\n    (hf : ContinuousOn f s) (hs : IsCompact s) (h's : MeasurableSet s) :\n    AEStronglyMeasurable f (μ.restrict s) := by\n  letI := pseudoMetrizableSpacePseudoMetric β\n  borelize β\n  rw [aestronglyMeasurable_iff_aemeasurable_separable]\n  refine ⟨hf.aemeasurable h's, f '' s, ?_, ?_⟩\n  · exact (hs.image_of_continuousOn hf).isSeparable\n  · exact mem_of_superset (self_mem_ae_restrict h's) (subset_preimage_image _ _)\n\n"}
{"name":"ContinuousOn.integrableAt_nhdsWithin_of_isSeparable","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace.PseudoMetrizableSpace α\ninst✝¹ : OpensMeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\na : α\nt : Set α\nf : α → E\nhft : ContinuousOn f t\nht : MeasurableSet t\nh't : TopologicalSpace.IsSeparable t\nha : Membership.mem t a\n⊢ MeasureTheory.IntegrableAtFilter f (nhdsWithin a t) μ","decl":"theorem ContinuousOn.integrableAt_nhdsWithin_of_isSeparable [TopologicalSpace α]\n    [PseudoMetrizableSpace α] [OpensMeasurableSpace α] {μ : Measure α} [IsLocallyFiniteMeasure μ]\n    {a : α} {t : Set α} {f : α → E} (hft : ContinuousOn f t) (ht : MeasurableSet t)\n    (h't : TopologicalSpace.IsSeparable t) (ha : a ∈ t) : IntegrableAtFilter f (𝓝[t] a) μ :=\n  haveI : (𝓝[t] a).IsMeasurablyGenerated := ht.nhdsWithin_isMeasurablyGenerated _\n  (hft a ha).integrableAtFilter\n    ⟨_, self_mem_nhdsWithin, hft.aestronglyMeasurable_of_isSeparable ht h't⟩\n    (μ.finiteAt_nhdsWithin _ _)\n\n"}
{"name":"ContinuousOn.integrableAt_nhdsWithin","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : TopologicalSpace α\ninst✝² : SecondCountableTopologyEither α E\ninst✝¹ : OpensMeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\na : α\nt : Set α\nf : α → E\nhft : ContinuousOn f t\nht : MeasurableSet t\nha : Membership.mem t a\n⊢ MeasureTheory.IntegrableAtFilter f (nhdsWithin a t) μ","decl":"theorem ContinuousOn.integrableAt_nhdsWithin [TopologicalSpace α]\n    [SecondCountableTopologyEither α E] [OpensMeasurableSpace α] {μ : Measure α}\n    [IsLocallyFiniteMeasure μ] {a : α} {t : Set α} {f : α → E} (hft : ContinuousOn f t)\n    (ht : MeasurableSet t) (ha : a ∈ t) : IntegrableAtFilter f (𝓝[t] a) μ :=\n  haveI : (𝓝[t] a).IsMeasurablyGenerated := ht.nhdsWithin_isMeasurablyGenerated _\n  (hft a ha).integrableAtFilter ⟨_, self_mem_nhdsWithin, hft.aestronglyMeasurable ht⟩\n    (μ.finiteAt_nhdsWithin _ _)\n\n"}
{"name":"Continuous.integrableAt_nhds","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : TopologicalSpace α\ninst✝² : SecondCountableTopologyEither α E\ninst✝¹ : OpensMeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\nf : α → E\nhf : Continuous f\na : α\n⊢ MeasureTheory.IntegrableAtFilter f (nhds a) μ","decl":"theorem Continuous.integrableAt_nhds [TopologicalSpace α] [SecondCountableTopologyEither α E]\n    [OpensMeasurableSpace α] {μ : Measure α} [IsLocallyFiniteMeasure μ] {f : α → E}\n    (hf : Continuous f) (a : α) : IntegrableAtFilter f (𝓝 a) μ := by\n  rw [← nhdsWithin_univ]\n  exact hf.continuousOn.integrableAt_nhdsWithin MeasurableSet.univ (mem_univ a)\n\n"}
{"name":"ContinuousOn.stronglyMeasurableAtFilter","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : OpensMeasurableSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : TopologicalSpace.PseudoMetrizableSpace β\ninst✝ : SecondCountableTopologyEither α β\nf : α → β\ns : Set α\nμ : MeasureTheory.Measure α\nhs : IsOpen s\nhf : ContinuousOn f s\nx : α\na✝ : Membership.mem s x\n⊢ StronglyMeasurableAtFilter f (nhds x) μ","decl":"/-- If a function is continuous on an open set `s`, then it is strongly measurable at the filter\n`𝓝 x` for all `x ∈ s` if either the source space or the target space is second-countable. -/\ntheorem ContinuousOn.stronglyMeasurableAtFilter [TopologicalSpace α] [OpensMeasurableSpace α]\n    [TopologicalSpace β] [PseudoMetrizableSpace β] [SecondCountableTopologyEither α β] {f : α → β}\n    {s : Set α} {μ : Measure α} (hs : IsOpen s) (hf : ContinuousOn f s) :\n    ∀ x ∈ s, StronglyMeasurableAtFilter f (𝓝 x) μ := fun _x hx =>\n  ⟨s, IsOpen.mem_nhds hs hx, hf.aestronglyMeasurable hs.measurableSet⟩\n\n"}
{"name":"ContinuousAt.stronglyMeasurableAtFilter","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\ninst✝² : TopologicalSpace α\ninst✝¹ : OpensMeasurableSpace α\ninst✝ : SecondCountableTopologyEither α E\nf : α → E\ns : Set α\nμ : MeasureTheory.Measure α\nhs : IsOpen s\nhf : ∀ (x : α), Membership.mem s x → ContinuousAt f x\nx : α\na✝ : Membership.mem s x\n⊢ StronglyMeasurableAtFilter f (nhds x) μ","decl":"theorem ContinuousAt.stronglyMeasurableAtFilter [TopologicalSpace α] [OpensMeasurableSpace α]\n    [SecondCountableTopologyEither α E] {f : α → E} {s : Set α} {μ : Measure α} (hs : IsOpen s)\n    (hf : ∀ x ∈ s, ContinuousAt f x) : ∀ x ∈ s, StronglyMeasurableAtFilter f (𝓝 x) μ :=\n  ContinuousOn.stronglyMeasurableAtFilter hs <| continuousOn_of_forall_continuousAt hf\n\n"}
{"name":"Continuous.stronglyMeasurableAtFilter","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : OpensMeasurableSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : TopologicalSpace.PseudoMetrizableSpace β\ninst✝ : SecondCountableTopologyEither α β\nf : α → β\nhf : Continuous f\nμ : MeasureTheory.Measure α\nl : Filter α\n⊢ StronglyMeasurableAtFilter f l μ","decl":"theorem Continuous.stronglyMeasurableAtFilter [TopologicalSpace α] [OpensMeasurableSpace α]\n    [TopologicalSpace β] [PseudoMetrizableSpace β] [SecondCountableTopologyEither α β] {f : α → β}\n    (hf : Continuous f) (μ : Measure α) (l : Filter α) : StronglyMeasurableAtFilter f l μ :=\n  hf.stronglyMeasurable.stronglyMeasurableAtFilter\n\n"}
{"name":"ContinuousOn.stronglyMeasurableAtFilter_nhdsWithin","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : OpensMeasurableSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : TopologicalSpace.PseudoMetrizableSpace β\ninst✝ : SecondCountableTopologyEither α β\nf : α → β\ns : Set α\nμ : MeasureTheory.Measure α\nhf : ContinuousOn f s\nhs : MeasurableSet s\nx : α\n⊢ StronglyMeasurableAtFilter f (nhdsWithin x s) μ","decl":"/-- If a function is continuous on a measurable set `s`, then it is measurable at the filter\n  `𝓝[s] x` for all `x`. -/\ntheorem ContinuousOn.stronglyMeasurableAtFilter_nhdsWithin {α β : Type*} [MeasurableSpace α]\n    [TopologicalSpace α] [OpensMeasurableSpace α] [TopologicalSpace β] [PseudoMetrizableSpace β]\n    [SecondCountableTopologyEither α β] {f : α → β} {s : Set α} {μ : Measure α}\n    (hf : ContinuousOn f s) (hs : MeasurableSet s) (x : α) :\n    StronglyMeasurableAtFilter f (𝓝[s] x) μ :=\n  ⟨s, self_mem_nhdsWithin, hf.aestronglyMeasurable hs⟩\n\n"}
{"name":"integrableOn_Icc_iff_integrableOn_Ioc'","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝³ : MeasurableSpace α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : PartialOrder α\ninst✝ : MeasurableSingletonClass α\nf : α → E\nμ : MeasureTheory.Measure α\na b : α\nha : Ne (μ (Singleton.singleton a)) Top.top\n⊢ Iff (MeasureTheory.IntegrableOn f (Set.Icc a b) μ) (MeasureTheory.IntegrableOn f (Set.Ioc a b) μ)","decl":"theorem integrableOn_Icc_iff_integrableOn_Ioc' (ha : μ {a} ≠ ∞) :\n    IntegrableOn f (Icc a b) μ ↔ IntegrableOn f (Ioc a b) μ := by\n  by_cases hab : a ≤ b\n  · rw [← Ioc_union_left hab, integrableOn_union,\n      eq_true (integrableOn_singleton_iff.mpr <| Or.inr ha.lt_top), and_true]\n  · rw [Icc_eq_empty hab, Ioc_eq_empty]\n    contrapose! hab\n    exact hab.le\n\n"}
{"name":"integrableOn_Icc_iff_integrableOn_Ico'","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝³ : MeasurableSpace α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : PartialOrder α\ninst✝ : MeasurableSingletonClass α\nf : α → E\nμ : MeasureTheory.Measure α\na b : α\nhb : Ne (μ (Singleton.singleton b)) Top.top\n⊢ Iff (MeasureTheory.IntegrableOn f (Set.Icc a b) μ) (MeasureTheory.IntegrableOn f (Set.Ico a b) μ)","decl":"theorem integrableOn_Icc_iff_integrableOn_Ico' (hb : μ {b} ≠ ∞) :\n    IntegrableOn f (Icc a b) μ ↔ IntegrableOn f (Ico a b) μ := by\n  by_cases hab : a ≤ b\n  · rw [← Ico_union_right hab, integrableOn_union,\n      eq_true (integrableOn_singleton_iff.mpr <| Or.inr hb.lt_top), and_true]\n  · rw [Icc_eq_empty hab, Ico_eq_empty]\n    contrapose! hab\n    exact hab.le\n\n"}
{"name":"integrableOn_Ico_iff_integrableOn_Ioo'","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝³ : MeasurableSpace α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : PartialOrder α\ninst✝ : MeasurableSingletonClass α\nf : α → E\nμ : MeasureTheory.Measure α\na b : α\nha : Ne (μ (Singleton.singleton a)) Top.top\n⊢ Iff (MeasureTheory.IntegrableOn f (Set.Ico a b) μ) (MeasureTheory.IntegrableOn f (Set.Ioo a b) μ)","decl":"theorem integrableOn_Ico_iff_integrableOn_Ioo' (ha : μ {a} ≠ ∞) :\n    IntegrableOn f (Ico a b) μ ↔ IntegrableOn f (Ioo a b) μ := by\n  by_cases hab : a < b\n  · rw [← Ioo_union_left hab, integrableOn_union,\n      eq_true (integrableOn_singleton_iff.mpr <| Or.inr ha.lt_top), and_true]\n  · rw [Ioo_eq_empty hab, Ico_eq_empty hab]\n\n"}
{"name":"integrableOn_Ioc_iff_integrableOn_Ioo'","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝³ : MeasurableSpace α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : PartialOrder α\ninst✝ : MeasurableSingletonClass α\nf : α → E\nμ : MeasureTheory.Measure α\na b : α\nhb : Ne (μ (Singleton.singleton b)) Top.top\n⊢ Iff (MeasureTheory.IntegrableOn f (Set.Ioc a b) μ) (MeasureTheory.IntegrableOn f (Set.Ioo a b) μ)","decl":"theorem integrableOn_Ioc_iff_integrableOn_Ioo' (hb : μ {b} ≠ ∞) :\n    IntegrableOn f (Ioc a b) μ ↔ IntegrableOn f (Ioo a b) μ := by\n  by_cases hab : a < b\n  · rw [← Ioo_union_right hab, integrableOn_union,\n      eq_true (integrableOn_singleton_iff.mpr <| Or.inr hb.lt_top), and_true]\n  · rw [Ioo_eq_empty hab, Ioc_eq_empty hab]\n\n"}
{"name":"integrableOn_Icc_iff_integrableOn_Ioo'","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝³ : MeasurableSpace α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : PartialOrder α\ninst✝ : MeasurableSingletonClass α\nf : α → E\nμ : MeasureTheory.Measure α\na b : α\nha : Ne (μ (Singleton.singleton a)) Top.top\nhb : Ne (μ (Singleton.singleton b)) Top.top\n⊢ Iff (MeasureTheory.IntegrableOn f (Set.Icc a b) μ) (MeasureTheory.IntegrableOn f (Set.Ioo a b) μ)","decl":"theorem integrableOn_Icc_iff_integrableOn_Ioo' (ha : μ {a} ≠ ∞) (hb : μ {b} ≠ ∞) :\n    IntegrableOn f (Icc a b) μ ↔ IntegrableOn f (Ioo a b) μ := by\n  rw [integrableOn_Icc_iff_integrableOn_Ioc' ha, integrableOn_Ioc_iff_integrableOn_Ioo' hb]\n\n"}
{"name":"integrableOn_Ici_iff_integrableOn_Ioi'","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝³ : MeasurableSpace α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : PartialOrder α\ninst✝ : MeasurableSingletonClass α\nf : α → E\nμ : MeasureTheory.Measure α\nb : α\nhb : Ne (μ (Singleton.singleton b)) Top.top\n⊢ Iff (MeasureTheory.IntegrableOn f (Set.Ici b) μ) (MeasureTheory.IntegrableOn f (Set.Ioi b) μ)","decl":"theorem integrableOn_Ici_iff_integrableOn_Ioi' (hb : μ {b} ≠ ∞) :\n    IntegrableOn f (Ici b) μ ↔ IntegrableOn f (Ioi b) μ := by\n  rw [← Ioi_union_left, integrableOn_union,\n    eq_true (integrableOn_singleton_iff.mpr <| Or.inr hb.lt_top), and_true]\n\n"}
{"name":"integrableOn_Iic_iff_integrableOn_Iio'","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝³ : MeasurableSpace α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : PartialOrder α\ninst✝ : MeasurableSingletonClass α\nf : α → E\nμ : MeasureTheory.Measure α\nb : α\nhb : Ne (μ (Singleton.singleton b)) Top.top\n⊢ Iff (MeasureTheory.IntegrableOn f (Set.Iic b) μ) (MeasureTheory.IntegrableOn f (Set.Iio b) μ)","decl":"theorem integrableOn_Iic_iff_integrableOn_Iio' (hb : μ {b} ≠ ∞) :\n    IntegrableOn f (Iic b) μ ↔ IntegrableOn f (Iio b) μ := by\n  rw [← Iio_union_right, integrableOn_union,\n    eq_true (integrableOn_singleton_iff.mpr <| Or.inr hb.lt_top), and_true]\n\n"}
{"name":"integrableOn_Icc_iff_integrableOn_Ioc","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\ninst✝² : PartialOrder α\ninst✝¹ : MeasurableSingletonClass α\nf : α → E\nμ : MeasureTheory.Measure α\na b : α\ninst✝ : MeasureTheory.NoAtoms μ\n⊢ Iff (MeasureTheory.IntegrableOn f (Set.Icc a b) μ) (MeasureTheory.IntegrableOn f (Set.Ioc a b) μ)","decl":"theorem integrableOn_Icc_iff_integrableOn_Ioc :\n    IntegrableOn f (Icc a b) μ ↔ IntegrableOn f (Ioc a b) μ :=\n  integrableOn_Icc_iff_integrableOn_Ioc' (by rw [measure_singleton]; exact ENNReal.zero_ne_top)\n\n"}
{"name":"integrableOn_Icc_iff_integrableOn_Ico","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\ninst✝² : PartialOrder α\ninst✝¹ : MeasurableSingletonClass α\nf : α → E\nμ : MeasureTheory.Measure α\na b : α\ninst✝ : MeasureTheory.NoAtoms μ\n⊢ Iff (MeasureTheory.IntegrableOn f (Set.Icc a b) μ) (MeasureTheory.IntegrableOn f (Set.Ico a b) μ)","decl":"theorem integrableOn_Icc_iff_integrableOn_Ico :\n    IntegrableOn f (Icc a b) μ ↔ IntegrableOn f (Ico a b) μ :=\n  integrableOn_Icc_iff_integrableOn_Ico' (by rw [measure_singleton]; exact ENNReal.zero_ne_top)\n\n"}
{"name":"integrableOn_Ico_iff_integrableOn_Ioo","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\ninst✝² : PartialOrder α\ninst✝¹ : MeasurableSingletonClass α\nf : α → E\nμ : MeasureTheory.Measure α\na b : α\ninst✝ : MeasureTheory.NoAtoms μ\n⊢ Iff (MeasureTheory.IntegrableOn f (Set.Ico a b) μ) (MeasureTheory.IntegrableOn f (Set.Ioo a b) μ)","decl":"theorem integrableOn_Ico_iff_integrableOn_Ioo :\n    IntegrableOn f (Ico a b) μ ↔ IntegrableOn f (Ioo a b) μ :=\n  integrableOn_Ico_iff_integrableOn_Ioo' (by rw [measure_singleton]; exact ENNReal.zero_ne_top)\n\n"}
{"name":"integrableOn_Ioc_iff_integrableOn_Ioo","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\ninst✝² : PartialOrder α\ninst✝¹ : MeasurableSingletonClass α\nf : α → E\nμ : MeasureTheory.Measure α\na b : α\ninst✝ : MeasureTheory.NoAtoms μ\n⊢ Iff (MeasureTheory.IntegrableOn f (Set.Ioc a b) μ) (MeasureTheory.IntegrableOn f (Set.Ioo a b) μ)","decl":"theorem integrableOn_Ioc_iff_integrableOn_Ioo :\n    IntegrableOn f (Ioc a b) μ ↔ IntegrableOn f (Ioo a b) μ :=\n  integrableOn_Ioc_iff_integrableOn_Ioo' (by rw [measure_singleton]; exact ENNReal.zero_ne_top)\n\n"}
{"name":"integrableOn_Icc_iff_integrableOn_Ioo","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\ninst✝² : PartialOrder α\ninst✝¹ : MeasurableSingletonClass α\nf : α → E\nμ : MeasureTheory.Measure α\na b : α\ninst✝ : MeasureTheory.NoAtoms μ\n⊢ Iff (MeasureTheory.IntegrableOn f (Set.Icc a b) μ) (MeasureTheory.IntegrableOn f (Set.Ioo a b) μ)","decl":"theorem integrableOn_Icc_iff_integrableOn_Ioo :\n    IntegrableOn f (Icc a b) μ ↔ IntegrableOn f (Ioo a b) μ := by\n  rw [integrableOn_Icc_iff_integrableOn_Ioc, integrableOn_Ioc_iff_integrableOn_Ioo]\n\n"}
{"name":"integrableOn_Ici_iff_integrableOn_Ioi","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\ninst✝² : PartialOrder α\ninst✝¹ : MeasurableSingletonClass α\nf : α → E\nμ : MeasureTheory.Measure α\nb : α\ninst✝ : MeasureTheory.NoAtoms μ\n⊢ Iff (MeasureTheory.IntegrableOn f (Set.Ici b) μ) (MeasureTheory.IntegrableOn f (Set.Ioi b) μ)","decl":"theorem integrableOn_Ici_iff_integrableOn_Ioi :\n    IntegrableOn f (Ici b) μ ↔ IntegrableOn f (Ioi b) μ :=\n  integrableOn_Ici_iff_integrableOn_Ioi' (by rw [measure_singleton]; exact ENNReal.zero_ne_top)\n\n"}
{"name":"integrableOn_Iic_iff_integrableOn_Iio","module":"Mathlib.MeasureTheory.Integral.IntegrableOn","initialProofState":"α : Type u_1\nE : Type u_4\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\ninst✝² : PartialOrder α\ninst✝¹ : MeasurableSingletonClass α\nf : α → E\nμ : MeasureTheory.Measure α\nb : α\ninst✝ : MeasureTheory.NoAtoms μ\n⊢ Iff (MeasureTheory.IntegrableOn f (Set.Iic b) μ) (MeasureTheory.IntegrableOn f (Set.Iio b) μ)","decl":"theorem integrableOn_Iic_iff_integrableOn_Iio :\n    IntegrableOn f (Iic b) μ ↔ IntegrableOn f (Iio b) μ :=\n  integrableOn_Iic_iff_integrableOn_Iio' (by rw [measure_singleton]; exact ENNReal.zero_ne_top)\n\n"}
