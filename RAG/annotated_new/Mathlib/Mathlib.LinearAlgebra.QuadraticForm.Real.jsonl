{"name":"QuadraticForm.equivalent_sign_ne_zero_weighted_sum_squared","module":"Mathlib.LinearAlgebra.QuadraticForm.Real","initialProofState":"M : Type u_2\ninst✝² : AddCommGroup M\ninst✝¹ : Module Real M\ninst✝ : FiniteDimensional Real M\nQ : QuadraticForm Real M\nhQ : LinearMap.SeparatingLeft (QuadraticMap.associated Q)\n⊢ Exists fun w => And (∀ (i : Fin (Module.finrank Real M)), Ne (w i) 0) (QuadraticMap.Equivalent Q (QuadraticMap.weightedSumSquares Real fun i => ↑(w i)))","decl":"/-- **Sylvester's law of inertia**: A nondegenerate real quadratic form is equivalent to a weighted\nsum of squares with the weights being ±1, `SignType` version. -/\ntheorem equivalent_sign_ne_zero_weighted_sum_squared {M : Type*} [AddCommGroup M] [Module ℝ M]\n    [FiniteDimensional ℝ M] (Q : QuadraticForm ℝ M) (hQ : (associated (R := ℝ) Q).SeparatingLeft) :\n    ∃ w : Fin (Module.finrank ℝ M) → SignType,\n      (∀ i, w i ≠ 0) ∧ Equivalent Q (weightedSumSquares ℝ fun i ↦ (w i : ℝ)) :=\n  let ⟨w, ⟨hw₁⟩⟩ := Q.equivalent_weightedSumSquares_units_of_nondegenerate' hQ\n  ⟨sign ∘ ((↑) : ℝˣ → ℝ) ∘ w, fun i => sign_ne_zero.2 (w i).ne_zero,\n    ⟨hw₁.trans (isometryEquivSignWeightedSumSquares (((↑) : ℝˣ → ℝ) ∘ w))⟩⟩\n\n"}
{"name":"QuadraticForm.equivalent_one_neg_one_weighted_sum_squared","module":"Mathlib.LinearAlgebra.QuadraticForm.Real","initialProofState":"M : Type u_2\ninst✝² : AddCommGroup M\ninst✝¹ : Module Real M\ninst✝ : FiniteDimensional Real M\nQ : QuadraticForm Real M\nhQ : LinearMap.SeparatingLeft (QuadraticMap.associated Q)\n⊢ Exists fun w => And (∀ (i : Fin (Module.finrank Real M)), Or (Eq (w i) (-1)) (Eq (w i) 1)) (QuadraticMap.Equivalent Q (QuadraticMap.weightedSumSquares Real w))","decl":"/-- **Sylvester's law of inertia**: A nondegenerate real quadratic form is equivalent to a weighted\nsum of squares with the weights being ±1. -/\ntheorem equivalent_one_neg_one_weighted_sum_squared {M : Type*} [AddCommGroup M] [Module ℝ M]\n    [FiniteDimensional ℝ M] (Q : QuadraticForm ℝ M) (hQ : (associated (R := ℝ) Q).SeparatingLeft) :\n    ∃ w : Fin (Module.finrank ℝ M) → ℝ,\n      (∀ i, w i = -1 ∨ w i = 1) ∧ Equivalent Q (weightedSumSquares ℝ w) :=\n  let ⟨w, hw₀, hw⟩ := Q.equivalent_sign_ne_zero_weighted_sum_squared hQ\n  ⟨(w ·), fun i ↦ by cases hi : w i <;> simp_all, hw⟩\n\n"}
{"name":"QuadraticForm.equivalent_signType_weighted_sum_squared","module":"Mathlib.LinearAlgebra.QuadraticForm.Real","initialProofState":"M : Type u_2\ninst✝² : AddCommGroup M\ninst✝¹ : Module Real M\ninst✝ : FiniteDimensional Real M\nQ : QuadraticForm Real M\n⊢ Exists fun w => QuadraticMap.Equivalent Q (QuadraticMap.weightedSumSquares Real fun i => ↑(w i))","decl":"/-- **Sylvester's law of inertia**: A real quadratic form is equivalent to a weighted\nsum of squares with the weights being ±1 or 0, `SignType` version. -/\ntheorem equivalent_signType_weighted_sum_squared {M : Type*} [AddCommGroup M] [Module ℝ M]\n    [FiniteDimensional ℝ M] (Q : QuadraticForm ℝ M) :\n    ∃ w : Fin (Module.finrank ℝ M) → SignType,\n      Equivalent Q (weightedSumSquares ℝ fun i ↦ (w i : ℝ)) :=\n  let ⟨w, ⟨hw₁⟩⟩ := Q.equivalent_weightedSumSquares\n  ⟨sign ∘ w, ⟨hw₁.trans (isometryEquivSignWeightedSumSquares w)⟩⟩\n\n"}
{"name":"QuadraticForm.equivalent_one_zero_neg_one_weighted_sum_squared","module":"Mathlib.LinearAlgebra.QuadraticForm.Real","initialProofState":"M : Type u_2\ninst✝² : AddCommGroup M\ninst✝¹ : Module Real M\ninst✝ : FiniteDimensional Real M\nQ : QuadraticForm Real M\n⊢ Exists fun w => And (∀ (i : Fin (Module.finrank Real M)), Or (Eq (w i) (-1)) (Or (Eq (w i) 0) (Eq (w i) 1))) (QuadraticMap.Equivalent Q (QuadraticMap.weightedSumSquares Real w))","decl":"/-- **Sylvester's law of inertia**: A real quadratic form is equivalent to a weighted\nsum of squares with the weights being ±1 or 0. -/\ntheorem equivalent_one_zero_neg_one_weighted_sum_squared {M : Type*} [AddCommGroup M] [Module ℝ M]\n    [FiniteDimensional ℝ M] (Q : QuadraticForm ℝ M) :\n    ∃ w : Fin (Module.finrank ℝ M) → ℝ,\n      (∀ i, w i = -1 ∨ w i = 0 ∨ w i = 1) ∧ Equivalent Q (weightedSumSquares ℝ w) :=\n  let ⟨w, hw⟩ := Q.equivalent_signType_weighted_sum_squared\n  ⟨(w ·), fun i ↦ by cases h : w i <;> simp [h], hw⟩\n\n"}
