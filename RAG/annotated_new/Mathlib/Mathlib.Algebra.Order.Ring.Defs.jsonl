{"name":"OrderedSemiring.mul_le_mul_of_nonneg_right","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : OrderedSemiring α\na b c : α\na✝¹ : LE.le a b\na✝ : LE.le 0 c\n⊢ LE.le (HMul.hMul a c) (HMul.hMul b c)","decl":"/-- An `OrderedSemiring` is a semiring with a partial order such that addition is monotone and\nmultiplication by a nonnegative number is monotone. -/\nclass OrderedSemiring (α : Type u) extends Semiring α, OrderedAddCommMonoid α where\n  /-- `0 ≤ 1` in any ordered semiring. -/\n  protected zero_le_one : (0 : α) ≤ 1\n  /-- In an ordered semiring, we can multiply an inequality `a ≤ b` on the left\n  by a non-negative element `0 ≤ c` to obtain `c * a ≤ c * b`. -/\n  protected mul_le_mul_of_nonneg_left : ∀ a b c : α, a ≤ b → 0 ≤ c → c * a ≤ c * b\n  /-- In an ordered semiring, we can multiply an inequality `a ≤ b` on the right\n  by a non-negative element `0 ≤ c` to obtain `a * c ≤ b * c`. -/\n  protected mul_le_mul_of_nonneg_right : ∀ a b c : α, a ≤ b → 0 ≤ c → a * c ≤ b * c\n\n"}
{"name":"OrderedSemiring.mul_le_mul_of_nonneg_left","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : OrderedSemiring α\na b c : α\na✝¹ : LE.le a b\na✝ : LE.le 0 c\n⊢ LE.le (HMul.hMul c a) (HMul.hMul c b)","decl":"/-- An `OrderedSemiring` is a semiring with a partial order such that addition is monotone and\nmultiplication by a nonnegative number is monotone. -/\nclass OrderedSemiring (α : Type u) extends Semiring α, OrderedAddCommMonoid α where\n  /-- `0 ≤ 1` in any ordered semiring. -/\n  protected zero_le_one : (0 : α) ≤ 1\n  /-- In an ordered semiring, we can multiply an inequality `a ≤ b` on the left\n  by a non-negative element `0 ≤ c` to obtain `c * a ≤ c * b`. -/\n  protected mul_le_mul_of_nonneg_left : ∀ a b c : α, a ≤ b → 0 ≤ c → c * a ≤ c * b\n  /-- In an ordered semiring, we can multiply an inequality `a ≤ b` on the right\n  by a non-negative element `0 ≤ c` to obtain `a * c ≤ b * c`. -/\n  protected mul_le_mul_of_nonneg_right : ∀ a b c : α, a ≤ b → 0 ≤ c → a * c ≤ b * c\n\n"}
{"name":"OrderedSemiring.zero_le_one","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : OrderedSemiring α\n⊢ LE.le 0 1","decl":"/-- An `OrderedSemiring` is a semiring with a partial order such that addition is monotone and\nmultiplication by a nonnegative number is monotone. -/\nclass OrderedSemiring (α : Type u) extends Semiring α, OrderedAddCommMonoid α where\n  /-- `0 ≤ 1` in any ordered semiring. -/\n  protected zero_le_one : (0 : α) ≤ 1\n  /-- In an ordered semiring, we can multiply an inequality `a ≤ b` on the left\n  by a non-negative element `0 ≤ c` to obtain `c * a ≤ c * b`. -/\n  protected mul_le_mul_of_nonneg_left : ∀ a b c : α, a ≤ b → 0 ≤ c → c * a ≤ c * b\n  /-- In an ordered semiring, we can multiply an inequality `a ≤ b` on the right\n  by a non-negative element `0 ≤ c` to obtain `a * c ≤ b * c`. -/\n  protected mul_le_mul_of_nonneg_right : ∀ a b c : α, a ≤ b → 0 ≤ c → a * c ≤ b * c\n\n"}
{"name":"OrderedSemiring.add_le_add_left","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : OrderedSemiring α\na b : α\na✝ : LE.le a b\nc : α\n⊢ LE.le (HAdd.hAdd c a) (HAdd.hAdd c b)","decl":"/-- An `OrderedSemiring` is a semiring with a partial order such that addition is monotone and\nmultiplication by a nonnegative number is monotone. -/\nclass OrderedSemiring (α : Type u) extends Semiring α, OrderedAddCommMonoid α where\n  /-- `0 ≤ 1` in any ordered semiring. -/\n  protected zero_le_one : (0 : α) ≤ 1\n  /-- In an ordered semiring, we can multiply an inequality `a ≤ b` on the left\n  by a non-negative element `0 ≤ c` to obtain `c * a ≤ c * b`. -/\n  protected mul_le_mul_of_nonneg_left : ∀ a b c : α, a ≤ b → 0 ≤ c → c * a ≤ c * b\n  /-- In an ordered semiring, we can multiply an inequality `a ≤ b` on the right\n  by a non-negative element `0 ≤ c` to obtain `a * c ≤ b * c`. -/\n  protected mul_le_mul_of_nonneg_right : ∀ a b c : α, a ≤ b → 0 ≤ c → a * c ≤ b * c\n\n"}
{"name":"OrderedCommSemiring.mul_comm","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : OrderedCommSemiring α\na b : α\n⊢ Eq (HMul.hMul a b) (HMul.hMul b a)","decl":"/-- An `OrderedCommSemiring` is a commutative semiring with a partial order such that addition is\nmonotone and multiplication by a nonnegative number is monotone. -/\nclass OrderedCommSemiring (α : Type u) extends OrderedSemiring α, CommSemiring α where\n  mul_le_mul_of_nonneg_right a b c ha hc :=\n    -- parentheses ensure this generates an `optParam` rather than an `autoParam`\n    (by simpa only [mul_comm] using mul_le_mul_of_nonneg_left a b c ha hc)\n\n"}
{"name":"OrderedRing.zero_le_one","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : OrderedRing α\n⊢ LE.le 0 1","decl":"/-- An `OrderedRing` is a ring with a partial order such that addition is monotone and\nmultiplication by a nonnegative number is monotone. -/\nclass OrderedRing (α : Type u) extends Ring α, OrderedAddCommGroup α where\n  /-- `0 ≤ 1` in any ordered ring. -/\n  protected zero_le_one : 0 ≤ (1 : α)\n  /-- The product of non-negative elements is non-negative. -/\n  protected mul_nonneg : ∀ a b : α, 0 ≤ a → 0 ≤ b → 0 ≤ a * b\n\n"}
{"name":"OrderedRing.mul_nonneg","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : OrderedRing α\na b : α\na✝¹ : LE.le 0 a\na✝ : LE.le 0 b\n⊢ LE.le 0 (HMul.hMul a b)","decl":"/-- An `OrderedRing` is a ring with a partial order such that addition is monotone and\nmultiplication by a nonnegative number is monotone. -/\nclass OrderedRing (α : Type u) extends Ring α, OrderedAddCommGroup α where\n  /-- `0 ≤ 1` in any ordered ring. -/\n  protected zero_le_one : 0 ≤ (1 : α)\n  /-- The product of non-negative elements is non-negative. -/\n  protected mul_nonneg : ∀ a b : α, 0 ≤ a → 0 ≤ b → 0 ≤ a * b\n\n"}
{"name":"OrderedRing.add_le_add_left","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : OrderedRing α\na b : α\na✝ : LE.le a b\nc : α\n⊢ LE.le (HAdd.hAdd c a) (HAdd.hAdd c b)","decl":"/-- An `OrderedRing` is a ring with a partial order such that addition is monotone and\nmultiplication by a nonnegative number is monotone. -/\nclass OrderedRing (α : Type u) extends Ring α, OrderedAddCommGroup α where\n  /-- `0 ≤ 1` in any ordered ring. -/\n  protected zero_le_one : 0 ≤ (1 : α)\n  /-- The product of non-negative elements is non-negative. -/\n  protected mul_nonneg : ∀ a b : α, 0 ≤ a → 0 ≤ b → 0 ≤ a * b\n\n"}
{"name":"OrderedCommRing.mul_comm","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : OrderedCommRing α\na b : α\n⊢ Eq (HMul.hMul a b) (HMul.hMul b a)","decl":"/-- An `OrderedCommRing` is a commutative ring with a partial order such that addition is monotone\nand multiplication by a nonnegative number is monotone. -/\nclass OrderedCommRing (α : Type u) extends OrderedRing α, CommRing α\n\n"}
{"name":"StrictOrderedSemiring.le_of_add_le_add_left","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : StrictOrderedSemiring α\na b c : α\na✝ : LE.le (HAdd.hAdd a b) (HAdd.hAdd a c)\n⊢ LE.le b c","decl":"/-- A `StrictOrderedSemiring` is a nontrivial semiring with a partial order such that addition is\nstrictly monotone and multiplication by a positive number is strictly monotone. -/\nclass StrictOrderedSemiring (α : Type u) extends Semiring α, OrderedCancelAddCommMonoid α,\n    Nontrivial α where\n  /-- In a strict ordered semiring, `0 ≤ 1`. -/\n  protected zero_le_one : (0 : α) ≤ 1\n  /-- Left multiplication by a positive element is strictly monotone. -/\n  protected mul_lt_mul_of_pos_left : ∀ a b c : α, a < b → 0 < c → c * a < c * b\n  /-- Right multiplication by a positive element is strictly monotone. -/\n  protected mul_lt_mul_of_pos_right : ∀ a b c : α, a < b → 0 < c → a * c < b * c\n\n"}
{"name":"StrictOrderedSemiring.toNontrivial","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : StrictOrderedSemiring α\n⊢ Nontrivial α","decl":"/-- A `StrictOrderedSemiring` is a nontrivial semiring with a partial order such that addition is\nstrictly monotone and multiplication by a positive number is strictly monotone. -/\nclass StrictOrderedSemiring (α : Type u) extends Semiring α, OrderedCancelAddCommMonoid α,\n    Nontrivial α where\n  /-- In a strict ordered semiring, `0 ≤ 1`. -/\n  protected zero_le_one : (0 : α) ≤ 1\n  /-- Left multiplication by a positive element is strictly monotone. -/\n  protected mul_lt_mul_of_pos_left : ∀ a b c : α, a < b → 0 < c → c * a < c * b\n  /-- Right multiplication by a positive element is strictly monotone. -/\n  protected mul_lt_mul_of_pos_right : ∀ a b c : α, a < b → 0 < c → a * c < b * c\n\n"}
{"name":"StrictOrderedSemiring.add_le_add_left","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : StrictOrderedSemiring α\na b : α\na✝ : LE.le a b\nc : α\n⊢ LE.le (HAdd.hAdd c a) (HAdd.hAdd c b)","decl":"/-- A `StrictOrderedSemiring` is a nontrivial semiring with a partial order such that addition is\nstrictly monotone and multiplication by a positive number is strictly monotone. -/\nclass StrictOrderedSemiring (α : Type u) extends Semiring α, OrderedCancelAddCommMonoid α,\n    Nontrivial α where\n  /-- In a strict ordered semiring, `0 ≤ 1`. -/\n  protected zero_le_one : (0 : α) ≤ 1\n  /-- Left multiplication by a positive element is strictly monotone. -/\n  protected mul_lt_mul_of_pos_left : ∀ a b c : α, a < b → 0 < c → c * a < c * b\n  /-- Right multiplication by a positive element is strictly monotone. -/\n  protected mul_lt_mul_of_pos_right : ∀ a b c : α, a < b → 0 < c → a * c < b * c\n\n"}
{"name":"StrictOrderedSemiring.mul_lt_mul_of_pos_left","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : StrictOrderedSemiring α\na b c : α\na✝¹ : LT.lt a b\na✝ : LT.lt 0 c\n⊢ LT.lt (HMul.hMul c a) (HMul.hMul c b)","decl":"/-- A `StrictOrderedSemiring` is a nontrivial semiring with a partial order such that addition is\nstrictly monotone and multiplication by a positive number is strictly monotone. -/\nclass StrictOrderedSemiring (α : Type u) extends Semiring α, OrderedCancelAddCommMonoid α,\n    Nontrivial α where\n  /-- In a strict ordered semiring, `0 ≤ 1`. -/\n  protected zero_le_one : (0 : α) ≤ 1\n  /-- Left multiplication by a positive element is strictly monotone. -/\n  protected mul_lt_mul_of_pos_left : ∀ a b c : α, a < b → 0 < c → c * a < c * b\n  /-- Right multiplication by a positive element is strictly monotone. -/\n  protected mul_lt_mul_of_pos_right : ∀ a b c : α, a < b → 0 < c → a * c < b * c\n\n"}
{"name":"StrictOrderedSemiring.mul_lt_mul_of_pos_right","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : StrictOrderedSemiring α\na b c : α\na✝¹ : LT.lt a b\na✝ : LT.lt 0 c\n⊢ LT.lt (HMul.hMul a c) (HMul.hMul b c)","decl":"/-- A `StrictOrderedSemiring` is a nontrivial semiring with a partial order such that addition is\nstrictly monotone and multiplication by a positive number is strictly monotone. -/\nclass StrictOrderedSemiring (α : Type u) extends Semiring α, OrderedCancelAddCommMonoid α,\n    Nontrivial α where\n  /-- In a strict ordered semiring, `0 ≤ 1`. -/\n  protected zero_le_one : (0 : α) ≤ 1\n  /-- Left multiplication by a positive element is strictly monotone. -/\n  protected mul_lt_mul_of_pos_left : ∀ a b c : α, a < b → 0 < c → c * a < c * b\n  /-- Right multiplication by a positive element is strictly monotone. -/\n  protected mul_lt_mul_of_pos_right : ∀ a b c : α, a < b → 0 < c → a * c < b * c\n\n"}
{"name":"StrictOrderedSemiring.zero_le_one","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : StrictOrderedSemiring α\n⊢ LE.le 0 1","decl":"/-- A `StrictOrderedSemiring` is a nontrivial semiring with a partial order such that addition is\nstrictly monotone and multiplication by a positive number is strictly monotone. -/\nclass StrictOrderedSemiring (α : Type u) extends Semiring α, OrderedCancelAddCommMonoid α,\n    Nontrivial α where\n  /-- In a strict ordered semiring, `0 ≤ 1`. -/\n  protected zero_le_one : (0 : α) ≤ 1\n  /-- Left multiplication by a positive element is strictly monotone. -/\n  protected mul_lt_mul_of_pos_left : ∀ a b c : α, a < b → 0 < c → c * a < c * b\n  /-- Right multiplication by a positive element is strictly monotone. -/\n  protected mul_lt_mul_of_pos_right : ∀ a b c : α, a < b → 0 < c → a * c < b * c\n\n"}
{"name":"StrictOrderedCommSemiring.mul_comm","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : StrictOrderedCommSemiring α\na b : α\n⊢ Eq (HMul.hMul a b) (HMul.hMul b a)","decl":"/-- A `StrictOrderedCommSemiring` is a commutative semiring with a partial order such that\naddition is strictly monotone and multiplication by a positive number is strictly monotone. -/\nclass StrictOrderedCommSemiring (α : Type u) extends StrictOrderedSemiring α, CommSemiring α\n\n"}
{"name":"StrictOrderedRing.add_le_add_left","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : StrictOrderedRing α\na b : α\na✝ : LE.le a b\nc : α\n⊢ LE.le (HAdd.hAdd c a) (HAdd.hAdd c b)","decl":"/-- A `StrictOrderedRing` is a ring with a partial order such that addition is strictly monotone\nand multiplication by a positive number is strictly monotone. -/\nclass StrictOrderedRing (α : Type u) extends Ring α, OrderedAddCommGroup α, Nontrivial α where\n  /-- In a strict ordered ring, `0 ≤ 1`. -/\n  protected zero_le_one : 0 ≤ (1 : α)\n  /-- The product of two positive elements is positive. -/\n  protected mul_pos : ∀ a b : α, 0 < a → 0 < b → 0 < a * b\n\n"}
{"name":"StrictOrderedRing.zero_le_one","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : StrictOrderedRing α\n⊢ LE.le 0 1","decl":"/-- A `StrictOrderedRing` is a ring with a partial order such that addition is strictly monotone\nand multiplication by a positive number is strictly monotone. -/\nclass StrictOrderedRing (α : Type u) extends Ring α, OrderedAddCommGroup α, Nontrivial α where\n  /-- In a strict ordered ring, `0 ≤ 1`. -/\n  protected zero_le_one : 0 ≤ (1 : α)\n  /-- The product of two positive elements is positive. -/\n  protected mul_pos : ∀ a b : α, 0 < a → 0 < b → 0 < a * b\n\n"}
{"name":"StrictOrderedRing.mul_pos","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : StrictOrderedRing α\na b : α\na✝¹ : LT.lt 0 a\na✝ : LT.lt 0 b\n⊢ LT.lt 0 (HMul.hMul a b)","decl":"/-- A `StrictOrderedRing` is a ring with a partial order such that addition is strictly monotone\nand multiplication by a positive number is strictly monotone. -/\nclass StrictOrderedRing (α : Type u) extends Ring α, OrderedAddCommGroup α, Nontrivial α where\n  /-- In a strict ordered ring, `0 ≤ 1`. -/\n  protected zero_le_one : 0 ≤ (1 : α)\n  /-- The product of two positive elements is positive. -/\n  protected mul_pos : ∀ a b : α, 0 < a → 0 < b → 0 < a * b\n\n"}
{"name":"StrictOrderedRing.toNontrivial","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : StrictOrderedRing α\n⊢ Nontrivial α","decl":"/-- A `StrictOrderedRing` is a ring with a partial order such that addition is strictly monotone\nand multiplication by a positive number is strictly monotone. -/\nclass StrictOrderedRing (α : Type u) extends Ring α, OrderedAddCommGroup α, Nontrivial α where\n  /-- In a strict ordered ring, `0 ≤ 1`. -/\n  protected zero_le_one : 0 ≤ (1 : α)\n  /-- The product of two positive elements is positive. -/\n  protected mul_pos : ∀ a b : α, 0 < a → 0 < b → 0 < a * b\n\n"}
{"name":"StrictOrderedCommRing.mul_comm","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u_1\nself : StrictOrderedCommRing α\na b : α\n⊢ Eq (HMul.hMul a b) (HMul.hMul b a)","decl":"/-- A `StrictOrderedCommRing` is a commutative ring with a partial order such that addition is\nstrictly monotone and multiplication by a positive number is strictly monotone. -/\nclass StrictOrderedCommRing (α : Type*) extends StrictOrderedRing α, CommRing α\n\n/- It's not entirely clear we should assume `Nontrivial` at this point; it would be reasonable to\nexplore changing this, but be warned that the instances involving `Domain` may cause typeclass\nsearch loops. -/\n"}
{"name":"LinearOrderedSemiring.max_def","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : LinearOrderedSemiring α\na b : α\n⊢ Eq (Max.max a b) (ite (LE.le a b) b a)","decl":"/-- A `LinearOrderedSemiring` is a nontrivial semiring with a linear order such that\naddition is monotone and multiplication by a positive number is strictly monotone. -/\nclass LinearOrderedSemiring (α : Type u) extends StrictOrderedSemiring α,\n  LinearOrderedAddCommMonoid α\n\n"}
{"name":"LinearOrderedSemiring.min_def","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : LinearOrderedSemiring α\na b : α\n⊢ Eq (Min.min a b) (ite (LE.le a b) a b)","decl":"/-- A `LinearOrderedSemiring` is a nontrivial semiring with a linear order such that\naddition is monotone and multiplication by a positive number is strictly monotone. -/\nclass LinearOrderedSemiring (α : Type u) extends StrictOrderedSemiring α,\n  LinearOrderedAddCommMonoid α\n\n"}
{"name":"LinearOrderedSemiring.le_total","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : LinearOrderedSemiring α\na b : α\n⊢ Or (LE.le a b) (LE.le b a)","decl":"/-- A `LinearOrderedSemiring` is a nontrivial semiring with a linear order such that\naddition is monotone and multiplication by a positive number is strictly monotone. -/\nclass LinearOrderedSemiring (α : Type u) extends StrictOrderedSemiring α,\n  LinearOrderedAddCommMonoid α\n\n"}
{"name":"LinearOrderedSemiring.compare_eq_compareOfLessAndEq","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : LinearOrderedSemiring α\na b : α\n⊢ Eq (Ord.compare a b) (compareOfLessAndEq a b)","decl":"/-- A `LinearOrderedSemiring` is a nontrivial semiring with a linear order such that\naddition is monotone and multiplication by a positive number is strictly monotone. -/\nclass LinearOrderedSemiring (α : Type u) extends StrictOrderedSemiring α,\n  LinearOrderedAddCommMonoid α\n\n"}
{"name":"LinearOrderedCommSemiring.compare_eq_compareOfLessAndEq","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u_1\nself : LinearOrderedCommSemiring α\na b : α\n⊢ Eq (Ord.compare a b) (compareOfLessAndEq a b)","decl":"/-- A `LinearOrderedCommSemiring` is a nontrivial commutative semiring with a linear order such\nthat addition is monotone and multiplication by a positive number is strictly monotone. -/\nclass LinearOrderedCommSemiring (α : Type*) extends StrictOrderedCommSemiring α,\n  LinearOrderedSemiring α\n\n"}
{"name":"LinearOrderedCommSemiring.min_def","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u_1\nself : LinearOrderedCommSemiring α\na b : α\n⊢ Eq (Min.min a b) (ite (LE.le a b) a b)","decl":"/-- A `LinearOrderedCommSemiring` is a nontrivial commutative semiring with a linear order such\nthat addition is monotone and multiplication by a positive number is strictly monotone. -/\nclass LinearOrderedCommSemiring (α : Type*) extends StrictOrderedCommSemiring α,\n  LinearOrderedSemiring α\n\n"}
{"name":"LinearOrderedCommSemiring.le_total","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u_1\nself : LinearOrderedCommSemiring α\na b : α\n⊢ Or (LE.le a b) (LE.le b a)","decl":"/-- A `LinearOrderedCommSemiring` is a nontrivial commutative semiring with a linear order such\nthat addition is monotone and multiplication by a positive number is strictly monotone. -/\nclass LinearOrderedCommSemiring (α : Type*) extends StrictOrderedCommSemiring α,\n  LinearOrderedSemiring α\n\n"}
{"name":"LinearOrderedCommSemiring.max_def","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u_1\nself : LinearOrderedCommSemiring α\na b : α\n⊢ Eq (Max.max a b) (ite (LE.le a b) b a)","decl":"/-- A `LinearOrderedCommSemiring` is a nontrivial commutative semiring with a linear order such\nthat addition is monotone and multiplication by a positive number is strictly monotone. -/\nclass LinearOrderedCommSemiring (α : Type*) extends StrictOrderedCommSemiring α,\n  LinearOrderedSemiring α\n\n"}
{"name":"LinearOrderedRing.compare_eq_compareOfLessAndEq","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : LinearOrderedRing α\na b : α\n⊢ Eq (Ord.compare a b) (compareOfLessAndEq a b)","decl":"/-- A `LinearOrderedRing` is a ring with a linear order such that addition is monotone and\nmultiplication by a positive number is strictly monotone. -/\nclass LinearOrderedRing (α : Type u) extends StrictOrderedRing α, LinearOrder α\n\n"}
{"name":"LinearOrderedRing.max_def","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : LinearOrderedRing α\na b : α\n⊢ Eq (Max.max a b) (ite (LE.le a b) b a)","decl":"/-- A `LinearOrderedRing` is a ring with a linear order such that addition is monotone and\nmultiplication by a positive number is strictly monotone. -/\nclass LinearOrderedRing (α : Type u) extends StrictOrderedRing α, LinearOrder α\n\n"}
{"name":"LinearOrderedRing.min_def","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : LinearOrderedRing α\na b : α\n⊢ Eq (Min.min a b) (ite (LE.le a b) a b)","decl":"/-- A `LinearOrderedRing` is a ring with a linear order such that addition is monotone and\nmultiplication by a positive number is strictly monotone. -/\nclass LinearOrderedRing (α : Type u) extends StrictOrderedRing α, LinearOrder α\n\n"}
{"name":"LinearOrderedRing.le_total","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : LinearOrderedRing α\na b : α\n⊢ Or (LE.le a b) (LE.le b a)","decl":"/-- A `LinearOrderedRing` is a ring with a linear order such that addition is monotone and\nmultiplication by a positive number is strictly monotone. -/\nclass LinearOrderedRing (α : Type u) extends StrictOrderedRing α, LinearOrder α\n\n"}
{"name":"LinearOrderedCommRing.mul_comm","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\nself : LinearOrderedCommRing α\na b : α\n⊢ Eq (HMul.hMul a b) (HMul.hMul b a)","decl":"/-- A `LinearOrderedCommRing` is a commutative ring with a linear order such that addition is\nmonotone and multiplication by a positive number is strictly monotone. -/\nclass LinearOrderedCommRing (α : Type u) extends LinearOrderedRing α, CommMonoid α\n\n"}
{"name":"OrderedSemiring.zeroLEOneClass","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\ninst✝ : OrderedSemiring α\n⊢ ZeroLEOneClass α","decl":"instance (priority := 100) OrderedSemiring.zeroLEOneClass : ZeroLEOneClass α :=\n  { ‹OrderedSemiring α› with }\n\n-- see Note [lower instance priority]\n"}
{"name":"OrderedSemiring.toPosMulMono","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\ninst✝ : OrderedSemiring α\n⊢ PosMulMono α","decl":"instance (priority := 200) OrderedSemiring.toPosMulMono : PosMulMono α :=\n  ⟨fun x _ _ h => OrderedSemiring.mul_le_mul_of_nonneg_left _ _ _ h x.2⟩\n\n-- see Note [lower instance priority]\n"}
{"name":"OrderedSemiring.toMulPosMono","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\ninst✝ : OrderedSemiring α\n⊢ MulPosMono α","decl":"instance (priority := 200) OrderedSemiring.toMulPosMono : MulPosMono α :=\n  ⟨fun x _ _ h => OrderedSemiring.mul_le_mul_of_nonneg_right _ _ _ h x.2⟩\n\n"}
{"name":"one_add_le_one_sub_mul_one_add","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\ninst✝ : OrderedRing α\na b c : α\nh : LE.le (HAdd.hAdd (HAdd.hAdd a b) (HMul.hMul b c)) c\n⊢ LE.le (HAdd.hAdd 1 a) (HMul.hMul (HSub.hSub 1 b) (HAdd.hAdd 1 c))","decl":"lemma one_add_le_one_sub_mul_one_add (h : a + b + b * c ≤ c) : 1 + a ≤ (1 - b) * (1 + c) := by\n  rw [one_sub_mul, mul_one_add, le_sub_iff_add_le, add_assoc, ← add_assoc a]\n  gcongr\n\n"}
{"name":"one_add_le_one_add_mul_one_sub","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\ninst✝ : OrderedRing α\na b c : α\nh : LE.le (HAdd.hAdd (HAdd.hAdd a c) (HMul.hMul b c)) b\n⊢ LE.le (HAdd.hAdd 1 a) (HMul.hMul (HAdd.hAdd 1 b) (HSub.hSub 1 c))","decl":"lemma one_add_le_one_add_mul_one_sub (h : a + c + b * c ≤ b) : 1 + a ≤ (1 + b) * (1 - c) := by\n  rw [mul_one_sub, one_add_mul, le_sub_iff_add_le, add_assoc, ← add_assoc a]\n  gcongr\n\n"}
{"name":"one_sub_le_one_sub_mul_one_add","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\ninst✝ : OrderedRing α\na b c : α\nh : LE.le (HAdd.hAdd b (HMul.hMul b c)) (HAdd.hAdd a c)\n⊢ LE.le (HSub.hSub 1 a) (HMul.hMul (HSub.hSub 1 b) (HAdd.hAdd 1 c))","decl":"lemma one_sub_le_one_sub_mul_one_add (h : b + b * c ≤ a + c) : 1 - a ≤ (1 - b) * (1 + c) := by\n  rw [one_sub_mul, mul_one_add, sub_le_sub_iff, add_assoc, add_comm c]\n  gcongr\n\n"}
{"name":"one_sub_le_one_add_mul_one_sub","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\ninst✝ : OrderedRing α\na b c : α\nh : LE.le (HAdd.hAdd c (HMul.hMul b c)) (HAdd.hAdd a b)\n⊢ LE.le (HSub.hSub 1 a) (HMul.hMul (HAdd.hAdd 1 b) (HSub.hSub 1 c))","decl":"lemma one_sub_le_one_add_mul_one_sub (h : c + b * c ≤ a + b) : 1 - a ≤ (1 + b) * (1 - c) := by\n  rw [mul_one_sub, one_add_mul, sub_le_sub_iff, add_assoc, add_comm b]\n  gcongr\n\n"}
{"name":"StrictOrderedSemiring.toPosMulStrictMono","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\ninst✝ : StrictOrderedSemiring α\n⊢ PosMulStrictMono α","decl":"instance (priority := 200) StrictOrderedSemiring.toPosMulStrictMono : PosMulStrictMono α :=\n  ⟨fun x _ _ h => StrictOrderedSemiring.mul_lt_mul_of_pos_left _ _ _ h x.prop⟩\n\n-- see Note [lower instance priority]\n"}
{"name":"StrictOrderedSemiring.toMulPosStrictMono","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\ninst✝ : StrictOrderedSemiring α\n⊢ MulPosStrictMono α","decl":"instance (priority := 200) StrictOrderedSemiring.toMulPosStrictMono : MulPosStrictMono α :=\n  ⟨fun x _ _ h => StrictOrderedSemiring.mul_lt_mul_of_pos_right _ _ _ h x.prop⟩\n\n-- See note [reducible non-instances]\n"}
{"name":"StrictOrderedSemiring.toCharZero","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\ninst✝ : StrictOrderedSemiring α\n⊢ CharZero α","decl":"instance (priority := 100) StrictOrderedSemiring.toCharZero [StrictOrderedSemiring α] :\n    CharZero α where\n  cast_injective :=\n    (strictMono_nat_of_lt_succ fun n ↦ by rw [Nat.cast_succ]; apply lt_add_one).injective\n\n-- see Note [lower instance priority]\n"}
{"name":"StrictOrderedSemiring.toNoMaxOrder","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\ninst✝ : StrictOrderedSemiring α\n⊢ NoMaxOrder α","decl":"instance (priority := 100) StrictOrderedSemiring.toNoMaxOrder : NoMaxOrder α :=\n  ⟨fun a => ⟨a + 1, lt_add_of_pos_right _ one_pos⟩⟩\n\n"}
{"name":"LinearOrderedSemiring.toPosMulReflectLT","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\ninst✝ : LinearOrderedSemiring α\n⊢ PosMulReflectLT α","decl":"instance (priority := 200) LinearOrderedSemiring.toPosMulReflectLT : PosMulReflectLT α :=\n  ⟨fun a _ _ => (monotone_mul_left_of_nonneg a.2).reflect_lt⟩\n\n-- see Note [lower instance priority]\n"}
{"name":"LinearOrderedSemiring.toMulPosReflectLT","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\ninst✝ : LinearOrderedSemiring α\n⊢ MulPosReflectLT α","decl":"instance (priority := 200) LinearOrderedSemiring.toMulPosReflectLT : MulPosReflectLT α :=\n  ⟨fun a _ _ => (monotone_mul_right_of_nonneg a.2).reflect_lt⟩\n\n"}
{"name":"LinearOrderedSemiring.noZeroDivisors","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\ninst✝ : LinearOrderedSemiring α\n⊢ NoZeroDivisors α","decl":"instance (priority := 100) LinearOrderedSemiring.noZeroDivisors : NoZeroDivisors α where\n  eq_zero_or_eq_zero_of_mul_eq_zero {a b} hab := by\n    contrapose! hab\n    obtain ha | ha := hab.1.lt_or_lt <;> obtain hb | hb := hab.2.lt_or_lt\n    exacts [(mul_pos_of_neg_of_neg ha hb).ne', (mul_neg_of_neg_of_pos ha hb).ne,\n      (mul_neg_of_pos_of_neg ha hb).ne, (mul_pos ha hb).ne']\n\n-- Note that we can't use `NoZeroDivisors.to_isDomain` since we are merely in a semiring.\n-- See note [lower instance priority]\n"}
{"name":"LinearOrderedRing.isDomain","module":"Mathlib.Algebra.Order.Ring.Defs","initialProofState":"α : Type u\ninst✝ : LinearOrderedSemiring α\n⊢ IsDomain α","decl":"instance (priority := 100) LinearOrderedRing.isDomain : IsDomain α where\n  mul_left_cancel_of_ne_zero {a b c} ha h := by\n    obtain ha | ha := ha.lt_or_lt\n    exacts [(strictAnti_mul_left ha).injective h, (strictMono_mul_left_of_pos ha).injective h]\n  mul_right_cancel_of_ne_zero {b a c} ha h := by\n    obtain ha | ha := ha.lt_or_lt\n    exacts [(strictAnti_mul_right ha).injective h, (strictMono_mul_right_of_pos ha).injective h]\n\n-- See note [lower instance priority]\n"}
