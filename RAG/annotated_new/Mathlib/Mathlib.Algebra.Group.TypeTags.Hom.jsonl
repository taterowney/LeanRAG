{"name":"AddMonoidHom.toMultiplicative_symm_apply_apply","module":"Mathlib.Algebra.Group.TypeTags.Hom","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : AddZeroClass α\ninst✝ : AddZeroClass β\nf : MonoidHom (Multiplicative α) (Multiplicative β)\na : α\n⊢ Eq ((AddMonoidHom.toMultiplicative.symm f) a) (Multiplicative.toAdd (f (Multiplicative.ofAdd a)))","decl":"/-- Reinterpret `α →+ β` as `Multiplicative α →* Multiplicative β`. -/\n@[simps]\ndef AddMonoidHom.toMultiplicative [AddZeroClass α] [AddZeroClass β] :\n    (α →+ β) ≃ (Multiplicative α →* Multiplicative β) where\n  toFun f := {\n    toFun := fun a => ofAdd (f a.toAdd)\n    map_mul' := f.map_add\n    map_one' := f.map_zero\n  }\n  invFun f := {\n    toFun := fun a => f (ofAdd a) |>.toAdd\n    map_add' := f.map_mul\n    map_zero' := f.map_one\n  }\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"AddMonoidHom.toMultiplicative_apply_apply","module":"Mathlib.Algebra.Group.TypeTags.Hom","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : AddZeroClass α\ninst✝ : AddZeroClass β\nf : AddMonoidHom α β\na : Multiplicative α\n⊢ Eq ((AddMonoidHom.toMultiplicative f) a) (Multiplicative.ofAdd (f (Multiplicative.toAdd a)))","decl":"/-- Reinterpret `α →+ β` as `Multiplicative α →* Multiplicative β`. -/\n@[simps]\ndef AddMonoidHom.toMultiplicative [AddZeroClass α] [AddZeroClass β] :\n    (α →+ β) ≃ (Multiplicative α →* Multiplicative β) where\n  toFun f := {\n    toFun := fun a => ofAdd (f a.toAdd)\n    map_mul' := f.map_add\n    map_one' := f.map_zero\n  }\n  invFun f := {\n    toFun := fun a => f (ofAdd a) |>.toAdd\n    map_add' := f.map_mul\n    map_zero' := f.map_one\n  }\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"AddMonoidHom.coe_toMultiplicative","module":"Mathlib.Algebra.Group.TypeTags.Hom","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : AddZeroClass α\ninst✝ : AddZeroClass β\nf : AddMonoidHom α β\n⊢ Eq (⇑(AddMonoidHom.toMultiplicative f)) (Function.comp (⇑Multiplicative.ofAdd) (Function.comp ⇑f ⇑Multiplicative.toAdd))","decl":"@[simp, norm_cast]\nlemma AddMonoidHom.coe_toMultiplicative [AddZeroClass α] [AddZeroClass β] (f : α →+ β) :\n    ⇑(toMultiplicative f) = ofAdd ∘ f ∘ toAdd := rfl\n\n"}
{"name":"MonoidHom.toAdditive_apply_apply","module":"Mathlib.Algebra.Group.TypeTags.Hom","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : MulOneClass α\ninst✝ : MulOneClass β\nf : MonoidHom α β\na : Additive α\n⊢ Eq ((MonoidHom.toAdditive f) a) (Additive.ofMul (f (Additive.toMul a)))","decl":"/-- Reinterpret `α →* β` as `Additive α →+ Additive β`. -/\n@[simps]\ndef MonoidHom.toAdditive [MulOneClass α] [MulOneClass β] :\n    (α →* β) ≃ (Additive α →+ Additive β) where\n  toFun f := {\n    toFun := fun a => ofMul (f a.toMul)\n    map_add' := f.map_mul\n    map_zero' := f.map_one\n  }\n  invFun f := {\n    toFun := fun a => (f (ofMul a)).toMul\n    map_mul' := f.map_add\n    map_one' := f.map_zero\n  }\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"MonoidHom.toAdditive_symm_apply_apply","module":"Mathlib.Algebra.Group.TypeTags.Hom","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : MulOneClass α\ninst✝ : MulOneClass β\nf : AddMonoidHom (Additive α) (Additive β)\na : α\n⊢ Eq ((MonoidHom.toAdditive.symm f) a) (Additive.toMul (f (Additive.ofMul a)))","decl":"/-- Reinterpret `α →* β` as `Additive α →+ Additive β`. -/\n@[simps]\ndef MonoidHom.toAdditive [MulOneClass α] [MulOneClass β] :\n    (α →* β) ≃ (Additive α →+ Additive β) where\n  toFun f := {\n    toFun := fun a => ofMul (f a.toMul)\n    map_add' := f.map_mul\n    map_zero' := f.map_one\n  }\n  invFun f := {\n    toFun := fun a => (f (ofMul a)).toMul\n    map_mul' := f.map_add\n    map_one' := f.map_zero\n  }\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"MonoidHom.coe_toMultiplicative","module":"Mathlib.Algebra.Group.TypeTags.Hom","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : MulOneClass α\ninst✝ : MulOneClass β\nf : MonoidHom α β\n⊢ Eq (⇑(MonoidHom.toAdditive f)) (Function.comp (⇑Additive.ofMul) (Function.comp ⇑f ⇑Additive.toMul))","decl":"@[simp, norm_cast]\nlemma MonoidHom.coe_toMultiplicative [MulOneClass α] [MulOneClass β] (f : α →* β) :\n    ⇑(toAdditive f) = ofMul ∘ f ∘ toMul := rfl\n\n"}
{"name":"AddMonoidHom.toMultiplicative'_apply_apply","module":"Mathlib.Algebra.Group.TypeTags.Hom","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : MulOneClass α\ninst✝ : AddZeroClass β\nf : AddMonoidHom (Additive α) β\na : α\n⊢ Eq ((AddMonoidHom.toMultiplicative' f) a) (Multiplicative.ofAdd (f (Additive.ofMul a)))","decl":"/-- Reinterpret `Additive α →+ β` as `α →* Multiplicative β`. -/\n@[simps]\ndef AddMonoidHom.toMultiplicative' [MulOneClass α] [AddZeroClass β] :\n    (Additive α →+ β) ≃ (α →* Multiplicative β) where\n  toFun f := {\n    toFun := fun a => ofAdd (f (ofMul a))\n    map_mul' := f.map_add\n    map_one' := f.map_zero\n  }\n  invFun f := {\n    toFun := fun a => (f a.toMul).toAdd\n    map_add' := f.map_mul\n    map_zero' := f.map_one\n  }\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"AddMonoidHom.toMultiplicative'_symm_apply_apply","module":"Mathlib.Algebra.Group.TypeTags.Hom","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : MulOneClass α\ninst✝ : AddZeroClass β\nf : MonoidHom α (Multiplicative β)\na : Additive α\n⊢ Eq ((AddMonoidHom.toMultiplicative'.symm f) a) (Multiplicative.toAdd (f (Additive.toMul a)))","decl":"/-- Reinterpret `Additive α →+ β` as `α →* Multiplicative β`. -/\n@[simps]\ndef AddMonoidHom.toMultiplicative' [MulOneClass α] [AddZeroClass β] :\n    (Additive α →+ β) ≃ (α →* Multiplicative β) where\n  toFun f := {\n    toFun := fun a => ofAdd (f (ofMul a))\n    map_mul' := f.map_add\n    map_one' := f.map_zero\n  }\n  invFun f := {\n    toFun := fun a => (f a.toMul).toAdd\n    map_add' := f.map_mul\n    map_zero' := f.map_one\n  }\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"AddMonoidHom.coe_toMultiplicative'","module":"Mathlib.Algebra.Group.TypeTags.Hom","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : MulOneClass α\ninst✝ : AddZeroClass β\nf : AddMonoidHom (Additive α) β\n⊢ Eq (⇑(AddMonoidHom.toMultiplicative' f)) (Function.comp (⇑Multiplicative.ofAdd) (Function.comp ⇑f ⇑Additive.ofMul))","decl":"@[simp, norm_cast]\nlemma AddMonoidHom.coe_toMultiplicative' [MulOneClass α] [AddZeroClass β] (f : Additive α →+ β) :\n    ⇑(toMultiplicative' f) = ofAdd ∘ f ∘ ofMul := rfl\n\n"}
{"name":"MonoidHom.toAdditive'_symm_apply_apply","module":"Mathlib.Algebra.Group.TypeTags.Hom","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : MulOneClass α\ninst✝ : AddZeroClass β\na✝ : AddMonoidHom (Additive α) β\na : α\n⊢ Eq ((MonoidHom.toAdditive'.symm a✝) a) (Multiplicative.ofAdd (a✝ (Additive.ofMul a)))","decl":"/-- Reinterpret `α →* Multiplicative β` as `Additive α →+ β`. -/\n@[simps!]\ndef MonoidHom.toAdditive' [MulOneClass α] [AddZeroClass β] :\n    (α →* Multiplicative β) ≃ (Additive α →+ β) :=\n  AddMonoidHom.toMultiplicative'.symm\n\n"}
{"name":"MonoidHom.toAdditive'_apply_apply","module":"Mathlib.Algebra.Group.TypeTags.Hom","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : MulOneClass α\ninst✝ : AddZeroClass β\na✝ : MonoidHom α (Multiplicative β)\na : Additive α\n⊢ Eq ((MonoidHom.toAdditive' a✝) a) (Multiplicative.toAdd (a✝ (Additive.toMul a)))","decl":"/-- Reinterpret `α →* Multiplicative β` as `Additive α →+ β`. -/\n@[simps!]\ndef MonoidHom.toAdditive' [MulOneClass α] [AddZeroClass β] :\n    (α →* Multiplicative β) ≃ (Additive α →+ β) :=\n  AddMonoidHom.toMultiplicative'.symm\n\n"}
{"name":"MonoidHom.coe_toAdditive'","module":"Mathlib.Algebra.Group.TypeTags.Hom","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : MulOneClass α\ninst✝ : AddZeroClass β\nf : MonoidHom α (Multiplicative β)\n⊢ Eq (⇑(MonoidHom.toAdditive' f)) (Function.comp (⇑Multiplicative.toAdd) (Function.comp ⇑f ⇑Additive.toMul))","decl":"@[simp, norm_cast]\nlemma MonoidHom.coe_toAdditive' [MulOneClass α] [AddZeroClass β] (f : α →* Multiplicative β) :\n    ⇑(toAdditive' f) = toAdd ∘ f ∘ toMul := rfl\n\n"}
{"name":"AddMonoidHom.toMultiplicative''_apply_apply","module":"Mathlib.Algebra.Group.TypeTags.Hom","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : AddZeroClass α\ninst✝ : MulOneClass β\nf : AddMonoidHom α (Additive β)\na : Multiplicative α\n⊢ Eq ((AddMonoidHom.toMultiplicative'' f) a) (Additive.toMul (f (Multiplicative.toAdd a)))","decl":"/-- Reinterpret `α →+ Additive β` as `Multiplicative α →* β`. -/\n@[simps]\ndef AddMonoidHom.toMultiplicative'' [AddZeroClass α] [MulOneClass β] :\n    (α →+ Additive β) ≃ (Multiplicative α →* β) where\n  toFun f := {\n    toFun := fun a => (f a.toAdd).toMul\n    map_mul' := f.map_add\n    map_one' := f.map_zero\n  }\n  invFun f := {\n    toFun := fun a => ofMul (f (ofAdd a))\n    map_add' := f.map_mul\n    map_zero' := f.map_one\n  }\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"AddMonoidHom.toMultiplicative''_symm_apply_apply","module":"Mathlib.Algebra.Group.TypeTags.Hom","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : AddZeroClass α\ninst✝ : MulOneClass β\nf : MonoidHom (Multiplicative α) β\na : α\n⊢ Eq ((AddMonoidHom.toMultiplicative''.symm f) a) (Additive.ofMul (f (Multiplicative.ofAdd a)))","decl":"/-- Reinterpret `α →+ Additive β` as `Multiplicative α →* β`. -/\n@[simps]\ndef AddMonoidHom.toMultiplicative'' [AddZeroClass α] [MulOneClass β] :\n    (α →+ Additive β) ≃ (Multiplicative α →* β) where\n  toFun f := {\n    toFun := fun a => (f a.toAdd).toMul\n    map_mul' := f.map_add\n    map_one' := f.map_zero\n  }\n  invFun f := {\n    toFun := fun a => ofMul (f (ofAdd a))\n    map_add' := f.map_mul\n    map_zero' := f.map_one\n  }\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"AddMonoidHom.coe_toMultiplicative''","module":"Mathlib.Algebra.Group.TypeTags.Hom","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : AddZeroClass α\ninst✝ : MulOneClass β\nf : AddMonoidHom α (Additive β)\n⊢ Eq (⇑(AddMonoidHom.toMultiplicative'' f)) (Function.comp (⇑Additive.toMul) (Function.comp ⇑f ⇑Multiplicative.toAdd))","decl":"@[simp, norm_cast]\nlemma AddMonoidHom.coe_toMultiplicative'' [AddZeroClass α] [MulOneClass β] (f : α →+ Additive β) :\n    ⇑(toMultiplicative'' f) = toMul ∘ f ∘ toAdd := rfl\n\n"}
{"name":"MonoidHom.toAdditive''_apply_apply","module":"Mathlib.Algebra.Group.TypeTags.Hom","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : AddZeroClass α\ninst✝ : MulOneClass β\na✝ : MonoidHom (Multiplicative α) β\na : α\n⊢ Eq ((MonoidHom.toAdditive'' a✝) a) (Additive.ofMul (a✝ (Multiplicative.ofAdd a)))","decl":"/-- Reinterpret `Multiplicative α →* β` as `α →+ Additive β`. -/\n@[simps!]\ndef MonoidHom.toAdditive'' [AddZeroClass α] [MulOneClass β] :\n    (Multiplicative α →* β) ≃ (α →+ Additive β) :=\n  AddMonoidHom.toMultiplicative''.symm\n\n"}
{"name":"MonoidHom.toAdditive''_symm_apply_apply","module":"Mathlib.Algebra.Group.TypeTags.Hom","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : AddZeroClass α\ninst✝ : MulOneClass β\na✝ : AddMonoidHom α (Additive β)\na : Multiplicative α\n⊢ Eq ((MonoidHom.toAdditive''.symm a✝) a) (Additive.toMul (a✝ (Multiplicative.toAdd a)))","decl":"/-- Reinterpret `Multiplicative α →* β` as `α →+ Additive β`. -/\n@[simps!]\ndef MonoidHom.toAdditive'' [AddZeroClass α] [MulOneClass β] :\n    (Multiplicative α →* β) ≃ (α →+ Additive β) :=\n  AddMonoidHom.toMultiplicative''.symm\n\n"}
{"name":"MonoidHom.coe_toAdditive''","module":"Mathlib.Algebra.Group.TypeTags.Hom","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : AddZeroClass α\ninst✝ : MulOneClass β\nf : MonoidHom (Multiplicative α) β\n⊢ Eq (⇑(MonoidHom.toAdditive'' f)) (Function.comp (⇑Additive.ofMul) (Function.comp ⇑f ⇑Multiplicative.ofAdd))","decl":"@[simp, norm_cast]\nlemma MonoidHom.coe_toAdditive'' [AddZeroClass α] [MulOneClass β] (f : Multiplicative α →* β) :\n    ⇑(toAdditive'' f) = ofMul ∘ f ∘ ofAdd := rfl\n"}
