{"name":"taylorWithin_succ","module":"Mathlib.Analysis.Calculus.Taylor","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : Real → E\nn : Nat\ns : Set Real\nx₀ : Real\n⊢ Eq (taylorWithin f (HAdd.hAdd n 1) s x₀) (HAdd.hAdd (taylorWithin f n s x₀) ((PolynomialModule.comp (HSub.hSub Polynomial.X (Polynomial.C x₀))) ((PolynomialModule.single Real (HAdd.hAdd n 1)) (taylorCoeffWithin f (HAdd.hAdd n 1) s x₀))))","decl":"theorem taylorWithin_succ (f : ℝ → E) (n : ℕ) (s : Set ℝ) (x₀ : ℝ) :\n    taylorWithin f (n + 1) s x₀ = taylorWithin f n s x₀ +\n      PolynomialModule.comp (Polynomial.X - Polynomial.C x₀)\n      (PolynomialModule.single ℝ (n + 1) (taylorCoeffWithin f (n + 1) s x₀)) := by\n  dsimp only [taylorWithin]\n  rw [Finset.sum_range_succ]\n\n"}
{"name":"taylorWithinEval_succ","module":"Mathlib.Analysis.Calculus.Taylor","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : Real → E\nn : Nat\ns : Set Real\nx₀ x : Real\n⊢ Eq (taylorWithinEval f (HAdd.hAdd n 1) s x₀ x) (HAdd.hAdd (taylorWithinEval f n s x₀ x) (HSMul.hSMul (HMul.hMul (Inv.inv (HMul.hMul (HAdd.hAdd (↑n) 1) ↑n.factorial)) (HPow.hPow (HSub.hSub x x₀) (HAdd.hAdd n 1))) (iteratedDerivWithin (HAdd.hAdd n 1) f s x₀)))","decl":"@[simp]\ntheorem taylorWithinEval_succ (f : ℝ → E) (n : ℕ) (s : Set ℝ) (x₀ x : ℝ) :\n    taylorWithinEval f (n + 1) s x₀ x = taylorWithinEval f n s x₀ x +\n      (((n + 1 : ℝ) * n !)⁻¹ * (x - x₀) ^ (n + 1)) • iteratedDerivWithin (n + 1) f s x₀ := by\n  simp_rw [taylorWithinEval, taylorWithin_succ, LinearMap.map_add, PolynomialModule.comp_eval]\n  congr\n  simp only [Polynomial.eval_sub, Polynomial.eval_X, Polynomial.eval_C,\n    PolynomialModule.eval_single, mul_inv_rev]\n  dsimp only [taylorCoeffWithin]\n  rw [← mul_smul, mul_comm, Nat.factorial_succ, Nat.cast_mul, Nat.cast_add, Nat.cast_one,\n    mul_inv_rev]\n\n"}
{"name":"taylor_within_zero_eval","module":"Mathlib.Analysis.Calculus.Taylor","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : Real → E\ns : Set Real\nx₀ x : Real\n⊢ Eq (taylorWithinEval f 0 s x₀ x) (f x₀)","decl":"/-- The Taylor polynomial of order zero evaluates to `f x`. -/\n@[simp]\ntheorem taylor_within_zero_eval (f : ℝ → E) (s : Set ℝ) (x₀ x : ℝ) :\n    taylorWithinEval f 0 s x₀ x = f x₀ := by\n  dsimp only [taylorWithinEval]\n  dsimp only [taylorWithin]\n  dsimp only [taylorCoeffWithin]\n  simp\n\n"}
{"name":"taylorWithinEval_self","module":"Mathlib.Analysis.Calculus.Taylor","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : Real → E\nn : Nat\ns : Set Real\nx₀ : Real\n⊢ Eq (taylorWithinEval f n s x₀ x₀) (f x₀)","decl":"/-- Evaluating the Taylor polynomial at `x = x₀` yields `f x`. -/\n@[simp]\ntheorem taylorWithinEval_self (f : ℝ → E) (n : ℕ) (s : Set ℝ) (x₀ : ℝ) :\n    taylorWithinEval f n s x₀ x₀ = f x₀ := by\n  induction n with\n  | zero => exact taylor_within_zero_eval _ _ _ _\n  | succ k hk => simp [hk]\n\n"}
{"name":"taylor_within_apply","module":"Mathlib.Analysis.Calculus.Taylor","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : Real → E\nn : Nat\ns : Set Real\nx₀ x : Real\n⊢ Eq (taylorWithinEval f n s x₀ x) ((Finset.range (HAdd.hAdd n 1)).sum fun k => HSMul.hSMul (HMul.hMul (Inv.inv ↑k.factorial) (HPow.hPow (HSub.hSub x x₀) k)) (iteratedDerivWithin k f s x₀))","decl":"theorem taylor_within_apply (f : ℝ → E) (n : ℕ) (s : Set ℝ) (x₀ x : ℝ) :\n    taylorWithinEval f n s x₀ x =\n      ∑ k ∈ Finset.range (n + 1), ((k ! : ℝ)⁻¹ * (x - x₀) ^ k) • iteratedDerivWithin k f s x₀ := by\n  induction n with\n  | zero => simp\n  | succ k hk =>\n    rw [taylorWithinEval_succ, Finset.sum_range_succ, hk]\n    simp [Nat.factorial]\n\n"}
{"name":"continuousOn_taylorWithinEval","module":"Mathlib.Analysis.Calculus.Taylor","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : Real → E\nx : Real\nn : Nat\ns : Set Real\nhs : UniqueDiffOn Real s\nhf : ContDiffOn Real (↑n) f s\n⊢ ContinuousOn (fun t => taylorWithinEval f n s t x) s","decl":"/-- If `f` is `n` times continuous differentiable on a set `s`, then the Taylor polynomial\n  `taylorWithinEval f n s x₀ x` is continuous in `x₀`. -/\ntheorem continuousOn_taylorWithinEval {f : ℝ → E} {x : ℝ} {n : ℕ} {s : Set ℝ}\n    (hs : UniqueDiffOn ℝ s) (hf : ContDiffOn ℝ n f s) :\n    ContinuousOn (fun t => taylorWithinEval f n s t x) s := by\n  simp_rw [taylor_within_apply]\n  refine continuousOn_finset_sum (Finset.range (n + 1)) fun i hi => ?_\n  refine (continuousOn_const.mul ((continuousOn_const.sub continuousOn_id).pow _)).smul ?_\n  rw [contDiffOn_nat_iff_continuousOn_differentiableOn_deriv hs] at hf\n  cases' hf with hf_left\n  specialize hf_left i\n  simp only [Finset.mem_range] at hi\n  refine hf_left ?_\n  simp only [WithTop.coe_le_coe, Nat.cast_le, Nat.lt_succ_iff.mp hi]\n\n"}
{"name":"monomial_has_deriv_aux","module":"Mathlib.Analysis.Calculus.Taylor","initialProofState":"t x : Real\nn : Nat\n⊢ HasDerivAt (fun y => HPow.hPow (HSub.hSub x y) (HAdd.hAdd n 1)) (HMul.hMul (Neg.neg (HAdd.hAdd (↑n) 1)) (HPow.hPow (HSub.hSub x t) n)) t","decl":"/-- Helper lemma for calculating the derivative of the monomial that appears in Taylor\nexpansions. -/\ntheorem monomial_has_deriv_aux (t x : ℝ) (n : ℕ) :\n    HasDerivAt (fun y => (x - y) ^ (n + 1)) (-(n + 1) * (x - t) ^ n) t := by\n  simp_rw [sub_eq_neg_add]\n  rw [← neg_one_mul, mul_comm (-1 : ℝ), mul_assoc, mul_comm (-1 : ℝ), ← mul_assoc]\n  convert HasDerivAt.pow (n + 1) ((hasDerivAt_id t).neg.add_const x)\n  simp only [Nat.cast_add, Nat.cast_one]\n\n"}
{"name":"hasDerivWithinAt_taylor_coeff_within","module":"Mathlib.Analysis.Calculus.Taylor","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : Real → E\nx y : Real\nk : Nat\ns t : Set Real\nht : UniqueDiffWithinAt Real t y\nhs : Membership.mem (nhdsWithin y t) s\nhf : DifferentiableWithinAt Real (iteratedDerivWithin (HAdd.hAdd k 1) f s) s y\n⊢ HasDerivWithinAt (fun z => HSMul.hSMul (HMul.hMul (Inv.inv (HMul.hMul (HAdd.hAdd (↑k) 1) ↑k.factorial)) (HPow.hPow (HSub.hSub x z) (HAdd.hAdd k 1))) (iteratedDerivWithin (HAdd.hAdd k 1) f s z)) (HSub.hSub (HSMul.hSMul (HMul.hMul (Inv.inv (HMul.hMul (HAdd.hAdd (↑k) 1) ↑k.factorial)) (HPow.hPow (HSub.hSub x y) (HAdd.hAdd k 1))) (iteratedDerivWithin (HAdd.hAdd k 2) f s y)) (HSMul.hSMul (HMul.hMul (Inv.inv ↑k.factorial) (HPow.hPow (HSub.hSub x y) k)) (iteratedDerivWithin (HAdd.hAdd k 1) f s y))) t y","decl":"theorem hasDerivWithinAt_taylor_coeff_within {f : ℝ → E} {x y : ℝ} {k : ℕ} {s t : Set ℝ}\n    (ht : UniqueDiffWithinAt ℝ t y) (hs : s ∈ 𝓝[t] y)\n    (hf : DifferentiableWithinAt ℝ (iteratedDerivWithin (k + 1) f s) s y) :\n    HasDerivWithinAt\n      (fun z => (((k + 1 : ℝ) * k !)⁻¹ * (x - z) ^ (k + 1)) • iteratedDerivWithin (k + 1) f s z)\n      ((((k + 1 : ℝ) * k !)⁻¹ * (x - y) ^ (k + 1)) • iteratedDerivWithin (k + 2) f s y -\n        ((k ! : ℝ)⁻¹ * (x - y) ^ k) • iteratedDerivWithin (k + 1) f s y) t y := by\n  replace hf :\n    HasDerivWithinAt (iteratedDerivWithin (k + 1) f s) (iteratedDerivWithin (k + 2) f s y) t y := by\n    convert (hf.mono_of_mem_nhdsWithin hs).hasDerivWithinAt using 1\n    rw [iteratedDerivWithin_succ]\n    exact (derivWithin_of_mem_nhdsWithin hs ht hf).symm\n  have : HasDerivWithinAt (fun t => ((k + 1 : ℝ) * k !)⁻¹ * (x - t) ^ (k + 1))\n      (-((k ! : ℝ)⁻¹ * (x - y) ^ k)) t y := by\n    -- Commuting the factors:\n    have : -((k ! : ℝ)⁻¹ * (x - y) ^ k) = ((k + 1 : ℝ) * k !)⁻¹ * (-(k + 1) * (x - y) ^ k) := by\n      field_simp; ring\n    rw [this]\n    exact (monomial_has_deriv_aux y x _).hasDerivWithinAt.const_mul _\n  convert this.smul hf using 1\n  field_simp\n  rw [neg_div, neg_smul, sub_eq_add_neg]\n\n"}
{"name":"hasDerivWithinAt_taylorWithinEval","module":"Mathlib.Analysis.Calculus.Taylor","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : Real → E\nx y : Real\nn : Nat\ns s' : Set Real\nhs_unique : UniqueDiffOn Real s\nhs' : Membership.mem (nhdsWithin y s) s'\nhy : Membership.mem s' y\nh : HasSubset.Subset s' s\nhf : ContDiffOn Real (↑n) f s\nhf' : DifferentiableWithinAt Real (iteratedDerivWithin n f s) s y\n⊢ HasDerivWithinAt (fun t => taylorWithinEval f n s t x) (HSMul.hSMul (HMul.hMul (Inv.inv ↑n.factorial) (HPow.hPow (HSub.hSub x y) n)) (iteratedDerivWithin (HAdd.hAdd n 1) f s y)) s' y","decl":"/-- Calculate the derivative of the Taylor polynomial with respect to `x₀`.\n\nVersion for arbitrary sets -/\ntheorem hasDerivWithinAt_taylorWithinEval {f : ℝ → E} {x y : ℝ} {n : ℕ} {s s' : Set ℝ}\n    (hs_unique : UniqueDiffOn ℝ s) (hs' : s' ∈ 𝓝[s] y)\n    (hy : y ∈ s') (h : s' ⊆ s) (hf : ContDiffOn ℝ n f s)\n    (hf' : DifferentiableWithinAt ℝ (iteratedDerivWithin n f s) s y) :\n    HasDerivWithinAt (fun t => taylorWithinEval f n s t x)\n      (((n ! : ℝ)⁻¹ * (x - y) ^ n) • iteratedDerivWithin (n + 1) f s y) s' y := by\n  have hs'_unique : UniqueDiffWithinAt ℝ s' y :=\n    UniqueDiffWithinAt.mono_nhds (hs_unique _ (h hy)) (nhdsWithin_le_iff.mpr hs')\n  induction n with\n  | zero =>\n    simp only [taylor_within_zero_eval, Nat.factorial_zero, Nat.cast_one, inv_one, pow_zero,\n      mul_one, zero_add, one_smul]\n    simp only [iteratedDerivWithin_zero] at hf'\n    rw [iteratedDerivWithin_one]\n    exact hf'.hasDerivWithinAt.mono h\n  | succ k hk =>\n    simp_rw [Nat.add_succ, taylorWithinEval_succ]\n    simp only [add_zero, Nat.factorial_succ, Nat.cast_mul, Nat.cast_add, Nat.cast_one]\n    have coe_lt_succ : (k : WithTop ℕ) < k.succ := Nat.cast_lt.2 k.lt_succ_self\n    have hdiff : DifferentiableOn ℝ (iteratedDerivWithin k f s) s' :=\n      (hf.differentiableOn_iteratedDerivWithin (mod_cast coe_lt_succ) hs_unique).mono h\n    specialize hk hf.of_succ ((hdiff y hy).mono_of_mem_nhdsWithin hs')\n    convert hk.add (hasDerivWithinAt_taylor_coeff_within hs'_unique\n      (nhdsWithin_mono _ h self_mem_nhdsWithin) hf') using 1\n    exact (add_sub_cancel _ _).symm\n\n"}
{"name":"taylorWithinEval_hasDerivAt_Ioo","module":"Mathlib.Analysis.Calculus.Taylor","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : Real → E\na b t x : Real\nn : Nat\nhx : LT.lt a b\nht : Membership.mem (Set.Ioo a b) t\nhf : ContDiffOn Real (↑n) f (Set.Icc a b)\nhf' : DifferentiableOn Real (iteratedDerivWithin n f (Set.Icc a b)) (Set.Ioo a b)\n⊢ HasDerivAt (fun y => taylorWithinEval f n (Set.Icc a b) y x) (HSMul.hSMul (HMul.hMul (Inv.inv ↑n.factorial) (HPow.hPow (HSub.hSub x t) n)) (iteratedDerivWithin (HAdd.hAdd n 1) f (Set.Icc a b) t)) t","decl":"/-- Calculate the derivative of the Taylor polynomial with respect to `x₀`.\n\nVersion for open intervals -/\ntheorem taylorWithinEval_hasDerivAt_Ioo {f : ℝ → E} {a b t : ℝ} (x : ℝ) {n : ℕ} (hx : a < b)\n    (ht : t ∈ Ioo a b) (hf : ContDiffOn ℝ n f (Icc a b))\n    (hf' : DifferentiableOn ℝ (iteratedDerivWithin n f (Icc a b)) (Ioo a b)) :\n    HasDerivAt (fun y => taylorWithinEval f n (Icc a b) y x)\n      (((n ! : ℝ)⁻¹ * (x - t) ^ n) • iteratedDerivWithin (n + 1) f (Icc a b) t) t :=\n  have h_nhds : Ioo a b ∈ 𝓝 t := isOpen_Ioo.mem_nhds ht\n  have h_nhds' : Ioo a b ∈ 𝓝[Icc a b] t := nhdsWithin_le_nhds h_nhds\n  (hasDerivWithinAt_taylorWithinEval (uniqueDiffOn_Icc hx) h_nhds' ht\n    Ioo_subset_Icc_self hf <| (hf' t ht).mono_of_mem_nhdsWithin h_nhds').hasDerivAt h_nhds\n\n"}
{"name":"hasDerivWithinAt_taylorWithinEval_at_Icc","module":"Mathlib.Analysis.Calculus.Taylor","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : Real → E\na b t x : Real\nn : Nat\nhx : LT.lt a b\nht : Membership.mem (Set.Icc a b) t\nhf : ContDiffOn Real (↑n) f (Set.Icc a b)\nhf' : DifferentiableOn Real (iteratedDerivWithin n f (Set.Icc a b)) (Set.Icc a b)\n⊢ HasDerivWithinAt (fun y => taylorWithinEval f n (Set.Icc a b) y x) (HSMul.hSMul (HMul.hMul (Inv.inv ↑n.factorial) (HPow.hPow (HSub.hSub x t) n)) (iteratedDerivWithin (HAdd.hAdd n 1) f (Set.Icc a b) t)) (Set.Icc a b) t","decl":"/-- Calculate the derivative of the Taylor polynomial with respect to `x₀`.\n\nVersion for closed intervals -/\ntheorem hasDerivWithinAt_taylorWithinEval_at_Icc {f : ℝ → E} {a b t : ℝ} (x : ℝ) {n : ℕ}\n    (hx : a < b) (ht : t ∈ Icc a b) (hf : ContDiffOn ℝ n f (Icc a b))\n    (hf' : DifferentiableOn ℝ (iteratedDerivWithin n f (Icc a b)) (Icc a b)) :\n    HasDerivWithinAt (fun y => taylorWithinEval f n (Icc a b) y x)\n      (((n ! : ℝ)⁻¹ * (x - t) ^ n) • iteratedDerivWithin (n + 1) f (Icc a b) t) (Icc a b) t :=\n  hasDerivWithinAt_taylorWithinEval (uniqueDiffOn_Icc hx)\n    self_mem_nhdsWithin ht rfl.subset hf (hf' t ht)\n\n"}
{"name":"taylor_mean_remainder","module":"Mathlib.Analysis.Calculus.Taylor","initialProofState":"f g g' : Real → Real\nx x₀ : Real\nn : Nat\nhx : LT.lt x₀ x\nhf : ContDiffOn Real (↑n) f (Set.Icc x₀ x)\nhf' : DifferentiableOn Real (iteratedDerivWithin n f (Set.Icc x₀ x)) (Set.Ioo x₀ x)\ngcont : ContinuousOn g (Set.Icc x₀ x)\ngdiff : ∀ (x_1 : Real), Membership.mem (Set.Ioo x₀ x) x_1 → HasDerivAt g (g' x_1) x_1\ng'_ne : ∀ (x_1 : Real), Membership.mem (Set.Ioo x₀ x) x_1 → Ne (g' x_1) 0\n⊢ Exists fun x' => And (Membership.mem (Set.Ioo x₀ x) x') (Eq (HSub.hSub (f x) (taylorWithinEval f n (Set.Icc x₀ x) x₀ x)) (HSMul.hSMul (HDiv.hDiv (HMul.hMul (HDiv.hDiv (HPow.hPow (HSub.hSub x x') n) ↑n.factorial) (HSub.hSub (g x) (g x₀))) (g' x')) (iteratedDerivWithin (HAdd.hAdd n 1) f (Set.Icc x₀ x) x')))","decl":"/-- **Taylor's theorem** with the general mean value form of the remainder.\n\nWe assume that `f` is `n+1`-times continuously differentiable in the closed set `Icc x₀ x` and\n`n+1`-times differentiable on the open set `Ioo x₀ x`, and `g` is a differentiable function on\n`Ioo x₀ x` and continuous on `Icc x₀ x`. Then there exists an `x' ∈ Ioo x₀ x` such that\n$$f(x) - (P_n f)(x₀, x) = \\frac{(x - x')^n}{n!} \\frac{g(x) - g(x₀)}{g' x'},$$\nwhere $P_n f$ denotes the Taylor polynomial of degree $n$. -/\ntheorem taylor_mean_remainder {f : ℝ → ℝ} {g g' : ℝ → ℝ} {x x₀ : ℝ} {n : ℕ} (hx : x₀ < x)\n    (hf : ContDiffOn ℝ n f (Icc x₀ x))\n    (hf' : DifferentiableOn ℝ (iteratedDerivWithin n f (Icc x₀ x)) (Ioo x₀ x))\n    (gcont : ContinuousOn g (Icc x₀ x))\n    (gdiff : ∀ x_1 : ℝ, x_1 ∈ Ioo x₀ x → HasDerivAt g (g' x_1) x_1)\n    (g'_ne : ∀ x_1 : ℝ, x_1 ∈ Ioo x₀ x → g' x_1 ≠ 0) :\n    ∃ x' ∈ Ioo x₀ x, f x - taylorWithinEval f n (Icc x₀ x) x₀ x =\n    ((x - x') ^ n / n ! * (g x - g x₀) / g' x') • iteratedDerivWithin (n + 1) f (Icc x₀ x) x' := by\n  -- We apply the mean value theorem\n  rcases exists_ratio_hasDerivAt_eq_ratio_slope (fun t => taylorWithinEval f n (Icc x₀ x) t x)\n      (fun t => ((n ! : ℝ)⁻¹ * (x - t) ^ n) • iteratedDerivWithin (n + 1) f (Icc x₀ x) t) hx\n      (continuousOn_taylorWithinEval (uniqueDiffOn_Icc hx) hf)\n      (fun _ hy => taylorWithinEval_hasDerivAt_Ioo x hx hy hf hf') g g' gcont gdiff with ⟨y, hy, h⟩\n  use y, hy\n  -- The rest is simplifications and trivial calculations\n  simp only [taylorWithinEval_self] at h\n  rw [mul_comm, ← div_left_inj' (g'_ne y hy), mul_div_cancel_right₀ _ (g'_ne y hy)] at h\n  rw [← h]\n  field_simp [g'_ne y hy]\n  ring\n\n"}
{"name":"taylor_mean_remainder_lagrange","module":"Mathlib.Analysis.Calculus.Taylor","initialProofState":"f : Real → Real\nx x₀ : Real\nn : Nat\nhx : LT.lt x₀ x\nhf : ContDiffOn Real (↑n) f (Set.Icc x₀ x)\nhf' : DifferentiableOn Real (iteratedDerivWithin n f (Set.Icc x₀ x)) (Set.Ioo x₀ x)\n⊢ Exists fun x' => And (Membership.mem (Set.Ioo x₀ x) x') (Eq (HSub.hSub (f x) (taylorWithinEval f n (Set.Icc x₀ x) x₀ x)) (HDiv.hDiv (HMul.hMul (iteratedDerivWithin (HAdd.hAdd n 1) f (Set.Icc x₀ x) x') (HPow.hPow (HSub.hSub x x₀) (HAdd.hAdd n 1))) ↑(HAdd.hAdd n 1).factorial))","decl":"/-- **Taylor's theorem** with the Lagrange form of the remainder.\n\nWe assume that `f` is `n+1`-times continuously differentiable in the closed set `Icc x₀ x` and\n`n+1`-times differentiable on the open set `Ioo x₀ x`. Then there exists an `x' ∈ Ioo x₀ x` such\nthat $$f(x) - (P_n f)(x₀, x) = \\frac{f^{(n+1)}(x') (x - x₀)^{n+1}}{(n+1)!},$$\nwhere $P_n f$ denotes the Taylor polynomial of degree $n$ and $f^{(n+1)}$ is the $n+1$-th iterated\nderivative. -/\ntheorem taylor_mean_remainder_lagrange {f : ℝ → ℝ} {x x₀ : ℝ} {n : ℕ} (hx : x₀ < x)\n    (hf : ContDiffOn ℝ n f (Icc x₀ x))\n    (hf' : DifferentiableOn ℝ (iteratedDerivWithin n f (Icc x₀ x)) (Ioo x₀ x)) :\n    ∃ x' ∈ Ioo x₀ x, f x - taylorWithinEval f n (Icc x₀ x) x₀ x =\n      iteratedDerivWithin (n + 1) f (Icc x₀ x) x' * (x - x₀) ^ (n + 1) / (n + 1)! := by\n  have gcont : ContinuousOn (fun t : ℝ => (x - t) ^ (n + 1)) (Icc x₀ x) := by fun_prop\n  have xy_ne : ∀ y : ℝ, y ∈ Ioo x₀ x → (x - y) ^ n ≠ 0 := by\n    intro y hy\n    refine pow_ne_zero _ ?_\n    rw [mem_Ioo] at hy\n    rw [sub_ne_zero]\n    exact hy.2.ne'\n  have hg' : ∀ y : ℝ, y ∈ Ioo x₀ x → -(↑n + 1) * (x - y) ^ n ≠ 0 := fun y hy =>\n    mul_ne_zero (neg_ne_zero.mpr (Nat.cast_add_one_ne_zero n)) (xy_ne y hy)\n  -- We apply the general theorem with g(t) = (x - t)^(n+1)\n  rcases taylor_mean_remainder hx hf hf' gcont (fun y _ => monomial_has_deriv_aux y x _) hg' with\n    ⟨y, hy, h⟩\n  use y, hy\n  simp only [sub_self, zero_pow, Ne, Nat.succ_ne_zero, not_false_iff, zero_sub, mul_neg] at h\n  rw [h, neg_div, ← div_neg, neg_mul, neg_neg]\n  field_simp [xy_ne y hy, Nat.factorial]; ring\n\n"}
{"name":"taylor_mean_remainder_cauchy","module":"Mathlib.Analysis.Calculus.Taylor","initialProofState":"f : Real → Real\nx x₀ : Real\nn : Nat\nhx : LT.lt x₀ x\nhf : ContDiffOn Real (↑n) f (Set.Icc x₀ x)\nhf' : DifferentiableOn Real (iteratedDerivWithin n f (Set.Icc x₀ x)) (Set.Ioo x₀ x)\n⊢ Exists fun x' => And (Membership.mem (Set.Ioo x₀ x) x') (Eq (HSub.hSub (f x) (taylorWithinEval f n (Set.Icc x₀ x) x₀ x)) (HMul.hMul (HDiv.hDiv (HMul.hMul (iteratedDerivWithin (HAdd.hAdd n 1) f (Set.Icc x₀ x) x') (HPow.hPow (HSub.hSub x x') n)) ↑n.factorial) (HSub.hSub x x₀)))","decl":"/-- **Taylor's theorem** with the Cauchy form of the remainder.\n\nWe assume that `f` is `n+1`-times continuously differentiable on the closed set `Icc x₀ x` and\n`n+1`-times differentiable on the open set `Ioo x₀ x`. Then there exists an `x' ∈ Ioo x₀ x` such\nthat $$f(x) - (P_n f)(x₀, x) = \\frac{f^{(n+1)}(x') (x - x')^n (x-x₀)}{n!},$$\nwhere $P_n f$ denotes the Taylor polynomial of degree $n$ and $f^{(n+1)}$ is the $n+1$-th iterated\nderivative. -/\ntheorem taylor_mean_remainder_cauchy {f : ℝ → ℝ} {x x₀ : ℝ} {n : ℕ} (hx : x₀ < x)\n    (hf : ContDiffOn ℝ n f (Icc x₀ x))\n    (hf' : DifferentiableOn ℝ (iteratedDerivWithin n f (Icc x₀ x)) (Ioo x₀ x)) :\n    ∃ x' ∈ Ioo x₀ x, f x - taylorWithinEval f n (Icc x₀ x) x₀ x =\n      iteratedDerivWithin (n + 1) f (Icc x₀ x) x' * (x - x') ^ n / n ! * (x - x₀) := by\n  have gcont : ContinuousOn id (Icc x₀ x) := by fun_prop\n  have gdiff : ∀ x_1 : ℝ, x_1 ∈ Ioo x₀ x → HasDerivAt id ((fun _ : ℝ => (1 : ℝ)) x_1) x_1 :=\n    fun _ _ => hasDerivAt_id _\n  -- We apply the general theorem with g = id\n  rcases taylor_mean_remainder hx hf hf' gcont gdiff fun _ _ => by simp with ⟨y, hy, h⟩\n  use y, hy\n  rw [h]\n  field_simp [n.factorial_ne_zero]\n  ring\n\n"}
{"name":"taylor_mean_remainder_bound","module":"Mathlib.Analysis.Calculus.Taylor","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : Real → E\na b C x : Real\nn : Nat\nhab : LE.le a b\nhf : ContDiffOn Real (HAdd.hAdd (↑n) 1) f (Set.Icc a b)\nhx : Membership.mem (Set.Icc a b) x\nhC : ∀ (y : Real), Membership.mem (Set.Icc a b) y → LE.le (Norm.norm (iteratedDerivWithin (HAdd.hAdd n 1) f (Set.Icc a b) y)) C\n⊢ LE.le (Norm.norm (HSub.hSub (f x) (taylorWithinEval f n (Set.Icc a b) a x))) (HDiv.hDiv (HMul.hMul C (HPow.hPow (HSub.hSub x a) (HAdd.hAdd n 1))) ↑n.factorial)","decl":"/-- **Taylor's theorem** with a polynomial bound on the remainder\n\nWe assume that `f` is `n+1`-times continuously differentiable on the closed set `Icc a b`.\nThe difference of `f` and its `n`-th Taylor polynomial can be estimated by\n`C * (x - a)^(n+1) / n!` where `C` is a bound for the `n+1`-th iterated derivative of `f`. -/\ntheorem taylor_mean_remainder_bound {f : ℝ → E} {a b C x : ℝ} {n : ℕ} (hab : a ≤ b)\n    (hf : ContDiffOn ℝ (n + 1) f (Icc a b)) (hx : x ∈ Icc a b)\n    (hC : ∀ y ∈ Icc a b, ‖iteratedDerivWithin (n + 1) f (Icc a b) y‖ ≤ C) :\n    ‖f x - taylorWithinEval f n (Icc a b) a x‖ ≤ C * (x - a) ^ (n + 1) / n ! := by\n  rcases eq_or_lt_of_le hab with (rfl | h)\n  · rw [Icc_self, mem_singleton_iff] at hx\n    simp [hx]\n  -- The nth iterated derivative is differentiable\n  have hf' : DifferentiableOn ℝ (iteratedDerivWithin n f (Icc a b)) (Icc a b) :=\n    hf.differentiableOn_iteratedDerivWithin (mod_cast n.lt_succ_self)\n      (uniqueDiffOn_Icc h)\n  -- We can uniformly bound the derivative of the Taylor polynomial\n  have h' : ∀ y ∈ Ico a x,\n      ‖((n ! : ℝ)⁻¹ * (x - y) ^ n) • iteratedDerivWithin (n + 1) f (Icc a b) y‖ ≤\n        (n ! : ℝ)⁻¹ * |x - a| ^ n * C := by\n    rintro y ⟨hay, hyx⟩\n    rw [norm_smul, Real.norm_eq_abs]\n    gcongr\n    · rw [abs_mul, abs_pow, abs_inv, Nat.abs_cast]\n      gcongr\n      exact sub_nonneg.2 hyx.le\n    -- Estimate the iterated derivative by `C`\n    · exact hC y ⟨hay, hyx.le.trans hx.2⟩\n  -- Apply the mean value theorem for vector valued functions:\n  have A : ∀ t ∈ Icc a x, HasDerivWithinAt (fun y => taylorWithinEval f n (Icc a b) y x)\n      (((↑n !)⁻¹ * (x - t) ^ n) • iteratedDerivWithin (n + 1) f (Icc a b) t) (Icc a x) t := by\n    intro t ht\n    have I : Icc a x ⊆ Icc a b := Icc_subset_Icc_right hx.2\n    exact (hasDerivWithinAt_taylorWithinEval_at_Icc x h (I ht) hf.of_succ hf').mono I\n  have := norm_image_sub_le_of_norm_deriv_le_segment' A h' x (right_mem_Icc.2 hx.1)\n  simp only [taylorWithinEval_self] at this\n  refine this.trans_eq ?_\n  -- The rest is a trivial calculation\n  rw [abs_of_nonneg (sub_nonneg.mpr hx.1)]\n  ring\n\n"}
{"name":"exists_taylor_mean_remainder_bound","module":"Mathlib.Analysis.Calculus.Taylor","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : Real → E\na b : Real\nn : Nat\nhab : LE.le a b\nhf : ContDiffOn Real (HAdd.hAdd (↑n) 1) f (Set.Icc a b)\n⊢ Exists fun C => ∀ (x : Real), Membership.mem (Set.Icc a b) x → LE.le (Norm.norm (HSub.hSub (f x) (taylorWithinEval f n (Set.Icc a b) a x))) (HMul.hMul C (HPow.hPow (HSub.hSub x a) (HAdd.hAdd n 1)))","decl":"/-- **Taylor's theorem** with a polynomial bound on the remainder\n\nWe assume that `f` is `n+1`-times continuously differentiable on the closed set `Icc a b`.\nThere exists a constant `C` such that for all `x ∈ Icc a b` the difference of `f` and its `n`-th\nTaylor polynomial can be estimated by `C * (x - a)^(n+1)`. -/\ntheorem exists_taylor_mean_remainder_bound {f : ℝ → E} {a b : ℝ} {n : ℕ} (hab : a ≤ b)\n    (hf : ContDiffOn ℝ (n + 1) f (Icc a b)) :\n    ∃ C, ∀ x ∈ Icc a b, ‖f x - taylorWithinEval f n (Icc a b) a x‖ ≤ C * (x - a) ^ (n + 1) := by\n  rcases eq_or_lt_of_le hab with (rfl | h)\n  · refine ⟨0, fun x hx => ?_⟩\n    have : x = a := by simpa [← le_antisymm_iff] using hx\n    simp [← this]\n  -- We estimate by the supremum of the norm of the iterated derivative\n  let g : ℝ → ℝ := fun y => ‖iteratedDerivWithin (n + 1) f (Icc a b) y‖\n  use SupSet.sSup (g '' Icc a b) / (n !)\n  intro x hx\n  rw [div_mul_eq_mul_div₀]\n  refine taylor_mean_remainder_bound hab hf hx fun y => ?_\n  exact (hf.continuousOn_iteratedDerivWithin rfl.le <| uniqueDiffOn_Icc h).norm.le_sSup_image_Icc\n"}
