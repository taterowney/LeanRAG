{"name":"MvPolynomial.IsWeightedHomogeneous.pderiv","module":"Mathlib.RingTheory.MvPolynomial.EulerIdentity","initialProofState":"R : Type u_1\nσ : Type u_2\nM : Type u_3\ninst✝¹ : CommSemiring R\nφ : MvPolynomial σ R\ninst✝ : AddCancelCommMonoid M\nw : σ → M\nn n' : M\ni : σ\nh : MvPolynomial.IsWeightedHomogeneous w φ n\nh' : Eq (HAdd.hAdd n' (w i)) n\n⊢ MvPolynomial.IsWeightedHomogeneous w ((MvPolynomial.pderiv i) φ) n'","decl":"protected lemma IsWeightedHomogeneous.pderiv [AddCancelCommMonoid M] {w : σ → M} {n n' : M} {i : σ}\n    (h : φ.IsWeightedHomogeneous w n) (h' : n' + w i = n) :\n    (pderiv i φ).IsWeightedHomogeneous w n' := by\n  rw [← mem_weightedHomogeneousSubmodule, weightedHomogeneousSubmodule_eq_finsupp_supported,\n    Finsupp.supported_eq_span_single] at h\n  refine Submodule.span_induction ?_ ?_ (fun p q _ _ hp hq ↦ ?_) (fun r p _ h ↦ ?_) h\n  · rintro _ ⟨m, hm, rfl⟩\n    simp_rw [single_eq_monomial, pderiv_monomial, one_mul]\n    by_cases hi : m i = 0\n    · rw [hi, Nat.cast_zero, monomial_zero]; apply isWeightedHomogeneous_zero\n    convert isWeightedHomogeneous_monomial ..\n    rw [← add_right_cancel_iff (a := w i), h', ← hm, weight_sub_single_add hi]\n  · rw [map_zero]; apply isWeightedHomogeneous_zero\n  · rw [map_add]; exact hp.add hq\n  · rw [(pderiv i).map_smul]; exact (weightedHomogeneousSubmodule ..).smul_mem _ h\n\n"}
{"name":"MvPolynomial.IsHomogeneous.pderiv","module":"Mathlib.RingTheory.MvPolynomial.EulerIdentity","initialProofState":"R : Type u_1\nσ : Type u_2\ninst✝ : CommSemiring R\nφ : MvPolynomial σ R\nn : Nat\ni : σ\nh : φ.IsHomogeneous n\n⊢ ((MvPolynomial.pderiv i) φ).IsHomogeneous (HSub.hSub n 1)","decl":"protected lemma IsHomogeneous.pderiv {n : ℕ} {i : σ} (h : φ.IsHomogeneous n) :\n    (pderiv i φ).IsHomogeneous (n - 1) := by\n  obtain _ | n := n\n  · rw [← totalDegree_zero_iff_isHomogeneous, totalDegree_eq_zero_iff_eq_C] at h\n    rw [h, pderiv_C]; apply isHomogeneous_zero\n  · exact IsWeightedHomogeneous.pderiv h rfl\n\n"}
{"name":"MvPolynomial.IsWeightedHomogeneous.sum_weight_X_mul_pderiv","module":"Mathlib.RingTheory.MvPolynomial.EulerIdentity","initialProofState":"R : Type u_1\nσ : Type u_2\ninst✝¹ : CommSemiring R\nφ : MvPolynomial σ R\ninst✝ : Fintype σ\nn : Nat\nw : σ → Nat\nh : MvPolynomial.IsWeightedHomogeneous w φ n\n⊢ Eq (Finset.univ.sum fun i => HSMul.hSMul (w i) (HMul.hMul (MvPolynomial.X i) ((MvPolynomial.pderiv i) φ))) (HSMul.hSMul n φ)","decl":"open Finset in\n/-- Euler's identity for weighted homogeneous polynomials. -/\ntheorem IsWeightedHomogeneous.sum_weight_X_mul_pderiv {w : σ → ℕ}\n    (h : φ.IsWeightedHomogeneous w n) : ∑ i : σ, w i • (X i * pderiv i φ) = n • φ := by\n  rw [← mem_weightedHomogeneousSubmodule, weightedHomogeneousSubmodule_eq_finsupp_supported,\n    supported_eq_span_single] at h\n  refine Submodule.span_induction ?_ ?_ (fun p q _ _ hp hq ↦ ?_) (fun r p _ h ↦ ?_) h\n  · rintro _ ⟨m, hm, rfl⟩\n    simp_rw [single_eq_monomial, X_mul_pderiv_monomial, smul_smul, ← sum_smul, mul_comm (w _)]\n    congr\n    rwa [Set.mem_setOf, weight_apply, sum_fintype] at hm\n    intro; apply zero_smul\n  · simp\n  · simp_rw [map_add, left_distrib, smul_add, sum_add_distrib, hp, hq]\n  · simp_rw [(pderiv _).map_smul, nsmul_eq_mul, mul_smul_comm, ← Finset.smul_sum, ← nsmul_eq_mul, h]\n\n"}
{"name":"MvPolynomial.IsHomogeneous.sum_X_mul_pderiv","module":"Mathlib.RingTheory.MvPolynomial.EulerIdentity","initialProofState":"R : Type u_1\nσ : Type u_2\ninst✝¹ : CommSemiring R\nφ : MvPolynomial σ R\ninst✝ : Fintype σ\nn : Nat\nh : φ.IsHomogeneous n\n⊢ Eq (Finset.univ.sum fun i => HMul.hMul (MvPolynomial.X i) ((MvPolynomial.pderiv i) φ)) (HSMul.hSMul n φ)","decl":"/-- Euler's identity for homogeneous polynomials. -/\ntheorem IsHomogeneous.sum_X_mul_pderiv (h : φ.IsHomogeneous n) :\n    ∑ i : σ, X i * pderiv i φ = n • φ := by\n  simp_rw [← h.sum_weight_X_mul_pderiv, Pi.one_apply, one_smul]\n\n"}
