{"name":"WeierstrassCurve.Projective.fin3_def","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nP : Fin 3 → R\n⊢ Eq (Matrix.vecCons (P 0) (Matrix.vecCons (P 1) (Matrix.vecCons (P 2) Matrix.vecEmpty))) P","decl":"lemma fin3_def (P : Fin 3 → R) : ![P x, P y, P z] = P := by\n  ext n; fin_cases n <;> rfl\n\n"}
{"name":"WeierstrassCurve.Projective.fin3_def_ext","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nX Y Z : R\n⊢ And (Eq (Matrix.vecCons X (Matrix.vecCons Y (Matrix.vecCons Z Matrix.vecEmpty)) 0) X) (And (Eq (Matrix.vecCons X (Matrix.vecCons Y (Matrix.vecCons Z Matrix.vecEmpty)) 1) Y) (Eq (Matrix.vecCons X (Matrix.vecCons Y (Matrix.vecCons Z Matrix.vecEmpty)) 2) Z))","decl":"lemma fin3_def_ext (X Y Z : R) : ![X, Y, Z] x = X ∧ ![X, Y, Z] y = Y ∧ ![X, Y, Z] z = Z :=\n  ⟨rfl, rfl, rfl⟩\n\n"}
{"name":"WeierstrassCurve.Projective.comp_fin3","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nS : Type v\nf : R → S\nX Y Z : R\n⊢ Eq (Function.comp f (Matrix.vecCons X (Matrix.vecCons Y (Matrix.vecCons Z Matrix.vecEmpty)))) (Matrix.vecCons (f X) (Matrix.vecCons (f Y) (Matrix.vecCons (f Z) Matrix.vecEmpty)))","decl":"lemma comp_fin3 {S : Type v} (f : R → S) (X Y Z : R) : f ∘ ![X, Y, Z] = ![f X, f Y, f Z] :=\n  (FinVec.map_eq ..).symm\n\n"}
{"name":"WeierstrassCurve.Projective.smul_fin3","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\ninst✝ : CommRing R\nP : Fin 3 → R\nu : R\n⊢ Eq (HSMul.hSMul u P) (Matrix.vecCons (HMul.hMul u (P 0)) (Matrix.vecCons (HMul.hMul u (P 1)) (Matrix.vecCons (HMul.hMul u (P 2)) Matrix.vecEmpty)))","decl":"lemma smul_fin3 (P : Fin 3 → R) (u : R) : u • P = ![u * P x, u * P y, u * P z] := by\n  simp [← List.ofFn_inj]\n\n"}
{"name":"WeierstrassCurve.Projective.smul_fin3_ext","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\ninst✝ : CommRing R\nP : Fin 3 → R\nu : R\n⊢ And (Eq (HSMul.hSMul u P 0) (HMul.hMul u (P 0))) (And (Eq (HSMul.hSMul u P 1) (HMul.hMul u (P 1))) (Eq (HSMul.hSMul u P 2) (HMul.hMul u (P 2))))","decl":"lemma smul_fin3_ext (P : Fin 3 → R) (u : R) :\n    (u • P) x = u * P x ∧ (u • P) y = u * P y ∧ (u • P) z = u * P z :=\n  ⟨rfl, rfl, rfl⟩\n\n"}
{"name":"WeierstrassCurve.Projective.comp_smul","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nP : Fin 3 → R\nu : R\n⊢ Eq (Function.comp (⇑f) (HSMul.hSMul u P)) (HSMul.hSMul (f u) (Function.comp (⇑f) P))","decl":"lemma comp_smul {S : Type v} [CommRing S] (f : R →+* S) (P : Fin 3 → R) (u : R) :\n    f ∘ (u • P) = f u • f ∘ P := by\n  ext n; fin_cases n <;> simp only [smul_fin3, comp_fin3] <;> map_simp\n\n"}
{"name":"WeierstrassCurve.Projective.smul_equiv","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\ninst✝ : CommRing R\nP : Fin 3 → R\nu : R\nhu : IsUnit u\n⊢ HasEquiv.Equiv (HSMul.hSMul u P) P","decl":"lemma smul_equiv (P : Fin 3 → R) {u : R} (hu : IsUnit u) : u • P ≈ P :=\n  ⟨hu.unit, rfl⟩\n\n"}
{"name":"WeierstrassCurve.Projective.smul_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\ninst✝ : CommRing R\nP : Fin 3 → R\nu : R\nhu : IsUnit u\n⊢ Eq (Quotient.mk (MulAction.orbitRel (Units R) (Fin 3 → R)) (HSMul.hSMul u P)) (Quotient.mk (MulAction.orbitRel (Units R) (Fin 3 → R)) P)","decl":"@[simp]\nlemma smul_eq (P : Fin 3 → R) {u : R} (hu : IsUnit u) : (⟦u • P⟧ : PointClass R) = ⟦P⟧ :=\n  Quotient.eq.mpr <| smul_equiv P hu\n\n"}
{"name":"WeierstrassCurve.Projective.smul_equiv_smul","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\ninst✝ : CommRing R\nP Q : Fin 3 → R\nu v : R\nhu : IsUnit u\nhv : IsUnit v\n⊢ Iff (HasEquiv.Equiv (HSMul.hSMul u P) (HSMul.hSMul v Q)) (HasEquiv.Equiv P Q)","decl":"lemma smul_equiv_smul (P Q : Fin 3 → R) {u v : R} (hu : IsUnit u) (hv : IsUnit v) :\n    u • P ≈ v • Q ↔ P ≈ Q := by\n  erw [← Quotient.eq_iff_equiv, ← Quotient.eq_iff_equiv, smul_eq P hu, smul_eq Q hv]\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.equiv_iff_eq_of_Z_eq'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\ninst✝ : CommRing R\nP Q : Fin 3 → R\nhz : Eq (P 2) (Q 2)\nmem : Membership.mem (nonZeroDivisors R) (Q 2)\n⊢ Iff (HasEquiv.Equiv P Q) (Eq P Q)","decl":"lemma equiv_iff_eq_of_Z_eq' {P Q : Fin 3 → R} (hz : P z = Q z) (mem : Q z ∈ nonZeroDivisors R) :\n    P ≈ Q ↔ P = Q := by\n  refine ⟨?_, by rintro rfl; exact Setoid.refl _⟩\n  rintro ⟨u, rfl⟩\n  rw [← one_mul (Q z)] at hz\n  simp_rw [Units.smul_def, (mul_cancel_right_mem_nonZeroDivisors mem).mp hz, one_smul]\n\n"}
{"name":"WeierstrassCurve.Projective.equiv_iff_eq_of_Z_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhz : Eq (P 2) (Q 2)\nhQz : Ne (Q 2) 0\n⊢ Iff (HasEquiv.Equiv P Q) (Eq P Q)","decl":"lemma equiv_iff_eq_of_Z_eq [NoZeroDivisors R] {P Q : Fin 3 → R} (hz : P z = Q z) (hQz : Q z ≠ 0) :\n    P ≈ Q ↔ P = Q :=\n  equiv_iff_eq_of_Z_eq' hz (mem_nonZeroDivisors_of_ne_zero hQz)\n\n"}
{"name":"WeierstrassCurve.Projective.Z_eq_zero_of_equiv","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\ninst✝ : CommRing R\nP Q : Fin 3 → R\nh : HasEquiv.Equiv P Q\n⊢ Iff (Eq (P 2) 0) (Eq (Q 2) 0)","decl":"lemma Z_eq_zero_of_equiv {P Q : Fin 3 → R} (h : P ≈ Q) : P z = 0 ↔ Q z = 0 := by\n  rcases h with ⟨_, rfl⟩\n  simp only [Units.smul_def, smul_fin3_ext, Units.mul_right_eq_zero]\n\n"}
{"name":"WeierstrassCurve.Projective.X_eq_of_equiv","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\ninst✝ : CommRing R\nP Q : Fin 3 → R\nh : HasEquiv.Equiv P Q\n⊢ Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))","decl":"lemma X_eq_of_equiv {P Q : Fin 3 → R} (h : P ≈ Q) : P x * Q z = Q x * P z := by\n  rcases h with ⟨u, rfl⟩\n  simp only [Units.smul_def, smul_fin3_ext]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.Y_eq_of_equiv","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\ninst✝ : CommRing R\nP Q : Fin 3 → R\nh : HasEquiv.Equiv P Q\n⊢ Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))","decl":"lemma Y_eq_of_equiv {P Q : Fin 3 → R} (h : P ≈ Q) : P y * Q z = Q y * P z := by\n  rcases h with ⟨u, rfl⟩\n  simp only [Units.smul_def, smul_fin3_ext]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.not_equiv_of_Z_eq_zero_left","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\ninst✝ : CommRing R\nP Q : Fin 3 → R\nhPz : Eq (P 2) 0\nhQz : Ne (Q 2) 0\n⊢ Not (HasEquiv.Equiv P Q)","decl":"lemma not_equiv_of_Z_eq_zero_left {P Q : Fin 3 → R} (hPz : P z = 0) (hQz : Q z ≠ 0) : ¬P ≈ Q :=\n  fun h => hQz <| (Z_eq_zero_of_equiv h).mp hPz\n\n"}
{"name":"WeierstrassCurve.Projective.not_equiv_of_Z_eq_zero_right","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\ninst✝ : CommRing R\nP Q : Fin 3 → R\nhPz : Ne (P 2) 0\nhQz : Eq (Q 2) 0\n⊢ Not (HasEquiv.Equiv P Q)","decl":"lemma not_equiv_of_Z_eq_zero_right {P Q : Fin 3 → R} (hPz : P z ≠ 0) (hQz : Q z = 0) : ¬P ≈ Q :=\n  fun h => hPz <| (Z_eq_zero_of_equiv h).mpr hQz\n\n"}
{"name":"WeierstrassCurve.Projective.not_equiv_of_X_ne","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\ninst✝ : CommRing R\nP Q : Fin 3 → R\nhx : Ne (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\n⊢ Not (HasEquiv.Equiv P Q)","decl":"lemma not_equiv_of_X_ne {P Q : Fin 3 → R} (hx : P x * Q z ≠ Q x * P z) : ¬P ≈ Q :=\n  hx.comp X_eq_of_equiv\n\n"}
{"name":"WeierstrassCurve.Projective.not_equiv_of_Y_ne","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\ninst✝ : CommRing R\nP Q : Fin 3 → R\nhy : Ne (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))\n⊢ Not (HasEquiv.Equiv P Q)","decl":"lemma not_equiv_of_Y_ne {P Q : Fin 3 → R} (hy : P y * Q z ≠ Q y * P z) : ¬P ≈ Q :=\n  hy.comp Y_eq_of_equiv\n\n"}
{"name":"WeierstrassCurve.Projective.equiv_of_X_eq_of_Y_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nP Q : Fin 3 → F\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))\n⊢ HasEquiv.Equiv P Q","decl":"lemma equiv_of_X_eq_of_Y_eq {P Q : Fin 3 → F} (hPz : P z ≠ 0) (hQz : Q z ≠ 0)\n    (hx : P x * Q z = Q x * P z) (hy : P y * Q z = Q y * P z) : P ≈ Q := by\n  use Units.mk0 _ hPz / Units.mk0 _ hQz\n  simp only [Units.smul_def, smul_fin3, Units.val_div_eq_div_val, Units.val_mk0, mul_comm, mul_div,\n    ← hx, ← hy, mul_div_cancel_right₀ _ hQz, fin3_def]\n\n"}
{"name":"WeierstrassCurve.Projective.equiv_some_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nP : Fin 3 → F\nhPz : Ne (P 2) 0\n⊢ HasEquiv.Equiv P (Matrix.vecCons (HDiv.hDiv (P 0) (P 2)) (Matrix.vecCons (HDiv.hDiv (P 1) (P 2)) (Matrix.vecCons 1 Matrix.vecEmpty)))","decl":"lemma equiv_some_of_Z_ne_zero {P : Fin 3 → F} (hPz : P z ≠ 0) : P ≈ ![P x / P z, P y / P z, 1] :=\n  equiv_of_X_eq_of_Y_eq hPz one_ne_zero\n    (by linear_combination (norm := (matrix_simp; ring1)) -P x * div_self hPz)\n    (by linear_combination (norm := (matrix_simp; ring1)) -P y * div_self hPz)\n\n"}
{"name":"WeierstrassCurve.Projective.X_eq_iff","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nP Q : Fin 3 → F\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\n⊢ Iff (Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))) (Eq (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)))","decl":"lemma X_eq_iff {P Q : Fin 3 → F} (hPz : P z ≠ 0) (hQz : Q z ≠ 0) :\n    P x * Q z = Q x * P z ↔ P x / P z = Q x / Q z :=\n  (div_eq_div_iff hPz hQz).symm\n\n"}
{"name":"WeierstrassCurve.Projective.Y_eq_iff","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nP Q : Fin 3 → F\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\n⊢ Iff (Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))) (Eq (HDiv.hDiv (P 1) (P 2)) (HDiv.hDiv (Q 1) (Q 2)))","decl":"lemma Y_eq_iff {P Q : Fin 3 → F} (hPz : P z ≠ 0) (hQz : Q z ≠ 0) :\n    P y * Q z = Q y * P z ↔ P y / P z = Q y / Q z :=\n  (div_eq_div_iff hPz hQz).symm\n\n"}
{"name":"WeierstrassCurve.Projective.eval_polynomial","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Eq ((MvPolynomial.eval P) W'.polynomial) (HSub.hSub (HAdd.hAdd (HAdd.hAdd (HMul.hMul (HPow.hPow (P 1) 2) (P 2)) (HMul.hMul (HMul.hMul (HMul.hMul W'.a₁ (P 0)) (P 1)) (P 2))) (HMul.hMul (HMul.hMul W'.a₃ (P 1)) (HPow.hPow (P 2) 2))) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HPow.hPow (P 0) 3) (HMul.hMul (HMul.hMul W'.a₂ (HPow.hPow (P 0) 2)) (P 2))) (HMul.hMul (HMul.hMul W'.a₄ (P 0)) (HPow.hPow (P 2) 2))) (HMul.hMul W'.a₆ (HPow.hPow (P 2) 3))))","decl":"lemma eval_polynomial (P : Fin 3 → R) : eval P W'.polynomial =\n    P y ^ 2 * P z + W'.a₁ * P x * P y * P z + W'.a₃ * P y * P z ^ 2\n      - (P x ^ 3 + W'.a₂ * P x ^ 2 * P z + W'.a₄ * P x * P z ^ 2 + W'.a₆ * P z ^ 3) := by\n  rw [polynomial]\n  eval_simp\n\n"}
{"name":"WeierstrassCurve.Projective.eval_polynomial_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhPz : Ne (P 2) 0\n⊢ Eq (HDiv.hDiv ((MvPolynomial.eval P) W.polynomial) (HPow.hPow (P 2) 3)) (Polynomial.evalEval (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (P 1) (P 2)) W.toAffine.polynomial)","decl":"lemma eval_polynomial_of_Z_ne_zero {P : Fin 3 → F} (hPz : P z ≠ 0) : eval P W.polynomial / P z ^ 3 =\n    W.toAffine.polynomial.evalEval (P x / P z) (P y / P z) := by\n  linear_combination (norm := (rw [eval_polynomial, Affine.evalEval_polynomial]; ring1))\n    P y ^ 2 / P z ^ 2 * div_self hPz + W.a₁ * P x * P y / P z ^ 2 * div_self hPz\n      + W.a₃ * P y / P z * div_self (pow_ne_zero 2 hPz) - W.a₂ * P x ^ 2 / P z ^ 2 * div_self hPz\n      - W.a₄ * P x / P z * div_self (pow_ne_zero 2 hPz) - W.a₆ * div_self (pow_ne_zero 3 hPz)\n\n"}
{"name":"WeierstrassCurve.Projective.equation_iff","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Iff (W'.Equation P) (Eq (HSub.hSub (HAdd.hAdd (HAdd.hAdd (HMul.hMul (HPow.hPow (P 1) 2) (P 2)) (HMul.hMul (HMul.hMul (HMul.hMul W'.a₁ (P 0)) (P 1)) (P 2))) (HMul.hMul (HMul.hMul W'.a₃ (P 1)) (HPow.hPow (P 2) 2))) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HPow.hPow (P 0) 3) (HMul.hMul (HMul.hMul W'.a₂ (HPow.hPow (P 0) 2)) (P 2))) (HMul.hMul (HMul.hMul W'.a₄ (P 0)) (HPow.hPow (P 2) 2))) (HMul.hMul W'.a₆ (HPow.hPow (P 2) 3)))) 0)","decl":"lemma equation_iff (P : Fin 3 → R) : W'.Equation P ↔\n    P y ^ 2 * P z + W'.a₁ * P x * P y * P z + W'.a₃ * P y * P z ^ 2\n      - (P x ^ 3 + W'.a₂ * P x ^ 2 * P z + W'.a₄ * P x * P z ^ 2 + W'.a₆ * P z ^ 3) = 0 := by\n  rw [Equation, eval_polynomial, sub_eq_zero]\n\n"}
{"name":"WeierstrassCurve.Projective.equation_smul","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\nu : R\nhu : IsUnit u\n⊢ Iff (W'.Equation (HSMul.hSMul u P)) (W'.Equation P)","decl":"lemma equation_smul (P : Fin 3 → R) {u : R} (hu : IsUnit u) : W'.Equation (u • P) ↔ W'.Equation P :=\n  have hP (u : R) {P : Fin 3 → R} (hP : W'.Equation P) : W'.Equation <| u • P := by\n    rw [equation_iff] at hP ⊢\n    linear_combination (norm := (simp only [smul_fin3_ext]; ring1)) u ^ 3 * hP\n  ⟨fun h => by convert hP hu.unit.inv h; erw [smul_smul, hu.val_inv_mul, one_smul], hP u⟩\n\n"}
{"name":"WeierstrassCurve.Projective.equation_of_equiv","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\nh : HasEquiv.Equiv P Q\n⊢ Iff (W'.Equation P) (W'.Equation Q)","decl":"lemma equation_of_equiv {P Q : Fin 3 → R} (h : P ≈ Q) : W'.Equation P ↔ W'.Equation Q := by\n  rcases h with ⟨u, rfl⟩\n  exact equation_smul Q u.isUnit\n\n"}
{"name":"WeierstrassCurve.Projective.equation_of_Z_eq_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\nhPz : Eq (P 2) 0\n⊢ Iff (W'.Equation P) (Eq (HPow.hPow (P 0) 3) 0)","decl":"lemma equation_of_Z_eq_zero {P : Fin 3 → R} (hPz : P z = 0) : W'.Equation P ↔ P x ^ 3 = 0 := by\n  simp only [equation_iff, hPz, add_zero, zero_sub, mul_zero, zero_pow <| OfNat.ofNat_ne_zero _,\n    neg_eq_zero]\n\n"}
{"name":"WeierstrassCurve.Projective.equation_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\n⊢ W'.Equation (Matrix.vecCons 0 (Matrix.vecCons 1 (Matrix.vecCons 0 Matrix.vecEmpty)))","decl":"lemma equation_zero : W'.Equation ![0, 1, 0] := by\n  simp only [equation_of_Z_eq_zero, fin3_def_ext, zero_pow three_ne_zero]\n\n"}
{"name":"WeierstrassCurve.Projective.equation_some","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nX Y : R\n⊢ Iff (W'.Equation (Matrix.vecCons X (Matrix.vecCons Y (Matrix.vecCons 1 Matrix.vecEmpty)))) (W'.toAffine.Equation X Y)","decl":"lemma equation_some (X Y : R) : W'.Equation ![X, Y, 1] ↔ W'.toAffine.Equation X Y := by\n  simp only [equation_iff, Affine.equation_iff', fin3_def_ext, one_pow, mul_one]\n\n"}
{"name":"WeierstrassCurve.Projective.equation_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhPz : Ne (P 2) 0\n⊢ Iff (W.Equation P) (W.toAffine.Equation (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (P 1) (P 2)))","decl":"lemma equation_of_Z_ne_zero {P : Fin 3 → F} (hPz : P z ≠ 0) :\n    W.Equation P ↔ W.toAffine.Equation (P x / P z) (P y / P z) :=\n  (equation_of_equiv <| equiv_some_of_Z_ne_zero hPz).trans <| equation_some ..\n\n"}
{"name":"WeierstrassCurve.Projective.X_eq_zero_of_Z_eq_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP : Fin 3 → R\nhP : W'.Equation P\nhPz : Eq (P 2) 0\n⊢ Eq (P 0) 0","decl":"lemma X_eq_zero_of_Z_eq_zero [NoZeroDivisors R] {P : Fin 3 → R} (hP : W'.Equation P)\n    (hPz : P z = 0) : P x = 0 :=\n  pow_eq_zero <| (equation_of_Z_eq_zero hPz).mp hP\n\n"}
{"name":"WeierstrassCurve.Projective.polynomialX_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\n⊢ Eq W'.polynomialX (HSub.hSub (HMul.hMul (HMul.hMul (MvPolynomial.C W'.a₁) (MvPolynomial.X 1)) (MvPolynomial.X 2)) (HAdd.hAdd (HAdd.hAdd (HMul.hMul (MvPolynomial.C 3) (HPow.hPow (MvPolynomial.X 0) 2)) (HMul.hMul (HMul.hMul (MvPolynomial.C (HMul.hMul 2 W'.a₂)) (MvPolynomial.X 0)) (MvPolynomial.X 2))) (HMul.hMul (MvPolynomial.C W'.a₄) (HPow.hPow (MvPolynomial.X 2) 2))))","decl":"lemma polynomialX_eq : W'.polynomialX =\n    C W'.a₁ * X 1 * X 2 - (C 3 * X 0 ^ 2 + C (2 * W'.a₂) * X 0 * X 2 + C W'.a₄ * X 2 ^ 2) := by\n  rw [polynomialX, polynomial]\n  pderiv_simp\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.eval_polynomialX","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Eq ((MvPolynomial.eval P) W'.polynomialX) (HSub.hSub (HMul.hMul (HMul.hMul W'.a₁ (P 1)) (P 2)) (HAdd.hAdd (HAdd.hAdd (HMul.hMul 3 (HPow.hPow (P 0) 2)) (HMul.hMul (HMul.hMul (HMul.hMul 2 W'.a₂) (P 0)) (P 2))) (HMul.hMul W'.a₄ (HPow.hPow (P 2) 2))))","decl":"lemma eval_polynomialX (P : Fin 3 → R) : eval P W'.polynomialX =\n    W'.a₁ * P y * P z - (3 * P x ^ 2 + 2 * W'.a₂ * P x * P z + W'.a₄ * P z ^ 2) := by\n  rw [polynomialX_eq]\n  eval_simp\n\n"}
{"name":"WeierstrassCurve.Projective.eval_polynomialX_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhPz : Ne (P 2) 0\n⊢ Eq (HDiv.hDiv ((MvPolynomial.eval P) W.polynomialX) (HPow.hPow (P 2) 2)) (Polynomial.evalEval (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (P 1) (P 2)) W.toAffine.polynomialX)","decl":"lemma eval_polynomialX_of_Z_ne_zero {P : Fin 3 → F} (hPz : P z ≠ 0) :\n    eval P W.polynomialX / P z ^ 2 = W.toAffine.polynomialX.evalEval (P x / P z) (P y / P z) := by\n  linear_combination (norm := (rw [eval_polynomialX, Affine.evalEval_polynomialX]; ring1))\n    W.a₁ * P y / P z * div_self hPz - 2 * W.a₂ * P x / P z * div_self hPz\n      - W.a₄ * div_self (pow_ne_zero 2 hPz)\n\n"}
{"name":"WeierstrassCurve.Projective.polynomialY_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\n⊢ Eq W'.polynomialY (HAdd.hAdd (HAdd.hAdd (HMul.hMul (HMul.hMul (MvPolynomial.C 2) (MvPolynomial.X 1)) (MvPolynomial.X 2)) (HMul.hMul (HMul.hMul (MvPolynomial.C W'.a₁) (MvPolynomial.X 0)) (MvPolynomial.X 2))) (HMul.hMul (MvPolynomial.C W'.a₃) (HPow.hPow (MvPolynomial.X 2) 2)))","decl":"lemma polynomialY_eq : W'.polynomialY =\n    C 2 * X 1 * X 2 + C W'.a₁ * X 0 * X 2 + C W'.a₃ * X 2 ^ 2 := by\n  rw [polynomialY, polynomial]\n  pderiv_simp\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.eval_polynomialY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Eq ((MvPolynomial.eval P) W'.polynomialY) (HAdd.hAdd (HAdd.hAdd (HMul.hMul (HMul.hMul 2 (P 1)) (P 2)) (HMul.hMul (HMul.hMul W'.a₁ (P 0)) (P 2))) (HMul.hMul W'.a₃ (HPow.hPow (P 2) 2)))","decl":"lemma eval_polynomialY (P : Fin 3 → R) :\n    eval P W'.polynomialY = 2 * P y * P z + W'.a₁ * P x * P z + W'.a₃ * P z ^ 2 := by\n  rw [polynomialY_eq]\n  eval_simp\n\n"}
{"name":"WeierstrassCurve.Projective.eval_polynomialY_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhPz : Ne (P 2) 0\n⊢ Eq (HDiv.hDiv ((MvPolynomial.eval P) W.polynomialY) (HPow.hPow (P 2) 2)) (Polynomial.evalEval (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (P 1) (P 2)) W.toAffine.polynomialY)","decl":"lemma eval_polynomialY_of_Z_ne_zero {P : Fin 3 → F} (hPz : P z ≠ 0) :\n    eval P W.polynomialY / P z ^ 2 = W.toAffine.polynomialY.evalEval (P x / P z) (P y / P z) := by\n  linear_combination (norm := (rw [eval_polynomialY, Affine.evalEval_polynomialY]; ring1))\n    2 * P y / P z * div_self hPz + W.a₁ * P x / P z * div_self hPz\n      + W.a₃ * div_self (pow_ne_zero 2 hPz)\n\n"}
{"name":"WeierstrassCurve.Projective.polynomialZ_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\n⊢ Eq W'.polynomialZ (HSub.hSub (HAdd.hAdd (HAdd.hAdd (HPow.hPow (MvPolynomial.X 1) 2) (HMul.hMul (HMul.hMul (MvPolynomial.C W'.a₁) (MvPolynomial.X 0)) (MvPolynomial.X 1))) (HMul.hMul (HMul.hMul (MvPolynomial.C (HMul.hMul 2 W'.a₃)) (MvPolynomial.X 1)) (MvPolynomial.X 2))) (HAdd.hAdd (HAdd.hAdd (HMul.hMul (MvPolynomial.C W'.a₂) (HPow.hPow (MvPolynomial.X 0) 2)) (HMul.hMul (HMul.hMul (MvPolynomial.C (HMul.hMul 2 W'.a₄)) (MvPolynomial.X 0)) (MvPolynomial.X 2))) (HMul.hMul (MvPolynomial.C (HMul.hMul 3 W'.a₆)) (HPow.hPow (MvPolynomial.X 2) 2))))","decl":"lemma polynomialZ_eq : W'.polynomialZ =\n    X 1 ^ 2 + C W'.a₁ * X 0 * X 1 + C (2 * W'.a₃) * X 1 * X 2\n      - (C W'.a₂ * X 0 ^ 2 + C (2 * W'.a₄) * X 0 * X 2 + C (3 * W'.a₆) * X 2 ^ 2) := by\n  rw [polynomialZ, polynomial]\n  pderiv_simp\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.eval_polynomialZ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Eq ((MvPolynomial.eval P) W'.polynomialZ) (HSub.hSub (HAdd.hAdd (HAdd.hAdd (HPow.hPow (P 1) 2) (HMul.hMul (HMul.hMul W'.a₁ (P 0)) (P 1))) (HMul.hMul (HMul.hMul (HMul.hMul 2 W'.a₃) (P 1)) (P 2))) (HAdd.hAdd (HAdd.hAdd (HMul.hMul W'.a₂ (HPow.hPow (P 0) 2)) (HMul.hMul (HMul.hMul (HMul.hMul 2 W'.a₄) (P 0)) (P 2))) (HMul.hMul (HMul.hMul 3 W'.a₆) (HPow.hPow (P 2) 2))))","decl":"lemma eval_polynomialZ (P : Fin 3 → R) : eval P W'.polynomialZ =\n    P y ^ 2 + W'.a₁ * P x * P y + 2 * W'.a₃ * P y * P z\n      - (W'.a₂ * P x ^ 2 + 2 * W'.a₄ * P x * P z + 3 * W'.a₆ * P z ^ 2) := by\n  rw [polynomialZ_eq]\n  eval_simp\n\n"}
{"name":"WeierstrassCurve.Projective.polynomial_relation","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Eq (HMul.hMul 3 ((MvPolynomial.eval P) W'.polynomial)) (HAdd.hAdd (HAdd.hAdd (HMul.hMul (P 0) ((MvPolynomial.eval P) W'.polynomialX)) (HMul.hMul (P 1) ((MvPolynomial.eval P) W'.polynomialY))) (HMul.hMul (P 2) ((MvPolynomial.eval P) W'.polynomialZ)))","decl":"/-- Euler's homogeneous function theorem. -/\ntheorem polynomial_relation (P : Fin 3 → R) : 3 * eval P W'.polynomial =\n    P x * eval P W'.polynomialX + P y * eval P W'.polynomialY + P z * eval P W'.polynomialZ := by\n  rw [eval_polynomial, eval_polynomialX, eval_polynomialY, eval_polynomialZ]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.nonsingular_iff","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Iff (W'.Nonsingular P) (And (W'.Equation P) (Or (Ne (HSub.hSub (HMul.hMul (HMul.hMul W'.a₁ (P 1)) (P 2)) (HAdd.hAdd (HAdd.hAdd (HMul.hMul 3 (HPow.hPow (P 0) 2)) (HMul.hMul (HMul.hMul (HMul.hMul 2 W'.a₂) (P 0)) (P 2))) (HMul.hMul W'.a₄ (HPow.hPow (P 2) 2)))) 0) (Or (Ne (HAdd.hAdd (HAdd.hAdd (HMul.hMul (HMul.hMul 2 (P 1)) (P 2)) (HMul.hMul (HMul.hMul W'.a₁ (P 0)) (P 2))) (HMul.hMul W'.a₃ (HPow.hPow (P 2) 2))) 0) (Ne (HSub.hSub (HAdd.hAdd (HAdd.hAdd (HPow.hPow (P 1) 2) (HMul.hMul (HMul.hMul W'.a₁ (P 0)) (P 1))) (HMul.hMul (HMul.hMul (HMul.hMul 2 W'.a₃) (P 1)) (P 2))) (HAdd.hAdd (HAdd.hAdd (HMul.hMul W'.a₂ (HPow.hPow (P 0) 2)) (HMul.hMul (HMul.hMul (HMul.hMul 2 W'.a₄) (P 0)) (P 2))) (HMul.hMul (HMul.hMul 3 W'.a₆) (HPow.hPow (P 2) 2)))) 0))))","decl":"lemma nonsingular_iff (P : Fin 3 → R) : W'.Nonsingular P ↔ W'.Equation P ∧\n    (W'.a₁ * P y * P z - (3 * P x ^ 2 + 2 * W'.a₂ * P x * P z + W'.a₄ * P z ^ 2) ≠ 0 ∨\n      2 * P y * P z + W'.a₁ * P x * P z + W'.a₃ * P z ^ 2 ≠ 0 ∨\n      P y ^ 2 + W'.a₁ * P x * P y + 2 * W'.a₃ * P y * P z\n        - (W'.a₂ * P x ^ 2 + 2 * W'.a₄ * P x * P z + 3 * W'.a₆ * P z ^ 2) ≠ 0) := by\n  rw [Nonsingular, eval_polynomialX, eval_polynomialY, eval_polynomialZ]\n\n"}
{"name":"WeierstrassCurve.Projective.nonsingular_smul","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\nu : R\nhu : IsUnit u\n⊢ Iff (W'.Nonsingular (HSMul.hSMul u P)) (W'.Nonsingular P)","decl":"lemma nonsingular_smul (P : Fin 3 → R) {u : R} (hu : IsUnit u) :\n    W'.Nonsingular (u • P) ↔ W'.Nonsingular P :=\n  have hP {u : R} (hu : IsUnit u) {P : Fin 3 → R} (hP : W'.Nonsingular <| u • P) :\n      W'.Nonsingular P := by\n    rcases (nonsingular_iff _).mp hP with ⟨hP, hP'⟩\n    refine (nonsingular_iff P).mpr ⟨(equation_smul P hu).mp hP, ?_⟩\n    contrapose! hP'\n    simp only [smul_fin3_ext]\n    exact ⟨by linear_combination (norm := ring1) u ^ 2 * hP'.left,\n      by linear_combination (norm := ring1) u ^ 2 * hP'.right.left,\n      by linear_combination (norm := ring1) u ^ 2 * hP'.right.right⟩\n  ⟨hP hu, fun h => hP hu.unit⁻¹.isUnit <| by rwa [smul_smul, hu.val_inv_mul, one_smul]⟩\n\n"}
{"name":"WeierstrassCurve.Projective.nonsingular_of_equiv","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\nh : HasEquiv.Equiv P Q\n⊢ Iff (W'.Nonsingular P) (W'.Nonsingular Q)","decl":"lemma nonsingular_of_equiv {P Q : Fin 3 → R} (h : P ≈ Q) : W'.Nonsingular P ↔ W'.Nonsingular Q := by\n  rcases h with ⟨u, rfl⟩\n  exact nonsingular_smul Q u.isUnit\n\n"}
{"name":"WeierstrassCurve.Projective.nonsingular_of_Z_eq_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\nhPz : Eq (P 2) 0\n⊢ Iff (W'.Nonsingular P) (And (W'.Equation P) (Or (Ne (HMul.hMul 3 (HPow.hPow (P 0) 2)) 0) (Ne (HSub.hSub (HAdd.hAdd (HPow.hPow (P 1) 2) (HMul.hMul (HMul.hMul W'.a₁ (P 0)) (P 1))) (HMul.hMul W'.a₂ (HPow.hPow (P 0) 2))) 0)))","decl":"lemma nonsingular_of_Z_eq_zero {P : Fin 3 → R} (hPz : P z = 0) :\n    W'.Nonsingular P ↔\n      W'.Equation P ∧ (3 * P x ^ 2 ≠ 0 ∨ P y ^ 2 + W'.a₁ * P x * P y - W'.a₂ * P x ^ 2 ≠ 0) := by\n  simp only [nonsingular_iff, hPz, add_zero, sub_zero, zero_sub, mul_zero,\n    zero_pow <| OfNat.ofNat_ne_zero _, neg_ne_zero, ne_self_iff_false, false_or]\n\n"}
{"name":"WeierstrassCurve.Projective.nonsingular_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : Nontrivial R\n⊢ W'.Nonsingular (Matrix.vecCons 0 (Matrix.vecCons 1 (Matrix.vecCons 0 Matrix.vecEmpty)))","decl":"lemma nonsingular_zero [Nontrivial R] : W'.Nonsingular ![0, 1, 0] := by\n  simp only [nonsingular_of_Z_eq_zero, equation_zero, true_and, fin3_def_ext, ← not_and_or]\n  exact fun h => one_ne_zero <| by linear_combination (norm := ring1) h.right\n\n"}
{"name":"WeierstrassCurve.Projective.nonsingular_some","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nX Y : R\n⊢ Iff (W'.Nonsingular (Matrix.vecCons X (Matrix.vecCons Y (Matrix.vecCons 1 Matrix.vecEmpty)))) (W'.toAffine.Nonsingular X Y)","decl":"lemma nonsingular_some (X Y : R) : W'.Nonsingular ![X, Y, 1] ↔ W'.toAffine.Nonsingular X Y := by\n  simp_rw [nonsingular_iff, equation_some, fin3_def_ext, Affine.nonsingular_iff',\n    Affine.equation_iff', and_congr_right_iff, ← not_and_or, not_iff_not, one_pow, mul_one,\n    and_congr_right_iff, Iff.comm, iff_self_and]\n  intro h hX hY\n  linear_combination (norm := ring1) 3 * h - X * hX - Y * hY\n\n"}
{"name":"WeierstrassCurve.Projective.nonsingular_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhPz : Ne (P 2) 0\n⊢ Iff (W.Nonsingular P) (W.toAffine.Nonsingular (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (P 1) (P 2)))","decl":"lemma nonsingular_of_Z_ne_zero {P : Fin 3 → F} (hPz : P z ≠ 0) :\n    W.Nonsingular P ↔ W.toAffine.Nonsingular (P x / P z) (P y / P z) :=\n  (nonsingular_of_equiv <| equiv_some_of_Z_ne_zero hPz).trans <| nonsingular_some ..\n\n"}
{"name":"WeierstrassCurve.Projective.nonsingular_iff_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhPz : Ne (P 2) 0\n⊢ Iff (W.Nonsingular P) (And (W.Equation P) (Or (Ne ((MvPolynomial.eval P) W.polynomialX) 0) (Ne ((MvPolynomial.eval P) W.polynomialY) 0)))","decl":"lemma nonsingular_iff_of_Z_ne_zero {P : Fin 3 → F} (hPz : P z ≠ 0) :\n    W.Nonsingular P ↔ W.Equation P ∧ (eval P W.polynomialX ≠ 0 ∨ eval P W.polynomialY ≠ 0) := by\n  rw [nonsingular_of_Z_ne_zero hPz, Affine.Nonsingular, ← equation_of_Z_ne_zero hPz,\n    ← eval_polynomialX_of_Z_ne_zero hPz, div_ne_zero_iff, and_iff_left <| pow_ne_zero 2 hPz,\n    ← eval_polynomialY_of_Z_ne_zero hPz, div_ne_zero_iff, and_iff_left <| pow_ne_zero 2 hPz]\n\n"}
{"name":"WeierstrassCurve.Projective.Y_ne_zero_of_Z_eq_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP : Fin 3 → R\nhP : W'.Nonsingular P\nhPz : Eq (P 2) 0\n⊢ Ne (P 1) 0","decl":"lemma Y_ne_zero_of_Z_eq_zero [NoZeroDivisors R] {P : Fin 3 → R} (hP : W'.Nonsingular P)\n    (hPz : P z = 0) : P y ≠ 0 := by\n  intro hPy\n  simp only [nonsingular_of_Z_eq_zero hPz, X_eq_zero_of_Z_eq_zero hP.left hPz, hPy, add_zero,\n    sub_zero, mul_zero, zero_pow two_ne_zero, or_self, ne_self_iff_false, and_false] at hP\n\n"}
{"name":"WeierstrassCurve.Projective.isUnit_Y_of_Z_eq_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhP : W.Nonsingular P\nhPz : Eq (P 2) 0\n⊢ IsUnit (P 1)","decl":"lemma isUnit_Y_of_Z_eq_zero {P : Fin 3 → F} (hP : W.Nonsingular P) (hPz : P z = 0) : IsUnit (P y) :=\n  (Y_ne_zero_of_Z_eq_zero hP hPz).isUnit\n\n"}
{"name":"WeierstrassCurve.Projective.equiv_of_Z_eq_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Nonsingular P\nhQ : W.Nonsingular Q\nhPz : Eq (P 2) 0\nhQz : Eq (Q 2) 0\n⊢ HasEquiv.Equiv P Q","decl":"lemma equiv_of_Z_eq_zero {P Q : Fin 3 → F} (hP : W.Nonsingular P) (hQ : W.Nonsingular Q)\n    (hPz : P z = 0) (hQz : Q z = 0) : P ≈ Q := by\n  use (isUnit_Y_of_Z_eq_zero hP hPz).unit / (isUnit_Y_of_Z_eq_zero hQ hQz).unit\n  simp only [Units.smul_def, smul_fin3, X_eq_zero_of_Z_eq_zero hQ.left hQz, hQz, mul_zero,\n    Units.val_div_eq_div_val, IsUnit.unit_spec, (isUnit_Y_of_Z_eq_zero hQ hQz).div_mul_cancel]\n  conv_rhs => rw [← fin3_def P, X_eq_zero_of_Z_eq_zero hP.left hPz, hPz]\n\n"}
{"name":"WeierstrassCurve.Projective.equiv_zero_of_Z_eq_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhP : W.Nonsingular P\nhPz : Eq (P 2) 0\n⊢ HasEquiv.Equiv P (Matrix.vecCons 0 (Matrix.vecCons 1 (Matrix.vecCons 0 Matrix.vecEmpty)))","decl":"lemma equiv_zero_of_Z_eq_zero {P : Fin 3 → F} (hP : W.Nonsingular P) (hPz : P z = 0) :\n    P ≈ ![0, 1, 0] :=\n  equiv_of_Z_eq_zero hP nonsingular_zero hPz rfl\n\n"}
{"name":"WeierstrassCurve.Projective.comp_equiv_comp","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝¹ : Field F\nW : WeierstrassCurve.Projective F\nK : Type v\ninst✝ : Field K\nf : RingHom F K\nP Q : Fin 3 → F\nhP : W.Nonsingular P\nhQ : W.Nonsingular Q\n⊢ Iff (HasEquiv.Equiv (Function.comp (⇑f) P) (Function.comp (⇑f) Q)) (HasEquiv.Equiv P Q)","decl":"lemma comp_equiv_comp {K : Type v} [Field K] (f : F →+* K) {P Q : Fin 3 → F} (hP : W.Nonsingular P)\n    (hQ : W.Nonsingular Q) : f ∘ P ≈ f ∘ Q ↔ P ≈ Q := by\n  refine ⟨fun h => ?_, fun h => ?_⟩\n  · by_cases hz : f (P z) = 0\n    · exact equiv_of_Z_eq_zero hP hQ ((map_eq_zero_iff f f.injective).mp hz) <|\n        (map_eq_zero_iff f f.injective).mp <| (Z_eq_zero_of_equiv h).mp hz\n    · refine equiv_of_X_eq_of_Y_eq ((map_ne_zero_iff f f.injective).mp hz)\n        ((map_ne_zero_iff f f.injective).mp <| hz.comp (Z_eq_zero_of_equiv h).mpr) ?_ ?_\n      all_goals apply f.injective; map_simp\n      exacts [X_eq_of_equiv h, Y_eq_of_equiv h]\n  · rcases h with ⟨u, rfl⟩\n    exact ⟨Units.map f u, (comp_smul ..).symm⟩\n\n"}
{"name":"WeierstrassCurve.Projective.nonsingularLift_iff","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Iff (W'.NonsingularLift (Quotient.mk (MulAction.orbitRel (Units R) (Fin 3 → R)) P)) (W'.Nonsingular P)","decl":"lemma nonsingularLift_iff (P : Fin 3 → R) : W'.NonsingularLift ⟦P⟧ ↔ W'.Nonsingular P :=\n  Iff.rfl\n\n"}
{"name":"WeierstrassCurve.Projective.nonsingularLift_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : Nontrivial R\n⊢ W'.NonsingularLift (Quotient.mk (MulAction.orbitRel (Units R) (Fin 3 → R)) (Matrix.vecCons 0 (Matrix.vecCons 1 (Matrix.vecCons 0 Matrix.vecEmpty))))","decl":"lemma nonsingularLift_zero [Nontrivial R] : W'.NonsingularLift ⟦![0, 1, 0]⟧ :=\n  nonsingular_zero\n\n"}
{"name":"WeierstrassCurve.Projective.nonsingularLift_some","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nX Y : R\n⊢ Iff (W'.NonsingularLift (Quotient.mk (MulAction.orbitRel (Units R) (Fin 3 → R)) (Matrix.vecCons X (Matrix.vecCons Y (Matrix.vecCons 1 Matrix.vecEmpty))))) (W'.toAffine.Nonsingular X Y)","decl":"lemma nonsingularLift_some (X Y : R) :\n    W'.NonsingularLift ⟦![X, Y, 1]⟧ ↔ W'.toAffine.Nonsingular X Y :=\n  nonsingular_some X Y\n\n"}
{"name":"WeierstrassCurve.Projective.equation_smul_iff","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\nu : R\nhu : IsUnit u\n⊢ Iff (W'.Equation (HSMul.hSMul u P)) (W'.Equation P)","decl":"@[deprecated (since := \"2024-08-27\")] alias equation_smul_iff := equation_smul\n"}
{"name":"WeierstrassCurve.Projective.nonsingularLift_zero'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : Nontrivial R\n⊢ W'.NonsingularLift (Quotient.mk (MulAction.orbitRel (Units R) (Fin 3 → R)) (Matrix.vecCons 0 (Matrix.vecCons 1 (Matrix.vecCons 0 Matrix.vecEmpty))))","decl":"@[deprecated (since := \"2024-08-27\")] alias nonsingularLift_zero' := nonsingularLift_zero\n"}
{"name":"WeierstrassCurve.Projective.nonsingular_affine_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhPz : Ne (P 2) 0\n⊢ Iff (W.Nonsingular P) (W.toAffine.Nonsingular (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (P 1) (P 2)))","decl":"@[deprecated (since := \"2024-08-27\")]\nalias nonsingular_affine_of_Z_ne_zero := nonsingular_of_Z_ne_zero\n"}
{"name":"WeierstrassCurve.Projective.nonsingular_iff_affine_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhPz : Ne (P 2) 0\n⊢ Iff (W.Nonsingular P) (W.toAffine.Nonsingular (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (P 1) (P 2)))","decl":"@[deprecated (since := \"2024-08-27\")]\nalias nonsingular_iff_affine_of_Z_ne_zero := nonsingular_of_Z_ne_zero\n"}
{"name":"WeierstrassCurve.Projective.nonsingular_of_affine_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhPz : Ne (P 2) 0\n⊢ Iff (W.Nonsingular P) (W.toAffine.Nonsingular (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (P 1) (P 2)))","decl":"@[deprecated (since := \"2024-08-27\")]\nalias nonsingular_of_affine_of_Z_ne_zero := nonsingular_of_Z_ne_zero\n"}
{"name":"WeierstrassCurve.Projective.nonsingular_smul_iff","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\nu : R\nhu : IsUnit u\n⊢ Iff (W'.Nonsingular (HSMul.hSMul u P)) (W'.Nonsingular P)","decl":"@[deprecated (since := \"2024-08-27\")] alias nonsingular_smul_iff := nonsingular_smul\n"}
{"name":"WeierstrassCurve.Projective.nonsingular_zero'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : Nontrivial R\n⊢ W'.Nonsingular (Matrix.vecCons 0 (Matrix.vecCons 1 (Matrix.vecCons 0 Matrix.vecEmpty)))","decl":"@[deprecated (since := \"2024-08-27\")] alias nonsingular_zero' := nonsingular_zero\n\n"}
{"name":"WeierstrassCurve.Projective.negY_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nX Y Z : R\n⊢ Eq (W'.negY (Matrix.vecCons X (Matrix.vecCons Y (Matrix.vecCons Z Matrix.vecEmpty)))) (HSub.hSub (HSub.hSub (Neg.neg Y) (HMul.hMul W'.a₁ X)) (HMul.hMul W'.a₃ Z))","decl":"lemma negY_eq (X Y Z : R) : W'.negY ![X, Y, Z] = -Y - W'.a₁ * X - W'.a₃ * Z :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.negY_smul","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\nu : R\n⊢ Eq (W'.negY (HSMul.hSMul u P)) (HMul.hMul u (W'.negY P))","decl":"lemma negY_smul (P : Fin 3 → R) (u : R) : W'.negY (u • P) = u * W'.negY P := by\n  simp only [negY, smul_fin3_ext]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.negY_of_Z_eq_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP : Fin 3 → R\nhP : W'.Equation P\nhPz : Eq (P 2) 0\n⊢ Eq (W'.negY P) (Neg.neg (P 1))","decl":"lemma negY_of_Z_eq_zero [NoZeroDivisors R] {P : Fin 3 → R} (hP : W'.Equation P) (hPz : P z = 0) :\n    W'.negY P = -P y := by\n  rw [negY, hPz, X_eq_zero_of_Z_eq_zero hP hPz, mul_zero, sub_zero, mul_zero, sub_zero]\n\n"}
{"name":"WeierstrassCurve.Projective.negY_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhPz : Ne (P 2) 0\n⊢ Eq (HDiv.hDiv (W.negY P) (P 2)) (W.toAffine.negY (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (P 1) (P 2)))","decl":"lemma negY_of_Z_ne_zero {P : Fin 3 → F} (hPz : P z ≠ 0) :\n    W.negY P / P z = W.toAffine.negY (P x / P z) (P y / P z) := by\n  linear_combination (norm := (rw [negY, Affine.negY]; ring1)) -W.a₃ * div_self hPz\n\n"}
{"name":"WeierstrassCurve.Projective.Y_sub_Y_mul_Y_sub_negY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhQ : W'.Equation Q\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\n⊢ Eq (HMul.hMul (HMul.hMul (HMul.hMul (P 2) (Q 2)) (HSub.hSub (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2)))) (HSub.hSub (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W'.negY Q) (P 2)))) 0","decl":"lemma Y_sub_Y_mul_Y_sub_negY {P Q : Fin 3 → R} (hP : W'.Equation P) (hQ : W'.Equation Q)\n    (hx : P x * Q z = Q x * P z) :\n    P z * Q z * (P y * Q z - Q y * P z) * (P y * Q z - W'.negY Q * P z) = 0 := by\n  linear_combination' (norm := (rw [negY]; ring1)) Q z ^ 3 * (equation_iff P).mp hP\n    - P z ^ 3 * (equation_iff Q).mp hQ + hx * hx * hx + W'.a₂ * P z * Q z * hx * hx\n    + (W'.a₄ * P z ^ 2 * Q z ^ 2 - W'.a₁ * P y * P z * Q z ^ 2) * hx\n\n"}
{"name":"WeierstrassCurve.Projective.Y_eq_of_Y_ne","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhQ : W'.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Ne (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))\n⊢ Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W'.negY Q) (P 2))","decl":"lemma Y_eq_of_Y_ne [NoZeroDivisors R] {P Q : Fin 3 → R} (hP : W'.Equation P) (hQ : W'.Equation Q)\n    (hPz : P z ≠ 0) (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z) (hy : P y * Q z ≠ Q y * P z) :\n    P y * Q z = W'.negY Q * P z :=\n  sub_eq_zero.mp <| (mul_eq_zero.mp <| Y_sub_Y_mul_Y_sub_negY hP hQ hx).resolve_left <|\n    mul_ne_zero (mul_ne_zero hPz hQz) <| sub_ne_zero.mpr hy\n\n"}
{"name":"WeierstrassCurve.Projective.Y_eq_of_Y_ne'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhQ : W'.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Ne (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W'.negY Q) (P 2))\n⊢ Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))","decl":"lemma Y_eq_of_Y_ne' [NoZeroDivisors R] {P Q : Fin 3 → R} (hP : W'.Equation P) (hQ : W'.Equation Q)\n    (hPz : P z ≠ 0) (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z)\n    (hy : P y * Q z ≠ W'.negY Q * P z) : P y * Q z = Q y * P z :=\n  sub_eq_zero.mp <| (mul_eq_zero.mp <| (mul_eq_zero.mp <| Y_sub_Y_mul_Y_sub_negY hP hQ hx\n    ).resolve_right <| sub_ne_zero.mpr hy).resolve_left <| mul_ne_zero hPz hQz\n\n"}
{"name":"WeierstrassCurve.Projective.Y_eq_iff'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\n⊢ Iff (Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W.negY Q) (P 2))) (Eq (HDiv.hDiv (P 1) (P 2)) (W.toAffine.negY (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (Q 1) (Q 2))))","decl":"lemma Y_eq_iff' {P Q : Fin 3 → F} (hPz : P z ≠ 0) (hQz : Q z ≠ 0) :\n    P y * Q z = W.negY Q * P z ↔ P y / P z = W.toAffine.negY (Q x / Q z) (Q y / Q z) :=\n  negY_of_Z_ne_zero hQz ▸ (div_eq_div_iff hPz hQz).symm\n\n"}
{"name":"WeierstrassCurve.Projective.Y_sub_Y_add_Y_sub_negY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\n⊢ Eq (HAdd.hAdd (HSub.hSub (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))) (HSub.hSub (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W'.negY Q) (P 2)))) (HMul.hMul (HSub.hSub (P 1) (W'.negY P)) (Q 2))","decl":"lemma Y_sub_Y_add_Y_sub_negY {P Q : Fin 3 → R} (hx : P x * Q z = Q x * P z) :\n    (P y * Q z - Q y * P z) + (P y * Q z - W'.negY Q * P z) = (P y - W'.negY P) * Q z := by\n  linear_combination (norm := (rw [negY, negY]; ring1)) -W'.a₁ * hx\n\n"}
{"name":"WeierstrassCurve.Projective.Y_ne_negY_of_Y_ne","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhQ : W'.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Ne (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))\n⊢ Ne (P 1) (W'.negY P)","decl":"lemma Y_ne_negY_of_Y_ne [NoZeroDivisors R] {P Q : Fin 3 → R} (hP : W'.Equation P)\n    (hQ : W'.Equation Q) (hPz : P z ≠ 0) (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z)\n    (hy : P y * Q z ≠ Q y * P z) : P y ≠ W'.negY P := by\n  have hy' : P y * Q z - W'.negY Q * P z = 0 := sub_eq_zero.mpr <| Y_eq_of_Y_ne hP hQ hPz hQz hx hy\n  contrapose! hy\n  linear_combination (norm := ring1) Y_sub_Y_add_Y_sub_negY hx + Q z * hy - hy'\n\n"}
{"name":"WeierstrassCurve.Projective.Y_ne_negY_of_Y_ne'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhQ : W'.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Ne (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W'.negY Q) (P 2))\n⊢ Ne (P 1) (W'.negY P)","decl":"lemma Y_ne_negY_of_Y_ne' [NoZeroDivisors R] {P Q : Fin 3 → R} (hP : W'.Equation P)\n    (hQ : W'.Equation Q) (hPz : P z ≠ 0) (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z)\n    (hy : P y * Q z ≠ W'.negY Q * P z) : P y ≠ W'.negY P := by\n  have hy' : P y * Q z - Q y * P z = 0 := sub_eq_zero.mpr <| Y_eq_of_Y_ne' hP hQ hPz hQz hx hy\n  contrapose! hy\n  linear_combination (norm := ring1) Y_sub_Y_add_Y_sub_negY hx + Q z * hy - hy'\n\n"}
{"name":"WeierstrassCurve.Projective.Y_eq_negY_of_Y_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))\nhy' : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W'.negY Q) (P 2))\n⊢ Eq (P 1) (W'.negY P)","decl":"lemma Y_eq_negY_of_Y_eq [NoZeroDivisors R] {P Q : Fin 3 → R} (hQz : Q z ≠ 0)\n    (hx : P x * Q z = Q x * P z) (hy : P y * Q z = Q y * P z) (hy' : P y * Q z = W'.negY Q * P z) :\n    P y = W'.negY P :=\n  mul_left_injective₀ hQz <| by\n    linear_combination (norm := ring1) -Y_sub_Y_add_Y_sub_negY hx + hy + hy'\n\n"}
{"name":"WeierstrassCurve.Projective.nonsingular_iff_of_Y_eq_negY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhPz : Ne (P 2) 0\nhy : Eq (P 1) (W.negY P)\n⊢ Iff (W.Nonsingular P) (And (W.Equation P) (Ne ((MvPolynomial.eval P) W.polynomialX) 0))","decl":"lemma nonsingular_iff_of_Y_eq_negY {P : Fin 3 → F} (hPz : P z ≠ 0) (hy : P y = W.negY P) :\n    W.Nonsingular P ↔ W.Equation P ∧ eval P W.polynomialX ≠ 0 := by\n  have hy' : eval P W.polynomialY = (P y - W.negY P) * P z := by rw [negY, eval_polynomialY]; ring1\n  rw [nonsingular_iff_of_Z_ne_zero hPz, hy', hy, sub_self, zero_mul, ne_self_iff_false, or_false]\n\n"}
{"name":"WeierstrassCurve.Projective.dblU_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\n⊢ Eq (W.dblU P) (HDiv.hDiv (HPow.hPow (HSub.hSub (HMul.hMul (HMul.hMul W.a₁ (P 1)) (P 2)) (HAdd.hAdd (HAdd.hAdd (HMul.hMul 3 (HPow.hPow (P 0) 2)) (HMul.hMul (HMul.hMul (HMul.hMul 2 W.a₂) (P 0)) (P 2))) (HMul.hMul W.a₄ (HPow.hPow (P 2) 2)))) 3) (HPow.hPow (P 2) 2))","decl":"lemma dblU_eq (P : Fin 3 → F) : W.dblU P =\n    (W.a₁ * P y * P z - (3 * P x ^ 2 + 2 * W.a₂ * P x * P z + W.a₄ * P z ^ 2)) ^ 3 / P z ^ 2 := by\n  rw [dblU, eval_polynomialX]\n\n"}
{"name":"WeierstrassCurve.Projective.dblU_smul","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhPz : Ne (P 2) 0\nu : F\nhu : Ne u 0\n⊢ Eq (W.dblU (HSMul.hSMul u P)) (HMul.hMul (HPow.hPow u 4) (W.dblU P))","decl":"lemma dblU_smul {P : Fin 3 → F} (hPz : P z ≠ 0) {u : F} (hu : u ≠ 0) :\n    W.dblU (u • P) = u ^ 4 * W.dblU P := by\n  field_simp [dblU_eq, smul_fin3_ext]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.dblU_of_Z_eq_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhPz : Eq (P 2) 0\n⊢ Eq (W.dblU P) 0","decl":"lemma dblU_of_Z_eq_zero {P : Fin 3 → F} (hPz : P z = 0) : W.dblU P = 0 := by\n  rw [dblU_eq, hPz, zero_pow two_ne_zero, div_zero]\n\n"}
{"name":"WeierstrassCurve.Projective.dblU_ne_zero_of_Y_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Nonsingular P\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))\nhy' : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W.negY Q) (P 2))\n⊢ Ne (W.dblU P) 0","decl":"lemma dblU_ne_zero_of_Y_eq {P Q : Fin 3 → F} (hP : W.Nonsingular P) (hPz : P z ≠ 0) (hQz : Q z ≠ 0)\n    (hx : P x * Q z = Q x * P z) (hy : P y * Q z = Q y * P z) (hy' : P y * Q z = W.negY Q * P z) :\n    W.dblU P ≠ 0 :=\n  div_ne_zero (pow_ne_zero 3\n    ((nonsingular_iff_of_Y_eq_negY hPz <| Y_eq_negY_of_Y_eq hQz hx hy hy').mp hP).right) <|\n    pow_ne_zero 2 hPz\n\n"}
{"name":"WeierstrassCurve.Projective.isUnit_dblU_of_Y_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Nonsingular P\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))\nhy' : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W.negY Q) (P 2))\n⊢ IsUnit (W.dblU P)","decl":"lemma isUnit_dblU_of_Y_eq {P Q : Fin 3 → F} (hP : W.Nonsingular P) (hPz : P z ≠ 0) (hQz : Q z ≠ 0)\n    (hx : P x * Q z = Q x * P z) (hy : P y * Q z = Q y * P z) (hy' : P y * Q z = W.negY Q * P z) :\n    IsUnit (W.dblU P) :=\n  (dblU_ne_zero_of_Y_eq hP hPz hQz hx hy hy').isUnit\n\n"}
{"name":"WeierstrassCurve.Projective.dblZ_smul","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\nu : R\n⊢ Eq (W'.dblZ (HSMul.hSMul u P)) (HMul.hMul (HPow.hPow u 4) (W'.dblZ P))","decl":"lemma dblZ_smul (P : Fin 3 → R) (u : R) : W'.dblZ (u • P) = u ^ 4 * W'.dblZ P := by\n  simp only [dblZ, negY_smul, smul_fin3_ext]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.dblZ_of_Z_eq_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\nhPz : Eq (P 2) 0\n⊢ Eq (W'.dblZ P) 0","decl":"lemma dblZ_of_Z_eq_zero {P : Fin 3 → R} (hPz : P z = 0) : W'.dblZ P = 0 := by\n  rw [dblZ, hPz, zero_mul]\n\n"}
{"name":"WeierstrassCurve.Projective.dblZ_of_Y_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))\nhy' : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W'.negY Q) (P 2))\n⊢ Eq (W'.dblZ P) 0","decl":"lemma dblZ_of_Y_eq [NoZeroDivisors R] {P Q : Fin 3 → R} (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z)\n    (hy : P y * Q z = Q y * P z) (hy' : P y * Q z = W'.negY Q * P z) : W'.dblZ P = 0 := by\n  rw [dblZ, Y_eq_negY_of_Y_eq hQz hx hy hy', sub_self, zero_pow three_ne_zero, mul_zero]\n\n"}
{"name":"WeierstrassCurve.Projective.dblZ_ne_zero_of_Y_ne","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhQ : W'.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Ne (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))\n⊢ Ne (W'.dblZ P) 0","decl":"lemma dblZ_ne_zero_of_Y_ne [NoZeroDivisors R] {P Q : Fin 3 → R} (hP : W'.Equation P)\n    (hQ : W'.Equation Q) (hPz : P z ≠ 0) (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z)\n    (hy : P y * Q z ≠ Q y * P z) : W'.dblZ P ≠ 0 :=\n  mul_ne_zero hPz <| pow_ne_zero 3 <| sub_ne_zero.mpr <| Y_ne_negY_of_Y_ne hP hQ hPz hQz hx hy\n\n"}
{"name":"WeierstrassCurve.Projective.isUnit_dblZ_of_Y_ne","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhQ : W.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Ne (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))\n⊢ IsUnit (W.dblZ P)","decl":"lemma isUnit_dblZ_of_Y_ne {P Q : Fin 3 → F} (hP : W.Equation P) (hQ : W.Equation Q) (hPz : P z ≠ 0)\n    (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z) (hy : P y * Q z ≠ Q y * P z) : IsUnit (W.dblZ P) :=\n  (dblZ_ne_zero_of_Y_ne hP hQ hPz hQz hx hy).isUnit\n\n"}
{"name":"WeierstrassCurve.Projective.dblZ_ne_zero_of_Y_ne'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhQ : W'.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Ne (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W'.negY Q) (P 2))\n⊢ Ne (W'.dblZ P) 0","decl":"lemma dblZ_ne_zero_of_Y_ne' [NoZeroDivisors R] {P Q : Fin 3 → R} (hP : W'.Equation P)\n    (hQ : W'.Equation Q) (hPz : P z ≠ 0) (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z)\n    (hy : P y * Q z ≠ W'.negY Q * P z) : W'.dblZ P ≠ 0 :=\n  mul_ne_zero hPz <| pow_ne_zero 3 <| sub_ne_zero.mpr <| Y_ne_negY_of_Y_ne' hP hQ hPz hQz hx hy\n\n"}
{"name":"WeierstrassCurve.Projective.isUnit_dblZ_of_Y_ne'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhQ : W.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Ne (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W.negY Q) (P 2))\n⊢ IsUnit (W.dblZ P)","decl":"lemma isUnit_dblZ_of_Y_ne' {P Q : Fin 3 → F} (hP : W.Equation P) (hQ : W.Equation Q) (hPz : P z ≠ 0)\n    (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z) (hy : P y * Q z ≠ W.negY Q * P z) :\n    IsUnit (W.dblZ P) :=\n  (dblZ_ne_zero_of_Y_ne' hP hQ hPz hQz hx hy).isUnit\n\n"}
{"name":"WeierstrassCurve.Projective.dblX_eq'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\nhP : W'.Equation P\n⊢ Eq (HMul.hMul (W'.dblX P) (P 2)) (HMul.hMul (HSub.hSub (HSub.hSub (HSub.hSub (HPow.hPow ((MvPolynomial.eval P) W'.polynomialX) 2) (HMul.hMul (HMul.hMul (HMul.hMul W'.a₁ ((MvPolynomial.eval P) W'.polynomialX)) (P 2)) (HSub.hSub (P 1) (W'.negY P)))) (HMul.hMul (HMul.hMul W'.a₂ (HPow.hPow (P 2) 2)) (HPow.hPow (HSub.hSub (P 1) (W'.negY P)) 2))) (HMul.hMul (HMul.hMul (HMul.hMul 2 (P 0)) (P 2)) (HPow.hPow (HSub.hSub (P 1) (W'.negY P)) 2))) (HSub.hSub (P 1) (W'.negY P)))","decl":"lemma dblX_eq' {P : Fin 3 → R} (hP : W'.Equation P) : W'.dblX P * P z =\n    (eval P W'.polynomialX ^ 2 - W'.a₁ * eval P W'.polynomialX * P z * (P y - W'.negY P)\n      - W'.a₂ * P z ^ 2 * (P y - W'.negY P) ^ 2 - 2 * P x * P z * (P y - W'.negY P) ^ 2)\n      * (P y - W'.negY P) := by\n  linear_combination (norm := (rw [dblX, eval_polynomialX, negY]; ring1))\n    9 * (W'.a₁ * P x ^ 2 + 2 * P x * P y) * (equation_iff _).mp hP\n\n"}
{"name":"WeierstrassCurve.Projective.dblX_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhP : W.Equation P\nhPz : Ne (P 2) 0\n⊢ Eq (W.dblX P) (HDiv.hDiv (HMul.hMul (HSub.hSub (HSub.hSub (HSub.hSub (HPow.hPow ((MvPolynomial.eval P) W.polynomialX) 2) (HMul.hMul (HMul.hMul (HMul.hMul W.a₁ ((MvPolynomial.eval P) W.polynomialX)) (P 2)) (HSub.hSub (P 1) (W.negY P)))) (HMul.hMul (HMul.hMul W.a₂ (HPow.hPow (P 2) 2)) (HPow.hPow (HSub.hSub (P 1) (W.negY P)) 2))) (HMul.hMul (HMul.hMul (HMul.hMul 2 (P 0)) (P 2)) (HPow.hPow (HSub.hSub (P 1) (W.negY P)) 2))) (HSub.hSub (P 1) (W.negY P))) (P 2))","decl":"lemma dblX_eq {P : Fin 3 → F} (hP : W.Equation P) (hPz : P z ≠ 0) : W.dblX P =\n    ((eval P W.polynomialX ^ 2 - W.a₁ * eval P W.polynomialX * P z * (P y - W.negY P)\n      - W.a₂ * P z ^ 2 * (P y - W.negY P) ^ 2 - 2 * P x * P z * (P y - W.negY P) ^ 2)\n      * (P y - W.negY P)) / P z := by\n  rw [← dblX_eq' hP, mul_div_cancel_right₀ _ hPz]\n\n"}
{"name":"WeierstrassCurve.Projective.dblX_smul","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\nu : R\n⊢ Eq (W'.dblX (HSMul.hSMul u P)) (HMul.hMul (HPow.hPow u 4) (W'.dblX P))","decl":"lemma dblX_smul (P : Fin 3 → R) (u : R) : W'.dblX (u • P) = u ^ 4 * W'.dblX P := by\n  simp only [dblX, smul_fin3_ext]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.dblX_of_Z_eq_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP : Fin 3 → R\nhP : W'.Equation P\nhPz : Eq (P 2) 0\n⊢ Eq (W'.dblX P) 0","decl":"lemma dblX_of_Z_eq_zero [NoZeroDivisors R] {P : Fin 3 → R} (hP : W'.Equation P) (hPz : P z = 0) :\n    W'.dblX P = 0 := by\n  rw [dblX, hPz, X_eq_zero_of_Z_eq_zero hP hPz]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.dblX_of_Y_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))\nhy' : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W'.negY Q) (P 2))\n⊢ Eq (W'.dblX P) 0","decl":"lemma dblX_of_Y_eq [NoZeroDivisors R] {P Q : Fin 3 → R} (hP : W'.Equation P) (hPz : P z ≠ 0)\n    (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z) (hy : P y * Q z = Q y * P z)\n    (hy' : P y * Q z = W'.negY Q * P z) : W'.dblX P = 0 := by\n  apply eq_zero_of_ne_zero_of_mul_right_eq_zero hPz\n  rw [dblX_eq' hP, Y_eq_negY_of_Y_eq hQz hx hy hy']\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.dblX_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhQ : W.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Ne (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W.negY Q) (P 2))\n⊢ Eq (HDiv.hDiv (W.dblX P) (W.dblZ P)) (W.toAffine.addX (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (W.toAffine.slope (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (HDiv.hDiv (Q 1) (Q 2))))","decl":"lemma dblX_of_Z_ne_zero {P Q : Fin 3 → F} (hP : W.Equation P) (hQ : W.Equation Q) (hPz : P z ≠ 0)\n    (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z) (hy : P y * Q z ≠ W.negY Q * P z) :\n    W.dblX P / W.dblZ P = W.toAffine.addX (P x / P z) (Q x / Q z)\n      (W.toAffine.slope (P x / P z) (Q x / Q z) (P y / P z) (Q y / Q z)) := by\n  rw [dblX_eq hP hPz, dblZ, toAffine_slope_of_eq hP hQ hPz hQz hx hy, ← (X_eq_iff hPz hQz).mp hx,\n    toAffine_addX_of_eq hPz <| sub_ne_zero.mpr <| Y_ne_negY_of_Y_ne' hP hQ hPz hQz hx hy]\n\n"}
{"name":"WeierstrassCurve.Projective.negDblY_eq'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\nhP : W'.Equation P\n⊢ Eq (HMul.hMul (W'.negDblY P) (HPow.hPow (P 2) 2)) (HAdd.hAdd (HMul.hMul (Neg.neg ((MvPolynomial.eval P) W'.polynomialX)) (HSub.hSub (HSub.hSub (HSub.hSub (HSub.hSub (HPow.hPow ((MvPolynomial.eval P) W'.polynomialX) 2) (HMul.hMul (HMul.hMul (HMul.hMul W'.a₁ ((MvPolynomial.eval P) W'.polynomialX)) (P 2)) (HSub.hSub (P 1) (W'.negY P)))) (HMul.hMul (HMul.hMul W'.a₂ (HPow.hPow (P 2) 2)) (HPow.hPow (HSub.hSub (P 1) (W'.negY P)) 2))) (HMul.hMul (HMul.hMul (HMul.hMul 2 (P 0)) (P 2)) (HPow.hPow (HSub.hSub (P 1) (W'.negY P)) 2))) (HMul.hMul (HMul.hMul (P 0) (P 2)) (HPow.hPow (HSub.hSub (P 1) (W'.negY P)) 2)))) (HMul.hMul (HMul.hMul (P 1) (HPow.hPow (P 2) 2)) (HPow.hPow (HSub.hSub (P 1) (W'.negY P)) 3)))","decl":"lemma negDblY_eq' {P : Fin 3 → R} (hP : W'.Equation P) : W'.negDblY P * P z ^ 2 =\n    -eval P W'.polynomialX * (eval P W'.polynomialX ^ 2\n      - W'.a₁ * eval P W'.polynomialX * P z * (P y - W'.negY P)\n      - W'.a₂ * P z ^ 2 * (P y - W'.negY P) ^ 2 - 2 * P x * P z * (P y - W'.negY P) ^ 2\n      - P x * P z * (P y - W'.negY P) ^ 2) + P y * P z ^ 2 * (P y - W'.negY P) ^ 3 := by\n  linear_combination (norm := (rw [negDblY, eval_polynomialX, negY]; ring1))\n    -9 * (P y ^ 2 * P z + 2 * W'.a₁ * P x * P y * P z - 3 * P x ^ 3 - 3 * W'.a₂ * P x ^ 2 * P z)\n      * (equation_iff _).mp hP\n\n"}
{"name":"WeierstrassCurve.Projective.negDblY_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhP : W.Equation P\nhPz : Ne (P 2) 0\n⊢ Eq (W.negDblY P) (HDiv.hDiv (HAdd.hAdd (HMul.hMul (Neg.neg ((MvPolynomial.eval P) W.polynomialX)) (HSub.hSub (HSub.hSub (HSub.hSub (HSub.hSub (HPow.hPow ((MvPolynomial.eval P) W.polynomialX) 2) (HMul.hMul (HMul.hMul (HMul.hMul W.a₁ ((MvPolynomial.eval P) W.polynomialX)) (P 2)) (HSub.hSub (P 1) (W.negY P)))) (HMul.hMul (HMul.hMul W.a₂ (HPow.hPow (P 2) 2)) (HPow.hPow (HSub.hSub (P 1) (W.negY P)) 2))) (HMul.hMul (HMul.hMul (HMul.hMul 2 (P 0)) (P 2)) (HPow.hPow (HSub.hSub (P 1) (W.negY P)) 2))) (HMul.hMul (HMul.hMul (P 0) (P 2)) (HPow.hPow (HSub.hSub (P 1) (W.negY P)) 2)))) (HMul.hMul (HMul.hMul (P 1) (HPow.hPow (P 2) 2)) (HPow.hPow (HSub.hSub (P 1) (W.negY P)) 3))) (HPow.hPow (P 2) 2))","decl":"lemma negDblY_eq {P : Fin 3 → F} (hP : W.Equation P) (hPz : P z ≠ 0) : W.negDblY P =\n    (-eval P W.polynomialX * (eval P W.polynomialX ^ 2\n      - W.a₁ * eval P W.polynomialX * P z * (P y - W.negY P)\n      - W.a₂ * P z ^ 2 * (P y - W.negY P) ^ 2 - 2 * P x * P z * (P y - W.negY P) ^ 2\n      - P x * P z * (P y - W.negY P) ^ 2) + P y * P z ^ 2 * (P y - W.negY P) ^ 3) / P z ^ 2 := by\n  rw [← negDblY_eq' hP, mul_div_cancel_right₀ _ <| pow_ne_zero 2 hPz]\n\n"}
{"name":"WeierstrassCurve.Projective.negDblY_smul","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\nu : R\n⊢ Eq (W'.negDblY (HSMul.hSMul u P)) (HMul.hMul (HPow.hPow u 4) (W'.negDblY P))","decl":"lemma negDblY_smul (P : Fin 3 → R) (u : R) : W'.negDblY (u • P) = u ^ 4 * W'.negDblY P := by\n  simp only [negDblY, smul_fin3_ext]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.negDblY_of_Z_eq_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP : Fin 3 → R\nhP : W'.Equation P\nhPz : Eq (P 2) 0\n⊢ Eq (W'.negDblY P) (Neg.neg (HPow.hPow (P 1) 4))","decl":"lemma negDblY_of_Z_eq_zero [NoZeroDivisors R] {P : Fin 3 → R} (hP : W'.Equation P) (hPz : P z = 0) :\n    W'.negDblY P = -P y ^ 4 := by\n  rw [negDblY, hPz, X_eq_zero_of_Z_eq_zero hP hPz]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.negDblY_of_Y_eq'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))\nhy' : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W'.negY Q) (P 2))\n⊢ Eq (HMul.hMul (W'.negDblY P) (HPow.hPow (P 2) 2)) (Neg.neg (HPow.hPow ((MvPolynomial.eval P) W'.polynomialX) 3))","decl":"lemma negDblY_of_Y_eq' [NoZeroDivisors R] {P Q : Fin 3 → R} (hP : W'.Equation P) (hQz : Q z ≠ 0)\n    (hx : P x * Q z = Q x * P z) (hy : P y * Q z = Q y * P z) (hy' : P y * Q z = W'.negY Q * P z) :\n    W'.negDblY P * P z ^ 2 = -eval P W'.polynomialX ^ 3 := by\n  rw [negDblY_eq' hP, Y_eq_negY_of_Y_eq hQz hx hy hy']\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.negDblY_of_Y_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))\nhy' : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W.negY Q) (P 2))\n⊢ Eq (W.negDblY P) (Neg.neg (W.dblU P))","decl":"lemma negDblY_of_Y_eq {P Q : Fin 3 → F} (hP : W.Equation P) (hPz : P z ≠ 0) (hQz : Q z ≠ 0)\n    (hx : P x * Q z = Q x * P z) (hy : P y * Q z = Q y * P z) (hy' : P y * Q z = W.negY Q * P z) :\n    W.negDblY P = -W.dblU P := by\n  rw [dblU, ← neg_div, ← negDblY_of_Y_eq' hP hQz hx hy hy',\n    mul_div_cancel_right₀ _ <| pow_ne_zero 2 hPz]\n\n"}
{"name":"WeierstrassCurve.Projective.negDblY_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhQ : W.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Ne (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W.negY Q) (P 2))\n⊢ Eq (HDiv.hDiv (W.negDblY P) (W.dblZ P)) (W.toAffine.negAddY (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (W.toAffine.slope (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (HDiv.hDiv (Q 1) (Q 2))))","decl":"lemma negDblY_of_Z_ne_zero {P Q : Fin 3 → F} (hP : W.Equation P) (hQ : W.Equation Q)\n    (hPz : P z ≠ 0) (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z) (hy : P y * Q z ≠ W.negY Q * P z) :\n    W.negDblY P / W.dblZ P = W.toAffine.negAddY (P x / P z) (Q x / Q z) (P y / P z)\n      (W.toAffine.slope (P x / P z) (Q x / Q z) (P y / P z) (Q y / Q z)) := by\n  rw [negDblY_eq hP hPz, dblZ, toAffine_slope_of_eq hP hQ hPz hQz hx hy, ← (X_eq_iff hPz hQz).mp hx,\n    toAffine_negAddY_of_eq hPz <| sub_ne_zero.mpr <| Y_ne_negY_of_Y_ne' hP hQ hPz hQz hx hy]\n\n"}
{"name":"WeierstrassCurve.Projective.dblY_smul","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\nu : R\n⊢ Eq (W'.dblY (HSMul.hSMul u P)) (HMul.hMul (HPow.hPow u 4) (W'.dblY P))","decl":"lemma dblY_smul (P : Fin 3 → R) (u : R) : W'.dblY (u • P) = u ^ 4 * W'.dblY P := by\n  simp only [dblY, negY_eq, negDblY_smul, dblX_smul, dblZ_smul]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.dblY_of_Z_eq_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP : Fin 3 → R\nhP : W'.Equation P\nhPz : Eq (P 2) 0\n⊢ Eq (W'.dblY P) (HPow.hPow (P 1) 4)","decl":"lemma dblY_of_Z_eq_zero [NoZeroDivisors R] {P : Fin 3 → R} (hP : W'.Equation P) (hPz : P z = 0) :\n    W'.dblY P = P y ^ 4 := by\n  rw [dblY, negY_eq, negDblY_of_Z_eq_zero hP hPz, dblX_of_Z_eq_zero hP hPz, dblZ_of_Z_eq_zero hPz]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.dblY_of_Y_eq'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))\nhy' : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W'.negY Q) (P 2))\n⊢ Eq (HMul.hMul (W'.dblY P) (HPow.hPow (P 2) 2)) (HPow.hPow ((MvPolynomial.eval P) W'.polynomialX) 3)","decl":"lemma dblY_of_Y_eq' [NoZeroDivisors R] {P Q : Fin 3 → R} (hP : W'.Equation P) (hPz : P z ≠ 0)\n    (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z) (hy : P y * Q z = Q y * P z)\n    (hy' : P y * Q z = W'.negY Q * P z) : W'.dblY P * P z ^ 2 = eval P W'.polynomialX ^ 3 := by\n  linear_combination (norm := (rw [dblY, negY_eq, dblX_of_Y_eq hP hPz hQz hx hy hy',\n    dblZ_of_Y_eq hQz hx hy hy']; ring1)) -negDblY_of_Y_eq' hP hQz hx hy hy'\n\n"}
{"name":"WeierstrassCurve.Projective.dblY_of_Y_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))\nhy' : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W.negY Q) (P 2))\n⊢ Eq (W.dblY P) (W.dblU P)","decl":"lemma dblY_of_Y_eq {P Q : Fin 3 → F} (hP : W.Equation P) (hPz : P z ≠ 0) (hQz : Q z ≠ 0)\n    (hx : P x * Q z = Q x * P z) (hy : P y * Q z = Q y * P z) (hy' : P y * Q z = W.negY Q * P z) :\n    W.dblY P = W.dblU P := by\n  rw [dblU, ← dblY_of_Y_eq' hP hPz hQz hx hy hy', mul_div_cancel_right₀ _ <| pow_ne_zero 2 hPz]\n\n"}
{"name":"WeierstrassCurve.Projective.dblY_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhQ : W.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Ne (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W.negY Q) (P 2))\n⊢ Eq (HDiv.hDiv (W.dblY P) (W.dblZ P)) (W.toAffine.addY (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (W.toAffine.slope (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (HDiv.hDiv (Q 1) (Q 2))))","decl":"lemma dblY_of_Z_ne_zero {P Q : Fin 3 → F} (hP : W.Equation P) (hQ : W.Equation Q) (hPz : P z ≠ 0)\n    (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z) (hy : P y * Q z ≠ W.negY Q * P z) :\n    W.dblY P / W.dblZ P = W.toAffine.addY (P x / P z) (Q x / Q z) (P y / P z)\n      (W.toAffine.slope (P x / P z) (Q x / Q z) (P y / P z) (Q y / Q z)) := by\n  erw [dblY, negY_of_Z_ne_zero <| dblZ_ne_zero_of_Y_ne' hP hQ hPz hQz hx hy,\n    dblX_of_Z_ne_zero hP hQ hPz hQz hx hy, negDblY_of_Z_ne_zero hP hQ hPz hQz hx hy, Affine.addY]\n\n"}
{"name":"WeierstrassCurve.Projective.dblXYZ_X","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Eq (W'.dblXYZ P 0) (W'.dblX P)","decl":"lemma dblXYZ_X (P : Fin 3 → R) : W'.dblXYZ P x = W'.dblX P :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.dblXYZ_Y","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Eq (W'.dblXYZ P 1) (W'.dblY P)","decl":"lemma dblXYZ_Y (P : Fin 3 → R) : W'.dblXYZ P y = W'.dblY P :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.dblXYZ_Z","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Eq (W'.dblXYZ P 2) (W'.dblZ P)","decl":"lemma dblXYZ_Z (P : Fin 3 → R) : W'.dblXYZ P z = W'.dblZ P :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.dblXYZ_smul","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\nu : R\n⊢ Eq (W'.dblXYZ (HSMul.hSMul u P)) (HSMul.hSMul (HPow.hPow u 4) (W'.dblXYZ P))","decl":"lemma dblXYZ_smul (P : Fin 3 → R) (u : R) : W'.dblXYZ (u • P) = u ^ 4 • W'.dblXYZ P := by\n  rw [dblXYZ, dblX_smul, dblY_smul, dblZ_smul, smul_fin3, dblXYZ_X, dblXYZ_Y, dblXYZ_Z]\n\n"}
{"name":"WeierstrassCurve.Projective.dblXYZ_of_Z_eq_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP : Fin 3 → R\nhP : W'.Equation P\nhPz : Eq (P 2) 0\n⊢ Eq (W'.dblXYZ P) (HSMul.hSMul (HPow.hPow (P 1) 4) (Matrix.vecCons 0 (Matrix.vecCons 1 (Matrix.vecCons 0 Matrix.vecEmpty))))","decl":"lemma dblXYZ_of_Z_eq_zero [NoZeroDivisors R] {P : Fin 3 → R} (hP : W'.Equation P) (hPz : P z = 0) :\n    W'.dblXYZ P = P y ^ 4 • ![0, 1, 0] := by\n  erw [dblXYZ, dblX_of_Z_eq_zero hP hPz, dblY_of_Z_eq_zero hP hPz, dblZ_of_Z_eq_zero hPz, smul_fin3,\n    mul_zero, mul_one]\n\n"}
{"name":"WeierstrassCurve.Projective.dblXYZ_of_Y_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))\nhy' : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W.negY Q) (P 2))\n⊢ Eq (W.dblXYZ P) (HSMul.hSMul (W.dblU P) (Matrix.vecCons 0 (Matrix.vecCons 1 (Matrix.vecCons 0 Matrix.vecEmpty))))","decl":"lemma dblXYZ_of_Y_eq {P Q : Fin 3 → F} (hP : W.Equation P) (hPz : P z ≠ 0) (hQz : Q z ≠ 0)\n    (hx : P x * Q z = Q x * P z) (hy : P y * Q z = Q y * P z) (hy' : P y * Q z = W.negY Q * P z) :\n    W.dblXYZ P = W.dblU P • ![0, 1, 0] := by\n  erw [dblXYZ, dblX_of_Y_eq hP hPz hQz hx hy hy', dblY_of_Y_eq hP hPz hQz hx hy hy',\n    dblZ_of_Y_eq hQz hx hy hy', smul_fin3, mul_zero, mul_one]\n\n"}
{"name":"WeierstrassCurve.Projective.dblXYZ_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhQ : W.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Ne (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W.negY Q) (P 2))\n⊢ Eq (W.dblXYZ P) (HSMul.hSMul (W.dblZ P) (Matrix.vecCons (W.toAffine.addX (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (W.toAffine.slope (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (HDiv.hDiv (Q 1) (Q 2)))) (Matrix.vecCons (W.toAffine.addY (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (W.toAffine.slope (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (HDiv.hDiv (Q 1) (Q 2)))) (Matrix.vecCons 1 Matrix.vecEmpty))))","decl":"lemma dblXYZ_of_Z_ne_zero {P Q : Fin 3 → F} (hP : W.Equation P) (hQ : W.Equation Q) (hPz : P z ≠ 0)\n    (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z) (hy : P y * Q z ≠ W.negY Q * P z) :\n    W.dblXYZ P = W.dblZ P •\n      ![W.toAffine.addX (P x / P z) (Q x / Q z)\n          (W.toAffine.slope (P x / P z) (Q x / Q z) (P y / P z) (Q y / Q z)),\n        W.toAffine.addY (P x / P z) (Q x / Q z) (P y / P z)\n          (W.toAffine.slope (P x / P z) (Q x / Q z) (P y / P z) (Q y / Q z)), 1] := by\n  have hZ : IsUnit <| W.dblZ P := isUnit_dblZ_of_Y_ne' hP hQ hPz hQz hx hy\n  erw [dblXYZ, smul_fin3, ← dblX_of_Z_ne_zero hP hQ hPz hQz hx hy, hZ.mul_div_cancel,\n    ← dblY_of_Z_ne_zero hP hQ hPz hQz hx hy, hZ.mul_div_cancel, mul_one]\n\n"}
{"name":"WeierstrassCurve.Projective.addU_smul","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nP Q : Fin 3 → F\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nu v : F\nhu : Ne u 0\nhv : Ne v 0\n⊢ Eq (WeierstrassCurve.Projective.addU (HSMul.hSMul u P) (HSMul.hSMul v Q)) (HMul.hMul (HPow.hPow (HMul.hMul u v) 2) (WeierstrassCurve.Projective.addU P Q))","decl":"lemma addU_smul {P Q : Fin 3 → F} (hPz : P z ≠ 0) (hQz : Q z ≠ 0) {u v : F} (hu : u ≠ 0)\n    (hv : v ≠ 0) : addU (u • P) (v • Q) = (u * v) ^ 2 * addU P Q := by\n  field_simp [addU, smul_fin3_ext]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.addU_of_Z_eq_zero_left","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nP Q : Fin 3 → F\nhPz : Eq (P 2) 0\n⊢ Eq (WeierstrassCurve.Projective.addU P Q) 0","decl":"lemma addU_of_Z_eq_zero_left {P Q : Fin 3 → F} (hPz : P z = 0) : addU P Q = 0 := by\n  rw [addU, hPz, zero_mul, div_zero]\n\n"}
{"name":"WeierstrassCurve.Projective.addU_of_Z_eq_zero_right","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nP Q : Fin 3 → F\nhQz : Eq (Q 2) 0\n⊢ Eq (WeierstrassCurve.Projective.addU P Q) 0","decl":"lemma addU_of_Z_eq_zero_right {P Q : Fin 3 → F} (hQz : Q z = 0) : addU P Q = 0 := by\n  rw [addU, hQz, mul_zero <| P z, div_zero]\n\n"}
{"name":"WeierstrassCurve.Projective.addU_ne_zero_of_Y_ne","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nP Q : Fin 3 → F\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhy : Ne (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))\n⊢ Ne (WeierstrassCurve.Projective.addU P Q) 0","decl":"lemma addU_ne_zero_of_Y_ne {P Q : Fin 3 → F} (hPz : P z ≠ 0) (hQz : Q z ≠ 0)\n    (hy : P y * Q z ≠ Q y * P z) : addU P Q ≠ 0 :=\n  div_ne_zero (neg_ne_zero.mpr <| pow_ne_zero 3 <| sub_ne_zero.mpr hy) <| mul_ne_zero hPz hQz\n\n"}
{"name":"WeierstrassCurve.Projective.isUnit_addU_of_Y_ne","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nP Q : Fin 3 → F\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhy : Ne (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))\n⊢ IsUnit (WeierstrassCurve.Projective.addU P Q)","decl":"lemma isUnit_addU_of_Y_ne {P Q : Fin 3 → F} (hPz : P z ≠ 0) (hQz : Q z ≠ 0)\n    (hy : P y * Q z ≠ Q y * P z) : IsUnit (addU P Q) :=\n  (addU_ne_zero_of_Y_ne hPz hQz hy).isUnit\n\n"}
{"name":"WeierstrassCurve.Projective.addZ_eq'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhQ : W'.Equation Q\n⊢ Eq (HMul.hMul (W'.addZ P Q) (HMul.hMul (P 2) (Q 2))) (HPow.hPow (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))) 3)","decl":"lemma addZ_eq' {P Q : Fin 3 → R} (hP : W'.Equation P) (hQ : W'.Equation Q) :\n    W'.addZ P Q * (P z * Q z) = (P x * Q z - Q x * P z) ^ 3 := by\n  linear_combination (norm := (rw [addZ]; ring1))\n    Q z ^ 3 * (equation_iff _).mp hP - P z ^ 3 * (equation_iff _).mp hQ\n\n"}
{"name":"WeierstrassCurve.Projective.addZ_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhQ : W.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\n⊢ Eq (W.addZ P Q) (HDiv.hDiv (HPow.hPow (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))) 3) (HMul.hMul (P 2) (Q 2)))","decl":"lemma addZ_eq {P Q : Fin 3 → F} (hP : W.Equation P) (hQ : W.Equation Q) (hPz : P z ≠ 0)\n    (hQz : Q z ≠ 0) : W.addZ P Q = (P x * Q z - Q x * P z) ^ 3 / (P z * Q z) := by\n  rw [← addZ_eq' hP hQ, mul_div_cancel_right₀ _ <| mul_ne_zero hPz hQz]\n\n"}
{"name":"WeierstrassCurve.Projective.addZ_smul","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\nu v : R\n⊢ Eq (W'.addZ (HSMul.hSMul u P) (HSMul.hSMul v Q)) (HMul.hMul (HPow.hPow (HMul.hMul u v) 2) (W'.addZ P Q))","decl":"lemma addZ_smul (P Q : Fin 3 → R) (u v : R) :\n    W'.addZ (u • P) (v • Q) = (u * v) ^ 2 * W'.addZ P Q := by\n  simp only [addZ, smul_fin3_ext]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.addZ_self","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Eq (W'.addZ P P) 0","decl":"lemma addZ_self (P : Fin 3 → R) : W'.addZ P P = 0 := by\n  rw [addZ]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.addZ_of_Z_eq_zero_left","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhPz : Eq (P 2) 0\n⊢ Eq (W'.addZ P Q) (HMul.hMul (HMul.hMul (HPow.hPow (P 1) 2) (Q 2)) (Q 2))","decl":"lemma addZ_of_Z_eq_zero_left [NoZeroDivisors R] {P Q : Fin 3 → R} (hP : W'.Equation P)\n    (hPz : P z = 0) : W'.addZ P Q = P y ^ 2 * Q z * Q z := by\n  rw [addZ, hPz, X_eq_zero_of_Z_eq_zero hP hPz]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.addZ_of_Z_eq_zero_right","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhQ : W'.Equation Q\nhQz : Eq (Q 2) 0\n⊢ Eq (W'.addZ P Q) (HMul.hMul (Neg.neg (HMul.hMul (HPow.hPow (Q 1) 2) (P 2))) (P 2))","decl":"lemma addZ_of_Z_eq_zero_right [NoZeroDivisors R] {P Q : Fin 3 → R} (hQ : W'.Equation Q)\n    (hQz : Q z = 0) : W'.addZ P Q = -(Q y ^ 2 * P z) * P z := by\n  rw [addZ, hQz, X_eq_zero_of_Z_eq_zero hQ hQz]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.addZ_of_X_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhQ : W'.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\n⊢ Eq (W'.addZ P Q) 0","decl":"lemma addZ_of_X_eq [NoZeroDivisors R] {P Q : Fin 3 → R} (hP : W'.Equation P) (hQ : W'.Equation Q)\n    (hPz : P z ≠ 0) (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z) : W'.addZ P Q = 0 := by\n  apply eq_zero_of_ne_zero_of_mul_right_eq_zero <| mul_ne_zero hPz hQz\n  rw [addZ_eq' hP hQ, hx, sub_self, zero_pow three_ne_zero]\n\n"}
{"name":"WeierstrassCurve.Projective.addZ_ne_zero_of_X_ne","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhQ : W'.Equation Q\nhx : Ne (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\n⊢ Ne (W'.addZ P Q) 0","decl":"lemma addZ_ne_zero_of_X_ne [NoZeroDivisors R] {P Q : Fin 3 → R} (hP : W'.Equation P)\n    (hQ : W'.Equation Q) (hx : P x * Q z ≠ Q x * P z) : W'.addZ P Q ≠ 0 :=\n  addZ_eq' hP hQ ▸ left_ne_zero_of_mul <| pow_ne_zero 3 <| sub_ne_zero.mpr hx\n\n"}
{"name":"WeierstrassCurve.Projective.isUnit_addZ_of_X_ne","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhQ : W.Equation Q\nhx : Ne (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\n⊢ IsUnit (W.addZ P Q)","decl":"lemma isUnit_addZ_of_X_ne {P Q : Fin 3 → F} (hP : W.Equation P) (hQ : W.Equation Q)\n    (hx : P x * Q z ≠ Q x * P z) : IsUnit <| W.addZ P Q :=\n  (addZ_ne_zero_of_X_ne hP hQ hx).isUnit\n\n"}
{"name":"WeierstrassCurve.Projective.addX_eq'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhQ : W'.Equation Q\n⊢ Eq (HMul.hMul (W'.addX P Q) (HPow.hPow (HMul.hMul (P 2) (Q 2)) 2)) (HMul.hMul (HSub.hSub (HSub.hSub (HSub.hSub (HAdd.hAdd (HMul.hMul (HMul.hMul (HPow.hPow (HSub.hSub (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))) 2) (P 2)) (Q 2)) (HMul.hMul (HMul.hMul (HMul.hMul (HMul.hMul W'.a₁ (HSub.hSub (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2)))) (P 2)) (Q 2)) (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))))) (HMul.hMul (HMul.hMul (HMul.hMul W'.a₂ (P 2)) (Q 2)) (HPow.hPow (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))) 2))) (HMul.hMul (HMul.hMul (P 0) (Q 2)) (HPow.hPow (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))) 2))) (HMul.hMul (HMul.hMul (Q 0) (P 2)) (HPow.hPow (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))) 2))) (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))))","decl":"lemma addX_eq' {P Q : Fin 3 → R} (hP : W'.Equation P) (hQ : W'.Equation Q) :\n    W'.addX P Q * (P z * Q z) ^ 2 =\n      ((P y * Q z - Q y * P z) ^ 2 * P z * Q z\n        + W'.a₁ * (P y * Q z - Q y * P z) * P z * Q z * (P x * Q z - Q x * P z)\n        - W'.a₂ * P z * Q z * (P x * Q z - Q x * P z) ^ 2 - P x * Q z * (P x * Q z - Q x * P z) ^ 2\n        - Q x * P z * (P x * Q z - Q x * P z) ^ 2) * (P x * Q z - Q x * P z) := by\n  linear_combination (norm := (rw [addX]; ring1))\n    (2 * Q x * P z * Q z ^ 3 - P x * Q z ^ 4) * (equation_iff _).mp hP\n      + (Q x * P z ^ 4 - 2 * P x * P z ^ 3 * Q z) * (equation_iff _).mp hQ\n\n"}
{"name":"WeierstrassCurve.Projective.addX_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhQ : W.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\n⊢ Eq (W.addX P Q) (HDiv.hDiv (HMul.hMul (HSub.hSub (HSub.hSub (HSub.hSub (HAdd.hAdd (HMul.hMul (HMul.hMul (HPow.hPow (HSub.hSub (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))) 2) (P 2)) (Q 2)) (HMul.hMul (HMul.hMul (HMul.hMul (HMul.hMul W.a₁ (HSub.hSub (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2)))) (P 2)) (Q 2)) (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))))) (HMul.hMul (HMul.hMul (HMul.hMul W.a₂ (P 2)) (Q 2)) (HPow.hPow (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))) 2))) (HMul.hMul (HMul.hMul (P 0) (Q 2)) (HPow.hPow (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))) 2))) (HMul.hMul (HMul.hMul (Q 0) (P 2)) (HPow.hPow (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))) 2))) (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2)))) (HPow.hPow (HMul.hMul (P 2) (Q 2)) 2))","decl":"lemma addX_eq {P Q : Fin 3 → F} (hP : W.Equation P) (hQ : W.Equation Q) (hPz : P z ≠ 0)\n    (hQz : Q z ≠ 0) : W.addX P Q =\n      ((P y * Q z - Q y * P z) ^ 2 * P z * Q z\n        + W.a₁ * (P y * Q z - Q y * P z) * P z * Q z * (P x * Q z - Q x * P z)\n        - W.a₂ * P z * Q z * (P x * Q z - Q x * P z) ^ 2 - P x * Q z * (P x * Q z - Q x * P z) ^ 2\n        - Q x * P z * (P x * Q z - Q x * P z) ^ 2) * (P x * Q z - Q x * P z) / (P z * Q z) ^ 2 := by\n  rw [← addX_eq' hP hQ, mul_div_cancel_right₀ _ <| pow_ne_zero 2 <| mul_ne_zero hPz hQz]\n\n"}
{"name":"WeierstrassCurve.Projective.addX_smul","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\nu v : R\n⊢ Eq (W'.addX (HSMul.hSMul u P) (HSMul.hSMul v Q)) (HMul.hMul (HPow.hPow (HMul.hMul u v) 2) (W'.addX P Q))","decl":"lemma addX_smul (P Q : Fin 3 → R) (u v : R) :\n    W'.addX (u • P) (v • Q) = (u * v) ^ 2 * W'.addX P Q := by\n  simp only [addX, smul_fin3_ext]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.addX_self","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Eq (W'.addX P P) 0","decl":"lemma addX_self (P : Fin 3 → R) : W'.addX P P = 0 := by\n  rw [addX]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.addX_of_Z_eq_zero_left","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhPz : Eq (P 2) 0\n⊢ Eq (W'.addX P Q) (HMul.hMul (HMul.hMul (HPow.hPow (P 1) 2) (Q 2)) (Q 0))","decl":"lemma addX_of_Z_eq_zero_left [NoZeroDivisors R] {P Q : Fin 3 → R} (hP : W'.Equation P)\n    (hPz : P z = 0) : W'.addX P Q = P y ^ 2 * Q z * Q x := by\n  rw [addX, hPz, X_eq_zero_of_Z_eq_zero hP hPz]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.addX_of_Z_eq_zero_right","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhQ : W'.Equation Q\nhQz : Eq (Q 2) 0\n⊢ Eq (W'.addX P Q) (HMul.hMul (Neg.neg (HMul.hMul (HPow.hPow (Q 1) 2) (P 2))) (P 0))","decl":"lemma addX_of_Z_eq_zero_right [NoZeroDivisors R] {P Q : Fin 3 → R} (hQ : W'.Equation Q)\n    (hQz : Q z = 0) : W'.addX P Q = -(Q y ^ 2 * P z) * P x := by\n  rw [addX, hQz, X_eq_zero_of_Z_eq_zero hQ hQz]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.addX_of_X_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhQ : W'.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\n⊢ Eq (W'.addX P Q) 0","decl":"lemma addX_of_X_eq [NoZeroDivisors R] {P Q : Fin 3 → R} (hP : W'.Equation P) (hQ : W'.Equation Q)\n    (hPz : P z ≠ 0) (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z) : W'.addX P Q = 0 := by\n  apply eq_zero_of_ne_zero_of_mul_right_eq_zero <| pow_ne_zero 2 <| mul_ne_zero hPz hQz\n  rw [addX_eq' hP hQ, hx]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.addX_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhQ : W.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Ne (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\n⊢ Eq (HDiv.hDiv (W.addX P Q) (W.addZ P Q)) (W.toAffine.addX (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (W.toAffine.slope (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (HDiv.hDiv (Q 1) (Q 2))))","decl":"lemma addX_of_Z_ne_zero {P Q : Fin 3 → F} (hP : W.Equation P) (hQ : W.Equation Q) (hPz : P z ≠ 0)\n    (hQz : Q z ≠ 0) (hx : P x * Q z ≠ Q x * P z) : W.addX P Q / W.addZ P Q =\n    W.toAffine.addX (P x / P z) (Q x / Q z)\n      (W.toAffine.slope (P x / P z) (Q x / Q z) (P y / P z) (Q y / Q z)) := by\n  rw [addX_eq hP hQ hPz hQz, addZ_eq hP hQ hPz hQz, toAffine_slope_of_ne hPz hQz hx,\n    toAffine_addX_of_ne hPz hQz <| sub_ne_zero.mpr hx]\n\n"}
{"name":"WeierstrassCurve.Projective.negAddY_eq'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhQ : W'.Equation Q\n⊢ Eq (HMul.hMul (W'.negAddY P Q) (HPow.hPow (HMul.hMul (P 2) (Q 2)) 2)) (HAdd.hAdd (HMul.hMul (HSub.hSub (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))) (HSub.hSub (HSub.hSub (HSub.hSub (HSub.hSub (HAdd.hAdd (HMul.hMul (HMul.hMul (HPow.hPow (HSub.hSub (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))) 2) (P 2)) (Q 2)) (HMul.hMul (HMul.hMul (HMul.hMul (HMul.hMul W'.a₁ (HSub.hSub (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2)))) (P 2)) (Q 2)) (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))))) (HMul.hMul (HMul.hMul (HMul.hMul W'.a₂ (P 2)) (Q 2)) (HPow.hPow (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))) 2))) (HMul.hMul (HMul.hMul (P 0) (Q 2)) (HPow.hPow (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))) 2))) (HMul.hMul (HMul.hMul (Q 0) (P 2)) (HPow.hPow (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))) 2))) (HMul.hMul (HMul.hMul (P 0) (Q 2)) (HPow.hPow (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))) 2)))) (HMul.hMul (HMul.hMul (P 1) (Q 2)) (HPow.hPow (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))) 3)))","decl":"lemma negAddY_eq' {P Q : Fin 3 → R} (hP : W'.Equation P) (hQ : W'.Equation Q) :\n    W'.negAddY P Q * (P z * Q z) ^ 2 =\n      (P y * Q z - Q y * P z) * ((P y * Q z - Q y * P z) ^ 2 * P z * Q z\n        + W'.a₁ * (P y * Q z - Q y * P z) * P z * Q z * (P x * Q z - Q x * P z)\n        - W'.a₂ * P z * Q z * (P x * Q z - Q x * P z) ^ 2 - P x * Q z * (P x * Q z - Q x * P z) ^ 2\n        - Q x * P z * (P x * Q z - Q x * P z) ^ 2 - P x * Q z * (P x * Q z - Q x * P z) ^ 2)\n        + P y * Q z * (P x * Q z - Q x * P z) ^ 3 := by\n  linear_combination (norm := (rw [negAddY]; ring1))\n    (2 * Q y * P z * Q z ^ 3 - P y * Q z ^ 4) * (equation_iff _).mp hP\n      + (Q y * P z ^ 4 - 2 * P y * P z ^ 3 * Q z) * (equation_iff _).mp hQ\n\n"}
{"name":"WeierstrassCurve.Projective.negAddY_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhQ : W.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\n⊢ Eq (W.negAddY P Q) (HDiv.hDiv (HAdd.hAdd (HMul.hMul (HSub.hSub (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))) (HSub.hSub (HSub.hSub (HSub.hSub (HSub.hSub (HAdd.hAdd (HMul.hMul (HMul.hMul (HPow.hPow (HSub.hSub (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))) 2) (P 2)) (Q 2)) (HMul.hMul (HMul.hMul (HMul.hMul (HMul.hMul W.a₁ (HSub.hSub (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2)))) (P 2)) (Q 2)) (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))))) (HMul.hMul (HMul.hMul (HMul.hMul W.a₂ (P 2)) (Q 2)) (HPow.hPow (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))) 2))) (HMul.hMul (HMul.hMul (P 0) (Q 2)) (HPow.hPow (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))) 2))) (HMul.hMul (HMul.hMul (Q 0) (P 2)) (HPow.hPow (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))) 2))) (HMul.hMul (HMul.hMul (P 0) (Q 2)) (HPow.hPow (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))) 2)))) (HMul.hMul (HMul.hMul (P 1) (Q 2)) (HPow.hPow (HSub.hSub (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))) 3))) (HPow.hPow (HMul.hMul (P 2) (Q 2)) 2))","decl":"lemma negAddY_eq {P Q : Fin 3 → F} (hP : W.Equation P) (hQ : W.Equation Q) (hPz : P z ≠ 0)\n    (hQz : Q z ≠ 0) : W.negAddY P Q =\n      ((P y * Q z - Q y * P z) * ((P y * Q z - Q y * P z) ^ 2 * P z * Q z\n        + W.a₁ * (P y * Q z - Q y * P z) * P z * Q z * (P x * Q z - Q x * P z)\n        - W.a₂ * P z * Q z * (P x * Q z - Q x * P z) ^ 2 - P x * Q z * (P x * Q z - Q x * P z) ^ 2\n        - Q x * P z * (P x * Q z - Q x * P z) ^ 2 - P x * Q z * (P x * Q z - Q x * P z) ^ 2)\n        + P y * Q z * (P x * Q z - Q x * P z) ^ 3) / (P z * Q z) ^ 2 := by\n  rw [← negAddY_eq' hP hQ, mul_div_cancel_right₀ _ <| pow_ne_zero 2 <| mul_ne_zero hPz hQz]\n\n"}
{"name":"WeierstrassCurve.Projective.negAddY_smul","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\nu v : R\n⊢ Eq (W'.negAddY (HSMul.hSMul u P) (HSMul.hSMul v Q)) (HMul.hMul (HPow.hPow (HMul.hMul u v) 2) (W'.negAddY P Q))","decl":"lemma negAddY_smul (P Q : Fin 3 → R) (u v : R) :\n    W'.negAddY (u • P) (v • Q) = (u * v) ^ 2 * W'.negAddY P Q := by\n  simp only [negAddY, smul_fin3_ext]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.negAddY_self","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Eq (W'.negAddY P P) 0","decl":"lemma negAddY_self (P : Fin 3 → R) : W'.negAddY P P = 0 := by\n  rw [negAddY]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.negAddY_of_Z_eq_zero_left","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhPz : Eq (P 2) 0\n⊢ Eq (W'.negAddY P Q) (HMul.hMul (HMul.hMul (HPow.hPow (P 1) 2) (Q 2)) (W'.negY Q))","decl":"lemma negAddY_of_Z_eq_zero_left [NoZeroDivisors R] {P Q : Fin 3 → R} (hP : W'.Equation P)\n    (hPz : P z = 0) : W'.negAddY P Q = P y ^ 2 * Q z * W'.negY Q := by\n  rw [negAddY, hPz, X_eq_zero_of_Z_eq_zero hP hPz, negY]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.negAddY_of_Z_eq_zero_right","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhQ : W'.Equation Q\nhQz : Eq (Q 2) 0\n⊢ Eq (W'.negAddY P Q) (HMul.hMul (Neg.neg (HMul.hMul (HPow.hPow (Q 1) 2) (P 2))) (W'.negY P))","decl":"lemma negAddY_of_Z_eq_zero_right [NoZeroDivisors R] {P Q : Fin 3 → R} (hQ : W'.Equation Q)\n    (hQz : Q z = 0) : W'.negAddY P Q = -(Q y ^ 2 * P z) * W'.negY P := by\n  rw [negAddY, hQz, X_eq_zero_of_Z_eq_zero hQ hQz, negY]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.negAddY_of_X_eq'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhQ : W'.Equation Q\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\n⊢ Eq (HMul.hMul (W'.negAddY P Q) (HPow.hPow (HMul.hMul (P 2) (Q 2)) 2)) (HMul.hMul (HPow.hPow (HSub.hSub (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))) 3) (HMul.hMul (P 2) (Q 2)))","decl":"lemma negAddY_of_X_eq' {P Q : Fin 3 → R} (hP : W'.Equation P) (hQ : W'.Equation Q)\n    (hx : P x * Q z = Q x * P z) :\n    W'.negAddY P Q * (P z * Q z) ^ 2 = (P y * Q z - Q y * P z) ^ 3 * (P z * Q z) := by\n  rw [negAddY_eq' hP hQ, hx]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.negAddY_of_X_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhQ : W.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\n⊢ Eq (W.negAddY P Q) (Neg.neg (WeierstrassCurve.Projective.addU P Q))","decl":"lemma negAddY_of_X_eq {P Q : Fin 3 → F} (hP : W.Equation P) (hQ : W.Equation Q) (hPz : P z ≠ 0)\n    (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z) : W.negAddY P Q = -addU P Q := by\n  rw [addU, neg_div, neg_neg, ← mul_div_mul_right _ _ <| mul_ne_zero hPz hQz,\n    ← negAddY_of_X_eq' hP hQ hx, ← sq,\n    mul_div_cancel_right₀ _ <| pow_ne_zero 2 <| mul_ne_zero hPz hQz]\n\n"}
{"name":"WeierstrassCurve.Projective.negAddY_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhQ : W.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Ne (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\n⊢ Eq (HDiv.hDiv (W.negAddY P Q) (W.addZ P Q)) (W.toAffine.negAddY (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (W.toAffine.slope (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (HDiv.hDiv (Q 1) (Q 2))))","decl":"lemma negAddY_of_Z_ne_zero {P Q : Fin 3 → F} (hP : W.Equation P) (hQ : W.Equation Q) (hPz : P z ≠ 0)\n    (hQz : Q z ≠ 0) (hx : P x * Q z ≠ Q x * P z) : W.negAddY P Q / W.addZ P Q =\n      W.toAffine.negAddY (P x / P z) (Q x / Q z) (P y / P z)\n        (W.toAffine.slope (P x / P z) (Q x / Q z) (P y / P z) (Q y / Q z)) := by\n  rw [negAddY_eq hP hQ hPz hQz, addZ_eq hP hQ hPz hQz, toAffine_slope_of_ne hPz hQz hx,\n    toAffine_negAddY_of_ne hPz hQz <| sub_ne_zero.mpr hx]\n\n"}
{"name":"WeierstrassCurve.Projective.addY_smul","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\nu v : R\n⊢ Eq (W'.addY (HSMul.hSMul u P) (HSMul.hSMul v Q)) (HMul.hMul (HPow.hPow (HMul.hMul u v) 2) (W'.addY P Q))","decl":"lemma addY_smul (P Q : Fin 3 → R) (u v : R) :\n    W'.addY (u • P) (v • Q) = (u * v) ^ 2 * W'.addY P Q := by\n  simp only [addY, negY_eq, negAddY_smul, addX_smul, addZ_smul]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.addY_self","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Eq (W'.addY P P) 0","decl":"lemma addY_self (P : Fin 3 → R) : W'.addY P P = 0 := by\n  simp only [addY, negY_eq, negAddY_self, addX_self, addZ_self, neg_zero, mul_zero, sub_zero]\n\n"}
{"name":"WeierstrassCurve.Projective.addY_of_Z_eq_zero_left","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhPz : Eq (P 2) 0\n⊢ Eq (W'.addY P Q) (HMul.hMul (HMul.hMul (HPow.hPow (P 1) 2) (Q 2)) (Q 1))","decl":"lemma addY_of_Z_eq_zero_left [NoZeroDivisors R] {P Q : Fin 3 → R} (hP : W'.Equation P)\n    (hPz : P z = 0) : W'.addY P Q = P y ^ 2 * Q z * Q y := by\n  rw [addY, negY_eq, negAddY_of_Z_eq_zero_left hP hPz, negY, addX_of_Z_eq_zero_left hP hPz,\n    addZ_of_Z_eq_zero_left hP hPz]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.addY_of_Z_eq_zero_right","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhQ : W'.Equation Q\nhQz : Eq (Q 2) 0\n⊢ Eq (W'.addY P Q) (HMul.hMul (Neg.neg (HMul.hMul (HPow.hPow (Q 1) 2) (P 2))) (P 1))","decl":"lemma addY_of_Z_eq_zero_right [NoZeroDivisors R] {P Q : Fin 3 → R} (hQ : W'.Equation Q)\n    (hQz : Q z = 0) : W'.addY P Q = -(Q y ^ 2 * P z) * P y := by\n  rw [addY, negY_eq, negAddY_of_Z_eq_zero_right hQ hQz, negY, addX_of_Z_eq_zero_right hQ hQz,\n    addZ_of_Z_eq_zero_right hQ hQz]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.addY_of_X_eq'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhQ : W'.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\n⊢ Eq (HMul.hMul (W'.addY P Q) (HPow.hPow (HMul.hMul (P 2) (Q 2)) 3)) (HMul.hMul (Neg.neg (HPow.hPow (HSub.hSub (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))) 3)) (HPow.hPow (HMul.hMul (P 2) (Q 2)) 2))","decl":"lemma addY_of_X_eq' [NoZeroDivisors R] {P Q : Fin 3 → R} (hP : W'.Equation P) (hQ : W'.Equation Q)\n    (hPz : P z ≠ 0) (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z) :\n    W'.addY P Q * (P z * Q z) ^ 3 = -(P y * Q z - Q y * P z) ^ 3 * (P z * Q z) ^ 2 := by\n  linear_combination (norm := (rw [addY, negY_eq, addX_of_X_eq hP hQ hPz hQz hx,\n    addZ_of_X_eq hP hQ hPz hQz hx]; ring1)) -(P z * Q z) * negAddY_of_X_eq' hP hQ hx\n\n"}
{"name":"WeierstrassCurve.Projective.addY_of_X_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhQ : W.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\n⊢ Eq (W.addY P Q) (WeierstrassCurve.Projective.addU P Q)","decl":"lemma addY_of_X_eq {P Q : Fin 3 → F} (hP : W.Equation P) (hQ : W.Equation Q) (hPz : P z ≠ 0)\n    (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z) : W.addY P Q = addU P Q := by\n  rw [addU, ← mul_div_mul_right _ _ <| pow_ne_zero 2 <| mul_ne_zero hPz hQz,\n    ← addY_of_X_eq' hP hQ hPz hQz hx, ← pow_succ',\n    mul_div_cancel_right₀ _ <| pow_ne_zero 3 <| mul_ne_zero hPz hQz]\n\n"}
{"name":"WeierstrassCurve.Projective.addY_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhQ : W.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Ne (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\n⊢ Eq (HDiv.hDiv (W.addY P Q) (W.addZ P Q)) (W.toAffine.addY (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (W.toAffine.slope (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (HDiv.hDiv (Q 1) (Q 2))))","decl":"lemma addY_of_Z_ne_zero {P Q : Fin 3 → F} (hP : W.Equation P) (hQ : W.Equation Q) (hPz : P z ≠ 0)\n    (hQz : Q z ≠ 0) (hx : P x * Q z ≠ Q x * P z) : W.addY P Q / W.addZ P Q =\n      W.toAffine.addY (P x / P z) (Q x / Q z) (P y / P z)\n        (W.toAffine.slope (P x / P z) (Q x / Q z) (P y / P z) (Q y / Q z)) := by\n  erw [addY, negY_of_Z_ne_zero <| addZ_ne_zero_of_X_ne hP hQ hx, addX_of_Z_ne_zero hP hQ hPz hQz hx,\n    negAddY_of_Z_ne_zero hP hQ hPz hQz hx, Affine.addY]\n\n"}
{"name":"WeierstrassCurve.Projective.addXYZ_X","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\n⊢ Eq (W'.addXYZ P Q 0) (W'.addX P Q)","decl":"lemma addXYZ_X (P Q : Fin 3 → R) : W'.addXYZ P Q x = W'.addX P Q :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.addXYZ_Y","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\n⊢ Eq (W'.addXYZ P Q 1) (W'.addY P Q)","decl":"lemma addXYZ_Y (P Q : Fin 3 → R) : W'.addXYZ P Q y = W'.addY P Q :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.addXYZ_Z","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\n⊢ Eq (W'.addXYZ P Q 2) (W'.addZ P Q)","decl":"lemma addXYZ_Z (P Q : Fin 3 → R) : W'.addXYZ P Q z = W'.addZ P Q :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.addXYZ_smul","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\nu v : R\n⊢ Eq (W'.addXYZ (HSMul.hSMul u P) (HSMul.hSMul v Q)) (HSMul.hSMul (HPow.hPow (HMul.hMul u v) 2) (W'.addXYZ P Q))","decl":"lemma addXYZ_smul (P Q : Fin 3 → R) (u v : R) :\n    W'.addXYZ (u • P) (v • Q) = (u * v) ^ 2 • W'.addXYZ P Q := by\n  rw [addXYZ, addX_smul, addY_smul, addZ_smul, smul_fin3, addXYZ_X, addXYZ_Y, addXYZ_Z]\n\n"}
{"name":"WeierstrassCurve.Projective.addXYZ_self","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Eq (W'.addXYZ P P) (Matrix.vecCons 0 (Matrix.vecCons 0 (Matrix.vecCons 0 Matrix.vecEmpty)))","decl":"lemma addXYZ_self (P : Fin 3 → R) : W'.addXYZ P P = ![0, 0, 0] := by\n  rw [addXYZ, addX_self, addY_self, addZ_self]\n\n"}
{"name":"WeierstrassCurve.Projective.addXYZ_of_Z_eq_zero_left","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhPz : Eq (P 2) 0\n⊢ Eq (W'.addXYZ P Q) (HSMul.hSMul (HMul.hMul (HPow.hPow (P 1) 2) (Q 2)) Q)","decl":"lemma addXYZ_of_Z_eq_zero_left [NoZeroDivisors R] {P Q : Fin 3 → R} (hP : W'.Equation P)\n    (hPz : P z = 0) : W'.addXYZ P Q = (P y ^ 2 * Q z) • Q := by\n  rw [addXYZ, addX_of_Z_eq_zero_left hP hPz, addY_of_Z_eq_zero_left hP hPz,\n    addZ_of_Z_eq_zero_left hP hPz, smul_fin3]\n\n"}
{"name":"WeierstrassCurve.Projective.addXYZ_of_Z_eq_zero_right","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhQ : W'.Equation Q\nhQz : Eq (Q 2) 0\n⊢ Eq (W'.addXYZ P Q) (HSMul.hSMul (Neg.neg (HMul.hMul (HPow.hPow (Q 1) 2) (P 2))) P)","decl":"lemma addXYZ_of_Z_eq_zero_right [NoZeroDivisors R] {P Q : Fin 3 → R} (hQ : W'.Equation Q)\n    (hQz : Q z = 0) : W'.addXYZ P Q = -(Q y ^ 2 * P z) • P := by\n  rw [addXYZ, addX_of_Z_eq_zero_right hQ hQz, addY_of_Z_eq_zero_right hQ hQz,\n    addZ_of_Z_eq_zero_right hQ hQz, smul_fin3]\n\n"}
{"name":"WeierstrassCurve.Projective.addXYZ_of_X_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhQ : W.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\n⊢ Eq (W.addXYZ P Q) (HSMul.hSMul (WeierstrassCurve.Projective.addU P Q) (Matrix.vecCons 0 (Matrix.vecCons 1 (Matrix.vecCons 0 Matrix.vecEmpty))))","decl":"lemma addXYZ_of_X_eq {P Q : Fin 3 → F} (hP : W.Equation P) (hQ : W.Equation Q) (hPz : P z ≠ 0)\n    (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z) : W.addXYZ P Q = addU P Q • ![0, 1, 0] := by\n  erw [addXYZ, addX_of_X_eq hP hQ hPz hQz hx, addY_of_X_eq hP hQ hPz hQz hx,\n    addZ_of_X_eq hP hQ hPz hQz hx, smul_fin3, mul_zero, mul_one]\n\n"}
{"name":"WeierstrassCurve.Projective.addXYZ_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhQ : W.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Ne (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\n⊢ Eq (W.addXYZ P Q) (HSMul.hSMul (W.addZ P Q) (Matrix.vecCons (W.toAffine.addX (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (W.toAffine.slope (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (HDiv.hDiv (Q 1) (Q 2)))) (Matrix.vecCons (W.toAffine.addY (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (W.toAffine.slope (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (HDiv.hDiv (Q 1) (Q 2)))) (Matrix.vecCons 1 Matrix.vecEmpty))))","decl":"lemma addXYZ_of_Z_ne_zero {P Q : Fin 3 → F} (hP : W.Equation P) (hQ : W.Equation Q) (hPz : P z ≠ 0)\n    (hQz : Q z ≠ 0) (hx : P x * Q z ≠ Q x * P z) : W.addXYZ P Q = W.addZ P Q •\n      ![W.toAffine.addX (P x / P z) (Q x / Q z)\n          (W.toAffine.slope (P x / P z) (Q x / Q z) (P y / P z) (Q y / Q z)),\n        W.toAffine.addY (P x / P z) (Q x / Q z) (P y / P z)\n          (W.toAffine.slope (P x / P z) (Q x / Q z) (P y / P z) (Q y / Q z)), 1] := by\n  have hZ : IsUnit <| W.addZ P Q := isUnit_addZ_of_X_ne hP hQ hx\n  erw [addXYZ, smul_fin3, ← addX_of_Z_ne_zero hP hQ hPz hQz hx, hZ.mul_div_cancel,\n    ← addY_of_Z_ne_zero hP hQ hPz hQz hx, hZ.mul_div_cancel, mul_one]\n\n"}
{"name":"WeierstrassCurve.Projective.neg_X","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Eq (W'.neg P 0) (P 0)","decl":"lemma neg_X (P : Fin 3 → R) : W'.neg P x = P x :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.neg_Y","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Eq (W'.neg P 1) (W'.negY P)","decl":"lemma neg_Y (P : Fin 3 → R) : W'.neg P y = W'.negY P :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.neg_Z","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Eq (W'.neg P 2) (P 2)","decl":"lemma neg_Z (P : Fin 3 → R) : W'.neg P z = P z :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.neg_smul","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\nu : R\n⊢ Eq (W'.neg (HSMul.hSMul u P)) (HSMul.hSMul u (W'.neg P))","decl":"lemma neg_smul (P : Fin 3 → R) (u : R) : W'.neg (u • P) = u • W'.neg P := by\n  simpa only [neg, negY_smul] using (smul_fin3 (W'.neg P) u).symm\n\n"}
{"name":"WeierstrassCurve.Projective.neg_smul_equiv","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\nu : R\nhu : IsUnit u\n⊢ HasEquiv.Equiv (W'.neg (HSMul.hSMul u P)) (W'.neg P)","decl":"lemma neg_smul_equiv (P : Fin 3 → R) {u : R} (hu : IsUnit u) : W'.neg (u • P) ≈ W'.neg P :=\n  ⟨hu.unit, (neg_smul ..).symm⟩\n\n"}
{"name":"WeierstrassCurve.Projective.neg_equiv","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\nh : HasEquiv.Equiv P Q\n⊢ HasEquiv.Equiv (W'.neg P) (W'.neg Q)","decl":"lemma neg_equiv {P Q : Fin 3 → R} (h : P ≈ Q) : W'.neg P ≈ W'.neg Q := by\n  rcases h with ⟨u, rfl⟩\n  exact neg_smul_equiv Q u.isUnit\n\n"}
{"name":"WeierstrassCurve.Projective.neg_of_Z_eq_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP : Fin 3 → R\nhP : W'.Equation P\nhPz : Eq (P 2) 0\n⊢ Eq (W'.neg P) (HSMul.hSMul (Neg.neg (P 1)) (Matrix.vecCons 0 (Matrix.vecCons 1 (Matrix.vecCons 0 Matrix.vecEmpty))))","decl":"lemma neg_of_Z_eq_zero [NoZeroDivisors R] {P : Fin 3 → R} (hP : W'.Equation P) (hPz : P z = 0) :\n    W'.neg P = -P y • ![0, 1, 0] := by\n  erw [neg, X_eq_zero_of_Z_eq_zero hP hPz, negY_of_Z_eq_zero hP hPz, hPz, smul_fin3, mul_zero,\n    mul_one]\n\n"}
{"name":"WeierstrassCurve.Projective.neg_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhPz : Ne (P 2) 0\n⊢ Eq (W.neg P) (HSMul.hSMul (P 2) (Matrix.vecCons (HDiv.hDiv (P 0) (P 2)) (Matrix.vecCons (W.toAffine.negY (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (P 1) (P 2))) (Matrix.vecCons 1 Matrix.vecEmpty))))","decl":"lemma neg_of_Z_ne_zero {P : Fin 3 → F} (hPz : P z ≠ 0) :\n    W.neg P = P z • ![P x / P z, W.toAffine.negY (P x / P z) (P y / P z), 1] := by\n  erw [neg, smul_fin3, mul_div_cancel₀ _ hPz, ← negY_of_Z_ne_zero hPz, mul_div_cancel₀ _ hPz,\n    mul_one]\n\n"}
{"name":"WeierstrassCurve.Projective.nonsingular_neg","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhP : W.Nonsingular P\n⊢ W.Nonsingular (W.neg P)","decl":"lemma nonsingular_neg {P : Fin 3 → F} (hP : W.Nonsingular P) : W.Nonsingular <| W.neg P := by\n  by_cases hPz : P z = 0\n  · simp only [neg_of_Z_eq_zero hP.left hPz, nonsingular_smul _ (isUnit_Y_of_Z_eq_zero hP hPz).neg,\n      nonsingular_zero]\n  · simp only [neg_of_Z_ne_zero hPz, nonsingular_smul _ <| Ne.isUnit hPz,\n      nonsingular_neg_of_Z_ne_zero hP hPz]\n\n"}
{"name":"WeierstrassCurve.Projective.addZ_neg","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Eq (W'.addZ P (W'.neg P)) 0","decl":"lemma addZ_neg (P : Fin 3 → R) : W'.addZ P (W'.neg P) = 0 := by\n  rw [addZ, neg_X, neg_Y, neg_Z, negY]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.addX_neg","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Eq (W'.addX P (W'.neg P)) 0","decl":"lemma addX_neg (P : Fin 3 → R) : W'.addX P (W'.neg P) = 0 := by\n  rw [addX, neg_X, neg_Y, neg_Z, negY]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Projective.negAddY_neg","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\nhP : W'.Equation P\n⊢ Eq (W'.negAddY P (W'.neg P)) (W'.dblZ P)","decl":"lemma negAddY_neg {P : Fin 3 → R} (hP : W'.Equation P) : W'.negAddY P (W'.neg P) = W'.dblZ P := by\n  linear_combination (norm := (rw [negAddY, neg_X, neg_Y, neg_Z, dblZ, negY]; ring1))\n    -3 * (P y - W'.negY P) * (equation_iff _).mp hP\n\n"}
{"name":"WeierstrassCurve.Projective.addY_neg","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\nhP : W'.Equation P\n⊢ Eq (W'.addY P (W'.neg P)) (Neg.neg (W'.dblZ P))","decl":"lemma addY_neg {P : Fin 3 → R} (hP : W'.Equation P) : W'.addY P (W'.neg P) = -W'.dblZ P := by\n  rw [addY, negY_eq, addX_neg, negAddY_neg hP, addZ_neg, mul_zero, sub_zero, mul_zero, sub_zero]\n\n"}
{"name":"WeierstrassCurve.Projective.addXYZ_neg","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\nhP : W'.Equation P\n⊢ Eq (W'.addXYZ P (W'.neg P)) (HSMul.hSMul (Neg.neg (W'.dblZ P)) (Matrix.vecCons 0 (Matrix.vecCons 1 (Matrix.vecCons 0 Matrix.vecEmpty))))","decl":"lemma addXYZ_neg {P : Fin 3 → R} (hP : W'.Equation P) :\n    W'.addXYZ P (W'.neg P) = -W'.dblZ P • ![0, 1, 0] := by\n  erw [addXYZ, addX_neg, addY_neg hP, addZ_neg, smul_fin3, mul_zero, mul_one]\n\n"}
{"name":"WeierstrassCurve.Projective.negMap_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Eq (W'.negMap (Quotient.mk (MulAction.orbitRel (Units R) (Fin 3 → R)) P)) (Quotient.mk (MulAction.orbitRel (Units R) (Fin 3 → R)) (W'.neg P))","decl":"lemma negMap_eq (P : Fin 3 → R) : W'.negMap ⟦P⟧ = ⟦W'.neg P⟧ :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.negMap_of_Z_eq_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhP : W.Nonsingular P\nhPz : Eq (P 2) 0\n⊢ Eq (W.negMap (Quotient.mk (MulAction.orbitRel (Units F) (Fin 3 → F)) P)) (Quotient.mk (MulAction.orbitRel (Units F) (Fin 3 → F)) (Matrix.vecCons 0 (Matrix.vecCons 1 (Matrix.vecCons 0 Matrix.vecEmpty))))","decl":"lemma negMap_of_Z_eq_zero {P : Fin 3 → F} (hP : W.Nonsingular P) (hPz : P z = 0) :\n    W.negMap ⟦P⟧ = ⟦![0, 1, 0]⟧ := by\n  rw [negMap_eq, neg_of_Z_eq_zero hP.left hPz, smul_eq _ (isUnit_Y_of_Z_eq_zero hP hPz).neg]\n\n"}
{"name":"WeierstrassCurve.Projective.negMap_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhPz : Ne (P 2) 0\n⊢ Eq (W.negMap (Quotient.mk (MulAction.orbitRel (Units F) (Fin 3 → F)) P)) (Quotient.mk (MulAction.orbitRel (Units F) (Fin 3 → F)) (Matrix.vecCons (HDiv.hDiv (P 0) (P 2)) (Matrix.vecCons (W.toAffine.negY (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (P 1) (P 2))) (Matrix.vecCons 1 Matrix.vecEmpty))))","decl":"lemma negMap_of_Z_ne_zero {P : Fin 3 → F} (hPz : P z ≠ 0) :\n    W.negMap ⟦P⟧ = ⟦![P x / P z, W.toAffine.negY (P x / P z) (P y / P z), 1]⟧ := by\n  rw [negMap_eq, neg_of_Z_ne_zero hPz, smul_eq _ <| Ne.isUnit hPz]\n\n"}
{"name":"WeierstrassCurve.Projective.nonsingularLift_negMap","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : WeierstrassCurve.Projective.PointClass F\nhP : W.NonsingularLift P\n⊢ W.NonsingularLift (W.negMap P)","decl":"lemma nonsingularLift_negMap {P : PointClass F} (hP : W.NonsingularLift P) :\n    W.NonsingularLift <| W.negMap P := by\n  rcases P with ⟨_⟩\n  exact nonsingular_neg hP\n\n"}
{"name":"WeierstrassCurve.Projective.add_of_equiv","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\nh : HasEquiv.Equiv P Q\n⊢ Eq (W'.add P Q) (W'.dblXYZ P)","decl":"lemma add_of_equiv {P Q : Fin 3 → R} (h : P ≈ Q) : W'.add P Q = W'.dblXYZ P :=\n  if_pos h\n\n"}
{"name":"WeierstrassCurve.Projective.add_smul_of_equiv","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\nh : HasEquiv.Equiv P Q\nu v : R\nhu : IsUnit u\nhv : IsUnit v\n⊢ Eq (W'.add (HSMul.hSMul u P) (HSMul.hSMul v Q)) (HSMul.hSMul (HPow.hPow u 4) (W'.add P Q))","decl":"lemma add_smul_of_equiv {P Q : Fin 3 → R} (h : P ≈ Q) {u v : R} (hu : IsUnit u) (hv : IsUnit v) :\n    W'.add (u • P) (v • Q) = u ^ 4 • W'.add P Q := by\n  rw [add_of_equiv <| (smul_equiv_smul P Q hu hv).mpr h, dblXYZ_smul, add_of_equiv h]\n\n"}
{"name":"WeierstrassCurve.Projective.add_self","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : Fin 3 → R\n⊢ Eq (W'.add P P) (W'.dblXYZ P)","decl":"lemma add_self (P : Fin 3 → R) : W'.add P P = W'.dblXYZ P :=\n  add_of_equiv <| Setoid.refl _\n\n"}
{"name":"WeierstrassCurve.Projective.add_of_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\nh : Eq P Q\n⊢ Eq (W'.add P Q) (W'.dblXYZ P)","decl":"lemma add_of_eq {P Q : Fin 3 → R} (h : P = Q) : W'.add P Q = W'.dblXYZ P :=\n  h ▸ add_self P\n\n"}
{"name":"WeierstrassCurve.Projective.add_of_not_equiv","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\nh : Not (HasEquiv.Equiv P Q)\n⊢ Eq (W'.add P Q) (W'.addXYZ P Q)","decl":"lemma add_of_not_equiv {P Q : Fin 3 → R} (h : ¬P ≈ Q) : W'.add P Q = W'.addXYZ P Q :=\n  if_neg h\n\n"}
{"name":"WeierstrassCurve.Projective.add_smul_of_not_equiv","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\nh : Not (HasEquiv.Equiv P Q)\nu v : R\nhu : IsUnit u\nhv : IsUnit v\n⊢ Eq (W'.add (HSMul.hSMul u P) (HSMul.hSMul v Q)) (HSMul.hSMul (HPow.hPow (HMul.hMul u v) 2) (W'.add P Q))","decl":"lemma add_smul_of_not_equiv {P Q : Fin 3 → R} (h : ¬P ≈ Q) {u v : R} (hu : IsUnit u)\n    (hv : IsUnit v) : W'.add (u • P) (v • Q) = (u * v) ^ 2 • W'.add P Q := by\n  rw [add_of_not_equiv <| h.comp (smul_equiv_smul P Q hu hv).mp, addXYZ_smul, add_of_not_equiv h]\n\n"}
{"name":"WeierstrassCurve.Projective.add_smul_equiv","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\nu v : R\nhu : IsUnit u\nhv : IsUnit v\n⊢ HasEquiv.Equiv (W'.add (HSMul.hSMul u P) (HSMul.hSMul v Q)) (W'.add P Q)","decl":"lemma add_smul_equiv (P Q : Fin 3 → R) {u v : R} (hu : IsUnit u) (hv : IsUnit v) :\n    W'.add (u • P) (v • Q) ≈ W'.add P Q := by\n  by_cases h : P ≈ Q\n  · exact ⟨hu.unit ^ 4, by convert (add_smul_of_equiv h hu hv).symm⟩\n  · exact ⟨(hu.unit * hv.unit) ^ 2, by convert (add_smul_of_not_equiv h hu hv).symm⟩\n\n"}
{"name":"WeierstrassCurve.Projective.add_equiv","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP P' Q Q' : Fin 3 → R\nhP : HasEquiv.Equiv P P'\nhQ : HasEquiv.Equiv Q Q'\n⊢ HasEquiv.Equiv (W'.add P Q) (W'.add P' Q')","decl":"lemma add_equiv {P P' Q Q' : Fin 3 → R} (hP : P ≈ P') (hQ : Q ≈ Q') :\n    W'.add P Q ≈ W'.add P' Q' := by\n  rcases hP, hQ with ⟨⟨u, rfl⟩, ⟨v, rfl⟩⟩\n  exact add_smul_equiv P' Q' u.isUnit v.isUnit\n\n"}
{"name":"WeierstrassCurve.Projective.add_of_Z_eq_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Nonsingular P\nhQ : W.Nonsingular Q\nhPz : Eq (P 2) 0\nhQz : Eq (Q 2) 0\n⊢ Eq (W.add P Q) (HSMul.hSMul (HPow.hPow (P 1) 4) (Matrix.vecCons 0 (Matrix.vecCons 1 (Matrix.vecCons 0 Matrix.vecEmpty))))","decl":"lemma add_of_Z_eq_zero {P Q : Fin 3 → F} (hP : W.Nonsingular P) (hQ : W.Nonsingular Q)\n    (hPz : P z = 0) (hQz : Q z = 0) : W.add P Q = P y ^ 4 • ![0, 1, 0] := by\n  rw [add, if_pos <| equiv_of_Z_eq_zero hP hQ hPz hQz, dblXYZ_of_Z_eq_zero hP.left hPz]\n\n"}
{"name":"WeierstrassCurve.Projective.add_of_Z_eq_zero_left","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhP : W'.Equation P\nhPz : Eq (P 2) 0\nhQz : Ne (Q 2) 0\n⊢ Eq (W'.add P Q) (HSMul.hSMul (HMul.hMul (HPow.hPow (P 1) 2) (Q 2)) Q)","decl":"lemma add_of_Z_eq_zero_left [NoZeroDivisors R] {P Q : Fin 3 → R} (hP : W'.Equation P)\n    (hPz : P z = 0) (hQz : Q z ≠ 0) : W'.add P Q = (P y ^ 2 * Q z) • Q := by\n  rw [add, if_neg <| not_equiv_of_Z_eq_zero_left hPz hQz, addXYZ_of_Z_eq_zero_left hP hPz]\n\n"}
{"name":"WeierstrassCurve.Projective.add_of_Z_eq_zero_right","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nP Q : Fin 3 → R\nhQ : W'.Equation Q\nhPz : Ne (P 2) 0\nhQz : Eq (Q 2) 0\n⊢ Eq (W'.add P Q) (HSMul.hSMul (Neg.neg (HMul.hMul (HPow.hPow (Q 1) 2) (P 2))) P)","decl":"lemma add_of_Z_eq_zero_right [NoZeroDivisors R] {P Q : Fin 3 → R} (hQ : W'.Equation Q)\n    (hPz : P z ≠ 0) (hQz : Q z = 0) : W'.add P Q = -(Q y ^ 2 * P z) • P := by\n  rw [add, if_neg <| not_equiv_of_Z_eq_zero_right hPz hQz, addXYZ_of_Z_eq_zero_right hQ hQz]\n\n"}
{"name":"WeierstrassCurve.Projective.add_of_Y_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))\nhy' : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W.negY Q) (P 2))\n⊢ Eq (W.add P Q) (HSMul.hSMul (W.dblU P) (Matrix.vecCons 0 (Matrix.vecCons 1 (Matrix.vecCons 0 Matrix.vecEmpty))))","decl":"lemma add_of_Y_eq {P Q : Fin 3 → F} (hP : W.Equation P) (hPz : P z ≠ 0) (hQz : Q z ≠ 0)\n    (hx : P x * Q z = Q x * P z) (hy : P y * Q z = Q y * P z) (hy' : P y * Q z = W.negY Q * P z) :\n    W.add P Q = W.dblU P • ![0, 1, 0] := by\n  rw [add, if_pos <| equiv_of_X_eq_of_Y_eq hPz hQz hx hy, dblXYZ_of_Y_eq hP hPz hQz hx hy hy']\n\n"}
{"name":"WeierstrassCurve.Projective.add_of_Y_ne","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhQ : W.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Ne (HMul.hMul (P 1) (Q 2)) (HMul.hMul (Q 1) (P 2))\n⊢ Eq (W.add P Q) (HSMul.hSMul (WeierstrassCurve.Projective.addU P Q) (Matrix.vecCons 0 (Matrix.vecCons 1 (Matrix.vecCons 0 Matrix.vecEmpty))))","decl":"lemma add_of_Y_ne {P Q : Fin 3 → F} (hP : W.Equation P) (hQ : W.Equation Q) (hPz : P z ≠ 0)\n    (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z) (hy : P y * Q z ≠ Q y * P z) :\n    W.add P Q = addU P Q • ![0, 1, 0] := by\n  rw [add, if_neg <| not_equiv_of_Y_ne hy, addXYZ_of_X_eq hP hQ hPz hQz hx]\n\n"}
{"name":"WeierstrassCurve.Projective.add_of_Y_ne'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhQ : W.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy : Ne (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W.negY Q) (P 2))\n⊢ Eq (W.add P Q) (HSMul.hSMul (W.dblZ P) (Matrix.vecCons (W.toAffine.addX (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (W.toAffine.slope (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (HDiv.hDiv (Q 1) (Q 2)))) (Matrix.vecCons (W.toAffine.addY (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (W.toAffine.slope (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (HDiv.hDiv (Q 1) (Q 2)))) (Matrix.vecCons 1 Matrix.vecEmpty))))","decl":"lemma add_of_Y_ne' {P Q : Fin 3 → F} (hP : W.Equation P) (hQ : W.Equation Q) (hPz : P z ≠ 0)\n    (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z) (hy : P y * Q z ≠ W.negY Q * P z) :\n    W.add P Q = W.dblZ P •\n      ![W.toAffine.addX (P x / P z) (Q x / Q z)\n          (W.toAffine.slope (P x / P z) (Q x / Q z) (P y / P z) (Q y / Q z)),\n        W.toAffine.addY (P x / P z) (Q x / Q z) (P y / P z)\n          (W.toAffine.slope (P x / P z) (Q x / Q z) (P y / P z) (Q y / Q z)), 1] := by\n  rw [add, if_pos <| equiv_of_X_eq_of_Y_eq hPz hQz hx <| Y_eq_of_Y_ne' hP hQ hPz hQz hx hy,\n    dblXYZ_of_Z_ne_zero hP hQ hPz hQz hx hy]\n\n"}
{"name":"WeierstrassCurve.Projective.add_of_X_ne","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhQ : W.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Ne (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\n⊢ Eq (W.add P Q) (HSMul.hSMul (W.addZ P Q) (Matrix.vecCons (W.toAffine.addX (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (W.toAffine.slope (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (HDiv.hDiv (Q 1) (Q 2)))) (Matrix.vecCons (W.toAffine.addY (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (W.toAffine.slope (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (HDiv.hDiv (Q 1) (Q 2)))) (Matrix.vecCons 1 Matrix.vecEmpty))))","decl":"lemma add_of_X_ne {P Q : Fin 3 → F} (hP : W.Equation P) (hQ : W.Equation Q) (hPz : P z ≠ 0)\n    (hQz : Q z ≠ 0) (hx : P x * Q z ≠ Q x * P z) : W.add P Q = W.addZ P Q •\n      ![W.toAffine.addX (P x / P z) (Q x / Q z)\n          (W.toAffine.slope (P x / P z) (Q x / Q z) (P y / P z) (Q y / Q z)),\n        W.toAffine.addY (P x / P z) (Q x / Q z) (P y / P z)\n          (W.toAffine.slope (P x / P z) (Q x / Q z) (P y / P z) (Q y / Q z)), 1] := by\n  rw [add, if_neg <| not_equiv_of_X_ne hx, addXYZ_of_Z_ne_zero hP hQ hPz hQz hx]\n\n"}
{"name":"WeierstrassCurve.Projective.nonsingular_add","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Nonsingular P\nhQ : W.Nonsingular Q\n⊢ W.Nonsingular (W.add P Q)","decl":"lemma nonsingular_add {P Q : Fin 3 → F} (hP : W.Nonsingular P) (hQ : W.Nonsingular Q) :\n    W.Nonsingular <| W.add P Q := by\n  by_cases hPz : P z = 0\n  · by_cases hQz : Q z = 0\n    · simp only [add_of_Z_eq_zero hP hQ hPz hQz,\n        nonsingular_smul _ <| (isUnit_Y_of_Z_eq_zero hP hPz).pow 4, nonsingular_zero]\n    · simpa only [add_of_Z_eq_zero_left hP.left hPz hQz,\n        nonsingular_smul _ <| ((isUnit_Y_of_Z_eq_zero hP hPz).pow 2).mul <| Ne.isUnit hQz]\n  · by_cases hQz : Q z = 0\n    · simpa only [add_of_Z_eq_zero_right hQ.left hPz hQz,\n        nonsingular_smul _ (((isUnit_Y_of_Z_eq_zero hQ hQz).pow 2).mul <| Ne.isUnit hPz).neg]\n    · by_cases hxy : P x * Q z = Q x * P z → P y * Q z ≠ W.negY Q * P z\n      · by_cases hx : P x * Q z = Q x * P z\n        · simp only [add_of_Y_ne' hP.left hQ.left hPz hQz hx <| hxy hx,\n            nonsingular_smul _ <| isUnit_dblZ_of_Y_ne' hP.left hQ.left hPz hQz hx <| hxy hx,\n            nonsingular_add_of_Z_ne_zero hP hQ hPz hQz hxy]\n        · simp only [add_of_X_ne hP.left hQ.left hPz hQz hx,\n            nonsingular_smul _ <| isUnit_addZ_of_X_ne hP.left hQ.left hx,\n            nonsingular_add_of_Z_ne_zero hP hQ hPz hQz hxy]\n      · rw [_root_.not_imp, not_ne_iff] at hxy\n        by_cases hy : P y * Q z = Q y * P z\n        · simp only [add_of_Y_eq hP.left hPz hQz hxy.left hy hxy.right, nonsingular_smul _ <|\n              isUnit_dblU_of_Y_eq hP hPz hQz hxy.left hy hxy.right, nonsingular_zero]\n        · simp only [add_of_Y_ne hP.left hQ.left hPz hQz hxy.left hy,\n            nonsingular_smul _ <| isUnit_addU_of_Y_ne hPz hQz hy, nonsingular_zero]\n\n"}
{"name":"WeierstrassCurve.Projective.addMap_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP Q : Fin 3 → R\n⊢ Eq (W'.addMap (Quotient.mk (MulAction.orbitRel (Units R) (Fin 3 → R)) P) (Quotient.mk (MulAction.orbitRel (Units R) (Fin 3 → R)) Q)) (Quotient.mk (MulAction.orbitRel (Units R) (Fin 3 → R)) (W'.add P Q))","decl":"lemma addMap_eq (P Q : Fin 3 → R) : W'.addMap ⟦P⟧ ⟦Q⟧ = ⟦W'.add P Q⟧ :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.addMap_of_Z_eq_zero_left","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nQ : WeierstrassCurve.Projective.PointClass F\nhP : W.Nonsingular P\nhQ : W.NonsingularLift Q\nhPz : Eq (P 2) 0\n⊢ Eq (W.addMap (Quotient.mk (MulAction.orbitRel (Units F) (Fin 3 → F)) P) Q) Q","decl":"lemma addMap_of_Z_eq_zero_left {P : Fin 3 → F} {Q : PointClass F} (hP : W.Nonsingular P)\n    (hQ : W.NonsingularLift Q) (hPz : P z = 0) : W.addMap ⟦P⟧ Q = Q := by\n  rcases Q with ⟨Q⟩\n  by_cases hQz : Q z = 0\n  · erw [addMap_eq, add_of_Z_eq_zero hP hQ hPz hQz,\n      smul_eq _ <| (isUnit_Y_of_Z_eq_zero hP hPz).pow 4, Quotient.eq]\n    exact Setoid.symm <| equiv_zero_of_Z_eq_zero hQ hQz\n  · erw [addMap_eq, add_of_Z_eq_zero_left hP.left hPz hQz,\n      smul_eq _ <| ((isUnit_Y_of_Z_eq_zero hP hPz).pow 2).mul <| Ne.isUnit hQz]\n    rfl\n\n"}
{"name":"WeierstrassCurve.Projective.addMap_of_Z_eq_zero_right","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : WeierstrassCurve.Projective.PointClass F\nQ : Fin 3 → F\nhP : W.NonsingularLift P\nhQ : W.Nonsingular Q\nhQz : Eq (Q 2) 0\n⊢ Eq (W.addMap P (Quotient.mk (MulAction.orbitRel (Units F) (Fin 3 → F)) Q)) P","decl":"lemma addMap_of_Z_eq_zero_right {P : PointClass F} {Q : Fin 3 → F} (hP : W.NonsingularLift P)\n    (hQ : W.Nonsingular Q) (hQz : Q z = 0) : W.addMap P ⟦Q⟧ = P := by\n  rcases P with ⟨P⟩\n  by_cases hPz : P z = 0\n  · erw [addMap_eq, add_of_Z_eq_zero hP hQ hPz hQz,\n      smul_eq _ <| (isUnit_Y_of_Z_eq_zero hP hPz).pow 4, Quotient.eq]\n    exact Setoid.symm <| equiv_zero_of_Z_eq_zero hP hPz\n  · erw [addMap_eq, add_of_Z_eq_zero_right hQ.left hPz hQz,\n      smul_eq _ (((isUnit_Y_of_Z_eq_zero hQ hQz).pow 2).mul <| Ne.isUnit hPz).neg]\n    rfl\n\n"}
{"name":"WeierstrassCurve.Projective.addMap_of_Y_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Nonsingular P\nhQ : W.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhx : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2))\nhy' : Eq (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W.negY Q) (P 2))\n⊢ Eq (W.addMap (Quotient.mk (MulAction.orbitRel (Units F) (Fin 3 → F)) P) (Quotient.mk (MulAction.orbitRel (Units F) (Fin 3 → F)) Q)) (Quotient.mk (MulAction.orbitRel (Units F) (Fin 3 → F)) (Matrix.vecCons 0 (Matrix.vecCons 1 (Matrix.vecCons 0 Matrix.vecEmpty))))","decl":"lemma addMap_of_Y_eq {P Q : Fin 3 → F} (hP : W.Nonsingular P) (hQ : W.Equation Q) (hPz : P z ≠ 0)\n    (hQz : Q z ≠ 0) (hx : P x * Q z = Q x * P z) (hy' : P y * Q z = W.negY Q * P z) :\n    W.addMap ⟦P⟧ ⟦Q⟧ = ⟦![0, 1, 0]⟧ := by\n  by_cases hy : P y * Q z = Q y * P z\n  · rw [addMap_eq, add_of_Y_eq hP.left hPz hQz hx hy hy',\n      smul_eq _ <| isUnit_dblU_of_Y_eq hP hPz hQz hx hy hy']\n  · rw [addMap_eq, add_of_Y_ne hP.left hQ hPz hQz hx hy,\n      smul_eq _ <| isUnit_addU_of_Y_ne hPz hQz hy]\n\n"}
{"name":"WeierstrassCurve.Projective.addMap_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Equation P\nhQ : W.Equation Q\nhPz : Ne (P 2) 0\nhQz : Ne (Q 2) 0\nhxy : Eq (HMul.hMul (P 0) (Q 2)) (HMul.hMul (Q 0) (P 2)) → Ne (HMul.hMul (P 1) (Q 2)) (HMul.hMul (W.negY Q) (P 2))\n⊢ Eq (W.addMap (Quotient.mk (MulAction.orbitRel (Units F) (Fin 3 → F)) P) (Quotient.mk (MulAction.orbitRel (Units F) (Fin 3 → F)) Q)) (Quotient.mk (MulAction.orbitRel (Units F) (Fin 3 → F)) (Matrix.vecCons (W.toAffine.addX (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (W.toAffine.slope (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (HDiv.hDiv (Q 1) (Q 2)))) (Matrix.vecCons (W.toAffine.addY (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (W.toAffine.slope (HDiv.hDiv (P 0) (P 2)) (HDiv.hDiv (Q 0) (Q 2)) (HDiv.hDiv (P 1) (P 2)) (HDiv.hDiv (Q 1) (Q 2)))) (Matrix.vecCons 1 Matrix.vecEmpty))))","decl":"lemma addMap_of_Z_ne_zero {P Q : Fin 3 → F} (hP : W.Equation P) (hQ : W.Equation Q) (hPz : P z ≠ 0)\n    (hQz : Q z ≠ 0) (hxy : P x * Q z = Q x * P z → P y * Q z ≠ W.negY Q * P z) : W.addMap ⟦P⟧ ⟦Q⟧ =\n      ⟦![W.toAffine.addX (P x / P z) (Q x / Q z)\n          (W.toAffine.slope (P x / P z) (Q x / Q z) (P y / P z) (Q y / Q z)),\n        W.toAffine.addY (P x / P z) (Q x / Q z) (P y / P z)\n          (W.toAffine.slope (P x / P z) (Q x / Q z) (P y / P z) (Q y / Q z)), 1]⟧ := by\n  by_cases hx : P x * Q z = Q x * P z\n  · rw [addMap_eq, add_of_Y_ne' hP hQ hPz hQz hx <| hxy hx,\n      smul_eq _ <| isUnit_dblZ_of_Y_ne' hP hQ hPz hQz hx <| hxy hx]\n  · rw [addMap_eq, add_of_X_ne hP hQ hPz hQz hx, smul_eq _ <| isUnit_addZ_of_X_ne hP hQ hx]\n\n"}
{"name":"WeierstrassCurve.Projective.nonsingularLift_addMap","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : WeierstrassCurve.Projective.PointClass F\nhP : W.NonsingularLift P\nhQ : W.NonsingularLift Q\n⊢ W.NonsingularLift (W.addMap P Q)","decl":"lemma nonsingularLift_addMap {P Q : PointClass F} (hP : W.NonsingularLift P)\n    (hQ : W.NonsingularLift Q) : W.NonsingularLift <| W.addMap P Q := by\n  rcases P; rcases Q\n  exact nonsingular_add hP hQ\n\n"}
{"name":"WeierstrassCurve.Projective.Point.nonsingular","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nself : W'.Point\n⊢ W'.NonsingularLift self.point","decl":"variable (W') in\n/-- A nonsingular rational point on `W'`. -/\n@[ext]\nstructure Point where\n  /-- The point class underlying a nonsingular rational point on `W'`. -/\n  {point : PointClass R}\n  /-- The nonsingular condition underlying a nonsingular rational point on `W'`. -/\n  (nonsingular : W'.NonsingularLift point)\n\n"}
{"name":"WeierstrassCurve.Projective.Point.ext","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nx y : W'.Point\npoint : Eq «x».point «y».point\n⊢ Eq «x» «y»","decl":"variable (W') in\n/-- A nonsingular rational point on `W'`. -/\n@[ext]\nstructure Point where\n  /-- The point class underlying a nonsingular rational point on `W'`. -/\n  {point : PointClass R}\n  /-- The nonsingular condition underlying a nonsingular rational point on `W'`. -/\n  (nonsingular : W'.NonsingularLift point)\n\n"}
{"name":"WeierstrassCurve.Projective.Point.mk.inj","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\npoint✝ : WeierstrassCurve.Projective.PointClass R\nnonsingular✝ : W'.NonsingularLift point✝\npoint : WeierstrassCurve.Projective.PointClass R\nnonsingular : W'.NonsingularLift point\nx✝ : Eq (WeierstrassCurve.Projective.Point.mk nonsingular✝) (WeierstrassCurve.Projective.Point.mk nonsingular)\n⊢ Eq point✝ point","decl":"variable (W') in\n/-- A nonsingular rational point on `W'`. -/\n@[ext]\nstructure Point where\n  /-- The point class underlying a nonsingular rational point on `W'`. -/\n  {point : PointClass R}\n  /-- The nonsingular condition underlying a nonsingular rational point on `W'`. -/\n  (nonsingular : W'.NonsingularLift point)\n\n"}
{"name":"WeierstrassCurve.Projective.Point.ext_iff","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nx y : W'.Point\n⊢ Iff (Eq «x» «y») (Eq «x».point «y».point)","decl":"variable (W') in\n/-- A nonsingular rational point on `W'`. -/\n@[ext]\nstructure Point where\n  /-- The point class underlying a nonsingular rational point on `W'`. -/\n  {point : PointClass R}\n  /-- The nonsingular condition underlying a nonsingular rational point on `W'`. -/\n  (nonsingular : W'.NonsingularLift point)\n\n"}
{"name":"WeierstrassCurve.Projective.Point.mk.sizeOf_spec","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : SizeOf R\npoint : WeierstrassCurve.Projective.PointClass R\nnonsingular : W'.NonsingularLift point\n⊢ Eq (SizeOf.sizeOf (WeierstrassCurve.Projective.Point.mk nonsingular)) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf point)) (SizeOf.sizeOf nonsingular))","decl":"variable (W') in\n/-- A nonsingular rational point on `W'`. -/\n@[ext]\nstructure Point where\n  /-- The point class underlying a nonsingular rational point on `W'`. -/\n  {point : PointClass R}\n  /-- The nonsingular condition underlying a nonsingular rational point on `W'`. -/\n  (nonsingular : W'.NonsingularLift point)\n\n"}
{"name":"WeierstrassCurve.Projective.Point.mk.injEq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\npoint✝ : WeierstrassCurve.Projective.PointClass R\nnonsingular✝ : W'.NonsingularLift point✝\npoint : WeierstrassCurve.Projective.PointClass R\nnonsingular : W'.NonsingularLift point\n⊢ Eq (Eq (WeierstrassCurve.Projective.Point.mk nonsingular✝) (WeierstrassCurve.Projective.Point.mk nonsingular)) (Eq point✝ point)","decl":"variable (W') in\n/-- A nonsingular rational point on `W'`. -/\n@[ext]\nstructure Point where\n  /-- The point class underlying a nonsingular rational point on `W'`. -/\n  {point : PointClass R}\n  /-- The nonsingular condition underlying a nonsingular rational point on `W'`. -/\n  (nonsingular : W'.NonsingularLift point)\n\n"}
{"name":"WeierstrassCurve.Projective.Point.mk_point","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝ : CommRing R\nP : WeierstrassCurve.Projective.PointClass R\nh : W'.NonsingularLift P\n⊢ Eq (WeierstrassCurve.Projective.Point.mk h).point P","decl":"lemma mk_point {P : PointClass R} (h : W'.NonsingularLift P) : (mk h).point = P :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.Point.zero_def","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : Nontrivial R\n⊢ Eq 0 (WeierstrassCurve.Projective.Point.mk ⋯)","decl":"lemma zero_def [Nontrivial R] : (0 : W'.Point) = ⟨nonsingularLift_zero⟩ :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.Point.zero_point","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : Nontrivial R\n⊢ Eq (WeierstrassCurve.Projective.Point.point 0) (Quotient.mk (MulAction.orbitRel (Units R) (Fin 3 → R)) (Matrix.vecCons 0 (Matrix.vecCons 1 (Matrix.vecCons 0 Matrix.vecEmpty))))","decl":"lemma zero_point [Nontrivial R] : (0 : W'.Point).point = ⟦![0, 1, 0]⟧ :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.Point.fromAffine_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : Nontrivial R\n⊢ Eq (WeierstrassCurve.Projective.Point.fromAffine 0) 0","decl":"lemma fromAffine_zero [Nontrivial R] : fromAffine 0 = (0 : W'.Point) :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.Point.fromAffine_some","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : Nontrivial R\nX Y : R\nh : W'.toAffine.Nonsingular X Y\n⊢ Eq (WeierstrassCurve.Projective.Point.fromAffine (WeierstrassCurve.Affine.Point.some h)) (WeierstrassCurve.Projective.Point.mk ⋯)","decl":"lemma fromAffine_some [Nontrivial R] {X Y : R} (h : W'.toAffine.Nonsingular X Y) :\n    fromAffine (.some h) = ⟨(nonsingularLift_some ..).mpr h⟩ :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.Point.fromAffine_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\ninst✝ : Nontrivial R\nX Y : R\nh : W'.toAffine.Nonsingular X Y\n⊢ Ne (WeierstrassCurve.Projective.Point.fromAffine (WeierstrassCurve.Affine.Point.some h)) 0","decl":"lemma fromAffine_ne_zero [Nontrivial R] {X Y : R} (h : W'.toAffine.Nonsingular X Y) :\n    fromAffine (.some h) ≠ 0 := fun h0 ↦ by\n  obtain ⟨u, eq⟩ := Quotient.eq.mp <| (Point.ext_iff ..).mp h0\n  simpa [Units.smul_def, smul_fin3] using congr_fun eq z\n\n"}
{"name":"WeierstrassCurve.Projective.Point.neg_def","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : W.Point\n⊢ Eq (Neg.neg P) P.neg","decl":"lemma neg_def (P : W.Point) : -P = P.neg :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.Point.neg_point","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : W.Point\n⊢ Eq (Neg.neg P).point (W.negMap P.point)","decl":"lemma neg_point (P : W.Point) : (-P).point = W.negMap P.point :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.Point.add_def","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : W.Point\n⊢ Eq (HAdd.hAdd P Q) (P.add Q)","decl":"lemma add_def (P Q : W.Point) : P + Q = P.add Q :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.Point.add_point","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : W.Point\n⊢ Eq (HAdd.hAdd P Q).point (W.addMap P.point Q.point)","decl":"lemma add_point (P Q : W.Point) : (P + Q).point = W.addMap P.point Q.point :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.Point.toAffine_of_singular","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhP : Not (W.Nonsingular P)\n⊢ Eq (WeierstrassCurve.Projective.Point.toAffine W P) 0","decl":"lemma toAffine_of_singular {P : Fin 3 → F} (hP : ¬W.Nonsingular P) : toAffine W P = 0 := by\n  rw [toAffine, dif_neg <| not_and_of_not_left _ hP]\n\n"}
{"name":"WeierstrassCurve.Projective.Point.toAffine_of_Z_eq_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhPz : Eq (P 2) 0\n⊢ Eq (WeierstrassCurve.Projective.Point.toAffine W P) 0","decl":"lemma toAffine_of_Z_eq_zero {P : Fin 3 → F} (hPz : P z = 0) : toAffine W P = 0 := by\n  rw [toAffine, dif_neg <| not_and_not_right.mpr fun _ => hPz]\n\n"}
{"name":"WeierstrassCurve.Projective.Point.toAffine_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\n⊢ Eq (WeierstrassCurve.Projective.Point.toAffine W (Matrix.vecCons 0 (Matrix.vecCons 1 (Matrix.vecCons 0 Matrix.vecEmpty)))) 0","decl":"lemma toAffine_zero : toAffine W ![0, 1, 0] = 0 :=\n  toAffine_of_Z_eq_zero rfl\n\n"}
{"name":"WeierstrassCurve.Projective.Point.toAffine_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhP : W.Nonsingular P\nhPz : Ne (P 2) 0\n⊢ Eq (WeierstrassCurve.Projective.Point.toAffine W P) (WeierstrassCurve.Affine.Point.some ⋯)","decl":"lemma toAffine_of_Z_ne_zero {P : Fin 3 → F} (hP : W.Nonsingular P) (hPz : P z ≠ 0) :\n    toAffine W P = .some ((nonsingular_of_Z_ne_zero hPz).mp hP) := by\n  rw [toAffine, dif_pos ⟨hP, hPz⟩]\n\n"}
{"name":"WeierstrassCurve.Projective.Point.toAffine_some","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nX Y : F\nh : W.Nonsingular (Matrix.vecCons X (Matrix.vecCons Y (Matrix.vecCons 1 Matrix.vecEmpty)))\n⊢ Eq (WeierstrassCurve.Projective.Point.toAffine W (Matrix.vecCons X (Matrix.vecCons Y (Matrix.vecCons 1 Matrix.vecEmpty)))) (WeierstrassCurve.Affine.Point.some ⋯)","decl":"lemma toAffine_some {X Y : F} (h : W.Nonsingular ![X, Y, 1]) :\n    toAffine W ![X, Y, 1] = .some ((nonsingular_some ..).mp h) := by\n  simp only [toAffine_of_Z_ne_zero h one_ne_zero, fin3_def_ext, one_pow, div_one]\n\n"}
{"name":"WeierstrassCurve.Projective.Point.toAffine_smul","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nu : F\nhu : IsUnit u\n⊢ Eq (WeierstrassCurve.Projective.Point.toAffine W (HSMul.hSMul u P)) (WeierstrassCurve.Projective.Point.toAffine W P)","decl":"lemma toAffine_smul (P : Fin 3 → F) {u : F} (hu : IsUnit u) :\n    toAffine W (u • P) = toAffine W P := by\n  by_cases hP : W.Nonsingular P\n  · by_cases hPz : P z = 0\n    · rw [toAffine_of_Z_eq_zero <| mul_eq_zero_of_right u hPz, toAffine_of_Z_eq_zero hPz]\n    · rw [toAffine_of_Z_ne_zero ((nonsingular_smul P hu).mpr hP) <| mul_ne_zero hu.ne_zero hPz,\n        toAffine_of_Z_ne_zero hP hPz, Affine.Point.some.injEq]\n      simp only [smul_fin3_ext, mul_div_mul_left _ _ hu.ne_zero, and_self]\n  · rw [toAffine_of_singular <| hP.comp (nonsingular_smul P hu).mp, toAffine_of_singular hP]\n\n"}
{"name":"WeierstrassCurve.Projective.Point.toAffine_of_equiv","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nh : HasEquiv.Equiv P Q\n⊢ Eq (WeierstrassCurve.Projective.Point.toAffine W P) (WeierstrassCurve.Projective.Point.toAffine W Q)","decl":"lemma toAffine_of_equiv {P Q : Fin 3 → F} (h : P ≈ Q) : toAffine W P = toAffine W Q := by\n  rcases h with ⟨u, rfl⟩\n  exact toAffine_smul Q u.isUnit\n\n"}
{"name":"WeierstrassCurve.Projective.Point.toAffine_neg","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhP : W.Nonsingular P\n⊢ Eq (WeierstrassCurve.Projective.Point.toAffine W (W.neg P)) (Neg.neg (WeierstrassCurve.Projective.Point.toAffine W P))","decl":"lemma toAffine_neg {P : Fin 3 → F} (hP : W.Nonsingular P) :\n    toAffine W (W.neg P) = -toAffine W P := by\n  by_cases hPz : P z = 0\n  · rw [neg_of_Z_eq_zero hP.left hPz, toAffine_smul _ (isUnit_Y_of_Z_eq_zero hP hPz).neg,\n      toAffine_zero, toAffine_of_Z_eq_zero hPz, Affine.Point.neg_zero]\n  · rw [neg_of_Z_ne_zero hPz, toAffine_smul _ <| Ne.isUnit hPz, toAffine_some <|\n        (nonsingular_smul _ <| Ne.isUnit hPz).mp <| neg_of_Z_ne_zero hPz ▸ nonsingular_neg hP,\n      toAffine_of_Z_ne_zero hP hPz, Affine.Point.neg_some]\n\n"}
{"name":"WeierstrassCurve.Projective.Point.toAffine_add","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : Fin 3 → F\nhP : W.Nonsingular P\nhQ : W.Nonsingular Q\n⊢ Eq (WeierstrassCurve.Projective.Point.toAffine W (W.add P Q)) (HAdd.hAdd (WeierstrassCurve.Projective.Point.toAffine W P) (WeierstrassCurve.Projective.Point.toAffine W Q))","decl":"lemma toAffine_add {P Q : Fin 3 → F} (hP : W.Nonsingular P) (hQ : W.Nonsingular Q) :\n    toAffine W (W.add P Q) = toAffine W P + toAffine W Q := by\n  by_cases hPz : P z = 0\n  · rw [toAffine_of_Z_eq_zero hPz, zero_add]\n    by_cases hQz : Q z = 0\n    · rw [add_of_Z_eq_zero hP hQ hPz hQz, toAffine_smul _ <| (isUnit_Y_of_Z_eq_zero hP hPz).pow 4,\n        toAffine_zero, toAffine_of_Z_eq_zero hQz]\n    · rw [add_of_Z_eq_zero_left hP.left hPz hQz,\n        toAffine_smul _ <| ((isUnit_Y_of_Z_eq_zero hP hPz).pow 2).mul <| Ne.isUnit hQz]\n  · by_cases hQz : Q z = 0\n    · rw [add_of_Z_eq_zero_right hQ.left hPz hQz,\n        toAffine_smul _ (((isUnit_Y_of_Z_eq_zero hQ hQz).pow 2).mul <| Ne.isUnit hPz).neg,\n        toAffine_of_Z_eq_zero hQz, add_zero]\n    · by_cases hxy : P x * Q z = Q x * P z → P y * Q z ≠ W.negY Q * P z\n      · by_cases hx : P x * Q z = Q x * P z\n        · rw [add_of_Y_ne' hP.left hQ.left hPz hQz hx <| hxy hx,\n            toAffine_smul _ <| isUnit_dblZ_of_Y_ne' hP.left hQ.left hPz hQz hx <| hxy hx,\n            toAffine_add_of_Z_ne_zero hP hQ hPz hQz hxy]\n        · rw [add_of_X_ne hP.left hQ.left hPz hQz hx, toAffine_smul _ <|\n              isUnit_addZ_of_X_ne hP.left hQ.left hx, toAffine_add_of_Z_ne_zero hP hQ hPz hQz hxy]\n      · rw [_root_.not_imp, not_ne_iff] at hxy\n        rw [toAffine_of_Z_ne_zero hP hPz, toAffine_of_Z_ne_zero hQ hQz, Affine.Point.add_of_Y_eq\n            ((X_eq_iff hPz hQz).mp hxy.left) ((Y_eq_iff' hPz hQz).mp hxy.right)]\n        by_cases hy : P y * Q z = Q y * P z\n        · rw [add_of_Y_eq hP.left hPz hQz hxy.left hy hxy.right,\n            toAffine_smul _ <| isUnit_dblU_of_Y_eq hP hPz hQz hxy.left hy hxy.right, toAffine_zero]\n        · rw [add_of_Y_ne hP.left hQ.left hPz hQz hxy.left hy,\n            toAffine_smul _ <| isUnit_addU_of_Y_ne hPz hQz hy, toAffine_zero]\n\n"}
{"name":"WeierstrassCurve.Projective.Point.toAffineLift_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhP : W.NonsingularLift (Quotient.mk (MulAction.orbitRel (Units F) (Fin 3 → F)) P)\n⊢ Eq (WeierstrassCurve.Projective.Point.mk hP).toAffineLift (WeierstrassCurve.Projective.Point.toAffine W P)","decl":"lemma toAffineLift_eq {P : Fin 3 → F} (hP : W.NonsingularLift ⟦P⟧) :\n    toAffineLift ⟨hP⟩ = toAffine W P :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Projective.Point.toAffineLift_of_Z_eq_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhP : W.NonsingularLift (Quotient.mk (MulAction.orbitRel (Units F) (Fin 3 → F)) P)\nhPz : Eq (P 2) 0\n⊢ Eq (WeierstrassCurve.Projective.Point.mk hP).toAffineLift 0","decl":"lemma toAffineLift_of_Z_eq_zero {P : Fin 3 → F} (hP : W.NonsingularLift ⟦P⟧) (hPz : P z = 0) :\n    toAffineLift ⟨hP⟩ = 0 :=\n  toAffine_of_Z_eq_zero hPz\n\n"}
{"name":"WeierstrassCurve.Projective.Point.toAffineLift_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\n⊢ Eq (WeierstrassCurve.Projective.Point.toAffineLift 0) 0","decl":"lemma toAffineLift_zero : toAffineLift (0 : W.Point) = 0 :=\n  toAffine_zero\n\n"}
{"name":"WeierstrassCurve.Projective.Point.toAffineLift_of_Z_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : Fin 3 → F\nhP : W.NonsingularLift (Quotient.mk (MulAction.orbitRel (Units F) (Fin 3 → F)) P)\nhPz : Ne (P 2) 0\n⊢ Eq (WeierstrassCurve.Projective.Point.mk hP).toAffineLift (WeierstrassCurve.Affine.Point.some ⋯)","decl":"lemma toAffineLift_of_Z_ne_zero {P : Fin 3 → F} {hP : W.NonsingularLift ⟦P⟧} (hPz : P z ≠ 0) :\n    toAffineLift ⟨hP⟩ = .some ((nonsingular_of_Z_ne_zero hPz).mp hP) :=\n  toAffine_of_Z_ne_zero hP hPz\n\n"}
{"name":"WeierstrassCurve.Projective.Point.toAffineLift_some","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nX Y : F\nh : W.NonsingularLift (Quotient.mk (MulAction.orbitRel (Units F) (Fin 3 → F)) (Matrix.vecCons X (Matrix.vecCons Y (Matrix.vecCons 1 Matrix.vecEmpty))))\n⊢ Eq (WeierstrassCurve.Projective.Point.mk h).toAffineLift (WeierstrassCurve.Affine.Point.some ⋯)","decl":"lemma toAffineLift_some {X Y : F} (h : W.NonsingularLift ⟦![X, Y, 1]⟧) :\n    toAffineLift ⟨h⟩ = .some ((nonsingular_some ..).mp h) :=\n  toAffine_some h\n\n"}
{"name":"WeierstrassCurve.Projective.Point.toAffineLift_neg","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : W.Point\n⊢ Eq (Neg.neg P).toAffineLift (Neg.neg P.toAffineLift)","decl":"lemma toAffineLift_neg (P : W.Point) : (-P).toAffineLift = -P.toAffineLift := by\n  rcases P with @⟨⟨_⟩, hP⟩\n  exact toAffine_neg hP\n\n"}
{"name":"WeierstrassCurve.Projective.Point.toAffineLift_add","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP Q : W.Point\n⊢ Eq (HAdd.hAdd P Q).toAffineLift (HAdd.hAdd P.toAffineLift Q.toAffineLift)","decl":"lemma toAffineLift_add (P Q : W.Point) :\n    (P + Q).toAffineLift = P.toAffineLift + Q.toAffineLift := by\n  rcases P, Q with ⟨@⟨⟨_⟩, hP⟩, @⟨⟨_⟩, hQ⟩⟩\n  exact toAffine_add hP hQ\n\n"}
{"name":"WeierstrassCurve.Projective.Point.toAffineAddEquiv_apply","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\nP : W.Point\n⊢ Eq ((WeierstrassCurve.Projective.Point.toAffineAddEquiv W) P) P.toAffineLift","decl":"variable (W) in\n/-- The equivalence between the nonsingular rational points on a Weierstrass curve `W` in Projective\ncoordinates with the nonsingular rational points on `W` in affine coordinates. -/\n@[simps]\nnoncomputable def toAffineAddEquiv : W.Point ≃+ W.toAffine.Point where\n  toFun := toAffineLift\n  invFun := fromAffine\n  left_inv := by\n    rintro @⟨⟨P⟩, hP⟩\n    by_cases hPz : P z = 0\n    · rw [Point.ext_iff, toAffineLift_eq, toAffine_of_Z_eq_zero hPz]\n      exact Quotient.eq.mpr <| Setoid.symm <| equiv_zero_of_Z_eq_zero hP hPz\n    · rw [Point.ext_iff, toAffineLift_eq, toAffine_of_Z_ne_zero hP hPz]\n      exact Quotient.eq.mpr <| Setoid.symm <| equiv_some_of_Z_ne_zero hPz\n  right_inv := by\n    rintro (_ | _)\n    · erw [fromAffine_zero, toAffineLift_zero, Affine.Point.zero_def]\n    · rw [fromAffine_some, toAffineLift_some]\n  map_add' := toAffineLift_add\n\n"}
{"name":"WeierstrassCurve.Projective.Point.toAffineAddEquiv_symm_apply","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝ : Field F\nW : WeierstrassCurve.Projective F\na✝ : W.toAffine.Point\n⊢ Eq ((WeierstrassCurve.Projective.Point.toAffineAddEquiv W).symm a✝) (WeierstrassCurve.Projective.Point.fromAffine a✝)","decl":"variable (W) in\n/-- The equivalence between the nonsingular rational points on a Weierstrass curve `W` in Projective\ncoordinates with the nonsingular rational points on `W` in affine coordinates. -/\n@[simps]\nnoncomputable def toAffineAddEquiv : W.Point ≃+ W.toAffine.Point where\n  toFun := toAffineLift\n  invFun := fromAffine\n  left_inv := by\n    rintro @⟨⟨P⟩, hP⟩\n    by_cases hPz : P z = 0\n    · rw [Point.ext_iff, toAffineLift_eq, toAffine_of_Z_eq_zero hPz]\n      exact Quotient.eq.mpr <| Setoid.symm <| equiv_zero_of_Z_eq_zero hP hPz\n    · rw [Point.ext_iff, toAffineLift_eq, toAffine_of_Z_ne_zero hP hPz]\n      exact Quotient.eq.mpr <| Setoid.symm <| equiv_some_of_Z_ne_zero hPz\n  right_inv := by\n    rintro (_ | _)\n    · erw [fromAffine_zero, toAffineLift_zero, Affine.Point.zero_def]\n    · rw [fromAffine_some, toAffineLift_some]\n  map_add' := toAffineLift_add\n\n"}
{"name":"WeierstrassCurve.Projective.map_polynomial","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\n⊢ Eq (WeierstrassCurve.map W' f).toProjective.polynomial ((MvPolynomial.map f) W'.polynomial)","decl":"@[simp]\nlemma map_polynomial : (W'.map f).toProjective.polynomial = MvPolynomial.map f W'.polynomial := by\n  simp only [polynomial]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.Projective.Equation.map","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nP : Fin 3 → R\nh : W'.Equation P\n⊢ (WeierstrassCurve.map W' f).toProjective.Equation (Function.comp (⇑f) P)","decl":"lemma Equation.map {P : Fin 3 → R} (h : W'.Equation P) :\n    (W'.map f).toProjective.Equation (f ∘ P) := by\n  rw [Equation, map_polynomial, eval_map, ← eval₂_comp, ← map_zero f]\n  exact congr_arg f h\n\n"}
{"name":"WeierstrassCurve.Projective.map_equation","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nhf : Function.Injective ⇑f\nP : Fin 3 → R\n⊢ Iff ((WeierstrassCurve.map W' f).toProjective.Equation (Function.comp (⇑f) P)) (W'.Equation P)","decl":"variable {f} in\n@[simp]\nlemma map_equation (hf : Function.Injective f) (P : Fin 3 → R) :\n    (W'.map f).toProjective.Equation (f ∘ P) ↔ W'.Equation P := by\n  simp only [Equation, map_polynomial, eval_map, ← eval₂_comp, map_eq_zero_iff f hf]\n\n"}
{"name":"WeierstrassCurve.Projective.map_polynomialX","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\n⊢ Eq (WeierstrassCurve.map W' f).toProjective.polynomialX ((MvPolynomial.map f) W'.polynomialX)","decl":"@[simp]\nlemma map_polynomialX :\n    (W'.map f).toProjective.polynomialX = MvPolynomial.map f W'.polynomialX := by\n  simp only [polynomialX, map_polynomial, pderiv_map]\n\n"}
{"name":"WeierstrassCurve.Projective.map_polynomialY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\n⊢ Eq (WeierstrassCurve.map W' f).toProjective.polynomialY ((MvPolynomial.map f) W'.polynomialY)","decl":"@[simp]\nlemma map_polynomialY :\n    (W'.map f).toProjective.polynomialY = MvPolynomial.map f W'.polynomialY := by\n  simp only [polynomialY, map_polynomial, pderiv_map]\n\n"}
{"name":"WeierstrassCurve.Projective.map_polynomialZ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\n⊢ Eq (WeierstrassCurve.map W' f).toProjective.polynomialZ ((MvPolynomial.map f) W'.polynomialZ)","decl":"@[simp]\nlemma map_polynomialZ :\n    (W'.map f).toProjective.polynomialZ = MvPolynomial.map f W'.polynomialZ := by\n  simp only [polynomialZ, map_polynomial, pderiv_map]\n\n"}
{"name":"WeierstrassCurve.Projective.map_nonsingular","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nhf : Function.Injective ⇑f\nP : Fin 3 → R\n⊢ Iff ((WeierstrassCurve.map W' f).toProjective.Nonsingular (Function.comp (⇑f) P)) (W'.Nonsingular P)","decl":"variable {f} in\n@[simp]\nlemma map_nonsingular (hf : Function.Injective f) (P : Fin 3 → R) :\n    (W'.map f).toProjective.Nonsingular (f ∘ P) ↔ W'.Nonsingular P := by\n  simp only [Nonsingular, map_equation hf, map_polynomialX, map_polynomialY, map_polynomialZ,\n    eval_map, ← eval₂_comp, map_ne_zero_iff f hf]\n\n"}
{"name":"WeierstrassCurve.Projective.map_negY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nP : Fin 3 → R\n⊢ Eq ((WeierstrassCurve.map W' f).toProjective.negY (Function.comp (⇑f) P)) (f (W'.negY P))","decl":"@[simp]\nlemma map_negY (P : Fin 3 → R) : (W'.map f).toProjective.negY (f ∘ P) = f (W'.negY P) := by\n  simp only [negY]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.Projective.map_neg","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nP : Fin 3 → R\n⊢ Eq ((WeierstrassCurve.map W' f).toProjective.neg (Function.comp (⇑f) P)) (Function.comp (⇑f) (W'.neg P))","decl":"@[simp]\nprotected lemma map_neg (P : Fin 3 → R) : (W'.map f).toProjective.neg (f ∘ P) = f ∘ W'.neg P := by\n  simp only [neg, map_negY, comp_fin3]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.Projective.map_dblU","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝¹ : Field F\nW : WeierstrassCurve.Projective F\nK : Type v\ninst✝ : Field K\nf : RingHom F K\nP : Fin 3 → F\n⊢ Eq ((WeierstrassCurve.map W f).toProjective.dblU (Function.comp (⇑f) P)) (f (W.dblU P))","decl":"@[simp]\nlemma map_dblU {K : Type v} [Field K] (f : F →+* K) (P : Fin 3 → F) :\n    (W.map f).toProjective.dblU (f ∘ P) = f (W.dblU P) := by\n  simp only [dblU_eq]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.Projective.map_dblZ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nP : Fin 3 → R\n⊢ Eq ((WeierstrassCurve.map W' f).toProjective.dblZ (Function.comp (⇑f) P)) (f (W'.dblZ P))","decl":"@[simp]\nlemma map_dblZ (P : Fin 3 → R) : (W'.map f).toProjective.dblZ (f ∘ P) = f (W'.dblZ P) := by\n  simp only [dblZ, negY]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.Projective.map_dblX","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nP : Fin 3 → R\n⊢ Eq ((WeierstrassCurve.map W' f).toProjective.dblX (Function.comp (⇑f) P)) (f (W'.dblX P))","decl":"@[simp]\nlemma map_dblX (P : Fin 3 → R) : (W'.map f).toProjective.dblX (f ∘ P) = f (W'.dblX P) := by\n  simp only [dblX, map_dblU, map_negY]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.Projective.map_negDblY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nP : Fin 3 → R\n⊢ Eq ((WeierstrassCurve.map W' f).toProjective.negDblY (Function.comp (⇑f) P)) (f (W'.negDblY P))","decl":"@[simp]\nlemma map_negDblY (P : Fin 3 → R) : (W'.map f).toProjective.negDblY (f ∘ P) = f (W'.negDblY P) := by\n  simp only [negDblY, map_dblU, map_dblX, map_negY]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.Projective.map_dblY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nP : Fin 3 → R\n⊢ Eq ((WeierstrassCurve.map W' f).toProjective.dblY (Function.comp (⇑f) P)) (f (W'.dblY P))","decl":"@[simp]\nlemma map_dblY (P : Fin 3 → R) : (W'.map f).toProjective.dblY (f ∘ P) = f (W'.dblY P) := by\n  simp only [dblY, negY_eq, map_negDblY, map_dblX, map_dblZ]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.Projective.map_dblXYZ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nP : Fin 3 → R\n⊢ Eq ((WeierstrassCurve.map W' f).toProjective.dblXYZ (Function.comp (⇑f) P)) (Function.comp (⇑f) (W'.dblXYZ P))","decl":"@[simp]\nlemma map_dblXYZ (P : Fin 3 → R) : (W'.map f).toProjective.dblXYZ (f ∘ P) = f ∘ dblXYZ W' P := by\n  simp only [dblXYZ, map_dblX, map_dblY, map_dblZ, comp_fin3]\n\n"}
{"name":"WeierstrassCurve.Projective.map_addU","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝¹ : Field F\nK : Type v\ninst✝ : Field K\nf : RingHom F K\nP Q : Fin 3 → F\n⊢ Eq (WeierstrassCurve.Projective.addU (Function.comp (⇑f) P) (Function.comp (⇑f) Q)) (f (WeierstrassCurve.Projective.addU P Q))","decl":"@[simp]\nlemma map_addU {K : Type v} [Field K] (f : F →+* K) (P Q : Fin 3 → F) :\n    addU (f ∘ P) (f ∘ Q) = f (addU P Q) := by\n  simp only [addU]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.Projective.map_addZ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nP Q : Fin 3 → R\n⊢ Eq ((WeierstrassCurve.map W' f).toProjective.addZ (Function.comp (⇑f) P) (Function.comp (⇑f) Q)) (f (W'.addZ P Q))","decl":"@[simp]\nlemma map_addZ (P Q : Fin 3 → R) :\n    (W'.map f).toProjective.addZ (f ∘ P) (f ∘ Q) = f (W'.addZ P Q) := by\n  simp only [addZ]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.Projective.map_addX","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nP Q : Fin 3 → R\n⊢ Eq ((WeierstrassCurve.map W' f).toProjective.addX (Function.comp (⇑f) P) (Function.comp (⇑f) Q)) (f (W'.addX P Q))","decl":"@[simp]\nlemma map_addX (P Q : Fin 3 → R) :\n    (W'.map f).toProjective.addX (f ∘ P) (f ∘ Q) = f (W'.addX P Q) := by\n  simp only [addX]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.Projective.map_negAddY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nP Q : Fin 3 → R\n⊢ Eq ((WeierstrassCurve.map W' f).toProjective.negAddY (Function.comp (⇑f) P) (Function.comp (⇑f) Q)) (f (W'.negAddY P Q))","decl":"@[simp]\nlemma map_negAddY (P Q : Fin 3 → R) :\n    (W'.map f).toProjective.negAddY (f ∘ P) (f ∘ Q) = f (W'.negAddY P Q) := by\n  simp only [negAddY]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.Projective.map_addY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nP Q : Fin 3 → R\n⊢ Eq ((WeierstrassCurve.map W' f).toProjective.addY (Function.comp (⇑f) P) (Function.comp (⇑f) Q)) (f (W'.addY P Q))","decl":"@[simp]\nlemma map_addY (P Q : Fin 3 → R) :\n    (W'.map f).toProjective.addY (f ∘ P) (f ∘ Q) = f (W'.addY P Q) := by\n  simp only [addY, negY_eq, map_negAddY, map_addX, map_addZ]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.Projective.map_addXYZ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type u\nW' : WeierstrassCurve.Projective R\ninst✝¹ : CommRing R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nP Q : Fin 3 → R\n⊢ Eq ((WeierstrassCurve.map W' f).toProjective.addXYZ (Function.comp (⇑f) P) (Function.comp (⇑f) Q)) (Function.comp (⇑f) (W'.addXYZ P Q))","decl":"@[simp]\nlemma map_addXYZ (P Q : Fin 3 → R) :\n    (W'.map f).toProjective.addXYZ (f ∘ P) (f ∘ Q) = f ∘ addXYZ W' P Q := by\n  simp only [addXYZ, map_addX, map_addY, map_addZ, comp_fin3]\n\n"}
{"name":"WeierstrassCurve.Projective.map_add","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝¹ : Field F\nW : WeierstrassCurve.Projective F\nK : Type v\ninst✝ : Field K\nf : RingHom F K\nP Q : Fin 3 → F\nhP : W.Nonsingular P\nhQ : W.Nonsingular Q\n⊢ Eq ((WeierstrassCurve.map W f).toProjective.add (Function.comp (⇑f) P) (Function.comp (⇑f) Q)) (Function.comp (⇑f) (W.add P Q))","decl":"@[simp]\nprotected lemma map_add {K : Type v} [Field K] (f : F →+* K) {P Q : Fin 3 → F}\n    (hP : W.Nonsingular P) (hQ : W.Nonsingular Q) :\n    (W.map f).toProjective.add (f ∘ P) (f ∘ Q) = f ∘ W.add P Q := by\n  by_cases h : P ≈ Q\n  · rw [add_of_equiv <| (comp_equiv_comp f hP hQ).mpr h, add_of_equiv h, map_dblXYZ]\n  · rw [add_of_not_equiv <| h.comp (comp_equiv_comp f hP hQ).mp, add_of_not_equiv h, map_addXYZ]\n\n"}
{"name":"WeierstrassCurve.Projective.baseChange_polynomial","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW' : WeierstrassCurve.Projective R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\n⊢ Eq (WeierstrassCurve.baseChange W' B).toProjective.polynomial ((MvPolynomial.map ↑f) (WeierstrassCurve.baseChange W' A).toProjective.polynomial)","decl":"lemma baseChange_polynomial : (W'.baseChange B).toProjective.polynomial =\n    MvPolynomial.map f (W'.baseChange A).toProjective.polynomial := by\n  rw [← map_polynomial, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.Projective.baseChange_equation","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW' : WeierstrassCurve.Projective R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nhf : Function.Injective ⇑f\nP : Fin 3 → A\n⊢ Iff ((WeierstrassCurve.baseChange W' B).toProjective.Equation (Function.comp (⇑f) P)) ((WeierstrassCurve.baseChange W' A).toProjective.Equation P)","decl":"variable {f} in\nlemma baseChange_equation (hf : Function.Injective f) (P : Fin 3 → A) :\n    (W'.baseChange B).toProjective.Equation (f ∘ P) ↔\n      (W'.baseChange A).toProjective.Equation P := by\n  rw [← RingHom.coe_coe, ← map_equation hf, AlgHom.toRingHom_eq_coe, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.Projective.baseChange_polynomialX","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW' : WeierstrassCurve.Projective R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\n⊢ Eq (WeierstrassCurve.baseChange W' B).toProjective.polynomialX ((MvPolynomial.map ↑f) (WeierstrassCurve.baseChange W' A).toProjective.polynomialX)","decl":"lemma baseChange_polynomialX : (W'.baseChange B).toProjective.polynomialX =\n    MvPolynomial.map f (W'.baseChange A).toProjective.polynomialX := by\n  rw [← map_polynomialX, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.Projective.baseChange_polynomialY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW' : WeierstrassCurve.Projective R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\n⊢ Eq (WeierstrassCurve.baseChange W' B).toProjective.polynomialY ((MvPolynomial.map ↑f) (WeierstrassCurve.baseChange W' A).toProjective.polynomialY)","decl":"lemma baseChange_polynomialY : (W'.baseChange B).toProjective.polynomialY =\n    MvPolynomial.map f (W'.baseChange A).toProjective.polynomialY := by\n  rw [← map_polynomialY, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.Projective.baseChange_polynomialZ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW' : WeierstrassCurve.Projective R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\n⊢ Eq (WeierstrassCurve.baseChange W' B).toProjective.polynomialZ ((MvPolynomial.map ↑f) (WeierstrassCurve.baseChange W' A).toProjective.polynomialZ)","decl":"lemma baseChange_polynomialZ : (W'.baseChange B).toProjective.polynomialZ =\n    MvPolynomial.map f (W'.baseChange A).toProjective.polynomialZ := by\n  rw [← map_polynomialZ, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.Projective.baseChange_nonsingular","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW' : WeierstrassCurve.Projective R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nhf : Function.Injective ⇑f\nP : Fin 3 → A\n⊢ Iff ((WeierstrassCurve.baseChange W' B).toProjective.Nonsingular (Function.comp (⇑f) P)) ((WeierstrassCurve.baseChange W' A).toProjective.Nonsingular P)","decl":"variable {f} in\nlemma baseChange_nonsingular (hf : Function.Injective f) (P : Fin 3 → A) :\n    (W'.baseChange B).toProjective.Nonsingular (f ∘ P) ↔\n      (W'.baseChange A).toProjective.Nonsingular P := by\n  rw [← RingHom.coe_coe, ← map_nonsingular hf, AlgHom.toRingHom_eq_coe, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.Projective.baseChange_negY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW' : WeierstrassCurve.Projective R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nP : Fin 3 → A\n⊢ Eq ((WeierstrassCurve.baseChange W' B).toProjective.negY (Function.comp (⇑f) P)) (f ((WeierstrassCurve.baseChange W' A).toProjective.negY P))","decl":"lemma baseChange_negY (P : Fin 3 → A) :\n    (W'.baseChange B).toProjective.negY (f ∘ P) = f ((W'.baseChange A).toProjective.negY P) := by\n  rw [← RingHom.coe_coe, ← map_negY, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.Projective.baseChange_neg","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW' : WeierstrassCurve.Projective R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nP : Fin 3 → A\n⊢ Eq ((WeierstrassCurve.baseChange W' B).toProjective.neg (Function.comp (⇑f) P)) (Function.comp (⇑f) ((WeierstrassCurve.baseChange W' A).toProjective.neg P))","decl":"lemma baseChange_neg (P : Fin 3 → A) :\n    (W'.baseChange B).toProjective.neg (f ∘ P) = f ∘ (W'.baseChange A).toProjective.neg P := by\n  rw [← RingHom.coe_coe, ← WeierstrassCurve.Projective.map_neg, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.Projective.baseChange_dblZ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW' : WeierstrassCurve.Projective R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nP : Fin 3 → A\n⊢ Eq ((WeierstrassCurve.baseChange W' B).toProjective.dblZ (Function.comp (⇑f) P)) (f ((WeierstrassCurve.baseChange W' A).toProjective.dblZ P))","decl":"lemma baseChange_dblZ (P : Fin 3 → A) : (W'.baseChange B).toProjective.dblZ (f ∘ P) =\n    f ((W'.baseChange A).toProjective.dblZ P) := by\n  rw [← RingHom.coe_coe, ← map_dblZ, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.Projective.baseChange_dblX","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW' : WeierstrassCurve.Projective R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nP : Fin 3 → A\n⊢ Eq ((WeierstrassCurve.baseChange W' B).toProjective.dblX (Function.comp (⇑f) P)) (f ((WeierstrassCurve.baseChange W' A).toProjective.dblX P))","decl":"lemma baseChange_dblX (P : Fin 3 → A) : (W'.baseChange B).toProjective.dblX (f ∘ P) =\n    f ((W'.baseChange A).toProjective.dblX P) := by\n  rw [← RingHom.coe_coe, ← map_dblX, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.Projective.baseChange_negDblY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW' : WeierstrassCurve.Projective R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nP : Fin 3 → A\n⊢ Eq ((WeierstrassCurve.baseChange W' B).toProjective.negDblY (Function.comp (⇑f) P)) (f ((WeierstrassCurve.baseChange W' A).toProjective.negDblY P))","decl":"lemma baseChange_negDblY (P : Fin 3 → A) : (W'.baseChange B).toProjective.negDblY (f ∘ P) =\n    f ((W'.baseChange A).toProjective.negDblY P) := by\n  rw [← RingHom.coe_coe, ← map_negDblY, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.Projective.baseChange_dblY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW' : WeierstrassCurve.Projective R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nP : Fin 3 → A\n⊢ Eq ((WeierstrassCurve.baseChange W' B).toProjective.dblY (Function.comp (⇑f) P)) (f ((WeierstrassCurve.baseChange W' A).toProjective.dblY P))","decl":"lemma baseChange_dblY (P : Fin 3 → A) : (W'.baseChange B).toProjective.dblY (f ∘ P) =\n    f ((W'.baseChange A).toProjective.dblY P) := by\n  rw [← RingHom.coe_coe, ← map_dblY, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.Projective.baseChange_dblXYZ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW' : WeierstrassCurve.Projective R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nP : Fin 3 → A\n⊢ Eq ((WeierstrassCurve.baseChange W' B).toProjective.dblXYZ (Function.comp (⇑f) P)) (Function.comp (⇑f) ((WeierstrassCurve.baseChange W' A).toProjective.dblXYZ P))","decl":"lemma baseChange_dblXYZ (P : Fin 3 → A) : (W'.baseChange B).toProjective.dblXYZ (f ∘ P) =\n    f ∘ (W'.baseChange A).toProjective.dblXYZ P := by\n  rw [← RingHom.coe_coe, ← map_dblXYZ, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.Projective.baseChange_addX","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW' : WeierstrassCurve.Projective R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nP Q : Fin 3 → A\n⊢ Eq ((WeierstrassCurve.baseChange W' B).toProjective.addX (Function.comp (⇑f) P) (Function.comp (⇑f) Q)) (f ((WeierstrassCurve.baseChange W' A).toProjective.addX P Q))","decl":"lemma baseChange_addX (P Q : Fin 3 → A) : (W'.baseChange B).toProjective.addX (f ∘ P) (f ∘ Q) =\n    f ((W'.baseChange A).toProjective.addX P Q) := by\n  rw [← RingHom.coe_coe, ← map_addX, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.Projective.baseChange_negAddY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW' : WeierstrassCurve.Projective R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nP Q : Fin 3 → A\n⊢ Eq ((WeierstrassCurve.baseChange W' B).toProjective.negAddY (Function.comp (⇑f) P) (Function.comp (⇑f) Q)) (f ((WeierstrassCurve.baseChange W' A).toProjective.negAddY P Q))","decl":"lemma baseChange_negAddY (P Q : Fin 3 → A) :\n    (W'.baseChange B).toProjective.negAddY (f ∘ P) (f ∘ Q) =\n      f ((W'.baseChange A).toProjective.negAddY P Q) := by\n  rw [← RingHom.coe_coe, ← map_negAddY, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.Projective.baseChange_addY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW' : WeierstrassCurve.Projective R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nP Q : Fin 3 → A\n⊢ Eq ((WeierstrassCurve.baseChange W' B).toProjective.addY (Function.comp (⇑f) P) (Function.comp (⇑f) Q)) (f ((WeierstrassCurve.baseChange W' A).toProjective.addY P Q))","decl":"lemma baseChange_addY (P Q : Fin 3 → A) : (W'.baseChange B).toProjective.addY (f ∘ P) (f ∘ Q) =\n    f ((W'.baseChange A).toProjective.addY P Q) := by\n  rw [← RingHom.coe_coe, ← map_addY, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.Projective.baseChange_addXYZ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW' : WeierstrassCurve.Projective R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nP Q : Fin 3 → A\n⊢ Eq ((WeierstrassCurve.baseChange W' B).toProjective.addXYZ (Function.comp (⇑f) P) (Function.comp (⇑f) Q)) (Function.comp (⇑f) ((WeierstrassCurve.baseChange W' A).toProjective.addXYZ P Q))","decl":"lemma baseChange_addXYZ (P Q : Fin 3 → A) : (W'.baseChange B).toProjective.addXYZ (f ∘ P) (f ∘ Q) =\n    f ∘ (W'.baseChange A).toProjective.addXYZ P Q := by\n  rw [← RingHom.coe_coe, ← map_addXYZ, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.Projective.baseChange_dblU","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝¹⁰ : Field F\nR : Type r\ninst✝⁹ : CommRing R\nW' : WeierstrassCurve.Projective R\nS : Type s\ninst✝⁸ : CommRing S\ninst✝⁷ : Algebra R S\ninst✝⁶ : Algebra R F\ninst✝⁵ : Algebra S F\ninst✝⁴ : IsScalarTower R S F\nK : Type v\ninst✝³ : Field K\ninst✝² : Algebra R K\ninst✝¹ : Algebra S K\ninst✝ : IsScalarTower R S K\nf : AlgHom S F K\nP : Fin 3 → F\n⊢ Eq ((WeierstrassCurve.baseChange W' K).toProjective.dblU (Function.comp (⇑f) P)) (f ((WeierstrassCurve.baseChange W' F).toProjective.dblU P))","decl":"lemma baseChange_dblU (P : Fin 3 → F) : (W'.baseChange K).toProjective.dblU (f ∘ P) =\n    f ((W'.baseChange F).toProjective.dblU P) := by\n  rw [← RingHom.coe_coe, ← map_dblU, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.Projective.baseChange_add","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Projective","initialProofState":"F : Type v\ninst✝¹⁰ : Field F\nR : Type r\ninst✝⁹ : CommRing R\nW' : WeierstrassCurve.Projective R\nS : Type s\ninst✝⁸ : CommRing S\ninst✝⁷ : Algebra R S\ninst✝⁶ : Algebra R F\ninst✝⁵ : Algebra S F\ninst✝⁴ : IsScalarTower R S F\nK : Type v\ninst✝³ : Field K\ninst✝² : Algebra R K\ninst✝¹ : Algebra S K\ninst✝ : IsScalarTower R S K\nf : AlgHom S F K\nP Q : Fin 3 → F\nhP : (WeierstrassCurve.baseChange W' F).toProjective.Nonsingular P\nhQ : (WeierstrassCurve.baseChange W' F).toProjective.Nonsingular Q\n⊢ Eq ((WeierstrassCurve.baseChange W' K).toProjective.add (Function.comp (⇑f) P) (Function.comp (⇑f) Q)) (Function.comp (⇑f) ((WeierstrassCurve.baseChange W' F).toProjective.add P Q))","decl":"lemma baseChange_add {P Q : Fin 3 → F} (hP : (W'.baseChange F).toProjective.Nonsingular P)\n    (hQ : (W'.baseChange F).toProjective.Nonsingular Q) :\n    (W'.baseChange K).toProjective.add (f ∘ P) (f ∘ Q) =\n      f ∘ (W'.baseChange F).toProjective.add P Q := by\n  rw [← RingHom.coe_coe, ← WeierstrassCurve.Projective.map_add f hP hQ (K := K), map_baseChange]\n\n"}
