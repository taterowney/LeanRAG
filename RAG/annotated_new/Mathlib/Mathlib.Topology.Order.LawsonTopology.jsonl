{"name":"Topology.IsLawson.topology_eq_lawson","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\ninst✝¹ : Preorder α\ninst✝ : TopologicalSpace α\nself : Topology.IsLawson α\n⊢ Eq inst✝ (Topology.lawson α)","decl":"/-- Predicate for an ordered topological space to be equipped with its Lawson topology.\n\nThe Lawson topology is defined as the meet of `Topology.lower` and the `Topology.scott`.\n-/\nclass IsLawson : Prop where\n  topology_eq_lawson : ‹TopologicalSpace α› = lawson α\n\n"}
{"name":"Topology.IsLawson.isTopologicalBasis","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\ninst✝² : Preorder α\ninst✝¹ : TopologicalSpace α\ninst✝ : Topology.IsLawson α\n⊢ TopologicalSpace.IsTopologicalBasis (Topology.IsLawson.lawsonBasis α)","decl":"protected theorem isTopologicalBasis : TopologicalSpace.IsTopologicalBasis (lawsonBasis α) := by\n  have lawsonBasis_image2 : lawsonBasis α =\n      (image2 (fun x x_1 ↦ ⇑WithLower.toLower ⁻¹' x ∩ ⇑WithScott.toScott ⁻¹' x_1)\n        (IsLower.lowerBasis (WithLower α)) {U | IsOpen[scott α univ] U}) := by\n    rw [lawsonBasis, image2, IsLower.lowerBasis]\n    simp_rw [diff_eq_compl_inter]\n    aesop\n  rw [lawsonBasis_image2]\n  convert IsTopologicalBasis.inf_induced IsLower.isTopologicalBasis\n    (isTopologicalBasis_opens (α := WithScott α))\n    WithLower.toLower WithScott.toScott\n  rw [@topology_eq_lawson α _ _ _, lawson]\n  apply (congrArg₂ min _) _\n  · letI _ := lower α\n    exact (@IsLower.withLowerHomeomorph α ‹_› (lower α) ⟨rfl⟩).isInducing.eq_induced\n  · letI _ := scott α univ\n    exact (@IsScott.withScottHomeomorph α _ (scott α univ) ⟨rfl⟩).isInducing.eq_induced\n\n"}
{"name":"Topology.WithLawson.to_Lawson_symm_eq","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\n⊢ Eq Topology.WithLawson.toLawson.symm Topology.WithLawson.ofLawson","decl":"@[simp] lemma to_Lawson_symm_eq : (@toLawson α).symm = ofLawson := rfl\n"}
{"name":"Topology.WithLawson.of_Lawson_symm_eq","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\n⊢ Eq Topology.WithLawson.ofLawson.symm Topology.WithLawson.toLawson","decl":"@[simp] lemma of_Lawson_symm_eq : (@ofLawson α).symm = toLawson := rfl\n"}
{"name":"Topology.WithLawson.toLawson_ofLawson","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\na : Topology.WithLawson α\n⊢ Eq (Topology.WithLawson.toLawson (Topology.WithLawson.ofLawson a)) a","decl":"@[simp] lemma toLawson_ofLawson (a : WithLawson α) : toLawson (ofLawson a) = a := rfl\n"}
{"name":"Topology.WithLawson.ofLawson_toLawson","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\na : α\n⊢ Eq (Topology.WithLawson.ofLawson (Topology.WithLawson.toLawson a)) a","decl":"@[simp] lemma ofLawson_toLawson (a : α) : ofLawson (toLawson a) = a := rfl\n\n"}
{"name":"Topology.WithLawson.toLawson_inj","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\na b : α\n⊢ Iff (Eq (Topology.WithLawson.toLawson a) (Topology.WithLawson.toLawson b)) (Eq a b)","decl":"lemma toLawson_inj {a b : α} : toLawson a = toLawson b ↔ a = b := Iff.rfl\n\n"}
{"name":"Topology.WithLawson.ofLawson_inj","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\na b : Topology.WithLawson α\n⊢ Iff (Eq (Topology.WithLawson.ofLawson a) (Topology.WithLawson.ofLawson b)) (Eq a b)","decl":"lemma ofLawson_inj {a b : WithLawson α} : ofLawson a = ofLawson b ↔ a = b := Iff.rfl\n\n"}
{"name":"Topology.WithLawson.instNonempty","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\ninst✝ : Nonempty α\n⊢ Nonempty (Topology.WithLawson α)","decl":"instance [Nonempty α] : Nonempty (WithLawson α) := ‹Nonempty α›\n"}
{"name":"Topology.WithLawson.instIsLawson","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\ninst✝ : Preorder α\n⊢ Topology.IsLawson (Topology.WithLawson α)","decl":"instance instIsLawson : IsLawson (WithLawson α) := ⟨rfl⟩\n\n"}
{"name":"Topology.WithLawson.isOpen_preimage_ofLawson","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\ninst✝ : Preorder α\nS : Set α\n⊢ Iff (IsOpen (Set.preimage (⇑Topology.WithLawson.ofLawson) S)) (TopologicalSpace.IsOpen S)","decl":"theorem isOpen_preimage_ofLawson {S : Set α} :\n    IsOpen (ofLawson ⁻¹' S) ↔ (lawson α).IsOpen S := Iff.rfl\n\n"}
{"name":"Topology.WithLawson.isClosed_preimage_ofLawson","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\ninst✝ : Preorder α\nS : Set α\n⊢ Iff (IsClosed (Set.preimage (⇑Topology.WithLawson.ofLawson) S)) (IsClosed S)","decl":"theorem isClosed_preimage_ofLawson {S : Set α} :\n    IsClosed (ofLawson ⁻¹' S) ↔ IsClosed[lawson α] S := Iff.rfl\n\n"}
{"name":"Topology.WithLawson.isOpen_def","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\ninst✝ : Preorder α\nT : Set (Topology.WithLawson α)\n⊢ Iff (IsOpen T) (TopologicalSpace.IsOpen (Set.preimage (⇑Topology.WithLawson.toLawson) T))","decl":"theorem isOpen_def {T : Set (WithLawson α)} :\n    IsOpen T ↔ (lawson α).IsOpen (toLawson ⁻¹' T) := Iff.rfl\n\n"}
{"name":"Topology.lawson_le_scott","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\ninst✝ : Preorder α\n⊢ LE.le (Topology.lawson α) (Topology.scott α Set.univ)","decl":"lemma lawson_le_scott : lawson α ≤ scott α univ := inf_le_right\n\n"}
{"name":"Topology.lawson_le_lower","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\ninst✝ : Preorder α\n⊢ LE.le (Topology.lawson α) (Topology.lower α)","decl":"lemma lawson_le_lower : lawson α ≤ lower α := inf_le_left\n\n"}
{"name":"Topology.scottHausdorff_le_lawson","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\ninst✝ : Preorder α\n⊢ LE.le (Topology.scottHausdorff α Set.univ) (Topology.lawson α)","decl":"lemma scottHausdorff_le_lawson : scottHausdorff α univ ≤ lawson α :=\n  le_inf scottHausdorff_le_lower scottHausdorff_le_scott\n\n"}
{"name":"Topology.lawsonClosed_of_scottClosed","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\ninst✝ : Preorder α\ns : Set α\nh : IsClosed (Set.preimage (⇑Topology.WithScott.ofScott) s)\n⊢ IsClosed (Set.preimage (⇑Topology.WithLawson.ofLawson) s)","decl":"lemma lawsonClosed_of_scottClosed (s : Set α) (h : IsClosed (WithScott.ofScott ⁻¹' s)) :\n    IsClosed (WithLawson.ofLawson ⁻¹' s) := h.mono lawson_le_scott\n\n"}
{"name":"Topology.lawsonClosed_of_lowerClosed","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\ninst✝ : Preorder α\ns : Set α\nh : IsClosed (Set.preimage (⇑Topology.WithLower.ofLower) s)\n⊢ IsClosed (Set.preimage (⇑Topology.WithLawson.ofLawson) s)","decl":"lemma lawsonClosed_of_lowerClosed (s : Set α) (h : IsClosed (WithLower.ofLower ⁻¹' s)) :\n    IsClosed (WithLawson.ofLawson ⁻¹' s) := h.mono lawson_le_lower\n\n"}
{"name":"Topology.lawsonOpen_iff_scottOpen_of_isUpperSet","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\ninst✝ : Preorder α\ns : Set α\nh : IsUpperSet s\n⊢ Iff (IsOpen (Set.preimage (⇑Topology.WithLawson.ofLawson) s)) (IsOpen (Set.preimage (⇑Topology.WithScott.ofScott) s))","decl":"/-- An upper set is Lawson open if and only if it is Scott open -/\nlemma lawsonOpen_iff_scottOpen_of_isUpperSet {s : Set α} (h : IsUpperSet s) :\n    IsOpen (WithLawson.ofLawson ⁻¹' s) ↔ IsOpen (WithScott.ofScott ⁻¹' s) :=\n  ⟨fun hs => IsScott.isOpen_iff_isUpperSet_and_scottHausdorff_open (D := univ).mpr\n    ⟨h, (scottHausdorff_le_lawson s) hs⟩, lawson_le_scott _⟩\n\n"}
{"name":"Topology.isLawson_le_isScott","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\ninst✝² : Preorder α\nL S : TopologicalSpace α\ninst✝¹ : Topology.IsLawson α\ninst✝ : Topology.IsScott α Set.univ\n⊢ LE.le L S","decl":"lemma isLawson_le_isScott : L ≤ S := by\n  rw [@IsScott.topology_eq α univ _ S _, @IsLawson.topology_eq_lawson α _ L _]\n  exact inf_le_right\n\n"}
{"name":"Topology.scottHausdorff_le_isLawson","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\ninst✝¹ : Preorder α\nL : TopologicalSpace α\ninst✝ : Topology.IsLawson α\n⊢ LE.le (Topology.scottHausdorff α Set.univ) L","decl":"lemma scottHausdorff_le_isLawson : scottHausdorff α univ ≤ L := by\n  rw [@IsLawson.topology_eq_lawson α _ L _]\n  exact scottHausdorff_le_lawson\n\n"}
{"name":"Topology.lawsonOpen_iff_scottOpen_of_isUpperSet'","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\ninst✝² : Preorder α\nL S : TopologicalSpace α\ninst✝¹ : Topology.IsLawson α\ninst✝ : Topology.IsScott α Set.univ\ns : Set α\nh : IsUpperSet s\n⊢ Iff (IsOpen s) (IsOpen s)","decl":"/-- An upper set is Lawson open if and only if it is Scott open -/\nlemma lawsonOpen_iff_scottOpen_of_isUpperSet' (s : Set α) (h : IsUpperSet s) :\n    IsOpen[L] s ↔ IsOpen[S] s := by\n  rw [@IsLawson.topology_eq_lawson α _ L _, @IsScott.topology_eq α univ _ S _]\n  exact lawsonOpen_iff_scottOpen_of_isUpperSet h\n\n"}
{"name":"Topology.lawsonClosed_iff_scottClosed_of_isLowerSet","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\ninst✝² : Preorder α\nL S : TopologicalSpace α\ninst✝¹ : Topology.IsLawson α\ninst✝ : Topology.IsScott α Set.univ\ns : Set α\nh : IsLowerSet s\n⊢ Iff (IsClosed s) (IsClosed s)","decl":"lemma lawsonClosed_iff_scottClosed_of_isLowerSet (s : Set α) (h : IsLowerSet s) :\n    IsClosed[L] s ↔ IsClosed[S] s := by\n  rw [← @isOpen_compl_iff, ← isOpen_compl_iff,\n    (lawsonOpen_iff_scottOpen_of_isUpperSet' L S _ (isUpperSet_compl.mpr h))]\n\n"}
{"name":"Topology.lawsonClosed_iff_dirSupClosed_of_isLowerSet","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\ninst✝² : Preorder α\nL S : TopologicalSpace α\ninst✝¹ : Topology.IsLawson α\ninst✝ : Topology.IsScott α Set.univ\ns : Set α\nh : IsLowerSet s\n⊢ Iff (IsClosed s) (DirSupClosed s)","decl":"include S in\n/-- A lower set is Lawson closed if and only if it is closed under sups of directed sets -/\nlemma lawsonClosed_iff_dirSupClosed_of_isLowerSet (s : Set α) (h : IsLowerSet s) :\n    IsClosed[L] s ↔ DirSupClosed s := by\n  rw [lawsonClosed_iff_scottClosed_of_isLowerSet L S _ h,\n    @IsScott.isClosed_iff_isLowerSet_and_dirSupClosed]\n  aesop\n\n"}
{"name":"Topology.IsLawson.singleton_isClosed","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\ninst✝² : PartialOrder α\ninst✝¹ : TopologicalSpace α\ninst✝ : Topology.IsLawson α\na : α\n⊢ IsClosed (Singleton.singleton a)","decl":"lemma singleton_isClosed (a : α) : IsClosed ({a} : Set α) := by\n  simp only [IsLawson.topology_eq_lawson]\n  rw [← (Set.OrdConnected.upperClosure_inter_lowerClosure ordConnected_singleton),\n    ← WithLawson.isClosed_preimage_ofLawson]\n  apply IsClosed.inter\n    (lawsonClosed_of_lowerClosed _ (IsLower.isClosed_upperClosure (finite_singleton a)))\n  rw [lowerClosure_singleton, LowerSet.coe_Iic, ← WithLawson.isClosed_preimage_ofLawson]\n  apply lawsonClosed_of_scottClosed\n  exact IsScott.isClosed_Iic\n\n-- see Note [lower instance priority]\n"}
{"name":"Topology.IsLawson.t0Space","module":"Mathlib.Topology.Order.LawsonTopology","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\n⊢ T0Space α","decl":"/-- The Lawson topology on a partial order is T₀. -/\ninstance (priority := 90) t0Space : T0Space α :=\n  (t0Space_iff_inseparable α).2 fun a b h => by\n    simpa only [inseparable_iff_closure_eq, closure_eq_iff_isClosed.mpr (singleton_isClosed a),\n      closure_eq_iff_isClosed.mpr (singleton_isClosed b), singleton_eq_singleton_iff] using h\n\n"}
