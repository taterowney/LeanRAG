{"name":"PartialHomeomorph.univUnitBall_source","module":"Mathlib.Analysis.NormedSpace.HomeomorphBall","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\n⊢ Eq PartialHomeomorph.univUnitBall.source Set.univ","decl":"/-- Local homeomorphism between a real (semi)normed space and the unit ball.\nSee also `Homeomorph.unitBall`. -/\n@[simps (config := .lemmasOnly)]\ndef PartialHomeomorph.univUnitBall : PartialHomeomorph E E where\n  toFun x := (√(1 + ‖x‖ ^ 2))⁻¹ • x\n  invFun y := (√(1 - ‖(y : E)‖ ^ 2))⁻¹ • (y : E)\n  source := univ\n  target := ball 0 1\n  map_source' x _ := by\n    have : 0 < 1 + ‖x‖ ^ 2 := by positivity\n    rw [mem_ball_zero_iff, norm_smul, Real.norm_eq_abs, abs_inv, ← _root_.div_eq_inv_mul,\n      div_lt_one (abs_pos.mpr <| Real.sqrt_ne_zero'.mpr this), ← abs_norm x, ← sq_lt_sq,\n      abs_norm, Real.sq_sqrt this.le]\n    exact lt_one_add _\n  map_target' _ _ := trivial\n  left_inv' x _ := by\n    field_simp [norm_smul, smul_smul, (zero_lt_one_add_norm_sq x).ne', sq_abs,\n      Real.sq_sqrt (zero_lt_one_add_norm_sq x).le, ← Real.sqrt_div (zero_lt_one_add_norm_sq x).le]\n  right_inv' y hy := by\n    have : 0 < 1 - ‖y‖ ^ 2 := by nlinarith [norm_nonneg y, mem_ball_zero_iff.1 hy]\n    field_simp [norm_smul, smul_smul, this.ne', sq_abs, Real.sq_sqrt this.le,\n      ← Real.sqrt_div this.le]\n  open_source := isOpen_univ\n  open_target := isOpen_ball\n  continuousOn_toFun := by\n    suffices Continuous fun (x : E) => (√(1 + ‖x‖ ^ 2))⁻¹\n     from (this.smul continuous_id).continuousOn\n    refine Continuous.inv₀ ?_ fun x => Real.sqrt_ne_zero'.mpr (by positivity)\n    continuity\n  continuousOn_invFun := by\n    have : ∀ y ∈ ball (0 : E) 1, √(1 - ‖(y : E)‖ ^ 2) ≠ 0 := fun y hy ↦ by\n      rw [Real.sqrt_ne_zero']\n      nlinarith [norm_nonneg y, mem_ball_zero_iff.1 hy]\n    exact ContinuousOn.smul (ContinuousOn.inv₀\n      (continuousOn_const.sub (continuous_norm.continuousOn.pow _)).sqrt this) continuousOn_id\n\n"}
{"name":"PartialHomeomorph.univUnitBall_symm_apply","module":"Mathlib.Analysis.NormedSpace.HomeomorphBall","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\ny : E\n⊢ Eq (↑PartialHomeomorph.univUnitBall.symm y) (HSMul.hSMul (Inv.inv (HSub.hSub 1 (HPow.hPow (Norm.norm y) 2)).sqrt) y)","decl":"/-- Local homeomorphism between a real (semi)normed space and the unit ball.\nSee also `Homeomorph.unitBall`. -/\n@[simps (config := .lemmasOnly)]\ndef PartialHomeomorph.univUnitBall : PartialHomeomorph E E where\n  toFun x := (√(1 + ‖x‖ ^ 2))⁻¹ • x\n  invFun y := (√(1 - ‖(y : E)‖ ^ 2))⁻¹ • (y : E)\n  source := univ\n  target := ball 0 1\n  map_source' x _ := by\n    have : 0 < 1 + ‖x‖ ^ 2 := by positivity\n    rw [mem_ball_zero_iff, norm_smul, Real.norm_eq_abs, abs_inv, ← _root_.div_eq_inv_mul,\n      div_lt_one (abs_pos.mpr <| Real.sqrt_ne_zero'.mpr this), ← abs_norm x, ← sq_lt_sq,\n      abs_norm, Real.sq_sqrt this.le]\n    exact lt_one_add _\n  map_target' _ _ := trivial\n  left_inv' x _ := by\n    field_simp [norm_smul, smul_smul, (zero_lt_one_add_norm_sq x).ne', sq_abs,\n      Real.sq_sqrt (zero_lt_one_add_norm_sq x).le, ← Real.sqrt_div (zero_lt_one_add_norm_sq x).le]\n  right_inv' y hy := by\n    have : 0 < 1 - ‖y‖ ^ 2 := by nlinarith [norm_nonneg y, mem_ball_zero_iff.1 hy]\n    field_simp [norm_smul, smul_smul, this.ne', sq_abs, Real.sq_sqrt this.le,\n      ← Real.sqrt_div this.le]\n  open_source := isOpen_univ\n  open_target := isOpen_ball\n  continuousOn_toFun := by\n    suffices Continuous fun (x : E) => (√(1 + ‖x‖ ^ 2))⁻¹\n     from (this.smul continuous_id).continuousOn\n    refine Continuous.inv₀ ?_ fun x => Real.sqrt_ne_zero'.mpr (by positivity)\n    continuity\n  continuousOn_invFun := by\n    have : ∀ y ∈ ball (0 : E) 1, √(1 - ‖(y : E)‖ ^ 2) ≠ 0 := fun y hy ↦ by\n      rw [Real.sqrt_ne_zero']\n      nlinarith [norm_nonneg y, mem_ball_zero_iff.1 hy]\n    exact ContinuousOn.smul (ContinuousOn.inv₀\n      (continuousOn_const.sub (continuous_norm.continuousOn.pow _)).sqrt this) continuousOn_id\n\n"}
{"name":"PartialHomeomorph.univUnitBall_target","module":"Mathlib.Analysis.NormedSpace.HomeomorphBall","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\n⊢ Eq PartialHomeomorph.univUnitBall.target (Metric.ball 0 1)","decl":"/-- Local homeomorphism between a real (semi)normed space and the unit ball.\nSee also `Homeomorph.unitBall`. -/\n@[simps (config := .lemmasOnly)]\ndef PartialHomeomorph.univUnitBall : PartialHomeomorph E E where\n  toFun x := (√(1 + ‖x‖ ^ 2))⁻¹ • x\n  invFun y := (√(1 - ‖(y : E)‖ ^ 2))⁻¹ • (y : E)\n  source := univ\n  target := ball 0 1\n  map_source' x _ := by\n    have : 0 < 1 + ‖x‖ ^ 2 := by positivity\n    rw [mem_ball_zero_iff, norm_smul, Real.norm_eq_abs, abs_inv, ← _root_.div_eq_inv_mul,\n      div_lt_one (abs_pos.mpr <| Real.sqrt_ne_zero'.mpr this), ← abs_norm x, ← sq_lt_sq,\n      abs_norm, Real.sq_sqrt this.le]\n    exact lt_one_add _\n  map_target' _ _ := trivial\n  left_inv' x _ := by\n    field_simp [norm_smul, smul_smul, (zero_lt_one_add_norm_sq x).ne', sq_abs,\n      Real.sq_sqrt (zero_lt_one_add_norm_sq x).le, ← Real.sqrt_div (zero_lt_one_add_norm_sq x).le]\n  right_inv' y hy := by\n    have : 0 < 1 - ‖y‖ ^ 2 := by nlinarith [norm_nonneg y, mem_ball_zero_iff.1 hy]\n    field_simp [norm_smul, smul_smul, this.ne', sq_abs, Real.sq_sqrt this.le,\n      ← Real.sqrt_div this.le]\n  open_source := isOpen_univ\n  open_target := isOpen_ball\n  continuousOn_toFun := by\n    suffices Continuous fun (x : E) => (√(1 + ‖x‖ ^ 2))⁻¹\n     from (this.smul continuous_id).continuousOn\n    refine Continuous.inv₀ ?_ fun x => Real.sqrt_ne_zero'.mpr (by positivity)\n    continuity\n  continuousOn_invFun := by\n    have : ∀ y ∈ ball (0 : E) 1, √(1 - ‖(y : E)‖ ^ 2) ≠ 0 := fun y hy ↦ by\n      rw [Real.sqrt_ne_zero']\n      nlinarith [norm_nonneg y, mem_ball_zero_iff.1 hy]\n    exact ContinuousOn.smul (ContinuousOn.inv₀\n      (continuousOn_const.sub (continuous_norm.continuousOn.pow _)).sqrt this) continuousOn_id\n\n"}
{"name":"PartialHomeomorph.univUnitBall_apply","module":"Mathlib.Analysis.NormedSpace.HomeomorphBall","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nx : E\n⊢ Eq (↑PartialHomeomorph.univUnitBall x) (HSMul.hSMul (Inv.inv (HAdd.hAdd 1 (HPow.hPow (Norm.norm x) 2)).sqrt) x)","decl":"/-- Local homeomorphism between a real (semi)normed space and the unit ball.\nSee also `Homeomorph.unitBall`. -/\n@[simps (config := .lemmasOnly)]\ndef PartialHomeomorph.univUnitBall : PartialHomeomorph E E where\n  toFun x := (√(1 + ‖x‖ ^ 2))⁻¹ • x\n  invFun y := (√(1 - ‖(y : E)‖ ^ 2))⁻¹ • (y : E)\n  source := univ\n  target := ball 0 1\n  map_source' x _ := by\n    have : 0 < 1 + ‖x‖ ^ 2 := by positivity\n    rw [mem_ball_zero_iff, norm_smul, Real.norm_eq_abs, abs_inv, ← _root_.div_eq_inv_mul,\n      div_lt_one (abs_pos.mpr <| Real.sqrt_ne_zero'.mpr this), ← abs_norm x, ← sq_lt_sq,\n      abs_norm, Real.sq_sqrt this.le]\n    exact lt_one_add _\n  map_target' _ _ := trivial\n  left_inv' x _ := by\n    field_simp [norm_smul, smul_smul, (zero_lt_one_add_norm_sq x).ne', sq_abs,\n      Real.sq_sqrt (zero_lt_one_add_norm_sq x).le, ← Real.sqrt_div (zero_lt_one_add_norm_sq x).le]\n  right_inv' y hy := by\n    have : 0 < 1 - ‖y‖ ^ 2 := by nlinarith [norm_nonneg y, mem_ball_zero_iff.1 hy]\n    field_simp [norm_smul, smul_smul, this.ne', sq_abs, Real.sq_sqrt this.le,\n      ← Real.sqrt_div this.le]\n  open_source := isOpen_univ\n  open_target := isOpen_ball\n  continuousOn_toFun := by\n    suffices Continuous fun (x : E) => (√(1 + ‖x‖ ^ 2))⁻¹\n     from (this.smul continuous_id).continuousOn\n    refine Continuous.inv₀ ?_ fun x => Real.sqrt_ne_zero'.mpr (by positivity)\n    continuity\n  continuousOn_invFun := by\n    have : ∀ y ∈ ball (0 : E) 1, √(1 - ‖(y : E)‖ ^ 2) ≠ 0 := fun y hy ↦ by\n      rw [Real.sqrt_ne_zero']\n      nlinarith [norm_nonneg y, mem_ball_zero_iff.1 hy]\n    exact ContinuousOn.smul (ContinuousOn.inv₀\n      (continuousOn_const.sub (continuous_norm.continuousOn.pow _)).sqrt this) continuousOn_id\n\n"}
{"name":"PartialHomeomorph.univUnitBall_apply_zero","module":"Mathlib.Analysis.NormedSpace.HomeomorphBall","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\n⊢ Eq (↑PartialHomeomorph.univUnitBall 0) 0","decl":"@[simp]\ntheorem PartialHomeomorph.univUnitBall_apply_zero : univUnitBall (0 : E) = 0 := by\n  simp [PartialHomeomorph.univUnitBall_apply]\n\n"}
{"name":"PartialHomeomorph.univUnitBall_symm_apply_zero","module":"Mathlib.Analysis.NormedSpace.HomeomorphBall","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\n⊢ Eq (↑PartialHomeomorph.univUnitBall.symm 0) 0","decl":"@[simp]\ntheorem PartialHomeomorph.univUnitBall_symm_apply_zero : univUnitBall.symm (0 : E) = 0 := by\n  simp [PartialHomeomorph.univUnitBall_symm_apply]\n\n"}
{"name":"Homeomorph.unitBall_symm_apply","module":"Mathlib.Analysis.NormedSpace.HomeomorphBall","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\na✝ : ↑(Metric.ball 0 1)\n⊢ Eq (Homeomorph.unitBall.symm a✝) ↑(PartialHomeomorph.univUnitBall.toHomeomorphSourceTarget.symm a✝)","decl":"/-- A (semi) normed real vector space is homeomorphic to the unit ball in the same space.\nThis homeomorphism sends `x : E` to `(1 + ‖x‖²)^(- ½) • x`.\n\nIn many cases the actual implementation is not important, so we don't mark the projection lemmas\n`Homeomorph.unitBall_apply_coe` and `Homeomorph.unitBall_symm_apply` as `@[simp]`.\n\nSee also `Homeomorph.contDiff_unitBall` and `PartialHomeomorph.contDiffOn_unitBall_symm`\nfor smoothness properties that hold when `E` is an inner-product space. -/\n@[simps! (config := .lemmasOnly)]\ndef Homeomorph.unitBall : E ≃ₜ ball (0 : E) 1 :=\n  (Homeomorph.Set.univ _).symm.trans PartialHomeomorph.univUnitBall.toHomeomorphSourceTarget\n\n"}
{"name":"Homeomorph.unitBall_apply_coe","module":"Mathlib.Analysis.NormedSpace.HomeomorphBall","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\na✝ : E\n⊢ Eq (↑(Homeomorph.unitBall a✝)) (↑PartialHomeomorph.univUnitBall a✝)","decl":"/-- A (semi) normed real vector space is homeomorphic to the unit ball in the same space.\nThis homeomorphism sends `x : E` to `(1 + ‖x‖²)^(- ½) • x`.\n\nIn many cases the actual implementation is not important, so we don't mark the projection lemmas\n`Homeomorph.unitBall_apply_coe` and `Homeomorph.unitBall_symm_apply` as `@[simp]`.\n\nSee also `Homeomorph.contDiff_unitBall` and `PartialHomeomorph.contDiffOn_unitBall_symm`\nfor smoothness properties that hold when `E` is an inner-product space. -/\n@[simps! (config := .lemmasOnly)]\ndef Homeomorph.unitBall : E ≃ₜ ball (0 : E) 1 :=\n  (Homeomorph.Set.univ _).symm.trans PartialHomeomorph.univUnitBall.toHomeomorphSourceTarget\n\n"}
{"name":"Homeomorph.coe_unitBall_apply_zero","module":"Mathlib.Analysis.NormedSpace.HomeomorphBall","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\n⊢ Eq (↑(Homeomorph.unitBall 0)) 0","decl":"@[simp]\ntheorem Homeomorph.coe_unitBall_apply_zero :\n    (Homeomorph.unitBall (0 : E) : E) = 0 :=\n  PartialHomeomorph.univUnitBall_apply_zero\n\n"}
{"name":"PartialHomeomorph.unitBallBall_target","module":"Mathlib.Analysis.NormedSpace.HomeomorphBall","initialProofState":"E : Type u_1\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : NormedSpace Real E\nP : Type u_2\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor E P\nc : P\nr : Real\nhr : LT.lt 0 r\n⊢ Eq (PartialHomeomorph.unitBallBall c r hr).target (Metric.ball c r)","decl":"/-- Affine homeomorphism `(r • · +ᵥ c)` between a normed space and an add torsor over this space,\ninterpreted as a `PartialHomeomorph` between `Metric.ball 0 1` and `Metric.ball c r`. -/\n@[simps!]\ndef unitBallBall (c : P) (r : ℝ) (hr : 0 < r) : PartialHomeomorph E P :=\n  ((Homeomorph.smulOfNeZero r hr.ne').trans\n      (IsometryEquiv.vaddConst c).toHomeomorph).toPartialHomeomorphOfImageEq\n      (ball 0 1) isOpen_ball (ball c r) <| by\n    change (IsometryEquiv.vaddConst c) ∘ (r • ·) '' ball (0 : E) 1 = ball c r\n    rw [image_comp, image_smul, smul_unitBall hr.ne', IsometryEquiv.image_ball]\n    simp [abs_of_pos hr]\n\n"}
{"name":"PartialHomeomorph.unitBallBall_symm_apply","module":"Mathlib.Analysis.NormedSpace.HomeomorphBall","initialProofState":"E : Type u_1\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : NormedSpace Real E\nP : Type u_2\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor E P\nc : P\nr : Real\nhr : LT.lt 0 r\na : P\n⊢ Eq (↑(PartialHomeomorph.unitBallBall c r hr).symm a) (HSMul.hSMul (Inv.inv r) (VSub.vsub a c))","decl":"/-- Affine homeomorphism `(r • · +ᵥ c)` between a normed space and an add torsor over this space,\ninterpreted as a `PartialHomeomorph` between `Metric.ball 0 1` and `Metric.ball c r`. -/\n@[simps!]\ndef unitBallBall (c : P) (r : ℝ) (hr : 0 < r) : PartialHomeomorph E P :=\n  ((Homeomorph.smulOfNeZero r hr.ne').trans\n      (IsometryEquiv.vaddConst c).toHomeomorph).toPartialHomeomorphOfImageEq\n      (ball 0 1) isOpen_ball (ball c r) <| by\n    change (IsometryEquiv.vaddConst c) ∘ (r • ·) '' ball (0 : E) 1 = ball c r\n    rw [image_comp, image_smul, smul_unitBall hr.ne', IsometryEquiv.image_ball]\n    simp [abs_of_pos hr]\n\n"}
{"name":"PartialHomeomorph.unitBallBall_source","module":"Mathlib.Analysis.NormedSpace.HomeomorphBall","initialProofState":"E : Type u_1\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : NormedSpace Real E\nP : Type u_2\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor E P\nc : P\nr : Real\nhr : LT.lt 0 r\n⊢ Eq (PartialHomeomorph.unitBallBall c r hr).source (Metric.ball 0 1)","decl":"/-- Affine homeomorphism `(r • · +ᵥ c)` between a normed space and an add torsor over this space,\ninterpreted as a `PartialHomeomorph` between `Metric.ball 0 1` and `Metric.ball c r`. -/\n@[simps!]\ndef unitBallBall (c : P) (r : ℝ) (hr : 0 < r) : PartialHomeomorph E P :=\n  ((Homeomorph.smulOfNeZero r hr.ne').trans\n      (IsometryEquiv.vaddConst c).toHomeomorph).toPartialHomeomorphOfImageEq\n      (ball 0 1) isOpen_ball (ball c r) <| by\n    change (IsometryEquiv.vaddConst c) ∘ (r • ·) '' ball (0 : E) 1 = ball c r\n    rw [image_comp, image_smul, smul_unitBall hr.ne', IsometryEquiv.image_ball]\n    simp [abs_of_pos hr]\n\n"}
{"name":"PartialHomeomorph.unitBallBall_apply","module":"Mathlib.Analysis.NormedSpace.HomeomorphBall","initialProofState":"E : Type u_1\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : NormedSpace Real E\nP : Type u_2\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor E P\nc : P\nr : Real\nhr : LT.lt 0 r\na : E\n⊢ Eq (↑(PartialHomeomorph.unitBallBall c r hr) a) (HVAdd.hVAdd (HSMul.hSMul r a) c)","decl":"/-- Affine homeomorphism `(r • · +ᵥ c)` between a normed space and an add torsor over this space,\ninterpreted as a `PartialHomeomorph` between `Metric.ball 0 1` and `Metric.ball c r`. -/\n@[simps!]\ndef unitBallBall (c : P) (r : ℝ) (hr : 0 < r) : PartialHomeomorph E P :=\n  ((Homeomorph.smulOfNeZero r hr.ne').trans\n      (IsometryEquiv.vaddConst c).toHomeomorph).toPartialHomeomorphOfImageEq\n      (ball 0 1) isOpen_ball (ball c r) <| by\n    change (IsometryEquiv.vaddConst c) ∘ (r • ·) '' ball (0 : E) 1 = ball c r\n    rw [image_comp, image_smul, smul_unitBall hr.ne', IsometryEquiv.image_ball]\n    simp [abs_of_pos hr]\n\n"}
{"name":"PartialHomeomorph.univBall_source","module":"Mathlib.Analysis.NormedSpace.HomeomorphBall","initialProofState":"E : Type u_1\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : NormedSpace Real E\nP : Type u_2\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor E P\nc : P\nr : Real\n⊢ Eq (PartialHomeomorph.univBall c r).source Set.univ","decl":"@[simp]\ntheorem univBall_source (c : P) (r : ℝ) : (univBall c r).source = univ := by\n  unfold univBall; split_ifs <;> rfl\n\n"}
{"name":"PartialHomeomorph.univBall_target","module":"Mathlib.Analysis.NormedSpace.HomeomorphBall","initialProofState":"E : Type u_1\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : NormedSpace Real E\nP : Type u_2\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor E P\nc : P\nr : Real\nhr : LT.lt 0 r\n⊢ Eq (PartialHomeomorph.univBall c r).target (Metric.ball c r)","decl":"theorem univBall_target (c : P) {r : ℝ} (hr : 0 < r) : (univBall c r).target = ball c r := by\n  rw [univBall, dif_pos hr]; rfl\n\n"}
{"name":"PartialHomeomorph.ball_subset_univBall_target","module":"Mathlib.Analysis.NormedSpace.HomeomorphBall","initialProofState":"E : Type u_1\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : NormedSpace Real E\nP : Type u_2\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor E P\nc : P\nr : Real\n⊢ HasSubset.Subset (Metric.ball c r) (PartialHomeomorph.univBall c r).target","decl":"theorem ball_subset_univBall_target (c : P) (r : ℝ) : ball c r ⊆ (univBall c r).target := by\n  by_cases hr : 0 < r\n  · rw [univBall_target c hr]\n  · rw [univBall, dif_neg hr]\n    exact subset_univ _\n\n"}
{"name":"PartialHomeomorph.univBall_apply_zero","module":"Mathlib.Analysis.NormedSpace.HomeomorphBall","initialProofState":"E : Type u_1\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : NormedSpace Real E\nP : Type u_2\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor E P\nc : P\nr : Real\n⊢ Eq (↑(PartialHomeomorph.univBall c r) 0) c","decl":"@[simp]\ntheorem univBall_apply_zero (c : P) (r : ℝ) : univBall c r 0 = c := by\n  unfold univBall; split_ifs <;> simp\n\n"}
{"name":"PartialHomeomorph.univBall_symm_apply_center","module":"Mathlib.Analysis.NormedSpace.HomeomorphBall","initialProofState":"E : Type u_1\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : NormedSpace Real E\nP : Type u_2\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor E P\nc : P\nr : Real\n⊢ Eq (↑(PartialHomeomorph.univBall c r).symm c) 0","decl":"@[simp]\ntheorem univBall_symm_apply_center (c : P) (r : ℝ) : (univBall c r).symm c = 0 := by\n  have : 0 ∈ (univBall c r).source := by simp\n  simpa only [univBall_apply_zero] using (univBall c r).left_inv this\n\n"}
{"name":"PartialHomeomorph.continuous_univBall","module":"Mathlib.Analysis.NormedSpace.HomeomorphBall","initialProofState":"E : Type u_1\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : NormedSpace Real E\nP : Type u_2\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor E P\nc : P\nr : Real\n⊢ Continuous ↑(PartialHomeomorph.univBall c r)","decl":"@[continuity]\ntheorem continuous_univBall (c : P) (r : ℝ) : Continuous (univBall c r) := by\n  simpa [continuous_iff_continuousOn_univ] using (univBall c r).continuousOn\n\n"}
{"name":"PartialHomeomorph.continuousOn_univBall_symm","module":"Mathlib.Analysis.NormedSpace.HomeomorphBall","initialProofState":"E : Type u_1\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : NormedSpace Real E\nP : Type u_2\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor E P\nc : P\nr : Real\n⊢ ContinuousOn (↑(PartialHomeomorph.univBall c r).symm) (Metric.ball c r)","decl":"theorem continuousOn_univBall_symm (c : P) (r : ℝ) : ContinuousOn (univBall c r).symm (ball c r) :=\n  (univBall c r).symm.continuousOn.mono <| ball_subset_univBall_target c r\n\n"}
