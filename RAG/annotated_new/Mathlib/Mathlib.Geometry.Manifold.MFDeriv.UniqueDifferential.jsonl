{"name":"UniqueMDiffWithinAt.image_denseRange","module":"Mathlib.Geometry.Manifold.MFDeriv.UniqueDifferential","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nE' : Type u_5\ninst✝⁴ : NormedAddCommGroup E'\ninst✝³ : NormedSpace 𝕜 E'\nH' : Type u_6\ninst✝² : TopologicalSpace H'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\ns : Set M\nx : M\nhs : UniqueMDiffWithinAt I s x\nf : M → M'\nf' : ContinuousLinearMap (RingHom.id 𝕜) E E'\nhf : HasMFDerivWithinAt I I' f s x f'\nhd : DenseRange ⇑f'\n⊢ UniqueMDiffWithinAt I' (Set.image f s) (f x)","decl":"/-- If `s` has the unique differential property at `x`, `f` is differentiable within `s` at x` and\nits derivative has dense range, then `f '' s` has the unique differential property at `f x`. -/\ntheorem UniqueMDiffWithinAt.image_denseRange (hs : UniqueMDiffWithinAt I s x)\n    {f : M → M'} {f' : E →L[𝕜] E'} (hf : HasMFDerivWithinAt I I' f s x f')\n    (hd : DenseRange f') : UniqueMDiffWithinAt I' (f '' s) (f x) := by\n  /- Rewrite in coordinates, apply `HasFDerivWithinAt.uniqueDiffWithinAt`. -/\n  have := hs.inter' <| hf.1 (extChartAt_source_mem_nhds (I := I') (f x))\n  refine (((hf.2.mono ?sub1).uniqueDiffWithinAt this hd).mono ?sub2).congr_pt ?pt\n  case pt => simp only [mfld_simps]\n  case sub1 => mfld_set_tac\n  case sub2 =>\n    rintro _ ⟨y, ⟨⟨hys, hfy⟩, -⟩, rfl⟩\n    exact ⟨⟨_, hys, ((extChartAt I' (f x)).left_inv hfy).symm⟩, mem_range_self _⟩\n\n"}
{"name":"UniqueMDiffOn.image_denseRange'","module":"Mathlib.Geometry.Manifold.MFDeriv.UniqueDifferential","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nE' : Type u_5\ninst✝⁴ : NormedAddCommGroup E'\ninst✝³ : NormedSpace 𝕜 E'\nH' : Type u_6\ninst✝² : TopologicalSpace H'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\ns : Set M\nhs : UniqueMDiffOn I s\nf : M → M'\nf' : M → ContinuousLinearMap (RingHom.id 𝕜) E E'\nhf : ∀ (x : M), Membership.mem s x → HasMFDerivWithinAt I I' f s x (f' x)\nhd : ∀ (x : M), Membership.mem s x → DenseRange ⇑(f' x)\n⊢ UniqueMDiffOn I' (Set.image f s)","decl":"/-- If `s` has the unique differential property, `f` is differentiable on `s` and its derivative\nat every point of `s` has dense range, then `f '' s` has the unique differential property.\nThis version uses the `HasMFDerivWithinAt` predicate. -/\ntheorem UniqueMDiffOn.image_denseRange' (hs : UniqueMDiffOn I s) {f : M → M'}\n    {f' : M → E →L[𝕜] E'} (hf : ∀ x ∈ s, HasMFDerivWithinAt I I' f s x (f' x))\n    (hd : ∀ x ∈ s, DenseRange (f' x)) :\n    UniqueMDiffOn I' (f '' s) :=\n  forall_mem_image.2 fun x hx ↦ (hs x hx).image_denseRange (hf x hx) (hd x hx)\n\n"}
{"name":"UniqueMDiffOn.image_denseRange","module":"Mathlib.Geometry.Manifold.MFDeriv.UniqueDifferential","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nE' : Type u_5\ninst✝⁴ : NormedAddCommGroup E'\ninst✝³ : NormedSpace 𝕜 E'\nH' : Type u_6\ninst✝² : TopologicalSpace H'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\ns : Set M\nhs : UniqueMDiffOn I s\nf : M → M'\nhf : MDifferentiableOn I I' f s\nhd : ∀ (x : M), Membership.mem s x → DenseRange ⇑(mfderivWithin I I' f s x)\n⊢ UniqueMDiffOn I' (Set.image f s)","decl":"/-- If `s` has the unique differential property, `f` is differentiable on `s` and its derivative\nat every point of `s` has dense range, then `f '' s` has the unique differential property. -/\ntheorem UniqueMDiffOn.image_denseRange (hs : UniqueMDiffOn I s) {f : M → M'}\n    (hf : MDifferentiableOn I I' f s) (hd : ∀ x ∈ s, DenseRange (mfderivWithin I I' f s x)) :\n    UniqueMDiffOn I' (f '' s) :=\n  hs.image_denseRange' (fun x hx ↦ (hf x hx).hasMFDerivWithinAt) hd\n\n"}
{"name":"UniqueMDiffWithinAt.preimage_partialHomeomorph","module":"Mathlib.Geometry.Manifold.MFDeriv.UniqueDifferential","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nE' : Type u_5\ninst✝⁴ : NormedAddCommGroup E'\ninst✝³ : NormedSpace 𝕜 E'\nH' : Type u_6\ninst✝² : TopologicalSpace H'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\ns : Set M\nx : M\nhs : UniqueMDiffWithinAt I s x\ne : PartialHomeomorph M M'\nhe : PartialHomeomorph.MDifferentiable I I' e\nhx : Membership.mem e.source x\n⊢ UniqueMDiffWithinAt I' (Inter.inter e.target (Set.preimage (↑e.symm) s)) (↑e x)","decl":"protected theorem UniqueMDiffWithinAt.preimage_partialHomeomorph (hs : UniqueMDiffWithinAt I s x)\n    {e : PartialHomeomorph M M'} (he : e.MDifferentiable I I') (hx : x ∈ e.source) :\n    UniqueMDiffWithinAt I' (e.target ∩ e.symm ⁻¹' s) (e x) := by\n  rw [← e.image_source_inter_eq', inter_comm]\n  exact (hs.inter (e.open_source.mem_nhds hx)).image_denseRange\n    (he.mdifferentiableAt hx).hasMFDerivAt.hasMFDerivWithinAt\n    (he.mfderiv_surjective hx).denseRange\n\n"}
{"name":"UniqueMDiffOn.uniqueMDiffOn_preimage","module":"Mathlib.Geometry.Manifold.MFDeriv.UniqueDifferential","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nE' : Type u_5\ninst✝⁴ : NormedAddCommGroup E'\ninst✝³ : NormedSpace 𝕜 E'\nH' : Type u_6\ninst✝² : TopologicalSpace H'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\ns : Set M\nhs : UniqueMDiffOn I s\ne : PartialHomeomorph M M'\nhe : PartialHomeomorph.MDifferentiable I I' e\n⊢ UniqueMDiffOn I' (Inter.inter e.target (Set.preimage (↑e.symm) s))","decl":"/-- If a set has the unique differential property, then its image under a local\ndiffeomorphism also has the unique differential property. -/\ntheorem UniqueMDiffOn.uniqueMDiffOn_preimage (hs : UniqueMDiffOn I s) {e : PartialHomeomorph M M'}\n    (he : e.MDifferentiable I I') : UniqueMDiffOn I' (e.target ∩ e.symm ⁻¹' s) := fun _x hx ↦\n  e.right_inv hx.1 ▸ (hs _ hx.2).preimage_partialHomeomorph he (e.map_target hx.1)\n\n"}
{"name":"UniqueMDiffOn.uniqueMDiffOn_target_inter","module":"Mathlib.Geometry.Manifold.MFDeriv.UniqueDifferential","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ns : Set M\ninst✝ : IsManifold I 1 M\nhs : UniqueMDiffOn I s\nx : M\n⊢ UniqueMDiffOn (modelWithCornersSelf 𝕜 E) (Inter.inter (extChartAt I x).target (Set.preimage (↑(extChartAt I x).symm) s))","decl":"variable [IsManifold I 1 M] in\n/-- If a set in a manifold has the unique derivative property, then its pullback by any extended\nchart, in the vector space, also has the unique derivative property. -/\ntheorem UniqueMDiffOn.uniqueMDiffOn_target_inter (hs : UniqueMDiffOn I s) (x : M) :\n    UniqueMDiffOn 𝓘(𝕜, E) ((extChartAt I x).target ∩ (extChartAt I x).symm ⁻¹' s) := by\n  -- this is just a reformulation of `UniqueMDiffOn.uniqueMDiffOn_preimage`, using as `e`\n  -- the local chart at `x`.\n  rw [← PartialEquiv.image_source_inter_eq', inter_comm, extChartAt_source]\n  exact (hs.inter (chartAt H x).open_source).image_denseRange'\n    (fun y hy ↦ hasMFDerivWithinAt_extChartAt hy.2)\n    fun y hy ↦ ((mdifferentiable_chart _).mfderiv_surjective hy.2).denseRange\n\n"}
{"name":"UniqueMDiffOn.uniqueDiffOn_target_inter","module":"Mathlib.Geometry.Manifold.MFDeriv.UniqueDifferential","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ns : Set M\ninst✝ : IsManifold I 1 M\nhs : UniqueMDiffOn I s\nx : M\n⊢ UniqueDiffOn 𝕜 (Inter.inter (extChartAt I x).target (Set.preimage (↑(extChartAt I x).symm) s))","decl":"variable [IsManifold I 1 M] in\n/-- If a set in a manifold has the unique derivative property, then its pullback by any extended\nchart, in the vector space, also has the unique derivative property. -/\ntheorem UniqueMDiffOn.uniqueDiffOn_target_inter (hs : UniqueMDiffOn I s) (x : M) :\n    UniqueDiffOn 𝕜 ((extChartAt I x).target ∩ (extChartAt I x).symm ⁻¹' s) :=\n  (hs.uniqueMDiffOn_target_inter x).uniqueDiffOn\n\n"}
{"name":"UniqueMDiffOn.uniqueDiffWithinAt_range_inter","module":"Mathlib.Geometry.Manifold.MFDeriv.UniqueDifferential","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ns : Set M\ninst✝ : IsManifold I 1 M\nhs : UniqueMDiffOn I s\nx : M\ny : E\nhy : Membership.mem (Inter.inter (extChartAt I x).target (Set.preimage (↑(extChartAt I x).symm) s)) y\n⊢ UniqueDiffWithinAt 𝕜 (Inter.inter (Set.range ↑I) (Set.preimage (↑(extChartAt I x).symm) s)) y","decl":"variable [IsManifold I 1 M] in\ntheorem UniqueMDiffOn.uniqueDiffWithinAt_range_inter (hs : UniqueMDiffOn I s) (x : M) (y : E)\n    (hy : y ∈ (extChartAt I x).target ∩ (extChartAt I x).symm ⁻¹' s) :\n    UniqueDiffWithinAt 𝕜 (range I ∩ (extChartAt I x).symm ⁻¹' s) y := by\n  apply (hs.uniqueDiffOn_target_inter x y hy).mono\n  apply inter_subset_inter_left _ (extChartAt_target_subset_range x)\n\n"}
{"name":"UniqueMDiffOn.uniqueDiffOn_inter_preimage","module":"Mathlib.Geometry.Manifold.MFDeriv.UniqueDifferential","initialProofState":"𝕜 : Type u_1\ninst✝¹¹ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹⁰ : NormedAddCommGroup E\ninst✝⁹ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁸ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁷ : TopologicalSpace M\ninst✝⁶ : ChartedSpace H M\nE' : Type u_5\ninst✝⁵ : NormedAddCommGroup E'\ninst✝⁴ : NormedSpace 𝕜 E'\nH' : Type u_6\ninst✝³ : TopologicalSpace H'\nI' : ModelWithCorners 𝕜 E' H'\nM'' : Type u_8\ninst✝² : TopologicalSpace M''\ninst✝¹ : ChartedSpace H' M''\ns : Set M\ninst✝ : IsManifold I 1 M\nhs : UniqueMDiffOn I s\nx : M\ny : M''\nf : M → M''\nhf : ContinuousOn f s\n⊢ UniqueDiffOn 𝕜 (Inter.inter (extChartAt I x).target (Set.preimage (↑(extChartAt I x).symm) (Inter.inter s (Set.preimage f (extChartAt I' y).source))))","decl":"variable [IsManifold I 1 M] in\n/-- When considering functions between manifolds, this statement shows up often. It entails\nthe unique differential of the pullback in extended charts of the set where the function can\nbe read in the charts. -/\ntheorem UniqueMDiffOn.uniqueDiffOn_inter_preimage (hs : UniqueMDiffOn I s) (x : M) (y : M'')\n    {f : M → M''} (hf : ContinuousOn f s) :\n    UniqueDiffOn 𝕜\n      ((extChartAt I x).target ∩ (extChartAt I x).symm ⁻¹' (s ∩ f ⁻¹' (extChartAt I' y).source)) :=\n  haveI : UniqueMDiffOn I (s ∩ f ⁻¹' (extChartAt I' y).source) := by\n    intro z hz\n    apply (hs z hz.1).inter'\n    apply (hf z hz.1).preimage_mem_nhdsWithin\n    exact (isOpen_extChartAt_source y).mem_nhds hz.2\n  this.uniqueDiffOn_target_inter _\n\n"}
{"name":"UniqueMDiffWithinAt.bundle_preimage","module":"Mathlib.Geometry.Manifold.MFDeriv.UniqueDifferential","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\ns : Set M\nF : Type u_9\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace 𝕜 F\nZ : M → Type u_10\ninst✝² : TopologicalSpace (Bundle.TotalSpace F Z)\ninst✝¹ : (b : M) → TopologicalSpace (Z b)\ninst✝ : FiberBundle F Z\np : Bundle.TotalSpace F Z\nhs : UniqueMDiffWithinAt I s p.proj\n⊢ UniqueMDiffWithinAt (I.prod (modelWithCornersSelf 𝕜 F)) (Set.preimage Bundle.TotalSpace.proj s) p","decl":"/-- In a fiber bundle, the preimage under the projection of a set with unique differentials\nin the base has unique differentials in the bundle. -/\ntheorem UniqueMDiffWithinAt.bundle_preimage {p : TotalSpace F Z}\n    (hs : UniqueMDiffWithinAt I s p.proj) :\n    UniqueMDiffWithinAt (I.prod 𝓘(𝕜, F)) (π F Z ⁻¹' s) p := by\n  suffices UniqueMDiffWithinAt (I.prod 𝓘(𝕜, F))\n    (π F Z ⁻¹' (s ∩ (trivializationAt F Z p.proj).baseSet)) p from this.mono (by simp)\n  apply UniqueMDiffWithinAt.bundle_preimage_aux (hs.inter _) inter_subset_right\n  exact IsOpen.mem_nhds (trivializationAt F Z p.proj).open_baseSet\n    (FiberBundle.mem_baseSet_trivializationAt' p.proj)\n\n"}
{"name":"UniqueMDiffWithinAt.smooth_bundle_preimage","module":"Mathlib.Geometry.Manifold.MFDeriv.UniqueDifferential","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\ns : Set M\nF : Type u_9\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace 𝕜 F\nZ : M → Type u_10\ninst✝² : TopologicalSpace (Bundle.TotalSpace F Z)\ninst✝¹ : (b : M) → TopologicalSpace (Z b)\ninst✝ : FiberBundle F Z\np : Bundle.TotalSpace F Z\nhs : UniqueMDiffWithinAt I s p.proj\n⊢ UniqueMDiffWithinAt (I.prod (modelWithCornersSelf 𝕜 F)) (Set.preimage Bundle.TotalSpace.proj s) p","decl":"@[deprecated (since := \"2024-12-02\")]\nalias UniqueMDiffWithinAt.smooth_bundle_preimage := UniqueMDiffWithinAt.bundle_preimage\n\n"}
{"name":"UniqueMDiffWithinAt.bundle_preimage'","module":"Mathlib.Geometry.Manifold.MFDeriv.UniqueDifferential","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\ns : Set M\nF : Type u_9\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace 𝕜 F\nZ : M → Type u_10\ninst✝² : TopologicalSpace (Bundle.TotalSpace F Z)\ninst✝¹ : (b : M) → TopologicalSpace (Z b)\ninst✝ : FiberBundle F Z\nb : M\nhs : UniqueMDiffWithinAt I s b\nx : Z b\n⊢ UniqueMDiffWithinAt (I.prod (modelWithCornersSelf 𝕜 F)) (Set.preimage Bundle.TotalSpace.proj s) { proj := b, snd := x }","decl":"/-- In a fiber bundle, the preimage under the projection of a set with unique differentials\nin the base has unique differentials in the bundle. Version with a point `⟨b, x⟩`. -/\ntheorem UniqueMDiffWithinAt.bundle_preimage' {b : M} (hs : UniqueMDiffWithinAt I s b)\n    (x : Z b) : UniqueMDiffWithinAt (I.prod 𝓘(𝕜, F)) (π F Z ⁻¹' s) ⟨b, x⟩ :=\n  hs.bundle_preimage (p := ⟨b, x⟩)\n\n"}
{"name":"UniqueMDiffWithinAt.smooth_bundle_preimage'","module":"Mathlib.Geometry.Manifold.MFDeriv.UniqueDifferential","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\ns : Set M\nF : Type u_9\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace 𝕜 F\nZ : M → Type u_10\ninst✝² : TopologicalSpace (Bundle.TotalSpace F Z)\ninst✝¹ : (b : M) → TopologicalSpace (Z b)\ninst✝ : FiberBundle F Z\nb : M\nhs : UniqueMDiffWithinAt I s b\nx : Z b\n⊢ UniqueMDiffWithinAt (I.prod (modelWithCornersSelf 𝕜 F)) (Set.preimage Bundle.TotalSpace.proj s) { proj := b, snd := x }","decl":"@[deprecated (since := \"2024-12-02\")]\nalias UniqueMDiffWithinAt.smooth_bundle_preimage' := UniqueMDiffWithinAt.bundle_preimage'\n\n"}
{"name":"UniqueMDiffOn.bundle_preimage","module":"Mathlib.Geometry.Manifold.MFDeriv.UniqueDifferential","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\ns : Set M\nF : Type u_9\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace 𝕜 F\nZ : M → Type u_10\ninst✝² : TopologicalSpace (Bundle.TotalSpace F Z)\ninst✝¹ : (b : M) → TopologicalSpace (Z b)\ninst✝ : FiberBundle F Z\nhs : UniqueMDiffOn I s\n⊢ UniqueMDiffOn (I.prod (modelWithCornersSelf 𝕜 F)) (Set.preimage Bundle.TotalSpace.proj s)","decl":"/-- In a fiber bundle, the preimage under the projection of a set with unique differentials\nin the base has unique differentials in the bundle. -/\ntheorem UniqueMDiffOn.bundle_preimage (hs : UniqueMDiffOn I s) :\n    UniqueMDiffOn (I.prod 𝓘(𝕜, F)) (π F Z ⁻¹' s) := fun _p hp ↦\n  (hs _ hp).bundle_preimage\n\n"}
{"name":"UniqueMDiffOn.smooth_bundle_preimage","module":"Mathlib.Geometry.Manifold.MFDeriv.UniqueDifferential","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\ns : Set M\nF : Type u_9\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace 𝕜 F\nZ : M → Type u_10\ninst✝² : TopologicalSpace (Bundle.TotalSpace F Z)\ninst✝¹ : (b : M) → TopologicalSpace (Z b)\ninst✝ : FiberBundle F Z\nhs : UniqueMDiffOn I s\n⊢ UniqueMDiffOn (I.prod (modelWithCornersSelf 𝕜 F)) (Set.preimage Bundle.TotalSpace.proj s)","decl":"@[deprecated (since := \"2024-12-02\")]\nalias UniqueMDiffOn.smooth_bundle_preimage := UniqueMDiffOn.bundle_preimage\n\n/- TODO: move me to `Mathlib.Geometry.Manifold.VectorBundle.MDifferentiable` once #19636 is in. -/\n"}
{"name":"Trivialization.mdifferentiable","module":"Mathlib.Geometry.Manifold.MFDeriv.UniqueDifferential","initialProofState":"𝕜 : Type u_1\ninst✝¹⁵ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹⁴ : NormedAddCommGroup E\ninst✝¹³ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝¹² : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝¹¹ : TopologicalSpace M\ninst✝¹⁰ : ChartedSpace H M\nF : Type u_9\ninst✝⁹ : NormedAddCommGroup F\ninst✝⁸ : NormedSpace 𝕜 F\nZ : M → Type u_10\ninst✝⁷ : TopologicalSpace (Bundle.TotalSpace F Z)\ninst✝⁶ : (b : M) → TopologicalSpace (Z b)\ninst✝⁵ : FiberBundle F Z\ninst✝⁴ : (b : M) → AddCommMonoid (Z b)\ninst✝³ : (b : M) → Module 𝕜 (Z b)\ninst✝² : VectorBundle 𝕜 F Z\ninst✝¹ : ContMDiffVectorBundle 1 F Z I\ne : Trivialization F Bundle.TotalSpace.proj\ninst✝ : MemTrivializationAtlas e\n⊢ PartialHomeomorph.MDifferentiable (I.prod (modelWithCornersSelf 𝕜 F)) (I.prod (modelWithCornersSelf 𝕜 F)) e.toPartialHomeomorph","decl":"theorem Trivialization.mdifferentiable [ContMDiffVectorBundle 1 F Z I]\n    (e : Trivialization F (π F Z)) [MemTrivializationAtlas e] :\n    e.MDifferentiable (I.prod 𝓘(𝕜, F)) (I.prod 𝓘(𝕜, F)) :=\n  ⟨e.contMDiffOn.mdifferentiableOn le_rfl, e.contMDiffOn_symm.mdifferentiableOn le_rfl⟩\n\n"}
