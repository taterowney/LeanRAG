{"name":"CategoryTheory.Discrete.addMonoidal_rightUnitor","module":"Mathlib.CategoryTheory.Monoidal.Discrete","initialProofState":"M : Type u\ninst‚úù : AddMonoid M\nX : CategoryTheory.Discrete M\n‚ä¢ Eq (CategoryTheory.MonoidalCategoryStruct.rightUnitor X) (CategoryTheory.Discrete.eqToIso ‚ãØ)","decl":"@[to_additive (attr := simps tensorObj_as leftUnitor rightUnitor associator) Discrete.addMonoidal]\ninstance Discrete.monoidal : MonoidalCategory (Discrete M) where\n  tensorUnit := Discrete.mk 1\n  tensorObj X Y := Discrete.mk (X.as * Y.as)\n  whiskerLeft X _ _ f := eqToHom (by dsimp; rw [eq_of_hom f])\n  whiskerRight f X := eqToHom (by dsimp; rw [eq_of_hom f])\n  tensorHom f g := eqToHom (by dsimp; rw [eq_of_hom f, eq_of_hom g])\n  leftUnitor X := Discrete.eqToIso (one_mul X.as)\n  rightUnitor X := Discrete.eqToIso (mul_one X.as)\n  associator _ _ _ := Discrete.eqToIso (mul_assoc _ _ _)\n\n"}
{"name":"CategoryTheory.Discrete.monoidal_rightUnitor","module":"Mathlib.CategoryTheory.Monoidal.Discrete","initialProofState":"M : Type u\ninst‚úù : Monoid M\nX : CategoryTheory.Discrete M\n‚ä¢ Eq (CategoryTheory.MonoidalCategoryStruct.rightUnitor X) (CategoryTheory.Discrete.eqToIso ‚ãØ)","decl":"@[to_additive (attr := simps tensorObj_as leftUnitor rightUnitor associator) Discrete.addMonoidal]\ninstance Discrete.monoidal : MonoidalCategory (Discrete M) where\n  tensorUnit := Discrete.mk 1\n  tensorObj X Y := Discrete.mk (X.as * Y.as)\n  whiskerLeft X _ _ f := eqToHom (by dsimp; rw [eq_of_hom f])\n  whiskerRight f X := eqToHom (by dsimp; rw [eq_of_hom f])\n  tensorHom f g := eqToHom (by dsimp; rw [eq_of_hom f, eq_of_hom g])\n  leftUnitor X := Discrete.eqToIso (one_mul X.as)\n  rightUnitor X := Discrete.eqToIso (mul_one X.as)\n  associator _ _ _ := Discrete.eqToIso (mul_assoc _ _ _)\n\n"}
{"name":"CategoryTheory.Discrete.addMonoidal_associator","module":"Mathlib.CategoryTheory.Monoidal.Discrete","initialProofState":"M : Type u\ninst‚úù : AddMonoid M\nx‚úù¬≤ x‚úù¬π x‚úù : CategoryTheory.Discrete M\n‚ä¢ Eq (CategoryTheory.MonoidalCategoryStruct.associator x‚úù¬≤ x‚úù¬π x‚úù) (CategoryTheory.Discrete.eqToIso ‚ãØ)","decl":"@[to_additive (attr := simps tensorObj_as leftUnitor rightUnitor associator) Discrete.addMonoidal]\ninstance Discrete.monoidal : MonoidalCategory (Discrete M) where\n  tensorUnit := Discrete.mk 1\n  tensorObj X Y := Discrete.mk (X.as * Y.as)\n  whiskerLeft X _ _ f := eqToHom (by dsimp; rw [eq_of_hom f])\n  whiskerRight f X := eqToHom (by dsimp; rw [eq_of_hom f])\n  tensorHom f g := eqToHom (by dsimp; rw [eq_of_hom f, eq_of_hom g])\n  leftUnitor X := Discrete.eqToIso (one_mul X.as)\n  rightUnitor X := Discrete.eqToIso (mul_one X.as)\n  associator _ _ _ := Discrete.eqToIso (mul_assoc _ _ _)\n\n"}
{"name":"CategoryTheory.Discrete.monoidal_tensorObj_as","module":"Mathlib.CategoryTheory.Monoidal.Discrete","initialProofState":"M : Type u\ninst‚úù : Monoid M\nX Y : CategoryTheory.Discrete M\n‚ä¢ Eq (CategoryTheory.MonoidalCategoryStruct.tensorObj X Y).as (HMul.hMul X.as Y.as)","decl":"@[to_additive (attr := simps tensorObj_as leftUnitor rightUnitor associator) Discrete.addMonoidal]\ninstance Discrete.monoidal : MonoidalCategory (Discrete M) where\n  tensorUnit := Discrete.mk 1\n  tensorObj X Y := Discrete.mk (X.as * Y.as)\n  whiskerLeft X _ _ f := eqToHom (by dsimp; rw [eq_of_hom f])\n  whiskerRight f X := eqToHom (by dsimp; rw [eq_of_hom f])\n  tensorHom f g := eqToHom (by dsimp; rw [eq_of_hom f, eq_of_hom g])\n  leftUnitor X := Discrete.eqToIso (one_mul X.as)\n  rightUnitor X := Discrete.eqToIso (mul_one X.as)\n  associator _ _ _ := Discrete.eqToIso (mul_assoc _ _ _)\n\n"}
{"name":"CategoryTheory.Discrete.monoidal_leftUnitor","module":"Mathlib.CategoryTheory.Monoidal.Discrete","initialProofState":"M : Type u\ninst‚úù : Monoid M\nX : CategoryTheory.Discrete M\n‚ä¢ Eq (CategoryTheory.MonoidalCategoryStruct.leftUnitor X) (CategoryTheory.Discrete.eqToIso ‚ãØ)","decl":"@[to_additive (attr := simps tensorObj_as leftUnitor rightUnitor associator) Discrete.addMonoidal]\ninstance Discrete.monoidal : MonoidalCategory (Discrete M) where\n  tensorUnit := Discrete.mk 1\n  tensorObj X Y := Discrete.mk (X.as * Y.as)\n  whiskerLeft X _ _ f := eqToHom (by dsimp; rw [eq_of_hom f])\n  whiskerRight f X := eqToHom (by dsimp; rw [eq_of_hom f])\n  tensorHom f g := eqToHom (by dsimp; rw [eq_of_hom f, eq_of_hom g])\n  leftUnitor X := Discrete.eqToIso (one_mul X.as)\n  rightUnitor X := Discrete.eqToIso (mul_one X.as)\n  associator _ _ _ := Discrete.eqToIso (mul_assoc _ _ _)\n\n"}
{"name":"CategoryTheory.Discrete.addMonoidal_leftUnitor","module":"Mathlib.CategoryTheory.Monoidal.Discrete","initialProofState":"M : Type u\ninst‚úù : AddMonoid M\nX : CategoryTheory.Discrete M\n‚ä¢ Eq (CategoryTheory.MonoidalCategoryStruct.leftUnitor X) (CategoryTheory.Discrete.eqToIso ‚ãØ)","decl":"@[to_additive (attr := simps tensorObj_as leftUnitor rightUnitor associator) Discrete.addMonoidal]\ninstance Discrete.monoidal : MonoidalCategory (Discrete M) where\n  tensorUnit := Discrete.mk 1\n  tensorObj X Y := Discrete.mk (X.as * Y.as)\n  whiskerLeft X _ _ f := eqToHom (by dsimp; rw [eq_of_hom f])\n  whiskerRight f X := eqToHom (by dsimp; rw [eq_of_hom f])\n  tensorHom f g := eqToHom (by dsimp; rw [eq_of_hom f, eq_of_hom g])\n  leftUnitor X := Discrete.eqToIso (one_mul X.as)\n  rightUnitor X := Discrete.eqToIso (mul_one X.as)\n  associator _ _ _ := Discrete.eqToIso (mul_assoc _ _ _)\n\n"}
{"name":"CategoryTheory.Discrete.addMonoidal_tensorObj_as","module":"Mathlib.CategoryTheory.Monoidal.Discrete","initialProofState":"M : Type u\ninst‚úù : AddMonoid M\nX Y : CategoryTheory.Discrete M\n‚ä¢ Eq (CategoryTheory.MonoidalCategoryStruct.tensorObj X Y).as (HAdd.hAdd X.as Y.as)","decl":"@[to_additive (attr := simps tensorObj_as leftUnitor rightUnitor associator) Discrete.addMonoidal]\ninstance Discrete.monoidal : MonoidalCategory (Discrete M) where\n  tensorUnit := Discrete.mk 1\n  tensorObj X Y := Discrete.mk (X.as * Y.as)\n  whiskerLeft X _ _ f := eqToHom (by dsimp; rw [eq_of_hom f])\n  whiskerRight f X := eqToHom (by dsimp; rw [eq_of_hom f])\n  tensorHom f g := eqToHom (by dsimp; rw [eq_of_hom f, eq_of_hom g])\n  leftUnitor X := Discrete.eqToIso (one_mul X.as)\n  rightUnitor X := Discrete.eqToIso (mul_one X.as)\n  associator _ _ _ := Discrete.eqToIso (mul_assoc _ _ _)\n\n"}
{"name":"CategoryTheory.Discrete.monoidal_associator","module":"Mathlib.CategoryTheory.Monoidal.Discrete","initialProofState":"M : Type u\ninst‚úù : Monoid M\nx‚úù¬≤ x‚úù¬π x‚úù : CategoryTheory.Discrete M\n‚ä¢ Eq (CategoryTheory.MonoidalCategoryStruct.associator x‚úù¬≤ x‚úù¬π x‚úù) (CategoryTheory.Discrete.eqToIso ‚ãØ)","decl":"@[to_additive (attr := simps tensorObj_as leftUnitor rightUnitor associator) Discrete.addMonoidal]\ninstance Discrete.monoidal : MonoidalCategory (Discrete M) where\n  tensorUnit := Discrete.mk 1\n  tensorObj X Y := Discrete.mk (X.as * Y.as)\n  whiskerLeft X _ _ f := eqToHom (by dsimp; rw [eq_of_hom f])\n  whiskerRight f X := eqToHom (by dsimp; rw [eq_of_hom f])\n  tensorHom f g := eqToHom (by dsimp; rw [eq_of_hom f, eq_of_hom g])\n  leftUnitor X := Discrete.eqToIso (one_mul X.as)\n  rightUnitor X := Discrete.eqToIso (mul_one X.as)\n  associator _ _ _ := Discrete.eqToIso (mul_assoc _ _ _)\n\n"}
{"name":"CategoryTheory.Discrete.monoidal_tensorUnit_as","module":"Mathlib.CategoryTheory.Monoidal.Discrete","initialProofState":"M : Type u\ninst‚úù : Monoid M\n‚ä¢ Eq CategoryTheory.MonoidalCategoryStruct.tensorUnit.as 1","decl":"@[to_additive (attr := simp) Discrete.addMonoidal_tensorUnit_as]\nlemma Discrete.monoidal_tensorUnit_as : (ùüô_ (Discrete M)).as = 1 := rfl\n\n"}
{"name":"CategoryTheory.Discrete.addMonoidal_tensorUnit_as","module":"Mathlib.CategoryTheory.Monoidal.Discrete","initialProofState":"M : Type u\ninst‚úù : AddMonoid M\n‚ä¢ Eq CategoryTheory.MonoidalCategoryStruct.tensorUnit.as 0","decl":"@[to_additive (attr := simp) Discrete.addMonoidal_tensorUnit_as]\nlemma Discrete.monoidal_tensorUnit_as : (ùüô_ (Discrete M)).as = 1 := rfl\n\n"}
{"name":"CategoryTheory.Discrete.addMonoidalFunctor_obj","module":"Mathlib.CategoryTheory.Monoidal.Discrete","initialProofState":"M : Type u\ninst‚úù¬π : AddMonoid M\nN : Type u'\ninst‚úù : AddMonoid N\nF : AddMonoidHom M N\nm : M\n‚ä¢ Eq ((CategoryTheory.Discrete.addMonoidalFunctor F).obj { as := m }) { as := F m }","decl":"@[to_additive (attr := simp) Discrete.addMonoidalFunctor_obj]\nlemma Discrete.monoidalFunctor_obj (F : M ‚Üí* N) (m : M) :\n    (Discrete.monoidalFunctor F).obj (Discrete.mk m) = Discrete.mk (F m) := rfl\n\n"}
{"name":"CategoryTheory.Discrete.monoidalFunctor_obj","module":"Mathlib.CategoryTheory.Monoidal.Discrete","initialProofState":"M : Type u\ninst‚úù¬π : Monoid M\nN : Type u'\ninst‚úù : Monoid N\nF : MonoidHom M N\nm : M\n‚ä¢ Eq ((CategoryTheory.Discrete.monoidalFunctor F).obj { as := m }) { as := F m }","decl":"@[to_additive (attr := simp) Discrete.addMonoidalFunctor_obj]\nlemma Discrete.monoidalFunctor_obj (F : M ‚Üí* N) (m : M) :\n    (Discrete.monoidalFunctor F).obj (Discrete.mk m) = Discrete.mk (F m) := rfl\n\n"}
{"name":"CategoryTheory.Discrete.monoidalFunctor_Œµ","module":"Mathlib.CategoryTheory.Monoidal.Discrete","initialProofState":"M : Type u\ninst‚úù¬π : Monoid M\nN : Type u'\ninst‚úù : Monoid N\nF : MonoidHom M N\n‚ä¢ Eq (CategoryTheory.Functor.LaxMonoidal.Œµ (CategoryTheory.Discrete.monoidalFunctor F)) (CategoryTheory.Discrete.eqToHom ‚ãØ)","decl":"@[to_additive Discrete.addMonoidalFunctor_Œµ]\nlemma Discrete.monoidalFunctor_Œµ (F : M ‚Üí* N) :\n    Œµ (monoidalFunctor F) = Discrete.eqToHom F.map_one.symm := rfl\n\n"}
{"name":"CategoryTheory.Discrete.addMonoidalFunctor_Œµ","module":"Mathlib.CategoryTheory.Monoidal.Discrete","initialProofState":"M : Type u\ninst‚úù¬π : AddMonoid M\nN : Type u'\ninst‚úù : AddMonoid N\nF : AddMonoidHom M N\n‚ä¢ Eq (CategoryTheory.Functor.LaxMonoidal.Œµ (CategoryTheory.Discrete.addMonoidalFunctor F)) (CategoryTheory.Discrete.eqToHom ‚ãØ)","decl":"@[to_additive Discrete.addMonoidalFunctor_Œµ]\nlemma Discrete.monoidalFunctor_Œµ (F : M ‚Üí* N) :\n    Œµ (monoidalFunctor F) = Discrete.eqToHom F.map_one.symm := rfl\n\n"}
{"name":"CategoryTheory.Discrete.monoidalFunctor_Œ∑","module":"Mathlib.CategoryTheory.Monoidal.Discrete","initialProofState":"M : Type u\ninst‚úù¬π : Monoid M\nN : Type u'\ninst‚úù : Monoid N\nF : MonoidHom M N\n‚ä¢ Eq (CategoryTheory.Functor.OplaxMonoidal.Œ∑ (CategoryTheory.Discrete.monoidalFunctor F)) (CategoryTheory.Discrete.eqToHom ‚ãØ)","decl":"@[to_additive Discrete.addMonoidalFunctor_Œ∑]\nlemma Discrete.monoidalFunctor_Œ∑ (F : M ‚Üí* N) :\n    Œ∑ (monoidalFunctor F) = Discrete.eqToHom F.map_one := rfl\n\n"}
{"name":"CategoryTheory.Discrete.addMonoidalFunctor_Œ∑","module":"Mathlib.CategoryTheory.Monoidal.Discrete","initialProofState":"M : Type u\ninst‚úù¬π : AddMonoid M\nN : Type u'\ninst‚úù : AddMonoid N\nF : AddMonoidHom M N\n‚ä¢ Eq (CategoryTheory.Functor.OplaxMonoidal.Œ∑ (CategoryTheory.Discrete.addMonoidalFunctor F)) (CategoryTheory.Discrete.eqToHom ‚ãØ)","decl":"@[to_additive Discrete.addMonoidalFunctor_Œ∑]\nlemma Discrete.monoidalFunctor_Œ∑ (F : M ‚Üí* N) :\n    Œ∑ (monoidalFunctor F) = Discrete.eqToHom F.map_one := rfl\n\n"}
{"name":"CategoryTheory.Discrete.addMonoidalFunctor_Œº","module":"Mathlib.CategoryTheory.Monoidal.Discrete","initialProofState":"M : Type u\ninst‚úù¬π : AddMonoid M\nN : Type u'\ninst‚úù : AddMonoid N\nF : AddMonoidHom M N\nm‚ÇÅ m‚ÇÇ : CategoryTheory.Discrete M\n‚ä¢ Eq (CategoryTheory.Functor.LaxMonoidal.Œº (CategoryTheory.Discrete.addMonoidalFunctor F) m‚ÇÅ m‚ÇÇ) (CategoryTheory.Discrete.eqToHom ‚ãØ)","decl":"@[to_additive Discrete.addMonoidalFunctor_Œº]\nlemma Discrete.monoidalFunctor_Œº (F : M ‚Üí* N) (m‚ÇÅ m‚ÇÇ : Discrete M) :\n    Œº (monoidalFunctor F) m‚ÇÅ m‚ÇÇ = Discrete.eqToHom (F.map_mul _ _).symm := rfl\n\n"}
{"name":"CategoryTheory.Discrete.monoidalFunctor_Œº","module":"Mathlib.CategoryTheory.Monoidal.Discrete","initialProofState":"M : Type u\ninst‚úù¬π : Monoid M\nN : Type u'\ninst‚úù : Monoid N\nF : MonoidHom M N\nm‚ÇÅ m‚ÇÇ : CategoryTheory.Discrete M\n‚ä¢ Eq (CategoryTheory.Functor.LaxMonoidal.Œº (CategoryTheory.Discrete.monoidalFunctor F) m‚ÇÅ m‚ÇÇ) (CategoryTheory.Discrete.eqToHom ‚ãØ)","decl":"@[to_additive Discrete.addMonoidalFunctor_Œº]\nlemma Discrete.monoidalFunctor_Œº (F : M ‚Üí* N) (m‚ÇÅ m‚ÇÇ : Discrete M) :\n    Œº (monoidalFunctor F) m‚ÇÅ m‚ÇÇ = Discrete.eqToHom (F.map_mul _ _).symm := rfl\n\n"}
{"name":"CategoryTheory.Discrete.addMonoidalFunctor_Œ¥","module":"Mathlib.CategoryTheory.Monoidal.Discrete","initialProofState":"M : Type u\ninst‚úù¬π : AddMonoid M\nN : Type u'\ninst‚úù : AddMonoid N\nF : AddMonoidHom M N\nm‚ÇÅ m‚ÇÇ : CategoryTheory.Discrete M\n‚ä¢ Eq (CategoryTheory.Functor.OplaxMonoidal.Œ¥ (CategoryTheory.Discrete.addMonoidalFunctor F) m‚ÇÅ m‚ÇÇ) (CategoryTheory.Discrete.eqToHom ‚ãØ)","decl":"@[to_additive Discrete.addMonoidalFunctor_Œ¥]\nlemma Discrete.monoidalFunctor_Œ¥ (F : M ‚Üí* N) (m‚ÇÅ m‚ÇÇ : Discrete M) :\n    Œ¥ (monoidalFunctor F) m‚ÇÅ m‚ÇÇ = Discrete.eqToHom (F.map_mul _ _) := rfl\n\n"}
{"name":"CategoryTheory.Discrete.monoidalFunctor_Œ¥","module":"Mathlib.CategoryTheory.Monoidal.Discrete","initialProofState":"M : Type u\ninst‚úù¬π : Monoid M\nN : Type u'\ninst‚úù : Monoid N\nF : MonoidHom M N\nm‚ÇÅ m‚ÇÇ : CategoryTheory.Discrete M\n‚ä¢ Eq (CategoryTheory.Functor.OplaxMonoidal.Œ¥ (CategoryTheory.Discrete.monoidalFunctor F) m‚ÇÅ m‚ÇÇ) (CategoryTheory.Discrete.eqToHom ‚ãØ)","decl":"@[to_additive Discrete.addMonoidalFunctor_Œ¥]\nlemma Discrete.monoidalFunctor_Œ¥ (F : M ‚Üí* N) (m‚ÇÅ m‚ÇÇ : Discrete M) :\n    Œ¥ (monoidalFunctor F) m‚ÇÅ m‚ÇÇ = Discrete.eqToHom (F.map_mul _ _) := rfl\n\n"}
{"name":"CategoryTheory.Discrete.monoidalFunctorComp_isMonoidal","module":"Mathlib.CategoryTheory.Monoidal.Discrete","initialProofState":"M : Type u\ninst‚úù¬≤ : Monoid M\nN : Type u'\ninst‚úù¬π : Monoid N\nK : Type u\ninst‚úù : Monoid K\nF : MonoidHom M N\nG : MonoidHom N K\n‚ä¢ CategoryTheory.NatTrans.IsMonoidal (CategoryTheory.Discrete.monoidalFunctorComp F G).hom","decl":"@[to_additive Discrete.addMonoidalFunctorComp_isMonoidal]\ninstance Discrete.monoidalFunctorComp_isMonoidal (F : M ‚Üí* N) (G : N ‚Üí* K) :\n    NatTrans.IsMonoidal (Discrete.monoidalFunctorComp F G).hom where\n  unit := by\n    dsimp only [comp_Œµ, monoidalFunctorComp, Iso.refl, Discrete.monoidalFunctor_Œµ]\n    simp [eqToHom_map]\n  tensor _ _ := by\n    dsimp only [comp_Œº, monoidalFunctorComp, Iso.refl, Discrete.monoidalFunctor_Œº]\n    simp [eqToHom_map]\n\n"}
{"name":"CategoryTheory.Discrete.addMonoidalFunctorComp_isMonoidal","module":"Mathlib.CategoryTheory.Monoidal.Discrete","initialProofState":"M : Type u\ninst‚úù¬≤ : AddMonoid M\nN : Type u'\ninst‚úù¬π : AddMonoid N\nK : Type u\ninst‚úù : AddMonoid K\nF : AddMonoidHom M N\nG : AddMonoidHom N K\n‚ä¢ CategoryTheory.NatTrans.IsMonoidal (CategoryTheory.Discrete.addMonoidalFunctorComp F G).hom","decl":"@[to_additive Discrete.addMonoidalFunctorComp_isMonoidal]\ninstance Discrete.monoidalFunctorComp_isMonoidal (F : M ‚Üí* N) (G : N ‚Üí* K) :\n    NatTrans.IsMonoidal (Discrete.monoidalFunctorComp F G).hom where\n  unit := by\n    dsimp only [comp_Œµ, monoidalFunctorComp, Iso.refl, Discrete.monoidalFunctor_Œµ]\n    simp [eqToHom_map]\n  tensor _ _ := by\n    dsimp only [comp_Œº, monoidalFunctorComp, Iso.refl, Discrete.monoidalFunctor_Œº]\n    simp [eqToHom_map]\n\n"}
