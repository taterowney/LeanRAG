{"name":"MeasureTheory.innerRegularWRT_isCompact_closure_iff","module":"Mathlib.MeasureTheory.Measure.RegularityCompacts","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : R1Space α\n⊢ Iff (μ.InnerRegularWRT (Function.comp IsCompact closure) IsClosed) (μ.InnerRegularWRT IsCompact IsClosed)","decl":"theorem innerRegularWRT_isCompact_closure_iff [TopologicalSpace α] [R1Space α] :\n    μ.InnerRegularWRT (IsCompact ∘ closure) IsClosed ↔ μ.InnerRegularWRT IsCompact IsClosed := by\n  constructor <;> intro h A hA r hr\n  · rcases h hA r hr with ⟨K, ⟨hK1, hK2, hK3⟩⟩\n    exact ⟨closure K, closure_minimal hK1 hA, hK2, hK3.trans_le (measure_mono subset_closure)⟩\n  · rcases h hA r hr with ⟨K, ⟨hK1, hK2, hK3⟩⟩\n    refine ⟨closure K, closure_minimal hK1 hA, ?_, ?_⟩\n    · simpa only [closure_closure, Function.comp_apply] using hK2.closure\n    · exact hK3.trans_le (measure_mono subset_closure)\n\n"}
{"name":"MeasureTheory.innerRegularWRT_isCompact_isClosed_iff_innerRegularWRT_isCompact_closure","module":"Mathlib.MeasureTheory.Measure.RegularityCompacts","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : R1Space α\n⊢ Iff (μ.InnerRegularWRT (fun s => And (IsCompact s) (IsClosed s)) IsClosed) (μ.InnerRegularWRT (Function.comp IsCompact closure) IsClosed)","decl":"lemma innerRegularWRT_isCompact_isClosed_iff_innerRegularWRT_isCompact_closure\n    [TopologicalSpace α] [R1Space α] :\n    μ.InnerRegularWRT (fun s ↦ IsCompact s ∧ IsClosed s) IsClosed\n      ↔ μ.InnerRegularWRT (IsCompact ∘ closure) IsClosed := by\n  constructor <;> intro h A hA r hr\n  · obtain ⟨K, hK1, ⟨hK2, _⟩, hK4⟩ := h hA r hr\n    refine ⟨K, hK1, ?_, hK4⟩\n    simp only [closure_closure, Function.comp_apply]\n    exact hK2.closure\n  · obtain ⟨K, hK1, hK2, hK3⟩ := h hA r hr\n    refine ⟨closure K, closure_minimal hK1 hA, ?_, ?_⟩\n    · simpa only [isClosed_closure, and_true]\n    · exact hK3.trans_le (measure_mono subset_closure)\n\n"}
{"name":"MeasureTheory.innerRegularWRT_isCompact_isClosed_iff","module":"Mathlib.MeasureTheory.Measure.RegularityCompacts","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : R1Space α\n⊢ Iff (μ.InnerRegularWRT (fun s => And (IsCompact s) (IsClosed s)) IsClosed) (μ.InnerRegularWRT IsCompact IsClosed)","decl":"lemma innerRegularWRT_isCompact_isClosed_iff [TopologicalSpace α] [R1Space α] :\n    μ.InnerRegularWRT (fun s ↦ IsCompact s ∧ IsClosed s) IsClosed\n      ↔ μ.InnerRegularWRT IsCompact IsClosed :=\n  innerRegularWRT_isCompact_isClosed_iff_innerRegularWRT_isCompact_closure.trans\n    innerRegularWRT_isCompact_closure_iff\n\n"}
{"name":"MeasureTheory.innerRegularWRT_of_exists_compl_lt","module":"Mathlib.MeasureTheory.Measure.RegularityCompacts","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\np q : Set α → Prop\nhpq : ∀ (A B : Set α), p A → q B → p (Inter.inter A B)\nhμ : ∀ (ε : ENNReal), LT.lt 0 ε → Exists fun K => And (p K) (LT.lt (μ (HasCompl.compl K)) ε)\n⊢ μ.InnerRegularWRT p q","decl":"/--\nIf predicate `p` is preserved under intersections with sets satisfying predicate `q`, and sets\nsatisfying `p` cover the space arbitrarily well, then `μ` is inner regular with respect to\npredicates `p` and `q`.\n-/\ntheorem innerRegularWRT_of_exists_compl_lt {p q : Set α → Prop} (hpq : ∀ A B, p A → q B → p (A ∩ B))\n    (hμ : ∀ ε, 0 < ε → ∃ K, p K ∧ μ Kᶜ < ε) :\n    μ.InnerRegularWRT p q := by\n  intro A hA r hr\n  obtain ⟨K, hK, hK_subset, h_lt⟩ : ∃ K, p K ∧ K ⊆ A ∧ μ (A \\ K) < μ A - r := by\n    obtain ⟨K', hpK', hK'_lt⟩ := hμ (μ A - r) (tsub_pos_of_lt hr)\n    refine ⟨K' ∩ A, hpq K' A hpK' hA, inter_subset_right, ?_⟩\n    · refine (measure_mono fun x ↦ ?_).trans_lt hK'_lt\n      simp only [diff_inter_self_eq_diff, mem_diff, mem_compl_iff, and_imp, imp_self, imp_true_iff]\n  refine ⟨K, hK_subset, hK, ?_⟩\n  have h_lt' : μ A - μ K < μ A - r := le_measure_diff.trans_lt h_lt\n  exact lt_of_tsub_lt_tsub_left h_lt'\n\n"}
{"name":"MeasureTheory.innerRegularWRT_isCompact_closure_of_univ","module":"Mathlib.MeasureTheory.Measure.RegularityCompacts","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : TopologicalSpace α\nhμ : ∀ (ε : ENNReal), LT.lt 0 ε → Exists fun K => And (IsCompact (closure K)) (LT.lt (μ (HasCompl.compl K)) ε)\n⊢ μ.InnerRegularWRT (Function.comp IsCompact closure) IsClosed","decl":"theorem innerRegularWRT_isCompact_closure_of_univ [TopologicalSpace α]\n    (hμ : ∀ ε, 0 < ε → ∃ K, IsCompact (closure K) ∧ μ (Kᶜ) < ε) :\n    μ.InnerRegularWRT (IsCompact ∘ closure) IsClosed := by\n  refine innerRegularWRT_of_exists_compl_lt (fun s t hs ht ↦ ?_) hμ\n  have : IsCompact (closure s ∩ t) := hs.inter_right ht\n  refine this.of_isClosed_subset isClosed_closure ?_\n  refine (closure_inter_subset_inter_closure _ _).trans_eq ?_\n  rw [IsClosed.closure_eq ht]\n\n"}
{"name":"MeasureTheory.exists_isCompact_closure_measure_compl_lt","module":"Mathlib.MeasureTheory.Measure.RegularityCompacts","initialProofState":"α : Type u_1\ninst✝⁶ : MeasurableSpace α\ninst✝⁵ : UniformSpace α\ninst✝⁴ : CompleteSpace α\ninst✝³ : SecondCountableTopology α\ninst✝² : (uniformity α).IsCountablyGenerated\ninst✝¹ : OpensMeasurableSpace α\nP : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsFiniteMeasure P\nε : ENNReal\nhε : LT.lt 0 ε\n⊢ Exists fun K => And (IsCompact (closure K)) (LT.lt (P (HasCompl.compl K)) ε)","decl":"theorem exists_isCompact_closure_measure_compl_lt [UniformSpace α] [CompleteSpace α]\n    [SecondCountableTopology α] [(uniformity α).IsCountablyGenerated]\n    [OpensMeasurableSpace α] (P : Measure α) [IsFiniteMeasure P] (ε : ℝ≥0∞) (hε : 0 < ε) :\n    ∃ K, IsCompact (closure K) ∧ P Kᶜ < ε := by\n  /-\n  If α is empty, the result is trivial.\n\n  Otherwise, fix a dense sequence `seq` and an antitone basis `t` of entourages. We find a sequence\n  of natural numbers `u n`, such that `interUnionBalls seq u t`, which is the intersection over\n  `n` of the `t n`-neighborhood of `seq 1, ..., seq (u n)`, covers the space arbitrarily well.\n  -/\n  cases isEmpty_or_nonempty α\n  case inl =>\n    refine ⟨∅, by simp, ?_⟩\n    rw [← Set.univ_eq_empty_iff.mpr]\n    · simpa only [compl_univ, measure_empty, ENNReal.coe_pos] using hε\n    · assumption\n  case inr =>\n    let seq := TopologicalSpace.denseSeq α\n    have hseq_dense : DenseRange seq := TopologicalSpace.denseRange_denseSeq α\n    obtain ⟨t : ℕ → Set (α × α),\n        hto : ∀ i, t i ∈ (uniformity α).sets ∧ IsOpen (t i) ∧ SymmetricRel (t i),\n        h_basis : (uniformity α).HasAntitoneBasis t⟩ :=\n      (@uniformity_hasBasis_open_symmetric α _).exists_antitone_subbasis\n    let f : ℕ → ℕ → Set α := fun n m ↦ UniformSpace.ball (seq m) (t n)\n    have h_univ n : (⋃ m, f n m) = univ := hseq_dense.iUnion_uniformity_ball (hto n).1\n    have h3 n (ε : ℝ≥0∞) (hε : 0 < ε) : ∃ m, P (⋂ m' ≤ m, (f n m')ᶜ) < ε := by\n      refine exists_measure_iInter_lt (fun m ↦ ?_) hε ⟨0, measure_ne_top P _⟩ ?_\n      · exact (measurable_prod_mk_left (IsOpen.measurableSet (hto n).2.1)).compl.nullMeasurableSet\n      · rw [← compl_iUnion, h_univ, compl_univ]\n    choose! s' s'bound using h3\n    rcases ENNReal.exists_pos_sum_of_countable' (ne_of_gt hε) ℕ with ⟨δ, hδ1, hδ2⟩\n    classical\n    let u : ℕ → ℕ := fun n ↦ s' n (δ n)\n    refine ⟨interUnionBalls seq u t, isCompact_closure_interUnionBalls h_basis.toHasBasis seq u, ?_⟩\n    rw [interUnionBalls, Set.compl_iInter]\n    refine ((measure_iUnion_le _).trans ?_).trans_lt hδ2\n    refine ENNReal.tsum_le_tsum (fun n ↦ ?_)\n    have h'' n : Prod.swap ⁻¹' t n = t n := SymmetricRel.eq (hto n).2.2\n    simp only [h'', compl_iUnion, ge_iff_le]\n    exact (s'bound n (δ n) (hδ1 n)).le\n\n"}
{"name":"MeasureTheory.innerRegularWRT_isCompact_closure","module":"Mathlib.MeasureTheory.Measure.RegularityCompacts","initialProofState":"α : Type u_1\ninst✝⁶ : MeasurableSpace α\ninst✝⁵ : UniformSpace α\ninst✝⁴ : CompleteSpace α\ninst✝³ : SecondCountableTopology α\ninst✝² : (uniformity α).IsCountablyGenerated\ninst✝¹ : OpensMeasurableSpace α\nP : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsFiniteMeasure P\n⊢ P.InnerRegularWRT (Function.comp IsCompact closure) IsClosed","decl":"theorem innerRegularWRT_isCompact_closure [UniformSpace α] [CompleteSpace α]\n    [SecondCountableTopology α] [(uniformity α).IsCountablyGenerated]\n    [OpensMeasurableSpace α] (P : Measure α) [IsFiniteMeasure P] :\n    P.InnerRegularWRT (IsCompact ∘ closure) IsClosed :=\n  innerRegularWRT_isCompact_closure_of_univ\n    (exists_isCompact_closure_measure_compl_lt P)\n\n"}
{"name":"MeasureTheory.innerRegularWRT_isCompact_isClosed","module":"Mathlib.MeasureTheory.Measure.RegularityCompacts","initialProofState":"α : Type u_1\ninst✝⁶ : MeasurableSpace α\ninst✝⁵ : UniformSpace α\ninst✝⁴ : CompleteSpace α\ninst✝³ : SecondCountableTopology α\ninst✝² : (uniformity α).IsCountablyGenerated\ninst✝¹ : OpensMeasurableSpace α\nP : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsFiniteMeasure P\n⊢ P.InnerRegularWRT (fun s => And (IsCompact s) (IsClosed s)) IsClosed","decl":"theorem innerRegularWRT_isCompact_isClosed [UniformSpace α] [CompleteSpace α]\n    [SecondCountableTopology α] [(uniformity α).IsCountablyGenerated]\n    [OpensMeasurableSpace α] (P : Measure α) [IsFiniteMeasure P] :\n    P.InnerRegularWRT (fun s ↦ IsCompact s ∧ IsClosed s) IsClosed := by\n  rw [innerRegularWRT_isCompact_isClosed_iff_innerRegularWRT_isCompact_closure]\n  exact innerRegularWRT_isCompact_closure P\n\n"}
{"name":"MeasureTheory.innerRegularWRT_isCompact","module":"Mathlib.MeasureTheory.Measure.RegularityCompacts","initialProofState":"α : Type u_1\ninst✝⁶ : MeasurableSpace α\ninst✝⁵ : UniformSpace α\ninst✝⁴ : CompleteSpace α\ninst✝³ : SecondCountableTopology α\ninst✝² : (uniformity α).IsCountablyGenerated\ninst✝¹ : OpensMeasurableSpace α\nP : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsFiniteMeasure P\n⊢ P.InnerRegularWRT IsCompact IsClosed","decl":"theorem innerRegularWRT_isCompact [UniformSpace α] [CompleteSpace α]\n    [SecondCountableTopology α] [(uniformity α).IsCountablyGenerated]\n    [OpensMeasurableSpace α] (P : Measure α) [IsFiniteMeasure P] :\n    P.InnerRegularWRT IsCompact IsClosed := by\n  rw [← innerRegularWRT_isCompact_closure_iff]\n  exact innerRegularWRT_isCompact_closure P\n\n"}
{"name":"MeasureTheory.innerRegularWRT_isCompact_isClosed_isOpen","module":"Mathlib.MeasureTheory.Measure.RegularityCompacts","initialProofState":"α : Type u_1\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : PseudoEMetricSpace α\ninst✝³ : CompleteSpace α\ninst✝² : SecondCountableTopology α\ninst✝¹ : OpensMeasurableSpace α\nP : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsFiniteMeasure P\n⊢ P.InnerRegularWRT (fun s => And (IsCompact s) (IsClosed s)) IsOpen","decl":"theorem innerRegularWRT_isCompact_isClosed_isOpen [PseudoEMetricSpace α]\n    [CompleteSpace α] [SecondCountableTopology α] [OpensMeasurableSpace α]\n    (P : Measure α) [IsFiniteMeasure P] :\n    P.InnerRegularWRT (fun s ↦ IsCompact s ∧ IsClosed s) IsOpen :=\n  (innerRegularWRT_isCompact_isClosed P).trans\n    (Measure.InnerRegularWRT.of_pseudoMetrizableSpace P)\n\n"}
{"name":"MeasureTheory.innerRegularWRT_isCompact_isOpen","module":"Mathlib.MeasureTheory.Measure.RegularityCompacts","initialProofState":"α : Type u_1\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : PseudoEMetricSpace α\ninst✝³ : CompleteSpace α\ninst✝² : SecondCountableTopology α\ninst✝¹ : OpensMeasurableSpace α\nP : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsFiniteMeasure P\n⊢ P.InnerRegularWRT IsCompact IsOpen","decl":"theorem innerRegularWRT_isCompact_isOpen [PseudoEMetricSpace α]\n    [CompleteSpace α] [SecondCountableTopology α] [OpensMeasurableSpace α]\n    (P : Measure α) [IsFiniteMeasure P] :\n    P.InnerRegularWRT IsCompact IsOpen :=\n  (innerRegularWRT_isCompact P).trans\n    (Measure.InnerRegularWRT.of_pseudoMetrizableSpace P)\n\n"}
{"name":"MeasureTheory.InnerRegular_of_pseudoEMetricSpace_completeSpace_secondCountable","module":"Mathlib.MeasureTheory.Measure.RegularityCompacts","initialProofState":"α : Type u_1\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : PseudoEMetricSpace α\ninst✝³ : CompleteSpace α\ninst✝² : SecondCountableTopology α\ninst✝¹ : BorelSpace α\nP : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsFiniteMeasure P\n⊢ P.InnerRegular","decl":"/--\nA finite measure `μ` on a `PseudoEMetricSpace E` and `CompleteSpace E` with\n`SecondCountableTopology E` is inner regular. In other words, a finite measure\non such a space is a tight measure.\n-/\ninstance InnerRegular_of_pseudoEMetricSpace_completeSpace_secondCountable [PseudoEMetricSpace α]\n    [CompleteSpace α] [SecondCountableTopology α] [BorelSpace α]\n    (P : Measure α) [IsFiniteMeasure P] :\n    P.InnerRegular := by\n  refine @Measure.InnerRegularCompactLTTop.instInnerRegularOfSigmaFinite _ _ _ _\n      ⟨Measure.InnerRegularWRT.measurableSet_of_isOpen ?_ ?_⟩ _\n  · exact innerRegularWRT_isCompact_isOpen P\n  · exact fun s t hs_compact ht_open ↦ hs_compact.inter_right ht_open.isClosed_compl\n\n"}
{"name":"MeasureTheory.InnerRegular_of_polishSpace","module":"Mathlib.MeasureTheory.Measure.RegularityCompacts","initialProofState":"α : Type u_1\ninst✝⁴ : MeasurableSpace α\ninst✝³ : TopologicalSpace α\ninst✝² : PolishSpace α\ninst✝¹ : BorelSpace α\nP : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsFiniteMeasure P\n⊢ P.InnerRegular","decl":"/--\nA special case of `innerRegular_of_pseudoEMetricSpace_completeSpace_secondCountable` for Polish\nspaces: A finite measure on a Polish space is a tight measure.\n-/\ninstance InnerRegular_of_polishSpace [TopologicalSpace α]\n    [PolishSpace α] [BorelSpace α] (P : Measure α) [IsFiniteMeasure P] :\n    P.InnerRegular := by\n  letI := upgradePolishSpace α\n  exact InnerRegular_of_pseudoEMetricSpace_completeSpace_secondCountable P\n\n"}
{"name":"MeasureTheory.InnerRegularCompactLTTop_of_pseudoEMetricSpace_completeSpace_secondCountable","module":"Mathlib.MeasureTheory.Measure.RegularityCompacts","initialProofState":"α : Type u_1\ninst✝⁴ : MeasurableSpace α\ninst✝³ : PseudoEMetricSpace α\ninst✝² : CompleteSpace α\ninst✝¹ : SecondCountableTopology α\ninst✝ : BorelSpace α\nμ : MeasureTheory.Measure α\n⊢ μ.InnerRegularCompactLTTop","decl":"/--\nA measure `μ` on a `PseudoEMetricSpace E` and `CompleteSpace E` with `SecondCountableTopology E`\nis inner regular for finite measure sets with respect to compact sets.\n-/\ninstance InnerRegularCompactLTTop_of_pseudoEMetricSpace_completeSpace_secondCountable\n    [PseudoEMetricSpace α] [CompleteSpace α] [SecondCountableTopology α] [BorelSpace α]\n    (μ : Measure α) :\n    μ.InnerRegularCompactLTTop := by\n  constructor; intro A ⟨hA1, hA2⟩ r hr\n  have IRC : Measure.InnerRegularCompactLTTop (μ.restrict A) := by\n    exact @Measure.InnerRegular.instInnerRegularCompactLTTop _ _ _ _\n        (@InnerRegular_of_pseudoEMetricSpace_completeSpace_secondCountable _ _ _ _ _ _\n        (μ.restrict A) (@Restrict.isFiniteMeasure _ _ _ μ (fact_iff.mpr hA2.lt_top)))\n  have hA2' : (μ.restrict A) A ≠ ⊤ := by\n    rwa [Measure.restrict_apply_self]\n  have hr' : r < μ.restrict A A := by\n    rwa [Measure.restrict_apply_self]\n  obtain ⟨K, ⟨hK1, hK2, hK3⟩⟩ := @MeasurableSet.exists_lt_isCompact_of_ne_top\n      _ _ (μ.restrict A) _ IRC _ hA1 hA2' r hr'\n  use K, hK1, hK2\n  rwa [Measure.restrict_eq_self μ hK1] at hK3\n\n"}
{"name":"MeasureTheory.InnerRegularCompactLTTop_of_polishSpace","module":"Mathlib.MeasureTheory.Measure.RegularityCompacts","initialProofState":"α : Type u_1\ninst✝³ : MeasurableSpace α\ninst✝² : TopologicalSpace α\ninst✝¹ : PolishSpace α\ninst✝ : BorelSpace α\nμ : MeasureTheory.Measure α\n⊢ μ.InnerRegularCompactLTTop","decl":"/--\nA special case of `innerRegularCompactLTTop_of_pseudoEMetricSpace_completeSpace_secondCountable`\nfor Polish spaces: A measure `μ` on a Polish space inner regular for finite measure sets with\nrespect to compact sets.\n-/\ninstance InnerRegularCompactLTTop_of_polishSpace\n    [TopologicalSpace α] [PolishSpace α] [BorelSpace α] (μ : Measure α) :\n    μ.InnerRegularCompactLTTop := by\n  letI := upgradePolishSpace α\n  exact InnerRegularCompactLTTop_of_pseudoEMetricSpace_completeSpace_secondCountable μ\n\n"}
{"name":"MeasureTheory.innerRegular_isCompact_isClosed_measurableSet_of_finite","module":"Mathlib.MeasureTheory.Measure.RegularityCompacts","initialProofState":"α : Type u_1\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : PseudoEMetricSpace α\ninst✝³ : CompleteSpace α\ninst✝² : SecondCountableTopology α\ninst✝¹ : BorelSpace α\nP : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsFiniteMeasure P\n⊢ P.InnerRegularWRT (fun s => And (IsCompact s) (IsClosed s)) MeasurableSet","decl":"theorem innerRegular_isCompact_isClosed_measurableSet_of_finite [PseudoEMetricSpace α]\n    [CompleteSpace α] [SecondCountableTopology α] [BorelSpace α]\n    (P : Measure α) [IsFiniteMeasure P] :\n    P.InnerRegularWRT (fun s ↦ IsCompact s ∧ IsClosed s) MeasurableSet := by\n  suffices P.InnerRegularWRT (fun s ↦ IsCompact s ∧ IsClosed s)\n      fun s ↦ MeasurableSet s ∧ P s ≠ ∞ by\n    convert this\n    simp only [eq_iff_iff, iff_self_and]\n    exact fun _ ↦ measure_ne_top P _\n  refine Measure.InnerRegularWRT.measurableSet_of_isOpen ?_ ?_\n  · exact innerRegularWRT_isCompact_isClosed_isOpen P\n  · rintro s t ⟨hs_compact, hs_closed⟩ ht_open\n    rw [diff_eq]\n    exact ⟨hs_compact.inter_right ht_open.isClosed_compl,\n      hs_closed.inter (isClosed_compl_iff.mpr ht_open)⟩\n\n"}
{"name":"MeasureTheory.PolishSpace.innerRegular_isCompact_isClosed_measurableSet","module":"Mathlib.MeasureTheory.Measure.RegularityCompacts","initialProofState":"α : Type u_1\ninst✝⁴ : MeasurableSpace α\ninst✝³ : TopologicalSpace α\ninst✝² : PolishSpace α\ninst✝¹ : BorelSpace α\nP : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsFiniteMeasure P\n⊢ P.InnerRegularWRT (fun s => And (IsCompact s) (IsClosed s)) MeasurableSet","decl":"/--\nOn a Polish space, any finite measure is regular with respect to compact and closed sets. In\nparticular, a finite measure on a Polish space is a tight measure.\n-/\ntheorem PolishSpace.innerRegular_isCompact_isClosed_measurableSet [TopologicalSpace α]\n    [PolishSpace α] [BorelSpace α] (P : Measure α) [IsFiniteMeasure P] :\n    P.InnerRegularWRT (fun s ↦ IsCompact s ∧ IsClosed s) MeasurableSet := by\n  letI := upgradePolishSpace α\n  exact innerRegular_isCompact_isClosed_measurableSet_of_finite P\n\n"}
