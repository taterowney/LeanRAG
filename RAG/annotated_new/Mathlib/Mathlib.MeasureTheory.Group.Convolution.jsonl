{"name":"MeasureTheory.Measure.dirac_zero_mconv","module":"Mathlib.MeasureTheory.Group.Convolution","initialProofState":"M : Type u_1\ninst✝³ : AddMonoid M\ninst✝² : MeasurableSpace M\ninst✝¹ : MeasurableAdd₂ M\nμ : MeasureTheory.Measure M\ninst✝ : MeasureTheory.SFinite μ\n⊢ Eq ((MeasureTheory.Measure.dirac 0).conv μ) μ","decl":"/-- Convolution of the dirac measure at 1 with a measure μ returns μ. -/\n@[to_additive (attr := simp)]\ntheorem dirac_one_mconv [MeasurableMul₂ M] (μ : Measure M) [SFinite μ] :\n    (Measure.dirac 1) ∗ μ = μ := by\n  unfold mconv\n  rw [MeasureTheory.Measure.dirac_prod, map_map (by fun_prop)]\n  · simp only [Function.comp_def, one_mul, map_id']\n  fun_prop\n\n"}
{"name":"MeasureTheory.Measure.dirac_one_mconv","module":"Mathlib.MeasureTheory.Group.Convolution","initialProofState":"M : Type u_1\ninst✝³ : Monoid M\ninst✝² : MeasurableSpace M\ninst✝¹ : MeasurableMul₂ M\nμ : MeasureTheory.Measure M\ninst✝ : MeasureTheory.SFinite μ\n⊢ Eq ((MeasureTheory.Measure.dirac 1).mconv μ) μ","decl":"/-- Convolution of the dirac measure at 1 with a measure μ returns μ. -/\n@[to_additive (attr := simp)]\ntheorem dirac_one_mconv [MeasurableMul₂ M] (μ : Measure M) [SFinite μ] :\n    (Measure.dirac 1) ∗ μ = μ := by\n  unfold mconv\n  rw [MeasureTheory.Measure.dirac_prod, map_map (by fun_prop)]\n  · simp only [Function.comp_def, one_mul, map_id']\n  fun_prop\n\n"}
{"name":"MeasureTheory.Measure.mconv_dirac_one","module":"Mathlib.MeasureTheory.Group.Convolution","initialProofState":"M : Type u_1\ninst✝³ : Monoid M\ninst✝² : MeasurableSpace M\ninst✝¹ : MeasurableMul₂ M\nμ : MeasureTheory.Measure M\ninst✝ : MeasureTheory.SFinite μ\n⊢ Eq (μ.mconv (MeasureTheory.Measure.dirac 1)) μ","decl":"/-- Convolution of a measure μ with the dirac measure at 1 returns μ. -/\n@[to_additive (attr := simp)]\ntheorem mconv_dirac_one [MeasurableMul₂ M]\n    (μ : Measure M) [SFinite μ] : μ ∗ (Measure.dirac 1) = μ := by\n  unfold mconv\n  rw [MeasureTheory.Measure.prod_dirac, map_map (by fun_prop)]\n  · simp only [Function.comp_def, mul_one, map_id']\n  fun_prop\n\n"}
{"name":"MeasureTheory.Measure.mconv_dirac_zero","module":"Mathlib.MeasureTheory.Group.Convolution","initialProofState":"M : Type u_1\ninst✝³ : AddMonoid M\ninst✝² : MeasurableSpace M\ninst✝¹ : MeasurableAdd₂ M\nμ : MeasureTheory.Measure M\ninst✝ : MeasureTheory.SFinite μ\n⊢ Eq (μ.conv (MeasureTheory.Measure.dirac 0)) μ","decl":"/-- Convolution of a measure μ with the dirac measure at 1 returns μ. -/\n@[to_additive (attr := simp)]\ntheorem mconv_dirac_one [MeasurableMul₂ M]\n    (μ : Measure M) [SFinite μ] : μ ∗ (Measure.dirac 1) = μ := by\n  unfold mconv\n  rw [MeasureTheory.Measure.prod_dirac, map_map (by fun_prop)]\n  · simp only [Function.comp_def, mul_one, map_id']\n  fun_prop\n\n"}
{"name":"MeasureTheory.Measure.mconv_zero","module":"Mathlib.MeasureTheory.Group.Convolution","initialProofState":"M : Type u_1\ninst✝¹ : Monoid M\ninst✝ : MeasurableSpace M\nμ : MeasureTheory.Measure M\n⊢ Eq (MeasureTheory.Measure.mconv 0 μ) 0","decl":"/-- Convolution of the zero measure with a measure μ returns the zero measure. -/\n@[to_additive (attr := simp) conv_zero]\ntheorem mconv_zero (μ : Measure M) : (0 : Measure M) ∗ μ = (0 : Measure M) := by\n  unfold mconv\n  simp\n\n"}
{"name":"MeasureTheory.Measure.conv_zero","module":"Mathlib.MeasureTheory.Group.Convolution","initialProofState":"M : Type u_1\ninst✝¹ : AddMonoid M\ninst✝ : MeasurableSpace M\nμ : MeasureTheory.Measure M\n⊢ Eq (MeasureTheory.Measure.conv 0 μ) 0","decl":"/-- Convolution of the zero measure with a measure μ returns the zero measure. -/\n@[to_additive (attr := simp) conv_zero]\ntheorem mconv_zero (μ : Measure M) : (0 : Measure M) ∗ μ = (0 : Measure M) := by\n  unfold mconv\n  simp\n\n"}
{"name":"MeasureTheory.Measure.zero_conv","module":"Mathlib.MeasureTheory.Group.Convolution","initialProofState":"M : Type u_1\ninst✝¹ : AddMonoid M\ninst✝ : MeasurableSpace M\nμ : MeasureTheory.Measure M\n⊢ Eq (μ.conv 0) 0","decl":"/-- Convolution of a measure μ with the zero measure returns the zero measure. -/\n@[to_additive (attr := simp) zero_conv]\ntheorem zero_mconv (μ : Measure M) : μ ∗ (0 : Measure M) = (0 : Measure M) := by\n  unfold mconv\n  simp\n\n"}
{"name":"MeasureTheory.Measure.zero_mconv","module":"Mathlib.MeasureTheory.Group.Convolution","initialProofState":"M : Type u_1\ninst✝¹ : Monoid M\ninst✝ : MeasurableSpace M\nμ : MeasureTheory.Measure M\n⊢ Eq (μ.mconv 0) 0","decl":"/-- Convolution of a measure μ with the zero measure returns the zero measure. -/\n@[to_additive (attr := simp) zero_conv]\ntheorem zero_mconv (μ : Measure M) : μ ∗ (0 : Measure M) = (0 : Measure M) := by\n  unfold mconv\n  simp\n\n"}
{"name":"MeasureTheory.Measure.mconv_add","module":"Mathlib.MeasureTheory.Group.Convolution","initialProofState":"M : Type u_1\ninst✝⁵ : Monoid M\ninst✝⁴ : MeasurableSpace M\ninst✝³ : MeasurableMul₂ M\nμ ν ρ : MeasureTheory.Measure M\ninst✝² : MeasureTheory.SFinite μ\ninst✝¹ : MeasureTheory.SFinite ν\ninst✝ : MeasureTheory.SFinite ρ\n⊢ Eq (μ.mconv (HAdd.hAdd ν ρ)) (HAdd.hAdd (μ.mconv ν) (μ.mconv ρ))","decl":"@[to_additive conv_add]\ntheorem mconv_add [MeasurableMul₂ M] (μ : Measure M) (ν : Measure M) (ρ : Measure M) [SFinite μ]\n    [SFinite ν] [SFinite ρ] : μ ∗ (ν + ρ) = μ ∗ ν + μ ∗ ρ := by\n  unfold mconv\n  rw [prod_add, map_add]\n  fun_prop\n\n"}
{"name":"MeasureTheory.Measure.conv_add","module":"Mathlib.MeasureTheory.Group.Convolution","initialProofState":"M : Type u_1\ninst✝⁵ : AddMonoid M\ninst✝⁴ : MeasurableSpace M\ninst✝³ : MeasurableAdd₂ M\nμ ν ρ : MeasureTheory.Measure M\ninst✝² : MeasureTheory.SFinite μ\ninst✝¹ : MeasureTheory.SFinite ν\ninst✝ : MeasureTheory.SFinite ρ\n⊢ Eq (μ.conv (HAdd.hAdd ν ρ)) (HAdd.hAdd (μ.conv ν) (μ.conv ρ))","decl":"@[to_additive conv_add]\ntheorem mconv_add [MeasurableMul₂ M] (μ : Measure M) (ν : Measure M) (ρ : Measure M) [SFinite μ]\n    [SFinite ν] [SFinite ρ] : μ ∗ (ν + ρ) = μ ∗ ν + μ ∗ ρ := by\n  unfold mconv\n  rw [prod_add, map_add]\n  fun_prop\n\n"}
{"name":"MeasureTheory.Measure.add_mconv","module":"Mathlib.MeasureTheory.Group.Convolution","initialProofState":"M : Type u_1\ninst✝⁵ : Monoid M\ninst✝⁴ : MeasurableSpace M\ninst✝³ : MeasurableMul₂ M\nμ ν ρ : MeasureTheory.Measure M\ninst✝² : MeasureTheory.SFinite μ\ninst✝¹ : MeasureTheory.SFinite ν\ninst✝ : MeasureTheory.SFinite ρ\n⊢ Eq ((HAdd.hAdd μ ν).mconv ρ) (HAdd.hAdd (μ.mconv ρ) (ν.mconv ρ))","decl":"@[to_additive add_conv]\ntheorem add_mconv [MeasurableMul₂ M] (μ : Measure M) (ν : Measure M) (ρ : Measure M) [SFinite μ]\n    [SFinite ν] [SFinite ρ] : (μ + ν) ∗ ρ = μ ∗ ρ + ν ∗ ρ := by\n  unfold mconv\n  rw [add_prod, map_add]\n  fun_prop\n\n"}
{"name":"MeasureTheory.Measure.add_conv","module":"Mathlib.MeasureTheory.Group.Convolution","initialProofState":"M : Type u_1\ninst✝⁵ : AddMonoid M\ninst✝⁴ : MeasurableSpace M\ninst✝³ : MeasurableAdd₂ M\nμ ν ρ : MeasureTheory.Measure M\ninst✝² : MeasureTheory.SFinite μ\ninst✝¹ : MeasureTheory.SFinite ν\ninst✝ : MeasureTheory.SFinite ρ\n⊢ Eq ((HAdd.hAdd μ ν).conv ρ) (HAdd.hAdd (μ.conv ρ) (ν.conv ρ))","decl":"@[to_additive add_conv]\ntheorem add_mconv [MeasurableMul₂ M] (μ : Measure M) (ν : Measure M) (ρ : Measure M) [SFinite μ]\n    [SFinite ν] [SFinite ρ] : (μ + ν) ∗ ρ = μ ∗ ρ + ν ∗ ρ := by\n  unfold mconv\n  rw [add_prod, map_add]\n  fun_prop\n\n"}
{"name":"MeasureTheory.Measure.conv_comm","module":"Mathlib.MeasureTheory.Group.Convolution","initialProofState":"M : Type u_2\ninst✝⁴ : AddCommMonoid M\ninst✝³ : MeasurableSpace M\ninst✝² : MeasurableAdd₂ M\nμ ν : MeasureTheory.Measure M\ninst✝¹ : MeasureTheory.SFinite μ\ninst✝ : MeasureTheory.SFinite ν\n⊢ Eq (μ.conv ν) (ν.conv μ)","decl":"/-- To get commutativity, we need the underlying multiplication to be commutative. -/\n@[to_additive conv_comm]\ntheorem mconv_comm {M : Type*} [CommMonoid M] [MeasurableSpace M] [MeasurableMul₂ M] (μ : Measure M)\n    (ν : Measure M) [SFinite μ] [SFinite ν] : μ ∗ ν = ν ∗ μ := by\n  unfold mconv\n  rw [← prod_swap, map_map (by fun_prop)]\n  · simp [Function.comp_def, mul_comm]\n  fun_prop\n\n"}
{"name":"MeasureTheory.Measure.mconv_comm","module":"Mathlib.MeasureTheory.Group.Convolution","initialProofState":"M : Type u_2\ninst✝⁴ : CommMonoid M\ninst✝³ : MeasurableSpace M\ninst✝² : MeasurableMul₂ M\nμ ν : MeasureTheory.Measure M\ninst✝¹ : MeasureTheory.SFinite μ\ninst✝ : MeasureTheory.SFinite ν\n⊢ Eq (μ.mconv ν) (ν.mconv μ)","decl":"/-- To get commutativity, we need the underlying multiplication to be commutative. -/\n@[to_additive conv_comm]\ntheorem mconv_comm {M : Type*} [CommMonoid M] [MeasurableSpace M] [MeasurableMul₂ M] (μ : Measure M)\n    (ν : Measure M) [SFinite μ] [SFinite ν] : μ ∗ ν = ν ∗ μ := by\n  unfold mconv\n  rw [← prod_swap, map_map (by fun_prop)]\n  · simp [Function.comp_def, mul_comm]\n  fun_prop\n\n"}
{"name":"MeasureTheory.Measure.sfinite_mconv_of_sfinite","module":"Mathlib.MeasureTheory.Group.Convolution","initialProofState":"M : Type u_1\ninst✝³ : Monoid M\ninst✝² : MeasurableSpace M\nμ ν : MeasureTheory.Measure M\ninst✝¹ : MeasureTheory.SFinite μ\ninst✝ : MeasureTheory.SFinite ν\n⊢ MeasureTheory.SFinite (μ.mconv ν)","decl":"/-- Convolution of SFinite maps is SFinite. -/\n@[to_additive sfinite_conv_of_sfinite]\ninstance sfinite_mconv_of_sfinite (μ : Measure M) (ν : Measure M) [SFinite μ] [SFinite ν] :\n    SFinite (μ ∗ ν) := inferInstanceAs <| SFinite ((μ.prod ν).map fun (x : M × M) ↦ x.1 * x.2)\n\n"}
{"name":"MeasureTheory.Measure.sfinite_conv_of_sfinite","module":"Mathlib.MeasureTheory.Group.Convolution","initialProofState":"M : Type u_1\ninst✝³ : AddMonoid M\ninst✝² : MeasurableSpace M\nμ ν : MeasureTheory.Measure M\ninst✝¹ : MeasureTheory.SFinite μ\ninst✝ : MeasureTheory.SFinite ν\n⊢ MeasureTheory.SFinite (μ.conv ν)","decl":"/-- Convolution of SFinite maps is SFinite. -/\n@[to_additive sfinite_conv_of_sfinite]\ninstance sfinite_mconv_of_sfinite (μ : Measure M) (ν : Measure M) [SFinite μ] [SFinite ν] :\n    SFinite (μ ∗ ν) := inferInstanceAs <| SFinite ((μ.prod ν).map fun (x : M × M) ↦ x.1 * x.2)\n\n"}
{"name":"MeasureTheory.Measure.finite_of_finite_mconv","module":"Mathlib.MeasureTheory.Group.Convolution","initialProofState":"M : Type u_1\ninst✝³ : Monoid M\ninst✝² : MeasurableSpace M\nμ ν : MeasureTheory.Measure M\ninst✝¹ : MeasureTheory.IsFiniteMeasure μ\ninst✝ : MeasureTheory.IsFiniteMeasure ν\n⊢ MeasureTheory.IsFiniteMeasure (μ.mconv ν)","decl":"@[to_additive finite_of_finite_conv]\ninstance finite_of_finite_mconv (μ : Measure M) (ν : Measure M) [IsFiniteMeasure μ]\n    [IsFiniteMeasure ν] : IsFiniteMeasure (μ ∗ ν) := by\n  have h : (μ ∗ ν) Set.univ < ⊤ := by\n    unfold mconv\n    exact IsFiniteMeasure.measure_univ_lt_top\n  exact {measure_univ_lt_top := h}\n\n"}
{"name":"MeasureTheory.Measure.finite_of_finite_conv","module":"Mathlib.MeasureTheory.Group.Convolution","initialProofState":"M : Type u_1\ninst✝³ : AddMonoid M\ninst✝² : MeasurableSpace M\nμ ν : MeasureTheory.Measure M\ninst✝¹ : MeasureTheory.IsFiniteMeasure μ\ninst✝ : MeasureTheory.IsFiniteMeasure ν\n⊢ MeasureTheory.IsFiniteMeasure (μ.conv ν)","decl":"@[to_additive finite_of_finite_conv]\ninstance finite_of_finite_mconv (μ : Measure M) (ν : Measure M) [IsFiniteMeasure μ]\n    [IsFiniteMeasure ν] : IsFiniteMeasure (μ ∗ ν) := by\n  have h : (μ ∗ ν) Set.univ < ⊤ := by\n    unfold mconv\n    exact IsFiniteMeasure.measure_univ_lt_top\n  exact {measure_univ_lt_top := h}\n\n"}
{"name":"MeasureTheory.Measure.probabilitymeasure_of_probabilitymeasures_mconv","module":"Mathlib.MeasureTheory.Group.Convolution","initialProofState":"M : Type u_1\ninst✝⁴ : Monoid M\ninst✝³ : MeasurableSpace M\nμ ν : MeasureTheory.Measure M\ninst✝² : MeasurableMul₂ M\ninst✝¹ : MeasureTheory.IsProbabilityMeasure μ\ninst✝ : MeasureTheory.IsProbabilityMeasure ν\n⊢ MeasureTheory.IsProbabilityMeasure (μ.mconv ν)","decl":"@[to_additive probabilitymeasure_of_probabilitymeasures_conv]\ninstance probabilitymeasure_of_probabilitymeasures_mconv (μ : Measure M) (ν : Measure M)\n    [MeasurableMul₂ M] [IsProbabilityMeasure μ] [IsProbabilityMeasure ν] :\n    IsProbabilityMeasure (μ ∗ ν) :=\n  MeasureTheory.isProbabilityMeasure_map (by fun_prop)\n\n"}
{"name":"MeasureTheory.Measure.probabilitymeasure_of_probabilitymeasures_conv","module":"Mathlib.MeasureTheory.Group.Convolution","initialProofState":"M : Type u_1\ninst✝⁴ : AddMonoid M\ninst✝³ : MeasurableSpace M\nμ ν : MeasureTheory.Measure M\ninst✝² : MeasurableAdd₂ M\ninst✝¹ : MeasureTheory.IsProbabilityMeasure μ\ninst✝ : MeasureTheory.IsProbabilityMeasure ν\n⊢ MeasureTheory.IsProbabilityMeasure (μ.conv ν)","decl":"@[to_additive probabilitymeasure_of_probabilitymeasures_conv]\ninstance probabilitymeasure_of_probabilitymeasures_mconv (μ : Measure M) (ν : Measure M)\n    [MeasurableMul₂ M] [IsProbabilityMeasure μ] [IsProbabilityMeasure ν] :\n    IsProbabilityMeasure (μ ∗ ν) :=\n  MeasureTheory.isProbabilityMeasure_map (by fun_prop)\n\n"}
