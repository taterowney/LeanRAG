{"name":"Real.IsConjExponent.one_lt","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nself : p.IsConjExponent q\n⊢ LT.lt 1 p","decl":"/-- Two real exponents `p, q` are conjugate if they are `> 1` and satisfy the equality\n`1/p + 1/q = 1`. This condition shows up in many theorems in analysis, notably related to `L^p`\nnorms. -/\n@[mk_iff]\nstructure IsConjExponent (p q : ℝ) : Prop where\n  one_lt : 1 < p\n  inv_add_inv_conj : p⁻¹ + q⁻¹ = 1\n\n"}
{"name":"Real.IsConjExponent.inv_add_inv_conj","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nself : p.IsConjExponent q\n⊢ Eq (HAdd.hAdd (Inv.inv p) (Inv.inv q)) 1","decl":"/-- Two real exponents `p, q` are conjugate if they are `> 1` and satisfy the equality\n`1/p + 1/q = 1`. This condition shows up in many theorems in analysis, notably related to `L^p`\nnorms. -/\n@[mk_iff]\nstructure IsConjExponent (p q : ℝ) : Prop where\n  one_lt : 1 < p\n  inv_add_inv_conj : p⁻¹ + q⁻¹ = 1\n\n"}
{"name":"Real.isConjExponent_iff","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\n⊢ Iff (p.IsConjExponent q) (And (LT.lt 1 p) (Eq (HAdd.hAdd (Inv.inv p) (Inv.inv q)) 1))","decl":"/-- Two real exponents `p, q` are conjugate if they are `> 1` and satisfy the equality\n`1/p + 1/q = 1`. This condition shows up in many theorems in analysis, notably related to `L^p`\nnorms. -/\n@[mk_iff]\nstructure IsConjExponent (p q : ℝ) : Prop where\n  one_lt : 1 < p\n  inv_add_inv_conj : p⁻¹ + q⁻¹ = 1\n\n"}
{"name":"Real.IsConjExponent.pos","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nh : p.IsConjExponent q\n⊢ LT.lt 0 p","decl":"theorem pos : 0 < p := lt_trans zero_lt_one h.one_lt\n\n"}
{"name":"Real.IsConjExponent.nonneg","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nh : p.IsConjExponent q\n⊢ LE.le 0 p","decl":"theorem nonneg : 0 ≤ p := le_of_lt h.pos\n\n"}
{"name":"Real.IsConjExponent.ne_zero","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nh : p.IsConjExponent q\n⊢ Ne p 0","decl":"theorem ne_zero : p ≠ 0 := ne_of_gt h.pos\n\n"}
{"name":"Real.IsConjExponent.sub_one_pos","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nh : p.IsConjExponent q\n⊢ LT.lt 0 (HSub.hSub p 1)","decl":"theorem sub_one_pos : 0 < p - 1 := sub_pos.2 h.one_lt\n\n"}
{"name":"Real.IsConjExponent.sub_one_ne_zero","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nh : p.IsConjExponent q\n⊢ Ne (HSub.hSub p 1) 0","decl":"theorem sub_one_ne_zero : p - 1 ≠ 0 := ne_of_gt h.sub_one_pos\n\n"}
{"name":"Real.IsConjExponent.inv_pos","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nh : p.IsConjExponent q\n⊢ LT.lt 0 (Inv.inv p)","decl":"protected lemma inv_pos : 0 < p⁻¹ := inv_pos.2 h.pos\n"}
{"name":"Real.IsConjExponent.inv_nonneg","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nh : p.IsConjExponent q\n⊢ LE.le 0 (Inv.inv p)","decl":"protected lemma inv_nonneg : 0 ≤ p⁻¹ := h.inv_pos.le\n"}
{"name":"Real.IsConjExponent.inv_ne_zero","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nh : p.IsConjExponent q\n⊢ Ne (Inv.inv p) 0","decl":"protected lemma inv_ne_zero : p⁻¹ ≠ 0 := h.inv_pos.ne'\n\n"}
{"name":"Real.IsConjExponent.one_div_pos","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nh : p.IsConjExponent q\n⊢ LT.lt 0 (HDiv.hDiv 1 p)","decl":"theorem one_div_pos : 0 < 1 / p := _root_.one_div_pos.2 h.pos\n\n"}
{"name":"Real.IsConjExponent.one_div_nonneg","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nh : p.IsConjExponent q\n⊢ LE.le 0 (HDiv.hDiv 1 p)","decl":"theorem one_div_nonneg : 0 ≤ 1 / p := le_of_lt h.one_div_pos\n\n"}
{"name":"Real.IsConjExponent.one_div_ne_zero","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nh : p.IsConjExponent q\n⊢ Ne (HDiv.hDiv 1 p) 0","decl":"theorem one_div_ne_zero : 1 / p ≠ 0 := ne_of_gt h.one_div_pos\n\n"}
{"name":"Real.IsConjExponent.conj_eq","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nh : p.IsConjExponent q\n⊢ Eq q (HDiv.hDiv p (HSub.hSub p 1))","decl":"theorem conj_eq : q = p / (p - 1) := by\n  have := h.inv_add_inv_conj\n  rw [← eq_sub_iff_add_eq', inv_eq_iff_eq_inv] at this\n  field_simp [this, h.ne_zero]\n\n"}
{"name":"Real.IsConjExponent.conjExponent_eq","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nh : p.IsConjExponent q\n⊢ Eq p.conjExponent q","decl":"lemma conjExponent_eq : conjExponent p = q := h.conj_eq.symm\n\n"}
{"name":"Real.IsConjExponent.one_sub_inv","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nh : p.IsConjExponent q\n⊢ Eq (HSub.hSub 1 (Inv.inv p)) (Inv.inv q)","decl":"lemma one_sub_inv : 1 - p⁻¹ = q⁻¹ := sub_eq_of_eq_add' h.inv_add_inv_conj.symm\n"}
{"name":"Real.IsConjExponent.inv_sub_one","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nh : p.IsConjExponent q\n⊢ Eq (HSub.hSub (Inv.inv p) 1) (Neg.neg (Inv.inv q))","decl":"lemma inv_sub_one : p⁻¹ - 1 = -q⁻¹ := by rw [← h.inv_add_inv_conj, sub_add_cancel_left]\n\n"}
{"name":"Real.IsConjExponent.sub_one_mul_conj","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nh : p.IsConjExponent q\n⊢ Eq (HMul.hMul (HSub.hSub p 1) q) p","decl":"theorem sub_one_mul_conj : (p - 1) * q = p :=\n  mul_comm q (p - 1) ▸ (eq_div_iff h.sub_one_ne_zero).1 h.conj_eq\n\n"}
{"name":"Real.IsConjExponent.mul_eq_add","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nh : p.IsConjExponent q\n⊢ Eq (HMul.hMul p q) (HAdd.hAdd p q)","decl":"theorem mul_eq_add : p * q = p + q := by\n  simpa only [sub_mul, sub_eq_iff_eq_add, one_mul] using h.sub_one_mul_conj\n\n"}
{"name":"Real.IsConjExponent.symm","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nh : p.IsConjExponent q\n⊢ q.IsConjExponent p","decl":"@[symm] protected lemma symm : q.IsConjExponent p where\n  one_lt := by simpa only [h.conj_eq] using (one_lt_div h.sub_one_pos).mpr (sub_one_lt p)\n  inv_add_inv_conj := by simpa [add_comm] using h.inv_add_inv_conj\n\n"}
{"name":"Real.IsConjExponent.div_conj_eq_sub_one","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nh : p.IsConjExponent q\n⊢ Eq (HDiv.hDiv p q) (HSub.hSub p 1)","decl":"theorem div_conj_eq_sub_one : p / q = p - 1 := by\n  field_simp [h.symm.ne_zero]\n  rw [h.sub_one_mul_conj]\n\n"}
{"name":"Real.IsConjExponent.inv_add_inv_conj_ennreal","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nh : p.IsConjExponent q\n⊢ Eq (HAdd.hAdd (Inv.inv (ENNReal.ofReal p)) (Inv.inv (ENNReal.ofReal q))) 1","decl":"theorem inv_add_inv_conj_ennreal : (ENNReal.ofReal p)⁻¹ + (ENNReal.ofReal q)⁻¹ = 1 := by\n  rw [← ENNReal.ofReal_one, ← ENNReal.ofReal_inv_of_pos h.pos,\n    ← ENNReal.ofReal_inv_of_pos h.symm.pos, ← ENNReal.ofReal_add h.inv_nonneg h.symm.inv_nonneg,\n    h.inv_add_inv_conj]\n\n"}
{"name":"Real.IsConjExponent.inv_inv","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"a b : Real\nha : LT.lt 0 a\nhb : LT.lt 0 b\nhab : Eq (HAdd.hAdd a b) 1\n⊢ (Inv.inv a).IsConjExponent (Inv.inv b)","decl":"protected lemma inv_inv (ha : 0 < a) (hb : 0 < b) (hab : a + b = 1) : a⁻¹.IsConjExponent b⁻¹ :=\n  ⟨(one_lt_inv₀ ha).2 <| by linarith, by simpa only [inv_inv]⟩\n\n"}
{"name":"Real.IsConjExponent.inv_one_sub_inv","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"a : Real\nha₀ : LT.lt 0 a\nha₁ : LT.lt a 1\n⊢ (Inv.inv a).IsConjExponent (Inv.inv (HSub.hSub 1 a))","decl":"lemma inv_one_sub_inv (ha₀ : 0 < a) (ha₁ : a < 1) : a⁻¹.IsConjExponent (1 - a)⁻¹ :=\n  .inv_inv ha₀ (sub_pos_of_lt ha₁) <| add_tsub_cancel_of_le ha₁.le\n\n"}
{"name":"Real.IsConjExponent.one_sub_inv_inv","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"a : Real\nha₀ : LT.lt 0 a\nha₁ : LT.lt a 1\n⊢ (Inv.inv (HSub.hSub 1 a)).IsConjExponent (Inv.inv a)","decl":"lemma one_sub_inv_inv (ha₀ : 0 < a) (ha₁ : a < 1) : (1 - a)⁻¹.IsConjExponent a⁻¹ :=\n  (inv_one_sub_inv ha₀ ha₁).symm\n\n"}
{"name":"Real.isConjExponent_comm","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\n⊢ Iff (p.IsConjExponent q) (q.IsConjExponent p)","decl":"lemma isConjExponent_comm : p.IsConjExponent q ↔ q.IsConjExponent p := ⟨.symm, .symm⟩\n\n"}
{"name":"Real.isConjExponent_iff_eq_conjExponent","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nhp : LT.lt 1 p\n⊢ Iff (p.IsConjExponent q) (Eq q (HDiv.hDiv p (HSub.hSub p 1)))","decl":"lemma isConjExponent_iff_eq_conjExponent (hp : 1 < p) : p.IsConjExponent q ↔ q = p / (p - 1) :=\n  ⟨IsConjExponent.conj_eq, fun h ↦ ⟨hp, by field_simp [h]⟩⟩\n\n"}
{"name":"Real.IsConjExponent.conjExponent","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p : Real\nh : LT.lt 1 p\n⊢ p.IsConjExponent p.conjExponent","decl":"lemma IsConjExponent.conjExponent (h : 1 < p) : p.IsConjExponent (conjExponent p) :=\n  (isConjExponent_iff_eq_conjExponent h).2 rfl\n\n"}
{"name":"Real.isConjExponent_one_div","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"a b : Real\nha : LT.lt 0 a\nhb : LT.lt 0 b\nhab : Eq (HAdd.hAdd a b) 1\n⊢ (HDiv.hDiv 1 a).IsConjExponent (HDiv.hDiv 1 b)","decl":"lemma isConjExponent_one_div (ha : 0 < a) (hb : 0 < b) (hab : a + b = 1) :\n    (1 / a).IsConjExponent (1 / b) := by simpa using IsConjExponent.inv_inv ha hb hab\n\n"}
{"name":"NNReal.isConjExponent_iff","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\n⊢ Iff (p.IsConjExponent q) (And (LT.lt 1 p) (Eq (HAdd.hAdd (Inv.inv p) (Inv.inv q)) 1))","decl":"/-- Two nonnegative real exponents `p, q` are conjugate if they are `> 1` and satisfy the equality\n`1/p + 1/q = 1`. This condition shows up in many theorems in analysis, notably related to `L^p`\nnorms. -/\n@[mk_iff]\nstructure IsConjExponent (p q : ℝ≥0) : Prop where\n  one_lt : 1 < p\n  inv_add_inv_conj : p⁻¹ + q⁻¹ = 1\n\n"}
{"name":"NNReal.IsConjExponent.one_lt","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\nself : p.IsConjExponent q\n⊢ LT.lt 1 p","decl":"/-- Two nonnegative real exponents `p, q` are conjugate if they are `> 1` and satisfy the equality\n`1/p + 1/q = 1`. This condition shows up in many theorems in analysis, notably related to `L^p`\nnorms. -/\n@[mk_iff]\nstructure IsConjExponent (p q : ℝ≥0) : Prop where\n  one_lt : 1 < p\n  inv_add_inv_conj : p⁻¹ + q⁻¹ = 1\n\n"}
{"name":"NNReal.IsConjExponent.inv_add_inv_conj","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\nself : p.IsConjExponent q\n⊢ Eq (HAdd.hAdd (Inv.inv p) (Inv.inv q)) 1","decl":"/-- Two nonnegative real exponents `p, q` are conjugate if they are `> 1` and satisfy the equality\n`1/p + 1/q = 1`. This condition shows up in many theorems in analysis, notably related to `L^p`\nnorms. -/\n@[mk_iff]\nstructure IsConjExponent (p q : ℝ≥0) : Prop where\n  one_lt : 1 < p\n  inv_add_inv_conj : p⁻¹ + q⁻¹ = 1\n\n"}
{"name":"NNReal.isConjExponent_coe","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\n⊢ Iff ((↑p).IsConjExponent ↑q) (p.IsConjExponent q)","decl":"@[simp, norm_cast] lemma isConjExponent_coe : (p : ℝ).IsConjExponent q ↔ p.IsConjExponent q := by\n  simp [Real.isConjExponent_iff, isConjExponent_iff]; norm_cast; simp\n\n"}
{"name":"NNReal.IsConjExponent.coe","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\na✝ : p.IsConjExponent q\n⊢ (↑p).IsConjExponent ↑q","decl":"alias ⟨_, IsConjExponent.coe⟩ := isConjExponent_coe\n\n"}
{"name":"NNReal.IsConjExponent.one_le","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\nh : p.IsConjExponent q\n⊢ LE.le 1 p","decl":"lemma one_le : 1 ≤ p := h.one_lt.le\n"}
{"name":"NNReal.IsConjExponent.pos","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\nh : p.IsConjExponent q\n⊢ LT.lt 0 p","decl":"lemma pos : 0 < p := zero_lt_one.trans h.one_lt\n"}
{"name":"NNReal.IsConjExponent.ne_zero","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\nh : p.IsConjExponent q\n⊢ Ne p 0","decl":"lemma ne_zero : p ≠ 0 := h.pos.ne'\n\n"}
{"name":"NNReal.IsConjExponent.sub_one_pos","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\nh : p.IsConjExponent q\n⊢ LT.lt 0 (HSub.hSub p 1)","decl":"lemma sub_one_pos : 0 < p - 1 := tsub_pos_of_lt h.one_lt\n"}
{"name":"NNReal.IsConjExponent.sub_one_ne_zero","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\nh : p.IsConjExponent q\n⊢ Ne (HSub.hSub p 1) 0","decl":"lemma sub_one_ne_zero : p - 1 ≠ 0 := h.sub_one_pos.ne'\n\n"}
{"name":"NNReal.IsConjExponent.inv_pos","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\nh : p.IsConjExponent q\n⊢ LT.lt 0 (Inv.inv p)","decl":"lemma inv_pos : 0 < p⁻¹ := _root_.inv_pos.2 h.pos\n"}
{"name":"NNReal.IsConjExponent.inv_ne_zero","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\nh : p.IsConjExponent q\n⊢ Ne (Inv.inv p) 0","decl":"lemma inv_ne_zero : p⁻¹ ≠ 0 := h.inv_pos.ne'\n\n"}
{"name":"NNReal.IsConjExponent.one_sub_inv","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\nh : p.IsConjExponent q\n⊢ Eq (HSub.hSub 1 (Inv.inv p)) (Inv.inv q)","decl":"lemma one_sub_inv : 1 - p⁻¹ = q⁻¹ := tsub_eq_of_eq_add_rev h.inv_add_inv_conj.symm\n\n"}
{"name":"NNReal.IsConjExponent.conj_eq","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\nh : p.IsConjExponent q\n⊢ Eq q (HDiv.hDiv p (HSub.hSub p 1))","decl":"lemma conj_eq : q = p / (p - 1) := by\n  simpa only [← coe_one, ← NNReal.coe_sub h.one_le, ← NNReal.coe_div, coe_inj] using h.coe.conj_eq\n\n"}
{"name":"NNReal.IsConjExponent.conjExponent_eq","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\nh : p.IsConjExponent q\n⊢ Eq p.conjExponent q","decl":"lemma conjExponent_eq : conjExponent p = q := h.conj_eq.symm\n\n"}
{"name":"NNReal.IsConjExponent.sub_one_mul_conj","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\nh : p.IsConjExponent q\n⊢ Eq (HMul.hMul (HSub.hSub p 1) q) p","decl":"lemma sub_one_mul_conj : (p - 1) * q = p :=\n  mul_comm q (p - 1) ▸ (eq_div_iff h.sub_one_ne_zero).1 h.conj_eq\n\n"}
{"name":"NNReal.IsConjExponent.mul_eq_add","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\nh : p.IsConjExponent q\n⊢ Eq (HMul.hMul p q) (HAdd.hAdd p q)","decl":"lemma mul_eq_add : p * q = p + q := by\n  simpa only [← NNReal.coe_mul, ← NNReal.coe_add, NNReal.coe_inj] using h.coe.mul_eq_add\n\n"}
{"name":"NNReal.IsConjExponent.symm","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\nh : p.IsConjExponent q\n⊢ q.IsConjExponent p","decl":"@[symm]\nprotected lemma symm : q.IsConjExponent p where\n  one_lt := by\n    rw [h.conj_eq]\n    exact (one_lt_div h.sub_one_pos).mpr (tsub_lt_self h.pos zero_lt_one)\n  inv_add_inv_conj := by simpa [add_comm] using h.inv_add_inv_conj\n\n"}
{"name":"NNReal.IsConjExponent.div_conj_eq_sub_one","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\nh : p.IsConjExponent q\n⊢ Eq (HDiv.hDiv p q) (HSub.hSub p 1)","decl":"lemma div_conj_eq_sub_one : p / q = p - 1 := by field_simp [h.symm.ne_zero]; rw [h.sub_one_mul_conj]\n\n"}
{"name":"NNReal.IsConjExponent.inv_add_inv_conj_ennreal","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\nh : p.IsConjExponent q\n⊢ Eq (HAdd.hAdd ↑(Inv.inv p) ↑(Inv.inv q)) 1","decl":"lemma inv_add_inv_conj_ennreal : (p⁻¹ + q⁻¹ : ℝ≥0∞) = 1 := by norm_cast; exact h.inv_add_inv_conj\n\n"}
{"name":"NNReal.IsConjExponent.inv_inv","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"a b : NNReal\nha : Ne a 0\nhb : Ne b 0\nhab : Eq (HAdd.hAdd a b) 1\n⊢ (Inv.inv a).IsConjExponent (Inv.inv b)","decl":"protected lemma inv_inv (ha : a ≠ 0) (hb : b ≠ 0) (hab : a + b = 1) :\n    a⁻¹.IsConjExponent b⁻¹ :=\n  ⟨(one_lt_inv₀ ha.bot_lt).2 <| by rw [← hab]; exact lt_add_of_pos_right _ hb.bot_lt, by\n    simpa only [inv_inv] using hab⟩\n\n"}
{"name":"NNReal.IsConjExponent.inv_one_sub_inv","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"a : NNReal\nha₀ : Ne a 0\nha₁ : LT.lt a 1\n⊢ (Inv.inv a).IsConjExponent (Inv.inv (HSub.hSub 1 a))","decl":"lemma inv_one_sub_inv (ha₀ : a ≠ 0) (ha₁ : a < 1) : a⁻¹.IsConjExponent (1 - a)⁻¹ :=\n  .inv_inv ha₀ (tsub_pos_of_lt ha₁).ne' <| add_tsub_cancel_of_le ha₁.le\n\n"}
{"name":"NNReal.IsConjExponent.one_sub_inv_inv","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"a : NNReal\nha₀ : Ne a 0\nha₁ : LT.lt a 1\n⊢ (Inv.inv (HSub.hSub 1 a)).IsConjExponent (Inv.inv a)","decl":"lemma one_sub_inv_inv (ha₀ : a ≠ 0) (ha₁ : a < 1) : (1 - a)⁻¹.IsConjExponent a⁻¹ :=\n  (inv_one_sub_inv ha₀ ha₁).symm\n\n"}
{"name":"NNReal.isConjExponent_comm","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\n⊢ Iff (p.IsConjExponent q) (q.IsConjExponent p)","decl":"lemma isConjExponent_comm : p.IsConjExponent q ↔ q.IsConjExponent p := ⟨.symm, .symm⟩\n\n"}
{"name":"NNReal.isConjExponent_iff_eq_conjExponent","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\nh : LT.lt 1 p\n⊢ Iff (p.IsConjExponent q) (Eq q (HDiv.hDiv p (HSub.hSub p 1)))","decl":"lemma isConjExponent_iff_eq_conjExponent (h : 1 < p) : p.IsConjExponent q ↔ q = p / (p - 1) := by\n  rw [← isConjExponent_coe, Real.isConjExponent_iff_eq_conjExponent (mod_cast h), ← coe_inj,\n    NNReal.coe_div, NNReal.coe_sub h.le, coe_one]\n\n"}
{"name":"NNReal.IsConjExponent.conjExponent","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p : NNReal\nh : LT.lt 1 p\n⊢ p.IsConjExponent p.conjExponent","decl":"protected lemma IsConjExponent.conjExponent (h : 1 < p) : p.IsConjExponent (conjExponent p) :=\n  (isConjExponent_iff_eq_conjExponent h).2 rfl\n\n"}
{"name":"Real.IsConjExponent.toNNReal","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : Real\nhpq : p.IsConjExponent q\n⊢ p.toNNReal.IsConjExponent q.toNNReal","decl":"protected lemma Real.IsConjExponent.toNNReal {p q : ℝ} (hpq : p.IsConjExponent q) :\n    p.toNNReal.IsConjExponent q.toNNReal where\n  one_lt := by simpa using hpq.one_lt\n  inv_add_inv_conj := by rw [← toNNReal_inv, ← toNNReal_inv, ← toNNReal_add hpq.inv_nonneg\n    hpq.symm.inv_nonneg, hpq.inv_add_inv_conj, toNNReal_one]\n\n"}
{"name":"ENNReal.IsConjExponent.inv_add_inv_conj","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : ENNReal\nself : p.IsConjExponent q\n⊢ Eq (HAdd.hAdd (Inv.inv p) (Inv.inv q)) 1","decl":"/-- Two extended nonnegative real exponents `p, q` are conjugate and satisfy the equality\n`1/p + 1/q = 1`. This condition shows up in many theorems in analysis, notably related to `L^p`\nnorms. Note that we permit one of the exponents to be `∞` and the other `1`. -/\n@[mk_iff]\nstructure IsConjExponent (p q : ℝ≥0∞) : Prop where\n  inv_add_inv_conj : p⁻¹ + q⁻¹ = 1\n\n"}
{"name":"ENNReal.isConjExponent_iff","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : ENNReal\n⊢ Iff (p.IsConjExponent q) (Eq (HAdd.hAdd (Inv.inv p) (Inv.inv q)) 1)","decl":"/-- Two extended nonnegative real exponents `p, q` are conjugate and satisfy the equality\n`1/p + 1/q = 1`. This condition shows up in many theorems in analysis, notably related to `L^p`\nnorms. Note that we permit one of the exponents to be `∞` and the other `1`. -/\n@[mk_iff]\nstructure IsConjExponent (p q : ℝ≥0∞) : Prop where\n  inv_add_inv_conj : p⁻¹ + q⁻¹ = 1\n\n"}
{"name":"ENNReal.coe_conjExponent","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p : NNReal\nhp : LT.lt 1 p\n⊢ Eq (↑p.conjExponent) (↑p).conjExponent","decl":"lemma coe_conjExponent {p : ℝ≥0} (hp : 1 < p) : p.conjExponent = conjExponent p := by\n  rw [NNReal.conjExponent, conjExponent]\n  norm_cast\n  rw [← coe_inv (tsub_pos_of_lt hp).ne']\n  norm_cast\n  field_simp [(tsub_pos_of_lt hp).ne']\n  rw [tsub_add_cancel_of_le hp.le]\n\n"}
{"name":"ENNReal.isConjExponent_coe","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\n⊢ Iff ((↑p).IsConjExponent ↑q) (p.IsConjExponent q)","decl":"@[simp, norm_cast] lemma isConjExponent_coe {p q : ℝ≥0} :\n    IsConjExponent p q ↔ p.IsConjExponent q := by\n  simp only [isConjExponent_iff, NNReal.isConjExponent_iff]\n  refine ⟨fun h ↦ ⟨?_, ?_⟩, ?_⟩\n  · simpa using (ENNReal.lt_add_right (fun hp ↦ by simp [hp] at h) <| by simp).trans_eq h\n  · rw [← coe_inv, ← coe_inv] at h\n    · norm_cast at h\n    all_goals rintro rfl; simp at h\n  · rintro ⟨hp, h⟩\n    rw [← coe_inv (zero_lt_one.trans hp).ne', ← coe_inv, ← coe_add, h, coe_one]\n    rintro rfl\n    simp [hp.ne'] at h\n\n"}
{"name":"NNReal.IsConjExponent.coe_ennreal","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : NNReal\na✝ : p.IsConjExponent q\n⊢ (↑p).IsConjExponent ↑q","decl":"alias ⟨_, _root_.NNReal.IsConjExponent.coe_ennreal⟩ := isConjExponent_coe\n\n"}
{"name":"ENNReal.IsConjExponent.conjExponent","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p : ENNReal\nhp : LE.le 1 p\n⊢ p.IsConjExponent p.conjExponent","decl":"protected lemma conjExponent (hp : 1 ≤ p) : p.IsConjExponent (conjExponent p) := by\n  have : p ≠ 0 := (zero_lt_one.trans_le hp).ne'\n  rw [isConjExponent_iff, conjExponent, add_comm]\n  refine (AddLECancellable.eq_tsub_iff_add_eq_of_le (α := ℝ≥0∞) (by simpa) (by simpa)).1 ?_\n  rw [inv_eq_iff_eq_inv]\n  obtain rfl | hp₁ := hp.eq_or_lt\n  · simp [tsub_eq_zero_of_le]\n  obtain rfl | hp := eq_or_ne p ∞\n  · simp\n  calc\n    1 + (p - 1)⁻¹ = (p - 1 + 1) / (p - 1) := by\n      rw [ENNReal.add_div, ENNReal.div_self ((tsub_pos_of_lt hp₁).ne') (sub_ne_top hp), one_div]\n    _ = (1 - p⁻¹)⁻¹ := by\n      rw [tsub_add_cancel_of_le, ← inv_eq_iff_eq_inv, div_eq_mul_inv, ENNReal.mul_inv, inv_inv,\n        ENNReal.mul_sub, ENNReal.inv_mul_cancel, mul_one] <;> simp [*]\n\n"}
{"name":"ENNReal.IsConjExponent.symm","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : ENNReal\nh : p.IsConjExponent q\n⊢ q.IsConjExponent p","decl":"@[symm]\nprotected lemma symm : q.IsConjExponent p where\n  inv_add_inv_conj := by simpa [add_comm] using h.inv_add_inv_conj\n\n"}
{"name":"ENNReal.IsConjExponent.one_le","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : ENNReal\nh : p.IsConjExponent q\n⊢ LE.le 1 p","decl":"lemma one_le : 1 ≤ p := ENNReal.inv_le_one.1 <| by\n  rw [← add_zero p⁻¹, ← h.inv_add_inv_conj]; gcongr; positivity\n\n"}
{"name":"ENNReal.IsConjExponent.pos","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : ENNReal\nh : p.IsConjExponent q\n⊢ LT.lt 0 p","decl":"lemma pos : 0 < p := zero_lt_one.trans_le h.one_le\n"}
{"name":"ENNReal.IsConjExponent.ne_zero","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : ENNReal\nh : p.IsConjExponent q\n⊢ Ne p 0","decl":"lemma ne_zero : p ≠ 0 := h.pos.ne'\n\n"}
{"name":"ENNReal.IsConjExponent.one_sub_inv","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : ENNReal\nh : p.IsConjExponent q\n⊢ Eq (HSub.hSub 1 (Inv.inv p)) (Inv.inv q)","decl":"lemma one_sub_inv : 1 - p⁻¹ = q⁻¹ :=\n  ENNReal.sub_eq_of_eq_add_rev' one_ne_top h.inv_add_inv_conj.symm\n\n"}
{"name":"ENNReal.IsConjExponent.conjExponent_eq","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : ENNReal\nh : p.IsConjExponent q\n⊢ Eq p.conjExponent q","decl":"lemma conjExponent_eq : conjExponent p = q := by\n  have hp : 1 ≤ p := h.one_le\n  have : p⁻¹ ≠ ∞ := by simpa using h.ne_zero\n  simpa [ENNReal.add_right_inj, *] using\n    (IsConjExponent.conjExponent hp).inv_add_inv_conj.trans h.inv_add_inv_conj.symm\n\n"}
{"name":"ENNReal.IsConjExponent.conj_eq","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : ENNReal\nh : p.IsConjExponent q\n⊢ Eq q (HAdd.hAdd 1 (Inv.inv (HSub.hSub p 1)))","decl":"lemma conj_eq : q = 1 + (p - 1)⁻¹ := h.conjExponent_eq.symm\n\n"}
{"name":"ENNReal.IsConjExponent.mul_eq_add","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : ENNReal\nh : p.IsConjExponent q\n⊢ Eq (HMul.hMul p q) (HAdd.hAdd p q)","decl":"lemma mul_eq_add : p * q = p + q := by\n  obtain rfl | hp := eq_or_ne p ∞\n  · simp [h.symm.ne_zero]\n  obtain rfl | hq := eq_or_ne q ∞\n  · simp [h.ne_zero]\n  rw [← mul_one (_ * _), ← h.inv_add_inv_conj, mul_add, mul_right_comm,\n    ENNReal.mul_inv_cancel h.ne_zero hp, one_mul, mul_assoc,\n    ENNReal.mul_inv_cancel h.symm.ne_zero hq, mul_one, add_comm]\n\n"}
{"name":"ENNReal.IsConjExponent.div_conj_eq_sub_one","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : ENNReal\nh : p.IsConjExponent q\n⊢ Eq (HDiv.hDiv p q) (HSub.hSub p 1)","decl":"lemma div_conj_eq_sub_one : p / q = p - 1 := by\n  obtain rfl | hq := eq_or_ne q ∞\n  · simp [h.symm.conj_eq, tsub_eq_zero_of_le]\n  refine ENNReal.eq_sub_of_add_eq one_ne_top ?_\n  rw [← ENNReal.div_self h.symm.ne_zero hq, ← ENNReal.add_div, ← h.mul_eq_add, mul_div_assoc,\n    ENNReal.div_self h.symm.ne_zero hq, mul_one]\n\n"}
{"name":"ENNReal.IsConjExponent.inv_inv","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"a b : ENNReal\nhab : Eq (HAdd.hAdd a b) 1\n⊢ (Inv.inv a).IsConjExponent (Inv.inv b)","decl":"protected lemma inv_inv (hab : a + b = 1) : a⁻¹.IsConjExponent b⁻¹ where\n  inv_add_inv_conj := by simpa only [inv_inv] using hab\n\n"}
{"name":"ENNReal.IsConjExponent.inv_one_sub_inv","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"a : ENNReal\nha : LE.le a 1\n⊢ (Inv.inv a).IsConjExponent (Inv.inv (HSub.hSub 1 a))","decl":"lemma inv_one_sub_inv (ha : a ≤ 1) : a⁻¹.IsConjExponent (1 - a)⁻¹ :=\n  .inv_inv <| add_tsub_cancel_of_le ha\n\n"}
{"name":"ENNReal.IsConjExponent.one_sub_inv_inv","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"a : ENNReal\nha : LE.le a 1\n⊢ (Inv.inv (HSub.hSub 1 a)).IsConjExponent (Inv.inv a)","decl":"lemma one_sub_inv_inv (ha : a ≤ 1) : (1 - a)⁻¹.IsConjExponent a⁻¹ := (inv_one_sub_inv ha).symm\n\n"}
{"name":"ENNReal.IsConjExponent.top_one","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"⊢ Top.top.IsConjExponent 1","decl":"lemma top_one : IsConjExponent ∞ 1 := ⟨by simp⟩\n"}
{"name":"ENNReal.IsConjExponent.one_top","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"⊢ ENNReal.IsConjExponent 1 Top.top","decl":"lemma one_top : IsConjExponent 1 ∞ := ⟨by simp⟩\n\n"}
{"name":"ENNReal.isConjExponent_comm","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : ENNReal\n⊢ Iff (p.IsConjExponent q) (q.IsConjExponent p)","decl":"lemma isConjExponent_comm : p.IsConjExponent q ↔ q.IsConjExponent p := ⟨.symm, .symm⟩\n\n"}
{"name":"ENNReal.isConjExponent_iff_eq_conjExponent","module":"Mathlib.Data.Real.ConjExponents","initialProofState":"p q : ENNReal\nhp : LE.le 1 p\n⊢ Iff (p.IsConjExponent q) (Eq q (HAdd.hAdd 1 (Inv.inv (HSub.hSub p 1))))","decl":"lemma isConjExponent_iff_eq_conjExponent (hp : 1 ≤ p) : p.IsConjExponent q ↔ q = 1 + (p - 1)⁻¹ :=\n  ⟨fun h ↦ h.conj_eq, by rintro rfl; exact .conjExponent hp⟩\n\n"}
