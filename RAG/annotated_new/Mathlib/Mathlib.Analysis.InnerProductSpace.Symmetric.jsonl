{"name":"LinearMap.isSymmetric_iff_sesqForm","module":"Mathlib.Analysis.InnerProductSpace.Symmetric","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nT : LinearMap (RingHom.id 𝕜) E E\n⊢ Iff T.IsSymmetric (sesqFormOfInner.IsSelfAdjoint ⇑T)","decl":"/-- An operator `T` on an inner product space is symmetric if and only if it is\n`LinearMap.IsSelfAdjoint` with respect to the sesquilinear form given by the inner product. -/\ntheorem isSymmetric_iff_sesqForm (T : E →ₗ[𝕜] E) :\n    T.IsSymmetric ↔ LinearMap.IsSelfAdjoint (R := 𝕜) (M := E) sesqFormOfInner T :=\n  ⟨fun h x y => (h y x).symm, fun h x y => (h y x).symm⟩\n\n"}
{"name":"LinearMap.IsSymmetric.conj_inner_sym","module":"Mathlib.Analysis.InnerProductSpace.Symmetric","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nT : LinearMap (RingHom.id 𝕜) E E\nhT : T.IsSymmetric\nx y : E\n⊢ Eq ((starRingEnd 𝕜) (Inner.inner (T x) y)) (Inner.inner (T y) x)","decl":"theorem IsSymmetric.conj_inner_sym {T : E →ₗ[𝕜] E} (hT : IsSymmetric T) (x y : E) :\n    conj ⟪T x, y⟫ = ⟪T y, x⟫ := by rw [hT x y, inner_conj_symm]\n\n"}
{"name":"LinearMap.IsSymmetric.apply_clm","module":"Mathlib.Analysis.InnerProductSpace.Symmetric","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nT : ContinuousLinearMap (RingHom.id 𝕜) E E\nhT : (↑T).IsSymmetric\nx y : E\n⊢ Eq (Inner.inner (T x) y) (Inner.inner x (T y))","decl":"@[simp]\ntheorem IsSymmetric.apply_clm {T : E →L[𝕜] E} (hT : IsSymmetric (T : E →ₗ[𝕜] E)) (x y : E) :\n    ⟪T x, y⟫ = ⟪x, T y⟫ :=\n  hT x y\n\n"}
{"name":"LinearMap.IsSymmetric.zero","module":"Mathlib.Analysis.InnerProductSpace.Symmetric","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\n⊢ LinearMap.IsSymmetric 0","decl":"@[simp]\nprotected theorem IsSymmetric.zero : (0 : E →ₗ[𝕜] E).IsSymmetric := fun x y =>\n  (inner_zero_right x : ⟪x, 0⟫ = 0).symm ▸ (inner_zero_left y : ⟪0, y⟫ = 0)\n\n"}
{"name":"LinearMap.isSymmetric_zero","module":"Mathlib.Analysis.InnerProductSpace.Symmetric","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\n⊢ LinearMap.IsSymmetric 0","decl":"@[deprecated (since := \"2024-09-30\")] alias isSymmetric_zero := IsSymmetric.zero\n\n"}
{"name":"LinearMap.IsSymmetric.id","module":"Mathlib.Analysis.InnerProductSpace.Symmetric","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\n⊢ LinearMap.id.IsSymmetric","decl":"@[simp]\nprotected theorem IsSymmetric.id : (LinearMap.id : E →ₗ[𝕜] E).IsSymmetric := fun _ _ => rfl\n\n"}
{"name":"LinearMap.isSymmetric_id","module":"Mathlib.Analysis.InnerProductSpace.Symmetric","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\n⊢ LinearMap.id.IsSymmetric","decl":"@[deprecated (since := \"2024-09-30\")] alias isSymmetric_id := IsSymmetric.id\n\n"}
{"name":"LinearMap.IsSymmetric.add","module":"Mathlib.Analysis.InnerProductSpace.Symmetric","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nT S : LinearMap (RingHom.id 𝕜) E E\nhT : T.IsSymmetric\nhS : S.IsSymmetric\n⊢ (HAdd.hAdd T S).IsSymmetric","decl":"@[aesop safe apply]\ntheorem IsSymmetric.add {T S : E →ₗ[𝕜] E} (hT : T.IsSymmetric) (hS : S.IsSymmetric) :\n    (T + S).IsSymmetric := by\n  intro x y\n  rw [add_apply, inner_add_left, hT x y, hS x y, ← inner_add_right, add_apply]\n\n"}
{"name":"LinearMap.IsSymmetric.sub","module":"Mathlib.Analysis.InnerProductSpace.Symmetric","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nT S : LinearMap (RingHom.id 𝕜) E E\nhT : T.IsSymmetric\nhS : S.IsSymmetric\n⊢ (HSub.hSub T S).IsSymmetric","decl":"@[aesop safe apply]\ntheorem IsSymmetric.sub {T S : E →ₗ[𝕜] E} (hT : T.IsSymmetric) (hS : S.IsSymmetric) :\n    (T - S).IsSymmetric := by\n  intro x y\n  rw [sub_apply, inner_sub_left, hT x y, hS x y, ← inner_sub_right, sub_apply]\n\n"}
{"name":"LinearMap.IsSymmetric.smul","module":"Mathlib.Analysis.InnerProductSpace.Symmetric","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nc : 𝕜\nhc : Eq ((starRingEnd 𝕜) c) c\nT : LinearMap (RingHom.id 𝕜) E E\nhT : T.IsSymmetric\n⊢ (HSMul.hSMul c T).IsSymmetric","decl":"@[aesop safe apply]\ntheorem IsSymmetric.smul {c : 𝕜} (hc : conj c = c) {T : E →ₗ[𝕜] E} (hT : T.IsSymmetric) :\n    c • T |>.IsSymmetric := by\n  intro x y\n  simp only [smul_apply, inner_smul_left, hc, hT x y, inner_smul_right]\n\n"}
{"name":"LinearMap.IsSymmetric.mul_of_commute","module":"Mathlib.Analysis.InnerProductSpace.Symmetric","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nS T : LinearMap (RingHom.id 𝕜) E E\nhS : S.IsSymmetric\nhT : T.IsSymmetric\nhST : Commute S T\n⊢ (HMul.hMul S T).IsSymmetric","decl":"@[aesop 30% apply]\nlemma IsSymmetric.mul_of_commute {S T : E →ₗ[𝕜] E} (hS : S.IsSymmetric) (hT : T.IsSymmetric)\n    (hST : Commute S T) : (S * T).IsSymmetric :=\n  fun _ _ ↦ by rw [mul_apply, hS, hT, hST, mul_apply]\n\n"}
{"name":"LinearMap.IsSymmetric.pow","module":"Mathlib.Analysis.InnerProductSpace.Symmetric","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nT : LinearMap (RingHom.id 𝕜) E E\nhT : T.IsSymmetric\nn : Nat\n⊢ (HPow.hPow T n).IsSymmetric","decl":"@[aesop safe apply]\nlemma IsSymmetric.pow {T : E →ₗ[𝕜] E} (hT : T.IsSymmetric) (n : ℕ) : (T ^ n).IsSymmetric := by\n  refine Nat.le_induction (by simp [one_eq_id]) (fun k _ ih ↦ ?_) n n.zero_le\n  rw [iterate_succ, ← mul_eq_comp]\n  exact ih.mul_of_commute hT <| .pow_left rfl k\n\n"}
{"name":"LinearMap.IsSymmetric.coe_reApplyInnerSelf_apply","module":"Mathlib.Analysis.InnerProductSpace.Symmetric","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nT : ContinuousLinearMap (RingHom.id 𝕜) E E\nhT : (↑T).IsSymmetric\nx : E\n⊢ Eq (↑(T.reApplyInnerSelf x)) (Inner.inner (T x) x)","decl":"/-- For a symmetric operator `T`, the function `fun x ↦ ⟪T x, x⟫` is real-valued. -/\n@[simp]\ntheorem IsSymmetric.coe_reApplyInnerSelf_apply {T : E →L[𝕜] E} (hT : IsSymmetric (T : E →ₗ[𝕜] E))\n    (x : E) : (T.reApplyInnerSelf x : 𝕜) = ⟪T x, x⟫ := by\n  rsuffices ⟨r, hr⟩ : ∃ r : ℝ, ⟪T x, x⟫ = r\n  · simp [hr, T.reApplyInnerSelf_apply]\n  rw [← conj_eq_iff_real]\n  exact hT.conj_inner_sym x x\n\n"}
{"name":"LinearMap.IsSymmetric.restrict_invariant","module":"Mathlib.Analysis.InnerProductSpace.Symmetric","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nT : LinearMap (RingHom.id 𝕜) E E\nhT : T.IsSymmetric\nV : Submodule 𝕜 E\nhV : ∀ (v : E), Membership.mem V v → Membership.mem V (T v)\n⊢ (T.restrict hV).IsSymmetric","decl":"/-- If a symmetric operator preserves a submodule, its restriction to that submodule is\nsymmetric. -/\ntheorem IsSymmetric.restrict_invariant {T : E →ₗ[𝕜] E} (hT : IsSymmetric T) {V : Submodule 𝕜 E}\n    (hV : ∀ v ∈ V, T v ∈ V) : IsSymmetric (T.restrict hV) := fun v w => hT v w\n\n"}
{"name":"LinearMap.IsSymmetric.restrictScalars","module":"Mathlib.Analysis.InnerProductSpace.Symmetric","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nT : LinearMap (RingHom.id 𝕜) E E\nhT : T.IsSymmetric\n⊢ (↑Real T).IsSymmetric","decl":"theorem IsSymmetric.restrictScalars {T : E →ₗ[𝕜] E} (hT : T.IsSymmetric) :\n    letI := InnerProductSpace.rclikeToReal 𝕜 E\n    letI : IsScalarTower ℝ 𝕜 E := RestrictScalars.isScalarTower _ _ _\n    (T.restrictScalars ℝ).IsSymmetric :=\n  fun x y => by simp [hT x y, real_inner_eq_re_inner, LinearMap.coe_restrictScalars ℝ]\n\n"}
{"name":"LinearMap.isSymmetric_iff_inner_map_self_real","module":"Mathlib.Analysis.InnerProductSpace.Symmetric","initialProofState":"V : Type u_3\ninst✝¹ : SeminormedAddCommGroup V\ninst✝ : InnerProductSpace Complex V\nT : LinearMap (RingHom.id Complex) V V\n⊢ Iff T.IsSymmetric (∀ (v : V), Eq ((starRingEnd Complex) (Inner.inner (T v) v)) (Inner.inner (T v) v))","decl":"attribute [local simp] map_ofNat in -- use `ofNat` simp theorem with bad keys\nopen scoped InnerProductSpace in\n/-- A linear operator on a complex inner product space is symmetric precisely when\n`⟪T v, v⟫_ℂ` is real for all v. -/\ntheorem isSymmetric_iff_inner_map_self_real (T : V →ₗ[ℂ] V) :\n    IsSymmetric T ↔ ∀ v : V, conj ⟪T v, v⟫_ℂ = ⟪T v, v⟫_ℂ := by\n  constructor\n  · intro hT v\n    apply IsSymmetric.conj_inner_sym hT\n  · intro h x y\n    rw [← inner_conj_symm x (T y)]\n    rw [inner_map_polarization T x y]\n    simp only [starRingEnd_apply, star_div₀, star_sub, star_add, star_mul]\n    simp only [← starRingEnd_apply]\n    rw [h (x + y), h (x - y), h (x + Complex.I • y), h (x - Complex.I • y)]\n    simp only [Complex.conj_I]\n    rw [inner_map_polarization']\n    norm_num\n    ring\n\n"}
{"name":"LinearMap.IsSymmetric.inner_map_polarization","module":"Mathlib.Analysis.InnerProductSpace.Symmetric","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nT : LinearMap (RingHom.id 𝕜) E E\nhT : T.IsSymmetric\nx y : E\n⊢ Eq (Inner.inner (T x) y) (HDiv.hDiv (HAdd.hAdd (HSub.hSub (HSub.hSub (Inner.inner (T (HAdd.hAdd x y)) (HAdd.hAdd x y)) (Inner.inner (T (HSub.hSub x y)) (HSub.hSub x y))) (HMul.hMul RCLike.I (Inner.inner (T (HAdd.hAdd x (HSMul.hSMul RCLike.I y))) (HAdd.hAdd x (HSMul.hSMul RCLike.I y))))) (HMul.hMul RCLike.I (Inner.inner (T (HSub.hSub x (HSMul.hSMul RCLike.I y))) (HSub.hSub x (HSMul.hSMul RCLike.I y))))) 4)","decl":"/-- Polarization identity for symmetric linear maps.\nSee `inner_map_polarization` for the complex version without the symmetric assumption. -/\ntheorem IsSymmetric.inner_map_polarization {T : E →ₗ[𝕜] E} (hT : T.IsSymmetric) (x y : E) :\n    ⟪T x, y⟫ =\n      (⟪T (x + y), x + y⟫ - ⟪T (x - y), x - y⟫ - I * ⟪T (x + (I : 𝕜) • y), x + (I : 𝕜) • y⟫ +\n          I * ⟪T (x - (I : 𝕜) • y), x - (I : 𝕜) • y⟫) /\n        4 := by\n  rcases@I_mul_I_ax 𝕜 _ with (h | h)\n  · simp_rw [h, zero_mul, sub_zero, add_zero, map_add, map_sub, inner_add_left,\n      inner_add_right, inner_sub_left, inner_sub_right, hT x, ← inner_conj_symm x (T y)]\n    suffices (re ⟪T y, x⟫ : 𝕜) = ⟪T y, x⟫ by\n      rw [conj_eq_iff_re.mpr this]\n      ring\n    rw [← re_add_im ⟪T y, x⟫]\n    simp_rw [h, mul_zero, add_zero]\n    norm_cast\n  · simp_rw [map_add, map_sub, inner_add_left, inner_add_right, inner_sub_left, inner_sub_right,\n      LinearMap.map_smul, inner_smul_left, inner_smul_right, RCLike.conj_I, mul_add, mul_sub,\n      sub_sub, ← mul_assoc, mul_neg, h, neg_neg, one_mul, neg_one_mul]\n    ring\n\n"}
{"name":"LinearMap.IsSymmetric.continuous","module":"Mathlib.Analysis.InnerProductSpace.Symmetric","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : CompleteSpace E\nT : LinearMap (RingHom.id 𝕜) E E\nhT : T.IsSymmetric\n⊢ Continuous ⇑T","decl":"/-- The **Hellinger--Toeplitz theorem**: if a symmetric operator is defined on a complete space,\n  then it is automatically continuous. -/\ntheorem IsSymmetric.continuous [CompleteSpace E] {T : E →ₗ[𝕜] E} (hT : IsSymmetric T) :\n    Continuous T := by\n  -- We prove it by using the closed graph theorem\n  refine T.continuous_of_seq_closed_graph fun u x y hu hTu => ?_\n  rw [← sub_eq_zero, ← @inner_self_eq_zero 𝕜]\n  have hlhs : ∀ k : ℕ, ⟪T (u k) - T x, y - T x⟫ = ⟪u k - x, T (y - T x)⟫ := by\n    intro k\n    rw [← T.map_sub, hT]\n  refine tendsto_nhds_unique ((hTu.sub_const _).inner tendsto_const_nhds) ?_\n  simp_rw [Function.comp_apply, hlhs]\n  rw [← inner_zero_left (T (y - T x))]\n  refine Filter.Tendsto.inner ?_ tendsto_const_nhds\n  rw [← sub_self x]\n  exact hu.sub_const _\n\n"}
{"name":"LinearMap.IsSymmetric.inner_map_self_eq_zero","module":"Mathlib.Analysis.InnerProductSpace.Symmetric","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nT : LinearMap (RingHom.id 𝕜) E E\nhT : T.IsSymmetric\n⊢ Iff (∀ (x : E), Eq (Inner.inner (T x) x) 0) (Eq T 0)","decl":"/-- A symmetric linear map `T` is zero if and only if `⟪T x, x⟫_ℝ = 0` for all `x`.\nSee `inner_map_self_eq_zero` for the complex version without the symmetric assumption. -/\ntheorem IsSymmetric.inner_map_self_eq_zero {T : E →ₗ[𝕜] E} (hT : T.IsSymmetric) :\n    (∀ x, ⟪T x, x⟫ = 0) ↔ T = 0 := by\n  simp_rw [LinearMap.ext_iff, zero_apply]\n  refine ⟨fun h x => ?_, fun h => by simp_rw [h, inner_zero_left, forall_const]⟩\n  rw [← @inner_self_eq_zero 𝕜, hT.inner_map_polarization]\n  simp_rw [h _]\n  ring\n\n"}
