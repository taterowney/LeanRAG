{"name":"BoxIntegral.hasIntegralIndicatorConst","module":"Mathlib.Analysis.BoxIntegral.Integrability","initialProofState":"ι : Type u\nE : Type v\ninst✝³ : Fintype ι\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\nl : BoxIntegral.IntegrationParams\nhl : Eq l.bRiemann Bool.false\ns : Set (ι → Real)\nhs : MeasurableSet s\nI : BoxIntegral.Box ι\ny : E\nμ : MeasureTheory.Measure (ι → Real)\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\n⊢ BoxIntegral.HasIntegral I l (s.indicator fun x => y) μ.toBoxAdditive.toSMul (HSMul.hSMul (μ (Inter.inter s ↑I)).toReal y)","decl":"/-- The indicator function of a measurable set is McShane integrable with respect to any\nlocally-finite measure. -/\ntheorem hasIntegralIndicatorConst (l : IntegrationParams) (hl : l.bRiemann = false)\n    {s : Set (ι → ℝ)} (hs : MeasurableSet s) (I : Box ι) (y : E) (μ : Measure (ι → ℝ))\n    [IsLocallyFiniteMeasure μ] :\n    HasIntegral.{u, v, v} I l (s.indicator fun _ => y) μ.toBoxAdditive.toSMul\n      ((μ (s ∩ I)).toReal • y) := by\n  refine HasIntegral.of_mul ‖y‖ fun ε ε0 => ?_\n  lift ε to ℝ≥0 using ε0.le; rw [NNReal.coe_pos] at ε0\n  /- First we choose a closed set `F ⊆ s ∩ I.Icc` and an open set `U ⊇ s` such that\n    both `(s ∩ I.Icc) \\ F` and `U \\ s` have measure less than `ε`. -/\n  have A : μ (s ∩ Box.Icc I) ≠ ∞ :=\n    ((measure_mono Set.inter_subset_right).trans_lt (I.measure_Icc_lt_top μ)).ne\n  have B : μ (s ∩ I) ≠ ∞ :=\n    ((measure_mono Set.inter_subset_right).trans_lt (I.measure_coe_lt_top μ)).ne\n  obtain ⟨F, hFs, hFc, hμF⟩ : ∃ F, F ⊆ s ∩ Box.Icc I ∧ IsClosed F ∧ μ ((s ∩ Box.Icc I) \\ F) < ε :=\n    (hs.inter I.measurableSet_Icc).exists_isClosed_diff_lt A (ENNReal.coe_pos.2 ε0).ne'\n  obtain ⟨U, hsU, hUo, hUt, hμU⟩ :\n      ∃ U, s ∩ Box.Icc I ⊆ U ∧ IsOpen U ∧ μ U < ∞ ∧ μ (U \\ (s ∩ Box.Icc I)) < ε :=\n    (hs.inter I.measurableSet_Icc).exists_isOpen_diff_lt A (ENNReal.coe_pos.2 ε0).ne'\n  /- Then we choose `r` so that `closed_ball x (r x) ⊆ U` whenever `x ∈ s ∩ I.Icc` and\n    `closed_ball x (r x)` is disjoint with `F` otherwise. -/\n  have : ∀ x ∈ s ∩ Box.Icc I, ∃ r : Ioi (0 : ℝ), closedBall x r ⊆ U := fun x hx => by\n    rcases nhds_basis_closedBall.mem_iff.1 (hUo.mem_nhds <| hsU hx) with ⟨r, hr₀, hr⟩\n    exact ⟨⟨r, hr₀⟩, hr⟩\n  choose! rs hrsU using this\n  have : ∀ x ∈ Box.Icc I \\ s, ∃ r : Ioi (0 : ℝ), closedBall x r ⊆ Fᶜ := fun x hx => by\n    obtain ⟨r, hr₀, hr⟩ :=\n      nhds_basis_closedBall.mem_iff.1 (hFc.isOpen_compl.mem_nhds fun hx' => hx.2 (hFs hx').1)\n    exact ⟨⟨r, hr₀⟩, hr⟩\n  choose! rs' hrs'F using this\n  classical\n  set r : (ι → ℝ) → Ioi (0 : ℝ) := s.piecewise rs rs'\n  refine ⟨fun _ => r, fun c => l.rCond_of_bRiemann_eq_false hl, fun c π hπ hπp => ?_⟩; rw [mul_comm]\n  /- Then the union of boxes `J ∈ π` such that `π.tag ∈ s` includes `F` and is included by `U`,\n    hence its measure is `ε`-close to the measure of `s`. -/\n  dsimp [integralSum]\n  simp only [mem_closedBall, dist_eq_norm, ← indicator_const_smul_apply,\n    sum_indicator_eq_sum_filter, ← sum_smul, ← sub_smul, norm_smul, Real.norm_eq_abs, ←\n    Prepartition.filter_boxes, ← Prepartition.measure_iUnion_toReal]\n  gcongr\n  set t := (π.filter (π.tag · ∈ s)).iUnion\n  change abs ((μ t).toReal - (μ (s ∩ I)).toReal) ≤ ε\n  have htU : t ⊆ U ∩ I := by\n    simp only [t, TaggedPrepartition.iUnion_def, iUnion_subset_iff, TaggedPrepartition.mem_filter,\n      and_imp]\n    refine fun J hJ hJs x hx => ⟨hrsU _ ⟨hJs, π.tag_mem_Icc J⟩ ?_, π.le_of_mem' J hJ hx⟩\n    simpa only [r, s.piecewise_eq_of_mem _ _ hJs] using hπ.1 J hJ (Box.coe_subset_Icc hx)\n  refine abs_sub_le_iff.2 ⟨?_, ?_⟩\n  · refine (ENNReal.le_toReal_sub B).trans (ENNReal.toReal_le_coe_of_le_coe ?_)\n    refine (tsub_le_tsub (measure_mono htU) le_rfl).trans (le_measure_diff.trans ?_)\n    refine (measure_mono fun x hx => ?_).trans hμU.le\n    exact ⟨hx.1.1, fun hx' => hx.2 ⟨hx'.1, hx.1.2⟩⟩\n  · have hμt : μ t ≠ ∞ := ((measure_mono (htU.trans inter_subset_left)).trans_lt hUt).ne\n    refine (ENNReal.le_toReal_sub hμt).trans (ENNReal.toReal_le_coe_of_le_coe ?_)\n    refine le_measure_diff.trans ((measure_mono ?_).trans hμF.le)\n    rintro x ⟨⟨hxs, hxI⟩, hxt⟩\n    refine ⟨⟨hxs, Box.coe_subset_Icc hxI⟩, fun hxF => hxt ?_⟩\n    simp only [t, TaggedPrepartition.iUnion_def, TaggedPrepartition.mem_filter, Set.mem_iUnion]\n    rcases hπp x hxI with ⟨J, hJπ, hxJ⟩\n    refine ⟨J, ⟨hJπ, ?_⟩, hxJ⟩\n    contrapose hxF\n    refine hrs'F _ ⟨π.tag_mem_Icc J, hxF⟩ ?_\n    simpa only [r, s.piecewise_eq_of_not_mem _ _ hxF] using hπ.1 J hJπ (Box.coe_subset_Icc hxJ)\n\n"}
{"name":"BoxIntegral.HasIntegral.of_aeEq_zero","module":"Mathlib.Analysis.BoxIntegral.Integrability","initialProofState":"ι : Type u\nE : Type v\ninst✝³ : Fintype ι\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\nl : BoxIntegral.IntegrationParams\nI : BoxIntegral.Box ι\nf : (ι → Real) → E\nμ : MeasureTheory.Measure (ι → Real)\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\nhf : (MeasureTheory.ae (μ.restrict ↑I)).EventuallyEq f 0\nhl : Eq l.bRiemann Bool.false\n⊢ BoxIntegral.HasIntegral I l f μ.toBoxAdditive.toSMul 0","decl":"/-- If `f` is a.e. equal to zero on a rectangular box, then it has McShane integral zero on this\nbox. -/\ntheorem HasIntegral.of_aeEq_zero {l : IntegrationParams} {I : Box ι} {f : (ι → ℝ) → E}\n    {μ : Measure (ι → ℝ)} [IsLocallyFiniteMeasure μ] (hf : f =ᵐ[μ.restrict I] 0)\n    (hl : l.bRiemann = false) : HasIntegral.{u, v, v} I l f μ.toBoxAdditive.toSMul 0 := by\n  /- Each set `{x | n < ‖f x‖ ≤ n + 1}`, `n : ℕ`, has measure zero. We cover it by an open set of\n    measure less than `ε / 2 ^ n / (n + 1)`. Then the norm of the integral sum is less than `ε`. -/\n  refine hasIntegral_iff.2 fun ε ε0 => ?_\n  lift ε to ℝ≥0 using ε0.lt.le; rw [gt_iff_lt, NNReal.coe_pos] at ε0\n  rcases NNReal.exists_pos_sum_of_countable ε0.ne' ℕ with ⟨δ, δ0, c, hδc, hcε⟩\n  haveI := Fact.mk (I.measure_coe_lt_top μ)\n  change μ.restrict I {x | f x ≠ 0} = 0 at hf\n  set N : (ι → ℝ) → ℕ := fun x => ⌈‖f x‖⌉₊\n  have N0 : ∀ {x}, N x = 0 ↔ f x = 0 := by simp [N]\n  have : ∀ n, ∃ U, N ⁻¹' {n} ⊆ U ∧ IsOpen U ∧ μ.restrict I U < δ n / n := fun n ↦ by\n    refine (N ⁻¹' {n}).exists_isOpen_lt_of_lt _ ?_\n    cases' n with n\n    · simp [ENNReal.div_zero (ENNReal.coe_pos.2 (δ0 _)).ne']\n    · refine (measure_mono_null ?_ hf).le.trans_lt ?_\n      · exact fun x hxN hxf => n.succ_ne_zero ((Eq.symm hxN).trans <| N0.2 hxf)\n      · simp [(δ0 _).ne']\n  choose U hNU hUo hμU using this\n  have : ∀ x, ∃ r : Ioi (0 : ℝ), closedBall x r ⊆ U (N x) := fun x => by\n    obtain ⟨r, hr₀, hr⟩ := nhds_basis_closedBall.mem_iff.1 ((hUo _).mem_nhds (hNU _ rfl))\n    exact ⟨⟨r, hr₀⟩, hr⟩\n  choose r hrU using this\n  refine ⟨fun _ => r, fun c => l.rCond_of_bRiemann_eq_false hl, fun c π hπ _ => ?_⟩\n  rw [dist_eq_norm, sub_zero, ← integralSum_fiberwise fun J => N (π.tag J)]\n  refine le_trans ?_ (NNReal.coe_lt_coe.2 hcε).le\n  refine (norm_sum_le_of_le _ ?_).trans\n    (sum_le_hasSum _ (fun n _ => (δ n).2) (NNReal.hasSum_coe.2 hδc))\n  rintro n -\n  dsimp [integralSum]\n  have : ∀ J ∈ π.filter fun J => N (π.tag J) = n,\n      ‖(μ ↑J).toReal • f (π.tag J)‖ ≤ (μ J).toReal * n := fun J hJ ↦ by\n    rw [TaggedPrepartition.mem_filter] at hJ\n    rw [norm_smul, Real.norm_eq_abs, abs_of_nonneg ENNReal.toReal_nonneg]\n    gcongr\n    exact hJ.2 ▸ Nat.le_ceil _\n  refine (norm_sum_le_of_le _ this).trans ?_; clear this\n  rw [← sum_mul, ← Prepartition.measure_iUnion_toReal]\n  let m := μ (π.filter fun J => N (π.tag J) = n).iUnion\n  show m.toReal * ↑n ≤ ↑(δ n)\n  have : m < δ n / n := by\n    simp only [Measure.restrict_apply (hUo _).measurableSet] at hμU\n    refine (measure_mono ?_).trans_lt (hμU _)\n    simp only [Set.subset_def, TaggedPrepartition.mem_iUnion, TaggedPrepartition.mem_filter]\n    rintro x ⟨J, ⟨hJ, rfl⟩, hx⟩\n    exact ⟨hrU _ (hπ.1 _ hJ (Box.coe_subset_Icc hx)), π.le_of_mem' J hJ hx⟩\n  clear_value m\n  lift m to ℝ≥0 using ne_top_of_lt this\n  rw [ENNReal.coe_toReal, ← NNReal.coe_natCast, ← NNReal.coe_mul, NNReal.coe_le_coe, ←\n    ENNReal.coe_le_coe, ENNReal.coe_mul, ENNReal.coe_natCast, mul_comm]\n  exact (mul_le_mul_left' this.le _).trans ENNReal.mul_div_le\n\n"}
{"name":"BoxIntegral.HasIntegral.congr_ae","module":"Mathlib.Analysis.BoxIntegral.Integrability","initialProofState":"ι : Type u\nE : Type v\ninst✝³ : Fintype ι\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\nl : BoxIntegral.IntegrationParams\nI : BoxIntegral.Box ι\ny : E\nf g : (ι → Real) → E\nμ : MeasureTheory.Measure (ι → Real)\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\nhf : BoxIntegral.HasIntegral I l f μ.toBoxAdditive.toSMul y\nhfg : (MeasureTheory.ae (μ.restrict ↑I)).EventuallyEq f g\nhl : Eq l.bRiemann Bool.false\n⊢ BoxIntegral.HasIntegral I l g μ.toBoxAdditive.toSMul y","decl":"/-- If `f` has integral `y` on a box `I` with respect to a locally finite measure `μ` and `g` is\na.e. equal to `f` on `I`, then `g` has the same integral on `I`. -/\ntheorem HasIntegral.congr_ae {l : IntegrationParams} {I : Box ι} {y : E} {f g : (ι → ℝ) → E}\n    {μ : Measure (ι → ℝ)} [IsLocallyFiniteMeasure μ]\n    (hf : HasIntegral.{u, v, v} I l f μ.toBoxAdditive.toSMul y) (hfg : f =ᵐ[μ.restrict I] g)\n    (hl : l.bRiemann = false) : HasIntegral.{u, v, v} I l g μ.toBoxAdditive.toSMul y := by\n  have : g - f =ᵐ[μ.restrict I] 0 := hfg.mono fun x hx => sub_eq_zero.2 hx.symm\n  simpa using hf.add (HasIntegral.of_aeEq_zero this hl)\n\n"}
{"name":"MeasureTheory.SimpleFunc.hasBoxIntegral","module":"Mathlib.Analysis.BoxIntegral.Integrability","initialProofState":"ι : Type u\nE : Type v\ninst✝³ : Fintype ι\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\nf : MeasureTheory.SimpleFunc (ι → Real) E\nμ : MeasureTheory.Measure (ι → Real)\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\nI : BoxIntegral.Box ι\nl : BoxIntegral.IntegrationParams\nhl : Eq l.bRiemann Bool.false\n⊢ BoxIntegral.HasIntegral I l (⇑f) μ.toBoxAdditive.toSMul (MeasureTheory.SimpleFunc.integral (μ.restrict ↑I) f)","decl":"/-- A simple function is McShane integrable w.r.t. any locally finite measure. -/\ntheorem hasBoxIntegral (f : SimpleFunc (ι → ℝ) E) (μ : Measure (ι → ℝ)) [IsLocallyFiniteMeasure μ]\n    (I : Box ι) (l : IntegrationParams) (hl : l.bRiemann = false) :\n    HasIntegral.{u, v, v} I l f μ.toBoxAdditive.toSMul (f.integral (μ.restrict I)) := by\n  induction' f using MeasureTheory.SimpleFunc.induction with y s hs f g _ hfi hgi\n  · simpa only [Measure.restrict_apply hs, const_zero, integral_piecewise_zero, integral_const,\n      Measure.restrict_apply, MeasurableSet.univ, Set.univ_inter] using\n      BoxIntegral.hasIntegralIndicatorConst l hl hs I y μ\n  · borelize E; haveI := Fact.mk (I.measure_coe_lt_top μ)\n    rw [integral_add]\n    exacts [hfi.add hgi, integrable_iff.2 fun _ _ => measure_lt_top _ _,\n      integrable_iff.2 fun _ _ => measure_lt_top _ _]\n\n"}
{"name":"MeasureTheory.SimpleFunc.box_integral_eq_integral","module":"Mathlib.Analysis.BoxIntegral.Integrability","initialProofState":"ι : Type u\nE : Type v\ninst✝³ : Fintype ι\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\nf : MeasureTheory.SimpleFunc (ι → Real) E\nμ : MeasureTheory.Measure (ι → Real)\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\nI : BoxIntegral.Box ι\nl : BoxIntegral.IntegrationParams\nhl : Eq l.bRiemann Bool.false\n⊢ Eq (BoxIntegral.integral I l (⇑f) μ.toBoxAdditive.toSMul) (MeasureTheory.SimpleFunc.integral (μ.restrict ↑I) f)","decl":"/-- For a simple function, its McShane (or Henstock, or `⊥`) box integral is equal to its\nintegral in the sense of `MeasureTheory.SimpleFunc.integral`. -/\ntheorem box_integral_eq_integral (f : SimpleFunc (ι → ℝ) E) (μ : Measure (ι → ℝ))\n    [IsLocallyFiniteMeasure μ] (I : Box ι) (l : IntegrationParams) (hl : l.bRiemann = false) :\n    BoxIntegral.integral.{u, v, v} I l f μ.toBoxAdditive.toSMul = f.integral (μ.restrict I) :=\n  (f.hasBoxIntegral μ I l hl).integral_eq\n\n"}
{"name":"MeasureTheory.IntegrableOn.hasBoxIntegral","module":"Mathlib.Analysis.BoxIntegral.Integrability","initialProofState":"ι : Type u\nE : Type v\ninst✝⁴ : Fintype ι\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : (ι → Real) → E\nμ : MeasureTheory.Measure (ι → Real)\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\nI : BoxIntegral.Box ι\nhf : MeasureTheory.IntegrableOn f (↑I) μ\nl : BoxIntegral.IntegrationParams\nhl : Eq l.bRiemann Bool.false\n⊢ BoxIntegral.HasIntegral I l f μ.toBoxAdditive.toSMul (MeasureTheory.integral (μ.restrict ↑I) fun x => f x)","decl":"/-- If `f : ℝⁿ → E` is Bochner integrable w.r.t. a locally finite measure `μ` on a rectangular box\n`I`, then it is McShane integrable on `I` with the same integral. -/\ntheorem IntegrableOn.hasBoxIntegral [CompleteSpace E] {f : (ι → ℝ) → E} {μ : Measure (ι → ℝ)}\n    [IsLocallyFiniteMeasure μ] {I : Box ι} (hf : IntegrableOn f I μ) (l : IntegrationParams)\n    (hl : l.bRiemann = false) :\n    HasIntegral.{u, v, v} I l f μ.toBoxAdditive.toSMul (∫ x in I, f x ∂μ) := by\n  borelize E\n  -- First we replace an `ae_strongly_measurable` function by a measurable one.\n  rcases hf.aestronglyMeasurable with ⟨g, hg, hfg⟩\n  haveI : SeparableSpace (range g ∪ {0} : Set E) := hg.separableSpace_range_union_singleton\n  rw [integral_congr_ae hfg]; have hgi : IntegrableOn g I μ := (integrable_congr hfg).1 hf\n  refine BoxIntegral.HasIntegral.congr_ae ?_ hfg.symm hl\n  clear! f\n  /- Now consider the sequence of simple functions\n    `SimpleFunc.approxOn g hg.measurable (range g ∪ {0}) 0 (by simp)`\n    approximating `g`. Recall some properties of this sequence. -/\n  set f : ℕ → SimpleFunc (ι → ℝ) E :=\n    SimpleFunc.approxOn g hg.measurable (range g ∪ {0}) 0 (by simp)\n  have hfi : ∀ n, IntegrableOn (f n) I μ :=\n    SimpleFunc.integrable_approxOn_range hg.measurable hgi\n  have hfi' := fun n => ((f n).hasBoxIntegral μ I l hl).integrable\n  have hfg_mono : ∀ (x) {m n}, m ≤ n → ‖f n x - g x‖ ≤ ‖f m x - g x‖ := by\n    intro x m n hmn\n    rw [← dist_eq_norm, ← dist_eq_norm, dist_nndist, dist_nndist, NNReal.coe_le_coe, ←\n      ENNReal.coe_le_coe, ← edist_nndist, ← edist_nndist]\n    exact SimpleFunc.edist_approxOn_mono hg.measurable _ x hmn\n  /- Now consider `ε > 0`. We need to find `r` such that for any tagged partition subordinate\n    to `r`, the integral sum is `(μ I + 1 + 1) * ε`-close to the Bochner integral. -/\n  refine HasIntegral.of_mul ((μ I).toReal + 1 + 1) fun ε ε0 => ?_\n  lift ε to ℝ≥0 using ε0.le; rw [NNReal.coe_pos] at ε0; have ε0' := ENNReal.coe_pos.2 ε0\n  -- Choose `N` such that the integral of `‖f N x - g x‖` is less than or equal to `ε`.\n  obtain ⟨N₀, hN₀⟩ : ∃ N : ℕ, ∫ x in I, ‖f N x - g x‖ ∂μ ≤ ε := by\n    have : Tendsto (fun n => ∫⁻ x in I, ‖f n x - g x‖₊ ∂μ) atTop (𝓝 0) :=\n      SimpleFunc.tendsto_approxOn_range_L1_enorm hg.measurable hgi\n    refine (this.eventually (ge_mem_nhds ε0')).exists.imp fun N hN => ?_\n    exact integral_coe_le_of_lintegral_coe_le hN\n  -- For each `x`, we choose `Nx x ≥ N₀` such that `dist (f Nx x) (g x) ≤ ε`.\n  have : ∀ x, ∃ N₁, N₀ ≤ N₁ ∧ dist (f N₁ x) (g x) ≤ ε := fun x ↦ by\n    have : Tendsto (f · x) atTop (𝓝 <| g x) :=\n      SimpleFunc.tendsto_approxOn hg.measurable _ (subset_closure (by simp))\n    exact ((eventually_ge_atTop N₀).and <| this <| closedBall_mem_nhds _ ε0).exists\n  choose Nx hNx hNxε using this\n  -- We also choose a convergent series with `∑' i : ℕ, δ i < ε`.\n  rcases NNReal.exists_pos_sum_of_countable ε0.ne' ℕ with ⟨δ, δ0, c, hδc, hcε⟩\n  /- Since each simple function `fᵢ` is integrable, there exists `rᵢ : ℝⁿ → (0, ∞)` such that\n    the integral sum of `f` over any tagged prepartition is `δᵢ`-close to the sum of integrals\n    of `fᵢ` over the boxes of this prepartition. For each `x`, we choose `r (Nx x)` as the radius\n    at `x`. -/\n  set r : ℝ≥0 → (ι → ℝ) → Ioi (0 : ℝ) := fun c x => (hfi' <| Nx x).convergenceR (δ <| Nx x) c x\n  refine ⟨r, fun c => l.rCond_of_bRiemann_eq_false hl, fun c π hπ hπp => ?_⟩\n  /- Now we prove the estimate in 3 \"jumps\": first we replace `g x` in the formula for the\n    integral sum by `f (Nx x)`; then we replace each `μ J • f (Nx (π.tag J)) (π.tag J)`\n    by the Bochner integral of `f (Nx (π.tag J)) x` over `J`, then we jump to the Bochner\n    integral of `g`. -/\n  refine (dist_triangle4 _ (∑ J ∈ π.boxes, (μ J).toReal • f (Nx <| π.tag J) (π.tag J))\n    (∑ J ∈ π.boxes, ∫ x in J, f (Nx <| π.tag J) x ∂μ) _).trans ?_\n  rw [add_mul, add_mul, one_mul]\n  refine add_le_add_three ?_ ?_ ?_\n  · /- Since each `f (Nx <| π.tag J)` is `ε`-close to `g (π.tag J)`, replacing the latter with\n        the former in the formula for the integral sum changes the sum at most by `μ I * ε`. -/\n    rw [← hπp.iUnion_eq, π.measure_iUnion_toReal, sum_mul, integralSum]\n    refine dist_sum_sum_le_of_le _ fun J _ => ?_; dsimp\n    rw [dist_eq_norm, ← smul_sub, norm_smul, Real.norm_eq_abs, abs_of_nonneg ENNReal.toReal_nonneg]\n    gcongr\n    rw [← dist_eq_norm']; exact hNxε _\n  · /- We group the terms of both sums by the values of `Nx (π.tag J)`.\n        For each `N`, the sum of Bochner integrals over the boxes is equal\n        to the sum of box integrals, and the sum of box integrals is `δᵢ`-close\n        to the corresponding integral sum due to the Henstock-Sacks inequality. -/\n    rw [← π.sum_fiberwise fun J => Nx (π.tag J), ← π.sum_fiberwise fun J => Nx (π.tag J)]\n    refine le_trans ?_ (NNReal.coe_lt_coe.2 hcε).le\n    refine\n      (dist_sum_sum_le_of_le _ fun n hn => ?_).trans\n        (sum_le_hasSum _ (fun n _ => (δ n).2) (NNReal.hasSum_coe.2 hδc))\n    have hNxn : ∀ J ∈ π.filter fun J => Nx (π.tag J) = n, Nx (π.tag J) = n := fun J hJ =>\n      (π.mem_filter.1 hJ).2\n    have hrn : ∀ J ∈ π.filter fun J => Nx (π.tag J) = n,\n        r c (π.tag J) = (hfi' n).convergenceR (δ n) c (π.tag J) := fun J hJ ↦ by\n      obtain rfl := hNxn J hJ\n      rfl\n    have :\n        l.MemBaseSet I c ((hfi' n).convergenceR (δ n) c) (π.filter fun J => Nx (π.tag J) = n) :=\n      (hπ.filter _).mono' _ le_rfl le_rfl fun J hJ => (hrn J hJ).le\n    convert (hfi' n).dist_integralSum_sum_integral_le_of_memBaseSet (δ0 _) this using 2\n    · refine sum_congr rfl fun J hJ => ?_\n      simp [hNxn J hJ]\n    · refine sum_congr rfl fun J hJ => ?_\n      rw [← SimpleFunc.integral_eq_integral, SimpleFunc.box_integral_eq_integral _ _ _ _ hl,\n        hNxn J hJ]\n      exact (hfi _).mono_set (Prepartition.le_of_mem _ hJ)\n  · /-  For the last jump, we use the fact that the distance between `f (Nx x) x` and `g x` is less\n        than or equal to the distance between `f N₀ x` and `g x` and the integral of\n        `‖f N₀ x - g x‖` is less than or equal to `ε`. -/\n    refine le_trans ?_ hN₀\n    have hfi : ∀ (n), ∀ J ∈ π, IntegrableOn (f n) (↑J) μ := fun n J hJ =>\n      (hfi n).mono_set (π.le_of_mem' J hJ)\n    have hgi : ∀ J ∈ π, IntegrableOn g (↑J) μ := fun J hJ => hgi.mono_set (π.le_of_mem' J hJ)\n    have hfgi : ∀ (n), ∀ J ∈ π, IntegrableOn (fun x => ‖f n x - g x‖) J μ := fun n J hJ =>\n      ((hfi n J hJ).sub (hgi J hJ)).norm\n    rw [← hπp.iUnion_eq, Prepartition.iUnion_def',\n      integral_finset_biUnion π.boxes (fun J _ => J.measurableSet_coe) π.pairwiseDisjoint hgi,\n      integral_finset_biUnion π.boxes (fun J _ => J.measurableSet_coe) π.pairwiseDisjoint (hfgi _)]\n    refine dist_sum_sum_le_of_le _ fun J hJ => ?_\n    rw [dist_eq_norm, ← integral_sub (hfi _ J hJ) (hgi J hJ)]\n    refine norm_integral_le_of_norm_le (hfgi _ J hJ) (Eventually.of_forall fun x => ?_)\n    exact hfg_mono x (hNx (π.tag J))\n\n"}
{"name":"MeasureTheory.ContinuousOn.hasBoxIntegral","module":"Mathlib.Analysis.BoxIntegral.Integrability","initialProofState":"ι : Type u\nE : Type v\ninst✝⁴ : Fintype ι\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : (ι → Real) → E\nμ : MeasureTheory.Measure (ι → Real)\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\nI : BoxIntegral.Box ι\nhc : ContinuousOn f (BoxIntegral.Box.Icc I)\nl : BoxIntegral.IntegrationParams\n⊢ BoxIntegral.HasIntegral I l f μ.toBoxAdditive.toSMul (MeasureTheory.integral (μ.restrict ↑I) fun x => f x)","decl":"/-- If `f : ℝⁿ → E` is continuous on a rectangular box `I`, then it is Box integrable on `I`\nw.r.t. a locally finite measure `μ` with the same integral. -/\ntheorem ContinuousOn.hasBoxIntegral [CompleteSpace E] {f : (ι → ℝ) → E} (μ : Measure (ι → ℝ))\n    [IsLocallyFiniteMeasure μ] {I : Box ι} (hc : ContinuousOn f (Box.Icc I))\n    (l : IntegrationParams) :\n    HasIntegral.{u, v, v} I l f μ.toBoxAdditive.toSMul (∫ x in I, f x ∂μ) := by\n  obtain ⟨y, hy⟩ := BoxIntegral.integrable_of_continuousOn l hc μ\n  convert hy\n  have : IntegrableOn f I μ :=\n    IntegrableOn.mono_set (hc.integrableOn_compact I.isCompact_Icc) Box.coe_subset_Icc\n  exact HasIntegral.unique (IntegrableOn.hasBoxIntegral this ⊥ rfl) (HasIntegral.mono hy bot_le)\n\n"}
{"name":"MeasureTheory.AEContinuous.hasBoxIntegral","module":"Mathlib.Analysis.BoxIntegral.Integrability","initialProofState":"ι : Type u\nE : Type v\ninst✝⁴ : Fintype ι\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : (ι → Real) → E\nμ : MeasureTheory.Measure (ι → Real)\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\nI : BoxIntegral.Box ι\nhb : Exists fun C => ∀ (x : ι → Real), Membership.mem (BoxIntegral.Box.Icc I) x → LE.le (Norm.norm (f x)) C\nhc : Filter.Eventually (fun x => ContinuousAt f x) (MeasureTheory.ae μ)\nl : BoxIntegral.IntegrationParams\n⊢ BoxIntegral.HasIntegral I l f μ.toBoxAdditive.toSMul (MeasureTheory.integral (μ.restrict ↑I) fun x => f x)","decl":"/-- If `f : ℝⁿ → E` is a.e. continuous and bounded on a rectangular box `I`, then it is Box\n    integrable on `I` w.r.t. a locally finite measure `μ` with the same integral. -/\ntheorem AEContinuous.hasBoxIntegral [CompleteSpace E] {f : (ι → ℝ) → E} (μ : Measure (ι → ℝ))\n    [IsLocallyFiniteMeasure μ] {I : Box ι} (hb : ∃ C : ℝ, ∀ x ∈ Box.Icc I, ‖f x‖ ≤ C)\n    (hc : ∀ᵐ x ∂μ, ContinuousAt f x) (l : IntegrationParams) :\n    HasIntegral.{u, v, v} I l f μ.toBoxAdditive.toSMul (∫ x in I, f x ∂μ) := by\n  obtain ⟨y, hy⟩ := integrable_of_bounded_and_ae_continuous l hb μ hc\n  convert hy\n  refine HasIntegral.unique (IntegrableOn.hasBoxIntegral ?_ ⊥ rfl) (HasIntegral.mono hy bot_le)\n  constructor\n  · let v := {x : (ι → ℝ) | ContinuousAt f x}\n    have : AEStronglyMeasurable f (μ.restrict v) :=\n      (continuousOn_of_forall_continuousAt fun _ h ↦ h).aestronglyMeasurable\n      (measurableSet_of_continuousAt f)\n    refine this.mono_measure (Measure.le_iff.2 fun s hs ↦ ?_)\n    repeat rw [μ.restrict_apply hs]\n    apply le_of_le_of_eq <| μ.mono s.inter_subset_left\n    refine measure_eq_measure_of_null_diff s.inter_subset_left ?_ |>.symm\n    rw [diff_self_inter, Set.diff_eq]\n    refine (le_antisymm (zero_le (μ (s ∩ vᶜ))) ?_).symm\n    exact le_trans (μ.mono s.inter_subset_right) (nonpos_iff_eq_zero.2 hc)\n  · have : IsFiniteMeasure (μ.restrict (Box.Icc I)) :=\n      { measure_univ_lt_top := by simp [I.isCompact_Icc.measure_lt_top (μ := μ)] }\n    have : IsFiniteMeasure (μ.restrict I) :=\n      isFiniteMeasure_of_le (μ.restrict (Box.Icc I))\n                            (μ.restrict_mono Box.coe_subset_Icc (le_refl μ))\n    obtain ⟨C, hC⟩ := hb\n    refine hasFiniteIntegral_of_bounded (C := C) (Filter.eventually_iff_exists_mem.2 ?_)\n    use I, self_mem_ae_restrict I.measurableSet_coe, fun y hy ↦ hC y (I.coe_subset_Icc hy)\n\n"}
