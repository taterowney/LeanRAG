{"name":"ContinuousAlternatingMap.isClosed_range_toContinuousMultilinearMap","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : AddCommGroup E\ninst✝⁷ : Module 𝕜 E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : AddCommGroup F\ninst✝⁴ : Module 𝕜 F\ninst✝³ : TopologicalSpace F\ninst✝² : TopologicalAddGroup F\ninst✝¹ : ContinuousSMul 𝕜 E\ninst✝ : T2Space F\n⊢ IsClosed (Set.range ContinuousAlternatingMap.toContinuousMultilinearMap)","decl":"lemma isClosed_range_toContinuousMultilinearMap [ContinuousSMul 𝕜 E] [T2Space F] :\n    IsClosed (Set.range (toContinuousMultilinearMap : (E [⋀^ι]→L[𝕜] F) →\n      ContinuousMultilinearMap 𝕜 (fun _ : ι ↦ E) F)) := by\n  simp only [range_toContinuousMultilinearMap, setOf_forall]\n  repeat refine isClosed_iInter fun _ ↦ ?_\n  exact isClosed_singleton.preimage (continuous_eval_const _)\n\n"}
{"name":"ContinuousAlternatingMap.isUniformEmbedding_toContinuousMultilinearMap","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜 F\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n⊢ IsUniformEmbedding ContinuousAlternatingMap.toContinuousMultilinearMap","decl":"lemma isUniformEmbedding_toContinuousMultilinearMap :\n    IsUniformEmbedding (toContinuousMultilinearMap : (E [⋀^ι]→L[𝕜] F) → _) where\n  injective := toContinuousMultilinearMap_injective\n  comap_uniformity := rfl\n\n"}
{"name":"ContinuousAlternatingMap.uniformEmbedding_toContinuousMultilinearMap","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜 F\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n⊢ IsUniformEmbedding ContinuousAlternatingMap.toContinuousMultilinearMap","decl":"@[deprecated (since := \"2024-10-01\")]\nalias uniformEmbedding_toContinuousMultilinearMap := isUniformEmbedding_toContinuousMultilinearMap\n\n"}
{"name":"ContinuousAlternatingMap.uniformContinuous_toContinuousMultilinearMap","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜 F\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n⊢ UniformContinuous ContinuousAlternatingMap.toContinuousMultilinearMap","decl":"lemma uniformContinuous_toContinuousMultilinearMap :\n    UniformContinuous (toContinuousMultilinearMap : (E [⋀^ι]→L[𝕜] F) → _) :=\n  isUniformEmbedding_toContinuousMultilinearMap.uniformContinuous\n\n"}
{"name":"ContinuousAlternatingMap.uniformContinuous_coe_fun","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : TopologicalSpace E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : UniformSpace F\ninst✝¹ : UniformAddGroup F\ninst✝ : ContinuousSMul 𝕜 E\n⊢ UniformContinuous DFunLike.coe","decl":"theorem uniformContinuous_coe_fun [ContinuousSMul 𝕜 E] :\n    UniformContinuous (DFunLike.coe : (E [⋀^ι]→L[𝕜] F) → (ι → E) → F) :=\n  ContinuousMultilinearMap.uniformContinuous_coe_fun.comp\n    uniformContinuous_toContinuousMultilinearMap\n\n"}
{"name":"ContinuousAlternatingMap.uniformContinuous_eval_const","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : TopologicalSpace E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : UniformSpace F\ninst✝¹ : UniformAddGroup F\ninst✝ : ContinuousSMul 𝕜 E\nx : ι → E\n⊢ UniformContinuous fun f => f x","decl":"theorem uniformContinuous_eval_const [ContinuousSMul 𝕜 E] (x : ι → E) :\n    UniformContinuous fun f : E [⋀^ι]→L[𝕜] F ↦ f x :=\n  uniformContinuous_pi.1 uniformContinuous_coe_fun x\n\n"}
{"name":"ContinuousAlternatingMap.instUniformAddGroup","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜 F\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n⊢ UniformAddGroup (ContinuousAlternatingMap 𝕜 E F ι)","decl":"instance instUniformAddGroup : UniformAddGroup (E [⋀^ι]→L[𝕜] F) :=\n  isUniformEmbedding_toContinuousMultilinearMap.uniformAddGroup\n    (toContinuousMultilinearMapLinear (R := ℕ))\n\n"}
{"name":"ContinuousAlternatingMap.instUniformContinuousConstSMul","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝¹¹ : NormedField 𝕜\ninst✝¹⁰ : AddCommGroup E\ninst✝⁹ : Module 𝕜 E\ninst✝⁸ : TopologicalSpace E\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : Module 𝕜 F\ninst✝⁵ : UniformSpace F\ninst✝⁴ : UniformAddGroup F\nM : Type u_5\ninst✝³ : Monoid M\ninst✝² : DistribMulAction M F\ninst✝¹ : SMulCommClass 𝕜 M F\ninst✝ : ContinuousConstSMul M F\n⊢ UniformContinuousConstSMul M (ContinuousAlternatingMap 𝕜 E F ι)","decl":"instance instUniformContinuousConstSMul {M : Type*}\n    [Monoid M] [DistribMulAction M F] [SMulCommClass 𝕜 M F] [ContinuousConstSMul M F] :\n    UniformContinuousConstSMul M (E [⋀^ι]→L[𝕜] F) :=\n  isUniformEmbedding_toContinuousMultilinearMap.uniformContinuousConstSMul fun _ _ ↦ rfl\n\n"}
{"name":"ContinuousAlternatingMap.isUniformInducing_postcomp","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝¹¹ : NormedField 𝕜\ninst✝¹⁰ : AddCommGroup E\ninst✝⁹ : Module 𝕜 E\ninst✝⁸ : TopologicalSpace E\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : Module 𝕜 F\ninst✝⁵ : UniformSpace F\ninst✝⁴ : UniformAddGroup F\nG : Type u_5\ninst✝³ : AddCommGroup G\ninst✝² : UniformSpace G\ninst✝¹ : UniformAddGroup G\ninst✝ : Module 𝕜 G\ng : ContinuousLinearMap (RingHom.id 𝕜) F G\nhg : IsUniformInducing ⇑g\n⊢ IsUniformInducing g.compContinuousAlternatingMap","decl":"theorem isUniformInducing_postcomp {G : Type*} [AddCommGroup G] [UniformSpace G] [UniformAddGroup G]\n    [Module 𝕜 G] (g : F →L[𝕜] G) (hg : IsUniformInducing g) :\n    IsUniformInducing (g.compContinuousAlternatingMap : (E [⋀^ι]→L[𝕜] F) → (E [⋀^ι]→L[𝕜] G)) := by\n  rw [← isUniformEmbedding_toContinuousMultilinearMap.1.of_comp_iff]\n  exact (ContinuousMultilinearMap.isUniformInducing_postcomp g hg).comp\n    isUniformEmbedding_toContinuousMultilinearMap.1\n\n"}
{"name":"ContinuousAlternatingMap.completeSpace","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝¹⁰ : NormedField 𝕜\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : AddCommGroup F\ninst✝⁵ : Module 𝕜 F\ninst✝⁴ : UniformSpace F\ninst✝³ : UniformAddGroup F\ninst✝² : ContinuousSMul 𝕜 E\ninst✝¹ : ContinuousConstSMul 𝕜 F\ninst✝ : CompleteSpace F\nh : Topology.RestrictGenTopology (setOf fun s => Bornology.IsVonNBounded 𝕜 s)\n⊢ CompleteSpace (ContinuousAlternatingMap 𝕜 E F ι)","decl":"open UniformOnFun in\ntheorem completeSpace (h : RestrictGenTopology {s : Set (ι → E) | IsVonNBounded 𝕜 s}) :\n    CompleteSpace (E [⋀^ι]→L[𝕜] F) := by\n  wlog hF : T2Space F generalizing F\n  · rw [(isUniformInducing_postcomp (SeparationQuotient.mkCLM _ _)\n      SeparationQuotient.isUniformInducing_mk).completeSpace_congr]\n    · exact this inferInstance\n    · intro f\n      use (SeparationQuotient.outCLM _ _).compContinuousAlternatingMap f\n      ext\n      simp\n  have := ContinuousMultilinearMap.completeSpace (F := F) h\n  rw [completeSpace_iff_isComplete_range\n    isUniformEmbedding_toContinuousMultilinearMap.isUniformInducing]\n  apply isClosed_range_toContinuousMultilinearMap.isComplete\n\n"}
{"name":"ContinuousAlternatingMap.instCompleteSpace","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝¹² : NormedField 𝕜\ninst✝¹¹ : AddCommGroup E\ninst✝¹⁰ : Module 𝕜 E\ninst✝⁹ : TopologicalSpace E\ninst✝⁸ : AddCommGroup F\ninst✝⁷ : Module 𝕜 F\ninst✝⁶ : UniformSpace F\ninst✝⁵ : UniformAddGroup F\ninst✝⁴ : ContinuousSMul 𝕜 E\ninst✝³ : ContinuousConstSMul 𝕜 F\ninst✝² : CompleteSpace F\ninst✝¹ : TopologicalAddGroup E\ninst✝ : SequentialSpace (ι → E)\n⊢ CompleteSpace (ContinuousAlternatingMap 𝕜 E F ι)","decl":"instance instCompleteSpace [TopologicalAddGroup E] [SequentialSpace (ι → E)] :\n    CompleteSpace (E [⋀^ι]→L[𝕜] F) :=\n  completeSpace <| .of_seq fun _u x hux ↦ (hux.isVonNBounded_range 𝕜).insert x\n\n"}
{"name":"ContinuousAlternatingMap.isUniformEmbedding_restrictScalars","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝¹⁴ : NormedField 𝕜\ninst✝¹³ : AddCommGroup E\ninst✝¹² : Module 𝕜 E\ninst✝¹¹ : TopologicalSpace E\ninst✝¹⁰ : AddCommGroup F\ninst✝⁹ : Module 𝕜 F\ninst✝⁸ : UniformSpace F\ninst✝⁷ : UniformAddGroup F\n𝕜' : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜'\ninst✝⁵ : NormedAlgebra 𝕜' 𝕜\ninst✝⁴ : Module 𝕜' E\ninst✝³ : IsScalarTower 𝕜' 𝕜 E\ninst✝² : Module 𝕜' F\ninst✝¹ : IsScalarTower 𝕜' 𝕜 F\ninst✝ : ContinuousSMul 𝕜 E\n⊢ IsUniformEmbedding (ContinuousAlternatingMap.restrictScalars 𝕜')","decl":"theorem isUniformEmbedding_restrictScalars :\n    IsUniformEmbedding (restrictScalars 𝕜' : E [⋀^ι]→L[𝕜] F → E [⋀^ι]→L[𝕜'] F) := by\n  rw [← isUniformEmbedding_toContinuousMultilinearMap.of_comp_iff]\n  exact (ContinuousMultilinearMap.isUniformEmbedding_restrictScalars 𝕜').comp\n    isUniformEmbedding_toContinuousMultilinearMap\n\n"}
{"name":"ContinuousAlternatingMap.uniformEmbedding_restrictScalars","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝¹⁴ : NormedField 𝕜\ninst✝¹³ : AddCommGroup E\ninst✝¹² : Module 𝕜 E\ninst✝¹¹ : TopologicalSpace E\ninst✝¹⁰ : AddCommGroup F\ninst✝⁹ : Module 𝕜 F\ninst✝⁸ : UniformSpace F\ninst✝⁷ : UniformAddGroup F\n𝕜' : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜'\ninst✝⁵ : NormedAlgebra 𝕜' 𝕜\ninst✝⁴ : Module 𝕜' E\ninst✝³ : IsScalarTower 𝕜' 𝕜 E\ninst✝² : Module 𝕜' F\ninst✝¹ : IsScalarTower 𝕜' 𝕜 F\ninst✝ : ContinuousSMul 𝕜 E\n⊢ IsUniformEmbedding (ContinuousAlternatingMap.restrictScalars 𝕜')","decl":"@[deprecated (since := \"2024-10-01\")]\nalias uniformEmbedding_restrictScalars := isUniformEmbedding_restrictScalars\n\n"}
{"name":"ContinuousAlternatingMap.uniformContinuous_restrictScalars","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝¹⁴ : NormedField 𝕜\ninst✝¹³ : AddCommGroup E\ninst✝¹² : Module 𝕜 E\ninst✝¹¹ : TopologicalSpace E\ninst✝¹⁰ : AddCommGroup F\ninst✝⁹ : Module 𝕜 F\ninst✝⁸ : UniformSpace F\ninst✝⁷ : UniformAddGroup F\n𝕜' : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜'\ninst✝⁵ : NormedAlgebra 𝕜' 𝕜\ninst✝⁴ : Module 𝕜' E\ninst✝³ : IsScalarTower 𝕜' 𝕜 E\ninst✝² : Module 𝕜' F\ninst✝¹ : IsScalarTower 𝕜' 𝕜 F\ninst✝ : ContinuousSMul 𝕜 E\n⊢ UniformContinuous (ContinuousAlternatingMap.restrictScalars 𝕜')","decl":"theorem uniformContinuous_restrictScalars :\n    UniformContinuous (restrictScalars 𝕜' : E [⋀^ι]→L[𝕜] F → E [⋀^ι]→L[𝕜'] F) :=\n  (isUniformEmbedding_restrictScalars 𝕜').uniformContinuous\n\n"}
{"name":"ContinuousAlternatingMap.isEmbedding_toContinuousMultilinearMap","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\n⊢ Topology.IsEmbedding ContinuousAlternatingMap.toContinuousMultilinearMap","decl":"lemma isEmbedding_toContinuousMultilinearMap :\n    IsEmbedding (toContinuousMultilinearMap : (E [⋀^ι]→L[𝕜] F → _)) :=\n  letI := TopologicalAddGroup.toUniformSpace F\n  haveI := comm_topologicalAddGroup_is_uniform (G := F)\n  isUniformEmbedding_toContinuousMultilinearMap.isEmbedding\n\n"}
{"name":"ContinuousAlternatingMap.embedding_toContinuousMultilinearMap","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\n⊢ Topology.IsEmbedding ContinuousAlternatingMap.toContinuousMultilinearMap","decl":"@[deprecated (since := \"2024-10-26\")]\nalias embedding_toContinuousMultilinearMap := isEmbedding_toContinuousMultilinearMap\n\n"}
{"name":"ContinuousAlternatingMap.instTopologicalAddGroup","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\n⊢ TopologicalAddGroup (ContinuousAlternatingMap 𝕜 E F ι)","decl":"instance instTopologicalAddGroup : TopologicalAddGroup (E [⋀^ι]→L[𝕜] F) :=\n  isEmbedding_toContinuousMultilinearMap.topologicalAddGroup\n    (toContinuousMultilinearMapLinear (R := ℕ))\n\n"}
{"name":"ContinuousAlternatingMap.continuous_toContinuousMultilinearMap","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\n⊢ Continuous ContinuousAlternatingMap.toContinuousMultilinearMap","decl":"@[continuity, fun_prop]\nlemma continuous_toContinuousMultilinearMap :\n    Continuous (toContinuousMultilinearMap : (E [⋀^ι]→L[𝕜] F → _)) :=\n  isEmbedding_toContinuousMultilinearMap.continuous\n\n"}
{"name":"ContinuousAlternatingMap.instContinuousConstSMul","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝¹¹ : NormedField 𝕜\ninst✝¹⁰ : AddCommGroup E\ninst✝⁹ : Module 𝕜 E\ninst✝⁸ : TopologicalSpace E\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : Module 𝕜 F\ninst✝⁵ : TopologicalSpace F\ninst✝⁴ : TopologicalAddGroup F\nM : Type u_5\ninst✝³ : Monoid M\ninst✝² : DistribMulAction M F\ninst✝¹ : SMulCommClass 𝕜 M F\ninst✝ : ContinuousConstSMul M F\n⊢ ContinuousConstSMul M (ContinuousAlternatingMap 𝕜 E F ι)","decl":"instance instContinuousConstSMul\n    {M : Type*} [Monoid M] [DistribMulAction M F] [SMulCommClass 𝕜 M F] [ContinuousConstSMul M F] :\n    ContinuousConstSMul M (E [⋀^ι]→L[𝕜] F) :=\n  isEmbedding_toContinuousMultilinearMap.continuousConstSMul id rfl\n\n"}
{"name":"ContinuousAlternatingMap.instContinuousSMul","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : TopologicalSpace E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousSMul 𝕜 F\n⊢ ContinuousSMul 𝕜 (ContinuousAlternatingMap 𝕜 E F ι)","decl":"instance instContinuousSMul [ContinuousSMul 𝕜 F] : ContinuousSMul 𝕜 (E [⋀^ι]→L[𝕜] F) :=\n  isEmbedding_toContinuousMultilinearMap.continuousSMul continuous_id rfl\n\n"}
{"name":"ContinuousAlternatingMap.hasBasis_nhds_zero_of_basis","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\nι' : Type u_5\np : ι' → Prop\nb : ι' → Set F\nh : (nhds 0).HasBasis p b\n⊢ (nhds 0).HasBasis (fun Si => And (Bornology.IsVonNBounded 𝕜 Si.1) (p Si.2)) fun Si => setOf fun f => Set.MapsTo (⇑f) Si.1 (b Si.2)","decl":"theorem hasBasis_nhds_zero_of_basis {ι' : Type*} {p : ι' → Prop} {b : ι' → Set F}\n    (h : (𝓝 (0 : F)).HasBasis p b) :\n    (𝓝 (0 : E [⋀^ι]→L[𝕜] F)).HasBasis\n      (fun Si : Set (ι → E) × ι' => IsVonNBounded 𝕜 Si.1 ∧ p Si.2)\n      fun Si => { f | MapsTo f Si.1 (b Si.2) } := by\n  rw [nhds_induced]\n  exact (ContinuousMultilinearMap.hasBasis_nhds_zero_of_basis h).comap _\n\n"}
{"name":"ContinuousAlternatingMap.hasBasis_nhds_zero","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\n⊢ (nhds 0).HasBasis (fun SV => And (Bornology.IsVonNBounded 𝕜 SV.1) (Membership.mem (nhds 0) SV.2)) fun SV => setOf fun f => Set.MapsTo (⇑f) SV.1 SV.2","decl":"theorem hasBasis_nhds_zero :\n    (𝓝 (0 : E [⋀^ι]→L[𝕜] F)).HasBasis\n      (fun SV : Set (ι → E) × Set F => IsVonNBounded 𝕜 SV.1 ∧ SV.2 ∈ 𝓝 0)\n      fun SV => { f | MapsTo f SV.1 SV.2 } :=\n  hasBasis_nhds_zero_of_basis (Filter.basis_sets _)\n\n"}
{"name":"ContinuousAlternatingMap.isClosedEmbedding_toContinuousMultilinearMap","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : AddCommGroup E\ninst✝⁷ : Module 𝕜 E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : AddCommGroup F\ninst✝⁴ : Module 𝕜 F\ninst✝³ : TopologicalSpace F\ninst✝² : TopologicalAddGroup F\ninst✝¹ : ContinuousSMul 𝕜 E\ninst✝ : T2Space F\n⊢ Topology.IsClosedEmbedding ContinuousAlternatingMap.toContinuousMultilinearMap","decl":"lemma isClosedEmbedding_toContinuousMultilinearMap [T2Space F] :\n    IsClosedEmbedding (toContinuousMultilinearMap :\n      (E [⋀^ι]→L[𝕜] F) → ContinuousMultilinearMap 𝕜 (fun _ : ι ↦ E) F) :=\n  ⟨isEmbedding_toContinuousMultilinearMap, isClosed_range_toContinuousMultilinearMap⟩\n\n"}
{"name":"ContinuousAlternatingMap.closedEmbedding_toContinuousMultilinearMap","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : AddCommGroup E\ninst✝⁷ : Module 𝕜 E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : AddCommGroup F\ninst✝⁴ : Module 𝕜 F\ninst✝³ : TopologicalSpace F\ninst✝² : TopologicalAddGroup F\ninst✝¹ : ContinuousSMul 𝕜 E\ninst✝ : T2Space F\n⊢ Topology.IsClosedEmbedding ContinuousAlternatingMap.toContinuousMultilinearMap","decl":"@[deprecated (since := \"2024-10-20\")]\nalias closedEmbedding_toContinuousMultilinearMap := isClosedEmbedding_toContinuousMultilinearMap\n\n"}
{"name":"ContinuousAlternatingMap.instContinuousEvalConst","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : TopologicalSpace E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousSMul 𝕜 E\n⊢ ContinuousEvalConst (ContinuousAlternatingMap 𝕜 E F ι) (ι → E) F","decl":"instance instContinuousEvalConst : ContinuousEvalConst (E [⋀^ι]→L[𝕜] F) (ι → E) F :=\n  .of_continuous_forget continuous_toContinuousMultilinearMap\n\n"}
{"name":"ContinuousAlternatingMap.continuous_eval_const","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"F : Type u_1\nα : outParam (Type u_2)\nX : outParam (Type u_3)\ninst✝² : FunLike F α X\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalSpace X\nself : ContinuousEvalConst F α X\nx : α\n⊢ Continuous fun f => f x","decl":"@[deprecated (since := \"2024-10-05\")]\nprotected alias continuous_eval_const := continuous_eval_const\n\n"}
{"name":"ContinuousAlternatingMap.continuous_coe_fun","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"F : Type u_1\nα : Type u_2\nX : Type u_3\ninst✝³ : FunLike F α X\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalSpace X\ninst✝ : ContinuousEvalConst F α X\n⊢ Continuous DFunLike.coe","decl":"@[deprecated (since := \"2024-10-05\")]\nprotected alias continuous_coe_fun := continuous_coeFun\n\n"}
{"name":"ContinuousAlternatingMap.instT2Space","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : AddCommGroup E\ninst✝⁷ : Module 𝕜 E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : AddCommGroup F\ninst✝⁴ : Module 𝕜 F\ninst✝³ : TopologicalSpace F\ninst✝² : TopologicalAddGroup F\ninst✝¹ : ContinuousSMul 𝕜 E\ninst✝ : T2Space F\n⊢ T2Space (ContinuousAlternatingMap 𝕜 E F ι)","decl":"instance instT2Space [T2Space F] : T2Space (E [⋀^ι]→L[𝕜] F) :=\n  .of_injective_continuous DFunLike.coe_injective continuous_coeFun\n\n"}
{"name":"ContinuousAlternatingMap.instT3Space","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : AddCommGroup E\ninst✝⁷ : Module 𝕜 E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : AddCommGroup F\ninst✝⁴ : Module 𝕜 F\ninst✝³ : TopologicalSpace F\ninst✝² : TopologicalAddGroup F\ninst✝¹ : ContinuousSMul 𝕜 E\ninst✝ : T2Space F\n⊢ T3Space (ContinuousAlternatingMap 𝕜 E F ι)","decl":"instance instT3Space [T2Space F] : T3Space (E [⋀^ι]→L[𝕜] F) :=\n  inferInstance\n\n"}
{"name":"ContinuousAlternatingMap.isEmbedding_restrictScalars","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝¹⁴ : NormedField 𝕜\ninst✝¹³ : AddCommGroup E\ninst✝¹² : Module 𝕜 E\ninst✝¹¹ : TopologicalSpace E\ninst✝¹⁰ : AddCommGroup F\ninst✝⁹ : Module 𝕜 F\ninst✝⁸ : TopologicalSpace F\ninst✝⁷ : TopologicalAddGroup F\ninst✝⁶ : ContinuousSMul 𝕜 E\n𝕜' : Type u_5\ninst✝⁵ : NontriviallyNormedField 𝕜'\ninst✝⁴ : NormedAlgebra 𝕜' 𝕜\ninst✝³ : Module 𝕜' E\ninst✝² : IsScalarTower 𝕜' 𝕜 E\ninst✝¹ : Module 𝕜' F\ninst✝ : IsScalarTower 𝕜' 𝕜 F\n⊢ Topology.IsEmbedding (ContinuousAlternatingMap.restrictScalars 𝕜')","decl":"theorem isEmbedding_restrictScalars :\n    IsEmbedding (restrictScalars 𝕜' : E [⋀^ι]→L[𝕜] F → E [⋀^ι]→L[𝕜'] F) :=\n  letI : UniformSpace F := TopologicalAddGroup.toUniformSpace F\n  haveI : UniformAddGroup F := comm_topologicalAddGroup_is_uniform\n  (isUniformEmbedding_restrictScalars _).isEmbedding\n\n"}
{"name":"ContinuousAlternatingMap.embedding_restrictScalars","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝¹⁴ : NormedField 𝕜\ninst✝¹³ : AddCommGroup E\ninst✝¹² : Module 𝕜 E\ninst✝¹¹ : TopologicalSpace E\ninst✝¹⁰ : AddCommGroup F\ninst✝⁹ : Module 𝕜 F\ninst✝⁸ : TopologicalSpace F\ninst✝⁷ : TopologicalAddGroup F\ninst✝⁶ : ContinuousSMul 𝕜 E\n𝕜' : Type u_5\ninst✝⁵ : NontriviallyNormedField 𝕜'\ninst✝⁴ : NormedAlgebra 𝕜' 𝕜\ninst✝³ : Module 𝕜' E\ninst✝² : IsScalarTower 𝕜' 𝕜 E\ninst✝¹ : Module 𝕜' F\ninst✝ : IsScalarTower 𝕜' 𝕜 F\n⊢ Topology.IsEmbedding (ContinuousAlternatingMap.restrictScalars 𝕜')","decl":"@[deprecated (since := \"2024-10-26\")]\nalias embedding_restrictScalars := isEmbedding_restrictScalars\n\n"}
{"name":"ContinuousAlternatingMap.continuous_restrictScalars","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝¹⁴ : NormedField 𝕜\ninst✝¹³ : AddCommGroup E\ninst✝¹² : Module 𝕜 E\ninst✝¹¹ : TopologicalSpace E\ninst✝¹⁰ : AddCommGroup F\ninst✝⁹ : Module 𝕜 F\ninst✝⁸ : TopologicalSpace F\ninst✝⁷ : TopologicalAddGroup F\ninst✝⁶ : ContinuousSMul 𝕜 E\n𝕜' : Type u_5\ninst✝⁵ : NontriviallyNormedField 𝕜'\ninst✝⁴ : NormedAlgebra 𝕜' 𝕜\ninst✝³ : Module 𝕜' E\ninst✝² : IsScalarTower 𝕜' 𝕜 E\ninst✝¹ : Module 𝕜' F\ninst✝ : IsScalarTower 𝕜' 𝕜 F\n⊢ Continuous (ContinuousAlternatingMap.restrictScalars 𝕜')","decl":"@[continuity, fun_prop]\ntheorem continuous_restrictScalars :\n    Continuous (restrictScalars 𝕜' : E [⋀^ι]→L[𝕜] F → E [⋀^ι]→L[𝕜'] F) :=\n  isEmbedding_restrictScalars.continuous\n\n"}
{"name":"ContinuousAlternatingMap.restrictScalarsCLM_apply","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝¹⁴ : NormedField 𝕜\ninst✝¹³ : AddCommGroup E\ninst✝¹² : Module 𝕜 E\ninst✝¹¹ : TopologicalSpace E\ninst✝¹⁰ : AddCommGroup F\ninst✝⁹ : Module 𝕜 F\ninst✝⁸ : TopologicalSpace F\ninst✝⁷ : TopologicalAddGroup F\n𝕜' : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜'\ninst✝⁵ : NormedAlgebra 𝕜' 𝕜\ninst✝⁴ : Module 𝕜' E\ninst✝³ : IsScalarTower 𝕜' 𝕜 E\ninst✝² : Module 𝕜' F\ninst✝¹ : IsScalarTower 𝕜' 𝕜 F\ninst✝ : ContinuousConstSMul 𝕜' F\n⊢ Eq (⇑(ContinuousAlternatingMap.restrictScalarsCLM 𝕜')) (ContinuousAlternatingMap.restrictScalars 𝕜')","decl":"variable (𝕜') in\n/-- `ContinuousMultilinearMap.restrictScalars` as a `ContinuousLinearMap`. -/\n@[simps (config := .asFn) apply]\ndef restrictScalarsCLM [ContinuousConstSMul 𝕜' F] :\n    E [⋀^ι]→L[𝕜] F →L[𝕜'] E [⋀^ι]→L[𝕜'] F where\n  toFun := restrictScalars 𝕜'\n  map_add' _ _ := rfl\n  map_smul' _ _ := rfl\n\n"}
{"name":"ContinuousAlternatingMap.apply_apply","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : AddCommGroup E\ninst✝⁷ : Module 𝕜 E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : AddCommGroup F\ninst✝⁴ : Module 𝕜 F\ninst✝³ : TopologicalSpace F\ninst✝² : TopologicalAddGroup F\ninst✝¹ : ContinuousSMul 𝕜 E\ninst✝ : ContinuousConstSMul 𝕜 F\nm : ι → E\nc : ContinuousAlternatingMap 𝕜 E F ι\n⊢ Eq ((ContinuousAlternatingMap.apply 𝕜 E F m) c) (c m)","decl":"@[simp]\nlemma apply_apply [ContinuousConstSMul 𝕜 F] {m : ι → E} {c : E [⋀^ι]→L[𝕜] F} :\n    apply 𝕜 E F m c = c m := rfl\n\n"}
{"name":"ContinuousAlternatingMap.hasSum_eval","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : TopologicalSpace E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousSMul 𝕜 E\nα : Type u_5\np : α → ContinuousAlternatingMap 𝕜 E F ι\nq : ContinuousAlternatingMap 𝕜 E F ι\nh : HasSum p q\nm : ι → E\n⊢ HasSum (fun a => (p a) m) (q m)","decl":"theorem hasSum_eval {α : Type*} {p : α → E [⋀^ι]→L[𝕜] F}\n    {q : E [⋀^ι]→L[𝕜] F} (h : HasSum p q) (m : ι → E) :\n    HasSum (fun a => p a m) (q m) :=\n  h.map (applyAddHom m) (continuous_eval_const m)\n\n"}
{"name":"ContinuousAlternatingMap.tsum_eval","module":"Mathlib.Topology.Algebra.Module.Alternating.Topology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nι : Type u_4\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : AddCommGroup E\ninst✝⁷ : Module 𝕜 E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : AddCommGroup F\ninst✝⁴ : Module 𝕜 F\ninst✝³ : TopologicalSpace F\ninst✝² : TopologicalAddGroup F\ninst✝¹ : ContinuousSMul 𝕜 E\ninst✝ : T2Space F\nα : Type u_5\np : α → ContinuousAlternatingMap 𝕜 E F ι\nhp : Summable p\nm : ι → E\n⊢ Eq ((tsum fun a => p a) m) (tsum fun a => (p a) m)","decl":"theorem tsum_eval [T2Space F] {α : Type*} {p : α → E [⋀^ι]→L[𝕜] F} (hp : Summable p)\n    (m : ι → E) : (∑' a, p a) m = ∑' a, p a m :=\n  (hasSum_eval hp.hasSum m).tsum_eq.symm\n\n"}
