{"name":"CategoryTheory.has_weakly_initial_of_weakly_initial_set_and_hasProducts","module":"Mathlib.CategoryTheory.Limits.Constructions.WeaklyInitial","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasProducts C\nι : Type v\nB : ι → C\nhB : ∀ (A : C), Exists fun i => Nonempty (Quiver.Hom (B i) A)\n⊢ Exists fun T => ∀ (X : C), Nonempty (Quiver.Hom T X)","decl":"/--\nIf `C` has (small) products and a small weakly initial set of objects, then it has a weakly initial\nobject.\n-/\ntheorem has_weakly_initial_of_weakly_initial_set_and_hasProducts [HasProducts.{v} C] {ι : Type v}\n    {B : ι → C} (hB : ∀ A : C, ∃ i, Nonempty (B i ⟶ A)) : ∃ T : C, ∀ X, Nonempty (T ⟶ X) :=\n  ⟨∏ᶜ B, fun X => ⟨Pi.π _ _ ≫ (hB X).choose_spec.some⟩⟩\n\n"}
{"name":"CategoryTheory.hasInitial_of_weakly_initial_and_hasWideEqualizers","module":"Mathlib.CategoryTheory.Limits.Constructions.WeaklyInitial","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasWideEqualizers C\nT : C\nhT : ∀ (X : C), Nonempty (Quiver.Hom T X)\n⊢ CategoryTheory.Limits.HasInitial C","decl":"/-- If `C` has (small) wide equalizers and a weakly initial object, then it has an initial object.\n\nThe initial object is constructed as the wide equalizer of all endomorphisms on the given weakly\ninitial object.\n-/\ntheorem hasInitial_of_weakly_initial_and_hasWideEqualizers [HasWideEqualizers.{v} C] {T : C}\n    (hT : ∀ X, Nonempty (T ⟶ X)) : HasInitial C := by\n  let endos := T ⟶ T\n  let i := wideEqualizer.ι (id : endos → endos)\n  haveI : Nonempty endos := ⟨𝟙 _⟩\n  have : ∀ X : C, Unique (wideEqualizer (id : endos → endos) ⟶ X) := by\n    intro X\n    refine ⟨⟨i ≫ Classical.choice (hT X)⟩, fun a => ?_⟩\n    let E := equalizer a (i ≫ Classical.choice (hT _))\n    let e : E ⟶ wideEqualizer id := equalizer.ι _ _\n    let h : T ⟶ E := Classical.choice (hT E)\n    have : ((i ≫ h) ≫ e) ≫ i = i ≫ 𝟙 _ := by\n      rw [Category.assoc, Category.assoc]\n      apply wideEqualizer.condition (id : endos → endos) (h ≫ e ≫ i)\n    rw [Category.comp_id, cancel_mono_id i] at this\n    haveI : IsSplitEpi e := IsSplitEpi.mk' ⟨i ≫ h, this⟩\n    rw [← cancel_epi e]\n    apply equalizer.condition\n  exact hasInitial_of_unique (wideEqualizer (id : endos → endos))\n\n"}
