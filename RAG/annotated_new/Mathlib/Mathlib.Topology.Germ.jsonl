{"name":"Filter.Germ.value_smul","module":"Mathlib.Topology.Germ","initialProofState":"X : Type u_1\ninst✝¹ : TopologicalSpace X\nx : X\nα : Type u_4\nβ : Type u_5\ninst✝ : SMul α β\nφ : (nhds x).Germ α\nψ : (nhds x).Germ β\n⊢ Eq (HSMul.hSMul φ ψ).value (HSMul.hSMul φ.value ψ.value)","decl":"theorem value_smul {α β : Type*} [SMul α β] (φ : Germ (𝓝 x) α)\n    (ψ : Germ (𝓝 x) β) : (φ • ψ).value = φ.value • ψ.value :=\n  Germ.inductionOn φ fun _ ↦ Germ.inductionOn ψ fun _ ↦ rfl\n\n"}
{"name":"Filter.Eventually.germ_congr_set","module":"Mathlib.Topology.Germ","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝ : TopologicalSpace X\nf g : X → Y\nA : Set X\nP : (x : X) → (nhds x).Germ Y → Prop\nhf : Filter.Eventually (fun x => P x ↑f) (nhdsSet A)\nh : Filter.Eventually (fun z => Eq (g z) (f z)) (nhdsSet A)\n⊢ Filter.Eventually (fun x => P x ↑g) (nhdsSet A)","decl":"theorem Filter.Eventually.germ_congr_set\n    {P : ∀ x : X, Germ (𝓝 x) Y → Prop} (hf : ∀ᶠ x in 𝓝ˢ A, P x f)\n    (h : ∀ᶠ z in 𝓝ˢ A, g z = f z) : ∀ᶠ x in 𝓝ˢ A, P x g := by\n  rw [eventually_nhdsSet_iff_forall] at *\n  intro x hx\n  apply ((hf x hx).and (h x hx).eventually_nhds).mono\n  intro y hy\n  convert hy.1 using 1\n  exact Germ.coe_eq.mpr hy.2\n\n"}
{"name":"restrictGermPredicate_congr","module":"Mathlib.Topology.Germ","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝ : TopologicalSpace X\nf g : X → Y\nA : Set X\nx : X\nP : (x : X) → (nhds x).Germ Y → Prop\nhf : RestrictGermPredicate P A x ↑f\nh : Filter.Eventually (fun z => Eq (g z) (f z)) (nhdsSet A)\n⊢ RestrictGermPredicate P A x ↑g","decl":"theorem restrictGermPredicate_congr {P : ∀ x : X, Germ (𝓝 x) Y → Prop}\n    (hf : RestrictGermPredicate P A x f) (h : ∀ᶠ z in 𝓝ˢ A, g z = f z) :\n    RestrictGermPredicate P A x g := by\n  intro hx\n  apply ((hf hx).and <| (eventually_nhdsSet_iff_forall.mp h x hx).eventually_nhds).mono\n  rintro y ⟨hy, h'y⟩\n  rwa [Germ.coe_eq.mpr h'y]\n\n"}
{"name":"forall_restrictGermPredicate_iff","module":"Mathlib.Topology.Germ","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝ : TopologicalSpace X\nf : X → Y\nA : Set X\nP : (x : X) → (nhds x).Germ Y → Prop\n⊢ Iff (∀ (x : X), RestrictGermPredicate P A x ↑f) (Filter.Eventually (fun x => P x ↑f) (nhdsSet A))","decl":"theorem forall_restrictGermPredicate_iff {P : ∀ x : X, Germ (𝓝 x) Y → Prop} :\n    (∀ x, RestrictGermPredicate P A x f) ↔ ∀ᶠ x in 𝓝ˢ A, P x f := by\n  rw [eventually_nhdsSet_iff_forall]\n  rfl\n\n"}
{"name":"forall_restrictGermPredicate_of_forall","module":"Mathlib.Topology.Germ","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝ : TopologicalSpace X\nf : X → Y\nA : Set X\nP : (x : X) → (nhds x).Germ Y → Prop\nh : ∀ (x : X), P x ↑f\nx : X\n⊢ RestrictGermPredicate P A x ↑f","decl":"theorem forall_restrictGermPredicate_of_forall\n    {P : ∀ x : X, Germ (𝓝 x) Y → Prop} (h : ∀ x, P x f) :\n    ∀ x, RestrictGermPredicate P A x f :=\n  forall_restrictGermPredicate_iff.mpr (Eventually.of_forall h)\n"}
{"name":"Filter.Germ.sliceLeft_coe","module":"Mathlib.Topology.Germ","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_3\ninst✝¹ : TopologicalSpace X\nx : X\ninst✝ : TopologicalSpace Y\ny : Y\nf : Prod X Y → Z\n⊢ Eq (↑f).sliceLeft ↑fun x' => f { fst := x', snd := y }","decl":"@[simp]\ntheorem sliceLeft_coe [TopologicalSpace Y] {y : Y} (f : X × Y → Z) :\n    (↑f : Germ (𝓝 (x, y)) Z).sliceLeft = fun x' ↦ f (x', y) :=\n  rfl\n\n"}
{"name":"Filter.Germ.sliceRight_coe","module":"Mathlib.Topology.Germ","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_3\ninst✝¹ : TopologicalSpace X\nx : X\ninst✝ : TopologicalSpace Y\ny : Y\nf : Prod X Y → Z\n⊢ Eq (↑f).sliceRight ↑fun y' => f { fst := x, snd := y' }","decl":"@[simp]\ntheorem sliceRight_coe [TopologicalSpace Y] {y : Y} (f : X × Y → Z) :\n    (↑f : Germ (𝓝 (x, y)) Z).sliceRight = fun y' ↦ f (x, y') :=\n  rfl\n\n"}
{"name":"Filter.Germ.isConstant_comp_subtype","module":"Mathlib.Topology.Germ","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝ : TopologicalSpace X\ns : Set X\nf : X → Y\nx : ↑s\nhf : (↑f).IsConstant\n⊢ (↑(Function.comp f Subtype.val)).IsConstant","decl":"lemma isConstant_comp_subtype {s : Set X} {f : X → Y} {x : s}\n    (hf : (f : Germ (𝓝 (x : X)) Y).IsConstant) :\n    ((f ∘ Subtype.val : s → Y) : Germ (𝓝 x) Y).IsConstant :=\n  isConstant_comp_tendsto hf continuousAt_subtype_val\n\n"}
{"name":"IsLocallyConstant.of_germ_isConstant","module":"Mathlib.Topology.Germ","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝ : TopologicalSpace X\nf : X → Y\nh : ∀ (x : X), (↑f).IsConstant\n⊢ IsLocallyConstant f","decl":"/-- If the germ of `f` w.r.t. each `𝓝 x` is constant, `f` is locally constant. -/\nlemma IsLocallyConstant.of_germ_isConstant (h : ∀ x : X, (f : Germ (𝓝 x) Y).IsConstant) :\n    IsLocallyConstant f := by\n  intro s\n  rw [isOpen_iff_mem_nhds]\n  intro a ha\n  obtain ⟨b, hb⟩ := h a\n  apply mem_of_superset hb\n  intro x hx\n  have : f x = f a := (mem_of_mem_nhds hb) ▸ hx\n  rw [mem_preimage, this]\n  exact ha\n\n"}
{"name":"eq_of_germ_isConstant","module":"Mathlib.Topology.Germ","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝ : TopologicalSpace X\nf : X → Y\ni : PreconnectedSpace X\nh : ∀ (x : X), (↑f).IsConstant\nx x' : X\n⊢ Eq (f x) (f x')","decl":"theorem eq_of_germ_isConstant [i : PreconnectedSpace X]\n    (h : ∀ x : X, (f : Germ (𝓝 x) Y).IsConstant) (x x' : X) : f x = f x' :=\n  (IsLocallyConstant.of_germ_isConstant h).apply_eq_of_isPreconnected\n    (preconnectedSpace_iff_univ.mp i) (by trivial) (by trivial)\n\n"}
{"name":"eq_of_germ_isConstant_on","module":"Mathlib.Topology.Germ","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝ : TopologicalSpace X\nf : X → Y\nx : X\ns : Set X\nh : ∀ (x : X), Membership.mem s x → (↑f).IsConstant\nhs : IsPreconnected s\nx' : X\nx_in : Membership.mem s x\nx'_in : Membership.mem s x'\n⊢ Eq (f x) (f x')","decl":"lemma eq_of_germ_isConstant_on {s : Set X} (h : ∀ x ∈ s, (f : Germ (𝓝 x) Y).IsConstant)\n    (hs : IsPreconnected s) {x' : X} (x_in : x ∈ s) (x'_in : x' ∈ s) : f x = f x' := by\n  let i : s → X := fun x ↦ x\n  show (f ∘ i) (⟨x, x_in⟩ : s) = (f ∘ i) (⟨x', x'_in⟩ : s)\n  have : PreconnectedSpace s := Subtype.preconnectedSpace hs\n  exact eq_of_germ_isConstant (fun y ↦ Germ.isConstant_comp_subtype (h y y.2)) _ _\n\n"}
{"name":"Germ.coe_prod","module":"Mathlib.Topology.Germ","initialProofState":"α : Type u_4\nl : Filter α\nR : Type u_5\ninst✝ : CommMonoid R\nι : Type u_6\nf : ι → α → R\ns : Finset ι\n⊢ Eq (↑(s.prod fun i => f i)) (s.prod fun i => ↑(f i))","decl":"@[to_additive (attr := simp)]\ntheorem Germ.coe_prod {α : Type*} (l : Filter α) (R : Type*) [CommMonoid R] {ι} (f : ι → α → R)\n    (s : Finset ι) : ((∏ i ∈ s, f i : α → R) : Germ l R) = ∏ i ∈ s, (f i : Germ l R) :=\n  map_prod (Germ.coeMulHom l : (α → R) →* Germ l R) f s\n"}
{"name":"Germ.coe_sum","module":"Mathlib.Topology.Germ","initialProofState":"α : Type u_4\nl : Filter α\nR : Type u_5\ninst✝ : AddCommMonoid R\nι : Type u_6\nf : ι → α → R\ns : Finset ι\n⊢ Eq (↑(s.sum fun i => f i)) (s.sum fun i => ↑(f i))","decl":"@[to_additive (attr := simp)]\ntheorem Germ.coe_prod {α : Type*} (l : Filter α) (R : Type*) [CommMonoid R] {ι} (f : ι → α → R)\n    (s : Finset ι) : ((∏ i ∈ s, f i : α → R) : Germ l R) = ∏ i ∈ s, (f i : Germ l R) :=\n  map_prod (Germ.coeMulHom l : (α → R) →* Germ l R) f s\n"}
