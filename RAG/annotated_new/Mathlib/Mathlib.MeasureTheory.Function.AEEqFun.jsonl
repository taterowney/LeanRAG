{"name":"MeasureTheory.AEEqFun.stronglyMeasurable","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : TopologicalSpace β\nf : MeasureTheory.AEEqFun α β μ\n⊢ MeasureTheory.StronglyMeasurable ↑f","decl":"protected theorem stronglyMeasurable (f : α →ₘ[μ] β) : StronglyMeasurable f := by\n  simp only [cast]\n  split_ifs with h\n  · exact stronglyMeasurable_const\n  · apply AEStronglyMeasurable.stronglyMeasurable_mk\n\n"}
{"name":"MeasureTheory.AEEqFun.aestronglyMeasurable","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : TopologicalSpace β\nf : MeasureTheory.AEEqFun α β μ\n⊢ MeasureTheory.AEStronglyMeasurable (↑f) μ","decl":"protected theorem aestronglyMeasurable (f : α →ₘ[μ] β) : AEStronglyMeasurable f μ :=\n  f.stronglyMeasurable.aestronglyMeasurable\n\n"}
{"name":"MeasureTheory.AEEqFun.measurable","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : TopologicalSpace β\ninst✝² : TopologicalSpace.PseudoMetrizableSpace β\ninst✝¹ : MeasurableSpace β\ninst✝ : BorelSpace β\nf : MeasureTheory.AEEqFun α β μ\n⊢ Measurable ↑f","decl":"protected theorem measurable [PseudoMetrizableSpace β] [MeasurableSpace β] [BorelSpace β]\n    (f : α →ₘ[μ] β) : Measurable f :=\n  f.stronglyMeasurable.measurable\n\n"}
{"name":"MeasureTheory.AEEqFun.aemeasurable","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : TopologicalSpace β\ninst✝² : TopologicalSpace.PseudoMetrizableSpace β\ninst✝¹ : MeasurableSpace β\ninst✝ : BorelSpace β\nf : MeasureTheory.AEEqFun α β μ\n⊢ AEMeasurable (↑f) μ","decl":"protected theorem aemeasurable [PseudoMetrizableSpace β] [MeasurableSpace β] [BorelSpace β]\n    (f : α →ₘ[μ] β) : AEMeasurable f μ :=\n  f.measurable.aemeasurable\n\n"}
{"name":"MeasureTheory.AEEqFun.quot_mk_eq_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : TopologicalSpace β\nf : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ Eq (Quot.mk ⇑(MeasureTheory.Measure.aeEqSetoid β μ) ⟨f, hf⟩) (MeasureTheory.AEEqFun.mk f hf)","decl":"@[simp]\ntheorem quot_mk_eq_mk (f : α → β) (hf) :\n    (Quot.mk (@Setoid.r _ <| μ.aeEqSetoid β) ⟨f, hf⟩ : α →ₘ[μ] β) = mk f hf :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.mk_eq_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : TopologicalSpace β\nf g : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ Iff (Eq (MeasureTheory.AEEqFun.mk f hf) (MeasureTheory.AEEqFun.mk g hg)) ((MeasureTheory.ae μ).EventuallyEq f g)","decl":"@[simp]\ntheorem mk_eq_mk {f g : α → β} {hf hg} : (mk f hf : α →ₘ[μ] β) = mk g hg ↔ f =ᵐ[μ] g :=\n  Quotient.eq''\n\n"}
{"name":"MeasureTheory.AEEqFun.mk_coeFn","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : TopologicalSpace β\nf : MeasureTheory.AEEqFun α β μ\n⊢ Eq (MeasureTheory.AEEqFun.mk ↑f ⋯) f","decl":"@[simp]\ntheorem mk_coeFn (f : α →ₘ[μ] β) : mk f f.aestronglyMeasurable = f := by\n  conv_lhs => simp only [cast]\n  split_ifs with h\n  · exact Classical.choose_spec h |>.symm\n  conv_rhs => rw [← Quotient.out_eq' f]\n  rw [← mk, mk_eq_mk]\n  exact (AEStronglyMeasurable.ae_eq_mk _).symm\n\n"}
{"name":"MeasureTheory.AEEqFun.ext","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : TopologicalSpace β\nf g : MeasureTheory.AEEqFun α β μ\nh : (MeasureTheory.ae μ).EventuallyEq ↑f ↑g\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : α →ₘ[μ] β} (h : f =ᵐ[μ] g) : f = g := by\n  rwa [← f.mk_coeFn, ← g.mk_coeFn, mk_eq_mk]\n\n"}
{"name":"MeasureTheory.AEEqFun.ext_iff","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : TopologicalSpace β\nf g : MeasureTheory.AEEqFun α β μ\n⊢ Iff (Eq f g) ((MeasureTheory.ae μ).EventuallyEq ↑f ↑g)","decl":"@[ext]\ntheorem ext {f g : α →ₘ[μ] β} (h : f =ᵐ[μ] g) : f = g := by\n  rwa [← f.mk_coeFn, ← g.mk_coeFn, mk_eq_mk]\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : TopologicalSpace β\nf : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑(MeasureTheory.AEEqFun.mk f hf)) f","decl":"theorem coeFn_mk (f : α → β) (hf) : (mk f hf : α →ₘ[μ] β) =ᵐ[μ] f := by\n  rw [← mk_eq_mk, mk_coeFn]\n\n"}
{"name":"MeasureTheory.AEEqFun.induction_on","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : TopologicalSpace β\nf : MeasureTheory.AEEqFun α β μ\np : MeasureTheory.AEEqFun α β μ → Prop\nH : ∀ (f : α → β) (hf : MeasureTheory.AEStronglyMeasurable f μ), p (MeasureTheory.AEEqFun.mk f hf)\n⊢ p f","decl":"@[elab_as_elim]\ntheorem induction_on (f : α →ₘ[μ] β) {p : (α →ₘ[μ] β) → Prop} (H : ∀ f hf, p (mk f hf)) : p f :=\n  Quotient.inductionOn' f <| Subtype.forall.2 H\n\n"}
{"name":"MeasureTheory.AEEqFun.induction_on₂","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace β\nα' : Type u_5\nβ' : Type u_6\ninst✝¹ : MeasurableSpace α'\ninst✝ : TopologicalSpace β'\nμ' : MeasureTheory.Measure α'\nf : MeasureTheory.AEEqFun α β μ\nf' : MeasureTheory.AEEqFun α' β' μ'\np : MeasureTheory.AEEqFun α β μ → MeasureTheory.AEEqFun α' β' μ' → Prop\nH : ∀ (f : α → β) (hf : MeasureTheory.AEStronglyMeasurable f μ) (f' : α' → β') (hf' : MeasureTheory.AEStronglyMeasurable f' μ'), p (MeasureTheory.AEEqFun.mk f hf) (MeasureTheory.AEEqFun.mk f' hf')\n⊢ p f f'","decl":"@[elab_as_elim]\ntheorem induction_on₂ {α' β' : Type*} [MeasurableSpace α'] [TopologicalSpace β'] {μ' : Measure α'}\n    (f : α →ₘ[μ] β) (f' : α' →ₘ[μ'] β') {p : (α →ₘ[μ] β) → (α' →ₘ[μ'] β') → Prop}\n    (H : ∀ f hf f' hf', p (mk f hf) (mk f' hf')) : p f f' :=\n  induction_on f fun f hf => induction_on f' <| H f hf\n\n"}
{"name":"MeasureTheory.AEEqFun.induction_on₃","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁴ : TopologicalSpace β\nα' : Type u_5\nβ' : Type u_6\ninst✝³ : MeasurableSpace α'\ninst✝² : TopologicalSpace β'\nμ' : MeasureTheory.Measure α'\nα'' : Type u_7\nβ'' : Type u_8\ninst✝¹ : MeasurableSpace α''\ninst✝ : TopologicalSpace β''\nμ'' : MeasureTheory.Measure α''\nf : MeasureTheory.AEEqFun α β μ\nf' : MeasureTheory.AEEqFun α' β' μ'\nf'' : MeasureTheory.AEEqFun α'' β'' μ''\np : MeasureTheory.AEEqFun α β μ → MeasureTheory.AEEqFun α' β' μ' → MeasureTheory.AEEqFun α'' β'' μ'' → Prop\nH : ∀ (f : α → β) (hf : MeasureTheory.AEStronglyMeasurable f μ) (f' : α' → β') (hf' : MeasureTheory.AEStronglyMeasurable f' μ') (f'' : α'' → β'') (hf'' : MeasureTheory.AEStronglyMeasurable f'' μ''), p (MeasureTheory.AEEqFun.mk f hf) (MeasureTheory.AEEqFun.mk f' hf') (MeasureTheory.AEEqFun.mk f'' hf'')\n⊢ p f f' f''","decl":"@[elab_as_elim]\ntheorem induction_on₃ {α' β' : Type*} [MeasurableSpace α'] [TopologicalSpace β'] {μ' : Measure α'}\n    {α'' β'' : Type*} [MeasurableSpace α''] [TopologicalSpace β''] {μ'' : Measure α''}\n    (f : α →ₘ[μ] β) (f' : α' →ₘ[μ'] β') (f'' : α'' →ₘ[μ''] β'')\n    {p : (α →ₘ[μ] β) → (α' →ₘ[μ'] β') → (α'' →ₘ[μ''] β'') → Prop}\n    (H : ∀ f hf f' hf' f'' hf'', p (mk f hf) (mk f' hf') (mk f'' hf'')) : p f f' f'' :=\n  induction_on f fun f hf => induction_on₂ f' f'' <| H f hf\n\n"}
{"name":"MeasureTheory.AEEqFun.compQuasiMeasurePreserving_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace γ\ninst✝ : MeasurableSpace β\nν : MeasureTheory.Measure β\nf : α → β\ng : β → γ\nhg : MeasureTheory.AEStronglyMeasurable g ν\nhf : MeasureTheory.Measure.QuasiMeasurePreserving f μ ν\n⊢ Eq ((MeasureTheory.AEEqFun.mk g hg).compQuasiMeasurePreserving f hf) (MeasureTheory.AEEqFun.mk (Function.comp g f) ⋯)","decl":"@[simp]\ntheorem compQuasiMeasurePreserving_mk {g : β → γ} (hg : AEStronglyMeasurable g ν)\n    (hf : QuasiMeasurePreserving f μ ν) :\n    (mk g hg).compQuasiMeasurePreserving f hf = mk (g ∘ f) (hg.comp_quasiMeasurePreserving hf) :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.compQuasiMeasurePreserving_eq_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace γ\ninst✝ : MeasurableSpace β\nν : MeasureTheory.Measure β\nf : α → β\ng : MeasureTheory.AEEqFun β γ ν\nhf : MeasureTheory.Measure.QuasiMeasurePreserving f μ ν\n⊢ Eq (g.compQuasiMeasurePreserving f hf) (MeasureTheory.AEEqFun.mk (Function.comp (↑g) f) ⋯)","decl":"theorem compQuasiMeasurePreserving_eq_mk (g : β →ₘ[ν] γ) (hf : QuasiMeasurePreserving f μ ν) :\n    g.compQuasiMeasurePreserving f hf =\n      mk (g ∘ f) (g.aestronglyMeasurable.comp_quasiMeasurePreserving hf) := by\n  rw [← compQuasiMeasurePreserving_mk g.aestronglyMeasurable hf, mk_coeFn]\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_compQuasiMeasurePreserving","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace γ\ninst✝ : MeasurableSpace β\nν : MeasureTheory.Measure β\nf : α → β\ng : MeasureTheory.AEEqFun β γ ν\nhf : MeasureTheory.Measure.QuasiMeasurePreserving f μ ν\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑(g.compQuasiMeasurePreserving f hf)) (Function.comp (↑g) f)","decl":"theorem coeFn_compQuasiMeasurePreserving (g : β →ₘ[ν] γ) (hf : QuasiMeasurePreserving f μ ν) :\n    g.compQuasiMeasurePreserving f hf =ᵐ[μ] g ∘ f := by\n  rw [compQuasiMeasurePreserving_eq_mk]\n  apply coeFn_mk\n\n"}
{"name":"MeasureTheory.AEEqFun.compMeasurePreserving_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace γ\ninst✝ : MeasurableSpace β\nν : MeasureTheory.Measure β\nf : α → β\ng : β → γ\nhg : MeasureTheory.AEStronglyMeasurable g ν\nhf : MeasureTheory.MeasurePreserving f μ ν\n⊢ Eq ((MeasureTheory.AEEqFun.mk g hg).compMeasurePreserving f hf) (MeasureTheory.AEEqFun.mk (Function.comp g f) ⋯)","decl":"@[simp]\ntheorem compMeasurePreserving_mk (hg : AEStronglyMeasurable g ν) (hf : MeasurePreserving f μ ν) :\n    (mk g hg).compMeasurePreserving f hf =\n      mk (g ∘ f) (hg.comp_quasiMeasurePreserving hf.quasiMeasurePreserving) :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.compMeasurePreserving_eq_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace γ\ninst✝ : MeasurableSpace β\nν : MeasureTheory.Measure β\nf : α → β\ng : MeasureTheory.AEEqFun β γ ν\nhf : MeasureTheory.MeasurePreserving f μ ν\n⊢ Eq (g.compMeasurePreserving f hf) (MeasureTheory.AEEqFun.mk (Function.comp (↑g) f) ⋯)","decl":"theorem compMeasurePreserving_eq_mk (g : β →ₘ[ν] γ) (hf : MeasurePreserving f μ ν) :\n    g.compMeasurePreserving f hf =\n      mk (g ∘ f) (g.aestronglyMeasurable.comp_quasiMeasurePreserving hf.quasiMeasurePreserving) :=\n  g.compQuasiMeasurePreserving_eq_mk _\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_compMeasurePreserving","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace γ\ninst✝ : MeasurableSpace β\nν : MeasureTheory.Measure β\nf : α → β\ng : MeasureTheory.AEEqFun β γ ν\nhf : MeasureTheory.MeasurePreserving f μ ν\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑(g.compMeasurePreserving f hf)) (Function.comp (↑g) f)","decl":"theorem coeFn_compMeasurePreserving (g : β →ₘ[ν] γ) (hf : MeasurePreserving f μ ν) :\n    g.compMeasurePreserving f hf =ᵐ[μ] g ∘ f :=\n  g.coeFn_compQuasiMeasurePreserving _\n\n"}
{"name":"MeasureTheory.AEEqFun.comp_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\ng : β → γ\nhg : Continuous g\nf : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ Eq (MeasureTheory.AEEqFun.comp g hg (MeasureTheory.AEEqFun.mk f hf)) (MeasureTheory.AEEqFun.mk (Function.comp g f) ⋯)","decl":"@[simp]\ntheorem comp_mk (g : β → γ) (hg : Continuous g) (f : α → β) (hf) :\n    comp g hg (mk f hf : α →ₘ[μ] β) = mk (g ∘ f) (hg.comp_aestronglyMeasurable hf) :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.comp_eq_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\ng : β → γ\nhg : Continuous g\nf : MeasureTheory.AEEqFun α β μ\n⊢ Eq (MeasureTheory.AEEqFun.comp g hg f) (MeasureTheory.AEEqFun.mk (Function.comp g ↑f) ⋯)","decl":"theorem comp_eq_mk (g : β → γ) (hg : Continuous g) (f : α →ₘ[μ] β) :\n    comp g hg f = mk (g ∘ f) (hg.comp_aestronglyMeasurable f.aestronglyMeasurable) := by\n  rw [← comp_mk g hg f f.aestronglyMeasurable, mk_coeFn]\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_comp","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\ng : β → γ\nhg : Continuous g\nf : MeasureTheory.AEEqFun α β μ\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑(MeasureTheory.AEEqFun.comp g hg f)) (Function.comp g ↑f)","decl":"theorem coeFn_comp (g : β → γ) (hg : Continuous g) (f : α →ₘ[μ] β) : comp g hg f =ᵐ[μ] g ∘ f := by\n  rw [comp_eq_mk]\n  apply coeFn_mk\n\n"}
{"name":"MeasureTheory.AEEqFun.comp_compQuasiMeasurePreserving","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\nδ : Type u_4\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace δ\ninst✝¹ : TopologicalSpace γ\nβ : Type u_5\ninst✝ : MeasurableSpace β\nν : MeasureTheory.Measure β\ng : γ → δ\nhg : Continuous g\nf : MeasureTheory.AEEqFun β γ ν\nφ : α → β\nhφ : MeasureTheory.Measure.QuasiMeasurePreserving φ μ ν\n⊢ Eq ((MeasureTheory.AEEqFun.comp g hg f).compQuasiMeasurePreserving φ hφ) (MeasureTheory.AEEqFun.comp g hg (f.compQuasiMeasurePreserving φ hφ))","decl":"theorem comp_compQuasiMeasurePreserving\n    {β : Type*} [MeasurableSpace β] {ν} (g : γ → δ) (hg : Continuous g)\n    (f : β →ₘ[ν] γ) {φ : α → β} (hφ : Measure.QuasiMeasurePreserving φ μ ν) :\n    (comp g hg f).compQuasiMeasurePreserving φ hφ =\n      comp g hg (f.compQuasiMeasurePreserving φ hφ) := by\n  rcases f; rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.compMeasurable_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁸ : TopologicalSpace β\ninst✝⁷ : TopologicalSpace γ\ninst✝⁶ : MeasurableSpace β\ninst✝⁵ : TopologicalSpace.PseudoMetrizableSpace β\ninst✝⁴ : BorelSpace β\ninst✝³ : MeasurableSpace γ\ninst✝² : TopologicalSpace.PseudoMetrizableSpace γ\ninst✝¹ : OpensMeasurableSpace γ\ninst✝ : SecondCountableTopology γ\ng : β → γ\nhg : Measurable g\nf : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ Eq (MeasureTheory.AEEqFun.compMeasurable g hg (MeasureTheory.AEEqFun.mk f hf)) (MeasureTheory.AEEqFun.mk (Function.comp g f) ⋯)","decl":"@[simp]\ntheorem compMeasurable_mk (g : β → γ) (hg : Measurable g) (f : α → β)\n    (hf : AEStronglyMeasurable f μ) :\n    compMeasurable g hg (mk f hf : α →ₘ[μ] β) =\n      mk (g ∘ f) (hg.comp_aemeasurable hf.aemeasurable).aestronglyMeasurable :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.compMeasurable_eq_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁸ : TopologicalSpace β\ninst✝⁷ : TopologicalSpace γ\ninst✝⁶ : MeasurableSpace β\ninst✝⁵ : TopologicalSpace.PseudoMetrizableSpace β\ninst✝⁴ : BorelSpace β\ninst✝³ : MeasurableSpace γ\ninst✝² : TopologicalSpace.PseudoMetrizableSpace γ\ninst✝¹ : OpensMeasurableSpace γ\ninst✝ : SecondCountableTopology γ\ng : β → γ\nhg : Measurable g\nf : MeasureTheory.AEEqFun α β μ\n⊢ Eq (MeasureTheory.AEEqFun.compMeasurable g hg f) (MeasureTheory.AEEqFun.mk (Function.comp g ↑f) ⋯)","decl":"theorem compMeasurable_eq_mk (g : β → γ) (hg : Measurable g) (f : α →ₘ[μ] β) :\n    compMeasurable g hg f =\n    mk (g ∘ f) (hg.comp_aemeasurable f.aemeasurable).aestronglyMeasurable := by\n  rw [← compMeasurable_mk g hg f f.aestronglyMeasurable, mk_coeFn]\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_compMeasurable","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁸ : TopologicalSpace β\ninst✝⁷ : TopologicalSpace γ\ninst✝⁶ : MeasurableSpace β\ninst✝⁵ : TopologicalSpace.PseudoMetrizableSpace β\ninst✝⁴ : BorelSpace β\ninst✝³ : MeasurableSpace γ\ninst✝² : TopologicalSpace.PseudoMetrizableSpace γ\ninst✝¹ : OpensMeasurableSpace γ\ninst✝ : SecondCountableTopology γ\ng : β → γ\nhg : Measurable g\nf : MeasureTheory.AEEqFun α β μ\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑(MeasureTheory.AEEqFun.compMeasurable g hg f)) (Function.comp g ↑f)","decl":"theorem coeFn_compMeasurable (g : β → γ) (hg : Measurable g) (f : α →ₘ[μ] β) :\n    compMeasurable g hg f =ᵐ[μ] g ∘ f := by\n  rw [compMeasurable_eq_mk]\n  apply coeFn_mk\n\n"}
{"name":"MeasureTheory.AEEqFun.pair_mk_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\nf : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\ng : α → γ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ Eq ((MeasureTheory.AEEqFun.mk f hf).pair (MeasureTheory.AEEqFun.mk g hg)) (MeasureTheory.AEEqFun.mk (fun x => { fst := f x, snd := g x }) ⋯)","decl":"@[simp]\ntheorem pair_mk_mk (f : α → β) (hf) (g : α → γ) (hg) :\n    (mk f hf : α →ₘ[μ] β).pair (mk g hg) = mk (fun x => (f x, g x)) (hf.prod_mk hg) :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.pair_eq_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\nf : MeasureTheory.AEEqFun α β μ\ng : MeasureTheory.AEEqFun α γ μ\n⊢ Eq (f.pair g) (MeasureTheory.AEEqFun.mk (fun x => { fst := ↑f x, snd := ↑g x }) ⋯)","decl":"theorem pair_eq_mk (f : α →ₘ[μ] β) (g : α →ₘ[μ] γ) :\n    f.pair g =\n      mk (fun x => (f x, g x)) (f.aestronglyMeasurable.prod_mk g.aestronglyMeasurable) := by\n  simp only [← pair_mk_mk, mk_coeFn, f.aestronglyMeasurable, g.aestronglyMeasurable]\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_pair","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\nf : MeasureTheory.AEEqFun α β μ\ng : MeasureTheory.AEEqFun α γ μ\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑(f.pair g) fun x => { fst := ↑f x, snd := ↑g x }","decl":"theorem coeFn_pair (f : α →ₘ[μ] β) (g : α →ₘ[μ] γ) : f.pair g =ᵐ[μ] fun x => (f x, g x) := by\n  rw [pair_eq_mk]\n  apply coeFn_mk\n\n"}
{"name":"MeasureTheory.AEEqFun.comp₂_mk_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace δ\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\ng : β → γ → δ\nhg : Continuous (Function.uncurry g)\nf₁ : α → β\nf₂ : α → γ\nhf₁ : MeasureTheory.AEStronglyMeasurable f₁ μ\nhf₂ : MeasureTheory.AEStronglyMeasurable f₂ μ\n⊢ Eq (MeasureTheory.AEEqFun.comp₂ g hg (MeasureTheory.AEEqFun.mk f₁ hf₁) (MeasureTheory.AEEqFun.mk f₂ hf₂)) (MeasureTheory.AEEqFun.mk (fun a => g (f₁ a) (f₂ a)) ⋯)","decl":"@[simp]\ntheorem comp₂_mk_mk (g : β → γ → δ) (hg : Continuous (uncurry g)) (f₁ : α → β) (f₂ : α → γ)\n    (hf₁ hf₂) :\n    comp₂ g hg (mk f₁ hf₁ : α →ₘ[μ] β) (mk f₂ hf₂) =\n      mk (fun a => g (f₁ a) (f₂ a)) (hg.comp_aestronglyMeasurable (hf₁.prod_mk hf₂)) :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.comp₂_eq_pair","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace δ\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\ng : β → γ → δ\nhg : Continuous (Function.uncurry g)\nf₁ : MeasureTheory.AEEqFun α β μ\nf₂ : MeasureTheory.AEEqFun α γ μ\n⊢ Eq (MeasureTheory.AEEqFun.comp₂ g hg f₁ f₂) (MeasureTheory.AEEqFun.comp (Function.uncurry g) hg (f₁.pair f₂))","decl":"theorem comp₂_eq_pair (g : β → γ → δ) (hg : Continuous (uncurry g)) (f₁ : α →ₘ[μ] β)\n    (f₂ : α →ₘ[μ] γ) : comp₂ g hg f₁ f₂ = comp _ hg (f₁.pair f₂) :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.comp₂_eq_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace δ\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\ng : β → γ → δ\nhg : Continuous (Function.uncurry g)\nf₁ : MeasureTheory.AEEqFun α β μ\nf₂ : MeasureTheory.AEEqFun α γ μ\n⊢ Eq (MeasureTheory.AEEqFun.comp₂ g hg f₁ f₂) (MeasureTheory.AEEqFun.mk (fun a => g (↑f₁ a) (↑f₂ a)) ⋯)","decl":"theorem comp₂_eq_mk (g : β → γ → δ) (hg : Continuous (uncurry g)) (f₁ : α →ₘ[μ] β)\n    (f₂ : α →ₘ[μ] γ) : comp₂ g hg f₁ f₂ = mk (fun a => g (f₁ a) (f₂ a))\n      (hg.comp_aestronglyMeasurable (f₁.aestronglyMeasurable.prod_mk f₂.aestronglyMeasurable)) := by\n  rw [comp₂_eq_pair, pair_eq_mk, comp_mk]; rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_comp₂","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace δ\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\ng : β → γ → δ\nhg : Continuous (Function.uncurry g)\nf₁ : MeasureTheory.AEEqFun α β μ\nf₂ : MeasureTheory.AEEqFun α γ μ\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑(MeasureTheory.AEEqFun.comp₂ g hg f₁ f₂) fun a => g (↑f₁ a) (↑f₂ a)","decl":"theorem coeFn_comp₂ (g : β → γ → δ) (hg : Continuous (uncurry g)) (f₁ : α →ₘ[μ] β)\n    (f₂ : α →ₘ[μ] γ) : comp₂ g hg f₁ f₂ =ᵐ[μ] fun a => g (f₁ a) (f₂ a) := by\n  rw [comp₂_eq_mk]\n  apply coeFn_mk\n\n"}
{"name":"MeasureTheory.AEEqFun.comp₂Measurable_mk_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\ninst✝¹⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹³ : TopologicalSpace δ\ninst✝¹² : TopologicalSpace β\ninst✝¹¹ : TopologicalSpace γ\ninst✝¹⁰ : MeasurableSpace β\ninst✝⁹ : TopologicalSpace.PseudoMetrizableSpace β\ninst✝⁸ : BorelSpace β\ninst✝⁷ : MeasurableSpace γ\ninst✝⁶ : TopologicalSpace.PseudoMetrizableSpace γ\ninst✝⁵ : BorelSpace γ\ninst✝⁴ : SecondCountableTopologyEither β γ\ninst✝³ : MeasurableSpace δ\ninst✝² : TopologicalSpace.PseudoMetrizableSpace δ\ninst✝¹ : OpensMeasurableSpace δ\ninst✝ : SecondCountableTopology δ\ng : β → γ → δ\nhg : Measurable (Function.uncurry g)\nf₁ : α → β\nf₂ : α → γ\nhf₁ : MeasureTheory.AEStronglyMeasurable f₁ μ\nhf₂ : MeasureTheory.AEStronglyMeasurable f₂ μ\n⊢ Eq (MeasureTheory.AEEqFun.comp₂Measurable g hg (MeasureTheory.AEEqFun.mk f₁ hf₁) (MeasureTheory.AEEqFun.mk f₂ hf₂)) (MeasureTheory.AEEqFun.mk (fun a => g (f₁ a) (f₂ a)) ⋯)","decl":"@[simp]\ntheorem comp₂Measurable_mk_mk (g : β → γ → δ) (hg : Measurable (uncurry g)) (f₁ : α → β)\n    (f₂ : α → γ) (hf₁ hf₂) :\n    comp₂Measurable g hg (mk f₁ hf₁ : α →ₘ[μ] β) (mk f₂ hf₂) =\n      mk (fun a => g (f₁ a) (f₂ a))\n        (hg.comp_aemeasurable (hf₁.aemeasurable.prod_mk hf₂.aemeasurable)).aestronglyMeasurable :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.comp₂Measurable_eq_pair","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\ninst✝¹⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹³ : TopologicalSpace δ\ninst✝¹² : TopologicalSpace β\ninst✝¹¹ : TopologicalSpace γ\ninst✝¹⁰ : MeasurableSpace β\ninst✝⁹ : TopologicalSpace.PseudoMetrizableSpace β\ninst✝⁸ : BorelSpace β\ninst✝⁷ : MeasurableSpace γ\ninst✝⁶ : TopologicalSpace.PseudoMetrizableSpace γ\ninst✝⁵ : BorelSpace γ\ninst✝⁴ : SecondCountableTopologyEither β γ\ninst✝³ : MeasurableSpace δ\ninst✝² : TopologicalSpace.PseudoMetrizableSpace δ\ninst✝¹ : OpensMeasurableSpace δ\ninst✝ : SecondCountableTopology δ\ng : β → γ → δ\nhg : Measurable (Function.uncurry g)\nf₁ : MeasureTheory.AEEqFun α β μ\nf₂ : MeasureTheory.AEEqFun α γ μ\n⊢ Eq (MeasureTheory.AEEqFun.comp₂Measurable g hg f₁ f₂) (MeasureTheory.AEEqFun.compMeasurable (Function.uncurry g) hg (f₁.pair f₂))","decl":"theorem comp₂Measurable_eq_pair (g : β → γ → δ) (hg : Measurable (uncurry g)) (f₁ : α →ₘ[μ] β)\n    (f₂ : α →ₘ[μ] γ) : comp₂Measurable g hg f₁ f₂ = compMeasurable _ hg (f₁.pair f₂) :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.comp₂Measurable_eq_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\ninst✝¹⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹³ : TopologicalSpace δ\ninst✝¹² : TopologicalSpace β\ninst✝¹¹ : TopologicalSpace γ\ninst✝¹⁰ : MeasurableSpace β\ninst✝⁹ : TopologicalSpace.PseudoMetrizableSpace β\ninst✝⁸ : BorelSpace β\ninst✝⁷ : MeasurableSpace γ\ninst✝⁶ : TopologicalSpace.PseudoMetrizableSpace γ\ninst✝⁵ : BorelSpace γ\ninst✝⁴ : SecondCountableTopologyEither β γ\ninst✝³ : MeasurableSpace δ\ninst✝² : TopologicalSpace.PseudoMetrizableSpace δ\ninst✝¹ : OpensMeasurableSpace δ\ninst✝ : SecondCountableTopology δ\ng : β → γ → δ\nhg : Measurable (Function.uncurry g)\nf₁ : MeasureTheory.AEEqFun α β μ\nf₂ : MeasureTheory.AEEqFun α γ μ\n⊢ Eq (MeasureTheory.AEEqFun.comp₂Measurable g hg f₁ f₂) (MeasureTheory.AEEqFun.mk (fun a => g (↑f₁ a) (↑f₂ a)) ⋯)","decl":"theorem comp₂Measurable_eq_mk (g : β → γ → δ) (hg : Measurable (uncurry g)) (f₁ : α →ₘ[μ] β)\n    (f₂ : α →ₘ[μ] γ) :\n    comp₂Measurable g hg f₁ f₂ =\n      mk (fun a => g (f₁ a) (f₂ a))\n        (hg.comp_aemeasurable (f₁.aemeasurable.prod_mk f₂.aemeasurable)).aestronglyMeasurable := by\n  rw [comp₂Measurable_eq_pair, pair_eq_mk, compMeasurable_mk]; rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_comp₂Measurable","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\ninst✝¹⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹³ : TopologicalSpace δ\ninst✝¹² : TopologicalSpace β\ninst✝¹¹ : TopologicalSpace γ\ninst✝¹⁰ : MeasurableSpace β\ninst✝⁹ : TopologicalSpace.PseudoMetrizableSpace β\ninst✝⁸ : BorelSpace β\ninst✝⁷ : MeasurableSpace γ\ninst✝⁶ : TopologicalSpace.PseudoMetrizableSpace γ\ninst✝⁵ : BorelSpace γ\ninst✝⁴ : SecondCountableTopologyEither β γ\ninst✝³ : MeasurableSpace δ\ninst✝² : TopologicalSpace.PseudoMetrizableSpace δ\ninst✝¹ : OpensMeasurableSpace δ\ninst✝ : SecondCountableTopology δ\ng : β → γ → δ\nhg : Measurable (Function.uncurry g)\nf₁ : MeasureTheory.AEEqFun α β μ\nf₂ : MeasureTheory.AEEqFun α γ μ\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑(MeasureTheory.AEEqFun.comp₂Measurable g hg f₁ f₂) fun a => g (↑f₁ a) (↑f₂ a)","decl":"theorem coeFn_comp₂Measurable (g : β → γ → δ) (hg : Measurable (uncurry g)) (f₁ : α →ₘ[μ] β)\n    (f₂ : α →ₘ[μ] γ) : comp₂Measurable g hg f₁ f₂ =ᵐ[μ] fun a => g (f₁ a) (f₂ a) := by\n  rw [comp₂Measurable_eq_mk]\n  apply coeFn_mk\n\n"}
{"name":"MeasureTheory.AEEqFun.mk_toGerm","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : TopologicalSpace β\nf : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ Eq (MeasureTheory.AEEqFun.mk f hf).toGerm ↑f","decl":"@[simp]\ntheorem mk_toGerm (f : α → β) (hf) : (mk f hf : α →ₘ[μ] β).toGerm = f :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.toGerm_eq","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : TopologicalSpace β\nf : MeasureTheory.AEEqFun α β μ\n⊢ Eq f.toGerm ↑↑f","decl":"theorem toGerm_eq (f : α →ₘ[μ] β) : f.toGerm = (f : α → β) := by rw [← mk_toGerm, mk_coeFn]\n\n"}
{"name":"MeasureTheory.AEEqFun.toGerm_injective","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : TopologicalSpace β\n⊢ Function.Injective MeasureTheory.AEEqFun.toGerm","decl":"theorem toGerm_injective : Injective (toGerm : (α →ₘ[μ] β) → Germ (ae μ) β) := fun f g H =>\n  ext <| Germ.coe_eq.1 <| by rwa [← toGerm_eq, ← toGerm_eq]\n\n"}
{"name":"MeasureTheory.AEEqFun.compQuasiMeasurePreserving_toGerm","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace γ\nβ : Type u_5\ninst✝ : MeasurableSpace β\nf : α → β\nν : MeasureTheory.Measure β\ng : MeasureTheory.AEEqFun β γ ν\nhf : MeasureTheory.Measure.QuasiMeasurePreserving f μ ν\n⊢ Eq (g.compQuasiMeasurePreserving f hf).toGerm (g.toGerm.compTendsto f ⋯)","decl":"@[simp]\ntheorem compQuasiMeasurePreserving_toGerm {β : Type*} [MeasurableSpace β] {f : α → β} {ν}\n    (g : β →ₘ[ν] γ) (hf : Measure.QuasiMeasurePreserving f μ ν) :\n    (g.compQuasiMeasurePreserving f hf).toGerm = g.toGerm.compTendsto f hf.tendsto_ae := by\n  rcases g; rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.compMeasurePreserving_toGerm","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace γ\nβ : Type u_5\ninst✝ : MeasurableSpace β\nf : α → β\nν : MeasureTheory.Measure β\ng : MeasureTheory.AEEqFun β γ ν\nhf : MeasureTheory.MeasurePreserving f μ ν\n⊢ Eq (g.compMeasurePreserving f hf).toGerm (g.toGerm.compTendsto f ⋯)","decl":"@[simp]\ntheorem compMeasurePreserving_toGerm {β : Type*} [MeasurableSpace β] {f : α → β} {ν}\n    (g : β →ₘ[ν] γ) (hf : MeasurePreserving f μ ν) :\n    (g.compMeasurePreserving f hf).toGerm =\n      g.toGerm.compTendsto f hf.quasiMeasurePreserving.tendsto_ae :=\n  compQuasiMeasurePreserving_toGerm _ _\n\n"}
{"name":"MeasureTheory.AEEqFun.comp_toGerm","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\ng : β → γ\nhg : Continuous g\nf : MeasureTheory.AEEqFun α β μ\n⊢ Eq (MeasureTheory.AEEqFun.comp g hg f).toGerm (Filter.Germ.map g f.toGerm)","decl":"theorem comp_toGerm (g : β → γ) (hg : Continuous g) (f : α →ₘ[μ] β) :\n    (comp g hg f).toGerm = f.toGerm.map g :=\n  induction_on f fun f _ => by simp\n\n"}
{"name":"MeasureTheory.AEEqFun.compMeasurable_toGerm","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁸ : TopologicalSpace β\ninst✝⁷ : TopologicalSpace γ\ninst✝⁶ : MeasurableSpace β\ninst✝⁵ : BorelSpace β\ninst✝⁴ : TopologicalSpace.PseudoMetrizableSpace β\ninst✝³ : TopologicalSpace.PseudoMetrizableSpace γ\ninst✝² : SecondCountableTopology γ\ninst✝¹ : MeasurableSpace γ\ninst✝ : OpensMeasurableSpace γ\ng : β → γ\nhg : Measurable g\nf : MeasureTheory.AEEqFun α β μ\n⊢ Eq (MeasureTheory.AEEqFun.compMeasurable g hg f).toGerm (Filter.Germ.map g f.toGerm)","decl":"theorem compMeasurable_toGerm [MeasurableSpace β] [BorelSpace β] [PseudoMetrizableSpace β]\n    [PseudoMetrizableSpace γ] [SecondCountableTopology γ] [MeasurableSpace γ]\n    [OpensMeasurableSpace γ] (g : β → γ) (hg : Measurable g) (f : α →ₘ[μ] β) :\n    (compMeasurable g hg f).toGerm = f.toGerm.map g :=\n  induction_on f fun f _ => by simp\n\n"}
{"name":"MeasureTheory.AEEqFun.comp₂_toGerm","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace δ\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\ng : β → γ → δ\nhg : Continuous (Function.uncurry g)\nf₁ : MeasureTheory.AEEqFun α β μ\nf₂ : MeasureTheory.AEEqFun α γ μ\n⊢ Eq (MeasureTheory.AEEqFun.comp₂ g hg f₁ f₂).toGerm (Filter.Germ.map₂ g f₁.toGerm f₂.toGerm)","decl":"theorem comp₂_toGerm (g : β → γ → δ) (hg : Continuous (uncurry g)) (f₁ : α →ₘ[μ] β)\n    (f₂ : α →ₘ[μ] γ) : (comp₂ g hg f₁ f₂).toGerm = f₁.toGerm.map₂ g f₂.toGerm :=\n  induction_on₂ f₁ f₂ fun f₁ _ f₂ _ => by simp\n\n"}
{"name":"MeasureTheory.AEEqFun.comp₂Measurable_toGerm","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\ninst✝¹⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹³ : TopologicalSpace δ\ninst✝¹² : TopologicalSpace β\ninst✝¹¹ : TopologicalSpace γ\ninst✝¹⁰ : TopologicalSpace.PseudoMetrizableSpace β\ninst✝⁹ : MeasurableSpace β\ninst✝⁸ : BorelSpace β\ninst✝⁷ : TopologicalSpace.PseudoMetrizableSpace γ\ninst✝⁶ : SecondCountableTopologyEither β γ\ninst✝⁵ : MeasurableSpace γ\ninst✝⁴ : BorelSpace γ\ninst✝³ : TopologicalSpace.PseudoMetrizableSpace δ\ninst✝² : SecondCountableTopology δ\ninst✝¹ : MeasurableSpace δ\ninst✝ : OpensMeasurableSpace δ\ng : β → γ → δ\nhg : Measurable (Function.uncurry g)\nf₁ : MeasureTheory.AEEqFun α β μ\nf₂ : MeasureTheory.AEEqFun α γ μ\n⊢ Eq (MeasureTheory.AEEqFun.comp₂Measurable g hg f₁ f₂).toGerm (Filter.Germ.map₂ g f₁.toGerm f₂.toGerm)","decl":"theorem comp₂Measurable_toGerm [PseudoMetrizableSpace β] [MeasurableSpace β] [BorelSpace β]\n    [PseudoMetrizableSpace γ] [SecondCountableTopologyEither β γ]\n    [MeasurableSpace γ] [BorelSpace γ] [PseudoMetrizableSpace δ] [SecondCountableTopology δ]\n    [MeasurableSpace δ] [OpensMeasurableSpace δ] (g : β → γ → δ) (hg : Measurable (uncurry g))\n    (f₁ : α →ₘ[μ] β) (f₂ : α →ₘ[μ] γ) :\n    (comp₂Measurable g hg f₁ f₂).toGerm = f₁.toGerm.map₂ g f₂.toGerm :=\n  induction_on₂ f₁ f₂ fun f₁ _ f₂ _ => by simp\n\n"}
{"name":"MeasureTheory.AEEqFun.liftRel_mk_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\nr : β → γ → Prop\nf : α → β\ng : α → γ\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ Iff (MeasureTheory.AEEqFun.LiftRel r (MeasureTheory.AEEqFun.mk f hf) (MeasureTheory.AEEqFun.mk g hg)) (Filter.Eventually (fun a => r (f a) (g a)) (MeasureTheory.ae μ))","decl":"theorem liftRel_mk_mk {r : β → γ → Prop} {f : α → β} {g : α → γ} {hf hg} :\n    LiftRel r (mk f hf : α →ₘ[μ] β) (mk g hg) ↔ ∀ᵐ a ∂μ, r (f a) (g a) :=\n  Iff.rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.liftRel_iff_coeFn","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\nr : β → γ → Prop\nf : MeasureTheory.AEEqFun α β μ\ng : MeasureTheory.AEEqFun α γ μ\n⊢ Iff (MeasureTheory.AEEqFun.LiftRel r f g) (Filter.Eventually (fun a => r (↑f a) (↑g a)) (MeasureTheory.ae μ))","decl":"theorem liftRel_iff_coeFn {r : β → γ → Prop} {f : α →ₘ[μ] β} {g : α →ₘ[μ] γ} :\n    LiftRel r f g ↔ ∀ᵐ a ∂μ, r (f a) (g a) := by rw [← liftRel_mk_mk, mk_coeFn, mk_coeFn]\n\n"}
{"name":"MeasureTheory.AEEqFun.mk_le_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace β\ninst✝ : Preorder β\nf g : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ Iff (LE.le (MeasureTheory.AEEqFun.mk f hf) (MeasureTheory.AEEqFun.mk g hg)) ((MeasureTheory.ae μ).EventuallyLE f g)","decl":"@[simp]\ntheorem mk_le_mk [Preorder β] {f g : α → β} (hf hg) : (mk f hf : α →ₘ[μ] β) ≤ mk g hg ↔ f ≤ᵐ[μ] g :=\n  Iff.rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_le","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace β\ninst✝ : Preorder β\nf g : MeasureTheory.AEEqFun α β μ\n⊢ Iff ((MeasureTheory.ae μ).EventuallyLE ↑f ↑g) (LE.le f g)","decl":"@[simp, norm_cast]\ntheorem coeFn_le [Preorder β] {f g : α →ₘ[μ] β} : (f : α → β) ≤ᵐ[μ] g ↔ f ≤ g :=\n  liftRel_iff_coeFn.symm\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_sup","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace β\ninst✝¹ : SemilatticeSup β\ninst✝ : ContinuousSup β\nf g : MeasureTheory.AEEqFun α β μ\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑(Max.max f g) fun x => Max.max (↑f x) (↑g x)","decl":"theorem coeFn_sup (f g : α →ₘ[μ] β) : ⇑(f ⊔ g) =ᵐ[μ] fun x => f x ⊔ g x :=\n  coeFn_comp₂ _ _ _ _\n\n"}
{"name":"MeasureTheory.AEEqFun.le_sup_left","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace β\ninst✝¹ : SemilatticeSup β\ninst✝ : ContinuousSup β\nf g : MeasureTheory.AEEqFun α β μ\n⊢ LE.le f (Max.max f g)","decl":"protected theorem le_sup_left (f g : α →ₘ[μ] β) : f ≤ f ⊔ g := by\n  rw [← coeFn_le]\n  filter_upwards [coeFn_sup f g] with _ ha\n  rw [ha]\n  exact le_sup_left\n\n"}
{"name":"MeasureTheory.AEEqFun.le_sup_right","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace β\ninst✝¹ : SemilatticeSup β\ninst✝ : ContinuousSup β\nf g : MeasureTheory.AEEqFun α β μ\n⊢ LE.le g (Max.max f g)","decl":"protected theorem le_sup_right (f g : α →ₘ[μ] β) : g ≤ f ⊔ g := by\n  rw [← coeFn_le]\n  filter_upwards [coeFn_sup f g] with _ ha\n  rw [ha]\n  exact le_sup_right\n\n"}
{"name":"MeasureTheory.AEEqFun.sup_le","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace β\ninst✝¹ : SemilatticeSup β\ninst✝ : ContinuousSup β\nf g f' : MeasureTheory.AEEqFun α β μ\nhf : LE.le f f'\nhg : LE.le g f'\n⊢ LE.le (Max.max f g) f'","decl":"protected theorem sup_le (f g f' : α →ₘ[μ] β) (hf : f ≤ f') (hg : g ≤ f') : f ⊔ g ≤ f' := by\n  rw [← coeFn_le] at hf hg ⊢\n  filter_upwards [hf, hg, coeFn_sup f g] with _ haf hag ha_sup\n  rw [ha_sup]\n  exact sup_le haf hag\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_inf","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace β\ninst✝¹ : SemilatticeInf β\ninst✝ : ContinuousInf β\nf g : MeasureTheory.AEEqFun α β μ\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑(Min.min f g) fun x => Min.min (↑f x) (↑g x)","decl":"theorem coeFn_inf (f g : α →ₘ[μ] β) : ⇑(f ⊓ g) =ᵐ[μ] fun x => f x ⊓ g x :=\n  coeFn_comp₂ _ _ _ _\n\n"}
{"name":"MeasureTheory.AEEqFun.inf_le_left","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace β\ninst✝¹ : SemilatticeInf β\ninst✝ : ContinuousInf β\nf g : MeasureTheory.AEEqFun α β μ\n⊢ LE.le (Min.min f g) f","decl":"protected theorem inf_le_left (f g : α →ₘ[μ] β) : f ⊓ g ≤ f := by\n  rw [← coeFn_le]\n  filter_upwards [coeFn_inf f g] with _ ha\n  rw [ha]\n  exact inf_le_left\n\n"}
{"name":"MeasureTheory.AEEqFun.inf_le_right","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace β\ninst✝¹ : SemilatticeInf β\ninst✝ : ContinuousInf β\nf g : MeasureTheory.AEEqFun α β μ\n⊢ LE.le (Min.min f g) g","decl":"protected theorem inf_le_right (f g : α →ₘ[μ] β) : f ⊓ g ≤ g := by\n  rw [← coeFn_le]\n  filter_upwards [coeFn_inf f g] with _ ha\n  rw [ha]\n  exact inf_le_right\n\n"}
{"name":"MeasureTheory.AEEqFun.le_inf","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace β\ninst✝¹ : SemilatticeInf β\ninst✝ : ContinuousInf β\nf' f g : MeasureTheory.AEEqFun α β μ\nhf : LE.le f' f\nhg : LE.le f' g\n⊢ LE.le f' (Min.min f g)","decl":"protected theorem le_inf (f' f g : α →ₘ[μ] β) (hf : f' ≤ f) (hg : f' ≤ g) : f' ≤ f ⊓ g := by\n  rw [← coeFn_le] at hf hg ⊢\n  filter_upwards [hf, hg, coeFn_inf f g] with _ haf hag ha_inf\n  rw [ha_inf]\n  exact le_inf haf hag\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_const","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : TopologicalSpace β\nb : β\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑(MeasureTheory.AEEqFun.const α b)) (Function.const α b)","decl":"theorem coeFn_const (b : β) : (const α b : α →ₘ[μ] β) =ᵐ[μ] Function.const α b :=\n  coeFn_mk _ _\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_const_eq","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace β\ninst✝ : NeZero μ\nb : β\nx : α\n⊢ Eq (↑(MeasureTheory.AEEqFun.const α b) x) b","decl":"/-- If the measure is nonzero, we can strengthen `coeFn_const` to get an equality. -/\n@[simp]\ntheorem coeFn_const_eq [NeZero μ] (b : β) (x : α) : (const α b : α →ₘ[μ] β) x = b := by\n  simp only [cast]\n  split_ifs with h; swap; · exact h.elim ⟨b, rfl⟩\n  have := Classical.choose_spec h\n  set b' := Classical.choose h\n  simp_rw [const, mk_eq_mk, EventuallyEq, ← const_def, eventually_const] at this\n  rw [Function.const, this]\n\n"}
{"name":"MeasureTheory.AEEqFun.zero_def","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace β\ninst✝ : Zero β\n⊢ Eq 0 (MeasureTheory.AEEqFun.mk (fun x => 0) ⋯)","decl":"@[to_additive]\ntheorem one_def [One β] : (1 : α →ₘ[μ] β) = mk (fun _ : α => 1) aestronglyMeasurable_const :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.one_def","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace β\ninst✝ : One β\n⊢ Eq 1 (MeasureTheory.AEEqFun.mk (fun x => 1) ⋯)","decl":"@[to_additive]\ntheorem one_def [One β] : (1 : α →ₘ[μ] β) = mk (fun _ : α => 1) aestronglyMeasurable_const :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_one","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace β\ninst✝ : One β\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑1) 1","decl":"@[to_additive]\ntheorem coeFn_one [One β] : ⇑(1 : α →ₘ[μ] β) =ᵐ[μ] 1 :=\n  coeFn_const ..\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_zero","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace β\ninst✝ : Zero β\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑0) 0","decl":"@[to_additive]\ntheorem coeFn_one [One β] : ⇑(1 : α →ₘ[μ] β) =ᵐ[μ] 1 :=\n  coeFn_const ..\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_zero_eq","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace β\ninst✝¹ : NeZero μ\ninst✝ : Zero β\nx : α\n⊢ Eq (↑0 x) 0","decl":"@[to_additive (attr := simp)]\ntheorem coeFn_one_eq [NeZero μ] [One β] {x : α} : (1 : α →ₘ[μ] β) x = 1 :=\n  coeFn_const_eq ..\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_one_eq","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace β\ninst✝¹ : NeZero μ\ninst✝ : One β\nx : α\n⊢ Eq (↑1 x) 1","decl":"@[to_additive (attr := simp)]\ntheorem coeFn_one_eq [NeZero μ] [One β] {x : α} : (1 : α →ₘ[μ] β) x = 1 :=\n  coeFn_const_eq ..\n\n"}
{"name":"MeasureTheory.AEEqFun.one_toGerm","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace β\ninst✝ : One β\n⊢ Eq (MeasureTheory.AEEqFun.toGerm 1) 1","decl":"@[to_additive (attr := simp)]\ntheorem one_toGerm [One β] : (1 : α →ₘ[μ] β).toGerm = 1 :=\n  rfl\n\n-- Note we set up the scalar actions before the `Monoid` structures in case we want to\n-- try to override the `nsmul` or `zsmul` fields in future.\n"}
{"name":"MeasureTheory.AEEqFun.zero_toGerm","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace β\ninst✝ : Zero β\n⊢ Eq (MeasureTheory.AEEqFun.toGerm 0) 0","decl":"@[to_additive (attr := simp)]\ntheorem one_toGerm [One β] : (1 : α →ₘ[μ] β).toGerm = 1 :=\n  rfl\n\n-- Note we set up the scalar actions before the `Monoid` structures in case we want to\n-- try to override the `nsmul` or `zsmul` fields in future.\n"}
{"name":"MeasureTheory.AEEqFun.smul_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\n𝕜 : Type u_5\ninst✝¹ : SMul 𝕜 γ\ninst✝ : ContinuousConstSMul 𝕜 γ\nc : 𝕜\nf : α → γ\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ Eq (HSMul.hSMul c (MeasureTheory.AEEqFun.mk f hf)) (MeasureTheory.AEEqFun.mk (HSMul.hSMul c f) ⋯)","decl":"@[simp]\ntheorem smul_mk (c : 𝕜) (f : α → γ) (hf : AEStronglyMeasurable f μ) :\n    c • (mk f hf : α →ₘ[μ] γ) = mk (c • f) (hf.const_smul _) :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_smul","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\n𝕜 : Type u_5\ninst✝¹ : SMul 𝕜 γ\ninst✝ : ContinuousConstSMul 𝕜 γ\nc : 𝕜\nf : MeasureTheory.AEEqFun α γ μ\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑(HSMul.hSMul c f)) (HSMul.hSMul c ↑f)","decl":"theorem coeFn_smul (c : 𝕜) (f : α →ₘ[μ] γ) : ⇑(c • f) =ᵐ[μ] c • ⇑f :=\n  coeFn_comp _ _ _\n\n"}
{"name":"MeasureTheory.AEEqFun.smul_toGerm","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\n𝕜 : Type u_5\ninst✝¹ : SMul 𝕜 γ\ninst✝ : ContinuousConstSMul 𝕜 γ\nc : 𝕜\nf : MeasureTheory.AEEqFun α γ μ\n⊢ Eq (HSMul.hSMul c f).toGerm (HSMul.hSMul c f.toGerm)","decl":"theorem smul_toGerm (c : 𝕜) (f : α →ₘ[μ] γ) : (c • f).toGerm = c • f.toGerm :=\n  comp_toGerm _ _ _\n\n"}
{"name":"MeasureTheory.AEEqFun.instSMulCommClass","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝⁶ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁵ : TopologicalSpace γ\n𝕜 : Type u_5\n𝕜' : Type u_6\ninst✝⁴ : SMul 𝕜 γ\ninst✝³ : ContinuousConstSMul 𝕜 γ\ninst✝² : SMul 𝕜' γ\ninst✝¹ : ContinuousConstSMul 𝕜' γ\ninst✝ : SMulCommClass 𝕜 𝕜' γ\n⊢ SMulCommClass 𝕜 𝕜' (MeasureTheory.AEEqFun α γ μ)","decl":"instance instSMulCommClass [SMulCommClass 𝕜 𝕜' γ] : SMulCommClass 𝕜 𝕜' (α →ₘ[μ] γ) :=\n  ⟨fun a b f => induction_on f fun f hf => by simp_rw [smul_mk, smul_comm]⟩\n\n"}
{"name":"MeasureTheory.AEEqFun.instIsScalarTower","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝⁷ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁶ : TopologicalSpace γ\n𝕜 : Type u_5\n𝕜' : Type u_6\ninst✝⁵ : SMul 𝕜 γ\ninst✝⁴ : ContinuousConstSMul 𝕜 γ\ninst✝³ : SMul 𝕜' γ\ninst✝² : ContinuousConstSMul 𝕜' γ\ninst✝¹ : SMul 𝕜 𝕜'\ninst✝ : IsScalarTower 𝕜 𝕜' γ\n⊢ IsScalarTower 𝕜 𝕜' (MeasureTheory.AEEqFun α γ μ)","decl":"instance instIsScalarTower [SMul 𝕜 𝕜'] [IsScalarTower 𝕜 𝕜' γ] : IsScalarTower 𝕜 𝕜' (α →ₘ[μ] γ) :=\n  ⟨fun a b f => induction_on f fun f hf => by simp_rw [smul_mk, smul_assoc]⟩\n\n"}
{"name":"MeasureTheory.AEEqFun.instIsCentralScalar","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝⁵ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁴ : TopologicalSpace γ\n𝕜 : Type u_5\ninst✝³ : SMul 𝕜 γ\ninst✝² : ContinuousConstSMul 𝕜 γ\ninst✝¹ : SMul (MulOpposite 𝕜) γ\ninst✝ : IsCentralScalar 𝕜 γ\n⊢ IsCentralScalar 𝕜 (MeasureTheory.AEEqFun α γ μ)","decl":"instance instIsCentralScalar [SMul 𝕜ᵐᵒᵖ γ] [IsCentralScalar 𝕜 γ] : IsCentralScalar 𝕜 (α →ₘ[μ] γ) :=\n  ⟨fun a f => induction_on f fun f hf => by simp_rw [smul_mk, op_smul_eq_smul]⟩\n\n"}
{"name":"MeasureTheory.AEEqFun.mk_add_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : Add γ\ninst✝ : ContinuousAdd γ\nf g : α → γ\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ Eq (HAdd.hAdd (MeasureTheory.AEEqFun.mk f hf) (MeasureTheory.AEEqFun.mk g hg)) (MeasureTheory.AEEqFun.mk (HAdd.hAdd f g) ⋯)","decl":"@[to_additive (attr := simp)]\ntheorem mk_mul_mk (f g : α → γ) (hf : AEStronglyMeasurable f μ) (hg : AEStronglyMeasurable g μ) :\n    (mk f hf : α →ₘ[μ] γ) * mk g hg = mk (f * g) (hf.mul hg) :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.mk_mul_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : Mul γ\ninst✝ : ContinuousMul γ\nf g : α → γ\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ Eq (HMul.hMul (MeasureTheory.AEEqFun.mk f hf) (MeasureTheory.AEEqFun.mk g hg)) (MeasureTheory.AEEqFun.mk (HMul.hMul f g) ⋯)","decl":"@[to_additive (attr := simp)]\ntheorem mk_mul_mk (f g : α → γ) (hf : AEStronglyMeasurable f μ) (hg : AEStronglyMeasurable g μ) :\n    (mk f hf : α →ₘ[μ] γ) * mk g hg = mk (f * g) (hf.mul hg) :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_add","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : Add γ\ninst✝ : ContinuousAdd γ\nf g : MeasureTheory.AEEqFun α γ μ\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑(HAdd.hAdd f g)) (HAdd.hAdd ↑f ↑g)","decl":"@[to_additive]\ntheorem coeFn_mul (f g : α →ₘ[μ] γ) : ⇑(f * g) =ᵐ[μ] f * g :=\n  coeFn_comp₂ _ _ _ _\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_mul","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : Mul γ\ninst✝ : ContinuousMul γ\nf g : MeasureTheory.AEEqFun α γ μ\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑(HMul.hMul f g)) (HMul.hMul ↑f ↑g)","decl":"@[to_additive]\ntheorem coeFn_mul (f g : α →ₘ[μ] γ) : ⇑(f * g) =ᵐ[μ] f * g :=\n  coeFn_comp₂ _ _ _ _\n\n"}
{"name":"MeasureTheory.AEEqFun.mul_toGerm","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : Mul γ\ninst✝ : ContinuousMul γ\nf g : MeasureTheory.AEEqFun α γ μ\n⊢ Eq (HMul.hMul f g).toGerm (HMul.hMul f.toGerm g.toGerm)","decl":"@[to_additive (attr := simp)]\ntheorem mul_toGerm (f g : α →ₘ[μ] γ) : (f * g).toGerm = f.toGerm * g.toGerm :=\n  comp₂_toGerm _ _ _ _\n\n"}
{"name":"MeasureTheory.AEEqFun.add_toGerm","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : Add γ\ninst✝ : ContinuousAdd γ\nf g : MeasureTheory.AEEqFun α γ μ\n⊢ Eq (HAdd.hAdd f g).toGerm (HAdd.hAdd f.toGerm g.toGerm)","decl":"@[to_additive (attr := simp)]\ntheorem mul_toGerm (f g : α →ₘ[μ] γ) : (f * g).toGerm = f.toGerm * g.toGerm :=\n  comp₂_toGerm _ _ _ _\n\n"}
{"name":"MeasureTheory.AEEqFun.mk_pow","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : Monoid γ\ninst✝ : ContinuousMul γ\nf : α → γ\nhf : MeasureTheory.AEStronglyMeasurable f μ\nn : Nat\n⊢ Eq (HPow.hPow (MeasureTheory.AEEqFun.mk f hf) n) (MeasureTheory.AEEqFun.mk (HPow.hPow f n) ⋯)","decl":"@[simp]\ntheorem mk_pow (f : α → γ) (hf) (n : ℕ) :\n    (mk f hf : α →ₘ[μ] γ) ^ n =\n      mk (f ^ n) ((_root_.continuous_pow n).comp_aestronglyMeasurable hf) :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_pow","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : Monoid γ\ninst✝ : ContinuousMul γ\nf : MeasureTheory.AEEqFun α γ μ\nn : Nat\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑(HPow.hPow f n)) (HPow.hPow (↑f) n)","decl":"theorem coeFn_pow (f : α →ₘ[μ] γ) (n : ℕ) : ⇑(f ^ n) =ᵐ[μ] (⇑f) ^ n :=\n  coeFn_comp _ _ _\n\n"}
{"name":"MeasureTheory.AEEqFun.pow_toGerm","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : Monoid γ\ninst✝ : ContinuousMul γ\nf : MeasureTheory.AEEqFun α γ μ\nn : Nat\n⊢ Eq (HPow.hPow f n).toGerm (HPow.hPow f.toGerm n)","decl":"@[simp]\ntheorem pow_toGerm (f : α →ₘ[μ] γ) (n : ℕ) : (f ^ n).toGerm = f.toGerm ^ n :=\n  comp_toGerm _ _ _\n\n"}
{"name":"MeasureTheory.AEEqFun.toGermMonoidHom_apply","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : Monoid γ\ninst✝ : ContinuousMul γ\nf : MeasureTheory.AEEqFun α γ μ\n⊢ Eq (MeasureTheory.AEEqFun.toGermMonoidHom f) f.toGerm","decl":"/-- `AEEqFun.toGerm` as a `MonoidHom`. -/\n@[to_additive (attr := simps) \"`AEEqFun.toGerm` as an `AddMonoidHom`.\"]\ndef toGermMonoidHom : (α →ₘ[μ] γ) →* (ae μ).Germ γ where\n  toFun := toGerm\n  map_one' := one_toGerm\n  map_mul' := mul_toGerm\n\n"}
{"name":"MeasureTheory.AEEqFun.toGermAddMonoidHom_apply","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : AddMonoid γ\ninst✝ : ContinuousAdd γ\nf : MeasureTheory.AEEqFun α γ μ\n⊢ Eq (MeasureTheory.AEEqFun.toGermAddMonoidHom f) f.toGerm","decl":"/-- `AEEqFun.toGerm` as a `MonoidHom`. -/\n@[to_additive (attr := simps) \"`AEEqFun.toGerm` as an `AddMonoidHom`.\"]\ndef toGermMonoidHom : (α →ₘ[μ] γ) →* (ae μ).Germ γ where\n  toFun := toGerm\n  map_one' := one_toGerm\n  map_mul' := mul_toGerm\n\n"}
{"name":"MeasureTheory.AEEqFun.neg_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : AddGroup γ\ninst✝ : TopologicalAddGroup γ\nf : α → γ\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ Eq (Neg.neg (MeasureTheory.AEEqFun.mk f hf)) (MeasureTheory.AEEqFun.mk (Neg.neg f) ⋯)","decl":"@[to_additive (attr := simp)]\ntheorem inv_mk (f : α → γ) (hf) : (mk f hf : α →ₘ[μ] γ)⁻¹ = mk f⁻¹ hf.inv :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.inv_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : Group γ\ninst✝ : TopologicalGroup γ\nf : α → γ\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ Eq (Inv.inv (MeasureTheory.AEEqFun.mk f hf)) (MeasureTheory.AEEqFun.mk (Inv.inv f) ⋯)","decl":"@[to_additive (attr := simp)]\ntheorem inv_mk (f : α → γ) (hf) : (mk f hf : α →ₘ[μ] γ)⁻¹ = mk f⁻¹ hf.inv :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_inv","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : Group γ\ninst✝ : TopologicalGroup γ\nf : MeasureTheory.AEEqFun α γ μ\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑(Inv.inv f)) (Inv.inv ↑f)","decl":"@[to_additive]\ntheorem coeFn_inv (f : α →ₘ[μ] γ) : ⇑f⁻¹ =ᵐ[μ] f⁻¹ :=\n  coeFn_comp _ _ _\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_neg","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : AddGroup γ\ninst✝ : TopologicalAddGroup γ\nf : MeasureTheory.AEEqFun α γ μ\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑(Neg.neg f)) (Neg.neg ↑f)","decl":"@[to_additive]\ntheorem coeFn_inv (f : α →ₘ[μ] γ) : ⇑f⁻¹ =ᵐ[μ] f⁻¹ :=\n  coeFn_comp _ _ _\n\n"}
{"name":"MeasureTheory.AEEqFun.neg_toGerm","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : AddGroup γ\ninst✝ : TopologicalAddGroup γ\nf : MeasureTheory.AEEqFun α γ μ\n⊢ Eq (Neg.neg f).toGerm (Neg.neg f.toGerm)","decl":"@[to_additive]\ntheorem inv_toGerm (f : α →ₘ[μ] γ) : f⁻¹.toGerm = f.toGerm⁻¹ :=\n  comp_toGerm _ _ _\n\n"}
{"name":"MeasureTheory.AEEqFun.inv_toGerm","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : Group γ\ninst✝ : TopologicalGroup γ\nf : MeasureTheory.AEEqFun α γ μ\n⊢ Eq (Inv.inv f).toGerm (Inv.inv f.toGerm)","decl":"@[to_additive]\ntheorem inv_toGerm (f : α →ₘ[μ] γ) : f⁻¹.toGerm = f.toGerm⁻¹ :=\n  comp_toGerm _ _ _\n\n"}
{"name":"MeasureTheory.AEEqFun.mk_sub","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : AddGroup γ\ninst✝ : TopologicalAddGroup γ\nf g : α → γ\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ Eq (MeasureTheory.AEEqFun.mk (HSub.hSub f g) ⋯) (HSub.hSub (MeasureTheory.AEEqFun.mk f hf) (MeasureTheory.AEEqFun.mk g hg))","decl":"@[to_additive (attr := simp, nolint simpNF)] -- Porting note: LHS does not simplify.\ntheorem mk_div (f g : α → γ) (hf : AEStronglyMeasurable f μ) (hg : AEStronglyMeasurable g μ) :\n    mk (f / g) (hf.div hg) = (mk f hf : α →ₘ[μ] γ) / mk g hg :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.mk_div","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : Group γ\ninst✝ : TopologicalGroup γ\nf g : α → γ\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ Eq (MeasureTheory.AEEqFun.mk (HDiv.hDiv f g) ⋯) (HDiv.hDiv (MeasureTheory.AEEqFun.mk f hf) (MeasureTheory.AEEqFun.mk g hg))","decl":"@[to_additive (attr := simp, nolint simpNF)] -- Porting note: LHS does not simplify.\ntheorem mk_div (f g : α → γ) (hf : AEStronglyMeasurable f μ) (hg : AEStronglyMeasurable g μ) :\n    mk (f / g) (hf.div hg) = (mk f hf : α →ₘ[μ] γ) / mk g hg :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_sub","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : AddGroup γ\ninst✝ : TopologicalAddGroup γ\nf g : MeasureTheory.AEEqFun α γ μ\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑(HSub.hSub f g)) (HSub.hSub ↑f ↑g)","decl":"@[to_additive]\ntheorem coeFn_div (f g : α →ₘ[μ] γ) : ⇑(f / g) =ᵐ[μ] f / g :=\n  coeFn_comp₂ _ _ _ _\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_div","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : Group γ\ninst✝ : TopologicalGroup γ\nf g : MeasureTheory.AEEqFun α γ μ\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑(HDiv.hDiv f g)) (HDiv.hDiv ↑f ↑g)","decl":"@[to_additive]\ntheorem coeFn_div (f g : α →ₘ[μ] γ) : ⇑(f / g) =ᵐ[μ] f / g :=\n  coeFn_comp₂ _ _ _ _\n\n"}
{"name":"MeasureTheory.AEEqFun.div_toGerm","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : Group γ\ninst✝ : TopologicalGroup γ\nf g : MeasureTheory.AEEqFun α γ μ\n⊢ Eq (HDiv.hDiv f g).toGerm (HDiv.hDiv f.toGerm g.toGerm)","decl":"@[to_additive]\ntheorem div_toGerm (f g : α →ₘ[μ] γ) : (f / g).toGerm = f.toGerm / g.toGerm :=\n  comp₂_toGerm _ _ _ _\n\n"}
{"name":"MeasureTheory.AEEqFun.sub_toGerm","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : AddGroup γ\ninst✝ : TopologicalAddGroup γ\nf g : MeasureTheory.AEEqFun α γ μ\n⊢ Eq (HSub.hSub f g).toGerm (HSub.hSub f.toGerm g.toGerm)","decl":"@[to_additive]\ntheorem div_toGerm (f g : α →ₘ[μ] γ) : (f / g).toGerm = f.toGerm / g.toGerm :=\n  comp₂_toGerm _ _ _ _\n\n"}
{"name":"MeasureTheory.AEEqFun.mk_zpow","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : Group γ\ninst✝ : TopologicalGroup γ\nf : α → γ\nhf : MeasureTheory.AEStronglyMeasurable f μ\nn : Int\n⊢ Eq (HPow.hPow (MeasureTheory.AEEqFun.mk f hf) n) (MeasureTheory.AEEqFun.mk (HPow.hPow f n) ⋯)","decl":"@[simp]\ntheorem mk_zpow (f : α → γ) (hf) (n : ℤ) :\n    (mk f hf : α →ₘ[μ] γ) ^ n = mk (f ^ n) ((continuous_zpow n).comp_aestronglyMeasurable hf) :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_zpow","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : Group γ\ninst✝ : TopologicalGroup γ\nf : MeasureTheory.AEEqFun α γ μ\nn : Int\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑(HPow.hPow f n)) (HPow.hPow (↑f) n)","decl":"theorem coeFn_zpow (f : α →ₘ[μ] γ) (n : ℤ) : ⇑(f ^ n) =ᵐ[μ] (⇑f) ^ n :=\n  coeFn_comp _ _ _\n\n"}
{"name":"MeasureTheory.AEEqFun.zpow_toGerm","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace γ\ninst✝¹ : Group γ\ninst✝ : TopologicalGroup γ\nf : MeasureTheory.AEEqFun α γ μ\nn : Int\n⊢ Eq (HPow.hPow f n).toGerm (HPow.hPow f.toGerm n)","decl":"@[simp]\ntheorem zpow_toGerm (f : α →ₘ[μ] γ) (n : ℤ) : (f ^ n).toGerm = f.toGerm ^ n :=\n  comp_toGerm _ _ _\n\n"}
{"name":"MeasureTheory.AEEqFun.lintegral_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → ENNReal\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ Eq (MeasureTheory.AEEqFun.mk f hf).lintegral (MeasureTheory.lintegral μ fun a => f a)","decl":"@[simp]\ntheorem lintegral_mk (f : α → ℝ≥0∞) (hf) : (mk f hf : α →ₘ[μ] ℝ≥0∞).lintegral = ∫⁻ a, f a ∂μ :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.lintegral_coeFn","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : MeasureTheory.AEEqFun α ENNReal μ\n⊢ Eq (MeasureTheory.lintegral μ fun a => ↑f a) f.lintegral","decl":"theorem lintegral_coeFn (f : α →ₘ[μ] ℝ≥0∞) : ∫⁻ a, f a ∂μ = f.lintegral := by\n  rw [← lintegral_mk, mk_coeFn]\n\n"}
{"name":"MeasureTheory.AEEqFun.lintegral_zero","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\n⊢ Eq (MeasureTheory.AEEqFun.lintegral 0) 0","decl":"@[simp]\nnonrec theorem lintegral_zero : lintegral (0 : α →ₘ[μ] ℝ≥0∞) = 0 :=\n  lintegral_zero\n\n"}
{"name":"MeasureTheory.AEEqFun.lintegral_eq_zero_iff","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : MeasureTheory.AEEqFun α ENNReal μ\n⊢ Iff (Eq f.lintegral 0) (Eq f 0)","decl":"@[simp]\ntheorem lintegral_eq_zero_iff {f : α →ₘ[μ] ℝ≥0∞} : lintegral f = 0 ↔ f = 0 :=\n  induction_on f fun _f hf => (lintegral_eq_zero_iff' hf.aemeasurable).trans mk_eq_mk.symm\n\n"}
{"name":"MeasureTheory.AEEqFun.lintegral_add","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : MeasureTheory.AEEqFun α ENNReal μ\n⊢ Eq (HAdd.hAdd f g).lintegral (HAdd.hAdd f.lintegral g.lintegral)","decl":"theorem lintegral_add (f g : α →ₘ[μ] ℝ≥0∞) : lintegral (f + g) = lintegral f + lintegral g :=\n  induction_on₂ f g fun f hf g _ => by simp [lintegral_add_left' hf.aemeasurable]\n\n"}
{"name":"MeasureTheory.AEEqFun.lintegral_mono","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : MeasureTheory.AEEqFun α ENNReal μ\na✝ : LE.le f g\n⊢ LE.le f.lintegral g.lintegral","decl":"theorem lintegral_mono {f g : α →ₘ[μ] ℝ≥0∞} : f ≤ g → lintegral f ≤ lintegral g :=\n  induction_on₂ f g fun _f _ _g _ hfg => lintegral_mono_ae hfg\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_abs","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\ninst✝⁵ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nβ : Type u_5\ninst✝⁴ : TopologicalSpace β\ninst✝³ : Lattice β\ninst✝² : TopologicalLattice β\ninst✝¹ : AddGroup β\ninst✝ : TopologicalAddGroup β\nf : MeasureTheory.AEEqFun α β μ\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑(abs f) fun x => abs (↑f x)","decl":"theorem coeFn_abs {β} [TopologicalSpace β] [Lattice β] [TopologicalLattice β] [AddGroup β]\n    [TopologicalAddGroup β] (f : α →ₘ[μ] β) : ⇑|f| =ᵐ[μ] fun x => |f x| := by\n  simp_rw [abs]\n  filter_upwards [AEEqFun.coeFn_sup f (-f), AEEqFun.coeFn_neg f] with x hx_sup hx_neg\n  rw [hx_sup, hx_neg, Pi.neg_apply]\n\n"}
{"name":"MeasureTheory.AEEqFun.posPart_mk","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : TopologicalSpace γ\ninst✝² : LinearOrder γ\ninst✝¹ : OrderClosedTopology γ\ninst✝ : Zero γ\nf : α → γ\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ Eq (MeasureTheory.AEEqFun.mk f hf).posPart (MeasureTheory.AEEqFun.mk (fun x => Max.max (f x) 0) ⋯)","decl":"@[simp]\ntheorem posPart_mk (f : α → γ) (hf) :\n    posPart (mk f hf : α →ₘ[μ] γ) =\n      mk (fun x => max (f x) 0)\n        ((continuous_id.max continuous_const).comp_aestronglyMeasurable hf) :=\n  rfl\n\n"}
{"name":"MeasureTheory.AEEqFun.coeFn_posPart","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : TopologicalSpace γ\ninst✝² : LinearOrder γ\ninst✝¹ : OrderClosedTopology γ\ninst✝ : Zero γ\nf : MeasureTheory.AEEqFun α γ μ\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑f.posPart fun a => Max.max (↑f a) 0","decl":"theorem coeFn_posPart (f : α →ₘ[μ] γ) : ⇑(posPart f) =ᵐ[μ] fun a => max (f a) 0 :=\n  coeFn_comp _ _ _\n\n"}
{"name":"ContinuousMap.coeFn_toAEEqFun","module":"Mathlib.MeasureTheory.Function.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : BorelSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : SecondCountableTopologyEither α β\ninst✝ : TopologicalSpace.PseudoMetrizableSpace β\nf : ContinuousMap α β\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑(ContinuousMap.toAEEqFun μ f) ⇑f","decl":"theorem coeFn_toAEEqFun (f : C(α, β)) : f.toAEEqFun μ =ᵐ[μ] f :=\n  AEEqFun.coeFn_mk f _\n\n"}
