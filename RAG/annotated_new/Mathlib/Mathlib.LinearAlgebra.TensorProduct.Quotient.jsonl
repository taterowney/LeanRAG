{"name":"TensorProduct.quotientTensorQuotientEquiv_apply_tmul_mk_tmul_mk","module":"Mathlib.LinearAlgebra.TensorProduct.Quotient","initialProofState":"R : Type u_1\nM : Type u_2\nN : Type u_3\ninst✝⁴ : CommRing R\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : AddCommGroup N\ninst✝ : Module R N\nm : Submodule R M\nn : Submodule R N\nx : M\ny : N\n⊢ Eq ((TensorProduct.quotientTensorQuotientEquiv m n) (TensorProduct.tmul R (Submodule.Quotient.mk x) (Submodule.Quotient.mk y))) (Submodule.Quotient.mk (TensorProduct.tmul R x y))","decl":"@[simp]\nlemma quotientTensorQuotientEquiv_apply_tmul_mk_tmul_mk\n    (m : Submodule R M) (n : Submodule R N) (x : M) (y : N) :\n    quotientTensorQuotientEquiv m n\n      (Submodule.Quotient.mk x ⊗ₜ[R] Submodule.Quotient.mk y) =\n      Submodule.Quotient.mk (x ⊗ₜ y) := rfl\n\n"}
{"name":"TensorProduct.quotientTensorQuotientEquiv_symm_apply_mk_tmul","module":"Mathlib.LinearAlgebra.TensorProduct.Quotient","initialProofState":"R : Type u_1\nM : Type u_2\nN : Type u_3\ninst✝⁴ : CommRing R\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : AddCommGroup N\ninst✝ : Module R N\nm : Submodule R M\nn : Submodule R N\nx : M\ny : N\n⊢ Eq ((TensorProduct.quotientTensorQuotientEquiv m n).symm (Submodule.Quotient.mk (TensorProduct.tmul R x y))) (TensorProduct.tmul R (Submodule.Quotient.mk x) (Submodule.Quotient.mk y))","decl":"@[simp]\nlemma quotientTensorQuotientEquiv_symm_apply_mk_tmul\n    (m : Submodule R M) (n : Submodule R N) (x : M) (y : N) :\n    (quotientTensorQuotientEquiv m n).symm (Submodule.Quotient.mk (x ⊗ₜ y)) =\n      Submodule.Quotient.mk x ⊗ₜ[R] Submodule.Quotient.mk y := rfl\n\n"}
{"name":"TensorProduct.quotientTensorEquiv_apply_tmul_mk","module":"Mathlib.LinearAlgebra.TensorProduct.Quotient","initialProofState":"R : Type u_1\nM : Type u_2\nN : Type u_3\ninst✝⁴ : CommRing R\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : AddCommGroup N\ninst✝ : Module R N\nm : Submodule R M\nx : M\ny : N\n⊢ Eq ((TensorProduct.quotientTensorEquiv N m) (TensorProduct.tmul R (Submodule.Quotient.mk x) y)) (Submodule.Quotient.mk (TensorProduct.tmul R x y))","decl":"@[simp]\nlemma quotientTensorEquiv_apply_tmul_mk (m : Submodule R M) (x : M) (y : N) :\n    quotientTensorEquiv N m (Submodule.Quotient.mk x ⊗ₜ[R] y) =\n    Submodule.Quotient.mk (x ⊗ₜ y) :=\n  rfl\n\n"}
{"name":"TensorProduct.quotientTensorEquiv_symm_apply_mk_tmul","module":"Mathlib.LinearAlgebra.TensorProduct.Quotient","initialProofState":"R : Type u_1\nM : Type u_2\nN : Type u_3\ninst✝⁴ : CommRing R\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : AddCommGroup N\ninst✝ : Module R N\nm : Submodule R M\nx : M\ny : N\n⊢ Eq ((TensorProduct.quotientTensorEquiv N m).symm (Submodule.Quotient.mk (TensorProduct.tmul R x y))) (TensorProduct.tmul R (Submodule.Quotient.mk x) y)","decl":"@[simp]\nlemma quotientTensorEquiv_symm_apply_mk_tmul (m : Submodule R M) (x : M) (y : N) :\n    (quotientTensorEquiv N m).symm (Submodule.Quotient.mk (x ⊗ₜ y)) =\n    Submodule.Quotient.mk x ⊗ₜ[R] y :=\n  rfl\n\n"}
{"name":"TensorProduct.tensorQuotientEquiv_apply_mk_tmul","module":"Mathlib.LinearAlgebra.TensorProduct.Quotient","initialProofState":"R : Type u_1\nM : Type u_2\nN : Type u_3\ninst✝⁴ : CommRing R\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : AddCommGroup N\ninst✝ : Module R N\nn : Submodule R N\nx : M\ny : N\n⊢ Eq ((TensorProduct.tensorQuotientEquiv M n) (TensorProduct.tmul R x (Submodule.Quotient.mk y))) (Submodule.Quotient.mk (TensorProduct.tmul R x y))","decl":"@[simp]\nlemma tensorQuotientEquiv_apply_mk_tmul (n : Submodule R N) (x : M) (y : N) :\n    tensorQuotientEquiv M n (x ⊗ₜ[R] Submodule.Quotient.mk y) =\n    Submodule.Quotient.mk (x ⊗ₜ y) :=\n  rfl\n\n"}
{"name":"TensorProduct.tensorQuotientEquiv_symm_apply_tmul_mk","module":"Mathlib.LinearAlgebra.TensorProduct.Quotient","initialProofState":"R : Type u_1\nM : Type u_2\nN : Type u_3\ninst✝⁴ : CommRing R\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : AddCommGroup N\ninst✝ : Module R N\nn : Submodule R N\nx : M\ny : N\n⊢ Eq ((TensorProduct.tensorQuotientEquiv M n).symm (Submodule.Quotient.mk (TensorProduct.tmul R x y))) (TensorProduct.tmul R x (Submodule.Quotient.mk y))","decl":"@[simp]\nlemma tensorQuotientEquiv_symm_apply_tmul_mk (n : Submodule R N) (x : M) (y : N) :\n    (tensorQuotientEquiv M n).symm (Submodule.Quotient.mk (x ⊗ₜ y)) =\n    x ⊗ₜ[R] Submodule.Quotient.mk y :=\n  rfl\n\n"}
{"name":"TensorProduct.quotTensorEquivQuotSMul_mk_tmul","module":"Mathlib.LinearAlgebra.TensorProduct.Quotient","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommRing R\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\nI : Ideal R\nr : R\nx : M\n⊢ Eq ((TensorProduct.quotTensorEquivQuotSMul M I) (TensorProduct.tmul R ((Ideal.Quotient.mk I) r) x)) (Submodule.Quotient.mk (HSMul.hSMul r x))","decl":"@[simp]\nlemma quotTensorEquivQuotSMul_mk_tmul (I : Ideal R) (r : R) (x : M) :\n    quotTensorEquivQuotSMul M I (Ideal.Quotient.mk I r ⊗ₜ[R] x) =\n      Submodule.Quotient.mk (r • x) :=\n  (quotTensorEquivQuotSMul M I).eq_symm_apply.mp <|\n    Eq.trans (congrArg (· ⊗ₜ[R] x) <|\n        Eq.trans (congrArg (Ideal.Quotient.mk I)\n                    (Eq.trans (smul_eq_mul R) (mul_one r))).symm <|\n          Submodule.Quotient.mk_smul I r 1) <|\n      smul_tmul r _ x\n\n"}
{"name":"TensorProduct.quotTensorEquivQuotSMul_comp_mkQ_rTensor","module":"Mathlib.LinearAlgebra.TensorProduct.Quotient","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommRing R\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\nI : Ideal R\n⊢ Eq ((↑(TensorProduct.quotTensorEquivQuotSMul M I)).comp (LinearMap.rTensor M (Submodule.mkQ I))) ((HSMul.hSMul I Top.top).mkQ.comp ↑(TensorProduct.lid R M))","decl":"lemma quotTensorEquivQuotSMul_comp_mkQ_rTensor (I : Ideal R) :\n    quotTensorEquivQuotSMul M I ∘ₗ I.mkQ.rTensor M =\n      (I • ⊤ : Submodule R M).mkQ ∘ₗ TensorProduct.lid R M :=\n  TensorProduct.ext' (quotTensorEquivQuotSMul_mk_tmul I)\n\n"}
{"name":"TensorProduct.quotTensorEquivQuotSMul_symm_mk","module":"Mathlib.LinearAlgebra.TensorProduct.Quotient","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommRing R\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\nI : Ideal R\nx : M\n⊢ Eq ((TensorProduct.quotTensorEquivQuotSMul M I).symm (Submodule.Quotient.mk x)) (TensorProduct.tmul R 1 x)","decl":"@[simp]\nlemma quotTensorEquivQuotSMul_symm_mk (I : Ideal R) (x : M) :\n    (quotTensorEquivQuotSMul M I).symm (Submodule.Quotient.mk x) = 1 ⊗ₜ[R] x :=\n  rfl\n\n"}
{"name":"TensorProduct.quotTensorEquivQuotSMul_symm_comp_mkQ","module":"Mathlib.LinearAlgebra.TensorProduct.Quotient","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommRing R\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\nI : Ideal R\n⊢ Eq ((↑(TensorProduct.quotTensorEquivQuotSMul M I).symm).comp (HSMul.hSMul I Top.top).mkQ) ((TensorProduct.mk R (HasQuotient.Quotient R I) M) 1)","decl":"lemma quotTensorEquivQuotSMul_symm_comp_mkQ (I : Ideal R) :\n    (quotTensorEquivQuotSMul M I).symm ∘ₗ (I • ⊤ : Submodule R M).mkQ =\n      TensorProduct.mk R (R ⧸ I) M 1 :=\n  LinearMap.ext (quotTensorEquivQuotSMul_symm_mk I)\n\n"}
{"name":"TensorProduct.quotTensorEquivQuotSMul_comp_mk","module":"Mathlib.LinearAlgebra.TensorProduct.Quotient","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommRing R\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\nI : Ideal R\n⊢ Eq ((↑(TensorProduct.quotTensorEquivQuotSMul M I)).comp ((TensorProduct.mk R (HasQuotient.Quotient R I) M) 1)) (HSMul.hSMul I Top.top).mkQ","decl":"lemma quotTensorEquivQuotSMul_comp_mk (I : Ideal R) :\n    quotTensorEquivQuotSMul M I ∘ₗ TensorProduct.mk R (R ⧸ I) M 1 =\n      Submodule.mkQ (I • ⊤) :=\n  Eq.symm <| (LinearEquiv.toLinearMap_symm_comp_eq _ _).mp <|\n    quotTensorEquivQuotSMul_symm_comp_mkQ I\n\n"}
{"name":"TensorProduct.tensorQuotEquivQuotSMul_tmul_mk","module":"Mathlib.LinearAlgebra.TensorProduct.Quotient","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommRing R\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\nI : Ideal R\nx : M\nr : R\n⊢ Eq ((TensorProduct.tensorQuotEquivQuotSMul M I) (TensorProduct.tmul R x ((Ideal.Quotient.mk I) r))) (Submodule.Quotient.mk (HSMul.hSMul r x))","decl":"@[simp]\nlemma tensorQuotEquivQuotSMul_tmul_mk (I : Ideal R) (x : M) (r : R) :\n    tensorQuotEquivQuotSMul M I (x ⊗ₜ[R] Ideal.Quotient.mk I r) =\n      Submodule.Quotient.mk (r • x) :=\n  quotTensorEquivQuotSMul_mk_tmul I r x\n\n"}
{"name":"TensorProduct.tensorQuotEquivQuotSMul_comp_mkQ_lTensor","module":"Mathlib.LinearAlgebra.TensorProduct.Quotient","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommRing R\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\nI : Ideal R\n⊢ Eq ((↑(TensorProduct.tensorQuotEquivQuotSMul M I)).comp (LinearMap.lTensor M (Submodule.mkQ I))) ((HSMul.hSMul I Top.top).mkQ.comp ↑(TensorProduct.rid R M))","decl":"lemma tensorQuotEquivQuotSMul_comp_mkQ_lTensor (I : Ideal R) :\n    tensorQuotEquivQuotSMul M I ∘ₗ I.mkQ.lTensor M =\n      (I • ⊤ : Submodule R M).mkQ ∘ₗ TensorProduct.rid R M :=\n  TensorProduct.ext' (tensorQuotEquivQuotSMul_tmul_mk I)\n\n"}
{"name":"TensorProduct.tensorQuotEquivQuotSMul_symm_mk","module":"Mathlib.LinearAlgebra.TensorProduct.Quotient","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommRing R\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\nI : Ideal R\nx : M\n⊢ Eq ((TensorProduct.tensorQuotEquivQuotSMul M I).symm (Submodule.Quotient.mk x)) (TensorProduct.tmul R x 1)","decl":"@[simp]\nlemma tensorQuotEquivQuotSMul_symm_mk (I : Ideal R) (x : M) :\n    (tensorQuotEquivQuotSMul M I).symm (Submodule.Quotient.mk x) = x ⊗ₜ[R] 1 :=\n  rfl\n\n"}
{"name":"TensorProduct.tensorQuotEquivQuotSMul_symm_comp_mkQ","module":"Mathlib.LinearAlgebra.TensorProduct.Quotient","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommRing R\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\nI : Ideal R\n⊢ Eq ((↑(TensorProduct.tensorQuotEquivQuotSMul M I).symm).comp (HSMul.hSMul I Top.top).mkQ) ((TensorProduct.mk R M (HasQuotient.Quotient R I)).flip 1)","decl":"lemma tensorQuotEquivQuotSMul_symm_comp_mkQ (I : Ideal R) :\n    (tensorQuotEquivQuotSMul M I).symm ∘ₗ (I • ⊤ : Submodule R M).mkQ =\n      (TensorProduct.mk R M (R ⧸ I)).flip 1 :=\n  LinearMap.ext (tensorQuotEquivQuotSMul_symm_mk I)\n\n"}
{"name":"TensorProduct.tensorQuotEquivQuotSMul_comp_mk","module":"Mathlib.LinearAlgebra.TensorProduct.Quotient","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommRing R\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\nI : Ideal R\n⊢ Eq ((↑(TensorProduct.tensorQuotEquivQuotSMul M I)).comp ((TensorProduct.mk R M (HasQuotient.Quotient R I)).flip 1)) (HSMul.hSMul I Top.top).mkQ","decl":"lemma tensorQuotEquivQuotSMul_comp_mk (I : Ideal R) :\n    tensorQuotEquivQuotSMul M I ∘ₗ (TensorProduct.mk R M (R ⧸ I)).flip 1 =\n      Submodule.mkQ (I • ⊤) :=\n  Eq.symm <| (LinearEquiv.toLinearMap_symm_comp_eq _ _).mp <|\n    tensorQuotEquivQuotSMul_symm_comp_mkQ I\n\n"}
