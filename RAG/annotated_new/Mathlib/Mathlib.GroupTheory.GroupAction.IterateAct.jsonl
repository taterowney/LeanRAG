{"name":"IterateAddAct.mk.sizeOf_spec","module":"Mathlib.GroupTheory.GroupAction.IterateAct","initialProofState":"α : Type u_1\nf : α → α\ninst✝ : SizeOf α\nval : Nat\n⊢ Eq (SizeOf.sizeOf { val := val }) (HAdd.hAdd 1 (SizeOf.sizeOf val))","decl":"/-- A structure with a single field `val : ℕ`\nthat additively acts on `α` by `⟨n⟩ +ᵥ x = f^[n] x`. -/\nstructure IterateAddAct {α : Type*} (f : α → α) where\n  /-- The value of `n : IterateAddAct f`. -/\n  val : ℕ\n\n"}
{"name":"IterateAddAct.mk.inj","module":"Mathlib.GroupTheory.GroupAction.IterateAct","initialProofState":"α : Type u_1\nf : α → α\nval✝ val : Nat\nx✝ : Eq { val := val✝ } { val := val }\n⊢ Eq val✝ val","decl":"/-- A structure with a single field `val : ℕ`\nthat additively acts on `α` by `⟨n⟩ +ᵥ x = f^[n] x`. -/\nstructure IterateAddAct {α : Type*} (f : α → α) where\n  /-- The value of `n : IterateAddAct f`. -/\n  val : ℕ\n\n"}
{"name":"IterateAddAct.mk.injEq","module":"Mathlib.GroupTheory.GroupAction.IterateAct","initialProofState":"α : Type u_1\nf : α → α\nval✝ val : Nat\n⊢ Eq (Eq { val := val✝ } { val := val }) (Eq val✝ val)","decl":"/-- A structure with a single field `val : ℕ`\nthat additively acts on `α` by `⟨n⟩ +ᵥ x = f^[n] x`. -/\nstructure IterateAddAct {α : Type*} (f : α → α) where\n  /-- The value of `n : IterateAddAct f`. -/\n  val : ℕ\n\n"}
{"name":"IterateMulAct.mk.injEq","module":"Mathlib.GroupTheory.GroupAction.IterateAct","initialProofState":"α : Type u_1\nf : α → α\nval✝ val : Nat\n⊢ Eq (Eq { val := val✝ } { val := val }) (Eq val✝ val)","decl":"/-- A structure with a single field `val : ℕ` that acts on `α` by `⟨n⟩ • x = f^[n] x`. -/\n@[to_additive (attr := ext)]\nstructure IterateMulAct {α : Type*} (f : α → α) where\n  /-- The value of `n : IterateMulAct f`. -/\n  val : ℕ\n\n"}
{"name":"IterateAddAct.ext","module":"Mathlib.GroupTheory.GroupAction.IterateAct","initialProofState":"α : Type u_1\nf : α → α\nx y : IterateAddAct f\nval : Eq x.val y.val\n⊢ Eq x y","decl":"/-- A structure with a single field `val : ℕ` that acts on `α` by `⟨n⟩ • x = f^[n] x`. -/\n@[to_additive (attr := ext)]\nstructure IterateMulAct {α : Type*} (f : α → α) where\n  /-- The value of `n : IterateMulAct f`. -/\n  val : ℕ\n\n"}
{"name":"IterateMulAct.mk.inj","module":"Mathlib.GroupTheory.GroupAction.IterateAct","initialProofState":"α : Type u_1\nf : α → α\nval✝ val : Nat\nx✝ : Eq { val := val✝ } { val := val }\n⊢ Eq val✝ val","decl":"/-- A structure with a single field `val : ℕ` that acts on `α` by `⟨n⟩ • x = f^[n] x`. -/\n@[to_additive (attr := ext)]\nstructure IterateMulAct {α : Type*} (f : α → α) where\n  /-- The value of `n : IterateMulAct f`. -/\n  val : ℕ\n\n"}
{"name":"IterateMulAct.ext","module":"Mathlib.GroupTheory.GroupAction.IterateAct","initialProofState":"α : Type u_1\nf : α → α\nx y : IterateMulAct f\nval : Eq x.val y.val\n⊢ Eq x y","decl":"/-- A structure with a single field `val : ℕ` that acts on `α` by `⟨n⟩ • x = f^[n] x`. -/\n@[to_additive (attr := ext)]\nstructure IterateMulAct {α : Type*} (f : α → α) where\n  /-- The value of `n : IterateMulAct f`. -/\n  val : ℕ\n\n"}
{"name":"IterateMulAct.mk.sizeOf_spec","module":"Mathlib.GroupTheory.GroupAction.IterateAct","initialProofState":"α : Type u_1\nf : α → α\ninst✝ : SizeOf α\nval : Nat\n⊢ Eq (SizeOf.sizeOf { val := val }) (HAdd.hAdd 1 (SizeOf.sizeOf val))","decl":"/-- A structure with a single field `val : ℕ` that acts on `α` by `⟨n⟩ • x = f^[n] x`. -/\n@[to_additive (attr := ext)]\nstructure IterateMulAct {α : Type*} (f : α → α) where\n  /-- The value of `n : IterateMulAct f`. -/\n  val : ℕ\n\n"}
{"name":"IterateAddAct.ext_iff","module":"Mathlib.GroupTheory.GroupAction.IterateAct","initialProofState":"α : Type u_1\nf : α → α\nx y : IterateAddAct f\n⊢ Iff (Eq x y) (Eq x.val y.val)","decl":"/-- A structure with a single field `val : ℕ` that acts on `α` by `⟨n⟩ • x = f^[n] x`. -/\n@[to_additive (attr := ext)]\nstructure IterateMulAct {α : Type*} (f : α → α) where\n  /-- The value of `n : IterateMulAct f`. -/\n  val : ℕ\n\n"}
{"name":"IterateMulAct.ext_iff","module":"Mathlib.GroupTheory.GroupAction.IterateAct","initialProofState":"α : Type u_1\nf : α → α\nx y : IterateMulAct f\n⊢ Iff (Eq x y) (Eq x.val y.val)","decl":"/-- A structure with a single field `val : ℕ` that acts on `α` by `⟨n⟩ • x = f^[n] x`. -/\n@[to_additive (attr := ext)]\nstructure IterateMulAct {α : Type*} (f : α → α) where\n  /-- The value of `n : IterateMulAct f`. -/\n  val : ℕ\n\n"}
{"name":"IterateMulAct.instCountable","module":"Mathlib.GroupTheory.GroupAction.IterateAct","initialProofState":"α : Type u_1\nf : α → α\n⊢ Countable (IterateMulAct f)","decl":"@[to_additive]\ninstance instCountable : Countable (IterateMulAct f) :=\n  Function.Injective.countable fun _ _ ↦ IterateMulAct.ext\n\n"}
{"name":"IterateAddAct.instCountable","module":"Mathlib.GroupTheory.GroupAction.IterateAct","initialProofState":"α : Type u_1\nf : α → α\n⊢ Countable (IterateAddAct f)","decl":"@[to_additive]\ninstance instCountable : Countable (IterateMulAct f) :=\n  Function.Injective.countable fun _ _ ↦ IterateMulAct.ext\n\n"}
{"name":"IterateMulAct.mk_smul","module":"Mathlib.GroupTheory.GroupAction.IterateAct","initialProofState":"α : Type u_1\nf : α → α\nn : Nat\nx : α\n⊢ Eq (HSMul.hSMul { val := n } x) (Nat.iterate f n x)","decl":"@[to_additive (attr := simp)]\ntheorem mk_smul (n : ℕ) (x : α) : mk (f := f) n • x = f^[n] x := rfl\n\n"}
{"name":"IterateAddAct.mk_vadd","module":"Mathlib.GroupTheory.GroupAction.IterateAct","initialProofState":"α : Type u_1\nf : α → α\nn : Nat\nx : α\n⊢ Eq (HVAdd.hVAdd { val := n } x) (Nat.iterate f n x)","decl":"@[to_additive (attr := simp)]\ntheorem mk_smul (n : ℕ) (x : α) : mk (f := f) n • x = f^[n] x := rfl\n\n"}
