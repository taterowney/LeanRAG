{"name":"WithLp.instCompleteSpace","module":"Mathlib.Analysis.Normed.Algebra.UnitizationL1","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝⁴ : NormedField 𝕜\ninst✝³ : NonUnitalNormedRing A\ninst✝² : NormedSpace 𝕜 A\ninst✝¹ : CompleteSpace 𝕜\ninst✝ : CompleteSpace A\n⊢ CompleteSpace (WithLp 1 (Unitization 𝕜 A))","decl":"instance instCompleteSpace [CompleteSpace 𝕜] [CompleteSpace A] :\n    CompleteSpace (WithLp 1 (Unitization 𝕜 A)) :=\n  completeSpace_congr (uniformEquiv_unitization_addEquiv_prod 𝕜 A).isUniformEmbedding |>.mpr\n    CompleteSpace.prod\n\n"}
{"name":"WithLp.unitization_norm_def","module":"Mathlib.Analysis.Normed.Algebra.UnitizationL1","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝² : NormedField 𝕜\ninst✝¹ : NonUnitalNormedRing A\ninst✝ : NormedSpace 𝕜 A\nx : WithLp 1 (Unitization 𝕜 A)\n⊢ Eq (Norm.norm x) (HAdd.hAdd (Norm.norm ((WithLp.equiv 1 (Unitization 𝕜 A)) x).fst) (Norm.norm ((WithLp.equiv 1 (Unitization 𝕜 A)) x).snd))","decl":"open ENNReal in\nlemma unitization_norm_def (x : WithLp 1 (Unitization 𝕜 A)) :\n    ‖x‖ = ‖(WithLp.equiv 1 _ x).fst‖ + ‖(WithLp.equiv 1 _ x).snd‖ := calc\n  ‖x‖ = (‖(WithLp.equiv 1 _ x).fst‖ ^ (1 : ℝ≥0∞).toReal +\n      ‖(WithLp.equiv 1 _ x).snd‖ ^ (1 : ℝ≥0∞).toReal) ^ (1 / (1 : ℝ≥0∞).toReal) :=\n    WithLp.prod_norm_eq_add (by simp : 0 < (1 : ℝ≥0∞).toReal) _\n  _   = ‖(WithLp.equiv 1 _ x).fst‖ + ‖(WithLp.equiv 1 _ x).snd‖ := by simp\n\n"}
{"name":"WithLp.unitization_nnnorm_def","module":"Mathlib.Analysis.Normed.Algebra.UnitizationL1","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝² : NormedField 𝕜\ninst✝¹ : NonUnitalNormedRing A\ninst✝ : NormedSpace 𝕜 A\nx : WithLp 1 (Unitization 𝕜 A)\n⊢ Eq (NNNorm.nnnorm x) (HAdd.hAdd (NNNorm.nnnorm ((WithLp.equiv 1 (Unitization 𝕜 A)) x).fst) (NNNorm.nnnorm ((WithLp.equiv 1 (Unitization 𝕜 A)) x).snd))","decl":"lemma unitization_nnnorm_def (x : WithLp 1 (Unitization 𝕜 A)) :\n    ‖x‖₊ = ‖(WithLp.equiv 1 _ x).fst‖₊ + ‖(WithLp.equiv 1 _ x).snd‖₊ :=\n  Subtype.ext <| unitization_norm_def x\n\n"}
{"name":"WithLp.unitization_norm_inr","module":"Mathlib.Analysis.Normed.Algebra.UnitizationL1","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝² : NormedField 𝕜\ninst✝¹ : NonUnitalNormedRing A\ninst✝ : NormedSpace 𝕜 A\nx : A\n⊢ Eq (Norm.norm ((WithLp.equiv 1 (Unitization 𝕜 A)).symm ↑x)) (Norm.norm x)","decl":"lemma unitization_norm_inr (x : A) : ‖(WithLp.equiv 1 (Unitization 𝕜 A)).symm x‖ = ‖x‖ := by\n  simp [unitization_norm_def]\n\n"}
{"name":"WithLp.unitization_nnnorm_inr","module":"Mathlib.Analysis.Normed.Algebra.UnitizationL1","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝² : NormedField 𝕜\ninst✝¹ : NonUnitalNormedRing A\ninst✝ : NormedSpace 𝕜 A\nx : A\n⊢ Eq (NNNorm.nnnorm ((WithLp.equiv 1 (Unitization 𝕜 A)).symm ↑x)) (NNNorm.nnnorm x)","decl":"lemma unitization_nnnorm_inr (x : A) : ‖(WithLp.equiv 1 (Unitization 𝕜 A)).symm x‖₊ = ‖x‖₊ := by\n  simp [unitization_nnnorm_def]\n\n"}
{"name":"WithLp.unitization_isometry_inr","module":"Mathlib.Analysis.Normed.Algebra.UnitizationL1","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝² : NormedField 𝕜\ninst✝¹ : NonUnitalNormedRing A\ninst✝ : NormedSpace 𝕜 A\n⊢ Isometry fun x => (WithLp.equiv 1 (Unitization 𝕜 A)).symm ↑x","decl":"lemma unitization_isometry_inr :\n    Isometry (fun x : A ↦ (WithLp.equiv 1 (Unitization 𝕜 A)).symm x) :=\n  AddMonoidHomClass.isometry_of_norm\n    ((WithLp.linearEquiv 1 𝕜 (Unitization 𝕜 A)).symm.comp <| Unitization.inrHom 𝕜 A)\n    unitization_norm_inr\n\n"}
{"name":"WithLp.unitization_mul","module":"Mathlib.Analysis.Normed.Algebra.UnitizationL1","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝⁴ : NormedField 𝕜\ninst✝³ : NonUnitalNormedRing A\ninst✝² : NormedSpace 𝕜 A\ninst✝¹ : IsScalarTower 𝕜 A A\ninst✝ : SMulCommClass 𝕜 A A\nx y : WithLp 1 (Unitization 𝕜 A)\n⊢ Eq ((WithLp.equiv 1 (Unitization 𝕜 A)) (HMul.hMul x y)) (HMul.hMul ((WithLp.equiv 1 (Unitization 𝕜 A)) x) ((WithLp.equiv 1 (Unitization 𝕜 A)) y))","decl":"@[simp]\nlemma unitization_mul (x y : WithLp 1 (Unitization 𝕜 A)) :\n    WithLp.equiv 1 _ (x * y) = (WithLp.equiv 1 _ x) * (WithLp.equiv 1 _ y) :=\n  rfl\n\n"}
{"name":"WithLp.unitization_algebraMap","module":"Mathlib.Analysis.Normed.Algebra.UnitizationL1","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝⁴ : NormedField 𝕜\ninst✝³ : NonUnitalNormedRing A\ninst✝² : NormedSpace 𝕜 A\ninst✝¹ : IsScalarTower 𝕜 A A\ninst✝ : SMulCommClass 𝕜 A A\nr : 𝕜\n⊢ Eq ((WithLp.equiv 1 (Unitization 𝕜 A)) ((algebraMap 𝕜 (WithLp 1 (Unitization 𝕜 A))) r)) ((algebraMap 𝕜 (Unitization 𝕜 A)) r)","decl":"@[simp]\nlemma unitization_algebraMap (r : 𝕜) :\n    WithLp.equiv 1 _ (algebraMap 𝕜 (WithLp 1 (Unitization 𝕜 A)) r) =\n      algebraMap 𝕜 (Unitization 𝕜 A) r :=\n  rfl\n\n"}
{"name":"WithLp.unitizationAlgEquiv_apply","module":"Mathlib.Analysis.Normed.Algebra.UnitizationL1","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : NonUnitalNormedRing A\ninst✝⁶ : NormedSpace 𝕜 A\ninst✝⁵ : IsScalarTower 𝕜 A A\ninst✝⁴ : SMulCommClass 𝕜 A A\nR : Type u_3\ninst✝³ : CommSemiring R\ninst✝² : Algebra R 𝕜\ninst✝¹ : DistribMulAction R A\ninst✝ : IsScalarTower R 𝕜 A\na : WithLp 1 (Unitization 𝕜 A)\n⊢ Eq ((WithLp.unitizationAlgEquiv R) a) a","decl":"/-- `WithLp.equiv` bundled as an algebra isomorphism with `Unitization 𝕜 A`. -/\n@[simps!]\ndef unitizationAlgEquiv (R : Type*) [CommSemiring R] [Algebra R 𝕜] [DistribMulAction R A]\n    [IsScalarTower R 𝕜 A] : WithLp 1 (Unitization 𝕜 A) ≃ₐ[R] Unitization 𝕜 A :=\n  { WithLp.equiv 1 (Unitization 𝕜 A) with\n    map_mul' := fun _ _ ↦ rfl\n    map_add' := fun _ _ ↦ rfl\n    commutes' := fun _ ↦ rfl }\n\n"}
{"name":"WithLp.unitizationAlgEquiv_symm_apply","module":"Mathlib.Analysis.Normed.Algebra.UnitizationL1","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : NonUnitalNormedRing A\ninst✝⁶ : NormedSpace 𝕜 A\ninst✝⁵ : IsScalarTower 𝕜 A A\ninst✝⁴ : SMulCommClass 𝕜 A A\nR : Type u_3\ninst✝³ : CommSemiring R\ninst✝² : Algebra R 𝕜\ninst✝¹ : DistribMulAction R A\ninst✝ : IsScalarTower R 𝕜 A\na : WithLp 1 (Unitization 𝕜 A)\n⊢ Eq ((WithLp.unitizationAlgEquiv R).symm a) a","decl":"/-- `WithLp.equiv` bundled as an algebra isomorphism with `Unitization 𝕜 A`. -/\n@[simps!]\ndef unitizationAlgEquiv (R : Type*) [CommSemiring R] [Algebra R 𝕜] [DistribMulAction R A]\n    [IsScalarTower R 𝕜 A] : WithLp 1 (Unitization 𝕜 A) ≃ₐ[R] Unitization 𝕜 A :=\n  { WithLp.equiv 1 (Unitization 𝕜 A) with\n    map_mul' := fun _ _ ↦ rfl\n    map_add' := fun _ _ ↦ rfl\n    commutes' := fun _ ↦ rfl }\n\n"}
