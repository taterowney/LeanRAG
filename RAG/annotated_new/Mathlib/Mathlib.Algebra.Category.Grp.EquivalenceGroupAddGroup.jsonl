{"name":"Grp.toAddGrp_map","module":"Mathlib.Algebra.Category.Grp.EquivalenceGroupAddGroup","initialProofState":"x✝¹ x✝ : Grp\nf : Quiver.Hom x✝¹ x✝\n⊢ Eq (Grp.toAddGrp.map f) (AddGrp.ofHom (MonoidHom.toAdditive (Grp.Hom.hom f)))","decl":"/-- The functor `Grp ⥤ AddGrp` by sending `X ↦ Additive X` and `f ↦ f`.\n-/\n@[simps]\ndef toAddGrp : Grp ⥤ AddGrp where\n  obj X := AddGrp.of (Additive X)\n  map {_} {_} f := AddGrp.ofHom f.hom.toAdditive\n\n"}
{"name":"Grp.toAddGrp_obj_coe","module":"Mathlib.Algebra.Category.Grp.EquivalenceGroupAddGroup","initialProofState":"X : Grp\n⊢ Eq (↑(Grp.toAddGrp.obj X)) (Additive ↑X)","decl":"/-- The functor `Grp ⥤ AddGrp` by sending `X ↦ Additive X` and `f ↦ f`.\n-/\n@[simps]\ndef toAddGrp : Grp ⥤ AddGrp where\n  obj X := AddGrp.of (Additive X)\n  map {_} {_} f := AddGrp.ofHom f.hom.toAdditive\n\n"}
{"name":"CommGrp.toAddCommGrp_obj_coe","module":"Mathlib.Algebra.Category.Grp.EquivalenceGroupAddGroup","initialProofState":"X : CommGrp\n⊢ Eq (↑(CommGrp.toAddCommGrp.obj X)) (Additive ↑X)","decl":"/-- The functor `CommGrp ⥤ AddCommGrp` by sending `X ↦ Additive X` and `f ↦ f`.\n-/\n@[simps]\ndef toAddCommGrp : CommGrp ⥤ AddCommGrp where\n  obj X := AddCommGrp.of (Additive X)\n  map {_} {_} f := AddCommGrp.ofHom f.hom.toAdditive\n\n"}
{"name":"CommGrp.toAddCommGrp_map","module":"Mathlib.Algebra.Category.Grp.EquivalenceGroupAddGroup","initialProofState":"x✝¹ x✝ : CommGrp\nf : Quiver.Hom x✝¹ x✝\n⊢ Eq (CommGrp.toAddCommGrp.map f) (AddCommGrp.ofHom (MonoidHom.toAdditive (CommGrp.Hom.hom f)))","decl":"/-- The functor `CommGrp ⥤ AddCommGrp` by sending `X ↦ Additive X` and `f ↦ f`.\n-/\n@[simps]\ndef toAddCommGrp : CommGrp ⥤ AddCommGrp where\n  obj X := AddCommGrp.of (Additive X)\n  map {_} {_} f := AddCommGrp.ofHom f.hom.toAdditive\n\n"}
{"name":"AddGrp.toGrp_map","module":"Mathlib.Algebra.Category.Grp.EquivalenceGroupAddGroup","initialProofState":"x✝¹ x✝ : AddGrp\nf : Quiver.Hom x✝¹ x✝\n⊢ Eq (AddGrp.toGrp.map f) (Grp.ofHom (AddMonoidHom.toMultiplicative (AddGrp.Hom.hom f)))","decl":"/-- The functor `AddGrp ⥤ Grp` by sending `X ↦ Multiplicative Y` and `f ↦ f`.\n-/\n@[simps]\ndef toGrp : AddGrp ⥤ Grp where\n  obj X := Grp.of (Multiplicative X)\n  map {_} {_} f := Grp.ofHom f.hom.toMultiplicative\n\n"}
{"name":"AddGrp.toGrp_obj_coe","module":"Mathlib.Algebra.Category.Grp.EquivalenceGroupAddGroup","initialProofState":"X : AddGrp\n⊢ Eq (↑(AddGrp.toGrp.obj X)) (Multiplicative ↑X)","decl":"/-- The functor `AddGrp ⥤ Grp` by sending `X ↦ Multiplicative Y` and `f ↦ f`.\n-/\n@[simps]\ndef toGrp : AddGrp ⥤ Grp where\n  obj X := Grp.of (Multiplicative X)\n  map {_} {_} f := Grp.ofHom f.hom.toMultiplicative\n\n"}
{"name":"AddCommGrp.toCommGrp_obj_coe","module":"Mathlib.Algebra.Category.Grp.EquivalenceGroupAddGroup","initialProofState":"X : AddCommGrp\n⊢ Eq (↑(AddCommGrp.toCommGrp.obj X)) (Multiplicative ↑X)","decl":"/-- The functor `AddCommGrp ⥤ CommGrp` by sending `X ↦ Multiplicative Y` and `f ↦ f`.\n-/\n@[simps]\ndef toCommGrp : AddCommGrp ⥤ CommGrp where\n  obj X := CommGrp.of (Multiplicative X)\n  map {_} {_} f := CommGrp.ofHom f.hom.toMultiplicative\n\n"}
{"name":"AddCommGrp.toCommGrp_map","module":"Mathlib.Algebra.Category.Grp.EquivalenceGroupAddGroup","initialProofState":"x✝¹ x✝ : AddCommGrp\nf : Quiver.Hom x✝¹ x✝\n⊢ Eq (AddCommGrp.toCommGrp.map f) (CommGrp.ofHom (AddMonoidHom.toMultiplicative (AddCommGrp.Hom.hom f)))","decl":"/-- The functor `AddCommGrp ⥤ CommGrp` by sending `X ↦ Multiplicative Y` and `f ↦ f`.\n-/\n@[simps]\ndef toCommGrp : AddCommGrp ⥤ CommGrp where\n  obj X := CommGrp.of (Multiplicative X)\n  map {_} {_} f := CommGrp.ofHom f.hom.toMultiplicative\n\n"}
{"name":"groupAddGroupEquivalence_inverse","module":"Mathlib.Algebra.Category.Grp.EquivalenceGroupAddGroup","initialProofState":"⊢ Eq groupAddGroupEquivalence.inverse AddGrp.toGrp","decl":"/-- The equivalence of categories between `Grp` and `AddGrp`\n-/\n@[simps]\ndef groupAddGroupEquivalence : Grp ≌ AddGrp where\n  functor := Grp.toAddGrp\n  inverse := AddGrp.toGrp\n  unitIso := Iso.refl _\n  counitIso := Iso.refl _\n\n"}
{"name":"groupAddGroupEquivalence_counitIso","module":"Mathlib.Algebra.Category.Grp.EquivalenceGroupAddGroup","initialProofState":"⊢ Eq groupAddGroupEquivalence.counitIso (CategoryTheory.Iso.refl (AddGrp.toGrp.comp Grp.toAddGrp))","decl":"/-- The equivalence of categories between `Grp` and `AddGrp`\n-/\n@[simps]\ndef groupAddGroupEquivalence : Grp ≌ AddGrp where\n  functor := Grp.toAddGrp\n  inverse := AddGrp.toGrp\n  unitIso := Iso.refl _\n  counitIso := Iso.refl _\n\n"}
{"name":"groupAddGroupEquivalence_unitIso","module":"Mathlib.Algebra.Category.Grp.EquivalenceGroupAddGroup","initialProofState":"⊢ Eq groupAddGroupEquivalence.unitIso (CategoryTheory.Iso.refl (CategoryTheory.Functor.id Grp))","decl":"/-- The equivalence of categories between `Grp` and `AddGrp`\n-/\n@[simps]\ndef groupAddGroupEquivalence : Grp ≌ AddGrp where\n  functor := Grp.toAddGrp\n  inverse := AddGrp.toGrp\n  unitIso := Iso.refl _\n  counitIso := Iso.refl _\n\n"}
{"name":"groupAddGroupEquivalence_functor","module":"Mathlib.Algebra.Category.Grp.EquivalenceGroupAddGroup","initialProofState":"⊢ Eq groupAddGroupEquivalence.functor Grp.toAddGrp","decl":"/-- The equivalence of categories between `Grp` and `AddGrp`\n-/\n@[simps]\ndef groupAddGroupEquivalence : Grp ≌ AddGrp where\n  functor := Grp.toAddGrp\n  inverse := AddGrp.toGrp\n  unitIso := Iso.refl _\n  counitIso := Iso.refl _\n\n"}
{"name":"commGroupAddCommGroupEquivalence_unitIso","module":"Mathlib.Algebra.Category.Grp.EquivalenceGroupAddGroup","initialProofState":"⊢ Eq commGroupAddCommGroupEquivalence.unitIso (CategoryTheory.Iso.refl (CategoryTheory.Functor.id CommGrp))","decl":"/-- The equivalence of categories between `CommGrp` and `AddCommGrp`.\n-/\n@[simps]\ndef commGroupAddCommGroupEquivalence : CommGrp ≌ AddCommGrp where\n  functor := CommGrp.toAddCommGrp\n  inverse := AddCommGrp.toCommGrp\n  unitIso := Iso.refl _\n  counitIso := Iso.refl _\n"}
{"name":"commGroupAddCommGroupEquivalence_counitIso","module":"Mathlib.Algebra.Category.Grp.EquivalenceGroupAddGroup","initialProofState":"⊢ Eq commGroupAddCommGroupEquivalence.counitIso (CategoryTheory.Iso.refl (AddCommGrp.toCommGrp.comp CommGrp.toAddCommGrp))","decl":"/-- The equivalence of categories between `CommGrp` and `AddCommGrp`.\n-/\n@[simps]\ndef commGroupAddCommGroupEquivalence : CommGrp ≌ AddCommGrp where\n  functor := CommGrp.toAddCommGrp\n  inverse := AddCommGrp.toCommGrp\n  unitIso := Iso.refl _\n  counitIso := Iso.refl _\n"}
{"name":"commGroupAddCommGroupEquivalence_inverse","module":"Mathlib.Algebra.Category.Grp.EquivalenceGroupAddGroup","initialProofState":"⊢ Eq commGroupAddCommGroupEquivalence.inverse AddCommGrp.toCommGrp","decl":"/-- The equivalence of categories between `CommGrp` and `AddCommGrp`.\n-/\n@[simps]\ndef commGroupAddCommGroupEquivalence : CommGrp ≌ AddCommGrp where\n  functor := CommGrp.toAddCommGrp\n  inverse := AddCommGrp.toCommGrp\n  unitIso := Iso.refl _\n  counitIso := Iso.refl _\n"}
{"name":"commGroupAddCommGroupEquivalence_functor","module":"Mathlib.Algebra.Category.Grp.EquivalenceGroupAddGroup","initialProofState":"⊢ Eq commGroupAddCommGroupEquivalence.functor CommGrp.toAddCommGrp","decl":"/-- The equivalence of categories between `CommGrp` and `AddCommGrp`.\n-/\n@[simps]\ndef commGroupAddCommGroupEquivalence : CommGrp ≌ AddCommGrp where\n  functor := CommGrp.toAddCommGrp\n  inverse := AddCommGrp.toCommGrp\n  unitIso := Iso.refl _\n  counitIso := Iso.refl _\n"}
