{"name":"CategoryTheory.Pairwise.single.inj","module":"Mathlib.CategoryTheory.Category.Pairwise","initialProofState":"ι : Type v\na✝¹ a✝ : ι\nx✝ : Eq (CategoryTheory.Pairwise.single a✝¹) (CategoryTheory.Pairwise.single a✝)\n⊢ Eq a✝¹ a✝","decl":"/-- An inductive type representing either a single term of a type `ι`, or a pair of terms.\nWe use this as the objects of a category to describe the sheaf condition.\n-/\ninductive Pairwise (ι : Type v)\n  | single : ι → Pairwise ι\n  | pair : ι → ι → Pairwise ι\n\n"}
{"name":"CategoryTheory.Pairwise.pair.sizeOf_spec","module":"Mathlib.CategoryTheory.Category.Pairwise","initialProofState":"ι : Type v\ninst✝ : SizeOf ι\na✝¹ a✝ : ι\n⊢ Eq (SizeOf.sizeOf (CategoryTheory.Pairwise.pair a✝¹ a✝)) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf a✝¹)) (SizeOf.sizeOf a✝))","decl":"/-- An inductive type representing either a single term of a type `ι`, or a pair of terms.\nWe use this as the objects of a category to describe the sheaf condition.\n-/\ninductive Pairwise (ι : Type v)\n  | single : ι → Pairwise ι\n  | pair : ι → ι → Pairwise ι\n\n"}
{"name":"CategoryTheory.Pairwise.single.injEq","module":"Mathlib.CategoryTheory.Category.Pairwise","initialProofState":"ι : Type v\na✝¹ a✝ : ι\n⊢ Eq (Eq (CategoryTheory.Pairwise.single a✝¹) (CategoryTheory.Pairwise.single a✝)) (Eq a✝¹ a✝)","decl":"/-- An inductive type representing either a single term of a type `ι`, or a pair of terms.\nWe use this as the objects of a category to describe the sheaf condition.\n-/\ninductive Pairwise (ι : Type v)\n  | single : ι → Pairwise ι\n  | pair : ι → ι → Pairwise ι\n\n"}
{"name":"CategoryTheory.Pairwise.pair.injEq","module":"Mathlib.CategoryTheory.Category.Pairwise","initialProofState":"ι : Type v\na✝³ a✝² a✝¹ a✝ : ι\n⊢ Eq (Eq (CategoryTheory.Pairwise.pair a✝³ a✝²) (CategoryTheory.Pairwise.pair a✝¹ a✝)) (And (Eq a✝³ a✝¹) (Eq a✝² a✝))","decl":"/-- An inductive type representing either a single term of a type `ι`, or a pair of terms.\nWe use this as the objects of a category to describe the sheaf condition.\n-/\ninductive Pairwise (ι : Type v)\n  | single : ι → Pairwise ι\n  | pair : ι → ι → Pairwise ι\n\n"}
{"name":"CategoryTheory.Pairwise.pair.inj","module":"Mathlib.CategoryTheory.Category.Pairwise","initialProofState":"ι : Type v\na✝³ a✝² a✝¹ a✝ : ι\nx✝ : Eq (CategoryTheory.Pairwise.pair a✝³ a✝²) (CategoryTheory.Pairwise.pair a✝¹ a✝)\n⊢ And (Eq a✝³ a✝¹) (Eq a✝² a✝)","decl":"/-- An inductive type representing either a single term of a type `ι`, or a pair of terms.\nWe use this as the objects of a category to describe the sheaf condition.\n-/\ninductive Pairwise (ι : Type v)\n  | single : ι → Pairwise ι\n  | pair : ι → ι → Pairwise ι\n\n"}
{"name":"CategoryTheory.Pairwise.single.sizeOf_spec","module":"Mathlib.CategoryTheory.Category.Pairwise","initialProofState":"ι : Type v\ninst✝ : SizeOf ι\na✝ : ι\n⊢ Eq (SizeOf.sizeOf (CategoryTheory.Pairwise.single a✝)) (HAdd.hAdd 1 (SizeOf.sizeOf a✝))","decl":"/-- An inductive type representing either a single term of a type `ι`, or a pair of terms.\nWe use this as the objects of a category to describe the sheaf condition.\n-/\ninductive Pairwise (ι : Type v)\n  | single : ι → Pairwise ι\n  | pair : ι → ι → Pairwise ι\n\n"}
{"name":"CategoryTheory.Pairwise.Hom.right.sizeOf_spec","module":"Mathlib.CategoryTheory.Category.Pairwise","initialProofState":"ι : Type v\ninst✝ : SizeOf ι\ni j : ι\n⊢ Eq (SizeOf.sizeOf (CategoryTheory.Pairwise.Hom.right i j)) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf i)) (SizeOf.sizeOf j))","decl":"/-- Morphisms in the category `Pairwise ι`. The only non-identity morphisms are\n`left i j : single i ⟶ pair i j` and `right i j : single j ⟶ pair i j`.\n-/\ninductive Hom : Pairwise ι → Pairwise ι → Type v\n  | id_single : ∀ i, Hom (single i) (single i)\n  | id_pair : ∀ i j, Hom (pair i j) (pair i j)\n  | left : ∀ i j, Hom (pair i j) (single i)\n  | right : ∀ i j, Hom (pair i j) (single j)\n\n"}
{"name":"CategoryTheory.Pairwise.Hom.id_single.sizeOf_spec","module":"Mathlib.CategoryTheory.Category.Pairwise","initialProofState":"ι : Type v\ninst✝ : SizeOf ι\ni : ι\n⊢ Eq (SizeOf.sizeOf (CategoryTheory.Pairwise.Hom.id_single i)) (HAdd.hAdd 1 (SizeOf.sizeOf i))","decl":"/-- Morphisms in the category `Pairwise ι`. The only non-identity morphisms are\n`left i j : single i ⟶ pair i j` and `right i j : single j ⟶ pair i j`.\n-/\ninductive Hom : Pairwise ι → Pairwise ι → Type v\n  | id_single : ∀ i, Hom (single i) (single i)\n  | id_pair : ∀ i j, Hom (pair i j) (pair i j)\n  | left : ∀ i j, Hom (pair i j) (single i)\n  | right : ∀ i j, Hom (pair i j) (single j)\n\n"}
{"name":"CategoryTheory.Pairwise.Hom.left.sizeOf_spec","module":"Mathlib.CategoryTheory.Category.Pairwise","initialProofState":"ι : Type v\ninst✝ : SizeOf ι\ni j : ι\n⊢ Eq (SizeOf.sizeOf (CategoryTheory.Pairwise.Hom.left i j)) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf i)) (SizeOf.sizeOf j))","decl":"/-- Morphisms in the category `Pairwise ι`. The only non-identity morphisms are\n`left i j : single i ⟶ pair i j` and `right i j : single j ⟶ pair i j`.\n-/\ninductive Hom : Pairwise ι → Pairwise ι → Type v\n  | id_single : ∀ i, Hom (single i) (single i)\n  | id_pair : ∀ i j, Hom (pair i j) (pair i j)\n  | left : ∀ i j, Hom (pair i j) (single i)\n  | right : ∀ i j, Hom (pair i j) (single j)\n\n"}
{"name":"CategoryTheory.Pairwise.Hom.id_pair.sizeOf_spec","module":"Mathlib.CategoryTheory.Category.Pairwise","initialProofState":"ι : Type v\ninst✝ : SizeOf ι\ni j : ι\n⊢ Eq (SizeOf.sizeOf (CategoryTheory.Pairwise.Hom.id_pair i j)) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf i)) (SizeOf.sizeOf j))","decl":"/-- Morphisms in the category `Pairwise ι`. The only non-identity morphisms are\n`left i j : single i ⟶ pair i j` and `right i j : single j ⟶ pair i j`.\n-/\ninductive Hom : Pairwise ι → Pairwise ι → Type v\n  | id_single : ∀ i, Hom (single i) (single i)\n  | id_pair : ∀ i j, Hom (pair i j) (pair i j)\n  | left : ∀ i j, Hom (pair i j) (single i)\n  | right : ∀ i j, Hom (pair i j) (single j)\n\n"}
{"name":"CategoryTheory.Pairwise.diagram_obj","module":"Mathlib.CategoryTheory.Category.Pairwise","initialProofState":"ι α : Type v\nU : ι → α\ninst✝ : SemilatticeInf α\na✝ : CategoryTheory.Pairwise ι\n⊢ Eq ((CategoryTheory.Pairwise.diagram U).obj a✝) (CategoryTheory.Pairwise.diagramObj U a✝)","decl":"/-- Given a function `U : ι → α` for `[SemilatticeInf α]`, we obtain a functor `Pairwise ι ⥤ α`,\nsending `single i` to `U i` and `pair i j` to `U i ⊓ U j`,\nand the morphisms to the obvious inequalities.\n-/\n@[simps]\ndef diagram : Pairwise ι ⥤ α where\n  obj := diagramObj U\n  map := diagramMap U\n\n"}
{"name":"CategoryTheory.Pairwise.diagram_map","module":"Mathlib.CategoryTheory.Category.Pairwise","initialProofState":"ι α : Type v\nU : ι → α\ninst✝ : SemilatticeInf α\nX✝ Y✝ : CategoryTheory.Pairwise ι\nx✝ : Quiver.Hom X✝ Y✝\n⊢ Eq ((CategoryTheory.Pairwise.diagram U).map x✝) (CategoryTheory.Pairwise.diagramMap U x✝)","decl":"/-- Given a function `U : ι → α` for `[SemilatticeInf α]`, we obtain a functor `Pairwise ι ⥤ α`,\nsending `single i` to `U i` and `pair i j` to `U i ⊓ U j`,\nand the morphisms to the obvious inequalities.\n-/\n@[simps]\ndef diagram : Pairwise ι ⥤ α where\n  obj := diagramObj U\n  map := diagramMap U\n\n"}
{"name":"CategoryTheory.Pairwise.cocone_ι_app","module":"Mathlib.CategoryTheory.Category.Pairwise","initialProofState":"ι α : Type v\nU : ι → α\ninst✝ : CompleteLattice α\no : CategoryTheory.Pairwise ι\n⊢ Eq ((CategoryTheory.Pairwise.cocone U).ι.app o) (CategoryTheory.Pairwise.coconeιApp U o)","decl":"/-- Given a function `U : ι → α` for `[CompleteLattice α]`,\n`iSup U` provides a cocone over `diagram U`.\n-/\n@[simps]\ndef cocone : Cocone (diagram U) where\n  pt := iSup U\n  ι := { app := coconeιApp U }\n\n"}
{"name":"CategoryTheory.Pairwise.cocone_pt","module":"Mathlib.CategoryTheory.Category.Pairwise","initialProofState":"ι α : Type v\nU : ι → α\ninst✝ : CompleteLattice α\n⊢ Eq (CategoryTheory.Pairwise.cocone U).pt (iSup U)","decl":"/-- Given a function `U : ι → α` for `[CompleteLattice α]`,\n`iSup U` provides a cocone over `diagram U`.\n-/\n@[simps]\ndef cocone : Cocone (diagram U) where\n  pt := iSup U\n  ι := { app := coconeιApp U }\n\n"}
