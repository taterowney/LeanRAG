{"name":"ContinuousLinearMapWOT.ext_inner_iff","module":"Mathlib.Analysis.InnerProductSpace.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁵ : RCLike 𝕜\ninst✝⁴ : AddCommGroup E\ninst✝³ : TopologicalSpace E\ninst✝² : Module 𝕜 E\ninst✝¹ : NormedAddCommGroup F\ninst✝ : InnerProductSpace 𝕜 F\nA B : ContinuousLinearMapWOT 𝕜 E F\n⊢ Iff (Eq A B) (∀ (x : E) (y : F), Eq (Inner.inner y (A x)) (Inner.inner y (B x)))","decl":"@[ext]\nlemma ext_inner {A B : E →WOT[𝕜] F} (h : ∀ x y, ⟪y, A x⟫_𝕜 = ⟪y, B x⟫_𝕜) : A = B := by\n  rw [ext_iff]\n  exact fun x => ext_inner_left 𝕜 fun y => h x y\n\n"}
{"name":"ContinuousLinearMapWOT.ext_inner","module":"Mathlib.Analysis.InnerProductSpace.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁵ : RCLike 𝕜\ninst✝⁴ : AddCommGroup E\ninst✝³ : TopologicalSpace E\ninst✝² : Module 𝕜 E\ninst✝¹ : NormedAddCommGroup F\ninst✝ : InnerProductSpace 𝕜 F\nA B : ContinuousLinearMapWOT 𝕜 E F\nh : ∀ (x : E) (y : F), Eq (Inner.inner y (A x)) (Inner.inner y (B x))\n⊢ Eq A B","decl":"@[ext]\nlemma ext_inner {A B : E →WOT[𝕜] F} (h : ∀ x y, ⟪y, A x⟫_𝕜 = ⟪y, B x⟫_𝕜) : A = B := by\n  rw [ext_iff]\n  exact fun x => ext_inner_left 𝕜 fun y => h x y\n\n"}
{"name":"ContinuousLinearMapWOT.tendsto_iff_forall_inner_apply_tendsto","module":"Mathlib.Analysis.InnerProductSpace.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁶ : RCLike 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : Module 𝕜 E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nα : Type u_4\nl : Filter α\nf : α → ContinuousLinearMapWOT 𝕜 E F\nA : ContinuousLinearMapWOT 𝕜 E F\n⊢ Iff (Filter.Tendsto f l (nhds A)) (∀ (x : E) (y : F), Filter.Tendsto (fun a => Inner.inner y ((f a) x)) l (nhds (Inner.inner y (A x))))","decl":"open Filter in\n/-- The defining property of the weak operator topology: a function `f` tends to\n`A : E →WOT[𝕜] F` along filter `l` iff `⟪y, (f a) x⟫` tends to `⟪y, A x⟫` along the same filter. -/\nlemma tendsto_iff_forall_inner_apply_tendsto [CompleteSpace F] {α : Type*} {l : Filter α}\n    {f : α → E →WOT[𝕜] F} {A : E →WOT[𝕜] F} :\n    Tendsto f l (𝓝 A) ↔ ∀ x y, Tendsto (fun a => ⟪y, (f a) x⟫_𝕜) l (𝓝 ⟪y, A x⟫_𝕜) := by\n  simp_rw [tendsto_iff_forall_dual_apply_tendsto, ← InnerProductSpace.toDual_apply]\n  exact .symm <| forall_congr' fun _ ↦\n    Equiv.forall_congr (InnerProductSpace.toDual 𝕜 F) fun _ ↦ Iff.rfl\n\n"}
{"name":"ContinuousLinearMapWOT.le_nhds_iff_forall_inner_apply_le_nhds","module":"Mathlib.Analysis.InnerProductSpace.WeakOperatorTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁶ : RCLike 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : Module 𝕜 E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace 𝕜 F\ninst✝ : CompleteSpace F\nl : Filter (ContinuousLinearMapWOT 𝕜 E F)\nA : ContinuousLinearMapWOT 𝕜 E F\n⊢ Iff (LE.le l (nhds A)) (∀ (x : E) (y : F), LE.le (Filter.map (fun T => Inner.inner y (T x)) l) (nhds (Inner.inner y (A x))))","decl":"lemma le_nhds_iff_forall_inner_apply_le_nhds [CompleteSpace F] {l : Filter (E →WOT[𝕜] F)}\n    {A : E →WOT[𝕜] F} : l ≤ 𝓝 A ↔ ∀ x y, l.map (fun T => ⟪y, T x⟫_𝕜) ≤ 𝓝 (⟪y, A x⟫_𝕜) :=\n  tendsto_iff_forall_inner_apply_tendsto (f := id)\n\n"}
