{"name":"Matrix.isTotallyUnimodular_iff","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nn : Type u_3\nR : Type u_5\ninst✝ : CommRing R\nA : Matrix m n R\n⊢ Iff A.IsTotallyUnimodular (∀ (k : Nat) (f : Fin k → m) (g : Fin k → n), Membership.mem (Set.range SignType.cast) (A.submatrix f g).det)","decl":"lemma isTotallyUnimodular_iff (A : Matrix m n R) : A.IsTotallyUnimodular ↔\n    ∀ k : ℕ, ∀ f : Fin k → m, ∀ g : Fin k → n,\n      (A.submatrix f g).det ∈ Set.range SignType.cast := by\n  constructor <;> intro hA\n  · intro k f g\n    by_cases hfg : f.Injective ∧ g.Injective\n    · exact hA k f g hfg.1 hfg.2\n    · use 0\n      rw [SignType.coe_zero, eq_comm]\n      simp_rw [not_and_or, Function.not_injective_iff] at hfg\n      obtain ⟨i, j, hfij, hij⟩ | ⟨i, j, hgij, hij⟩ := hfg\n      · rw [← det_transpose, transpose_submatrix]\n        apply det_zero_of_column_eq hij.symm\n        simp [hfij]\n      · apply det_zero_of_column_eq hij\n        simp [hgij]\n  · intro _ _ _ _ _\n    apply hA\n\n"}
{"name":"Matrix.isTotallyUnimodular_iff_fintype","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nn : Type u_3\nR : Type u_5\ninst✝ : CommRing R\nA : Matrix m n R\n⊢ Iff A.IsTotallyUnimodular (∀ (ι : Type w) [inst : Fintype ι] [inst_1 : DecidableEq ι] (f : ι → m) (g : ι → n), Membership.mem (Set.range SignType.cast) (A.submatrix f g).det)","decl":"lemma isTotallyUnimodular_iff_fintype.{w} (A : Matrix m n R) : A.IsTotallyUnimodular ↔\n    ∀ (ι : Type w) [Fintype ι] [DecidableEq ι], ∀ f : ι → m, ∀ g : ι → n,\n      (A.submatrix f g).det ∈ Set.range SignType.cast := by\n  rw [isTotallyUnimodular_iff]\n  constructor\n  · intro hA ι _ _ f g\n    specialize hA (Fintype.card ι) (f ∘ (Fintype.equivFin ι).symm) (g ∘ (Fintype.equivFin ι).symm)\n    rwa [←submatrix_submatrix, det_submatrix_equiv_self] at hA\n  · intro hA k f g\n    specialize hA (ULift (Fin k)) (f ∘ Equiv.ulift) (g ∘ Equiv.ulift)\n    rwa [←submatrix_submatrix, det_submatrix_equiv_self] at hA\n\n"}
{"name":"Matrix.IsTotallyUnimodular.apply","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nn : Type u_3\nR : Type u_5\ninst✝ : CommRing R\nA : Matrix m n R\nhA : A.IsTotallyUnimodular\ni : m\nj : n\n⊢ Membership.mem (Set.range SignType.cast) (A i j)","decl":"lemma IsTotallyUnimodular.apply {A : Matrix m n R} (hA : A.IsTotallyUnimodular) (i : m) (j : n) :\n    A i j ∈ Set.range SignType.cast := by\n  rw [isTotallyUnimodular_iff] at hA\n  simpa using hA 1 (fun _ => i) (fun _ => j)\n\n"}
{"name":"Matrix.IsTotallyUnimodular.submatrix","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nm' : Type u_2\nn : Type u_3\nn' : Type u_4\nR : Type u_5\ninst✝ : CommRing R\nA : Matrix m n R\nf : m' → m\ng : n' → n\nhA : A.IsTotallyUnimodular\n⊢ (A.submatrix f g).IsTotallyUnimodular","decl":"lemma IsTotallyUnimodular.submatrix {A : Matrix m n R} (f : m' → m) (g : n' → n)\n    (hA : A.IsTotallyUnimodular) :\n    (A.submatrix f g).IsTotallyUnimodular := by\n  simp only [isTotallyUnimodular_iff, submatrix_submatrix] at hA ⊢\n  intro _ _ _\n  apply hA\n\n"}
{"name":"Matrix.IsTotallyUnimodular.transpose","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nn : Type u_3\nR : Type u_5\ninst✝ : CommRing R\nA : Matrix m n R\nhA : A.IsTotallyUnimodular\n⊢ A.transpose.IsTotallyUnimodular","decl":"lemma IsTotallyUnimodular.transpose {A : Matrix m n R} (hA : A.IsTotallyUnimodular) :\n    Aᵀ.IsTotallyUnimodular := by\n  simp only [isTotallyUnimodular_iff, ← transpose_submatrix, det_transpose] at hA ⊢\n  intro _ _ _\n  apply hA\n\n"}
{"name":"Matrix.transpose_isTotallyUnimodular_iff","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nn : Type u_3\nR : Type u_5\ninst✝ : CommRing R\nA : Matrix m n R\n⊢ Iff A.transpose.IsTotallyUnimodular A.IsTotallyUnimodular","decl":"lemma transpose_isTotallyUnimodular_iff (A : Matrix m n R) :\n    Aᵀ.IsTotallyUnimodular ↔ A.IsTotallyUnimodular := by\n  constructor <;> apply IsTotallyUnimodular.transpose\n\n"}
{"name":"Matrix.IsTotallyUnimodular.reindex","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nm' : Type u_2\nn : Type u_3\nn' : Type u_4\nR : Type u_5\ninst✝ : CommRing R\nA : Matrix m n R\nem : Equiv m m'\nen : Equiv n n'\nhA : A.IsTotallyUnimodular\n⊢ ((Matrix.reindex em en) A).IsTotallyUnimodular","decl":"lemma IsTotallyUnimodular.reindex {A : Matrix m n R} (em : m ≃ m') (en : n ≃ n')\n    (hA : A.IsTotallyUnimodular) :\n    (A.reindex em en).IsTotallyUnimodular :=\n  hA.submatrix _ _\n\n"}
{"name":"Matrix.reindex_isTotallyUnimodular","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nm' : Type u_2\nn : Type u_3\nn' : Type u_4\nR : Type u_5\ninst✝ : CommRing R\nA : Matrix m n R\nem : Equiv m m'\nen : Equiv n n'\n⊢ Iff ((Matrix.reindex em en) A).IsTotallyUnimodular A.IsTotallyUnimodular","decl":"lemma reindex_isTotallyUnimodular (A : Matrix m n R) (em : m ≃ m') (en : n ≃ n') :\n    (A.reindex em en).IsTotallyUnimodular ↔ A.IsTotallyUnimodular :=\n  ⟨fun hA => by simpa [Equiv.symm_apply_eq] using hA.reindex em.symm en.symm,\n   fun hA => hA.reindex _ _⟩\n\n"}
{"name":"Matrix.IsTotallyUnimodular.fromRows_unitlike","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nm' : Type u_2\nn : Type u_3\nR : Type u_5\ninst✝¹ : CommRing R\ninst✝ : DecidableEq n\nA : Matrix m n R\nB : Matrix m' n R\nhA : A.IsTotallyUnimodular\nhB : Nonempty n → ∀ (i : m'), Exists fun j => Exists fun s => Eq (B i) (Pi.single j ↑s)\n⊢ (A.fromRows B).IsTotallyUnimodular","decl":"/-- If `A` is totally unimodular and each row of `B` is all zeros except for at most a single `1` or\na single `-1` then `fromRows A B` is totally unimodular. -/\nlemma IsTotallyUnimodular.fromRows_unitlike [DecidableEq n] {A : Matrix m n R} {B : Matrix m' n R}\n    (hA : A.IsTotallyUnimodular)\n    (hB : Nonempty n → ∀ i : m', ∃ j : n, ∃ s : SignType, B i = Pi.single j s.cast) :\n    (fromRows A B).IsTotallyUnimodular := by\n  intro k f g hf hg\n  induction k with\n  | zero => use 1; simp\n  | succ k ih =>\n    specialize hB ⟨g 0⟩\n    -- Either `f` is `inr` somewhere or `inl` everywhere\n    obtain ⟨i, j, hfi⟩ | ⟨f', rfl⟩ : (∃ i j, f i = .inr j) ∨ (∃ f', f = .inl ∘ f') := by\n      simp_rw [← Sum.isRight_iff, or_iff_not_imp_left, not_exists, Bool.not_eq_true,\n        Sum.isRight_eq_false, Sum.isLeft_iff]\n      intro hfr\n      choose f' hf' using hfr\n      exact ⟨f', funext hf'⟩\n    · have hAB := det_succ_row ((fromRows A B).submatrix f g) i\n      simp only [submatrix_apply, hfi, fromRows_apply_inr] at hAB\n      obtain ⟨j', s, hj'⟩ := hB j\n      · simp only [hj', Function.update_apply] at hAB\n        by_cases hj'' : ∃ x, g x = j'\n        · obtain ⟨x, rfl⟩ := hj''\n          rw [Fintype.sum_eq_single x fun y hxy => ?_, Pi.single_eq_same] at hAB\n          · rw [hAB]\n            change _ ∈ MonoidHom.mrange SignType.castHom.toMonoidHom\n            refine mul_mem (mul_mem ?_ (Set.mem_range_self s)) ?_\n            · apply pow_mem\n              exact ⟨-1, by simp⟩\n            · exact ih _ _\n                (hf.comp Fin.succAbove_right_injective)\n                (hg.comp Fin.succAbove_right_injective)\n          · simp [Pi.single_eq_of_ne, hg.ne_iff.mpr hxy]\n        · rw [not_exists] at hj''\n          use 0\n          simpa [hj''] using hAB.symm\n    · rw [isTotallyUnimodular_iff] at hA\n      apply hA\n\n"}
{"name":"Matrix.fromRows_isTotallyUnimodular_iff_rows","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nm' : Type u_2\nn : Type u_3\nR : Type u_5\ninst✝¹ : CommRing R\ninst✝ : DecidableEq n\nA : Matrix m n R\nB : Matrix m' n R\nhB : Nonempty n → ∀ (i : m'), Exists fun j => Exists fun s => Eq (B i) (Pi.single j ↑s)\n⊢ Iff (A.fromRows B).IsTotallyUnimodular A.IsTotallyUnimodular","decl":"/-- If `A` is totally unimodular and each row of `B` is all zeros except for at most a single `1`,\nthen `fromRows A B` is totally unimodular. -/\nlemma fromRows_isTotallyUnimodular_iff_rows [DecidableEq n] {A : Matrix m n R} {B : Matrix m' n R}\n    (hB : Nonempty n → ∀ i : m', ∃ j : n, ∃ s : SignType, B i = Pi.single j s.cast) :\n    (fromRows A B).IsTotallyUnimodular ↔ A.IsTotallyUnimodular :=\n  ⟨.submatrix Sum.inl id, fun hA => hA.fromRows_unitlike hB⟩\n\n"}
{"name":"Matrix.fromRows_one_isTotallyUnimodular_iff","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nn : Type u_3\nR : Type u_5\ninst✝¹ : CommRing R\ninst✝ : DecidableEq n\nA : Matrix m n R\n⊢ Iff (A.fromRows 1).IsTotallyUnimodular A.IsTotallyUnimodular","decl":"lemma fromRows_one_isTotallyUnimodular_iff [DecidableEq n] (A : Matrix m n R) :\n    (fromRows A (1 : Matrix n n R)).IsTotallyUnimodular ↔ A.IsTotallyUnimodular :=\n  fromRows_isTotallyUnimodular_iff_rows <| fun h i ↦\n    ⟨i, 1, funext fun j ↦ by simp [one_apply, Pi.single_apply, eq_comm]⟩\n\n"}
{"name":"Matrix.one_fromRows_isTotallyUnimodular_iff","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nn : Type u_3\nR : Type u_5\ninst✝¹ : CommRing R\ninst✝ : DecidableEq n\nA : Matrix m n R\n⊢ Iff (Matrix.fromRows 1 A).IsTotallyUnimodular A.IsTotallyUnimodular","decl":"lemma one_fromRows_isTotallyUnimodular_iff [DecidableEq n] (A : Matrix m n R) :\n    (fromRows (1 : Matrix n n R) A).IsTotallyUnimodular ↔ A.IsTotallyUnimodular := by\n  have hA :\n    fromRows (1 : Matrix n n R) A =\n      (fromRows A (1 : Matrix n n R)).reindex (Equiv.sumComm m n) (Equiv.refl n) := by\n    aesop\n  rw [hA, reindex_isTotallyUnimodular, fromRows_one_isTotallyUnimodular_iff]\n\n"}
{"name":"Matrix.fromCols_one_isTotallyUnimodular_iff","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nn : Type u_3\nR : Type u_5\ninst✝¹ : CommRing R\ninst✝ : DecidableEq m\nA : Matrix m n R\n⊢ Iff (A.fromCols 1).IsTotallyUnimodular A.IsTotallyUnimodular","decl":"lemma fromCols_one_isTotallyUnimodular_iff [DecidableEq m] (A : Matrix m n R) :\n    (fromCols A (1 : Matrix m m R)).IsTotallyUnimodular ↔ A.IsTotallyUnimodular := by\n  rw [←transpose_isTotallyUnimodular_iff, transpose_fromCols, transpose_one,\n    fromRows_one_isTotallyUnimodular_iff, transpose_isTotallyUnimodular_iff]\n\n"}
{"name":"Matrix.fromColumns_one_isTotallyUnimodular_iff","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nn : Type u_3\nR : Type u_5\ninst✝¹ : CommRing R\ninst✝ : DecidableEq m\nA : Matrix m n R\n⊢ Iff (A.fromCols 1).IsTotallyUnimodular A.IsTotallyUnimodular","decl":"@[deprecated (since := \"2024-12-11\")]\nalias fromColumns_one_isTotallyUnimodular_iff := fromCols_one_isTotallyUnimodular_iff\n\n"}
{"name":"Matrix.one_fromCols_isTotallyUnimodular_iff","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nn : Type u_3\nR : Type u_5\ninst✝¹ : CommRing R\ninst✝ : DecidableEq m\nA : Matrix m n R\n⊢ Iff (Matrix.fromCols 1 A).IsTotallyUnimodular A.IsTotallyUnimodular","decl":"lemma one_fromCols_isTotallyUnimodular_iff [DecidableEq m] (A : Matrix m n R) :\n    (fromCols (1 : Matrix m m R) A).IsTotallyUnimodular ↔ A.IsTotallyUnimodular := by\n  rw [←transpose_isTotallyUnimodular_iff, transpose_fromCols, transpose_one,\n    one_fromRows_isTotallyUnimodular_iff, transpose_isTotallyUnimodular_iff]\n\n"}
{"name":"Matrix.one_fromColumns_isTotallyUnimodular_iff","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nn : Type u_3\nR : Type u_5\ninst✝¹ : CommRing R\ninst✝ : DecidableEq m\nA : Matrix m n R\n⊢ Iff (Matrix.fromCols 1 A).IsTotallyUnimodular A.IsTotallyUnimodular","decl":"@[deprecated (since := \"2024-12-11\")]\nalias one_fromColumns_isTotallyUnimodular_iff := one_fromCols_isTotallyUnimodular_iff\n\n"}
{"name":"Matrix.IsTotallyUnimodular.fromRows_one","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nn : Type u_3\nR : Type u_5\ninst✝¹ : CommRing R\ninst✝ : DecidableEq n\nA : Matrix m n R\na✝ : A.IsTotallyUnimodular\n⊢ (A.fromRows 1).IsTotallyUnimodular","decl":"alias ⟨_, IsTotallyUnimodular.fromRows_one⟩ := fromRows_one_isTotallyUnimodular_iff\n"}
{"name":"Matrix.IsTotallyUnimodular.one_fromRows","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nn : Type u_3\nR : Type u_5\ninst✝¹ : CommRing R\ninst✝ : DecidableEq n\nA : Matrix m n R\na✝ : A.IsTotallyUnimodular\n⊢ (Matrix.fromRows 1 A).IsTotallyUnimodular","decl":"alias ⟨_, IsTotallyUnimodular.one_fromRows⟩ := one_fromRows_isTotallyUnimodular_iff\n"}
{"name":"Matrix.IsTotallyUnimodular.fromCols_one","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nn : Type u_3\nR : Type u_5\ninst✝¹ : CommRing R\ninst✝ : DecidableEq m\nA : Matrix m n R\na✝ : A.IsTotallyUnimodular\n⊢ (A.fromCols 1).IsTotallyUnimodular","decl":"alias ⟨_, IsTotallyUnimodular.fromCols_one⟩ := fromCols_one_isTotallyUnimodular_iff\n"}
{"name":"Matrix.IsTotallyUnimodular.one_fromCols","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nn : Type u_3\nR : Type u_5\ninst✝¹ : CommRing R\ninst✝ : DecidableEq m\nA : Matrix m n R\na✝ : A.IsTotallyUnimodular\n⊢ (Matrix.fromCols 1 A).IsTotallyUnimodular","decl":"alias ⟨_, IsTotallyUnimodular.one_fromCols⟩ := one_fromCols_isTotallyUnimodular_iff\n\n"}
{"name":"Matrix.fromRows_row0_isTotallyUnimodular_iff","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nm' : Type u_2\nn : Type u_3\nR : Type u_5\ninst✝ : CommRing R\nA : Matrix m n R\n⊢ Iff (A.fromRows (Matrix.row m' 0)).IsTotallyUnimodular A.IsTotallyUnimodular","decl":"lemma fromRows_row0_isTotallyUnimodular_iff (A : Matrix m n R) :\n    (fromRows A (row m' 0)).IsTotallyUnimodular ↔ A.IsTotallyUnimodular := by\n  classical\n  refine fromRows_isTotallyUnimodular_iff_rows <| fun _ _ => ?_\n  inhabit n\n  refine ⟨default, 0, ?_⟩\n  ext x\n  simp [Pi.single_apply]\n\n"}
{"name":"Matrix.fromCols_col0_isTotallyUnimodular_iff","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nn : Type u_3\nn' : Type u_4\nR : Type u_5\ninst✝ : CommRing R\nA : Matrix m n R\n⊢ Iff (A.fromCols (Matrix.col n' 0)).IsTotallyUnimodular A.IsTotallyUnimodular","decl":"lemma fromCols_col0_isTotallyUnimodular_iff (A : Matrix m n R) :\n    (fromCols A (col n' 0)).IsTotallyUnimodular ↔ A.IsTotallyUnimodular := by\n  rw [← transpose_isTotallyUnimodular_iff, transpose_fromCols, transpose_col,\n    fromRows_row0_isTotallyUnimodular_iff, transpose_isTotallyUnimodular_iff]\n\n"}
{"name":"Matrix.fromColumns_col0_isTotallyUnimodular_iff","module":"Mathlib.LinearAlgebra.Matrix.Determinant.TotallyUnimodular","initialProofState":"m : Type u_1\nn : Type u_3\nn' : Type u_4\nR : Type u_5\ninst✝ : CommRing R\nA : Matrix m n R\n⊢ Iff (A.fromCols (Matrix.col n' 0)).IsTotallyUnimodular A.IsTotallyUnimodular","decl":"@[deprecated (since := \"2024-12-11\")]\nalias fromColumns_col0_isTotallyUnimodular_iff := fromCols_col0_isTotallyUnimodular_iff\n\n"}
