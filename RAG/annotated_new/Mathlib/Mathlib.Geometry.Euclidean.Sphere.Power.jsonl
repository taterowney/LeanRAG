{"name":"InnerProductGeometry.mul_norm_eq_abs_sub_sq_norm","module":"Mathlib.Geometry.Euclidean.Sphere.Power","initialProofState":"V : Type u_1\ninst✝¹ : NormedAddCommGroup V\ninst✝ : InnerProductSpace Real V\nx y z : V\nh₁ : Exists fun k => And (Ne k 1) (Eq (HAdd.hAdd x y) (HSMul.hSMul k (HSub.hSub x y)))\nh₂ : Eq (Norm.norm (HSub.hSub z y)) (Norm.norm (HAdd.hAdd z y))\n⊢ Eq (HMul.hMul (Norm.norm (HSub.hSub x y)) (Norm.norm (HAdd.hAdd x y))) (abs (HSub.hSub (HPow.hPow (Norm.norm (HAdd.hAdd z y)) 2) (HPow.hPow (Norm.norm (HSub.hSub z x)) 2)))","decl":"theorem mul_norm_eq_abs_sub_sq_norm {x y z : V} (h₁ : ∃ k : ℝ, k ≠ 1 ∧ x + y = k • (x - y))\n    (h₂ : ‖z - y‖ = ‖z + y‖) : ‖x - y‖ * ‖x + y‖ = |‖z + y‖ ^ 2 - ‖z - x‖ ^ 2| := by\n  obtain ⟨k, hk_ne_one, hk⟩ := h₁\n  let r := (k - 1)⁻¹ * (k + 1)\n  have hxy : x = r • y := by\n    rw [← smul_smul, eq_inv_smul_iff₀ (sub_ne_zero.mpr hk_ne_one), ← sub_eq_zero]\n    calc\n      (k - 1) • x - (k + 1) • y = k • x - x - (k • y + y) := by\n        simp_rw [sub_smul, add_smul, one_smul]\n      _ = k • x - k • y - (x + y) := by simp_rw [← sub_sub, sub_right_comm]\n      _ = k • (x - y) - (x + y) := by rw [← smul_sub k x y]\n      _ = 0 := sub_eq_zero.mpr hk.symm\n  have hzy : ⟪z, y⟫ = 0 := by\n    rwa [inner_eq_zero_iff_angle_eq_pi_div_two, ← norm_add_eq_norm_sub_iff_angle_eq_pi_div_two,\n      eq_comm]\n  have hzx : ⟪z, x⟫ = 0 := by rw [hxy, inner_smul_right, hzy, mul_zero]\n  calc\n    ‖x - y‖ * ‖x + y‖ = ‖(r - 1) • y‖ * ‖(r + 1) • y‖ := by simp [sub_smul, add_smul, hxy]\n    _ = ‖r - 1‖ * ‖y‖ * (‖r + 1‖ * ‖y‖) := by simp_rw [norm_smul]\n    _ = ‖r - 1‖ * ‖r + 1‖ * ‖y‖ ^ 2 := by ring\n    _ = |(r - 1) * (r + 1) * ‖y‖ ^ 2| := by simp [abs_mul]\n    _ = |r ^ 2 * ‖y‖ ^ 2 - ‖y‖ ^ 2| := by ring_nf\n    _ = |‖x‖ ^ 2 - ‖y‖ ^ 2| := by simp [hxy, norm_smul, mul_pow, sq_abs]\n    _ = |‖z + y‖ ^ 2 - ‖z - x‖ ^ 2| := by\n      simp [norm_add_sq_real, norm_sub_sq_real, hzy, hzx, abs_sub_comm]\n\n"}
{"name":"EuclideanGeometry.mul_dist_eq_abs_sub_sq_dist","module":"Mathlib.Geometry.Euclidean.Sphere.Power","initialProofState":"V : Type u_1\ninst✝³ : NormedAddCommGroup V\ninst✝² : InnerProductSpace Real V\nP : Type u_2\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\na b p q : P\nhp : Exists fun k => And (Ne k 1) (Eq (VSub.vsub b p) (HSMul.hSMul k (VSub.vsub a p)))\nhq : Eq (Dist.dist a q) (Dist.dist b q)\n⊢ Eq (HMul.hMul (Dist.dist a p) (Dist.dist b p)) (abs (HSub.hSub (HPow.hPow (Dist.dist b q) 2) (HPow.hPow (Dist.dist p q) 2)))","decl":"/-- If `P` is a point on the line `AB` and `Q` is equidistant from `A` and `B`, then\n`AP * BP = abs (BQ ^ 2 - PQ ^ 2)`. -/\ntheorem mul_dist_eq_abs_sub_sq_dist {a b p q : P} (hp : ∃ k : ℝ, k ≠ 1 ∧ b -ᵥ p = k • (a -ᵥ p))\n    (hq : dist a q = dist b q) : dist a p * dist b p = |dist b q ^ 2 - dist p q ^ 2| := by\n  let m : P := midpoint ℝ a b\n  have h1 := vsub_sub_vsub_cancel_left a p m\n  have h2 := vsub_sub_vsub_cancel_left p q m\n  have h3 := vsub_sub_vsub_cancel_left a q m\n  have h : ∀ r, b -ᵥ r = m -ᵥ r + (m -ᵥ a) := fun r => by\n    rw [midpoint_vsub_left, ← right_vsub_midpoint, add_comm, vsub_add_vsub_cancel]\n  iterate 4 rw [dist_eq_norm_vsub V]\n  rw [← h1, ← h2, h, h]\n  rw [← h1, h] at hp\n  rw [dist_eq_norm_vsub V a q, dist_eq_norm_vsub V b q, ← h3, h] at hq\n  exact mul_norm_eq_abs_sub_sq_norm hp hq\n\n"}
{"name":"EuclideanGeometry.mul_dist_eq_mul_dist_of_cospherical","module":"Mathlib.Geometry.Euclidean.Sphere.Power","initialProofState":"V : Type u_1\ninst✝³ : NormedAddCommGroup V\ninst✝² : InnerProductSpace Real V\nP : Type u_2\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\na b c d p : P\nh : EuclideanGeometry.Cospherical (Insert.insert a (Insert.insert b (Insert.insert c (Singleton.singleton d))))\nhapb : Exists fun k₁ => And (Ne k₁ 1) (Eq (VSub.vsub b p) (HSMul.hSMul k₁ (VSub.vsub a p)))\nhcpd : Exists fun k₂ => And (Ne k₂ 1) (Eq (VSub.vsub d p) (HSMul.hSMul k₂ (VSub.vsub c p)))\n⊢ Eq (HMul.hMul (Dist.dist a p) (Dist.dist b p)) (HMul.hMul (Dist.dist c p) (Dist.dist d p))","decl":"/-- If `A`, `B`, `C`, `D` are cospherical and `P` is on both lines `AB` and `CD`, then\n`AP * BP = CP * DP`. -/\ntheorem mul_dist_eq_mul_dist_of_cospherical {a b c d p : P} (h : Cospherical ({a, b, c, d} : Set P))\n    (hapb : ∃ k₁ : ℝ, k₁ ≠ 1 ∧ b -ᵥ p = k₁ • (a -ᵥ p))\n    (hcpd : ∃ k₂ : ℝ, k₂ ≠ 1 ∧ d -ᵥ p = k₂ • (c -ᵥ p)) :\n    dist a p * dist b p = dist c p * dist d p := by\n  obtain ⟨q, r, h'⟩ := (cospherical_def {a, b, c, d}).mp h\n  obtain ⟨ha, hb, hc, hd⟩ := h' a (by simp), h' b (by simp), h' c (by simp), h' d (by simp)\n  rw [← hd] at hc\n  rw [← hb] at ha\n  rw [mul_dist_eq_abs_sub_sq_dist hapb ha, hb, mul_dist_eq_abs_sub_sq_dist hcpd hc, hd]\n\n"}
{"name":"EuclideanGeometry.mul_dist_eq_mul_dist_of_cospherical_of_angle_eq_pi","module":"Mathlib.Geometry.Euclidean.Sphere.Power","initialProofState":"V : Type u_1\ninst✝³ : NormedAddCommGroup V\ninst✝² : InnerProductSpace Real V\nP : Type u_2\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\na b c d p : P\nh : EuclideanGeometry.Cospherical (Insert.insert a (Insert.insert b (Insert.insert c (Singleton.singleton d))))\nhapb : Eq (EuclideanGeometry.angle a p b) Real.pi\nhcpd : Eq (EuclideanGeometry.angle c p d) Real.pi\n⊢ Eq (HMul.hMul (Dist.dist a p) (Dist.dist b p)) (HMul.hMul (Dist.dist c p) (Dist.dist d p))","decl":"/-- **Intersecting Chords Theorem**. -/\ntheorem mul_dist_eq_mul_dist_of_cospherical_of_angle_eq_pi {a b c d p : P}\n    (h : Cospherical ({a, b, c, d} : Set P)) (hapb : ∠ a p b = π) (hcpd : ∠ c p d = π) :\n    dist a p * dist b p = dist c p * dist d p := by\n  obtain ⟨-, k₁, _, hab⟩ := angle_eq_pi_iff.mp hapb\n  obtain ⟨-, k₂, _, hcd⟩ := angle_eq_pi_iff.mp hcpd\n  exact mul_dist_eq_mul_dist_of_cospherical h ⟨k₁, by linarith, hab⟩ ⟨k₂, by linarith, hcd⟩\n\n"}
{"name":"EuclideanGeometry.mul_dist_eq_mul_dist_of_cospherical_of_angle_eq_zero","module":"Mathlib.Geometry.Euclidean.Sphere.Power","initialProofState":"V : Type u_1\ninst✝³ : NormedAddCommGroup V\ninst✝² : InnerProductSpace Real V\nP : Type u_2\ninst✝¹ : MetricSpace P\ninst✝ : NormedAddTorsor V P\na b c d p : P\nh : EuclideanGeometry.Cospherical (Insert.insert a (Insert.insert b (Insert.insert c (Singleton.singleton d))))\nhab : Ne a b\nhcd : Ne c d\nhapb : Eq (EuclideanGeometry.angle a p b) 0\nhcpd : Eq (EuclideanGeometry.angle c p d) 0\n⊢ Eq (HMul.hMul (Dist.dist a p) (Dist.dist b p)) (HMul.hMul (Dist.dist c p) (Dist.dist d p))","decl":"/-- **Intersecting Secants Theorem**. -/\ntheorem mul_dist_eq_mul_dist_of_cospherical_of_angle_eq_zero {a b c d p : P}\n    (h : Cospherical ({a, b, c, d} : Set P)) (hab : a ≠ b) (hcd : c ≠ d) (hapb : ∠ a p b = 0)\n    (hcpd : ∠ c p d = 0) : dist a p * dist b p = dist c p * dist d p := by\n  obtain ⟨-, k₁, -, hab₁⟩ := angle_eq_zero_iff.mp hapb\n  obtain ⟨-, k₂, -, hcd₁⟩ := angle_eq_zero_iff.mp hcpd\n  refine mul_dist_eq_mul_dist_of_cospherical h ⟨k₁, ?_, hab₁⟩ ⟨k₂, ?_, hcd₁⟩ <;> by_contra hnot <;>\n    simp_all only [Classical.not_not, one_smul]\n  exacts [hab (vsub_left_cancel hab₁).symm, hcd (vsub_left_cancel hcd₁).symm]\n\n"}
