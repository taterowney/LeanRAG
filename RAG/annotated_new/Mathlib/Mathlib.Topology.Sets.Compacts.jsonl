{"name":"TopologicalSpace.Compacts.isCompact'","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_4\ninst✝ : TopologicalSpace α\nself : TopologicalSpace.Compacts α\n⊢ IsCompact self.carrier","decl":"/-- The type of compact sets of a topological space. -/\nstructure Compacts (α : Type*) [TopologicalSpace α] where\n  /-- the carrier set, i.e. the points in this set -/\n  carrier : Set α\n  isCompact' : IsCompact carrier\n\n"}
{"name":"TopologicalSpace.Compacts.mk.sizeOf_spec","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_4\ninst✝¹ : TopologicalSpace α\ninst✝ : SizeOf α\ncarrier : Set α\nisCompact' : IsCompact carrier\n⊢ Eq (SizeOf.sizeOf { carrier := carrier, isCompact' := isCompact' }) 1","decl":"/-- The type of compact sets of a topological space. -/\nstructure Compacts (α : Type*) [TopologicalSpace α] where\n  /-- the carrier set, i.e. the points in this set -/\n  carrier : Set α\n  isCompact' : IsCompact carrier\n\n"}
{"name":"TopologicalSpace.Compacts.mk.inj","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_4\ninst✝ : TopologicalSpace α\ncarrier✝ : Set α\nisCompact'✝ : IsCompact carrier✝\ncarrier : Set α\nisCompact' : IsCompact carrier\nx✝ : Eq { carrier := carrier✝, isCompact' := isCompact'✝ } { carrier := carrier, isCompact' := isCompact' }\n⊢ Eq carrier✝ carrier","decl":"/-- The type of compact sets of a topological space. -/\nstructure Compacts (α : Type*) [TopologicalSpace α] where\n  /-- the carrier set, i.e. the points in this set -/\n  carrier : Set α\n  isCompact' : IsCompact carrier\n\n"}
{"name":"TopologicalSpace.Compacts.mk.injEq","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_4\ninst✝ : TopologicalSpace α\ncarrier✝ : Set α\nisCompact'✝ : IsCompact carrier✝\ncarrier : Set α\nisCompact' : IsCompact carrier\n⊢ Eq (Eq { carrier := carrier✝, isCompact' := isCompact'✝ } { carrier := carrier, isCompact' := isCompact' }) (Eq carrier✝ carrier)","decl":"/-- The type of compact sets of a topological space. -/\nstructure Compacts (α : Type*) [TopologicalSpace α] where\n  /-- the carrier set, i.e. the points in this set -/\n  carrier : Set α\n  isCompact' : IsCompact carrier\n\n"}
{"name":"TopologicalSpace.Compacts.isCompact","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.Compacts α\n⊢ IsCompact ↑s","decl":"protected theorem isCompact (s : Compacts α) : IsCompact (s : Set α) :=\n  s.isCompact'\n\n"}
{"name":"TopologicalSpace.Compacts.instCompactSpaceSubtypeMem","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nK : TopologicalSpace.Compacts α\n⊢ CompactSpace (Subtype fun x => Membership.mem K x)","decl":"instance (K : Compacts α) : CompactSpace K :=\n  isCompact_iff_compactSpace.1 K.isCompact\n\n"}
{"name":"TopologicalSpace.Compacts.instCanLiftSetCoeIsCompact","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\n⊢ CanLift (Set α) (TopologicalSpace.Compacts α) SetLike.coe IsCompact","decl":"instance : CanLift (Set α) (Compacts α) (↑) IsCompact where prf K hK := ⟨⟨K, hK⟩, rfl⟩\n\n"}
{"name":"TopologicalSpace.Compacts.ext","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.Compacts α\nh : Eq ↑s ↑t\n⊢ Eq s t","decl":"@[ext]\nprotected theorem ext {s t : Compacts α} (h : (s : Set α) = t) : s = t :=\n  SetLike.ext' h\n\n"}
{"name":"TopologicalSpace.Compacts.ext_iff","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.Compacts α\n⊢ Iff (Eq s t) (Eq ↑s ↑t)","decl":"@[ext]\nprotected theorem ext {s t : Compacts α} (h : (s : Set α) = t) : s = t :=\n  SetLike.ext' h\n\n"}
{"name":"TopologicalSpace.Compacts.coe_mk","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : Set α\nh : IsCompact s\n⊢ Eq (↑{ carrier := s, isCompact' := h }) s","decl":"@[simp]\ntheorem coe_mk (s : Set α) (h) : (mk s h : Set α) = s :=\n  rfl\n\n"}
{"name":"TopologicalSpace.Compacts.carrier_eq_coe","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.Compacts α\n⊢ Eq s.carrier ↑s","decl":"@[simp]\ntheorem carrier_eq_coe (s : Compacts α) : s.carrier = s :=\n  rfl\n\n"}
{"name":"TopologicalSpace.Compacts.coe_sup","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.Compacts α\n⊢ Eq (↑(Max.max s t)) (Union.union ↑s ↑t)","decl":"@[simp]\ntheorem coe_sup (s t : Compacts α) : (↑(s ⊔ t) : Set α) = ↑s ∪ ↑t :=\n  rfl\n\n"}
{"name":"TopologicalSpace.Compacts.coe_inf","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : T2Space α\ns t : TopologicalSpace.Compacts α\n⊢ Eq (↑(Min.min s t)) (Inter.inter ↑s ↑t)","decl":"@[simp]\ntheorem coe_inf [T2Space α] (s t : Compacts α) : (↑(s ⊓ t) : Set α) = ↑s ∩ ↑t :=\n  rfl\n\n"}
{"name":"TopologicalSpace.Compacts.coe_top","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : CompactSpace α\n⊢ Eq (↑Top.top) Set.univ","decl":"@[simp]\ntheorem coe_top [CompactSpace α] : (↑(⊤ : Compacts α) : Set α) = univ :=\n  rfl\n\n"}
{"name":"TopologicalSpace.Compacts.coe_bot","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\n⊢ Eq (↑Bot.bot) EmptyCollection.emptyCollection","decl":"@[simp]\ntheorem coe_bot : (↑(⊥ : Compacts α) : Set α) = ∅ :=\n  rfl\n\n"}
{"name":"TopologicalSpace.Compacts.coe_finset_sup","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nι : Type u_4\ns : Finset ι\nf : ι → TopologicalSpace.Compacts α\n⊢ Eq (↑(s.sup f)) (s.sup fun i => ↑(f i))","decl":"@[simp]\ntheorem coe_finset_sup {ι : Type*} {s : Finset ι} {f : ι → Compacts α} :\n    (↑(s.sup f) : Set α) = s.sup fun i => ↑(f i) := by\n  refine Finset.cons_induction_on s rfl fun a s _ h => ?_\n  simp_rw [Finset.sup_cons, coe_sup, sup_eq_union]\n  congr\n\n"}
{"name":"TopologicalSpace.Compacts.coe_map","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : α → β\nhf : Continuous f\ns : TopologicalSpace.Compacts α\n⊢ Eq (↑(TopologicalSpace.Compacts.map f hf s)) (Set.image f ↑s)","decl":"@[simp, norm_cast]\ntheorem coe_map {f : α → β} (hf : Continuous f) (s : Compacts α) : (s.map f hf : Set β) = f '' s :=\n  rfl\n\n"}
{"name":"TopologicalSpace.Compacts.map_id","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nK : TopologicalSpace.Compacts α\n⊢ Eq (TopologicalSpace.Compacts.map id ⋯ K) K","decl":"@[simp]\ntheorem map_id (K : Compacts α) : K.map id continuous_id = K :=\n  Compacts.ext <| Set.image_id _\n\n"}
{"name":"TopologicalSpace.Compacts.map_comp","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\nf : β → γ\ng : α → β\nhf : Continuous f\nhg : Continuous g\nK : TopologicalSpace.Compacts α\n⊢ Eq (TopologicalSpace.Compacts.map (Function.comp f g) ⋯ K) (TopologicalSpace.Compacts.map f hf (TopologicalSpace.Compacts.map g hg K))","decl":"theorem map_comp (f : β → γ) (g : α → β) (hf : Continuous f) (hg : Continuous g) (K : Compacts α) :\n    K.map (f ∘ g) (hf.comp hg) = (K.map g hg).map f hf :=\n  Compacts.ext <| Set.image_comp _ _ _\n\n"}
{"name":"TopologicalSpace.Compacts.equiv_apply","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : Homeomorph α β\nK : TopologicalSpace.Compacts α\n⊢ Eq ((TopologicalSpace.Compacts.equiv f) K) (TopologicalSpace.Compacts.map ⇑f ⋯ K)","decl":"/-- A homeomorphism induces an equivalence on compact sets, by taking the image. -/\n@[simps]\nprotected def equiv (f : α ≃ₜ β) : Compacts α ≃ Compacts β where\n  toFun := Compacts.map f f.continuous\n  invFun := Compacts.map _ f.symm.continuous\n  left_inv s := by\n    ext1\n    simp only [coe_map, ← image_comp, f.symm_comp_self, image_id]\n  right_inv s := by\n    ext1\n    simp only [coe_map, ← image_comp, f.self_comp_symm, image_id]\n\n"}
{"name":"TopologicalSpace.Compacts.equiv_symm_apply","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : Homeomorph α β\nK : TopologicalSpace.Compacts β\n⊢ Eq ((TopologicalSpace.Compacts.equiv f).symm K) (TopologicalSpace.Compacts.map ⇑f.symm ⋯ K)","decl":"/-- A homeomorphism induces an equivalence on compact sets, by taking the image. -/\n@[simps]\nprotected def equiv (f : α ≃ₜ β) : Compacts α ≃ Compacts β where\n  toFun := Compacts.map f f.continuous\n  invFun := Compacts.map _ f.symm.continuous\n  left_inv s := by\n    ext1\n    simp only [coe_map, ← image_comp, f.symm_comp_self, image_id]\n  right_inv s := by\n    ext1\n    simp only [coe_map, ← image_comp, f.self_comp_symm, image_id]\n\n"}
{"name":"TopologicalSpace.Compacts.equiv_refl","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\n⊢ Eq (TopologicalSpace.Compacts.equiv (Homeomorph.refl α)) (Equiv.refl (TopologicalSpace.Compacts α))","decl":"@[simp]\ntheorem equiv_refl : Compacts.equiv (Homeomorph.refl α) = Equiv.refl _ :=\n  Equiv.ext map_id\n\n"}
{"name":"TopologicalSpace.Compacts.equiv_trans","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\nf : Homeomorph α β\ng : Homeomorph β γ\n⊢ Eq (TopologicalSpace.Compacts.equiv (f.trans g)) ((TopologicalSpace.Compacts.equiv f).trans (TopologicalSpace.Compacts.equiv g))","decl":"@[simp]\ntheorem equiv_trans (f : α ≃ₜ β) (g : β ≃ₜ γ) :\n    Compacts.equiv (f.trans g) = (Compacts.equiv f).trans (Compacts.equiv g) :=\n  -- Porting note: can no longer write `map_comp _ _ _ _` and unify\n  Equiv.ext <| map_comp g f g.continuous f.continuous\n\n"}
{"name":"TopologicalSpace.Compacts.equiv_symm","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : Homeomorph α β\n⊢ Eq (TopologicalSpace.Compacts.equiv f.symm) (TopologicalSpace.Compacts.equiv f).symm","decl":"@[simp]\ntheorem equiv_symm (f : α ≃ₜ β) : Compacts.equiv f.symm = (Compacts.equiv f).symm :=\n  rfl\n\n"}
{"name":"TopologicalSpace.Compacts.coe_equiv_apply_eq_preimage","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : Homeomorph α β\nK : TopologicalSpace.Compacts α\n⊢ Eq (↑((TopologicalSpace.Compacts.equiv f) K)) (Set.preimage ⇑f.symm ↑K)","decl":"/-- The image of a compact set under a homeomorphism can also be expressed as a preimage. -/\ntheorem coe_equiv_apply_eq_preimage (f : α ≃ₜ β) (K : Compacts α) :\n    (Compacts.equiv f K : Set β) = f.symm ⁻¹' (K : Set α) :=\n  f.toEquiv.image_eq_preimage K\n\n"}
{"name":"TopologicalSpace.Compacts.coe_prod","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nK : TopologicalSpace.Compacts α\nL : TopologicalSpace.Compacts β\n⊢ Eq (↑(K.prod L)) (SProd.sprod ↑K ↑L)","decl":"@[simp]\ntheorem coe_prod (K : Compacts α) (L : Compacts β) :\n    (K.prod L : Set (α × β)) = (K : Set α) ×ˢ (L : Set β) :=\n  rfl\n\n-- todo: add `pi`\n\n"}
{"name":"TopologicalSpace.NonemptyCompacts.nonempty'","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_4\ninst✝ : TopologicalSpace α\nself : TopologicalSpace.NonemptyCompacts α\n⊢ self.carrier.Nonempty","decl":"/-- The type of nonempty compact sets of a topological space. -/\nstructure NonemptyCompacts (α : Type*) [TopologicalSpace α] extends Compacts α where\n  nonempty' : carrier.Nonempty\n\n"}
{"name":"TopologicalSpace.NonemptyCompacts.mk.inj","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_4\ninst✝ : TopologicalSpace α\ntoCompacts✝ : TopologicalSpace.Compacts α\nnonempty'✝ : toCompacts✝.carrier.Nonempty\ntoCompacts : TopologicalSpace.Compacts α\nnonempty' : toCompacts.carrier.Nonempty\nx✝ : Eq { toCompacts := toCompacts✝, nonempty' := nonempty'✝ } { toCompacts := toCompacts, nonempty' := nonempty' }\n⊢ Eq toCompacts✝ toCompacts","decl":"/-- The type of nonempty compact sets of a topological space. -/\nstructure NonemptyCompacts (α : Type*) [TopologicalSpace α] extends Compacts α where\n  nonempty' : carrier.Nonempty\n\n"}
{"name":"TopologicalSpace.NonemptyCompacts.mk.sizeOf_spec","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_4\ninst✝¹ : TopologicalSpace α\ninst✝ : SizeOf α\ntoCompacts : TopologicalSpace.Compacts α\nnonempty' : toCompacts.carrier.Nonempty\n⊢ Eq (SizeOf.sizeOf { toCompacts := toCompacts, nonempty' := nonempty' }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toCompacts)) (SizeOf.sizeOf nonempty'))","decl":"/-- The type of nonempty compact sets of a topological space. -/\nstructure NonemptyCompacts (α : Type*) [TopologicalSpace α] extends Compacts α where\n  nonempty' : carrier.Nonempty\n\n"}
{"name":"TopologicalSpace.NonemptyCompacts.mk.injEq","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_4\ninst✝ : TopologicalSpace α\ntoCompacts✝ : TopologicalSpace.Compacts α\nnonempty'✝ : toCompacts✝.carrier.Nonempty\ntoCompacts : TopologicalSpace.Compacts α\nnonempty' : toCompacts.carrier.Nonempty\n⊢ Eq (Eq { toCompacts := toCompacts✝, nonempty' := nonempty'✝ } { toCompacts := toCompacts, nonempty' := nonempty' }) (Eq toCompacts✝ toCompacts)","decl":"/-- The type of nonempty compact sets of a topological space. -/\nstructure NonemptyCompacts (α : Type*) [TopologicalSpace α] extends Compacts α where\n  nonempty' : carrier.Nonempty\n\n"}
{"name":"TopologicalSpace.NonemptyCompacts.isCompact","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.NonemptyCompacts α\n⊢ IsCompact ↑s","decl":"protected theorem isCompact (s : NonemptyCompacts α) : IsCompact (s : Set α) :=\n  s.isCompact'\n\n"}
{"name":"TopologicalSpace.NonemptyCompacts.nonempty","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.NonemptyCompacts α\n⊢ (↑s).Nonempty","decl":"protected theorem nonempty (s : NonemptyCompacts α) : (s : Set α).Nonempty :=\n  s.nonempty'\n\n"}
{"name":"TopologicalSpace.NonemptyCompacts.ext","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.NonemptyCompacts α\nh : Eq ↑s ↑t\n⊢ Eq s t","decl":"@[ext]\nprotected theorem ext {s t : NonemptyCompacts α} (h : (s : Set α) = t) : s = t :=\n  SetLike.ext' h\n\n"}
{"name":"TopologicalSpace.NonemptyCompacts.ext_iff","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.NonemptyCompacts α\n⊢ Iff (Eq s t) (Eq ↑s ↑t)","decl":"@[ext]\nprotected theorem ext {s t : NonemptyCompacts α} (h : (s : Set α) = t) : s = t :=\n  SetLike.ext' h\n\n"}
{"name":"TopologicalSpace.NonemptyCompacts.coe_mk","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.Compacts α\nh : s.carrier.Nonempty\n⊢ Eq ↑{ toCompacts := s, nonempty' := h } ↑s","decl":"@[simp]\ntheorem coe_mk (s : Compacts α) (h) : (mk s h : Set α) = s :=\n  rfl\n\n"}
{"name":"TopologicalSpace.NonemptyCompacts.carrier_eq_coe","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.NonemptyCompacts α\n⊢ Eq s.carrier ↑s","decl":"theorem carrier_eq_coe (s : NonemptyCompacts α) : s.carrier = s :=\n  rfl\n\n"}
{"name":"TopologicalSpace.NonemptyCompacts.coe_toCompacts","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.NonemptyCompacts α\n⊢ Eq ↑s.toCompacts ↑s","decl":"@[simp]\ntheorem coe_toCompacts (s : NonemptyCompacts α) : (s.toCompacts : Set α) = s := rfl\n\n"}
{"name":"TopologicalSpace.NonemptyCompacts.coe_sup","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.NonemptyCompacts α\n⊢ Eq (↑(Max.max s t)) (Union.union ↑s ↑t)","decl":"@[simp]\ntheorem coe_sup (s t : NonemptyCompacts α) : (↑(s ⊔ t) : Set α) = ↑s ∪ ↑t :=\n  rfl\n\n"}
{"name":"TopologicalSpace.NonemptyCompacts.coe_top","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : CompactSpace α\ninst✝ : Nonempty α\n⊢ Eq (↑Top.top) Set.univ","decl":"@[simp]\ntheorem coe_top [CompactSpace α] [Nonempty α] : (↑(⊤ : NonemptyCompacts α) : Set α) = univ :=\n  rfl\n\n"}
{"name":"TopologicalSpace.NonemptyCompacts.toCompactSpace","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.NonemptyCompacts α\n⊢ CompactSpace (Subtype fun x => Membership.mem s x)","decl":"instance toCompactSpace {s : NonemptyCompacts α} : CompactSpace s :=\n  isCompact_iff_compactSpace.1 s.isCompact\n\n"}
{"name":"TopologicalSpace.NonemptyCompacts.toNonempty","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.NonemptyCompacts α\n⊢ Nonempty (Subtype fun x => Membership.mem s x)","decl":"instance toNonempty {s : NonemptyCompacts α} : Nonempty s :=\n  s.nonempty.to_subtype\n\n"}
{"name":"TopologicalSpace.NonemptyCompacts.coe_prod","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nK : TopologicalSpace.NonemptyCompacts α\nL : TopologicalSpace.NonemptyCompacts β\n⊢ Eq (↑(K.prod L)) (SProd.sprod ↑K ↑L)","decl":"@[simp]\ntheorem coe_prod (K : NonemptyCompacts α) (L : NonemptyCompacts β) :\n    (K.prod L : Set (α × β)) = (K : Set α) ×ˢ (L : Set β) :=\n  rfl\n\n"}
{"name":"TopologicalSpace.PositiveCompacts.mk.inj","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_4\ninst✝ : TopologicalSpace α\ntoCompacts✝ : TopologicalSpace.Compacts α\ninterior_nonempty'✝ : (interior toCompacts✝.carrier).Nonempty\ntoCompacts : TopologicalSpace.Compacts α\ninterior_nonempty' : (interior toCompacts.carrier).Nonempty\nx✝ : Eq { toCompacts := toCompacts✝, interior_nonempty' := interior_nonempty'✝ } { toCompacts := toCompacts, interior_nonempty' := interior_nonempty' }\n⊢ Eq toCompacts✝ toCompacts","decl":"/-- The type of compact sets with nonempty interior of a topological space.\nSee also `TopologicalSpace.Compacts` and `TopologicalSpace.NonemptyCompacts`. -/\nstructure PositiveCompacts (α : Type*) [TopologicalSpace α] extends Compacts α where\n  interior_nonempty' : (interior carrier).Nonempty\n\n"}
{"name":"TopologicalSpace.PositiveCompacts.interior_nonempty'","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_4\ninst✝ : TopologicalSpace α\nself : TopologicalSpace.PositiveCompacts α\n⊢ (interior self.carrier).Nonempty","decl":"/-- The type of compact sets with nonempty interior of a topological space.\nSee also `TopologicalSpace.Compacts` and `TopologicalSpace.NonemptyCompacts`. -/\nstructure PositiveCompacts (α : Type*) [TopologicalSpace α] extends Compacts α where\n  interior_nonempty' : (interior carrier).Nonempty\n\n"}
{"name":"TopologicalSpace.PositiveCompacts.mk.injEq","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_4\ninst✝ : TopologicalSpace α\ntoCompacts✝ : TopologicalSpace.Compacts α\ninterior_nonempty'✝ : (interior toCompacts✝.carrier).Nonempty\ntoCompacts : TopologicalSpace.Compacts α\ninterior_nonempty' : (interior toCompacts.carrier).Nonempty\n⊢ Eq (Eq { toCompacts := toCompacts✝, interior_nonempty' := interior_nonempty'✝ } { toCompacts := toCompacts, interior_nonempty' := interior_nonempty' }) (Eq toCompacts✝ toCompacts)","decl":"/-- The type of compact sets with nonempty interior of a topological space.\nSee also `TopologicalSpace.Compacts` and `TopologicalSpace.NonemptyCompacts`. -/\nstructure PositiveCompacts (α : Type*) [TopologicalSpace α] extends Compacts α where\n  interior_nonempty' : (interior carrier).Nonempty\n\n"}
{"name":"TopologicalSpace.PositiveCompacts.mk.sizeOf_spec","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_4\ninst✝¹ : TopologicalSpace α\ninst✝ : SizeOf α\ntoCompacts : TopologicalSpace.Compacts α\ninterior_nonempty' : (interior toCompacts.carrier).Nonempty\n⊢ Eq (SizeOf.sizeOf { toCompacts := toCompacts, interior_nonempty' := interior_nonempty' }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toCompacts)) (SizeOf.sizeOf interior_nonempty'))","decl":"/-- The type of compact sets with nonempty interior of a topological space.\nSee also `TopologicalSpace.Compacts` and `TopologicalSpace.NonemptyCompacts`. -/\nstructure PositiveCompacts (α : Type*) [TopologicalSpace α] extends Compacts α where\n  interior_nonempty' : (interior carrier).Nonempty\n\n"}
{"name":"TopologicalSpace.PositiveCompacts.isCompact","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.PositiveCompacts α\n⊢ IsCompact ↑s","decl":"protected theorem isCompact (s : PositiveCompacts α) : IsCompact (s : Set α) :=\n  s.isCompact'\n\n"}
{"name":"TopologicalSpace.PositiveCompacts.interior_nonempty","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.PositiveCompacts α\n⊢ (interior ↑s).Nonempty","decl":"theorem interior_nonempty (s : PositiveCompacts α) : (interior (s : Set α)).Nonempty :=\n  s.interior_nonempty'\n\n"}
{"name":"TopologicalSpace.PositiveCompacts.nonempty","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.PositiveCompacts α\n⊢ (↑s).Nonempty","decl":"protected theorem nonempty (s : PositiveCompacts α) : (s : Set α).Nonempty :=\n  s.interior_nonempty.mono interior_subset\n\n"}
{"name":"TopologicalSpace.PositiveCompacts.ext","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.PositiveCompacts α\nh : Eq ↑s ↑t\n⊢ Eq s t","decl":"@[ext]\nprotected theorem ext {s t : PositiveCompacts α} (h : (s : Set α) = t) : s = t :=\n  SetLike.ext' h\n\n"}
{"name":"TopologicalSpace.PositiveCompacts.ext_iff","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.PositiveCompacts α\n⊢ Iff (Eq s t) (Eq ↑s ↑t)","decl":"@[ext]\nprotected theorem ext {s t : PositiveCompacts α} (h : (s : Set α) = t) : s = t :=\n  SetLike.ext' h\n\n"}
{"name":"TopologicalSpace.PositiveCompacts.coe_mk","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.Compacts α\nh : (interior s.carrier).Nonempty\n⊢ Eq ↑{ toCompacts := s, interior_nonempty' := h } ↑s","decl":"@[simp]\ntheorem coe_mk (s : Compacts α) (h) : (mk s h : Set α) = s :=\n  rfl\n\n"}
{"name":"TopologicalSpace.PositiveCompacts.carrier_eq_coe","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.PositiveCompacts α\n⊢ Eq s.carrier ↑s","decl":"theorem carrier_eq_coe (s : PositiveCompacts α) : s.carrier = s :=\n  rfl\n\n"}
{"name":"TopologicalSpace.PositiveCompacts.coe_toCompacts","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.PositiveCompacts α\n⊢ Eq ↑s.toCompacts ↑s","decl":"@[simp]\ntheorem coe_toCompacts (s : PositiveCompacts α) : (s.toCompacts : Set α) = s :=\n  rfl\n\n"}
{"name":"TopologicalSpace.PositiveCompacts.coe_sup","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.PositiveCompacts α\n⊢ Eq (↑(Max.max s t)) (Union.union ↑s ↑t)","decl":"@[simp]\ntheorem coe_sup (s t : PositiveCompacts α) : (↑(s ⊔ t) : Set α) = ↑s ∪ ↑t :=\n  rfl\n\n"}
{"name":"TopologicalSpace.PositiveCompacts.coe_top","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : CompactSpace α\ninst✝ : Nonempty α\n⊢ Eq (↑Top.top) Set.univ","decl":"@[simp]\ntheorem coe_top [CompactSpace α] [Nonempty α] : (↑(⊤ : PositiveCompacts α) : Set α) = univ :=\n  rfl\n\n"}
{"name":"TopologicalSpace.PositiveCompacts.coe_map","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : α → β\nhf : Continuous f\nhf' : IsOpenMap f\ns : TopologicalSpace.PositiveCompacts α\n⊢ Eq (↑(TopologicalSpace.PositiveCompacts.map f hf hf' s)) (Set.image f ↑s)","decl":"@[simp, norm_cast]\ntheorem coe_map {f : α → β} (hf : Continuous f) (hf' : IsOpenMap f) (s : PositiveCompacts α) :\n    (s.map f hf hf' : Set β) = f '' s :=\n  rfl\n\n"}
{"name":"TopologicalSpace.PositiveCompacts.map_id","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nK : TopologicalSpace.PositiveCompacts α\n⊢ Eq (TopologicalSpace.PositiveCompacts.map id ⋯ ⋯ K) K","decl":"@[simp]\ntheorem map_id (K : PositiveCompacts α) : K.map id continuous_id IsOpenMap.id = K :=\n  PositiveCompacts.ext <| Set.image_id _\n\n"}
{"name":"TopologicalSpace.PositiveCompacts.map_comp","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\nf : β → γ\ng : α → β\nhf : Continuous f\nhg : Continuous g\nhf' : IsOpenMap f\nhg' : IsOpenMap g\nK : TopologicalSpace.PositiveCompacts α\n⊢ Eq (TopologicalSpace.PositiveCompacts.map (Function.comp f g) ⋯ ⋯ K) (TopologicalSpace.PositiveCompacts.map f hf hf' (TopologicalSpace.PositiveCompacts.map g hg hg' K))","decl":"theorem map_comp (f : β → γ) (g : α → β) (hf : Continuous f) (hg : Continuous g) (hf' : IsOpenMap f)\n    (hg' : IsOpenMap g) (K : PositiveCompacts α) :\n    K.map (f ∘ g) (hf.comp hg) (hf'.comp hg') = (K.map g hg hg').map f hf hf' :=\n  PositiveCompacts.ext <| Set.image_comp _ _ _\n\n"}
{"name":"exists_positiveCompacts_subset","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : LocallyCompactSpace α\nU : Set α\nho : IsOpen U\nhn : U.Nonempty\n⊢ Exists fun K => HasSubset.Subset (↑K) U","decl":"theorem _root_.exists_positiveCompacts_subset [LocallyCompactSpace α] {U : Set α} (ho : IsOpen U)\n    (hn : U.Nonempty) : ∃ K : PositiveCompacts α, ↑K ⊆ U :=\n  let ⟨x, hx⟩ := hn\n  let ⟨K, hKc, hxK, hKU⟩ := exists_compact_subset ho hx\n  ⟨⟨⟨K, hKc⟩, ⟨x, hxK⟩⟩, hKU⟩\n\n"}
{"name":"IsOpen.exists_positiveCompacts_closure_subset","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : R1Space α\ninst✝ : LocallyCompactSpace α\nU : Set α\nho : IsOpen U\nhn : U.Nonempty\n⊢ Exists fun K => HasSubset.Subset (closure ↑K) U","decl":"theorem _root_.IsOpen.exists_positiveCompacts_closure_subset [R1Space α] [LocallyCompactSpace α]\n    {U : Set α} (ho : IsOpen U) (hn : U.Nonempty) : ∃ K : PositiveCompacts α, closure ↑K ⊆ U :=\n  let ⟨K, hKU⟩ := exists_positiveCompacts_subset ho hn\n  ⟨K, K.isCompact.closure_subset_of_isOpen ho hKU⟩\n\n"}
{"name":"TopologicalSpace.PositiveCompacts.nonempty'","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : WeaklyLocallyCompactSpace α\ninst✝ : Nonempty α\n⊢ Nonempty (TopologicalSpace.PositiveCompacts α)","decl":"/-- In a nonempty locally compact space, there exists a compact set with nonempty interior. -/\ninstance nonempty' [WeaklyLocallyCompactSpace α] [Nonempty α] : Nonempty (PositiveCompacts α) := by\n  inhabit α\n  rcases exists_compact_mem_nhds (default : α) with ⟨K, hKc, hK⟩\n  exact ⟨⟨K, hKc⟩, _, mem_interior_iff_mem_nhds.2 hK⟩\n\n"}
{"name":"TopologicalSpace.PositiveCompacts.coe_prod","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nK : TopologicalSpace.PositiveCompacts α\nL : TopologicalSpace.PositiveCompacts β\n⊢ Eq (↑(K.prod L)) (SProd.sprod ↑K ↑L)","decl":"@[simp]\ntheorem coe_prod (K : PositiveCompacts α) (L : PositiveCompacts β) :\n    (K.prod L : Set (α × β)) = (K : Set α) ×ˢ (L : Set β) :=\n  rfl\n\n"}
{"name":"TopologicalSpace.CompactOpens.mk.injEq","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_4\ninst✝ : TopologicalSpace α\ntoCompacts✝ : TopologicalSpace.Compacts α\nisOpen'✝ : IsOpen toCompacts✝.carrier\ntoCompacts : TopologicalSpace.Compacts α\nisOpen' : IsOpen toCompacts.carrier\n⊢ Eq (Eq { toCompacts := toCompacts✝, isOpen' := isOpen'✝ } { toCompacts := toCompacts, isOpen' := isOpen' }) (Eq toCompacts✝ toCompacts)","decl":"/-- The type of compact open sets of a topological space. This is useful in non Hausdorff contexts,\nin particular spectral spaces. -/\nstructure CompactOpens (α : Type*) [TopologicalSpace α] extends Compacts α where\n  isOpen' : IsOpen carrier\n\n"}
{"name":"TopologicalSpace.CompactOpens.isOpen'","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_4\ninst✝ : TopologicalSpace α\nself : TopologicalSpace.CompactOpens α\n⊢ IsOpen self.carrier","decl":"/-- The type of compact open sets of a topological space. This is useful in non Hausdorff contexts,\nin particular spectral spaces. -/\nstructure CompactOpens (α : Type*) [TopologicalSpace α] extends Compacts α where\n  isOpen' : IsOpen carrier\n\n"}
{"name":"TopologicalSpace.CompactOpens.mk.inj","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_4\ninst✝ : TopologicalSpace α\ntoCompacts✝ : TopologicalSpace.Compacts α\nisOpen'✝ : IsOpen toCompacts✝.carrier\ntoCompacts : TopologicalSpace.Compacts α\nisOpen' : IsOpen toCompacts.carrier\nx✝ : Eq { toCompacts := toCompacts✝, isOpen' := isOpen'✝ } { toCompacts := toCompacts, isOpen' := isOpen' }\n⊢ Eq toCompacts✝ toCompacts","decl":"/-- The type of compact open sets of a topological space. This is useful in non Hausdorff contexts,\nin particular spectral spaces. -/\nstructure CompactOpens (α : Type*) [TopologicalSpace α] extends Compacts α where\n  isOpen' : IsOpen carrier\n\n"}
{"name":"TopologicalSpace.CompactOpens.mk.sizeOf_spec","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_4\ninst✝¹ : TopologicalSpace α\ninst✝ : SizeOf α\ntoCompacts : TopologicalSpace.Compacts α\nisOpen' : IsOpen toCompacts.carrier\n⊢ Eq (SizeOf.sizeOf { toCompacts := toCompacts, isOpen' := isOpen' }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toCompacts)) (SizeOf.sizeOf isOpen'))","decl":"/-- The type of compact open sets of a topological space. This is useful in non Hausdorff contexts,\nin particular spectral spaces. -/\nstructure CompactOpens (α : Type*) [TopologicalSpace α] extends Compacts α where\n  isOpen' : IsOpen carrier\n\n"}
{"name":"TopologicalSpace.CompactOpens.isCompact","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.CompactOpens α\n⊢ IsCompact ↑s","decl":"protected theorem isCompact (s : CompactOpens α) : IsCompact (s : Set α) :=\n  s.isCompact'\n\n"}
{"name":"TopologicalSpace.CompactOpens.isOpen","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.CompactOpens α\n⊢ IsOpen ↑s","decl":"protected theorem isOpen (s : CompactOpens α) : IsOpen (s : Set α) :=\n  s.isOpen'\n\n"}
{"name":"TopologicalSpace.CompactOpens.coe_toOpens","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.CompactOpens α\n⊢ Eq ↑s.toOpens ↑s","decl":"/-- Reinterpret a compact open as an open. -/\n@[simps]\ndef toOpens (s : CompactOpens α) : Opens α := ⟨s, s.isOpen⟩\n\n"}
{"name":"TopologicalSpace.CompactOpens.coe_toClopens","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : T2Space α\ns : TopologicalSpace.CompactOpens α\n⊢ Eq ↑s.toClopens ↑s","decl":"/-- Reinterpret a compact open as a clopen. -/\n@[simps]\ndef toClopens [T2Space α] (s : CompactOpens α) : Clopens α :=\n  ⟨s, s.isCompact.isClosed, s.isOpen⟩\n\n"}
{"name":"TopologicalSpace.CompactOpens.ext_iff","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.CompactOpens α\n⊢ Iff (Eq s t) (Eq ↑s ↑t)","decl":"@[ext]\nprotected theorem ext {s t : CompactOpens α} (h : (s : Set α) = t) : s = t :=\n  SetLike.ext' h\n\n"}
{"name":"TopologicalSpace.CompactOpens.ext","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.CompactOpens α\nh : Eq ↑s ↑t\n⊢ Eq s t","decl":"@[ext]\nprotected theorem ext {s t : CompactOpens α} (h : (s : Set α) = t) : s = t :=\n  SetLike.ext' h\n\n"}
{"name":"TopologicalSpace.CompactOpens.coe_mk","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.Compacts α\nh : IsOpen s.carrier\n⊢ Eq ↑{ toCompacts := s, isOpen' := h } ↑s","decl":"@[simp]\ntheorem coe_mk (s : Compacts α) (h) : (mk s h : Set α) = s :=\n  rfl\n\n"}
{"name":"TopologicalSpace.CompactOpens.coe_sup","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.CompactOpens α\n⊢ Eq (↑(Max.max s t)) (Union.union ↑s ↑t)","decl":"@[simp, norm_cast] lemma coe_sup (s t : CompactOpens α) : ↑(s ⊔ t) = (s ∪ t : Set α) := rfl\n"}
{"name":"TopologicalSpace.CompactOpens.coe_bot","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\n⊢ Eq (↑Bot.bot) EmptyCollection.emptyCollection","decl":"@[simp, norm_cast] lemma coe_bot : ↑(⊥ : CompactOpens α) = (∅ : Set α) := rfl\n\n"}
{"name":"TopologicalSpace.CompactOpens.coe_inf","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : QuasiSeparatedSpace α\ns t : TopologicalSpace.CompactOpens α\n⊢ Eq (↑(Min.min s t)) (Inter.inter ↑s ↑t)","decl":"@[simp, norm_cast] lemma coe_inf (s t : CompactOpens α) : ↑(s ⊓ t) = (s ∩ t : Set α) := rfl\n\n"}
{"name":"TopologicalSpace.CompactOpens.coe_sdiff","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : T2Space α\ns t : TopologicalSpace.CompactOpens α\n⊢ Eq (↑(SDiff.sdiff s t)) (SDiff.sdiff ↑s ↑t)","decl":"@[simp, norm_cast] lemma coe_sdiff (s t : CompactOpens α) : ↑(s \\ t) = (s \\ t : Set α) := rfl\n\n"}
{"name":"TopologicalSpace.CompactOpens.coe_top","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : CompactSpace α\n⊢ Eq (↑Top.top) Set.univ","decl":"@[simp, norm_cast] lemma coe_top : ↑(⊤ : CompactOpens α) = (univ : Set α) := rfl\n\n"}
{"name":"TopologicalSpace.CompactOpens.coe_compl","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : CompactSpace α\ninst✝ : T2Space α\ns : TopologicalSpace.CompactOpens α\n⊢ Eq (↑(HasCompl.compl s)) (HasCompl.compl ↑s)","decl":"@[simp, norm_cast] lemma coe_compl (s : CompactOpens α) : ↑sᶜ = (sᶜ : Set α) := rfl\n"}
{"name":"TopologicalSpace.CompactOpens.coe_himp","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : CompactSpace α\ninst✝ : T2Space α\ns t : TopologicalSpace.CompactOpens α\n⊢ Eq (↑(HImp.himp s t)) (HImp.himp ↑s ↑t)","decl":"@[simp, norm_cast] lemma coe_himp (s t : CompactOpens α) : ↑(s ⇨ t) = (s ⇨ t : Set α) := rfl\n\n"}
{"name":"TopologicalSpace.CompactOpens.map_toCompacts","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : α → β\nhf : Continuous f\nhf' : IsOpenMap f\ns : TopologicalSpace.CompactOpens α\n⊢ Eq (TopologicalSpace.CompactOpens.map f hf hf' s).toCompacts (TopologicalSpace.Compacts.map f hf s.toCompacts)","decl":"/-- The image of a compact open under a continuous open map. -/\n@[simps toCompacts]\ndef map (f : α → β) (hf : Continuous f) (hf' : IsOpenMap f) (s : CompactOpens α) : CompactOpens β :=\n  ⟨s.toCompacts.map f hf, hf' _ s.isOpen⟩\n\n"}
{"name":"TopologicalSpace.CompactOpens.coe_map","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : α → β\nhf : Continuous f\nhf' : IsOpenMap f\ns : TopologicalSpace.CompactOpens α\n⊢ Eq (↑(TopologicalSpace.CompactOpens.map f hf hf' s)) (Set.image f ↑s)","decl":"@[simp, norm_cast]\ntheorem coe_map {f : α → β} (hf : Continuous f) (hf' : IsOpenMap f) (s : CompactOpens α) :\n    (s.map f hf hf' : Set β) = f '' s :=\n  rfl\n\n"}
{"name":"TopologicalSpace.CompactOpens.map_id","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nK : TopologicalSpace.CompactOpens α\n⊢ Eq (TopologicalSpace.CompactOpens.map id ⋯ ⋯ K) K","decl":"@[simp]\ntheorem map_id (K : CompactOpens α) : K.map id continuous_id IsOpenMap.id = K :=\n  CompactOpens.ext <| Set.image_id _\n\n"}
{"name":"TopologicalSpace.CompactOpens.map_comp","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\nf : β → γ\ng : α → β\nhf : Continuous f\nhg : Continuous g\nhf' : IsOpenMap f\nhg' : IsOpenMap g\nK : TopologicalSpace.CompactOpens α\n⊢ Eq (TopologicalSpace.CompactOpens.map (Function.comp f g) ⋯ ⋯ K) (TopologicalSpace.CompactOpens.map f hf hf' (TopologicalSpace.CompactOpens.map g hg hg' K))","decl":"theorem map_comp (f : β → γ) (g : α → β) (hf : Continuous f) (hg : Continuous g) (hf' : IsOpenMap f)\n    (hg' : IsOpenMap g) (K : CompactOpens α) :\n    K.map (f ∘ g) (hf.comp hg) (hf'.comp hg') = (K.map g hg hg').map f hf hf' :=\n  CompactOpens.ext <| Set.image_comp _ _ _\n\n"}
{"name":"TopologicalSpace.CompactOpens.coe_prod","module":"Mathlib.Topology.Sets.Compacts","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nK : TopologicalSpace.CompactOpens α\nL : TopologicalSpace.CompactOpens β\n⊢ Eq (↑(K.prod L)) (SProd.sprod ↑K ↑L)","decl":"@[simp]\ntheorem coe_prod (K : CompactOpens α) (L : CompactOpens β) :\n    (K.prod L : Set (α × β)) = (K : Set α) ×ˢ (L : Set β) :=\n  rfl\n\n"}
