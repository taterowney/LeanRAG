{"name":"IsLocalRing.quotient_span_eq_top_iff_span_eq_top","module":"Mathlib.RingTheory.LocalRing.Quotient","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝⁴ : CommRing R\ninst✝³ : CommRing S\ninst✝² : Algebra R S\ninst✝¹ : IsLocalRing R\ninst✝ : Module.Finite R S\ns : Set S\n⊢ Iff (Eq (Submodule.span (HasQuotient.Quotient R (IsLocalRing.maximalIdeal R)) (Set.image (⇑(Ideal.Quotient.mk (Ideal.map (algebraMap R S) (IsLocalRing.maximalIdeal R)))) s)) Top.top) (Eq (Submodule.span R s) Top.top)","decl":"theorem quotient_span_eq_top_iff_span_eq_top (s : Set S) :\n    span (R ⧸ p) ((Ideal.Quotient.mk (I := pS)) '' s) = ⊤ ↔ span R s = ⊤ := by\n  have H : (span (R ⧸ p) ((Ideal.Quotient.mk (I := pS)) '' s)).restrictScalars R =\n      (span R s).map (IsScalarTower.toAlgHom R S (S ⧸ pS)) := by\n    rw [map_span, ← restrictScalars_span R (R ⧸ p) Ideal.Quotient.mk_surjective,\n      IsScalarTower.coe_toAlgHom', Ideal.Quotient.algebraMap_eq]\n  constructor\n  · intro hs\n    rw [← top_le_iff]\n    apply le_of_le_smul_of_le_jacobson_bot\n    · exact Module.finite_def.mp ‹_›\n    · exact (jacobson_eq_maximalIdeal ⊥ bot_ne_top).ge\n    · rw [Ideal.smul_top_eq_map]\n      rintro x -\n      have : LinearMap.ker (IsScalarTower.toAlgHom R S (S ⧸ pS)) =\n          restrictScalars R pS := by\n        ext; simp [Ideal.Quotient.eq_zero_iff_mem]\n      rw [← this, ← comap_map_eq, mem_comap, ← H, hs, restrictScalars_top]\n      exact mem_top\n  · intro hs\n    rwa [hs, Submodule.map_top, LinearMap.range_eq_top.mpr,\n      restrictScalars_eq_top_iff] at H\n    rw [IsScalarTower.coe_toAlgHom', Ideal.Quotient.algebraMap_eq]\n    exact Ideal.Quotient.mk_surjective\n\n"}
{"name":"IsLocalRing.finrank_quotient_map","module":"Mathlib.RingTheory.LocalRing.Quotient","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing S\ninst✝³ : Algebra R S\ninst✝² : IsLocalRing R\ninst✝¹ : Module.Finite R S\ninst✝ : Module.Free R S\n⊢ Eq (Module.finrank (HasQuotient.Quotient R (IsLocalRing.maximalIdeal R)) (HasQuotient.Quotient S (Ideal.map (algebraMap R S) (IsLocalRing.maximalIdeal R)))) (Module.finrank R S)","decl":"theorem finrank_quotient_map :\n    finrank (R ⧸ p) (S ⧸ pS) = finrank R S := by\n  classical\n  have : Module.Finite R (S ⧸ pS) := Module.Finite.of_surjective\n    (IsScalarTower.toAlgHom R S (S ⧸ pS)).toLinearMap (Ideal.Quotient.mk_surjective (I := pS))\n  have : Module.Finite (R ⧸ p) (S ⧸ pS) := Module.Finite.of_restrictScalars_finite R _ _\n  apply le_antisymm\n  · let b := Module.Free.chooseBasis R S\n    conv_rhs => rw [finrank_eq_card_chooseBasisIndex]\n    apply finrank_le_of_span_eq_top\n    rw [Set.range_comp]\n    apply (quotient_span_eq_top_iff_span_eq_top _).mpr b.span_eq\n  · let b := Module.Free.chooseBasis (R ⧸ p) (S ⧸ pS)\n    choose b' hb' using fun i ↦ Ideal.Quotient.mk_surjective (b i)\n    conv_rhs => rw [finrank_eq_card_chooseBasisIndex]\n    refine finrank_le_of_span_eq_top (v := b') ?_\n    apply (quotient_span_eq_top_iff_span_eq_top _).mp\n    rw [← Set.range_comp, show Ideal.Quotient.mk pS ∘ b' = ⇑b from funext hb']\n    exact b.span_eq\n\n"}
{"name":"IsLocalRing.basisQuotient_apply","module":"Mathlib.RingTheory.LocalRing.Quotient","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝⁶ : CommRing R\ninst✝⁵ : CommRing S\ninst✝⁴ : Algebra R S\ninst✝³ : IsLocalRing R\ninst✝² : Module.Finite R S\ninst✝¹ : Module.Free R S\nι : Type u_3\ninst✝ : Fintype ι\nb : Basis ι R S\ni : ι\n⊢ Eq ((IsLocalRing.basisQuotient b) i) ((Ideal.Quotient.mk (Ideal.map (algebraMap R S) (IsLocalRing.maximalIdeal R))) (b i))","decl":"lemma basisQuotient_apply [Fintype ι] (b : Basis ι R S) (i) :\n    (basisQuotient b) i = Ideal.Quotient.mk pS (b i) := by\n  delta basisQuotient\n  rw [coe_basisOfTopLeSpanOfCardEqFinrank, Function.comp_apply]\n\n"}
{"name":"IsLocalRing.basisQuotient_repr","module":"Mathlib.RingTheory.LocalRing.Quotient","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝⁶ : CommRing R\ninst✝⁵ : CommRing S\ninst✝⁴ : Algebra R S\ninst✝³ : IsLocalRing R\ninst✝² : Module.Finite R S\ninst✝¹ : Module.Free R S\nι : Type u_4\ninst✝ : Fintype ι\nb : Basis ι R S\nx : S\ni : ι\n⊢ Eq (((IsLocalRing.basisQuotient b).repr ((Ideal.Quotient.mk (Ideal.map (algebraMap R S) (IsLocalRing.maximalIdeal R))) x)) i) ((Ideal.Quotient.mk (IsLocalRing.maximalIdeal R)) ((b.repr x) i))","decl":"lemma basisQuotient_repr {ι} [Fintype ι] (b : Basis ι R S) (x) (i) :\n    (basisQuotient b).repr (Ideal.Quotient.mk pS x) i =\n    Ideal.Quotient.mk p (b.repr x i) := by\n  refine congr_fun (g := Ideal.Quotient.mk p ∘ b.repr x) ?_ i\n  apply (Finsupp.linearEquivFunOnFinite (R ⧸ p) _ _).symm.injective\n  apply (basisQuotient b).repr.symm.injective\n  simp only [Finsupp.linearEquivFunOnFinite_symm_coe, LinearEquiv.symm_apply_apply,\n    Basis.repr_symm_apply]\n  rw [Finsupp.linearCombination_eq_fintype_linearCombination_apply _ (R ⧸ p),\n    Fintype.linearCombination_apply]\n  simp only [Function.comp_apply, basisQuotient_apply,\n    Ideal.Quotient.mk_smul_mk_quotient_map_quotient, ← Algebra.smul_def]\n  rw [← map_sum, Basis.sum_repr b x]\n\n"}
{"name":"LocalRing.quotient_span_eq_top_iff_span_eq_top","module":"Mathlib.RingTheory.LocalRing.Quotient","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝⁴ : CommRing R\ninst✝³ : CommRing S\ninst✝² : Algebra R S\ninst✝¹ : IsLocalRing R\ninst✝ : Module.Finite R S\ns : Set S\n⊢ Iff (Eq (Submodule.span (HasQuotient.Quotient R (IsLocalRing.maximalIdeal R)) (Set.image (⇑(Ideal.Quotient.mk (Ideal.map (algebraMap R S) (IsLocalRing.maximalIdeal R)))) s)) Top.top) (Eq (Submodule.span R s) Top.top)","decl":"@[deprecated (since := \"2024-11-11\")]\nalias LocalRing.quotient_span_eq_top_iff_span_eq_top :=\n  IsLocalRing.quotient_span_eq_top_iff_span_eq_top\n\n"}
{"name":"LocalRing.finrank_quotient_map","module":"Mathlib.RingTheory.LocalRing.Quotient","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing S\ninst✝³ : Algebra R S\ninst✝² : IsLocalRing R\ninst✝¹ : Module.Finite R S\ninst✝ : Module.Free R S\n⊢ Eq (Module.finrank (HasQuotient.Quotient R (IsLocalRing.maximalIdeal R)) (HasQuotient.Quotient S (Ideal.map (algebraMap R S) (IsLocalRing.maximalIdeal R)))) (Module.finrank R S)","decl":"@[deprecated (since := \"2024-11-11\")]\nalias LocalRing.finrank_quotient_map := IsLocalRing.finrank_quotient_map\n\n"}
{"name":"LocalRing.basisQuotient_apply","module":"Mathlib.RingTheory.LocalRing.Quotient","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝⁶ : CommRing R\ninst✝⁵ : CommRing S\ninst✝⁴ : Algebra R S\ninst✝³ : IsLocalRing R\ninst✝² : Module.Finite R S\ninst✝¹ : Module.Free R S\nι : Type u_3\ninst✝ : Fintype ι\nb : Basis ι R S\ni : ι\n⊢ Eq ((IsLocalRing.basisQuotient b) i) ((Ideal.Quotient.mk (Ideal.map (algebraMap R S) (IsLocalRing.maximalIdeal R))) (b i))","decl":"@[deprecated (since := \"2024-11-11\")]\nalias LocalRing.basisQuotient_apply := IsLocalRing.basisQuotient_apply\n\n"}
{"name":"LocalRing.basisQuotient_repr","module":"Mathlib.RingTheory.LocalRing.Quotient","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝⁶ : CommRing R\ninst✝⁵ : CommRing S\ninst✝⁴ : Algebra R S\ninst✝³ : IsLocalRing R\ninst✝² : Module.Finite R S\ninst✝¹ : Module.Free R S\nι : Type u_4\ninst✝ : Fintype ι\nb : Basis ι R S\nx : S\ni : ι\n⊢ Eq (((IsLocalRing.basisQuotient b).repr ((Ideal.Quotient.mk (Ideal.map (algebraMap R S) (IsLocalRing.maximalIdeal R))) x)) i) ((Ideal.Quotient.mk (IsLocalRing.maximalIdeal R)) ((b.repr x) i))","decl":"@[deprecated (since := \"2024-11-11\")]\nalias LocalRing.basisQuotient_repr := IsLocalRing.basisQuotient_repr\n"}
