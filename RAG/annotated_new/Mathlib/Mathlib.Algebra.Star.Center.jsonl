{"name":"Set.star_mem_center","module":"Mathlib.Algebra.Star.Center","initialProofState":"R : Type u_1\ninst✝¹ : Mul R\ninst✝ : StarMul R\na : R\nha : Membership.mem (Set.center R) a\n⊢ Membership.mem (Set.center R) (Star.star a)","decl":"theorem Set.star_mem_center (ha : a ∈ Set.center R) : star a ∈ Set.center R where\n  comm := by simpa only [star_mul, star_star] using fun g =>\n    congr_arg star ((mem_center_iff.1 ha).comm <| star g).symm\n  left_assoc b c := calc\n    star a * (b * c) = star a * (star (star b) * star (star c)) := by rw [star_star, star_star]\n    _ = star a * star (star c * star b) := by rw [star_mul]\n    _ = star ((star c * star b) * a) := by rw [← star_mul]\n    _ = star (star c * (star b * a)) := by rw [ha.right_assoc]\n    _ = star (star b * a) * c := by rw [star_mul, star_star]\n    _ = (star a * b) * c := by rw [star_mul, star_star]\n  mid_assoc b c := calc\n    b * star a * c = star (star c * star (b * star a)) := by rw [← star_mul, star_star]\n    _ = star (star c * (a * star b)) := by rw [star_mul b, star_star]\n    _ = star ((star c * a) * star b) := by rw [ha.mid_assoc]\n    _ = b * (star a * c) := by rw [star_mul, star_star, star_mul (star c), star_star]\n  right_assoc b c := calc\n    b * c * star a = star (a * star (b * c)) := by rw [star_mul, star_star]\n    _ = star (a * (star c * star b)) := by rw [star_mul b]\n    _ = star ((a * star c) * star b) := by rw [ha.left_assoc]\n    _ = b * star (a * star c) := by rw [star_mul, star_star]\n    _ = b * (c * star a) := by rw [star_mul, star_star]\n\n"}
{"name":"Set.star_centralizer","module":"Mathlib.Algebra.Star.Center","initialProofState":"R : Type u_1\ninst✝¹ : Mul R\ninst✝ : StarMul R\ns : Set R\n⊢ Eq (Star.star s.centralizer) (Star.star s).centralizer","decl":"theorem Set.star_centralizer : star s.centralizer = (star s).centralizer := by\n  simp_rw [centralizer, ← commute_iff_eq]\n  conv_lhs => simp only [← star_preimage, preimage_setOf_eq, ← commute_star_comm]\n  conv_rhs => simp only [← image_star, forall_mem_image]\n\n"}
{"name":"Set.union_star_self_comm","module":"Mathlib.Algebra.Star.Center","initialProofState":"R : Type u_1\ninst✝¹ : Mul R\ninst✝ : StarMul R\ns : Set R\nhcomm : ∀ (x : R), Membership.mem s x → ∀ (y : R), Membership.mem s y → Eq (HMul.hMul y x) (HMul.hMul x y)\nhcomm_star : ∀ (x : R), Membership.mem s x → ∀ (y : R), Membership.mem s y → Eq (HMul.hMul y (Star.star x)) (HMul.hMul (Star.star x) y)\nx : R\na✝¹ : Membership.mem (Union.union s (Star.star s)) x\ny : R\na✝ : Membership.mem (Union.union s (Star.star s)) y\n⊢ Eq (HMul.hMul y x) (HMul.hMul x y)","decl":"theorem Set.union_star_self_comm (hcomm : ∀ x ∈ s, ∀ y ∈ s, y * x = x * y)\n    (hcomm_star : ∀ x ∈ s, ∀ y ∈ s, y * star x = star x * y) :\n    ∀ x ∈ s ∪ star s, ∀ y ∈ s ∪ star s, y * x = x * y := by\n  change s ∪ star s ⊆ (s ∪ star s).centralizer\n  simp_rw [centralizer_union, ← star_centralizer, union_subset_iff, subset_inter_iff,\n    star_subset_star, star_subset]\n  exact ⟨⟨hcomm, hcomm_star⟩, ⟨hcomm_star, hcomm⟩⟩\n\n"}
{"name":"Set.star_mem_centralizer'","module":"Mathlib.Algebra.Star.Center","initialProofState":"R : Type u_1\ninst✝¹ : Mul R\ninst✝ : StarMul R\na : R\ns : Set R\nh : ∀ (a : R), Membership.mem s a → Membership.mem s (Star.star a)\nha : Membership.mem s.centralizer a\n⊢ Membership.mem s.centralizer (Star.star a)","decl":"theorem Set.star_mem_centralizer' (h : ∀ a : R, a ∈ s → star a ∈ s) (ha : a ∈ Set.centralizer s) :\n    star a ∈ Set.centralizer s := fun y hy => by simpa using congr_arg star (ha _ (h _ hy)).symm\n\n"}
{"name":"Set.star_mem_centralizer","module":"Mathlib.Algebra.Star.Center","initialProofState":"R : Type u_1\ninst✝¹ : Mul R\ninst✝ : StarMul R\na : R\ns : Set R\nha : Membership.mem (Union.union s (Star.star s)).centralizer a\n⊢ Membership.mem (Union.union s (Star.star s)).centralizer (Star.star a)","decl":"theorem Set.star_mem_centralizer (ha : a ∈ Set.centralizer (s ∪ star s)) :\n    star a ∈ Set.centralizer (s ∪ star s) :=\n  Set.star_mem_centralizer'\n    (fun _x hx => hx.elim (fun hx => Or.inr <| Set.star_mem_star.mpr hx) Or.inl) ha\n"}
