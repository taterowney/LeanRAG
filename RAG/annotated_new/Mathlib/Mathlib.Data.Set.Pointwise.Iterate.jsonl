{"name":"smul_eq_self_of_preimage_zpow_eq_self","module":"Mathlib.Data.Set.Pointwise.Iterate","initialProofState":"G : Type u_1\ninst✝ : CommGroup G\nn : Int\ns : Set G\nhs : Eq (Set.preimage (fun x => HPow.hPow x n) s) s\ng : G\nj : Nat\nhg : Eq (HPow.hPow g (HPow.hPow n j)) 1\n⊢ Eq (HSMul.hSMul g s) s","decl":"/-- Let `n : ℤ` and `s` a subset of a commutative group `G` that is invariant under preimage for\nthe map `x ↦ x^n`. Then `s` is invariant under the pointwise action of the subgroup of elements\n`g : G` such that `g^(n^j) = 1` for some `j : ℕ`. (This subgroup is called the Prüfer subgroup when\n `G` is the `Circle` and `n` is prime.) -/\n@[to_additive\n      \"Let `n : ℤ` and `s` a subset of an additive commutative group `G` that is invariant\n      under preimage for the map `x ↦ n • x`. Then `s` is invariant under the pointwise action of\n      the additive subgroup of elements `g : G` such that `(n^j) • g = 0` for some `j : ℕ`.\n      (This additive subgroup is called the Prüfer subgroup when `G` is the `AddCircle` and `n` is\n      prime.)\"]\ntheorem smul_eq_self_of_preimage_zpow_eq_self {G : Type*} [CommGroup G] {n : ℤ} {s : Set G}\n    (hs : (fun x => x ^ n) ⁻¹' s = s) {g : G} {j : ℕ} (hg : g ^ n ^ j = 1) : g • s = s := by\n  suffices ∀ {g' : G} (_ : g' ^ n ^ j = 1), g' • s ⊆ s by\n    refine le_antisymm (this hg) ?_\n    conv_lhs => rw [← smul_inv_smul g s]\n    replace hg : g⁻¹ ^ n ^ j = 1 := by rw [inv_zpow, hg, inv_one]\n    simpa only [le_eq_subset, smul_set_subset_smul_set_iff] using this hg\n  rw [(IsFixedPt.preimage_iterate hs j : (zpowGroupHom n)^[j] ⁻¹' s = s).symm]\n  rintro g' hg' - ⟨y, hy, rfl⟩\n  change (zpowGroupHom n)^[j] (g' * y) ∈ s\n  replace hg' : (zpowGroupHom n)^[j] g' = 1 := by simpa [zpowGroupHom]\n  rwa [iterate_map_mul, hg', one_mul]\n"}
{"name":"vadd_eq_self_of_preimage_zsmul_eq_self","module":"Mathlib.Data.Set.Pointwise.Iterate","initialProofState":"G : Type u_1\ninst✝ : AddCommGroup G\nn : Int\ns : Set G\nhs : Eq (Set.preimage (fun x => HSMul.hSMul n x) s) s\ng : G\nj : Nat\nhg : Eq (HSMul.hSMul (HPow.hPow n j) g) 0\n⊢ Eq (HVAdd.hVAdd g s) s","decl":"/-- Let `n : ℤ` and `s` a subset of a commutative group `G` that is invariant under preimage for\nthe map `x ↦ x^n`. Then `s` is invariant under the pointwise action of the subgroup of elements\n`g : G` such that `g^(n^j) = 1` for some `j : ℕ`. (This subgroup is called the Prüfer subgroup when\n `G` is the `Circle` and `n` is prime.) -/\n@[to_additive\n      \"Let `n : ℤ` and `s` a subset of an additive commutative group `G` that is invariant\n      under preimage for the map `x ↦ n • x`. Then `s` is invariant under the pointwise action of\n      the additive subgroup of elements `g : G` such that `(n^j) • g = 0` for some `j : ℕ`.\n      (This additive subgroup is called the Prüfer subgroup when `G` is the `AddCircle` and `n` is\n      prime.)\"]\ntheorem smul_eq_self_of_preimage_zpow_eq_self {G : Type*} [CommGroup G] {n : ℤ} {s : Set G}\n    (hs : (fun x => x ^ n) ⁻¹' s = s) {g : G} {j : ℕ} (hg : g ^ n ^ j = 1) : g • s = s := by\n  suffices ∀ {g' : G} (_ : g' ^ n ^ j = 1), g' • s ⊆ s by\n    refine le_antisymm (this hg) ?_\n    conv_lhs => rw [← smul_inv_smul g s]\n    replace hg : g⁻¹ ^ n ^ j = 1 := by rw [inv_zpow, hg, inv_one]\n    simpa only [le_eq_subset, smul_set_subset_smul_set_iff] using this hg\n  rw [(IsFixedPt.preimage_iterate hs j : (zpowGroupHom n)^[j] ⁻¹' s = s).symm]\n  rintro g' hg' - ⟨y, hy, rfl⟩\n  change (zpowGroupHom n)^[j] (g' * y) ∈ s\n  replace hg' : (zpowGroupHom n)^[j] g' = 1 := by simpa [zpowGroupHom]\n  rwa [iterate_map_mul, hg', one_mul]\n"}
