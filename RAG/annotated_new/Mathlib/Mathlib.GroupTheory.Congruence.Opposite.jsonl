{"name":"Con.orderIsoOp_apply","module":"Mathlib.GroupTheory.Congruence.Opposite","initialProofState":"M : Type u_1\ninst✝ : Mul M\nc : Con M\n⊢ Eq (Con.orderIsoOp c) c.op","decl":"/--\nThe multiplicative congruences on `M` bijects to the multiplicative congruences on `Mᵐᵒᵖ`\n-/\n@[to_additive (attr := simps) \"The additive congruences on `M` bijects to the additive congruences\non `Mᵃᵒᵖ`\"]\ndef orderIsoOp : Con M ≃o Con Mᵐᵒᵖ where\n  toFun := op\n  invFun := unop\n  left_inv _ := rfl\n  right_inv _ := rfl\n  map_rel_iff' {c d} := by rw [le_def, le_def]; constructor <;> intro h _ _ h' <;> exact h h'\n\n"}
{"name":"AddCon.orderIsoOp_symm_apply","module":"Mathlib.GroupTheory.Congruence.Opposite","initialProofState":"M : Type u_1\ninst✝ : Add M\nc : AddCon (AddOpposite M)\n⊢ Eq ((RelIso.symm AddCon.orderIsoOp) c) c.unop","decl":"/--\nThe multiplicative congruences on `M` bijects to the multiplicative congruences on `Mᵐᵒᵖ`\n-/\n@[to_additive (attr := simps) \"The additive congruences on `M` bijects to the additive congruences\non `Mᵃᵒᵖ`\"]\ndef orderIsoOp : Con M ≃o Con Mᵐᵒᵖ where\n  toFun := op\n  invFun := unop\n  left_inv _ := rfl\n  right_inv _ := rfl\n  map_rel_iff' {c d} := by rw [le_def, le_def]; constructor <;> intro h _ _ h' <;> exact h h'\n\n"}
{"name":"Con.orderIsoOp_symm_apply","module":"Mathlib.GroupTheory.Congruence.Opposite","initialProofState":"M : Type u_1\ninst✝ : Mul M\nc : Con (MulOpposite M)\n⊢ Eq ((RelIso.symm Con.orderIsoOp) c) c.unop","decl":"/--\nThe multiplicative congruences on `M` bijects to the multiplicative congruences on `Mᵐᵒᵖ`\n-/\n@[to_additive (attr := simps) \"The additive congruences on `M` bijects to the additive congruences\non `Mᵃᵒᵖ`\"]\ndef orderIsoOp : Con M ≃o Con Mᵐᵒᵖ where\n  toFun := op\n  invFun := unop\n  left_inv _ := rfl\n  right_inv _ := rfl\n  map_rel_iff' {c d} := by rw [le_def, le_def]; constructor <;> intro h _ _ h' <;> exact h h'\n\n"}
{"name":"AddCon.orderIsoOp_apply","module":"Mathlib.GroupTheory.Congruence.Opposite","initialProofState":"M : Type u_1\ninst✝ : Add M\nc : AddCon M\n⊢ Eq (AddCon.orderIsoOp c) c.op","decl":"/--\nThe multiplicative congruences on `M` bijects to the multiplicative congruences on `Mᵐᵒᵖ`\n-/\n@[to_additive (attr := simps) \"The additive congruences on `M` bijects to the additive congruences\non `Mᵃᵒᵖ`\"]\ndef orderIsoOp : Con M ≃o Con Mᵐᵒᵖ where\n  toFun := op\n  invFun := unop\n  left_inv _ := rfl\n  right_inv _ := rfl\n  map_rel_iff' {c d} := by rw [le_def, le_def]; constructor <;> intro h _ _ h' <;> exact h h'\n\n"}
