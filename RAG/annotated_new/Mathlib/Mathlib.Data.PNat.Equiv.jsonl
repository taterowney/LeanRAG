{"name":"Equiv.pnatEquivNat_apply","module":"Mathlib.Data.PNat.Equiv","initialProofState":"⊢ Eq (⇑Equiv.pnatEquivNat) PNat.natPred","decl":"/-- An equivalence between `ℕ+` and `ℕ` given by `PNat.natPred` and `Nat.succPNat`. -/\n@[simps (config := .asFn)]\ndef _root_.Equiv.pnatEquivNat : ℕ+ ≃ ℕ where\n  toFun := PNat.natPred\n  invFun := Nat.succPNat\n  left_inv := PNat.succPNat_natPred\n  right_inv := Nat.natPred_succPNat\n"}
{"name":"Equiv.pnatEquivNat_symm_apply","module":"Mathlib.Data.PNat.Equiv","initialProofState":"⊢ Eq (⇑Equiv.pnatEquivNat.symm) Nat.succPNat","decl":"/-- An equivalence between `ℕ+` and `ℕ` given by `PNat.natPred` and `Nat.succPNat`. -/\n@[simps (config := .asFn)]\ndef _root_.Equiv.pnatEquivNat : ℕ+ ≃ ℕ where\n  toFun := PNat.natPred\n  invFun := Nat.succPNat\n  left_inv := PNat.succPNat_natPred\n  right_inv := Nat.natPred_succPNat\n"}
