{"name":"basis_finite_of_finite_spans","module":"Mathlib.LinearAlgebra.Basis.Cardinality","initialProofState":"R : Type u\nM : Type v\ninst✝³ : Semiring R\ninst✝² : AddCommMonoid M\ninst✝¹ : Nontrivial R\ninst✝ : Module R M\nw : Set M\nhw : w.Finite\ns : Eq (Submodule.span R w) Top.top\nι : Type w\nb : Basis ι R M\n⊢ Finite ι","decl":"/--\nOver any nontrivial ring, the existence of a finite spanning set implies that any basis is finite.\n-/\nlemma basis_finite_of_finite_spans (w : Set M) (hw : w.Finite) (s : span R w = ⊤) {ι : Type w}\n    (b : Basis ι R M) : Finite ι := by\n  classical\n  haveI := hw.to_subtype\n  cases nonempty_fintype w\n  -- We'll work by contradiction, assuming `ι` is infinite.\n  rw [← not_infinite_iff_finite]\n  intro i\n  -- Let `S` be the union of the supports of `x ∈ w` expressed as linear combinations of `b`.\n  -- This is a finite set since `w` is finite.\n  let S : Finset ι := Finset.univ.sup fun x : w => (b.repr x).support\n  let bS : Set M := b '' S\n  have h : ∀ x ∈ w, x ∈ span R bS := by\n    intro x m\n    rw [← b.linearCombination_repr x, span_image_eq_map_linearCombination, Submodule.mem_map]\n    use b.repr x\n    simp only [and_true, eq_self_iff_true, Finsupp.mem_supported]\n    rw [Finset.coe_subset, ← Finset.le_iff_subset]\n    exact Finset.le_sup (f := fun x : w ↦ (b.repr ↑x).support) (Finset.mem_univ (⟨x, m⟩ : w))\n  -- Thus this finite subset of the basis elements spans the entire module.\n  have k : span R bS = ⊤ := eq_top_iff.2 (le_trans s.ge (span_le.2 h))\n  -- Now there is some `x : ι` not in `S`, since `ι` is infinite.\n  obtain ⟨x, nm⟩ := Infinite.exists_not_mem_finset S\n  -- However it must be in the span of the finite subset,\n  have k' : b x ∈ span R bS := by\n    rw [k]\n    exact mem_top\n  -- giving the desire contradiction.\n  simp only [self_mem_span_image, Finset.mem_coe, bS] at k'\n  exact nm k'\n\n"}
{"name":"union_support_maximal_linearIndependent_eq_range_basis","module":"Mathlib.LinearAlgebra.Basis.Cardinality","initialProofState":"R : Type u\nM : Type v\ninst✝³ : Semiring R\ninst✝² : AddCommMonoid M\ninst✝¹ : Nontrivial R\ninst✝ : Module R M\nι : Type w\nb : Basis ι R M\nκ : Type w'\nv : κ → M\nind : LinearIndependent R v\nm : ind.Maximal\n⊢ Eq (Set.iUnion fun k => ↑(b.repr (v k)).support) Set.univ","decl":"/-- Over any ring `R`, if `b` is a basis for a module `M`,\nand `s` is a maximal linearly independent set,\nthen the union of the supports of `x ∈ s` (when written out in the basis `b`) is all of `b`.\n-/\ntheorem union_support_maximal_linearIndependent_eq_range_basis {ι : Type w} (b : Basis ι R M)\n    {κ : Type w'} (v : κ → M) (ind : LinearIndependent R v) (m : ind.Maximal) :\n    ⋃ k, ((b.repr (v k)).support : Set ι) = Set.univ := by\n  -- If that's not the case,\n  by_contra h\n  simp only [← Ne.eq_def, ne_univ_iff_exists_not_mem, mem_iUnion, not_exists_not,\n    Finsupp.mem_support_iff, Finset.mem_coe] at h\n  -- We have some basis element `b i` which is not in the support of any of the `v k`.\n  obtain ⟨i, w⟩ := h\n  have repr_eq_zero (l) : b.repr (linearCombination R v l) i = 0 := by\n    simp [linearCombination_apply, Finsupp.sum, w]\n  -- Using this, we'll construct a linearly independent family strictly larger than `v`,\n  -- by also using this `b i`.\n  let v' (o : Option κ) : M := o.elim (b i) v\n  have r : range v ⊆ range v' := by rintro - ⟨k, rfl⟩; exact ⟨some k, rfl⟩\n  have r' : b i ∉ range v := fun ⟨k, p⟩ ↦ by simpa [w] using congr(b.repr $p i)\n  have r'' : range v ≠ range v' := (r' <| · ▸ ⟨none, rfl⟩)\n  -- The key step in the proof is checking that this strictly larger family is linearly independent.\n  have i' : LinearIndependent R ((↑) : range v' → M) := by\n    apply LinearIndependent.to_subtype_range\n    rw [linearIndependent_iffₛ]\n    intro l l' z\n    simp_rw [linearCombination_option, v', Option.elim'] at z\n    change _ + linearCombination R v l.some = _ + linearCombination R v l'.some at z\n    -- We have some equality between linear combinations of `b i` and the `v k`,\n    -- and want to show the coefficients are equal.\n    ext (_ | a)\n    -- We'll first show the coefficient of `b i` is zero,\n    -- by expressing the `v k` in the basis `b`, and using that the `v k` have no `b i` term.\n    · simpa [repr_eq_zero] using congr(b.repr $z i)\n    -- All the other coefficients are also equal, because `v` is linear independent,\n    -- by comparing the coefficients in the basis `b`.\n    have l₁ : l.some = l'.some := ind <| b.repr.injective <| ext fun j ↦ by\n      obtain rfl | ne := eq_or_ne i j\n      · simp_rw [repr_eq_zero]\n      classical simpa [single_apply, ne] using congr(b.repr $z j)\n    exact DFunLike.congr_fun l₁ a\n  exact r'' (m (range v') i' r)\n\n"}
{"name":"infinite_basis_le_maximal_linearIndependent'","module":"Mathlib.LinearAlgebra.Basis.Cardinality","initialProofState":"R : Type u\nM : Type v\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Nontrivial R\ninst✝¹ : Module R M\nι : Type w\nb : Basis ι R M\ninst✝ : Infinite ι\nκ : Type w'\nv : κ → M\ni : LinearIndependent R v\nm : i.Maximal\n⊢ LE.le (Cardinal.lift.{w', w} (Cardinal.mk ι)) (Cardinal.lift.{w, w'} (Cardinal.mk κ))","decl":"/-- Over any ring `R`, if `b` is an infinite basis for a module `M`,\nand `s` is a maximal linearly independent set,\nthen the cardinality of `b` is bounded by the cardinality of `s`.\n-/\ntheorem infinite_basis_le_maximal_linearIndependent' {ι : Type w} (b : Basis ι R M) [Infinite ι]\n    {κ : Type w'} (v : κ → M) (i : LinearIndependent R v) (m : i.Maximal) :\n    Cardinal.lift.{w'} #ι ≤ Cardinal.lift.{w} #κ := by\n  let Φ := fun k : κ => (b.repr (v k)).support\n  have w₁ : #ι ≤ #(Set.range Φ) := by\n    apply Cardinal.le_range_of_union_finset_eq_top\n    exact union_support_maximal_linearIndependent_eq_range_basis b v i m\n  have w₂ : Cardinal.lift.{w'} #(Set.range Φ) ≤ Cardinal.lift.{w} #κ := Cardinal.mk_range_le_lift\n  exact (Cardinal.lift_le.mpr w₁).trans w₂\n\n-- (See `infinite_basis_le_maximal_linearIndependent'` for the more general version\n-- where the index types can live in different universes.)\n"}
{"name":"infinite_basis_le_maximal_linearIndependent","module":"Mathlib.LinearAlgebra.Basis.Cardinality","initialProofState":"R : Type u\nM : Type v\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Nontrivial R\ninst✝¹ : Module R M\nι : Type w\nb : Basis ι R M\ninst✝ : Infinite ι\nκ : Type w\nv : κ → M\ni : LinearIndependent R v\nm : i.Maximal\n⊢ LE.le (Cardinal.mk ι) (Cardinal.mk κ)","decl":"/-- Over any ring `R`, if `b` is an infinite basis for a module `M`,\nand `s` is a maximal linearly independent set,\nthen the cardinality of `b` is bounded by the cardinality of `s`.\n-/\ntheorem infinite_basis_le_maximal_linearIndependent {ι : Type w} (b : Basis ι R M) [Infinite ι]\n    {κ : Type w} (v : κ → M) (i : LinearIndependent R v) (m : i.Maximal) : #ι ≤ #κ :=\n  Cardinal.lift_le.mp (infinite_basis_le_maximal_linearIndependent' b v i m)\n\n"}
