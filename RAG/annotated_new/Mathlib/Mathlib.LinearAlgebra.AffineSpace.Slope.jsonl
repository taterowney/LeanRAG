{"name":"slope_fun_def","module":"Mathlib.LinearAlgebra.AffineSpace.Slope","initialProofState":"k : Type u_1\nE : Type u_2\nPE : Type u_3\ninst✝³ : Field k\ninst✝² : AddCommGroup E\ninst✝¹ : Module k E\ninst✝ : AddTorsor E PE\nf : k → PE\n⊢ Eq (slope f) fun a b => HSMul.hSMul (Inv.inv (HSub.hSub b a)) (VSub.vsub (f b) (f a))","decl":"theorem slope_fun_def (f : k → PE) : slope f = fun a b => (b - a)⁻¹ • (f b -ᵥ f a) :=\n  rfl\n\n"}
{"name":"slope_def_field","module":"Mathlib.LinearAlgebra.AffineSpace.Slope","initialProofState":"k : Type u_1\ninst✝ : Field k\nf : k → k\na b : k\n⊢ Eq (slope f a b) (HDiv.hDiv (HSub.hSub (f b) (f a)) (HSub.hSub b a))","decl":"theorem slope_def_field (f : k → k) (a b : k) : slope f a b = (f b - f a) / (b - a) :=\n  (div_eq_inv_mul _ _).symm\n\n"}
{"name":"slope_fun_def_field","module":"Mathlib.LinearAlgebra.AffineSpace.Slope","initialProofState":"k : Type u_1\ninst✝ : Field k\nf : k → k\na : k\n⊢ Eq (slope f a) fun b => HDiv.hDiv (HSub.hSub (f b) (f a)) (HSub.hSub b a)","decl":"theorem slope_fun_def_field (f : k → k) (a : k) : slope f a = fun b => (f b - f a) / (b - a) :=\n  (div_eq_inv_mul _ _).symm\n\n"}
{"name":"slope_same","module":"Mathlib.LinearAlgebra.AffineSpace.Slope","initialProofState":"k : Type u_1\nE : Type u_2\nPE : Type u_3\ninst✝³ : Field k\ninst✝² : AddCommGroup E\ninst✝¹ : Module k E\ninst✝ : AddTorsor E PE\nf : k → PE\na : k\n⊢ Eq (slope f a a) 0","decl":"@[simp]\ntheorem slope_same (f : k → PE) (a : k) : (slope f a a : E) = 0 := by\n  rw [slope, sub_self, inv_zero, zero_smul]\n\n"}
{"name":"slope_def_module","module":"Mathlib.LinearAlgebra.AffineSpace.Slope","initialProofState":"k : Type u_1\nE : Type u_2\ninst✝² : Field k\ninst✝¹ : AddCommGroup E\ninst✝ : Module k E\nf : k → E\na b : k\n⊢ Eq (slope f a b) (HSMul.hSMul (Inv.inv (HSub.hSub b a)) (HSub.hSub (f b) (f a)))","decl":"theorem slope_def_module (f : k → E) (a b : k) : slope f a b = (b - a)⁻¹ • (f b - f a) :=\n  rfl\n\n"}
{"name":"sub_smul_slope","module":"Mathlib.LinearAlgebra.AffineSpace.Slope","initialProofState":"k : Type u_1\nE : Type u_2\nPE : Type u_3\ninst✝³ : Field k\ninst✝² : AddCommGroup E\ninst✝¹ : Module k E\ninst✝ : AddTorsor E PE\nf : k → PE\na b : k\n⊢ Eq (HSMul.hSMul (HSub.hSub b a) (slope f a b)) (VSub.vsub (f b) (f a))","decl":"@[simp]\ntheorem sub_smul_slope (f : k → PE) (a b : k) : (b - a) • slope f a b = f b -ᵥ f a := by\n  rcases eq_or_ne a b with (rfl | hne)\n  · rw [sub_self, zero_smul, vsub_self]\n  · rw [slope, smul_inv_smul₀ (sub_ne_zero.2 hne.symm)]\n\n"}
{"name":"sub_smul_slope_vadd","module":"Mathlib.LinearAlgebra.AffineSpace.Slope","initialProofState":"k : Type u_1\nE : Type u_2\nPE : Type u_3\ninst✝³ : Field k\ninst✝² : AddCommGroup E\ninst✝¹ : Module k E\ninst✝ : AddTorsor E PE\nf : k → PE\na b : k\n⊢ Eq (HVAdd.hVAdd (HSMul.hSMul (HSub.hSub b a) (slope f a b)) (f a)) (f b)","decl":"theorem sub_smul_slope_vadd (f : k → PE) (a b : k) : (b - a) • slope f a b +ᵥ f a = f b := by\n  rw [sub_smul_slope, vsub_vadd]\n\n"}
{"name":"slope_vadd_const","module":"Mathlib.LinearAlgebra.AffineSpace.Slope","initialProofState":"k : Type u_1\nE : Type u_2\nPE : Type u_3\ninst✝³ : Field k\ninst✝² : AddCommGroup E\ninst✝¹ : Module k E\ninst✝ : AddTorsor E PE\nf : k → E\nc : PE\n⊢ Eq (slope fun x => HVAdd.hVAdd (f x) c) (slope f)","decl":"@[simp]\ntheorem slope_vadd_const (f : k → E) (c : PE) : (slope fun x => f x +ᵥ c) = slope f := by\n  ext a b\n  simp only [slope, vadd_vsub_vadd_cancel_right, vsub_eq_sub]\n\n"}
{"name":"slope_sub_smul","module":"Mathlib.LinearAlgebra.AffineSpace.Slope","initialProofState":"k : Type u_1\nE : Type u_2\ninst✝² : Field k\ninst✝¹ : AddCommGroup E\ninst✝ : Module k E\nf : k → E\na b : k\nh : Ne a b\n⊢ Eq (slope (fun x => HSMul.hSMul (HSub.hSub x a) (f x)) a b) (f b)","decl":"@[simp]\ntheorem slope_sub_smul (f : k → E) {a b : k} (h : a ≠ b) :\n    slope (fun x => (x - a) • f x) a b = f b := by\n  simp [slope, inv_smul_smul₀ (sub_ne_zero.2 h.symm)]\n\n"}
{"name":"eq_of_slope_eq_zero","module":"Mathlib.LinearAlgebra.AffineSpace.Slope","initialProofState":"k : Type u_1\nE : Type u_2\nPE : Type u_3\ninst✝³ : Field k\ninst✝² : AddCommGroup E\ninst✝¹ : Module k E\ninst✝ : AddTorsor E PE\nf : k → PE\na b : k\nh : Eq (slope f a b) 0\n⊢ Eq (f a) (f b)","decl":"theorem eq_of_slope_eq_zero {f : k → PE} {a b : k} (h : slope f a b = (0 : E)) : f a = f b := by\n  rw [← sub_smul_slope_vadd f a b, h, smul_zero, zero_vadd]\n\n"}
{"name":"AffineMap.slope_comp","module":"Mathlib.LinearAlgebra.AffineSpace.Slope","initialProofState":"k : Type u_1\nE : Type u_2\nPE : Type u_3\ninst✝⁶ : Field k\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : Module k E\ninst✝³ : AddTorsor E PE\nF : Type u_4\nPF : Type u_5\ninst✝² : AddCommGroup F\ninst✝¹ : Module k F\ninst✝ : AddTorsor F PF\nf : AffineMap k PE PF\ng : k → PE\na b : k\n⊢ Eq (slope (Function.comp (⇑f) g) a b) (f.linear (slope g a b))","decl":"theorem AffineMap.slope_comp {F PF : Type*} [AddCommGroup F] [Module k F] [AddTorsor F PF]\n    (f : PE →ᵃ[k] PF) (g : k → PE) (a b : k) : slope (f ∘ g) a b = f.linear (slope g a b) := by\n  simp only [slope, (· ∘ ·), f.linear.map_smul, f.linearMap_vsub]\n\n"}
{"name":"LinearMap.slope_comp","module":"Mathlib.LinearAlgebra.AffineSpace.Slope","initialProofState":"k : Type u_1\nE : Type u_2\ninst✝⁴ : Field k\ninst✝³ : AddCommGroup E\ninst✝² : Module k E\nF : Type u_4\ninst✝¹ : AddCommGroup F\ninst✝ : Module k F\nf : LinearMap (RingHom.id k) E F\ng : k → E\na b : k\n⊢ Eq (slope (Function.comp (⇑f) g) a b) (f (slope g a b))","decl":"theorem LinearMap.slope_comp {F : Type*} [AddCommGroup F] [Module k F] (f : E →ₗ[k] F) (g : k → E)\n    (a b : k) : slope (f ∘ g) a b = f (slope g a b) :=\n  f.toAffineMap.slope_comp g a b\n\n"}
{"name":"slope_comm","module":"Mathlib.LinearAlgebra.AffineSpace.Slope","initialProofState":"k : Type u_1\nE : Type u_2\nPE : Type u_3\ninst✝³ : Field k\ninst✝² : AddCommGroup E\ninst✝¹ : Module k E\ninst✝ : AddTorsor E PE\nf : k → PE\na b : k\n⊢ Eq (slope f a b) (slope f b a)","decl":"theorem slope_comm (f : k → PE) (a b : k) : slope f a b = slope f b a := by\n  rw [slope, slope, ← neg_vsub_eq_vsub_rev, smul_neg, ← neg_smul, neg_inv, neg_sub]\n\n"}
{"name":"slope_neg","module":"Mathlib.LinearAlgebra.AffineSpace.Slope","initialProofState":"k : Type u_1\nE : Type u_2\ninst✝² : Field k\ninst✝¹ : AddCommGroup E\ninst✝ : Module k E\nf : k → E\nx y : k\n⊢ Eq (slope (fun t => Neg.neg (f t)) x y) (Neg.neg (slope f x y))","decl":"@[simp] lemma slope_neg (f : k → E) (x y : k) : slope (fun t ↦ -f t) x y = -slope f x y := by\n  simp only [slope_def_module, neg_sub_neg, ← smul_neg, neg_sub]\n\n"}
{"name":"slope_neg_fun","module":"Mathlib.LinearAlgebra.AffineSpace.Slope","initialProofState":"k : Type u_1\nE : Type u_2\ninst✝² : Field k\ninst✝¹ : AddCommGroup E\ninst✝ : Module k E\nf : k → E\n⊢ Eq (slope (Neg.neg f)) (Neg.neg (slope f))","decl":"@[simp] lemma slope_neg_fun (f : k → E) : slope (-f) = -slope f := by\n  ext x y; exact slope_neg f x y\n\n"}
{"name":"sub_div_sub_smul_slope_add_sub_div_sub_smul_slope","module":"Mathlib.LinearAlgebra.AffineSpace.Slope","initialProofState":"k : Type u_1\nE : Type u_2\nPE : Type u_3\ninst✝³ : Field k\ninst✝² : AddCommGroup E\ninst✝¹ : Module k E\ninst✝ : AddTorsor E PE\nf : k → PE\na b c : k\n⊢ Eq (HAdd.hAdd (HSMul.hSMul (HDiv.hDiv (HSub.hSub b a) (HSub.hSub c a)) (slope f a b)) (HSMul.hSMul (HDiv.hDiv (HSub.hSub c b) (HSub.hSub c a)) (slope f b c))) (slope f a c)","decl":"/-- `slope f a c` is a linear combination of `slope f a b` and `slope f b c`. This version\nexplicitly provides coefficients. If `a ≠ c`, then the sum of the coefficients is `1`, so it is\nactually an affine combination, see `lineMap_slope_slope_sub_div_sub`. -/\ntheorem sub_div_sub_smul_slope_add_sub_div_sub_smul_slope (f : k → PE) (a b c : k) :\n    ((b - a) / (c - a)) • slope f a b + ((c - b) / (c - a)) • slope f b c = slope f a c := by\n  by_cases hab : a = b\n  · subst hab\n    rw [sub_self, zero_div, zero_smul, zero_add]\n    by_cases hac : a = c\n    · simp [hac]\n    · rw [div_self (sub_ne_zero.2 <| Ne.symm hac), one_smul]\n  by_cases hbc : b = c\n  · subst hbc\n    simp [sub_ne_zero.2 (Ne.symm hab)]\n  rw [add_comm]\n  simp_rw [slope, div_eq_inv_mul, mul_smul, ← smul_add,\n    smul_inv_smul₀ (sub_ne_zero.2 <| Ne.symm hab), smul_inv_smul₀ (sub_ne_zero.2 <| Ne.symm hbc),\n    vsub_add_vsub_cancel]\n\n"}
{"name":"lineMap_slope_slope_sub_div_sub","module":"Mathlib.LinearAlgebra.AffineSpace.Slope","initialProofState":"k : Type u_1\nE : Type u_2\nPE : Type u_3\ninst✝³ : Field k\ninst✝² : AddCommGroup E\ninst✝¹ : Module k E\ninst✝ : AddTorsor E PE\nf : k → PE\na b c : k\nh : Ne a c\n⊢ Eq ((AffineMap.lineMap (slope f a b) (slope f b c)) (HDiv.hDiv (HSub.hSub c b) (HSub.hSub c a))) (slope f a c)","decl":"/-- `slope f a c` is an affine combination of `slope f a b` and `slope f b c`. This version uses\n`lineMap` to express this property. -/\ntheorem lineMap_slope_slope_sub_div_sub (f : k → PE) (a b c : k) (h : a ≠ c) :\n    lineMap (slope f a b) (slope f b c) ((c - b) / (c - a)) = slope f a c := by\n  field_simp [sub_ne_zero.2 h.symm, ← sub_div_sub_smul_slope_add_sub_div_sub_smul_slope f a b c,\n    lineMap_apply_module]\n\n"}
{"name":"lineMap_slope_lineMap_slope_lineMap","module":"Mathlib.LinearAlgebra.AffineSpace.Slope","initialProofState":"k : Type u_1\nE : Type u_2\nPE : Type u_3\ninst✝³ : Field k\ninst✝² : AddCommGroup E\ninst✝¹ : Module k E\ninst✝ : AddTorsor E PE\nf : k → PE\na b r : k\n⊢ Eq ((AffineMap.lineMap (slope f ((AffineMap.lineMap a b) r) b) (slope f a ((AffineMap.lineMap a b) r))) r) (slope f a b)","decl":"/-- `slope f a b` is an affine combination of `slope f a (lineMap a b r)` and\n`slope f (lineMap a b r) b`. We use `lineMap` to express this property. -/\ntheorem lineMap_slope_lineMap_slope_lineMap (f : k → PE) (a b r : k) :\n    lineMap (slope f (lineMap a b r) b) (slope f a (lineMap a b r)) r = slope f a b := by\n  obtain rfl | hab : a = b ∨ a ≠ b := Classical.em _; · simp\n  rw [slope_comm _ a, slope_comm _ a, slope_comm _ _ b]\n  convert lineMap_slope_slope_sub_div_sub f b (lineMap a b r) a hab.symm using 2\n  rw [lineMap_apply_ring, eq_div_iff (sub_ne_zero.2 hab), sub_mul, one_mul, mul_sub, ← sub_sub,\n    sub_sub_cancel]\n"}
