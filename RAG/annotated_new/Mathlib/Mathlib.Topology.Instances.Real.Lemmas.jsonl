{"name":"Real.isTopologicalBasis_Ioo_rat","module":"Mathlib.Topology.Instances.Real.Lemmas","initialProofState":"⊢ TopologicalSpace.IsTopologicalBasis (Set.iUnion fun a => Set.iUnion fun b => Set.iUnion fun x => Singleton.singleton (Set.Ioo ↑a ↑b))","decl":"theorem Real.isTopologicalBasis_Ioo_rat :\n    @IsTopologicalBasis ℝ _ (⋃ (a : ℚ) (b : ℚ) (_ : a < b), {Ioo (a : ℝ) b}) :=\n  isTopologicalBasis_of_isOpen_of_nhds (by simp +contextual [isOpen_Ioo])\n    fun a _ hav hv =>\n    let ⟨_, _, ⟨hl, hu⟩, h⟩ := mem_nhds_iff_exists_Ioo_subset.mp (IsOpen.mem_nhds hv hav)\n    let ⟨q, hlq, hqa⟩ := exists_rat_btwn hl\n    let ⟨p, hap, hpu⟩ := exists_rat_btwn hu\n    ⟨Ioo q p, by\n      simp only [mem_iUnion]\n      exact ⟨q, p, Rat.cast_lt.1 <| hqa.trans hap, rfl⟩, ⟨hqa, hap⟩, fun _ ⟨hqa', ha'p⟩ =>\n      h ⟨hlq.trans hqa', ha'p.trans hpu⟩⟩\n\n"}
{"name":"Real.cobounded_eq","module":"Mathlib.Topology.Instances.Real.Lemmas","initialProofState":"⊢ Eq (Bornology.cobounded Real) (Max.max Filter.atBot Filter.atTop)","decl":"@[simp]\ntheorem Real.cobounded_eq : cobounded ℝ = atBot ⊔ atTop := by\n  simp only [← comap_dist_right_atTop (0 : ℝ), Real.dist_eq, sub_zero, comap_abs_atTop]\n\n/- TODO(Mario): Prove that these are uniform isomorphisms instead of uniform embeddings\nlemma uniform_embedding_add_rat {r : ℚ} : uniform_embedding (fun p : ℚ => p + r) :=\n_\n\nlemma uniform_embedding_mul_rat {q : ℚ} (hq : q ≠ 0) : uniform_embedding ((*) q) :=\n_ -/\n"}
{"name":"Real.mem_closure_iff","module":"Mathlib.Topology.Instances.Real.Lemmas","initialProofState":"s : Set Real\nx : Real\n⊢ Iff (Membership.mem (closure s) x) (∀ (ε : Real), GT.gt ε 0 → Exists fun y => And (Membership.mem s y) (LT.lt (abs (HSub.hSub y x)) ε))","decl":"theorem Real.mem_closure_iff {s : Set ℝ} {x : ℝ} :\n    x ∈ closure s ↔ ∀ ε > 0, ∃ y ∈ s, |y - x| < ε := by\n  simp [mem_closure_iff_nhds_basis nhds_basis_ball, Real.dist_eq]\n\n"}
{"name":"Real.uniformContinuous_inv","module":"Mathlib.Topology.Instances.Real.Lemmas","initialProofState":"s : Set Real\nr : Real\nr0 : LT.lt 0 r\nH : ∀ (x : Real), Membership.mem s x → LE.le r (abs x)\n⊢ UniformContinuous fun p => Inv.inv ↑p","decl":"theorem Real.uniformContinuous_inv (s : Set ℝ) {r : ℝ} (r0 : 0 < r) (H : ∀ x ∈ s, r ≤ |x|) :\n    UniformContinuous fun p : s => p.1⁻¹ :=\n  Metric.uniformContinuous_iff.2 fun _ε ε0 =>\n    let ⟨δ, δ0, Hδ⟩ := rat_inv_continuous_lemma abs ε0 r0\n    ⟨δ, δ0, fun {a b} h => Hδ (H _ a.2) (H _ b.2) h⟩\n\n"}
{"name":"Real.uniformContinuous_abs","module":"Mathlib.Topology.Instances.Real.Lemmas","initialProofState":"⊢ UniformContinuous abs","decl":"theorem Real.uniformContinuous_abs : UniformContinuous (abs : ℝ → ℝ) :=\n  Metric.uniformContinuous_iff.2 fun ε ε0 =>\n    ⟨ε, ε0, fun _ _ ↦ lt_of_le_of_lt (abs_abs_sub_abs_le_abs_sub _ _)⟩\n\n"}
{"name":"Real.continuous_inv","module":"Mathlib.Topology.Instances.Real.Lemmas","initialProofState":"⊢ Continuous fun a => Inv.inv ↑a","decl":"theorem Real.continuous_inv : Continuous fun a : { r : ℝ // r ≠ 0 } => a.val⁻¹ :=\n  continuousOn_inv₀.restrict\n\n"}
{"name":"Real.uniformContinuous_mul","module":"Mathlib.Topology.Instances.Real.Lemmas","initialProofState":"s : Set (Prod Real Real)\nr₁ r₂ : Real\nH : ∀ (x : Prod Real Real), Membership.mem s x → And (LT.lt (abs x.1) r₁) (LT.lt (abs x.2) r₂)\n⊢ UniformContinuous fun p => HMul.hMul (↑p).1 (↑p).2","decl":"theorem Real.uniformContinuous_mul (s : Set (ℝ × ℝ)) {r₁ r₂ : ℝ}\n    (H : ∀ x ∈ s, |(x : ℝ × ℝ).1| < r₁ ∧ |x.2| < r₂) :\n    UniformContinuous fun p : s => p.1.1 * p.1.2 :=\n  Metric.uniformContinuous_iff.2 fun _ε ε0 =>\n    let ⟨δ, δ0, Hδ⟩ := rat_mul_continuous_lemma abs ε0\n    ⟨δ, δ0, fun {a b} h =>\n      let ⟨h₁, h₂⟩ := max_lt_iff.1 h\n      Hδ (H _ a.2).1 (H _ b.2).2 h₁ h₂⟩\n\n-- Porting note: moved `TopologicalRing` instance up\n\n\n"}
{"name":"Real.totallyBounded_ball","module":"Mathlib.Topology.Instances.Real.Lemmas","initialProofState":"x ε : Real\n⊢ TotallyBounded (Metric.ball x ε)","decl":"theorem Real.totallyBounded_ball (x ε : ℝ) : TotallyBounded (ball x ε) := by\n  rw [Real.ball_eq_Ioo]; apply totallyBounded_Ioo\n\n"}
{"name":"Real.subfield_eq_of_closed","module":"Mathlib.Topology.Instances.Real.Lemmas","initialProofState":"K : Subfield Real\nhc : IsClosed ↑K\n⊢ Eq K Top.top","decl":"theorem Real.subfield_eq_of_closed {K : Subfield ℝ} (hc : IsClosed (K : Set ℝ)) : K = ⊤ := by\n  rw [SetLike.ext'_iff, Subfield.coe_top, ← hc.closure_eq]\n  refine Rat.denseRange_cast.mono ?_ |>.closure_eq\n  rintro - ⟨_, rfl⟩\n  exact SubfieldClass.ratCast_mem K _\n\n"}
{"name":"closure_of_rat_image_lt","module":"Mathlib.Topology.Instances.Real.Lemmas","initialProofState":"q : Rat\n⊢ Eq (closure (Set.image Rat.cast (setOf fun x => LT.lt q x))) (setOf fun r => LE.le (↑q) r)","decl":"theorem closure_of_rat_image_lt {q : ℚ} :\n    closure (((↑) : ℚ → ℝ) '' { x | q < x }) = { r | ↑q ≤ r } :=\n  Subset.antisymm\n    (isClosed_Ici.closure_subset_iff.2\n      (image_subset_iff.2 fun p (h : q < p) => by simpa using h.le))\n    fun x hx => mem_closure_iff_nhds.2 fun _ ht =>\n      let ⟨ε, ε0, hε⟩ := Metric.mem_nhds_iff.1 ht\n      let ⟨p, h₁, h₂⟩ := exists_rat_btwn ((lt_add_iff_pos_right x).2 ε0)\n      ⟨p, hε <| by rwa [mem_ball, Real.dist_eq, abs_of_pos (sub_pos.2 h₁), sub_lt_iff_lt_add'],\n        mem_image_of_mem _ <| Rat.cast_lt.1 <| lt_of_le_of_lt hx.out h₁⟩\n\n/- TODO(Mario): Put these back only if needed later\nlemma closure_of_rat_image_le_eq {q : ℚ} : closure ((coe : ℚ → ℝ) '' {x | q ≤ x}) = {r | ↑q ≤ r} :=\n  _\n\nlemma closure_of_rat_image_le_le_eq {a b : ℚ} (hab : a ≤ b) :\n    closure (of_rat '' {q:ℚ | a ≤ q ∧ q ≤ b}) = {r:ℝ | of_rat a ≤ r ∧ r ≤ of_rat b} :=\n  _\n-/\n\n"}
{"name":"Function.Periodic.compact_of_continuous","module":"Mathlib.Topology.Instances.Real.Lemmas","initialProofState":"α : Type u\ninst✝ : TopologicalSpace α\nf : Real → α\nc : Real\nhp : Function.Periodic f c\nhc : Ne c 0\nhf : Continuous f\n⊢ IsCompact (Set.range f)","decl":"/-- A continuous, periodic function has compact range. -/\ntheorem Periodic.compact_of_continuous [TopologicalSpace α] {f : ℝ → α} {c : ℝ} (hp : Periodic f c)\n    (hc : c ≠ 0) (hf : Continuous f) : IsCompact (range f) := by\n  rw [← hp.image_uIcc hc 0]\n  exact isCompact_uIcc.image hf\n\n"}
{"name":"Function.Periodic.isBounded_of_continuous","module":"Mathlib.Topology.Instances.Real.Lemmas","initialProofState":"α : Type u\ninst✝ : PseudoMetricSpace α\nf : Real → α\nc : Real\nhp : Function.Periodic f c\nhc : Ne c 0\nhf : Continuous f\n⊢ Bornology.IsBounded (Set.range f)","decl":"/-- A continuous, periodic function is bounded. -/\ntheorem Periodic.isBounded_of_continuous [PseudoMetricSpace α] {f : ℝ → α} {c : ℝ}\n    (hp : Periodic f c) (hc : c ≠ 0) (hf : Continuous f) : IsBounded (range f) :=\n  (hp.compact_of_continuous hc hf).isBounded\n\n"}
