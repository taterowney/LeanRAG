{"name":"NonUnitalNonAssocSemiring.nat_smulCommClass","module":"Mathlib.GroupTheory.GroupAction.Ring","initialProofState":"α : Type u_1\ninst✝ : NonUnitalNonAssocSemiring α\n⊢ SMulCommClass Nat α α","decl":"/-- Note that `AddMonoid.nat_smulCommClass` requires stronger assumptions on `α`. -/\ninstance NonUnitalNonAssocSemiring.nat_smulCommClass [NonUnitalNonAssocSemiring α] :\n    SMulCommClass ℕ α α where\n  smul_comm n x y := by\n    induction n with\n    | zero => simp [zero_nsmul]\n    | succ n ih => simp_rw [succ_nsmul, smul_eq_mul, mul_add, ← smul_eq_mul, ih]\n\n"}
{"name":"NonUnitalNonAssocSemiring.nat_isScalarTower","module":"Mathlib.GroupTheory.GroupAction.Ring","initialProofState":"α : Type u_1\ninst✝ : NonUnitalNonAssocSemiring α\n⊢ IsScalarTower Nat α α","decl":"/-- Note that `AddCommMonoid.nat_isScalarTower` requires stronger assumptions on `α`. -/\ninstance NonUnitalNonAssocSemiring.nat_isScalarTower [NonUnitalNonAssocSemiring α] :\n    IsScalarTower ℕ α α where\n  smul_assoc n x y := by\n    induction n with\n    | zero => simp [zero_nsmul]\n    | succ n ih => simp_rw [succ_nsmul, ← ih, smul_eq_mul, add_mul]\n\n"}
{"name":"NonUnitalNonAssocRing.int_smulCommClass","module":"Mathlib.GroupTheory.GroupAction.Ring","initialProofState":"α : Type u_1\ninst✝ : NonUnitalNonAssocRing α\n⊢ SMulCommClass Int α α","decl":"/-- Note that `AddMonoid.int_smulCommClass` requires stronger assumptions on `α`. -/\ninstance NonUnitalNonAssocRing.int_smulCommClass [NonUnitalNonAssocRing α] :\n    SMulCommClass ℤ α α where\n  smul_comm n x y :=\n    match n with\n    | (n : ℕ) => by simp_rw [natCast_zsmul, smul_comm]\n    | -[n+1] => by simp_rw [negSucc_zsmul, smul_eq_mul, mul_neg, mul_smul_comm]\n\n"}
{"name":"NonUnitalNonAssocRing.int_isScalarTower","module":"Mathlib.GroupTheory.GroupAction.Ring","initialProofState":"α : Type u_1\ninst✝ : NonUnitalNonAssocRing α\n⊢ IsScalarTower Int α α","decl":"/-- Note that `AddCommGroup.int_isScalarTower` requires stronger assumptions on `α`. -/\ninstance NonUnitalNonAssocRing.int_isScalarTower [NonUnitalNonAssocRing α] :\n    IsScalarTower ℤ α α where\n  smul_assoc n x y :=\n    match n with\n    | (n : ℕ) => by simp_rw [natCast_zsmul, smul_assoc]\n    | -[n+1] => by simp_rw [negSucc_zsmul, smul_eq_mul, neg_mul, smul_mul_assoc]\n"}
