{"name":"TopologicalSpace.Closeds.mk.sizeOf_spec","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_4\ninst✝¹ : TopologicalSpace α\ninst✝ : SizeOf α\ncarrier : Set α\nclosed' : IsClosed carrier\n⊢ Eq (SizeOf.sizeOf { carrier := carrier, closed' := closed' }) (HAdd.hAdd 1 (SizeOf.sizeOf closed'))","decl":"/-- The type of closed subsets of a topological space. -/\nstructure Closeds (α : Type*) [TopologicalSpace α] where\n  /-- the carrier set, i.e. the points in this set -/\n  carrier : Set α\n  closed' : IsClosed carrier\n\n"}
{"name":"TopologicalSpace.Closeds.closed'","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_4\ninst✝ : TopologicalSpace α\nself : TopologicalSpace.Closeds α\n⊢ IsClosed self.carrier","decl":"/-- The type of closed subsets of a topological space. -/\nstructure Closeds (α : Type*) [TopologicalSpace α] where\n  /-- the carrier set, i.e. the points in this set -/\n  carrier : Set α\n  closed' : IsClosed carrier\n\n"}
{"name":"TopologicalSpace.Closeds.mk.injEq","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_4\ninst✝ : TopologicalSpace α\ncarrier✝ : Set α\nclosed'✝ : IsClosed carrier✝\ncarrier : Set α\nclosed' : IsClosed carrier\n⊢ Eq (Eq { carrier := carrier✝, closed' := closed'✝ } { carrier := carrier, closed' := closed' }) (Eq carrier✝ carrier)","decl":"/-- The type of closed subsets of a topological space. -/\nstructure Closeds (α : Type*) [TopologicalSpace α] where\n  /-- the carrier set, i.e. the points in this set -/\n  carrier : Set α\n  closed' : IsClosed carrier\n\n"}
{"name":"TopologicalSpace.Closeds.mk.inj","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_4\ninst✝ : TopologicalSpace α\ncarrier✝ : Set α\nclosed'✝ : IsClosed carrier✝\ncarrier : Set α\nclosed' : IsClosed carrier\nx✝ : Eq { carrier := carrier✝, closed' := closed'✝ } { carrier := carrier, closed' := closed' }\n⊢ Eq carrier✝ carrier","decl":"/-- The type of closed subsets of a topological space. -/\nstructure Closeds (α : Type*) [TopologicalSpace α] where\n  /-- the carrier set, i.e. the points in this set -/\n  carrier : Set α\n  closed' : IsClosed carrier\n\n"}
{"name":"TopologicalSpace.Closeds.instCanLiftSetCoeIsClosed","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\n⊢ CanLift (Set α) (TopologicalSpace.Closeds α) SetLike.coe IsClosed","decl":"instance : CanLift (Set α) (Closeds α) (↑) IsClosed where\n  prf s hs := ⟨⟨s, hs⟩, rfl⟩\n\n"}
{"name":"TopologicalSpace.Closeds.closed","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.Closeds α\n⊢ IsClosed ↑s","decl":"theorem closed (s : Closeds α) : IsClosed (s : Set α) :=\n  s.closed'\n\n"}
{"name":"TopologicalSpace.Closeds.ext_iff","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.Closeds α\n⊢ Iff (Eq s t) (Eq ↑s ↑t)","decl":"@[ext]\nprotected theorem ext {s t : Closeds α} (h : (s : Set α) = t) : s = t :=\n  SetLike.ext' h\n\n"}
{"name":"TopologicalSpace.Closeds.ext","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.Closeds α\nh : Eq ↑s ↑t\n⊢ Eq s t","decl":"@[ext]\nprotected theorem ext {s t : Closeds α} (h : (s : Set α) = t) : s = t :=\n  SetLike.ext' h\n\n"}
{"name":"TopologicalSpace.Closeds.coe_mk","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns : Set α\nh : IsClosed s\n⊢ Eq (↑{ carrier := s, closed' := h }) s","decl":"@[simp]\ntheorem coe_mk (s : Set α) (h) : (mk s h : Set α) = s :=\n  rfl\n\n"}
{"name":"TopologicalSpace.Closeds.coe_closure","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns : Set α\n⊢ Eq (↑(TopologicalSpace.Closeds.closure s)) (closure s)","decl":"/-- The closure of a set, as an element of `TopologicalSpace.Closeds`. -/\n@[simps]\nprotected def closure (s : Set α) : Closeds α :=\n  ⟨closure s, isClosed_closure⟩\n\n"}
{"name":"TopologicalSpace.Closeds.mem_closure","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns : Set α\nx : α\n⊢ Iff (Membership.mem (TopologicalSpace.Closeds.closure s) x) (Membership.mem (closure s) x)","decl":"@[simp]\ntheorem mem_closure {s : Set α} {x : α} : x ∈ Closeds.closure s ↔ x ∈ closure s := .rfl\n\n"}
{"name":"TopologicalSpace.Closeds.gc","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\n⊢ GaloisConnection TopologicalSpace.Closeds.closure SetLike.coe","decl":"theorem gc : GaloisConnection Closeds.closure ((↑) : Closeds α → Set α) := fun _ U =>\n  ⟨subset_closure.trans, fun h => closure_minimal h U.closed⟩\n\n"}
{"name":"TopologicalSpace.Closeds.coe_sup","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.Closeds α\n⊢ Eq (↑(Max.max s t)) (Union.union ↑s ↑t)","decl":"@[simp, norm_cast]\ntheorem coe_sup (s t : Closeds α) : (↑(s ⊔ t) : Set α) = ↑s ∪ ↑t := by\n  rfl\n\n"}
{"name":"TopologicalSpace.Closeds.coe_inf","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.Closeds α\n⊢ Eq (↑(Min.min s t)) (Inter.inter ↑s ↑t)","decl":"@[simp, norm_cast]\ntheorem coe_inf (s t : Closeds α) : (↑(s ⊓ t) : Set α) = ↑s ∩ ↑t :=\n  rfl\n\n"}
{"name":"TopologicalSpace.Closeds.coe_top","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\n⊢ Eq (↑Top.top) Set.univ","decl":"@[simp, norm_cast]\ntheorem coe_top : (↑(⊤ : Closeds α) : Set α) = univ :=\n  rfl\n\n"}
{"name":"TopologicalSpace.Closeds.coe_eq_univ","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.Closeds α\n⊢ Iff (Eq (↑s) Set.univ) (Eq s Top.top)","decl":"@[simp, norm_cast]\ntheorem coe_eq_univ {s : Closeds α} : (s : Set α) = univ ↔ s = ⊤ :=\n  SetLike.coe_injective.eq_iff' rfl\n\n"}
{"name":"TopologicalSpace.Closeds.coe_bot","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\n⊢ Eq (↑Bot.bot) EmptyCollection.emptyCollection","decl":"@[simp, norm_cast]\ntheorem coe_bot : (↑(⊥ : Closeds α) : Set α) = ∅ :=\n  rfl\n\n"}
{"name":"TopologicalSpace.Closeds.coe_eq_empty","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.Closeds α\n⊢ Iff (Eq (↑s) EmptyCollection.emptyCollection) (Eq s Bot.bot)","decl":"@[simp, norm_cast]\ntheorem coe_eq_empty {s : Closeds α} : (s : Set α) = ∅ ↔ s = ⊥ :=\n  SetLike.coe_injective.eq_iff' rfl\n\n"}
{"name":"TopologicalSpace.Closeds.coe_nonempty","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.Closeds α\n⊢ Iff (↑s).Nonempty (Ne s Bot.bot)","decl":"theorem coe_nonempty {s : Closeds α} : (s : Set α).Nonempty ↔ s ≠ ⊥ :=\n  nonempty_iff_ne_empty.trans coe_eq_empty.not\n\n"}
{"name":"TopologicalSpace.Closeds.coe_sInf","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\nS : Set (TopologicalSpace.Closeds α)\n⊢ Eq (↑(InfSet.sInf S)) (Set.iInter fun i => Set.iInter fun h => ↑i)","decl":"@[simp, norm_cast]\ntheorem coe_sInf {S : Set (Closeds α)} : (↑(sInf S) : Set α) = ⋂ i ∈ S, ↑i :=\n  rfl\n\n"}
{"name":"TopologicalSpace.Closeds.coe_sSup","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\nS : Set (TopologicalSpace.Closeds α)\n⊢ Eq (↑(SupSet.sSup S)) (closure (Set.image SetLike.coe S).sUnion)","decl":"@[simp]\nlemma coe_sSup {S : Set (Closeds α)} : ((sSup S : Closeds α) : Set α) =\n    closure (⋃₀ ((↑) '' S)) := by rfl\n\n"}
{"name":"TopologicalSpace.Closeds.coe_finset_sup","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"ι : Type u_1\nα : Type u_2\ninst✝ : TopologicalSpace α\nf : ι → TopologicalSpace.Closeds α\ns : Finset ι\n⊢ Eq (↑(s.sup f)) (s.sup (Function.comp SetLike.coe f))","decl":"@[simp, norm_cast]\ntheorem coe_finset_sup (f : ι → Closeds α) (s : Finset ι) :\n    (↑(s.sup f) : Set α) = s.sup ((↑) ∘ f) :=\n  map_finset_sup (⟨⟨(↑), coe_sup⟩, coe_bot⟩ : SupBotHom (Closeds α) (Set α)) _ _\n\n"}
{"name":"TopologicalSpace.Closeds.coe_finset_inf","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"ι : Type u_1\nα : Type u_2\ninst✝ : TopologicalSpace α\nf : ι → TopologicalSpace.Closeds α\ns : Finset ι\n⊢ Eq (↑(s.inf f)) (s.inf (Function.comp SetLike.coe f))","decl":"@[simp, norm_cast]\ntheorem coe_finset_inf (f : ι → Closeds α) (s : Finset ι) :\n    (↑(s.inf f) : Set α) = s.inf ((↑) ∘ f) :=\n  map_finset_inf (⟨⟨(↑), coe_inf⟩, coe_top⟩ : InfTopHom (Closeds α) (Set α)) _ _\n\n-- Porting note: Lean 3 proofs didn't work as expected, so I reordered lemmas to fix&golf the proofs\n\n"}
{"name":"TopologicalSpace.Closeds.mem_sInf","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\nS : Set (TopologicalSpace.Closeds α)\nx : α\n⊢ Iff (Membership.mem (InfSet.sInf S) x) (∀ (s : TopologicalSpace.Closeds α), Membership.mem S s → Membership.mem s x)","decl":"@[simp]\ntheorem mem_sInf {S : Set (Closeds α)} {x : α} : x ∈ sInf S ↔ ∀ s ∈ S, x ∈ s := mem_iInter₂\n\n"}
{"name":"TopologicalSpace.Closeds.mem_iInf","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\nι : Sort u_4\nx : α\ns : ι → TopologicalSpace.Closeds α\n⊢ Iff (Membership.mem (iInf s) x) (∀ (i : ι), Membership.mem (s i) x)","decl":"@[simp]\ntheorem mem_iInf {ι} {x : α} {s : ι → Closeds α} : x ∈ iInf s ↔ ∀ i, x ∈ s i := by simp [iInf]\n\n"}
{"name":"TopologicalSpace.Closeds.coe_iInf","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\nι : Sort u_4\ns : ι → TopologicalSpace.Closeds α\n⊢ Eq (↑(iInf fun i => s i)) (Set.iInter fun i => ↑(s i))","decl":"@[simp, norm_cast]\ntheorem coe_iInf {ι} (s : ι → Closeds α) : ((⨅ i, s i : Closeds α) : Set α) = ⋂ i, s i := by\n  ext; simp\n\n"}
{"name":"TopologicalSpace.Closeds.iInf_def","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\nι : Sort u_4\ns : ι → TopologicalSpace.Closeds α\n⊢ Eq (iInf fun i => s i) { carrier := Set.iInter fun i => ↑(s i), closed' := ⋯ }","decl":"theorem iInf_def {ι} (s : ι → Closeds α) :\n    ⨅ i, s i = ⟨⋂ i, s i, isClosed_iInter fun i => (s i).2⟩ := by ext1; simp\n\n"}
{"name":"TopologicalSpace.Closeds.iInf_mk","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\nι : Sort u_4\ns : ι → Set α\nh : ∀ (i : ι), IsClosed (s i)\n⊢ Eq (iInf fun i => { carrier := s i, closed' := ⋯ }) { carrier := Set.iInter fun i => s i, closed' := ⋯ }","decl":"@[simp]\ntheorem iInf_mk {ι} (s : ι → Set α) (h : ∀ i, IsClosed (s i)) :\n    (⨅ i, ⟨s i, h i⟩ : Closeds α) = ⟨⋂ i, s i, isClosed_iInter h⟩ :=\n  iInf_def _\n\n"}
{"name":"TopologicalSpace.Closeds.coe_singleton","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : T1Space α\nx : α\n⊢ Eq (↑(TopologicalSpace.Closeds.singleton x)) (Singleton.singleton x)","decl":"/-- The term of `TopologicalSpace.Closeds α` corresponding to a singleton. -/\n@[simps]\ndef singleton [T1Space α] (x : α) : Closeds α :=\n  ⟨{x}, isClosed_singleton⟩\n\n"}
{"name":"TopologicalSpace.Closeds.mem_singleton","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : T1Space α\na b : α\n⊢ Iff (Membership.mem (TopologicalSpace.Closeds.singleton b) a) (Eq a b)","decl":"@[simp] lemma mem_singleton [T1Space α] {a b : α} : a ∈ singleton b ↔ a = b := Iff.rfl\n\n"}
{"name":"TopologicalSpace.Closeds.coe_compl","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.Closeds α\n⊢ Eq (↑s.compl) (HasCompl.compl ↑s)","decl":"/-- The complement of a closed set as an open set. -/\n@[simps]\ndef Closeds.compl (s : Closeds α) : Opens α :=\n  ⟨sᶜ, s.2.isOpen_compl⟩\n\n"}
{"name":"TopologicalSpace.Opens.coe_compl","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.Opens α\n⊢ Eq (↑s.compl) (HasCompl.compl ↑s)","decl":"/-- The complement of an open set as a closed set. -/\n@[simps]\ndef Opens.compl (s : Opens α) : Closeds α :=\n  ⟨sᶜ, s.2.isClosed_compl⟩\n\n"}
{"name":"TopologicalSpace.Closeds.compl_compl","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.Closeds α\n⊢ Eq s.compl.compl s","decl":"nonrec theorem Closeds.compl_compl (s : Closeds α) : s.compl.compl = s :=\n  Closeds.ext (compl_compl (s : Set α))\n\n"}
{"name":"TopologicalSpace.Opens.compl_compl","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.Opens α\n⊢ Eq s.compl.compl s","decl":"nonrec theorem Opens.compl_compl (s : Opens α) : s.compl.compl = s :=\n  Opens.ext (compl_compl (s : Set α))\n\n"}
{"name":"TopologicalSpace.Closeds.compl_bijective","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\n⊢ Function.Bijective TopologicalSpace.Closeds.compl","decl":"theorem Closeds.compl_bijective : Function.Bijective (@Closeds.compl α _) :=\n  Function.bijective_iff_has_inverse.mpr ⟨Opens.compl, Closeds.compl_compl, Opens.compl_compl⟩\n\n"}
{"name":"TopologicalSpace.Opens.compl_bijective","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\n⊢ Function.Bijective TopologicalSpace.Opens.compl","decl":"theorem Opens.compl_bijective : Function.Bijective (@Opens.compl α _) :=\n  Function.bijective_iff_has_inverse.mpr ⟨Closeds.compl, Opens.compl_compl, Closeds.compl_compl⟩\n\n"}
{"name":"TopologicalSpace.Closeds.complOrderIso_apply","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\na✝ : TopologicalSpace.Closeds α\n⊢ Eq ((TopologicalSpace.Closeds.complOrderIso α) a✝) (Function.comp (⇑OrderDual.toDual) TopologicalSpace.Closeds.compl a✝)","decl":"/-- `TopologicalSpace.Closeds.compl` as an `OrderIso` to the order dual of\n`TopologicalSpace.Opens α`. -/\n@[simps]\ndef Closeds.complOrderIso : Closeds α ≃o (Opens α)ᵒᵈ where\n  toFun := OrderDual.toDual ∘ Closeds.compl\n  invFun := Opens.compl ∘ OrderDual.ofDual\n  left_inv s := by simp [Closeds.compl_compl]\n  right_inv s := by simp [Opens.compl_compl]\n  map_rel_iff' := (@OrderDual.toDual_le_toDual (Opens α)).trans compl_subset_compl\n\n"}
{"name":"TopologicalSpace.Closeds.complOrderIso_symm_apply","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\na✝ : OrderDual (TopologicalSpace.Opens α)\n⊢ Eq ((RelIso.symm (TopologicalSpace.Closeds.complOrderIso α)) a✝) (Function.comp TopologicalSpace.Opens.compl (⇑OrderDual.ofDual) a✝)","decl":"/-- `TopologicalSpace.Closeds.compl` as an `OrderIso` to the order dual of\n`TopologicalSpace.Opens α`. -/\n@[simps]\ndef Closeds.complOrderIso : Closeds α ≃o (Opens α)ᵒᵈ where\n  toFun := OrderDual.toDual ∘ Closeds.compl\n  invFun := Opens.compl ∘ OrderDual.ofDual\n  left_inv s := by simp [Closeds.compl_compl]\n  right_inv s := by simp [Opens.compl_compl]\n  map_rel_iff' := (@OrderDual.toDual_le_toDual (Opens α)).trans compl_subset_compl\n\n"}
{"name":"TopologicalSpace.Opens.complOrderIso_symm_apply","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\na✝ : OrderDual (TopologicalSpace.Closeds α)\n⊢ Eq ((RelIso.symm (TopologicalSpace.Opens.complOrderIso α)) a✝) (Function.comp TopologicalSpace.Closeds.compl (⇑OrderDual.ofDual) a✝)","decl":"/-- `TopologicalSpace.Opens.compl` as an `OrderIso` to the order dual of\n`TopologicalSpace.Closeds α`. -/\n@[simps]\ndef Opens.complOrderIso : Opens α ≃o (Closeds α)ᵒᵈ where\n  toFun := OrderDual.toDual ∘ Opens.compl\n  invFun := Closeds.compl ∘ OrderDual.ofDual\n  left_inv s := by simp [Opens.compl_compl]\n  right_inv s := by simp [Closeds.compl_compl]\n  map_rel_iff' := (@OrderDual.toDual_le_toDual (Closeds α)).trans compl_subset_compl\n\n"}
{"name":"TopologicalSpace.Opens.complOrderIso_apply","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\na✝ : TopologicalSpace.Opens α\n⊢ Eq ((TopologicalSpace.Opens.complOrderIso α) a✝) (Function.comp (⇑OrderDual.toDual) TopologicalSpace.Opens.compl a✝)","decl":"/-- `TopologicalSpace.Opens.compl` as an `OrderIso` to the order dual of\n`TopologicalSpace.Closeds α`. -/\n@[simps]\ndef Opens.complOrderIso : Opens α ≃o (Closeds α)ᵒᵈ where\n  toFun := OrderDual.toDual ∘ Opens.compl\n  invFun := Closeds.compl ∘ OrderDual.ofDual\n  left_inv s := by simp [Opens.compl_compl]\n  right_inv s := by simp [Closeds.compl_compl]\n  map_rel_iff' := (@OrderDual.toDual_le_toDual (Closeds α)).trans compl_subset_compl\n\n"}
{"name":"TopologicalSpace.Closeds.coe_eq_singleton_of_isAtom","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : T0Space α\ns : TopologicalSpace.Closeds α\nhs : IsAtom s\n⊢ Exists fun a => Eq (↑s) (Singleton.singleton a)","decl":"lemma Closeds.coe_eq_singleton_of_isAtom [T0Space α] {s : Closeds α} (hs : IsAtom s) :\n    ∃ a, (s : Set α) = {a} := by\n  refine minimal_nonempty_closed_eq_singleton s.2 (coe_nonempty.2 hs.1) fun t hts ht ht' ↦ ?_\n  lift t to Closeds α using ht'\n  exact SetLike.coe_injective.eq_iff.2 <| (hs.le_iff_eq <| coe_nonempty.1 ht).1 hts\n\n"}
{"name":"TopologicalSpace.Closeds.isAtom_coe","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : T1Space α\ns : TopologicalSpace.Closeds α\n⊢ Iff (IsAtom ↑s) (IsAtom s)","decl":"@[simp, norm_cast] lemma Closeds.isAtom_coe [T1Space α] {s : Closeds α} :\n    IsAtom (s : Set α) ↔ IsAtom s :=\n  Closeds.gi.isAtom_iff' rfl\n    (fun t ht ↦ by obtain ⟨x, rfl⟩ := Set.isAtom_iff.1 ht; exact closure_singleton) s\n\n"}
{"name":"TopologicalSpace.Closeds.isAtom_iff","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : T1Space α\ns : TopologicalSpace.Closeds α\n⊢ Iff (IsAtom s) (Exists fun x => Eq s (TopologicalSpace.Closeds.singleton x))","decl":"/-- in a `T1Space`, atoms of `TopologicalSpace.Closeds α` are precisely the\n`TopologicalSpace.Closeds.singleton`s. -/\ntheorem Closeds.isAtom_iff [T1Space α] {s : Closeds α} :\n    IsAtom s ↔ ∃ x, s = Closeds.singleton x := by\n  simp [← Closeds.isAtom_coe, Set.isAtom_iff, SetLike.ext_iff, Set.ext_iff]\n\n"}
{"name":"TopologicalSpace.Opens.isCoatom_iff","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : T1Space α\ns : TopologicalSpace.Opens α\n⊢ Iff (IsCoatom s) (Exists fun x => Eq s (TopologicalSpace.Closeds.singleton x).compl)","decl":"/-- in a `T1Space`, coatoms of `TopologicalSpace.Opens α` are precisely complements of singletons:\n`(TopologicalSpace.Closeds.singleton x).compl`. -/\ntheorem Opens.isCoatom_iff [T1Space α] {s : Opens α} :\n    IsCoatom s ↔ ∃ x, s = (Closeds.singleton x).compl := by\n  rw [← s.compl_compl, ← isAtom_dual_iff_isCoatom]\n  change IsAtom (Closeds.complOrderIso α s.compl) ↔ _\n  simp only [(Closeds.complOrderIso α).isAtom_iff, Closeds.isAtom_iff,\n    Closeds.compl_bijective.injective.eq_iff]\n\n"}
{"name":"TopologicalSpace.Clopens.isClopen'","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_4\ninst✝ : TopologicalSpace α\nself : TopologicalSpace.Clopens α\n⊢ IsClopen self.carrier","decl":"/-- The type of clopen sets of a topological space. -/\nstructure Clopens (α : Type*) [TopologicalSpace α] where\n  /-- the carrier set, i.e. the points in this set -/\n  carrier : Set α\n  isClopen' : IsClopen carrier\n\n"}
{"name":"TopologicalSpace.Clopens.mk.injEq","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_4\ninst✝ : TopologicalSpace α\ncarrier✝ : Set α\nisClopen'✝ : IsClopen carrier✝\ncarrier : Set α\nisClopen' : IsClopen carrier\n⊢ Eq (Eq { carrier := carrier✝, isClopen' := isClopen'✝ } { carrier := carrier, isClopen' := isClopen' }) (Eq carrier✝ carrier)","decl":"/-- The type of clopen sets of a topological space. -/\nstructure Clopens (α : Type*) [TopologicalSpace α] where\n  /-- the carrier set, i.e. the points in this set -/\n  carrier : Set α\n  isClopen' : IsClopen carrier\n\n"}
{"name":"TopologicalSpace.Clopens.mk.sizeOf_spec","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_4\ninst✝¹ : TopologicalSpace α\ninst✝ : SizeOf α\ncarrier : Set α\nisClopen' : IsClopen carrier\n⊢ Eq (SizeOf.sizeOf { carrier := carrier, isClopen' := isClopen' }) (HAdd.hAdd 1 (SizeOf.sizeOf isClopen'))","decl":"/-- The type of clopen sets of a topological space. -/\nstructure Clopens (α : Type*) [TopologicalSpace α] where\n  /-- the carrier set, i.e. the points in this set -/\n  carrier : Set α\n  isClopen' : IsClopen carrier\n\n"}
{"name":"TopologicalSpace.Clopens.mk.inj","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_4\ninst✝ : TopologicalSpace α\ncarrier✝ : Set α\nisClopen'✝ : IsClopen carrier✝\ncarrier : Set α\nisClopen' : IsClopen carrier\nx✝ : Eq { carrier := carrier✝, isClopen' := isClopen'✝ } { carrier := carrier, isClopen' := isClopen' }\n⊢ Eq carrier✝ carrier","decl":"/-- The type of clopen sets of a topological space. -/\nstructure Clopens (α : Type*) [TopologicalSpace α] where\n  /-- the carrier set, i.e. the points in this set -/\n  carrier : Set α\n  isClopen' : IsClopen carrier\n\n"}
{"name":"TopologicalSpace.Clopens.isClopen","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.Clopens α\n⊢ IsClopen ↑s","decl":"theorem isClopen (s : Clopens α) : IsClopen (s : Set α) :=\n  s.isClopen'\n\n"}
{"name":"TopologicalSpace.Clopens.coe_toOpens","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.Clopens α\n⊢ Eq ↑s.toOpens ↑s","decl":"/-- Reinterpret a clopen as an open. -/\n@[simps]\ndef toOpens (s : Clopens α) : Opens α :=\n  ⟨s, s.isClopen.isOpen⟩\n\n"}
{"name":"TopologicalSpace.Clopens.ext_iff","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.Clopens α\n⊢ Iff (Eq s t) (Eq ↑s ↑t)","decl":"@[ext]\nprotected theorem ext {s t : Clopens α} (h : (s : Set α) = t) : s = t :=\n  SetLike.ext' h\n\n"}
{"name":"TopologicalSpace.Clopens.ext","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.Clopens α\nh : Eq ↑s ↑t\n⊢ Eq s t","decl":"@[ext]\nprotected theorem ext {s t : Clopens α} (h : (s : Set α) = t) : s = t :=\n  SetLike.ext' h\n\n"}
{"name":"TopologicalSpace.Clopens.coe_mk","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns : Set α\nh : IsClopen s\n⊢ Eq (↑{ carrier := s, isClopen' := h }) s","decl":"@[simp]\ntheorem coe_mk (s : Set α) (h) : (mk s h : Set α) = s :=\n  rfl\n\n"}
{"name":"TopologicalSpace.Clopens.mem_mk","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns : Set α\nx : α\nh : IsClopen s\n⊢ Iff (Membership.mem { carrier := s, isClopen' := h } x) (Membership.mem s x)","decl":"@[simp] lemma mem_mk {s : Set α} {x h} : x ∈ mk s h ↔ x ∈ s := .rfl\n\n"}
{"name":"TopologicalSpace.Clopens.coe_sup","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.Clopens α\n⊢ Eq (↑(Max.max s t)) (Union.union ↑s ↑t)","decl":"@[simp, norm_cast] lemma coe_sup (s t : Clopens α) : ↑(s ⊔ t) = (s ∪ t : Set α) := rfl\n"}
{"name":"TopologicalSpace.Clopens.coe_inf","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.Clopens α\n⊢ Eq (↑(Min.min s t)) (Inter.inter ↑s ↑t)","decl":"@[simp, norm_cast] lemma coe_inf (s t : Clopens α) : ↑(s ⊓ t) = (s ∩ t : Set α) := rfl\n"}
{"name":"TopologicalSpace.Clopens.coe_top","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\n⊢ Eq (↑Top.top) Set.univ","decl":"@[simp, norm_cast] lemma coe_top : (↑(⊤ : Clopens α) : Set α) = univ := rfl\n"}
{"name":"TopologicalSpace.Clopens.coe_bot","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\n⊢ Eq (↑Bot.bot) EmptyCollection.emptyCollection","decl":"@[simp, norm_cast] lemma coe_bot : (↑(⊥ : Clopens α) : Set α) = ∅ := rfl\n"}
{"name":"TopologicalSpace.Clopens.coe_sdiff","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.Clopens α\n⊢ Eq (↑(SDiff.sdiff s t)) (SDiff.sdiff ↑s ↑t)","decl":"@[simp, norm_cast] lemma coe_sdiff (s t : Clopens α) : ↑(s \\ t) = (s \\ t : Set α) := rfl\n"}
{"name":"TopologicalSpace.Clopens.coe_himp","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.Clopens α\n⊢ Eq (↑(HImp.himp s t)) (HImp.himp ↑s ↑t)","decl":"@[simp, norm_cast] lemma coe_himp (s t : Clopens α) : ↑(s ⇨ t) = (s ⇨ t : Set α) := rfl\n"}
{"name":"TopologicalSpace.Clopens.coe_compl","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.Clopens α\n⊢ Eq (↑(HasCompl.compl s)) (HasCompl.compl ↑s)","decl":"@[simp, norm_cast] lemma coe_compl (s : Clopens α) : (↑sᶜ : Set α) = (↑s)ᶜ := rfl\n\n"}
{"name":"TopologicalSpace.Clopens.mem_prod","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\ns : TopologicalSpace.Clopens α\nt : TopologicalSpace.Clopens β\nx : Prod α β\n⊢ Iff (Membership.mem (SProd.sprod s t) x) (And (Membership.mem s x.1) (Membership.mem t x.2))","decl":"@[simp]\nprotected lemma mem_prod {s : Clopens α} {t : Clopens β} {x : α × β} :\n    x ∈ s ×ˢ t ↔ x.1 ∈ s ∧ x.2 ∈ t := .rfl\n\n"}
{"name":"TopologicalSpace.IrreducibleCloseds.mk.injEq","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_4\ninst✝ : TopologicalSpace α\ncarrier✝ : Set α\nis_irreducible'✝ : IsIrreducible carrier✝\nis_closed'✝ : IsClosed carrier✝\ncarrier : Set α\nis_irreducible' : IsIrreducible carrier\nis_closed' : IsClosed carrier\n⊢ Eq (Eq { carrier := carrier✝, is_irreducible' := is_irreducible'✝, is_closed' := is_closed'✝ } { carrier := carrier, is_irreducible' := is_irreducible', is_closed' := is_closed' }) (Eq carrier✝ carrier)","decl":"/-- The type of irreducible closed subsets of a topological space. -/\nstructure IrreducibleCloseds (α : Type*) [TopologicalSpace α] where\n  /-- the carrier set, i.e. the points in this set -/\n  carrier : Set α\n  is_irreducible' : IsIrreducible carrier\n  is_closed' : IsClosed carrier\n\n"}
{"name":"TopologicalSpace.IrreducibleCloseds.mk.sizeOf_spec","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_4\ninst✝¹ : TopologicalSpace α\ninst✝ : SizeOf α\ncarrier : Set α\nis_irreducible' : IsIrreducible carrier\nis_closed' : IsClosed carrier\n⊢ Eq (SizeOf.sizeOf { carrier := carrier, is_irreducible' := is_irreducible', is_closed' := is_closed' }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf is_irreducible')) (SizeOf.sizeOf is_closed'))","decl":"/-- The type of irreducible closed subsets of a topological space. -/\nstructure IrreducibleCloseds (α : Type*) [TopologicalSpace α] where\n  /-- the carrier set, i.e. the points in this set -/\n  carrier : Set α\n  is_irreducible' : IsIrreducible carrier\n  is_closed' : IsClosed carrier\n\n"}
{"name":"TopologicalSpace.IrreducibleCloseds.mk.inj","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_4\ninst✝ : TopologicalSpace α\ncarrier✝ : Set α\nis_irreducible'✝ : IsIrreducible carrier✝\nis_closed'✝ : IsClosed carrier✝\ncarrier : Set α\nis_irreducible' : IsIrreducible carrier\nis_closed' : IsClosed carrier\nx✝ : Eq { carrier := carrier✝, is_irreducible' := is_irreducible'✝, is_closed' := is_closed'✝ } { carrier := carrier, is_irreducible' := is_irreducible', is_closed' := is_closed' }\n⊢ Eq carrier✝ carrier","decl":"/-- The type of irreducible closed subsets of a topological space. -/\nstructure IrreducibleCloseds (α : Type*) [TopologicalSpace α] where\n  /-- the carrier set, i.e. the points in this set -/\n  carrier : Set α\n  is_irreducible' : IsIrreducible carrier\n  is_closed' : IsClosed carrier\n\n"}
{"name":"TopologicalSpace.IrreducibleCloseds.is_irreducible'","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_4\ninst✝ : TopologicalSpace α\nself : TopologicalSpace.IrreducibleCloseds α\n⊢ IsIrreducible self.carrier","decl":"/-- The type of irreducible closed subsets of a topological space. -/\nstructure IrreducibleCloseds (α : Type*) [TopologicalSpace α] where\n  /-- the carrier set, i.e. the points in this set -/\n  carrier : Set α\n  is_irreducible' : IsIrreducible carrier\n  is_closed' : IsClosed carrier\n\n"}
{"name":"TopologicalSpace.IrreducibleCloseds.is_closed'","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_4\ninst✝ : TopologicalSpace α\nself : TopologicalSpace.IrreducibleCloseds α\n⊢ IsClosed self.carrier","decl":"/-- The type of irreducible closed subsets of a topological space. -/\nstructure IrreducibleCloseds (α : Type*) [TopologicalSpace α] where\n  /-- the carrier set, i.e. the points in this set -/\n  carrier : Set α\n  is_irreducible' : IsIrreducible carrier\n  is_closed' : IsClosed carrier\n\n"}
{"name":"TopologicalSpace.IrreducibleCloseds.instCanLiftSetCoeAndIsIrreducibleIsClosed","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\n⊢ CanLift (Set α) (TopologicalSpace.IrreducibleCloseds α) SetLike.coe fun s => And (IsIrreducible s) (IsClosed s)","decl":"instance : CanLift (Set α) (IrreducibleCloseds α) (↑) (fun s ↦ IsIrreducible s ∧ IsClosed s) where\n  prf s hs := ⟨⟨s, hs.1, hs.2⟩, rfl⟩\n\n"}
{"name":"TopologicalSpace.IrreducibleCloseds.isIrreducible","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.IrreducibleCloseds α\n⊢ IsIrreducible ↑s","decl":"theorem isIrreducible (s : IrreducibleCloseds α) : IsIrreducible (s : Set α) := s.is_irreducible'\n\n"}
{"name":"TopologicalSpace.IrreducibleCloseds.isClosed","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns : TopologicalSpace.IrreducibleCloseds α\n⊢ IsClosed ↑s","decl":"theorem isClosed (s : IrreducibleCloseds α) : IsClosed (s : Set α) := s.is_closed'\n\n"}
{"name":"TopologicalSpace.IrreducibleCloseds.ext","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.IrreducibleCloseds α\nh : Eq ↑s ↑t\n⊢ Eq s t","decl":"@[ext]\nprotected theorem ext {s t : IrreducibleCloseds α} (h : (s : Set α) = t) : s = t :=\n  SetLike.ext' h\n\n"}
{"name":"TopologicalSpace.IrreducibleCloseds.ext_iff","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns t : TopologicalSpace.IrreducibleCloseds α\n⊢ Iff (Eq s t) (Eq ↑s ↑t)","decl":"@[ext]\nprotected theorem ext {s t : IrreducibleCloseds α} (h : (s : Set α) = t) : s = t :=\n  SetLike.ext' h\n\n"}
{"name":"TopologicalSpace.IrreducibleCloseds.coe_mk","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\ns : Set α\nh : IsIrreducible s\nh' : IsClosed s\n⊢ Eq (↑{ carrier := s, is_irreducible' := h, is_closed' := h' }) s","decl":"@[simp]\ntheorem coe_mk (s : Set α) (h : IsIrreducible s) (h' : IsClosed s) : (mk s h h' : Set α) = s :=\n  rfl\n\n"}
{"name":"TopologicalSpace.IrreducibleCloseds.coe_singleton","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : T1Space α\nx : α\n⊢ Eq (↑(TopologicalSpace.IrreducibleCloseds.singleton x)) (Singleton.singleton x)","decl":"/-- The term of `TopologicalSpace.IrreducibleCloseds α` corresponding to a singleton. -/\n@[simps]\ndef singleton [T1Space α] (x : α) : IrreducibleCloseds α :=\n  ⟨{x}, isIrreducible_singleton, isClosed_singleton⟩\n\n"}
{"name":"TopologicalSpace.IrreducibleCloseds.mem_singleton","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : T1Space α\na b : α\n⊢ Iff (Membership.mem (TopologicalSpace.IrreducibleCloseds.singleton b) a) (Eq a b)","decl":"@[simp] lemma mem_singleton [T1Space α] {a b : α} : a ∈ singleton b ↔ a = b := Iff.rfl\n\n"}
{"name":"TopologicalSpace.IrreducibleCloseds.equivSubtype_symm_apply","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\na : Subtype fun x => And (IsIrreducible x) (IsClosed x)\n⊢ Eq (TopologicalSpace.IrreducibleCloseds.equivSubtype.symm a) { carrier := ↑a, is_irreducible' := ⋯, is_closed' := ⋯ }","decl":"/--\nThe equivalence between `IrreducibleCloseds α` and `{x : Set α // IsIrreducible x ∧ IsClosed x }`.\n-/\n@[simps apply symm_apply]\ndef equivSubtype : IrreducibleCloseds α ≃ { x : Set α // IsIrreducible x ∧ IsClosed x } where\n  toFun a   := ⟨a.1, a.2, a.3⟩\n  invFun a  := ⟨a.1, a.2.1, a.2.2⟩\n  left_inv  := fun ⟨_, _, _⟩ => rfl\n  right_inv := fun ⟨_, _, _⟩ => rfl\n\n"}
{"name":"TopologicalSpace.IrreducibleCloseds.equivSubtype_apply","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\na : TopologicalSpace.IrreducibleCloseds α\n⊢ Eq (TopologicalSpace.IrreducibleCloseds.equivSubtype a) ⟨a.carrier, ⋯⟩","decl":"/--\nThe equivalence between `IrreducibleCloseds α` and `{x : Set α // IsIrreducible x ∧ IsClosed x }`.\n-/\n@[simps apply symm_apply]\ndef equivSubtype : IrreducibleCloseds α ≃ { x : Set α // IsIrreducible x ∧ IsClosed x } where\n  toFun a   := ⟨a.1, a.2, a.3⟩\n  invFun a  := ⟨a.1, a.2.1, a.2.2⟩\n  left_inv  := fun ⟨_, _, _⟩ => rfl\n  right_inv := fun ⟨_, _, _⟩ => rfl\n\n"}
{"name":"TopologicalSpace.IrreducibleCloseds.equivSubtype'_apply","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\na : TopologicalSpace.IrreducibleCloseds α\n⊢ Eq (TopologicalSpace.IrreducibleCloseds.equivSubtype' a) ⟨a.carrier, ⋯⟩","decl":"/--\nThe equivalence between `IrreducibleCloseds α` and `{x : Set α // IsClosed x ∧ IsIrreducible x }`.\n-/\n@[simps apply symm_apply]\ndef equivSubtype' : IrreducibleCloseds α ≃ { x : Set α // IsClosed x ∧ IsIrreducible x } where\n  toFun a   := ⟨a.1, a.3, a.2⟩\n  invFun a  := ⟨a.1, a.2.2, a.2.1⟩\n  left_inv  := fun ⟨_, _, _⟩ => rfl\n  right_inv := fun ⟨_, _, _⟩ => rfl\n\n"}
{"name":"TopologicalSpace.IrreducibleCloseds.equivSubtype'_symm_apply","module":"Mathlib.Topology.Sets.Closeds","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\na : Subtype fun x => And (IsClosed x) (IsIrreducible x)\n⊢ Eq (TopologicalSpace.IrreducibleCloseds.equivSubtype'.symm a) { carrier := ↑a, is_irreducible' := ⋯, is_closed' := ⋯ }","decl":"/--\nThe equivalence between `IrreducibleCloseds α` and `{x : Set α // IsClosed x ∧ IsIrreducible x }`.\n-/\n@[simps apply symm_apply]\ndef equivSubtype' : IrreducibleCloseds α ≃ { x : Set α // IsClosed x ∧ IsIrreducible x } where\n  toFun a   := ⟨a.1, a.3, a.2⟩\n  invFun a  := ⟨a.1, a.2.2, a.2.1⟩\n  left_inv  := fun ⟨_, _, _⟩ => rfl\n  right_inv := fun ⟨_, _, _⟩ => rfl\n\n"}
