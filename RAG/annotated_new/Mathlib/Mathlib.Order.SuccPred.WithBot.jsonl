{"name":"WithBot.succ_bot","module":"Mathlib.Order.SuccPred.WithBot","initialProofState":"α : Type u_1\ninst✝² : Preorder α\ninst✝¹ : OrderBot α\ninst✝ : SuccOrder α\n⊢ Eq Bot.bot.succ Bot.bot","decl":"/-- Not to be confused with `WithBot.orderSucc_bot`, which is about `Order.succ`. -/\n@[simp] lemma succ_bot : succ (⊥ : WithBot α) = ⊥ := rfl\n\n"}
{"name":"WithBot.succ_coe","module":"Mathlib.Order.SuccPred.WithBot","initialProofState":"α : Type u_1\ninst✝² : Preorder α\ninst✝¹ : OrderBot α\ninst✝ : SuccOrder α\na : α\n⊢ Eq (↑a).succ (Order.succ a)","decl":"/-- Not to be confused with `WithBot.orderSucc_coe`, which is about `Order.succ`. -/\n@[simp] lemma succ_coe (a : α) : succ (a : WithBot α) = Order.succ a := rfl\n\n"}
{"name":"WithBot.succ_eq_succ","module":"Mathlib.Order.SuccPred.WithBot","initialProofState":"α : Type u_1\ninst✝² : Preorder α\ninst✝¹ : OrderBot α\ninst✝ : SuccOrder α\na : WithBot α\n⊢ Eq (↑a.succ) (Order.succ a)","decl":"lemma succ_eq_succ : ∀ a : WithBot α, succ a = Order.succ a\n  | ⊥ => rfl\n  | (a : α) => rfl\n\n"}
{"name":"WithBot.succ_mono","module":"Mathlib.Order.SuccPred.WithBot","initialProofState":"α : Type u_1\ninst✝² : Preorder α\ninst✝¹ : OrderBot α\ninst✝ : SuccOrder α\n⊢ Monotone WithBot.succ","decl":"lemma succ_mono : Monotone (succ : WithBot α → α)\n  | ⊥, _, _ => by simp\n  | (a : α), ⊥, hab => by simp at hab\n  | (a : α), (b : α), hab => Order.succ_le_succ (by simpa using hab)\n\n"}
{"name":"WithBot.succ_strictMono","module":"Mathlib.Order.SuccPred.WithBot","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : OrderBot α\ninst✝¹ : SuccOrder α\ninst✝ : NoMaxOrder α\n⊢ StrictMono WithBot.succ","decl":"lemma succ_strictMono [NoMaxOrder α] : StrictMono (succ : WithBot α → α)\n  | ⊥, (b : α), hab => by simp\n  | (a : α), (b : α), hab => Order.succ_lt_succ (by simpa using hab)\n\n"}
{"name":"WithBot.succ_le_succ","module":"Mathlib.Order.SuccPred.WithBot","initialProofState":"α : Type u_1\ninst✝² : Preorder α\ninst✝¹ : OrderBot α\ninst✝ : SuccOrder α\nx y : WithBot α\nhxy : LE.le x y\n⊢ LE.le x.succ y.succ","decl":"@[gcongr] lemma succ_le_succ (hxy : x ≤ y) : x.succ ≤ y.succ := succ_mono hxy\n"}
{"name":"WithBot.succ_lt_succ","module":"Mathlib.Order.SuccPred.WithBot","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : OrderBot α\ninst✝¹ : SuccOrder α\nx y : WithBot α\ninst✝ : NoMaxOrder α\nhxy : LT.lt x y\n⊢ LT.lt x.succ y.succ","decl":"@[gcongr] lemma succ_lt_succ [NoMaxOrder α] (hxy : x < y) : x.succ < y.succ := succ_strictMono hxy\n\n"}
{"name":"WithTop.pred_top","module":"Mathlib.Order.SuccPred.WithBot","initialProofState":"α : Type u_1\ninst✝² : Preorder α\ninst✝¹ : OrderTop α\ninst✝ : PredOrder α\n⊢ Eq Top.top.pred Top.top","decl":"/-- Not to be confused with `WithTop.orderPred_top`, which is about `Order.pred`. -/\n@[simp] lemma pred_top : pred (⊤ : WithTop α) = ⊤ := rfl\n\n"}
{"name":"WithTop.pred_coe","module":"Mathlib.Order.SuccPred.WithBot","initialProofState":"α : Type u_1\ninst✝² : Preorder α\ninst✝¹ : OrderTop α\ninst✝ : PredOrder α\na : α\n⊢ Eq (↑a).pred (Order.pred a)","decl":"/-- Not to be confused with `WithTop.orderPred_coe`, which is about `Order.pred`. -/\n@[simp] lemma pred_coe (a : α) : pred (a : WithTop α) = Order.pred a := rfl\n\n"}
{"name":"WithTop.pred_eq_pred","module":"Mathlib.Order.SuccPred.WithBot","initialProofState":"α : Type u_1\ninst✝² : Preorder α\ninst✝¹ : OrderTop α\ninst✝ : PredOrder α\na : WithTop α\n⊢ Eq (↑a.pred) (Order.pred a)","decl":"lemma pred_eq_pred : ∀ a : WithTop α, pred a = Order.pred a\n  | ⊤ => rfl\n  | (a : α) => rfl\n\n"}
{"name":"WithTop.pred_mono","module":"Mathlib.Order.SuccPred.WithBot","initialProofState":"α : Type u_1\ninst✝² : Preorder α\ninst✝¹ : OrderTop α\ninst✝ : PredOrder α\n⊢ Monotone WithTop.pred","decl":"lemma pred_mono : Monotone (pred : WithTop α → α)\n  | _, ⊤, _ => by simp\n  | ⊤, (a : α), hab => by simp at hab\n  | (a : α), (b : α), hab => Order.pred_le_pred (by simpa using hab)\n\n"}
{"name":"WithTop.pred_strictMono","module":"Mathlib.Order.SuccPred.WithBot","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : OrderTop α\ninst✝¹ : PredOrder α\ninst✝ : NoMinOrder α\n⊢ StrictMono WithTop.pred","decl":"lemma pred_strictMono [NoMinOrder α] : StrictMono (pred : WithTop α → α)\n  | (b : α), ⊤, hab => by simp\n  | (a : α), (b : α), hab => Order.pred_lt_pred (by simpa using hab)\n\n"}
{"name":"WithTop.pred_le_pred","module":"Mathlib.Order.SuccPred.WithBot","initialProofState":"α : Type u_1\ninst✝² : Preorder α\ninst✝¹ : OrderTop α\ninst✝ : PredOrder α\nx y : WithTop α\nhxy : LE.le x y\n⊢ LE.le x.pred y.pred","decl":"@[gcongr] lemma pred_le_pred (hxy : x ≤ y) : x.pred ≤ y.pred := pred_mono hxy\n"}
{"name":"WithTop.pred_lt_pred","module":"Mathlib.Order.SuccPred.WithBot","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : OrderTop α\ninst✝¹ : PredOrder α\nx y : WithTop α\ninst✝ : NoMinOrder α\nhxy : LT.lt x y\n⊢ LT.lt x.pred y.pred","decl":"@[gcongr] lemma pred_lt_pred [NoMinOrder α] (hxy : x < y) : x.pred < y.pred := pred_strictMono hxy\n\n"}
