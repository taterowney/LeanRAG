{"name":"Pairwise.mono","module":"Mathlib.Logic.Pairwise","initialProofState":"α : Type u_1\nr p : α → α → Prop\nhr : Pairwise r\nh : ∀ ⦃i j : α⦄, r i j → p i j\n⊢ Pairwise p","decl":"theorem Pairwise.mono (hr : Pairwise r) (h : ∀ ⦃i j⦄, r i j → p i j) : Pairwise p :=\n  fun _i _j hij => h <| hr hij\n\n"}
{"name":"Pairwise.eq","module":"Mathlib.Logic.Pairwise","initialProofState":"α : Type u_1\nr : α → α → Prop\na b : α\nh : Pairwise r\na✝ : Not (r a b)\n⊢ Eq a b","decl":"protected theorem Pairwise.eq (h : Pairwise r) : ¬r a b → a = b :=\n  not_imp_comm.1 <| @h _ _\n\n"}
{"name":"Subsingleton.pairwise","module":"Mathlib.Logic.Pairwise","initialProofState":"α : Type u_1\nr : α → α → Prop\ninst✝ : Subsingleton α\n⊢ Pairwise r","decl":"protected lemma Subsingleton.pairwise [Subsingleton α] : Pairwise r :=\n  fun _ _ h ↦ False.elim <| h.elim <| Subsingleton.elim _ _\n\n"}
{"name":"Function.injective_iff_pairwise_ne","module":"Mathlib.Logic.Pairwise","initialProofState":"α : Type u_1\nι : Type u_3\nf : ι → α\n⊢ Iff (Function.Injective f) (Pairwise (Function.onFun (fun x1 x2 => Ne x1 x2) f))","decl":"theorem Function.injective_iff_pairwise_ne : Injective f ↔ Pairwise ((· ≠ ·) on f) :=\n  forall₂_congr fun _i _j => not_imp_not.symm\n\n"}
{"name":"Function.Injective.pairwise_ne","module":"Mathlib.Logic.Pairwise","initialProofState":"α : Type u_1\nι : Type u_3\nf : ι → α\na✝ : Function.Injective f\n⊢ Pairwise (Function.onFun (fun x1 x2 => Ne x1 x2) f)","decl":"alias ⟨Function.Injective.pairwise_ne, _⟩ := Function.injective_iff_pairwise_ne\n\n"}
{"name":"Pairwise.comp_of_injective","module":"Mathlib.Logic.Pairwise","initialProofState":"α : Type u_1\nβ : Type u_2\nr : α → α → Prop\nhr : Pairwise r\nf : β → α\nhf : Function.Injective f\n⊢ Pairwise (Function.onFun r f)","decl":"lemma Pairwise.comp_of_injective (hr : Pairwise r) {f : β → α} (hf : Injective f) :\n    Pairwise (r on f) :=\n  fun _ _ h ↦ hr <| hf.ne h\n\n"}
{"name":"Pairwise.of_comp_of_surjective","module":"Mathlib.Logic.Pairwise","initialProofState":"α : Type u_1\nβ : Type u_2\nr : α → α → Prop\nf : β → α\nhr : Pairwise (Function.onFun r f)\nhf : Function.Surjective f\n⊢ Pairwise r","decl":"lemma Pairwise.of_comp_of_surjective {f : β → α} (hr : Pairwise (r on f)) (hf : Surjective f) :\n    Pairwise r := hf.forall₂.2 fun _ _ h ↦ hr <| ne_of_apply_ne f h\n\n"}
{"name":"Function.Bijective.pairwise_comp_iff","module":"Mathlib.Logic.Pairwise","initialProofState":"α : Type u_1\nβ : Type u_2\nr : α → α → Prop\nf : β → α\nhf : Function.Bijective f\n⊢ Iff (Pairwise (Function.onFun r f)) (Pairwise r)","decl":"lemma Function.Bijective.pairwise_comp_iff {f : β → α} (hf : Bijective f) :\n    Pairwise (r on f) ↔ Pairwise r :=\n  ⟨fun hr ↦ hr.of_comp_of_surjective hf.surjective, fun hr ↦ hr.comp_of_injective hf.injective⟩\n\n"}
{"name":"Set.pairwise_of_forall","module":"Mathlib.Logic.Pairwise","initialProofState":"α : Type u_1\ns : Set α\nr : α → α → Prop\nh : ∀ (a b : α), r a b\n⊢ s.Pairwise r","decl":"theorem pairwise_of_forall (s : Set α) (r : α → α → Prop) (h : ∀ a b, r a b) : s.Pairwise r :=\n  fun a _ b _ _ => h a b\n\n"}
{"name":"Set.Pairwise.imp_on","module":"Mathlib.Logic.Pairwise","initialProofState":"α : Type u_1\nr p : α → α → Prop\ns : Set α\nh : s.Pairwise r\nhrp : s.Pairwise fun ⦃a b⦄ => r a b → p a b\n⊢ s.Pairwise p","decl":"theorem Pairwise.imp_on (h : s.Pairwise r) (hrp : s.Pairwise fun ⦃a b : α⦄ => r a b → p a b) :\n    s.Pairwise p :=\n  fun _a ha _b hb hab => hrp ha hb hab <| h ha hb hab\n\n"}
{"name":"Set.Pairwise.imp","module":"Mathlib.Logic.Pairwise","initialProofState":"α : Type u_1\nr p : α → α → Prop\ns : Set α\nh : s.Pairwise r\nhpq : ∀ ⦃a b : α⦄, r a b → p a b\n⊢ s.Pairwise p","decl":"theorem Pairwise.imp (h : s.Pairwise r) (hpq : ∀ ⦃a b : α⦄, r a b → p a b) : s.Pairwise p :=\n  h.imp_on <| pairwise_of_forall s _ hpq\n\n"}
{"name":"Set.Pairwise.eq","module":"Mathlib.Logic.Pairwise","initialProofState":"α : Type u_1\nr : α → α → Prop\ns : Set α\na b : α\nhs : s.Pairwise r\nha : Membership.mem s a\nhb : Membership.mem s b\nh : Not (r a b)\n⊢ Eq a b","decl":"protected theorem Pairwise.eq (hs : s.Pairwise r) (ha : a ∈ s) (hb : b ∈ s) (h : ¬r a b) : a = b :=\n  of_not_not fun hab => h <| hs ha hb hab\n\n"}
{"name":"Reflexive.set_pairwise_iff","module":"Mathlib.Logic.Pairwise","initialProofState":"α : Type u_1\nr : α → α → Prop\ns : Set α\nhr : Reflexive r\n⊢ Iff (s.Pairwise r) (∀ ⦃a : α⦄, Membership.mem s a → ∀ ⦃b : α⦄, Membership.mem s b → r a b)","decl":"theorem _root_.Reflexive.set_pairwise_iff (hr : Reflexive r) :\n    s.Pairwise r ↔ ∀ ⦃a⦄, a ∈ s → ∀ ⦃b⦄, b ∈ s → r a b :=\n  forall₄_congr fun a _ _ _ => or_iff_not_imp_left.symm.trans <| or_iff_right_of_imp <| Eq.ndrec <|\n    hr a\n\n"}
{"name":"Set.Pairwise.on_injective","module":"Mathlib.Logic.Pairwise","initialProofState":"α : Type u_1\nι : Type u_3\nr : α → α → Prop\nf : ι → α\ns : Set α\nhs : s.Pairwise r\nhf : Function.Injective f\nhfs : ∀ (x : ι), Membership.mem s (f x)\n⊢ Pairwise (Function.onFun r f)","decl":"theorem Pairwise.on_injective (hs : s.Pairwise r) (hf : Function.Injective f) (hfs : ∀ x, f x ∈ s) :\n    Pairwise (r on f) := fun i j hij => hs (hfs i) (hfs j) (hf.ne hij)\n\n"}
{"name":"Pairwise.set_pairwise","module":"Mathlib.Logic.Pairwise","initialProofState":"α : Type u_1\nr : α → α → Prop\nh : Pairwise r\ns : Set α\n⊢ s.Pairwise r","decl":"theorem Pairwise.set_pairwise (h : Pairwise r) (s : Set α) : s.Pairwise r := fun _ _ _ _ w => h w\n\n"}
