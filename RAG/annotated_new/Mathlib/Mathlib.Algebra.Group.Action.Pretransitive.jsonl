{"name":"AddAction.IsPretransitive.exists_vadd_eq","module":"Mathlib.Algebra.Group.Action.Pretransitive","initialProofState":"M : Type u_5\nα : Type u_6\ninst✝ : VAdd M α\nself : AddAction.IsPretransitive M α\nx y : α\n⊢ Exists fun g => Eq (HVAdd.hVAdd g x) y","decl":"/-- `M` acts pretransitively on `α` if for any `x y` there is `g` such that `g +ᵥ x = y`.\n  A transitive action should furthermore have `α` nonempty. -/\nclass AddAction.IsPretransitive (M α : Type*) [VAdd M α] : Prop where\n  /-- There is `g` such that `g +ᵥ x = y`. -/\n  exists_vadd_eq : ∀ x y : α, ∃ g : M, g +ᵥ x = y\n\n"}
{"name":"MulAction.IsPretransitive.exists_smul_eq","module":"Mathlib.Algebra.Group.Action.Pretransitive","initialProofState":"M : Type u_5\nα : Type u_6\ninst✝ : SMul M α\nself : MulAction.IsPretransitive M α\nx y : α\n⊢ Exists fun g => Eq (HSMul.hSMul g x) y","decl":"/-- `M` acts pretransitively on `α` if for any `x y` there is `g` such that `g • x = y`.\n  A transitive action should furthermore have `α` nonempty. -/\n@[to_additive]\nclass MulAction.IsPretransitive (M α : Type*) [SMul M α] : Prop where\n  /-- There is `g` such that `g • x = y`. -/\n  exists_smul_eq : ∀ x y : α, ∃ g : M, g • x = y\n\n"}
{"name":"AddAction.exists_vadd_eq","module":"Mathlib.Algebra.Group.Action.Pretransitive","initialProofState":"M : Type u_1\nα : Type u_3\ninst✝¹ : VAdd M α\ninst✝ : AddAction.IsPretransitive M α\nx y : α\n⊢ Exists fun m => Eq (HVAdd.hVAdd m x) y","decl":"@[to_additive]\nlemma exists_smul_eq (x y : α) : ∃ m : M, m • x = y := IsPretransitive.exists_smul_eq x y\n\n"}
{"name":"MulAction.exists_smul_eq","module":"Mathlib.Algebra.Group.Action.Pretransitive","initialProofState":"M : Type u_1\nα : Type u_3\ninst✝¹ : SMul M α\ninst✝ : MulAction.IsPretransitive M α\nx y : α\n⊢ Exists fun m => Eq (HSMul.hSMul m x) y","decl":"@[to_additive]\nlemma exists_smul_eq (x y : α) : ∃ m : M, m • x = y := IsPretransitive.exists_smul_eq x y\n\n"}
{"name":"MulAction.surjective_smul","module":"Mathlib.Algebra.Group.Action.Pretransitive","initialProofState":"M : Type u_1\nα : Type u_3\ninst✝¹ : SMul M α\ninst✝ : MulAction.IsPretransitive M α\nx : α\n⊢ Function.Surjective fun c => HSMul.hSMul c x","decl":"@[to_additive]\nlemma surjective_smul (x : α) : Surjective fun c : M ↦ c • x := exists_smul_eq M x\n\n"}
{"name":"AddAction.surjective_vadd","module":"Mathlib.Algebra.Group.Action.Pretransitive","initialProofState":"M : Type u_1\nα : Type u_3\ninst✝¹ : VAdd M α\ninst✝ : AddAction.IsPretransitive M α\nx : α\n⊢ Function.Surjective fun c => HVAdd.hVAdd c x","decl":"@[to_additive]\nlemma surjective_smul (x : α) : Surjective fun c : M ↦ c • x := exists_smul_eq M x\n\n"}
{"name":"AddAction.Regular.isPretransitive","module":"Mathlib.Algebra.Group.Action.Pretransitive","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\n⊢ AddAction.IsPretransitive G G","decl":"/-- The regular action of a group on itself is transitive. -/\n@[to_additive \"The regular action of a group on itself is transitive.\"]\ninstance Regular.isPretransitive [Group G] : IsPretransitive G G :=\n  ⟨fun x y ↦ ⟨y * x⁻¹, inv_mul_cancel_right _ _⟩⟩\n\n"}
{"name":"MulAction.Regular.isPretransitive","module":"Mathlib.Algebra.Group.Action.Pretransitive","initialProofState":"G : Type u_2\ninst✝ : Group G\n⊢ MulAction.IsPretransitive G G","decl":"/-- The regular action of a group on itself is transitive. -/\n@[to_additive \"The regular action of a group on itself is transitive.\"]\ninstance Regular.isPretransitive [Group G] : IsPretransitive G G :=\n  ⟨fun x y ↦ ⟨y * x⁻¹, inv_mul_cancel_right _ _⟩⟩\n\n"}
{"name":"MulAction.isPretransitive_compHom","module":"Mathlib.Algebra.Group.Action.Pretransitive","initialProofState":"E : Type u_5\nF : Type u_6\nG : Type u_7\ninst✝³ : Monoid E\ninst✝² : Monoid F\ninst✝¹ : MulAction F G\ninst✝ : MulAction.IsPretransitive F G\nf : MonoidHom E F\nhf : Function.Surjective ⇑f\n⊢ MulAction.IsPretransitive E G","decl":"/-- If an action is transitive, then composing this action with a surjective homomorphism gives\nagain a transitive action. -/\n@[to_additive]\nlemma isPretransitive_compHom {E F G : Type*} [Monoid E] [Monoid F] [MulAction F G]\n    [IsPretransitive F G] {f : E →* F} (hf : Surjective f) :\n    letI : MulAction E G := MulAction.compHom _ f\n    IsPretransitive E G := by\n  let _ : MulAction E G := MulAction.compHom _ f\n  refine ⟨fun x y ↦ ?_⟩\n  obtain ⟨m, rfl⟩ : ∃ m : F, m • x = y := exists_smul_eq F x y\n  obtain ⟨e, rfl⟩ : ∃ e, f e = m := hf m\n  exact ⟨e, rfl⟩\n\n"}
{"name":"AddAction.isPretransitive_compHom","module":"Mathlib.Algebra.Group.Action.Pretransitive","initialProofState":"E : Type u_5\nF : Type u_6\nG : Type u_7\ninst✝³ : AddMonoid E\ninst✝² : AddMonoid F\ninst✝¹ : AddAction F G\ninst✝ : AddAction.IsPretransitive F G\nf : AddMonoidHom E F\nhf : Function.Surjective ⇑f\n⊢ AddAction.IsPretransitive E G","decl":"/-- If an action is transitive, then composing this action with a surjective homomorphism gives\nagain a transitive action. -/\n@[to_additive]\nlemma isPretransitive_compHom {E F G : Type*} [Monoid E] [Monoid F] [MulAction F G]\n    [IsPretransitive F G] {f : E →* F} (hf : Surjective f) :\n    letI : MulAction E G := MulAction.compHom _ f\n    IsPretransitive E G := by\n  let _ : MulAction E G := MulAction.compHom _ f\n  refine ⟨fun x y ↦ ?_⟩\n  obtain ⟨m, rfl⟩ : ∃ m : F, m • x = y := exists_smul_eq F x y\n  obtain ⟨e, rfl⟩ : ∃ e, f e = m := hf m\n  exact ⟨e, rfl⟩\n\n"}
{"name":"MulAction.IsPretransitive.of_smul_eq","module":"Mathlib.Algebra.Group.Action.Pretransitive","initialProofState":"M : Type u_5\nN : Type u_6\nα : Type u_7\ninst✝² : SMul M α\ninst✝¹ : SMul N α\ninst✝ : MulAction.IsPretransitive M α\nf : M → N\nhf : ∀ {c : M} {x : α}, Eq (HSMul.hSMul (f c) x) (HSMul.hSMul c x)\n⊢ MulAction.IsPretransitive N α","decl":"@[to_additive]\nlemma IsPretransitive.of_smul_eq {M N α : Type*} [SMul M α] [SMul N α] [IsPretransitive M α]\n    (f : M → N) (hf : ∀ {c : M} {x : α}, f c • x = c • x) : IsPretransitive N α where\n  exists_smul_eq x y := (exists_smul_eq x y).elim fun m h ↦ ⟨f m, hf.trans h⟩\n\n"}
{"name":"AddAction.IsPretransitive.of_vadd_eq","module":"Mathlib.Algebra.Group.Action.Pretransitive","initialProofState":"M : Type u_5\nN : Type u_6\nα : Type u_7\ninst✝² : VAdd M α\ninst✝¹ : VAdd N α\ninst✝ : AddAction.IsPretransitive M α\nf : M → N\nhf : ∀ {c : M} {x : α}, Eq (HVAdd.hVAdd (f c) x) (HVAdd.hVAdd c x)\n⊢ AddAction.IsPretransitive N α","decl":"@[to_additive]\nlemma IsPretransitive.of_smul_eq {M N α : Type*} [SMul M α] [SMul N α] [IsPretransitive M α]\n    (f : M → N) (hf : ∀ {c : M} {x : α}, f c • x = c • x) : IsPretransitive N α where\n  exists_smul_eq x y := (exists_smul_eq x y).elim fun m h ↦ ⟨f m, hf.trans h⟩\n\n"}
{"name":"AddAction.IsPretransitive.of_compHom","module":"Mathlib.Algebra.Group.Action.Pretransitive","initialProofState":"M : Type u_5\nN : Type u_6\nα : Type u_7\ninst✝² : AddMonoid M\ninst✝¹ : AddMonoid N\ninst✝ : AddAction N α\nf : AddMonoidHom M N\nh : AddAction.IsPretransitive M α\n⊢ AddAction.IsPretransitive N α","decl":"@[to_additive]\nlemma IsPretransitive.of_compHom {M N α : Type*} [Monoid M] [Monoid N] [MulAction N α]\n    (f : M →* N) [h : letI := compHom α f; IsPretransitive M α] : IsPretransitive N α :=\n  letI := compHom α f; h.of_smul_eq f rfl\n\n"}
{"name":"MulAction.IsPretransitive.of_compHom","module":"Mathlib.Algebra.Group.Action.Pretransitive","initialProofState":"M : Type u_5\nN : Type u_6\nα : Type u_7\ninst✝² : Monoid M\ninst✝¹ : Monoid N\ninst✝ : MulAction N α\nf : MonoidHom M N\nh : MulAction.IsPretransitive M α\n⊢ MulAction.IsPretransitive N α","decl":"@[to_additive]\nlemma IsPretransitive.of_compHom {M N α : Type*} [Monoid M] [Monoid N] [MulAction N α]\n    (f : M →* N) [h : letI := compHom α f; IsPretransitive M α] : IsPretransitive N α :=\n  letI := compHom α f; h.of_smul_eq f rfl\n\n"}
{"name":"MulAction.IsPretransitive.of_isScalarTower","module":"Mathlib.Algebra.Group.Action.Pretransitive","initialProofState":"M : Type u_5\nN : Type u_6\nα : Type u_7\ninst✝⁵ : Monoid N\ninst✝⁴ : SMul M N\ninst✝³ : MulAction N α\ninst✝² : SMul M α\ninst✝¹ : IsScalarTower M N α\ninst✝ : MulAction.IsPretransitive M α\n⊢ MulAction.IsPretransitive N α","decl":"@[to_additive]\nlemma MulAction.IsPretransitive.of_isScalarTower (M : Type*) {N α : Type*} [Monoid N] [SMul M N]\n    [MulAction N α] [SMul M α] [IsScalarTower M N α] [IsPretransitive M α] : IsPretransitive N α :=\n  of_smul_eq (fun x : M ↦ x • 1) (smul_one_smul N _ _)\n\n"}
{"name":"AddAction.IsPretransitive.of_isScalarTower","module":"Mathlib.Algebra.Group.Action.Pretransitive","initialProofState":"M : Type u_5\nN : Type u_6\nα : Type u_7\ninst✝⁵ : AddMonoid N\ninst✝⁴ : VAdd M N\ninst✝³ : AddAction N α\ninst✝² : VAdd M α\ninst✝¹ : VAddAssocClass M N α\ninst✝ : AddAction.IsPretransitive M α\n⊢ AddAction.IsPretransitive N α","decl":"@[to_additive]\nlemma MulAction.IsPretransitive.of_isScalarTower (M : Type*) {N α : Type*} [Monoid N] [SMul M N]\n    [MulAction N α] [SMul M α] [IsScalarTower M N α] [IsPretransitive M α] : IsPretransitive N α :=\n  of_smul_eq (fun x : M ↦ x • 1) (smul_one_smul N _ _)\n\n"}
{"name":"Additive.addAction_isPretransitive","module":"Mathlib.Algebra.Group.Action.Pretransitive","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝² : Monoid α\ninst✝¹ : MulAction α β\ninst✝ : MulAction.IsPretransitive α β\n⊢ AddAction.IsPretransitive (Additive α) β","decl":"instance Additive.addAction_isPretransitive [Monoid α] [MulAction α β]\n    [MulAction.IsPretransitive α β] : AddAction.IsPretransitive (Additive α) β :=\n  ⟨@MulAction.exists_smul_eq α _ _ _⟩\n\n"}
{"name":"Multiplicative.mulAction_isPretransitive","module":"Mathlib.Algebra.Group.Action.Pretransitive","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝² : AddMonoid α\ninst✝¹ : AddAction α β\ninst✝ : AddAction.IsPretransitive α β\n⊢ MulAction.IsPretransitive (Multiplicative α) β","decl":"instance Multiplicative.mulAction_isPretransitive [AddMonoid α] [AddAction α β]\n    [AddAction.IsPretransitive α β] : MulAction.IsPretransitive (Multiplicative α) β :=\n  ⟨@AddAction.exists_vadd_eq α _ _ _⟩\n\n"}
