{"name":"SimpleGraph.hasse_adj","module":"Mathlib.Combinatorics.SimpleGraph.Hasse","initialProofState":"α : Type u_1\ninst✝ : Preorder α\na b : α\n⊢ Iff ((SimpleGraph.hasse α).Adj a b) (Or (CovBy a b) (CovBy b a))","decl":"@[simp]\ntheorem hasse_adj : (hasse α).Adj a b ↔ a ⋖ b ∨ b ⋖ a :=\n  Iff.rfl\n\n"}
{"name":"SimpleGraph.hasseDualIso_apply","module":"Mathlib.Combinatorics.SimpleGraph.Hasse","initialProofState":"α : Type u_1\ninst✝ : Preorder α\na : OrderDual α\n⊢ Eq (SimpleGraph.hasseDualIso a) (OrderDual.ofDual a)","decl":"@[simp]\ntheorem hasseDualIso_apply (a : αᵒᵈ) : hasseDualIso a = ofDual a :=\n  rfl\n\n"}
{"name":"SimpleGraph.hasseDualIso_symm_apply","module":"Mathlib.Combinatorics.SimpleGraph.Hasse","initialProofState":"α : Type u_1\ninst✝ : Preorder α\na : α\n⊢ Eq (SimpleGraph.hasseDualIso.symm a) (OrderDual.toDual a)","decl":"@[simp]\ntheorem hasseDualIso_symm_apply (a : α) : hasseDualIso.symm a = toDual a :=\n  rfl\n\n"}
{"name":"SimpleGraph.hasse_prod","module":"Mathlib.Combinatorics.SimpleGraph.Hasse","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\n⊢ Eq (SimpleGraph.hasse (Prod α β)) ((SimpleGraph.hasse α).boxProd (SimpleGraph.hasse β))","decl":"@[simp]\ntheorem hasse_prod : hasse (α × β) = hasse α □ hasse β := by\n  ext x y\n  simp_rw [boxProd_adj, hasse_adj, Prod.covBy_iff, or_and_right, @eq_comm _ y.1, @eq_comm _ y.2,\n    or_or_or_comm]\n\n"}
{"name":"SimpleGraph.hasse_preconnected_of_succ","module":"Mathlib.Combinatorics.SimpleGraph.Hasse","initialProofState":"α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : SuccOrder α\ninst✝ : IsSuccArchimedean α\n⊢ (SimpleGraph.hasse α).Preconnected","decl":"theorem hasse_preconnected_of_succ [SuccOrder α] [IsSuccArchimedean α] : (hasse α).Preconnected :=\n  fun a b => by\n  rw [reachable_iff_reflTransGen]\n  exact\n    reflTransGen_of_succ _ (fun c hc => Or.inl <| covBy_succ_of_not_isMax hc.2.not_isMax)\n      fun c hc => Or.inr <| covBy_succ_of_not_isMax hc.2.not_isMax\n\n"}
{"name":"SimpleGraph.hasse_preconnected_of_pred","module":"Mathlib.Combinatorics.SimpleGraph.Hasse","initialProofState":"α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : PredOrder α\ninst✝ : IsPredArchimedean α\n⊢ (SimpleGraph.hasse α).Preconnected","decl":"theorem hasse_preconnected_of_pred [PredOrder α] [IsPredArchimedean α] : (hasse α).Preconnected :=\n  fun a b => by\n  rw [reachable_iff_reflTransGen, ← reflTransGen_swap]\n  exact\n    reflTransGen_of_pred _ (fun c hc => Or.inl <| pred_covBy_of_not_isMin hc.1.not_isMin)\n      fun c hc => Or.inr <| pred_covBy_of_not_isMin hc.1.not_isMin\n\n"}
{"name":"SimpleGraph.pathGraph_adj","module":"Mathlib.Combinatorics.SimpleGraph.Hasse","initialProofState":"n : Nat\nu v : Fin n\n⊢ Iff ((SimpleGraph.pathGraph n).Adj u v) (Or (Eq (HAdd.hAdd (↑u) 1) ↑v) (Eq (HAdd.hAdd (↑v) 1) ↑u))","decl":"theorem pathGraph_adj {n : ℕ} {u v : Fin n} :\n    (pathGraph n).Adj u v ↔ u.val + 1 = v.val ∨ v.val + 1 = u.val := by\n  simp only [pathGraph, hasse]\n  simp_rw [← Fin.coe_covBy_iff, covBy_iff_add_one_eq]\n\n"}
{"name":"SimpleGraph.pathGraph_preconnected","module":"Mathlib.Combinatorics.SimpleGraph.Hasse","initialProofState":"n : Nat\n⊢ (SimpleGraph.pathGraph n).Preconnected","decl":"theorem pathGraph_preconnected (n : ℕ) : (pathGraph n).Preconnected :=\n  hasse_preconnected_of_succ _\n\n"}
{"name":"SimpleGraph.pathGraph_connected","module":"Mathlib.Combinatorics.SimpleGraph.Hasse","initialProofState":"n : Nat\n⊢ (SimpleGraph.pathGraph (HAdd.hAdd n 1)).Connected","decl":"theorem pathGraph_connected (n : ℕ) : (pathGraph (n + 1)).Connected :=\n  ⟨pathGraph_preconnected _⟩\n\n"}
{"name":"SimpleGraph.pathGraph_two_eq_top","module":"Mathlib.Combinatorics.SimpleGraph.Hasse","initialProofState":"⊢ Eq (SimpleGraph.pathGraph 2) Top.top","decl":"theorem pathGraph_two_eq_top : pathGraph 2 = ⊤ := by\n  ext u v\n  fin_cases u <;> fin_cases v <;> simp [pathGraph, ← Fin.coe_covBy_iff, covBy_iff_add_one_eq]\n\n"}
