{"name":"NumberField.to_finiteDimensional","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\nself : NumberField K\n⊢ FiniteDimensional Rat K","decl":"/-- A number field is a field which has characteristic zero and is finite\ndimensional over ℚ. -/\n@[stacks 09GA]\nclass NumberField (K : Type*) [Field K] : Prop where\n  [to_charZero : CharZero K]\n  [to_finiteDimensional : FiniteDimensional ℚ K]\n\n"}
{"name":"NumberField.to_charZero","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\nself : NumberField K\n⊢ CharZero K","decl":"/-- A number field is a field which has characteristic zero and is finite\ndimensional over ℚ. -/\n@[stacks 09GA]\nclass NumberField (K : Type*) [Field K] : Prop where\n  [to_charZero : CharZero K]\n  [to_finiteDimensional : FiniteDimensional ℚ K]\n\n"}
{"name":"Int.not_isField","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"⊢ Not (IsField Int)","decl":"/-- `ℤ` with its usual ring structure is not a field. -/\ntheorem Int.not_isField : ¬IsField ℤ := fun h =>\n  Int.not_even_one <|\n    (h.mul_inv_cancel two_ne_zero).imp fun a => by rw [← two_mul]; exact Eq.symm\n\n"}
{"name":"NumberField.isAlgebraic","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝¹ : Field K\ninst✝ : NumberField K\n⊢ Algebra.IsAlgebraic Rat K","decl":"protected theorem isAlgebraic [NumberField K] : Algebra.IsAlgebraic ℚ K :=\n  Algebra.IsAlgebraic.of_finite _ _\n\n"}
{"name":"NumberField.instFiniteDimensional","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝⁴ : Field K\ninst✝³ : Field L\ninst✝² : NumberField K\ninst✝¹ : NumberField L\ninst✝ : Algebra K L\n⊢ FiniteDimensional K L","decl":"instance [NumberField K] [NumberField L] [Algebra K L] : FiniteDimensional K L :=\n  Module.Finite.of_restrictScalars_finite ℚ K L\n\n"}
{"name":"NumberField.of_module_finite","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝⁴ : Field K\ninst✝³ : Field L\ninst✝² : NumberField K\ninst✝¹ : Algebra K L\ninst✝ : Module.Finite K L\n⊢ NumberField L","decl":"/-- A finite extension of a number field is a number field. -/\ntheorem of_module_finite [NumberField K] [Algebra K L] [Module.Finite K L] : NumberField L where\n  to_charZero := charZero_of_injective_algebraMap (algebraMap K L).injective\n  to_finiteDimensional :=\n    letI := charZero_of_injective_algebraMap (algebraMap K L).injective\n    Module.Finite.trans K L\n\n"}
{"name":"NumberField.of_intermediateField","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝⁴ : Field K\ninst✝³ : Field L\ninst✝² : NumberField K\ninst✝¹ : NumberField L\ninst✝ : Algebra K L\nE : IntermediateField K L\n⊢ NumberField (Subtype fun x => Membership.mem E x)","decl":"variable {K} {L} in\ninstance of_intermediateField [NumberField K] [NumberField L] [Algebra K L]\n    (E : IntermediateField K L) : NumberField E :=\n  of_module_finite K E\n\n"}
{"name":"NumberField.of_tower","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝⁸ : Field K\ninst✝⁷ : Field L\ninst✝⁶ : NumberField K\ninst✝⁵ : NumberField L\ninst✝⁴ : Algebra K L\nE : Type u_3\ninst✝³ : Field E\ninst✝² : Algebra K E\ninst✝¹ : Algebra E L\ninst✝ : IsScalarTower K E L\n⊢ NumberField E","decl":"theorem of_tower [NumberField K] [NumberField L] [Algebra K L] (E : Type*) [Field E]\n    [Algebra K E] [Algebra E L] [IsScalarTower K E L] : NumberField E :=\n  letI := Module.Finite.left K E L\n  of_module_finite K E\n\n"}
{"name":"NumberField.RingOfIntegers.instIsDomain","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\n⊢ IsDomain (NumberField.RingOfIntegers K)","decl":"instance : IsDomain (𝓞 K) :=\n  inferInstanceAs (IsDomain (integralClosure _ _))\n"}
{"name":"NumberField.RingOfIntegers.instCharZero","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝¹ : Field K\ninst✝ : NumberField K\n⊢ CharZero (NumberField.RingOfIntegers K)","decl":"instance [NumberField K] : CharZero (𝓞 K) :=\n  inferInstanceAs (CharZero (integralClosure _ _))\n"}
{"name":"NumberField.RingOfIntegers.instNoZeroSMulDivisors","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\n⊢ NoZeroSMulDivisors (NumberField.RingOfIntegers K) K","decl":"instance : NoZeroSMulDivisors (𝓞 K) K :=\n  inferInstanceAs (NoZeroSMulDivisors (integralClosure _ _) _)\n"}
{"name":"NumberField.RingOfIntegers.instNontrivial","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\n⊢ Nontrivial (NumberField.RingOfIntegers K)","decl":"instance : Nontrivial (𝓞 K) :=\n  inferInstanceAs (Nontrivial (integralClosure _ _))\n"}
{"name":"NumberField.RingOfIntegers.instIsScalarTower","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝² : Field K\nL : Type u_3\ninst✝¹ : Ring L\ninst✝ : Algebra K L\n⊢ IsScalarTower (NumberField.RingOfIntegers K) K L","decl":"instance {L : Type*} [Ring L] [Algebra K L] : IsScalarTower (𝓞 K) K L :=\n  inferInstanceAs (IsScalarTower (integralClosure _ _) K L)\n\n"}
{"name":"NumberField.RingOfIntegers.coe_eq_algebraMap","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\nx : NumberField.RingOfIntegers K\n⊢ Eq (↑x) ((algebraMap (NumberField.RingOfIntegers K) K) x)","decl":"lemma coe_eq_algebraMap (x : 𝓞 K) : (x : K) = algebraMap _ _ x := rfl\n\n"}
{"name":"NumberField.RingOfIntegers.ext","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\nx y : NumberField.RingOfIntegers K\nh : Eq ↑x ↑y\n⊢ Eq x y","decl":"@[ext] theorem ext {x y : 𝓞 K} (h : (x : K) = (y : K)) : x = y :=\n  Subtype.ext h\n\n"}
{"name":"NumberField.RingOfIntegers.ext_iff","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\nx y : NumberField.RingOfIntegers K\n⊢ Iff (Eq x y) (Eq ↑x ↑y)","decl":"@[ext] theorem ext {x y : 𝓞 K} (h : (x : K) = (y : K)) : x = y :=\n  Subtype.ext h\n\n"}
{"name":"NumberField.RingOfIntegers.eq_iff","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\nx y : NumberField.RingOfIntegers K\n⊢ Iff (Eq ↑x ↑y) (Eq x y)","decl":"@[norm_cast]\ntheorem eq_iff {x y : 𝓞 K} : (x : K) = (y : K) ↔ x = y :=\n  NumberField.RingOfIntegers.ext_iff.symm\n\n"}
{"name":"NumberField.RingOfIntegers.map_mk","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\nx : K\nhx : Membership.mem (integralClosure Int K) x\n⊢ Eq ((algebraMap (NumberField.RingOfIntegers K) K) ⟨x, hx⟩) x","decl":"@[simp] lemma map_mk (x : K) (hx) : algebraMap (𝓞 K) K ⟨x, hx⟩ = x := rfl\n\n"}
{"name":"NumberField.RingOfIntegers.coe_mk","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\nx : K\nhx : Membership.mem (integralClosure Int K) x\n⊢ Eq (↑⟨x, hx⟩) x","decl":"lemma coe_mk {x : K} (hx) : ((⟨x, hx⟩ : 𝓞 K) : K) = x := rfl\n\n"}
{"name":"NumberField.RingOfIntegers.mk_eq_mk","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\nx y : K\nhx : Membership.mem (integralClosure Int K) x\nhy : Membership.mem (integralClosure Int K) y\n⊢ Iff (Eq ⟨x, hx⟩ ⟨y, hy⟩) (Eq x y)","decl":"lemma mk_eq_mk (x y : K) (hx hy) : (⟨x, hx⟩ : 𝓞 K) = ⟨y, hy⟩ ↔ x = y := by simp\n\n"}
{"name":"NumberField.RingOfIntegers.mk_one","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\n⊢ Eq ⟨1, ⋯⟩ 1","decl":"@[simp] lemma mk_one : (⟨1, one_mem _⟩ : 𝓞 K) = 1 :=\n  rfl\n\n"}
{"name":"NumberField.RingOfIntegers.mk_zero","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\n⊢ Eq ⟨0, ⋯⟩ 0","decl":"@[simp] lemma mk_zero : (⟨0, zero_mem _⟩ : 𝓞 K) = 0 :=\n  rfl\n-- TODO: these lemmas don't seem to fire?\n"}
{"name":"NumberField.RingOfIntegers.mk_add_mk","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\nx y : K\nhx : Membership.mem (integralClosure Int K) x\nhy : Membership.mem (integralClosure Int K) y\n⊢ Eq (HAdd.hAdd ⟨x, hx⟩ ⟨y, hy⟩) ⟨HAdd.hAdd x y, ⋯⟩","decl":"@[simp] lemma mk_add_mk (x y : K) (hx hy) : (⟨x, hx⟩ : 𝓞 K) + ⟨y, hy⟩ = ⟨x + y, add_mem hx hy⟩ :=\n  rfl\n\n"}
{"name":"NumberField.RingOfIntegers.mk_mul_mk","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\nx y : K\nhx : Membership.mem (integralClosure Int K) x\nhy : Membership.mem (integralClosure Int K) y\n⊢ Eq (HMul.hMul ⟨x, hx⟩ ⟨y, hy⟩) ⟨HMul.hMul x y, ⋯⟩","decl":"@[simp] lemma mk_mul_mk (x y : K) (hx hy) : (⟨x, hx⟩ : 𝓞 K) * ⟨y, hy⟩ = ⟨x * y, mul_mem hx hy⟩ :=\n  rfl\n\n"}
{"name":"NumberField.RingOfIntegers.mk_sub_mk","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\nx y : K\nhx : Membership.mem (integralClosure Int K) x\nhy : Membership.mem (integralClosure Int K) y\n⊢ Eq (HSub.hSub ⟨x, hx⟩ ⟨y, hy⟩) ⟨HSub.hSub x y, ⋯⟩","decl":"@[simp] lemma mk_sub_mk (x y : K) (hx hy) : (⟨x, hx⟩ : 𝓞 K) - ⟨y, hy⟩ = ⟨x - y, sub_mem hx hy⟩ :=\n  rfl\n\n"}
{"name":"NumberField.RingOfIntegers.neg_mk","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\nx : K\nhx : Membership.mem (integralClosure Int K) x\n⊢ Eq (Neg.neg ⟨x, hx⟩) ⟨Neg.neg x, ⋯⟩","decl":"@[simp] lemma neg_mk (x : K) (hx) : (-⟨x, hx⟩ : 𝓞 K) = ⟨-x, neg_mem hx⟩ :=\n  rfl\n\n"}
{"name":"NumberField.RingOfIntegers.inst_isScalarTower","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"k : Type u_3\nK : Type u_4\nL : Type u_5\ninst✝⁶ : Field k\ninst✝⁵ : Field K\ninst✝⁴ : Field L\ninst✝³ : Algebra k K\ninst✝² : Algebra k L\ninst✝¹ : Algebra K L\ninst✝ : IsScalarTower k K L\n⊢ IsScalarTower (NumberField.RingOfIntegers k) (NumberField.RingOfIntegers K) (NumberField.RingOfIntegers L)","decl":"instance inst_isScalarTower (k K L : Type*) [Field k] [Field K] [Field L]\n    [Algebra k K] [Algebra k L] [Algebra K L] [IsScalarTower k K L] :\n    IsScalarTower (𝓞 k) (𝓞 K) (𝓞 L) :=\n  IsScalarTower.of_algHom (mapAlgHom (IsScalarTower.toAlgHom k K L))\n\n"}
{"name":"NumberField.RingOfIntegers.coe_injective","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\n⊢ Function.Injective ⇑(algebraMap (NumberField.RingOfIntegers K) K)","decl":"/-- The canonical map from `𝓞 K` to `K` is injective.\n\nThis is a convenient abbreviation for `NoZeroSMulDivisors.algebraMap_injective`.\n-/\nlemma coe_injective : Function.Injective (algebraMap (𝓞 K) K) :=\n  NoZeroSMulDivisors.algebraMap_injective _ _\n\n"}
{"name":"NumberField.RingOfIntegers.coe_eq_zero_iff","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\nx : NumberField.RingOfIntegers K\n⊢ Iff (Eq ((algebraMap (NumberField.RingOfIntegers K) K) x) 0) (Eq x 0)","decl":"/-- The canonical map from `𝓞 K` to `K` is injective.\n\nThis is a convenient abbreviation for `map_eq_zero_iff` applied to\n`NoZeroSMulDivisors.algebraMap_injective`.\n-/\nlemma coe_eq_zero_iff {x : 𝓞 K} : algebraMap _ K x = 0 ↔ x = 0 :=\n  map_eq_zero_iff _ coe_injective\n\n"}
{"name":"NumberField.RingOfIntegers.coe_ne_zero_iff","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\nx : NumberField.RingOfIntegers K\n⊢ Iff (Ne ((algebraMap (NumberField.RingOfIntegers K) K) x) 0) (Ne x 0)","decl":"/-- The canonical map from `𝓞 K` to `K` is injective.\n\nThis is a convenient abbreviation for `map_ne_zero_iff` applied to\n`NoZeroSMulDivisors.algebraMap_injective`.\n-/\nlemma coe_ne_zero_iff {x : 𝓞 K} : algebraMap _ K x ≠ 0 ↔ x ≠ 0 :=\n  map_ne_zero_iff _ coe_injective\n\n"}
{"name":"NumberField.RingOfIntegers.isIntegral_coe","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\nx : NumberField.RingOfIntegers K\n⊢ IsIntegral Int ((algebraMap (NumberField.RingOfIntegers K) K) x)","decl":"theorem isIntegral_coe (x : 𝓞 K) : IsIntegral ℤ (algebraMap _ K x) :=\n  x.2\n\n"}
{"name":"NumberField.RingOfIntegers.isIntegral","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\nx : NumberField.RingOfIntegers K\n⊢ IsIntegral Int x","decl":"theorem isIntegral (x : 𝓞 K) : IsIntegral ℤ x := by\n  obtain ⟨P, hPm, hP⟩ := x.isIntegral_coe\n  refine ⟨P, hPm, ?_⟩\n  rwa [IsScalarTower.algebraMap_eq (S := 𝓞 K), ← Polynomial.hom_eval₂, coe_eq_zero_iff] at hP\n\n"}
{"name":"NumberField.RingOfIntegers.instIsFractionRing","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝¹ : Field K\ninst✝ : NumberField K\n⊢ IsFractionRing (NumberField.RingOfIntegers K) K","decl":"instance [NumberField K] : IsFractionRing (𝓞 K) K :=\n  integralClosure.isFractionRing_of_finite_extension ℚ _\n\n"}
{"name":"NumberField.RingOfIntegers.instIsIntegralClosureInt","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\n⊢ IsIntegralClosure (NumberField.RingOfIntegers K) Int K","decl":"instance : IsIntegralClosure (𝓞 K) ℤ K :=\n  integralClosure.isIntegralClosure _ _\n\n"}
{"name":"NumberField.RingOfIntegers.instIsIntegralInt","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝ : Field K\n⊢ Algebra.IsIntegral Int (NumberField.RingOfIntegers K)","decl":"instance : Algebra.IsIntegral ℤ (𝓞 K) :=\n  IsIntegralClosure.isIntegral_algebra ℤ K\n\n"}
{"name":"NumberField.RingOfIntegers.instIsIntegrallyClosed","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝¹ : Field K\ninst✝ : NumberField K\n⊢ IsIntegrallyClosed (NumberField.RingOfIntegers K)","decl":"instance [NumberField K] : IsIntegrallyClosed (𝓞 K) :=\n  integralClosure.isIntegrallyClosedOfFiniteExtension ℚ\n\n"}
{"name":"NumberField.RingOfIntegers.instCharZero_1","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝¹ : Field K\ninst✝ : CharZero K\n⊢ CharZero (NumberField.RingOfIntegers K)","decl":"instance [CharZero K] : CharZero (𝓞 K) :=\n  CharZero.of_module _ K\n\n"}
{"name":"NumberField.RingOfIntegers.instIsNoetherianInt","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝¹ : Field K\ninst✝ : NumberField K\n⊢ IsNoetherian Int (NumberField.RingOfIntegers K)","decl":"instance : IsNoetherian ℤ (𝓞 K) :=\n  IsIntegralClosure.isNoetherian _ ℚ K _\n\n"}
{"name":"NumberField.RingOfIntegers.not_isField","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝¹ : Field K\ninst✝ : NumberField K\n⊢ Not (IsField (NumberField.RingOfIntegers K))","decl":"/-- The ring of integers of a number field is not a field. -/\ntheorem not_isField : ¬IsField (𝓞 K) := by\n  have h_inj : Function.Injective (algebraMap ℤ (𝓞 K)) := RingHom.injective_int (algebraMap ℤ (𝓞 K))\n  intro hf\n  exact Int.not_isField\n    (((IsIntegralClosure.isIntegral_algebra ℤ K).isField_iff_isField h_inj).mpr hf)\n\n"}
{"name":"NumberField.RingOfIntegers.instIsDedekindDomain","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝¹ : Field K\ninst✝ : NumberField K\n⊢ IsDedekindDomain (NumberField.RingOfIntegers K)","decl":"instance : IsDedekindDomain (𝓞 K) :=\n  IsIntegralClosure.isDedekindDomain ℤ ℚ K _\n\n"}
{"name":"NumberField.RingOfIntegers.instFreeInt","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝¹ : Field K\ninst✝ : NumberField K\n⊢ Module.Free Int (NumberField.RingOfIntegers K)","decl":"instance : Free ℤ (𝓞 K) :=\n  IsIntegralClosure.module_free ℤ ℚ K (𝓞 K)\n\n"}
{"name":"NumberField.RingOfIntegers.instIsLocalizationAlgebraMapSubmonoidIntNonZeroDivisors","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝¹ : Field K\ninst✝ : NumberField K\n⊢ IsLocalization (Algebra.algebraMapSubmonoid (NumberField.RingOfIntegers K) (nonZeroDivisors Int)) K","decl":"instance : IsLocalization (Algebra.algebraMapSubmonoid (𝓞 K) ℤ⁰) K :=\n  IsIntegralClosure.isLocalization_of_isSeparable ℤ ℚ K (𝓞 K)\n\n"}
{"name":"NumberField.RingOfIntegers.instIsScalarTower_1","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_4\nL : Type u_5\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\n⊢ IsScalarTower (NumberField.RingOfIntegers K) (NumberField.RingOfIntegers L) L","decl":"instance : IsScalarTower (𝓞 K) (𝓞 L) L :=\n  IsScalarTower.of_algebraMap_eq' rfl\n\n"}
{"name":"NumberField.RingOfIntegers.instIsIntegralClosure","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_4\nL : Type u_5\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\n⊢ IsIntegralClosure (NumberField.RingOfIntegers L) (NumberField.RingOfIntegers K) L","decl":"instance : IsIntegralClosure (𝓞 L) (𝓞 K) L :=\n  IsIntegralClosure.tower_top (R := ℤ)\n\n"}
{"name":"NumberField.RingOfIntegers.extension_algebra_isIntegral","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_4\nL : Type u_5\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\n⊢ Algebra.IsIntegral (NumberField.RingOfIntegers K) (NumberField.RingOfIntegers L)","decl":"/-- Any extension between ring of integers is integral. -/\ninstance extension_algebra_isIntegral : Algebra.IsIntegral (𝓞 K) (𝓞 L) :=\n  IsIntegralClosure.isIntegral_algebra (𝓞 K) L\n\n"}
{"name":"NumberField.RingOfIntegers.extension_isNoetherian","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_4\nL : Type u_5\ninst✝⁴ : Field K\ninst✝³ : Field L\ninst✝² : Algebra K L\ninst✝¹ : NumberField K\ninst✝ : NumberField L\n⊢ IsNoetherian (NumberField.RingOfIntegers K) (NumberField.RingOfIntegers L)","decl":"/-- Any extension between ring of integers of number fields is noetherian. -/\ninstance extension_isNoetherian [NumberField K] [NumberField L] : IsNoetherian (𝓞 K) (𝓞 L) :=\n  IsIntegralClosure.isNoetherian (𝓞 K) K L (𝓞 L)\n\n"}
{"name":"NumberField.RingOfIntegers.ker_algebraMap_eq_bot","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_4\nL : Type u_5\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\n⊢ Eq (RingHom.ker (algebraMap (NumberField.RingOfIntegers K) (NumberField.RingOfIntegers L))) Bot.bot","decl":"/-- The kernel of the algebraMap between ring of integers is `⊥`. -/\ntheorem ker_algebraMap_eq_bot : RingHom.ker (algebraMap (𝓞 K) (𝓞 L)) = ⊥ :=\n  (RingHom.ker_eq_bot_iff_eq_zero (algebraMap (𝓞 K) (𝓞 L))).mpr <| fun x hx => by\n  have h : (algebraMap K L) x = (algebraMap (𝓞 K) (𝓞 L)) x := rfl\n  simp only [hx, map_zero, map_eq_zero, RingOfIntegers.coe_eq_zero_iff] at h\n  exact h\n\n"}
{"name":"NumberField.RingOfIntegers.algebraMap.injective","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_4\nL : Type u_5\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\n⊢ Function.Injective ⇑(algebraMap (NumberField.RingOfIntegers K) (NumberField.RingOfIntegers L))","decl":"/-- The algebraMap between ring of integers is injective. -/\ntheorem algebraMap.injective : Function.Injective (algebraMap (𝓞 K) (𝓞 L)) :=\n  (RingHom.injective_iff_ker_eq_bot (algebraMap (𝓞 K) (𝓞 L))).mpr (ker_algebraMap_eq_bot K L)\n\n"}
{"name":"NumberField.RingOfIntegers.instNoZeroSMulDivisors_1","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_4\nL : Type u_5\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\n⊢ NoZeroSMulDivisors (NumberField.RingOfIntegers K) (NumberField.RingOfIntegers L)","decl":"instance : NoZeroSMulDivisors (𝓞 K) (𝓞 L) :=\n  NoZeroSMulDivisors.of_algebraMap_injective (algebraMap.injective K L)\n\n"}
{"name":"NumberField.RingOfIntegers.instNoZeroSMulDivisors_2","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_4\nL : Type u_5\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\n⊢ NoZeroSMulDivisors (NumberField.RingOfIntegers K) L","decl":"instance : NoZeroSMulDivisors (𝓞 K) L :=\n  NoZeroSMulDivisors.trans (𝓞 K) (𝓞 L) L\n\n"}
{"name":"NumberField.integralBasis_apply","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝¹ : Field K\ninst✝ : NumberField K\ni : Module.Free.ChooseBasisIndex Int (NumberField.RingOfIntegers K)\n⊢ Eq ((NumberField.integralBasis K) i) ((algebraMap (NumberField.RingOfIntegers K) K) ((NumberField.RingOfIntegers.basis K) i))","decl":"@[simp]\ntheorem integralBasis_apply (i : Free.ChooseBasisIndex ℤ (𝓞 K)) :\n    integralBasis K i = algebraMap (𝓞 K) K (RingOfIntegers.basis K i) :=\n  Basis.localizationLocalization_apply ℚ (nonZeroDivisors ℤ) K (RingOfIntegers.basis K) i\n\n"}
{"name":"NumberField.integralBasis_repr_apply","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝¹ : Field K\ninst✝ : NumberField K\nx : NumberField.RingOfIntegers K\ni : Module.Free.ChooseBasisIndex Int (NumberField.RingOfIntegers K)\n⊢ Eq (((NumberField.integralBasis K).repr ((algebraMap (NumberField.RingOfIntegers K) K) x)) i) ((algebraMap Int Rat) (((NumberField.RingOfIntegers.basis K).repr x) i))","decl":"@[simp]\ntheorem integralBasis_repr_apply (x : (𝓞 K)) (i : Free.ChooseBasisIndex ℤ (𝓞 K)) :\n    (integralBasis K).repr (algebraMap _ _ x) i =\n      (algebraMap ℤ ℚ) ((RingOfIntegers.basis K).repr x i) :=\n  Basis.localizationLocalization_repr_algebraMap ℚ (nonZeroDivisors ℤ) K _ x i\n\n"}
{"name":"NumberField.mem_span_integralBasis","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝¹ : Field K\ninst✝ : NumberField K\nx : K\n⊢ Iff (Membership.mem (Submodule.span Int (Set.range ⇑(NumberField.integralBasis K))) x) (Membership.mem (algebraMap (NumberField.RingOfIntegers K) K).range x)","decl":"theorem mem_span_integralBasis {x : K} :\n    x ∈ Submodule.span ℤ (Set.range (integralBasis K)) ↔ x ∈ (algebraMap (𝓞 K) K).range := by\n  rw [integralBasis, Basis.localizationLocalization_span, LinearMap.mem_range,\n      IsScalarTower.coe_toAlgHom', RingHom.mem_range]\n\n"}
{"name":"NumberField.RingOfIntegers.rank","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"K : Type u_1\ninst✝¹ : Field K\ninst✝ : NumberField K\n⊢ Eq (Module.finrank Int (NumberField.RingOfIntegers K)) (Module.finrank Rat K)","decl":"theorem RingOfIntegers.rank : Module.finrank ℤ (𝓞 K) = Module.finrank ℚ K :=\n  IsIntegralClosure.rank ℤ ℚ K (𝓞 K)\n\n"}
{"name":"Rat.numberField","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"⊢ NumberField Rat","decl":"instance numberField : NumberField ℚ where\n  to_charZero := inferInstance\n  to_finiteDimensional := by\n  -- The vector space structure of `ℚ` over itself can arise in multiple ways:\n  -- all fields are vector spaces over themselves (used in `Rat.finiteDimensional`)\n  -- all char 0 fields have a canonical embedding of `ℚ` (used in `NumberField`).\n  -- Show that these coincide:\n    convert (inferInstance : FiniteDimensional ℚ ℚ)\n\n"}
{"name":"Rat.coe_ringOfIntegersEquiv","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"z : NumberField.RingOfIntegers Rat\n⊢ Eq (↑(Rat.ringOfIntegersEquiv z)) ((algebraMap (NumberField.RingOfIntegers Rat) Rat) z)","decl":"@[simp]\ntheorem coe_ringOfIntegersEquiv (z : 𝓞 ℚ) :\n    (Rat.ringOfIntegersEquiv z : ℚ) = algebraMap (𝓞 ℚ) ℚ z := by\n  obtain ⟨z, rfl⟩ := Rat.ringOfIntegersEquiv.symm.surjective z\n  simp\n\n"}
{"name":"AdjoinRoot.instNumberFieldRat","module":"Mathlib.NumberTheory.NumberField.Basic","initialProofState":"f : Polynomial Rat\nhf : Fact (Irreducible f)\n⊢ NumberField (AdjoinRoot f)","decl":"/-- The quotient of `ℚ[X]` by the ideal generated by an irreducible polynomial of `ℚ[X]`\nis a number field. -/\ninstance {f : Polynomial ℚ} [hf : Fact (Irreducible f)] : NumberField (AdjoinRoot f) where\n  to_charZero := charZero_of_injective_algebraMap (algebraMap ℚ _).injective\n  to_finiteDimensional := by convert (AdjoinRoot.powerBasis hf.out.ne_zero).finite\n\n"}
