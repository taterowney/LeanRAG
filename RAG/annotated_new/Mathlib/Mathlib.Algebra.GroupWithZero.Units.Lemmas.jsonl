{"name":"isLocalHom_of_exists_map_ne_one","module":"Mathlib.Algebra.GroupWithZero.Units.Lemmas","initialProofState":"M : Type u_1\nG₀ : Type u_3\nF : Type u_6\ninst✝³ : Monoid M\ninst✝² : GroupWithZero G₀\ninst✝¹ : FunLike F G₀ M\ninst✝ : MonoidHomClass F G₀ M\nf : F\nhf : Exists fun x => Ne (f x) 1\n⊢ IsLocalHom f","decl":"lemma isLocalHom_of_exists_map_ne_one [FunLike F G₀ M] [MonoidHomClass F G₀ M] {f : F}\n    (hf : ∃ x : G₀, f x ≠ 1) : IsLocalHom f where\n  map_nonunit a h := by\n    rcases eq_or_ne a 0 with (rfl | h)\n    · obtain ⟨t, ht⟩ := hf\n      refine (ht ?_).elim\n      have := map_mul f t 0\n      rw [← one_mul (f (t * 0)), mul_zero] at this\n      exact (h.mul_right_cancel this).symm\n    · exact ⟨⟨a, a⁻¹, mul_inv_cancel₀ h, inv_mul_cancel₀ h⟩, rfl⟩\n\n"}
{"name":"isLocalRingHom_of_exists_map_ne_one","module":"Mathlib.Algebra.GroupWithZero.Units.Lemmas","initialProofState":"M : Type u_1\nG₀ : Type u_3\nF : Type u_6\ninst✝³ : Monoid M\ninst✝² : GroupWithZero G₀\ninst✝¹ : FunLike F G₀ M\ninst✝ : MonoidHomClass F G₀ M\nf : F\nhf : Exists fun x => Ne (f x) 1\n⊢ IsLocalHom f","decl":"@[deprecated (since := \"2024-10-10\")]\nalias isLocalRingHom_of_exists_map_ne_one := isLocalHom_of_exists_map_ne_one\n\n"}
{"name":"instIsLocalHomOfMonoidWithZeroHomClassOfNontrivial","module":"Mathlib.Algebra.GroupWithZero.Units.Lemmas","initialProofState":"M₀ : Type u_2\nG₀ : Type u_3\nF : Type u_6\ninst✝⁴ : MonoidWithZero M₀\ninst✝³ : GroupWithZero G₀\ninst✝² : FunLike F G₀ M₀\ninst✝¹ : MonoidWithZeroHomClass F G₀ M₀\ninst✝ : Nontrivial M₀\nf : F\n⊢ IsLocalHom f","decl":"instance [GroupWithZero G₀] [FunLike F G₀ M₀] [MonoidWithZeroHomClass F G₀ M₀] [Nontrivial M₀]\n    (f : F) : IsLocalHom f :=\n  isLocalHom_of_exists_map_ne_one ⟨0, by simp⟩\n\n"}
{"name":"Commute.div_eq_div_iff","module":"Mathlib.Algebra.GroupWithZero.Units.Lemmas","initialProofState":"G₀ : Type u_3\ninst✝ : GroupWithZero G₀\na b c d : G₀\nhbd : Commute b d\nhb : Ne b 0\nhd : Ne d 0\n⊢ Iff (Eq (HDiv.hDiv a b) (HDiv.hDiv c d)) (Eq (HMul.hMul a d) (HMul.hMul c b))","decl":"/-- The `MonoidWithZero` version of `div_eq_div_iff_mul_eq_mul`. -/\nprotected lemma div_eq_div_iff (hbd : Commute b d) (hb : b ≠ 0) (hd : d ≠ 0) :\n    a / b = c / d ↔ a * d = c * b := hbd.div_eq_div_iff_of_isUnit hb.isUnit hd.isUnit\n\n"}
{"name":"map_ne_zero","module":"Mathlib.Algebra.GroupWithZero.Units.Lemmas","initialProofState":"M₀ : Type u_2\nG₀ : Type u_3\nF : Type u_6\ninst✝⁴ : MonoidWithZero M₀\ninst✝³ : GroupWithZero G₀\ninst✝² : Nontrivial M₀\ninst✝¹ : FunLike F G₀ M₀\ninst✝ : MonoidWithZeroHomClass F G₀ M₀\nf : F\na : G₀\n⊢ Iff (Ne (f a) 0) (Ne a 0)","decl":"theorem map_ne_zero : f a ≠ 0 ↔ a ≠ 0 :=\n  ⟨fun hfa ha => hfa <| ha.symm ▸ map_zero f, fun ha => ((IsUnit.mk0 a ha).map f).ne_zero⟩\n\n"}
{"name":"map_eq_zero","module":"Mathlib.Algebra.GroupWithZero.Units.Lemmas","initialProofState":"M₀ : Type u_2\nG₀ : Type u_3\nF : Type u_6\ninst✝⁴ : MonoidWithZero M₀\ninst✝³ : GroupWithZero G₀\ninst✝² : Nontrivial M₀\ninst✝¹ : FunLike F G₀ M₀\ninst✝ : MonoidWithZeroHomClass F G₀ M₀\nf : F\na : G₀\n⊢ Iff (Eq (f a) 0) (Eq a 0)","decl":"@[simp]\ntheorem map_eq_zero : f a = 0 ↔ a = 0 :=\n  not_iff_not.1 (map_ne_zero f)\n\n"}
{"name":"eq_on_inv₀","module":"Mathlib.Algebra.GroupWithZero.Units.Lemmas","initialProofState":"G₀ : Type u_3\nM₀' : Type u_4\nF' : Type u_7\ninst✝³ : GroupWithZero G₀\ninst✝² : MonoidWithZero M₀'\ninst✝¹ : FunLike F' G₀ M₀'\na : G₀\ninst✝ : MonoidWithZeroHomClass F' G₀ M₀'\nf g : F'\nh : Eq (f a) (g a)\n⊢ Eq (f (Inv.inv a)) (g (Inv.inv a))","decl":"theorem eq_on_inv₀ [MonoidWithZeroHomClass F' G₀ M₀'] (f g : F') (h : f a = g a) :\n    f a⁻¹ = g a⁻¹ := by\n  rcases eq_or_ne a 0 with (rfl | ha)\n  · rw [inv_zero, map_zero, map_zero]\n  · exact (IsUnit.mk0 a ha).eq_on_inv f g h\n\n"}
{"name":"map_inv₀","module":"Mathlib.Algebra.GroupWithZero.Units.Lemmas","initialProofState":"G₀ : Type u_3\nG₀' : Type u_5\nF : Type u_6\ninst✝³ : GroupWithZero G₀\ninst✝² : GroupWithZero G₀'\ninst✝¹ : FunLike F G₀ G₀'\ninst✝ : MonoidWithZeroHomClass F G₀ G₀'\nf : F\na : G₀\n⊢ Eq (f (Inv.inv a)) (Inv.inv (f a))","decl":"/-- A monoid homomorphism between groups with zeros sending `0` to `0` sends `a⁻¹` to `(f a)⁻¹`. -/\n@[simp]\ntheorem map_inv₀ : f a⁻¹ = (f a)⁻¹ := by\n  by_cases h : a = 0\n  · simp [h, map_zero f]\n  · apply eq_inv_of_mul_eq_one_left\n    rw [← map_mul, inv_mul_cancel₀ h, map_one]\n\n"}
{"name":"map_div₀","module":"Mathlib.Algebra.GroupWithZero.Units.Lemmas","initialProofState":"G₀ : Type u_3\nG₀' : Type u_5\nF : Type u_6\ninst✝³ : GroupWithZero G₀\ninst✝² : GroupWithZero G₀'\ninst✝¹ : FunLike F G₀ G₀'\ninst✝ : MonoidWithZeroHomClass F G₀ G₀'\nf : F\na b : G₀\n⊢ Eq (f (HDiv.hDiv a b)) (HDiv.hDiv (f a) (f b))","decl":"@[simp]\ntheorem map_div₀ : f (a / b) = f a / f b :=\n  map_div' f (map_inv₀ f) a b\n\n"}
{"name":"MonoidWithZero.coe_inverse","module":"Mathlib.Algebra.GroupWithZero.Units.Lemmas","initialProofState":"M : Type u_8\ninst✝ : CommMonoidWithZero M\n⊢ Eq (⇑MonoidWithZero.inverse) Ring.inverse","decl":"@[simp]\ntheorem MonoidWithZero.coe_inverse {M : Type*} [CommMonoidWithZero M] :\n    (MonoidWithZero.inverse : M → M) = Ring.inverse :=\n  rfl\n\n"}
{"name":"MonoidWithZero.inverse_apply","module":"Mathlib.Algebra.GroupWithZero.Units.Lemmas","initialProofState":"M : Type u_8\ninst✝ : CommMonoidWithZero M\na : M\n⊢ Eq (MonoidWithZero.inverse a) (Ring.inverse a)","decl":"@[simp]\ntheorem MonoidWithZero.inverse_apply {M : Type*} [CommMonoidWithZero M] (a : M) :\n    MonoidWithZero.inverse a = Ring.inverse a :=\n  rfl\n\n"}
{"name":"Units.smul_mk0","module":"Mathlib.Algebra.GroupWithZero.Units.Lemmas","initialProofState":"G₀ : Type u_3\ninst✝¹ : GroupWithZero G₀\nα : Type u_8\ninst✝ : SMul G₀ α\ng : G₀\nhg : Ne g 0\na : α\n⊢ Eq (HSMul.hSMul (Units.mk0 g hg) a) (HSMul.hSMul g a)","decl":"@[simp]\ntheorem smul_mk0 {α : Type*} [SMul G₀ α] {g : G₀} (hg : g ≠ 0) (a : α) : mk0 g hg • a = g • a :=\n  rfl\n\n"}
{"name":"map_zpow₀","module":"Mathlib.Algebra.GroupWithZero.Units.Lemmas","initialProofState":"F : Type u_8\nG₀ : Type u_9\nG₀' : Type u_10\ninst✝³ : GroupWithZero G₀\ninst✝² : GroupWithZero G₀'\ninst✝¹ : FunLike F G₀ G₀'\ninst✝ : MonoidWithZeroHomClass F G₀ G₀'\nf : F\nx : G₀\nn : Int\n⊢ Eq (f (HPow.hPow x n)) (HPow.hPow (f x) n)","decl":"/-- If a monoid homomorphism `f` between two `GroupWithZero`s maps `0` to `0`, then it maps `x^n`,\n`n : ℤ`, to `(f x)^n`. -/\n@[simp]\ntheorem map_zpow₀ {F G₀ G₀' : Type*} [GroupWithZero G₀] [GroupWithZero G₀'] [FunLike F G₀ G₀']\n    [MonoidWithZeroHomClass F G₀ G₀'] (f : F) (x : G₀) (n : ℤ) : f (x ^ n) = f x ^ n :=\n  map_zpow' f (map_inv₀ f) x n\n\n"}
