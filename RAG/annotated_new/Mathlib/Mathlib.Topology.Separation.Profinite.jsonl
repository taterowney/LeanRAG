{"name":"totallySeparatedSpace_of_t1_of_basis_clopen","module":"Mathlib.Topology.Separation.Profinite","initialProofState":"X : Type u_1\ninst✝¹ : TopologicalSpace X\ninst✝ : T1Space X\nh : TopologicalSpace.IsTopologicalBasis (setOf fun s => IsClopen s)\n⊢ TotallySeparatedSpace X","decl":"/-- A T1 space with a clopen basis is totally separated. -/\ntheorem totallySeparatedSpace_of_t1_of_basis_clopen [T1Space X]\n    (h : IsTopologicalBasis { s : Set X | IsClopen s }) : TotallySeparatedSpace X := by\n  constructor\n  rintro x - y - hxy\n  rcases h.mem_nhds_iff.mp (isOpen_ne.mem_nhds hxy) with ⟨U, hU, hxU, hyU⟩\n  exact ⟨U, Uᶜ, hU.isOpen, hU.compl.isOpen, hxU, fun h => hyU h rfl, (union_compl_self U).superset,\n    disjoint_compl_right⟩\n\n"}
{"name":"nhds_basis_clopen","module":"Mathlib.Topology.Separation.Profinite","initialProofState":"X : Type u_1\ninst✝³ : TopologicalSpace X\ninst✝² : T2Space X\ninst✝¹ : CompactSpace X\ninst✝ : TotallyDisconnectedSpace X\nx : X\n⊢ (nhds x).HasBasis (fun s => And (Membership.mem s x) (IsClopen s)) id","decl":"theorem nhds_basis_clopen (x : X) : (𝓝 x).HasBasis (fun s : Set X => x ∈ s ∧ IsClopen s) id :=\n  ⟨fun U => by\n    constructor\n    · have hx : connectedComponent x = {x} :=\n        totallyDisconnectedSpace_iff_connectedComponent_singleton.mp ‹_› x\n      rw [connectedComponent_eq_iInter_isClopen] at hx\n      intro hU\n      let N := { s // IsClopen s ∧ x ∈ s }\n      rsuffices ⟨⟨s, hs, hs'⟩, hs''⟩ : ∃ s : N, s.val ⊆ U\n      · exact ⟨s, ⟨hs', hs⟩, hs''⟩\n      haveI : Nonempty N := ⟨⟨univ, isClopen_univ, mem_univ x⟩⟩\n      have hNcl : ∀ s : N, IsClosed s.val := fun s => s.property.1.1\n      have hdir : Directed Superset fun s : N => s.val := by\n        rintro ⟨s, hs, hxs⟩ ⟨t, ht, hxt⟩\n        exact ⟨⟨s ∩ t, hs.inter ht, ⟨hxs, hxt⟩⟩, inter_subset_left, inter_subset_right⟩\n      have h_nhd : ∀ y ∈ ⋂ s : N, s.val, U ∈ 𝓝 y := fun y y_in => by\n        rw [hx, mem_singleton_iff] at y_in\n        rwa [y_in]\n      exact exists_subset_nhds_of_compactSpace hdir hNcl h_nhd\n    · rintro ⟨V, ⟨hxV, -, V_op⟩, hUV : V ⊆ U⟩\n      rw [mem_nhds_iff]\n      exact ⟨V, hUV, V_op, hxV⟩⟩\n\n"}
{"name":"isTopologicalBasis_isClopen","module":"Mathlib.Topology.Separation.Profinite","initialProofState":"X : Type u_1\ninst✝³ : TopologicalSpace X\ninst✝² : T2Space X\ninst✝¹ : CompactSpace X\ninst✝ : TotallyDisconnectedSpace X\n⊢ TopologicalSpace.IsTopologicalBasis (setOf fun s => IsClopen s)","decl":"theorem isTopologicalBasis_isClopen : IsTopologicalBasis { s : Set X | IsClopen s } := by\n  apply isTopologicalBasis_of_isOpen_of_nhds fun U (hU : IsClopen U) => hU.2\n  intro x U hxU U_op\n  have : U ∈ 𝓝 x := IsOpen.mem_nhds U_op hxU\n  rcases (nhds_basis_clopen x).mem_iff.mp this with ⟨V, ⟨hxV, hV⟩, hVU : V ⊆ U⟩\n  use V\n  tauto\n\n"}
{"name":"compact_exists_isClopen_in_isOpen","module":"Mathlib.Topology.Separation.Profinite","initialProofState":"X : Type u_1\ninst✝³ : TopologicalSpace X\ninst✝² : T2Space X\ninst✝¹ : CompactSpace X\ninst✝ : TotallyDisconnectedSpace X\nx : X\nU : Set X\nis_open : IsOpen U\nmemU : Membership.mem U x\n⊢ Exists fun V => And (IsClopen V) (And (Membership.mem V x) (HasSubset.Subset V U))","decl":"/-- Every member of an open set in a compact Hausdorff totally disconnected space\n  is contained in a clopen set contained in the open set. -/\ntheorem compact_exists_isClopen_in_isOpen {x : X} {U : Set X} (is_open : IsOpen U) (memU : x ∈ U) :\n    ∃ V : Set X, IsClopen V ∧ x ∈ V ∧ V ⊆ U :=\n  isTopologicalBasis_isClopen.mem_nhds_iff.1 (is_open.mem_nhds memU)\n\n"}
{"name":"loc_compact_Haus_tot_disc_of_zero_dim","module":"Mathlib.Topology.Separation.Profinite","initialProofState":"H : Type u_3\ninst✝³ : TopologicalSpace H\ninst✝² : LocallyCompactSpace H\ninst✝¹ : T2Space H\ninst✝ : TotallyDisconnectedSpace H\n⊢ TopologicalSpace.IsTopologicalBasis (setOf fun s => IsClopen s)","decl":"/-- A locally compact Hausdorff totally disconnected space has a basis with clopen elements. -/\ntheorem loc_compact_Haus_tot_disc_of_zero_dim [TotallyDisconnectedSpace H] :\n    IsTopologicalBasis { s : Set H | IsClopen s } := by\n  refine isTopologicalBasis_of_isOpen_of_nhds (fun u hu => hu.2) fun x U memU hU => ?_\n  obtain ⟨s, comp, xs, sU⟩ := exists_compact_subset hU memU\n  let u : Set s := ((↑) : s → H) ⁻¹' interior s\n  have u_open_in_s : IsOpen u := isOpen_interior.preimage continuous_subtype_val\n  lift x to s using interior_subset xs\n  haveI : CompactSpace s := isCompact_iff_compactSpace.1 comp\n  obtain ⟨V : Set s, VisClopen, Vx, V_sub⟩ := compact_exists_isClopen_in_isOpen u_open_in_s xs\n  have VisClopen' : IsClopen (((↑) : s → H) '' V) := by\n    refine ⟨comp.isClosed.isClosedEmbedding_subtypeVal.isClosed_iff_image_isClosed.1 VisClopen.1,\n      ?_⟩\n    let v : Set u := ((↑) : u → s) ⁻¹' V\n    have : ((↑) : u → H) = ((↑) : s → H) ∘ ((↑) : u → s) := rfl\n    have f0 : IsEmbedding ((↑) : u → H) := IsEmbedding.subtypeVal.comp IsEmbedding.subtypeVal\n    have f1 : IsOpenEmbedding ((↑) : u → H) := by\n      refine ⟨f0, ?_⟩\n      · have : Set.range ((↑) : u → H) = interior s := by\n          rw [this, Set.range_comp, Subtype.range_coe, Subtype.image_preimage_coe]\n          apply Set.inter_eq_self_of_subset_right interior_subset\n        rw [this]\n        apply isOpen_interior\n    have f2 : IsOpen v := VisClopen.2.preimage continuous_subtype_val\n    have f3 : ((↑) : s → H) '' V = ((↑) : u → H) '' v := by\n      rw [this, image_comp, Subtype.image_preimage_coe, inter_eq_self_of_subset_right V_sub]\n    rw [f3]\n    apply f1.isOpenMap v f2\n  use (↑) '' V, VisClopen', by simp [Vx], Subset.trans (by simp) sU\n\n"}
{"name":"loc_compact_t2_tot_disc_iff_tot_sep","module":"Mathlib.Topology.Separation.Profinite","initialProofState":"H : Type u_3\ninst✝² : TopologicalSpace H\ninst✝¹ : LocallyCompactSpace H\ninst✝ : T2Space H\n⊢ Iff (TotallyDisconnectedSpace H) (TotallySeparatedSpace H)","decl":"/-- A locally compact Hausdorff space is totally disconnected\n  if and only if it is totally separated. -/\ntheorem loc_compact_t2_tot_disc_iff_tot_sep :\n    TotallyDisconnectedSpace H ↔ TotallySeparatedSpace H := by\n  constructor\n  · intro h\n    exact totallySeparatedSpace_of_t1_of_basis_clopen loc_compact_Haus_tot_disc_of_zero_dim\n  apply TotallySeparatedSpace.totallyDisconnectedSpace\n\n"}
{"name":"compact_t2_tot_disc_iff_tot_sep","module":"Mathlib.Topology.Separation.Profinite","initialProofState":"H : Type u_3\ninst✝² : TopologicalSpace H\ninst✝¹ : LocallyCompactSpace H\ninst✝ : T2Space H\n⊢ Iff (TotallyDisconnectedSpace H) (TotallySeparatedSpace H)","decl":"@[deprecated (since := \"2024-12-18\")] alias compact_t2_tot_disc_iff_tot_sep :=\n  loc_compact_t2_tot_disc_iff_tot_sep\n\n"}
{"name":"instTotallySeparatedSpaceOfTotallyDisconnectedSpace","module":"Mathlib.Topology.Separation.Profinite","initialProofState":"H : Type u_3\ninst✝³ : TopologicalSpace H\ninst✝² : LocallyCompactSpace H\ninst✝¹ : T2Space H\ninst✝ : TotallyDisconnectedSpace H\n⊢ TotallySeparatedSpace H","decl":"/-- A totally disconnected compact Hausdorff space is totally separated. -/\ninstance (priority := 100) [TotallyDisconnectedSpace H] : TotallySeparatedSpace H :=\n  loc_compact_t2_tot_disc_iff_tot_sep.mp inferInstance\n\n"}
