{"name":"MvPolynomial.mkDerivationₗ_monomial","module":"Mathlib.Algebra.MvPolynomial.Derivation","initialProofState":"σ : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Module (MvPolynomial σ R) A\nf : σ → A\ns : Finsupp σ Nat\nr : R\n⊢ Eq ((MvPolynomial.mkDerivationₗ R f) ((MvPolynomial.monomial s) r)) (HSMul.hSMul r (s.sum fun i k => HSMul.hSMul ((MvPolynomial.monomial (HSub.hSub s (Finsupp.single i 1))) ↑k) (f i)))","decl":"theorem mkDerivationₗ_monomial (f : σ → A) (s : σ →₀ ℕ) (r : R) :\n    mkDerivationₗ R f (monomial s r) =\n      r • s.sum fun i k => monomial (s - Finsupp.single i 1) (k : R) • f i :=\n  sum_monomial_eq <| LinearMap.map_zero _\n\n"}
{"name":"MvPolynomial.mkDerivationₗ_C","module":"Mathlib.Algebra.MvPolynomial.Derivation","initialProofState":"σ : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Module (MvPolynomial σ R) A\nf : σ → A\nr : R\n⊢ Eq ((MvPolynomial.mkDerivationₗ R f) (MvPolynomial.C r)) 0","decl":"theorem mkDerivationₗ_C (f : σ → A) (r : R) : mkDerivationₗ R f (C r) = 0 :=\n  (mkDerivationₗ_monomial f _ _).trans (smul_zero _)\n\n"}
{"name":"MvPolynomial.mkDerivationₗ_X","module":"Mathlib.Algebra.MvPolynomial.Derivation","initialProofState":"σ : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Module (MvPolynomial σ R) A\nf : σ → A\ni : σ\n⊢ Eq ((MvPolynomial.mkDerivationₗ R f) (MvPolynomial.X i)) (f i)","decl":"theorem mkDerivationₗ_X (f : σ → A) (i : σ) : mkDerivationₗ R f (X i) = f i :=\n  (mkDerivationₗ_monomial f _ _).trans <| by simp [tsub_self]\n\n"}
{"name":"MvPolynomial.derivation_C","module":"Mathlib.Algebra.MvPolynomial.Derivation","initialProofState":"σ : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Module (MvPolynomial σ R) A\nD : Derivation R (MvPolynomial σ R) A\na : R\n⊢ Eq (D (MvPolynomial.C a)) 0","decl":"@[simp]\ntheorem derivation_C (D : Derivation R (MvPolynomial σ R) A) (a : R) : D (C a) = 0 :=\n  D.map_algebraMap a\n\n"}
{"name":"MvPolynomial.derivation_C_mul","module":"Mathlib.Algebra.MvPolynomial.Derivation","initialProofState":"σ : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Module (MvPolynomial σ R) A\nD : Derivation R (MvPolynomial σ R) A\na : R\nf : MvPolynomial σ R\n⊢ Eq (HSMul.hSMul (MvPolynomial.C a) (D f)) (HSMul.hSMul a (D f))","decl":"@[simp]\ntheorem derivation_C_mul (D : Derivation R (MvPolynomial σ R) A) (a : R) (f : MvPolynomial σ R) :\n    C (σ := σ) a • D f = a • D f := by\n  have : C (σ := σ) a • D f = D (C a * f) := by simp\n  rw [this, C_mul', D.map_smul]\n\n"}
{"name":"MvPolynomial.derivation_eqOn_supported","module":"Mathlib.Algebra.MvPolynomial.Derivation","initialProofState":"σ : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Module (MvPolynomial σ R) A\nD₁ D₂ : Derivation R (MvPolynomial σ R) A\ns : Set σ\nh : Set.EqOn (Function.comp (⇑D₁) MvPolynomial.X) (Function.comp (⇑D₂) MvPolynomial.X) s\nf : MvPolynomial σ R\nhf : Membership.mem (MvPolynomial.supported R s) f\n⊢ Eq (D₁ f) (D₂ f)","decl":"/-- If two derivations agree on `X i`, `i ∈ s`, then they agree on all polynomials from\n`MvPolynomial.supported R s`. -/\ntheorem derivation_eqOn_supported {D₁ D₂ : Derivation R (MvPolynomial σ R) A} {s : Set σ}\n    (h : Set.EqOn (D₁ ∘ X) (D₂ ∘ X) s) {f : MvPolynomial σ R} (hf : f ∈ supported R s) :\n    D₁ f = D₂ f :=\n  Derivation.eqOn_adjoin (Set.forall_mem_image.2 h) hf\n\n"}
{"name":"MvPolynomial.derivation_eq_of_forall_mem_vars","module":"Mathlib.Algebra.MvPolynomial.Derivation","initialProofState":"σ : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Module (MvPolynomial σ R) A\nD₁ D₂ : Derivation R (MvPolynomial σ R) A\nf : MvPolynomial σ R\nh : ∀ (i : σ), Membership.mem f.vars i → Eq (D₁ (MvPolynomial.X i)) (D₂ (MvPolynomial.X i))\n⊢ Eq (D₁ f) (D₂ f)","decl":"theorem derivation_eq_of_forall_mem_vars {D₁ D₂ : Derivation R (MvPolynomial σ R) A}\n    {f : MvPolynomial σ R} (h : ∀ i ∈ f.vars, D₁ (X i) = D₂ (X i)) : D₁ f = D₂ f :=\n  derivation_eqOn_supported h f.mem_supported_vars\n\n"}
{"name":"MvPolynomial.derivation_eq_zero_of_forall_mem_vars","module":"Mathlib.Algebra.MvPolynomial.Derivation","initialProofState":"σ : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Module (MvPolynomial σ R) A\nD : Derivation R (MvPolynomial σ R) A\nf : MvPolynomial σ R\nh : ∀ (i : σ), Membership.mem f.vars i → Eq (D (MvPolynomial.X i)) 0\n⊢ Eq (D f) 0","decl":"theorem derivation_eq_zero_of_forall_mem_vars {D : Derivation R (MvPolynomial σ R) A}\n    {f : MvPolynomial σ R} (h : ∀ i ∈ f.vars, D (X i) = 0) : D f = 0 :=\n  show D f = (0 : Derivation R (MvPolynomial σ R) A) f from derivation_eq_of_forall_mem_vars h\n\n"}
{"name":"MvPolynomial.derivation_ext","module":"Mathlib.Algebra.MvPolynomial.Derivation","initialProofState":"σ : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Module (MvPolynomial σ R) A\nD₁ D₂ : Derivation R (MvPolynomial σ R) A\nh : ∀ (i : σ), Eq (D₁ (MvPolynomial.X i)) (D₂ (MvPolynomial.X i))\n⊢ Eq D₁ D₂","decl":"@[ext]\ntheorem derivation_ext {D₁ D₂ : Derivation R (MvPolynomial σ R) A} (h : ∀ i, D₁ (X i) = D₂ (X i)) :\n    D₁ = D₂ :=\n  Derivation.ext fun _ => derivation_eq_of_forall_mem_vars fun i _ => h i\n\n"}
{"name":"MvPolynomial.derivation_ext_iff","module":"Mathlib.Algebra.MvPolynomial.Derivation","initialProofState":"σ : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Module (MvPolynomial σ R) A\nD₁ D₂ : Derivation R (MvPolynomial σ R) A\n⊢ Iff (Eq D₁ D₂) (∀ (i : σ), Eq (D₁ (MvPolynomial.X i)) (D₂ (MvPolynomial.X i)))","decl":"@[ext]\ntheorem derivation_ext {D₁ D₂ : Derivation R (MvPolynomial σ R) A} (h : ∀ i, D₁ (X i) = D₂ (X i)) :\n    D₁ = D₂ :=\n  Derivation.ext fun _ => derivation_eq_of_forall_mem_vars fun i _ => h i\n\n"}
{"name":"MvPolynomial.leibniz_iff_X","module":"Mathlib.Algebra.MvPolynomial.Derivation","initialProofState":"σ : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁴ : CommSemiring R\ninst✝³ : AddCommMonoid A\ninst✝² : Module R A\ninst✝¹ : Module (MvPolynomial σ R) A\ninst✝ : IsScalarTower R (MvPolynomial σ R) A\nD : LinearMap (RingHom.id R) (MvPolynomial σ R) A\nh₁ : Eq (D 1) 0\n⊢ Iff (∀ (p q : MvPolynomial σ R), Eq (D (HMul.hMul p q)) (HAdd.hAdd (HSMul.hSMul p (D q)) (HSMul.hSMul q (D p)))) (∀ (s : Finsupp σ Nat) (i : σ), Eq (D (HMul.hMul ((MvPolynomial.monomial s) 1) (MvPolynomial.X i))) (HAdd.hAdd (HSMul.hSMul ((MvPolynomial.monomial s) 1) (D (MvPolynomial.X i))) (HSMul.hSMul (MvPolynomial.X i) (D ((MvPolynomial.monomial s) 1)))))","decl":"theorem leibniz_iff_X (D : MvPolynomial σ R →ₗ[R] A) (h₁ : D 1 = 0) :\n    (∀ p q, D (p * q) = p • D q + q • D p) ↔ ∀ s i, D (monomial s 1 * X i) =\n    (monomial s 1 : MvPolynomial σ R) • D (X i) + (X i : MvPolynomial σ R) • D (monomial s 1) := by\n  refine ⟨fun H p i => H _ _, fun H => ?_⟩\n  have hC : ∀ r, D (C r) = 0 := by intro r; rw [C_eq_smul_one, D.map_smul, h₁, smul_zero]\n  have : ∀ p i, D (p * X i) = p • D (X i) + (X i : MvPolynomial σ R) • D p := by\n    intro p i\n    induction' p using MvPolynomial.induction_on' with s r p q hp hq\n    · rw [← mul_one r, ← C_mul_monomial, mul_assoc, C_mul', D.map_smul, H, C_mul', smul_assoc,\n        smul_add, D.map_smul, smul_comm r (X i)]\n    · rw [add_mul, map_add, map_add, hp, hq, add_smul, smul_add, add_add_add_comm]\n  intro p q\n  induction q using MvPolynomial.induction_on with\n  | h_C c =>\n    rw [mul_comm, C_mul', hC, smul_zero, zero_add, D.map_smul, C_eq_smul_one, smul_one_smul]\n  | h_add q₁ q₂ h₁ h₂ => simp only [mul_add, map_add, h₁, h₂, smul_add, add_smul]; abel\n  | h_X q i hq =>\n    simp only [this, ← mul_assoc, hq, mul_smul, smul_add, add_assoc]\n    rw [smul_comm (X i), smul_comm (X i)]\n\n"}
{"name":"MvPolynomial.mkDerivation_X","module":"Mathlib.Algebra.MvPolynomial.Derivation","initialProofState":"σ : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁴ : CommSemiring R\ninst✝³ : AddCommMonoid A\ninst✝² : Module R A\ninst✝¹ : Module (MvPolynomial σ R) A\ninst✝ : IsScalarTower R (MvPolynomial σ R) A\nf : σ → A\ni : σ\n⊢ Eq ((MvPolynomial.mkDerivation R f) (MvPolynomial.X i)) (f i)","decl":"@[simp]\ntheorem mkDerivation_X (f : σ → A) (i : σ) : mkDerivation R f (X i) = f i :=\n  mkDerivationₗ_X f i\n\n"}
{"name":"MvPolynomial.mkDerivation_monomial","module":"Mathlib.Algebra.MvPolynomial.Derivation","initialProofState":"σ : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁴ : CommSemiring R\ninst✝³ : AddCommMonoid A\ninst✝² : Module R A\ninst✝¹ : Module (MvPolynomial σ R) A\ninst✝ : IsScalarTower R (MvPolynomial σ R) A\nf : σ → A\ns : Finsupp σ Nat\nr : R\n⊢ Eq ((MvPolynomial.mkDerivation R f) ((MvPolynomial.monomial s) r)) (HSMul.hSMul r (s.sum fun i k => HSMul.hSMul ((MvPolynomial.monomial (HSub.hSub s (Finsupp.single i 1))) ↑k) (f i)))","decl":"theorem mkDerivation_monomial (f : σ → A) (s : σ →₀ ℕ) (r : R) :\n    mkDerivation R f (monomial s r) =\n      r • s.sum fun i k => monomial (s - Finsupp.single i 1) (k : R) • f i :=\n  mkDerivationₗ_monomial f s r\n\n"}
