{"name":"Polynomial.eval₂_smul","module":"Mathlib.Algebra.Polynomial.Eval.SMul","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : Semiring R\ninst✝ : Semiring S\ng : RingHom R S\np : Polynomial R\nx : S\ns : R\n⊢ Eq (Polynomial.eval₂ g x (HSMul.hSMul s p)) (HMul.hMul (g s) (Polynomial.eval₂ g x p))","decl":"@[simp]\ntheorem eval₂_smul (g : R →+* S) (p : R[X]) (x : S) {s : R} :\n    eval₂ g x (s • p) = g s * eval₂ g x p := by\n  have A : p.natDegree < p.natDegree.succ := Nat.lt_succ_self _\n  have B : (s • p).natDegree < p.natDegree.succ := (natDegree_smul_le _ _).trans_lt A\n  rw [eval₂_eq_sum, eval₂_eq_sum, sum_over_range' _ _ _ A, sum_over_range' _ _ _ B] <;>\n    simp [mul_sum, mul_assoc]\n\n"}
{"name":"Polynomial.eval_smul","module":"Mathlib.Algebra.Polynomial.Eval.SMul","initialProofState":"R : Type u\nS : Type v\ninst✝³ : Semiring R\ninst✝² : Monoid S\ninst✝¹ : DistribMulAction S R\ninst✝ : IsScalarTower S R R\ns : S\np : Polynomial R\nx : R\n⊢ Eq (Polynomial.eval x (HSMul.hSMul s p)) (HSMul.hSMul s (Polynomial.eval x p))","decl":"@[simp]\ntheorem eval_smul [Monoid S] [DistribMulAction S R] [IsScalarTower S R R] (s : S) (p : R[X])\n    (x : R) : (s • p).eval x = s • p.eval x := by\n  rw [← smul_one_smul R s p, eval, eval₂_smul, RingHom.id_apply, smul_one_mul]\n\n"}
{"name":"Polynomial.leval_apply","module":"Mathlib.Algebra.Polynomial.Eval.SMul","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nr : R\nf : Polynomial R\n⊢ Eq ((Polynomial.leval r) f) (Polynomial.eval r f)","decl":"/-- `Polynomial.eval` as linear map -/\n@[simps]\ndef leval {R : Type*} [Semiring R] (r : R) : R[X] →ₗ[R] R where\n  toFun f := f.eval r\n  map_add' _f _g := eval_add\n  map_smul' c f := eval_smul c f r\n\n"}
{"name":"Polynomial.smul_comp","module":"Mathlib.Algebra.Polynomial.Eval.SMul","initialProofState":"R : Type u\nS : Type v\ninst✝³ : Semiring R\ninst✝² : Monoid S\ninst✝¹ : DistribMulAction S R\ninst✝ : IsScalarTower S R R\ns : S\np q : Polynomial R\n⊢ Eq ((HSMul.hSMul s p).comp q) (HSMul.hSMul s (p.comp q))","decl":"@[simp]\ntheorem smul_comp [Monoid S] [DistribMulAction S R] [IsScalarTower S R R] (s : S) (p q : R[X]) :\n    (s • p).comp q = s • p.comp q := by\n  rw [← smul_one_smul R s p, comp, comp, eval₂_smul, ← smul_eq_C_mul, smul_assoc, one_smul]\n\n"}
{"name":"Polynomial.map_smul","module":"Mathlib.Algebra.Polynomial.Eval.SMul","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : Semiring R\np : Polynomial R\ninst✝ : Semiring S\nf : RingHom R S\nr : R\n⊢ Eq (Polynomial.map f (HSMul.hSMul r p)) (HSMul.hSMul (f r) (Polynomial.map f p))","decl":"@[simp]\nprotected theorem map_smul (r : R) : (r • p).map f = f r • p.map f := by\n  rw [map, eval₂_smul, RingHom.comp_apply, C_mul']\n\n"}
