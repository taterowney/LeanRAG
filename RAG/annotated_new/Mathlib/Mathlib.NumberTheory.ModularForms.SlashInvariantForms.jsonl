{"name":"SlashInvariantForm.mk.sizeOf_spec","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : outParam (Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int))\nk : outParam Int\ntoFun : UpperHalfPlane → Complex\nslash_action_eq' : ∀ (γ : Matrix.SpecialLinearGroup (Fin 2) Int), Membership.mem Γ γ → Eq (SlashAction.map Complex k γ toFun) toFun\n⊢ Eq (SizeOf.sizeOf { toFun := toFun, slash_action_eq' := slash_action_eq' }) 1","decl":"/-- Functions `ℍ → ℂ` that are invariant under the `SlashAction`. -/\nstructure SlashInvariantForm where\n  toFun : ℍ → ℂ\n  slash_action_eq' : ∀ γ ∈ Γ, toFun ∣[k] γ = toFun\n\n"}
{"name":"SlashInvariantForm.slash_action_eq'","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : outParam (Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int))\nk : outParam Int\nself : SlashInvariantForm Γ k\nγ : Matrix.SpecialLinearGroup (Fin 2) Int\na✝ : Membership.mem Γ γ\n⊢ Eq (SlashAction.map Complex k γ self.toFun) self.toFun","decl":"/-- Functions `ℍ → ℂ` that are invariant under the `SlashAction`. -/\nstructure SlashInvariantForm where\n  toFun : ℍ → ℂ\n  slash_action_eq' : ∀ γ ∈ Γ, toFun ∣[k] γ = toFun\n\n"}
{"name":"SlashInvariantForm.mk.inj","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : outParam (Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int))\nk : outParam Int\ntoFun✝ : UpperHalfPlane → Complex\nslash_action_eq'✝ : ∀ (γ : Matrix.SpecialLinearGroup (Fin 2) Int), Membership.mem Γ γ → Eq (SlashAction.map Complex k γ toFun✝) toFun✝\ntoFun : UpperHalfPlane → Complex\nslash_action_eq' : ∀ (γ : Matrix.SpecialLinearGroup (Fin 2) Int), Membership.mem Γ γ → Eq (SlashAction.map Complex k γ toFun) toFun\nx✝ : Eq { toFun := toFun✝, slash_action_eq' := slash_action_eq'✝ } { toFun := toFun, slash_action_eq' := slash_action_eq' }\n⊢ Eq toFun✝ toFun","decl":"/-- Functions `ℍ → ℂ` that are invariant under the `SlashAction`. -/\nstructure SlashInvariantForm where\n  toFun : ℍ → ℂ\n  slash_action_eq' : ∀ γ ∈ Γ, toFun ∣[k] γ = toFun\n\n"}
{"name":"SlashInvariantForm.mk.injEq","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : outParam (Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int))\nk : outParam Int\ntoFun✝ : UpperHalfPlane → Complex\nslash_action_eq'✝ : ∀ (γ : Matrix.SpecialLinearGroup (Fin 2) Int), Membership.mem Γ γ → Eq (SlashAction.map Complex k γ toFun✝) toFun✝\ntoFun : UpperHalfPlane → Complex\nslash_action_eq' : ∀ (γ : Matrix.SpecialLinearGroup (Fin 2) Int), Membership.mem Γ γ → Eq (SlashAction.map Complex k γ toFun) toFun\n⊢ Eq (Eq { toFun := toFun✝, slash_action_eq' := slash_action_eq'✝ } { toFun := toFun, slash_action_eq' := slash_action_eq' }) (Eq toFun✝ toFun)","decl":"/-- Functions `ℍ → ℂ` that are invariant under the `SlashAction`. -/\nstructure SlashInvariantForm where\n  toFun : ℍ → ℂ\n  slash_action_eq' : ∀ γ ∈ Γ, toFun ∣[k] γ = toFun\n\n"}
{"name":"SlashInvariantFormClass.slash_action_eq","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"F : Type u_1\nΓ : outParam (Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int))\nk : outParam Int\ninst✝ : FunLike F UpperHalfPlane Complex\nself : SlashInvariantFormClass F Γ k\nf : F\nγ : Matrix.SpecialLinearGroup (Fin 2) Int\na✝ : Membership.mem Γ γ\n⊢ Eq (SlashAction.map Complex k γ ⇑f) ⇑f","decl":"/-- `SlashInvariantFormClass F Γ k` asserts `F` is a type of bundled functions that are invariant\nunder the `SlashAction`. -/\nclass SlashInvariantFormClass [FunLike F ℍ ℂ] : Prop where\n  slash_action_eq : ∀ (f : F), ∀ γ ∈ Γ, (f : ℍ → ℂ) ∣[k] γ = f\n\n"}
{"name":"SlashInvariantFormClass.slashInvariantForm","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : outParam (Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int))\nk : outParam Int\n⊢ SlashInvariantFormClass (SlashInvariantForm Γ k) Γ k","decl":"instance (priority := 100) SlashInvariantFormClass.slashInvariantForm :\n    SlashInvariantFormClass (SlashInvariantForm Γ k) Γ k where\n  slash_action_eq := SlashInvariantForm.slash_action_eq'\n\n"}
{"name":"SlashInvariantForm.toFun_eq_coe","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : outParam (Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int))\nk : outParam Int\nf : SlashInvariantForm Γ k\n⊢ Eq f.toFun ⇑f","decl":"@[simp]\ntheorem SlashInvariantForm.toFun_eq_coe {f : SlashInvariantForm Γ k} : f.toFun = (f : ℍ → ℂ) :=\n  rfl\n\n"}
{"name":"SlashInvariantForm.coe_mk","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : outParam (Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int))\nk : outParam Int\nf : UpperHalfPlane → Complex\nhf : ∀ (γ : Matrix.SpecialLinearGroup (Fin 2) Int), Membership.mem Γ γ → Eq (SlashAction.map Complex k γ f) f\n⊢ Eq (⇑{ toFun := f, slash_action_eq' := hf }) f","decl":"@[simp]\ntheorem SlashInvariantForm.coe_mk (f : ℍ → ℂ) (hf : ∀ γ ∈ Γ, f ∣[k] γ = f) : ⇑(mk f hf) = f := rfl\n\n"}
{"name":"SlashInvariantForm.ext_iff","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : outParam (Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int))\nk : outParam Int\nf g : SlashInvariantForm Γ k\n⊢ Iff (Eq f g) (∀ (x : UpperHalfPlane), Eq (f x) (g x))","decl":"@[ext]\ntheorem SlashInvariantForm.ext {f g : SlashInvariantForm Γ k} (h : ∀ x, f x = g x) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"SlashInvariantForm.ext","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : outParam (Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int))\nk : outParam Int\nf g : SlashInvariantForm Γ k\nh : ∀ (x : UpperHalfPlane), Eq (f x) (g x)\n⊢ Eq f g","decl":"@[ext]\ntheorem SlashInvariantForm.ext {f g : SlashInvariantForm Γ k} (h : ∀ x, f x = g x) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"SlashInvariantForm.slash_action_eqn","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"F : Type u_1\nΓ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\ninst✝¹ : FunLike F UpperHalfPlane Complex\ninst✝ : SlashInvariantFormClass F Γ k\nf : F\nγ : Matrix.SpecialLinearGroup (Fin 2) Int\nhγ : Membership.mem Γ γ\n⊢ Eq (SlashAction.map Complex k γ ⇑f) ⇑f","decl":"theorem slash_action_eqn [SlashInvariantFormClass F Γ k] (f : F) (γ) (hγ : γ ∈ Γ) :\n    ↑f ∣[k] γ = ⇑f :=\n  SlashInvariantFormClass.slash_action_eq f γ hγ\n\n"}
{"name":"SlashInvariantForm.slash_action_eqn'","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"F : Type u_1\ninst✝¹ : FunLike F UpperHalfPlane Complex\nk : Int\nΓ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\ninst✝ : SlashInvariantFormClass F Γ k\nf : F\nγ : Matrix.SpecialLinearGroup (Fin 2) Int\nhγ : Membership.mem Γ γ\nz : UpperHalfPlane\n⊢ Eq (f (HSMul.hSMul γ z)) (HMul.hMul (HPow.hPow (HAdd.hAdd (HMul.hMul ↑(↑γ 1 0) ↑z) ↑(↑γ 1 1)) k) (f z))","decl":"theorem slash_action_eqn' {k : ℤ} {Γ : Subgroup SL(2, ℤ)} [SlashInvariantFormClass F Γ k]\n    (f : F) {γ} (hγ : γ ∈ Γ) (z : ℍ) :\n    f (γ • z) = (γ 1 0 * z + γ 1 1) ^ k * f z := by\n  rw [← ModularForm.slash_action_eq'_iff, slash_action_eqn f γ hγ]\n\n"}
{"name":"SlashInvariantForm.slash_action_eqn''","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"F : Type u_2\ninst✝¹ : FunLike F UpperHalfPlane Complex\nk : Int\nΓ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\ninst✝ : SlashInvariantFormClass F Γ k\nf : F\nγ : Matrix.SpecialLinearGroup (Fin 2) Int\nhγ : Membership.mem Γ γ\nz : UpperHalfPlane\n⊢ Eq (f (HSMul.hSMul γ z)) (HMul.hMul (HPow.hPow (UpperHalfPlane.denom (↑γ) z) k) (f z))","decl":"/--Every `SlashInvariantForm` `f` satisfies ` f (γ • z) = (denom γ z) ^ k * f z`. -/\ntheorem slash_action_eqn'' {F : Type*} [FunLike F ℍ ℂ] {k : ℤ} {Γ : Subgroup SL(2, ℤ)}\n    [SlashInvariantFormClass F Γ k] (f : F) {γ : SL(2, ℤ)} (hγ : γ ∈ Γ) (z : ℍ) :\n    f (γ • z) = (denom γ z) ^ k * f z :=\n  SlashInvariantForm.slash_action_eqn' f hγ z\n\n"}
{"name":"SlashInvariantForm.coe_add","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf g : SlashInvariantForm Γ k\n⊢ Eq (⇑(HAdd.hAdd f g)) (HAdd.hAdd ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_add (f g : SlashInvariantForm Γ k) : ⇑(f + g) = f + g :=\n  rfl\n\n"}
{"name":"SlashInvariantForm.add_apply","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf g : SlashInvariantForm Γ k\nz : UpperHalfPlane\n⊢ Eq ((HAdd.hAdd f g) z) (HAdd.hAdd (f z) (g z))","decl":"@[simp]\ntheorem add_apply (f g : SlashInvariantForm Γ k) (z : ℍ) : (f + g) z = f z + g z :=\n  rfl\n\n"}
{"name":"SlashInvariantForm.coe_zero","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\n⊢ Eq (⇑0) 0","decl":"@[simp]\ntheorem coe_zero : ⇑(0 : SlashInvariantForm Γ k) = (0 : ℍ → ℂ) :=\n  rfl\n\n"}
{"name":"SlashInvariantForm.coe_smul","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nα : Type u_2\ninst✝¹ : SMul α Complex\ninst✝ : IsScalarTower α Complex Complex\nf : SlashInvariantForm Γ k\nn : α\n⊢ Eq (⇑(HSMul.hSMul n f)) (HSMul.hSMul n ⇑f)","decl":"@[simp]\ntheorem coe_smul (f : SlashInvariantForm Γ k) (n : α) : ⇑(n • f) = n • ⇑f :=\n  rfl\n\n"}
{"name":"SlashInvariantForm.smul_apply","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nα : Type u_2\ninst✝¹ : SMul α Complex\ninst✝ : IsScalarTower α Complex Complex\nf : SlashInvariantForm Γ k\nn : α\nz : UpperHalfPlane\n⊢ Eq ((HSMul.hSMul n f) z) (HSMul.hSMul n (f z))","decl":"@[simp]\ntheorem smul_apply (f : SlashInvariantForm Γ k) (n : α) (z : ℍ) : (n • f) z = n • f z :=\n  rfl\n\n"}
{"name":"SlashInvariantForm.coe_neg","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf : SlashInvariantForm Γ k\n⊢ Eq (⇑(Neg.neg f)) (Neg.neg ⇑f)","decl":"@[simp]\ntheorem coe_neg (f : SlashInvariantForm Γ k) : ⇑(-f) = -f :=\n  rfl\n\n"}
{"name":"SlashInvariantForm.neg_apply","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf : SlashInvariantForm Γ k\nz : UpperHalfPlane\n⊢ Eq ((Neg.neg f) z) (Neg.neg (f z))","decl":"@[simp]\ntheorem neg_apply (f : SlashInvariantForm Γ k) (z : ℍ) : (-f) z = -f z :=\n  rfl\n\n"}
{"name":"SlashInvariantForm.coe_sub","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf g : SlashInvariantForm Γ k\n⊢ Eq (⇑(HSub.hSub f g)) (HSub.hSub ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_sub (f g : SlashInvariantForm Γ k) : ⇑(f - g) = f - g :=\n  rfl\n\n"}
{"name":"SlashInvariantForm.sub_apply","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf g : SlashInvariantForm Γ k\nz : UpperHalfPlane\n⊢ Eq ((HSub.hSub f g) z) (HSub.hSub (f z) (g z))","decl":"@[simp]\ntheorem sub_apply (f g : SlashInvariantForm Γ k) (z : ℍ) : (f - g) z = f z - g z :=\n  rfl\n\n"}
{"name":"SlashInvariantForm.coeHom_injective","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\n⊢ Function.Injective ⇑SlashInvariantForm.coeHom","decl":"theorem coeHom_injective : Function.Injective (@coeHom Γ k) :=\n  DFunLike.coe_injective\n\n"}
{"name":"SlashInvariantForm.const_toFun","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nx : Complex\n⊢ Eq (⇑(SlashInvariantForm.const x)) (Function.const UpperHalfPlane x)","decl":"/-- The `SlashInvariantForm` corresponding to `Function.const _ x`. -/\n@[simps (config := .asFn)]\ndef const (x : ℂ) : SlashInvariantForm Γ 0 where\n  toFun := Function.const _ x\n  slash_action_eq' A _ := ModularForm.is_invariant_const A x\n\n"}
{"name":"SlashInvariantForm.one_coe_eq_one","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\n⊢ Eq (⇑1) 1","decl":"@[simp]\ntheorem one_coe_eq_one : ((1 : SlashInvariantForm Γ 0) : ℍ → ℂ) = 1 :=\n  rfl\n\n"}
{"name":"SlashInvariantForm.coe_mul","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"k₁ k₂ : Int\nΓ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nf : SlashInvariantForm Γ k₁\ng : SlashInvariantForm Γ k₂\n⊢ Eq (⇑(f.mul g)) (HMul.hMul ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_mul {k₁ k₂ : ℤ} {Γ : Subgroup SL(2, ℤ)} (f : SlashInvariantForm Γ k₁)\n    (g : SlashInvariantForm Γ k₂) : ⇑(f.mul g) = ⇑f * ⇑g :=\n  rfl\n\n"}
{"name":"SlashInvariantForm.coe_natCast","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nn : Nat\n⊢ Eq ⇑↑n ↑n","decl":"@[simp, norm_cast]\ntheorem coe_natCast (n : ℕ) : ⇑(n : SlashInvariantForm Γ 0) = n := rfl\n\n"}
{"name":"SlashInvariantForm.coe_intCast","module":"Mathlib.NumberTheory.ModularForms.SlashInvariantForms","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nz : Int\n⊢ Eq ⇑↑z ↑z","decl":"@[simp, norm_cast]\ntheorem coe_intCast (z : ℤ) : ⇑(z : SlashInvariantForm Γ 0) = z := rfl\n\n"}
