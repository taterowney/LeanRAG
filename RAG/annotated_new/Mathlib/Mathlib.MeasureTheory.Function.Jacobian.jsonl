{"name":"exists_closed_cover_approximatesLinearOn_of_hasFDerivWithinAt","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\nF : Type u_2\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\ninst‚úù¬≥ : FiniteDimensional Real E\ninst‚úù¬≤ : NormedAddCommGroup F\ninst‚úù¬π : NormedSpace Real F\ninst‚úù : SecondCountableTopology F\nf : E ‚Üí F\ns : Set E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E F\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\nr : ContinuousLinearMap (RingHom.id Real) E F ‚Üí NNReal\nrpos : ‚àÄ (A : ContinuousLinearMap (RingHom.id Real) E F), Ne (r A) 0\n‚ä¢ Exists fun t => Exists fun A => And (‚àÄ (n : Nat), IsClosed (t n)) (And (HasSubset.Subset s (Set.iUnion fun n => t n)) (And (‚àÄ (n : Nat), ApproximatesLinearOn f (A n) (Inter.inter s (t n)) (r (A n))) (s.Nonempty ‚Üí ‚àÄ (n : Nat), Exists fun y => And (Membership.mem s y) (Eq (A n) (f' y)))))","decl":"/-- Assume that a function `f` has a derivative at every point of a set `s`. Then one may cover `s`\nwith countably many closed sets `t n` on which `f` is well approximated by linear maps `A n`. -/\ntheorem exists_closed_cover_approximatesLinearOn_of_hasFDerivWithinAt [SecondCountableTopology F]\n    (f : E ‚Üí F) (s : Set E) (f' : E ‚Üí E ‚ÜíL[‚Ñù] F) (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x)\n    (r : (E ‚ÜíL[‚Ñù] F) ‚Üí ‚Ñù‚â•0) (rpos : ‚àÄ A, r A ‚â† 0) :\n    ‚àÉ (t : ‚Ñï ‚Üí Set E) (A : ‚Ñï ‚Üí E ‚ÜíL[‚Ñù] F),\n      (‚àÄ n, IsClosed (t n)) ‚àß\n        (s ‚äÜ ‚ãÉ n, t n) ‚àß\n          (‚àÄ n, ApproximatesLinearOn f (A n) (s ‚à© t n) (r (A n))) ‚àß\n            (s.Nonempty ‚Üí ‚àÄ n, ‚àÉ y ‚àà s, A n = f' y) := by\n  /- Choose countably many linear maps `f' z`. For every such map, if `f` has a derivative at `x`\n    close enough to `f' z`, then `f y - f x` is well approximated by `f' z (y - x)` for `y` close\n    enough to `x`, say on a ball of radius `r` (or even `u n` for some `n`, where `u` is a fixed\n    sequence tending to `0`).\n    Let `M n z` be the points where this happens. Then this set is relatively closed inside `s`,\n    and moreover in every closed ball of radius `u n / 3` inside it the map is well approximated by\n    `f' z`. Using countably many closed balls to split `M n z` into small diameter subsets\n    `K n z p`, one obtains the desired sets `t q` after reindexing.\n    -/\n  -- exclude the trivial case where `s` is empty\n  rcases eq_empty_or_nonempty s with (rfl | hs)\n  ¬∑ refine ‚ü®fun _ => ‚àÖ, fun _ => 0, ?_, ?_, ?_, ?_‚ü© <;> simp\n  -- we will use countably many linear maps. Select these from all the derivatives since the\n  -- space of linear maps is second-countable\n  obtain ‚ü®T, T_count, hT‚ü© :\n    ‚àÉ T : Set s,\n      T.Countable ‚àß ‚ãÉ x ‚àà T, ball (f' (x : E)) (r (f' x)) = ‚ãÉ x : s, ball (f' x) (r (f' x)) :=\n    TopologicalSpace.isOpen_iUnion_countable _ fun x => isOpen_ball\n  -- fix a sequence `u` of positive reals tending to zero.\n  obtain ‚ü®u, _, u_pos, u_lim‚ü© :\n    ‚àÉ u : ‚Ñï ‚Üí ‚Ñù, StrictAnti u ‚àß (‚àÄ n : ‚Ñï, 0 < u n) ‚àß Tendsto u atTop (ùìù 0) :=\n    exists_seq_strictAnti_tendsto (0 : ‚Ñù)\n  -- `M n z` is the set of points `x` such that `f y - f x` is close to `f' z (y - x)` for `y`\n  -- in the ball of radius `u n` around `x`.\n  let M : ‚Ñï ‚Üí T ‚Üí Set E := fun n z =>\n    {x | x ‚àà s ‚àß ‚àÄ y ‚àà s ‚à© ball x (u n), ‚Äñf y - f x - f' z (y - x)‚Äñ ‚â§ r (f' z) * ‚Äñy - x‚Äñ}\n  -- As `f` is differentiable everywhere on `s`, the sets `M n z` cover `s` by design.\n  have s_subset : ‚àÄ x ‚àà s, ‚àÉ (n : ‚Ñï) (z : T), x ‚àà M n z := by\n    intro x xs\n    obtain ‚ü®z, zT, hz‚ü© : ‚àÉ z ‚àà T, f' x ‚àà ball (f' (z : E)) (r (f' z)) := by\n      have : f' x ‚àà ‚ãÉ z ‚àà T, ball (f' (z : E)) (r (f' z)) := by\n        rw [hT]\n        refine mem_iUnion.2 ‚ü®‚ü®x, xs‚ü©, ?_‚ü©\n        simpa only [mem_ball, Subtype.coe_mk, dist_self] using (rpos (f' x)).bot_lt\n      rwa [mem_iUnion‚ÇÇ, bex_def] at this\n    obtain ‚ü®Œµ, Œµpos, hŒµ‚ü© : ‚àÉ Œµ : ‚Ñù, 0 < Œµ ‚àß ‚Äñf' x - f' z‚Äñ + Œµ ‚â§ r (f' z) := by\n      refine ‚ü®r (f' z) - ‚Äñf' x - f' z‚Äñ, ?_, le_of_eq (by abel)‚ü©\n      simpa only [sub_pos] using mem_ball_iff_norm.mp hz\n    obtain ‚ü®Œ¥, Œ¥pos, hŒ¥‚ü© :\n      ‚àÉ (Œ¥ : ‚Ñù), 0 < Œ¥ ‚àß ball x Œ¥ ‚à© s ‚äÜ {y | ‚Äñf y - f x - (f' x) (y - x)‚Äñ ‚â§ Œµ * ‚Äñy - x‚Äñ} :=\n      Metric.mem_nhdsWithin_iff.1 ((hf' x xs).isLittleO.def Œµpos)\n    obtain ‚ü®n, hn‚ü© : ‚àÉ n, u n < Œ¥ := ((tendsto_order.1 u_lim).2 _ Œ¥pos).exists\n    refine ‚ü®n, ‚ü®z, zT‚ü©, ‚ü®xs, ?_‚ü©‚ü©\n    intro y hy\n    calc\n      ‚Äñf y - f x - (f' z) (y - x)‚Äñ = ‚Äñf y - f x - (f' x) (y - x) + (f' x - f' z) (y - x)‚Äñ := by\n        congr 1\n        simp only [ContinuousLinearMap.coe_sub', map_sub, Pi.sub_apply]\n        abel\n      _ ‚â§ ‚Äñf y - f x - (f' x) (y - x)‚Äñ + ‚Äñ(f' x - f' z) (y - x)‚Äñ := norm_add_le _ _\n      _ ‚â§ Œµ * ‚Äñy - x‚Äñ + ‚Äñf' x - f' z‚Äñ * ‚Äñy - x‚Äñ := by\n        refine add_le_add (hŒ¥ ?_) (ContinuousLinearMap.le_opNorm _ _)\n        rw [inter_comm]\n        exact inter_subset_inter_right _ (ball_subset_ball hn.le) hy\n      _ ‚â§ r (f' z) * ‚Äñy - x‚Äñ := by\n        rw [‚Üê add_mul, add_comm]\n        gcongr\n  -- the sets `M n z` are relatively closed in `s`, as all the conditions defining it are clearly\n  -- closed\n  have closure_M_subset : ‚àÄ n z, s ‚à© closure (M n z) ‚äÜ M n z := by\n    rintro n z x ‚ü®xs, hx‚ü©\n    refine ‚ü®xs, fun y hy => ?_‚ü©\n    obtain ‚ü®a, aM, a_lim‚ü© : ‚àÉ a : ‚Ñï ‚Üí E, (‚àÄ k, a k ‚àà M n z) ‚àß Tendsto a atTop (ùìù x) :=\n      mem_closure_iff_seq_limit.1 hx\n    have L1 :\n      Tendsto (fun k : ‚Ñï => ‚Äñf y - f (a k) - (f' z) (y - a k)‚Äñ) atTop\n        (ùìù ‚Äñf y - f x - (f' z) (y - x)‚Äñ) := by\n      apply Tendsto.norm\n      have L : Tendsto (fun k => f (a k)) atTop (ùìù (f x)) := by\n        apply (hf' x xs).continuousWithinAt.tendsto.comp\n        apply tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within _ a_lim\n        exact Eventually.of_forall fun k => (aM k).1\n      apply Tendsto.sub (tendsto_const_nhds.sub L)\n      exact ((f' z).continuous.tendsto _).comp (tendsto_const_nhds.sub a_lim)\n    have L2 : Tendsto (fun k : ‚Ñï => (r (f' z) : ‚Ñù) * ‚Äñy - a k‚Äñ) atTop (ùìù (r (f' z) * ‚Äñy - x‚Äñ)) :=\n      (tendsto_const_nhds.sub a_lim).norm.const_mul _\n    have I : ‚àÄ·∂† k in atTop, ‚Äñf y - f (a k) - (f' z) (y - a k)‚Äñ ‚â§ r (f' z) * ‚Äñy - a k‚Äñ := by\n      have L : Tendsto (fun k => dist y (a k)) atTop (ùìù (dist y x)) :=\n        tendsto_const_nhds.dist a_lim\n      filter_upwards [(tendsto_order.1 L).2 _ hy.2]\n      intro k hk\n      exact (aM k).2 y ‚ü®hy.1, hk‚ü©\n    exact le_of_tendsto_of_tendsto L1 L2 I\n  -- choose a dense sequence `d p`\n  rcases TopologicalSpace.exists_dense_seq E with ‚ü®d, hd‚ü©\n  -- split `M n z` into subsets `K n z p` of small diameters by intersecting with the ball\n  -- `closedBall (d p) (u n / 3)`.\n  let K : ‚Ñï ‚Üí T ‚Üí ‚Ñï ‚Üí Set E := fun n z p => closure (M n z) ‚à© closedBall (d p) (u n / 3)\n  -- on the sets `K n z p`, the map `f` is well approximated by `f' z` by design.\n  have K_approx : ‚àÄ (n) (z : T) (p), ApproximatesLinearOn f (f' z) (s ‚à© K n z p) (r (f' z)) := by\n    intro n z p x hx y hy\n    have yM : y ‚àà M n z := closure_M_subset _ _ ‚ü®hy.1, hy.2.1‚ü©\n    refine yM.2 _ ‚ü®hx.1, ?_‚ü©\n    calc\n      dist x y ‚â§ dist x (d p) + dist y (d p) := dist_triangle_right _ _ _\n      _ ‚â§ u n / 3 + u n / 3 := add_le_add hx.2.2 hy.2.2\n      _ < u n := by linarith [u_pos n]\n  -- the sets `K n z p` are also closed, again by design.\n  have K_closed : ‚àÄ (n) (z : T) (p), IsClosed (K n z p) := fun n z p =>\n    isClosed_closure.inter isClosed_ball\n  -- reindex the sets `K n z p`, to let them only depend on an integer parameter `q`.\n  obtain ‚ü®F, hF‚ü© : ‚àÉ F : ‚Ñï ‚Üí ‚Ñï √ó T √ó ‚Ñï, Function.Surjective F := by\n    haveI : Encodable T := T_count.toEncodable\n    have : Nonempty T := by\n      rcases hs with ‚ü®x, xs‚ü©\n      rcases s_subset x xs with ‚ü®n, z, _‚ü©\n      exact ‚ü®z‚ü©\n    inhabit ‚Ü•T\n    exact ‚ü®_, Encodable.surjective_decode_iget (‚Ñï √ó T √ó ‚Ñï)‚ü©\n  -- these sets `t q = K n z p` will do\n  refine\n    ‚ü®fun q => K (F q).1 (F q).2.1 (F q).2.2, fun q => f' (F q).2.1, fun n => K_closed _ _ _,\n      fun x xs => ?_, fun q => K_approx _ _ _, fun _ q => ‚ü®(F q).2.1, (F q).2.1.1.2, rfl‚ü©‚ü©\n  -- the only fact that needs further checking is that they cover `s`.\n  -- we already know that any point `x ‚àà s` belongs to a set `M n z`.\n  obtain ‚ü®n, z, hnz‚ü© : ‚àÉ (n : ‚Ñï) (z : T), x ‚àà M n z := s_subset x xs\n  -- by density, it also belongs to a ball `closedBall (d p) (u n / 3)`.\n  obtain ‚ü®p, hp‚ü© : ‚àÉ p : ‚Ñï, x ‚àà closedBall (d p) (u n / 3) := by\n    have : Set.Nonempty (ball x (u n / 3)) := by simp only [nonempty_ball]; linarith [u_pos n]\n    obtain ‚ü®p, hp‚ü© : ‚àÉ p : ‚Ñï, d p ‚àà ball x (u n / 3) := hd.exists_mem_open isOpen_ball this\n    exact ‚ü®p, (mem_ball'.1 hp).le‚ü©\n  -- choose `q` for which `t q = K n z p`.\n  obtain ‚ü®q, hq‚ü© : ‚àÉ q, F q = (n, z, p) := hF _\n  -- then `x` belongs to `t q`.\n  apply mem_iUnion.2 ‚ü®q, _‚ü©\n  simp (config := { zeta := false }) only [K, hq, mem_inter_iff, hp, and_true]\n  exact subset_closure hnz\n\n"}
{"name":"exists_partition_approximatesLinearOn_of_hasFDerivWithinAt","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\nF : Type u_2\ninst‚úù‚Å∑ : NormedAddCommGroup E\ninst‚úù‚Å∂ : NormedSpace Real E\ninst‚úù‚Åµ : FiniteDimensional Real E\ninst‚úù‚Å¥ : NormedAddCommGroup F\ninst‚úù¬≥ : NormedSpace Real F\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\ninst‚úù : SecondCountableTopology F\nf : E ‚Üí F\ns : Set E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E F\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\nr : ContinuousLinearMap (RingHom.id Real) E F ‚Üí NNReal\nrpos : ‚àÄ (A : ContinuousLinearMap (RingHom.id Real) E F), Ne (r A) 0\n‚ä¢ Exists fun t => Exists fun A => And (Pairwise (Function.onFun Disjoint t)) (And (‚àÄ (n : Nat), MeasurableSet (t n)) (And (HasSubset.Subset s (Set.iUnion fun n => t n)) (And (‚àÄ (n : Nat), ApproximatesLinearOn f (A n) (Inter.inter s (t n)) (r (A n))) (s.Nonempty ‚Üí ‚àÄ (n : Nat), Exists fun y => And (Membership.mem s y) (Eq (A n) (f' y))))))","decl":"/-- Assume that a function `f` has a derivative at every point of a set `s`. Then one may\npartition `s` into countably many disjoint relatively measurable sets (i.e., intersections\nof `s` with measurable sets `t n`) on which `f` is well approximated by linear maps `A n`. -/\ntheorem exists_partition_approximatesLinearOn_of_hasFDerivWithinAt [SecondCountableTopology F]\n    (f : E ‚Üí F) (s : Set E) (f' : E ‚Üí E ‚ÜíL[‚Ñù] F) (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x)\n    (r : (E ‚ÜíL[‚Ñù] F) ‚Üí ‚Ñù‚â•0) (rpos : ‚àÄ A, r A ‚â† 0) :\n    ‚àÉ (t : ‚Ñï ‚Üí Set E) (A : ‚Ñï ‚Üí E ‚ÜíL[‚Ñù] F),\n      Pairwise (Disjoint on t) ‚àß\n        (‚àÄ n, MeasurableSet (t n)) ‚àß\n          (s ‚äÜ ‚ãÉ n, t n) ‚àß\n            (‚àÄ n, ApproximatesLinearOn f (A n) (s ‚à© t n) (r (A n))) ‚àß\n              (s.Nonempty ‚Üí ‚àÄ n, ‚àÉ y ‚àà s, A n = f' y) := by\n  rcases exists_closed_cover_approximatesLinearOn_of_hasFDerivWithinAt f s f' hf' r rpos with\n    ‚ü®t, A, t_closed, st, t_approx, ht‚ü©\n  refine\n    ‚ü®disjointed t, A, disjoint_disjointed _,\n      MeasurableSet.disjointed fun n => (t_closed n).measurableSet, ?_, ?_, ht‚ü©\n  ¬∑ rw [iUnion_disjointed]; exact st\n  ¬∑ intro n; exact (t_approx n).mono_set (inter_subset_inter_right _ (disjointed_subset _ _))\n\n"}
{"name":"MeasureTheory.addHaar_image_le_mul_of_det_lt","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\ninst‚úù¬≥ : FiniteDimensional Real E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nA : ContinuousLinearMap (RingHom.id Real) E E\nm : NNReal\nhm : LT.lt (ENNReal.ofReal (abs A.det)) ‚Üëm\n‚ä¢ Filter.Eventually (fun Œ¥ => ‚àÄ (s : Set E) (f : E ‚Üí E), ApproximatesLinearOn f A s Œ¥ ‚Üí LE.le (Œº (Set.image f s)) (HMul.hMul (‚Üëm) (Œº s))) (nhdsWithin 0 (Set.Ioi 0))","decl":"/-- Let `f` be a function which is sufficiently close (in the Lipschitz sense) to a given linear\nmap `A`. Then it expands the volume of any set by at most `m` for any `m > det A`. -/\ntheorem addHaar_image_le_mul_of_det_lt (A : E ‚ÜíL[‚Ñù] E) {m : ‚Ñù‚â•0}\n    (hm : ENNReal.ofReal |A.det| < m) :\n    ‚àÄ·∂† Œ¥ in ùìù[>] (0 : ‚Ñù‚â•0),\n      ‚àÄ (s : Set E) (f : E ‚Üí E), ApproximatesLinearOn f A s Œ¥ ‚Üí Œº (f '' s) ‚â§ m * Œº s := by\n  apply nhdsWithin_le_nhds\n  let d := ENNReal.ofReal |A.det|\n  -- construct a small neighborhood of `A '' (closedBall 0 1)` with measure comparable to\n  -- the determinant of `A`.\n  obtain ‚ü®Œµ, hŒµ, Œµpos‚ü© :\n    ‚àÉ Œµ : ‚Ñù, Œº (closedBall 0 Œµ + A '' closedBall 0 1) < m * Œº (closedBall 0 1) ‚àß 0 < Œµ := by\n    have HC : IsCompact (A '' closedBall 0 1) :=\n      (ProperSpace.isCompact_closedBall _ _).image A.continuous\n    have L0 :\n      Tendsto (fun Œµ => Œº (cthickening Œµ (A '' closedBall 0 1))) (ùìù[>] 0)\n        (ùìù (Œº (A '' closedBall 0 1))) := by\n      apply Tendsto.mono_left _ nhdsWithin_le_nhds\n      exact tendsto_measure_cthickening_of_isCompact HC\n    have L1 :\n      Tendsto (fun Œµ => Œº (closedBall 0 Œµ + A '' closedBall 0 1)) (ùìù[>] 0)\n        (ùìù (Œº (A '' closedBall 0 1))) := by\n      apply L0.congr' _\n      filter_upwards [self_mem_nhdsWithin] with r hr\n      rw [‚Üê HC.add_closedBall_zero (le_of_lt hr), add_comm]\n    have L2 :\n      Tendsto (fun Œµ => Œº (closedBall 0 Œµ + A '' closedBall 0 1)) (ùìù[>] 0)\n        (ùìù (d * Œº (closedBall 0 1))) := by\n      convert L1\n      exact (addHaar_image_continuousLinearMap _ _ _).symm\n    have I : d * Œº (closedBall 0 1) < m * Œº (closedBall 0 1) :=\n      (ENNReal.mul_lt_mul_right (measure_closedBall_pos Œº _ zero_lt_one).ne'\n            measure_closedBall_lt_top.ne).2\n        hm\n    have H :\n      ‚àÄ·∂† b : ‚Ñù in ùìù[>] 0, Œº (closedBall 0 b + A '' closedBall 0 1) < m * Œº (closedBall 0 1) :=\n      (tendsto_order.1 L2).2 _ I\n    exact (H.and self_mem_nhdsWithin).exists\n  have : Iio (‚ü®Œµ, Œµpos.le‚ü© : ‚Ñù‚â•0) ‚àà ùìù (0 : ‚Ñù‚â•0) := by apply Iio_mem_nhds; exact Œµpos\n  filter_upwards [this]\n  -- fix a function `f` which is close enough to `A`.\n  intro Œ¥ hŒ¥ s f hf\n  simp only [mem_Iio, ‚Üê NNReal.coe_lt_coe, NNReal.coe_mk] at hŒ¥\n  -- This function expands the volume of any ball by at most `m`\n  have I : ‚àÄ x r, x ‚àà s ‚Üí 0 ‚â§ r ‚Üí Œº (f '' (s ‚à© closedBall x r)) ‚â§ m * Œº (closedBall x r) := by\n    intro x r xs r0\n    have K : f '' (s ‚à© closedBall x r) ‚äÜ A '' closedBall 0 r + closedBall (f x) (Œµ * r) := by\n      rintro y ‚ü®z, ‚ü®zs, zr‚ü©, rfl‚ü©\n      rw [mem_closedBall_iff_norm] at zr\n      apply Set.mem_add.2 ‚ü®A (z - x), _, f z - f x - A (z - x) + f x, _, _‚ü©\n      ¬∑ apply mem_image_of_mem\n        simpa only [dist_eq_norm, mem_closedBall, mem_closedBall_zero_iff, sub_zero] using zr\n      ¬∑ rw [mem_closedBall_iff_norm, add_sub_cancel_right]\n        calc\n          ‚Äñf z - f x - A (z - x)‚Äñ ‚â§ Œ¥ * ‚Äñz - x‚Äñ := hf _ zs _ xs\n          _ ‚â§ Œµ * r := by gcongr\n      ¬∑ simp only [map_sub, Pi.sub_apply]\n        abel\n    have :\n      A '' closedBall 0 r + closedBall (f x) (Œµ * r) =\n        {f x} + r ‚Ä¢ (A '' closedBall 0 1 + closedBall 0 Œµ) := by\n      rw [smul_add, ‚Üê add_assoc, add_comm {f x}, add_assoc, smul_closedBall _ _ Œµpos.le, smul_zero,\n        singleton_add_closedBall_zero, ‚Üê image_smul_set ‚Ñù E E A,\n        _root_.smul_closedBall _ _ zero_le_one, smul_zero, Real.norm_eq_abs, abs_of_nonneg r0,\n        mul_one, mul_comm]\n    rw [this] at K\n    calc\n      Œº (f '' (s ‚à© closedBall x r)) ‚â§ Œº ({f x} + r ‚Ä¢ (A '' closedBall 0 1 + closedBall 0 Œµ)) :=\n        measure_mono K\n      _ = ENNReal.ofReal (r ^ finrank ‚Ñù E) * Œº (A '' closedBall 0 1 + closedBall 0 Œµ) := by\n        simp only [abs_of_nonneg r0, addHaar_smul, image_add_left, abs_pow, singleton_add,\n          measure_preimage_add]\n      _ ‚â§ ENNReal.ofReal (r ^ finrank ‚Ñù E) * (m * Œº (closedBall 0 1)) := by\n        rw [add_comm]; gcongr\n      _ = m * Œº (closedBall x r) := by simp only [addHaar_closedBall' Œº _ r0]; ring\n  -- covering `s` by closed balls with total measure very close to `Œº s`, one deduces that the\n  -- measure of `f '' s` is at most `m * (Œº s + a)` for any positive `a`.\n  have J : ‚àÄ·∂† a in ùìù[>] (0 : ‚Ñù‚â•0‚àû), Œº (f '' s) ‚â§ m * (Œº s + a) := by\n    filter_upwards [self_mem_nhdsWithin] with a ha\n    rw [mem_Ioi] at ha\n    obtain ‚ü®t, r, t_count, ts, rpos, st, Œºt‚ü© :\n      ‚àÉ (t : Set E) (r : E ‚Üí ‚Ñù),\n        t.Countable ‚àß\n          t ‚äÜ s ‚àß\n            (‚àÄ x : E, x ‚àà t ‚Üí 0 < r x) ‚àß\n              (s ‚äÜ ‚ãÉ x ‚àà t, closedBall x (r x)) ‚àß\n                (‚àë' x : ‚Ü•t, Œº (closedBall (‚Üëx) (r ‚Üëx))) ‚â§ Œº s + a :=\n      Besicovitch.exists_closedBall_covering_tsum_measure_le Œº ha.ne' (fun _ => Ioi 0) s\n        fun x _ Œ¥ Œ¥pos => ‚ü®Œ¥ / 2, by simp [half_pos Œ¥pos, Œ¥pos]‚ü©\n    haveI : Encodable t := t_count.toEncodable\n    calc\n      Œº (f '' s) ‚â§ Œº (‚ãÉ x : t, f '' (s ‚à© closedBall x (r x))) := by\n        rw [biUnion_eq_iUnion] at st\n        apply measure_mono\n        rw [‚Üê image_iUnion, ‚Üê inter_iUnion]\n        exact image_subset _ (subset_inter (Subset.refl _) st)\n      _ ‚â§ ‚àë' x : t, Œº (f '' (s ‚à© closedBall x (r x))) := measure_iUnion_le _\n      _ ‚â§ ‚àë' x : t, m * Œº (closedBall x (r x)) :=\n        (ENNReal.tsum_le_tsum fun x => I x (r x) (ts x.2) (rpos x x.2).le)\n      _ ‚â§ m * (Œº s + a) := by rw [ENNReal.tsum_mul_left]; gcongr\n  -- taking the limit in `a`, one obtains the conclusion\n  have L : Tendsto (fun a => (m : ‚Ñù‚â•0‚àû) * (Œº s + a)) (ùìù[>] 0) (ùìù (m * (Œº s + 0))) := by\n    apply Tendsto.mono_left _ nhdsWithin_le_nhds\n    apply ENNReal.Tendsto.const_mul (tendsto_const_nhds.add tendsto_id)\n    simp only [ENNReal.coe_ne_top, Ne, or_true, not_false_iff]\n  rw [add_zero] at L\n  exact ge_of_tendsto L J\n\n"}
{"name":"MeasureTheory.mul_le_addHaar_image_of_lt_det","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\ninst‚úù¬≥ : FiniteDimensional Real E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nA : ContinuousLinearMap (RingHom.id Real) E E\nm : NNReal\nhm : LT.lt (‚Üëm) (ENNReal.ofReal (abs A.det))\n‚ä¢ Filter.Eventually (fun Œ¥ => ‚àÄ (s : Set E) (f : E ‚Üí E), ApproximatesLinearOn f A s Œ¥ ‚Üí LE.le (HMul.hMul (‚Üëm) (Œº s)) (Œº (Set.image f s))) (nhdsWithin 0 (Set.Ioi 0))","decl":"/-- Let `f` be a function which is sufficiently close (in the Lipschitz sense) to a given linear\nmap `A`. Then it expands the volume of any set by at least `m` for any `m < det A`. -/\ntheorem mul_le_addHaar_image_of_lt_det (A : E ‚ÜíL[‚Ñù] E) {m : ‚Ñù‚â•0}\n    (hm : (m : ‚Ñù‚â•0‚àû) < ENNReal.ofReal |A.det|) :\n    ‚àÄ·∂† Œ¥ in ùìù[>] (0 : ‚Ñù‚â•0),\n      ‚àÄ (s : Set E) (f : E ‚Üí E), ApproximatesLinearOn f A s Œ¥ ‚Üí (m : ‚Ñù‚â•0‚àû) * Œº s ‚â§ Œº (f '' s) := by\n  apply nhdsWithin_le_nhds\n  -- The assumption `hm` implies that `A` is invertible. If `f` is close enough to `A`, it is also\n  -- invertible. One can then pass to the inverses, and deduce the estimate from\n  -- `addHaar_image_le_mul_of_det_lt` applied to `f‚Åª¬π` and `A‚Åª¬π`.\n  -- exclude first the trivial case where `m = 0`.\n  rcases eq_or_lt_of_le (zero_le m) with (rfl | mpos)\n  ¬∑ filter_upwards\n    simp only [forall_const, zero_mul, imp_true_iff, zero_le, ENNReal.coe_zero]\n  have hA : A.det ‚â† 0 := by\n    intro h; simp only [h, ENNReal.not_lt_zero, ENNReal.ofReal_zero, abs_zero] at hm\n  -- let `B` be the continuous linear equiv version of `A`.\n  let B := A.toContinuousLinearEquivOfDetNeZero hA\n  -- the determinant of `B.symm` is bounded by `m‚Åª¬π`\n  have I : ENNReal.ofReal |(B.symm : E ‚ÜíL[‚Ñù] E).det| < (m‚Åª¬π : ‚Ñù‚â•0) := by\n    simp only [ENNReal.ofReal, abs_inv, Real.toNNReal_inv, ContinuousLinearEquiv.det_coe_symm,\n      ContinuousLinearMap.coe_toContinuousLinearEquivOfDetNeZero, ENNReal.coe_lt_coe] at hm ‚ä¢\n    exact NNReal.inv_lt_inv mpos.ne' hm\n  -- therefore, we may apply `addHaar_image_le_mul_of_det_lt` to `B.symm` and `m‚Åª¬π`.\n  obtain ‚ü®Œ¥‚ÇÄ, Œ¥‚ÇÄpos, hŒ¥‚ÇÄ‚ü© :\n    ‚àÉ Œ¥ : ‚Ñù‚â•0,\n      0 < Œ¥ ‚àß\n        ‚àÄ (t : Set E) (g : E ‚Üí E),\n          ApproximatesLinearOn g (B.symm : E ‚ÜíL[‚Ñù] E) t Œ¥ ‚Üí Œº (g '' t) ‚â§ ‚Üëm‚Åª¬π * Œº t := by\n    have :\n      ‚àÄ·∂† Œ¥ : ‚Ñù‚â•0 in ùìù[>] 0,\n        ‚àÄ (t : Set E) (g : E ‚Üí E),\n          ApproximatesLinearOn g (B.symm : E ‚ÜíL[‚Ñù] E) t Œ¥ ‚Üí Œº (g '' t) ‚â§ ‚Üëm‚Åª¬π * Œº t :=\n      addHaar_image_le_mul_of_det_lt Œº B.symm I\n    rcases (this.and self_mem_nhdsWithin).exists with ‚ü®Œ¥‚ÇÄ, h, h'‚ü©\n    exact ‚ü®Œ¥‚ÇÄ, h', h‚ü©\n  -- record smallness conditions for `Œ¥` that will be needed to apply `hŒ¥‚ÇÄ` below.\n  have L1 : ‚àÄ·∂† Œ¥ in ùìù (0 : ‚Ñù‚â•0), Subsingleton E ‚à® Œ¥ < ‚Äñ(B.symm : E ‚ÜíL[‚Ñù] E)‚Äñ‚Çä‚Åª¬π := by\n    by_cases h : Subsingleton E\n    ¬∑ simp only [h, true_or, eventually_const]\n    simp only [h, false_or]\n    apply Iio_mem_nhds\n    simpa only [h, false_or, inv_pos] using B.subsingleton_or_nnnorm_symm_pos\n  have L2 :\n    ‚àÄ·∂† Œ¥ in ùìù (0 : ‚Ñù‚â•0), ‚Äñ(B.symm : E ‚ÜíL[‚Ñù] E)‚Äñ‚Çä * (‚Äñ(B.symm : E ‚ÜíL[‚Ñù] E)‚Äñ‚Çä‚Åª¬π - Œ¥)‚Åª¬π * Œ¥ < Œ¥‚ÇÄ := by\n    have :\n      Tendsto (fun Œ¥ => ‚Äñ(B.symm : E ‚ÜíL[‚Ñù] E)‚Äñ‚Çä * (‚Äñ(B.symm : E ‚ÜíL[‚Ñù] E)‚Äñ‚Çä‚Åª¬π - Œ¥)‚Åª¬π * Œ¥) (ùìù 0)\n        (ùìù (‚Äñ(B.symm : E ‚ÜíL[‚Ñù] E)‚Äñ‚Çä * (‚Äñ(B.symm : E ‚ÜíL[‚Ñù] E)‚Äñ‚Çä‚Åª¬π - 0)‚Åª¬π * 0)) := by\n      rcases eq_or_ne ‚Äñ(B.symm : E ‚ÜíL[‚Ñù] E)‚Äñ‚Çä 0 with (H | H)\n      ¬∑ simpa only [H, zero_mul] using tendsto_const_nhds\n      refine Tendsto.mul (tendsto_const_nhds.mul ?_) tendsto_id\n      refine (Tendsto.sub tendsto_const_nhds tendsto_id).inv‚ÇÄ ?_\n      simpa only [tsub_zero, inv_eq_zero, Ne] using H\n    simp only [mul_zero] at this\n    exact (tendsto_order.1 this).2 Œ¥‚ÇÄ Œ¥‚ÇÄpos\n  -- let `Œ¥` be small enough, and `f` approximated by `B` up to `Œ¥`.\n  filter_upwards [L1, L2]\n  intro Œ¥ h1Œ¥ h2Œ¥ s f hf\n  have hf' : ApproximatesLinearOn f (B : E ‚ÜíL[‚Ñù] E) s Œ¥ := by convert hf\n  let F := hf'.toPartialEquiv h1Œ¥\n  -- the condition to be checked can be reformulated in terms of the inverse maps\n  suffices H : Œº (F.symm '' F.target) ‚â§ (m‚Åª¬π : ‚Ñù‚â•0) * Œº F.target by\n    change (m : ‚Ñù‚â•0‚àû) * Œº F.source ‚â§ Œº F.target\n    rwa [‚Üê F.symm_image_target_eq_source, mul_comm, ‚Üê ENNReal.le_div_iff_mul_le, div_eq_mul_inv,\n      mul_comm, ‚Üê ENNReal.coe_inv mpos.ne']\n    ¬∑ apply Or.inl\n      simpa only [ENNReal.coe_eq_zero, Ne] using mpos.ne'\n    ¬∑ simp only [ENNReal.coe_ne_top, true_or, Ne, not_false_iff]\n  -- as `f‚Åª¬π` is well approximated by `B‚Åª¬π`, the conclusion follows from `hŒ¥‚ÇÄ`\n  -- and our choice of `Œ¥`.\n  exact hŒ¥‚ÇÄ _ _ ((hf'.to_inv h1Œ¥).mono_num h2Œ¥.le)\n\n"}
{"name":"ApproximatesLinearOn.norm_fderiv_sub_le","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\ninst‚úù¬≥ : FiniteDimensional Real E\ns : Set E\nf : E ‚Üí E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nA : ContinuousLinearMap (RingHom.id Real) E E\nŒ¥ : NNReal\nhf : ApproximatesLinearOn f A s Œ¥\nhs : MeasurableSet s\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\n‚ä¢ Filter.Eventually (fun x => LE.le (NNNorm.nnnorm (HSub.hSub (f' x) A)) Œ¥) (MeasureTheory.ae (Œº.restrict s))","decl":"/-- If a differentiable function `f` is approximated by a linear map `A` on a set `s`, up to `Œ¥`,\nthen at almost every `x` in `s` one has `‚Äñf' x - A‚Äñ ‚â§ Œ¥`. -/\ntheorem _root_.ApproximatesLinearOn.norm_fderiv_sub_le {A : E ‚ÜíL[‚Ñù] E} {Œ¥ : ‚Ñù‚â•0}\n    (hf : ApproximatesLinearOn f A s Œ¥) (hs : MeasurableSet s) (f' : E ‚Üí E ‚ÜíL[‚Ñù] E)\n    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) : ‚àÄ·µê x ‚àÇŒº.restrict s, ‚Äñf' x - A‚Äñ‚Çä ‚â§ Œ¥ := by\n  /- The conclusion will hold at the Lebesgue density points of `s` (which have full measure).\n    At such a point `x`, for any `z` and any `Œµ > 0` one has for small `r`\n    that `{x} + r ‚Ä¢ closedBall z Œµ` intersects `s`. At a point `y` in the intersection,\n    `f y - f x` is close both to `f' x (r z)` (by differentiability) and to `A (r z)`\n    (by linear approximation), so these two quantities are close, i.e., `(f' x - A) z` is small. -/\n  filter_upwards [Besicovitch.ae_tendsto_measure_inter_div Œº s, ae_restrict_mem hs]\n  -- start from a Lebesgue density point `x`, belonging to `s`.\n  intro x hx xs\n  -- consider an arbitrary vector `z`.\n  apply ContinuousLinearMap.opNorm_le_bound _ Œ¥.2 fun z => ?_\n  -- to show that `‚Äñ(f' x - A) z‚Äñ ‚â§ Œ¥ ‚Äñz‚Äñ`, it suffices to do it up to some error that vanishes\n  -- asymptotically in terms of `Œµ > 0`.\n  suffices H : ‚àÄ Œµ, 0 < Œµ ‚Üí ‚Äñ(f' x - A) z‚Äñ ‚â§ (Œ¥ + Œµ) * (‚Äñz‚Äñ + Œµ) + ‚Äñf' x - A‚Äñ * Œµ by\n    have :\n      Tendsto (fun Œµ : ‚Ñù => ((Œ¥ : ‚Ñù) + Œµ) * (‚Äñz‚Äñ + Œµ) + ‚Äñf' x - A‚Äñ * Œµ) (ùìù[>] 0)\n        (ùìù ((Œ¥ + 0) * (‚Äñz‚Äñ + 0) + ‚Äñf' x - A‚Äñ * 0)) :=\n      Tendsto.mono_left (Continuous.tendsto (by fun_prop) 0) nhdsWithin_le_nhds\n    simp only [add_zero, mul_zero] at this\n    apply le_of_tendsto_of_tendsto tendsto_const_nhds this\n    filter_upwards [self_mem_nhdsWithin]\n    exact H\n  -- fix a positive `Œµ`.\n  intro Œµ Œµpos\n  -- for small enough `r`, the rescaled ball `r ‚Ä¢ closedBall z Œµ` intersects `s`, as `x` is a\n  -- density point\n  have B‚ÇÅ : ‚àÄ·∂† r in ùìù[>] (0 : ‚Ñù), (s ‚à© ({x} + r ‚Ä¢ closedBall z Œµ)).Nonempty :=\n    eventually_nonempty_inter_smul_of_density_one Œº s x hx _ measurableSet_closedBall\n      (measure_closedBall_pos Œº z Œµpos).ne'\n  obtain ‚ü®œÅ, œÅpos, hœÅ‚ü© :\n    ‚àÉ œÅ > 0, ball x œÅ ‚à© s ‚äÜ {y : E | ‚Äñf y - f x - (f' x) (y - x)‚Äñ ‚â§ Œµ * ‚Äñy - x‚Äñ} :=\n    mem_nhdsWithin_iff.1 ((hf' x xs).isLittleO.def Œµpos)\n  -- for small enough `r`, the rescaled ball `r ‚Ä¢ closedBall z Œµ` is included in the set where\n  -- `f y - f x` is well approximated by `f' x (y - x)`.\n  have B‚ÇÇ : ‚àÄ·∂† r in ùìù[>] (0 : ‚Ñù), {x} + r ‚Ä¢ closedBall z Œµ ‚äÜ ball x œÅ := by\n    apply nhdsWithin_le_nhds\n    exact eventually_singleton_add_smul_subset isBounded_closedBall (ball_mem_nhds x œÅpos)\n  -- fix a small positive `r` satisfying the above properties, as well as a corresponding `y`.\n  obtain ‚ü®r, ‚ü®y, ‚ü®ys, hy‚ü©‚ü©, rœÅ, rpos‚ü© :\n    ‚àÉ r : ‚Ñù,\n      (s ‚à© ({x} + r ‚Ä¢ closedBall z Œµ)).Nonempty ‚àß {x} + r ‚Ä¢ closedBall z Œµ ‚äÜ ball x œÅ ‚àß 0 < r :=\n    (B‚ÇÅ.and (B‚ÇÇ.and self_mem_nhdsWithin)).exists\n  -- write `y = x + r a` with `a ‚àà closedBall z Œµ`.\n  obtain ‚ü®a, az, ya‚ü© : ‚àÉ a, a ‚àà closedBall z Œµ ‚àß y = x + r ‚Ä¢ a := by\n    simp only [mem_smul_set, image_add_left, mem_preimage, singleton_add] at hy\n    rcases hy with ‚ü®a, az, ha‚ü©\n    exact ‚ü®a, az, by simp only [ha, add_neg_cancel_left]‚ü©\n  have norm_a : ‚Äña‚Äñ ‚â§ ‚Äñz‚Äñ + Œµ :=\n    calc\n      ‚Äña‚Äñ = ‚Äñz + (a - z)‚Äñ := by simp only [_root_.add_sub_cancel]\n      _ ‚â§ ‚Äñz‚Äñ + ‚Äña - z‚Äñ := norm_add_le _ _\n      _ ‚â§ ‚Äñz‚Äñ + Œµ := add_le_add_left (mem_closedBall_iff_norm.1 az) _\n  -- use the approximation properties to control `(f' x - A) a`, and then `(f' x - A) z` as `z` is\n  -- close to `a`.\n  have I : r * ‚Äñ(f' x - A) a‚Äñ ‚â§ r * (Œ¥ + Œµ) * (‚Äñz‚Äñ + Œµ) :=\n    calc\n      r * ‚Äñ(f' x - A) a‚Äñ = ‚Äñ(f' x - A) (r ‚Ä¢ a)‚Äñ := by\n        simp only [ContinuousLinearMap.map_smul, norm_smul, Real.norm_eq_abs, abs_of_nonneg rpos.le]\n      _ = ‚Äñf y - f x - A (y - x) - (f y - f x - (f' x) (y - x))‚Äñ := by\n        congr 1\n        simp only [ya, add_sub_cancel_left, sub_sub_sub_cancel_left, ContinuousLinearMap.coe_sub',\n          eq_self_iff_true, sub_left_inj, Pi.sub_apply, ContinuousLinearMap.map_smul, smul_sub]\n      _ ‚â§ ‚Äñf y - f x - A (y - x)‚Äñ + ‚Äñf y - f x - (f' x) (y - x)‚Äñ := norm_sub_le _ _\n      _ ‚â§ Œ¥ * ‚Äñy - x‚Äñ + Œµ * ‚Äñy - x‚Äñ := (add_le_add (hf _ ys _ xs) (hœÅ ‚ü®rœÅ hy, ys‚ü©))\n      _ = r * (Œ¥ + Œµ) * ‚Äña‚Äñ := by\n        simp only [ya, add_sub_cancel_left, norm_smul, Real.norm_eq_abs, abs_of_nonneg rpos.le]\n        ring\n      _ ‚â§ r * (Œ¥ + Œµ) * (‚Äñz‚Äñ + Œµ) := by gcongr\n  calc\n    ‚Äñ(f' x - A) z‚Äñ = ‚Äñ(f' x - A) a + (f' x - A) (z - a)‚Äñ := by\n      congr 1\n      simp only [ContinuousLinearMap.coe_sub', map_sub, Pi.sub_apply]\n      abel\n    _ ‚â§ ‚Äñ(f' x - A) a‚Äñ + ‚Äñ(f' x - A) (z - a)‚Äñ := norm_add_le _ _\n    _ ‚â§ (Œ¥ + Œµ) * (‚Äñz‚Äñ + Œµ) + ‚Äñf' x - A‚Äñ * ‚Äñz - a‚Äñ := by\n      apply add_le_add\n      ¬∑ rw [mul_assoc] at I; exact (mul_le_mul_left rpos).1 I\n      ¬∑ apply ContinuousLinearMap.le_opNorm\n    _ ‚â§ (Œ¥ + Œµ) * (‚Äñz‚Äñ + Œµ) + ‚Äñf' x - A‚Äñ * Œµ := by\n      rw [mem_closedBall_iff_norm'] at az\n      gcongr\n\n"}
{"name":"MeasureTheory.addHaar_image_eq_zero_of_differentiableOn_of_addHaar_eq_zero","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\ninst‚úù¬≥ : FiniteDimensional Real E\ns : Set E\nf : E ‚Üí E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nhf : DifferentiableOn Real f s\nhs : Eq (Œº s) 0\n‚ä¢ Eq (Œº (Set.image f s)) 0","decl":"/-- A differentiable function maps sets of measure zero to sets of measure zero. -/\ntheorem addHaar_image_eq_zero_of_differentiableOn_of_addHaar_eq_zero (hf : DifferentiableOn ‚Ñù f s)\n    (hs : Œº s = 0) : Œº (f '' s) = 0 := by\n  refine le_antisymm ?_ (zero_le _)\n  have :\n      ‚àÄ A : E ‚ÜíL[‚Ñù] E, ‚àÉ Œ¥ : ‚Ñù‚â•0, 0 < Œ¥ ‚àß\n        ‚àÄ (t : Set E), ApproximatesLinearOn f A t Œ¥ ‚Üí\n          Œº (f '' t) ‚â§ (Real.toNNReal |A.det| + 1 : ‚Ñù‚â•0) * Œº t := by\n    intro A\n    let m : ‚Ñù‚â•0 := Real.toNNReal |A.det| + 1\n    have I : ENNReal.ofReal |A.det| < m := by\n      simp only [m, ENNReal.ofReal, lt_add_iff_pos_right, zero_lt_one, ENNReal.coe_lt_coe]\n    rcases ((addHaar_image_le_mul_of_det_lt Œº A I).and self_mem_nhdsWithin).exists with ‚ü®Œ¥, h, h'‚ü©\n    exact ‚ü®Œ¥, h', fun t ht => h t f ht‚ü©\n  choose Œ¥ hŒ¥ using this\n  obtain ‚ü®t, A, _, _, t_cover, ht, -‚ü© :\n    ‚àÉ (t : ‚Ñï ‚Üí Set E) (A : ‚Ñï ‚Üí E ‚ÜíL[‚Ñù] E),\n      Pairwise (Disjoint on t) ‚àß\n        (‚àÄ n : ‚Ñï, MeasurableSet (t n)) ‚àß\n          (s ‚äÜ ‚ãÉ n : ‚Ñï, t n) ‚àß\n            (‚àÄ n : ‚Ñï, ApproximatesLinearOn f (A n) (s ‚à© t n) (Œ¥ (A n))) ‚àß\n              (s.Nonempty ‚Üí ‚àÄ n, ‚àÉ y ‚àà s, A n = fderivWithin ‚Ñù f s y) :=\n    exists_partition_approximatesLinearOn_of_hasFDerivWithinAt f s (fderivWithin ‚Ñù f s)\n      (fun x xs => (hf x xs).hasFDerivWithinAt) Œ¥ fun A => (hŒ¥ A).1.ne'\n  calc\n    Œº (f '' s) ‚â§ Œº (‚ãÉ n, f '' (s ‚à© t n)) := by\n      apply measure_mono\n      rw [‚Üê image_iUnion, ‚Üê inter_iUnion]\n      exact image_subset f (subset_inter Subset.rfl t_cover)\n    _ ‚â§ ‚àë' n, Œº (f '' (s ‚à© t n)) := measure_iUnion_le _\n    _ ‚â§ ‚àë' n, (Real.toNNReal |(A n).det| + 1 : ‚Ñù‚â•0) * Œº (s ‚à© t n) := by\n      apply ENNReal.tsum_le_tsum fun n => ?_\n      apply (hŒ¥ (A n)).2\n      exact ht n\n    _ ‚â§ ‚àë' n, ((Real.toNNReal |(A n).det| + 1 : ‚Ñù‚â•0) : ‚Ñù‚â•0‚àû) * 0 := by\n      refine ENNReal.tsum_le_tsum fun n => mul_le_mul_left' ?_ _\n      exact le_trans (measure_mono inter_subset_left) (le_of_eq hs)\n    _ = 0 := by simp only [tsum_zero, mul_zero]\n\n"}
{"name":"MeasureTheory.addHaar_image_eq_zero_of_det_fderivWithin_eq_zero_aux","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\ninst‚úù¬≥ : FiniteDimensional Real E\ns : Set E\nf : E ‚Üí E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\nR : Real\nhs : HasSubset.Subset s (Metric.closedBall 0 R)\nŒµ : NNReal\nŒµpos : LT.lt 0 Œµ\nh'f' : ‚àÄ (x : E), Membership.mem s x ‚Üí Eq (f' x).det 0\n‚ä¢ LE.le (Œº (Set.image f s)) (HMul.hMul (‚ÜëŒµ) (Œº (Metric.closedBall 0 R)))","decl":"/-- A version of **Sard's lemma** in fixed dimension: given a differentiable function from `E`\nto `E` and a set where the differential is not invertible, then the image of this set has\nzero measure. Here, we give an auxiliary statement towards this result. -/\ntheorem addHaar_image_eq_zero_of_det_fderivWithin_eq_zero_aux\n    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (R : ‚Ñù) (hs : s ‚äÜ closedBall 0 R) (Œµ : ‚Ñù‚â•0)\n    (Œµpos : 0 < Œµ) (h'f' : ‚àÄ x ‚àà s, (f' x).det = 0) : Œº (f '' s) ‚â§ Œµ * Œº (closedBall 0 R) := by\n  rcases eq_empty_or_nonempty s with (rfl | h's); ¬∑ simp only [measure_empty, zero_le, image_empty]\n  have :\n      ‚àÄ A : E ‚ÜíL[‚Ñù] E, ‚àÉ Œ¥ : ‚Ñù‚â•0, 0 < Œ¥ ‚àß\n        ‚àÄ (t : Set E), ApproximatesLinearOn f A t Œ¥ ‚Üí\n          Œº (f '' t) ‚â§ (Real.toNNReal |A.det| + Œµ : ‚Ñù‚â•0) * Œº t := by\n    intro A\n    let m : ‚Ñù‚â•0 := Real.toNNReal |A.det| + Œµ\n    have I : ENNReal.ofReal |A.det| < m := by\n      simp only [m, ENNReal.ofReal, lt_add_iff_pos_right, Œµpos, ENNReal.coe_lt_coe]\n    rcases ((addHaar_image_le_mul_of_det_lt Œº A I).and self_mem_nhdsWithin).exists with ‚ü®Œ¥, h, h'‚ü©\n    exact ‚ü®Œ¥, h', fun t ht => h t f ht‚ü©\n  choose Œ¥ hŒ¥ using this\n  obtain ‚ü®t, A, t_disj, t_meas, t_cover, ht, Af'‚ü© :\n    ‚àÉ (t : ‚Ñï ‚Üí Set E) (A : ‚Ñï ‚Üí E ‚ÜíL[‚Ñù] E),\n      Pairwise (Disjoint on t) ‚àß\n        (‚àÄ n : ‚Ñï, MeasurableSet (t n)) ‚àß\n          (s ‚äÜ ‚ãÉ n : ‚Ñï, t n) ‚àß\n            (‚àÄ n : ‚Ñï, ApproximatesLinearOn f (A n) (s ‚à© t n) (Œ¥ (A n))) ‚àß\n              (s.Nonempty ‚Üí ‚àÄ n, ‚àÉ y ‚àà s, A n = f' y) :=\n    exists_partition_approximatesLinearOn_of_hasFDerivWithinAt f s f' hf' Œ¥ fun A => (hŒ¥ A).1.ne'\n  calc\n    Œº (f '' s) ‚â§ Œº (‚ãÉ n, f '' (s ‚à© t n)) := by\n      rw [‚Üê image_iUnion, ‚Üê inter_iUnion]\n      gcongr\n      exact subset_inter Subset.rfl t_cover\n    _ ‚â§ ‚àë' n, Œº (f '' (s ‚à© t n)) := measure_iUnion_le _\n    _ ‚â§ ‚àë' n, (Real.toNNReal |(A n).det| + Œµ : ‚Ñù‚â•0) * Œº (s ‚à© t n) := by\n      gcongr\n      exact (hŒ¥ (A _)).2 _ (ht _)\n    _ = ‚àë' n, Œµ * Œº (s ‚à© t n) := by\n      congr with n\n      rcases Af' h's n with ‚ü®y, ys, hy‚ü©\n      simp only [hy, h'f' y ys, Real.toNNReal_zero, abs_zero, zero_add]\n    _ ‚â§ Œµ * ‚àë' n, Œº (closedBall 0 R ‚à© t n) := by\n      rw [ENNReal.tsum_mul_left]\n      gcongr\n    _ = Œµ * Œº (‚ãÉ n, closedBall 0 R ‚à© t n) := by\n      rw [measure_iUnion]\n      ¬∑ exact pairwise_disjoint_mono t_disj fun n => inter_subset_right\n      ¬∑ intro n\n        exact measurableSet_closedBall.inter (t_meas n)\n    _ ‚â§ Œµ * Œº (closedBall 0 R) := by\n      rw [‚Üê inter_iUnion]\n      exact mul_le_mul_left' (measure_mono inter_subset_left) _\n\n"}
{"name":"MeasureTheory.addHaar_image_eq_zero_of_det_fderivWithin_eq_zero","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\ninst‚úù¬≥ : FiniteDimensional Real E\ns : Set E\nf : E ‚Üí E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\nh'f' : ‚àÄ (x : E), Membership.mem s x ‚Üí Eq (f' x).det 0\n‚ä¢ Eq (Œº (Set.image f s)) 0","decl":"/-- A version of Sard lemma in fixed dimension: given a differentiable function from `E` to `E` and\na set where the differential is not invertible, then the image of this set has zero measure. -/\ntheorem addHaar_image_eq_zero_of_det_fderivWithin_eq_zero\n    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (h'f' : ‚àÄ x ‚àà s, (f' x).det = 0) :\n    Œº (f '' s) = 0 := by\n  suffices H : ‚àÄ R, Œº (f '' (s ‚à© closedBall 0 R)) = 0 by\n    apply le_antisymm _ (zero_le _)\n    rw [‚Üê iUnion_inter_closedBall_nat s 0]\n    calc\n      Œº (f '' ‚ãÉ n : ‚Ñï, s ‚à© closedBall 0 n) ‚â§ ‚àë' n : ‚Ñï, Œº (f '' (s ‚à© closedBall 0 n)) := by\n        rw [image_iUnion]; exact measure_iUnion_le _\n      _ ‚â§ 0 := by simp only [H, tsum_zero, nonpos_iff_eq_zero]\n  intro R\n  have A : ‚àÄ (Œµ : ‚Ñù‚â•0), 0 < Œµ ‚Üí Œº (f '' (s ‚à© closedBall 0 R)) ‚â§ Œµ * Œº (closedBall 0 R) :=\n    fun Œµ Œµpos =>\n    addHaar_image_eq_zero_of_det_fderivWithin_eq_zero_aux Œº\n      (fun x hx => (hf' x hx.1).mono inter_subset_left) R inter_subset_right Œµ Œµpos\n      fun x hx => h'f' x hx.1\n  have B : Tendsto (fun Œµ : ‚Ñù‚â•0 => (Œµ : ‚Ñù‚â•0‚àû) * Œº (closedBall 0 R)) (ùìù[>] 0) (ùìù 0) := by\n    have :\n      Tendsto (fun Œµ : ‚Ñù‚â•0 => (Œµ : ‚Ñù‚â•0‚àû) * Œº (closedBall 0 R)) (ùìù 0)\n        (ùìù (((0 : ‚Ñù‚â•0) : ‚Ñù‚â•0‚àû) * Œº (closedBall 0 R))) :=\n      ENNReal.Tendsto.mul_const (ENNReal.tendsto_coe.2 tendsto_id)\n        (Or.inr measure_closedBall_lt_top.ne)\n    simp only [zero_mul, ENNReal.coe_zero] at this\n    exact Tendsto.mono_left this nhdsWithin_le_nhds\n  apply le_antisymm _ (zero_le _)\n  apply ge_of_tendsto B\n  filter_upwards [self_mem_nhdsWithin]\n  exact A\n\n"}
{"name":"MeasureTheory.aemeasurable_fderivWithin","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\ninst‚úù¬≥ : FiniteDimensional Real E\ns : Set E\nf : E ‚Üí E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nhs : MeasurableSet s\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\n‚ä¢ AEMeasurable f' (Œº.restrict s)","decl":"/-- The derivative of a function on a measurable set is almost everywhere measurable on this set\nwith respect to Lebesgue measure. Note that, in general, it is not genuinely measurable there,\nas `f'` is not unique (but only on a set of measure `0`, as the argument shows). -/\ntheorem aemeasurable_fderivWithin (hs : MeasurableSet s)\n    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) : AEMeasurable f' (Œº.restrict s) := by\n  /- It suffices to show that `f'` can be uniformly approximated by a measurable function.\n    Fix `Œµ > 0`. Thanks to `exists_partition_approximatesLinearOn_of_hasFDerivWithinAt`, one\n    can find a countable measurable partition of `s` into sets `s ‚à© t n` on which `f` is well\n    approximated by linear maps `A n`. On almost all of `s ‚à© t n`, it follows from\n    `ApproximatesLinearOn.norm_fderiv_sub_le` that `f'` is uniformly approximated by `A n`, which\n    gives the conclusion. -/\n  -- fix a precision `Œµ`\n  refine aemeasurable_of_unif_approx fun Œµ Œµpos => ?_\n  let Œ¥ : ‚Ñù‚â•0 := ‚ü®Œµ, le_of_lt Œµpos‚ü©\n  have Œ¥pos : 0 < Œ¥ := Œµpos\n  -- partition `s` into sets `s ‚à© t n` on which `f` is approximated by linear maps `A n`.\n  obtain ‚ü®t, A, t_disj, t_meas, t_cover, ht, _‚ü© :\n    ‚àÉ (t : ‚Ñï ‚Üí Set E) (A : ‚Ñï ‚Üí E ‚ÜíL[‚Ñù] E),\n      Pairwise (Disjoint on t) ‚àß\n        (‚àÄ n : ‚Ñï, MeasurableSet (t n)) ‚àß\n          (s ‚äÜ ‚ãÉ n : ‚Ñï, t n) ‚àß\n            (‚àÄ n : ‚Ñï, ApproximatesLinearOn f (A n) (s ‚à© t n) Œ¥) ‚àß\n              (s.Nonempty ‚Üí ‚àÄ n, ‚àÉ y ‚àà s, A n = f' y) :=\n    exists_partition_approximatesLinearOn_of_hasFDerivWithinAt f s f' hf' (fun _ => Œ¥) fun _ =>\n      Œ¥pos.ne'\n  -- define a measurable function `g` which coincides with `A n` on `t n`.\n  obtain ‚ü®g, g_meas, hg‚ü© :\n      ‚àÉ g : E ‚Üí E ‚ÜíL[‚Ñù] E, Measurable g ‚àß ‚àÄ (n : ‚Ñï) (x : E), x ‚àà t n ‚Üí g x = A n :=\n    exists_measurable_piecewise t t_meas (fun n _ => A n) (fun n => measurable_const) <|\n      t_disj.mono fun i j h => by simp only [h.inter_eq, eqOn_empty]\n  refine ‚ü®g, g_meas.aemeasurable, ?_‚ü©\n  -- reduce to checking that `f'` and `g` are close on almost all of `s ‚à© t n`, for all `n`.\n  suffices H : ‚àÄ·µê x : E ‚àÇsum fun n ‚Ü¶ Œº.restrict (s ‚à© t n), dist (g x) (f' x) ‚â§ Œµ by\n    have : Œº.restrict s ‚â§ sum fun n => Œº.restrict (s ‚à© t n) := by\n      have : s = ‚ãÉ n, s ‚à© t n := by\n        rw [‚Üê inter_iUnion]\n        exact Subset.antisymm (subset_inter Subset.rfl t_cover) inter_subset_left\n      conv_lhs => rw [this]\n      exact restrict_iUnion_le\n    exact ae_mono this H\n  -- fix such an `n`.\n  refine ae_sum_iff.2 fun n => ?_\n  -- on almost all `s ‚à© t n`, `f' x` is close to `A n` thanks to\n  -- `ApproximatesLinearOn.norm_fderiv_sub_le`.\n  have E‚ÇÅ : ‚àÄ·µê x : E ‚àÇŒº.restrict (s ‚à© t n), ‚Äñf' x - A n‚Äñ‚Çä ‚â§ Œ¥ :=\n    (ht n).norm_fderiv_sub_le Œº (hs.inter (t_meas n)) f' fun x hx =>\n      (hf' x hx.1).mono inter_subset_left\n  -- moreover, `g x` is equal to `A n` there.\n  have E‚ÇÇ : ‚àÄ·µê x : E ‚àÇŒº.restrict (s ‚à© t n), g x = A n := by\n    suffices H : ‚àÄ·µê x : E ‚àÇŒº.restrict (t n), g x = A n from\n      ae_mono (restrict_mono inter_subset_right le_rfl) H\n    filter_upwards [ae_restrict_mem (t_meas n)]\n    exact hg n\n  -- putting these two properties together gives the conclusion.\n  filter_upwards [E‚ÇÅ, E‚ÇÇ] with x hx1 hx2\n  rw [‚Üê nndist_eq_nnnorm] at hx1\n  rw [hx2, dist_comm]\n  exact hx1\n\n"}
{"name":"MeasureTheory.aemeasurable_ofReal_abs_det_fderivWithin","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\ninst‚úù¬≥ : FiniteDimensional Real E\ns : Set E\nf : E ‚Üí E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nhs : MeasurableSet s\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\n‚ä¢ AEMeasurable (fun x => ENNReal.ofReal (abs (f' x).det)) (Œº.restrict s)","decl":"theorem aemeasurable_ofReal_abs_det_fderivWithin (hs : MeasurableSet s)\n    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) :\n    AEMeasurable (fun x => ENNReal.ofReal |(f' x).det|) (Œº.restrict s) := by\n  apply ENNReal.measurable_ofReal.comp_aemeasurable\n  refine continuous_abs.measurable.comp_aemeasurable ?_\n  refine ContinuousLinearMap.continuous_det.measurable.comp_aemeasurable ?_\n  exact aemeasurable_fderivWithin Œº hs hf'\n\n"}
{"name":"MeasureTheory.aemeasurable_toNNReal_abs_det_fderivWithin","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\ninst‚úù¬≥ : FiniteDimensional Real E\ns : Set E\nf : E ‚Üí E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nhs : MeasurableSet s\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\n‚ä¢ AEMeasurable (fun x => (abs (f' x).det).toNNReal) (Œº.restrict s)","decl":"theorem aemeasurable_toNNReal_abs_det_fderivWithin (hs : MeasurableSet s)\n    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) :\n    AEMeasurable (fun x => |(f' x).det|.toNNReal) (Œº.restrict s) := by\n  apply measurable_real_toNNReal.comp_aemeasurable\n  refine continuous_abs.measurable.comp_aemeasurable ?_\n  refine ContinuousLinearMap.continuous_det.measurable.comp_aemeasurable ?_\n  exact aemeasurable_fderivWithin Œº hs hf'\n\n"}
{"name":"MeasureTheory.measurable_image_of_fderivWithin","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Å¥ : NormedAddCommGroup E\ninst‚úù¬≥ : NormedSpace Real E\ninst‚úù¬≤ : FiniteDimensional Real E\ns : Set E\nf : E ‚Üí E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\ninst‚úù¬π : MeasurableSpace E\ninst‚úù : BorelSpace E\nhs : MeasurableSet s\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\nhf : Set.InjOn f s\n‚ä¢ MeasurableSet (Set.image f s)","decl":"/-- If a function is differentiable and injective on a measurable set,\nthen the image is measurable. -/\ntheorem measurable_image_of_fderivWithin (hs : MeasurableSet s)\n    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (hf : InjOn f s) : MeasurableSet (f '' s) :=\n  haveI : DifferentiableOn ‚Ñù f s := fun x hx => (hf' x hx).differentiableWithinAt\n  hs.image_of_continuousOn_injOn (DifferentiableOn.continuousOn this) hf\n\n"}
{"name":"MeasureTheory.measurableEmbedding_of_fderivWithin","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Å¥ : NormedAddCommGroup E\ninst‚úù¬≥ : NormedSpace Real E\ninst‚úù¬≤ : FiniteDimensional Real E\ns : Set E\nf : E ‚Üí E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\ninst‚úù¬π : MeasurableSpace E\ninst‚úù : BorelSpace E\nhs : MeasurableSet s\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\nhf : Set.InjOn f s\n‚ä¢ MeasurableEmbedding (s.restrict f)","decl":"/-- If a function is differentiable and injective on a measurable set `s`, then its restriction\nto `s` is a measurable embedding. -/\ntheorem measurableEmbedding_of_fderivWithin (hs : MeasurableSet s)\n    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (hf : InjOn f s) :\n    MeasurableEmbedding (s.restrict f) :=\n  haveI : DifferentiableOn ‚Ñù f s := fun x hx => (hf' x hx).differentiableWithinAt\n  this.continuousOn.measurableEmbedding hs hf\n\n"}
{"name":"MeasureTheory.addHaar_image_le_lintegral_abs_det_fderiv_aux1","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\ninst‚úù¬≥ : FiniteDimensional Real E\ns : Set E\nf : E ‚Üí E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nhs : MeasurableSet s\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\nŒµ : NNReal\nŒµpos : LT.lt 0 Œµ\n‚ä¢ LE.le (Œº (Set.image f s)) (HAdd.hAdd (MeasureTheory.lintegral (Œº.restrict s) fun x => ENNReal.ofReal (abs (f' x).det)) (HMul.hMul (HMul.hMul 2 ‚ÜëŒµ) (Œº s)))","decl":"theorem addHaar_image_le_lintegral_abs_det_fderiv_aux1 (hs : MeasurableSet s)\n    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) {Œµ : ‚Ñù‚â•0} (Œµpos : 0 < Œµ) :\n    Œº (f '' s) ‚â§ (‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº) + 2 * Œµ * Œº s := by\n  /- To bound `Œº (f '' s)`, we cover `s` by sets where `f` is well-approximated by linear maps\n    `A n` (and where `f'` is almost everywhere close to `A n`), and then use that `f` expands the\n    measure of such a set by at most `(A n).det + Œµ`. -/\n  have :\n    ‚àÄ A : E ‚ÜíL[‚Ñù] E,\n      ‚àÉ Œ¥ : ‚Ñù‚â•0,\n        0 < Œ¥ ‚àß\n          (‚àÄ B : E ‚ÜíL[‚Ñù] E, ‚ÄñB - A‚Äñ ‚â§ Œ¥ ‚Üí |B.det - A.det| ‚â§ Œµ) ‚àß\n            ‚àÄ (t : Set E) (g : E ‚Üí E), ApproximatesLinearOn g A t Œ¥ ‚Üí\n              Œº (g '' t) ‚â§ (ENNReal.ofReal |A.det| + Œµ) * Œº t := by\n    intro A\n    let m : ‚Ñù‚â•0 := Real.toNNReal |A.det| + Œµ\n    have I : ENNReal.ofReal |A.det| < m := by\n      simp only [m, ENNReal.ofReal, lt_add_iff_pos_right, Œµpos, ENNReal.coe_lt_coe]\n    rcases ((addHaar_image_le_mul_of_det_lt Œº A I).and self_mem_nhdsWithin).exists with ‚ü®Œ¥, h, Œ¥pos‚ü©\n    obtain ‚ü®Œ¥', Œ¥'pos, hŒ¥'‚ü© : ‚àÉ (Œ¥' : ‚Ñù), 0 < Œ¥' ‚àß ‚àÄ B, dist B A < Œ¥' ‚Üí dist B.det A.det < ‚ÜëŒµ := by\n      refine continuousAt_iff.1 ?_ Œµ Œµpos\n      exact ContinuousLinearMap.continuous_det.continuousAt\n    let Œ¥'' : ‚Ñù‚â•0 := ‚ü®Œ¥' / 2, (half_pos Œ¥'pos).le‚ü©\n    refine ‚ü®min Œ¥ Œ¥'', lt_min Œ¥pos (half_pos Œ¥'pos), ?_, ?_‚ü©\n    ¬∑ intro B hB\n      rw [‚Üê Real.dist_eq]\n      apply (hŒ¥' B _).le\n      rw [dist_eq_norm]\n      calc\n        ‚ÄñB - A‚Äñ ‚â§ (min Œ¥ Œ¥'' : ‚Ñù‚â•0) := hB\n        _ ‚â§ Œ¥'' := by simp only [le_refl, NNReal.coe_min, min_le_iff, or_true]\n        _ < Œ¥' := half_lt_self Œ¥'pos\n    ¬∑ intro t g htg\n      exact h t g (htg.mono_num (min_le_left _ _))\n  choose Œ¥ hŒ¥ using this\n  obtain ‚ü®t, A, t_disj, t_meas, t_cover, ht, -‚ü© :\n    ‚àÉ (t : ‚Ñï ‚Üí Set E) (A : ‚Ñï ‚Üí E ‚ÜíL[‚Ñù] E),\n      Pairwise (Disjoint on t) ‚àß\n        (‚àÄ n : ‚Ñï, MeasurableSet (t n)) ‚àß\n          (s ‚äÜ ‚ãÉ n : ‚Ñï, t n) ‚àß\n            (‚àÄ n : ‚Ñï, ApproximatesLinearOn f (A n) (s ‚à© t n) (Œ¥ (A n))) ‚àß\n              (s.Nonempty ‚Üí ‚àÄ n, ‚àÉ y ‚àà s, A n = f' y) :=\n    exists_partition_approximatesLinearOn_of_hasFDerivWithinAt f s f' hf' Œ¥ fun A => (hŒ¥ A).1.ne'\n  calc\n    Œº (f '' s) ‚â§ Œº (‚ãÉ n, f '' (s ‚à© t n)) := by\n      apply measure_mono\n      rw [‚Üê image_iUnion, ‚Üê inter_iUnion]\n      exact image_subset f (subset_inter Subset.rfl t_cover)\n    _ ‚â§ ‚àë' n, Œº (f '' (s ‚à© t n)) := measure_iUnion_le _\n    _ ‚â§ ‚àë' n, (ENNReal.ofReal |(A n).det| + Œµ) * Œº (s ‚à© t n) := by\n      apply ENNReal.tsum_le_tsum fun n => ?_\n      apply (hŒ¥ (A n)).2.2\n      exact ht n\n    _ = ‚àë' n, ‚à´‚Åª _ in s ‚à© t n, ENNReal.ofReal |(A n).det| + Œµ ‚àÇŒº := by\n      simp only [lintegral_const, MeasurableSet.univ, Measure.restrict_apply, univ_inter]\n    _ ‚â§ ‚àë' n, ‚à´‚Åª x in s ‚à© t n, ENNReal.ofReal |(f' x).det| + 2 * Œµ ‚àÇŒº := by\n      apply ENNReal.tsum_le_tsum fun n => ?_\n      apply lintegral_mono_ae\n      filter_upwards [(ht n).norm_fderiv_sub_le Œº (hs.inter (t_meas n)) f' fun x hx =>\n          (hf' x hx.1).mono inter_subset_left]\n      intro x hx\n      have I : |(A n).det| ‚â§ |(f' x).det| + Œµ :=\n        calc\n          |(A n).det| = |(f' x).det - ((f' x).det - (A n).det)| := by congr 1; abel\n          _ ‚â§ |(f' x).det| + |(f' x).det - (A n).det| := abs_sub _ _\n          _ ‚â§ |(f' x).det| + Œµ := add_le_add le_rfl ((hŒ¥ (A n)).2.1 _ hx)\n      calc\n        ENNReal.ofReal |(A n).det| + Œµ ‚â§ ENNReal.ofReal (|(f' x).det| + Œµ) + Œµ := by gcongr\n        _ = ENNReal.ofReal |(f' x).det| + 2 * Œµ := by\n          simp only [ENNReal.ofReal_add, abs_nonneg, two_mul, add_assoc, NNReal.zero_le_coe,\n            ENNReal.ofReal_coe_nnreal]\n    _ = ‚à´‚Åª x in ‚ãÉ n, s ‚à© t n, ENNReal.ofReal |(f' x).det| + 2 * Œµ ‚àÇŒº := by\n      have M : ‚àÄ n : ‚Ñï, MeasurableSet (s ‚à© t n) := fun n => hs.inter (t_meas n)\n      rw [lintegral_iUnion M]\n      exact pairwise_disjoint_mono t_disj fun n => inter_subset_right\n    _ = ‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| + 2 * Œµ ‚àÇŒº := by\n      rw [‚Üê inter_iUnion, inter_eq_self_of_subset_left t_cover]\n    _ = (‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº) + 2 * Œµ * Œº s := by\n      simp only [lintegral_add_right' _ aemeasurable_const, setLIntegral_const]\n\n"}
{"name":"MeasureTheory.addHaar_image_le_lintegral_abs_det_fderiv_aux2","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\ninst‚úù¬≥ : FiniteDimensional Real E\ns : Set E\nf : E ‚Üí E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nhs : MeasurableSet s\nh's : Ne (Œº s) Top.top\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\n‚ä¢ LE.le (Œº (Set.image f s)) (MeasureTheory.lintegral (Œº.restrict s) fun x => ENNReal.ofReal (abs (f' x).det))","decl":"theorem addHaar_image_le_lintegral_abs_det_fderiv_aux2 (hs : MeasurableSet s) (h's : Œº s ‚â† ‚àû)\n    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) :\n    Œº (f '' s) ‚â§ ‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº := by\n  -- We just need to let the error tend to `0` in the previous lemma.\n  have :\n    Tendsto (fun Œµ : ‚Ñù‚â•0 => (‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº) + 2 * Œµ * Œº s) (ùìù[>] 0)\n      (ùìù ((‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº) + 2 * (0 : ‚Ñù‚â•0) * Œº s)) := by\n    apply Tendsto.mono_left _ nhdsWithin_le_nhds\n    refine tendsto_const_nhds.add ?_\n    refine ENNReal.Tendsto.mul_const ?_ (Or.inr h's)\n    exact ENNReal.Tendsto.const_mul (ENNReal.tendsto_coe.2 tendsto_id) (Or.inr ENNReal.coe_ne_top)\n  simp only [add_zero, zero_mul, mul_zero, ENNReal.coe_zero] at this\n  apply ge_of_tendsto this\n  filter_upwards [self_mem_nhdsWithin]\n  intro Œµ Œµpos\n  rw [mem_Ioi] at Œµpos\n  exact addHaar_image_le_lintegral_abs_det_fderiv_aux1 Œº hs hf' Œµpos\n\n"}
{"name":"MeasureTheory.addHaar_image_le_lintegral_abs_det_fderiv","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\ninst‚úù¬≥ : FiniteDimensional Real E\ns : Set E\nf : E ‚Üí E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nhs : MeasurableSet s\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\n‚ä¢ LE.le (Œº (Set.image f s)) (MeasureTheory.lintegral (Œº.restrict s) fun x => ENNReal.ofReal (abs (f' x).det))","decl":"theorem addHaar_image_le_lintegral_abs_det_fderiv (hs : MeasurableSet s)\n    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) :\n    Œº (f '' s) ‚â§ ‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº := by\n  /- We already know the result for finite-measure sets. We cover `s` by finite-measure sets using\n    `spanningSets Œº`, and apply the previous result to each of these parts. -/\n  let u n := disjointed (spanningSets Œº) n\n  have u_meas : ‚àÄ n, MeasurableSet (u n) := by\n    intro n\n    apply MeasurableSet.disjointed fun i => ?_\n    exact measurableSet_spanningSets Œº i\n  have A : s = ‚ãÉ n, s ‚à© u n := by\n    rw [‚Üê inter_iUnion, iUnion_disjointed, iUnion_spanningSets, inter_univ]\n  calc\n    Œº (f '' s) ‚â§ ‚àë' n, Œº (f '' (s ‚à© u n)) := by\n      conv_lhs => rw [A, image_iUnion]\n      exact measure_iUnion_le _\n    _ ‚â§ ‚àë' n, ‚à´‚Åª x in s ‚à© u n, ENNReal.ofReal |(f' x).det| ‚àÇŒº := by\n      apply ENNReal.tsum_le_tsum fun n => ?_\n      apply\n        addHaar_image_le_lintegral_abs_det_fderiv_aux2 Œº (hs.inter (u_meas n)) _ fun x hx =>\n          (hf' x hx.1).mono inter_subset_left\n      have : Œº (u n) < ‚àû :=\n        lt_of_le_of_lt (measure_mono (disjointed_subset _ _)) (measure_spanningSets_lt_top Œº n)\n      exact ne_of_lt (lt_of_le_of_lt (measure_mono inter_subset_right) this)\n    _ = ‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº := by\n      conv_rhs => rw [A]\n      rw [lintegral_iUnion]\n      ¬∑ intro n; exact hs.inter (u_meas n)\n      ¬∑ exact pairwise_disjoint_mono (disjoint_disjointed _) fun n => inter_subset_right\n\n"}
{"name":"MeasureTheory.lintegral_abs_det_fderiv_le_addHaar_image_aux1","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\ninst‚úù¬≥ : FiniteDimensional Real E\ns : Set E\nf : E ‚Üí E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nhs : MeasurableSet s\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\nhf : Set.InjOn f s\nŒµ : NNReal\nŒµpos : LT.lt 0 Œµ\n‚ä¢ LE.le (MeasureTheory.lintegral (Œº.restrict s) fun x => ENNReal.ofReal (abs (f' x).det)) (HAdd.hAdd (Œº (Set.image f s)) (HMul.hMul (HMul.hMul 2 ‚ÜëŒµ) (Œº s)))","decl":"theorem lintegral_abs_det_fderiv_le_addHaar_image_aux1 (hs : MeasurableSet s)\n    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (hf : InjOn f s) {Œµ : ‚Ñù‚â•0} (Œµpos : 0 < Œµ) :\n    (‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº) ‚â§ Œº (f '' s) + 2 * Œµ * Œº s := by\n  /- To bound `‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº`, we cover `s` by sets where `f` is\n    well-approximated by linear maps `A n` (and where `f'` is almost everywhere close to `A n`),\n    and then use that `f` expands the measure of such a set by at least `(A n).det - Œµ`. -/\n  have :\n    ‚àÄ A : E ‚ÜíL[‚Ñù] E,\n      ‚àÉ Œ¥ : ‚Ñù‚â•0,\n        0 < Œ¥ ‚àß\n          (‚àÄ B : E ‚ÜíL[‚Ñù] E, ‚ÄñB - A‚Äñ ‚â§ Œ¥ ‚Üí |B.det - A.det| ‚â§ Œµ) ‚àß\n            ‚àÄ (t : Set E) (g : E ‚Üí E), ApproximatesLinearOn g A t Œ¥ ‚Üí\n              ENNReal.ofReal |A.det| * Œº t ‚â§ Œº (g '' t) + Œµ * Œº t := by\n    intro A\n    obtain ‚ü®Œ¥', Œ¥'pos, hŒ¥'‚ü© : ‚àÉ (Œ¥' : ‚Ñù), 0 < Œ¥' ‚àß ‚àÄ B, dist B A < Œ¥' ‚Üí dist B.det A.det < ‚ÜëŒµ := by\n      refine continuousAt_iff.1 ?_ Œµ Œµpos\n      exact ContinuousLinearMap.continuous_det.continuousAt\n    let Œ¥'' : ‚Ñù‚â•0 := ‚ü®Œ¥' / 2, (half_pos Œ¥'pos).le‚ü©\n    have I'' : ‚àÄ B : E ‚ÜíL[‚Ñù] E, ‚ÄñB - A‚Äñ ‚â§ ‚ÜëŒ¥'' ‚Üí |B.det - A.det| ‚â§ ‚ÜëŒµ := by\n      intro B hB\n      rw [‚Üê Real.dist_eq]\n      apply (hŒ¥' B _).le\n      rw [dist_eq_norm]\n      exact hB.trans_lt (half_lt_self Œ¥'pos)\n    rcases eq_or_ne A.det 0 with (hA | hA)\n    ¬∑ refine ‚ü®Œ¥'', half_pos Œ¥'pos, I'', ?_‚ü©\n      simp only [hA, forall_const, zero_mul, ENNReal.ofReal_zero, imp_true_iff,\n        zero_le, abs_zero]\n    let m : ‚Ñù‚â•0 := Real.toNNReal |A.det| - Œµ\n    have I : (m : ‚Ñù‚â•0‚àû) < ENNReal.ofReal |A.det| := by\n      simp only [m, ENNReal.ofReal, ENNReal.coe_sub]\n      apply ENNReal.sub_lt_self ENNReal.coe_ne_top\n      ¬∑ simpa only [abs_nonpos_iff, Real.toNNReal_eq_zero, ENNReal.coe_eq_zero, Ne] using hA\n      ¬∑ simp only [Œµpos.ne', ENNReal.coe_eq_zero, Ne, not_false_iff]\n    rcases ((mul_le_addHaar_image_of_lt_det Œº A I).and self_mem_nhdsWithin).exists with ‚ü®Œ¥, h, Œ¥pos‚ü©\n    refine ‚ü®min Œ¥ Œ¥'', lt_min Œ¥pos (half_pos Œ¥'pos), ?_, ?_‚ü©\n    ¬∑ intro B hB\n      apply I'' _ (hB.trans _)\n      simp only [le_refl, NNReal.coe_min, min_le_iff, or_true]\n    ¬∑ intro t g htg\n      rcases eq_or_ne (Œº t) ‚àû with (ht | ht)\n      ¬∑ simp only [ht, Œµpos.ne', ENNReal.mul_top, ENNReal.coe_eq_zero, le_top, Ne,\n          not_false_iff, _root_.add_top]\n      have := h t g (htg.mono_num (min_le_left _ _))\n      rwa [ENNReal.coe_sub, ENNReal.sub_mul, tsub_le_iff_right] at this\n      simp only [ht, imp_true_iff, Ne, not_false_iff]\n  choose Œ¥ hŒ¥ using this\n  obtain ‚ü®t, A, t_disj, t_meas, t_cover, ht, -‚ü© :\n    ‚àÉ (t : ‚Ñï ‚Üí Set E) (A : ‚Ñï ‚Üí E ‚ÜíL[‚Ñù] E),\n      Pairwise (Disjoint on t) ‚àß\n        (‚àÄ n : ‚Ñï, MeasurableSet (t n)) ‚àß\n          (s ‚äÜ ‚ãÉ n : ‚Ñï, t n) ‚àß\n            (‚àÄ n : ‚Ñï, ApproximatesLinearOn f (A n) (s ‚à© t n) (Œ¥ (A n))) ‚àß\n              (s.Nonempty ‚Üí ‚àÄ n, ‚àÉ y ‚àà s, A n = f' y) :=\n    exists_partition_approximatesLinearOn_of_hasFDerivWithinAt f s f' hf' Œ¥ fun A => (hŒ¥ A).1.ne'\n  have s_eq : s = ‚ãÉ n, s ‚à© t n := by\n    rw [‚Üê inter_iUnion]\n    exact Subset.antisymm (subset_inter Subset.rfl t_cover) inter_subset_left\n  calc\n    (‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº) =\n        ‚àë' n, ‚à´‚Åª x in s ‚à© t n, ENNReal.ofReal |(f' x).det| ‚àÇŒº := by\n      conv_lhs => rw [s_eq]\n      rw [lintegral_iUnion]\n      ¬∑ exact fun n => hs.inter (t_meas n)\n      ¬∑ exact pairwise_disjoint_mono t_disj fun n => inter_subset_right\n    _ ‚â§ ‚àë' n, ‚à´‚Åª _ in s ‚à© t n, ENNReal.ofReal |(A n).det| + Œµ ‚àÇŒº := by\n      apply ENNReal.tsum_le_tsum fun n => ?_\n      apply lintegral_mono_ae\n      filter_upwards [(ht n).norm_fderiv_sub_le Œº (hs.inter (t_meas n)) f' fun x hx =>\n          (hf' x hx.1).mono inter_subset_left]\n      intro x hx\n      have I : |(f' x).det| ‚â§ |(A n).det| + Œµ :=\n        calc\n          |(f' x).det| = |(A n).det + ((f' x).det - (A n).det)| := by congr 1; abel\n          _ ‚â§ |(A n).det| + |(f' x).det - (A n).det| := abs_add _ _\n          _ ‚â§ |(A n).det| + Œµ := add_le_add le_rfl ((hŒ¥ (A n)).2.1 _ hx)\n      calc\n        ENNReal.ofReal |(f' x).det| ‚â§ ENNReal.ofReal (|(A n).det| + Œµ) :=\n          ENNReal.ofReal_le_ofReal I\n        _ = ENNReal.ofReal |(A n).det| + Œµ := by\n          simp only [ENNReal.ofReal_add, abs_nonneg, NNReal.zero_le_coe, ENNReal.ofReal_coe_nnreal]\n    _ = ‚àë' n, (ENNReal.ofReal |(A n).det| * Œº (s ‚à© t n) + Œµ * Œº (s ‚à© t n)) := by\n      simp only [setLIntegral_const, lintegral_add_right _ measurable_const]\n    _ ‚â§ ‚àë' n, (Œº (f '' (s ‚à© t n)) + Œµ * Œº (s ‚à© t n) + Œµ * Œº (s ‚à© t n)) := by\n      gcongr\n      exact (hŒ¥ (A _)).2.2 _ _ (ht _)\n    _ = Œº (f '' s) + 2 * Œµ * Œº s := by\n      conv_rhs => rw [s_eq]\n      rw [image_iUnion, measure_iUnion]; rotate_left\n      ¬∑ intro i j hij\n        apply Disjoint.image _ hf inter_subset_left inter_subset_left\n        exact Disjoint.mono inter_subset_right inter_subset_right (t_disj hij)\n      ¬∑ intro i\n        exact\n          measurable_image_of_fderivWithin (hs.inter (t_meas i))\n            (fun x hx => (hf' x hx.1).mono inter_subset_left)\n            (hf.mono inter_subset_left)\n      rw [measure_iUnion]; rotate_left\n      ¬∑ exact pairwise_disjoint_mono t_disj fun i => inter_subset_right\n      ¬∑ exact fun i => hs.inter (t_meas i)\n      rw [‚Üê ENNReal.tsum_mul_left, ‚Üê ENNReal.tsum_add]\n      congr 1\n      ext1 i\n      rw [mul_assoc, two_mul, add_assoc]\n\n"}
{"name":"MeasureTheory.lintegral_abs_det_fderiv_le_addHaar_image_aux2","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\ninst‚úù¬≥ : FiniteDimensional Real E\ns : Set E\nf : E ‚Üí E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nhs : MeasurableSet s\nh's : Ne (Œº s) Top.top\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\nhf : Set.InjOn f s\n‚ä¢ LE.le (MeasureTheory.lintegral (Œº.restrict s) fun x => ENNReal.ofReal (abs (f' x).det)) (Œº (Set.image f s))","decl":"theorem lintegral_abs_det_fderiv_le_addHaar_image_aux2 (hs : MeasurableSet s) (h's : Œº s ‚â† ‚àû)\n    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (hf : InjOn f s) :\n    (‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº) ‚â§ Œº (f '' s) := by\n  -- We just need to let the error tend to `0` in the previous lemma.\n  have :\n    Tendsto (fun Œµ : ‚Ñù‚â•0 => Œº (f '' s) + 2 * Œµ * Œº s) (ùìù[>] 0)\n      (ùìù (Œº (f '' s) + 2 * (0 : ‚Ñù‚â•0) * Œº s)) := by\n    apply Tendsto.mono_left _ nhdsWithin_le_nhds\n    refine tendsto_const_nhds.add ?_\n    refine ENNReal.Tendsto.mul_const ?_ (Or.inr h's)\n    exact ENNReal.Tendsto.const_mul (ENNReal.tendsto_coe.2 tendsto_id) (Or.inr ENNReal.coe_ne_top)\n  simp only [add_zero, zero_mul, mul_zero, ENNReal.coe_zero] at this\n  apply ge_of_tendsto this\n  filter_upwards [self_mem_nhdsWithin]\n  intro Œµ Œµpos\n  rw [mem_Ioi] at Œµpos\n  exact lintegral_abs_det_fderiv_le_addHaar_image_aux1 Œº hs hf' hf Œµpos\n\n"}
{"name":"MeasureTheory.lintegral_abs_det_fderiv_le_addHaar_image","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\ninst‚úù¬≥ : FiniteDimensional Real E\ns : Set E\nf : E ‚Üí E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nhs : MeasurableSet s\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\nhf : Set.InjOn f s\n‚ä¢ LE.le (MeasureTheory.lintegral (Œº.restrict s) fun x => ENNReal.ofReal (abs (f' x).det)) (Œº (Set.image f s))","decl":"theorem lintegral_abs_det_fderiv_le_addHaar_image (hs : MeasurableSet s)\n    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (hf : InjOn f s) :\n    (‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº) ‚â§ Œº (f '' s) := by\n  /- We already know the result for finite-measure sets. We cover `s` by finite-measure sets using\n    `spanningSets Œº`, and apply the previous result to each of these parts. -/\n  let u n := disjointed (spanningSets Œº) n\n  have u_meas : ‚àÄ n, MeasurableSet (u n) := by\n    intro n\n    apply MeasurableSet.disjointed fun i => ?_\n    exact measurableSet_spanningSets Œº i\n  have A : s = ‚ãÉ n, s ‚à© u n := by\n    rw [‚Üê inter_iUnion, iUnion_disjointed, iUnion_spanningSets, inter_univ]\n  calc\n    (‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº) =\n        ‚àë' n, ‚à´‚Åª x in s ‚à© u n, ENNReal.ofReal |(f' x).det| ‚àÇŒº := by\n      conv_lhs => rw [A]\n      rw [lintegral_iUnion]\n      ¬∑ intro n; exact hs.inter (u_meas n)\n      ¬∑ exact pairwise_disjoint_mono (disjoint_disjointed _) fun n => inter_subset_right\n    _ ‚â§ ‚àë' n, Œº (f '' (s ‚à© u n)) := by\n      apply ENNReal.tsum_le_tsum fun n => ?_\n      apply\n        lintegral_abs_det_fderiv_le_addHaar_image_aux2 Œº (hs.inter (u_meas n)) _\n          (fun x hx => (hf' x hx.1).mono inter_subset_left) (hf.mono inter_subset_left)\n      have : Œº (u n) < ‚àû :=\n        lt_of_le_of_lt (measure_mono (disjointed_subset _ _)) (measure_spanningSets_lt_top Œº n)\n      exact ne_of_lt (lt_of_le_of_lt (measure_mono inter_subset_right) this)\n    _ = Œº (f '' s) := by\n      conv_rhs => rw [A, image_iUnion]\n      rw [measure_iUnion]\n      ¬∑ intro i j hij\n        apply Disjoint.image _ hf inter_subset_left inter_subset_left\n        exact\n          Disjoint.mono inter_subset_right inter_subset_right\n            (disjoint_disjointed _ hij)\n      ¬∑ intro i\n        exact\n          measurable_image_of_fderivWithin (hs.inter (u_meas i))\n            (fun x hx => (hf' x hx.1).mono inter_subset_left)\n            (hf.mono inter_subset_left)\n\n"}
{"name":"MeasureTheory.lintegral_abs_det_fderiv_eq_addHaar_image","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\ninst‚úù¬≥ : FiniteDimensional Real E\ns : Set E\nf : E ‚Üí E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nhs : MeasurableSet s\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\nhf : Set.InjOn f s\n‚ä¢ Eq (MeasureTheory.lintegral (Œº.restrict s) fun x => ENNReal.ofReal (abs (f' x).det)) (Œº (Set.image f s))","decl":"/-- Change of variable formula for differentiable functions, set version: if a function `f` is\ninjective and differentiable on a measurable set `s`, then the measure of `f '' s` is given by the\nintegral of `|(f' x).det|` on `s`.\nNote that the measurability of `f '' s` is given by `measurable_image_of_fderivWithin`. -/\ntheorem lintegral_abs_det_fderiv_eq_addHaar_image (hs : MeasurableSet s)\n    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (hf : InjOn f s) :\n    (‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº) = Œº (f '' s) :=\n  le_antisymm (lintegral_abs_det_fderiv_le_addHaar_image Œº hs hf' hf)\n    (addHaar_image_le_lintegral_abs_det_fderiv Œº hs hf')\n\n"}
{"name":"MeasureTheory.map_withDensity_abs_det_fderiv_eq_addHaar","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\ninst‚úù¬≥ : FiniteDimensional Real E\ns : Set E\nf : E ‚Üí E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nhs : MeasurableSet s\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\nhf : Set.InjOn f s\nh'f : Measurable f\n‚ä¢ Eq (MeasureTheory.Measure.map f ((Œº.restrict s).withDensity fun x => ENNReal.ofReal (abs (f' x).det))) (Œº.restrict (Set.image f s))","decl":"/-- Change of variable formula for differentiable functions, set version: if a function `f` is\ninjective and differentiable on a measurable set `s`, then the pushforward of the measure with\ndensity `|(f' x).det|` on `s` is the Lebesgue measure on the image set. This version requires\nthat `f` is measurable, as otherwise `Measure.map f` is zero per our definitions.\nFor a version without measurability assumption but dealing with the restricted\nfunction `s.restrict f`, see `restrict_map_withDensity_abs_det_fderiv_eq_addHaar`.\n-/\ntheorem map_withDensity_abs_det_fderiv_eq_addHaar (hs : MeasurableSet s)\n    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (hf : InjOn f s) (h'f : Measurable f) :\n    Measure.map f ((Œº.restrict s).withDensity fun x => ENNReal.ofReal |(f' x).det|) =\n      Œº.restrict (f '' s) := by\n  apply Measure.ext fun t ht => ?_\n  rw [map_apply h'f ht, withDensity_apply _ (h'f ht), Measure.restrict_apply ht,\n    restrict_restrict (h'f ht),\n    lintegral_abs_det_fderiv_eq_addHaar_image Œº ((h'f ht).inter hs)\n      (fun x hx => (hf' x hx.2).mono inter_subset_right) (hf.mono inter_subset_right),\n    image_preimage_inter]\n\n"}
{"name":"MeasureTheory.restrict_map_withDensity_abs_det_fderiv_eq_addHaar","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\ninst‚úù¬≥ : FiniteDimensional Real E\ns : Set E\nf : E ‚Üí E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nhs : MeasurableSet s\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\nhf : Set.InjOn f s\n‚ä¢ Eq (MeasureTheory.Measure.map (s.restrict f) (MeasureTheory.Measure.comap Subtype.val (Œº.withDensity fun x => ENNReal.ofReal (abs (f' x).det)))) (Œº.restrict (Set.image f s))","decl":"/-- Change of variable formula for differentiable functions, set version: if a function `f` is\ninjective and differentiable on a measurable set `s`, then the pushforward of the measure with\ndensity `|(f' x).det|` on `s` is the Lebesgue measure on the image set. This version is expressed\nin terms of the restricted function `s.restrict f`.\nFor a version for the original function, but with a measurability assumption,\nsee `map_withDensity_abs_det_fderiv_eq_addHaar`.\n-/\ntheorem restrict_map_withDensity_abs_det_fderiv_eq_addHaar (hs : MeasurableSet s)\n    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (hf : InjOn f s) :\n    Measure.map (s.restrict f) (comap (‚Üë) (Œº.withDensity fun x => ENNReal.ofReal |(f' x).det|)) =\n      Œº.restrict (f '' s) := by\n  obtain ‚ü®u, u_meas, uf‚ü© : ‚àÉ u, Measurable u ‚àß EqOn u f s := by\n    classical\n    refine ‚ü®piecewise s f 0, ?_, piecewise_eqOn _ _ _‚ü©\n    refine ContinuousOn.measurable_piecewise ?_ continuous_zero.continuousOn hs\n    have : DifferentiableOn ‚Ñù f s := fun x hx => (hf' x hx).differentiableWithinAt\n    exact this.continuousOn\n  have u' : ‚àÄ x ‚àà s, HasFDerivWithinAt u (f' x) s x := fun x hx =>\n    (hf' x hx).congr (fun y hy => uf hy) (uf hx)\n  set F : s ‚Üí E := u ‚àò (‚Üë) with hF\n  have A :\n    Measure.map F (comap (‚Üë) (Œº.withDensity fun x => ENNReal.ofReal |(f' x).det|)) =\n      Œº.restrict (u '' s) := by\n    rw [hF, ‚Üê Measure.map_map u_meas measurable_subtype_coe, map_comap_subtype_coe hs,\n      restrict_withDensity hs]\n    exact map_withDensity_abs_det_fderiv_eq_addHaar Œº hs u' (hf.congr uf.symm) u_meas\n  rw [uf.image_eq] at A\n  have : F = s.restrict f := by\n    ext x\n    exact uf x.2\n  rwa [this] at A\n\n"}
{"name":"MeasureTheory.lintegral_image_eq_lintegral_abs_det_fderiv_mul","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\ninst‚úù¬≥ : FiniteDimensional Real E\ns : Set E\nf : E ‚Üí E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nhs : MeasurableSet s\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\nhf : Set.InjOn f s\ng : E ‚Üí ENNReal\n‚ä¢ Eq (MeasureTheory.lintegral (Œº.restrict (Set.image f s)) fun x => g x) (MeasureTheory.lintegral (Œº.restrict s) fun x => HMul.hMul (ENNReal.ofReal (abs (f' x).det)) (g (f x)))","decl":"theorem lintegral_image_eq_lintegral_abs_det_fderiv_mul (hs : MeasurableSet s)\n    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (hf : InjOn f s) (g : E ‚Üí ‚Ñù‚â•0‚àû) :\n    ‚à´‚Åª x in f '' s, g x ‚àÇŒº = ‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| * g (f x) ‚àÇŒº := by\n  rw [‚Üê restrict_map_withDensity_abs_det_fderiv_eq_addHaar Œº hs hf' hf,\n    (measurableEmbedding_of_fderivWithin hs hf' hf).lintegral_map]\n  simp only [Set.restrict_apply, ‚Üê Function.comp_apply (f := g)]\n  rw [‚Üê (MeasurableEmbedding.subtype_coe hs).lintegral_map, map_comap_subtype_coe hs,\n    setLIntegral_withDensity_eq_setLIntegral_mul_non_measurable‚ÇÄ _ _ _ hs]\n  ¬∑ simp only [Pi.mul_apply]\n  ¬∑ simp only [eventually_true, ENNReal.ofReal_lt_top]\n  ¬∑ exact aemeasurable_ofReal_abs_det_fderivWithin Œº hs hf'\n\n"}
{"name":"MeasureTheory.integrableOn_image_iff_integrableOn_abs_det_fderiv_smul","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\nF : Type u_2\ninst‚úù‚Å∑ : NormedAddCommGroup E\ninst‚úù‚Å∂ : NormedSpace Real E\ninst‚úù‚Åµ : FiniteDimensional Real E\ninst‚úù‚Å¥ : NormedAddCommGroup F\ninst‚úù¬≥ : NormedSpace Real F\ns : Set E\nf : E ‚Üí E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nhs : MeasurableSet s\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\nhf : Set.InjOn f s\ng : E ‚Üí F\n‚ä¢ Iff (MeasureTheory.IntegrableOn g (Set.image f s) Œº) (MeasureTheory.IntegrableOn (fun x => HSMul.hSMul (abs (f' x).det) (g (f x))) s Œº)","decl":"/-- Integrability in the change of variable formula for differentiable functions: if a\nfunction `f` is injective and differentiable on a measurable set `s`, then a function\n`g : E ‚Üí F` is integrable on `f '' s` if and only if `|(f' x).det| ‚Ä¢ g ‚àò f` is\nintegrable on `s`. -/\ntheorem integrableOn_image_iff_integrableOn_abs_det_fderiv_smul (hs : MeasurableSet s)\n    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (hf : InjOn f s) (g : E ‚Üí F) :\n    IntegrableOn g (f '' s) Œº ‚Üî IntegrableOn (fun x => |(f' x).det| ‚Ä¢ g (f x)) s Œº := by\n  rw [IntegrableOn, ‚Üê restrict_map_withDensity_abs_det_fderiv_eq_addHaar Œº hs hf' hf,\n    (measurableEmbedding_of_fderivWithin hs hf' hf).integrable_map_iff]\n  simp only [Set.restrict_eq, ‚Üê Function.comp_assoc, ENNReal.ofReal]\n  rw [‚Üê (MeasurableEmbedding.subtype_coe hs).integrable_map_iff, map_comap_subtype_coe hs,\n    restrict_withDensity hs, integrable_withDensity_iff_integrable_coe_smul‚ÇÄ]\n  ¬∑ simp_rw [IntegrableOn, Real.coe_toNNReal _ (abs_nonneg _), Function.comp_apply]\n  ¬∑ exact aemeasurable_toNNReal_abs_det_fderivWithin Œº hs hf'\n\n"}
{"name":"MeasureTheory.integral_image_eq_integral_abs_det_fderiv_smul","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\nF : Type u_2\ninst‚úù‚Å∑ : NormedAddCommGroup E\ninst‚úù‚Å∂ : NormedSpace Real E\ninst‚úù‚Åµ : FiniteDimensional Real E\ninst‚úù‚Å¥ : NormedAddCommGroup F\ninst‚úù¬≥ : NormedSpace Real F\ns : Set E\nf : E ‚Üí E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nhs : MeasurableSet s\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\nhf : Set.InjOn f s\ng : E ‚Üí F\n‚ä¢ Eq (MeasureTheory.integral (Œº.restrict (Set.image f s)) fun x => g x) (MeasureTheory.integral (Œº.restrict s) fun x => HSMul.hSMul (abs (f' x).det) (g (f x)))","decl":"/-- Change of variable formula for differentiable functions: if a function `f` is\ninjective and differentiable on a measurable set `s`, then the Bochner integral of a function\n`g : E ‚Üí F` on `f '' s` coincides with the integral of `|(f' x).det| ‚Ä¢ g ‚àò f` on `s`. -/\ntheorem integral_image_eq_integral_abs_det_fderiv_smul (hs : MeasurableSet s)\n    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (hf : InjOn f s) (g : E ‚Üí F) :\n    ‚à´ x in f '' s, g x ‚àÇŒº = ‚à´ x in s, |(f' x).det| ‚Ä¢ g (f x) ‚àÇŒº := by\n  rw [‚Üê restrict_map_withDensity_abs_det_fderiv_eq_addHaar Œº hs hf' hf,\n    (measurableEmbedding_of_fderivWithin hs hf' hf).integral_map]\n  simp only [Set.restrict_apply, ‚Üê Function.comp_apply (f := g), ENNReal.ofReal]\n  rw [‚Üê (MeasurableEmbedding.subtype_coe hs).integral_map, map_comap_subtype_coe hs,\n    setIntegral_withDensity_eq_setIntegral_smul‚ÇÄ\n      (aemeasurable_toNNReal_abs_det_fderivWithin Œº hs hf') _ hs]\n  congr with x\n  rw [NNReal.smul_def, Real.coe_toNNReal _ (abs_nonneg (f' x).det)]\n\n-- Porting note: move this to `Topology.Algebra.Module.Basic` when port is over\n"}
{"name":"MeasureTheory.det_one_smulRight","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"ùïú : Type u_3\ninst‚úù¬≤ : CommRing ùïú\ninst‚úù¬π : TopologicalSpace ùïú\ninst‚úù : ContinuousMul ùïú\nv : ùïú\n‚ä¢ Eq (ContinuousLinearMap.smulRight 1 v).det v","decl":"theorem det_one_smulRight {ùïú : Type*} [CommRing ùïú] [TopologicalSpace ùïú] [ContinuousMul ùïú] (v : ùïú) :\n    ((1 : ùïú ‚ÜíL[ùïú] ùïú).smulRight v).det = v := by\n  nontriviality ùïú\n  have : (1 : ùïú ‚ÜíL[ùïú] ùïú).smulRight v = v ‚Ä¢ (1 : ùïú ‚ÜíL[ùïú] ùïú) := by\n    ext1\n    simp only [ContinuousLinearMap.smulRight_apply, ContinuousLinearMap.one_apply,\n      Algebra.id.smul_eq_mul, one_mul, ContinuousLinearMap.coe_smul', Pi.smul_apply, mul_one]\n  rw [this, ContinuousLinearMap.det, ContinuousLinearMap.coe_smul,\n    ContinuousLinearMap.one_def, ContinuousLinearMap.coe_id, LinearMap.det_smul,\n    Module.finrank_self, LinearMap.det_id, pow_one, mul_one]\n\n"}
{"name":"MeasureTheory.integrableOn_image_iff_integrableOn_abs_deriv_smul","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"F : Type u_2\ninst‚úù¬π : NormedAddCommGroup F\ninst‚úù : NormedSpace Real F\ns : Set Real\nf f' : Real ‚Üí Real\nhs : MeasurableSet s\nhf' : ‚àÄ (x : Real), Membership.mem s x ‚Üí HasDerivWithinAt f (f' x) s x\nhf : Set.InjOn f s\ng : Real ‚Üí F\n‚ä¢ Iff (MeasureTheory.IntegrableOn g (Set.image f s) MeasureTheory.MeasureSpace.volume) (MeasureTheory.IntegrableOn (fun x => HSMul.hSMul (abs (f' x)) (g (f x))) s MeasureTheory.MeasureSpace.volume)","decl":"/-- Integrability in the change of variable formula for differentiable functions (one-variable\nversion): if a function `f` is injective and differentiable on a measurable set `s ‚äÜ ‚Ñù`, then a\nfunction `g : ‚Ñù ‚Üí F` is integrable on `f '' s` if and only if `|(f' x)| ‚Ä¢ g ‚àò f` is integrable on\n`s`. -/\ntheorem integrableOn_image_iff_integrableOn_abs_deriv_smul {s : Set ‚Ñù} {f : ‚Ñù ‚Üí ‚Ñù} {f' : ‚Ñù ‚Üí ‚Ñù}\n    (hs : MeasurableSet s) (hf' : ‚àÄ x ‚àà s, HasDerivWithinAt f (f' x) s x) (hf : InjOn f s)\n    (g : ‚Ñù ‚Üí F) : IntegrableOn g (f '' s) ‚Üî IntegrableOn (fun x => |f' x| ‚Ä¢ g (f x)) s := by\n  simpa only [det_one_smulRight] using\n    integrableOn_image_iff_integrableOn_abs_det_fderiv_smul volume hs\n      (fun x hx => (hf' x hx).hasFDerivWithinAt) hf g\n\n"}
{"name":"MeasureTheory.integral_image_eq_integral_abs_deriv_smul","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"F : Type u_2\ninst‚úù¬π : NormedAddCommGroup F\ninst‚úù : NormedSpace Real F\ns : Set Real\nf f' : Real ‚Üí Real\nhs : MeasurableSet s\nhf' : ‚àÄ (x : Real), Membership.mem s x ‚Üí HasDerivWithinAt f (f' x) s x\nhf : Set.InjOn f s\ng : Real ‚Üí F\n‚ä¢ Eq (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.image f s)) fun x => g x) (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict s) fun x => HSMul.hSMul (abs (f' x)) (g (f x)))","decl":"/-- Change of variable formula for differentiable functions (one-variable version): if a function\n`f` is injective and differentiable on a measurable set `s ‚äÜ ‚Ñù`, then the Bochner integral of a\nfunction `g : ‚Ñù ‚Üí F` on `f '' s` coincides with the integral of `|(f' x)| ‚Ä¢ g ‚àò f` on `s`. -/\ntheorem integral_image_eq_integral_abs_deriv_smul {s : Set ‚Ñù} {f : ‚Ñù ‚Üí ‚Ñù} {f' : ‚Ñù ‚Üí ‚Ñù}\n    (hs : MeasurableSet s) (hf' : ‚àÄ x ‚àà s, HasDerivWithinAt f (f' x) s x)\n    (hf : InjOn f s) (g : ‚Ñù ‚Üí F) : ‚à´ x in f '' s, g x = ‚à´ x in s, |f' x| ‚Ä¢ g (f x) := by\n  simpa only [det_one_smulRight] using\n    integral_image_eq_integral_abs_det_fderiv_smul volume hs\n      (fun x hx => (hf' x hx).hasFDerivWithinAt) hf g\n\n"}
{"name":"MeasureTheory.integral_target_eq_integral_abs_det_fderiv_smul","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\nF : Type u_2\ninst‚úù‚Å∑ : NormedAddCommGroup E\ninst‚úù‚Å∂ : NormedSpace Real E\ninst‚úù‚Åµ : FiniteDimensional Real E\ninst‚úù‚Å¥ : NormedAddCommGroup F\ninst‚úù¬≥ : NormedSpace Real F\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nf : PartialHomeomorph E E\nhf' : ‚àÄ (x : E), Membership.mem f.source x ‚Üí HasFDerivAt (‚Üëf) (f' x) x\ng : E ‚Üí F\n‚ä¢ Eq (MeasureTheory.integral (Œº.restrict f.target) fun x => g x) (MeasureTheory.integral (Œº.restrict f.source) fun x => HSMul.hSMul (abs (f' x).det) (g (‚Üëf x)))","decl":"theorem integral_target_eq_integral_abs_det_fderiv_smul {f : PartialHomeomorph E E}\n    (hf' : ‚àÄ x ‚àà f.source, HasFDerivAt f (f' x) x) (g : E ‚Üí F) :\n    ‚à´ x in f.target, g x ‚àÇŒº = ‚à´ x in f.source, |(f' x).det| ‚Ä¢ g (f x) ‚àÇŒº := by\n  have : f '' f.source = f.target := PartialEquiv.image_source_eq_target f.toPartialEquiv\n  rw [‚Üê this]\n  apply integral_image_eq_integral_abs_det_fderiv_smul Œº f.open_source.measurableSet _ f.injOn\n  intro x hx\n  exact (hf' x hx).hasFDerivWithinAt\n\n"}
{"name":"MeasurableEmbedding.withDensity_ofReal_comap_apply_eq_integral_abs_det_fderiv_mul","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\ninst‚úù¬≥ : FiniteDimensional Real E\ns : Set E\nf : E ‚Üí E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nhs : MeasurableSet s\nhf : MeasurableEmbedding f\ng : E ‚Üí Real\nhg : Filter.Eventually (fun x => Membership.mem (Set.image f s) x ‚Üí LE.le 0 (g x)) (MeasureTheory.ae Œº)\nhg_int : MeasureTheory.IntegrableOn g (Set.image f s) Œº\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt f (f' x) s x\n‚ä¢ Eq ((MeasureTheory.Measure.comap f (Œº.withDensity fun x => ENNReal.ofReal (g x))) s) (ENNReal.ofReal (MeasureTheory.integral (Œº.restrict s) fun x => HMul.hMul (abs (f' x).det) (g (f x))))","decl":"lemma _root_.MeasurableEmbedding.withDensity_ofReal_comap_apply_eq_integral_abs_det_fderiv_mul\n    (hs : MeasurableSet s) (hf : MeasurableEmbedding f)\n    {g : E ‚Üí ‚Ñù} (hg : ‚àÄ·µê x ‚àÇŒº, x ‚àà f '' s ‚Üí 0 ‚â§ g x) (hg_int : IntegrableOn g (f '' s) Œº)\n    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) :\n    (Œº.withDensity (fun x ‚Ü¶ ENNReal.ofReal (g x))).comap f s\n      = ENNReal.ofReal (‚à´ x in s, |(f' x).det| * g (f x) ‚àÇŒº) := by\n  rw [Measure.comap_apply f hf.injective (fun t ht ‚Ü¶ hf.measurableSet_image' ht) _ hs,\n    withDensity_apply _ (hf.measurableSet_image' hs),\n    ‚Üê ofReal_integral_eq_lintegral_ofReal hg_int\n      ((ae_restrict_iff' (hf.measurableSet_image' hs)).mpr hg),\n    integral_image_eq_integral_abs_det_fderiv_smul Œº hs hf' hf.injective.injOn]\n  simp_rw [smul_eq_mul]\n\n"}
{"name":"MeasurableEquiv.withDensity_ofReal_map_symm_apply_eq_integral_abs_det_fderiv_mul","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\ninst‚úù¬≥ : FiniteDimensional Real E\ns : Set E\nf' : E ‚Üí ContinuousLinearMap (RingHom.id Real) E E\ninst‚úù¬≤ : MeasurableSpace E\ninst‚úù¬π : BorelSpace E\nŒº : MeasureTheory.Measure E\ninst‚úù : Œº.IsAddHaarMeasure\nhs : MeasurableSet s\nf : MeasurableEquiv E E\ng : E ‚Üí Real\nhg : Filter.Eventually (fun x => Membership.mem (Set.image (‚áëf) s) x ‚Üí LE.le 0 (g x)) (MeasureTheory.ae Œº)\nhg_int : MeasureTheory.IntegrableOn g (Set.image (‚áëf) s) Œº\nhf' : ‚àÄ (x : E), Membership.mem s x ‚Üí HasFDerivWithinAt (‚áëf) (f' x) s x\n‚ä¢ Eq ((MeasureTheory.Measure.map (‚áëf.symm) (Œº.withDensity fun x => ENNReal.ofReal (g x))) s) (ENNReal.ofReal (MeasureTheory.integral (Œº.restrict s) fun x => HMul.hMul (abs (f' x).det) (g (f x))))","decl":"lemma _root_.MeasurableEquiv.withDensity_ofReal_map_symm_apply_eq_integral_abs_det_fderiv_mul\n    (hs : MeasurableSet s) (f : E ‚âÉ·µê E)\n    {g : E ‚Üí ‚Ñù} (hg : ‚àÄ·µê x ‚àÇŒº, x ‚àà f '' s ‚Üí 0 ‚â§ g x) (hg_int : IntegrableOn g (f '' s) Œº)\n    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) :\n    (Œº.withDensity (fun x ‚Ü¶ ENNReal.ofReal (g x))).map f.symm s\n      = ENNReal.ofReal (‚à´ x in s, |(f' x).det| * g (f x) ‚àÇŒº) := by\n  rw [MeasurableEquiv.map_symm,\n    MeasurableEmbedding.withDensity_ofReal_comap_apply_eq_integral_abs_det_fderiv_mul Œº hs\n      f.measurableEmbedding hg hg_int hf']\n\n"}
{"name":"MeasurableEmbedding.withDensity_ofReal_comap_apply_eq_integral_abs_deriv_mul","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"f : Real ‚Üí Real\nhf : MeasurableEmbedding f\ns : Set Real\nhs : MeasurableSet s\ng : Real ‚Üí Real\nhg : Filter.Eventually (fun x => Membership.mem (Set.image f s) x ‚Üí LE.le 0 (g x)) (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)\nhg_int : MeasureTheory.IntegrableOn g (Set.image f s) MeasureTheory.MeasureSpace.volume\nf' : Real ‚Üí Real\nhf' : ‚àÄ (x : Real), Membership.mem s x ‚Üí HasDerivWithinAt f (f' x) s x\n‚ä¢ Eq ((MeasureTheory.Measure.comap f (MeasureTheory.MeasureSpace.volume.withDensity fun x => ENNReal.ofReal (g x))) s) (ENNReal.ofReal (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict s) fun x => HMul.hMul (abs (f' x)) (g (f x))))","decl":"lemma _root_.MeasurableEmbedding.withDensity_ofReal_comap_apply_eq_integral_abs_deriv_mul\n    {f : ‚Ñù ‚Üí ‚Ñù} (hf : MeasurableEmbedding f) {s : Set ‚Ñù} (hs : MeasurableSet s)\n    {g : ‚Ñù ‚Üí ‚Ñù} (hg : ‚àÄ·µê x, x ‚àà f '' s ‚Üí 0 ‚â§ g x) (hg_int : IntegrableOn g (f '' s))\n    {f' : ‚Ñù ‚Üí ‚Ñù} (hf' : ‚àÄ x ‚àà s, HasDerivWithinAt f (f' x) s x) :\n    (volume.withDensity (fun x ‚Ü¶ ENNReal.ofReal (g x))).comap f s\n      = ENNReal.ofReal (‚à´ x in s, |f' x| * g (f x)) := by\n  rw [hf.withDensity_ofReal_comap_apply_eq_integral_abs_det_fderiv_mul volume hs\n    hg hg_int hf']\n  simp only [det_one_smulRight]\n\n"}
{"name":"MeasurableEquiv.withDensity_ofReal_map_symm_apply_eq_integral_abs_deriv_mul","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"f : MeasurableEquiv Real Real\ns : Set Real\nhs : MeasurableSet s\ng : Real ‚Üí Real\nhg : Filter.Eventually (fun x => Membership.mem (Set.image (‚áëf) s) x ‚Üí LE.le 0 (g x)) (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)\nhg_int : MeasureTheory.IntegrableOn g (Set.image (‚áëf) s) MeasureTheory.MeasureSpace.volume\nf' : Real ‚Üí Real\nhf' : ‚àÄ (x : Real), Membership.mem s x ‚Üí HasDerivWithinAt (‚áëf) (f' x) s x\n‚ä¢ Eq ((MeasureTheory.Measure.map (‚áëf.symm) (MeasureTheory.MeasureSpace.volume.withDensity fun x => ENNReal.ofReal (g x))) s) (ENNReal.ofReal (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict s) fun x => HMul.hMul (abs (f' x)) (g (f x))))","decl":"lemma _root_.MeasurableEquiv.withDensity_ofReal_map_symm_apply_eq_integral_abs_deriv_mul\n    (f : ‚Ñù ‚âÉ·µê ‚Ñù) {s : Set ‚Ñù} (hs : MeasurableSet s)\n    {g : ‚Ñù ‚Üí ‚Ñù} (hg : ‚àÄ·µê x, x ‚àà f '' s ‚Üí 0 ‚â§ g x) (hg_int : IntegrableOn g (f '' s))\n    {f' : ‚Ñù ‚Üí ‚Ñù} (hf' : ‚àÄ x ‚àà s, HasDerivWithinAt f (f' x) s x) :\n    (volume.withDensity (fun x ‚Ü¶ ENNReal.ofReal (g x))).map f.symm s\n      = ENNReal.ofReal (‚à´ x in s, |f' x| * g (f x)) := by\n  rw [MeasurableEquiv.withDensity_ofReal_map_symm_apply_eq_integral_abs_det_fderiv_mul volume hs\n      f hg hg_int hf']\n  simp only [det_one_smulRight]\n\n"}
{"name":"MeasurableEmbedding.withDensity_ofReal_comap_apply_eq_integral_abs_deriv_mul'","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"f : Real ‚Üí Real\nhf : MeasurableEmbedding f\ns : Set Real\nhs : MeasurableSet s\nf' : Real ‚Üí Real\nhf' : ‚àÄ (x : Real), HasDerivAt f (f' x) x\ng : Real ‚Üí Real\nhg : (MeasureTheory.ae MeasureTheory.MeasureSpace.volume).EventuallyLE 0 g\nhg_int : MeasureTheory.Integrable g MeasureTheory.MeasureSpace.volume\n‚ä¢ Eq ((MeasureTheory.Measure.comap f (MeasureTheory.MeasureSpace.volume.withDensity fun x => ENNReal.ofReal (g x))) s) (ENNReal.ofReal (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict s) fun x => HMul.hMul (abs (f' x)) (g (f x))))","decl":"lemma _root_.MeasurableEmbedding.withDensity_ofReal_comap_apply_eq_integral_abs_deriv_mul'\n    {f : ‚Ñù ‚Üí ‚Ñù} (hf : MeasurableEmbedding f) {s : Set ‚Ñù} (hs : MeasurableSet s)\n    {f' : ‚Ñù ‚Üí ‚Ñù} (hf' : ‚àÄ x, HasDerivAt f (f' x) x)\n    {g : ‚Ñù ‚Üí ‚Ñù} (hg : 0 ‚â§·µê[volume] g) (hg_int : Integrable g) :\n    (volume.withDensity (fun x ‚Ü¶ ENNReal.ofReal (g x))).comap f s\n      = ENNReal.ofReal (‚à´ x in s, |f' x| * g (f x)) :=\n  hf.withDensity_ofReal_comap_apply_eq_integral_abs_deriv_mul hs\n    (by filter_upwards [hg] with x hx using fun _ ‚Ü¶ hx) hg_int.integrableOn\n    (fun x _ => (hf' x).hasDerivWithinAt)\n\n"}
{"name":"MeasurableEquiv.withDensity_ofReal_map_symm_apply_eq_integral_abs_deriv_mul'","module":"Mathlib.MeasureTheory.Function.Jacobian","initialProofState":"f : MeasurableEquiv Real Real\ns : Set Real\nhs : MeasurableSet s\nf' : Real ‚Üí Real\nhf' : ‚àÄ (x : Real), HasDerivAt (‚áëf) (f' x) x\ng : Real ‚Üí Real\nhg : (MeasureTheory.ae MeasureTheory.MeasureSpace.volume).EventuallyLE 0 g\nhg_int : MeasureTheory.Integrable g MeasureTheory.MeasureSpace.volume\n‚ä¢ Eq ((MeasureTheory.Measure.map (‚áëf.symm) (MeasureTheory.MeasureSpace.volume.withDensity fun x => ENNReal.ofReal (g x))) s) (ENNReal.ofReal (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict s) fun x => HMul.hMul (abs (f' x)) (g (f x))))","decl":"lemma _root_.MeasurableEquiv.withDensity_ofReal_map_symm_apply_eq_integral_abs_deriv_mul'\n    (f : ‚Ñù ‚âÉ·µê ‚Ñù) {s : Set ‚Ñù} (hs : MeasurableSet s)\n    {f' : ‚Ñù ‚Üí ‚Ñù} (hf' : ‚àÄ x, HasDerivAt f (f' x) x)\n    {g : ‚Ñù ‚Üí ‚Ñù} (hg : 0 ‚â§·µê[volume] g) (hg_int : Integrable g) :\n    (volume.withDensity (fun x ‚Ü¶ ENNReal.ofReal (g x))).map f.symm s\n      = ENNReal.ofReal (‚à´ x in s, |f' x| * g (f x)) := by\n  rw [MeasurableEquiv.withDensity_ofReal_map_symm_apply_eq_integral_abs_det_fderiv_mul volume hs\n      f (by filter_upwards [hg] with x hx using fun _ ‚Ü¶ hx) hg_int.integrableOn\n      (fun x _ => (hf' x).hasDerivWithinAt)]\n  simp only [det_one_smulRight]\n\n"}
