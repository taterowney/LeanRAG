{"name":"PartENat.card_eq_coe_fintype_card","module":"Mathlib.Deprecated.Cardinal.Finite","initialProofState":"α : Type u\ninst✝ : Fintype α\n⊢ Eq (PartENat.card α) ↑(Fintype.card α)","decl":"@[simp]\ntheorem card_eq_coe_fintype_card [Fintype α] : card α = Fintype.card α :=\n  mk_toPartENat_eq_coe_card\n\n"}
{"name":"PartENat.card_eq_top_of_infinite","module":"Mathlib.Deprecated.Cardinal.Finite","initialProofState":"α : Type u\ninst✝ : Infinite α\n⊢ Eq (PartENat.card α) Top.top","decl":"@[simp]\ntheorem card_eq_top_of_infinite [Infinite α] : card α = ⊤ :=\n  mk_toPartENat_of_infinite\n\n"}
{"name":"PartENat.card_sum","module":"Mathlib.Deprecated.Cardinal.Finite","initialProofState":"α : Type u_1\nβ : Type u_2\n⊢ Eq (PartENat.card (Sum α β)) (HAdd.hAdd (PartENat.card α) (PartENat.card β))","decl":"@[simp]\ntheorem card_sum (α β : Type*) :\n    PartENat.card (α ⊕ β) = PartENat.card α + PartENat.card β := by\n  simp only [PartENat.card, Cardinal.mk_sum, map_add, Cardinal.toPartENat_lift]\n\n"}
{"name":"PartENat.card_congr","module":"Mathlib.Deprecated.Cardinal.Finite","initialProofState":"α : Type u_1\nβ : Type u_2\nf : Equiv α β\n⊢ Eq (PartENat.card α) (PartENat.card β)","decl":"theorem card_congr {α : Type*} {β : Type*} (f : α ≃ β) : PartENat.card α = PartENat.card β :=\n  Cardinal.toPartENat_congr f\n\n"}
{"name":"PartENat.card_ulift","module":"Mathlib.Deprecated.Cardinal.Finite","initialProofState":"α : Type u_1\n⊢ Eq (PartENat.card (ULift.{u_2, u_1} α)) (PartENat.card α)","decl":"@[simp] lemma card_ulift (α : Type*) : card (ULift α) = card α := card_congr Equiv.ulift\n\n"}
{"name":"PartENat.card_plift","module":"Mathlib.Deprecated.Cardinal.Finite","initialProofState":"α : Type u_1\n⊢ Eq (PartENat.card (PLift α)) (PartENat.card α)","decl":"@[simp] lemma card_plift (α : Type*) : card (PLift α) = card α := card_congr Equiv.plift\n\n"}
{"name":"PartENat.card_image_of_injOn","module":"Mathlib.Deprecated.Cardinal.Finite","initialProofState":"α : Type u\nβ : Type v\nf : α → β\ns : Set α\nh : Set.InjOn f s\n⊢ Eq (PartENat.card ↑(Set.image f s)) (PartENat.card ↑s)","decl":"theorem card_image_of_injOn {α : Type u} {β : Type v} {f : α → β} {s : Set α} (h : Set.InjOn f s) :\n    card (f '' s) = card s :=\n  card_congr (Equiv.Set.imageOfInjOn f s h).symm\n\n"}
{"name":"PartENat.card_image_of_injective","module":"Mathlib.Deprecated.Cardinal.Finite","initialProofState":"α : Type u\nβ : Type v\nf : α → β\ns : Set α\nh : Function.Injective f\n⊢ Eq (PartENat.card ↑(Set.image f s)) (PartENat.card ↑s)","decl":"theorem card_image_of_injective {α : Type u} {β : Type v} (f : α → β) (s : Set α)\n    (h : Function.Injective f) : card (f '' s) = card s := card_image_of_injOn h.injOn\n\n-- Should I keep the 6 following lemmas ?\n-- TODO: Add ofNat, zero, and one versions for simp confluence\n"}
{"name":"Cardinal.natCast_le_toPartENat_iff","module":"Mathlib.Deprecated.Cardinal.Finite","initialProofState":"n : Nat\nc : Cardinal.{u_1}\n⊢ Iff (LE.le (↑n) (Cardinal.toPartENat c)) (LE.le (↑n) c)","decl":"@[simp]\ntheorem _root_.Cardinal.natCast_le_toPartENat_iff {n : ℕ} {c : Cardinal} :\n    ↑n ≤ toPartENat c ↔ ↑n ≤ c := by\n  rw [← toPartENat_natCast n, toPartENat_le_iff_of_le_aleph0 (le_of_lt (nat_lt_aleph0 n))]\n\n"}
{"name":"Cardinal.toPartENat_le_natCast_iff","module":"Mathlib.Deprecated.Cardinal.Finite","initialProofState":"c : Cardinal.{u_1}\nn : Nat\n⊢ Iff (LE.le (Cardinal.toPartENat c) ↑n) (LE.le c ↑n)","decl":"@[simp]\ntheorem _root_.Cardinal.toPartENat_le_natCast_iff {c : Cardinal} {n : ℕ} :\n    toPartENat c ≤ n ↔ c ≤ n := by\n  rw [← toPartENat_natCast n, toPartENat_le_iff_of_lt_aleph0 (nat_lt_aleph0 n)]\n\n"}
{"name":"Cardinal.natCast_eq_toPartENat_iff","module":"Mathlib.Deprecated.Cardinal.Finite","initialProofState":"n : Nat\nc : Cardinal.{u_1}\n⊢ Iff (Eq (↑n) (Cardinal.toPartENat c)) (Eq (↑n) c)","decl":"@[simp]\ntheorem _root_.Cardinal.natCast_eq_toPartENat_iff {n : ℕ} {c : Cardinal} :\n    ↑n = toPartENat c ↔ ↑n = c := by\n  rw [le_antisymm_iff, le_antisymm_iff, Cardinal.toPartENat_le_natCast_iff,\n    Cardinal.natCast_le_toPartENat_iff]\n\n"}
{"name":"Cardinal.toPartENat_eq_natCast_iff","module":"Mathlib.Deprecated.Cardinal.Finite","initialProofState":"c : Cardinal.{u_1}\nn : Nat\n⊢ Iff (Eq (Cardinal.toPartENat c) ↑n) (Eq c ↑n)","decl":"@[simp]\ntheorem _root_.Cardinal.toPartENat_eq_natCast_iff {c : Cardinal} {n : ℕ} :\n    Cardinal.toPartENat c = n ↔ c = n := by\nrw [eq_comm, Cardinal.natCast_eq_toPartENat_iff, eq_comm]\n\n"}
{"name":"Cardinal.natCast_lt_toPartENat_iff","module":"Mathlib.Deprecated.Cardinal.Finite","initialProofState":"n : Nat\nc : Cardinal.{u_1}\n⊢ Iff (LT.lt (↑n) (Cardinal.toPartENat c)) (LT.lt (↑n) c)","decl":"@[simp]\ntheorem _root_.Cardinal.natCast_lt_toPartENat_iff {n : ℕ} {c : Cardinal} :\n    ↑n < toPartENat c ↔ ↑n < c := by\n  simp only [← not_le, Cardinal.toPartENat_le_natCast_iff]\n\n"}
{"name":"Cardinal.toPartENat_lt_natCast_iff","module":"Mathlib.Deprecated.Cardinal.Finite","initialProofState":"n : Nat\nc : Cardinal.{u_1}\n⊢ Iff (LT.lt (Cardinal.toPartENat c) ↑n) (LT.lt c ↑n)","decl":"@[simp]\ntheorem _root_.Cardinal.toPartENat_lt_natCast_iff {n : ℕ} {c : Cardinal} :\n    toPartENat c < ↑n ↔ c < ↑n := by\n  simp only [← not_le, Cardinal.natCast_le_toPartENat_iff]\n\n"}
{"name":"PartENat.card_eq_zero_iff_empty","module":"Mathlib.Deprecated.Cardinal.Finite","initialProofState":"α : Type u_1\n⊢ Iff (Eq (PartENat.card α) 0) (IsEmpty α)","decl":"theorem card_eq_zero_iff_empty (α : Type*) : card α = 0 ↔ IsEmpty α := by\n  rw [← Cardinal.mk_eq_zero_iff]\n  conv_rhs => rw [← Nat.cast_zero]\n  simp only [← Cardinal.toPartENat_eq_natCast_iff]\n  simp only [PartENat.card, Nat.cast_zero]\n\n"}
{"name":"PartENat.card_le_one_iff_subsingleton","module":"Mathlib.Deprecated.Cardinal.Finite","initialProofState":"α : Type u_1\n⊢ Iff (LE.le (PartENat.card α) 1) (Subsingleton α)","decl":"theorem card_le_one_iff_subsingleton (α : Type*) : card α ≤ 1 ↔ Subsingleton α := by\n  rw [← le_one_iff_subsingleton]\n  conv_rhs => rw [← Nat.cast_one]\n  rw [← Cardinal.toPartENat_le_natCast_iff]\n  simp only [PartENat.card, Nat.cast_one]\n\n"}
{"name":"PartENat.one_lt_card_iff_nontrivial","module":"Mathlib.Deprecated.Cardinal.Finite","initialProofState":"α : Type u_1\n⊢ Iff (LT.lt 1 (PartENat.card α)) (Nontrivial α)","decl":"theorem one_lt_card_iff_nontrivial (α : Type*) : 1 < card α ↔ Nontrivial α := by\n  rw [← Cardinal.one_lt_iff_nontrivial]\n  conv_rhs => rw [← Nat.cast_one]\n  rw [← natCast_lt_toPartENat_iff]\n  simp only [PartENat.card, Nat.cast_one]\n\n"}
{"name":"PartENat.card_eq_coe_natCard","module":"Mathlib.Deprecated.Cardinal.Finite","initialProofState":"α : Type u_1\ninst✝ : Finite α\n⊢ Eq (PartENat.card α) ↑(Nat.card α)","decl":"set_option linter.deprecated false in\n@[deprecated ENat.card_eq_coe_natCard (since := \"2024-11-30\")]\ntheorem card_eq_coe_natCard (α : Type*) [Finite α] : card α = Nat.card α := by\n  unfold PartENat.card\n  apply symm\n  rw [Cardinal.natCast_eq_toPartENat_iff]\n  exact Finite.cast_card_eq_mk\n\n\n"}
