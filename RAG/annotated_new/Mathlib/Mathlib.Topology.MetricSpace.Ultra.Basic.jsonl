{"name":"IsUltrametricDist.dist_triangle_max","module":"Mathlib.Topology.MetricSpace.Ultra.Basic","initialProofState":"X : Type u_2\ninst✝ : Dist X\nself : IsUltrametricDist X\nx y z : X\n⊢ LE.le (Dist.dist x z) (Max.max (Dist.dist x y) (Dist.dist y z))","decl":"/-- The `dist : X → X → ℝ` respects the ultrametric inequality\nof `dist(x, z) ≤ max (dist(x,y)) (dist(y,z))`. -/\nclass IsUltrametricDist (X : Type*) [Dist X] : Prop where\n  dist_triangle_max : ∀ x y z : X, dist x z ≤ max (dist x y) (dist y z)\n\n"}
{"name":"dist_triangle_max","module":"Mathlib.Topology.MetricSpace.Ultra.Basic","initialProofState":"X : Type u_1\ninst✝¹ : PseudoMetricSpace X\ninst✝ : IsUltrametricDist X\nx y z : X\n⊢ LE.le (Dist.dist x z) (Max.max (Dist.dist x y) (Dist.dist y z))","decl":"lemma dist_triangle_max : dist x z ≤ max (dist x y) (dist y z) :=\n  IsUltrametricDist.dist_triangle_max x y z\n\n"}
{"name":"IsUltrametricDist.dist_eq_max_of_dist_ne_dist","module":"Mathlib.Topology.MetricSpace.Ultra.Basic","initialProofState":"X : Type u_1\ninst✝¹ : PseudoMetricSpace X\ninst✝ : IsUltrametricDist X\nx y z : X\nh : Ne (Dist.dist x y) (Dist.dist y z)\n⊢ Eq (Dist.dist x z) (Max.max (Dist.dist x y) (Dist.dist y z))","decl":"/-- All triangles are isosceles in an ultrametric space. -/\nlemma dist_eq_max_of_dist_ne_dist (h : dist x y ≠ dist y z) :\n    dist x z = max (dist x y) (dist y z) := by\n  apply le_antisymm (dist_triangle_max x y z)\n  rcases h.lt_or_lt with h | h\n  · rw [max_eq_right h.le]\n    apply (le_max_iff.mp <| dist_triangle_max y x z).resolve_left\n    simpa only [not_le, dist_comm x y] using h\n  · rw [max_eq_left h.le, dist_comm x y, dist_comm x z]\n    apply (le_max_iff.mp <| dist_triangle_max y z x).resolve_left\n    simpa only [not_le, dist_comm x y] using h\n\n"}
{"name":"IsUltrametricDist.subtype","module":"Mathlib.Topology.MetricSpace.Ultra.Basic","initialProofState":"X : Type u_1\ninst✝ : PseudoMetricSpace X\np : X → Prop\n⊢ IsUltrametricDist (Subtype p)","decl":"instance subtype (p : X → Prop) : IsUltrametricDist (Subtype p) :=\n  ⟨fun _ _ _ ↦ by simpa [Subtype.dist_eq] using dist_triangle_max _ _ _⟩\n\n"}
{"name":"IsUltrametricDist.ball_eq_of_mem","module":"Mathlib.Topology.MetricSpace.Ultra.Basic","initialProofState":"X : Type u_1\ninst✝¹ : PseudoMetricSpace X\ninst✝ : IsUltrametricDist X\nx y : X\nr : Real\nh : Membership.mem (Metric.ball x r) y\n⊢ Eq (Metric.ball x r) (Metric.ball y r)","decl":"lemma ball_eq_of_mem {x y : X} {r : ℝ} (h : y ∈ ball x r) : ball x r = ball y r := by\n  ext a\n  simp_rw [mem_ball] at h ⊢\n  constructor <;> intro h' <;>\n  exact (dist_triangle_max _ _ _).trans_lt (max_lt h' (dist_comm x _ ▸ h))\n\n"}
{"name":"IsUltrametricDist.mem_ball_iff","module":"Mathlib.Topology.MetricSpace.Ultra.Basic","initialProofState":"X : Type u_1\ninst✝¹ : PseudoMetricSpace X\ninst✝ : IsUltrametricDist X\nx y : X\nr : Real\n⊢ Iff (Membership.mem (Metric.ball x r) y) (Membership.mem (Metric.ball y r) x)","decl":"lemma mem_ball_iff {x y : X} {r : ℝ} : y ∈ ball x r ↔ x ∈ ball y r := by\n  cases lt_or_le 0 r with\n  | inl hr =>\n    constructor <;> intro h <;>\n    rw [← ball_eq_of_mem h] <;>\n    simp [hr]\n  | inr hr => simp [ball_eq_empty.mpr hr]\n\n"}
{"name":"IsUltrametricDist.ball_subset_trichotomy","module":"Mathlib.Topology.MetricSpace.Ultra.Basic","initialProofState":"X : Type u_1\ninst✝¹ : PseudoMetricSpace X\ninst✝ : IsUltrametricDist X\nx y : X\nr s : Real\n⊢ Or (HasSubset.Subset (Metric.ball x r) (Metric.ball y s)) (Or (HasSubset.Subset (Metric.ball y s) (Metric.ball x r)) (Disjoint (Metric.ball x r) (Metric.ball y s)))","decl":"lemma ball_subset_trichotomy :\n    ball x r ⊆ ball y s ∨ ball y s ⊆ ball x r ∨ Disjoint (ball x r) (ball y s) := by\n  wlog hrs : r ≤ s generalizing x y r s\n  · rw [disjoint_comm, ← or_assoc, or_comm (b := _ ⊆ _), or_assoc]\n    exact this y x s r (lt_of_not_le hrs).le\n  · refine Set.disjoint_or_nonempty_inter (ball x r) (ball y s) |>.symm.imp (fun h ↦ ?_) (Or.inr ·)\n    obtain ⟨hxz, hyz⟩ := (Set.mem_inter_iff _ _ _).mp h.some_mem\n    have hx := ball_subset_ball hrs (x := x)\n    rwa [ball_eq_of_mem hyz |>.trans (ball_eq_of_mem <| hx hxz).symm]\n\n"}
{"name":"IsUltrametricDist.ball_eq_or_disjoint","module":"Mathlib.Topology.MetricSpace.Ultra.Basic","initialProofState":"X : Type u_1\ninst✝¹ : PseudoMetricSpace X\ninst✝ : IsUltrametricDist X\nx y : X\nr : Real\n⊢ Or (Eq (Metric.ball x r) (Metric.ball y r)) (Disjoint (Metric.ball x r) (Metric.ball y r))","decl":"lemma ball_eq_or_disjoint :\n    ball x r = ball y r ∨ Disjoint (ball x r) (ball y r) := by\n  refine Set.disjoint_or_nonempty_inter (ball x r) (ball y r) |>.symm.imp (fun h ↦ ?_) id\n  have h₁ := ball_eq_of_mem <| Set.inter_subset_left h.some_mem\n  have h₂ := ball_eq_of_mem <| Set.inter_subset_right h.some_mem\n  exact h₁.trans h₂.symm\n\n"}
{"name":"IsUltrametricDist.closedBall_eq_of_mem","module":"Mathlib.Topology.MetricSpace.Ultra.Basic","initialProofState":"X : Type u_1\ninst✝¹ : PseudoMetricSpace X\ninst✝ : IsUltrametricDist X\nx y : X\nr : Real\nh : Membership.mem (Metric.closedBall x r) y\n⊢ Eq (Metric.closedBall x r) (Metric.closedBall y r)","decl":"lemma closedBall_eq_of_mem {x y: X} {r : ℝ} (h : y ∈ closedBall x r) :\n    closedBall x r = closedBall y r := by\n  ext\n  simp_rw [mem_closedBall] at h ⊢\n  constructor <;> intro h' <;>\n  exact (dist_triangle_max _ _ _).trans (max_le h' (dist_comm x _ ▸ h))\n\n"}
{"name":"IsUltrametricDist.mem_closedBall_iff","module":"Mathlib.Topology.MetricSpace.Ultra.Basic","initialProofState":"X : Type u_1\ninst✝¹ : PseudoMetricSpace X\ninst✝ : IsUltrametricDist X\nx y : X\nr : Real\n⊢ Iff (Membership.mem (Metric.closedBall x r) y) (Membership.mem (Metric.closedBall y r) x)","decl":"lemma mem_closedBall_iff {x y: X} {r : ℝ} :\n    y ∈ closedBall x r ↔ x ∈ closedBall y r := by\n  cases le_or_lt 0 r with\n  | inl hr =>\n    constructor <;> intro h <;>\n    rw [← closedBall_eq_of_mem h] <;>\n    simp [hr]\n  | inr hr => simp [closedBall_eq_empty.mpr hr]\n\n"}
{"name":"IsUltrametricDist.closedBall_subset_trichotomy","module":"Mathlib.Topology.MetricSpace.Ultra.Basic","initialProofState":"X : Type u_1\ninst✝¹ : PseudoMetricSpace X\ninst✝ : IsUltrametricDist X\nx y : X\nr s : Real\n⊢ Or (HasSubset.Subset (Metric.closedBall x r) (Metric.closedBall y s)) (Or (HasSubset.Subset (Metric.closedBall y s) (Metric.closedBall x r)) (Disjoint (Metric.closedBall x r) (Metric.closedBall y s)))","decl":"lemma closedBall_subset_trichotomy :\n    closedBall x r ⊆ closedBall y s ∨ closedBall y s ⊆ closedBall x r ∨\n    Disjoint (closedBall x r) (closedBall y s) := by\n  wlog hrs : r ≤ s generalizing x y r s\n  · rw [disjoint_comm, ← or_assoc, or_comm (b := _ ⊆ _), or_assoc]\n    exact this y x s r (lt_of_not_le hrs).le\n  · refine Set.disjoint_or_nonempty_inter (closedBall x r) (closedBall y s) |>.symm.imp\n      (fun h ↦ ?_) (Or.inr ·)\n    obtain ⟨hxz, hyz⟩ := (Set.mem_inter_iff _ _ _).mp h.some_mem\n    have hx := closedBall_subset_closedBall hrs (x := x)\n    rwa [closedBall_eq_of_mem hyz |>.trans (closedBall_eq_of_mem <| hx hxz).symm]\n\n"}
{"name":"IsUltrametricDist.isClosed_ball","module":"Mathlib.Topology.MetricSpace.Ultra.Basic","initialProofState":"X : Type u_1\ninst✝¹ : PseudoMetricSpace X\ninst✝ : IsUltrametricDist X\nx : X\nr : Real\n⊢ IsClosed (Metric.ball x r)","decl":"lemma isClosed_ball (x : X) (r : ℝ) : IsClosed (ball x r) := by\n  cases le_or_lt r 0 with\n  | inl hr =>\n    simp [ball_eq_empty.mpr hr]\n  | inr h =>\n    rw [← isOpen_compl_iff, isOpen_iff]\n    simp only [Set.mem_compl_iff, not_lt, gt_iff_lt]\n    intro y hy\n    cases ball_eq_or_disjoint x y r with\n    | inl hd =>\n      rw [hd] at hy\n      simp [h.not_le] at hy\n    | inr hd =>\n      use r\n      simp [h, hy, ← Set.le_iff_subset, le_compl_iff_disjoint_left, hd]\n\n"}
{"name":"IsUltrametricDist.isClopen_ball","module":"Mathlib.Topology.MetricSpace.Ultra.Basic","initialProofState":"X : Type u_1\ninst✝¹ : PseudoMetricSpace X\ninst✝ : IsUltrametricDist X\nx : X\nr : Real\n⊢ IsClopen (Metric.ball x r)","decl":"lemma isClopen_ball : IsClopen (ball x r) := ⟨isClosed_ball x r, isOpen_ball⟩\n\n"}
{"name":"IsUltrametricDist.frontier_ball_eq_empty","module":"Mathlib.Topology.MetricSpace.Ultra.Basic","initialProofState":"X : Type u_1\ninst✝¹ : PseudoMetricSpace X\ninst✝ : IsUltrametricDist X\nx : X\nr : Real\n⊢ Eq (frontier (Metric.ball x r)) EmptyCollection.emptyCollection","decl":"lemma frontier_ball_eq_empty : frontier (ball x r) = ∅ :=\n  isClopen_iff_frontier_eq_empty.mp (isClopen_ball x r)\n\n"}
{"name":"IsUltrametricDist.closedBall_eq_or_disjoint","module":"Mathlib.Topology.MetricSpace.Ultra.Basic","initialProofState":"X : Type u_1\ninst✝¹ : PseudoMetricSpace X\ninst✝ : IsUltrametricDist X\nx y : X\nr : Real\n⊢ Or (Eq (Metric.closedBall x r) (Metric.closedBall y r)) (Disjoint (Metric.closedBall x r) (Metric.closedBall y r))","decl":"lemma closedBall_eq_or_disjoint :\n    closedBall x r = closedBall y r ∨ Disjoint (closedBall x r) (closedBall y r) := by\n  refine Set.disjoint_or_nonempty_inter (closedBall x r) (closedBall y r) |>.symm.imp\n    (fun h ↦ ?_) id\n  have h₁ := closedBall_eq_of_mem <| Set.inter_subset_left h.some_mem\n  have h₂ := closedBall_eq_of_mem <| Set.inter_subset_right h.some_mem\n  exact h₁.trans h₂.symm\n\n"}
{"name":"IsUltrametricDist.isOpen_closedBall","module":"Mathlib.Topology.MetricSpace.Ultra.Basic","initialProofState":"X : Type u_1\ninst✝¹ : PseudoMetricSpace X\ninst✝ : IsUltrametricDist X\nx : X\nr : Real\nhr : Ne r 0\n⊢ IsOpen (Metric.closedBall x r)","decl":"lemma isOpen_closedBall {r : ℝ} (hr : r ≠ 0) : IsOpen (closedBall x r) := by\n  cases lt_or_gt_of_ne hr with\n  | inl h =>\n    simp [closedBall_eq_empty.mpr h]\n  | inr h =>\n    rw [isOpen_iff]\n    simp only [Set.mem_compl_iff, not_lt, gt_iff_lt]\n    intro y hy\n    cases closedBall_eq_or_disjoint x y r with\n    | inl hd =>\n      use r\n      simp [h, hd, ball_subset_closedBall]\n    | inr hd =>\n      simp [closedBall_eq_of_mem hy, h.not_lt] at hd\n\n"}
{"name":"IsUltrametricDist.isClopen_closedBall","module":"Mathlib.Topology.MetricSpace.Ultra.Basic","initialProofState":"X : Type u_1\ninst✝¹ : PseudoMetricSpace X\ninst✝ : IsUltrametricDist X\nx : X\nr : Real\nhr : Ne r 0\n⊢ IsClopen (Metric.closedBall x r)","decl":"lemma isClopen_closedBall {r : ℝ} (hr : r ≠ 0) : IsClopen (closedBall x r) :=\n  ⟨Metric.isClosed_ball, isOpen_closedBall x hr⟩\n\n"}
{"name":"IsUltrametricDist.frontier_closedBall_eq_empty","module":"Mathlib.Topology.MetricSpace.Ultra.Basic","initialProofState":"X : Type u_1\ninst✝¹ : PseudoMetricSpace X\ninst✝ : IsUltrametricDist X\nx : X\nr : Real\nhr : Ne r 0\n⊢ Eq (frontier (Metric.closedBall x r)) EmptyCollection.emptyCollection","decl":"lemma frontier_closedBall_eq_empty {r : ℝ} (hr : r ≠ 0) : frontier (closedBall x r) = ∅ :=\n  isClopen_iff_frontier_eq_empty.mp (isClopen_closedBall x hr)\n\n"}
{"name":"IsUltrametricDist.isOpen_sphere","module":"Mathlib.Topology.MetricSpace.Ultra.Basic","initialProofState":"X : Type u_1\ninst✝¹ : PseudoMetricSpace X\ninst✝ : IsUltrametricDist X\nx : X\nr : Real\nhr : Ne r 0\n⊢ IsOpen (Metric.sphere x r)","decl":"lemma isOpen_sphere {r : ℝ} (hr : r ≠ 0) : IsOpen (sphere x r) := by\n  rw [← closedBall_diff_ball, sdiff_eq]\n  exact (isOpen_closedBall x hr).inter (isClosed_ball x r).isOpen_compl\n\n"}
{"name":"IsUltrametricDist.isClopen_sphere","module":"Mathlib.Topology.MetricSpace.Ultra.Basic","initialProofState":"X : Type u_1\ninst✝¹ : PseudoMetricSpace X\ninst✝ : IsUltrametricDist X\nx : X\nr : Real\nhr : Ne r 0\n⊢ IsClopen (Metric.sphere x r)","decl":"lemma isClopen_sphere {r : ℝ} (hr : r ≠ 0) : IsClopen (sphere x r) :=\n  ⟨Metric.isClosed_sphere, isOpen_sphere x hr⟩\n\n"}
