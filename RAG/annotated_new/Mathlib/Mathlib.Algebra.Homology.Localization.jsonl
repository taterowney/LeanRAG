{"name":"HomologicalComplex.homologyFunctor_inverts_quasiIso","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"C : Type u_1\ninst✝² : CategoryTheory.Category.{u_3, u_1} C\nι : Type u_2\nc : ComplexShape ι\ninst✝¹ : CategoryTheory.Limits.HasZeroMorphisms C\ninst✝ : CategoryTheory.CategoryWithHomology C\ni : ι\n⊢ (HomologicalComplex.quasiIso C c).IsInvertedBy (HomologicalComplex.homologyFunctor C c i)","decl":"lemma HomologicalComplex.homologyFunctor_inverts_quasiIso (i : ι) :\n    (quasiIso C c).IsInvertedBy (homologyFunctor C c i) := fun _ _ _ hf => by\n  rw [mem_quasiIso_iff] at hf\n  dsimp\n  infer_instance\n\n"}
{"name":"HomologicalComplexUpToQuasiIso.isIso_Q_map_iff_mem_quasiIso","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"C : Type u_1\ninst✝³ : CategoryTheory.Category.{u_3, u_1} C\nι : Type u_2\nc : ComplexShape ι\ninst✝² : CategoryTheory.Limits.HasZeroMorphisms C\ninst✝¹ : CategoryTheory.CategoryWithHomology C\ninst✝ : (HomologicalComplex.quasiIso C c).HasLocalization\nK L : HomologicalComplex C c\nf : Quiver.Hom K L\n⊢ Iff (CategoryTheory.IsIso (HomologicalComplexUpToQuasiIso.Q.map f)) (HomologicalComplex.quasiIso C c f)","decl":"lemma isIso_Q_map_iff_mem_quasiIso {K L : HomologicalComplex C c} (f : K ⟶ L) :\n    IsIso (Q.map f) ↔ HomologicalComplex.quasiIso C c f := by\n  constructor\n  · intro h\n    rw [HomologicalComplex.mem_quasiIso_iff, quasiIso_iff]\n    intro i\n    rw [quasiIsoAt_iff_isIso_homologyMap]\n    refine (NatIso.isIso_map_iff (homologyFunctorFactors C c i) f).1 ?_\n    dsimp\n    infer_instance\n  · intro h\n    exact Localization.inverts Q (HomologicalComplex.quasiIso C c) _ h\n\n"}
{"name":"HomologicalComplexUpToQuasiIso.Q_inverts_homotopyEquivalences","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"C : Type u_1\ninst✝³ : CategoryTheory.Category.{u_4, u_1} C\nι : Type u_2\nc : ComplexShape ι\ninst✝² : CategoryTheory.Preadditive C\ninst✝¹ : CategoryTheory.CategoryWithHomology C\ninst✝ : (HomologicalComplex.quasiIso C c).HasLocalization\n⊢ (HomologicalComplex.homotopyEquivalences C c).IsInvertedBy HomologicalComplexUpToQuasiIso.Q","decl":"lemma HomologicalComplexUpToQuasiIso.Q_inverts_homotopyEquivalences\n    [(HomologicalComplex.quasiIso C c).HasLocalization] :\n    (HomologicalComplex.homotopyEquivalences C c).IsInvertedBy\n      HomologicalComplexUpToQuasiIso.Q :=\n  MorphismProperty.IsInvertedBy.of_le _ _ _\n    (Localization.inverts Q (HomologicalComplex.quasiIso C c))\n    (homotopyEquivalences_le_quasiIso C c)\n\n"}
{"name":"HomotopyCategory.mem_quasiIso_iff","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"C : Type u_1\ninst✝² : CategoryTheory.Category.{u_3, u_1} C\nι : Type u_2\nc : ComplexShape ι\ninst✝¹ : CategoryTheory.Preadditive C\ninst✝ : CategoryTheory.CategoryWithHomology C\nX Y : HomotopyCategory C c\nf : Quiver.Hom X Y\n⊢ Iff (HomotopyCategory.quasiIso C c f) (∀ (n : ι), CategoryTheory.IsIso ((HomotopyCategory.homologyFunctor C c n).map f))","decl":"lemma mem_quasiIso_iff {X Y : HomotopyCategory C c} (f : X ⟶ Y) :\n    quasiIso C c f ↔ ∀ (n : ι), IsIso ((homologyFunctor _ _ n).map f) := by\n  rfl\n\n"}
{"name":"HomotopyCategory.quotient_map_mem_quasiIso_iff","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"C : Type u_1\ninst✝² : CategoryTheory.Category.{u_3, u_1} C\nι : Type u_2\nc : ComplexShape ι\ninst✝¹ : CategoryTheory.Preadditive C\ninst✝ : CategoryTheory.CategoryWithHomology C\nK L : HomologicalComplex C c\nf : Quiver.Hom K L\n⊢ Iff (HomotopyCategory.quasiIso C c ((HomotopyCategory.quotient C c).map f)) (HomologicalComplex.quasiIso C c f)","decl":"lemma quotient_map_mem_quasiIso_iff {K L : HomologicalComplex C c} (f : K ⟶ L) :\n    quasiIso C c ((quotient C c).map f) ↔ HomologicalComplex.quasiIso C c f := by\n  have eq := fun (i : ι) => NatIso.isIso_map_iff (homologyFunctorFactors C c i) f\n  dsimp at eq\n  simp only [HomologicalComplex.mem_quasiIso_iff, mem_quasiIso_iff, quasiIso_iff,\n    quasiIsoAt_iff_isIso_homologyMap, eq]\n\n"}
{"name":"HomotopyCategory.respectsIso_quasiIso","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"C : Type u_1\ninst✝² : CategoryTheory.Category.{u_3, u_1} C\nι : Type u_2\nc : ComplexShape ι\ninst✝¹ : CategoryTheory.Preadditive C\ninst✝ : CategoryTheory.CategoryWithHomology C\n⊢ (HomotopyCategory.quasiIso C c).RespectsIso","decl":"instance respectsIso_quasiIso : (quasiIso C c).RespectsIso := by\n  apply MorphismProperty.RespectsIso.of_respects_arrow_iso\n  intro f g e hf i\n  exact ((MorphismProperty.isomorphisms C).arrow_mk_iso_iff\n    ((homologyFunctor C c i).mapArrow.mapIso e)).1 (hf i)\n\n"}
{"name":"HomotopyCategory.homologyFunctor_inverts_quasiIso","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"C : Type u_1\ninst✝² : CategoryTheory.Category.{u_3, u_1} C\nι : Type u_2\nc : ComplexShape ι\ninst✝¹ : CategoryTheory.Preadditive C\ninst✝ : CategoryTheory.CategoryWithHomology C\ni : ι\n⊢ (HomotopyCategory.quasiIso C c).IsInvertedBy (HomotopyCategory.homologyFunctor C c i)","decl":"lemma homologyFunctor_inverts_quasiIso (i : ι) :\n    (quasiIso C c).IsInvertedBy (homologyFunctor C c i) := fun _ _ _ hf => hf i\n\n"}
{"name":"HomotopyCategory.quasiIso_eq_quasiIso_map_quotient","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"C : Type u_1\ninst✝² : CategoryTheory.Category.{u_3, u_1} C\nι : Type u_2\nc : ComplexShape ι\ninst✝¹ : CategoryTheory.Preadditive C\ninst✝ : CategoryTheory.CategoryWithHomology C\n⊢ Eq (HomotopyCategory.quasiIso C c) ((HomologicalComplex.quasiIso C c).map (HomotopyCategory.quotient C c))","decl":"lemma quasiIso_eq_quasiIso_map_quotient :\n    quasiIso C c = (HomologicalComplex.quasiIso C c).map (quotient C c) := by\n  ext ⟨K⟩ ⟨L⟩ f\n  obtain ⟨f, rfl⟩ := (HomotopyCategory.quotient C c).map_surjective f\n  constructor\n  · intro hf\n    rw [quotient_map_mem_quasiIso_iff] at hf\n    exact MorphismProperty.map_mem_map _ _ _ hf\n  · rintro ⟨K', L', g, h, ⟨e⟩⟩\n    rw [← quotient_map_mem_quasiIso_iff] at h\n    exact ((quasiIso C c).arrow_mk_iso_iff e).1 h\n\n"}
{"name":"ComplexShape.QFactorsThroughHomotopy.areEqualizedByLocalization","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"ι : Type u_3\nc : ComplexShape ι\nC : Type u_4\ninst✝² : CategoryTheory.Category.{u_5, u_4} C\ninst✝¹ : CategoryTheory.Preadditive C\ninst✝ : CategoryTheory.CategoryWithHomology C\nself : c.QFactorsThroughHomotopy C\nK L : HomologicalComplex C c\nf g : Quiver.Hom K L\nh : Homotopy f g\n⊢ CategoryTheory.AreEqualizedByLocalization (HomologicalComplex.quasiIso C c) f g","decl":"/-- The condition on a complex shape `c` saying that homotopic maps become equal in\nthe localized category with respect to quasi-isomorphisms. -/\nclass ComplexShape.QFactorsThroughHomotopy {ι : Type*} (c : ComplexShape ι)\n    (C : Type*) [Category C] [Preadditive C]\n    [CategoryWithHomology C] : Prop where\n  areEqualizedByLocalization {K L : HomologicalComplex C c} {f g : K ⟶ L} (h : Homotopy f g) :\n    AreEqualizedByLocalization (HomologicalComplex.quasiIso C c) f g\n\n"}
{"name":"HomologicalComplexUpToQuasiIso.Q_map_eq_of_homotopy","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"C : Type u_1\ninst✝⁴ : CategoryTheory.Category.{u_3, u_1} C\nι : Type u_2\nc : ComplexShape ι\ninst✝³ : CategoryTheory.Preadditive C\ninst✝² : CategoryTheory.CategoryWithHomology C\ninst✝¹ : (HomologicalComplex.quasiIso C c).HasLocalization\ninst✝ : c.QFactorsThroughHomotopy C\nK L : HomologicalComplex C c\nf g : Quiver.Hom K L\nh : Homotopy f g\n⊢ Eq (HomologicalComplexUpToQuasiIso.Q.map f) (HomologicalComplexUpToQuasiIso.Q.map g)","decl":"lemma Q_map_eq_of_homotopy {K L : HomologicalComplex C c} {f g : K ⟶ L} (h : Homotopy f g) :\n    Q.map f = Q.map g :=\n  (ComplexShape.QFactorsThroughHomotopy.areEqualizedByLocalization h).map_eq Q\n\n"}
{"name":"HomologicalComplexUpToQuasiIso.Qh_inverts_quasiIso","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"C : Type u_1\ninst✝⁴ : CategoryTheory.Category.{u_3, u_1} C\nι : Type u_2\nc : ComplexShape ι\ninst✝³ : CategoryTheory.Preadditive C\ninst✝² : CategoryTheory.CategoryWithHomology C\ninst✝¹ : (HomologicalComplex.quasiIso C c).HasLocalization\ninst✝ : c.QFactorsThroughHomotopy C\n⊢ (HomotopyCategory.quasiIso C c).IsInvertedBy HomologicalComplexUpToQuasiIso.Qh","decl":"lemma Qh_inverts_quasiIso : (HomotopyCategory.quasiIso C c).IsInvertedBy Qh := by\n  rintro ⟨K⟩ ⟨L⟩ φ\n  obtain ⟨φ, rfl⟩ := (HomotopyCategory.quotient C c).map_surjective φ\n  rw [HomotopyCategory.quotient_map_mem_quasiIso_iff φ,\n    ← HomologicalComplexUpToQuasiIso.isIso_Q_map_iff_mem_quasiIso]\n  exact (NatIso.isIso_map_iff (quotientCompQhIso C c) φ).2\n\n"}
{"name":"HomologicalComplexUpToQuasiIso.instIsLocalizationHomologicalComplexCompHomotopyCategoryQuotientQhQuasiIso","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"C : Type u_1\ninst✝³ : CategoryTheory.Category.{u_3, u_1} C\nι : Type u_2\nc : ComplexShape ι\ninst✝² : CategoryTheory.Preadditive C\ninst✝¹ : CategoryTheory.CategoryWithHomology C\ninst✝ : (HomologicalComplex.quasiIso C c).HasLocalization\n⊢ ((HomotopyCategory.quotient C c).comp HomologicalComplexUpToQuasiIso.Qh).IsLocalization (HomologicalComplex.quasiIso C c)","decl":"instance : (HomotopyCategory.quotient C c ⋙ Qh).IsLocalization\n    (HomologicalComplex.quasiIso C c) :=\n  Functor.IsLocalization.of_iso _ (quotientCompQhIso C c).symm\n\n"}
{"name":"HomologicalComplexUpToQuasiIso.instIsLocalizationHomotopyCategoryQhQuasiIso","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"C : Type u_1\ninst✝⁴ : CategoryTheory.Category.{u_3, u_1} C\nι : Type u_2\nc : ComplexShape ι\ninst✝³ : CategoryTheory.Preadditive C\ninst✝² : CategoryTheory.CategoryWithHomology C\ninst✝¹ : (HomologicalComplex.quasiIso C c).HasLocalization\ninst✝ : (HomotopyCategory.quotient C c).IsLocalization (HomologicalComplex.homotopyEquivalences C c)\n⊢ HomologicalComplexUpToQuasiIso.Qh.IsLocalization (HomotopyCategory.quasiIso C c)","decl":"/-- The category `HomologicalComplexUpToQuasiIso C c` which was defined as a localization of\n`HomologicalComplex C c` with respect to quasi-isomorphisms also identify to a localization\nof the homotopy category with respect ot quasi-isomorphisms. -/\ninstance : HomologicalComplexUpToQuasiIso.Qh.IsLocalization (HomotopyCategory.quasiIso C c) :=\n  Functor.IsLocalization.of_comp (HomotopyCategory.quotient C c)\n    Qh (HomologicalComplex.homotopyEquivalences C c)\n    (HomotopyCategory.quasiIso C c) (HomologicalComplex.quasiIso C c)\n    (homotopyEquivalences_le_quasiIso C c)\n    (HomotopyCategory.quasiIso_eq_quasiIso_map_quotient C c)\n\n"}
{"name":"ComplexShape.quotient_isLocalization","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"ι : Type u_1\nc : ComplexShape ι\nhc : ∀ (j : ι), Exists fun i => c.Rel i j\nC : Type u_2\ninst✝² : CategoryTheory.Category.{u_3, u_2} C\ninst✝¹ : CategoryTheory.Preadditive C\ninst✝ : CategoryTheory.Limits.HasBinaryBiproducts C\n⊢ (HomotopyCategory.quotient C c).IsLocalization (HomologicalComplex.homotopyEquivalences C c)","decl":"lemma ComplexShape.quotient_isLocalization :\n    (HomotopyCategory.quotient C c).IsLocalization\n      (HomologicalComplex.homotopyEquivalences _ _) := by\n  apply Functor.IsLocalization.mk'\n  all_goals apply c.strictUniversalPropertyFixedTargetQuotient hc\n\n"}
{"name":"ComplexShape.QFactorsThroughHomotopy_of_exists_prev","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"ι : Type u_1\nc : ComplexShape ι\nhc : ∀ (j : ι), Exists fun i => c.Rel i j\nC : Type u_2\ninst✝³ : CategoryTheory.Category.{u_3, u_2} C\ninst✝² : CategoryTheory.Preadditive C\ninst✝¹ : CategoryTheory.Limits.HasBinaryBiproducts C\ninst✝ : CategoryTheory.CategoryWithHomology C\n⊢ c.QFactorsThroughHomotopy C","decl":"lemma ComplexShape.QFactorsThroughHomotopy_of_exists_prev [CategoryWithHomology C] :\n    c.QFactorsThroughHomotopy C where\n  areEqualizedByLocalization {K L f g} h := by\n    have : DecidableRel c.Rel := by classical infer_instance\n    exact h.map_eq_of_inverts_homotopyEquivalences hc _\n      (MorphismProperty.IsInvertedBy.of_le _ _ _\n        (Localization.inverts _ (HomologicalComplex.quasiIso C _))\n        (homotopyEquivalences_le_quasiIso C _))\n\n"}
{"name":"instIsLocalizationHomologicalComplexDownHomotopyCategoryQuotientHomotopyEquivalences","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"C : Type u_1\ninst✝⁴ : CategoryTheory.Category.{u_3, u_1} C\nι : Type u_2\ninst✝³ : CategoryTheory.Preadditive C\ninst✝² : AddRightCancelSemigroup ι\ninst✝¹ : One ι\ninst✝ : CategoryTheory.Limits.HasBinaryBiproducts C\n⊢ (HomotopyCategory.quotient C (ComplexShape.down ι)).IsLocalization (HomologicalComplex.homotopyEquivalences C (ComplexShape.down ι))","decl":"instance : (HomotopyCategory.quotient C (ComplexShape.down ι)).IsLocalization\n    (HomologicalComplex.homotopyEquivalences _ _) :=\n  (ComplexShape.down ι).quotient_isLocalization (fun _ => ⟨_, rfl⟩) C\n\n"}
{"name":"instQFactorsThroughHomotopyDown","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"C : Type u_1\ninst✝⁵ : CategoryTheory.Category.{u_3, u_1} C\nι : Type u_2\ninst✝⁴ : CategoryTheory.Preadditive C\ninst✝³ : AddRightCancelSemigroup ι\ninst✝² : One ι\ninst✝¹ : CategoryTheory.Limits.HasBinaryBiproducts C\ninst✝ : CategoryTheory.CategoryWithHomology C\n⊢ (ComplexShape.down ι).QFactorsThroughHomotopy C","decl":"instance : (ComplexShape.down ι).QFactorsThroughHomotopy C :=\n  (ComplexShape.down ι).QFactorsThroughHomotopy_of_exists_prev (fun _ => ⟨_, rfl⟩) C\n\n"}
{"name":"instIsLocalizationHomologicalComplexIntUpHomotopyCategoryQuotientHomotopyEquivalences","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"C : Type u_1\ninst✝² : CategoryTheory.Category.{u_3, u_1} C\ninst✝¹ : CategoryTheory.Preadditive C\ninst✝ : CategoryTheory.Limits.HasBinaryBiproducts C\n⊢ (HomotopyCategory.quotient C (ComplexShape.up Int)).IsLocalization (HomologicalComplex.homotopyEquivalences C (ComplexShape.up Int))","decl":"instance : (HomotopyCategory.quotient C (ComplexShape.up ℤ)).IsLocalization\n    (HomologicalComplex.homotopyEquivalences _ _) :=\n  (ComplexShape.up ℤ).quotient_isLocalization (fun n => ⟨n - 1, by simp⟩) C\n\n"}
{"name":"instQFactorsThroughHomotopyIntUp","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"C : Type u_1\ninst✝³ : CategoryTheory.Category.{u_3, u_1} C\ninst✝² : CategoryTheory.Preadditive C\ninst✝¹ : CategoryTheory.Limits.HasBinaryBiproducts C\ninst✝ : CategoryTheory.CategoryWithHomology C\n⊢ (ComplexShape.up Int).QFactorsThroughHomotopy C","decl":"instance : (ComplexShape.up ℤ).QFactorsThroughHomotopy C :=\n  (ComplexShape.up ℤ).QFactorsThroughHomotopy_of_exists_prev (fun n => ⟨n - 1, by simp⟩) C\n\n"}
{"name":"CategoryTheory.Functor.mapHomologicalComplexUpToQuasiIsoLocalizerMorphism_functor","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝⁷ : CategoryTheory.Category.{u_4, u_1} C\ninst✝⁶ : CategoryTheory.Category.{u_5, u_2} D\nF : CategoryTheory.Functor C D\nι : Type u_3\nc : ComplexShape ι\ninst✝⁵ : CategoryTheory.Preadditive C\ninst✝⁴ : CategoryTheory.Preadditive D\ninst✝³ : CategoryTheory.CategoryWithHomology C\ninst✝² : CategoryTheory.CategoryWithHomology D\ninst✝¹ : F.Additive\ninst✝ : F.PreservesHomology\n⊢ Eq (F.mapHomologicalComplexUpToQuasiIsoLocalizerMorphism c).functor (F.mapHomologicalComplex c)","decl":"/-- The localizer morphism which expresses that `F.mapHomologicalComplex c` preserves\nquasi-isomorphisms. -/\n@[simps]\ndef mapHomologicalComplexUpToQuasiIsoLocalizerMorphism :\n    LocalizerMorphism (HomologicalComplex.quasiIso C c) (HomologicalComplex.quasiIso D c) where\n  functor := F.mapHomologicalComplex c\n  map _ _ f (_ : QuasiIso f) := HomologicalComplex.quasiIso_map_of_preservesHomology _ _\n\n"}
{"name":"CategoryTheory.Functor.mapHomologicalComplex_upToQuasiIso_Q_inverts_quasiIso","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝⁸ : CategoryTheory.Category.{u_4, u_1} C\ninst✝⁷ : CategoryTheory.Category.{u_6, u_2} D\nF : CategoryTheory.Functor C D\nι : Type u_3\nc : ComplexShape ι\ninst✝⁶ : CategoryTheory.Preadditive C\ninst✝⁵ : CategoryTheory.Preadditive D\ninst✝⁴ : CategoryTheory.CategoryWithHomology C\ninst✝³ : CategoryTheory.CategoryWithHomology D\ninst✝² : (HomologicalComplex.quasiIso D c).HasLocalization\ninst✝¹ : F.Additive\ninst✝ : F.PreservesHomology\n⊢ (HomologicalComplex.quasiIso C c).IsInvertedBy ((F.mapHomologicalComplex c).comp HomologicalComplexUpToQuasiIso.Q)","decl":"lemma mapHomologicalComplex_upToQuasiIso_Q_inverts_quasiIso :\n    (HomologicalComplex.quasiIso C c).IsInvertedBy\n      (F.mapHomologicalComplex c ⋙ HomologicalComplexUpToQuasiIso.Q) := by\n  apply (F.mapHomologicalComplexUpToQuasiIsoLocalizerMorphism c).inverts\n\n"}
{"name":"CategoryTheory.Functor.mapHomologicalComplexUpToQuasiIsoFactorsh_hom_app","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹² : CategoryTheory.Category.{u_4, u_1} C\ninst✝¹¹ : CategoryTheory.Category.{u_6, u_2} D\nF : CategoryTheory.Functor C D\nι : Type u_3\nc : ComplexShape ι\ninst✝¹⁰ : CategoryTheory.Preadditive C\ninst✝⁹ : CategoryTheory.Preadditive D\ninst✝⁸ : CategoryTheory.CategoryWithHomology C\ninst✝⁷ : CategoryTheory.CategoryWithHomology D\ninst✝⁶ : (HomologicalComplex.quasiIso D c).HasLocalization\ninst✝⁵ : F.Additive\ninst✝⁴ : F.PreservesHomology\ninst✝³ : (HomologicalComplex.quasiIso C c).HasLocalization\ninst✝² : c.QFactorsThroughHomotopy C\ninst✝¹ : c.QFactorsThroughHomotopy D\ninst✝ : (HomotopyCategory.quotient C c).IsLocalization (HomologicalComplex.homotopyEquivalences C c)\nK : HomologicalComplex C c\n⊢ Eq ((F.mapHomologicalComplexUpToQuasiIsoFactorsh c).hom.app ((HomotopyCategory.quotient C c).obj K)) (CategoryTheory.CategoryStruct.comp ((F.mapHomologicalComplexUpToQuasiIso c).map ((HomologicalComplexUpToQuasiIso.quotientCompQhIso C c).hom.app K)) (CategoryTheory.CategoryStruct.comp ((F.mapHomologicalComplexUpToQuasiIsoFactors c).hom.app K) (CategoryTheory.CategoryStruct.comp ((HomologicalComplexUpToQuasiIso.quotientCompQhIso D c).inv.app ((F.mapHomologicalComplex c).obj K)) (HomologicalComplexUpToQuasiIso.Qh.map ((F.mapHomotopyCategoryFactors c).inv.app K)))))","decl":"@[reassoc]\nlemma mapHomologicalComplexUpToQuasiIsoFactorsh_hom_app (K : HomologicalComplex C c) :\n    (F.mapHomologicalComplexUpToQuasiIsoFactorsh c).hom.app\n        ((HomotopyCategory.quotient _ _).obj K) =\n      (F.mapHomologicalComplexUpToQuasiIso c).map\n          ((HomologicalComplexUpToQuasiIso.quotientCompQhIso C c).hom.app K) ≫\n        (F.mapHomologicalComplexUpToQuasiIsoFactors c).hom.app K ≫\n          (HomologicalComplexUpToQuasiIso.quotientCompQhIso D c).inv.app _ ≫\n            HomologicalComplexUpToQuasiIso.Qh.map\n              ((F.mapHomotopyCategoryFactors c).inv.app K) := by\n  dsimp [mapHomologicalComplexUpToQuasiIsoFactorsh]\n  rw [Localization.liftNatTrans_app]\n  dsimp\n  simp only [Category.comp_id, Category.id_comp]\n  change _ = (F.mapHomologicalComplexUpToQuasiIso c).map (𝟙 _) ≫ _ ≫ 𝟙 _ ≫\n    HomologicalComplexUpToQuasiIso.Qh.map (𝟙 _)\n  simp only [map_id, Category.comp_id, Category.id_comp]\n\n"}
{"name":"CategoryTheory.Functor.mapHomologicalComplexUpToQuasiIsoFactorsh_hom_app_assoc","module":"Mathlib.Algebra.Homology.Localization","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹² : CategoryTheory.Category.{u_4, u_1} C\ninst✝¹¹ : CategoryTheory.Category.{u_6, u_2} D\nF : CategoryTheory.Functor C D\nι : Type u_3\nc : ComplexShape ι\ninst✝¹⁰ : CategoryTheory.Preadditive C\ninst✝⁹ : CategoryTheory.Preadditive D\ninst✝⁸ : CategoryTheory.CategoryWithHomology C\ninst✝⁷ : CategoryTheory.CategoryWithHomology D\ninst✝⁶ : (HomologicalComplex.quasiIso D c).HasLocalization\ninst✝⁵ : F.Additive\ninst✝⁴ : F.PreservesHomology\ninst✝³ : (HomologicalComplex.quasiIso C c).HasLocalization\ninst✝² : c.QFactorsThroughHomotopy C\ninst✝¹ : c.QFactorsThroughHomotopy D\ninst✝ : (HomotopyCategory.quotient C c).IsLocalization (HomologicalComplex.homotopyEquivalences C c)\nK : HomologicalComplex C c\nZ : HomologicalComplexUpToQuasiIso D c\nh : Quiver.Hom (HomologicalComplexUpToQuasiIso.Qh.obj ((F.mapHomotopyCategory c).obj ((HomotopyCategory.quotient C c).obj K))) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp ((F.mapHomologicalComplexUpToQuasiIsoFactorsh c).hom.app ((HomotopyCategory.quotient C c).obj K)) h) (CategoryTheory.CategoryStruct.comp ((F.mapHomologicalComplexUpToQuasiIso c).map ((HomologicalComplexUpToQuasiIso.quotientCompQhIso C c).hom.app K)) (CategoryTheory.CategoryStruct.comp ((F.mapHomologicalComplexUpToQuasiIsoFactors c).hom.app K) (CategoryTheory.CategoryStruct.comp ((HomologicalComplexUpToQuasiIso.quotientCompQhIso D c).inv.app ((F.mapHomologicalComplex c).obj K)) (CategoryTheory.CategoryStruct.comp (HomologicalComplexUpToQuasiIso.Qh.map ((F.mapHomotopyCategoryFactors c).inv.app K)) h))))","decl":"@[reassoc]\nlemma mapHomologicalComplexUpToQuasiIsoFactorsh_hom_app (K : HomologicalComplex C c) :\n    (F.mapHomologicalComplexUpToQuasiIsoFactorsh c).hom.app\n        ((HomotopyCategory.quotient _ _).obj K) =\n      (F.mapHomologicalComplexUpToQuasiIso c).map\n          ((HomologicalComplexUpToQuasiIso.quotientCompQhIso C c).hom.app K) ≫\n        (F.mapHomologicalComplexUpToQuasiIsoFactors c).hom.app K ≫\n          (HomologicalComplexUpToQuasiIso.quotientCompQhIso D c).inv.app _ ≫\n            HomologicalComplexUpToQuasiIso.Qh.map\n              ((F.mapHomotopyCategoryFactors c).inv.app K) := by\n  dsimp [mapHomologicalComplexUpToQuasiIsoFactorsh]\n  rw [Localization.liftNatTrans_app]\n  dsimp\n  simp only [Category.comp_id, Category.id_comp]\n  change _ = (F.mapHomologicalComplexUpToQuasiIso c).map (𝟙 _) ≫ _ ≫ 𝟙 _ ≫\n    HomologicalComplexUpToQuasiIso.Qh.map (𝟙 _)\n  simp only [map_id, Category.comp_id, Category.id_comp]\n\n"}
