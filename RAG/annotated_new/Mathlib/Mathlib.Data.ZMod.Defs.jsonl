{"name":"ZMod.infinite","module":"Mathlib.Data.ZMod.Defs","initialProofState":"⊢ Infinite (ZMod 0)","decl":"instance infinite : Infinite (ZMod 0) :=\n  Int.infinite\n\n"}
{"name":"ZMod.card","module":"Mathlib.Data.ZMod.Defs","initialProofState":"n : Nat\ninst✝ : Fintype (ZMod n)\n⊢ Eq (Fintype.card (ZMod n)) n","decl":"@[simp]\ntheorem card (n : ℕ) [Fintype (ZMod n)] : Fintype.card (ZMod n) = n := by\n  cases n with\n  | zero => exact (not_finite (ZMod 0)).elim\n  | succ n => convert Fintype.card_fin (n + 1) using 2\n\n/- We define each field by cases, to ensure that the eta-expanded `ZMod.commRing` is defeq to the\noriginal, this helps avoid diamonds with instances coming from classes extending `CommRing` such as\nfield. -/\n"}
