{"name":"CPolynomialOn.contDiffOn","module":"Mathlib.Analysis.Calculus.ContDiff.CPolynomial","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type v\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\ns : Set E\nh : CPolynomialOn 𝕜 f s\nn : WithTop ENat\n⊢ ContDiffOn 𝕜 n f s","decl":"/-- A polynomial function is infinitely differentiable. -/\ntheorem CPolynomialOn.contDiffOn (h : CPolynomialOn 𝕜 f s) {n : WithTop ℕ∞} :\n    ContDiffOn 𝕜 n f s := by\n  let t := { x | CPolynomialAt 𝕜 f x }\n  suffices ContDiffOn 𝕜 n f t from this.mono h\n  suffices AnalyticOnNhd 𝕜 f t by\n    have t_open : IsOpen t := isOpen_cPolynomialAt 𝕜 f\n    exact AnalyticOnNhd.contDiffOn this t_open.uniqueDiffOn\n  have H : CPolynomialOn 𝕜 f t := fun _x hx ↦ hx\n  exact H.analyticOnNhd\n\n"}
{"name":"CPolynomialAt.contDiffAt","module":"Mathlib.Analysis.Calculus.ContDiff.CPolynomial","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type v\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nh : CPolynomialAt 𝕜 f x\nn : WithTop ENat\n⊢ ContDiffAt 𝕜 n f x","decl":"theorem CPolynomialAt.contDiffAt (h : CPolynomialAt 𝕜 f x) {n : WithTop ℕ∞} :\n    ContDiffAt 𝕜 n f x :=\n  let ⟨_, hs, hf⟩ := h.exists_mem_nhds_cPolynomialOn\n  hf.contDiffOn.contDiffAt hs\n\n"}
{"name":"ContinuousMultilinearMap.contDiffAt","module":"Mathlib.Analysis.Calculus.ContDiff.CPolynomial","initialProofState":"𝕜 : Type u_1\ninst✝⁵ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace 𝕜 F\nι : Type u_2\nE : ι → Type u_3\ninst✝² : (i : ι) → NormedAddCommGroup (E i)\ninst✝¹ : (i : ι) → NormedSpace 𝕜 (E i)\ninst✝ : Fintype ι\nf : ContinuousMultilinearMap 𝕜 E F\nn : WithTop ENat\nx : (i : ι) → E i\n⊢ ContDiffAt 𝕜 n (⇑f) x","decl":"lemma contDiffAt : ContDiffAt 𝕜 n f x := f.cpolynomialAt.contDiffAt\n\n"}
{"name":"ContinuousMultilinearMap.contDiff","module":"Mathlib.Analysis.Calculus.ContDiff.CPolynomial","initialProofState":"𝕜 : Type u_1\ninst✝⁵ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace 𝕜 F\nι : Type u_2\nE : ι → Type u_3\ninst✝² : (i : ι) → NormedAddCommGroup (E i)\ninst✝¹ : (i : ι) → NormedSpace 𝕜 (E i)\ninst✝ : Fintype ι\nf : ContinuousMultilinearMap 𝕜 E F\nn : WithTop ENat\n⊢ ContDiff 𝕜 n ⇑f","decl":"lemma contDiff : ContDiff 𝕜 n f := contDiff_iff_contDiffAt.mpr (fun _ ↦ f.contDiffAt)\n\n"}
