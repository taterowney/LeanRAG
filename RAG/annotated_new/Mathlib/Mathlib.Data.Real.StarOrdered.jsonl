{"name":"Real.instStarOrderedRing","module":"Mathlib.Data.Real.StarOrdered","initialProofState":"⊢ StarOrderedRing Real","decl":"/-- Although the instance `RCLike.toStarOrderedRing` exists, it is locked behind the\n`ComplexOrder` scope because currently the order on `ℂ` is not enabled globally. But we\nwant `StarOrderedRing ℝ` to be available globally, so we include this instance separately.\nIn addition, providing this instance here makes it available earlier in the import\nhierarchy; otherwise in order to access it we would need to import `Mathlib.Analysis.RCLike.Basic`.\n-/\ninstance Real.instStarOrderedRing : StarOrderedRing ℝ :=\n  StarOrderedRing.of_nonneg_iff' add_le_add_left fun r => by\n    refine ⟨fun hr => ⟨√r, (mul_self_sqrt hr).symm⟩, ?_⟩\n    rintro ⟨s, rfl⟩\n    exact mul_self_nonneg s\n\n"}
{"name":"NNReal.instStarOrderedRing","module":"Mathlib.Data.Real.StarOrdered","initialProofState":"⊢ StarOrderedRing NNReal","decl":"instance NNReal.instStarOrderedRing : StarOrderedRing ℝ≥0 := by\n  refine .of_le_iff fun x y ↦ ⟨fun h ↦ ?_, ?_⟩\n  · obtain ⟨d, rfl⟩ := exists_add_of_le h\n    refine ⟨sqrt d, ?_⟩\n    simp only [star_trivial, mul_self_sqrt]\n  · rintro ⟨p, -, rfl⟩\n    exact le_self_add\n"}
