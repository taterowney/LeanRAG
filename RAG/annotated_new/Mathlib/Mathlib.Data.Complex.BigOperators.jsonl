{"name":"Complex.ofReal_prod","module":"Mathlib.Data.Complex.BigOperators","initialProofState":"Œ± : Type u_1\ns : Finset Œ±\nf : Œ± ‚Üí Real\n‚ä¢ Eq (‚Üë(s.prod fun i => f i)) (s.prod fun i => ‚Üë(f i))","decl":"@[simp, norm_cast]\ntheorem ofReal_prod (f : Œ± ‚Üí ‚Ñù) : ((‚àè i ‚àà s, f i : ‚Ñù) : ‚ÑÇ) = ‚àè i ‚àà s, (f i : ‚ÑÇ) :=\n  map_prod ofRealHom _ _\n\n"}
{"name":"Complex.ofReal_sum","module":"Mathlib.Data.Complex.BigOperators","initialProofState":"Œ± : Type u_1\ns : Finset Œ±\nf : Œ± ‚Üí Real\n‚ä¢ Eq (‚Üë(s.sum fun i => f i)) (s.sum fun i => ‚Üë(f i))","decl":"@[simp, norm_cast]\ntheorem ofReal_sum (f : Œ± ‚Üí ‚Ñù) : ((‚àë i ‚àà s, f i : ‚Ñù) : ‚ÑÇ) = ‚àë i ‚àà s, (f i : ‚ÑÇ) :=\n  map_sum ofRealHom _ _\n\n"}
{"name":"Complex.ofReal_expect","module":"Mathlib.Data.Complex.BigOperators","initialProofState":"Œ± : Type u_1\ns : Finset Œ±\nf : Œ± ‚Üí Real\n‚ä¢ Eq (‚Üë(s.expect fun i => f i)) (s.expect fun i => ‚Üë(f i))","decl":"@[simp, norm_cast]\nlemma ofReal_expect (f : Œ± ‚Üí ‚Ñù) : (ùîº i ‚àà s, f i : ‚Ñù) = ùîº i ‚àà s, (f i : ‚ÑÇ) :=\n  map_expect ofRealHom ..\n\n"}
{"name":"Complex.ofReal_balance","module":"Mathlib.Data.Complex.BigOperators","initialProofState":"Œ± : Type u_1\ninst‚úù : Fintype Œ±\nf : Œ± ‚Üí Real\na : Œ±\n‚ä¢ Eq (‚Üë(Fintype.balance f a)) (Fintype.balance (Function.comp Complex.ofReal f) a)","decl":"@[simp, norm_cast]\nlemma ofReal_balance [Fintype Œ±] (f : Œ± ‚Üí ‚Ñù) (a : Œ±) :\n    ((balance f a : ‚Ñù) : ‚ÑÇ) = balance ((‚Üë) ‚àò f) a := by simp [balance]\n\n"}
{"name":"Complex.ofReal_comp_balance","module":"Mathlib.Data.Complex.BigOperators","initialProofState":"Œπ : Type u_2\ninst‚úù : Fintype Œπ\nf : Œπ ‚Üí Real\n‚ä¢ Eq (Function.comp Complex.ofReal (Fintype.balance f)) (Fintype.balance (Function.comp Complex.ofReal f))","decl":"@[simp] lemma ofReal_comp_balance {Œπ : Type*} [Fintype Œπ] (f : Œπ ‚Üí ‚Ñù) :\n    ofReal ‚àò balance f = balance (ofReal ‚àò f : Œπ ‚Üí ‚ÑÇ) := funext <| ofReal_balance _\n\n"}
{"name":"Complex.re_sum","module":"Mathlib.Data.Complex.BigOperators","initialProofState":"Œ± : Type u_1\ns : Finset Œ±\nf : Œ± ‚Üí Complex\n‚ä¢ Eq (s.sum fun i => f i).re (s.sum fun i => (f i).re)","decl":"@[simp]\ntheorem re_sum (f : Œ± ‚Üí ‚ÑÇ) : (‚àë i ‚àà s, f i).re = ‚àë i ‚àà s, (f i).re :=\n  map_sum reAddGroupHom f s\n\n"}
{"name":"Complex.re_expect","module":"Mathlib.Data.Complex.BigOperators","initialProofState":"Œ± : Type u_1\ns : Finset Œ±\nf : Œ± ‚Üí Complex\n‚ä¢ Eq (s.expect fun i => f i).re (s.expect fun i => (f i).re)","decl":"@[simp]\nlemma re_expect (f : Œ± ‚Üí ‚ÑÇ) : (ùîº i ‚àà s, f i).re = ùîº i ‚àà s, (f i).re :=\n  map_expect (LinearMap.mk reAddGroupHom.toAddHom (by simp)) f s\n\n"}
{"name":"Complex.re_balance","module":"Mathlib.Data.Complex.BigOperators","initialProofState":"Œ± : Type u_1\ninst‚úù : Fintype Œ±\nf : Œ± ‚Üí Complex\na : Œ±\n‚ä¢ Eq (Fintype.balance f a).re (Fintype.balance (Function.comp Complex.re f) a)","decl":"@[simp]\nlemma re_balance [Fintype Œ±] (f : Œ± ‚Üí ‚ÑÇ) (a : Œ±) : re (balance f a) = balance (re ‚àò f) a := by\n  simp [balance]\n\n"}
{"name":"Complex.re_comp_balance","module":"Mathlib.Data.Complex.BigOperators","initialProofState":"Œπ : Type u_2\ninst‚úù : Fintype Œπ\nf : Œπ ‚Üí Complex\n‚ä¢ Eq (Function.comp Complex.re (Fintype.balance f)) (Fintype.balance (Function.comp Complex.re f))","decl":"@[simp] lemma re_comp_balance {Œπ : Type*} [Fintype Œπ] (f : Œπ ‚Üí ‚ÑÇ) :\n    re ‚àò balance f = balance (re ‚àò f) := funext <| re_balance _\n\n"}
{"name":"Complex.im_sum","module":"Mathlib.Data.Complex.BigOperators","initialProofState":"Œ± : Type u_1\ns : Finset Œ±\nf : Œ± ‚Üí Complex\n‚ä¢ Eq (s.sum fun i => f i).im (s.sum fun i => (f i).im)","decl":"@[simp]\ntheorem im_sum (f : Œ± ‚Üí ‚ÑÇ) : (‚àë i ‚àà s, f i).im = ‚àë i ‚àà s, (f i).im :=\n  map_sum imAddGroupHom f s\n\n"}
{"name":"Complex.im_expect","module":"Mathlib.Data.Complex.BigOperators","initialProofState":"Œ± : Type u_1\ns : Finset Œ±\nf : Œ± ‚Üí Complex\n‚ä¢ Eq (s.expect fun i => f i).im (s.expect fun i => (f i).im)","decl":"@[simp]\nlemma im_expect (f : Œ± ‚Üí ‚ÑÇ) : (ùîº i ‚àà s, f i).im = ùîº i ‚àà s, (f i).im :=\n  map_expect (LinearMap.mk imAddGroupHom.toAddHom (by simp)) f s\n\n"}
{"name":"Complex.im_balance","module":"Mathlib.Data.Complex.BigOperators","initialProofState":"Œ± : Type u_1\ninst‚úù : Fintype Œ±\nf : Œ± ‚Üí Complex\na : Œ±\n‚ä¢ Eq (Fintype.balance f a).im (Fintype.balance (Function.comp Complex.im f) a)","decl":"@[simp]\nlemma im_balance [Fintype Œ±] (f : Œ± ‚Üí ‚ÑÇ) (a : Œ±) : im (balance f a) = balance (im ‚àò f) a := by\n  simp [balance]\n\n"}
{"name":"Complex.im_comp_balance","module":"Mathlib.Data.Complex.BigOperators","initialProofState":"Œπ : Type u_2\ninst‚úù : Fintype Œπ\nf : Œπ ‚Üí Complex\n‚ä¢ Eq (Function.comp Complex.im (Fintype.balance f)) (Fintype.balance (Function.comp Complex.im f))","decl":"@[simp] lemma im_comp_balance {Œπ : Type*} [Fintype Œπ] (f : Œπ ‚Üí ‚ÑÇ) :\n    im ‚àò balance f = balance (im ‚àò f) := funext <| im_balance _\n\n"}
