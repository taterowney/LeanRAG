{"name":"max_one_div_max_inv_one_eq_self","module":"Mathlib.Algebra.Order.Group.MinMax","initialProofState":"α : Type u_1\ninst✝² : Group α\ninst✝¹ : LinearOrder α\ninst✝ : MulLeftMono α\na : α\n⊢ Eq (HDiv.hDiv (Max.max a 1) (Max.max (Inv.inv a) 1)) a","decl":"@[to_additive (attr := simp)]\ntheorem max_one_div_max_inv_one_eq_self (a : α) : max a 1 / max a⁻¹ 1 = a := by\n  rcases le_total a 1 with (h | h) <;> simp [h]\n\n"}
{"name":"max_zero_sub_max_neg_zero_eq_self","module":"Mathlib.Algebra.Order.Group.MinMax","initialProofState":"α : Type u_1\ninst✝² : AddGroup α\ninst✝¹ : LinearOrder α\ninst✝ : AddLeftMono α\na : α\n⊢ Eq (HSub.hSub (Max.max a 0) (Max.max (Neg.neg a) 0)) a","decl":"@[to_additive (attr := simp)]\ntheorem max_one_div_max_inv_one_eq_self (a : α) : max a 1 / max a⁻¹ 1 = a := by\n  rcases le_total a 1 with (h | h) <;> simp [h]\n\n"}
{"name":"max_zero_sub_eq_self","module":"Mathlib.Algebra.Order.Group.MinMax","initialProofState":"α : Type u_1\ninst✝² : AddGroup α\ninst✝¹ : LinearOrder α\ninst✝ : AddLeftMono α\na : α\n⊢ Eq (HSub.hSub (Max.max a 0) (Max.max (Neg.neg a) 0)) a","decl":"alias max_zero_sub_eq_self := max_zero_sub_max_neg_zero_eq_self\n\n"}
{"name":"max_inv_one","module":"Mathlib.Algebra.Order.Group.MinMax","initialProofState":"α : Type u_1\ninst✝² : Group α\ninst✝¹ : LinearOrder α\ninst✝ : MulLeftMono α\na : α\n⊢ Eq (Max.max (Inv.inv a) 1) (HMul.hMul (Inv.inv a) (Max.max a 1))","decl":"@[to_additive]\nlemma max_inv_one (a : α) : max a⁻¹ 1 = a⁻¹ * max a 1 := by\n  rw [eq_inv_mul_iff_mul_eq, ← eq_div_iff_mul_eq', max_one_div_max_inv_one_eq_self]\n\n"}
{"name":"max_neg_zero","module":"Mathlib.Algebra.Order.Group.MinMax","initialProofState":"α : Type u_1\ninst✝² : AddGroup α\ninst✝¹ : LinearOrder α\ninst✝ : AddLeftMono α\na : α\n⊢ Eq (Max.max (Neg.neg a) 0) (HAdd.hAdd (Neg.neg a) (Max.max a 0))","decl":"@[to_additive]\nlemma max_inv_one (a : α) : max a⁻¹ 1 = a⁻¹ * max a 1 := by\n  rw [eq_inv_mul_iff_mul_eq, ← eq_div_iff_mul_eq', max_one_div_max_inv_one_eq_self]\n\n"}
{"name":"min_neg_neg","module":"Mathlib.Algebra.Order.Group.MinMax","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\n⊢ Eq (Min.min (Neg.neg a) (Neg.neg b)) (Neg.neg (Max.max a b))","decl":"@[to_additive min_neg_neg]\ntheorem min_inv_inv' (a b : α) : min a⁻¹ b⁻¹ = (max a b)⁻¹ :=\n  Eq.symm <| (@Monotone.map_max α αᵒᵈ _ _ Inv.inv a b) fun _ _ =>\n    inv_le_inv_iff.mpr\n\n"}
{"name":"min_inv_inv'","module":"Mathlib.Algebra.Order.Group.MinMax","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedCommGroup α\na b : α\n⊢ Eq (Min.min (Inv.inv a) (Inv.inv b)) (Inv.inv (Max.max a b))","decl":"@[to_additive min_neg_neg]\ntheorem min_inv_inv' (a b : α) : min a⁻¹ b⁻¹ = (max a b)⁻¹ :=\n  Eq.symm <| (@Monotone.map_max α αᵒᵈ _ _ Inv.inv a b) fun _ _ =>\n    inv_le_inv_iff.mpr\n\n"}
{"name":"max_neg_neg","module":"Mathlib.Algebra.Order.Group.MinMax","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\n⊢ Eq (Max.max (Neg.neg a) (Neg.neg b)) (Neg.neg (Min.min a b))","decl":"@[to_additive max_neg_neg]\ntheorem max_inv_inv' (a b : α) : max a⁻¹ b⁻¹ = (min a b)⁻¹ :=\n  Eq.symm <| (@Monotone.map_min α αᵒᵈ _ _ Inv.inv a b) fun _ _ =>\n    inv_le_inv_iff.mpr\n\n"}
{"name":"max_inv_inv'","module":"Mathlib.Algebra.Order.Group.MinMax","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedCommGroup α\na b : α\n⊢ Eq (Max.max (Inv.inv a) (Inv.inv b)) (Inv.inv (Min.min a b))","decl":"@[to_additive max_neg_neg]\ntheorem max_inv_inv' (a b : α) : max a⁻¹ b⁻¹ = (min a b)⁻¹ :=\n  Eq.symm <| (@Monotone.map_min α αᵒᵈ _ _ Inv.inv a b) fun _ _ =>\n    inv_le_inv_iff.mpr\n\n"}
{"name":"min_sub_sub_right","module":"Mathlib.Algebra.Order.Group.MinMax","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\n⊢ Eq (Min.min (HSub.hSub a c) (HSub.hSub b c)) (HSub.hSub (Min.min a b) c)","decl":"@[to_additive min_sub_sub_right]\ntheorem min_div_div_right' (a b c : α) : min (a / c) (b / c) = min a b / c := by\n  simpa only [div_eq_mul_inv] using min_mul_mul_right a b c⁻¹\n\n"}
{"name":"min_div_div_right'","module":"Mathlib.Algebra.Order.Group.MinMax","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedCommGroup α\na b c : α\n⊢ Eq (Min.min (HDiv.hDiv a c) (HDiv.hDiv b c)) (HDiv.hDiv (Min.min a b) c)","decl":"@[to_additive min_sub_sub_right]\ntheorem min_div_div_right' (a b c : α) : min (a / c) (b / c) = min a b / c := by\n  simpa only [div_eq_mul_inv] using min_mul_mul_right a b c⁻¹\n\n"}
{"name":"max_div_div_right'","module":"Mathlib.Algebra.Order.Group.MinMax","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedCommGroup α\na b c : α\n⊢ Eq (Max.max (HDiv.hDiv a c) (HDiv.hDiv b c)) (HDiv.hDiv (Max.max a b) c)","decl":"@[to_additive max_sub_sub_right]\ntheorem max_div_div_right' (a b c : α) : max (a / c) (b / c) = max a b / c := by\n  simpa only [div_eq_mul_inv] using max_mul_mul_right a b c⁻¹\n\n"}
{"name":"max_sub_sub_right","module":"Mathlib.Algebra.Order.Group.MinMax","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\n⊢ Eq (Max.max (HSub.hSub a c) (HSub.hSub b c)) (HSub.hSub (Max.max a b) c)","decl":"@[to_additive max_sub_sub_right]\ntheorem max_div_div_right' (a b c : α) : max (a / c) (b / c) = max a b / c := by\n  simpa only [div_eq_mul_inv] using max_mul_mul_right a b c⁻¹\n\n"}
{"name":"min_sub_sub_left","module":"Mathlib.Algebra.Order.Group.MinMax","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\n⊢ Eq (Min.min (HSub.hSub a b) (HSub.hSub a c)) (HSub.hSub a (Max.max b c))","decl":"@[to_additive min_sub_sub_left]\ntheorem min_div_div_left' (a b c : α) : min (a / b) (a / c) = a / max b c := by\n  simp only [div_eq_mul_inv, min_mul_mul_left, min_inv_inv']\n\n"}
{"name":"min_div_div_left'","module":"Mathlib.Algebra.Order.Group.MinMax","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedCommGroup α\na b c : α\n⊢ Eq (Min.min (HDiv.hDiv a b) (HDiv.hDiv a c)) (HDiv.hDiv a (Max.max b c))","decl":"@[to_additive min_sub_sub_left]\ntheorem min_div_div_left' (a b c : α) : min (a / b) (a / c) = a / max b c := by\n  simp only [div_eq_mul_inv, min_mul_mul_left, min_inv_inv']\n\n"}
{"name":"max_sub_sub_left","module":"Mathlib.Algebra.Order.Group.MinMax","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\n⊢ Eq (Max.max (HSub.hSub a b) (HSub.hSub a c)) (HSub.hSub a (Min.min b c))","decl":"@[to_additive max_sub_sub_left]\ntheorem max_div_div_left' (a b c : α) : max (a / b) (a / c) = a / min b c := by\n  simp only [div_eq_mul_inv, max_mul_mul_left, max_inv_inv']\n\n"}
{"name":"max_div_div_left'","module":"Mathlib.Algebra.Order.Group.MinMax","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedCommGroup α\na b c : α\n⊢ Eq (Max.max (HDiv.hDiv a b) (HDiv.hDiv a c)) (HDiv.hDiv a (Min.min b c))","decl":"@[to_additive max_sub_sub_left]\ntheorem max_div_div_left' (a b c : α) : max (a / b) (a / c) = a / min b c := by\n  simp only [div_eq_mul_inv, max_mul_mul_left, max_inv_inv']\n\n"}
{"name":"max_sub_max_le_max","module":"Mathlib.Algebra.Order.Group.MinMax","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c d : α\n⊢ LE.le (HSub.hSub (Max.max a b) (Max.max c d)) (Max.max (HSub.hSub a c) (HSub.hSub b d))","decl":"theorem max_sub_max_le_max (a b c d : α) : max a b - max c d ≤ max (a - c) (b - d) := by\n  simp only [sub_le_iff_le_add, max_le_iff]; constructor\n  · calc\n    a = a - c + c := (sub_add_cancel a c).symm\n    _ ≤ max (a - c) (b - d) + max c d := add_le_add (le_max_left _ _) (le_max_left _ _)\n  · calc\n    b = b - d + d := (sub_add_cancel b d).symm\n    _ ≤ max (a - c) (b - d) + max c d := add_le_add (le_max_right _ _) (le_max_right _ _)\n\n"}
{"name":"abs_max_sub_max_le_max","module":"Mathlib.Algebra.Order.Group.MinMax","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c d : α\n⊢ LE.le (abs (HSub.hSub (Max.max a b) (Max.max c d))) (Max.max (abs (HSub.hSub a c)) (abs (HSub.hSub b d)))","decl":"theorem abs_max_sub_max_le_max (a b c d : α) : |max a b - max c d| ≤ max |a - c| |b - d| := by\n  refine abs_sub_le_iff.2 ⟨?_, ?_⟩\n  · exact (max_sub_max_le_max _ _ _ _).trans (max_le_max (le_abs_self _) (le_abs_self _))\n  · rw [abs_sub_comm a c, abs_sub_comm b d]\n    exact (max_sub_max_le_max _ _ _ _).trans (max_le_max (le_abs_self _) (le_abs_self _))\n\n"}
{"name":"abs_min_sub_min_le_max","module":"Mathlib.Algebra.Order.Group.MinMax","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c d : α\n⊢ LE.le (abs (HSub.hSub (Min.min a b) (Min.min c d))) (Max.max (abs (HSub.hSub a c)) (abs (HSub.hSub b d)))","decl":"theorem abs_min_sub_min_le_max (a b c d : α) : |min a b - min c d| ≤ max |a - c| |b - d| := by\n  simpa only [max_neg_neg, neg_sub_neg, abs_sub_comm] using\n    abs_max_sub_max_le_max (-a) (-b) (-c) (-d)\n\n"}
{"name":"abs_max_sub_max_le_abs","module":"Mathlib.Algebra.Order.Group.MinMax","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\n⊢ LE.le (abs (HSub.hSub (Max.max a c) (Max.max b c))) (abs (HSub.hSub a b))","decl":"theorem abs_max_sub_max_le_abs (a b c : α) : |max a c - max b c| ≤ |a - b| := by\n  simpa only [sub_self, abs_zero, max_eq_left (abs_nonneg (a - b))]\n    using abs_max_sub_max_le_max a c b c\n\n"}
