{"name":"Set.star_empty","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"α : Type u_1\ninst✝ : Star α\n⊢ Eq (Star.star EmptyCollection.emptyCollection) EmptyCollection.emptyCollection","decl":"@[simp]\ntheorem star_empty [Star α] : (∅ : Set α)⋆ = ∅ := rfl\n\n"}
{"name":"Set.star_univ","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"α : Type u_1\ninst✝ : Star α\n⊢ Eq (Star.star Set.univ) Set.univ","decl":"@[simp]\ntheorem star_univ [Star α] : (univ : Set α)⋆ = univ := rfl\n\n"}
{"name":"Set.nonempty_star","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"α : Type u_1\ninst✝ : InvolutiveStar α\ns : Set α\n⊢ Iff (Star.star s).Nonempty s.Nonempty","decl":"@[simp]\ntheorem nonempty_star [InvolutiveStar α] {s : Set α} : s⋆.Nonempty ↔ s.Nonempty :=\n  star_involutive.surjective.nonempty_preimage\n\n"}
{"name":"Set.Nonempty.star","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"α : Type u_1\ninst✝ : InvolutiveStar α\ns : Set α\nh : s.Nonempty\n⊢ (Star.star s).Nonempty","decl":"theorem Nonempty.star [InvolutiveStar α] {s : Set α} (h : s.Nonempty) : s⋆.Nonempty :=\n  nonempty_star.2 h\n\n"}
{"name":"Set.mem_star","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"α : Type u_1\ns : Set α\na : α\ninst✝ : Star α\n⊢ Iff (Membership.mem (Star.star s) a) (Membership.mem s (Star.star a))","decl":"@[simp]\ntheorem mem_star [Star α] : a ∈ s⋆ ↔ a⋆ ∈ s := Iff.rfl\n\n"}
{"name":"Set.star_mem_star","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"α : Type u_1\ns : Set α\na : α\ninst✝ : InvolutiveStar α\n⊢ Iff (Membership.mem (Star.star s) (Star.star a)) (Membership.mem s a)","decl":"theorem star_mem_star [InvolutiveStar α] : a⋆ ∈ s⋆ ↔ a ∈ s := by simp only [mem_star, star_star]\n\n"}
{"name":"Set.star_preimage","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"α : Type u_1\ns : Set α\ninst✝ : Star α\n⊢ Eq (Set.preimage Star.star s) (Star.star s)","decl":"@[simp]\ntheorem star_preimage [Star α] : Star.star ⁻¹' s = s⋆ := rfl\n\n"}
{"name":"Set.image_star","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"α : Type u_1\ns : Set α\ninst✝ : InvolutiveStar α\n⊢ Eq (Set.image Star.star s) (Star.star s)","decl":"@[simp]\ntheorem image_star [InvolutiveStar α] : Star.star '' s = s⋆ := by\n  simp only [← star_preimage]\n  rw [image_eq_preimage_of_inverse] <;> intro <;> simp only [star_star]\n\n"}
{"name":"Set.inter_star","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"α : Type u_1\ns t : Set α\ninst✝ : Star α\n⊢ Eq (Star.star (Inter.inter s t)) (Inter.inter (Star.star s) (Star.star t))","decl":"@[simp]\ntheorem inter_star [Star α] : (s ∩ t)⋆ = s⋆ ∩ t⋆ := preimage_inter\n\n"}
{"name":"Set.union_star","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"α : Type u_1\ns t : Set α\ninst✝ : Star α\n⊢ Eq (Star.star (Union.union s t)) (Union.union (Star.star s) (Star.star t))","decl":"@[simp]\ntheorem union_star [Star α] : (s ∪ t)⋆ = s⋆ ∪ t⋆ := preimage_union\n\n"}
{"name":"Set.iInter_star","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"α : Type u_1\nι : Sort u_2\ninst✝ : Star α\ns : ι → Set α\n⊢ Eq (Star.star (Set.iInter fun i => s i)) (Set.iInter fun i => Star.star (s i))","decl":"@[simp]\ntheorem iInter_star {ι : Sort*} [Star α] (s : ι → Set α) : (⋂ i, s i)⋆ = ⋂ i, (s i)⋆ :=\n  preimage_iInter\n\n"}
{"name":"Set.iUnion_star","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"α : Type u_1\nι : Sort u_2\ninst✝ : Star α\ns : ι → Set α\n⊢ Eq (Star.star (Set.iUnion fun i => s i)) (Set.iUnion fun i => Star.star (s i))","decl":"@[simp]\ntheorem iUnion_star {ι : Sort*} [Star α] (s : ι → Set α) : (⋃ i, s i)⋆ = ⋃ i, (s i)⋆ :=\n  preimage_iUnion\n\n"}
{"name":"Set.compl_star","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"α : Type u_1\ns : Set α\ninst✝ : Star α\n⊢ Eq (Star.star (HasCompl.compl s)) (HasCompl.compl (Star.star s))","decl":"@[simp]\ntheorem compl_star [Star α] : sᶜ⋆ = s⋆ᶜ := preimage_compl\n\n"}
{"name":"Set.star_subset_star","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"α : Type u_1\ninst✝ : InvolutiveStar α\ns t : Set α\n⊢ Iff (HasSubset.Subset (Star.star s) (Star.star t)) (HasSubset.Subset s t)","decl":"@[simp]\ntheorem star_subset_star [InvolutiveStar α] {s t : Set α} : s⋆ ⊆ t⋆ ↔ s ⊆ t :=\n  Equiv.star.surjective.preimage_subset_preimage_iff\n\n"}
{"name":"Set.star_subset","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"α : Type u_1\ninst✝ : InvolutiveStar α\ns t : Set α\n⊢ Iff (HasSubset.Subset (Star.star s) t) (HasSubset.Subset s (Star.star t))","decl":"theorem star_subset [InvolutiveStar α] {s t : Set α} : s⋆ ⊆ t ↔ s ⊆ t⋆ := by\n  rw [← star_subset_star, star_star]\n\n"}
{"name":"Set.Finite.star","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"α : Type u_1\ninst✝ : InvolutiveStar α\ns : Set α\nhs : s.Finite\n⊢ (Star.star s).Finite","decl":"theorem Finite.star [InvolutiveStar α] {s : Set α} (hs : s.Finite) : s⋆.Finite :=\n  hs.preimage star_injective.injOn\n\n"}
{"name":"Set.star_singleton","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"β : Type u_2\ninst✝ : InvolutiveStar β\nx : β\n⊢ Eq (Star.star (Singleton.singleton x)) (Singleton.singleton (Star.star x))","decl":"theorem star_singleton {β : Type*} [InvolutiveStar β] (x : β) : ({x} : Set β)⋆ = {x⋆} := by\n  ext1 y\n  rw [mem_star, mem_singleton_iff, mem_singleton_iff, star_eq_iff_star_eq, eq_comm]\n\n"}
{"name":"Set.star_mul","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"α : Type u_1\ninst✝¹ : Mul α\ninst✝ : StarMul α\ns t : Set α\n⊢ Eq (Star.star (HMul.hMul s t)) (HMul.hMul (Star.star t) (Star.star s))","decl":"protected theorem star_mul [Mul α] [StarMul α] (s t : Set α) : (s * t)⋆ = t⋆ * s⋆ := by\n simp_rw [← image_star, ← image2_mul, image_image2, image2_image_left, image2_image_right,\n   star_mul, image2_swap _ s t]\n\n"}
{"name":"Set.star_add","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"α : Type u_1\ninst✝¹ : AddMonoid α\ninst✝ : StarAddMonoid α\ns t : Set α\n⊢ Eq (Star.star (HAdd.hAdd s t)) (HAdd.hAdd (Star.star s) (Star.star t))","decl":"protected theorem star_add [AddMonoid α] [StarAddMonoid α] (s t : Set α) : (s + t)⋆ = s⋆ + t⋆ := by\n simp_rw [← image_star, ← image2_add, image_image2, image2_image_left, image2_image_right,\n   star_add]\n\n"}
{"name":"Set.instTrivialStar","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"α : Type u_1\ninst✝¹ : Star α\ninst✝ : TrivialStar α\n⊢ TrivialStar (Set α)","decl":"@[simp]\ninstance [Star α] [TrivialStar α] : TrivialStar (Set α) where\n  star_trivial s := by\n    rw [← star_preimage]\n    ext1\n    simp [star_trivial]\n\n"}
{"name":"Set.star_inv","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"α : Type u_1\ninst✝¹ : Group α\ninst✝ : StarMul α\ns : Set α\n⊢ Eq (Star.star (Inv.inv s)) (Inv.inv (Star.star s))","decl":"protected theorem star_inv [Group α] [StarMul α] (s : Set α) : s⁻¹⋆ = s⋆⁻¹ := by\n  ext\n  simp only [mem_star, mem_inv, star_inv]\n\n"}
{"name":"Set.star_inv'","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"α : Type u_1\ninst✝¹ : DivisionSemiring α\ninst✝ : StarRing α\ns : Set α\n⊢ Eq (Star.star (Inv.inv s)) (Inv.inv (Star.star s))","decl":"protected theorem star_inv' [DivisionSemiring α] [StarRing α] (s : Set α) : s⁻¹⋆ = s⋆⁻¹ := by\n  ext\n  simp only [mem_star, mem_inv, star_inv₀]\n\n"}
{"name":"StarMemClass.star_coe_eq","module":"Mathlib.Algebra.Star.Pointwise","initialProofState":"S : Type u_1\nα : Type u_2\ninst✝² : InvolutiveStar α\ninst✝¹ : SetLike S α\ninst✝ : StarMemClass S α\ns : S\n⊢ Eq (Star.star ↑s) ↑s","decl":"@[simp]\nlemma StarMemClass.star_coe_eq {S α : Type*} [InvolutiveStar α] [SetLike S α]\n    [StarMemClass S α] (s : S) : star (s : Set α) = s := by\n  ext x\n  simp only [Set.mem_star, SetLike.mem_coe]\n  exact ⟨by simpa only [star_star] using star_mem (s := s) (r := star x), star_mem⟩\n"}
