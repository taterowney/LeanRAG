{"name":"UniformGroup.uniformContinuous_div","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_3\ninst✝¹ : UniformSpace α\ninst✝ : Group α\nself : UniformGroup α\n⊢ UniformContinuous fun p => HDiv.hDiv p.1 p.2","decl":"/-- A uniform group is a group in which multiplication and inversion are uniformly continuous. -/\nclass UniformGroup (α : Type*) [UniformSpace α] [Group α] : Prop where\n  uniformContinuous_div : UniformContinuous fun p : α × α => p.1 / p.2\n\n"}
{"name":"UniformAddGroup.uniformContinuous_sub","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_3\ninst✝¹ : UniformSpace α\ninst✝ : AddGroup α\nself : UniformAddGroup α\n⊢ UniformContinuous fun p => HSub.hSub p.1 p.2","decl":"/-- A uniform additive group is an additive group in which addition\n  and negation are uniformly continuous. -/\nclass UniformAddGroup (α : Type*) [UniformSpace α] [AddGroup α] : Prop where\n  uniformContinuous_sub : UniformContinuous fun p : α × α => p.1 - p.2\n\n"}
{"name":"UniformAddGroup.mk'","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_3\ninst✝¹ : UniformSpace α\ninst✝ : AddGroup α\nh₁ : UniformContinuous fun p => HAdd.hAdd p.1 p.2\nh₂ : UniformContinuous fun p => Neg.neg p\n⊢ UniformAddGroup α","decl":"@[to_additive]\ntheorem UniformGroup.mk' {α} [UniformSpace α] [Group α]\n    (h₁ : UniformContinuous fun p : α × α => p.1 * p.2) (h₂ : UniformContinuous fun p : α => p⁻¹) :\n    UniformGroup α :=\n  ⟨by simpa only [div_eq_mul_inv] using\n    h₁.comp (uniformContinuous_fst.prod_mk (h₂.comp uniformContinuous_snd))⟩\n\n"}
{"name":"UniformGroup.mk'","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_3\ninst✝¹ : UniformSpace α\ninst✝ : Group α\nh₁ : UniformContinuous fun p => HMul.hMul p.1 p.2\nh₂ : UniformContinuous fun p => Inv.inv p\n⊢ UniformGroup α","decl":"@[to_additive]\ntheorem UniformGroup.mk' {α} [UniformSpace α] [Group α]\n    (h₁ : UniformContinuous fun p : α × α => p.1 * p.2) (h₂ : UniformContinuous fun p : α => p⁻¹) :\n    UniformGroup α :=\n  ⟨by simpa only [div_eq_mul_inv] using\n    h₁.comp (uniformContinuous_fst.prod_mk (h₂.comp uniformContinuous_snd))⟩\n\n"}
{"name":"uniformContinuous_sub","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : AddGroup α\ninst✝ : UniformAddGroup α\n⊢ UniformContinuous fun p => HSub.hSub p.1 p.2","decl":"@[to_additive]\ntheorem uniformContinuous_div : UniformContinuous fun p : α × α => p.1 / p.2 :=\n  UniformGroup.uniformContinuous_div\n\n"}
{"name":"uniformContinuous_div","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : Group α\ninst✝ : UniformGroup α\n⊢ UniformContinuous fun p => HDiv.hDiv p.1 p.2","decl":"@[to_additive]\ntheorem uniformContinuous_div : UniformContinuous fun p : α × α => p.1 / p.2 :=\n  UniformGroup.uniformContinuous_div\n\n"}
{"name":"UniformContinuous.sub","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : UniformSpace α\ninst✝² : AddGroup α\ninst✝¹ : UniformAddGroup α\ninst✝ : UniformSpace β\nf g : β → α\nhf : UniformContinuous f\nhg : UniformContinuous g\n⊢ UniformContinuous fun x => HSub.hSub (f x) (g x)","decl":"@[to_additive]\ntheorem UniformContinuous.div [UniformSpace β] {f : β → α} {g : β → α} (hf : UniformContinuous f)\n    (hg : UniformContinuous g) : UniformContinuous fun x => f x / g x :=\n  uniformContinuous_div.comp (hf.prod_mk hg)\n\n"}
{"name":"UniformContinuous.div","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : UniformSpace α\ninst✝² : Group α\ninst✝¹ : UniformGroup α\ninst✝ : UniformSpace β\nf g : β → α\nhf : UniformContinuous f\nhg : UniformContinuous g\n⊢ UniformContinuous fun x => HDiv.hDiv (f x) (g x)","decl":"@[to_additive]\ntheorem UniformContinuous.div [UniformSpace β] {f : β → α} {g : β → α} (hf : UniformContinuous f)\n    (hg : UniformContinuous g) : UniformContinuous fun x => f x / g x :=\n  uniformContinuous_div.comp (hf.prod_mk hg)\n\n"}
{"name":"UniformContinuous.neg","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : UniformSpace α\ninst✝² : AddGroup α\ninst✝¹ : UniformAddGroup α\ninst✝ : UniformSpace β\nf : β → α\nhf : UniformContinuous f\n⊢ UniformContinuous fun x => Neg.neg (f x)","decl":"@[to_additive]\ntheorem UniformContinuous.inv [UniformSpace β] {f : β → α} (hf : UniformContinuous f) :\n    UniformContinuous fun x => (f x)⁻¹ := by\n  have : UniformContinuous fun x => 1 / f x := uniformContinuous_const.div hf\n  simp_all\n\n"}
{"name":"UniformContinuous.inv","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : UniformSpace α\ninst✝² : Group α\ninst✝¹ : UniformGroup α\ninst✝ : UniformSpace β\nf : β → α\nhf : UniformContinuous f\n⊢ UniformContinuous fun x => Inv.inv (f x)","decl":"@[to_additive]\ntheorem UniformContinuous.inv [UniformSpace β] {f : β → α} (hf : UniformContinuous f) :\n    UniformContinuous fun x => (f x)⁻¹ := by\n  have : UniformContinuous fun x => 1 / f x := uniformContinuous_const.div hf\n  simp_all\n\n"}
{"name":"uniformContinuous_neg","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : AddGroup α\ninst✝ : UniformAddGroup α\n⊢ UniformContinuous fun x => Neg.neg x","decl":"@[to_additive]\ntheorem uniformContinuous_inv : UniformContinuous fun x : α => x⁻¹ :=\n  uniformContinuous_id.inv\n\n"}
{"name":"uniformContinuous_inv","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : Group α\ninst✝ : UniformGroup α\n⊢ UniformContinuous fun x => Inv.inv x","decl":"@[to_additive]\ntheorem uniformContinuous_inv : UniformContinuous fun x : α => x⁻¹ :=\n  uniformContinuous_id.inv\n\n"}
{"name":"UniformContinuous.mul","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : UniformSpace α\ninst✝² : Group α\ninst✝¹ : UniformGroup α\ninst✝ : UniformSpace β\nf g : β → α\nhf : UniformContinuous f\nhg : UniformContinuous g\n⊢ UniformContinuous fun x => HMul.hMul (f x) (g x)","decl":"@[to_additive]\ntheorem UniformContinuous.mul [UniformSpace β] {f : β → α} {g : β → α} (hf : UniformContinuous f)\n    (hg : UniformContinuous g) : UniformContinuous fun x => f x * g x := by\n  have : UniformContinuous fun x => f x / (g x)⁻¹ := hf.div hg.inv\n  simp_all\n\n"}
{"name":"UniformContinuous.add","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : UniformSpace α\ninst✝² : AddGroup α\ninst✝¹ : UniformAddGroup α\ninst✝ : UniformSpace β\nf g : β → α\nhf : UniformContinuous f\nhg : UniformContinuous g\n⊢ UniformContinuous fun x => HAdd.hAdd (f x) (g x)","decl":"@[to_additive]\ntheorem UniformContinuous.mul [UniformSpace β] {f : β → α} {g : β → α} (hf : UniformContinuous f)\n    (hg : UniformContinuous g) : UniformContinuous fun x => f x * g x := by\n  have : UniformContinuous fun x => f x / (g x)⁻¹ := hf.div hg.inv\n  simp_all\n\n"}
{"name":"uniformContinuous_mul","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : Group α\ninst✝ : UniformGroup α\n⊢ UniformContinuous fun p => HMul.hMul p.1 p.2","decl":"@[to_additive]\ntheorem uniformContinuous_mul : UniformContinuous fun p : α × α => p.1 * p.2 :=\n  uniformContinuous_fst.mul uniformContinuous_snd\n\n"}
{"name":"uniformContinuous_add","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : AddGroup α\ninst✝ : UniformAddGroup α\n⊢ UniformContinuous fun p => HAdd.hAdd p.1 p.2","decl":"@[to_additive]\ntheorem uniformContinuous_mul : UniformContinuous fun p : α × α => p.1 * p.2 :=\n  uniformContinuous_fst.mul uniformContinuous_snd\n\n"}
{"name":"UniformContinuous.mul_const","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : UniformSpace α\ninst✝² : Group α\ninst✝¹ : UniformGroup α\ninst✝ : UniformSpace β\nf : β → α\nhf : UniformContinuous f\na : α\n⊢ UniformContinuous fun x => HMul.hMul (f x) a","decl":"@[to_additive]\ntheorem UniformContinuous.mul_const [UniformSpace β] {f : β → α} (hf : UniformContinuous f)\n    (a : α) : UniformContinuous fun x ↦ f x * a :=\n  hf.mul uniformContinuous_const\n\n"}
{"name":"UniformContinuous.add_const","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : UniformSpace α\ninst✝² : AddGroup α\ninst✝¹ : UniformAddGroup α\ninst✝ : UniformSpace β\nf : β → α\nhf : UniformContinuous f\na : α\n⊢ UniformContinuous fun x => HAdd.hAdd (f x) a","decl":"@[to_additive]\ntheorem UniformContinuous.mul_const [UniformSpace β] {f : β → α} (hf : UniformContinuous f)\n    (a : α) : UniformContinuous fun x ↦ f x * a :=\n  hf.mul uniformContinuous_const\n\n"}
{"name":"UniformContinuous.const_mul","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : UniformSpace α\ninst✝² : Group α\ninst✝¹ : UniformGroup α\ninst✝ : UniformSpace β\nf : β → α\nhf : UniformContinuous f\na : α\n⊢ UniformContinuous fun x => HMul.hMul a (f x)","decl":"@[to_additive]\ntheorem UniformContinuous.const_mul [UniformSpace β] {f : β → α} (hf : UniformContinuous f)\n    (a : α) : UniformContinuous fun x ↦ a * f x :=\n  uniformContinuous_const.mul hf\n\n"}
{"name":"UniformContinuous.const_add","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : UniformSpace α\ninst✝² : AddGroup α\ninst✝¹ : UniformAddGroup α\ninst✝ : UniformSpace β\nf : β → α\nhf : UniformContinuous f\na : α\n⊢ UniformContinuous fun x => HAdd.hAdd a (f x)","decl":"@[to_additive]\ntheorem UniformContinuous.const_mul [UniformSpace β] {f : β → α} (hf : UniformContinuous f)\n    (a : α) : UniformContinuous fun x ↦ a * f x :=\n  uniformContinuous_const.mul hf\n\n"}
{"name":"uniformContinuous_mul_left","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : Group α\ninst✝ : UniformGroup α\na : α\n⊢ UniformContinuous fun b => HMul.hMul a b","decl":"@[to_additive]\ntheorem uniformContinuous_mul_left (a : α) : UniformContinuous fun b : α => a * b :=\n  uniformContinuous_id.const_mul _\n\n"}
{"name":"uniformContinuous_add_left","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : AddGroup α\ninst✝ : UniformAddGroup α\na : α\n⊢ UniformContinuous fun b => HAdd.hAdd a b","decl":"@[to_additive]\ntheorem uniformContinuous_mul_left (a : α) : UniformContinuous fun b : α => a * b :=\n  uniformContinuous_id.const_mul _\n\n"}
{"name":"uniformContinuous_mul_right","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : Group α\ninst✝ : UniformGroup α\na : α\n⊢ UniformContinuous fun b => HMul.hMul b a","decl":"@[to_additive]\ntheorem uniformContinuous_mul_right (a : α) : UniformContinuous fun b : α => b * a :=\n  uniformContinuous_id.mul_const _\n\n"}
{"name":"uniformContinuous_add_right","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : AddGroup α\ninst✝ : UniformAddGroup α\na : α\n⊢ UniformContinuous fun b => HAdd.hAdd b a","decl":"@[to_additive]\ntheorem uniformContinuous_mul_right (a : α) : UniformContinuous fun b : α => b * a :=\n  uniformContinuous_id.mul_const _\n\n"}
{"name":"UniformContinuous.div_const","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : UniformSpace α\ninst✝² : Group α\ninst✝¹ : UniformGroup α\ninst✝ : UniformSpace β\nf : β → α\nhf : UniformContinuous f\na : α\n⊢ UniformContinuous fun x => HDiv.hDiv (f x) a","decl":"@[to_additive]\ntheorem UniformContinuous.div_const [UniformSpace β] {f : β → α} (hf : UniformContinuous f)\n    (a : α) : UniformContinuous fun x ↦ f x / a :=\n  hf.div uniformContinuous_const\n\n"}
{"name":"UniformContinuous.sub_const","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : UniformSpace α\ninst✝² : AddGroup α\ninst✝¹ : UniformAddGroup α\ninst✝ : UniformSpace β\nf : β → α\nhf : UniformContinuous f\na : α\n⊢ UniformContinuous fun x => HSub.hSub (f x) a","decl":"@[to_additive]\ntheorem UniformContinuous.div_const [UniformSpace β] {f : β → α} (hf : UniformContinuous f)\n    (a : α) : UniformContinuous fun x ↦ f x / a :=\n  hf.div uniformContinuous_const\n\n"}
{"name":"uniformContinuous_div_const","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : Group α\ninst✝ : UniformGroup α\na : α\n⊢ UniformContinuous fun b => HDiv.hDiv b a","decl":"@[to_additive]\ntheorem uniformContinuous_div_const (a : α) : UniformContinuous fun b : α => b / a :=\n  uniformContinuous_id.div_const _\n\n"}
{"name":"uniformContinuous_sub_const","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : AddGroup α\ninst✝ : UniformAddGroup α\na : α\n⊢ UniformContinuous fun b => HSub.hSub b a","decl":"@[to_additive]\ntheorem uniformContinuous_div_const (a : α) : UniformContinuous fun b : α => b / a :=\n  uniformContinuous_id.div_const _\n\n"}
{"name":"UniformContinuous.const_nsmul","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : UniformSpace α\ninst✝² : AddGroup α\ninst✝¹ : UniformAddGroup α\ninst✝ : UniformSpace β\nf : β → α\nhf : UniformContinuous f\nn : Nat\n⊢ UniformContinuous fun x => HSMul.hSMul n (f x)","decl":"@[to_additive UniformContinuous.const_nsmul]\ntheorem UniformContinuous.pow_const [UniformSpace β] {f : β → α} (hf : UniformContinuous f) :\n    ∀ n : ℕ, UniformContinuous fun x => f x ^ n\n  | 0 => by\n    simp_rw [pow_zero]\n    exact uniformContinuous_const\n  | n + 1 => by\n    simp_rw [pow_succ']\n    exact hf.mul (hf.pow_const n)\n\n"}
{"name":"UniformContinuous.pow_const","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : UniformSpace α\ninst✝² : Group α\ninst✝¹ : UniformGroup α\ninst✝ : UniformSpace β\nf : β → α\nhf : UniformContinuous f\nn : Nat\n⊢ UniformContinuous fun x => HPow.hPow (f x) n","decl":"@[to_additive UniformContinuous.const_nsmul]\ntheorem UniformContinuous.pow_const [UniformSpace β] {f : β → α} (hf : UniformContinuous f) :\n    ∀ n : ℕ, UniformContinuous fun x => f x ^ n\n  | 0 => by\n    simp_rw [pow_zero]\n    exact uniformContinuous_const\n  | n + 1 => by\n    simp_rw [pow_succ']\n    exact hf.mul (hf.pow_const n)\n\n"}
{"name":"uniformContinuous_const_nsmul","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : AddGroup α\ninst✝ : UniformAddGroup α\nn : Nat\n⊢ UniformContinuous fun x => HSMul.hSMul n x","decl":"@[to_additive uniformContinuous_const_nsmul]\ntheorem uniformContinuous_pow_const (n : ℕ) : UniformContinuous fun x : α => x ^ n :=\n  uniformContinuous_id.pow_const n\n\n"}
{"name":"uniformContinuous_pow_const","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : Group α\ninst✝ : UniformGroup α\nn : Nat\n⊢ UniformContinuous fun x => HPow.hPow x n","decl":"@[to_additive uniformContinuous_const_nsmul]\ntheorem uniformContinuous_pow_const (n : ℕ) : UniformContinuous fun x : α => x ^ n :=\n  uniformContinuous_id.pow_const n\n\n"}
{"name":"UniformContinuous.zpow_const","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : UniformSpace α\ninst✝² : Group α\ninst✝¹ : UniformGroup α\ninst✝ : UniformSpace β\nf : β → α\nhf : UniformContinuous f\nn : Int\n⊢ UniformContinuous fun x => HPow.hPow (f x) n","decl":"@[to_additive UniformContinuous.const_zsmul]\ntheorem UniformContinuous.zpow_const [UniformSpace β] {f : β → α} (hf : UniformContinuous f) :\n    ∀ n : ℤ, UniformContinuous fun x => f x ^ n\n  | (n : ℕ) => by\n    simp_rw [zpow_natCast]\n    exact hf.pow_const _\n  | Int.negSucc n => by\n    simp_rw [zpow_negSucc]\n    exact (hf.pow_const _).inv\n\n"}
{"name":"UniformContinuous.const_zsmul","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : UniformSpace α\ninst✝² : AddGroup α\ninst✝¹ : UniformAddGroup α\ninst✝ : UniformSpace β\nf : β → α\nhf : UniformContinuous f\nn : Int\n⊢ UniformContinuous fun x => HSMul.hSMul n (f x)","decl":"@[to_additive UniformContinuous.const_zsmul]\ntheorem UniformContinuous.zpow_const [UniformSpace β] {f : β → α} (hf : UniformContinuous f) :\n    ∀ n : ℤ, UniformContinuous fun x => f x ^ n\n  | (n : ℕ) => by\n    simp_rw [zpow_natCast]\n    exact hf.pow_const _\n  | Int.negSucc n => by\n    simp_rw [zpow_negSucc]\n    exact (hf.pow_const _).inv\n\n"}
{"name":"uniformContinuous_const_zsmul","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : AddGroup α\ninst✝ : UniformAddGroup α\nn : Int\n⊢ UniformContinuous fun x => HSMul.hSMul n x","decl":"@[to_additive uniformContinuous_const_zsmul]\ntheorem uniformContinuous_zpow_const (n : ℤ) : UniformContinuous fun x : α => x ^ n :=\n  uniformContinuous_id.zpow_const n\n\n"}
{"name":"uniformContinuous_zpow_const","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : Group α\ninst✝ : UniformGroup α\nn : Int\n⊢ UniformContinuous fun x => HPow.hPow x n","decl":"@[to_additive uniformContinuous_const_zsmul]\ntheorem uniformContinuous_zpow_const (n : ℤ) : UniformContinuous fun x : α => x ^ n :=\n  uniformContinuous_id.zpow_const n\n\n"}
{"name":"UniformAddGroup.to_topologicalAddGroup","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : AddGroup α\ninst✝ : UniformAddGroup α\n⊢ TopologicalAddGroup α","decl":"@[to_additive]\ninstance (priority := 10) UniformGroup.to_topologicalGroup : TopologicalGroup α where\n  continuous_mul := uniformContinuous_mul.continuous\n  continuous_inv := uniformContinuous_inv.continuous\n\n"}
{"name":"UniformGroup.to_topologicalGroup","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : Group α\ninst✝ : UniformGroup α\n⊢ TopologicalGroup α","decl":"@[to_additive]\ninstance (priority := 10) UniformGroup.to_topologicalGroup : TopologicalGroup α where\n  continuous_mul := uniformContinuous_mul.continuous\n  continuous_inv := uniformContinuous_inv.continuous\n\n"}
{"name":"instUniformGroupProd","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : UniformSpace α\ninst✝⁴ : Group α\ninst✝³ : UniformGroup α\ninst✝² : UniformSpace β\ninst✝¹ : Group β\ninst✝ : UniformGroup β\n⊢ UniformGroup (Prod α β)","decl":"@[to_additive]\ninstance [UniformSpace β] [Group β] [UniformGroup β] : UniformGroup (α × β) :=\n  ⟨((uniformContinuous_fst.comp uniformContinuous_fst).div\n          (uniformContinuous_fst.comp uniformContinuous_snd)).prod_mk\n      ((uniformContinuous_snd.comp uniformContinuous_fst).div\n        (uniformContinuous_snd.comp uniformContinuous_snd))⟩\n\n"}
{"name":"instUniformAddGroupSum","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : UniformSpace α\ninst✝⁴ : AddGroup α\ninst✝³ : UniformAddGroup α\ninst✝² : UniformSpace β\ninst✝¹ : AddGroup β\ninst✝ : UniformAddGroup β\n⊢ UniformAddGroup (Prod α β)","decl":"@[to_additive]\ninstance [UniformSpace β] [Group β] [UniformGroup β] : UniformGroup (α × β) :=\n  ⟨((uniformContinuous_fst.comp uniformContinuous_fst).div\n          (uniformContinuous_fst.comp uniformContinuous_snd)).prod_mk\n      ((uniformContinuous_snd.comp uniformContinuous_fst).div\n        (uniformContinuous_snd.comp uniformContinuous_snd))⟩\n\n"}
{"name":"uniformity_translate_mul","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : Group α\ninst✝ : UniformGroup α\na : α\n⊢ Eq (Filter.map (fun x => { fst := HMul.hMul x.1 a, snd := HMul.hMul x.2 a }) (uniformity α)) (uniformity α)","decl":"@[to_additive]\ntheorem uniformity_translate_mul (a : α) : ((𝓤 α).map fun x : α × α => (x.1 * a, x.2 * a)) = 𝓤 α :=\n  le_antisymm (uniformContinuous_id.mul uniformContinuous_const)\n    (calc\n      𝓤 α =\n          ((𝓤 α).map fun x : α × α => (x.1 * a⁻¹, x.2 * a⁻¹)).map fun x : α × α =>\n            (x.1 * a, x.2 * a) := by simp [Filter.map_map, Function.comp_def]\n      _ ≤ (𝓤 α).map fun x : α × α => (x.1 * a, x.2 * a) :=\n        Filter.map_mono (uniformContinuous_id.mul uniformContinuous_const)\n      )\n\n"}
{"name":"uniformity_translate_add","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : AddGroup α\ninst✝ : UniformAddGroup α\na : α\n⊢ Eq (Filter.map (fun x => { fst := HAdd.hAdd x.1 a, snd := HAdd.hAdd x.2 a }) (uniformity α)) (uniformity α)","decl":"@[to_additive]\ntheorem uniformity_translate_mul (a : α) : ((𝓤 α).map fun x : α × α => (x.1 * a, x.2 * a)) = 𝓤 α :=\n  le_antisymm (uniformContinuous_id.mul uniformContinuous_const)\n    (calc\n      𝓤 α =\n          ((𝓤 α).map fun x : α × α => (x.1 * a⁻¹, x.2 * a⁻¹)).map fun x : α × α =>\n            (x.1 * a, x.2 * a) := by simp [Filter.map_map, Function.comp_def]\n      _ ≤ (𝓤 α).map fun x : α × α => (x.1 * a, x.2 * a) :=\n        Filter.map_mono (uniformContinuous_id.mul uniformContinuous_const)\n      )\n\n"}
{"name":"AddOpposite.instUniformAddGroup","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : AddGroup α\ninst✝ : UniformAddGroup α\n⊢ UniformAddGroup (AddOpposite α)","decl":"@[to_additive]\ninstance : UniformGroup αᵐᵒᵖ :=\n  ⟨uniformContinuous_op.comp\n      ((uniformContinuous_unop.comp uniformContinuous_snd).inv.mul <|\n        uniformContinuous_unop.comp uniformContinuous_fst)⟩\n\n"}
{"name":"MulOpposite.instUniformGroup","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : Group α\ninst✝ : UniformGroup α\n⊢ UniformGroup (MulOpposite α)","decl":"@[to_additive]\ninstance : UniformGroup αᵐᵒᵖ :=\n  ⟨uniformContinuous_op.comp\n      ((uniformContinuous_unop.comp uniformContinuous_snd).inv.mul <|\n        uniformContinuous_unop.comp uniformContinuous_fst)⟩\n\n"}
{"name":"uniformAddGroup_sInf","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"β : Type u_2\ninst✝ : AddGroup β\nus : Set (UniformSpace β)\nh : ∀ (u : UniformSpace β), Membership.mem us u → UniformAddGroup β\n⊢ UniformAddGroup β","decl":"@[to_additive]\ntheorem uniformGroup_sInf {us : Set (UniformSpace β)} (h : ∀ u ∈ us, @UniformGroup β u _) :\n    @UniformGroup β (sInf us) _ :=\n  -- Porting note: {_} does not find `sInf us` instance, see `continuousSMul_sInf`\n  @UniformGroup.mk β (_) _ <|\n    uniformContinuous_sInf_rng.mpr fun u hu =>\n      uniformContinuous_sInf_dom₂ hu hu (@UniformGroup.uniformContinuous_div β u _ (h u hu))\n\n"}
{"name":"uniformGroup_sInf","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"β : Type u_2\ninst✝ : Group β\nus : Set (UniformSpace β)\nh : ∀ (u : UniformSpace β), Membership.mem us u → UniformGroup β\n⊢ UniformGroup β","decl":"@[to_additive]\ntheorem uniformGroup_sInf {us : Set (UniformSpace β)} (h : ∀ u ∈ us, @UniformGroup β u _) :\n    @UniformGroup β (sInf us) _ :=\n  -- Porting note: {_} does not find `sInf us` instance, see `continuousSMul_sInf`\n  @UniformGroup.mk β (_) _ <|\n    uniformContinuous_sInf_rng.mpr fun u hu =>\n      uniformContinuous_sInf_dom₂ hu hu (@UniformGroup.uniformContinuous_div β u _ (h u hu))\n\n"}
{"name":"uniformGroup_iInf","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"β : Type u_2\ninst✝ : Group β\nι : Sort u_3\nus' : ι → UniformSpace β\nh' : ∀ (i : ι), UniformGroup β\n⊢ UniformGroup β","decl":"@[to_additive]\ntheorem uniformGroup_iInf {ι : Sort*} {us' : ι → UniformSpace β}\n    (h' : ∀ i, @UniformGroup β (us' i) _) : @UniformGroup β (⨅ i, us' i) _ := by\n  rw [← sInf_range]\n  exact uniformGroup_sInf (Set.forall_mem_range.mpr h')\n\n"}
{"name":"uniformAddGroup_iInf","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"β : Type u_2\ninst✝ : AddGroup β\nι : Sort u_3\nus' : ι → UniformSpace β\nh' : ∀ (i : ι), UniformAddGroup β\n⊢ UniformAddGroup β","decl":"@[to_additive]\ntheorem uniformGroup_iInf {ι : Sort*} {us' : ι → UniformSpace β}\n    (h' : ∀ i, @UniformGroup β (us' i) _) : @UniformGroup β (⨅ i, us' i) _ := by\n  rw [← sInf_range]\n  exact uniformGroup_sInf (Set.forall_mem_range.mpr h')\n\n"}
{"name":"uniformAddGroup_inf","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"β : Type u_2\ninst✝ : AddGroup β\nu₁ u₂ : UniformSpace β\nh₁ : UniformAddGroup β\nh₂ : UniformAddGroup β\n⊢ UniformAddGroup β","decl":"@[to_additive]\ntheorem uniformGroup_inf {u₁ u₂ : UniformSpace β} (h₁ : @UniformGroup β u₁ _)\n    (h₂ : @UniformGroup β u₂ _) : @UniformGroup β (u₁ ⊓ u₂) _ := by\n  rw [inf_eq_iInf]\n  refine uniformGroup_iInf fun b => ?_\n  cases b <;> assumption\n\n"}
{"name":"uniformGroup_inf","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"β : Type u_2\ninst✝ : Group β\nu₁ u₂ : UniformSpace β\nh₁ : UniformGroup β\nh₂ : UniformGroup β\n⊢ UniformGroup β","decl":"@[to_additive]\ntheorem uniformGroup_inf {u₁ u₂ : UniformSpace β} (h₁ : @UniformGroup β u₁ _)\n    (h₂ : @UniformGroup β u₂ _) : @UniformGroup β (u₁ ⊓ u₂) _ := by\n  rw [inf_eq_iInf]\n  refine uniformGroup_iInf fun b => ?_\n  cases b <;> assumption\n\n"}
{"name":"uniformity_eq_comap_nhds_one","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : Group α\ninst✝ : UniformGroup α\n⊢ Eq (uniformity α) (Filter.comap (fun x => HDiv.hDiv x.2 x.1) (nhds 1))","decl":"@[to_additive]\ntheorem uniformity_eq_comap_nhds_one : 𝓤 α = comap (fun x : α × α => x.2 / x.1) (𝓝 (1 : α)) := by\n  rw [nhds_eq_comap_uniformity, Filter.comap_comap]\n  refine le_antisymm (Filter.map_le_iff_le_comap.1 ?_) ?_\n  · intro s hs\n    rcases mem_uniformity_of_uniformContinuous_invariant uniformContinuous_div hs with ⟨t, ht, hts⟩\n    refine mem_map.2 (mem_of_superset ht ?_)\n    rintro ⟨a, b⟩\n    simpa [subset_def] using hts a b a\n  · intro s hs\n    rcases mem_uniformity_of_uniformContinuous_invariant uniformContinuous_mul hs with ⟨t, ht, hts⟩\n    refine ⟨_, ht, ?_⟩\n    rintro ⟨a, b⟩\n    simpa [subset_def] using hts 1 (b / a) a\n\n"}
{"name":"uniformity_eq_comap_nhds_zero","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : AddGroup α\ninst✝ : UniformAddGroup α\n⊢ Eq (uniformity α) (Filter.comap (fun x => HSub.hSub x.2 x.1) (nhds 0))","decl":"@[to_additive]\ntheorem uniformity_eq_comap_nhds_one : 𝓤 α = comap (fun x : α × α => x.2 / x.1) (𝓝 (1 : α)) := by\n  rw [nhds_eq_comap_uniformity, Filter.comap_comap]\n  refine le_antisymm (Filter.map_le_iff_le_comap.1 ?_) ?_\n  · intro s hs\n    rcases mem_uniformity_of_uniformContinuous_invariant uniformContinuous_div hs with ⟨t, ht, hts⟩\n    refine mem_map.2 (mem_of_superset ht ?_)\n    rintro ⟨a, b⟩\n    simpa [subset_def] using hts a b a\n  · intro s hs\n    rcases mem_uniformity_of_uniformContinuous_invariant uniformContinuous_mul hs with ⟨t, ht, hts⟩\n    refine ⟨_, ht, ?_⟩\n    rintro ⟨a, b⟩\n    simpa [subset_def] using hts 1 (b / a) a\n\n"}
{"name":"uniformity_eq_comap_nhds_zero_swapped","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : AddGroup α\ninst✝ : UniformAddGroup α\n⊢ Eq (uniformity α) (Filter.comap (fun x => HSub.hSub x.1 x.2) (nhds 0))","decl":"@[to_additive]\ntheorem uniformity_eq_comap_nhds_one_swapped :\n    𝓤 α = comap (fun x : α × α => x.1 / x.2) (𝓝 (1 : α)) := by\n  rw [← comap_swap_uniformity, uniformity_eq_comap_nhds_one, comap_comap]\n  rfl\n\n"}
{"name":"uniformity_eq_comap_nhds_one_swapped","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : Group α\ninst✝ : UniformGroup α\n⊢ Eq (uniformity α) (Filter.comap (fun x => HDiv.hDiv x.1 x.2) (nhds 1))","decl":"@[to_additive]\ntheorem uniformity_eq_comap_nhds_one_swapped :\n    𝓤 α = comap (fun x : α × α => x.1 / x.2) (𝓝 (1 : α)) := by\n  rw [← comap_swap_uniformity, uniformity_eq_comap_nhds_one, comap_comap]\n  rfl\n\n"}
{"name":"UniformAddGroup.ext","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"G : Type u_3\ninst✝ : AddGroup G\nu v : UniformSpace G\nhu : UniformAddGroup G\nhv : UniformAddGroup G\nh : Eq (nhds 0) (nhds 0)\n⊢ Eq u v","decl":"@[to_additive]\ntheorem UniformGroup.ext {G : Type*} [Group G] {u v : UniformSpace G} (hu : @UniformGroup G u _)\n    (hv : @UniformGroup G v _)\n    (h : @nhds _ u.toTopologicalSpace 1 = @nhds _ v.toTopologicalSpace 1) : u = v :=\n  UniformSpace.ext <| by\n    rw [@uniformity_eq_comap_nhds_one _ u _ hu, @uniformity_eq_comap_nhds_one _ v _ hv, h]\n\n"}
{"name":"UniformGroup.ext","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"G : Type u_3\ninst✝ : Group G\nu v : UniformSpace G\nhu : UniformGroup G\nhv : UniformGroup G\nh : Eq (nhds 1) (nhds 1)\n⊢ Eq u v","decl":"@[to_additive]\ntheorem UniformGroup.ext {G : Type*} [Group G] {u v : UniformSpace G} (hu : @UniformGroup G u _)\n    (hv : @UniformGroup G v _)\n    (h : @nhds _ u.toTopologicalSpace 1 = @nhds _ v.toTopologicalSpace 1) : u = v :=\n  UniformSpace.ext <| by\n    rw [@uniformity_eq_comap_nhds_one _ u _ hu, @uniformity_eq_comap_nhds_one _ v _ hv, h]\n\n"}
{"name":"UniformAddGroup.ext_iff","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"G : Type u_3\ninst✝ : AddGroup G\nu v : UniformSpace G\nhu : UniformAddGroup G\nhv : UniformAddGroup G\n⊢ Iff (Eq u v) (Eq (nhds 0) (nhds 0))","decl":"@[to_additive]\ntheorem UniformGroup.ext_iff {G : Type*} [Group G] {u v : UniformSpace G}\n    (hu : @UniformGroup G u _) (hv : @UniformGroup G v _) :\n    u = v ↔ @nhds _ u.toTopologicalSpace 1 = @nhds _ v.toTopologicalSpace 1 :=\n  ⟨fun h => h ▸ rfl, hu.ext hv⟩\n\n"}
{"name":"UniformGroup.ext_iff","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"G : Type u_3\ninst✝ : Group G\nu v : UniformSpace G\nhu : UniformGroup G\nhv : UniformGroup G\n⊢ Iff (Eq u v) (Eq (nhds 1) (nhds 1))","decl":"@[to_additive]\ntheorem UniformGroup.ext_iff {G : Type*} [Group G] {u v : UniformSpace G}\n    (hu : @UniformGroup G u _) (hv : @UniformGroup G v _) :\n    u = v ↔ @nhds _ u.toTopologicalSpace 1 = @nhds _ v.toTopologicalSpace 1 :=\n  ⟨fun h => h ▸ rfl, hu.ext hv⟩\n\n"}
{"name":"UniformGroup.uniformity_countably_generated","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝³ : UniformSpace α\ninst✝² : Group α\ninst✝¹ : UniformGroup α\ninst✝ : (nhds 1).IsCountablyGenerated\n⊢ (uniformity α).IsCountablyGenerated","decl":"@[to_additive]\ntheorem UniformGroup.uniformity_countably_generated [(𝓝 (1 : α)).IsCountablyGenerated] :\n    (𝓤 α).IsCountablyGenerated := by\n  rw [uniformity_eq_comap_nhds_one]\n  exact Filter.comap.isCountablyGenerated _ _\n\n"}
{"name":"UniformAddGroup.uniformity_countably_generated","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝³ : UniformSpace α\ninst✝² : AddGroup α\ninst✝¹ : UniformAddGroup α\ninst✝ : (nhds 0).IsCountablyGenerated\n⊢ (uniformity α).IsCountablyGenerated","decl":"@[to_additive]\ntheorem UniformGroup.uniformity_countably_generated [(𝓝 (1 : α)).IsCountablyGenerated] :\n    (𝓤 α).IsCountablyGenerated := by\n  rw [uniformity_eq_comap_nhds_one]\n  exact Filter.comap.isCountablyGenerated _ _\n\n"}
{"name":"uniformity_eq_comap_inv_mul_nhds_one","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : Group α\ninst✝ : UniformGroup α\n⊢ Eq (uniformity α) (Filter.comap (fun x => HMul.hMul (Inv.inv x.1) x.2) (nhds 1))","decl":"@[to_additive]\ntheorem uniformity_eq_comap_inv_mul_nhds_one :\n    𝓤 α = comap (fun x : α × α => x.1⁻¹ * x.2) (𝓝 (1 : α)) := by\n  rw [← comap_uniformity_mulOpposite, uniformity_eq_comap_nhds_one, ← op_one, ← comap_unop_nhds,\n    comap_comap, comap_comap]\n  simp [Function.comp_def]\n\n"}
{"name":"uniformity_eq_comap_neg_add_nhds_zero","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : AddGroup α\ninst✝ : UniformAddGroup α\n⊢ Eq (uniformity α) (Filter.comap (fun x => HAdd.hAdd (Neg.neg x.1) x.2) (nhds 0))","decl":"@[to_additive]\ntheorem uniformity_eq_comap_inv_mul_nhds_one :\n    𝓤 α = comap (fun x : α × α => x.1⁻¹ * x.2) (𝓝 (1 : α)) := by\n  rw [← comap_uniformity_mulOpposite, uniformity_eq_comap_nhds_one, ← op_one, ← comap_unop_nhds,\n    comap_comap, comap_comap]\n  simp [Function.comp_def]\n\n"}
{"name":"uniformity_eq_comap_inv_mul_nhds_one_swapped","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : Group α\ninst✝ : UniformGroup α\n⊢ Eq (uniformity α) (Filter.comap (fun x => HMul.hMul (Inv.inv x.2) x.1) (nhds 1))","decl":"@[to_additive]\ntheorem uniformity_eq_comap_inv_mul_nhds_one_swapped :\n    𝓤 α = comap (fun x : α × α => x.2⁻¹ * x.1) (𝓝 (1 : α)) := by\n  rw [← comap_swap_uniformity, uniformity_eq_comap_inv_mul_nhds_one, comap_comap]\n  rfl\n\n"}
{"name":"uniformity_eq_comap_neg_add_nhds_zero_swapped","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : AddGroup α\ninst✝ : UniformAddGroup α\n⊢ Eq (uniformity α) (Filter.comap (fun x => HAdd.hAdd (Neg.neg x.2) x.1) (nhds 0))","decl":"@[to_additive]\ntheorem uniformity_eq_comap_inv_mul_nhds_one_swapped :\n    𝓤 α = comap (fun x : α × α => x.2⁻¹ * x.1) (𝓝 (1 : α)) := by\n  rw [← comap_swap_uniformity, uniformity_eq_comap_inv_mul_nhds_one, comap_comap]\n  rfl\n\n"}
{"name":"Filter.HasBasis.uniformity_of_nhds_one","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : Group α\ninst✝ : UniformGroup α\nι : Sort u_3\np : ι → Prop\nU : ι → Set α\nh : (nhds 1).HasBasis p U\n⊢ (uniformity α).HasBasis p fun i => setOf fun x => Membership.mem (U i) (HDiv.hDiv x.2 x.1)","decl":"@[to_additive]\ntheorem Filter.HasBasis.uniformity_of_nhds_one {ι} {p : ι → Prop} {U : ι → Set α}\n    (h : (𝓝 (1 : α)).HasBasis p U) :\n    (𝓤 α).HasBasis p fun i => { x : α × α | x.2 / x.1 ∈ U i } := by\n  rw [uniformity_eq_comap_nhds_one]\n  exact h.comap _\n\n"}
{"name":"Filter.HasBasis.uniformity_of_nhds_zero","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : AddGroup α\ninst✝ : UniformAddGroup α\nι : Sort u_3\np : ι → Prop\nU : ι → Set α\nh : (nhds 0).HasBasis p U\n⊢ (uniformity α).HasBasis p fun i => setOf fun x => Membership.mem (U i) (HSub.hSub x.2 x.1)","decl":"@[to_additive]\ntheorem Filter.HasBasis.uniformity_of_nhds_one {ι} {p : ι → Prop} {U : ι → Set α}\n    (h : (𝓝 (1 : α)).HasBasis p U) :\n    (𝓤 α).HasBasis p fun i => { x : α × α | x.2 / x.1 ∈ U i } := by\n  rw [uniformity_eq_comap_nhds_one]\n  exact h.comap _\n\n"}
{"name":"Filter.HasBasis.uniformity_of_nhds_zero_neg_add","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : AddGroup α\ninst✝ : UniformAddGroup α\nι : Sort u_3\np : ι → Prop\nU : ι → Set α\nh : (nhds 0).HasBasis p U\n⊢ (uniformity α).HasBasis p fun i => setOf fun x => Membership.mem (U i) (HAdd.hAdd (Neg.neg x.1) x.2)","decl":"@[to_additive]\ntheorem Filter.HasBasis.uniformity_of_nhds_one_inv_mul {ι} {p : ι → Prop} {U : ι → Set α}\n    (h : (𝓝 (1 : α)).HasBasis p U) :\n    (𝓤 α).HasBasis p fun i => { x : α × α | x.1⁻¹ * x.2 ∈ U i } := by\n  rw [uniformity_eq_comap_inv_mul_nhds_one]\n  exact h.comap _\n\n"}
{"name":"Filter.HasBasis.uniformity_of_nhds_one_inv_mul","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : Group α\ninst✝ : UniformGroup α\nι : Sort u_3\np : ι → Prop\nU : ι → Set α\nh : (nhds 1).HasBasis p U\n⊢ (uniformity α).HasBasis p fun i => setOf fun x => Membership.mem (U i) (HMul.hMul (Inv.inv x.1) x.2)","decl":"@[to_additive]\ntheorem Filter.HasBasis.uniformity_of_nhds_one_inv_mul {ι} {p : ι → Prop} {U : ι → Set α}\n    (h : (𝓝 (1 : α)).HasBasis p U) :\n    (𝓤 α).HasBasis p fun i => { x : α × α | x.1⁻¹ * x.2 ∈ U i } := by\n  rw [uniformity_eq_comap_inv_mul_nhds_one]\n  exact h.comap _\n\n"}
{"name":"Filter.HasBasis.uniformity_of_nhds_zero_swapped","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : AddGroup α\ninst✝ : UniformAddGroup α\nι : Sort u_3\np : ι → Prop\nU : ι → Set α\nh : (nhds 0).HasBasis p U\n⊢ (uniformity α).HasBasis p fun i => setOf fun x => Membership.mem (U i) (HSub.hSub x.1 x.2)","decl":"@[to_additive]\ntheorem Filter.HasBasis.uniformity_of_nhds_one_swapped {ι} {p : ι → Prop} {U : ι → Set α}\n    (h : (𝓝 (1 : α)).HasBasis p U) :\n    (𝓤 α).HasBasis p fun i => { x : α × α | x.1 / x.2 ∈ U i } := by\n  rw [uniformity_eq_comap_nhds_one_swapped]\n  exact h.comap _\n\n"}
{"name":"Filter.HasBasis.uniformity_of_nhds_one_swapped","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : Group α\ninst✝ : UniformGroup α\nι : Sort u_3\np : ι → Prop\nU : ι → Set α\nh : (nhds 1).HasBasis p U\n⊢ (uniformity α).HasBasis p fun i => setOf fun x => Membership.mem (U i) (HDiv.hDiv x.1 x.2)","decl":"@[to_additive]\ntheorem Filter.HasBasis.uniformity_of_nhds_one_swapped {ι} {p : ι → Prop} {U : ι → Set α}\n    (h : (𝓝 (1 : α)).HasBasis p U) :\n    (𝓤 α).HasBasis p fun i => { x : α × α | x.1 / x.2 ∈ U i } := by\n  rw [uniformity_eq_comap_nhds_one_swapped]\n  exact h.comap _\n\n"}
{"name":"Filter.HasBasis.uniformity_of_nhds_zero_neg_add_swapped","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : AddGroup α\ninst✝ : UniformAddGroup α\nι : Sort u_3\np : ι → Prop\nU : ι → Set α\nh : (nhds 0).HasBasis p U\n⊢ (uniformity α).HasBasis p fun i => setOf fun x => Membership.mem (U i) (HAdd.hAdd (Neg.neg x.2) x.1)","decl":"@[to_additive]\ntheorem Filter.HasBasis.uniformity_of_nhds_one_inv_mul_swapped {ι} {p : ι → Prop} {U : ι → Set α}\n    (h : (𝓝 (1 : α)).HasBasis p U) :\n    (𝓤 α).HasBasis p fun i => { x : α × α | x.2⁻¹ * x.1 ∈ U i } := by\n  rw [uniformity_eq_comap_inv_mul_nhds_one_swapped]\n  exact h.comap _\n\n"}
{"name":"Filter.HasBasis.uniformity_of_nhds_one_inv_mul_swapped","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\ninst✝² : UniformSpace α\ninst✝¹ : Group α\ninst✝ : UniformGroup α\nι : Sort u_3\np : ι → Prop\nU : ι → Set α\nh : (nhds 1).HasBasis p U\n⊢ (uniformity α).HasBasis p fun i => setOf fun x => Membership.mem (U i) (HMul.hMul (Inv.inv x.2) x.1)","decl":"@[to_additive]\ntheorem Filter.HasBasis.uniformity_of_nhds_one_inv_mul_swapped {ι} {p : ι → Prop} {U : ι → Set α}\n    (h : (𝓝 (1 : α)).HasBasis p U) :\n    (𝓤 α).HasBasis p fun i => { x : α × α | x.2⁻¹ * x.1 ∈ U i } := by\n  rw [uniformity_eq_comap_inv_mul_nhds_one_swapped]\n  exact h.comap _\n\n"}
{"name":"uniformContinuous_of_tendsto_one","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁷ : UniformSpace α\ninst✝⁶ : Group α\ninst✝⁵ : UniformGroup α\nhom : Type u_3\ninst✝⁴ : UniformSpace β\ninst✝³ : Group β\ninst✝² : UniformGroup β\ninst✝¹ : FunLike hom α β\ninst✝ : MonoidHomClass hom α β\nf : hom\nh : Filter.Tendsto (⇑f) (nhds 1) (nhds 1)\n⊢ UniformContinuous ⇑f","decl":"@[to_additive]\ntheorem uniformContinuous_of_tendsto_one {hom : Type*} [UniformSpace β] [Group β] [UniformGroup β]\n    [FunLike hom α β] [MonoidHomClass hom α β] {f : hom} (h : Tendsto f (𝓝 1) (𝓝 1)) :\n    UniformContinuous f := by\n  have :\n    ((fun x : β × β => x.2 / x.1) ∘ fun x : α × α => (f x.1, f x.2)) = fun x : α × α =>\n      f (x.2 / x.1) := by ext; simp only [Function.comp_apply, map_div]\n  rw [UniformContinuous, uniformity_eq_comap_nhds_one α, uniformity_eq_comap_nhds_one β,\n    tendsto_comap_iff, this]\n  exact Tendsto.comp h tendsto_comap\n\n"}
{"name":"uniformContinuous_of_tendsto_zero","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁷ : UniformSpace α\ninst✝⁶ : AddGroup α\ninst✝⁵ : UniformAddGroup α\nhom : Type u_3\ninst✝⁴ : UniformSpace β\ninst✝³ : AddGroup β\ninst✝² : UniformAddGroup β\ninst✝¹ : FunLike hom α β\ninst✝ : AddMonoidHomClass hom α β\nf : hom\nh : Filter.Tendsto (⇑f) (nhds 0) (nhds 0)\n⊢ UniformContinuous ⇑f","decl":"@[to_additive]\ntheorem uniformContinuous_of_tendsto_one {hom : Type*} [UniformSpace β] [Group β] [UniformGroup β]\n    [FunLike hom α β] [MonoidHomClass hom α β] {f : hom} (h : Tendsto f (𝓝 1) (𝓝 1)) :\n    UniformContinuous f := by\n  have :\n    ((fun x : β × β => x.2 / x.1) ∘ fun x : α × α => (f x.1, f x.2)) = fun x : α × α =>\n      f (x.2 / x.1) := by ext; simp only [Function.comp_apply, map_div]\n  rw [UniformContinuous, uniformity_eq_comap_nhds_one α, uniformity_eq_comap_nhds_one β,\n    tendsto_comap_iff, this]\n  exact Tendsto.comp h tendsto_comap\n\n"}
{"name":"uniformContinuous_of_continuousAt_zero","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁷ : UniformSpace α\ninst✝⁶ : AddGroup α\ninst✝⁵ : UniformAddGroup α\nhom : Type u_3\ninst✝⁴ : UniformSpace β\ninst✝³ : AddGroup β\ninst✝² : UniformAddGroup β\ninst✝¹ : FunLike hom α β\ninst✝ : AddMonoidHomClass hom α β\nf : hom\nhf : ContinuousAt (⇑f) 0\n⊢ UniformContinuous ⇑f","decl":"/-- A group homomorphism (a bundled morphism of a type that implements `MonoidHomClass`) between\ntwo uniform groups is uniformly continuous provided that it is continuous at one. See also\n`continuous_of_continuousAt_one`. -/\n@[to_additive \"An additive group homomorphism (a bundled morphism of a type that implements\n`AddMonoidHomClass`) between two uniform additive groups is uniformly continuous provided that it\nis continuous at zero. See also `continuous_of_continuousAt_zero`.\"]\ntheorem uniformContinuous_of_continuousAt_one {hom : Type*} [UniformSpace β] [Group β]\n    [UniformGroup β] [FunLike hom α β] [MonoidHomClass hom α β]\n    (f : hom) (hf : ContinuousAt f 1) :\n    UniformContinuous f :=\n  uniformContinuous_of_tendsto_one (by simpa using hf.tendsto)\n\n"}
{"name":"uniformContinuous_of_continuousAt_one","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁷ : UniformSpace α\ninst✝⁶ : Group α\ninst✝⁵ : UniformGroup α\nhom : Type u_3\ninst✝⁴ : UniformSpace β\ninst✝³ : Group β\ninst✝² : UniformGroup β\ninst✝¹ : FunLike hom α β\ninst✝ : MonoidHomClass hom α β\nf : hom\nhf : ContinuousAt (⇑f) 1\n⊢ UniformContinuous ⇑f","decl":"/-- A group homomorphism (a bundled morphism of a type that implements `MonoidHomClass`) between\ntwo uniform groups is uniformly continuous provided that it is continuous at one. See also\n`continuous_of_continuousAt_one`. -/\n@[to_additive \"An additive group homomorphism (a bundled morphism of a type that implements\n`AddMonoidHomClass`) between two uniform additive groups is uniformly continuous provided that it\nis continuous at zero. See also `continuous_of_continuousAt_zero`.\"]\ntheorem uniformContinuous_of_continuousAt_one {hom : Type*} [UniformSpace β] [Group β]\n    [UniformGroup β] [FunLike hom α β] [MonoidHomClass hom α β]\n    (f : hom) (hf : ContinuousAt f 1) :\n    UniformContinuous f :=\n  uniformContinuous_of_tendsto_one (by simpa using hf.tendsto)\n\n"}
{"name":"MonoidHom.uniformContinuous_of_continuousAt_one","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : UniformSpace α\ninst✝⁴ : Group α\ninst✝³ : UniformGroup α\ninst✝² : UniformSpace β\ninst✝¹ : Group β\ninst✝ : UniformGroup β\nf : MonoidHom α β\nhf : ContinuousAt (⇑f) 1\n⊢ UniformContinuous ⇑f","decl":"@[to_additive]\ntheorem MonoidHom.uniformContinuous_of_continuousAt_one [UniformSpace β] [Group β] [UniformGroup β]\n    (f : α →* β) (hf : ContinuousAt f 1) : UniformContinuous f :=\n  _root_.uniformContinuous_of_continuousAt_one f hf\n\n"}
{"name":"AddMonoidHom.uniformContinuous_of_continuousAt_zero","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : UniformSpace α\ninst✝⁴ : AddGroup α\ninst✝³ : UniformAddGroup α\ninst✝² : UniformSpace β\ninst✝¹ : AddGroup β\ninst✝ : UniformAddGroup β\nf : AddMonoidHom α β\nhf : ContinuousAt (⇑f) 0\n⊢ UniformContinuous ⇑f","decl":"@[to_additive]\ntheorem MonoidHom.uniformContinuous_of_continuousAt_one [UniformSpace β] [Group β] [UniformGroup β]\n    (f : α →* β) (hf : ContinuousAt f 1) : UniformContinuous f :=\n  _root_.uniformContinuous_of_continuousAt_one f hf\n\n"}
{"name":"UniformGroup.uniformContinuous_iff_isOpen_ker","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁸ : UniformSpace α\ninst✝⁷ : Group α\ninst✝⁶ : UniformGroup α\nhom : Type u_3\ninst✝⁵ : UniformSpace β\ninst✝⁴ : DiscreteTopology β\ninst✝³ : Group β\ninst✝² : UniformGroup β\ninst✝¹ : FunLike hom α β\ninst✝ : MonoidHomClass hom α β\nf : hom\n⊢ Iff (UniformContinuous ⇑f) (IsOpen ↑(↑f).ker)","decl":"/-- A homomorphism from a uniform group to a discrete uniform group is continuous if and only if\nits kernel is open. -/\n@[to_additive \"A homomorphism from a uniform additive group to a discrete uniform additive group is\ncontinuous if and only if its kernel is open.\"]\ntheorem UniformGroup.uniformContinuous_iff_isOpen_ker {hom : Type*} [UniformSpace β]\n    [DiscreteTopology β] [Group β] [UniformGroup β] [FunLike hom α β] [MonoidHomClass hom α β]\n    {f : hom} :\n    UniformContinuous f ↔ IsOpen ((f : α →* β).ker : Set α) := by\n  refine ⟨fun hf => ?_, fun hf => ?_⟩\n  · apply (isOpen_discrete ({1} : Set β)).preimage hf.continuous\n  · apply uniformContinuous_of_continuousAt_one\n    rw [ContinuousAt, nhds_discrete β, map_one, tendsto_pure]\n    exact hf.mem_nhds (map_one f)\n\n"}
{"name":"UniformAddGroup.uniformContinuous_iff_isOpen_ker","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁸ : UniformSpace α\ninst✝⁷ : AddGroup α\ninst✝⁶ : UniformAddGroup α\nhom : Type u_3\ninst✝⁵ : UniformSpace β\ninst✝⁴ : DiscreteTopology β\ninst✝³ : AddGroup β\ninst✝² : UniformAddGroup β\ninst✝¹ : FunLike hom α β\ninst✝ : AddMonoidHomClass hom α β\nf : hom\n⊢ Iff (UniformContinuous ⇑f) (IsOpen ↑(↑f).ker)","decl":"/-- A homomorphism from a uniform group to a discrete uniform group is continuous if and only if\nits kernel is open. -/\n@[to_additive \"A homomorphism from a uniform additive group to a discrete uniform additive group is\ncontinuous if and only if its kernel is open.\"]\ntheorem UniformGroup.uniformContinuous_iff_isOpen_ker {hom : Type*} [UniformSpace β]\n    [DiscreteTopology β] [Group β] [UniformGroup β] [FunLike hom α β] [MonoidHomClass hom α β]\n    {f : hom} :\n    UniformContinuous f ↔ IsOpen ((f : α →* β).ker : Set α) := by\n  refine ⟨fun hf => ?_, fun hf => ?_⟩\n  · apply (isOpen_discrete ({1} : Set β)).preimage hf.continuous\n  · apply uniformContinuous_of_continuousAt_one\n    rw [ContinuousAt, nhds_discrete β, map_one, tendsto_pure]\n    exact hf.mem_nhds (map_one f)\n\n"}
{"name":"UniformGroup.uniformContinuous_iff_open_ker","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁸ : UniformSpace α\ninst✝⁷ : Group α\ninst✝⁶ : UniformGroup α\nhom : Type u_3\ninst✝⁵ : UniformSpace β\ninst✝⁴ : DiscreteTopology β\ninst✝³ : Group β\ninst✝² : UniformGroup β\ninst✝¹ : FunLike hom α β\ninst✝ : MonoidHomClass hom α β\nf : hom\n⊢ Iff (UniformContinuous ⇑f) (IsOpen ↑(↑f).ker)","decl":"@[deprecated (since := \"2024-11-18\")] alias UniformGroup.uniformContinuous_iff_open_ker :=\n  UniformGroup.uniformContinuous_iff_isOpen_ker\n"}
{"name":"UniformAddGroup.uniformContinuous_iff_open_ker","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁸ : UniformSpace α\ninst✝⁷ : AddGroup α\ninst✝⁶ : UniformAddGroup α\nhom : Type u_3\ninst✝⁵ : UniformSpace β\ninst✝⁴ : DiscreteTopology β\ninst✝³ : AddGroup β\ninst✝² : UniformAddGroup β\ninst✝¹ : FunLike hom α β\ninst✝ : AddMonoidHomClass hom α β\nf : hom\n⊢ Iff (UniformContinuous ⇑f) (IsOpen ↑(↑f).ker)","decl":"@[deprecated (since := \"2024-11-18\")] alias UniformAddGroup.uniformContinuous_iff_open_ker :=\n  UniformAddGroup.uniformContinuous_iff_isOpen_ker\n\n"}
{"name":"uniformContinuous_addMonoidHom_of_continuous","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁷ : UniformSpace α\ninst✝⁶ : AddGroup α\ninst✝⁵ : UniformAddGroup α\nhom : Type u_3\ninst✝⁴ : UniformSpace β\ninst✝³ : AddGroup β\ninst✝² : UniformAddGroup β\ninst✝¹ : FunLike hom α β\ninst✝ : AddMonoidHomClass hom α β\nf : hom\nh : Continuous ⇑f\n⊢ UniformContinuous ⇑f","decl":"@[to_additive]\ntheorem uniformContinuous_monoidHom_of_continuous {hom : Type*} [UniformSpace β] [Group β]\n    [UniformGroup β] [FunLike hom α β] [MonoidHomClass hom α β] {f : hom} (h : Continuous f) :\n    UniformContinuous f :=\n  uniformContinuous_of_tendsto_one <|\n    suffices Tendsto f (𝓝 1) (𝓝 (f 1)) by rwa [map_one] at this\n    h.tendsto 1\n\n"}
{"name":"uniformContinuous_monoidHom_of_continuous","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁷ : UniformSpace α\ninst✝⁶ : Group α\ninst✝⁵ : UniformGroup α\nhom : Type u_3\ninst✝⁴ : UniformSpace β\ninst✝³ : Group β\ninst✝² : UniformGroup β\ninst✝¹ : FunLike hom α β\ninst✝ : MonoidHomClass hom α β\nf : hom\nh : Continuous ⇑f\n⊢ UniformContinuous ⇑f","decl":"@[to_additive]\ntheorem uniformContinuous_monoidHom_of_continuous {hom : Type*} [UniformSpace β] [Group β]\n    [UniformGroup β] [FunLike hom α β] [MonoidHomClass hom α β] {f : hom} (h : Continuous f) :\n    UniformContinuous f :=\n  uniformContinuous_of_tendsto_one <|\n    suffices Tendsto f (𝓝 1) (𝓝 (f 1)) by rwa [map_one] at this\n    h.tendsto 1\n\n"}
{"name":"uniformity_eq_comap_nhds_one'","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"G : Type u_1\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalGroup G\n⊢ Eq (uniformity G) (Filter.comap (fun p => HDiv.hDiv p.2 p.1) (nhds 1))","decl":"@[to_additive]\ntheorem uniformity_eq_comap_nhds_one' : 𝓤 G = comap (fun p : G × G => p.2 / p.1) (𝓝 (1 : G)) :=\n  rfl\n\n"}
{"name":"uniformity_eq_comap_nhds_zero'","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"G : Type u_1\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalAddGroup G\n⊢ Eq (uniformity G) (Filter.comap (fun p => HSub.hSub p.2 p.1) (nhds 0))","decl":"@[to_additive]\ntheorem uniformity_eq_comap_nhds_one' : 𝓤 G = comap (fun p : G × G => p.2 / p.1) (𝓝 (1 : G)) :=\n  rfl\n\n"}
{"name":"comm_topologicalGroup_is_uniform","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"G : Type u_1\ninst✝² : CommGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalGroup G\n⊢ UniformGroup G","decl":"@[to_additive]\n-- Porting note: renamed theorem to conform to naming convention\ntheorem comm_topologicalGroup_is_uniform : UniformGroup G := by\n  constructor\n  simp only [UniformContinuous, uniformity_prod_eq_prod, uniformity_eq_comap_nhds_one',\n    tendsto_comap_iff, tendsto_map'_iff, prod_comap_comap_eq, Function.comp_def,\n    div_div_div_comm _ (Prod.snd (Prod.snd _)), ← nhds_prod_eq, Prod.mk_one_one]\n  exact (continuous_div'.tendsto' 1 1 (div_one 1)).comp tendsto_comap\n\n"}
{"name":"comm_topologicalAddGroup_is_uniform","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"G : Type u_1\ninst✝² : AddCommGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalAddGroup G\n⊢ UniformAddGroup G","decl":"@[to_additive]\n-- Porting note: renamed theorem to conform to naming convention\ntheorem comm_topologicalGroup_is_uniform : UniformGroup G := by\n  constructor\n  simp only [UniformContinuous, uniformity_prod_eq_prod, uniformity_eq_comap_nhds_one',\n    tendsto_comap_iff, tendsto_map'_iff, prod_comap_comap_eq, Function.comp_def,\n    div_div_div_comm _ (Prod.snd (Prod.snd _)), ← nhds_prod_eq, Prod.mk_one_one]\n  exact (continuous_div'.tendsto' 1 1 (div_one 1)).comp tendsto_comap\n\n"}
{"name":"UniformAddGroup.toUniformSpace_eq","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"G : Type u_2\nu : UniformSpace G\ninst✝¹ : AddGroup G\ninst✝ : UniformAddGroup G\n⊢ Eq (TopologicalAddGroup.toUniformSpace G) u","decl":"@[to_additive]\ntheorem UniformGroup.toUniformSpace_eq {G : Type*} [u : UniformSpace G] [Group G]\n    [UniformGroup G] : TopologicalGroup.toUniformSpace G = u := by\n  ext : 1\n  rw [uniformity_eq_comap_nhds_one' G, uniformity_eq_comap_nhds_one G]\n\n"}
{"name":"UniformGroup.toUniformSpace_eq","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"G : Type u_2\nu : UniformSpace G\ninst✝¹ : Group G\ninst✝ : UniformGroup G\n⊢ Eq (TopologicalGroup.toUniformSpace G) u","decl":"@[to_additive]\ntheorem UniformGroup.toUniformSpace_eq {G : Type*} [u : UniformSpace G] [Group G]\n    [UniformGroup G] : TopologicalGroup.toUniformSpace G = u := by\n  ext : 1\n  rw [uniformity_eq_comap_nhds_one' G, uniformity_eq_comap_nhds_one G]\n\n"}
{"name":"tendsto_sub_comap_self","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nhom : Type u_3\ninst✝⁶ : TopologicalSpace α\ninst✝⁵ : AddGroup α\ninst✝⁴ : TopologicalAddGroup α\ninst✝³ : TopologicalSpace β\ninst✝² : AddGroup β\ninst✝¹ : FunLike hom β α\ninst✝ : AddMonoidHomClass hom β α\ne : hom\nde : IsDenseInducing ⇑e\nx₀ : α\n⊢ Filter.Tendsto (fun t => HSub.hSub t.2 t.1) (Filter.comap (fun p => { fst := e p.1, snd := e p.2 }) (nhds { fst := x₀, snd := x₀ })) (nhds 0)","decl":"@[to_additive]\ntheorem tendsto_div_comap_self (de : IsDenseInducing e) (x₀ : α) :\n    Tendsto (fun t : β × β => t.2 / t.1) ((comap fun p : β × β => (e p.1, e p.2)) <| 𝓝 (x₀, x₀))\n      (𝓝 1) := by\n  have comm : ((fun x : α × α => x.2 / x.1) ∘ fun t : β × β => (e t.1, e t.2)) =\n      e ∘ fun t : β × β => t.2 / t.1 := by\n    ext t\n    change e t.2 / e t.1 = e (t.2 / t.1)\n    rw [← map_div e t.2 t.1]\n  have lim : Tendsto (fun x : α × α => x.2 / x.1) (𝓝 (x₀, x₀)) (𝓝 (e 1)) := by\n    simpa using (continuous_div'.comp (@continuous_swap α α _ _)).tendsto (x₀, x₀)\n  simpa using de.tendsto_comap_nhds_nhds lim comm\n\n"}
{"name":"tendsto_div_comap_self","module":"Mathlib.Topology.Algebra.UniformGroup.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nhom : Type u_3\ninst✝⁶ : TopologicalSpace α\ninst✝⁵ : Group α\ninst✝⁴ : TopologicalGroup α\ninst✝³ : TopologicalSpace β\ninst✝² : Group β\ninst✝¹ : FunLike hom β α\ninst✝ : MonoidHomClass hom β α\ne : hom\nde : IsDenseInducing ⇑e\nx₀ : α\n⊢ Filter.Tendsto (fun t => HDiv.hDiv t.2 t.1) (Filter.comap (fun p => { fst := e p.1, snd := e p.2 }) (nhds { fst := x₀, snd := x₀ })) (nhds 1)","decl":"@[to_additive]\ntheorem tendsto_div_comap_self (de : IsDenseInducing e) (x₀ : α) :\n    Tendsto (fun t : β × β => t.2 / t.1) ((comap fun p : β × β => (e p.1, e p.2)) <| 𝓝 (x₀, x₀))\n      (𝓝 1) := by\n  have comm : ((fun x : α × α => x.2 / x.1) ∘ fun t : β × β => (e t.1, e t.2)) =\n      e ∘ fun t : β × β => t.2 / t.1 := by\n    ext t\n    change e t.2 / e t.1 = e (t.2 / t.1)\n    rw [← map_div e t.2 t.1]\n  have lim : Tendsto (fun x : α × α => x.2 / x.1) (𝓝 (x₀, x₀)) (𝓝 (e 1)) := by\n    simpa using (continuous_div'.comp (@continuous_swap α α _ _)).tendsto (x₀, x₀)\n  simpa using de.tendsto_comap_nhds_nhds lim comm\n\n"}
