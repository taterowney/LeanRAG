{"name":"CategoryTheory.Localization.equivalence_counitIso_app","module":"Mathlib.CategoryTheory.Localization.Equivalence","initialProofState":"C‚ÇÅ : Type u_1\nC‚ÇÇ : Type u_2\nD‚ÇÅ : Type u_4\nD‚ÇÇ : Type u_5\ninst‚úù‚Å∑ : CategoryTheory.Category.{u_8, u_1} C‚ÇÅ\ninst‚úù‚Å∂ : CategoryTheory.Category.{u_9, u_2} C‚ÇÇ\ninst‚úù‚Åµ : CategoryTheory.Category.{u_7, u_4} D‚ÇÅ\ninst‚úù‚Å¥ : CategoryTheory.Category.{u_6, u_5} D‚ÇÇ\nL‚ÇÅ : CategoryTheory.Functor C‚ÇÅ D‚ÇÅ\nW‚ÇÅ : CategoryTheory.MorphismProperty C‚ÇÅ\ninst‚úù¬≥ : L‚ÇÅ.IsLocalization W‚ÇÅ\nL‚ÇÇ : CategoryTheory.Functor C‚ÇÇ D‚ÇÇ\nW‚ÇÇ : CategoryTheory.MorphismProperty C‚ÇÇ\ninst‚úù¬≤ : L‚ÇÇ.IsLocalization W‚ÇÇ\nG : CategoryTheory.Functor C‚ÇÅ D‚ÇÇ\nG' : CategoryTheory.Functor D‚ÇÅ D‚ÇÇ\ninst‚úù¬π : CategoryTheory.Localization.Lifting L‚ÇÅ W‚ÇÅ G G'\nF : CategoryTheory.Functor C‚ÇÇ D‚ÇÅ\nF' : CategoryTheory.Functor D‚ÇÇ D‚ÇÅ\ninst‚úù : CategoryTheory.Localization.Lifting L‚ÇÇ W‚ÇÇ F F'\nŒ± : CategoryTheory.Iso (G.comp F') L‚ÇÅ\nŒ≤ : CategoryTheory.Iso (F.comp G') L‚ÇÇ\nX : C‚ÇÇ\n‚ä¢ Eq ((CategoryTheory.Localization.equivalence L‚ÇÅ W‚ÇÅ L‚ÇÇ W‚ÇÇ G G' F F' Œ± Œ≤).counitIso.app (L‚ÇÇ.obj X)) (((CategoryTheory.Localization.Lifting.iso L‚ÇÇ W‚ÇÇ (F.comp G') (F'.comp G')).app X).trans (Œ≤.app X))","decl":"@[simp]\nlemma equivalence_counitIso_app (X : C‚ÇÇ) :\n    (equivalence L‚ÇÅ W‚ÇÅ L‚ÇÇ W‚ÇÇ G G' F F' Œ± Œ≤).counitIso.app (L‚ÇÇ.obj X) =\n      (Lifting.iso L‚ÇÇ W‚ÇÇ (F ‚ãô G') (F' ‚ãô G')).app X ‚â™‚â´ Œ≤.app X := by\n  ext\n  dsimp [equivalence, Equivalence.mk]\n  rw [liftNatTrans_app]\n  dsimp [Lifting.iso]\n  rw [comp_id]\n\n"}
{"name":"CategoryTheory.Localization.isEquivalence","module":"Mathlib.CategoryTheory.Localization.Equivalence","initialProofState":"C‚ÇÅ : Type u_1\nC‚ÇÇ : Type u_2\nD‚ÇÅ : Type u_4\nD‚ÇÇ : Type u_5\ninst‚úù‚Å∑ : CategoryTheory.Category.{u_8, u_1} C‚ÇÅ\ninst‚úù‚Å∂ : CategoryTheory.Category.{u_9, u_2} C‚ÇÇ\ninst‚úù‚Åµ : CategoryTheory.Category.{u_6, u_4} D‚ÇÅ\ninst‚úù‚Å¥ : CategoryTheory.Category.{u_7, u_5} D‚ÇÇ\nL‚ÇÅ : CategoryTheory.Functor C‚ÇÅ D‚ÇÅ\nW‚ÇÅ : CategoryTheory.MorphismProperty C‚ÇÅ\ninst‚úù¬≥ : L‚ÇÅ.IsLocalization W‚ÇÅ\nL‚ÇÇ : CategoryTheory.Functor C‚ÇÇ D‚ÇÇ\nW‚ÇÇ : CategoryTheory.MorphismProperty C‚ÇÇ\ninst‚úù¬≤ : L‚ÇÇ.IsLocalization W‚ÇÇ\nG : CategoryTheory.Functor C‚ÇÅ D‚ÇÇ\nG' : CategoryTheory.Functor D‚ÇÅ D‚ÇÇ\ninst‚úù¬π : CategoryTheory.Localization.Lifting L‚ÇÅ W‚ÇÅ G G'\nF : CategoryTheory.Functor C‚ÇÇ D‚ÇÅ\nF' : CategoryTheory.Functor D‚ÇÇ D‚ÇÅ\ninst‚úù : CategoryTheory.Localization.Lifting L‚ÇÇ W‚ÇÇ F F'\nŒ± : CategoryTheory.Iso (G.comp F') L‚ÇÅ\nŒ≤ : CategoryTheory.Iso (F.comp G') L‚ÇÇ\n‚ä¢ G'.IsEquivalence","decl":"include L‚ÇÅ W‚ÇÅ L‚ÇÇ W‚ÇÇ G F F' Œ± Œ≤ in\n/-- Basic constructor of an equivalence between localized categories -/\nlemma isEquivalence : G'.IsEquivalence :=\n  (equivalence L‚ÇÅ W‚ÇÅ L‚ÇÇ W‚ÇÇ G G' F F' Œ± Œ≤).isEquivalence_functor\n\n"}
{"name":"CategoryTheory.Functor.IsLocalization.of_equivalence_source","module":"Mathlib.CategoryTheory.Localization.Equivalence","initialProofState":"C‚ÇÅ : Type u_1\nC‚ÇÇ : Type u_2\nD : Type u_3\ninst‚úù¬≥ : CategoryTheory.Category.{u_6, u_1} C‚ÇÅ\ninst‚úù¬≤ : CategoryTheory.Category.{u_8, u_2} C‚ÇÇ\ninst‚úù¬π : CategoryTheory.Category.{u_7, u_3} D\nL‚ÇÅ : CategoryTheory.Functor C‚ÇÅ D\nW‚ÇÅ : CategoryTheory.MorphismProperty C‚ÇÅ\nL‚ÇÇ : CategoryTheory.Functor C‚ÇÇ D\nW‚ÇÇ : CategoryTheory.MorphismProperty C‚ÇÇ\nE : CategoryTheory.Equivalence C‚ÇÅ C‚ÇÇ\nhW‚ÇÅ : LE.le W‚ÇÅ (W‚ÇÇ.isoClosure.inverseImage E.functor)\nhW‚ÇÇ : W‚ÇÇ.IsInvertedBy L‚ÇÇ\ninst‚úù : L‚ÇÅ.IsLocalization W‚ÇÅ\niso : CategoryTheory.Iso (E.functor.comp L‚ÇÇ) L‚ÇÅ\n‚ä¢ L‚ÇÇ.IsLocalization W‚ÇÇ","decl":"/-- If `L‚ÇÅ : C‚ÇÅ ‚•§ D` is a localization functor for `W‚ÇÅ : MorphismProperty C‚ÇÅ`, then it is also\nthe case of a functor `L‚ÇÇ : C‚ÇÇ ‚•§ D` for a suitable `W‚ÇÇ : MorphismProperty C‚ÇÇ` when\nwe have an equivalence of category `E : C‚ÇÅ ‚âå C‚ÇÇ` and an isomorphism `E.functor ‚ãô L‚ÇÇ ‚âÖ L‚ÇÅ`. -/\nlemma of_equivalence_source (L‚ÇÅ : C‚ÇÅ ‚•§ D) (W‚ÇÅ : MorphismProperty C‚ÇÅ)\n    (L‚ÇÇ : C‚ÇÇ ‚•§ D) (W‚ÇÇ : MorphismProperty C‚ÇÇ)\n    (E : C‚ÇÅ ‚âå C‚ÇÇ) (hW‚ÇÅ : W‚ÇÅ ‚â§ W‚ÇÇ.isoClosure.inverseImage E.functor) (hW‚ÇÇ : W‚ÇÇ.IsInvertedBy L‚ÇÇ)\n    [L‚ÇÅ.IsLocalization W‚ÇÅ] (iso : E.functor ‚ãô L‚ÇÇ ‚âÖ L‚ÇÅ) : L‚ÇÇ.IsLocalization W‚ÇÇ := by\n  have h : W‚ÇÅ.IsInvertedBy (E.functor ‚ãô W‚ÇÇ.Q) := fun _ _ f hf => by\n    obtain ‚ü®_, _, f', hf', ‚ü®e‚ü©‚ü© := hW‚ÇÅ f hf\n    exact ((MorphismProperty.isomorphisms _).arrow_mk_iso_iff\n      (W‚ÇÇ.Q.mapArrow.mapIso e)).1 (Localization.inverts W‚ÇÇ.Q W‚ÇÇ _ hf')\n  exact\n    { inverts := hW‚ÇÇ\n      isEquivalence :=\n        Localization.isEquivalence W‚ÇÇ.Q W‚ÇÇ L‚ÇÅ W‚ÇÅ L‚ÇÇ (Construction.lift L‚ÇÇ hW‚ÇÇ)\n          (E.functor ‚ãô W‚ÇÇ.Q) (Localization.lift (E.functor ‚ãô W‚ÇÇ.Q) h L‚ÇÅ) (by\n            calc\n              L‚ÇÇ ‚ãô lift (E.functor ‚ãô W‚ÇÇ.Q) h L‚ÇÅ ‚âÖ _ := (leftUnitor _).symm\n              _ ‚âÖ _ := isoWhiskerRight E.counitIso.symm _\n              _ ‚âÖ E.inverse ‚ãô E.functor ‚ãô L‚ÇÇ ‚ãô lift (E.functor ‚ãô W‚ÇÇ.Q) h L‚ÇÅ :=\n                    Functor.associator _ _ _\n              _ ‚âÖ E.inverse ‚ãô L‚ÇÅ ‚ãô lift (E.functor ‚ãô W‚ÇÇ.Q) h L‚ÇÅ :=\n                    isoWhiskerLeft E.inverse ((Functor.associator _ _ _).symm ‚â™‚â´\n                      isoWhiskerRight iso _)\n              _ ‚âÖ E.inverse ‚ãô E.functor ‚ãô W‚ÇÇ.Q :=\n                    isoWhiskerLeft _ (Localization.fac (E.functor ‚ãô W‚ÇÇ.Q) h L‚ÇÅ)\n              _ ‚âÖ (E.inverse ‚ãô E.functor) ‚ãô W‚ÇÇ.Q := (Functor.associator _ _ _).symm\n              _ ‚âÖ ùü≠ C‚ÇÇ ‚ãô W‚ÇÇ.Q := isoWhiskerRight E.counitIso _\n              _ ‚âÖ W‚ÇÇ.Q := leftUnitor _)\n          (Functor.associator _ _ _ ‚â™‚â´ isoWhiskerLeft _ (Lifting.iso W‚ÇÇ.Q W‚ÇÇ _ _)  ‚â™‚â´ iso) }\n\n"}
{"name":"CategoryTheory.Functor.IsLocalization.of_equivalences","module":"Mathlib.CategoryTheory.Localization.Equivalence","initialProofState":"C‚ÇÅ : Type u_1\nC‚ÇÇ : Type u_2\nD‚ÇÅ : Type u_4\nD‚ÇÇ : Type u_5\ninst‚úù‚Åµ : CategoryTheory.Category.{u_6, u_1} C‚ÇÅ\ninst‚úù‚Å¥ : CategoryTheory.Category.{u_8, u_2} C‚ÇÇ\ninst‚úù¬≥ : CategoryTheory.Category.{u_7, u_4} D‚ÇÅ\ninst‚úù¬≤ : CategoryTheory.Category.{u_9, u_5} D‚ÇÇ\nL‚ÇÅ : CategoryTheory.Functor C‚ÇÅ D‚ÇÅ\nW‚ÇÅ : CategoryTheory.MorphismProperty C‚ÇÅ\ninst‚úù¬π : L‚ÇÅ.IsLocalization W‚ÇÅ\nL‚ÇÇ : CategoryTheory.Functor C‚ÇÇ D‚ÇÇ\nW‚ÇÇ : CategoryTheory.MorphismProperty C‚ÇÇ\nE : CategoryTheory.Equivalence C‚ÇÅ C‚ÇÇ\nE' : CategoryTheory.Equivalence D‚ÇÅ D‚ÇÇ\ninst‚úù : CategoryTheory.CatCommSq E.functor L‚ÇÅ L‚ÇÇ E'.functor\nhW‚ÇÅ : LE.le W‚ÇÅ (W‚ÇÇ.isoClosure.inverseImage E.functor)\nhW‚ÇÇ : W‚ÇÇ.IsInvertedBy L‚ÇÇ\n‚ä¢ L‚ÇÇ.IsLocalization W‚ÇÇ","decl":"/-- If `L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ` is a localization functor for `W‚ÇÅ : MorphismProperty C‚ÇÅ`, then if we\ntransport this functor `L‚ÇÅ` via equivalences `C‚ÇÅ ‚âå C‚ÇÇ` and `D‚ÇÅ ‚âå D‚ÇÇ` to get a functor\n`L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ`, then `L‚ÇÇ` is also a localization functor for\na suitable `W‚ÇÇ : MorphismProperty C‚ÇÇ`. -/\nlemma of_equivalences (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (W‚ÇÅ : MorphismProperty C‚ÇÅ) [L‚ÇÅ.IsLocalization W‚ÇÅ]\n    (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) (W‚ÇÇ : MorphismProperty C‚ÇÇ)\n    (E : C‚ÇÅ ‚âå C‚ÇÇ) (E' : D‚ÇÅ ‚âå D‚ÇÇ) [CatCommSq E.functor L‚ÇÅ L‚ÇÇ E'.functor]\n    (hW‚ÇÅ : W‚ÇÅ ‚â§ W‚ÇÇ.isoClosure.inverseImage E.functor) (hW‚ÇÇ : W‚ÇÇ.IsInvertedBy L‚ÇÇ) :\n    L‚ÇÇ.IsLocalization W‚ÇÇ := by\n  haveI : (E.functor ‚ãô L‚ÇÇ).IsLocalization W‚ÇÅ :=\n    of_equivalence_target L‚ÇÅ W‚ÇÅ _ E' ((CatCommSq.iso _ _ _ _).symm)\n  exact of_equivalence_source (E.functor ‚ãô L‚ÇÇ) W‚ÇÅ L‚ÇÇ W‚ÇÇ E hW‚ÇÅ hW‚ÇÇ (Iso.refl _)\n\n"}
