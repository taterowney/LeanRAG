{"name":"tendsto_tsum_of_dominated_convergence","module":"Mathlib.Analysis.Normed.Group.Tannery","initialProofState":"α : Type u_1\nβ : Type u_2\nG : Type u_3\n𝓕 : Filter α\ninst✝¹ : NormedAddCommGroup G\ninst✝ : CompleteSpace G\nf : α → β → G\ng : β → G\nbound : β → Real\nh_sum : Summable bound\nhab : ∀ (k : β), Filter.Tendsto (fun x => f x k) 𝓕 (nhds (g k))\nh_bound : Filter.Eventually (fun n => ∀ (k : β), LE.le (Norm.norm (f n k)) (bound k)) 𝓕\n⊢ Filter.Tendsto (fun x => tsum fun k => f x k) 𝓕 (nhds (tsum fun k => g k))","decl":"/-- **Tannery's theorem**: topological sums commute with termwise limits, when the norms of the\nsummands are eventually uniformly bounded by a summable function.\n\n(This is the special case of the Lebesgue dominated convergence theorem for the counting measure\non a discrete set. However, we prove it under somewhat weaker assumptions than the general\nmeasure-theoretic result, e.g. `G` is not assumed to be an `ℝ`-vector space or second countable,\nand the limit is along an arbitrary filter rather than `atTop ℕ`.)\n\nSee also:\n* `MeasureTheory.tendsto_integral_of_dominated_convergence` (for general integrals, but\n  with more assumptions on `G`)\n* `continuous_tsum` (continuity of infinite sums in a parameter)\n-/\nlemma tendsto_tsum_of_dominated_convergence {α β G : Type*} {𝓕 : Filter α}\n    [NormedAddCommGroup G] [CompleteSpace G]\n    {f : α → β → G} {g : β → G} {bound : β → ℝ} (h_sum : Summable bound)\n    (hab : ∀ k : β, Tendsto (f · k) 𝓕 (𝓝 (g k)))\n    (h_bound : ∀ᶠ n in 𝓕, ∀ k, ‖f n k‖ ≤ bound k) :\n    Tendsto (∑' k, f · k) 𝓕 (𝓝 (∑' k, g k)) := by\n  -- WLOG β is nonempty\n  rcases isEmpty_or_nonempty β\n  · simpa only [tsum_empty] using tendsto_const_nhds\n  -- WLOG 𝓕 ≠ ⊥\n  rcases 𝓕.eq_or_neBot with rfl | _\n  · simp only [tendsto_bot]\n  -- Auxiliary lemmas\n  have h_g_le (k : β) : ‖g k‖ ≤ bound k :=\n    le_of_tendsto (tendsto_norm.comp (hab k)) <| h_bound.mono (fun n h => h k)\n  have h_sumg : Summable (‖g ·‖) :=\n    h_sum.of_norm_bounded _ (fun k ↦ (norm_norm (g k)).symm ▸ h_g_le k)\n  have h_suma : ∀ᶠ n in 𝓕, Summable (‖f n ·‖) := by\n    filter_upwards [h_bound] with n h\n    exact h_sum.of_norm_bounded _ <| by simpa only [norm_norm] using h\n  -- Now main proof, by an `ε / 3` argument\n  rw [Metric.tendsto_nhds]\n  intro ε hε\n  let ⟨S, hS⟩ := h_sum\n  obtain ⟨T, hT⟩ : ∃ (T : Finset β), dist (∑ b ∈ T, bound b) S < ε / 3 := by\n    rw [HasSum, Metric.tendsto_nhds] at hS\n    classical exact Eventually.exists <| hS _ (by positivity)\n  have h1 : ∑' (k : (Tᶜ : Set β)), bound k < ε / 3 := by\n    calc _ ≤ ‖∑' (k : (Tᶜ : Set β)), bound k‖ := Real.le_norm_self _\n         _ = ‖S - ∑ b ∈ T, bound b‖          := congrArg _ ?_\n         _ < ε / 3                            := by rwa [dist_eq_norm, norm_sub_rev] at hT\n    simpa only [sum_add_tsum_compl h_sum, eq_sub_iff_add_eq'] using hS.tsum_eq\n  have h2 : Tendsto (∑ k ∈ T, f · k) 𝓕 (𝓝 (T.sum g)) := tendsto_finset_sum _ (fun i _ ↦ hab i)\n  rw [Metric.tendsto_nhds] at h2\n  filter_upwards [h2 (ε / 3) (by positivity), h_suma, h_bound] with n hn h_suma h_bound\n  rw [dist_eq_norm, ← tsum_sub h_suma.of_norm h_sumg.of_norm,\n    ← sum_add_tsum_compl (s := T) (h_suma.of_norm.sub h_sumg.of_norm),\n    (by ring : ε = ε / 3 + (ε / 3 + ε / 3))]\n  refine (norm_add_le _ _).trans_lt (add_lt_add ?_ ?_)\n  · simpa only [dist_eq_norm, Finset.sum_sub_distrib] using hn\n  · rw [tsum_sub (h_suma.subtype _).of_norm (h_sumg.subtype _).of_norm]\n    refine (norm_sub_le _ _).trans_lt (add_lt_add ?_ ?_)\n    · refine ((norm_tsum_le_tsum_norm (h_suma.subtype _)).trans ?_).trans_lt h1\n      exact tsum_le_tsum (h_bound ·) (h_suma.subtype _) (h_sum.subtype _)\n    · refine ((norm_tsum_le_tsum_norm <| h_sumg.subtype _).trans ?_).trans_lt h1\n      exact tsum_le_tsum (h_g_le ·) (h_sumg.subtype _) (h_sum.subtype _)\n"}
