{"name":"ProbabilityTheory.hasDerivAt_integral_pow_mul_exp_real","module":"Mathlib.Probability.Moments.MGFAnalytic","initialProofState":"Œ© : Type u_1\nm : MeasurableSpace Œ©\nX : Œ© ‚Üí Real\nŒº : MeasureTheory.Measure Œ©\nt : Real\nht : Membership.mem (interior (ProbabilityTheory.integrableExpSet X Œº)) t\nn : Nat\n‚ä¢ HasDerivAt (fun t => MeasureTheory.integral Œº fun x => (fun œâ => HMul.hMul (HPow.hPow (X œâ) n) (Real.exp (HMul.hMul t (X œâ)))) x) (MeasureTheory.integral Œº fun x => (fun œâ => HMul.hMul (HPow.hPow (X œâ) (HAdd.hAdd n 1)) (Real.exp (HMul.hMul t (X œâ)))) x) t","decl":"/-- For `t : ‚Ñù` with `t ‚àà interior (integrableExpSet X Œº)`, the derivative of the function\n`x ‚Ü¶ Œº[X ^ n * rexp (x * X)]` at `t` is `Œº[X ^ (n + 1) * rexp (t * X)]`. -/\nlemma hasDerivAt_integral_pow_mul_exp_real (ht : t ‚àà interior (integrableExpSet X Œº)) (n : ‚Ñï) :\n    HasDerivAt (fun t ‚Ü¶ Œº[fun œâ ‚Ü¶ X œâ ^ n * rexp (t * X œâ)])\n      Œº[fun œâ ‚Ü¶ X œâ ^ (n + 1) * rexp (t * X œâ)] t := by\n  have h_re_of_mem n t (ht' : t ‚àà interior (integrableExpSet X Œº)) :\n      (‚à´ œâ, X œâ ^ n * Complex.exp (t * X œâ) ‚àÇŒº).re = ‚à´ œâ, X œâ ^ n * rexp (t * X œâ) ‚àÇŒº := by\n    rw [‚Üê RCLike.re_eq_complex_re, ‚Üê integral_re]\n    ¬∑ norm_cast\n    ¬∑ refine integrable_pow_mul_cexp_of_re_mem_interior_integrableExpSet ?_ n\n      simpa using ht'\n  have h_re n : ‚àÄ·∂† t' : ‚Ñù in ùìù t, (‚à´ œâ, X œâ ^ n * Complex.exp (t' * X œâ) ‚àÇŒº).re\n      = ‚à´ œâ, X œâ ^ n * rexp (t' * X œâ) ‚àÇŒº := by\n    filter_upwards [isOpen_interior.eventually_mem ht] with t ht' using h_re_of_mem n t ht'\n  rw [‚Üê EventuallyEq.hasDerivAt_iff (h_re _), ‚Üê h_re_of_mem _ t ht]\n  exact (hasDerivAt_integral_pow_mul_exp (by simp [ht]) n).real_of_complex\n\n"}
{"name":"ProbabilityTheory.hasDerivAt_mgf","module":"Mathlib.Probability.Moments.MGFAnalytic","initialProofState":"Œ© : Type u_1\nm : MeasurableSpace Œ©\nX : Œ© ‚Üí Real\nŒº : MeasureTheory.Measure Œ©\nt : Real\nh : Membership.mem (interior (ProbabilityTheory.integrableExpSet X Œº)) t\n‚ä¢ HasDerivAt (ProbabilityTheory.mgf X Œº) (MeasureTheory.integral Œº fun x => (fun œâ => HMul.hMul (X œâ) (Real.exp (HMul.hMul t (X œâ)))) x) t","decl":"/-- For `t ‚àà interior (integrableExpSet X Œº)`, the derivative of `mgf X Œº` at `t` is\n`Œº[X * exp (t * X)]`. -/\nlemma hasDerivAt_mgf (h : t ‚àà interior (integrableExpSet X Œº)) :\n    HasDerivAt (mgf X Œº) (Œº[fun œâ ‚Ü¶ X œâ * exp (t * X œâ)]) t := by\n  convert hasDerivAt_integral_pow_mul_exp_real h 0\n  ¬∑ simp [mgf]\n  ¬∑ simp\n\n"}
{"name":"ProbabilityTheory.hasDerivAt_iteratedDeriv_mgf","module":"Mathlib.Probability.Moments.MGFAnalytic","initialProofState":"Œ© : Type u_1\nm : MeasurableSpace Œ©\nX : Œ© ‚Üí Real\nŒº : MeasureTheory.Measure Œ©\nt : Real\nht : Membership.mem (interior (ProbabilityTheory.integrableExpSet X Œº)) t\nn : Nat\n‚ä¢ HasDerivAt (iteratedDeriv n (ProbabilityTheory.mgf X Œº)) (MeasureTheory.integral Œº fun x => (fun œâ => HMul.hMul (HPow.hPow (X œâ) (HAdd.hAdd n 1)) (Real.exp (HMul.hMul t (X œâ)))) x) t","decl":"lemma hasDerivAt_iteratedDeriv_mgf (ht : t ‚àà interior (integrableExpSet X Œº)) (n : ‚Ñï) :\n    HasDerivAt (iteratedDeriv n (mgf X Œº)) Œº[fun œâ ‚Ü¶ X œâ ^ (n + 1) * exp (t * X œâ)] t := by\n  induction n generalizing t with\n  | zero => simp [hasDerivAt_mgf ht]\n  | succ n hn =>\n    rw [iteratedDeriv_succ]\n    have : deriv (iteratedDeriv n (mgf X Œº))\n        =·∂†[ùìù t] fun t ‚Ü¶ Œº[fun œâ ‚Ü¶ X œâ ^ (n + 1) * exp (t * X œâ)] := by\n      have h_mem : ‚àÄ·∂† y in ùìù t, y ‚àà interior (integrableExpSet X Œº) :=\n        isOpen_interior.eventually_mem ht\n      filter_upwards [h_mem] with y hy using HasDerivAt.deriv (hn hy)\n    rw [EventuallyEq.hasDerivAt_iff this]\n    exact hasDerivAt_integral_pow_mul_exp_real ht (n + 1)\n\n"}
{"name":"ProbabilityTheory.iteratedDeriv_mgf","module":"Mathlib.Probability.Moments.MGFAnalytic","initialProofState":"Œ© : Type u_1\nm : MeasurableSpace Œ©\nX : Œ© ‚Üí Real\nŒº : MeasureTheory.Measure Œ©\nt : Real\nht : Membership.mem (interior (ProbabilityTheory.integrableExpSet X Œº)) t\nn : Nat\n‚ä¢ Eq (iteratedDeriv n (ProbabilityTheory.mgf X Œº) t) (MeasureTheory.integral Œº fun x => (fun œâ => HMul.hMul (HPow.hPow (X œâ) n) (Real.exp (HMul.hMul t (X œâ)))) x)","decl":"/-- For `t ‚àà interior (integrableExpSet X Œº)`, the n-th derivative of `mgf X Œº` at `t` is\n`Œº[X ^ n * exp (t * X)]`. -/\nlemma iteratedDeriv_mgf (ht : t ‚àà interior (integrableExpSet X Œº)) (n : ‚Ñï) :\n    iteratedDeriv n (mgf X Œº) t = Œº[fun œâ ‚Ü¶ X œâ ^ n * exp (t * X œâ)] := by\n  induction n generalizing t with\n  | zero => simp [mgf]\n  | succ n hn =>\n    rw [iteratedDeriv_succ]\n    exact (hasDerivAt_iteratedDeriv_mgf ht n).deriv\n\n"}
{"name":"ProbabilityTheory.iteratedDeriv_mgf_zero","module":"Mathlib.Probability.Moments.MGFAnalytic","initialProofState":"Œ© : Type u_1\nm : MeasurableSpace Œ©\nX : Œ© ‚Üí Real\nŒº : MeasureTheory.Measure Œ©\nh : Membership.mem (interior (ProbabilityTheory.integrableExpSet X Œº)) 0\nn : Nat\n‚ä¢ Eq (iteratedDeriv n (ProbabilityTheory.mgf X Œº) 0) (MeasureTheory.integral Œº fun x => HPow.hPow X n x)","decl":"/-- The derivatives of the moment generating function at zero are the moments. -/\nlemma iteratedDeriv_mgf_zero (h : 0 ‚àà interior (integrableExpSet X Œº)) (n : ‚Ñï) :\n    iteratedDeriv n (mgf X Œº) 0 = Œº[X ^ n] := by\n  simp [iteratedDeriv_mgf h n]\n\n"}
{"name":"ProbabilityTheory.deriv_mgf","module":"Mathlib.Probability.Moments.MGFAnalytic","initialProofState":"Œ© : Type u_1\nm : MeasurableSpace Œ©\nX : Œ© ‚Üí Real\nŒº : MeasureTheory.Measure Œ©\nt : Real\nh : Membership.mem (interior (ProbabilityTheory.integrableExpSet X Œº)) t\n‚ä¢ Eq (deriv (ProbabilityTheory.mgf X Œº) t) (MeasureTheory.integral Œº fun x => (fun œâ => HMul.hMul (X œâ) (Real.exp (HMul.hMul t (X œâ)))) x)","decl":"/-- For `t ‚àà interior (integrableExpSet X Œº)`, the derivative of `mgf X Œº` at `t` is\n`Œº[X * exp (t * X)]`. -/\nlemma deriv_mgf (h : t ‚àà interior (integrableExpSet X Œº)) :\n    deriv (mgf X Œº) t = Œº[fun œâ ‚Ü¶ X œâ * exp (t * X œâ)] :=\n  (hasDerivAt_mgf h).deriv\n\n"}
{"name":"ProbabilityTheory.deriv_mgf_zero","module":"Mathlib.Probability.Moments.MGFAnalytic","initialProofState":"Œ© : Type u_1\nm : MeasurableSpace Œ©\nX : Œ© ‚Üí Real\nŒº : MeasureTheory.Measure Œ©\nh : Membership.mem (interior (ProbabilityTheory.integrableExpSet X Œº)) 0\n‚ä¢ Eq (deriv (ProbabilityTheory.mgf X Œº) 0) (MeasureTheory.integral Œº fun x => X x)","decl":"lemma deriv_mgf_zero (h : 0 ‚àà interior (integrableExpSet X Œº)) : deriv (mgf X Œº) 0 = Œº[X] := by\n  simp [deriv_mgf h]\n\n"}
{"name":"ProbabilityTheory.analyticAt_mgf","module":"Mathlib.Probability.Moments.MGFAnalytic","initialProofState":"Œ© : Type u_1\nm : MeasurableSpace Œ©\nX : Œ© ‚Üí Real\nŒº : MeasureTheory.Measure Œ©\nt : Real\nht : Membership.mem (interior (ProbabilityTheory.integrableExpSet X Œº)) t\n‚ä¢ AnalyticAt Real (ProbabilityTheory.mgf X Œº) t","decl":"/-- The moment generating function is analytic at every `t ‚àà interior (integrableExpSet X Œº)`. -/\nlemma analyticAt_mgf (ht : t ‚àà interior (integrableExpSet X Œº)) :\n    AnalyticAt ‚Ñù (mgf X Œº) t := by\n  rw [‚Üê re_complexMGF_ofReal']\n  exact (analyticAt_complexMGF (by simp [ht])).re_ofReal\n\n"}
{"name":"ProbabilityTheory.analyticOnNhd_mgf","module":"Mathlib.Probability.Moments.MGFAnalytic","initialProofState":"Œ© : Type u_1\nm : MeasurableSpace Œ©\nX : Œ© ‚Üí Real\nŒº : MeasureTheory.Measure Œ©\n‚ä¢ AnalyticOnNhd Real (ProbabilityTheory.mgf X Œº) (interior (ProbabilityTheory.integrableExpSet X Œº))","decl":"lemma analyticOnNhd_mgf : AnalyticOnNhd ‚Ñù (mgf X Œº) (interior (integrableExpSet X Œº)) :=\n  fun _ hx ‚Ü¶ analyticAt_mgf hx\n\n"}
{"name":"ProbabilityTheory.analyticOn_mgf","module":"Mathlib.Probability.Moments.MGFAnalytic","initialProofState":"Œ© : Type u_1\nm : MeasurableSpace Œ©\nX : Œ© ‚Üí Real\nŒº : MeasureTheory.Measure Œ©\n‚ä¢ AnalyticOn Real (ProbabilityTheory.mgf X Œº) (interior (ProbabilityTheory.integrableExpSet X Œº))","decl":"/-- The moment generating function is analytic on the interior of the interval on which it is\ndefined. -/\nlemma analyticOn_mgf : AnalyticOn ‚Ñù (mgf X Œº) (interior (integrableExpSet X Œº)) :=\n  analyticOnNhd_mgf.analyticOn\n\n"}
{"name":"ProbabilityTheory.hasFPowerSeriesAt_mgf","module":"Mathlib.Probability.Moments.MGFAnalytic","initialProofState":"Œ© : Type u_1\nm : MeasurableSpace Œ©\nX : Œ© ‚Üí Real\nŒº : MeasureTheory.Measure Œ©\nv : Real\nhv : Membership.mem (interior (ProbabilityTheory.integrableExpSet X Œº)) v\n‚ä¢ HasFPowerSeriesAt (ProbabilityTheory.mgf X Œº) (FormalMultilinearSeries.ofScalars Real fun n => HDiv.hDiv (MeasureTheory.integral Œº fun x => (fun œâ => HMul.hMul (HPow.hPow (X œâ) n) (Real.exp (HMul.hMul v (X œâ)))) x) ‚Üën.factorial) v","decl":"lemma hasFPowerSeriesAt_mgf (hv : v ‚àà interior (integrableExpSet X Œº)) :\n    HasFPowerSeriesAt (mgf X Œº)\n      (FormalMultilinearSeries.ofScalars ‚Ñù\n        (fun n ‚Ü¶ (Œº[fun œâ ‚Ü¶ X œâ ^ n * exp (v * X œâ)] : ‚Ñù) / n !)) v := by\n  convert (analyticAt_mgf hv).hasFPowerSeriesAt\n  rw [iteratedDeriv_mgf hv]\n\n"}
