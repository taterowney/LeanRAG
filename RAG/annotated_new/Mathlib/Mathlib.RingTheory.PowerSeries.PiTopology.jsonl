{"name":"PowerSeries.WithPiTopology.instT0Space","module":"Mathlib.RingTheory.PowerSeries.PiTopology","initialProofState":"R : Type u_1\ninst✝¹ : TopologicalSpace R\ninst✝ : T0Space R\n⊢ T0Space (PowerSeries R)","decl":"/-- Separation of the topology on `PowerSeries` -/\n@[scoped instance]\ntheorem instT0Space [T0Space R] : T0Space (PowerSeries R) :=\n  MvPowerSeries.WithPiTopology.instT0Space\n\n"}
{"name":"PowerSeries.WithPiTopology.instT2Space","module":"Mathlib.RingTheory.PowerSeries.PiTopology","initialProofState":"R : Type u_1\ninst✝¹ : TopologicalSpace R\ninst✝ : T2Space R\n⊢ T2Space (PowerSeries R)","decl":"/-- `PowerSeries` on a `T2Space` form a `T2Space` -/\n@[scoped instance]\ntheorem instT2Space [T2Space R] : T2Space (PowerSeries R) :=\n  MvPowerSeries.WithPiTopology.instT2Space\n\n"}
{"name":"PowerSeries.WithPiTopology.continuous_coeff","module":"Mathlib.RingTheory.PowerSeries.PiTopology","initialProofState":"R : Type u_1\ninst✝¹ : TopologicalSpace R\ninst✝ : Semiring R\nd : Nat\n⊢ Continuous ⇑(PowerSeries.coeff R d)","decl":"/-- Coefficients are continuous -/\ntheorem continuous_coeff [Semiring R] (d : ℕ) : Continuous (PowerSeries.coeff R d) :=\n  continuous_pi_iff.mp continuous_id (Finsupp.single () d)\n\n"}
{"name":"PowerSeries.WithPiTopology.continuous_constantCoeff","module":"Mathlib.RingTheory.PowerSeries.PiTopology","initialProofState":"R : Type u_1\ninst✝¹ : TopologicalSpace R\ninst✝ : Semiring R\n⊢ Continuous ⇑(PowerSeries.constantCoeff R)","decl":"/-- The constant coefficient is continuous -/\ntheorem continuous_constantCoeff [Semiring R] : Continuous (constantCoeff R) :=\n  coeff_zero_eq_constantCoeff (R := R) ▸ continuous_coeff R 0\n\n"}
{"name":"PowerSeries.WithPiTopology.tendsto_iff_coeff_tendsto","module":"Mathlib.RingTheory.PowerSeries.PiTopology","initialProofState":"R : Type u_1\ninst✝¹ : TopologicalSpace R\ninst✝ : Semiring R\nι : Type u_2\nf : ι → PowerSeries R\nu : Filter ι\ng : PowerSeries R\n⊢ Iff (Filter.Tendsto f u (nhds g)) (∀ (d : Nat), Filter.Tendsto (fun i => (PowerSeries.coeff R d) (f i)) u (nhds ((PowerSeries.coeff R d) g)))","decl":"/-- A family of power series converges iff it converges coefficientwise -/\ntheorem tendsto_iff_coeff_tendsto [Semiring R] {ι : Type*}\n    (f : ι → PowerSeries R) (u : Filter ι) (g : PowerSeries R) :\n    Tendsto f u (nhds g) ↔\n    ∀ d : ℕ, Tendsto (fun i => coeff R d (f i)) u (nhds (coeff R d g)) := by\n  rw [MvPowerSeries.WithPiTopology.tendsto_iff_coeff_tendsto]\n  apply (Finsupp.LinearEquiv.finsuppUnique ℕ ℕ Unit).toEquiv.forall_congr\n  intro d\n  simp only [LinearEquiv.coe_toEquiv, Finsupp.LinearEquiv.finsuppUnique_apply,\n    PUnit.default_eq_unit, coeff]\n  apply iff_of_eq\n  congr\n  · ext _; congr; ext; simp\n  · ext; simp\n\n"}
{"name":"PowerSeries.WithPiTopology.instTopologicalSemiring","module":"Mathlib.RingTheory.PowerSeries.PiTopology","initialProofState":"R : Type u_1\ninst✝² : TopologicalSpace R\ninst✝¹ : Semiring R\ninst✝ : TopologicalSemiring R\n⊢ TopologicalSemiring (PowerSeries R)","decl":"/-- The semiring topology on `PowerSeries` of a topological semiring -/\n@[scoped instance]\ntheorem instTopologicalSemiring [Semiring R] [TopologicalSemiring R] :\n    TopologicalSemiring (PowerSeries R) :=\n  MvPowerSeries.WithPiTopology.instTopologicalSemiring Unit R\n\n"}
{"name":"PowerSeries.WithPiTopology.instTopologicalRing","module":"Mathlib.RingTheory.PowerSeries.PiTopology","initialProofState":"R : Type u_1\ninst✝² : TopologicalSpace R\ninst✝¹ : Ring R\ninst✝ : TopologicalRing R\n⊢ TopologicalRing (PowerSeries R)","decl":"/-- The ring topology on `PowerSeries` of a topological ring -/\n@[scoped instance]\ntheorem instTopologicalRing [Ring R] [TopologicalRing R] :\n    TopologicalRing (PowerSeries R) :=\n  MvPowerSeries.WithPiTopology.instTopologicalRing Unit R\n\n"}
{"name":"PowerSeries.WithPiTopology.uniformContinuous_coeff","module":"Mathlib.RingTheory.PowerSeries.PiTopology","initialProofState":"R : Type u_1\ninst✝¹ : UniformSpace R\ninst✝ : Semiring R\nd : Nat\n⊢ UniformContinuous fun f => (PowerSeries.coeff R d) f","decl":"/-- Coefficients are uniformly continuous -/\ntheorem uniformContinuous_coeff [Semiring R] (d : ℕ) :\n    UniformContinuous fun f : PowerSeries R ↦ coeff R d f :=\n  uniformContinuous_pi.mp uniformContinuous_id (Finsupp.single () d)\n\n"}
{"name":"PowerSeries.WithPiTopology.instCompleteSpace","module":"Mathlib.RingTheory.PowerSeries.PiTopology","initialProofState":"R : Type u_1\ninst✝¹ : UniformSpace R\ninst✝ : CompleteSpace R\n⊢ CompleteSpace (PowerSeries R)","decl":"/-- Completeness of the uniform structure on `PowerSeries` -/\n@[scoped instance]\ntheorem instCompleteSpace [CompleteSpace R] :\n    CompleteSpace (PowerSeries R) :=\n  MvPowerSeries.WithPiTopology.instCompleteSpace\n\n"}
{"name":"PowerSeries.WithPiTopology.instUniformAddGroup","module":"Mathlib.RingTheory.PowerSeries.PiTopology","initialProofState":"R : Type u_1\ninst✝² : UniformSpace R\ninst✝¹ : AddGroup R\ninst✝ : UniformAddGroup R\n⊢ UniformAddGroup (PowerSeries R)","decl":"/-- The `UniformAddGroup` structure on `PowerSeries` of a `UniformAddGroup` -/\n@[scoped instance]\ntheorem instUniformAddGroup [AddGroup R] [UniformAddGroup R] :\n    UniformAddGroup (PowerSeries R) :=\n  MvPowerSeries.WithPiTopology.instUniformAddGroup\n\n"}
{"name":"PowerSeries.WithPiTopology.continuous_C","module":"Mathlib.RingTheory.PowerSeries.PiTopology","initialProofState":"R : Type u_1\ninst✝¹ : TopologicalSpace R\ninst✝ : Semiring R\n⊢ Continuous ⇑(PowerSeries.C R)","decl":"theorem continuous_C [Semiring R] : Continuous (C R) :=\n  MvPowerSeries.WithPiTopology.continuous_C\n\n"}
{"name":"PowerSeries.WithPiTopology.tendsto_pow_zero_of_constantCoeff_nilpotent","module":"Mathlib.RingTheory.PowerSeries.PiTopology","initialProofState":"R : Type u_1\ninst✝¹ : TopologicalSpace R\ninst✝ : CommSemiring R\nf : PowerSeries R\nhf : IsNilpotent ((PowerSeries.constantCoeff R) f)\n⊢ Filter.Tendsto (fun n => HPow.hPow f n) Filter.atTop (nhds 0)","decl":"theorem tendsto_pow_zero_of_constantCoeff_nilpotent [CommSemiring R]\n    {f : PowerSeries R} (hf : IsNilpotent (constantCoeff R f)) :\n    Tendsto (fun n : ℕ => f ^ n) atTop (nhds 0) :=\n  MvPowerSeries.WithPiTopology.tendsto_pow_zero_of_constantCoeff_nilpotent hf\n\n"}
{"name":"PowerSeries.WithPiTopology.tendsto_pow_zero_of_constantCoeff_zero","module":"Mathlib.RingTheory.PowerSeries.PiTopology","initialProofState":"R : Type u_1\ninst✝¹ : TopologicalSpace R\ninst✝ : CommSemiring R\nf : PowerSeries R\nhf : Eq ((PowerSeries.constantCoeff R) f) 0\n⊢ Filter.Tendsto (fun n => HPow.hPow f n) Filter.atTop (nhds 0)","decl":"theorem tendsto_pow_zero_of_constantCoeff_zero [CommSemiring R]\n    {f : PowerSeries R} (hf : constantCoeff R f = 0) :\n    Tendsto (fun n : ℕ => f ^ n) atTop (nhds 0) :=\n  MvPowerSeries.WithPiTopology.tendsto_pow_zero_of_constantCoeff_zero hf\n\n"}
{"name":"PowerSeries.WithPiTopology.tendsto_pow_zero_of_constantCoeff_nilpotent_iff","module":"Mathlib.RingTheory.PowerSeries.PiTopology","initialProofState":"R : Type u_1\ninst✝² : TopologicalSpace R\ninst✝¹ : CommRing R\ninst✝ : DiscreteTopology R\nf : PowerSeries R\n⊢ Iff (Filter.Tendsto (fun n => HPow.hPow f n) Filter.atTop (nhds 0)) (IsNilpotent ((PowerSeries.constantCoeff R) f))","decl":"/-- The powers of a `PowerSeries` converge to 0 iff its constant coefficient is nilpotent.\nN. Bourbaki, *Algebra II*, [bourbaki1981] (chap. 4, §4, n°2, corollaire de la prop. 3) -/\ntheorem tendsto_pow_zero_of_constantCoeff_nilpotent_iff\n    [CommRing R] [DiscreteTopology R] (f : PowerSeries R) :\n    Tendsto (fun n : ℕ => f ^ n) atTop (nhds 0) ↔\n      IsNilpotent (constantCoeff R f) :=\n  MvPowerSeries.WithPiTopology.tendsto_pow_of_constantCoeff_nilpotent_iff f\n\n"}
{"name":"PowerSeries.hasSum_of_monomials_self","module":"Mathlib.RingTheory.PowerSeries.PiTopology","initialProofState":"R : Type u_1\ninst✝¹ : Semiring R\ninst✝ : TopologicalSpace R\nf : PowerSeries R\n⊢ HasSum (fun d => (PowerSeries.monomial R d) ((PowerSeries.coeff R d) f)) f","decl":"/-- A power series is the sum (in the sense of summable families) of its monomials -/\ntheorem hasSum_of_monomials_self (f : PowerSeries R) :\n    HasSum (fun d : ℕ => monomial R d (coeff R d f)) f := by\n  rw [← (Finsupp.LinearEquiv.finsuppUnique ℕ ℕ Unit).toEquiv.hasSum_iff]\n  convert MvPowerSeries.WithPiTopology.hasSum_of_monomials_self f\n  simp only [LinearEquiv.coe_toEquiv, comp_apply, monomial, coeff,\n    Finsupp.LinearEquiv.finsuppUnique_apply, PUnit.default_eq_unit]\n  congr\n  all_goals { ext; simp }\n\n"}
{"name":"PowerSeries.as_tsum","module":"Mathlib.RingTheory.PowerSeries.PiTopology","initialProofState":"R : Type u_1\ninst✝² : Semiring R\ninst✝¹ : TopologicalSpace R\ninst✝ : T2Space R\nf : PowerSeries R\n⊢ Eq f (tsum fun d => (PowerSeries.monomial R d) ((PowerSeries.coeff R d) f))","decl":"/-- If the coefficient space is T2, then the power series is `tsum` of its monomials -/\ntheorem as_tsum [T2Space R] (f : PowerSeries R) :\n    f = tsum fun d : ℕ => monomial R d (coeff R d f) :=\n  (HasSum.tsum_eq (hasSum_of_monomials_self f)).symm\n\n"}
