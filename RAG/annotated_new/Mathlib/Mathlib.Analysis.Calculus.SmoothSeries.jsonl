{"name":"summable_of_summable_hasFDerivAt_of_isPreconnected","module":"Mathlib.Analysis.Calculus.SmoothSeries","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : IsRCLikeNormedField 𝕜\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : CompleteSpace F\nu : α → Real\ninst✝ : NormedSpace 𝕜 F\nf : α → E → F\nf' : α → E → ContinuousLinearMap (RingHom.id 𝕜) E F\ns : Set E\nx₀ x : E\nhu : Summable u\nhs : IsOpen s\nh's : IsPreconnected s\nhf : ∀ (n : α) (x : E), Membership.mem s x → HasFDerivAt (f n) (f' n x) x\nhf' : ∀ (n : α) (x : E), Membership.mem s x → LE.le (Norm.norm (f' n x)) (u n)\nhx₀ : Membership.mem s x₀\nhf0 : Summable fun x => f x x₀\nhx : Membership.mem s x\n⊢ Summable fun n => f n x","decl":"/-- Consider a series of functions `∑' n, f n x` on a preconnected open set. If the series converges\nat a point, and all functions in the series are differentiable with a summable bound on the\nderivatives, then the series converges everywhere on the set. -/\ntheorem summable_of_summable_hasFDerivAt_of_isPreconnected (hu : Summable u) (hs : IsOpen s)\n    (h's : IsPreconnected s) (hf : ∀ n x, x ∈ s → HasFDerivAt (f n) (f' n x) x)\n    (hf' : ∀ n x, x ∈ s → ‖f' n x‖ ≤ u n) (hx₀ : x₀ ∈ s) (hf0 : Summable (f · x₀))\n    (hx : x ∈ s) : Summable fun n => f n x := by\n  haveI := Classical.decEq α\n  rw [summable_iff_cauchySeq_finset] at hf0 ⊢\n  have A : UniformCauchySeqOn (fun t : Finset α => fun x => ∑ i ∈ t, f' i x) atTop s :=\n    (tendstoUniformlyOn_tsum hu hf').uniformCauchySeqOn\n  -- Porting note: Lean 4 failed to find `f` by unification\n  refine cauchy_map_of_uniformCauchySeqOn_fderiv (f := fun t x ↦ ∑ i ∈ t, f i x)\n    hs h's A (fun t y hy => ?_) hx₀ hx hf0\n  exact HasFDerivAt.sum fun i _ => hf i y hy\n\n"}
{"name":"summable_of_summable_hasDerivAt_of_isPreconnected","module":"Mathlib.Analysis.Calculus.SmoothSeries","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nF : Type u_5\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : IsRCLikeNormedField 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : CompleteSpace F\nu : α → Real\ninst✝ : NormedSpace 𝕜 F\ng g' : α → 𝕜 → F\nt : Set 𝕜\ny₀ y : 𝕜\nhu : Summable u\nht : IsOpen t\nh't : IsPreconnected t\nhg : ∀ (n : α) (y : 𝕜), Membership.mem t y → HasDerivAt (g n) (g' n y) y\nhg' : ∀ (n : α) (y : 𝕜), Membership.mem t y → LE.le (Norm.norm (g' n y)) (u n)\nhy₀ : Membership.mem t y₀\nhg0 : Summable fun x => g x y₀\nhy : Membership.mem t y\n⊢ Summable fun n => g n y","decl":"/-- Consider a series of functions `∑' n, f n x` on a preconnected open set. If the series converges\nat a point, and all functions in the series are differentiable with a summable bound on the\nderivatives, then the series converges everywhere on the set. -/\ntheorem summable_of_summable_hasDerivAt_of_isPreconnected (hu : Summable u) (ht : IsOpen t)\n    (h't : IsPreconnected t) (hg : ∀ n y, y ∈ t → HasDerivAt (g n) (g' n y) y)\n    (hg' : ∀ n y, y ∈ t → ‖g' n y‖ ≤ u n) (hy₀ : y₀ ∈ t) (hg0 : Summable (g · y₀))\n    (hy : y ∈ t) : Summable fun n => g n y := by\n  simp_rw [hasDerivAt_iff_hasFDerivAt] at hg\n  refine summable_of_summable_hasFDerivAt_of_isPreconnected hu ht h't hg ?_ hy₀ hg0 hy\n  simpa? says simpa only [ContinuousLinearMap.norm_smulRight_apply, norm_one, one_mul]\n\n"}
{"name":"hasFDerivAt_tsum_of_isPreconnected","module":"Mathlib.Analysis.Calculus.SmoothSeries","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : IsRCLikeNormedField 𝕜\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : CompleteSpace F\nu : α → Real\ninst✝ : NormedSpace 𝕜 F\nf : α → E → F\nf' : α → E → ContinuousLinearMap (RingHom.id 𝕜) E F\ns : Set E\nx₀ x : E\nhu : Summable u\nhs : IsOpen s\nh's : IsPreconnected s\nhf : ∀ (n : α) (x : E), Membership.mem s x → HasFDerivAt (f n) (f' n x) x\nhf' : ∀ (n : α) (x : E), Membership.mem s x → LE.le (Norm.norm (f' n x)) (u n)\nhx₀ : Membership.mem s x₀\nhf0 : Summable fun n => f n x₀\nhx : Membership.mem s x\n⊢ HasFDerivAt (fun y => tsum fun n => f n y) (tsum fun n => f' n x) x","decl":"/-- Consider a series of functions `∑' n, f n x` on a preconnected open set. If the series converges\nat a point, and all functions in the series are differentiable with a summable bound on the\nderivatives, then the series is differentiable on the set and its derivative is the sum of the\nderivatives. -/\ntheorem hasFDerivAt_tsum_of_isPreconnected (hu : Summable u) (hs : IsOpen s)\n    (h's : IsPreconnected s) (hf : ∀ n x, x ∈ s → HasFDerivAt (f n) (f' n x) x)\n    (hf' : ∀ n x, x ∈ s → ‖f' n x‖ ≤ u n) (hx₀ : x₀ ∈ s) (hf0 : Summable fun n => f n x₀)\n    (hx : x ∈ s) : HasFDerivAt (fun y => ∑' n, f n y) (∑' n, f' n x) x := by\n  classical\n    have A :\n      ∀ x : E, x ∈ s → Tendsto (fun t : Finset α => ∑ n ∈ t, f n x) atTop (𝓝 (∑' n, f n x)) := by\n      intro y hy\n      apply Summable.hasSum\n      exact summable_of_summable_hasFDerivAt_of_isPreconnected hu hs h's hf hf' hx₀ hf0 hy\n    refine hasFDerivAt_of_tendstoUniformlyOn hs (tendstoUniformlyOn_tsum hu hf')\n      (fun t y hy => ?_) A hx\n    exact HasFDerivAt.sum fun n _ => hf n y hy\n\n"}
{"name":"hasDerivAt_tsum_of_isPreconnected","module":"Mathlib.Analysis.Calculus.SmoothSeries","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nF : Type u_5\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : IsRCLikeNormedField 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : CompleteSpace F\nu : α → Real\ninst✝ : NormedSpace 𝕜 F\ng g' : α → 𝕜 → F\nt : Set 𝕜\ny₀ y : 𝕜\nhu : Summable u\nht : IsOpen t\nh't : IsPreconnected t\nhg : ∀ (n : α) (y : 𝕜), Membership.mem t y → HasDerivAt (g n) (g' n y) y\nhg' : ∀ (n : α) (y : 𝕜), Membership.mem t y → LE.le (Norm.norm (g' n y)) (u n)\nhy₀ : Membership.mem t y₀\nhg0 : Summable fun n => g n y₀\nhy : Membership.mem t y\n⊢ HasDerivAt (fun z => tsum fun n => g n z) (tsum fun n => g' n y) y","decl":"/-- Consider a series of functions `∑' n, f n x` on a preconnected open set. If the series converges\nat a point, and all functions in the series are differentiable with a summable bound on the\nderivatives, then the series is differentiable on the set and its derivative is the sum of the\nderivatives. -/\ntheorem hasDerivAt_tsum_of_isPreconnected (hu : Summable u) (ht : IsOpen t)\n    (h't : IsPreconnected t) (hg : ∀ n y, y ∈ t → HasDerivAt (g n) (g' n y) y)\n    (hg' : ∀ n y, y ∈ t → ‖g' n y‖ ≤ u n) (hy₀ : y₀ ∈ t) (hg0 : Summable fun n => g n y₀)\n    (hy : y ∈ t) : HasDerivAt (fun z => ∑' n, g n z) (∑' n, g' n y) y := by\n  simp_rw [hasDerivAt_iff_hasFDerivAt] at hg ⊢\n  convert hasFDerivAt_tsum_of_isPreconnected hu ht h't hg ?_ hy₀ hg0 hy\n  · exact (ContinuousLinearMap.smulRightL 𝕜 𝕜 F 1).map_tsum <|\n      .of_norm_bounded u hu fun n ↦ hg' n y hy\n  · simpa? says simpa only [ContinuousLinearMap.norm_smulRight_apply, norm_one, one_mul]\n\n"}
{"name":"summable_of_summable_hasFDerivAt","module":"Mathlib.Analysis.Calculus.SmoothSeries","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : IsRCLikeNormedField 𝕜\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : CompleteSpace F\nu : α → Real\ninst✝ : NormedSpace 𝕜 F\nf : α → E → F\nf' : α → E → ContinuousLinearMap (RingHom.id 𝕜) E F\nx₀ : E\nhu : Summable u\nhf : ∀ (n : α) (x : E), HasFDerivAt (f n) (f' n x) x\nhf' : ∀ (n : α) (x : E), LE.le (Norm.norm (f' n x)) (u n)\nhf0 : Summable fun n => f n x₀\nx : E\n⊢ Summable fun n => f n x","decl":"/-- Consider a series of functions `∑' n, f n x`. If the series converges at a\npoint, and all functions in the series are differentiable with a summable bound on the derivatives,\nthen the series converges everywhere. -/\ntheorem summable_of_summable_hasFDerivAt (hu : Summable u)\n    (hf : ∀ n x, HasFDerivAt (f n) (f' n x) x) (hf' : ∀ n x, ‖f' n x‖ ≤ u n)\n    (hf0 : Summable fun n => f n x₀) (x : E) : Summable fun n => f n x := by\n  letI : RCLike 𝕜 := IsRCLikeNormedField.rclike 𝕜\n  let _ : NormedSpace ℝ E := NormedSpace.restrictScalars ℝ 𝕜 _\n  exact summable_of_summable_hasFDerivAt_of_isPreconnected hu isOpen_univ isPreconnected_univ\n    (fun n x _ => hf n x) (fun n x _ => hf' n x) (mem_univ _) hf0 (mem_univ _)\n\n"}
{"name":"summable_of_summable_hasDerivAt","module":"Mathlib.Analysis.Calculus.SmoothSeries","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nF : Type u_5\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : IsRCLikeNormedField 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : CompleteSpace F\nu : α → Real\ninst✝ : NormedSpace 𝕜 F\ng g' : α → 𝕜 → F\ny₀ : 𝕜\nhu : Summable u\nhg : ∀ (n : α) (y : 𝕜), HasDerivAt (g n) (g' n y) y\nhg' : ∀ (n : α) (y : 𝕜), LE.le (Norm.norm (g' n y)) (u n)\nhg0 : Summable fun n => g n y₀\ny : 𝕜\n⊢ Summable fun n => g n y","decl":"/-- Consider a series of functions `∑' n, f n x`. If the series converges at a\npoint, and all functions in the series are differentiable with a summable bound on the derivatives,\nthen the series converges everywhere. -/\ntheorem summable_of_summable_hasDerivAt (hu : Summable u)\n    (hg : ∀ n y, HasDerivAt (g n) (g' n y) y) (hg' : ∀ n y, ‖g' n y‖ ≤ u n)\n    (hg0 : Summable fun n => g n y₀) (y : 𝕜) : Summable fun n => g n y := by\n  exact summable_of_summable_hasDerivAt_of_isPreconnected hu isOpen_univ isPreconnected_univ\n    (fun n x _ => hg n x) (fun n x _ => hg' n x) (mem_univ _) hg0 (mem_univ _)\n\n"}
{"name":"hasFDerivAt_tsum","module":"Mathlib.Analysis.Calculus.SmoothSeries","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : IsRCLikeNormedField 𝕜\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : CompleteSpace F\nu : α → Real\ninst✝ : NormedSpace 𝕜 F\nf : α → E → F\nf' : α → E → ContinuousLinearMap (RingHom.id 𝕜) E F\nx₀ : E\nhu : Summable u\nhf : ∀ (n : α) (x : E), HasFDerivAt (f n) (f' n x) x\nhf' : ∀ (n : α) (x : E), LE.le (Norm.norm (f' n x)) (u n)\nhf0 : Summable fun n => f n x₀\nx : E\n⊢ HasFDerivAt (fun y => tsum fun n => f n y) (tsum fun n => f' n x) x","decl":"/-- Consider a series of functions `∑' n, f n x`. If the series converges at a\npoint, and all functions in the series are differentiable with a summable bound on the derivatives,\nthen the series is differentiable and its derivative is the sum of the derivatives. -/\ntheorem hasFDerivAt_tsum (hu : Summable u) (hf : ∀ n x, HasFDerivAt (f n) (f' n x) x)\n    (hf' : ∀ n x, ‖f' n x‖ ≤ u n) (hf0 : Summable fun n => f n x₀) (x : E) :\n    HasFDerivAt (fun y => ∑' n, f n y) (∑' n, f' n x) x := by\n  letI : RCLike 𝕜 := IsRCLikeNormedField.rclike 𝕜\n  let A : NormedSpace ℝ E := NormedSpace.restrictScalars ℝ 𝕜 _\n  exact hasFDerivAt_tsum_of_isPreconnected hu isOpen_univ isPreconnected_univ\n    (fun n x _ => hf n x) (fun n x _ => hf' n x) (mem_univ _) hf0 (mem_univ _)\n\n"}
{"name":"hasDerivAt_tsum","module":"Mathlib.Analysis.Calculus.SmoothSeries","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nF : Type u_5\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : IsRCLikeNormedField 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : CompleteSpace F\nu : α → Real\ninst✝ : NormedSpace 𝕜 F\ng g' : α → 𝕜 → F\ny₀ : 𝕜\nhu : Summable u\nhg : ∀ (n : α) (y : 𝕜), HasDerivAt (g n) (g' n y) y\nhg' : ∀ (n : α) (y : 𝕜), LE.le (Norm.norm (g' n y)) (u n)\nhg0 : Summable fun n => g n y₀\ny : 𝕜\n⊢ HasDerivAt (fun z => tsum fun n => g n z) (tsum fun n => g' n y) y","decl":"/-- Consider a series of functions `∑' n, f n x`. If the series converges at a\npoint, and all functions in the series are differentiable with a summable bound on the derivatives,\nthen the series is differentiable and its derivative is the sum of the derivatives. -/\ntheorem hasDerivAt_tsum (hu : Summable u) (hg : ∀ n y, HasDerivAt (g n) (g' n y) y)\n    (hg' : ∀ n y, ‖g' n y‖ ≤ u n) (hg0 : Summable fun n => g n y₀) (y : 𝕜) :\n    HasDerivAt (fun z => ∑' n, g n z) (∑' n, g' n y) y := by\n  exact hasDerivAt_tsum_of_isPreconnected hu isOpen_univ isPreconnected_univ\n    (fun n y _ => hg n y) (fun n y _ => hg' n y) (mem_univ _) hg0 (mem_univ _)\n\n"}
{"name":"differentiable_tsum","module":"Mathlib.Analysis.Calculus.SmoothSeries","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : IsRCLikeNormedField 𝕜\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : CompleteSpace F\nu : α → Real\ninst✝ : NormedSpace 𝕜 F\nf : α → E → F\nf' : α → E → ContinuousLinearMap (RingHom.id 𝕜) E F\nhu : Summable u\nhf : ∀ (n : α) (x : E), HasFDerivAt (f n) (f' n x) x\nhf' : ∀ (n : α) (x : E), LE.le (Norm.norm (f' n x)) (u n)\n⊢ Differentiable 𝕜 fun y => tsum fun n => f n y","decl":"/-- Consider a series of functions `∑' n, f n x`. If all functions in the series are differentiable\nwith a summable bound on the derivatives, then the series is differentiable.\nNote that our assumptions do not ensure the pointwise convergence, but if there is no pointwise\nconvergence then the series is zero everywhere so the result still holds. -/\ntheorem differentiable_tsum (hu : Summable u) (hf : ∀ n x, HasFDerivAt (f n) (f' n x) x)\n    (hf' : ∀ n x, ‖f' n x‖ ≤ u n) : Differentiable 𝕜 fun y => ∑' n, f n y := by\n  by_cases h : ∃ x₀, Summable fun n => f n x₀\n  · rcases h with ⟨x₀, hf0⟩\n    intro x\n    exact (hasFDerivAt_tsum hu hf hf' hf0 x).differentiableAt\n  · push_neg at h\n    have : (fun x => ∑' n, f n x) = 0 := by ext1 x; exact tsum_eq_zero_of_not_summable (h x)\n    rw [this]\n    exact differentiable_const 0\n\n"}
{"name":"differentiable_tsum'","module":"Mathlib.Analysis.Calculus.SmoothSeries","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nF : Type u_5\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : IsRCLikeNormedField 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : CompleteSpace F\nu : α → Real\ninst✝ : NormedSpace 𝕜 F\ng g' : α → 𝕜 → F\nhu : Summable u\nhg : ∀ (n : α) (y : 𝕜), HasDerivAt (g n) (g' n y) y\nhg' : ∀ (n : α) (y : 𝕜), LE.le (Norm.norm (g' n y)) (u n)\n⊢ Differentiable 𝕜 fun z => tsum fun n => g n z","decl":"/-- Consider a series of functions `∑' n, f n x`. If all functions in the series are differentiable\nwith a summable bound on the derivatives, then the series is differentiable.\nNote that our assumptions do not ensure the pointwise convergence, but if there is no pointwise\nconvergence then the series is zero everywhere so the result still holds. -/\ntheorem differentiable_tsum' (hu : Summable u) (hg : ∀ n y, HasDerivAt (g n) (g' n y) y)\n    (hg' : ∀ n y, ‖g' n y‖ ≤ u n) : Differentiable 𝕜 fun z => ∑' n, g n z := by\n  simp_rw [hasDerivAt_iff_hasFDerivAt] at hg\n  refine differentiable_tsum hu hg ?_\n  simpa? says simpa only [ContinuousLinearMap.norm_smulRight_apply, norm_one, one_mul]\n\n"}
{"name":"fderiv_tsum_apply","module":"Mathlib.Analysis.Calculus.SmoothSeries","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : IsRCLikeNormedField 𝕜\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : CompleteSpace F\nu : α → Real\ninst✝ : NormedSpace 𝕜 F\nf : α → E → F\nx₀ : E\nhu : Summable u\nhf : ∀ (n : α), Differentiable 𝕜 (f n)\nhf' : ∀ (n : α) (x : E), LE.le (Norm.norm (fderiv 𝕜 (f n) x)) (u n)\nhf0 : Summable fun n => f n x₀\nx : E\n⊢ Eq (fderiv 𝕜 (fun y => tsum fun n => f n y) x) (tsum fun n => fderiv 𝕜 (f n) x)","decl":"theorem fderiv_tsum_apply (hu : Summable u) (hf : ∀ n, Differentiable 𝕜 (f n))\n    (hf' : ∀ n x, ‖fderiv 𝕜 (f n) x‖ ≤ u n) (hf0 : Summable fun n => f n x₀) (x : E) :\n    fderiv 𝕜 (fun y => ∑' n, f n y) x = ∑' n, fderiv 𝕜 (f n) x :=\n  (hasFDerivAt_tsum hu (fun n x => (hf n x).hasFDerivAt) hf' hf0 _).fderiv\n\n"}
{"name":"deriv_tsum_apply","module":"Mathlib.Analysis.Calculus.SmoothSeries","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nF : Type u_5\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : IsRCLikeNormedField 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : CompleteSpace F\nu : α → Real\ninst✝ : NormedSpace 𝕜 F\ng : α → 𝕜 → F\ny₀ : 𝕜\nhu : Summable u\nhg : ∀ (n : α), Differentiable 𝕜 (g n)\nhg' : ∀ (n : α) (y : 𝕜), LE.le (Norm.norm (deriv (g n) y)) (u n)\nhg0 : Summable fun n => g n y₀\ny : 𝕜\n⊢ Eq (deriv (fun z => tsum fun n => g n z) y) (tsum fun n => deriv (g n) y)","decl":"theorem deriv_tsum_apply (hu : Summable u) (hg : ∀ n, Differentiable 𝕜 (g n))\n    (hg' : ∀ n y, ‖deriv (g n) y‖ ≤ u n) (hg0 : Summable fun n => g n y₀) (y : 𝕜) :\n    deriv (fun z => ∑' n, g n z) y = ∑' n, deriv (g n) y :=\n  (hasDerivAt_tsum hu (fun n y => (hg n y).hasDerivAt) hg' hg0 _).deriv\n\n"}
{"name":"fderiv_tsum","module":"Mathlib.Analysis.Calculus.SmoothSeries","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : IsRCLikeNormedField 𝕜\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : CompleteSpace F\nu : α → Real\ninst✝ : NormedSpace 𝕜 F\nf : α → E → F\nx₀ : E\nhu : Summable u\nhf : ∀ (n : α), Differentiable 𝕜 (f n)\nhf' : ∀ (n : α) (x : E), LE.le (Norm.norm (fderiv 𝕜 (f n) x)) (u n)\nhf0 : Summable fun n => f n x₀\n⊢ Eq (fderiv 𝕜 fun y => tsum fun n => f n y) fun x => tsum fun n => fderiv 𝕜 (f n) x","decl":"theorem fderiv_tsum (hu : Summable u) (hf : ∀ n, Differentiable 𝕜 (f n))\n    (hf' : ∀ n x, ‖fderiv 𝕜 (f n) x‖ ≤ u n) (hf0 : Summable fun n => f n x₀) :\n    (fderiv 𝕜 fun y => ∑' n, f n y) = fun x => ∑' n, fderiv 𝕜 (f n) x := by\n  ext1 x\n  exact fderiv_tsum_apply hu hf hf' hf0 x\n\n"}
{"name":"deriv_tsum","module":"Mathlib.Analysis.Calculus.SmoothSeries","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nF : Type u_5\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : IsRCLikeNormedField 𝕜\ninst✝² : NormedAddCommGroup F\ninst✝¹ : CompleteSpace F\nu : α → Real\ninst✝ : NormedSpace 𝕜 F\ng : α → 𝕜 → F\ny₀ : 𝕜\nhu : Summable u\nhg : ∀ (n : α), Differentiable 𝕜 (g n)\nhg' : ∀ (n : α) (y : 𝕜), LE.le (Norm.norm (deriv (g n) y)) (u n)\nhg0 : Summable fun n => g n y₀\n⊢ Eq (deriv fun y => tsum fun n => g n y) fun y => tsum fun n => deriv (g n) y","decl":"theorem deriv_tsum (hu : Summable u) (hg : ∀ n, Differentiable 𝕜 (g n))\n    (hg' : ∀ n y, ‖deriv (g n) y‖ ≤ u n) (hg0 : Summable fun n => g n y₀) :\n    (deriv fun y => ∑' n, g n y) = fun y => ∑' n, deriv (g n) y := by\n  ext1 x\n  exact deriv_tsum_apply hu hg hg' hg0 x\n\n"}
{"name":"iteratedFDeriv_tsum","module":"Mathlib.Analysis.Calculus.SmoothSeries","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : IsRCLikeNormedField 𝕜\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : CompleteSpace F\ninst✝ : NormedSpace 𝕜 F\nf : α → E → F\nv : Nat → α → Real\nN : ENat\nhf : ∀ (i : α), ContDiff 𝕜 (↑N) (f i)\nhv : ∀ (k : Nat), LE.le (↑k) N → Summable (v k)\nh'f : ∀ (k : Nat) (i : α) (x : E), LE.le (↑k) N → LE.le (Norm.norm (iteratedFDeriv 𝕜 k (f i) x)) (v k i)\nk : Nat\nhk : LE.le (↑k) N\n⊢ Eq (iteratedFDeriv 𝕜 k fun y => tsum fun n => f n y) fun x => tsum fun n => iteratedFDeriv 𝕜 k (f n) x","decl":"/-- Consider a series of `C^n` functions, with summable uniform bounds on the successive\nderivatives. Then the iterated derivative of the sum is the sum of the iterated derivative. -/\ntheorem iteratedFDeriv_tsum (hf : ∀ i, ContDiff 𝕜 N (f i))\n    (hv : ∀ k : ℕ, (k : ℕ∞) ≤ N → Summable (v k))\n    (h'f : ∀ (k : ℕ) (i : α) (x : E), (k : ℕ∞) ≤ N → ‖iteratedFDeriv 𝕜 k (f i) x‖ ≤ v k i) {k : ℕ}\n    (hk : (k : ℕ∞) ≤ N) :\n    (iteratedFDeriv 𝕜 k fun y => ∑' n, f n y) = fun x => ∑' n, iteratedFDeriv 𝕜 k (f n) x := by\n  induction' k with k IH\n  · ext1 x\n    simp_rw [iteratedFDeriv_zero_eq_comp]\n    exact (continuousMultilinearCurryFin0 𝕜 E F).symm.toContinuousLinearEquiv.map_tsum\n  · have h'k : (k : ℕ∞) < N := lt_of_lt_of_le (WithTop.coe_lt_coe.2 (Nat.lt_succ_self _)) hk\n    have A : Summable fun n => iteratedFDeriv 𝕜 k (f n) 0 :=\n      .of_norm_bounded (v k) (hv k h'k.le) fun n => h'f k n 0 h'k.le\n    simp_rw [iteratedFDeriv_succ_eq_comp_left, IH h'k.le]\n    rw [fderiv_tsum (hv _ hk) (fun n => (hf n).differentiable_iteratedFDeriv\n        (mod_cast h'k)) _ A]\n    · ext1 x\n      exact (continuousMultilinearCurryLeftEquiv 𝕜\n        (fun _ : Fin (k + 1) => E) F).symm.toContinuousLinearEquiv.map_tsum\n    · intro n x\n      simpa only [iteratedFDeriv_succ_eq_comp_left, LinearIsometryEquiv.norm_map, comp_apply]\n        using h'f k.succ n x hk\n\n"}
{"name":"iteratedFDeriv_tsum_apply","module":"Mathlib.Analysis.Calculus.SmoothSeries","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : IsRCLikeNormedField 𝕜\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : CompleteSpace F\ninst✝ : NormedSpace 𝕜 F\nf : α → E → F\nv : Nat → α → Real\nN : ENat\nhf : ∀ (i : α), ContDiff 𝕜 (↑N) (f i)\nhv : ∀ (k : Nat), LE.le (↑k) N → Summable (v k)\nh'f : ∀ (k : Nat) (i : α) (x : E), LE.le (↑k) N → LE.le (Norm.norm (iteratedFDeriv 𝕜 k (f i) x)) (v k i)\nk : Nat\nhk : LE.le (↑k) N\nx : E\n⊢ Eq (iteratedFDeriv 𝕜 k (fun y => tsum fun n => f n y) x) (tsum fun n => iteratedFDeriv 𝕜 k (f n) x)","decl":"/-- Consider a series of smooth functions, with summable uniform bounds on the successive\nderivatives. Then the iterated derivative of the sum is the sum of the iterated derivative. -/\ntheorem iteratedFDeriv_tsum_apply (hf : ∀ i, ContDiff 𝕜 N (f i))\n    (hv : ∀ k : ℕ, (k : ℕ∞) ≤ N → Summable (v k))\n    (h'f : ∀ (k : ℕ) (i : α) (x : E), (k : ℕ∞) ≤ N → ‖iteratedFDeriv 𝕜 k (f i) x‖ ≤ v k i) {k : ℕ}\n    (hk : (k : ℕ∞) ≤ N) (x : E) :\n    iteratedFDeriv 𝕜 k (fun y => ∑' n, f n y) x = ∑' n, iteratedFDeriv 𝕜 k (f n) x := by\n  rw [iteratedFDeriv_tsum hf hv h'f hk]\n\n"}
{"name":"contDiff_tsum","module":"Mathlib.Analysis.Calculus.SmoothSeries","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : IsRCLikeNormedField 𝕜\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : CompleteSpace F\ninst✝ : NormedSpace 𝕜 F\nf : α → E → F\nv : Nat → α → Real\nN : ENat\nhf : ∀ (i : α), ContDiff 𝕜 (↑N) (f i)\nhv : ∀ (k : Nat), LE.le (↑k) N → Summable (v k)\nh'f : ∀ (k : Nat) (i : α) (x : E), LE.le (↑k) N → LE.le (Norm.norm (iteratedFDeriv 𝕜 k (f i) x)) (v k i)\n⊢ ContDiff 𝕜 ↑N fun x => tsum fun i => f i x","decl":"/-- Consider a series of functions `∑' i, f i x`. Assume that each individual function `f i` is of\nclass `C^N`, and moreover there is a uniform summable upper bound on the `k`-th derivative\nfor each `k ≤ N`. Then the series is also `C^N`. -/\ntheorem contDiff_tsum (hf : ∀ i, ContDiff 𝕜 N (f i)) (hv : ∀ k : ℕ, (k : ℕ∞) ≤ N → Summable (v k))\n    (h'f : ∀ (k : ℕ) (i : α) (x : E), k ≤ N → ‖iteratedFDeriv 𝕜 k (f i) x‖ ≤ v k i) :\n    ContDiff 𝕜 N fun x => ∑' i, f i x := by\n  rw [contDiff_iff_continuous_differentiable]\n  constructor\n  · intro m hm\n    rw [iteratedFDeriv_tsum hf hv h'f hm]\n    refine continuous_tsum ?_ (hv m hm) ?_\n    · intro i\n      exact ContDiff.continuous_iteratedFDeriv (mod_cast hm) (hf i)\n    · intro n x\n      exact h'f _ _ _ hm\n  · intro m hm\n    have h'm : ((m + 1 : ℕ) : ℕ∞) ≤ N := by\n      simpa only [ENat.coe_add, ENat.coe_one] using Order.add_one_le_of_lt hm\n    rw [iteratedFDeriv_tsum hf hv h'f hm.le]\n    have A n x : HasFDerivAt (iteratedFDeriv 𝕜 m (f n)) (fderiv 𝕜 (iteratedFDeriv 𝕜 m (f n)) x) x :=\n      (ContDiff.differentiable_iteratedFDeriv (mod_cast hm)\n        (hf n)).differentiableAt.hasFDerivAt\n    refine differentiable_tsum (hv _ h'm) A fun n x => ?_\n    rw [fderiv_iteratedFDeriv, comp_apply, LinearIsometryEquiv.norm_map]\n    exact h'f _ _ _ h'm\n\n"}
{"name":"contDiff_tsum_of_eventually","module":"Mathlib.Analysis.Calculus.SmoothSeries","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : IsRCLikeNormedField 𝕜\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : CompleteSpace F\ninst✝ : NormedSpace 𝕜 F\nf : α → E → F\nv : Nat → α → Real\nN : ENat\nhf : ∀ (i : α), ContDiff 𝕜 (↑N) (f i)\nhv : ∀ (k : Nat), LE.le (↑k) N → Summable (v k)\nh'f : ∀ (k : Nat), LE.le (↑k) N → Filter.Eventually (fun i => ∀ (x : E), LE.le (Norm.norm (iteratedFDeriv 𝕜 k (f i) x)) (v k i)) Filter.cofinite\n⊢ ContDiff 𝕜 ↑N fun x => tsum fun i => f i x","decl":"/-- Consider a series of functions `∑' i, f i x`. Assume that each individual function `f i` is of\nclass `C^N`, and moreover there is a uniform summable upper bound on the `k`-th derivative\nfor each `k ≤ N` (except maybe for finitely many `i`s). Then the series is also `C^N`. -/\ntheorem contDiff_tsum_of_eventually (hf : ∀ i, ContDiff 𝕜 N (f i))\n    (hv : ∀ k : ℕ, k ≤ N → Summable (v k))\n    (h'f : ∀ k : ℕ, k ≤ N →\n      ∀ᶠ i in (Filter.cofinite : Filter α), ∀ x : E, ‖iteratedFDeriv 𝕜 k (f i) x‖ ≤ v k i) :\n    ContDiff 𝕜 N fun x => ∑' i, f i x := by\n  classical\n    refine contDiff_iff_forall_nat_le.2 fun m hm => ?_\n    let t : Set α :=\n      { i : α | ¬∀ k : ℕ, k ∈ Finset.range (m + 1) → ∀ x, ‖iteratedFDeriv 𝕜 k (f i) x‖ ≤ v k i }\n    have ht : Set.Finite t :=\n      haveI A :\n        ∀ᶠ i in (Filter.cofinite : Filter α),\n          ∀ k : ℕ, k ∈ Finset.range (m + 1) → ∀ x : E, ‖iteratedFDeriv 𝕜 k (f i) x‖ ≤ v k i := by\n        rw [eventually_all_finset]\n        intro i hi\n        apply h'f\n        simp only [Finset.mem_range_succ_iff] at hi\n        exact (WithTop.coe_le_coe.2 hi).trans hm\n      eventually_cofinite.2 A\n    let T : Finset α := ht.toFinset\n    have : (fun x => ∑' i, f i x) = (fun x => ∑ i ∈ T, f i x) +\n        fun x => ∑' i : { i // i ∉ T }, f i x := by\n      ext1 x\n      refine (sum_add_tsum_subtype_compl ?_ T).symm\n      refine .of_norm_bounded_eventually _ (hv 0 (zero_le _)) ?_\n      filter_upwards [h'f 0 (zero_le _)] with i hi\n      simpa only [norm_iteratedFDeriv_zero] using hi x\n    rw [this]\n    apply (ContDiff.sum fun i _ => (hf i).of_le (mod_cast hm)).add\n    have h'u : ∀ k : ℕ, (k : ℕ∞) ≤ m → Summable (v k ∘ ((↑) : { i // i ∉ T } → α)) := fun k hk =>\n      (hv k (hk.trans hm)).subtype _\n    refine contDiff_tsum (fun i => (hf i).of_le (mod_cast hm)) h'u ?_\n    rintro k ⟨i, hi⟩ x hk\n    simp only [t, T, Finite.mem_toFinset, mem_setOf_eq, Finset.mem_range, not_forall, not_le,\n      exists_prop, not_exists, not_and, not_lt] at hi\n    exact hi k (Nat.lt_succ_iff.2 (WithTop.coe_le_coe.1 hk)) x\n"}
