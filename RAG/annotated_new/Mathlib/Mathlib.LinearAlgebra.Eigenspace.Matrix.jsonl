{"name":"hasEigenvector_toLin_diagonal","module":"Mathlib.LinearAlgebra.Eigenspace.Matrix","initialProofState":"R : Type u_1\nn : Type u_2\nM : Type u_3\ninst✝⁵ : DecidableEq n\ninst✝⁴ : Fintype n\ninst✝³ : CommRing R\ninst✝² : Nontrivial R\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\nd : n → R\ni : n\nb : Basis n R M\n⊢ Module.End.HasEigenvector ((Matrix.toLin b b) (Matrix.diagonal d)) (d i) (b i)","decl":"/-- Basis vectors are eigenvectors of associated diagonal linear operator. -/\nlemma hasEigenvector_toLin_diagonal (d : n → R) (i : n) (b : Basis n R M) :\n    HasEigenvector (toLin b b (diagonal d)) (d i) (b i) :=\n  ⟨mem_eigenspace_iff.mpr <| by simp [diagonal], Basis.ne_zero b i⟩\n\n"}
{"name":"hasEigenvector_toLin'_diagonal","module":"Mathlib.LinearAlgebra.Eigenspace.Matrix","initialProofState":"R : Type u_1\nn : Type u_2\ninst✝³ : DecidableEq n\ninst✝² : Fintype n\ninst✝¹ : CommRing R\ninst✝ : Nontrivial R\nd : n → R\ni : n\n⊢ Module.End.HasEigenvector (Matrix.toLin' (Matrix.diagonal d)) (d i) ((Pi.basisFun R n) i)","decl":"/--  Standard basis vectors are eigenvectors of any associated diagonal linear operator. -/\nlemma hasEigenvector_toLin'_diagonal (d : n → R) (i : n) :\n    HasEigenvector (toLin' (diagonal d)) (d i) (Pi.basisFun R n i)  :=\n  hasEigenvector_toLin_diagonal _ _ (Pi.basisFun R n)\n\n"}
{"name":"hasEigenvalue_toLin_diagonal_iff","module":"Mathlib.LinearAlgebra.Eigenspace.Matrix","initialProofState":"R : Type u_1\nn : Type u_2\nM : Type u_3\ninst✝⁶ : DecidableEq n\ninst✝⁵ : Fintype n\ninst✝⁴ : CommRing R\ninst✝³ : Nontrivial R\ninst✝² : AddCommGroup M\ninst✝¹ : Module R M\nd : n → R\nμ : R\ninst✝ : NoZeroSMulDivisors R M\nb : Basis n R M\n⊢ Iff (Module.End.HasEigenvalue ((Matrix.toLin b b) (Matrix.diagonal d)) μ) (Exists fun i => Eq (d i) μ)","decl":"/-- Eigenvalues of a diagonal linear operator are the diagonal entries. -/\nlemma hasEigenvalue_toLin_diagonal_iff (d : n → R) {μ : R} [NoZeroSMulDivisors R M]\n    (b : Basis n R M) : HasEigenvalue (toLin b b (diagonal d)) μ ↔ ∃ i, d i = μ := by\n  have (i : n) : HasEigenvalue (toLin b b (diagonal d)) (d i) :=\n    hasEigenvalue_of_hasEigenvector <| hasEigenvector_toLin_diagonal d i b\n  constructor\n  · contrapose!\n    intro hμ h_eig\n    have h_iSup : ⨆ μ ∈ Set.range d, eigenspace (toLin b b (diagonal d)) μ = ⊤ := by\n      rw [eq_top_iff, ← b.span_eq, Submodule.span_le]\n      rintro - ⟨i, rfl⟩\n      simp only [SetLike.mem_coe]\n      apply Submodule.mem_iSup_of_mem (d i)\n      apply Submodule.mem_iSup_of_mem ⟨i, rfl⟩\n      rw [mem_eigenspace_iff]\n      exact (hasEigenvector_toLin_diagonal d i b).apply_eq_smul\n    have hμ_not_mem : μ ∉ Set.range d := by simpa using fun i ↦ (hμ i)\n    have := eigenspaces_iSupIndep (toLin b b (diagonal d)) |>.disjoint_biSup hμ_not_mem\n    rw [h_iSup, disjoint_top] at this\n    exact h_eig this\n  · rintro ⟨i, rfl⟩\n    exact this i\n\n"}
{"name":"hasEigenvalue_toLin'_diagonal_iff","module":"Mathlib.LinearAlgebra.Eigenspace.Matrix","initialProofState":"R : Type u_1\nn : Type u_2\ninst✝⁴ : DecidableEq n\ninst✝³ : Fintype n\ninst✝² : CommRing R\ninst✝¹ : Nontrivial R\ninst✝ : NoZeroDivisors R\nd : n → R\nμ : R\n⊢ Iff (Module.End.HasEigenvalue (Matrix.toLin' (Matrix.diagonal d)) μ) (Exists fun i => Eq (d i) μ)","decl":"/-- Eigenvalues of a diagonal linear operator with respect to standard basis\n    are the diagonal entries. -/\nlemma hasEigenvalue_toLin'_diagonal_iff [NoZeroDivisors R] (d : n → R) {μ : R} :\n    HasEigenvalue (toLin' (diagonal d)) μ ↔ (∃ i, d i = μ) :=\n  hasEigenvalue_toLin_diagonal_iff _ <| Pi.basisFun R n\n\n"}
{"name":"spectrum_diagonal","module":"Mathlib.LinearAlgebra.Eigenspace.Matrix","initialProofState":"R : Type u_1\nn : Type u_2\ninst✝² : DecidableEq n\ninst✝¹ : Fintype n\ninst✝ : Field R\nd : n → R\n⊢ Eq (spectrum R (Matrix.diagonal d)) (Set.range d)","decl":"/-- The spectrum of the diagonal operator is the range of the diagonal viewed as a function. -/\nlemma spectrum_diagonal [Field R] (d : n → R) :\n    spectrum R (diagonal d) = Set.range d := by\n  ext μ\n  rw [← AlgEquiv.spectrum_eq (toLinAlgEquiv <| Pi.basisFun R n), ← hasEigenvalue_iff_mem_spectrum]\n  exact hasEigenvalue_toLin'_diagonal_iff d\n\n"}
