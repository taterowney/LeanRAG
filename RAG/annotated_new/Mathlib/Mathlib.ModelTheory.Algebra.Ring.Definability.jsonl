{"name":"FirstOrder.Ring.mvPolynomial_zeroLocus_definable","module":"Mathlib.ModelTheory.Algebra.Ring.Definability","initialProofState":"ι : Type u_1\nK : Type u_2\ninst✝¹ : Field K\ninst✝ : FirstOrder.Ring.CompatibleRing K\nS : Finset (MvPolynomial ι K)\n⊢ (Set.iUnion fun p => Set.iUnion fun h => Set.image (fun m => MvPolynomial.coeff m p) ↑p.support).Definable FirstOrder.Language.ring (MvPolynomial.zeroLocus (Ideal.span ↑S))","decl":"theorem mvPolynomial_zeroLocus_definable {ι K : Type*} [Field K]\n    [CompatibleRing K] (S : Finset (MvPolynomial ι K)) :\n    Set.Definable (⋃ p ∈ S, p.coeff '' p.support : Set K) Language.ring\n      (zeroLocus (Ideal.span (S : Set (MvPolynomial ι K)))) := by\n  rw [Set.definable_iff_exists_formula_sum]\n  let p' := genericPolyMap (fun p : S => p.1.support)\n  letI := Classical.decEq ι\n  letI := Classical.decEq K\n  rw [MvPolynomial.zeroLocus_span]\n  refine ⟨BoundedFormula.iInf\n      (fun i : S => Term.equal\n        ((termOfFreeCommRing (p' i)).relabel\n          (Sum.map (fun p => ⟨p.1.1.coeff p.2.1, by\n            simp only [Set.mem_iUnion]\n            exact ⟨p.1.1, p.1.2, Set.mem_image_of_mem _ p.2.2⟩⟩) id)) 0), ?_⟩\n  -- Squeezing this simp slows it down significantly. Please measure before removing.\n  simp? [Formula.Realize, Term.equal, Function.comp_def, p'] says\n    simp only [Finset.mem_coe, Formula.Realize, Term.equal, Term.relabel_relabel,\n    Function.comp_def, realize_iInf, realize_bdEqual, Term.realize_relabel, Sum.elim_inl,\n    realize_termOfFreeCommRing, lift_genericPolyMap, Sum.map_inr, id_eq, Sum.elim_inr, Sum.map_inl,\n    MvPolynomialSupportLEEquiv_symm_apply_coeff, realize_zero, Subtype.forall, p']\n\n"}
