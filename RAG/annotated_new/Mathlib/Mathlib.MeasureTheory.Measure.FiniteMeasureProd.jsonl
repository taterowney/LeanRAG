{"name":"MeasureTheory.FiniteMeasure.toMeasure_prod","module":"Mathlib.MeasureTheory.Measure.FiniteMeasureProd","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nβ : Type u_2\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.FiniteMeasure α\nν : MeasureTheory.FiniteMeasure β\n⊢ Eq (↑(μ.prod ν)) ((↑μ).prod ↑ν)","decl":"@[simp] lemma toMeasure_prod : (μ.prod ν).toMeasure = μ.toMeasure.prod ν.toMeasure := rfl\n\n"}
{"name":"MeasureTheory.FiniteMeasure.prod_apply","module":"Mathlib.MeasureTheory.Measure.FiniteMeasureProd","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nβ : Type u_2\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.FiniteMeasure α\nν : MeasureTheory.FiniteMeasure β\ns : Set (Prod α β)\ns_mble : MeasurableSet s\n⊢ Eq ((μ.prod ν) s) (MeasureTheory.lintegral ↑μ fun x => ↑ν (Set.preimage (Prod.mk x) s)).toNNReal","decl":"lemma prod_apply (s : Set (α × β)) (s_mble : MeasurableSet s) :\n    μ.prod ν s = ENNReal.toNNReal (∫⁻ x, ν.toMeasure (Prod.mk x ⁻¹' s) ∂μ) := by\n  simp [coeFn_def, Measure.prod_apply s_mble]\n\n"}
{"name":"MeasureTheory.FiniteMeasure.prod_apply_symm","module":"Mathlib.MeasureTheory.Measure.FiniteMeasureProd","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nβ : Type u_2\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.FiniteMeasure α\nν : MeasureTheory.FiniteMeasure β\ns : Set (Prod α β)\ns_mble : MeasurableSet s\n⊢ Eq ((μ.prod ν) s) (MeasureTheory.lintegral ↑ν fun y => ↑μ (Set.preimage (fun x => { fst := x, snd := y }) s)).toNNReal","decl":"lemma prod_apply_symm (s : Set (α × β)) (s_mble : MeasurableSet s) :\n    μ.prod ν s = ENNReal.toNNReal (∫⁻ y, μ.toMeasure ((fun x ↦ ⟨x, y⟩) ⁻¹' s) ∂ν) := by\n  simp [coeFn_def, Measure.prod_apply_symm s_mble]\n\n"}
{"name":"MeasureTheory.FiniteMeasure.prod_prod","module":"Mathlib.MeasureTheory.Measure.FiniteMeasureProd","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nβ : Type u_2\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.FiniteMeasure α\nν : MeasureTheory.FiniteMeasure β\ns : Set α\nt : Set β\n⊢ Eq ((μ.prod ν) (SProd.sprod s t)) (HMul.hMul (μ s) (ν t))","decl":"lemma prod_prod (s : Set α) (t : Set β) : μ.prod ν (s ×ˢ t) = μ s * ν t := by simp [coeFn_def]\n\n"}
{"name":"MeasureTheory.FiniteMeasure.mass_prod","module":"Mathlib.MeasureTheory.Measure.FiniteMeasureProd","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nβ : Type u_2\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.FiniteMeasure α\nν : MeasureTheory.FiniteMeasure β\n⊢ Eq (μ.prod ν).mass (HMul.hMul μ.mass ν.mass)","decl":"@[simp] lemma mass_prod : (μ.prod ν).mass = μ.mass * ν.mass := by\n  simp only [coeFn_def, mass, univ_prod_univ.symm, toMeasure_prod]\n  rw [← ENNReal.toNNReal_mul]\n  exact congr_arg ENNReal.toNNReal (Measure.prod_prod univ univ)\n\n"}
{"name":"MeasureTheory.FiniteMeasure.zero_prod","module":"Mathlib.MeasureTheory.Measure.FiniteMeasureProd","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nβ : Type u_2\ninst✝ : MeasurableSpace β\nν : MeasureTheory.FiniteMeasure β\n⊢ Eq (MeasureTheory.FiniteMeasure.prod 0 ν) 0","decl":"@[simp] lemma zero_prod : (0 : FiniteMeasure α).prod ν = 0 := by\n  rw [← mass_zero_iff, mass_prod, zero_mass, zero_mul]\n\n"}
{"name":"MeasureTheory.FiniteMeasure.prod_zero","module":"Mathlib.MeasureTheory.Measure.FiniteMeasureProd","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nβ : Type u_2\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.FiniteMeasure α\n⊢ Eq (μ.prod 0) 0","decl":"@[simp] lemma prod_zero : μ.prod (0 : FiniteMeasure β) = 0 := by\n  rw [← mass_zero_iff, mass_prod, zero_mass, mul_zero]\n\n"}
{"name":"MeasureTheory.FiniteMeasure.map_fst_prod","module":"Mathlib.MeasureTheory.Measure.FiniteMeasureProd","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nβ : Type u_2\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.FiniteMeasure α\nν : MeasureTheory.FiniteMeasure β\n⊢ Eq ((μ.prod ν).map Prod.fst) (HSMul.hSMul (ν Set.univ) μ)","decl":"@[simp] lemma map_fst_prod : (μ.prod ν).map Prod.fst = ν univ • μ := by ext; simp\n"}
{"name":"MeasureTheory.FiniteMeasure.map_snd_prod","module":"Mathlib.MeasureTheory.Measure.FiniteMeasureProd","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nβ : Type u_2\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.FiniteMeasure α\nν : MeasureTheory.FiniteMeasure β\n⊢ Eq ((μ.prod ν).map Prod.snd) (HSMul.hSMul (μ Set.univ) ν)","decl":"@[simp] lemma map_snd_prod : (μ.prod ν).map Prod.snd = μ univ • ν := by ext; simp\n\n"}
{"name":"MeasureTheory.FiniteMeasure.map_prod_map","module":"Mathlib.MeasureTheory.Measure.FiniteMeasureProd","initialProofState":"α : Type u_1\ninst✝³ : MeasurableSpace α\nβ : Type u_2\ninst✝² : MeasurableSpace β\nμ : MeasureTheory.FiniteMeasure α\nν : MeasureTheory.FiniteMeasure β\nα' : Type u_3\ninst✝¹ : MeasurableSpace α'\nβ' : Type u_4\ninst✝ : MeasurableSpace β'\nf : α → α'\ng : β → β'\nf_mble : Measurable f\ng_mble : Measurable g\n⊢ Eq ((μ.map f).prod (ν.map g)) ((μ.prod ν).map (Prod.map f g))","decl":"lemma map_prod_map {α' : Type*} [MeasurableSpace α'] {β' : Type*} [MeasurableSpace β']\n    {f : α → α'} {g : β → β'} (f_mble : Measurable f) (g_mble : Measurable g) :\n    (μ.map f).prod (ν.map g) = (μ.prod ν).map (Prod.map f g) := by\n  apply Subtype.ext\n  simp only [val_eq_toMeasure, toMeasure_prod, toMeasure_map]\n  rw [Measure.map_prod_map _ _ f_mble g_mble]\n\n"}
{"name":"MeasureTheory.FiniteMeasure.prod_swap","module":"Mathlib.MeasureTheory.Measure.FiniteMeasureProd","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nβ : Type u_2\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.FiniteMeasure α\nν : MeasureTheory.FiniteMeasure β\n⊢ Eq ((μ.prod ν).map Prod.swap) (ν.prod μ)","decl":"lemma prod_swap : (μ.prod ν).map Prod.swap = ν.prod μ := by\n  apply Subtype.ext\n  simp [Measure.prod_swap]\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.toMeasure_prod","module":"Mathlib.MeasureTheory.Measure.FiniteMeasureProd","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nβ : Type u_2\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.ProbabilityMeasure α\nν : MeasureTheory.ProbabilityMeasure β\n⊢ Eq (↑(μ.prod ν)) ((↑μ).prod ↑ν)","decl":"@[simp] lemma toMeasure_prod : (μ.prod ν).toMeasure = μ.toMeasure.prod ν.toMeasure := rfl\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.prod_apply","module":"Mathlib.MeasureTheory.Measure.FiniteMeasureProd","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nβ : Type u_2\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.ProbabilityMeasure α\nν : MeasureTheory.ProbabilityMeasure β\ns : Set (Prod α β)\ns_mble : MeasurableSet s\n⊢ Eq ((μ.prod ν) s) (MeasureTheory.lintegral ↑μ fun x => ↑ν (Set.preimage (Prod.mk x) s)).toNNReal","decl":"lemma prod_apply (s : Set (α × β)) (s_mble : MeasurableSet s) :\n    μ.prod ν s = ENNReal.toNNReal (∫⁻ x, ν.toMeasure (Prod.mk x ⁻¹' s) ∂μ) := by\n  simp [coeFn_def, Measure.prod_apply s_mble]\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.prod_apply_symm","module":"Mathlib.MeasureTheory.Measure.FiniteMeasureProd","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nβ : Type u_2\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.ProbabilityMeasure α\nν : MeasureTheory.ProbabilityMeasure β\ns : Set (Prod α β)\ns_mble : MeasurableSet s\n⊢ Eq ((μ.prod ν) s) (MeasureTheory.lintegral ↑ν fun y => ↑μ (Set.preimage (fun x => { fst := x, snd := y }) s)).toNNReal","decl":"lemma prod_apply_symm (s : Set (α × β)) (s_mble : MeasurableSet s) :\n    μ.prod ν s = ENNReal.toNNReal (∫⁻ y, μ.toMeasure ((fun x ↦ ⟨x, y⟩) ⁻¹' s) ∂ν) := by\n  simp [coeFn_def, Measure.prod_apply_symm s_mble]\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.prod_prod","module":"Mathlib.MeasureTheory.Measure.FiniteMeasureProd","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nβ : Type u_2\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.ProbabilityMeasure α\nν : MeasureTheory.ProbabilityMeasure β\ns : Set α\nt : Set β\n⊢ Eq ((μ.prod ν) (SProd.sprod s t)) (HMul.hMul (μ s) (ν t))","decl":"lemma prod_prod (s : Set α) (t : Set β) : μ.prod ν (s ×ˢ t) = μ s * ν t := by simp [coeFn_def]\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.map_fst_prod","module":"Mathlib.MeasureTheory.Measure.FiniteMeasureProd","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nβ : Type u_2\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.ProbabilityMeasure α\nν : MeasureTheory.ProbabilityMeasure β\n⊢ Eq ((μ.prod ν).map ⋯) μ","decl":"/-- The first marginal of a product probability measure is the first probability measure. -/\n@[simp] lemma map_fst_prod : (μ.prod ν).map measurable_fst.aemeasurable = μ := by\n  apply Subtype.ext\n  simp only [val_eq_to_measure, toMeasure_map, toMeasure_prod, Measure.map_fst_prod,\n             measure_univ, one_smul]\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.map_snd_prod","module":"Mathlib.MeasureTheory.Measure.FiniteMeasureProd","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nβ : Type u_2\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.ProbabilityMeasure α\nν : MeasureTheory.ProbabilityMeasure β\n⊢ Eq ((μ.prod ν).map ⋯) ν","decl":"/-- The second marginal of a product probability measure is the second probability measure. -/\n@[simp] lemma map_snd_prod : (μ.prod ν).map measurable_snd.aemeasurable = ν := by\n  apply Subtype.ext\n  simp only [val_eq_to_measure, toMeasure_map, toMeasure_prod, Measure.map_snd_prod,\n             measure_univ, one_smul]\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.map_prod_map","module":"Mathlib.MeasureTheory.Measure.FiniteMeasureProd","initialProofState":"α : Type u_1\ninst✝³ : MeasurableSpace α\nβ : Type u_2\ninst✝² : MeasurableSpace β\nμ : MeasureTheory.ProbabilityMeasure α\nν : MeasureTheory.ProbabilityMeasure β\nα' : Type u_3\ninst✝¹ : MeasurableSpace α'\nβ' : Type u_4\ninst✝ : MeasurableSpace β'\nf : α → α'\ng : β → β'\nf_mble : Measurable f\ng_mble : Measurable g\n⊢ Eq ((μ.map ⋯).prod (ν.map ⋯)) ((μ.prod ν).map ⋯)","decl":"lemma map_prod_map {α' : Type*} [MeasurableSpace α'] {β' : Type*} [MeasurableSpace β']\n    {f : α → α'} {g : β → β'} (f_mble : Measurable f) (g_mble : Measurable g) :\n    (μ.map f_mble.aemeasurable).prod (ν.map g_mble.aemeasurable)\n      = (μ.prod ν).map (f_mble.prod_map g_mble).aemeasurable := by\n  apply Subtype.ext\n  simp only [val_eq_to_measure, toMeasure_prod, toMeasure_map]\n  rw [Measure.map_prod_map _ _ f_mble g_mble]\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.prod_swap","module":"Mathlib.MeasureTheory.Measure.FiniteMeasureProd","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nβ : Type u_2\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.ProbabilityMeasure α\nν : MeasureTheory.ProbabilityMeasure β\n⊢ Eq ((μ.prod ν).map ⋯) (ν.prod μ)","decl":"lemma prod_swap : (μ.prod ν).map measurable_swap.aemeasurable = ν.prod μ := by\n  apply Subtype.ext\n  simp [Measure.prod_swap]\n\n"}
