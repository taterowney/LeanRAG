{"name":"MeasureTheory.measure_empty","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\n⊢ Eq (μ EmptyCollection.emptyCollection) 0","decl":"@[simp]\ntheorem measure_empty : μ ∅ = 0 := OuterMeasureClass.measure_empty μ\n\n"}
{"name":"MeasureTheory.measure_mono","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\nh : HasSubset.Subset s t\n⊢ LE.le (μ s) (μ t)","decl":"@[mono, gcongr]\ntheorem measure_mono (h : s ⊆ t) : μ s ≤ μ t :=\n  OuterMeasureClass.measure_mono μ h\n\n"}
{"name":"MeasureTheory.measure_mono_null","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\nh : HasSubset.Subset s t\nht : Eq (μ t) 0\n⊢ Eq (μ s) 0","decl":"theorem measure_mono_null (h : s ⊆ t) (ht : μ t = 0) : μ s = 0 :=\n  eq_bot_mono (measure_mono h) ht\n\n"}
{"name":"MeasureTheory.measure_pos_of_superset","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\nh : HasSubset.Subset s t\nhs : Ne (μ s) 0\n⊢ LT.lt 0 (μ t)","decl":"theorem measure_pos_of_superset (h : s ⊆ t) (hs : μ s ≠ 0) : 0 < μ t :=\n  hs.bot_lt.trans_le (measure_mono h)\n\n"}
{"name":"MeasureTheory.measure_iUnion_le","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nι : Type u_2\nF : Type u_3\ninst✝² : FunLike F (Set α) ENNReal\ninst✝¹ : MeasureTheory.OuterMeasureClass F α\nμ : F\ninst✝ : Countable ι\ns : ι → Set α\n⊢ LE.le (μ (Set.iUnion fun i => s i)) (tsum fun i => μ (s i))","decl":"theorem measure_iUnion_le [Countable ι] (s : ι → Set α) : μ (⋃ i, s i) ≤ ∑' i, μ (s i) := by\n  refine rel_iSup_tsum μ measure_empty (· ≤ ·) (fun t ↦ ?_) _\n  calc\n    μ (⋃ i, t i) = μ (⋃ i, disjointed t i) := by rw [iUnion_disjointed]\n    _ ≤ ∑' i, μ (disjointed t i) :=\n      OuterMeasureClass.measure_iUnion_nat_le _ _ (disjoint_disjointed _)\n    _ ≤ ∑' i, μ (t i) := by gcongr; exact disjointed_subset ..\n\n"}
{"name":"MeasureTheory.measure_biUnion_le","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nι : Type u_2\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nI : Set ι\nμ : F\nhI : I.Countable\ns : ι → Set α\n⊢ LE.le (μ (Set.iUnion fun i => Set.iUnion fun h => s i)) (tsum fun i => μ (s ↑i))","decl":"theorem measure_biUnion_le {I : Set ι} (μ : F) (hI : I.Countable) (s : ι → Set α) :\n    μ (⋃ i ∈ I, s i) ≤ ∑' i : I, μ (s i) := by\n  have := hI.to_subtype\n  rw [biUnion_eq_iUnion]\n  apply measure_iUnion_le\n\n"}
{"name":"MeasureTheory.measure_biUnion_finset_le","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nι : Type u_2\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\nI : Finset ι\ns : ι → Set α\n⊢ LE.le (μ (Set.iUnion fun i => Set.iUnion fun h => s i)) (I.sum fun i => μ (s i))","decl":"theorem measure_biUnion_finset_le (I : Finset ι) (s : ι → Set α) :\n    μ (⋃ i ∈ I, s i) ≤ ∑ i ∈ I, μ (s i) :=\n  (measure_biUnion_le μ I.countable_toSet s).trans_eq <| I.tsum_subtype (μ <| s ·)\n\n"}
{"name":"MeasureTheory.measure_iUnion_fintype_le","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nι : Type u_2\nF : Type u_3\ninst✝² : FunLike F (Set α) ENNReal\ninst✝¹ : MeasureTheory.OuterMeasureClass F α\ninst✝ : Fintype ι\nμ : F\ns : ι → Set α\n⊢ LE.le (μ (Set.iUnion fun i => s i)) (Finset.univ.sum fun i => μ (s i))","decl":"theorem measure_iUnion_fintype_le [Fintype ι] (μ : F) (s : ι → Set α) :\n    μ (⋃ i, s i) ≤ ∑ i, μ (s i) := by\n  simpa using measure_biUnion_finset_le Finset.univ s\n\n"}
{"name":"MeasureTheory.measure_union_le","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\n⊢ LE.le (μ (Union.union s t)) (HAdd.hAdd (μ s) (μ t))","decl":"theorem measure_union_le (s t : Set α) : μ (s ∪ t) ≤ μ s + μ t := by\n  simpa [union_eq_iUnion] using measure_iUnion_fintype_le μ (cond · s t)\n\n"}
{"name":"MeasureTheory.measure_univ_le_add_compl","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns : Set α\n⊢ LE.le (μ Set.univ) (HAdd.hAdd (μ s) (μ (HasCompl.compl s)))","decl":"lemma measure_univ_le_add_compl (s : Set α) : μ univ ≤ μ s + μ sᶜ :=\n  s.union_compl_self ▸ measure_union_le s sᶜ\n\n"}
{"name":"MeasureTheory.measure_le_inter_add_diff","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\n⊢ LE.le (μ s) (HAdd.hAdd (μ (Inter.inter s t)) (μ (SDiff.sdiff s t)))","decl":"theorem measure_le_inter_add_diff (μ : F) (s t : Set α) : μ s ≤ μ (s ∩ t) + μ (s \\ t) := by\n  simpa using measure_union_le (s ∩ t) (s \\ t)\n\n"}
{"name":"MeasureTheory.measure_diff_null","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\nht : Eq (μ t) 0\n⊢ Eq (μ (SDiff.sdiff s t)) (μ s)","decl":"theorem measure_diff_null (ht : μ t = 0) : μ (s \\ t) = μ s :=\n  (measure_mono diff_subset).antisymm <| calc\n    μ s ≤ μ (s ∩ t) + μ (s \\ t) := measure_le_inter_add_diff _ _ _\n    _ ≤ μ t + μ (s \\ t) := by gcongr; apply inter_subset_right\n    _ = μ (s \\ t) := by simp [ht]\n\n"}
{"name":"MeasureTheory.measure_biUnion_null_iff","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nι : Type u_2\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\nI : Set ι\nhI : I.Countable\ns : ι → Set α\n⊢ Iff (Eq (μ (Set.iUnion fun i => Set.iUnion fun h => s i)) 0) (∀ (i : ι), Membership.mem I i → Eq (μ (s i)) 0)","decl":"theorem measure_biUnion_null_iff {I : Set ι} (hI : I.Countable) {s : ι → Set α} :\n    μ (⋃ i ∈ I, s i) = 0 ↔ ∀ i ∈ I, μ (s i) = 0 := by\n  refine ⟨fun h i hi ↦ measure_mono_null (subset_biUnion_of_mem hi) h, fun h ↦ ?_⟩\n  have _ := hI.to_subtype\n  simpa [h] using measure_iUnion_le (μ := μ) fun x : I ↦ s x\n\n"}
{"name":"MeasureTheory.measure_sUnion_null_iff","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\nS : Set (Set α)\nhS : S.Countable\n⊢ Iff (Eq (μ S.sUnion) 0) (∀ (s : Set α), Membership.mem S s → Eq (μ s) 0)","decl":"theorem measure_sUnion_null_iff {S : Set (Set α)} (hS : S.Countable) :\n    μ (⋃₀ S) = 0 ↔ ∀ s ∈ S, μ s = 0 := by\n  rw [sUnion_eq_biUnion, measure_biUnion_null_iff hS]\n\n"}
{"name":"MeasureTheory.measure_iUnion_null_iff","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝² : FunLike F (Set α) ENNReal\ninst✝¹ : MeasureTheory.OuterMeasureClass F α\nμ : F\nι : Sort u_4\ninst✝ : Countable ι\ns : ι → Set α\n⊢ Iff (Eq (μ (Set.iUnion fun i => s i)) 0) (∀ (i : ι), Eq (μ (s i)) 0)","decl":"@[simp]\ntheorem measure_iUnion_null_iff {ι : Sort*} [Countable ι] {s : ι → Set α} :\n    μ (⋃ i, s i) = 0 ↔ ∀ i, μ (s i) = 0 := by\n  rw [← sUnion_range, measure_sUnion_null_iff (countable_range s), forall_mem_range]\n\n"}
{"name":"MeasureTheory.measure_iUnion_null","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝² : FunLike F (Set α) ENNReal\ninst✝¹ : MeasureTheory.OuterMeasureClass F α\nμ : F\nι : Sort u_4\ninst✝ : Countable ι\ns : ι → Set α\na✝ : ∀ (i : ι), Eq (μ (s i)) 0\n⊢ Eq (μ (Set.iUnion fun i => s i)) 0","decl":"alias ⟨_, measure_iUnion_null⟩ := measure_iUnion_null_iff\n\n"}
{"name":"MeasureTheory.measure_union_null_iff","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\n⊢ Iff (Eq (μ (Union.union s t)) 0) (And (Eq (μ s) 0) (Eq (μ t) 0))","decl":"@[simp]\ntheorem measure_union_null_iff : μ (s ∪ t) = 0 ↔ μ s = 0 ∧ μ t = 0 := by\n  simp [union_eq_iUnion, and_comm]\n\n"}
{"name":"MeasureTheory.measure_union_null","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\nhs : Eq (μ s) 0\nht : Eq (μ t) 0\n⊢ Eq (μ (Union.union s t)) 0","decl":"theorem measure_union_null (hs : μ s = 0) (ht : μ t = 0) : μ (s ∪ t) = 0 := by simp [*]\n\n"}
{"name":"MeasureTheory.measure_null_iff_singleton","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns : Set α\nhs : s.Countable\n⊢ Iff (Eq (μ s) 0) (∀ (x : α), Membership.mem s x → Eq (μ (Singleton.singleton x)) 0)","decl":"lemma measure_null_iff_singleton (hs : s.Countable) : μ s = 0 ↔ ∀ x ∈ s, μ {x} = 0 := by\n  rw [← measure_biUnion_null_iff hs, biUnion_of_singleton]\n\n"}
{"name":"MeasureTheory.measure_iUnion_of_tendsto_zero","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝² : FunLike F (Set α) ENNReal\ninst✝¹ : MeasureTheory.OuterMeasureClass F α\nι : Type u_4\nμ : F\ns : ι → Set α\nl : Filter ι\ninst✝ : l.NeBot\nh0 : Filter.Tendsto (fun k => μ (SDiff.sdiff (Set.iUnion fun n => s n) (s k))) l (nhds 0)\n⊢ Eq (μ (Set.iUnion fun n => s n)) (iSup fun n => μ (s n))","decl":"/-- Let `μ` be an (outer) measure; let `s : ι → Set α` be a sequence of sets, `S = ⋃ n, s n`.\nIf `μ (S \\ s n)` tends to zero along some nontrivial filter (usually `Filter.atTop` on `ι = ℕ`),\nthen `μ S = ⨆ n, μ (s n)`. -/\ntheorem measure_iUnion_of_tendsto_zero {ι} (μ : F) {s : ι → Set α} (l : Filter ι) [NeBot l]\n    (h0 : Tendsto (fun k => μ ((⋃ n, s n) \\ s k)) l (𝓝 0)) : μ (⋃ n, s n) = ⨆ n, μ (s n) := by\n  refine le_antisymm ?_ <| iSup_le fun n ↦ measure_mono <| subset_iUnion _ _\n  set S := ⋃ n, s n\n  set M := ⨆ n, μ (s n)\n  have A : ∀ k, μ S ≤ M + μ (S \\ s k) := fun k ↦ calc\n    μ S ≤ μ (S ∩ s k) + μ (S \\ s k) := measure_le_inter_add_diff _ _ _\n    _ ≤ μ (s k) + μ (S \\ s k) := by gcongr; apply inter_subset_right\n    _ ≤ M + μ (S \\ s k) := by gcongr; exact le_iSup (μ ∘ s) k\n  have B : Tendsto (fun k ↦ M + μ (S \\ s k)) l (𝓝 M) := by simpa using tendsto_const_nhds.add h0\n  exact ge_of_tendsto' B A\n\n"}
{"name":"MeasureTheory.measure_null_of_locally_null","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝³ : FunLike F (Set α) ENNReal\ninst✝² : MeasureTheory.OuterMeasureClass F α\nμ : F\ninst✝¹ : TopologicalSpace α\ninst✝ : SecondCountableTopology α\ns : Set α\nhs : ∀ (x : α), Membership.mem s x → Exists fun u => And (Membership.mem (nhdsWithin x s) u) (Eq (μ u) 0)\n⊢ Eq (μ s) 0","decl":"/-- If a set has zero measure in a neighborhood of each of its points, then it has zero measure\nin a second-countable space. -/\ntheorem measure_null_of_locally_null [TopologicalSpace α] [SecondCountableTopology α]\n    (s : Set α) (hs : ∀ x ∈ s, ∃ u ∈ 𝓝[s] x, μ u = 0) : μ s = 0 := by\n  choose! u hxu hu₀ using hs\n  choose t ht using TopologicalSpace.countable_cover_nhdsWithin hxu\n  rcases ht with ⟨ts, t_count, ht⟩\n  apply measure_mono_null ht\n  exact (measure_biUnion_null_iff t_count).2 fun x hx => hu₀ x (ts hx)\n\n"}
{"name":"MeasureTheory.exists_mem_forall_mem_nhdsWithin_pos_measure","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝³ : FunLike F (Set α) ENNReal\ninst✝² : MeasureTheory.OuterMeasureClass F α\nμ : F\ninst✝¹ : TopologicalSpace α\ninst✝ : SecondCountableTopology α\ns : Set α\nhs : Ne (μ s) 0\n⊢ Exists fun x => And (Membership.mem s x) (∀ (t : Set α), Membership.mem (nhdsWithin x s) t → LT.lt 0 (μ t))","decl":"/-- If `m s ≠ 0`, then for some point `x ∈ s` and any `t ∈ 𝓝[s] x` we have `0 < m t`. -/\ntheorem exists_mem_forall_mem_nhdsWithin_pos_measure [TopologicalSpace α]\n    [SecondCountableTopology α] {s : Set α} (hs : μ s ≠ 0) :\n    ∃ x ∈ s, ∀ t ∈ 𝓝[s] x, 0 < μ t := by\n  contrapose! hs\n  simp only [nonpos_iff_eq_zero] at hs\n  exact measure_null_of_locally_null s hs\n\n"}
{"name":"MeasureTheory.OuterMeasure.iUnion_of_tendsto_zero","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nι : Type u_3\nm : MeasureTheory.OuterMeasure α\ns : ι → Set α\nl : Filter ι\ninst✝ : l.NeBot\nh0 : Filter.Tendsto (fun k => m (SDiff.sdiff (Set.iUnion fun n => s n) (s k))) l (nhds 0)\n⊢ Eq (m (Set.iUnion fun n => s n)) (iSup fun n => m (s n))","decl":"/-- If `s : ι → Set α` is a sequence of sets, `S = ⋃ n, s n`, and `m (S \\ s n)` tends to zero along\nsome nontrivial filter (usually `atTop` on `ι = ℕ`), then `m S = ⨆ n, m (s n)`. -/\ntheorem iUnion_of_tendsto_zero {ι} (m : OuterMeasure α) {s : ι → Set α} (l : Filter ι) [NeBot l]\n    (h0 : Tendsto (fun k => m ((⋃ n, s n) \\ s k)) l (𝓝 0)) : m (⋃ n, s n) = ⨆ n, m (s n) :=\n  measure_iUnion_of_tendsto_zero m l h0\n\n"}
{"name":"MeasureTheory.OuterMeasure.iUnion_nat_of_monotone_of_tsum_ne_top","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nm : MeasureTheory.OuterMeasure α\ns : Nat → Set α\nh_mono : ∀ (n : Nat), HasSubset.Subset (s n) (s (HAdd.hAdd n 1))\nh0 : Ne (tsum fun k => m (SDiff.sdiff (s (HAdd.hAdd k 1)) (s k))) Top.top\n⊢ Eq (m (Set.iUnion fun n => s n)) (iSup fun n => m (s n))","decl":"/-- If `s : ℕ → Set α` is a monotone sequence of sets such that `∑' k, m (s (k + 1) \\ s k) ≠ ∞`,\nthen `m (⋃ n, s n) = ⨆ n, m (s n)`. -/\ntheorem iUnion_nat_of_monotone_of_tsum_ne_top (m : OuterMeasure α) {s : ℕ → Set α}\n    (h_mono : ∀ n, s n ⊆ s (n + 1)) (h0 : (∑' k, m (s (k + 1) \\ s k)) ≠ ∞) :\n    m (⋃ n, s n) = ⨆ n, m (s n) := by\n  classical\n  refine measure_iUnion_of_tendsto_zero m atTop ?_\n  refine tendsto_nhds_bot_mono' (ENNReal.tendsto_sum_nat_add _ h0) fun n => ?_\n  refine (m.mono ?_).trans (measure_iUnion_le _)\n  -- Current goal: `(⋃ k, s k) \\ s n ⊆ ⋃ k, s (k + n + 1) \\ s (k + n)`\n  have h' : Monotone s := @monotone_nat_of_le_succ (Set α) _ _ h_mono\n  simp only [diff_subset_iff, iUnion_subset_iff]\n  intro i x hx\n  have : ∃i, x ∈ s i := by exists i\n  rcases Nat.findX this with ⟨j, hj, hlt⟩\n  clear hx i\n  rcases le_or_lt j n with hjn | hnj\n  · exact Or.inl (h' hjn hj)\n  have : j - (n + 1) + n + 1 = j := by omega\n  refine Or.inr (mem_iUnion.2 ⟨j - (n + 1), ?_, hlt _ ?_⟩)\n  · rwa [this]\n  · rw [← Nat.succ_le_iff, Nat.succ_eq_add_one, this]\n\n"}
{"name":"MeasureTheory.OuterMeasure.coe_fn_injective","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\n⊢ Function.Injective fun μ s => μ s","decl":"theorem coe_fn_injective : Injective fun (μ : OuterMeasure α) (s : Set α) => μ s :=\n  DFunLike.coe_injective\n\n"}
{"name":"MeasureTheory.OuterMeasure.ext","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nμ₁ μ₂ : MeasureTheory.OuterMeasure α\nh : ∀ (s : Set α), Eq (μ₁ s) (μ₂ s)\n⊢ Eq μ₁ μ₂","decl":"@[ext]\ntheorem ext {μ₁ μ₂ : OuterMeasure α} (h : ∀ s, μ₁ s = μ₂ s) : μ₁ = μ₂ :=\n  DFunLike.ext _ _ h\n\n"}
{"name":"MeasureTheory.OuterMeasure.ext_iff","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nμ₁ μ₂ : MeasureTheory.OuterMeasure α\n⊢ Iff (Eq μ₁ μ₂) (∀ (s : Set α), Eq (μ₁ s) (μ₂ s))","decl":"@[ext]\ntheorem ext {μ₁ μ₂ : OuterMeasure α} (h : ∀ s, μ₁ s = μ₂ s) : μ₁ = μ₂ :=\n  DFunLike.ext _ _ h\n\n"}
{"name":"MeasureTheory.OuterMeasure.ext_nonempty","module":"Mathlib.MeasureTheory.OuterMeasure.Basic","initialProofState":"α : Type u_1\nμ₁ μ₂ : MeasureTheory.OuterMeasure α\nh : ∀ (s : Set α), s.Nonempty → Eq (μ₁ s) (μ₂ s)\n⊢ Eq μ₁ μ₂","decl":"/-- A version of `MeasureTheory.OuterMeasure.ext` that assumes `μ₁ s = μ₂ s` on all *nonempty*\nsets `s`, and gets `μ₁ ∅ = μ₂ ∅` from `MeasureTheory.OuterMeasure.empty'`. -/\ntheorem ext_nonempty {μ₁ μ₂ : OuterMeasure α} (h : ∀ s : Set α, s.Nonempty → μ₁ s = μ₂ s) :\n    μ₁ = μ₂ :=\n  ext fun s => s.eq_empty_or_nonempty.elim (fun he => by simp [he]) (h s)\n\n"}
