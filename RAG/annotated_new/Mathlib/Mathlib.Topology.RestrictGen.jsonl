{"name":"Topology.RestrictGenTopology.isOpen_iff","module":"Mathlib.Topology.RestrictGen","initialProofState":"X : Type u_1\ninst‚úù : TopologicalSpace X\nS : Set (Set X)\nt : Set X\nhS : Topology.RestrictGenTopology S\n‚ä¢ Iff (IsOpen t) (‚àÄ (s : Set X), Membership.mem S s ‚Üí IsOpen (Set.preimage Subtype.val t))","decl":"protected theorem isOpen_iff (hS : RestrictGenTopology S) :\n    IsOpen t ‚Üî ‚àÄ s ‚àà S, IsOpen ((‚Üë) ‚Åª¬π' t : Set s) :=\n  ‚ü®fun ht _ _ ‚Ü¶ ht.preimage continuous_subtype_val, hS.1 t‚ü©\n\n"}
{"name":"Topology.RestrictGenTopology.isClosed_iff","module":"Mathlib.Topology.RestrictGen","initialProofState":"X : Type u_1\ninst‚úù : TopologicalSpace X\nS : Set (Set X)\nt : Set X\nhS : Topology.RestrictGenTopology S\n‚ä¢ Iff (IsClosed t) (‚àÄ (s : Set X), Membership.mem S s ‚Üí IsClosed (Set.preimage Subtype.val t))","decl":"protected theorem isClosed_iff (hS : RestrictGenTopology S) :\n    IsClosed t ‚Üî ‚àÄ s ‚àà S, IsClosed ((‚Üë) ‚Åª¬π' t : Set s) := by\n  simp only [‚Üê isOpen_compl_iff, hS.isOpen_iff, preimage_compl]\n\n"}
{"name":"Topology.RestrictGenTopology.continuous_iff","module":"Mathlib.Topology.RestrictGen","initialProofState":"X : Type u_1\ninst‚úù¬π : TopologicalSpace X\nS : Set (Set X)\nY : Type u_2\ninst‚úù : TopologicalSpace Y\nf : X ‚Üí Y\nhS : Topology.RestrictGenTopology S\n‚ä¢ Iff (Continuous f) (‚àÄ (s : Set X), Membership.mem S s ‚Üí ContinuousOn f s)","decl":"protected theorem continuous_iff {Y : Type*} [TopologicalSpace Y] {f : X ‚Üí Y}\n    (hS : RestrictGenTopology S) :\n    Continuous f ‚Üî ‚àÄ s ‚àà S, ContinuousOn f s :=\n  ‚ü®fun h _ _ ‚Ü¶ h.continuousOn, fun h ‚Ü¶ continuous_def.2 fun _u hu ‚Ü¶ hS.isOpen_iff.2 fun s hs ‚Ü¶\n    hu.preimage <| (h s hs).restrict‚ü©\n\n"}
{"name":"Topology.RestrictGenTopology.of_continuous_prop","module":"Mathlib.Topology.RestrictGen","initialProofState":"X : Type u_1\ninst‚úù : TopologicalSpace X\nS : Set (Set X)\nh : ‚àÄ (f : X ‚Üí Prop), (‚àÄ (s : Set X), Membership.mem S s ‚Üí ContinuousOn f s) ‚Üí Continuous f\n‚ä¢ Topology.RestrictGenTopology S","decl":"theorem of_continuous_prop (h : ‚àÄ f : X ‚Üí Prop, (‚àÄ s ‚àà S, ContinuousOn f s) ‚Üí Continuous f) :\n    RestrictGenTopology S where\n  isOpen_of_forall_induced u hu := by\n    simp only [continuousOn_iff_continuous_restrict, continuous_Prop] at *\n    exact h _ hu\n\n"}
{"name":"Topology.RestrictGenTopology.of_isClosed","module":"Mathlib.Topology.RestrictGen","initialProofState":"X : Type u_1\ninst‚úù : TopologicalSpace X\nS : Set (Set X)\nh : ‚àÄ (t : Set X), (‚àÄ (s : Set X), Membership.mem S s ‚Üí IsClosed (Set.preimage Subtype.val t)) ‚Üí IsClosed t\n‚ä¢ Topology.RestrictGenTopology S","decl":"theorem of_isClosed (h : ‚àÄ t : Set X, (‚àÄ s ‚àà S, IsClosed ((‚Üë) ‚Åª¬π' t : Set s)) ‚Üí IsClosed t) :\n    RestrictGenTopology S :=\n  ‚ü®fun _t ht ‚Ü¶ isClosed_compl_iff.1 <| h _ fun s hs ‚Ü¶ (ht s hs).isClosed_compl‚ü©\n\n"}
{"name":"Topology.RestrictGenTopology.enlarge","module":"Mathlib.Topology.RestrictGen","initialProofState":"X : Type u_1\ninst‚úù : TopologicalSpace X\nS T : Set (Set X)\nhS : Topology.RestrictGenTopology S\nhT : ‚àÄ (s : Set X), Membership.mem S s ‚Üí Exists fun t => And (Membership.mem T t) (HasSubset.Subset s t)\n‚ä¢ Topology.RestrictGenTopology T","decl":"protected theorem enlarge {T} (hS : RestrictGenTopology S) (hT : ‚àÄ s ‚àà S, ‚àÉ t ‚àà T, s ‚äÜ t) :\n    RestrictGenTopology T :=\n  of_continuous_prop fun _f hf ‚Ü¶ hS.continuous_iff.2 fun s hs ‚Ü¶\n    let ‚ü®t, htT, hst‚ü© := hT s hs; (hf t htT).mono hst\n\n"}
{"name":"Topology.RestrictGenTopology.mono","module":"Mathlib.Topology.RestrictGen","initialProofState":"X : Type u_1\ninst‚úù : TopologicalSpace X\nS T : Set (Set X)\nhS : Topology.RestrictGenTopology S\nhT : HasSubset.Subset S T\n‚ä¢ Topology.RestrictGenTopology T","decl":"protected theorem mono {T} (hS : RestrictGenTopology S) (hT : S ‚äÜ T) : RestrictGenTopology T :=\n  hS.enlarge fun s hs ‚Ü¶ ‚ü®s, hT hs, Subset.rfl‚ü©\n\n"}
{"name":"Topology.RestrictGenTopology.of_seq","module":"Mathlib.Topology.RestrictGen","initialProofState":"X : Type u_1\ninst‚úù¬π : TopologicalSpace X\nS : Set (Set X)\ninst‚úù : SequentialSpace X\nh : ‚àÄ ‚¶Éu : Nat ‚Üí X‚¶Ñ ‚¶Éx : X‚¶Ñ, Filter.Tendsto u Filter.atTop (nhds x) ‚Üí Membership.mem S (Insert.insert x (Set.range u))\n‚ä¢ Topology.RestrictGenTopology S","decl":"/-- If `X` is a sequential space\nand `S` contains each set of the form `insert x (Set.range u)`\nwhere `u : ‚Ñï ‚Üí X` is a sequence and `x` is its limit,\nthen topology on `X` is generated by its restrictions to the sets of `S`. -/\nlemma of_seq [SequentialSpace X]\n    (h : ‚àÄ ‚¶Éu : ‚Ñï ‚Üí X‚¶Ñ ‚¶Éx : X‚¶Ñ, Tendsto u atTop (ùìù x) ‚Üí insert x (range u) ‚àà S) :\n    RestrictGenTopology S := by\n  refine of_isClosed fun t ht ‚Ü¶ IsSeqClosed.isClosed fun u x hut hux ‚Ü¶ ?_\n  rcases isClosed_induced_iff.1 (ht _ (h hux)) with ‚ü®s, hsc, hst‚ü©\n  rw [Subtype.preimage_val_eq_preimage_val_iff, Set.ext_iff] at hst\n  suffices x ‚àà s by specialize hst x; simp_all\n  refine hsc.mem_of_tendsto hux <| Eventually.of_forall fun k ‚Ü¶ ?_\n  specialize hst (u k)\n  simp_all\n\n"}
{"name":"Topology.RestrictGenTopology.isCompact_of_seq","module":"Mathlib.Topology.RestrictGen","initialProofState":"X : Type u_1\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : SequentialSpace X\n‚ä¢ Topology.RestrictGenTopology (setOf fun K => IsCompact K)","decl":"/-- A sequential space is compactly generated. -/\nlemma isCompact_of_seq [SequentialSpace X] : RestrictGenTopology {K : Set X | IsCompact K} :=\n  of_seq fun _u _x hux ‚Ü¶ hux.isCompact_insert_range\n\n"}
{"name":"Topology.RestrictGenTopology.of_nhds","module":"Mathlib.Topology.RestrictGen","initialProofState":"X : Type u_1\ninst‚úù : TopologicalSpace X\nS : Set (Set X)\nh : ‚àÄ (x : X), Exists fun s => And (Membership.mem S s) (Membership.mem (nhds x) s)\n‚ä¢ Topology.RestrictGenTopology S","decl":"/-- If each point of the space has a neighborhood from the family `S`,\nthen the topology is generated by its restrictions to the sets of `S`. -/\nlemma of_nhds (h : ‚àÄ x, ‚àÉ s ‚àà S, s ‚àà ùìù x) : RestrictGenTopology S :=\n  of_continuous_prop fun _f hf ‚Ü¶ continuous_iff_continuousAt.2 fun x ‚Ü¶\n    let ‚ü®s, hsS, hsx‚ü© := h x\n    (hf s hsS).continuousAt hsx\n\n"}
{"name":"Topology.RestrictGenTopology.isCompact_of_weaklyLocallyCompact","module":"Mathlib.Topology.RestrictGen","initialProofState":"X : Type u_1\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : WeaklyLocallyCompactSpace X\n‚ä¢ Topology.RestrictGenTopology (setOf fun K => IsCompact K)","decl":"/-- A weakly locally compact space is compactly generated. -/\nlemma isCompact_of_weaklyLocallyCompact [WeaklyLocallyCompactSpace X] :\n    RestrictGenTopology {K : Set X | IsCompact K} :=\n  of_nhds exists_compact_mem_nhds\n\n"}
