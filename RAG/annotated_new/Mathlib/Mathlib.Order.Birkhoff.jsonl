{"name":"UpperSet.infIrred_Ici","module":"Mathlib.Order.Birkhoff","initialProofState":"α : Type u_1\ninst✝ : PartialOrder α\na : α\n⊢ InfIrred (UpperSet.Ici a)","decl":"@[simp] lemma infIrred_Ici (a : α) : InfIrred (Ici a) := by\n  refine ⟨fun h ↦ Ici_ne_top h.eq_top, fun s t hst ↦ ?_⟩\n  have := mem_Ici_iff.2 (le_refl a)\n  rw [← hst] at this\n  exact this.imp (fun ha ↦ le_antisymm (le_Ici.2 ha) <| hst.ge.trans inf_le_left) fun ha ↦\n      le_antisymm (le_Ici.2 ha) <| hst.ge.trans inf_le_right\n\n"}
{"name":"UpperSet.infIrred_iff_of_finite","module":"Mathlib.Order.Birkhoff","initialProofState":"α : Type u_1\ninst✝¹ : PartialOrder α\ns : UpperSet α\ninst✝ : Finite α\n⊢ Iff (InfIrred s) (Exists fun a => Eq (UpperSet.Ici a) s)","decl":"@[simp] lemma infIrred_iff_of_finite : InfIrred s ↔ ∃ a, Ici a = s := by\n  refine ⟨fun hs ↦ ?_, ?_⟩\n  · obtain ⟨a, ha, has⟩ := (s : Set α).toFinite.exists_minimal_wrt id _ (coe_nonempty.2 hs.ne_top)\n    exact ⟨a, (hs.2 <| erase_inf_Ici ha <| by simpa [eq_comm] using has).resolve_left\n      (lt_erase.2 ha).ne'⟩\n  · rintro ⟨a, rfl⟩\n    exact infIrred_Ici _\n\n"}
{"name":"LowerSet.supIrred_Iic","module":"Mathlib.Order.Birkhoff","initialProofState":"α : Type u_1\ninst✝ : PartialOrder α\na : α\n⊢ SupIrred (LowerSet.Iic a)","decl":"@[simp] lemma supIrred_Iic (a : α) : SupIrred (Iic a) := by\n  refine ⟨fun h ↦ Iic_ne_bot h.eq_bot, fun s t hst ↦ ?_⟩\n  have := mem_Iic_iff.2 (le_refl a)\n  rw [← hst] at this\n  exact this.imp (fun ha ↦ (le_sup_left.trans_eq hst).antisymm <| Iic_le.2 ha) fun ha ↦\n    (le_sup_right.trans_eq hst).antisymm <| Iic_le.2 ha\n\n"}
{"name":"LowerSet.supIrred_iff_of_finite","module":"Mathlib.Order.Birkhoff","initialProofState":"α : Type u_1\ninst✝¹ : PartialOrder α\ns : LowerSet α\ninst✝ : Finite α\n⊢ Iff (SupIrred s) (Exists fun a => Eq (LowerSet.Iic a) s)","decl":"@[simp] lemma supIrred_iff_of_finite : SupIrred s ↔ ∃ a, Iic a = s := by\n  refine ⟨fun hs ↦ ?_, ?_⟩\n  · obtain ⟨a, ha, has⟩ := (s : Set α).toFinite.exists_maximal_wrt id _ (coe_nonempty.2 hs.ne_bot)\n    exact ⟨a, (hs.2 <| erase_sup_Iic ha <| by simpa [eq_comm] using has).resolve_left\n      (erase_lt.2 ha).ne⟩\n  · rintro ⟨a, rfl⟩\n    exact supIrred_Iic _\n\n"}
{"name":"OrderEmbedding.supIrredLowerSet_apply","module":"Mathlib.Order.Birkhoff","initialProofState":"α : Type u_1\ninst✝ : PartialOrder α\na : α\n⊢ Eq (OrderEmbedding.supIrredLowerSet a) ⟨LowerSet.Iic a, ⋯⟩","decl":"@[simp] lemma supIrredLowerSet_apply (a : α) : supIrredLowerSet a = ⟨Iic a, supIrred_Iic _⟩ := rfl\n"}
{"name":"OrderEmbedding.infIrredUpperSet_apply","module":"Mathlib.Order.Birkhoff","initialProofState":"α : Type u_1\ninst✝ : PartialOrder α\na : α\n⊢ Eq (OrderEmbedding.infIrredUpperSet a) ⟨UpperSet.Ici a, ⋯⟩","decl":"@[simp] lemma infIrredUpperSet_apply (a : α) : infIrredUpperSet a = ⟨Ici a, infIrred_Ici _⟩ := rfl\n\n"}
{"name":"OrderEmbedding.supIrredLowerSet_surjective","module":"Mathlib.Order.Birkhoff","initialProofState":"α : Type u_1\ninst✝¹ : PartialOrder α\ninst✝ : Finite α\n⊢ Function.Surjective ⇑OrderEmbedding.supIrredLowerSet","decl":"lemma supIrredLowerSet_surjective : Surjective (supIrredLowerSet (α := α)) := by\n  aesop (add simp Surjective)\n\n"}
{"name":"OrderEmbedding.infIrredUpperSet_surjective","module":"Mathlib.Order.Birkhoff","initialProofState":"α : Type u_1\ninst✝¹ : PartialOrder α\ninst✝ : Finite α\n⊢ Function.Surjective ⇑OrderEmbedding.infIrredUpperSet","decl":"lemma infIrredUpperSet_surjective : Surjective (infIrredUpperSet (α := α)) := by\n  aesop (add simp Surjective)\n\n"}
{"name":"OrderIso.supIrredLowerSet_apply","module":"Mathlib.Order.Birkhoff","initialProofState":"α : Type u_1\ninst✝¹ : PartialOrder α\ninst✝ : Finite α\na : α\n⊢ Eq (OrderIso.supIrredLowerSet a) ⟨LowerSet.Iic a, ⋯⟩","decl":"@[simp] lemma supIrredLowerSet_apply (a : α) : supIrredLowerSet a = ⟨Iic a, supIrred_Iic _⟩ := rfl\n"}
{"name":"OrderIso.infIrredUpperSet_apply","module":"Mathlib.Order.Birkhoff","initialProofState":"α : Type u_1\ninst✝¹ : PartialOrder α\ninst✝ : Finite α\na : α\n⊢ Eq (OrderIso.infIrredUpperSet a) ⟨UpperSet.Ici a, ⋯⟩","decl":"@[simp] lemma infIrredUpperSet_apply (a : α) : infIrredUpperSet a = ⟨Ici a, infIrred_Ici _⟩ := rfl\n\n"}
{"name":"OrderIso.supIrredLowerSet_symm_apply","module":"Mathlib.Order.Birkhoff","initialProofState":"α : Type u_1\ninst✝³ : SemilatticeSup α\ninst✝² : OrderBot α\ninst✝¹ : Finite α\ns : Subtype fun s => SupIrred s\ninst✝ : Fintype (Subtype fun x => Membership.mem (↑s) x)\n⊢ Eq (OrderIso.supIrredLowerSet.symm s) ((↑↑s).toFinset.sup id)","decl":"@[simp] lemma supIrredLowerSet_symm_apply (s : {s : LowerSet α // SupIrred s}) [Fintype s] :\n    supIrredLowerSet.symm s = (s.1 : Set α).toFinset.sup id := by\n  classical\n  obtain ⟨s, hs⟩ := s\n  obtain ⟨a, rfl⟩ := supIrred_iff_of_finite.1 hs\n  cases nonempty_fintype α\n  have : LocallyFiniteOrder α := Fintype.toLocallyFiniteOrder\n  simp [symm_apply_eq]\n\n"}
{"name":"OrderIso.infIrredUpperSet_symm_apply","module":"Mathlib.Order.Birkhoff","initialProofState":"α : Type u_1\ninst✝³ : SemilatticeInf α\ninst✝² : OrderTop α\ninst✝¹ : Finite α\ns : Subtype fun s => InfIrred s\ninst✝ : Fintype (Subtype fun x => Membership.mem (↑s) x)\n⊢ Eq (OrderIso.infIrredUpperSet.symm s) ((↑↑s).toFinset.inf id)","decl":"@[simp] lemma infIrredUpperSet_symm_apply (s : {s : UpperSet α // InfIrred s}) [Fintype s] :\n    infIrredUpperSet.symm s = (s.1 : Set α).toFinset.inf id := by\n  classical\n  obtain ⟨s, hs⟩ := s\n  obtain ⟨a, rfl⟩ := infIrred_iff_of_finite.1 hs\n  cases nonempty_fintype α\n  have : LocallyFiniteOrder α := Fintype.toLocallyFiniteOrder\n  simp [symm_apply_eq]\n\n"}
{"name":"OrderEmbedding.coe_birkhoffFinset","module":"Mathlib.Order.Birkhoff","initialProofState":"α : Type u_1\ninst✝² : DistribLattice α\ninst✝¹ : Fintype α\ninst✝ : DecidablePred SupIrred\na : α\n⊢ Eq (↑(OrderEmbedding.birkhoffFinset a)) (OrderEmbedding.birkhoffSet a)","decl":"@[simp] lemma coe_birkhoffFinset (a : α) : birkhoffFinset a = birkhoffSet a := by\n  classical\n  -- TODO: This should be a single `simp` call but `simp` refuses to use\n  -- `OrderIso.coe_toOrderEmbedding` and `Fintype.coe_finsetOrderIsoSet_symm`\n  simp [birkhoffFinset]\n  rw [OrderIso.coe_toOrderEmbedding, Fintype.coe_finsetOrderIsoSet_symm]\n  simp\n\n"}
{"name":"OrderEmbedding.birkhoffSet_sup","module":"Mathlib.Order.Birkhoff","initialProofState":"α : Type u_1\ninst✝² : DistribLattice α\ninst✝¹ : Fintype α\ninst✝ : DecidablePred SupIrred\na b : α\n⊢ Eq (OrderEmbedding.birkhoffSet (Max.max a b)) (Union.union (OrderEmbedding.birkhoffSet a) (OrderEmbedding.birkhoffSet b))","decl":"@[simp] lemma birkhoffSet_sup (a b : α) : birkhoffSet (a ⊔ b) = birkhoffSet a ∪ birkhoffSet b := by\n  unfold OrderEmbedding.birkhoffSet; split <;> simp [eq_iff_true_of_subsingleton]\n\n"}
{"name":"OrderEmbedding.birkhoffSet_inf","module":"Mathlib.Order.Birkhoff","initialProofState":"α : Type u_1\ninst✝² : DistribLattice α\ninst✝¹ : Fintype α\ninst✝ : DecidablePred SupIrred\na b : α\n⊢ Eq (OrderEmbedding.birkhoffSet (Min.min a b)) (Inter.inter (OrderEmbedding.birkhoffSet a) (OrderEmbedding.birkhoffSet b))","decl":"@[simp] lemma birkhoffSet_inf (a b : α) : birkhoffSet (a ⊓ b) = birkhoffSet a ∩ birkhoffSet b := by\n  unfold OrderEmbedding.birkhoffSet; split <;> simp [eq_iff_true_of_subsingleton]\n\n"}
{"name":"OrderEmbedding.birkhoffSet_apply","module":"Mathlib.Order.Birkhoff","initialProofState":"α : Type u_1\ninst✝³ : DistribLattice α\ninst✝² : Fintype α\ninst✝¹ : DecidablePred SupIrred\ninst✝ : OrderBot α\na : α\n⊢ Eq (OrderEmbedding.birkhoffSet a) ↑(OrderIso.lowerSetSupIrred a)","decl":"@[simp] lemma birkhoffSet_apply [OrderBot α] (a : α) :\n    birkhoffSet a = OrderIso.lowerSetSupIrred a := by\n  simp [birkhoffSet]; have : Subsingleton (OrderBot α) := inferInstance; convert rfl\n\n"}
{"name":"OrderEmbedding.birkhoffFinset_sup","module":"Mathlib.Order.Birkhoff","initialProofState":"α : Type u_1\ninst✝³ : DistribLattice α\ninst✝² : Fintype α\ninst✝¹ : DecidablePred SupIrred\ninst✝ : DecidableEq α\na b : α\n⊢ Eq (OrderEmbedding.birkhoffFinset (Max.max a b)) (Union.union (OrderEmbedding.birkhoffFinset a) (OrderEmbedding.birkhoffFinset b))","decl":"@[simp] lemma birkhoffFinset_sup (a b : α) :\n    birkhoffFinset (a ⊔ b) = birkhoffFinset a ∪ birkhoffFinset b := by\n  classical\n  dsimp [OrderEmbedding.birkhoffFinset]\n  rw [birkhoffSet_sup, OrderIso.coe_toOrderEmbedding]\n  simp\n\n"}
{"name":"OrderEmbedding.birkhoffFinset_inf","module":"Mathlib.Order.Birkhoff","initialProofState":"α : Type u_1\ninst✝³ : DistribLattice α\ninst✝² : Fintype α\ninst✝¹ : DecidablePred SupIrred\ninst✝ : DecidableEq α\na b : α\n⊢ Eq (OrderEmbedding.birkhoffFinset (Min.min a b)) (Inter.inter (OrderEmbedding.birkhoffFinset a) (OrderEmbedding.birkhoffFinset b))","decl":"@[simp] lemma birkhoffFinset_inf (a b : α) :\n    birkhoffFinset (a ⊓ b) = birkhoffFinset a ∩ birkhoffFinset b := by\n  classical\n  dsimp [OrderEmbedding.birkhoffFinset]\n  rw [birkhoffSet_inf, OrderIso.coe_toOrderEmbedding]\n  simp\n\n"}
{"name":"LatticeHom.birkhoffFinset_injective","module":"Mathlib.Order.Birkhoff","initialProofState":"α : Type u_1\ninst✝² : DistribLattice α\ninst✝¹ : Fintype α\ninst✝ : DecidablePred SupIrred\n⊢ Function.Injective ⇑LatticeHom.birkhoffFinset","decl":"lemma birkhoffFinset_injective : Injective (birkhoffFinset (α := α)) :=\n  OrderEmbedding.birkhoffFinset.injective\n\n"}
{"name":"exists_birkhoff_representation","module":"Mathlib.Order.Birkhoff","initialProofState":"α : Type u\ninst✝¹ : Finite α\ninst✝ : DistribLattice α\n⊢ Exists fun β => Exists fun x => Exists fun x_1 => Exists fun f => Function.Injective ⇑f","decl":"lemma exists_birkhoff_representation.{u} (α : Type u) [Finite α] [DistribLattice α] :\n    ∃ (β : Type u) (_ : DecidableEq β) (_ : Fintype β) (f : LatticeHom α (Finset β)),\n      Injective f := by\n  classical\n  cases nonempty_fintype α\n  exact ⟨{a : α // SupIrred a}, _, inferInstance, _, LatticeHom.birkhoffFinset_injective⟩\n\n"}
