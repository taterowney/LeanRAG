{"name":"Metric.complete_of_convergent_controlled_sequences","module":"Mathlib.Topology.MetricSpace.Cauchy","initialProofState":"α : Type u\ninst✝ : PseudoMetricSpace α\nB : Nat → Real\nhB : ∀ (n : Nat), LT.lt 0 (B n)\nH : ∀ (u : Nat → α), (∀ (N n m : Nat), LE.le N n → LE.le N m → LT.lt (Dist.dist (u n) (u m)) (B N)) → Exists fun x => Filter.Tendsto u Filter.atTop (nhds x)\n⊢ CompleteSpace α","decl":"/-- A very useful criterion to show that a space is complete is to show that all sequences\nwhich satisfy a bound of the form `dist (u n) (u m) < B N` for all `n m ≥ N` are\nconverging. This is often applied for `B N = 2^{-N}`, i.e., with a very fast convergence to\n`0`, which makes it possible to use arguments of converging series, while this is impossible\nto do in general for arbitrary Cauchy sequences. -/\ntheorem Metric.complete_of_convergent_controlled_sequences (B : ℕ → Real) (hB : ∀ n, 0 < B n)\n    (H : ∀ u : ℕ → α, (∀ N n m : ℕ, N ≤ n → N ≤ m → dist (u n) (u m) < B N) →\n      ∃ x, Tendsto u atTop (𝓝 x)) :\n    CompleteSpace α :=\n  UniformSpace.complete_of_convergent_controlled_sequences\n    (fun n => { p : α × α | dist p.1 p.2 < B n }) (fun n => dist_mem_uniformity <| hB n) H\n\n"}
{"name":"Metric.complete_of_cauchySeq_tendsto","module":"Mathlib.Topology.MetricSpace.Cauchy","initialProofState":"α : Type u\ninst✝ : PseudoMetricSpace α\na✝ : ∀ (u : Nat → α), CauchySeq u → Exists fun a => Filter.Tendsto u Filter.atTop (nhds a)\n⊢ CompleteSpace α","decl":"/-- A pseudo-metric space is complete iff every Cauchy sequence converges. -/\ntheorem Metric.complete_of_cauchySeq_tendsto :\n    (∀ u : ℕ → α, CauchySeq u → ∃ a, Tendsto u atTop (𝓝 a)) → CompleteSpace α :=\n  EMetric.complete_of_cauchySeq_tendsto\n\n"}
{"name":"Metric.cauchySeq_iff","module":"Mathlib.Topology.MetricSpace.Cauchy","initialProofState":"α : Type u\nβ : Type v\ninst✝² : PseudoMetricSpace α\ninst✝¹ : Nonempty β\ninst✝ : SemilatticeSup β\nu : β → α\n⊢ Iff (CauchySeq u) (∀ (ε : Real), GT.gt ε 0 → Exists fun N => ∀ (m : β), GE.ge m N → ∀ (n : β), GE.ge n N → LT.lt (Dist.dist (u m) (u n)) ε)","decl":"/-- In a pseudometric space, Cauchy sequences are characterized by the fact that, eventually,\nthe distance between its elements is arbitrarily small -/\n-- Porting note: @[nolint ge_or_gt] doesn't exist\ntheorem Metric.cauchySeq_iff {u : β → α} :\n    CauchySeq u ↔ ∀ ε > 0, ∃ N, ∀ m ≥ N, ∀ n ≥ N, dist (u m) (u n) < ε :=\n  uniformity_basis_dist.cauchySeq_iff\n\n"}
{"name":"Metric.cauchySeq_iff'","module":"Mathlib.Topology.MetricSpace.Cauchy","initialProofState":"α : Type u\nβ : Type v\ninst✝² : PseudoMetricSpace α\ninst✝¹ : Nonempty β\ninst✝ : SemilatticeSup β\nu : β → α\n⊢ Iff (CauchySeq u) (∀ (ε : Real), GT.gt ε 0 → Exists fun N => ∀ (n : β), GE.ge n N → LT.lt (Dist.dist (u n) (u N)) ε)","decl":"/-- A variation around the pseudometric characterization of Cauchy sequences -/\ntheorem Metric.cauchySeq_iff' {u : β → α} :\n    CauchySeq u ↔ ∀ ε > 0, ∃ N, ∀ n ≥ N, dist (u n) (u N) < ε :=\n  uniformity_basis_dist.cauchySeq_iff'\n\n-- see Note [nolint_ge]\n"}
{"name":"Metric.uniformCauchySeqOn_iff","module":"Mathlib.Topology.MetricSpace.Cauchy","initialProofState":"α : Type u\nβ : Type v\ninst✝² : PseudoMetricSpace α\ninst✝¹ : Nonempty β\ninst✝ : SemilatticeSup β\nγ : Type u_3\nF : β → γ → α\ns : Set γ\n⊢ Iff (UniformCauchySeqOn F Filter.atTop s) (∀ (ε : Real), GT.gt ε 0 → Exists fun N => ∀ (m : β), GE.ge m N → ∀ (n : β), GE.ge n N → ∀ (x : γ), Membership.mem s x → LT.lt (Dist.dist (F m x) (F n x)) ε)","decl":"/-- In a pseudometric space, uniform Cauchy sequences are characterized by the fact that,\neventually, the distance between all its elements is uniformly, arbitrarily small. -/\n-- Porting note: no attr @[nolint ge_or_gt]\ntheorem Metric.uniformCauchySeqOn_iff {γ : Type*} {F : β → γ → α} {s : Set γ} :\n    UniformCauchySeqOn F atTop s ↔ ∀ ε > (0 : ℝ),\n      ∃ N : β, ∀ m ≥ N, ∀ n ≥ N, ∀ x ∈ s, dist (F m x) (F n x) < ε := by\n  constructor\n  · intro h ε hε\n    let u := { a : α × α | dist a.fst a.snd < ε }\n    have hu : u ∈ 𝓤 α := Metric.mem_uniformity_dist.mpr ⟨ε, hε, by simp [u]⟩\n    rw [← Filter.eventually_atTop_prod_self' (p := fun m =>\n      ∀ x ∈ s, dist (F m.fst x) (F m.snd x) < ε)]\n    specialize h u hu\n    rw [prod_atTop_atTop_eq] at h\n    exact h.mono fun n h x hx => h x hx\n  · intro h u hu\n    rcases Metric.mem_uniformity_dist.mp hu with ⟨ε, hε, hab⟩\n    rcases h ε hε with ⟨N, hN⟩\n    rw [prod_atTop_atTop_eq, eventually_atTop]\n    use (N, N)\n    intro b hb x hx\n    rcases hb with ⟨hbl, hbr⟩\n    exact hab (hN b.fst hbl.ge b.snd hbr.ge x hx)\n\n"}
{"name":"cauchySeq_of_le_tendsto_0'","module":"Mathlib.Topology.MetricSpace.Cauchy","initialProofState":"α : Type u\nβ : Type v\ninst✝² : PseudoMetricSpace α\ninst✝¹ : Nonempty β\ninst✝ : SemilatticeSup β\ns : β → α\nb : β → Real\nh : ∀ (n m : β), LE.le n m → LE.le (Dist.dist (s n) (s m)) (b n)\nh₀ : Filter.Tendsto b Filter.atTop (nhds 0)\n⊢ CauchySeq s","decl":"/-- If the distance between `s n` and `s m`, `n ≤ m` is bounded above by `b n`\nand `b` converges to zero, then `s` is a Cauchy sequence. -/\ntheorem cauchySeq_of_le_tendsto_0' {s : β → α} (b : β → ℝ)\n    (h : ∀ n m : β, n ≤ m → dist (s n) (s m) ≤ b n) (h₀ : Tendsto b atTop (𝓝 0)) : CauchySeq s :=\n  Metric.cauchySeq_iff'.2 fun ε ε0 => (h₀.eventually (gt_mem_nhds ε0)).exists.imp fun N hN n hn =>\n    calc dist (s n) (s N) = dist (s N) (s n) := dist_comm _ _\n    _ ≤ b N := h _ _ hn\n    _ < ε := hN\n\n"}
{"name":"cauchySeq_of_le_tendsto_0","module":"Mathlib.Topology.MetricSpace.Cauchy","initialProofState":"α : Type u\nβ : Type v\ninst✝² : PseudoMetricSpace α\ninst✝¹ : Nonempty β\ninst✝ : SemilatticeSup β\ns : β → α\nb : β → Real\nh : ∀ (n m N : β), LE.le N n → LE.le N m → LE.le (Dist.dist (s n) (s m)) (b N)\nh₀ : Filter.Tendsto b Filter.atTop (nhds 0)\n⊢ CauchySeq s","decl":"/-- If the distance between `s n` and `s m`, `n, m ≥ N` is bounded above by `b N`\nand `b` converges to zero, then `s` is a Cauchy sequence. -/\ntheorem cauchySeq_of_le_tendsto_0 {s : β → α} (b : β → ℝ)\n    (h : ∀ n m N : β, N ≤ n → N ≤ m → dist (s n) (s m) ≤ b N) (h₀ : Tendsto b atTop (𝓝 0)) :\n    CauchySeq s :=\n  cauchySeq_of_le_tendsto_0' b (fun _n _m hnm => h _ _ _ le_rfl hnm) h₀\n\n"}
{"name":"cauchySeq_bdd","module":"Mathlib.Topology.MetricSpace.Cauchy","initialProofState":"α : Type u\ninst✝ : PseudoMetricSpace α\nu : Nat → α\nhu : CauchySeq u\n⊢ Exists fun R => And (GT.gt R 0) (∀ (m n : Nat), LT.lt (Dist.dist (u m) (u n)) R)","decl":"/-- A Cauchy sequence on the natural numbers is bounded. -/\ntheorem cauchySeq_bdd {u : ℕ → α} (hu : CauchySeq u) : ∃ R > 0, ∀ m n, dist (u m) (u n) < R := by\n  rcases Metric.cauchySeq_iff'.1 hu 1 zero_lt_one with ⟨N, hN⟩\n  rsuffices ⟨R, R0, H⟩ : ∃ R > 0, ∀ n, dist (u n) (u N) < R\n  · exact ⟨_, add_pos R0 R0, fun m n =>\n      lt_of_le_of_lt (dist_triangle_right _ _ _) (add_lt_add (H m) (H n))⟩\n  let R := Finset.sup (Finset.range N) fun n => nndist (u n) (u N)\n  refine ⟨↑R + 1, add_pos_of_nonneg_of_pos R.2 zero_lt_one, fun n => ?_⟩\n  rcases le_or_lt N n with h | h\n  · exact lt_of_lt_of_le (hN _ h) (le_add_of_nonneg_left R.2)\n  · have : _ ≤ R := Finset.le_sup (Finset.mem_range.2 h)\n    exact lt_of_le_of_lt this (lt_add_of_pos_right _ zero_lt_one)\n\n"}
{"name":"cauchySeq_iff_le_tendsto_0","module":"Mathlib.Topology.MetricSpace.Cauchy","initialProofState":"α : Type u\ninst✝ : PseudoMetricSpace α\ns : Nat → α\n⊢ Iff (CauchySeq s) (Exists fun b => And (∀ (n : Nat), LE.le 0 (b n)) (And (∀ (n m N : Nat), LE.le N n → LE.le N m → LE.le (Dist.dist (s n) (s m)) (b N)) (Filter.Tendsto b Filter.atTop (nhds 0))))","decl":"/-- Yet another metric characterization of Cauchy sequences on integers. This one is often the\nmost efficient. -/\ntheorem cauchySeq_iff_le_tendsto_0 {s : ℕ → α} :\n    CauchySeq s ↔\n      ∃ b : ℕ → ℝ,\n        (∀ n, 0 ≤ b n) ∧\n          (∀ n m N : ℕ, N ≤ n → N ≤ m → dist (s n) (s m) ≤ b N) ∧ Tendsto b atTop (𝓝 0) :=\n  ⟨fun hs => by\n    /- `s` is a Cauchy sequence. The sequence `b` will be constructed by taking\n      the supremum of the distances between `s n` and `s m` for `n m ≥ N`.\n      First, we prove that all these distances are bounded, as otherwise the Sup\n      would not make sense. -/\n    let S N := (fun p : ℕ × ℕ => dist (s p.1) (s p.2)) '' { p | p.1 ≥ N ∧ p.2 ≥ N }\n    have hS : ∀ N, ∃ x, ∀ y ∈ S N, y ≤ x := by\n      rcases cauchySeq_bdd hs with ⟨R, -, hR⟩\n      refine fun N => ⟨R, ?_⟩\n      rintro _ ⟨⟨m, n⟩, _, rfl⟩\n      exact le_of_lt (hR m n)\n    -- Prove that it bounds the distances of points in the Cauchy sequence\n    have ub : ∀ m n N, N ≤ m → N ≤ n → dist (s m) (s n) ≤ sSup (S N) := fun m n N hm hn =>\n      le_csSup (hS N) ⟨⟨_, _⟩, ⟨hm, hn⟩, rfl⟩\n    have S0m : ∀ n, (0 : ℝ) ∈ S n := fun n => ⟨⟨n, n⟩, ⟨le_rfl, le_rfl⟩, dist_self _⟩\n    have S0 := fun n => le_csSup (hS n) (S0m n)\n    -- Prove that it tends to `0`, by using the Cauchy property of `s`\n    refine ⟨fun N => sSup (S N), S0, ub, Metric.tendsto_atTop.2 fun ε ε0 => ?_⟩\n    refine (Metric.cauchySeq_iff.1 hs (ε / 2) (half_pos ε0)).imp fun N hN n hn => ?_\n    rw [Real.dist_0_eq_abs, abs_of_nonneg (S0 n)]\n    refine lt_of_le_of_lt (csSup_le ⟨_, S0m _⟩ ?_) (half_lt_self ε0)\n    rintro _ ⟨⟨m', n'⟩, ⟨hm', hn'⟩, rfl⟩\n    exact le_of_lt (hN _ (le_trans hn hm') _ (le_trans hn hn')),\n   fun ⟨b, _, b_bound, b_lim⟩ => cauchySeq_of_le_tendsto_0 b b_bound b_lim⟩\n\n"}
{"name":"Metric.exists_subseq_bounded_of_cauchySeq","module":"Mathlib.Topology.MetricSpace.Cauchy","initialProofState":"α : Type u\ninst✝ : PseudoMetricSpace α\nu : Nat → α\nhu : CauchySeq u\nb : Nat → Real\nhb : ∀ (n : Nat), LT.lt 0 (b n)\n⊢ Exists fun f => And (StrictMono f) (∀ (n m : Nat), GE.ge m (f n) → LT.lt (Dist.dist (u m) (u (f n))) (b n))","decl":"lemma Metric.exists_subseq_bounded_of_cauchySeq (u : ℕ → α) (hu : CauchySeq u) (b : ℕ → ℝ)\n    (hb : ∀ n, 0 < b n) :\n    ∃ f : ℕ → ℕ, StrictMono f ∧ ∀ n, ∀ m ≥ f n, dist (u m) (u (f n)) < b n := by\n  rw [cauchySeq_iff] at hu\n  have hu' : ∀ k, ∀ᶠ (n : ℕ) in atTop, ∀ m ≥ n, dist (u m) (u n) < b k := by\n    intro k\n    rw [eventually_atTop]\n    obtain ⟨N, hN⟩ := hu (b k) (hb k)\n    exact ⟨N, fun m hm r hr => hN r (hm.trans hr) m hm⟩\n  exact Filter.extraction_forall_of_eventually hu'\n\n"}
