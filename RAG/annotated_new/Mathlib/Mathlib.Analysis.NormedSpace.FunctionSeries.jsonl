{"name":"tendstoUniformlyOn_tsum","module":"Mathlib.Analysis.NormedSpace.FunctionSeries","initialProofState":"α : Type u_1\nβ : Type u_2\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : CompleteSpace F\nu : α → Real\nf : α → β → F\nhu : Summable u\ns : Set β\nhfu : ∀ (n : α) (x : β), Membership.mem s x → LE.le (Norm.norm (f n x)) (u n)\n⊢ TendstoUniformlyOn (fun t x => t.sum fun n => f n x) (fun x => tsum fun n => f n x) Filter.atTop s","decl":"/-- An infinite sum of functions with summable sup norm is the uniform limit of its partial sums.\nVersion relative to a set, with general index set. -/\ntheorem tendstoUniformlyOn_tsum {f : α → β → F} (hu : Summable u) {s : Set β}\n    (hfu : ∀ n x, x ∈ s → ‖f n x‖ ≤ u n) :\n    TendstoUniformlyOn (fun t : Finset α => fun x => ∑ n ∈ t, f n x) (fun x => ∑' n, f n x) atTop\n      s := by\n  refine tendstoUniformlyOn_iff.2 fun ε εpos => ?_\n  filter_upwards [(tendsto_order.1 (tendsto_tsum_compl_atTop_zero u)).2 _ εpos] with t ht x hx\n  have A : Summable fun n => ‖f n x‖ :=\n    .of_nonneg_of_le (fun _ ↦ norm_nonneg _) (fun n => hfu n x hx) hu\n  rw [dist_eq_norm, ← sum_add_tsum_subtype_compl A.of_norm t, add_sub_cancel_left]\n  apply lt_of_le_of_lt _ ht\n  apply (norm_tsum_le_tsum_norm (A.subtype _)).trans\n  exact tsum_le_tsum (fun n => hfu _ _ hx) (A.subtype _) (hu.subtype _)\n\n"}
{"name":"tendstoUniformlyOn_tsum_nat","module":"Mathlib.Analysis.NormedSpace.FunctionSeries","initialProofState":"β : Type u_2\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : CompleteSpace F\nf : Nat → β → F\nu : Nat → Real\nhu : Summable u\ns : Set β\nhfu : ∀ (n : Nat) (x : β), Membership.mem s x → LE.le (Norm.norm (f n x)) (u n)\n⊢ TendstoUniformlyOn (fun N x => (Finset.range N).sum fun n => f n x) (fun x => tsum fun n => f n x) Filter.atTop s","decl":"/-- An infinite sum of functions with summable sup norm is the uniform limit of its partial sums.\nVersion relative to a set, with index set `ℕ`. -/\ntheorem tendstoUniformlyOn_tsum_nat {f : ℕ → β → F} {u : ℕ → ℝ} (hu : Summable u) {s : Set β}\n    (hfu : ∀ n x, x ∈ s → ‖f n x‖ ≤ u n) :\n    TendstoUniformlyOn (fun N => fun x => ∑ n ∈ Finset.range N, f n x) (fun x => ∑' n, f n x) atTop\n      s :=\n  fun v hv => tendsto_finset_range.eventually (tendstoUniformlyOn_tsum hu hfu v hv)\n\n"}
{"name":"tendstoUniformlyOn_tsum_of_cofinite_eventually","module":"Mathlib.Analysis.NormedSpace.FunctionSeries","initialProofState":"β : Type u_2\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : CompleteSpace F\nι : Type u_4\nf : ι → β → F\nu : ι → Real\nhu : Summable u\ns : Set β\nhfu : Filter.Eventually (fun n => ∀ (x : β), Membership.mem s x → LE.le (Norm.norm (f n x)) (u n)) Filter.cofinite\n⊢ TendstoUniformlyOn (fun t x => t.sum fun n => f n x) (fun x => tsum fun n => f n x) Filter.atTop s","decl":"/-- An infinite sum of functions with eventually summable sup norm is the uniform limit of its\npartial sums. Version relative to a set, with general index set. -/\ntheorem tendstoUniformlyOn_tsum_of_cofinite_eventually {ι : Type*} {f : ι → β → F} {u : ι → ℝ}\n    (hu : Summable u) {s : Set β} (hfu : ∀ᶠ n in cofinite, ∀ x ∈ s, ‖f n x‖ ≤ u n) :\n    TendstoUniformlyOn (fun t x => ∑ n ∈ t, f n x) (fun x => ∑' n, f n x) atTop s := by\n  classical\n  refine tendstoUniformlyOn_iff.2 fun ε εpos => ?_\n  have := (tendsto_order.1 (tendsto_tsum_compl_atTop_zero u)).2 _ εpos\n  simp only [not_forall, Classical.not_imp, not_le, gt_iff_lt,\n    eventually_atTop, ge_iff_le, Finset.le_eq_subset] at *\n  obtain ⟨t, ht⟩ := this\n  rw [eventually_iff_exists_mem] at hfu\n  obtain ⟨N, hN, HN⟩ := hfu\n  refine ⟨hN.toFinset ∪ t, fun n hn x hx => ?_⟩\n  have A : Summable fun n => ‖f n x‖ := by\n    apply Summable.add_compl (s := hN.toFinset) Summable.of_finite\n    apply Summable.of_nonneg_of_le (fun _ ↦ norm_nonneg _) _ (hu.subtype _)\n    simp only [comp_apply, Subtype.forall, Set.mem_compl_iff, Finset.mem_coe]\n    aesop\n  rw [dist_eq_norm, ← sum_add_tsum_subtype_compl A.of_norm n, add_sub_cancel_left]\n  apply lt_of_le_of_lt _ (ht n (Finset.union_subset_right hn))\n  apply (norm_tsum_le_tsum_norm (A.subtype _)).trans\n  apply tsum_le_tsum _ (A.subtype _) (hu.subtype _)\n  simp only [comp_apply, Subtype.forall, imp_false]\n  apply fun i hi => HN i ?_ x hx\n  have : ¬ i ∈ hN.toFinset := fun hg ↦ hi (Finset.union_subset_left hn hg)\n  aesop\n\n"}
{"name":"tendstoUniformlyOn_tsum_nat_eventually","module":"Mathlib.Analysis.NormedSpace.FunctionSeries","initialProofState":"α : Type u_4\nF : Type u_5\ninst✝¹ : NormedAddCommGroup F\ninst✝ : CompleteSpace F\nf : Nat → α → F\nu : Nat → Real\nhu : Summable u\ns : Set α\nhfu : Filter.Eventually (fun n => ∀ (x : α), Membership.mem s x → LE.le (Norm.norm (f n x)) (u n)) Filter.atTop\n⊢ TendstoUniformlyOn (fun N x => (Finset.range N).sum fun n => f n x) (fun x => tsum fun n => f n x) Filter.atTop s","decl":"theorem tendstoUniformlyOn_tsum_nat_eventually {α F : Type*} [NormedAddCommGroup F]\n    [CompleteSpace F] {f : ℕ → α → F} {u : ℕ → ℝ} (hu : Summable u) {s : Set α}\n    (hfu : ∀ᶠ n in atTop, ∀ x ∈ s, ‖f n x‖ ≤ u n) :\n    TendstoUniformlyOn (fun N x => ∑ n ∈ Finset.range N, f n x)\n       (fun x => ∑' n, f n x) atTop s :=\n  fun v hv ↦ tendsto_finset_range.eventually <|\n    tendstoUniformlyOn_tsum_of_cofinite_eventually hu (Nat.cofinite_eq_atTop ▸ hfu) v hv\n\n"}
{"name":"tendstoUniformly_tsum","module":"Mathlib.Analysis.NormedSpace.FunctionSeries","initialProofState":"α : Type u_1\nβ : Type u_2\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : CompleteSpace F\nu : α → Real\nf : α → β → F\nhu : Summable u\nhfu : ∀ (n : α) (x : β), LE.le (Norm.norm (f n x)) (u n)\n⊢ TendstoUniformly (fun t x => t.sum fun n => f n x) (fun x => tsum fun n => f n x) Filter.atTop","decl":"/-- An infinite sum of functions with summable sup norm is the uniform limit of its partial sums.\nVersion with general index set. -/\ntheorem tendstoUniformly_tsum {f : α → β → F} (hu : Summable u) (hfu : ∀ n x, ‖f n x‖ ≤ u n) :\n    TendstoUniformly (fun t : Finset α => fun x => ∑ n ∈ t, f n x)\n      (fun x => ∑' n, f n x) atTop := by\n  rw [← tendstoUniformlyOn_univ]; exact tendstoUniformlyOn_tsum hu fun n x _ => hfu n x\n\n"}
{"name":"tendstoUniformly_tsum_nat","module":"Mathlib.Analysis.NormedSpace.FunctionSeries","initialProofState":"β : Type u_2\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : CompleteSpace F\nf : Nat → β → F\nu : Nat → Real\nhu : Summable u\nhfu : ∀ (n : Nat) (x : β), LE.le (Norm.norm (f n x)) (u n)\n⊢ TendstoUniformly (fun N x => (Finset.range N).sum fun n => f n x) (fun x => tsum fun n => f n x) Filter.atTop","decl":"/-- An infinite sum of functions with summable sup norm is the uniform limit of its partial sums.\nVersion with index set `ℕ`. -/\ntheorem tendstoUniformly_tsum_nat {f : ℕ → β → F} {u : ℕ → ℝ} (hu : Summable u)\n    (hfu : ∀ n x, ‖f n x‖ ≤ u n) :\n    TendstoUniformly (fun N => fun x => ∑ n ∈ Finset.range N, f n x) (fun x => ∑' n, f n x)\n      atTop :=\n  fun v hv => tendsto_finset_range.eventually (tendstoUniformly_tsum hu hfu v hv)\n\n"}
{"name":"tendstoUniformly_tsum_of_cofinite_eventually","module":"Mathlib.Analysis.NormedSpace.FunctionSeries","initialProofState":"β : Type u_2\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : CompleteSpace F\nι : Type u_4\nf : ι → β → F\nu : ι → Real\nhu : Summable u\nhfu : Filter.Eventually (fun n => ∀ (x : β), LE.le (Norm.norm (f n x)) (u n)) Filter.cofinite\n⊢ TendstoUniformly (fun t x => t.sum fun n => f n x) (fun x => tsum fun n => f n x) Filter.atTop","decl":"/-- An infinite sum of functions with eventually summable sup norm is the uniform limit of its\npartial sums. Version with general index set. -/\ntheorem tendstoUniformly_tsum_of_cofinite_eventually {ι : Type*} {f : ι → β → F} {u : ι → ℝ}\n    (hu : Summable u) (hfu : ∀ᶠ (n : ι) in cofinite, ∀ x : β, ‖f n x‖ ≤ u n) :\n    TendstoUniformly (fun t x => ∑ n ∈ t, f n x) (fun x => ∑' n, f n x) atTop := by\n  rw [← tendstoUniformlyOn_univ]\n  apply tendstoUniformlyOn_tsum_of_cofinite_eventually hu\n  simpa using hfu\n\n"}
{"name":"continuousOn_tsum","module":"Mathlib.Analysis.NormedSpace.FunctionSeries","initialProofState":"α : Type u_1\nβ : Type u_2\nF : Type u_3\ninst✝² : NormedAddCommGroup F\ninst✝¹ : CompleteSpace F\nu : α → Real\ninst✝ : TopologicalSpace β\nf : α → β → F\ns : Set β\nhf : ∀ (i : α), ContinuousOn (f i) s\nhu : Summable u\nhfu : ∀ (n : α) (x : β), Membership.mem s x → LE.le (Norm.norm (f n x)) (u n)\n⊢ ContinuousOn (fun x => tsum fun n => f n x) s","decl":"/-- An infinite sum of functions with summable sup norm is continuous on a set if each individual\nfunction is. -/\ntheorem continuousOn_tsum [TopologicalSpace β] {f : α → β → F} {s : Set β}\n    (hf : ∀ i, ContinuousOn (f i) s) (hu : Summable u) (hfu : ∀ n x, x ∈ s → ‖f n x‖ ≤ u n) :\n    ContinuousOn (fun x => ∑' n, f n x) s := by\n  classical\n    refine (tendstoUniformlyOn_tsum hu hfu).continuousOn (Eventually.of_forall ?_)\n    intro t\n    exact continuousOn_finset_sum _ fun i _ => hf i\n\n"}
{"name":"continuous_tsum","module":"Mathlib.Analysis.NormedSpace.FunctionSeries","initialProofState":"α : Type u_1\nβ : Type u_2\nF : Type u_3\ninst✝² : NormedAddCommGroup F\ninst✝¹ : CompleteSpace F\nu : α → Real\ninst✝ : TopologicalSpace β\nf : α → β → F\nhf : ∀ (i : α), Continuous (f i)\nhu : Summable u\nhfu : ∀ (n : α) (x : β), LE.le (Norm.norm (f n x)) (u n)\n⊢ Continuous fun x => tsum fun n => f n x","decl":"/-- An infinite sum of functions with summable sup norm is continuous if each individual\nfunction is. -/\ntheorem continuous_tsum [TopologicalSpace β] {f : α → β → F} (hf : ∀ i, Continuous (f i))\n    (hu : Summable u) (hfu : ∀ n x, ‖f n x‖ ≤ u n) : Continuous fun x => ∑' n, f n x := by\n  simp_rw [continuous_iff_continuousOn_univ] at hf ⊢\n  exact continuousOn_tsum hf hu fun n x _ => hfu n x\n"}
