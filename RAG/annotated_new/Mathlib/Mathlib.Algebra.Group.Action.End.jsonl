{"name":"AddAction.compHom_vadd_def","module":"Mathlib.Algebra.Group.Action.End","initialProofState":"E : Type u_4\nF : Type u_5\nG : Type u_6\ninst✝² : AddMonoid E\ninst✝¹ : AddMonoid F\ninst✝ : AddAction F G\nf : AddMonoidHom E F\na : E\nx : G\n⊢ Eq (HVAdd.hVAdd a x) (HVAdd.hVAdd (f a) x)","decl":"@[to_additive]\nlemma compHom_smul_def\n    {E F G : Type*} [Monoid E] [Monoid F] [MulAction F G] (f : E →* F) (a : E) (x : G) :\n    letI : MulAction E G := MulAction.compHom _ f\n    a • x = (f a) • x := rfl\n\n"}
{"name":"MulAction.compHom_smul_def","module":"Mathlib.Algebra.Group.Action.End","initialProofState":"E : Type u_4\nF : Type u_5\nG : Type u_6\ninst✝² : Monoid E\ninst✝¹ : Monoid F\ninst✝ : MulAction F G\nf : MonoidHom E F\na : E\nx : G\n⊢ Eq (HSMul.hSMul a x) (HSMul.hSMul (f a) x)","decl":"@[to_additive]\nlemma compHom_smul_def\n    {E F G : Type*} [Monoid E] [Monoid F] [MulAction F G] (f : E →* F) (a : E) (x : G) :\n    letI : MulAction E G := MulAction.compHom _ f\n    a • x = (f a) • x := rfl\n\n"}
{"name":"MonoidHom.smulOneHom_apply","module":"Mathlib.Algebra.Group.Action.End","initialProofState":"M : Type u_4\nN : Type u_5\ninst✝³ : Monoid M\ninst✝² : MulOneClass N\ninst✝¹ : MulAction M N\ninst✝ : IsScalarTower M N N\nx : M\n⊢ Eq (MonoidHom.smulOneHom x) (HSMul.hSMul x 1)","decl":"/-- If the multiplicative action of `M` on `N` is compatible with multiplication on `N`, then\n`fun x ↦ x • 1` is a monoid homomorphism from `M` to `N`. -/\n@[to_additive (attr := simps)\n\"If the additive action of `M` on `N` is compatible with addition on `N`, then\n`fun x ↦ x +ᵥ 0` is an additive monoid homomorphism from `M` to `N`.\"]\ndef MonoidHom.smulOneHom {M N} [Monoid M] [MulOneClass N] [MulAction M N] [IsScalarTower M N N] :\n    M →* N where\n  toFun x := x • (1 : N)\n  map_one' := one_smul _ _\n  map_mul' x y := by rw [smul_one_mul, smul_smul]\n\n"}
{"name":"AddMonoidHom.vaddZeroHom_apply","module":"Mathlib.Algebra.Group.Action.End","initialProofState":"M : Type u_4\nN : Type u_5\ninst✝³ : AddMonoid M\ninst✝² : AddZeroClass N\ninst✝¹ : AddAction M N\ninst✝ : VAddAssocClass M N N\nx : M\n⊢ Eq (AddMonoidHom.vaddZeroHom x) (HVAdd.hVAdd x 0)","decl":"/-- If the multiplicative action of `M` on `N` is compatible with multiplication on `N`, then\n`fun x ↦ x • 1` is a monoid homomorphism from `M` to `N`. -/\n@[to_additive (attr := simps)\n\"If the additive action of `M` on `N` is compatible with addition on `N`, then\n`fun x ↦ x +ᵥ 0` is an additive monoid homomorphism from `M` to `N`.\"]\ndef MonoidHom.smulOneHom {M N} [Monoid M] [MulOneClass N] [MulAction M N] [IsScalarTower M N N] :\n    M →* N where\n  toFun x := x • (1 : N)\n  map_one' := one_smul _ _\n  map_mul' x y := by rw [smul_one_mul, smul_smul]\n\n"}
{"name":"Function.End.smul_def","module":"Mathlib.Algebra.Group.Action.End","initialProofState":"α : Type u_3\nf : Function.End α\na : α\n⊢ Eq (HSMul.hSMul f a) (f a)","decl":"@[simp] lemma Function.End.smul_def (f : Function.End α) (a : α) : f • a = f a := rfl\n\n--TODO - This statement should be somethting like `toFun (f * g) = toFun f ∘ toFun g`\n"}
{"name":"Function.End.mul_def","module":"Mathlib.Algebra.Group.Action.End","initialProofState":"α : Type u_3\nf g : Function.End α\n⊢ Eq (HMul.hMul f g) (Function.comp f g)","decl":"lemma Function.End.mul_def (f g : Function.End α) : (f * g) = f ∘ g := rfl\n\n--TODO - This statement should be somethting like `toFun 1 = id`\n"}
{"name":"Function.End.one_def","module":"Mathlib.Algebra.Group.Action.End","initialProofState":"α : Type u_3\n⊢ Eq 1 id","decl":"lemma Function.End.one_def : (1 : Function.End α) = id := rfl\n\n"}
