{"name":"Complex.hasStrictDerivAt_tan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.ComplexDeriv","initialProofState":"x : Complex\nh : Ne (Complex.cos x) 0\n⊢ HasStrictDerivAt Complex.tan (HDiv.hDiv 1 (HPow.hPow (Complex.cos x) 2)) x","decl":"theorem hasStrictDerivAt_tan {x : ℂ} (h : cos x ≠ 0) : HasStrictDerivAt tan (1 / cos x ^ 2) x := by\n  convert (hasStrictDerivAt_sin x).div (hasStrictDerivAt_cos x) h using 1\n  rw_mod_cast [← sin_sq_add_cos_sq x]\n  ring\n\n"}
{"name":"Complex.hasDerivAt_tan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.ComplexDeriv","initialProofState":"x : Complex\nh : Ne (Complex.cos x) 0\n⊢ HasDerivAt Complex.tan (HDiv.hDiv 1 (HPow.hPow (Complex.cos x) 2)) x","decl":"theorem hasDerivAt_tan {x : ℂ} (h : cos x ≠ 0) : HasDerivAt tan (1 / cos x ^ 2) x :=\n  (hasStrictDerivAt_tan h).hasDerivAt\n\n"}
{"name":"Complex.tendsto_abs_tan_of_cos_eq_zero","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.ComplexDeriv","initialProofState":"x : Complex\nhx : Eq (Complex.cos x) 0\n⊢ Filter.Tendsto (fun x => Complex.abs (Complex.tan x)) (nhdsWithin x (HasCompl.compl (Singleton.singleton x))) Filter.atTop","decl":"theorem tendsto_abs_tan_of_cos_eq_zero {x : ℂ} (hx : cos x = 0) :\n    Tendsto (fun x => abs (tan x)) (𝓝[≠] x) atTop := by\n  simp only [tan_eq_sin_div_cos, ← norm_eq_abs, norm_div]\n  have A : sin x ≠ 0 := fun h => by simpa [*, sq] using sin_sq_add_cos_sq x\n  have B : Tendsto cos (𝓝[≠] x) (𝓝[≠] 0) :=\n    hx ▸ (hasDerivAt_cos x).tendsto_punctured_nhds (neg_ne_zero.2 A)\n  exact continuous_sin.continuousWithinAt.norm.mul_atTop (norm_pos_iff.2 A)\n    (tendsto_norm_nhdsNE_zero.comp B).inv_tendsto_nhdsGT_zero\n\n"}
{"name":"Complex.tendsto_abs_tan_atTop","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.ComplexDeriv","initialProofState":"k : Int\n⊢ Filter.Tendsto (fun x => Complex.abs (Complex.tan x)) (nhdsWithin (HDiv.hDiv (HMul.hMul (HAdd.hAdd (HMul.hMul 2 ↑k) 1) ↑Real.pi) 2) (HasCompl.compl (Singleton.singleton (HDiv.hDiv (HMul.hMul (HAdd.hAdd (HMul.hMul 2 ↑k) 1) ↑Real.pi) 2)))) Filter.atTop","decl":"theorem tendsto_abs_tan_atTop (k : ℤ) :\n    Tendsto (fun x => abs (tan x)) (𝓝[≠] ((2 * k + 1) * π / 2 : ℂ)) atTop :=\n  tendsto_abs_tan_of_cos_eq_zero <| cos_eq_zero_iff.2 ⟨k, rfl⟩\n\n"}
{"name":"Complex.continuousAt_tan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.ComplexDeriv","initialProofState":"x : Complex\n⊢ Iff (ContinuousAt Complex.tan x) (Ne (Complex.cos x) 0)","decl":"@[simp]\ntheorem continuousAt_tan {x : ℂ} : ContinuousAt tan x ↔ cos x ≠ 0 := by\n  refine ⟨fun hc h₀ => ?_, fun h => (hasDerivAt_tan h).continuousAt⟩\n  exact not_tendsto_nhds_of_tendsto_atTop (tendsto_abs_tan_of_cos_eq_zero h₀) _\n    (hc.norm.tendsto.mono_left inf_le_left)\n\n"}
{"name":"Complex.differentiableAt_tan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.ComplexDeriv","initialProofState":"x : Complex\n⊢ Iff (DifferentiableAt Complex Complex.tan x) (Ne (Complex.cos x) 0)","decl":"@[simp]\ntheorem differentiableAt_tan {x : ℂ} : DifferentiableAt ℂ tan x ↔ cos x ≠ 0 :=\n  ⟨fun h => continuousAt_tan.1 h.continuousAt, fun h => (hasDerivAt_tan h).differentiableAt⟩\n\n"}
{"name":"Complex.deriv_tan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.ComplexDeriv","initialProofState":"x : Complex\n⊢ Eq (deriv Complex.tan x) (HDiv.hDiv 1 (HPow.hPow (Complex.cos x) 2))","decl":"@[simp]\ntheorem deriv_tan (x : ℂ) : deriv tan x = 1 / cos x ^ 2 :=\n  if h : cos x = 0 then by\n    have : ¬DifferentiableAt ℂ tan x := mt differentiableAt_tan.1 (Classical.not_not.2 h)\n    simp [deriv_zero_of_not_differentiableAt this, h, sq]\n  else (hasDerivAt_tan h).deriv\n\n"}
{"name":"Complex.contDiffAt_tan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.ComplexDeriv","initialProofState":"x : Complex\nn : WithTop ENat\n⊢ Iff (ContDiffAt Complex n Complex.tan x) (Ne (Complex.cos x) 0)","decl":"@[simp]\ntheorem contDiffAt_tan {x : ℂ} {n : WithTop ℕ∞} : ContDiffAt ℂ n tan x ↔ cos x ≠ 0 :=\n  ⟨fun h => continuousAt_tan.1 h.continuousAt, contDiff_sin.contDiffAt.div contDiff_cos.contDiffAt⟩\n\n"}
