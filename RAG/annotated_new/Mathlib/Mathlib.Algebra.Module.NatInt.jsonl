{"name":"Nat.cast_smul_eq_nsmul","module":"Mathlib.Algebra.Module.NatInt","initialProofState":"R : Type u_1\nM : Type u_3\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nn : Nat\nb : M\n⊢ Eq (HSMul.hSMul (↑n) b) (HSMul.hSMul n b)","decl":"/-- `nsmul` is equal to any other module structure via a cast. -/\n@[norm_cast]\nlemma Nat.cast_smul_eq_nsmul (n : ℕ) (b : M) : (n : R) • b = n • b := by\n  induction n with\n  | zero => rw [Nat.cast_zero, zero_smul, zero_smul]\n  | succ n ih => rw [Nat.cast_succ, add_smul, add_smul, one_smul, ih, one_smul]\n\n"}
{"name":"ofNat_smul_eq_nsmul","module":"Mathlib.Algebra.Module.NatInt","initialProofState":"R : Type u_1\nM : Type u_3\ninst✝³ : Semiring R\ninst✝² : AddCommMonoid M\ninst✝¹ : Module R M\nn : Nat\ninst✝ : n.AtLeastTwo\nb : M\n⊢ Eq (HSMul.hSMul (OfNat.ofNat n) b) (HSMul.hSMul (OfNat.ofNat n) b)","decl":"/-- `nsmul` is equal to any other module structure via a cast. -/\nlemma ofNat_smul_eq_nsmul (n : ℕ) [n.AtLeastTwo] (b : M) :\n    (ofNat(n) : R) • b = ofNat(n) • b := Nat.cast_smul_eq_nsmul ..\n\n"}
{"name":"nat_smul_eq_nsmul","module":"Mathlib.Algebra.Module.NatInt","initialProofState":"M : Type u_3\ninst✝ : AddCommMonoid M\nh : Module Nat M\nn : Nat\nx : M\n⊢ Eq (SMul.smul n x) (HSMul.hSMul n x)","decl":"/-- Convert back any exotic `ℕ`-smul to the canonical instance. This should not be needed since in\nmathlib all `AddCommMonoid`s should normally have exactly one `ℕ`-module structure by design.\n-/\ntheorem nat_smul_eq_nsmul (h : Module ℕ M) (n : ℕ) (x : M) : @SMul.smul ℕ M h.toSMul n x = n • x :=\n  Nat.cast_smul_eq_nsmul ..\n\n"}
{"name":"AddCommMonoid.nat_isScalarTower","module":"Mathlib.Algebra.Module.NatInt","initialProofState":"R : Type u_1\nM : Type u_3\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\n⊢ IsScalarTower Nat R M","decl":"instance AddCommMonoid.nat_isScalarTower : IsScalarTower ℕ R M where\n  smul_assoc n x y := by\n    induction n with\n    | zero => simp only [zero_smul]\n    | succ n ih => simp only [add_smul, one_smul, ih]\n\n"}
{"name":"map_natCast_smul","module":"Mathlib.Algebra.Module.NatInt","initialProofState":"M : Type u_3\nM₂ : Type u_4\ninst✝⁷ : AddCommMonoid M\ninst✝⁶ : AddCommMonoid M₂\nF : Type u_5\ninst✝⁵ : FunLike F M M₂\ninst✝⁴ : AddMonoidHomClass F M M₂\nf : F\nR : Type u_6\nS : Type u_7\ninst✝³ : Semiring R\ninst✝² : Semiring S\ninst✝¹ : Module R M\ninst✝ : Module S M₂\nx : Nat\na : M\n⊢ Eq (f (HSMul.hSMul (↑x) a)) (HSMul.hSMul (↑x) (f a))","decl":"theorem map_natCast_smul [AddCommMonoid M] [AddCommMonoid M₂] {F : Type*} [FunLike F M M₂]\n    [AddMonoidHomClass F M M₂] (f : F) (R S : Type*) [Semiring R] [Semiring S] [Module R M]\n    [Module S M₂] (x : ℕ) (a : M) : f ((x : R) • a) = (x : S) • f a := by\n  simp only [Nat.cast_smul_eq_nsmul, AddMonoidHom.map_nsmul, map_nsmul]\n\n"}
{"name":"Nat.smul_one_eq_cast","module":"Mathlib.Algebra.Module.NatInt","initialProofState":"R : Type u_5\ninst✝ : NonAssocSemiring R\nm : Nat\n⊢ Eq (HSMul.hSMul m 1) ↑m","decl":"theorem Nat.smul_one_eq_cast {R : Type*} [NonAssocSemiring R] (m : ℕ) : m • (1 : R) = ↑m := by\n  rw [nsmul_eq_mul, mul_one]\n\n"}
{"name":"Int.smul_one_eq_cast","module":"Mathlib.Algebra.Module.NatInt","initialProofState":"R : Type u_5\ninst✝ : NonAssocRing R\nm : Int\n⊢ Eq (HSMul.hSMul m 1) ↑m","decl":"theorem Int.smul_one_eq_cast {R : Type*} [NonAssocRing R] (m : ℤ) : m • (1 : R) = ↑m := by\n  rw [zsmul_eq_mul, mul_one]\n"}
