{"name":"CategoryTheory.NatTrans.IsMonoidal.tensor","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝⁵ : CategoryTheory.Category.{v₁, u₁} C\ninst✝⁴ : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝³ : CategoryTheory.Category.{v₂, u₂} D\ninst✝² : CategoryTheory.MonoidalCategory D\nF₁ F₂ : CategoryTheory.Functor C D\nτ : Quiver.Hom F₁ F₂\ninst✝¹ : F₁.LaxMonoidal\ninst✝ : F₂.LaxMonoidal\nself : CategoryTheory.NatTrans.IsMonoidal τ\nX Y : C\n⊢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Functor.LaxMonoidal.μ F₁ X Y) (τ.app (CategoryTheory.MonoidalCategoryStruct.tensorObj X Y))) (CategoryTheory.CategoryStruct.comp (CategoryTheory.MonoidalCategoryStruct.tensorHom (τ.app X) (τ.app Y)) (CategoryTheory.Functor.LaxMonoidal.μ F₂ X Y))","decl":"/-- A natural transformation between (lax) monoidal functors is monoidal if it satisfies\n`ε F ≫ τ.app (𝟙_ C) = ε G` and `μ F X Y ≫ app (X ⊗ Y) = (app X ⊗ app Y) ≫ μ G X Y`. -/\nclass IsMonoidal : Prop where\n  unit : ε F₁ ≫ τ.app (𝟙_ C) = ε F₂ := by aesop_cat\n  tensor (X Y : C) : μ F₁ _ _ ≫ τ.app (X ⊗ Y) = (τ.app X ⊗ τ.app Y) ≫ μ F₂ _ _ := by aesop_cat\n\n"}
{"name":"CategoryTheory.NatTrans.IsMonoidal.unit","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝⁵ : CategoryTheory.Category.{v₁, u₁} C\ninst✝⁴ : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝³ : CategoryTheory.Category.{v₂, u₂} D\ninst✝² : CategoryTheory.MonoidalCategory D\nF₁ F₂ : CategoryTheory.Functor C D\nτ : Quiver.Hom F₁ F₂\ninst✝¹ : F₁.LaxMonoidal\ninst✝ : F₂.LaxMonoidal\nself : CategoryTheory.NatTrans.IsMonoidal τ\n⊢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Functor.LaxMonoidal.ε F₁) (τ.app CategoryTheory.MonoidalCategoryStruct.tensorUnit)) (CategoryTheory.Functor.LaxMonoidal.ε F₂)","decl":"/-- A natural transformation between (lax) monoidal functors is monoidal if it satisfies\n`ε F ≫ τ.app (𝟙_ C) = ε G` and `μ F X Y ≫ app (X ⊗ Y) = (app X ⊗ app Y) ≫ μ G X Y`. -/\nclass IsMonoidal : Prop where\n  unit : ε F₁ ≫ τ.app (𝟙_ C) = ε F₂ := by aesop_cat\n  tensor (X Y : C) : μ F₁ _ _ ≫ τ.app (X ⊗ Y) = (τ.app X ⊗ τ.app Y) ≫ μ F₂ _ _ := by aesop_cat\n\n"}
{"name":"CategoryTheory.NatTrans.IsMonoidal.tensor_assoc","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝⁵ : CategoryTheory.Category.{v₁, u₁} C\ninst✝⁴ : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝³ : CategoryTheory.Category.{v₂, u₂} D\ninst✝² : CategoryTheory.MonoidalCategory D\nF₁ F₂ : CategoryTheory.Functor C D\nτ : Quiver.Hom F₁ F₂\ninst✝¹ : F₁.LaxMonoidal\ninst✝ : F₂.LaxMonoidal\nself : CategoryTheory.NatTrans.IsMonoidal τ\nX Y : C\nZ : D\nh : Quiver.Hom (F₂.obj (CategoryTheory.MonoidalCategoryStruct.tensorObj X Y)) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Functor.LaxMonoidal.μ F₁ X Y) (CategoryTheory.CategoryStruct.comp (τ.app (CategoryTheory.MonoidalCategoryStruct.tensorObj X Y)) h)) (CategoryTheory.CategoryStruct.comp (CategoryTheory.MonoidalCategoryStruct.tensorHom (τ.app X) (τ.app Y)) (CategoryTheory.CategoryStruct.comp (CategoryTheory.Functor.LaxMonoidal.μ F₂ X Y) h))","decl":"attribute [reassoc (attr := simp)] unit tensor\n\n"}
{"name":"CategoryTheory.NatTrans.IsMonoidal.unit_assoc","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝⁵ : CategoryTheory.Category.{v₁, u₁} C\ninst✝⁴ : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝³ : CategoryTheory.Category.{v₂, u₂} D\ninst✝² : CategoryTheory.MonoidalCategory D\nF₁ F₂ : CategoryTheory.Functor C D\nτ : Quiver.Hom F₁ F₂\ninst✝¹ : F₁.LaxMonoidal\ninst✝ : F₂.LaxMonoidal\nself : CategoryTheory.NatTrans.IsMonoidal τ\nZ : D\nh : Quiver.Hom (F₂.obj CategoryTheory.MonoidalCategoryStruct.tensorUnit) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Functor.LaxMonoidal.ε F₁) (CategoryTheory.CategoryStruct.comp (τ.app CategoryTheory.MonoidalCategoryStruct.tensorUnit) h)) (CategoryTheory.CategoryStruct.comp (CategoryTheory.Functor.LaxMonoidal.ε F₂) h)","decl":"attribute [reassoc (attr := simp)] unit tensor\n\n"}
{"name":"CategoryTheory.NatTrans.IsMonoidal.id","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝⁴ : CategoryTheory.Category.{v₁, u₁} C\ninst✝³ : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝² : CategoryTheory.Category.{v₂, u₂} D\ninst✝¹ : CategoryTheory.MonoidalCategory D\nF₁ : CategoryTheory.Functor C D\ninst✝ : F₁.LaxMonoidal\n⊢ CategoryTheory.NatTrans.IsMonoidal (CategoryTheory.CategoryStruct.id F₁)","decl":"instance id : IsMonoidal (𝟙 F₁) where\n\n"}
{"name":"CategoryTheory.NatTrans.IsMonoidal.comp","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝⁸ : CategoryTheory.Category.{v₁, u₁} C\ninst✝⁷ : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝⁶ : CategoryTheory.Category.{v₂, u₂} D\ninst✝⁵ : CategoryTheory.MonoidalCategory D\nF₁ F₂ F₃ : CategoryTheory.Functor C D\nτ : Quiver.Hom F₁ F₂\ninst✝⁴ : F₁.LaxMonoidal\ninst✝³ : F₂.LaxMonoidal\ninst✝² : F₃.LaxMonoidal\nτ' : Quiver.Hom F₂ F₃\ninst✝¹ : CategoryTheory.NatTrans.IsMonoidal τ\ninst✝ : CategoryTheory.NatTrans.IsMonoidal τ'\n⊢ CategoryTheory.NatTrans.IsMonoidal (CategoryTheory.CategoryStruct.comp τ τ')","decl":"instance comp (τ' : F₂ ⟶ F₃) [IsMonoidal τ] [IsMonoidal τ'] :\n    IsMonoidal (τ ≫ τ') where\n\n"}
{"name":"CategoryTheory.NatTrans.IsMonoidal.hcomp","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝¹¹ : CategoryTheory.Category.{v₁, u₁} C\ninst✝¹⁰ : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝⁹ : CategoryTheory.Category.{v₂, u₂} D\ninst✝⁸ : CategoryTheory.MonoidalCategory D\nE : Type u₃\ninst✝⁷ : CategoryTheory.Category.{v₃, u₃} E\ninst✝⁶ : CategoryTheory.MonoidalCategory E\nF₁ F₂ : CategoryTheory.Functor C D\nτ : Quiver.Hom F₁ F₂\ninst✝⁵ : F₁.LaxMonoidal\ninst✝⁴ : F₂.LaxMonoidal\nG₁ G₂ : CategoryTheory.Functor D E\ninst✝³ : G₁.LaxMonoidal\ninst✝² : G₂.LaxMonoidal\nτ' : Quiver.Hom G₁ G₂\ninst✝¹ : CategoryTheory.NatTrans.IsMonoidal τ\ninst✝ : CategoryTheory.NatTrans.IsMonoidal τ'\n⊢ CategoryTheory.NatTrans.IsMonoidal (CategoryTheory.NatTrans.hcomp τ τ')","decl":"instance hcomp {G₁ G₂ : D ⥤ E} [G₁.LaxMonoidal] [G₂.LaxMonoidal] (τ' : G₁ ⟶ G₂)\n    [IsMonoidal τ] [IsMonoidal τ'] : IsMonoidal (τ ◫ τ') where\n  unit := by\n    simp only [comp_obj, comp_ε, hcomp_app, assoc, naturality_assoc, unit_assoc, ← map_comp, unit]\n  tensor X Y := by\n    simp only [comp_obj, comp_μ, hcomp_app, assoc, naturality_assoc,\n      tensor_assoc, tensor_comp, μ_natural_assoc]\n    simp only [← map_comp, tensor]\n\n"}
{"name":"CategoryTheory.NatTrans.IsMonoidal.instHomFunctorLeftUnitor","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝⁴ : CategoryTheory.Category.{v₁, u₁} C\ninst✝³ : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝² : CategoryTheory.Category.{v₂, u₂} D\ninst✝¹ : CategoryTheory.MonoidalCategory D\nF : CategoryTheory.Functor C D\ninst✝ : F.LaxMonoidal\n⊢ CategoryTheory.NatTrans.IsMonoidal F.leftUnitor.hom","decl":"instance (F : C ⥤ D) [F.LaxMonoidal] : NatTrans.IsMonoidal F.leftUnitor.hom where\n\n"}
{"name":"CategoryTheory.NatTrans.IsMonoidal.instHomFunctorRightUnitor","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝⁴ : CategoryTheory.Category.{v₁, u₁} C\ninst✝³ : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝² : CategoryTheory.Category.{v₂, u₂} D\ninst✝¹ : CategoryTheory.MonoidalCategory D\nF : CategoryTheory.Functor C D\ninst✝ : F.LaxMonoidal\n⊢ CategoryTheory.NatTrans.IsMonoidal F.rightUnitor.hom","decl":"instance (F : C ⥤ D) [F.LaxMonoidal] : NatTrans.IsMonoidal F.rightUnitor.hom where\n\n"}
{"name":"CategoryTheory.NatTrans.IsMonoidal.instHomFunctorAssociator","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝¹⁰ : CategoryTheory.Category.{v₁, u₁} C\ninst✝⁹ : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝⁸ : CategoryTheory.Category.{v₂, u₂} D\ninst✝⁷ : CategoryTheory.MonoidalCategory D\nE : Type u₃\ninst✝⁶ : CategoryTheory.Category.{v₃, u₃} E\ninst✝⁵ : CategoryTheory.MonoidalCategory E\nE' : Type u₄\ninst✝⁴ : CategoryTheory.Category.{v₄, u₄} E'\ninst✝³ : CategoryTheory.MonoidalCategory E'\nF : CategoryTheory.Functor C D\nG : CategoryTheory.Functor D E\nH : CategoryTheory.Functor E E'\ninst✝² : F.LaxMonoidal\ninst✝¹ : G.LaxMonoidal\ninst✝ : H.LaxMonoidal\n⊢ CategoryTheory.NatTrans.IsMonoidal (F.associator G H).hom","decl":"instance (F : C ⥤ D) (G : D ⥤ E) (H : E ⥤ E') [F.LaxMonoidal] [G.LaxMonoidal] [H.LaxMonoidal] :\n    NatTrans.IsMonoidal (Functor.associator F G H).hom where\n  unit := by\n    simp only [comp_obj, comp_ε, assoc, Functor.map_comp, associator_hom_app, comp_id,\n      Functor.comp_map]\n  tensor X Y := by\n    simp only [comp_obj, comp_μ, associator_hom_app, Functor.comp_map, map_comp,\n      comp_id, tensorHom_id, id_whiskerRight, assoc, id_comp]\n\n"}
{"name":"CategoryTheory.NatTrans.instIsMonoidalProdProd'","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝¹¹ : CategoryTheory.Category.{v₁, u₁} C\ninst✝¹⁰ : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝⁹ : CategoryTheory.Category.{v₂, u₂} D\ninst✝⁸ : CategoryTheory.MonoidalCategory D\nE : Type u₃\ninst✝⁷ : CategoryTheory.Category.{v₃, u₃} E\ninst✝⁶ : CategoryTheory.MonoidalCategory E\nF G : CategoryTheory.Functor C D\nH K : CategoryTheory.Functor C E\nα : Quiver.Hom F G\nβ : Quiver.Hom H K\ninst✝⁵ : F.LaxMonoidal\ninst✝⁴ : G.LaxMonoidal\ninst✝³ : CategoryTheory.NatTrans.IsMonoidal α\ninst✝² : H.LaxMonoidal\ninst✝¹ : K.LaxMonoidal\ninst✝ : CategoryTheory.NatTrans.IsMonoidal β\n⊢ CategoryTheory.NatTrans.IsMonoidal (CategoryTheory.NatTrans.prod' α β)","decl":"instance {F G : C ⥤ D} {H K : C ⥤ E} (α : F ⟶ G) (β : H ⟶ K)\n    [F.LaxMonoidal] [G.LaxMonoidal] [IsMonoidal α]\n    [H.LaxMonoidal] [K.LaxMonoidal] [IsMonoidal β] :\n    IsMonoidal (NatTrans.prod' α β) where\n  unit := by\n    ext\n    · rw [prod_comp_fst, prod'_ε_fst, prod'_ε_fst, prod'_app_fst, IsMonoidal.unit]\n    · rw [prod_comp_snd, prod'_ε_snd, prod'_ε_snd, prod'_app_snd, IsMonoidal.unit]\n  tensor X Y := by\n    ext\n    · simp only [prod_comp_fst, prod'_μ_fst, prod'_app_fst,\n        prodMonoidal_tensorHom, IsMonoidal.tensor]\n    · simp only [prod_comp_snd, prod'_μ_snd, prod'_app_snd,\n        prodMonoidal_tensorHom, IsMonoidal.tensor]\n\n"}
{"name":"CategoryTheory.Iso.instIsMonoidalInvFunctor","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝⁵ : CategoryTheory.Category.{v₁, u₁} C\ninst✝⁴ : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝³ : CategoryTheory.Category.{v₂, u₂} D\ninst✝² : CategoryTheory.MonoidalCategory D\nF₁ F₂ : CategoryTheory.Functor C D\ninst✝¹ : F₁.LaxMonoidal\ninst✝ : F₂.LaxMonoidal\ne : CategoryTheory.Iso F₁ F₂\n⊢ CategoryTheory.NatTrans.IsMonoidal e.inv","decl":"instance : NatTrans.IsMonoidal e.inv where\n  unit := by rw [← NatTrans.IsMonoidal.unit (τ := e.hom), assoc, hom_inv_id_app, comp_id]\n  tensor X Y := by\n    rw [← cancel_mono (e.hom.app (X ⊗ Y)), assoc, assoc, inv_hom_id_app, comp_id,\n      NatTrans.IsMonoidal.tensor, ← MonoidalCategory.tensor_comp_assoc,\n      inv_hom_id_app, inv_hom_id_app, tensorHom_id, id_whiskerRight, id_comp]\n\n"}
{"name":"CategoryTheory.Adjunction.IsMonoidal.instIsMonoidalUnit","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝⁵ : CategoryTheory.Category.{v₁, u₁} C\ninst✝⁴ : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝³ : CategoryTheory.Category.{v₂, u₂} D\ninst✝² : CategoryTheory.MonoidalCategory D\nF : CategoryTheory.Functor C D\nG : CategoryTheory.Functor D C\nadj : CategoryTheory.Adjunction F G\ninst✝¹ : F.Monoidal\ninst✝ : G.LaxMonoidal\n⊢ CategoryTheory.NatTrans.IsMonoidal adj.unit","decl":"instance : NatTrans.IsMonoidal adj.unit where\n  unit := by\n    dsimp\n    rw [id_comp, ← unit_app_unit_comp_map_η adj, assoc, Monoidal.map_η_ε]\n    dsimp\n    rw [comp_id]\n  tensor X Y := by\n    dsimp\n    rw [← unit_app_tensor_comp_map_δ_assoc, id_comp, Monoidal.map_δ_μ, comp_id]\n\n"}
{"name":"CategoryTheory.Adjunction.IsMonoidal.instIsMonoidalCounit","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝⁵ : CategoryTheory.Category.{v₁, u₁} C\ninst✝⁴ : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝³ : CategoryTheory.Category.{v₂, u₂} D\ninst✝² : CategoryTheory.MonoidalCategory D\nF : CategoryTheory.Functor C D\nG : CategoryTheory.Functor D C\nadj : CategoryTheory.Adjunction F G\ninst✝¹ : F.Monoidal\ninst✝ : G.LaxMonoidal\n⊢ CategoryTheory.NatTrans.IsMonoidal adj.counit","decl":"instance : NatTrans.IsMonoidal adj.counit where\n  unit := by\n    dsimp\n    rw [assoc, map_ε_comp_counit_app_unit adj, ε_η]\n  tensor X Y := by\n    dsimp\n    rw [assoc, map_μ_comp_counit_app_tensor, μ_δ_assoc, comp_id]\n\n"}
{"name":"CategoryTheory.Adjunction.Equivalence.instIsMonoidalUnit","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝⁵ : CategoryTheory.Category.{v₁, u₁} C\ninst✝⁴ : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝³ : CategoryTheory.Category.{v₂, u₂} D\ninst✝² : CategoryTheory.MonoidalCategory D\ne : CategoryTheory.Equivalence C D\ninst✝¹ : e.functor.Monoidal\ninst✝ : e.inverse.Monoidal\n⊢ CategoryTheory.NatTrans.IsMonoidal e.unit","decl":"instance : NatTrans.IsMonoidal e.unit :=\n  inferInstanceAs (NatTrans.IsMonoidal e.toAdjunction.unit)\n\n"}
{"name":"CategoryTheory.Adjunction.Equivalence.instIsMonoidalCounit","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝⁵ : CategoryTheory.Category.{v₁, u₁} C\ninst✝⁴ : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝³ : CategoryTheory.Category.{v₂, u₂} D\ninst✝² : CategoryTheory.MonoidalCategory D\ne : CategoryTheory.Equivalence C D\ninst✝¹ : e.functor.Monoidal\ninst✝ : e.inverse.Monoidal\n⊢ CategoryTheory.NatTrans.IsMonoidal e.counit","decl":"instance : NatTrans.IsMonoidal e.counit :=\n  inferInstanceAs (NatTrans.IsMonoidal e.toAdjunction.counit)\n\n"}
{"name":"CategoryTheory.LaxMonoidalFunctor.Hom.mk.inj","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝³ : CategoryTheory.Category.{v₁, u₁} C\ninst✝² : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝¹ : CategoryTheory.Category.{v₂, u₂} D\ninst✝ : CategoryTheory.MonoidalCategory D\nF G : CategoryTheory.LaxMonoidalFunctor C D\nhom✝ : Quiver.Hom F.toFunctor G.toFunctor\nisMonoidal✝ : autoParam (CategoryTheory.NatTrans.IsMonoidal hom✝) _auto✝\nhom : Quiver.Hom F.toFunctor G.toFunctor\nisMonoidal : autoParam (CategoryTheory.NatTrans.IsMonoidal hom) _auto✝\nx✝ : Eq { hom := hom✝, isMonoidal := isMonoidal✝ } { hom := hom, isMonoidal := isMonoidal }\n⊢ Eq hom✝ hom","decl":"/-- The type of monoidal natural transformations between (bundled) lax monoidal functors. -/\nstructure Hom (F G : LaxMonoidalFunctor C D) where\n  /-- the natural transformation between the underlying functors -/\n  hom : F.toFunctor ⟶ G.toFunctor\n  isMonoidal : NatTrans.IsMonoidal hom := by infer_instance\n\n"}
{"name":"CategoryTheory.LaxMonoidalFunctor.Hom.mk.injEq","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝³ : CategoryTheory.Category.{v₁, u₁} C\ninst✝² : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝¹ : CategoryTheory.Category.{v₂, u₂} D\ninst✝ : CategoryTheory.MonoidalCategory D\nF G : CategoryTheory.LaxMonoidalFunctor C D\nhom✝ : Quiver.Hom F.toFunctor G.toFunctor\nisMonoidal✝ : autoParam (CategoryTheory.NatTrans.IsMonoidal hom✝) _auto✝\nhom : Quiver.Hom F.toFunctor G.toFunctor\nisMonoidal : autoParam (CategoryTheory.NatTrans.IsMonoidal hom) _auto✝\n⊢ Eq (Eq { hom := hom✝, isMonoidal := isMonoidal✝ } { hom := hom, isMonoidal := isMonoidal }) (Eq hom✝ hom)","decl":"/-- The type of monoidal natural transformations between (bundled) lax monoidal functors. -/\nstructure Hom (F G : LaxMonoidalFunctor C D) where\n  /-- the natural transformation between the underlying functors -/\n  hom : F.toFunctor ⟶ G.toFunctor\n  isMonoidal : NatTrans.IsMonoidal hom := by infer_instance\n\n"}
{"name":"CategoryTheory.LaxMonoidalFunctor.Hom.mk.sizeOf_spec","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝⁵ : CategoryTheory.Category.{v₁, u₁} C\ninst✝⁴ : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝³ : CategoryTheory.Category.{v₂, u₂} D\ninst✝² : CategoryTheory.MonoidalCategory D\nF G : CategoryTheory.LaxMonoidalFunctor C D\ninst✝¹ : SizeOf C\ninst✝ : SizeOf D\nhom : Quiver.Hom F.toFunctor G.toFunctor\nisMonoidal : autoParam (CategoryTheory.NatTrans.IsMonoidal hom) _auto✝\n⊢ Eq (SizeOf.sizeOf { hom := hom, isMonoidal := isMonoidal }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf hom)) (SizeOf.sizeOf isMonoidal))","decl":"/-- The type of monoidal natural transformations between (bundled) lax monoidal functors. -/\nstructure Hom (F G : LaxMonoidalFunctor C D) where\n  /-- the natural transformation between the underlying functors -/\n  hom : F.toFunctor ⟶ G.toFunctor\n  isMonoidal : NatTrans.IsMonoidal hom := by infer_instance\n\n"}
{"name":"CategoryTheory.LaxMonoidalFunctor.Hom.isMonoidal","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝³ : CategoryTheory.Category.{v₁, u₁} C\ninst✝² : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝¹ : CategoryTheory.Category.{v₂, u₂} D\ninst✝ : CategoryTheory.MonoidalCategory D\nF G : CategoryTheory.LaxMonoidalFunctor C D\nself : F.Hom G\n⊢ CategoryTheory.NatTrans.IsMonoidal self.hom","decl":"/-- The type of monoidal natural transformations between (bundled) lax monoidal functors. -/\nstructure Hom (F G : LaxMonoidalFunctor C D) where\n  /-- the natural transformation between the underlying functors -/\n  hom : F.toFunctor ⟶ G.toFunctor\n  isMonoidal : NatTrans.IsMonoidal hom := by infer_instance\n\n"}
{"name":"CategoryTheory.LaxMonoidalFunctor.id_hom","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝³ : CategoryTheory.Category.{v₁, u₁} C\ninst✝² : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝¹ : CategoryTheory.Category.{v₂, u₂} D\ninst✝ : CategoryTheory.MonoidalCategory D\nF : CategoryTheory.LaxMonoidalFunctor C D\n⊢ Eq (CategoryTheory.CategoryStruct.id F).hom (CategoryTheory.CategoryStruct.id F.toFunctor)","decl":"@[simp]\nlemma id_hom (F : LaxMonoidalFunctor C D) : Hom.hom (𝟙 F) = 𝟙 _ := rfl\n\n"}
{"name":"CategoryTheory.LaxMonoidalFunctor.comp_hom","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝³ : CategoryTheory.Category.{v₁, u₁} C\ninst✝² : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝¹ : CategoryTheory.Category.{v₂, u₂} D\ninst✝ : CategoryTheory.MonoidalCategory D\nF G H : CategoryTheory.LaxMonoidalFunctor C D\nα : Quiver.Hom F G\nβ : Quiver.Hom G H\n⊢ Eq (CategoryTheory.CategoryStruct.comp α β).hom (CategoryTheory.CategoryStruct.comp α.hom β.hom)","decl":"@[reassoc, simp]\nlemma comp_hom {F G H : LaxMonoidalFunctor C D} (α : F ⟶ G) (β : G ⟶ H) :\n    (α ≫ β).hom = α.hom ≫ β.hom := rfl\n\n"}
{"name":"CategoryTheory.LaxMonoidalFunctor.comp_hom_assoc","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝³ : CategoryTheory.Category.{v₁, u₁} C\ninst✝² : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝¹ : CategoryTheory.Category.{v₂, u₂} D\ninst✝ : CategoryTheory.MonoidalCategory D\nF G H : CategoryTheory.LaxMonoidalFunctor C D\nα : Quiver.Hom F G\nβ : Quiver.Hom G H\nZ : CategoryTheory.Functor C D\nh : Quiver.Hom H.toFunctor Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.CategoryStruct.comp α β).hom h) (CategoryTheory.CategoryStruct.comp α.hom (CategoryTheory.CategoryStruct.comp β.hom h))","decl":"@[reassoc, simp]\nlemma comp_hom {F G H : LaxMonoidalFunctor C D} (α : F ⟶ G) (β : G ⟶ H) :\n    (α ≫ β).hom = α.hom ≫ β.hom := rfl\n\n"}
{"name":"CategoryTheory.LaxMonoidalFunctor.hom_ext_iff","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝³ : CategoryTheory.Category.{v₁, u₁} C\ninst✝² : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝¹ : CategoryTheory.Category.{v₂, u₂} D\ninst✝ : CategoryTheory.MonoidalCategory D\nF G : CategoryTheory.LaxMonoidalFunctor C D\nα β : Quiver.Hom F G\n⊢ Iff (Eq α β) (Eq α.hom β.hom)","decl":"@[ext]\nlemma hom_ext {F G : LaxMonoidalFunctor C D} {α β : F ⟶ G} (h : α.hom = β.hom) : α = β := by\n  cases α; cases β; subst h; rfl\n\n"}
{"name":"CategoryTheory.LaxMonoidalFunctor.hom_ext","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝³ : CategoryTheory.Category.{v₁, u₁} C\ninst✝² : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝¹ : CategoryTheory.Category.{v₂, u₂} D\ninst✝ : CategoryTheory.MonoidalCategory D\nF G : CategoryTheory.LaxMonoidalFunctor C D\nα β : Quiver.Hom F G\nh : Eq α.hom β.hom\n⊢ Eq α β","decl":"@[ext]\nlemma hom_ext {F G : LaxMonoidalFunctor C D} {α β : F ⟶ G} (h : α.hom = β.hom) : α = β := by\n  cases α; cases β; subst h; rfl\n\n"}
{"name":"CategoryTheory.LaxMonoidalFunctor.homMk_hom","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝⁴ : CategoryTheory.Category.{v₁, u₁} C\ninst✝³ : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝² : CategoryTheory.Category.{v₂, u₂} D\ninst✝¹ : CategoryTheory.MonoidalCategory D\nF G : CategoryTheory.LaxMonoidalFunctor C D\nf : Quiver.Hom F.toFunctor G.toFunctor\ninst✝ : CategoryTheory.NatTrans.IsMonoidal f\n⊢ Eq (CategoryTheory.LaxMonoidalFunctor.homMk f).hom f","decl":"/-- Constructor for morphisms in the category `LaxMonoidalFunctor C D`. -/\n@[simps]\ndef homMk {F G : LaxMonoidalFunctor C D} (f : F.toFunctor ⟶ G.toFunctor) [NatTrans.IsMonoidal f] :\n    F ⟶ G := ⟨f, inferInstance⟩\n\n"}
{"name":"CategoryTheory.LaxMonoidalFunctor.isoMk_inv","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝⁴ : CategoryTheory.Category.{v₁, u₁} C\ninst✝³ : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝² : CategoryTheory.Category.{v₂, u₂} D\ninst✝¹ : CategoryTheory.MonoidalCategory D\nF G : CategoryTheory.LaxMonoidalFunctor C D\ne : CategoryTheory.Iso F.toFunctor G.toFunctor\ninst✝ : CategoryTheory.NatTrans.IsMonoidal e.hom\n⊢ Eq (CategoryTheory.LaxMonoidalFunctor.isoMk e).inv (CategoryTheory.LaxMonoidalFunctor.homMk e.inv)","decl":"/-- Constructor for isomorphisms in the category `LaxMonoidalFunctor C D`. -/\n@[simps]\ndef isoMk {F G : LaxMonoidalFunctor C D} (e : F.toFunctor ≅ G.toFunctor)\n    [NatTrans.IsMonoidal e.hom] :\n    F ≅ G where\n  hom := homMk e.hom\n  inv := homMk e.inv\n\n"}
{"name":"CategoryTheory.LaxMonoidalFunctor.isoMk_hom","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝⁴ : CategoryTheory.Category.{v₁, u₁} C\ninst✝³ : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝² : CategoryTheory.Category.{v₂, u₂} D\ninst✝¹ : CategoryTheory.MonoidalCategory D\nF G : CategoryTheory.LaxMonoidalFunctor C D\ne : CategoryTheory.Iso F.toFunctor G.toFunctor\ninst✝ : CategoryTheory.NatTrans.IsMonoidal e.hom\n⊢ Eq (CategoryTheory.LaxMonoidalFunctor.isoMk e).hom (CategoryTheory.LaxMonoidalFunctor.homMk e.hom)","decl":"/-- Constructor for isomorphisms in the category `LaxMonoidalFunctor C D`. -/\n@[simps]\ndef isoMk {F G : LaxMonoidalFunctor C D} (e : F.toFunctor ≅ G.toFunctor)\n    [NatTrans.IsMonoidal e.hom] :\n    F ≅ G where\n  hom := homMk e.hom\n  inv := homMk e.inv\n\n"}
{"name":"CategoryTheory.LaxMonoidalFunctor.isoOfComponents_inv_hom_app","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝³ : CategoryTheory.Category.{v₁, u₁} C\ninst✝² : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝¹ : CategoryTheory.Category.{v₂, u₂} D\ninst✝ : CategoryTheory.MonoidalCategory D\nF G : CategoryTheory.LaxMonoidalFunctor C D\ne : (X : C) → CategoryTheory.Iso (F.obj X) (G.obj X)\nnaturality : autoParam (∀ {X Y : C} (f : Quiver.Hom X Y), Eq (CategoryTheory.CategoryStruct.comp (F.map f) (e Y).hom) (CategoryTheory.CategoryStruct.comp (e X).hom (G.map f))) _auto✝\nunit : autoParam (Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Functor.LaxMonoidal.ε F.toFunctor) (e CategoryTheory.MonoidalCategoryStruct.tensorUnit).hom) (CategoryTheory.Functor.LaxMonoidal.ε G.toFunctor)) _auto✝\ntensor : autoParam (∀ (X Y : C), Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Functor.LaxMonoidal.μ F.toFunctor X Y) (e (CategoryTheory.MonoidalCategoryStruct.tensorObj X Y)).hom) (CategoryTheory.CategoryStruct.comp (CategoryTheory.MonoidalCategoryStruct.tensorHom (e X).hom (e Y).hom) (CategoryTheory.Functor.LaxMonoidal.μ G.toFunctor X Y))) _auto✝\nX : C\n⊢ Eq ((CategoryTheory.LaxMonoidalFunctor.isoOfComponents e naturality unit tensor).inv.hom.app X) (e X).inv","decl":"/-- Constructor for isomorphisms between lax monoidal functors. -/\n@[simps!]\ndef isoOfComponents {F G : LaxMonoidalFunctor C D} (e : ∀ X, F.obj X ≅ G.obj X)\n    (naturality : ∀ {X Y : C} (f : X ⟶ Y), F.map f ≫ (e Y).hom = (e X).hom ≫ G.map f := by\n      aesop_cat)\n    (unit : ε F.toFunctor ≫ (e (𝟙_ C)).hom = ε G.toFunctor := by aesop_cat)\n    (tensor : ∀ X Y, μ F.toFunctor X Y ≫ (e (X ⊗ Y)).hom =\n      ((e X).hom ⊗ (e Y).hom) ≫ μ G.toFunctor X Y := by aesop_cat) :\n    F ≅ G :=\n  @isoMk _ _ _ _ _ _ _ _ (NatIso.ofComponents e naturality) (by constructor <;> assumption)\n\n"}
{"name":"CategoryTheory.LaxMonoidalFunctor.isoOfComponents_hom_hom_app","module":"Mathlib.CategoryTheory.Monoidal.NaturalTransformation","initialProofState":"C : Type u₁\ninst✝³ : CategoryTheory.Category.{v₁, u₁} C\ninst✝² : CategoryTheory.MonoidalCategory C\nD : Type u₂\ninst✝¹ : CategoryTheory.Category.{v₂, u₂} D\ninst✝ : CategoryTheory.MonoidalCategory D\nF G : CategoryTheory.LaxMonoidalFunctor C D\ne : (X : C) → CategoryTheory.Iso (F.obj X) (G.obj X)\nnaturality : autoParam (∀ {X Y : C} (f : Quiver.Hom X Y), Eq (CategoryTheory.CategoryStruct.comp (F.map f) (e Y).hom) (CategoryTheory.CategoryStruct.comp (e X).hom (G.map f))) _auto✝\nunit : autoParam (Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Functor.LaxMonoidal.ε F.toFunctor) (e CategoryTheory.MonoidalCategoryStruct.tensorUnit).hom) (CategoryTheory.Functor.LaxMonoidal.ε G.toFunctor)) _auto✝\ntensor : autoParam (∀ (X Y : C), Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Functor.LaxMonoidal.μ F.toFunctor X Y) (e (CategoryTheory.MonoidalCategoryStruct.tensorObj X Y)).hom) (CategoryTheory.CategoryStruct.comp (CategoryTheory.MonoidalCategoryStruct.tensorHom (e X).hom (e Y).hom) (CategoryTheory.Functor.LaxMonoidal.μ G.toFunctor X Y))) _auto✝\nX : C\n⊢ Eq ((CategoryTheory.LaxMonoidalFunctor.isoOfComponents e naturality unit tensor).hom.hom.app X) (e X).hom","decl":"/-- Constructor for isomorphisms between lax monoidal functors. -/\n@[simps!]\ndef isoOfComponents {F G : LaxMonoidalFunctor C D} (e : ∀ X, F.obj X ≅ G.obj X)\n    (naturality : ∀ {X Y : C} (f : X ⟶ Y), F.map f ≫ (e Y).hom = (e X).hom ≫ G.map f := by\n      aesop_cat)\n    (unit : ε F.toFunctor ≫ (e (𝟙_ C)).hom = ε G.toFunctor := by aesop_cat)\n    (tensor : ∀ X Y, μ F.toFunctor X Y ≫ (e (X ⊗ Y)).hom =\n      ((e X).hom ⊗ (e Y).hom) ≫ μ G.toFunctor X Y := by aesop_cat) :\n    F ≅ G :=\n  @isoMk _ _ _ _ _ _ _ _ (NatIso.ofComponents e naturality) (by constructor <;> assumption)\n\n"}
