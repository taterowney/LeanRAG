{"name":"GroupAlgebra.mul_average_left","module":"Mathlib.RepresentationTheory.Invariants","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝³ : CommSemiring k\ninst✝² : Group G\ninst✝¹ : Fintype G\ninst✝ : Invertible ↑(Fintype.card G)\ng : G\n⊢ Eq (HMul.hMul (Finsupp.single g 1) (GroupAlgebra.average k G)) (GroupAlgebra.average k G)","decl":"/-- `average k G` is invariant under left multiplication by elements of `G`.\n-/\n@[simp]\ntheorem mul_average_left (g : G) : ↑(Finsupp.single g 1) * average k G = average k G := by\n  simp only [mul_one, Finset.mul_sum, Algebra.mul_smul_comm, average, MonoidAlgebra.of_apply,\n    Finset.sum_congr, MonoidAlgebra.single_mul_single]\n  set f : G → MonoidAlgebra k G := fun x => Finsupp.single x 1\n  show ⅟ (Fintype.card G : k) • ∑ x : G, f (g * x) = ⅟ (Fintype.card G : k) • ∑ x : G, f x\n  rw [Function.Bijective.sum_comp (Group.mulLeft_bijective g) _]\n\n"}
{"name":"GroupAlgebra.mul_average_right","module":"Mathlib.RepresentationTheory.Invariants","initialProofState":"k : Type u_1\nG : Type u_2\ninst✝³ : CommSemiring k\ninst✝² : Group G\ninst✝¹ : Fintype G\ninst✝ : Invertible ↑(Fintype.card G)\ng : G\n⊢ Eq (HMul.hMul (GroupAlgebra.average k G) (Finsupp.single g 1)) (GroupAlgebra.average k G)","decl":"/-- `average k G` is invariant under right multiplication by elements of `G`.\n-/\n@[simp]\ntheorem mul_average_right (g : G) : average k G * ↑(Finsupp.single g 1) = average k G := by\n  simp only [mul_one, Finset.sum_mul, Algebra.smul_mul_assoc, average, MonoidAlgebra.of_apply,\n    Finset.sum_congr, MonoidAlgebra.single_mul_single]\n  set f : G → MonoidAlgebra k G := fun x => Finsupp.single x 1\n  show ⅟ (Fintype.card G : k) • ∑ x : G, f (x * g) = ⅟ (Fintype.card G : k) • ∑ x : G, f x\n  rw [Function.Bijective.sum_comp (Group.mulRight_bijective g) _]\n\n"}
{"name":"Representation.mem_invariants","module":"Mathlib.RepresentationTheory.Invariants","initialProofState":"k : Type u_1\nG : Type u_2\nV : Type u_3\ninst✝³ : CommSemiring k\ninst✝² : Group G\ninst✝¹ : AddCommMonoid V\ninst✝ : Module k V\nρ : Representation k G V\nv : V\n⊢ Iff (Membership.mem ρ.invariants v) (∀ (g : G), Eq ((ρ g) v) v)","decl":"@[simp]\ntheorem mem_invariants (v : V) : v ∈ invariants ρ ↔ ∀ g : G, ρ g v = v := by rfl\n\n"}
{"name":"Representation.invariants_eq_inter","module":"Mathlib.RepresentationTheory.Invariants","initialProofState":"k : Type u_1\nG : Type u_2\nV : Type u_3\ninst✝³ : CommSemiring k\ninst✝² : Group G\ninst✝¹ : AddCommMonoid V\ninst✝ : Module k V\nρ : Representation k G V\n⊢ Eq ρ.invariants.carrier (Set.iInter fun g => Function.fixedPoints ⇑(ρ g))","decl":"theorem invariants_eq_inter : (invariants ρ).carrier = ⋂ g : G, Function.fixedPoints (ρ g) := by\n  ext; simp [Function.IsFixedPt]\n\n"}
{"name":"Representation.invariants_eq_top","module":"Mathlib.RepresentationTheory.Invariants","initialProofState":"k : Type u_1\nG : Type u_2\nV : Type u_3\ninst✝⁴ : CommSemiring k\ninst✝³ : Group G\ninst✝² : AddCommMonoid V\ninst✝¹ : Module k V\nρ : Representation k G V\ninst✝ : ρ.IsTrivial\n⊢ Eq ρ.invariants Top.top","decl":"theorem invariants_eq_top [ρ.IsTrivial] :\n    invariants ρ = ⊤ :=\neq_top_iff.2 (fun x _ g => ρ.apply_eq_self g x)\n\n"}
{"name":"Representation.averageMap_invariant","module":"Mathlib.RepresentationTheory.Invariants","initialProofState":"k : Type u_1\nG : Type u_2\nV : Type u_3\ninst✝⁵ : CommSemiring k\ninst✝⁴ : Group G\ninst✝³ : AddCommMonoid V\ninst✝² : Module k V\nρ : Representation k G V\ninst✝¹ : Fintype G\ninst✝ : Invertible ↑(Fintype.card G)\nv : V\n⊢ Membership.mem ρ.invariants (ρ.averageMap v)","decl":"/-- The `averageMap` sends elements of `V` to the subspace of invariants.\n-/\ntheorem averageMap_invariant (v : V) : averageMap ρ v ∈ invariants ρ := fun g => by\n  rw [averageMap, ← asAlgebraHom_single_one, ← LinearMap.mul_apply, ← map_mul (asAlgebraHom ρ),\n    mul_average_left]\n\n"}
{"name":"Representation.averageMap_id","module":"Mathlib.RepresentationTheory.Invariants","initialProofState":"k : Type u_1\nG : Type u_2\nV : Type u_3\ninst✝⁵ : CommSemiring k\ninst✝⁴ : Group G\ninst✝³ : AddCommMonoid V\ninst✝² : Module k V\nρ : Representation k G V\ninst✝¹ : Fintype G\ninst✝ : Invertible ↑(Fintype.card G)\nv : V\nhv : Membership.mem ρ.invariants v\n⊢ Eq (ρ.averageMap v) v","decl":"/-- The `averageMap` acts as the identity on the subspace of invariants.\n-/\ntheorem averageMap_id (v : V) (hv : v ∈ invariants ρ) : averageMap ρ v = v := by\n  rw [mem_invariants] at hv\n  simp [average, map_sum, hv, Finset.card_univ, ← Nat.cast_smul_eq_nsmul k _ v, smul_smul]\n\n"}
{"name":"Representation.isProj_averageMap","module":"Mathlib.RepresentationTheory.Invariants","initialProofState":"k : Type u_1\nG : Type u_2\nV : Type u_3\ninst✝⁵ : CommSemiring k\ninst✝⁴ : Group G\ninst✝³ : AddCommMonoid V\ninst✝² : Module k V\nρ : Representation k G V\ninst✝¹ : Fintype G\ninst✝ : Invertible ↑(Fintype.card G)\n⊢ LinearMap.IsProj ρ.invariants ρ.averageMap","decl":"theorem isProj_averageMap : LinearMap.IsProj ρ.invariants ρ.averageMap :=\n  ⟨ρ.averageMap_invariant, ρ.averageMap_id⟩\n\n"}
{"name":"Representation.linHom.mem_invariants_iff_comm","module":"Mathlib.RepresentationTheory.Invariants","initialProofState":"k : Type u\ninst✝ : CommRing k\nG : Grp\nX Y : Rep k ↑G\nf : LinearMap (RingHom.id k) ↑X.V ↑Y.V\ng : ↑G\n⊢ Iff (Eq (((X.ρ.linHom Y.ρ) g) f) f) (Eq (f.comp (X.ρ g)) ((Y.ρ g).comp f))","decl":"theorem mem_invariants_iff_comm {X Y : Rep k G} (f : X.V →ₗ[k] Y.V) (g : G) :\n    (linHom X.ρ Y.ρ) g f = f ↔ f.comp (X.ρ g) = (Y.ρ g).comp f := by\n  dsimp\n  rw [← LinearMap.comp_assoc, ← ModuleCat.hom_ofHom (Y.ρ g), ← ModuleCat.hom_ofHom f,\n      ← ModuleCat.hom_comp, ← ModuleCat.hom_ofHom (X.ρ g⁻¹), ← ModuleCat.hom_comp,\n      Rep.ofHom_ρ, ← ρAut_hom_apply_inv X g, Rep.ofHom_ρ, ← ρAut_hom_apply_hom Y g,\n      ← ModuleCat.hom_ext_iff, Iso.inv_comp_eq, ρAut_hom_apply_hom, ← ModuleCat.hom_ofHom (X.ρ g),\n      ← ModuleCat.hom_comp, ← ModuleCat.hom_ext_iff]\n  exact comm\n\n"}
{"name":"Representation.linHom.invariantsEquivRepHom_symm_apply_coe","module":"Mathlib.RepresentationTheory.Invariants","initialProofState":"k : Type u\ninst✝ : CommRing k\nG : Grp\nX Y : Rep k ↑G\nf : Quiver.Hom X Y\n⊢ Eq (↑((Representation.linHom.invariantsEquivRepHom X Y).symm f)) (ModuleCat.Hom.hom f.hom)","decl":"/-- The invariants of the representation `linHom X.ρ Y.ρ` correspond to the representation\nhomomorphisms from `X` to `Y`. -/\n@[simps]\ndef invariantsEquivRepHom (X Y : Rep k G) : (linHom X.ρ Y.ρ).invariants ≃ₗ[k] X ⟶ Y where\n  toFun f := ⟨ModuleCat.ofHom f.val, fun g =>\n    ModuleCat.hom_ext ((mem_invariants_iff_comm _ g).1 (f.property g))⟩\n  map_add' _ _ := rfl\n  map_smul' _ _ := rfl\n  invFun f := ⟨f.hom.hom, fun g =>\n    (mem_invariants_iff_comm _ g).2 (ModuleCat.hom_ext_iff.mp (f.comm g))⟩\n  left_inv _ := by ext; rfl\n  right_inv _ := by ext; rfl\n\n"}
{"name":"Representation.linHom.invariantsEquivRepHom_apply_hom","module":"Mathlib.RepresentationTheory.Invariants","initialProofState":"k : Type u\ninst✝ : CommRing k\nG : Grp\nX Y : Rep k ↑G\nf : Subtype fun x => Membership.mem (X.ρ.linHom Y.ρ).invariants x\n⊢ Eq ((Representation.linHom.invariantsEquivRepHom X Y) f).hom (ModuleCat.ofHom ↑f)","decl":"/-- The invariants of the representation `linHom X.ρ Y.ρ` correspond to the representation\nhomomorphisms from `X` to `Y`. -/\n@[simps]\ndef invariantsEquivRepHom (X Y : Rep k G) : (linHom X.ρ Y.ρ).invariants ≃ₗ[k] X ⟶ Y where\n  toFun f := ⟨ModuleCat.ofHom f.val, fun g =>\n    ModuleCat.hom_ext ((mem_invariants_iff_comm _ g).1 (f.property g))⟩\n  map_add' _ _ := rfl\n  map_smul' _ _ := rfl\n  invFun f := ⟨f.hom.hom, fun g =>\n    (mem_invariants_iff_comm _ g).2 (ModuleCat.hom_ext_iff.mp (f.comm g))⟩\n  left_inv _ := by ext; rfl\n  right_inv _ := by ext; rfl\n\n"}
