{"name":"MeasureTheory.measure_limsup_cofinite_eq_zero","module":"Mathlib.MeasureTheory.OuterMeasure.BorelCantelli","initialProofState":"α : Type u_1\nι : Type u_2\nF : Type u_3\ninst✝² : FunLike F (Set α) ENNReal\ninst✝¹ : MeasureTheory.OuterMeasureClass F α\ninst✝ : Countable ι\nμ : F\ns : ι → Set α\nhs : Ne (tsum fun i => μ (s i)) Top.top\n⊢ Eq (μ (Filter.limsup s Filter.cofinite)) 0","decl":"/-- One direction of the **Borel-Cantelli lemma**\n(sometimes called the \"*first* Borel-Cantelli lemma\"):\nif `(s i)` is a countable family of sets such that `∑' i, μ (s i)` is finite,\nthen the limit superior of the `s i` along the cofinite filter is a null set.\n\nNote: for the *second* Borel-Cantelli lemma (applying to independent sets in a probability space),\nsee `ProbabilityTheory.measure_limsup_eq_one`. -/\ntheorem measure_limsup_cofinite_eq_zero {s : ι → Set α} (hs : ∑' i, μ (s i) ≠ ∞) :\n    μ (limsup s cofinite) = 0 := by\n  refine bot_unique <| ge_of_tendsto' (ENNReal.tendsto_tsum_compl_atTop_zero hs) fun t ↦ ?_\n  calc\n    μ (limsup s cofinite) ≤ μ (⋃ i : {i // i ∉ t}, s i) := by\n      gcongr\n      rw [hasBasis_cofinite.limsup_eq_iInf_iSup, iUnion_subtype]\n      exact iInter₂_subset _ t.finite_toSet\n    _ ≤ ∑' i : {i // i ∉ t}, μ (s i) := measure_iUnion_le _\n\n"}
{"name":"MeasureTheory.measure_limsup_atTop_eq_zero","module":"Mathlib.MeasureTheory.OuterMeasure.BorelCantelli","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns : Nat → Set α\nhs : Ne (tsum fun i => μ (s i)) Top.top\n⊢ Eq (μ (Filter.limsup s Filter.atTop)) 0","decl":"/-- One direction of the **Borel-Cantelli lemma**\n(sometimes called the \"*first* Borel-Cantelli lemma\"):\nif `(s i)` is a sequence of sets such that `∑' i, μ (s i)` is finite,\nthen the limit superior of the `s i` along the `atTop` filter is a null set.\n\nNote: for the *second* Borel-Cantelli lemma (applying to independent sets in a probability space),\nsee `ProbabilityTheory.measure_limsup_eq_one`. -/\ntheorem measure_limsup_atTop_eq_zero {s : ℕ → Set α} (hs : ∑' i, μ (s i) ≠ ∞) :\n    μ (limsup s atTop) = 0 := by\n  rw [← Nat.cofinite_eq_atTop, measure_limsup_cofinite_eq_zero hs]\n\n"}
{"name":"MeasureTheory.measure_limsup_eq_zero","module":"Mathlib.MeasureTheory.OuterMeasure.BorelCantelli","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns : Nat → Set α\nhs : Ne (tsum fun i => μ (s i)) Top.top\n⊢ Eq (μ (Filter.limsup s Filter.atTop)) 0","decl":"@[deprecated (since := \"2024-09-01\")]\nalias measure_limsup_eq_zero := measure_limsup_atTop_eq_zero\n\n"}
{"name":"MeasureTheory.ae_finite_setOf_mem","module":"Mathlib.MeasureTheory.OuterMeasure.BorelCantelli","initialProofState":"α : Type u_1\nι : Type u_2\nF : Type u_3\ninst✝² : FunLike F (Set α) ENNReal\ninst✝¹ : MeasureTheory.OuterMeasureClass F α\ninst✝ : Countable ι\nμ : F\ns : ι → Set α\nh : Ne (tsum fun i => μ (s i)) Top.top\n⊢ Filter.Eventually (fun x => (setOf fun i => Membership.mem (s i) x).Finite) (MeasureTheory.ae μ)","decl":"/-- One direction of the **Borel-Cantelli lemma**\n(sometimes called the \"*first* Borel-Cantelli lemma\"):\nif `(s i)` is a countable family of sets such that `∑' i, μ (s i)` is finite,\nthen a.e. all points belong to finitely sets of the family. -/\ntheorem ae_finite_setOf_mem {s : ι → Set α} (h : ∑' i, μ (s i) ≠ ∞) :\n    ∀ᵐ x ∂μ, {i | x ∈ s i}.Finite := by\n  rw [ae_iff, ← measure_limsup_cofinite_eq_zero h]\n  congr 1 with x\n  simp [mem_limsup_iff_frequently_mem, Filter.Frequently]\n\n"}
{"name":"MeasureTheory.measure_setOf_frequently_eq_zero","module":"Mathlib.MeasureTheory.OuterMeasure.BorelCantelli","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\np : Nat → α → Prop\nhp : Ne (tsum fun i => μ (setOf fun x => p i x)) Top.top\n⊢ Eq (μ (setOf fun x => Filter.Frequently (fun n => p n x) Filter.atTop)) 0","decl":"/-- A version of the **Borel-Cantelli lemma**: if `pᵢ` is a sequence of predicates such that\n`∑' i, μ {x | pᵢ x}` is finite, then the measure of `x` such that `pᵢ x` holds frequently as `i → ∞`\n(or equivalently, `pᵢ x` holds for infinitely many `i`) is equal to zero. -/\ntheorem measure_setOf_frequently_eq_zero {p : ℕ → α → Prop} (hp : ∑' i, μ { x | p i x } ≠ ∞) :\n    μ { x | ∃ᶠ n in atTop, p n x } = 0 := by\n  simpa only [limsup_eq_iInf_iSup_of_nat, frequently_atTop, ← bex_def, setOf_forall,\n    setOf_exists] using measure_limsup_atTop_eq_zero hp\n\n"}
{"name":"MeasureTheory.ae_eventually_not_mem","module":"Mathlib.MeasureTheory.OuterMeasure.BorelCantelli","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns : Nat → Set α\nhs : Ne (tsum fun i => μ (s i)) Top.top\n⊢ Filter.Eventually (fun x => Filter.Eventually (fun n => Not (Membership.mem (s n) x)) Filter.atTop) (MeasureTheory.ae μ)","decl":"/-- A version of the **Borel-Cantelli lemma**: if `sᵢ` is a sequence of sets such that\n`∑' i, μ sᵢ` is finite, then for almost all `x`, `x` does not belong to `sᵢ` for large `i`. -/\ntheorem ae_eventually_not_mem {s : ℕ → Set α} (hs : (∑' i, μ (s i)) ≠ ∞) :\n    ∀ᵐ x ∂μ, ∀ᶠ n in atTop, x ∉ s n :=\n  measure_setOf_frequently_eq_zero hs\n\n"}
{"name":"MeasureTheory.measure_liminf_cofinite_eq_zero","module":"Mathlib.MeasureTheory.OuterMeasure.BorelCantelli","initialProofState":"α : Type u_1\nι : Type u_2\nF : Type u_3\ninst✝³ : FunLike F (Set α) ENNReal\ninst✝² : MeasureTheory.OuterMeasureClass F α\ninst✝¹ : Countable ι\nμ : F\ninst✝ : Infinite ι\ns : ι → Set α\nh : Ne (tsum fun i => μ (s i)) Top.top\n⊢ Eq (μ (Filter.liminf s Filter.cofinite)) 0","decl":"theorem measure_liminf_cofinite_eq_zero [Infinite ι]  {s : ι → Set α} (h : ∑' i, μ (s i) ≠ ∞) :\n    μ (liminf s cofinite) = 0 := by\n  rw [← le_zero_iff, ← measure_limsup_cofinite_eq_zero h]\n  exact measure_mono liminf_le_limsup\n\n"}
{"name":"MeasureTheory.measure_liminf_atTop_eq_zero","module":"Mathlib.MeasureTheory.OuterMeasure.BorelCantelli","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns : Nat → Set α\nh : Ne (tsum fun i => μ (s i)) Top.top\n⊢ Eq (μ (Filter.liminf s Filter.atTop)) 0","decl":"theorem measure_liminf_atTop_eq_zero {s : ℕ → Set α} (h : (∑' i, μ (s i)) ≠ ∞) :\n    μ (liminf s atTop) = 0 := by\n  rw [← Nat.cofinite_eq_atTop, measure_liminf_cofinite_eq_zero h]\n\n-- TODO: the next 2 lemmas are true for any filter with countable intersections, not only `ae`.\n-- Need to specify `α := Set α` below because of diamond; see https://github.com/leanprover-community/mathlib4/pull/19041\n"}
{"name":"MeasureTheory.limsup_ae_eq_of_forall_ae_eq","module":"Mathlib.MeasureTheory.OuterMeasure.BorelCantelli","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns : Nat → Set α\nt : Set α\nh : ∀ (n : Nat), (MeasureTheory.ae μ).EventuallyEq (s n) t\n⊢ (MeasureTheory.ae μ).EventuallyEq (Filter.limsup s Filter.atTop) t","decl":"theorem limsup_ae_eq_of_forall_ae_eq (s : ℕ → Set α) {t : Set α}\n    (h : ∀ n, s n =ᵐ[μ] t) : limsup (α := Set α) s atTop =ᵐ[μ] t := by\n  simp only [eventuallyEq_set, ← eventually_countable_forall] at h\n  refine eventuallyEq_set.2 <| h.mono fun x hx ↦ ?_\n  simp [mem_limsup_iff_frequently_mem, hx]\n\n-- Need to specify `α := Set α` above because of diamond; see https://github.com/leanprover-community/mathlib4/pull/19041\n"}
{"name":"MeasureTheory.liminf_ae_eq_of_forall_ae_eq","module":"Mathlib.MeasureTheory.OuterMeasure.BorelCantelli","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns : Nat → Set α\nt : Set α\nh : ∀ (n : Nat), (MeasureTheory.ae μ).EventuallyEq (s n) t\n⊢ (MeasureTheory.ae μ).EventuallyEq (Filter.liminf s Filter.atTop) t","decl":"theorem liminf_ae_eq_of_forall_ae_eq (s : ℕ → Set α) {t : Set α}\n    (h : ∀ n, s n =ᵐ[μ] t) : liminf (α := Set α) s atTop =ᵐ[μ] t := by\n  simp only [eventuallyEq_set, ← eventually_countable_forall] at h\n  refine eventuallyEq_set.2 <| h.mono fun x hx ↦ ?_\n  simp only [mem_liminf_iff_eventually_mem, hx, eventually_const]\n\n"}
