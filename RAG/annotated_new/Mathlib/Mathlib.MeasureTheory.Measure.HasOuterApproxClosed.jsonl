{"name":"MeasureTheory.tendsto_lintegral_nn_filter_of_le_const","module":"Mathlib.MeasureTheory.Measure.HasOuterApproxClosed","initialProofState":"Œ© : Type u_1\ninst‚úù‚Å¥ : TopologicalSpace Œ©\ninst‚úù¬≥ : MeasurableSpace Œ©\ninst‚úù¬≤ : OpensMeasurableSpace Œ©\nŒπ : Type u_2\nL : Filter Œπ\ninst‚úù¬π : L.IsCountablyGenerated\nŒº : MeasureTheory.Measure Œ©\ninst‚úù : MeasureTheory.IsFiniteMeasure Œº\nfs : Œπ ‚Üí BoundedContinuousFunction Œ© NNReal\nc : NNReal\nfs_le_const : Filter.Eventually (fun i => Filter.Eventually (fun œâ => LE.le ((fs i) œâ) c) (MeasureTheory.ae Œº)) L\nf : Œ© ‚Üí NNReal\nfs_lim : Filter.Eventually (fun œâ => Filter.Tendsto (fun i => (fs i) œâ) L (nhds (f œâ))) (MeasureTheory.ae Œº)\n‚ä¢ Filter.Tendsto (fun i => MeasureTheory.lintegral Œº fun œâ => ‚Üë((fs i) œâ)) L (nhds (MeasureTheory.lintegral Œº fun œâ => ‚Üë(f œâ)))","decl":"/-- A bounded convergence theorem for a finite measure:\nIf bounded continuous non-negative functions are uniformly bounded by a constant and tend to a\nlimit, then their integrals against the finite measure tend to the integral of the limit.\nThis formulation assumes:\n * the functions tend to a limit along a countably generated filter;\n * the limit is in the almost everywhere sense;\n * boundedness holds almost everywhere;\n * integration is `MeasureTheory.lintegral`, i.e., the functions and their integrals are\n   `‚Ñù‚â•0‚àû`-valued.\n-/\ntheorem tendsto_lintegral_nn_filter_of_le_const {Œπ : Type*} {L : Filter Œπ} [L.IsCountablyGenerated]\n    (Œº : Measure Œ©) [IsFiniteMeasure Œº] {fs : Œπ ‚Üí Œ© ‚Üí·µá ‚Ñù‚â•0} {c : ‚Ñù‚â•0}\n    (fs_le_const : ‚àÄ·∂† i in L, ‚àÄ·µê œâ : Œ© ‚àÇŒº, fs i œâ ‚â§ c) {f : Œ© ‚Üí ‚Ñù‚â•0}\n    (fs_lim : ‚àÄ·µê œâ : Œ© ‚àÇŒº, Tendsto (fun i ‚Ü¶ fs i œâ) L (ùìù (f œâ))) :\n    Tendsto (fun i ‚Ü¶ ‚à´‚Åª œâ, fs i œâ ‚àÇŒº) L (ùìù (‚à´‚Åª œâ, f œâ ‚àÇŒº)) := by\n  refine tendsto_lintegral_filter_of_dominated_convergence (fun _ ‚Ü¶ c)\n    (Eventually.of_forall fun i ‚Ü¶ (ENNReal.continuous_coe.comp (fs i).continuous).measurable) ?_\n    (@lintegral_const_lt_top _ _ Œº _ _ (@ENNReal.coe_ne_top c)).ne ?_\n  ¬∑ simpa only [Function.comp_apply, ENNReal.coe_le_coe] using fs_le_const\n  ¬∑ simpa only [Function.comp_apply, ENNReal.tendsto_coe] using fs_lim\n\n"}
{"name":"MeasureTheory.measure_of_cont_bdd_of_tendsto_filter_indicator","module":"Mathlib.MeasureTheory.Measure.HasOuterApproxClosed","initialProofState":"Œ© : Type u_1\ninst‚úù‚Å¥ : TopologicalSpace Œ©\ninst‚úù¬≥ : MeasurableSpace Œ©\ninst‚úù¬≤ : OpensMeasurableSpace Œ©\nŒπ : Type u_2\nL : Filter Œπ\ninst‚úù¬π : L.IsCountablyGenerated\nŒº : MeasureTheory.Measure Œ©\ninst‚úù : MeasureTheory.IsFiniteMeasure Œº\nc : NNReal\nE : Set Œ©\nE_mble : MeasurableSet E\nfs : Œπ ‚Üí BoundedContinuousFunction Œ© NNReal\nfs_bdd : Filter.Eventually (fun i => Filter.Eventually (fun œâ => LE.le ((fs i) œâ) c) (MeasureTheory.ae Œº)) L\nfs_lim : Filter.Eventually (fun œâ => Filter.Tendsto (fun i => (fs i) œâ) L (nhds (E.indicator (fun x => 1) œâ))) (MeasureTheory.ae Œº)\n‚ä¢ Filter.Tendsto (fun n => MeasureTheory.lintegral Œº fun œâ => ‚Üë((fs n) œâ)) L (nhds (Œº E))","decl":"/-- If bounded continuous functions tend to the indicator of a measurable set and are\nuniformly bounded, then their integrals against a finite measure tend to the measure of the set.\nThis formulation assumes:\n * the functions tend to a limit along a countably generated filter;\n * the limit is in the almost everywhere sense;\n * boundedness holds almost everywhere.\n-/\ntheorem measure_of_cont_bdd_of_tendsto_filter_indicator {Œπ : Type*} {L : Filter Œπ}\n    [L.IsCountablyGenerated] (Œº : Measure Œ©)\n    [IsFiniteMeasure Œº] {c : ‚Ñù‚â•0} {E : Set Œ©} (E_mble : MeasurableSet E) (fs : Œπ ‚Üí Œ© ‚Üí·µá ‚Ñù‚â•0)\n    (fs_bdd : ‚àÄ·∂† i in L, ‚àÄ·µê œâ : Œ© ‚àÇŒº, fs i œâ ‚â§ c)\n    (fs_lim : ‚àÄ·µê œâ ‚àÇŒº, Tendsto (fun i ‚Ü¶ fs i œâ) L (ùìù (indicator E (fun _ ‚Ü¶ (1 : ‚Ñù‚â•0)) œâ))) :\n    Tendsto (fun n ‚Ü¶ lintegral Œº fun œâ ‚Ü¶ fs n œâ) L (ùìù (Œº E)) := by\n  convert tendsto_lintegral_nn_filter_of_le_const Œº fs_bdd fs_lim\n  have aux : ‚àÄ œâ, indicator E (fun _ ‚Ü¶ (1 : ‚Ñù‚â•0‚àû)) œâ = ‚Üë(indicator E (fun _ ‚Ü¶ (1 : ‚Ñù‚â•0)) œâ) :=\n    fun œâ ‚Ü¶ by simp only [ENNReal.coe_indicator, ENNReal.coe_one]\n  simp_rw [‚Üê aux, lintegral_indicator E_mble]\n  simp only [lintegral_one, Measure.restrict_apply, MeasurableSet.univ, univ_inter]\n\n"}
{"name":"MeasureTheory.measure_of_cont_bdd_of_tendsto_indicator","module":"Mathlib.MeasureTheory.Measure.HasOuterApproxClosed","initialProofState":"Œ© : Type u_1\ninst‚úù¬≥ : TopologicalSpace Œ©\ninst‚úù¬≤ : MeasurableSpace Œ©\ninst‚úù¬π : OpensMeasurableSpace Œ©\nŒº : MeasureTheory.Measure Œ©\ninst‚úù : MeasureTheory.IsFiniteMeasure Œº\nc : NNReal\nE : Set Œ©\nE_mble : MeasurableSet E\nfs : Nat ‚Üí BoundedContinuousFunction Œ© NNReal\nfs_bdd : ‚àÄ (n : Nat) (œâ : Œ©), LE.le ((fs n) œâ) c\nfs_lim : Filter.Tendsto (fun n œâ => (fs n) œâ) Filter.atTop (nhds (E.indicator fun x => 1))\n‚ä¢ Filter.Tendsto (fun n => MeasureTheory.lintegral Œº fun œâ => ‚Üë((fs n) œâ)) Filter.atTop (nhds (Œº E))","decl":"/-- If a sequence of bounded continuous functions tends to the indicator of a measurable set and\nthe functions are uniformly bounded, then their integrals against a finite measure tend to the\nmeasure of the set.\n\nA similar result with more general assumptions is\n`MeasureTheory.measure_of_cont_bdd_of_tendsto_filter_indicator`.\n-/\ntheorem measure_of_cont_bdd_of_tendsto_indicator\n    (Œº : Measure Œ©) [IsFiniteMeasure Œº] {c : ‚Ñù‚â•0} {E : Set Œ©} (E_mble : MeasurableSet E)\n    (fs : ‚Ñï ‚Üí Œ© ‚Üí·µá ‚Ñù‚â•0) (fs_bdd : ‚àÄ n œâ, fs n œâ ‚â§ c)\n    (fs_lim : Tendsto (fun n œâ ‚Ü¶ fs n œâ) atTop (ùìù (indicator E fun _ ‚Ü¶ (1 : ‚Ñù‚â•0)))) :\n    Tendsto (fun n ‚Ü¶ lintegral Œº fun œâ ‚Ü¶ fs n œâ) atTop (ùìù (Œº E)) := by\n  have fs_lim' :\n    ‚àÄ œâ, Tendsto (fun n : ‚Ñï ‚Ü¶ (fs n œâ : ‚Ñù‚â•0)) atTop (ùìù (indicator E (fun _ ‚Ü¶ (1 : ‚Ñù‚â•0)) œâ)) := by\n    rw [tendsto_pi_nhds] at fs_lim\n    exact fun œâ ‚Ü¶ fs_lim œâ\n  apply measure_of_cont_bdd_of_tendsto_filter_indicator Œº E_mble fs\n    (Eventually.of_forall fun n ‚Ü¶ Eventually.of_forall (fs_bdd n)) (Eventually.of_forall fs_lim')\n\n"}
{"name":"MeasureTheory.tendsto_lintegral_thickenedIndicator_of_isClosed","module":"Mathlib.MeasureTheory.Measure.HasOuterApproxClosed","initialProofState":"Œ© : Type u_2\ninst‚úù¬≥ : MeasurableSpace Œ©\ninst‚úù¬≤ : PseudoEMetricSpace Œ©\ninst‚úù¬π : OpensMeasurableSpace Œ©\nŒº : MeasureTheory.Measure Œ©\ninst‚úù : MeasureTheory.IsFiniteMeasure Œº\nF : Set Œ©\nF_closed : IsClosed F\nŒ¥s : Nat ‚Üí Real\nŒ¥s_pos : ‚àÄ (n : Nat), LT.lt 0 (Œ¥s n)\nŒ¥s_lim : Filter.Tendsto Œ¥s Filter.atTop (nhds 0)\n‚ä¢ Filter.Tendsto (fun n => MeasureTheory.lintegral Œº fun œâ => ‚Üë((thickenedIndicator ‚ãØ F) œâ)) Filter.atTop (nhds (Œº F))","decl":"/-- The integrals of thickened indicators of a closed set against a finite measure tend to the\nmeasure of the closed set if the thickening radii tend to zero. -/\ntheorem tendsto_lintegral_thickenedIndicator_of_isClosed {Œ© : Type*} [MeasurableSpace Œ©]\n    [PseudoEMetricSpace Œ©] [OpensMeasurableSpace Œ©] (Œº : Measure Œ©) [IsFiniteMeasure Œº] {F : Set Œ©}\n    (F_closed : IsClosed F) {Œ¥s : ‚Ñï ‚Üí ‚Ñù} (Œ¥s_pos : ‚àÄ n, 0 < Œ¥s n)\n    (Œ¥s_lim : Tendsto Œ¥s atTop (ùìù 0)) :\n    Tendsto (fun n ‚Ü¶ lintegral Œº fun œâ ‚Ü¶ (thickenedIndicator (Œ¥s_pos n) F œâ : ‚Ñù‚â•0‚àû)) atTop\n      (ùìù (Œº F)) := by\n  apply measure_of_cont_bdd_of_tendsto_indicator Œº F_closed.measurableSet\n    (fun n ‚Ü¶ thickenedIndicator (Œ¥s_pos n) F) fun n œâ ‚Ü¶ thickenedIndicator_le_one (Œ¥s_pos n) F œâ\n  have key := thickenedIndicator_tendsto_indicator_closure Œ¥s_pos Œ¥s_lim F\n  rwa [F_closed.closure_eq] at key\n\n"}
{"name":"HasOuterApproxClosed.exAppr","module":"Mathlib.MeasureTheory.Measure.HasOuterApproxClosed","initialProofState":"X : Type u_1\ninst‚úù : TopologicalSpace X\nself : HasOuterApproxClosed X\nF : Set X\na‚úù : IsClosed F\n‚ä¢ Exists fun fseq => And (‚àÄ (n : Nat) (x : X), LE.le ((fseq n) x) 1) (And (‚àÄ (n : Nat) (x : X), Membership.mem F x ‚Üí LE.le 1 ((fseq n) x)) (Filter.Tendsto (fun n x => (fseq n) x) Filter.atTop (nhds (F.indicator fun x => 1))))","decl":"/-- A type class for topological spaces in which the indicator functions of closed sets can be\napproximated pointwise from above by a sequence of bounded continuous functions. -/\nclass HasOuterApproxClosed (X : Type*) [TopologicalSpace X] : Prop where\n  exAppr : ‚àÄ (F : Set X), IsClosed F ‚Üí ‚àÉ (fseq : ‚Ñï ‚Üí (X ‚Üí·µá ‚Ñù‚â•0)),\n    (‚àÄ n x, fseq n x ‚â§ 1) ‚àß (‚àÄ n x, x ‚àà F ‚Üí 1 ‚â§ fseq n x) ‚àß\n    Tendsto (fun n : ‚Ñï ‚Ü¶ (fun x ‚Ü¶ fseq n x)) atTop (ùìù (indicator F fun _ ‚Ü¶ (1 : ‚Ñù‚â•0)))\n\n"}
{"name":"HasOuterApproxClosed.apprSeq_apply_le_one","module":"Mathlib.MeasureTheory.Measure.HasOuterApproxClosed","initialProofState":"X : Type u_1\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : HasOuterApproxClosed X\nF : Set X\nhF : IsClosed F\nn : Nat\nx : X\n‚ä¢ LE.le ((hF.apprSeq n) x) 1","decl":"lemma apprSeq_apply_le_one (n : ‚Ñï) (x : X) :\n    hF.apprSeq n x ‚â§ 1 :=\n  (Exists.choose_spec (HasOuterApproxClosed.exAppr F hF)).1 n x\n\n"}
{"name":"HasOuterApproxClosed.apprSeq_apply_eq_one","module":"Mathlib.MeasureTheory.Measure.HasOuterApproxClosed","initialProofState":"X : Type u_1\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : HasOuterApproxClosed X\nF : Set X\nhF : IsClosed F\nn : Nat\nx : X\nhxF : Membership.mem F x\n‚ä¢ Eq ((hF.apprSeq n) x) 1","decl":"lemma apprSeq_apply_eq_one (n : ‚Ñï) {x : X} (hxF : x ‚àà F) :\n    hF.apprSeq n x = 1 :=\n  le_antisymm (apprSeq_apply_le_one _ _ _)\n    ((Exists.choose_spec (HasOuterApproxClosed.exAppr F hF)).2.1 n x hxF)\n\n"}
{"name":"HasOuterApproxClosed.tendsto_apprSeq","module":"Mathlib.MeasureTheory.Measure.HasOuterApproxClosed","initialProofState":"X : Type u_1\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : HasOuterApproxClosed X\nF : Set X\nhF : IsClosed F\n‚ä¢ Filter.Tendsto (fun n x => (hF.apprSeq n) x) Filter.atTop (nhds (F.indicator fun x => 1))","decl":"lemma tendsto_apprSeq :\n    Tendsto (fun n : ‚Ñï ‚Ü¶ (fun x ‚Ü¶ hF.apprSeq n x)) atTop (ùìù (indicator F fun _ ‚Ü¶ (1 : ‚Ñù‚â•0))) :=\n  (Exists.choose_spec (HasOuterApproxClosed.exAppr F hF)).2.2\n\n"}
{"name":"HasOuterApproxClosed.indicator_le_apprSeq","module":"Mathlib.MeasureTheory.Measure.HasOuterApproxClosed","initialProofState":"X : Type u_1\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : HasOuterApproxClosed X\nF : Set X\nhF : IsClosed F\nn : Nat\n‚ä¢ LE.le (F.indicator fun x => 1) ‚áë(hF.apprSeq n)","decl":"lemma indicator_le_apprSeq (n : ‚Ñï) :\n    indicator F (fun _ ‚Ü¶ 1) ‚â§ hF.apprSeq n := by\n  intro x\n  by_cases hxF : x ‚àà F\n  ¬∑ simp only [hxF, indicator_of_mem, apprSeq_apply_eq_one hF n, le_refl]\n  ¬∑ simp only [hxF, not_false_eq_true, indicator_of_not_mem, zero_le]\n\n"}
{"name":"HasOuterApproxClosed.measure_le_lintegral","module":"Mathlib.MeasureTheory.Measure.HasOuterApproxClosed","initialProofState":"X : Type u_1\ninst‚úù¬≥ : TopologicalSpace X\ninst‚úù¬≤ : HasOuterApproxClosed X\nF : Set X\nhF : IsClosed F\ninst‚úù¬π : MeasurableSpace X\ninst‚úù : OpensMeasurableSpace X\nŒº : MeasureTheory.Measure X\nn : Nat\n‚ä¢ LE.le (Œº F) (MeasureTheory.lintegral Œº fun x => ‚Üë((hF.apprSeq n) x))","decl":"/-- The measure of a closed set is at most the integral of any function in a decreasing\napproximating sequence to the indicator of the set. -/\ntheorem measure_le_lintegral [MeasurableSpace X] [OpensMeasurableSpace X] (Œº : Measure X) (n : ‚Ñï) :\n    Œº F ‚â§ ‚à´‚Åª x, (hF.apprSeq n x : ‚Ñù‚â•0‚àû) ‚àÇŒº := by\n  convert_to ‚à´‚Åª x, (F.indicator (fun _ ‚Ü¶ (1 : ‚Ñù‚â•0‚àû))) x ‚àÇŒº ‚â§ ‚à´‚Åª x, hF.apprSeq n x ‚àÇŒº\n  ¬∑ rw [lintegral_indicator hF.measurableSet]\n    simp only [lintegral_one, MeasurableSet.univ, Measure.restrict_apply, univ_inter]\n  ¬∑ apply lintegral_mono\n    intro x\n    by_cases hxF : x ‚àà F\n    ¬∑ simp only [hxF, indicator_of_mem, apprSeq_apply_eq_one hF n hxF, ENNReal.coe_one, le_refl]\n    ¬∑ simp only [hxF, not_false_eq_true, indicator_of_not_mem, zero_le]\n\n"}
{"name":"HasOuterApproxClosed.tendsto_lintegral_apprSeq","module":"Mathlib.MeasureTheory.Measure.HasOuterApproxClosed","initialProofState":"X : Type u_1\ninst‚úù‚Å¥ : TopologicalSpace X\ninst‚úù¬≥ : HasOuterApproxClosed X\nF : Set X\nhF : IsClosed F\ninst‚úù¬≤ : MeasurableSpace X\ninst‚úù¬π : OpensMeasurableSpace X\nŒº : MeasureTheory.Measure X\ninst‚úù : MeasureTheory.IsFiniteMeasure Œº\n‚ä¢ Filter.Tendsto (fun n => MeasureTheory.lintegral Œº fun x => ‚Üë((hF.apprSeq n) x)) Filter.atTop (nhds (Œº F))","decl":"/-- The integrals along a decreasing approximating sequence to the indicator of a closed set\ntend to the measure of the closed set. -/\nlemma tendsto_lintegral_apprSeq [MeasurableSpace X] [OpensMeasurableSpace X]\n    (Œº : Measure X) [IsFiniteMeasure Œº] :\n    Tendsto (fun n ‚Ü¶ ‚à´‚Åª x, hF.apprSeq n x ‚àÇŒº) atTop (ùìù ((Œº : Measure X) F)) :=\n  measure_of_cont_bdd_of_tendsto_indicator Œº hF.measurableSet hF.apprSeq\n    (apprSeq_apply_le_one hF) (tendsto_apprSeq hF)\n\n"}
{"name":"instHasOuterApproxClosedOfPseudoMetrizableSpace","module":"Mathlib.MeasureTheory.Measure.HasOuterApproxClosed","initialProofState":"X : Type u_1\ninst‚úù¬π : TopologicalSpace X\ninst‚úù : TopologicalSpace.PseudoMetrizableSpace X\n‚ä¢ HasOuterApproxClosed X","decl":"noncomputable instance (X : Type*) [TopologicalSpace X]\n    [TopologicalSpace.PseudoMetrizableSpace X] : HasOuterApproxClosed X := by\n  letI : PseudoMetricSpace X := TopologicalSpace.pseudoMetrizableSpacePseudoMetric X\n  refine ‚ü®fun F hF ‚Ü¶ ?_‚ü©\n  use fun n ‚Ü¶ thickenedIndicator (Œ¥ := (1 : ‚Ñù) / (n + 1)) Nat.one_div_pos_of_nat F\n  refine ‚ü®?_, ‚ü®?_, ?_‚ü©‚ü©\n  ¬∑ exact fun n x ‚Ü¶ thickenedIndicator_le_one Nat.one_div_pos_of_nat F x\n  ¬∑ exact fun n x hxF ‚Ü¶ one_le_thickenedIndicator_apply X Nat.one_div_pos_of_nat hxF\n  ¬∑ have key := thickenedIndicator_tendsto_indicator_closure\n              (Œ¥seq := fun (n : ‚Ñï) ‚Ü¶ (1 : ‚Ñù) / (n + 1))\n              (fun _ ‚Ü¶ Nat.one_div_pos_of_nat) tendsto_one_div_add_atTop_nhds_zero_nat F\n    rw [tendsto_pi_nhds] at *\n    intro x\n    nth_rw 2 [‚Üê IsClosed.closure_eq hF]\n    exact key x\n\n"}
{"name":"MeasureTheory.measure_isClosed_eq_of_forall_lintegral_eq_of_isFiniteMeasure","module":"Mathlib.MeasureTheory.Measure.HasOuterApproxClosed","initialProofState":"Œ© : Type u_1\ninst‚úù‚Å¥ : MeasurableSpace Œ©\ninst‚úù¬≥ : TopologicalSpace Œ©\ninst‚úù¬≤ : HasOuterApproxClosed Œ©\ninst‚úù¬π : OpensMeasurableSpace Œ©\nŒº ŒΩ : MeasureTheory.Measure Œ©\ninst‚úù : MeasureTheory.IsFiniteMeasure Œº\nh : ‚àÄ (f : BoundedContinuousFunction Œ© NNReal), Eq (MeasureTheory.lintegral Œº fun x => ‚Üë(f x)) (MeasureTheory.lintegral ŒΩ fun x => ‚Üë(f x))\nF : Set Œ©\nF_closed : IsClosed F\n‚ä¢ Eq (Œº F) (ŒΩ F)","decl":"/-- Two finite measures give equal values to all closed sets if the integrals of all bounded\ncontinuous functions with respect to the two measures agree. -/\ntheorem measure_isClosed_eq_of_forall_lintegral_eq_of_isFiniteMeasure {Œ© : Type*}\n    [MeasurableSpace Œ©] [TopologicalSpace Œ©] [HasOuterApproxClosed Œ©]\n    [OpensMeasurableSpace Œ©] {Œº ŒΩ : Measure Œ©} [IsFiniteMeasure Œº]\n    (h : ‚àÄ (f : Œ© ‚Üí·µá ‚Ñù‚â•0), ‚à´‚Åª x, f x ‚àÇŒº = ‚à´‚Åª x, f x ‚àÇŒΩ) {F : Set Œ©} (F_closed : IsClosed F) :\n    Œº F = ŒΩ F := by\n  have ŒΩ_finite : IsFiniteMeasure ŒΩ := by\n    constructor\n    have whole := h 1\n    simp only [BoundedContinuousFunction.coe_one, Pi.one_apply, ENNReal.coe_one, lintegral_const,\n      one_mul] at whole\n    simp [‚Üê whole]\n  have obs_Œº := HasOuterApproxClosed.tendsto_lintegral_apprSeq F_closed Œº\n  have obs_ŒΩ := HasOuterApproxClosed.tendsto_lintegral_apprSeq F_closed ŒΩ\n  simp_rw [h] at obs_Œº\n  exact tendsto_nhds_unique obs_Œº obs_ŒΩ\n\n"}
{"name":"MeasureTheory.ext_of_forall_lintegral_eq_of_IsFiniteMeasure","module":"Mathlib.MeasureTheory.Measure.HasOuterApproxClosed","initialProofState":"Œ© : Type u_1\ninst‚úù‚Å¥ : MeasurableSpace Œ©\ninst‚úù¬≥ : TopologicalSpace Œ©\ninst‚úù¬≤ : HasOuterApproxClosed Œ©\ninst‚úù¬π : BorelSpace Œ©\nŒº ŒΩ : MeasureTheory.Measure Œ©\ninst‚úù : MeasureTheory.IsFiniteMeasure Œº\nh : ‚àÄ (f : BoundedContinuousFunction Œ© NNReal), Eq (MeasureTheory.lintegral Œº fun x => ‚Üë(f x)) (MeasureTheory.lintegral ŒΩ fun x => ‚Üë(f x))\n‚ä¢ Eq Œº ŒΩ","decl":"/-- Two finite Borel measures are equal if the integrals of all bounded continuous functions with\nrespect to both agree. -/\ntheorem ext_of_forall_lintegral_eq_of_IsFiniteMeasure {Œ© : Type*}\n    [MeasurableSpace Œ©] [TopologicalSpace Œ©] [HasOuterApproxClosed Œ©]\n    [BorelSpace Œ©] {Œº ŒΩ : Measure Œ©} [IsFiniteMeasure Œº]\n    (h : ‚àÄ (f : Œ© ‚Üí·µá ‚Ñù‚â•0), ‚à´‚Åª x, f x ‚àÇŒº = ‚à´‚Åª x, f x ‚àÇŒΩ) :\n    Œº = ŒΩ := by\n  have key := @measure_isClosed_eq_of_forall_lintegral_eq_of_isFiniteMeasure Œ© _ _ _ _ Œº ŒΩ _ h\n  apply ext_of_generate_finite _ ?_ isPiSystem_isClosed\n  ¬∑ exact fun F F_closed ‚Ü¶ key F_closed\n  ¬∑ exact key isClosed_univ\n  ¬∑ rw [BorelSpace.measurable_eq (Œ± := Œ©), borel_eq_generateFrom_isClosed]\n\n"}
