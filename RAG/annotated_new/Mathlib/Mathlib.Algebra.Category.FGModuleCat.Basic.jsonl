{"name":"obj_carrier","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"R : Type u\ninst‚úù : Ring R\nM : FGModuleCat R\n‚ä¢ Eq ‚ÜëM.obj ‚ÜëM","decl":"@[simp] lemma obj_carrier (M : FGModuleCat R) : M.obj.carrier = M.carrier := rfl\n\n"}
{"name":"FGModuleCat.finite","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"R : Type u\ninst‚úù : Ring R\nV : FGModuleCat R\n‚ä¢ Module.Finite R ‚ÜëV","decl":"instance finite (V : FGModuleCat R) : Module.Finite R V :=\n  V.property\n\n"}
{"name":"FGModuleCat.hom_ext","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"R : Type u\ninst‚úù : Ring R\nV W : FGModuleCat R\nf g : Quiver.Hom V W\nh : Eq (ModuleCat.Hom.hom f) (ModuleCat.Hom.hom g)\n‚ä¢ Eq f g","decl":"variable {R} in\n@[ext] lemma hom_ext {V W : FGModuleCat R} {f g : V ‚ü∂ W} (h : f.hom = g.hom) : f = g :=\n  ModuleCat.hom_ext h\n\n"}
{"name":"FGModuleCat.hom_ext_iff","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"R : Type u\ninst‚úù : Ring R\nV W : FGModuleCat R\nf g : Quiver.Hom V W\n‚ä¢ Iff (Eq f g) (Eq (ModuleCat.Hom.hom f) (ModuleCat.Hom.hom g))","decl":"variable {R} in\n@[ext] lemma hom_ext {V W : FGModuleCat R} {f g : V ‚ü∂ W} (h : f.hom = g.hom) : f = g :=\n  ModuleCat.hom_ext h\n\n"}
{"name":"FGModuleCat.instFiniteCarrier","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"R : Type u\ninst‚úù : Ring R\nV : FGModuleCat R\n‚ä¢ Module.Finite R ‚ÜëV","decl":"instance (V : FGModuleCat R) : Module.Finite R V :=\n  V.property\n\n"}
{"name":"FGModuleCat.instFullModuleCatForget‚ÇÇ","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"R : Type u\ninst‚úù : Ring R\n‚ä¢ (CategoryTheory.forget‚ÇÇ (FGModuleCat R) (ModuleCat R)).Full","decl":"instance : (forget‚ÇÇ (FGModuleCat R) (ModuleCat.{u} R)).Full where\n  map_surjective f := ‚ü®f, rfl‚ü©\n\n"}
{"name":"LinearEquiv.toFGModuleCatIso_hom","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"R : Type u\ninst‚úù‚Å∂ : Ring R\nV W : Type u\ninst‚úù‚Åµ : AddCommGroup V\ninst‚úù‚Å¥ : Module R V\ninst‚úù¬≥ : Module.Finite R V\ninst‚úù¬≤ : AddCommGroup W\ninst‚úù¬π : Module R W\ninst‚úù : Module.Finite R W\ne : LinearEquiv (RingHom.id R) V W\n‚ä¢ Eq e.toFGModuleCatIso.hom (ModuleCat.ofHom ‚Üëe)","decl":"/-- Converts a `LinearEquiv` to an isomorphism in the category `FGModuleCat R`. -/\n@[simps]\ndef _root_.LinearEquiv.toFGModuleCatIso\n    {V W : Type u} [AddCommGroup V] [Module R V] [Module.Finite R V]\n    [AddCommGroup W] [Module R W] [Module.Finite R W] (e : V ‚âÉ‚Çó[R] W) :\n    FGModuleCat.of R V ‚âÖ FGModuleCat.of R W where\n  hom := ModuleCat.ofHom e.toLinearMap\n  inv := ModuleCat.ofHom e.symm.toLinearMap\n  hom_inv_id := by ext x; exact e.left_inv x\n  inv_hom_id := by ext x; exact e.right_inv x\n\n"}
{"name":"LinearEquiv.toFGModuleCatIso_inv","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"R : Type u\ninst‚úù‚Å∂ : Ring R\nV W : Type u\ninst‚úù‚Åµ : AddCommGroup V\ninst‚úù‚Å¥ : Module R V\ninst‚úù¬≥ : Module.Finite R V\ninst‚úù¬≤ : AddCommGroup W\ninst‚úù¬π : Module R W\ninst‚úù : Module.Finite R W\ne : LinearEquiv (RingHom.id R) V W\n‚ä¢ Eq e.toFGModuleCatIso.inv (ModuleCat.ofHom ‚Üëe.symm)","decl":"/-- Converts a `LinearEquiv` to an isomorphism in the category `FGModuleCat R`. -/\n@[simps]\ndef _root_.LinearEquiv.toFGModuleCatIso\n    {V W : Type u} [AddCommGroup V] [Module R V] [Module.Finite R V]\n    [AddCommGroup W] [Module R W] [Module.Finite R W] (e : V ‚âÉ‚Çó[R] W) :\n    FGModuleCat.of R V ‚âÖ FGModuleCat.of R W where\n  hom := ModuleCat.ofHom e.toLinearMap\n  inv := ModuleCat.ofHom e.symm.toLinearMap\n  hom_inv_id := by ext x; exact e.left_inv x\n  inv_hom_id := by ext x; exact e.right_inv x\n\n"}
{"name":"FGModuleCat.monoidalPredicate_module_finite","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\n‚ä¢ CategoryTheory.MonoidalCategory.MonoidalPredicate fun V => Module.Finite R ‚ÜëV","decl":"instance monoidalPredicate_module_finite :\n    MonoidalCategory.MonoidalPredicate fun V : ModuleCat.{u} R => Module.Finite R V where\n  prop_id := Module.Finite.self R\n  prop_tensor := @fun X Y _ _ => Module.Finite.tensorProduct R X Y\n\n"}
{"name":"FGModuleCat.tensorUnit_obj","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\n‚ä¢ Eq CategoryTheory.MonoidalCategoryStruct.tensorUnit.obj CategoryTheory.MonoidalCategoryStruct.tensorUnit","decl":"@[simp] lemma tensorUnit_obj : (ùüô_ (FGModuleCat R)).obj = ùüô_ (ModuleCat R) := rfl\n"}
{"name":"FGModuleCat.tensorObj_obj","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM N : FGModuleCat R\n‚ä¢ Eq (CategoryTheory.MonoidalCategoryStruct.tensorObj M N).obj (CategoryTheory.MonoidalCategoryStruct.tensorObj M.obj N.obj)","decl":"@[simp] lemma tensorObj_obj (M N : FGModuleCat.{u} R) : (M ‚äó N).obj = (M.obj ‚äó N.obj) := rfl\n\n"}
{"name":"FGModuleCat.instMonoidalPreadditive","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\n‚ä¢ CategoryTheory.MonoidalPreadditive (FGModuleCat R)","decl":"instance : MonoidalPreadditive (FGModuleCat R) := by\n  dsimp [FGModuleCat]\n  infer_instance\n\n"}
{"name":"FGModuleCat.instMonoidalLinear","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\n‚ä¢ CategoryTheory.MonoidalLinear R (FGModuleCat R)","decl":"instance : MonoidalLinear R (FGModuleCat R) := by\n  dsimp [FGModuleCat]\n  infer_instance\n\n"}
{"name":"FGModuleCat.instAdditiveModuleCatForget‚ÇÇ","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\n‚ä¢ (CategoryTheory.forget‚ÇÇ (FGModuleCat R) (ModuleCat R)).Additive","decl":"instance : (forget‚ÇÇ (FGModuleCat.{u} R) (ModuleCat.{u} R)).Additive where\n"}
{"name":"FGModuleCat.instLinearModuleCatForget‚ÇÇ","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\n‚ä¢ CategoryTheory.Functor.Linear R (CategoryTheory.forget‚ÇÇ (FGModuleCat R) (ModuleCat R))","decl":"instance : (forget‚ÇÇ (FGModuleCat.{u} R) (ModuleCat.{u} R)).Linear R where\n\n"}
{"name":"FGModuleCat.Iso.conj_eq_conj","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nV W : FGModuleCat R\ni : CategoryTheory.Iso V W\nf : CategoryTheory.End V\n‚ä¢ Eq (i.conj f) (FGModuleCat.ofHom ((FGModuleCat.isoToLinearEquiv i).conj (ModuleCat.Hom.hom f)))","decl":"theorem Iso.conj_eq_conj {V W : FGModuleCat R} (i : V ‚âÖ W) (f : End V) :\n    Iso.conj i f = FGModuleCat.ofHom (LinearEquiv.conj (isoToLinearEquiv i) f.hom) :=\n  rfl\n\n"}
{"name":"FGModuleCat.Iso.conj_hom_eq_conj","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nV W : FGModuleCat R\ni : CategoryTheory.Iso V W\nf : CategoryTheory.End V\n‚ä¢ Eq (ModuleCat.Hom.hom (i.conj f)) ((FGModuleCat.isoToLinearEquiv i).conj (ModuleCat.Hom.hom f))","decl":"theorem Iso.conj_hom_eq_conj {V W : FGModuleCat R} (i : V ‚âÖ W) (f : End V) :\n    (Iso.conj i f).hom = (LinearEquiv.conj (isoToLinearEquiv i) f.hom) :=\n  rfl\n\n"}
{"name":"FGModuleCat.instFiniteHom","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"K : Type u\ninst‚úù : Field K\nV W : FGModuleCat K\n‚ä¢ Module.Finite K (Quiver.Hom V W)","decl":"instance (V W : FGModuleCat K) : Module.Finite K (V ‚ü∂ W) :=\n  (inferInstanceAs <| Module.Finite K (V ‚Üí‚Çó[K] W)).equiv ModuleCat.homLinearEquiv.symm\n\n"}
{"name":"FGModuleCat.closedPredicateModuleFinite","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"K : Type u\ninst‚úù : Field K\n‚ä¢ CategoryTheory.MonoidalCategory.ClosedPredicate fun V => Module.Finite K ‚ÜëV","decl":"instance closedPredicateModuleFinite :\n    MonoidalCategory.ClosedPredicate fun V : ModuleCat.{u} K ‚Ü¶ Module.Finite K V where\n  prop_ihom {X Y} _ _ :=\n    (inferInstanceAs <| Module.Finite K (X ‚Üí‚Çó[K] Y)).equiv ModuleCat.homLinearEquiv.symm\n\n"}
{"name":"FGModuleCat.ihom_obj","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"K : Type u\ninst‚úù : Field K\nV W : FGModuleCat K\n‚ä¢ Eq ((CategoryTheory.ihom V).obj W) (FGModuleCat.of K (Quiver.Hom V W))","decl":"@[simp]\ntheorem ihom_obj : (ihom V).obj W = FGModuleCat.of K (V ‚ü∂ W) :=\n  rfl\n\n"}
{"name":"FGModuleCat.FGModuleCatDual_obj","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"K : Type u\ninst‚úù : Field K\nV : FGModuleCat K\n‚ä¢ Eq (FGModuleCat.FGModuleCatDual K V).obj (ModuleCat.of K (Module.Dual K ‚ÜëV))","decl":"@[simp] lemma FGModuleCatDual_obj : (FGModuleCatDual K V).obj = ModuleCat.of K (Module.Dual K V) :=\n  rfl\n"}
{"name":"FGModuleCat.FGModuleCatDual_coe","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"K : Type u\ninst‚úù : Field K\nV : FGModuleCat K\n‚ä¢ Eq (‚Üë(FGModuleCat.FGModuleCatDual K V)) (Module.Dual K ‚ÜëV)","decl":"@[simp] lemma FGModuleCatDual_coe : (FGModuleCatDual K V : Type u) = Module.Dual K V := rfl\n\n"}
{"name":"FGModuleCat.FGModuleCatCoevaluation_apply_one","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"K : Type u\ninst‚úù : Field K\nV : FGModuleCat K\n‚ä¢ Eq ((ModuleCat.Hom.hom (FGModuleCat.FGModuleCatCoevaluation K V)) 1) (Finset.univ.sum fun i => TensorProduct.tmul K ((Basis.ofVectorSpace K ‚ÜëV) i) ((Basis.ofVectorSpace K ‚ÜëV).coord i))","decl":"theorem FGModuleCatCoevaluation_apply_one :\n    (FGModuleCatCoevaluation K V).hom (1 : K) =\n      ‚àë i : Basis.ofVectorSpaceIndex K V,\n        (Basis.ofVectorSpace K V) i ‚äó‚Çú[K] (Basis.ofVectorSpace K V).coord i :=\n  coevaluation_apply_one K V\n\n"}
{"name":"FGModuleCat.FGModuleCatEvaluation_apply","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"K : Type u\ninst‚úù : Field K\nV : FGModuleCat K\nf : ‚Üë(FGModuleCat.FGModuleCatDual K V)\nx : ‚ÜëV\n‚ä¢ Eq ((ModuleCat.Hom.hom (FGModuleCat.FGModuleCatEvaluation K V)) (TensorProduct.tmul K f x)) (f.toFun x)","decl":"theorem FGModuleCatEvaluation_apply (f : FGModuleCatDual K V) (x : V) :\n    (FGModuleCatEvaluation K V).hom (f ‚äó‚Çú x) = f.toFun x :=\n  contractLeft_apply f x\n\n"}
{"name":"FGModuleCat.FGModuleCatEvaluation_apply'","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"K : Type u\ninst‚úù : Field K\nV : FGModuleCat K\nf : ‚Üë(FGModuleCat.FGModuleCatDual K V)\nx : ‚ÜëV\n‚ä¢ Eq ((ModuleCat.Hom.hom (FGModuleCat.FGModuleCatEvaluation K V)) (TensorProduct.tmul K f x)) (f.toFun x)","decl":"/-- `@[simp]`-normal form of `FGModuleCatEvaluation_apply`, where the carriers have been unfolded.\n-/\n@[simp]\ntheorem FGModuleCatEvaluation_apply' (f : FGModuleCatDual K V) (x : V) :\n    DFunLike.coe\n      (F := ((ModuleCat.of K (Module.Dual K V) ‚äó V.obj).carrier ‚Üí‚Çó[K] (ùüô_ (ModuleCat K))))\n      (FGModuleCatEvaluation K V).hom (f ‚äó‚Çú x) = f.toFun x :=\n  contractLeft_apply f x\n\n"}
{"name":"LinearMap.comp_id_fgModuleCat","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"R : Type u\ninst‚úù¬≤ : Ring R\nG : FGModuleCat R\nH : Type u\ninst‚úù¬π : AddCommGroup H\ninst‚úù : Module R H\nf : LinearMap (RingHom.id R) (‚ÜëG) H\n‚ä¢ Eq (f.comp (ModuleCat.Hom.hom (CategoryTheory.CategoryStruct.id G))) f","decl":"@[simp] theorem LinearMap.comp_id_fgModuleCat\n    {R} [Ring R] {G : FGModuleCat.{u} R} {H : Type u} [AddCommGroup H] [Module R H]\n    (f : G ‚Üí‚Çó[R] H) : f.comp (ModuleCat.Hom.hom (ùüô G)) = f :=\n  ModuleCat.hom_ext_iff.mp <| Category.id_comp (ModuleCat.ofHom f)\n\n"}
{"name":"LinearMap.id_fgModuleCat_comp","module":"Mathlib.Algebra.Category.FGModuleCat.Basic","initialProofState":"R : Type u\ninst‚úù¬≤ : Ring R\nG : Type u\ninst‚úù¬π : AddCommGroup G\ninst‚úù : Module R G\nH : FGModuleCat R\nf : LinearMap (RingHom.id R) G ‚ÜëH\n‚ä¢ Eq ((ModuleCat.Hom.hom (CategoryTheory.CategoryStruct.id H)).comp f) f","decl":"@[simp] theorem LinearMap.id_fgModuleCat_comp\n    {R} [Ring R] {G : Type u} [AddCommGroup G] [Module R G] {H : FGModuleCat.{u} R}\n    (f : G ‚Üí‚Çó[R] H) : LinearMap.comp (ModuleCat.Hom.hom (ùüô H)) f = f :=\n  ModuleCat.hom_ext_iff.mp <| Category.comp_id (ModuleCat.ofHom f)\n"}
