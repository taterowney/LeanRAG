{"name":"BddLat.mk.injEq","module":"Mathlib.Order.Category.BddLat","initialProofState":"toLat✝ : Lat\nisBoundedOrder✝ : BoundedOrder ↑toLat✝\ntoLat : Lat\nisBoundedOrder : BoundedOrder ↑toLat\n⊢ Eq (Eq (BddLat.mk toLat✝) (BddLat.mk toLat)) (And (Eq toLat✝ toLat) (HEq isBoundedOrder✝ isBoundedOrder))","decl":"/-- The category of bounded lattices with bounded lattice morphisms. -/\nstructure BddLat where\n  /-- The underlying lattice of a bounded lattice. -/\n  toLat : Lat\n  [isBoundedOrder : BoundedOrder toLat]\n\n"}
{"name":"BddLat.mk.sizeOf_spec","module":"Mathlib.Order.Category.BddLat","initialProofState":"toLat : Lat\nisBoundedOrder : BoundedOrder ↑toLat\n⊢ Eq (SizeOf.sizeOf (BddLat.mk toLat)) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toLat)) (SizeOf.sizeOf isBoundedOrder))","decl":"/-- The category of bounded lattices with bounded lattice morphisms. -/\nstructure BddLat where\n  /-- The underlying lattice of a bounded lattice. -/\n  toLat : Lat\n  [isBoundedOrder : BoundedOrder toLat]\n\n"}
{"name":"BddLat.mk.inj","module":"Mathlib.Order.Category.BddLat","initialProofState":"toLat✝ : Lat\nisBoundedOrder✝ : BoundedOrder ↑toLat✝\ntoLat : Lat\nisBoundedOrder : BoundedOrder ↑toLat\nx✝ : Eq (BddLat.mk toLat✝) (BddLat.mk toLat)\n⊢ And (Eq toLat✝ toLat) (HEq isBoundedOrder✝ isBoundedOrder)","decl":"/-- The category of bounded lattices with bounded lattice morphisms. -/\nstructure BddLat where\n  /-- The underlying lattice of a bounded lattice. -/\n  toLat : Lat\n  [isBoundedOrder : BoundedOrder toLat]\n\n"}
{"name":"BddLat.coe_of","module":"Mathlib.Order.Category.BddLat","initialProofState":"α : Type u_1\ninst✝¹ : Lattice α\ninst✝ : BoundedOrder α\n⊢ Eq (↑(BddLat.of α).toLat) α","decl":"@[simp]\ntheorem coe_of (α : Type*) [Lattice α] [BoundedOrder α] : ↥(of α) = α :=\n  rfl\n\n"}
{"name":"BddLat.coe_forget_to_bddOrd","module":"Mathlib.Order.Category.BddLat","initialProofState":"X : BddLat\n⊢ Eq ↑((CategoryTheory.forget₂ BddLat BddOrd).obj X).toPartOrd ↑X.toLat","decl":"@[simp]\ntheorem coe_forget_to_bddOrd (X : BddLat) : ↥((forget₂ BddLat BddOrd).obj X) = ↥X :=\n  rfl\n\n"}
{"name":"BddLat.coe_forget_to_lat","module":"Mathlib.Order.Category.BddLat","initialProofState":"X : BddLat\n⊢ Eq ↑((CategoryTheory.forget₂ BddLat Lat).obj X) ↑X.toLat","decl":"@[simp]\ntheorem coe_forget_to_lat (X : BddLat) : ↥((forget₂ BddLat Lat).obj X) = ↥X :=\n  rfl\n\n"}
{"name":"BddLat.coe_forget_to_semilatSup","module":"Mathlib.Order.Category.BddLat","initialProofState":"X : BddLat\n⊢ Eq ((CategoryTheory.forget₂ BddLat SemilatSupCat).obj X).X ↑X.toLat","decl":"@[simp]\ntheorem coe_forget_to_semilatSup (X : BddLat) :\n    ↥((forget₂ BddLat SemilatSupCat).obj X) = ↥X :=\n  rfl\n\n"}
{"name":"BddLat.coe_forget_to_semilatInf","module":"Mathlib.Order.Category.BddLat","initialProofState":"X : BddLat\n⊢ Eq ((CategoryTheory.forget₂ BddLat SemilatInfCat).obj X).X ↑X.toLat","decl":"@[simp]\ntheorem coe_forget_to_semilatInf (X : BddLat) :\n    ↥((forget₂ BddLat SemilatInfCat).obj X) = ↥X :=\n  rfl\n\n"}
{"name":"BddLat.forget_lat_partOrd_eq_forget_bddOrd_partOrd","module":"Mathlib.Order.Category.BddLat","initialProofState":"⊢ Eq ((CategoryTheory.forget₂ BddLat Lat).comp (CategoryTheory.forget₂ Lat PartOrd)) ((CategoryTheory.forget₂ BddLat BddOrd).comp (CategoryTheory.forget₂ BddOrd PartOrd))","decl":"theorem forget_lat_partOrd_eq_forget_bddOrd_partOrd :\n    forget₂ BddLat Lat ⋙ forget₂ Lat PartOrd =\n      forget₂ BddLat BddOrd ⋙ forget₂ BddOrd PartOrd :=\n  rfl\n\n"}
{"name":"BddLat.forget_semilatSup_partOrd_eq_forget_bddOrd_partOrd","module":"Mathlib.Order.Category.BddLat","initialProofState":"⊢ Eq ((CategoryTheory.forget₂ BddLat SemilatSupCat).comp (CategoryTheory.forget₂ SemilatSupCat PartOrd)) ((CategoryTheory.forget₂ BddLat BddOrd).comp (CategoryTheory.forget₂ BddOrd PartOrd))","decl":"theorem forget_semilatSup_partOrd_eq_forget_bddOrd_partOrd :\n    forget₂ BddLat SemilatSupCat ⋙ forget₂ SemilatSupCat PartOrd =\n      forget₂ BddLat BddOrd ⋙ forget₂ BddOrd PartOrd :=\n  rfl\n\n"}
{"name":"BddLat.forget_semilatInf_partOrd_eq_forget_bddOrd_partOrd","module":"Mathlib.Order.Category.BddLat","initialProofState":"⊢ Eq ((CategoryTheory.forget₂ BddLat SemilatInfCat).comp (CategoryTheory.forget₂ SemilatInfCat PartOrd)) ((CategoryTheory.forget₂ BddLat BddOrd).comp (CategoryTheory.forget₂ BddOrd PartOrd))","decl":"theorem forget_semilatInf_partOrd_eq_forget_bddOrd_partOrd :\n    forget₂ BddLat SemilatInfCat ⋙ forget₂ SemilatInfCat PartOrd =\n      forget₂ BddLat BddOrd ⋙ forget₂ BddOrd PartOrd :=\n  rfl\n\n"}
{"name":"BddLat.Iso.mk_hom_toLatticeHom_toSupHom_toFun","module":"Mathlib.Order.Category.BddLat","initialProofState":"α β : BddLat\ne : OrderIso ↑α.toLat ↑β.toLat\na : ↑α.toLat\n⊢ Eq ((BddLat.Iso.mk e).hom.toSupHom a) (e a)","decl":"/-- Constructs an equivalence between bounded lattices from an order isomorphism\nbetween them. -/\n@[simps]\ndef Iso.mk {α β : BddLat.{u}} (e : α ≃o β) : α ≅ β where\n  hom := (e : BoundedLatticeHom _ _)\n  inv := (e.symm : BoundedLatticeHom _ _)\n  hom_inv_id := by ext; exact e.symm_apply_apply _\n  inv_hom_id := by ext; exact e.apply_symm_apply _\n\n"}
{"name":"BddLat.Iso.mk_inv_toLatticeHom_toSupHom_toFun","module":"Mathlib.Order.Category.BddLat","initialProofState":"α β : BddLat\ne : OrderIso ↑α.toLat ↑β.toLat\na : ↑β.toLat\n⊢ Eq ((BddLat.Iso.mk e).inv.toSupHom a) (e.symm a)","decl":"/-- Constructs an equivalence between bounded lattices from an order isomorphism\nbetween them. -/\n@[simps]\ndef Iso.mk {α β : BddLat.{u}} (e : α ≃o β) : α ≅ β where\n  hom := (e : BoundedLatticeHom _ _)\n  inv := (e.symm : BoundedLatticeHom _ _)\n  hom_inv_id := by ext; exact e.symm_apply_apply _\n  inv_hom_id := by ext; exact e.apply_symm_apply _\n\n"}
{"name":"BddLat.dual_obj","module":"Mathlib.Order.Category.BddLat","initialProofState":"X : BddLat\n⊢ Eq (BddLat.dual.obj X) (BddLat.of (OrderDual ↑X.toLat))","decl":"/-- `OrderDual` as a functor. -/\n@[simps]\ndef dual : BddLat ⥤ BddLat where\n  obj X := of Xᵒᵈ\n  map {_ _} := BoundedLatticeHom.dual\n\n"}
{"name":"BddLat.dual_map","module":"Mathlib.Order.Category.BddLat","initialProofState":"x✝¹ x✝ : BddLat\na : BoundedLatticeHom ↑x✝¹.toLat ↑x✝.toLat\n⊢ Eq (BddLat.dual.map a) (BoundedLatticeHom.dual a)","decl":"/-- `OrderDual` as a functor. -/\n@[simps]\ndef dual : BddLat ⥤ BddLat where\n  obj X := of Xᵒᵈ\n  map {_ _} := BoundedLatticeHom.dual\n\n"}
{"name":"BddLat.dualEquiv_inverse","module":"Mathlib.Order.Category.BddLat","initialProofState":"⊢ Eq BddLat.dualEquiv.inverse BddLat.dual","decl":"/-- The equivalence between `BddLat` and itself induced by `OrderDual` both ways. -/\n@[simps functor inverse]\ndef dualEquiv : BddLat ≌ BddLat where\n  functor := dual\n  inverse := dual\n  unitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X\n  counitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X\n\n"}
{"name":"BddLat.dualEquiv_functor","module":"Mathlib.Order.Category.BddLat","initialProofState":"⊢ Eq BddLat.dualEquiv.functor BddLat.dual","decl":"/-- The equivalence between `BddLat` and itself induced by `OrderDual` both ways. -/\n@[simps functor inverse]\ndef dualEquiv : BddLat ≌ BddLat where\n  functor := dual\n  inverse := dual\n  unitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X\n  counitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X\n\n"}
{"name":"bddLat_dual_comp_forget_to_bddOrd","module":"Mathlib.Order.Category.BddLat","initialProofState":"⊢ Eq (BddLat.dual.comp (CategoryTheory.forget₂ BddLat BddOrd)) ((CategoryTheory.forget₂ BddLat BddOrd).comp BddOrd.dual)","decl":"theorem bddLat_dual_comp_forget_to_bddOrd :\n    BddLat.dual ⋙ forget₂ BddLat BddOrd =\n    forget₂ BddLat BddOrd ⋙ BddOrd.dual :=\n  rfl\n\n"}
{"name":"bddLat_dual_comp_forget_to_lat","module":"Mathlib.Order.Category.BddLat","initialProofState":"⊢ Eq (BddLat.dual.comp (CategoryTheory.forget₂ BddLat Lat)) ((CategoryTheory.forget₂ BddLat Lat).comp Lat.dual)","decl":"theorem bddLat_dual_comp_forget_to_lat :\n    BddLat.dual ⋙ forget₂ BddLat Lat = forget₂ BddLat Lat ⋙ Lat.dual :=\n  rfl\n\n"}
{"name":"bddLat_dual_comp_forget_to_semilatSupCat","module":"Mathlib.Order.Category.BddLat","initialProofState":"⊢ Eq (BddLat.dual.comp (CategoryTheory.forget₂ BddLat SemilatSupCat)) ((CategoryTheory.forget₂ BddLat SemilatInfCat).comp SemilatInfCat.dual)","decl":"theorem bddLat_dual_comp_forget_to_semilatSupCat :\n    BddLat.dual ⋙ forget₂ BddLat SemilatSupCat =\n    forget₂ BddLat SemilatInfCat ⋙ SemilatInfCat.dual :=\n  rfl\n\n"}
{"name":"bddLat_dual_comp_forget_to_semilatInfCat","module":"Mathlib.Order.Category.BddLat","initialProofState":"⊢ Eq (BddLat.dual.comp (CategoryTheory.forget₂ BddLat SemilatInfCat)) ((CategoryTheory.forget₂ BddLat SemilatSupCat).comp SemilatSupCat.dual)","decl":"theorem bddLat_dual_comp_forget_to_semilatInfCat :\n    BddLat.dual ⋙ forget₂ BddLat SemilatInfCat =\n    forget₂ BddLat SemilatSupCat ⋙ SemilatSupCat.dual :=\n  rfl\n\n"}
