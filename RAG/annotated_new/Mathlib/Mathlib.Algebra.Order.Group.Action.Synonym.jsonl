{"name":"OrderDual.instSMulCommClass","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝² : SMul M α\ninst✝¹ : SMul N α\ninst✝ : SMulCommClass M N α\n⊢ SMulCommClass (OrderDual M) N α","decl":"@[to_additive]\ninstance instSMulCommClass [SMul M α] [SMul N α] [SMulCommClass M N α] : SMulCommClass Mᵒᵈ N α :=\n  ‹SMulCommClass M N α›\n\n"}
{"name":"OrderDual.instVAddCommClass","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝² : VAdd M α\ninst✝¹ : VAdd N α\ninst✝ : VAddCommClass M N α\n⊢ VAddCommClass (OrderDual M) N α","decl":"@[to_additive]\ninstance instSMulCommClass [SMul M α] [SMul N α] [SMulCommClass M N α] : SMulCommClass Mᵒᵈ N α :=\n  ‹SMulCommClass M N α›\n\n"}
{"name":"OrderDual.instSMulCommClass'","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝² : SMul M α\ninst✝¹ : SMul N α\ninst✝ : SMulCommClass M N α\n⊢ SMulCommClass M (OrderDual N) α","decl":"@[to_additive]\ninstance instSMulCommClass' [SMul M α] [SMul N α] [SMulCommClass M N α] : SMulCommClass M Nᵒᵈ α :=\n  ‹SMulCommClass M N α›\n\n"}
{"name":"OrderDual.instVAddCommClass'","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝² : VAdd M α\ninst✝¹ : VAdd N α\ninst✝ : VAddCommClass M N α\n⊢ VAddCommClass M (OrderDual N) α","decl":"@[to_additive]\ninstance instSMulCommClass' [SMul M α] [SMul N α] [SMulCommClass M N α] : SMulCommClass M Nᵒᵈ α :=\n  ‹SMulCommClass M N α›\n\n"}
{"name":"OrderDual.instVAddCommClass''","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝² : VAdd M α\ninst✝¹ : VAdd N α\ninst✝ : VAddCommClass M N α\n⊢ VAddCommClass M N (OrderDual α)","decl":"@[to_additive]\ninstance instSMulCommClass'' [SMul M α] [SMul N α] [SMulCommClass M N α] : SMulCommClass M N αᵒᵈ :=\n  ‹SMulCommClass M N α›\n\n"}
{"name":"OrderDual.instSMulCommClass''","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝² : SMul M α\ninst✝¹ : SMul N α\ninst✝ : SMulCommClass M N α\n⊢ SMulCommClass M N (OrderDual α)","decl":"@[to_additive]\ninstance instSMulCommClass'' [SMul M α] [SMul N α] [SMulCommClass M N α] : SMulCommClass M N αᵒᵈ :=\n  ‹SMulCommClass M N α›\n\n"}
{"name":"OrderDual.instIsScalarTower","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝³ : SMul M N\ninst✝² : SMul M α\ninst✝¹ : SMul N α\ninst✝ : IsScalarTower M N α\n⊢ IsScalarTower (OrderDual M) N α","decl":"@[to_additive instVAddAssocClass]\ninstance instIsScalarTower [SMul M N] [SMul M α] [SMul N α] [IsScalarTower M N α] :\n    IsScalarTower Mᵒᵈ N α := ‹IsScalarTower M N α›\n\n"}
{"name":"OrderDual.instVAddAssocClass","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝³ : VAdd M N\ninst✝² : VAdd M α\ninst✝¹ : VAdd N α\ninst✝ : VAddAssocClass M N α\n⊢ VAddAssocClass (OrderDual M) N α","decl":"@[to_additive instVAddAssocClass]\ninstance instIsScalarTower [SMul M N] [SMul M α] [SMul N α] [IsScalarTower M N α] :\n    IsScalarTower Mᵒᵈ N α := ‹IsScalarTower M N α›\n\n"}
{"name":"OrderDual.instIsScalarTower'","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝³ : SMul M N\ninst✝² : SMul M α\ninst✝¹ : SMul N α\ninst✝ : IsScalarTower M N α\n⊢ IsScalarTower M (OrderDual N) α","decl":"@[to_additive instVAddAssocClass']\ninstance instIsScalarTower' [SMul M N] [SMul M α] [SMul N α] [IsScalarTower M N α] :\n    IsScalarTower M Nᵒᵈ α := ‹IsScalarTower M N α›\n\n"}
{"name":"OrderDual.instVAddAssocClass'","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝³ : VAdd M N\ninst✝² : VAdd M α\ninst✝¹ : VAdd N α\ninst✝ : VAddAssocClass M N α\n⊢ VAddAssocClass M (OrderDual N) α","decl":"@[to_additive instVAddAssocClass']\ninstance instIsScalarTower' [SMul M N] [SMul M α] [SMul N α] [IsScalarTower M N α] :\n    IsScalarTower M Nᵒᵈ α := ‹IsScalarTower M N α›\n\n"}
{"name":"OrderDual.instIsScalarTower''","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝³ : SMul M N\ninst✝² : SMul M α\ninst✝¹ : SMul N α\ninst✝ : IsScalarTower M N α\n⊢ IsScalarTower M N (OrderDual α)","decl":"@[to_additive instVAddAssocClass'']\ninstance instIsScalarTower'' [SMul M N] [SMul M α] [SMul N α] [IsScalarTower M N α] :\n    IsScalarTower M N αᵒᵈ := ‹IsScalarTower M N α›\n\n"}
{"name":"OrderDual.instVAddAssocClass''","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝³ : VAdd M N\ninst✝² : VAdd M α\ninst✝¹ : VAdd N α\ninst✝ : VAddAssocClass M N α\n⊢ VAddAssocClass M N (OrderDual α)","decl":"@[to_additive instVAddAssocClass'']\ninstance instIsScalarTower'' [SMul M N] [SMul M α] [SMul N α] [IsScalarTower M N α] :\n    IsScalarTower M N αᵒᵈ := ‹IsScalarTower M N α›\n\n"}
{"name":"Lex.instSMulCommClass","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝² : SMul M α\ninst✝¹ : SMul N α\ninst✝ : SMulCommClass M N α\n⊢ SMulCommClass (Lex M) N α","decl":"@[to_additive]\ninstance instSMulCommClass [SMul M α] [SMul N α] [SMulCommClass M N α] :\n    SMulCommClass (Lex M) N α := ‹SMulCommClass M N α›\n\n"}
{"name":"Lex.instVAddCommClass","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝² : VAdd M α\ninst✝¹ : VAdd N α\ninst✝ : VAddCommClass M N α\n⊢ VAddCommClass (Lex M) N α","decl":"@[to_additive]\ninstance instSMulCommClass [SMul M α] [SMul N α] [SMulCommClass M N α] :\n    SMulCommClass (Lex M) N α := ‹SMulCommClass M N α›\n\n"}
{"name":"Lex.instSMulCommClass'","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝² : SMul M α\ninst✝¹ : SMul N α\ninst✝ : SMulCommClass M N α\n⊢ SMulCommClass M (Lex N) α","decl":"@[to_additive]\ninstance instSMulCommClass' [SMul M α] [SMul N α] [SMulCommClass M N α] :\n    SMulCommClass M (Lex N) α := ‹SMulCommClass M N α›\n\n"}
{"name":"Lex.instVAddCommClass'","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝² : VAdd M α\ninst✝¹ : VAdd N α\ninst✝ : VAddCommClass M N α\n⊢ VAddCommClass M (Lex N) α","decl":"@[to_additive]\ninstance instSMulCommClass' [SMul M α] [SMul N α] [SMulCommClass M N α] :\n    SMulCommClass M (Lex N) α := ‹SMulCommClass M N α›\n\n"}
{"name":"Lex.instVAddCommClass''","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝² : VAdd M α\ninst✝¹ : VAdd N α\ninst✝ : VAddCommClass M N α\n⊢ VAddCommClass M N (Lex α)","decl":"@[to_additive]\ninstance instSMulCommClass'' [SMul M α] [SMul N α] [SMulCommClass M N α] :\n    SMulCommClass M N (Lex α) := ‹SMulCommClass M N α›\n\n"}
{"name":"Lex.instSMulCommClass''","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝² : SMul M α\ninst✝¹ : SMul N α\ninst✝ : SMulCommClass M N α\n⊢ SMulCommClass M N (Lex α)","decl":"@[to_additive]\ninstance instSMulCommClass'' [SMul M α] [SMul N α] [SMulCommClass M N α] :\n    SMulCommClass M N (Lex α) := ‹SMulCommClass M N α›\n\n"}
{"name":"Lex.instIsScalarTower","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝³ : SMul M N\ninst✝² : SMul M α\ninst✝¹ : SMul N α\ninst✝ : IsScalarTower M N α\n⊢ IsScalarTower (Lex M) N α","decl":"@[to_additive instVAddAssocClass]\ninstance instIsScalarTower [SMul M N] [SMul M α] [SMul N α] [IsScalarTower M N α] :\n    IsScalarTower (Lex M) N α := ‹IsScalarTower M N α›\n\n"}
{"name":"Lex.instVAddAssocClass","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝³ : VAdd M N\ninst✝² : VAdd M α\ninst✝¹ : VAdd N α\ninst✝ : VAddAssocClass M N α\n⊢ VAddAssocClass (Lex M) N α","decl":"@[to_additive instVAddAssocClass]\ninstance instIsScalarTower [SMul M N] [SMul M α] [SMul N α] [IsScalarTower M N α] :\n    IsScalarTower (Lex M) N α := ‹IsScalarTower M N α›\n\n"}
{"name":"Lex.instVAddAssocClass'","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝³ : VAdd M N\ninst✝² : VAdd M α\ninst✝¹ : VAdd N α\ninst✝ : VAddAssocClass M N α\n⊢ VAddAssocClass M (Lex N) α","decl":"@[to_additive instVAddAssocClass']\ninstance instIsScalarTower' [SMul M N] [SMul M α] [SMul N α] [IsScalarTower M N α] :\n    IsScalarTower M (Lex N) α := ‹IsScalarTower M N α›\n\n"}
{"name":"Lex.instIsScalarTower'","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝³ : SMul M N\ninst✝² : SMul M α\ninst✝¹ : SMul N α\ninst✝ : IsScalarTower M N α\n⊢ IsScalarTower M (Lex N) α","decl":"@[to_additive instVAddAssocClass']\ninstance instIsScalarTower' [SMul M N] [SMul M α] [SMul N α] [IsScalarTower M N α] :\n    IsScalarTower M (Lex N) α := ‹IsScalarTower M N α›\n\n"}
{"name":"Lex.instVAddAssocClass''","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝³ : VAdd M N\ninst✝² : VAdd M α\ninst✝¹ : VAdd N α\ninst✝ : VAddAssocClass M N α\n⊢ VAddAssocClass M N (Lex α)","decl":"@[to_additive instVAddAssocClass'']\ninstance instIsScalarTower'' [SMul M N] [SMul M α] [SMul N α] [IsScalarTower M N α] :\n    IsScalarTower M N (Lex α) := ‹IsScalarTower M N α›\n\n"}
{"name":"Lex.instIsScalarTower''","module":"Mathlib.Algebra.Order.Group.Action.Synonym","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝³ : SMul M N\ninst✝² : SMul M α\ninst✝¹ : SMul N α\ninst✝ : IsScalarTower M N α\n⊢ IsScalarTower M N (Lex α)","decl":"@[to_additive instVAddAssocClass'']\ninstance instIsScalarTower'' [SMul M N] [SMul M α] [SMul N α] [IsScalarTower M N α] :\n    IsScalarTower M N (Lex α) := ‹IsScalarTower M N α›\n\n"}
