{"name":"Complex.hasSum_taylorSeries_on_ball","module":"Mathlib.Analysis.Complex.TaylorSeries","initialProofState":"E : Type u_1\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Complex E\ninst✝ : CompleteSpace E\nf : Complex → E\nc : Complex\nr : Real\nhf : DifferentiableOn Complex f (Metric.ball c r)\nz : Complex\nhz : Membership.mem (Metric.ball c r) z\n⊢ HasSum (fun n => HSMul.hSMul (Inv.inv ↑n.factorial) (HSMul.hSMul (HPow.hPow (HSub.hSub z c) n) (iteratedDeriv n f c))) (f z)","decl":"include hf hz in\n/-- A function that is complex differentiable on the open ball of radius `r` around `c`\nis given by evaluating its Taylor series at `c` on this open ball. -/\nlemma hasSum_taylorSeries_on_ball :\n    HasSum (fun n : ℕ ↦ (n ! : ℂ)⁻¹ • (z - c) ^ n • iteratedDeriv n f c) (f z) := by\n  obtain ⟨r', hr', hr'₀, hzr'⟩ : ∃ r' < r, 0 < r' ∧ z ∈ Metric.ball c r' := by\n    obtain ⟨r', h₁, h₂⟩ := exists_between (Metric.mem_ball'.mp hz)\n    exact ⟨r', h₂, Metric.pos_of_mem_ball h₁, Metric.mem_ball'.mpr h₁⟩\n  lift r' to NNReal using hr'₀.le\n  have hz' : z - c ∈ EMetric.ball 0 r' := by\n    rw [Metric.emetric_ball_nnreal]\n    exact mem_ball_zero_iff.mpr hzr'\n  have H := (hf.mono <| Metric.closedBall_subset_ball hr').hasFPowerSeriesOnBall hr'₀\n      |>.hasSum_iteratedFDeriv hz'\n  simp only [add_sub_cancel] at H\n  convert H using 4 with n\n  simpa only [iteratedDeriv_eq_iteratedFDeriv, smul_eq_mul, mul_one, Finset.prod_const,\n    Finset.card_fin]\n    using ((iteratedFDeriv ℂ n f c).map_smul_univ (fun _ ↦ z - c) (fun _ ↦ 1)).symm\n\n"}
{"name":"Complex.taylorSeries_eq_on_ball","module":"Mathlib.Analysis.Complex.TaylorSeries","initialProofState":"E : Type u_1\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Complex E\ninst✝ : CompleteSpace E\nf : Complex → E\nc : Complex\nr : Real\nhf : DifferentiableOn Complex f (Metric.ball c r)\nz : Complex\nhz : Membership.mem (Metric.ball c r) z\n⊢ Eq (tsum fun n => HSMul.hSMul (Inv.inv ↑n.factorial) (HSMul.hSMul (HPow.hPow (HSub.hSub z c) n) (iteratedDeriv n f c))) (f z)","decl":"include hf hz in\n/-- A function that is complex differentiable on the open ball of radius `r` around `c`\nis given by evaluating its Taylor series at `c` on this open ball. -/\nlemma taylorSeries_eq_on_ball :\n    ∑' n : ℕ, (n ! : ℂ)⁻¹ • (z - c) ^ n • iteratedDeriv n f c = f z :=\n  (hasSum_taylorSeries_on_ball hf hz).tsum_eq\n\n"}
{"name":"Complex.taylorSeries_eq_on_ball'","module":"Mathlib.Analysis.Complex.TaylorSeries","initialProofState":"c : Complex\nr : Real\nz : Complex\nhz : Membership.mem (Metric.ball c r) z\nf : Complex → Complex\nhf : DifferentiableOn Complex f (Metric.ball c r)\n⊢ Eq (tsum fun n => HMul.hMul (HMul.hMul (Inv.inv ↑n.factorial) (iteratedDeriv n f c)) (HPow.hPow (HSub.hSub z c) n)) (f z)","decl":"include hz in\n/-- A function that is complex differentiable on the open ball of radius `r` around `c`\nis given by evaluating its Taylor series at `c` on this open ball. -/\nlemma taylorSeries_eq_on_ball' {f : ℂ → ℂ} (hf : DifferentiableOn ℂ f (Metric.ball c r)) :\n    ∑' n : ℕ, (n ! : ℂ)⁻¹ * iteratedDeriv n f c * (z - c) ^ n = f z := by\n  convert taylorSeries_eq_on_ball hf hz using 3 with n\n  rw [mul_right_comm, smul_eq_mul, smul_eq_mul, mul_assoc]\n\n"}
{"name":"Complex.hasSum_taylorSeries_on_emetric_ball","module":"Mathlib.Analysis.Complex.TaylorSeries","initialProofState":"E : Type u_1\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Complex E\ninst✝ : CompleteSpace E\nf : Complex → E\nc : Complex\nr : ENNReal\nhf : DifferentiableOn Complex f (EMetric.ball c r)\nz : Complex\nhz : Membership.mem (EMetric.ball c r) z\n⊢ HasSum (fun n => HSMul.hSMul (Inv.inv ↑n.factorial) (HSMul.hSMul (HPow.hPow (HSub.hSub z c) n) (iteratedDeriv n f c))) (f z)","decl":"include hf hz in\n/-- A function that is complex differentiable on the open ball of radius `r ≤ ∞` around `c`\nis given by evaluating its Taylor series at `c` on this open ball. -/\nlemma hasSum_taylorSeries_on_emetric_ball :\n    HasSum (fun n : ℕ ↦ (n ! : ℂ)⁻¹ • (z - c) ^ n • iteratedDeriv n f c) (f z) := by\n  obtain ⟨r', hzr', hr'⟩ := exists_between (EMetric.mem_ball'.mp hz)\n  lift r' to NNReal using ne_top_of_lt hr'\n  rw [← EMetric.mem_ball', Metric.emetric_ball_nnreal] at hzr'\n  refine hasSum_taylorSeries_on_ball ?_ hzr'\n  rw [← Metric.emetric_ball_nnreal]\n  exact hf.mono <| EMetric.ball_subset_ball hr'.le\n\n"}
{"name":"Complex.taylorSeries_eq_on_emetric_ball","module":"Mathlib.Analysis.Complex.TaylorSeries","initialProofState":"E : Type u_1\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Complex E\ninst✝ : CompleteSpace E\nf : Complex → E\nc : Complex\nr : ENNReal\nhf : DifferentiableOn Complex f (EMetric.ball c r)\nz : Complex\nhz : Membership.mem (EMetric.ball c r) z\n⊢ Eq (tsum fun n => HSMul.hSMul (Inv.inv ↑n.factorial) (HSMul.hSMul (HPow.hPow (HSub.hSub z c) n) (iteratedDeriv n f c))) (f z)","decl":"include hf hz in\n/-- A function that is complex differentiable on the open ball of radius `r ≤ ∞` around `c`\nis given by evaluating its Taylor series at `c` on this open ball. -/\nlemma taylorSeries_eq_on_emetric_ball :\n    ∑' n : ℕ, (n ! : ℂ)⁻¹ • (z - c) ^ n • iteratedDeriv n f c = f z :=\n  (hasSum_taylorSeries_on_emetric_ball hf hz).tsum_eq\n\n"}
{"name":"Complex.taylorSeries_eq_on_emetric_ball'","module":"Mathlib.Analysis.Complex.TaylorSeries","initialProofState":"c : Complex\nr : ENNReal\nz : Complex\nhz : Membership.mem (EMetric.ball c r) z\nf : Complex → Complex\nhf : DifferentiableOn Complex f (EMetric.ball c r)\n⊢ Eq (tsum fun n => HMul.hMul (HMul.hMul (Inv.inv ↑n.factorial) (iteratedDeriv n f c)) (HPow.hPow (HSub.hSub z c) n)) (f z)","decl":"include hz in\n/-- A function that is complex differentiable on the open ball of radius `r ≤ ∞` around `c`\nis given by evaluating its Taylor series at `c` on this open ball. -/\nlemma taylorSeries_eq_on_emetric_ball' {f : ℂ → ℂ} (hf : DifferentiableOn ℂ f (EMetric.ball c r)) :\n    ∑' n : ℕ, (n ! : ℂ)⁻¹ * iteratedDeriv n f c * (z - c) ^ n = f z := by\n  convert taylorSeries_eq_on_emetric_ball hf hz using 3 with n\n  rw [mul_right_comm, smul_eq_mul, smul_eq_mul, mul_assoc]\n\n"}
{"name":"Complex.hasSum_taylorSeries_of_entire","module":"Mathlib.Analysis.Complex.TaylorSeries","initialProofState":"E : Type u_1\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Complex E\ninst✝ : CompleteSpace E\nf : Complex → E\nhf : Differentiable Complex f\nc z : Complex\n⊢ HasSum (fun n => HSMul.hSMul (Inv.inv ↑n.factorial) (HSMul.hSMul (HPow.hPow (HSub.hSub z c) n) (iteratedDeriv n f c))) (f z)","decl":"include hf in\n/-- A function that is complex differentiable on the complex plane is given by evaluating\nits Taylor series at any point `c`. -/\nlemma hasSum_taylorSeries_of_entire :\n    HasSum (fun n : ℕ ↦ (n ! : ℂ)⁻¹ • (z - c) ^ n • iteratedDeriv n f c) (f z) :=\n  hasSum_taylorSeries_on_emetric_ball hf.differentiableOn <| EMetric.mem_ball.mpr <|\n    edist_lt_top ..\n\n"}
{"name":"Complex.taylorSeries_eq_of_entire","module":"Mathlib.Analysis.Complex.TaylorSeries","initialProofState":"E : Type u_1\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Complex E\ninst✝ : CompleteSpace E\nf : Complex → E\nhf : Differentiable Complex f\nc z : Complex\n⊢ Eq (tsum fun n => HSMul.hSMul (Inv.inv ↑n.factorial) (HSMul.hSMul (HPow.hPow (HSub.hSub z c) n) (iteratedDeriv n f c))) (f z)","decl":"include hf in\n/-- A function that is complex differentiable on the complex plane is given by evaluating\nits Taylor series at any point `c`. -/\nlemma taylorSeries_eq_of_entire :\n    ∑' n : ℕ, (n ! : ℂ)⁻¹ • (z - c) ^ n • iteratedDeriv n f c = f z :=\n  (hasSum_taylorSeries_of_entire hf c z).tsum_eq\n\n"}
{"name":"Complex.taylorSeries_eq_of_entire'","module":"Mathlib.Analysis.Complex.TaylorSeries","initialProofState":"c z : Complex\nf : Complex → Complex\nhf : Differentiable Complex f\n⊢ Eq (tsum fun n => HMul.hMul (HMul.hMul (Inv.inv ↑n.factorial) (iteratedDeriv n f c)) (HPow.hPow (HSub.hSub z c) n)) (f z)","decl":"/-- A function that is complex differentiable on the complex plane is given by evaluating\nits Taylor series at any point `c`. -/\nlemma taylorSeries_eq_of_entire' {f : ℂ → ℂ} (hf : Differentiable ℂ f) :\n    ∑' n : ℕ, (n ! : ℂ)⁻¹ * iteratedDeriv n f c * (z - c) ^ n = f z := by\n  convert taylorSeries_eq_of_entire hf c z using 3 with n\n  rw [mul_right_comm, smul_eq_mul, smul_eq_mul, mul_assoc]\n\n"}
